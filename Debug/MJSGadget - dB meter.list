
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000234c0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003130  08023580  08023580  00024580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080266b0  080266b0  00028428  2**0
                  CONTENTS
  4 .ARM          00000008  080266b0  080266b0  000276b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080266b8  080266b8  00028428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080266b8  080266b8  000276b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080266bc  080266bc  000276bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000428  20000000  080266c0  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fb0  20000428  08026ae8  00028428  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200033d8  08026ae8  000293d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00028428  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034136  00000000  00000000  00028450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000937b  00000000  00000000  0005c586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad8  00000000  00000000  00065908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fca  00000000  00000000  000683e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b70  00000000  00000000  0006a3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041bb2  00000000  00000000  0008cf1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0967  00000000  00000000  000ceacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016f433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae8c  00000000  00000000  0016f4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017a370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017a3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017c959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000428 	.word	0x20000428
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023568 	.word	0x08023568

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000042c 	.word	0x2000042c
 8000104:	08023568 	.word	0x08023568

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08025890 	.word	0x08025890
 8000e0c:	080258d0 	.word	0x080258d0
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802590c 	.word	0x0802590c
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 8003654:	4b02      	ldr	r3, [pc, #8]	@ (8003660 <forceNTPupdate+0x10>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000028 	.word	0x20000028

08003664 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 800366c:	f00b fd86 	bl	800f17c <HAL_GetTick>
 8003670:	0002      	movs	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <setESPTimeStamp+0x20>)
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b002      	add	sp, #8
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000618 	.word	0x20000618

08003688 <setCharges>:
void setCharges(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800368c:	f002 ff2a 	bl	80064e4 <ReadBatteryVoltage>
 8003690:	1c02      	adds	r2, r0, #0
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <setCharges+0x3c>)
 8003694:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 8003696:	f002 ff87 	bl	80065a8 <ReadSolarVoltage>
 800369a:	0003      	movs	r3, r0
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff fe8f 	bl	80033c0 <__aeabi_i2d>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4b08      	ldr	r3, [pc, #32]	@ (80036c8 <setCharges+0x40>)
 80036a6:	f7fe fb85 	bl	8001db4 <__aeabi_ddiv>
 80036aa:	0002      	movs	r2, r0
 80036ac:	000b      	movs	r3, r1
 80036ae:	0010      	movs	r0, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	f7ff ff1f 	bl	80034f4 <__aeabi_d2f>
 80036b6:	1c02      	adds	r2, r0, #0
 80036b8:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <setCharges+0x44>)
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	20000570 	.word	0x20000570
 80036c8:	408f4000 	.word	0x408f4000
 80036cc:	20000574 	.word	0x20000574

080036d0 <checkEEprom>:
bool checkEEprom(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80036d6:	4b15      	ldr	r3, [pc, #84]	@ (800372c <checkEEprom+0x5c>)
 80036d8:	4815      	ldr	r0, [pc, #84]	@ (8003730 <checkEEprom+0x60>)
 80036da:	220c      	movs	r2, #12
 80036dc:	0019      	movs	r1, r3
 80036de:	f003 ff07 	bl	80074f0 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00e      	b.n	8003708 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <checkEEprom+0x5c>)
 80036f0:	5cd3      	ldrb	r3, [r2, r3]
 80036f2:	001a      	movs	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <checkEEprom+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <checkEEprom+0x64>)
 80036fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781a      	ldrb	r2, [r3, #0]
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	3201      	adds	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b0b      	cmp	r3, #11
 800370e:	d9ec      	bls.n	80036ea <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <checkEEprom+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	425a      	negs	r2, r3
 8003716:	4153      	adcs	r3, r2
 8003718:	b2da      	uxtb	r2, r3
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <checkEEprom+0x68>)
 800371c:	701a      	strb	r2, [r3, #0]
  return test;
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <checkEEprom+0x68>)
 8003720:	781b      	ldrb	r3, [r3, #0]
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	20000658 	.word	0x20000658
 8003730:	0808000c 	.word	0x0808000c
 8003734:	20000664 	.word	0x20000664
 8003738:	20000668 	.word	0x20000668

0800373c <checkName>:
bool checkName(){
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <checkName+0x5c>)
 8003744:	4815      	ldr	r0, [pc, #84]	@ (800379c <checkName+0x60>)
 8003746:	2220      	movs	r2, #32
 8003748:	0019      	movs	r1, r3
 800374a:	f003 fed1 	bl	80074f0 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e00e      	b.n	8003774 <checkName+0x38>
    configSum += nameConfig[i];
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	@ (8003798 <checkName+0x5c>)
 800375c:	5cd3      	ldrb	r3, [r2, r3]
 800375e:	001a      	movs	r2, r3
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <checkName+0x64>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <checkName+0x64>)
 8003768:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	1dfb      	adds	r3, r7, #7
 8003770:	3201      	adds	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b0b      	cmp	r3, #11
 800377a:	d9ec      	bls.n	8003756 <checkName+0x1a>
  }
  test = (configSum != 0);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <checkName+0x64>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	4193      	sbcs	r3, r2
 8003784:	b2da      	uxtb	r2, r3
 8003786:	4b07      	ldr	r3, [pc, #28]	@ (80037a4 <checkName+0x68>)
 8003788:	701a      	strb	r2, [r3, #0]
  return test;
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <checkName+0x68>)
 800378c:	781b      	ldrb	r3, [r3, #0]
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	b002      	add	sp, #8
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	2000066c 	.word	0x2000066c
 800379c:	08080090 	.word	0x08080090
 80037a0:	2000068c 	.word	0x2000068c
 80037a4:	20000690 	.word	0x20000690

080037a8 <setHIDS>:


void setHIDS(float temp, float humid){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 80037b2:	4b05      	ldr	r3, [pc, #20]	@ (80037c8 <setHIDS+0x20>)
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 80037b8:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <setHIDS+0x20>)
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b002      	add	sp, #8
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	20000624 	.word	0x20000624

080037cc <setVOC>:

void setVOC(uint16_t voc) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	0002      	movs	r2, r0
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 80037d8:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <setVOC+0x30>)
 80037da:	1dba      	adds	r2, r7, #6
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	841a      	strh	r2, [r3, #32]
  if (voc > MeasVal.VOCIndexmax) {
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <setVOC+0x30>)
 80037e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80037e4:	1dba      	adds	r2, r7, #6
 80037e6:	8812      	ldrh	r2, [r2, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <setVOC+0x28>
    MeasVal.VOCIndexmax = voc;
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <setVOC+0x30>)
 80037ee:	1dba      	adds	r2, r7, #6
 80037f0:	8812      	ldrh	r2, [r2, #0]
 80037f2:	845a      	strh	r2, [r3, #34]	@ 0x22
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000624 	.word	0x20000624

08003800 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <setMic+0x28>)
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	629a      	str	r2, [r3, #40]	@ 0x28
  MeasVal.dBApeak = dBmax;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <setMic+0x28>)
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.dBAaverage = dBAavg;
 8003818:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <setMic+0x28>)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000624 	.word	0x20000624

0800382c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	0002      	movs	r2, r0
 8003834:	1dbb      	adds	r3, r7, #6
 8003836:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd fec7 	bl	80015d0 <__aeabi_i2f>
 8003842:	1c03      	adds	r3, r0, #0
 8003844:	490d      	ldr	r1, [pc, #52]	@ (800387c <setPM2p5+0x50>)
 8003846:	1c18      	adds	r0, r3, #0
 8003848:	f7fd f9c4 	bl	8000bd4 <__aeabi_fdiv>
 800384c:	1c03      	adds	r3, r0, #0
 800384e:	1c1a      	adds	r2, r3, #0
 8003850:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <setPM2p5+0x54>)
 8003852:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <setPM2p5+0x54>)
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <setPM2p5+0x54>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	1c19      	adds	r1, r3, #0
 800385e:	1c10      	adds	r0, r2, #0
 8003860:	f7fc fe7a 	bl	8000558 <__aeabi_fcmpgt>
 8003864:	1e03      	subs	r3, r0, #0
 8003866:	d100      	bne.n	800386a <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8003868:	e003      	b.n	8003872 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 800386a:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <setPM2p5+0x54>)
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <setPM2p5+0x54>)
 8003870:	60da      	str	r2, [r3, #12]
}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	41200000 	.word	0x41200000
 8003880:	20000624 	.word	0x20000624

08003884 <setPM10>:

void setPM10(uint16_t PM10) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	0002      	movs	r2, r0
 800388c:	1dbb      	adds	r3, r7, #6
 800388e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8003890:	1dbb      	adds	r3, r7, #6
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fe9b 	bl	80015d0 <__aeabi_i2f>
 800389a:	1c03      	adds	r3, r0, #0
 800389c:	490d      	ldr	r1, [pc, #52]	@ (80038d4 <setPM10+0x50>)
 800389e:	1c18      	adds	r0, r3, #0
 80038a0:	f7fd f998 	bl	8000bd4 <__aeabi_fdiv>
 80038a4:	1c03      	adds	r3, r0, #0
 80038a6:	1c1a      	adds	r2, r3, #0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <setPM10+0x54>)
 80038aa:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 80038ac:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <setPM10+0x54>)
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <setPM10+0x54>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	1c19      	adds	r1, r3, #0
 80038b6:	1c10      	adds	r0, r2, #0
 80038b8:	f7fc fe4e 	bl	8000558 <__aeabi_fcmpgt>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d100      	bne.n	80038c2 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 80038c0:	e003      	b.n	80038ca <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 80038c2:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <setPM10+0x54>)
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	4b04      	ldr	r3, [pc, #16]	@ (80038d8 <setPM10+0x54>)
 80038c8:	615a      	str	r2, [r3, #20]
}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b002      	add	sp, #8
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	41200000 	.word	0x41200000
 80038d8:	20000624 	.word	0x20000624

080038dc <setNOx>:

void setNOx(uint16_t nox) {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	0002      	movs	r2, r0
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <setNOx+0x30>)
 80038ea:	1dba      	adds	r2, r7, #6
 80038ec:	8812      	ldrh	r2, [r2, #0]
 80038ee:	849a      	strh	r2, [r3, #36]	@ 0x24
  if (nox > MeasVal.airNOxmax) {
 80038f0:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setNOx+0x30>)
 80038f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d903      	bls.n	8003904 <setNOx+0x28>
    MeasVal.airNOxmax = nox;
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <setNOx+0x30>)
 80038fe:	1dba      	adds	r2, r7, #6
 8003900:	8812      	ldrh	r2, [r2, #0]
 8003902:	84da      	strh	r2, [r3, #38]	@ 0x26
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000624 	.word	0x20000624

08003910 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8003914:	f005 fd38 	bl	8009388 <sen5x_Get_sen5x_enable_state>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d008      	beq.n	800392e <resetMaxMeasurementValues+0x1e>
    MeasVal.PM2p5max = 0.0f;
 800391c:	4b07      	ldr	r3, [pc, #28]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800391e:	2200      	movs	r2, #0
 8003920:	60da      	str	r2, [r3, #12]
    MeasVal.PM10p0max = 0.0f;
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
    MeasVal.airNOxmax = 0;
 8003928:	4b04      	ldr	r3, [pc, #16]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 800392a:	2200      	movs	r2, #0
 800392c:	84da      	strh	r2, [r3, #38]	@ 0x26
  }
  MeasVal.VOCIndexmax = 0;
 800392e:	4b03      	ldr	r3, [pc, #12]	@ (800393c <resetMaxMeasurementValues+0x2c>)
 8003930:	2200      	movs	r2, #0
 8003932:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000624 	.word	0x20000624

08003940 <SetConfigMode>:

void SetConfigMode(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <SetConfigMode+0x30>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	4053      	eors	r3, r2
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8003952:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <SetConfigMode+0x34>)
 8003954:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <SetConfigMode+0x38>)
 8003956:	0019      	movs	r1, r3
 8003958:	2003      	movs	r0, #3
 800395a:	f00a ffcb 	bl	800e8f4 <CreateLine>
  }
  ReconfigSet = true;
 800395e:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <SetConfigMode+0x30>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <SetConfigMode+0x3c>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
}
 800396a:	46c0      	nop			@ (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	2000054f 	.word	0x2000054f
 8003974:	08023580 	.word	0x08023580
 8003978:	080235a0 	.word	0x080235a0
 800397c:	200001f7 	.word	0x200001f7

08003980 <GetReconfigMode>:

bool GetReconfigMode() {
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8003984:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <GetReconfigMode+0x10>)
 8003986:	781b      	ldrb	r3, [r3, #0]
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	2000054f 	.word	0x2000054f

08003994 <ESP_GetUID>:

void ESP_GetUID(){
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003998:	f00b fc3a 	bl	800f210 <HAL_GetUIDw0>
 800399c:	0002      	movs	r2, r0
 800399e:	4b07      	ldr	r3, [pc, #28]	@ (80039bc <ESP_GetUID+0x28>)
 80039a0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039a2:	f00b fc3f 	bl	800f224 <HAL_GetUIDw1>
 80039a6:	0002      	movs	r2, r0
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <ESP_GetUID+0x28>)
 80039aa:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039ac:	f00b fc44 	bl	800f238 <HAL_GetUIDw2>
 80039b0:	0002      	movs	r2, r0
 80039b2:	4b02      	ldr	r3, [pc, #8]	@ (80039bc <ESP_GetUID+0x28>)
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000558 	.word	0x20000558

080039c0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039c8:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <ESP_Init+0x2c>)
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039ce:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <ESP_Init+0x30>)
 80039d0:	2202      	movs	r2, #2
 80039d2:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80039d4:	f7ff ffde 	bl	8003994 <ESP_GetUID>
  beurs = checkEEprom();
 80039d8:	f7ff fe7a 	bl	80036d0 <checkEEprom>
 80039dc:	0003      	movs	r3, r0
 80039de:	001a      	movs	r2, r3
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <ESP_Init+0x34>)
 80039e2:	701a      	strb	r2, [r3, #0]
}
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000444 	.word	0x20000444
 80039f0:	20000030 	.word	0x20000030
 80039f4:	20000552 	.word	0x20000552

080039f8 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	000a      	movs	r2, r1
 8003a02:	1cbb      	adds	r3, r7, #2
 8003a04:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a06:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <ESP_Send+0x54>)
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	250f      	movs	r5, #15
 8003a0c:	197c      	adds	r4, r7, r5
 8003a0e:	1cbb      	adds	r3, r7, #2
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0019      	movs	r1, r3
 8003a16:	f013 fedb 	bl	80177d0 <HAL_UART_Transmit_DMA>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a1e:	197b      	adds	r3, r7, r5
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a26:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <ESP_Send+0x58>)
 8003a28:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <ESP_Send+0x5c>)
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	f00a ff61 	bl	800e8f4 <CreateLine>
    return false;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e006      	b.n	8003a44 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a07      	ldr	r2, [pc, #28]	@ (8003a58 <ESP_Send+0x60>)
 8003a3a:	4908      	ldr	r1, [pc, #32]	@ (8003a5c <ESP_Send+0x64>)
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	f00a ff59 	bl	800e8f4 <CreateLine>
#endif
  return true;
 8003a42:	2301      	movs	r3, #1
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	20000444 	.word	0x20000444
 8003a50:	080235a4 	.word	0x080235a4
 8003a54:	080235c4 	.word	0x080235c4
 8003a58:	080235c8 	.word	0x080235c8
 8003a5c:	080235a0 	.word	0x080235a0

08003a60 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	000a      	movs	r2, r1
 8003a6a:	1cbb      	adds	r3, r7, #2
 8003a6c:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8003a6e:	4b45      	ldr	r3, [pc, #276]	@ (8003b84 <ESP_Receive+0x124>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003a74:	260f      	movs	r6, #15
 8003a76:	19bb      	adds	r3, r7, r6
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a7c:	4b42      	ldr	r3, [pc, #264]	@ (8003b88 <ESP_Receive+0x128>)
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	250e      	movs	r5, #14
 8003a82:	197c      	adds	r4, r7, r5
 8003a84:	1cbb      	adds	r3, r7, #2
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	f013 ff30 	bl	80178f0 <HAL_UART_Receive_DMA>
 8003a90:	0003      	movs	r3, r0
 8003a92:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a94:	002c      	movs	r4, r5
 8003a96:	193b      	adds	r3, r7, r4
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d100      	bne.n	8003aa0 <ESP_Receive+0x40>
 8003a9e:	e06c      	b.n	8003b7a <ESP_Receive+0x11a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003aa0:	4b39      	ldr	r3, [pc, #228]	@ (8003b88 <ESP_Receive+0x128>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2284      	movs	r2, #132	@ 0x84
 8003aa6:	589b      	ldr	r3, [r3, r2]
 8003aa8:	4a38      	ldr	r2, [pc, #224]	@ (8003b8c <ESP_Receive+0x12c>)
 8003aaa:	4939      	ldr	r1, [pc, #228]	@ (8003b90 <ESP_Receive+0x130>)
 8003aac:	2001      	movs	r0, #1
 8003aae:	f00a ff21 	bl	800e8f4 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d008      	beq.n	8003ace <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003abc:	4a35      	ldr	r2, [pc, #212]	@ (8003b94 <ESP_Receive+0x134>)
 8003abe:	4b34      	ldr	r3, [pc, #208]	@ (8003b90 <ESP_Receive+0x130>)
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f00a ff16 	bl	800e8f4 <CreateLine>
      reset = true;
 8003ac8:	19bb      	adds	r3, r7, r6
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003ace:	230e      	movs	r3, #14
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d005      	beq.n	8003ae6 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003ada:	4a2f      	ldr	r2, [pc, #188]	@ (8003b98 <ESP_Receive+0x138>)
 8003adc:	4b2c      	ldr	r3, [pc, #176]	@ (8003b90 <ESP_Receive+0x130>)
 8003ade:	0019      	movs	r1, r3
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f00a ff07 	bl	800e8f4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003ae6:	230e      	movs	r3, #14
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2204      	movs	r2, #4
 8003aee:	4013      	ands	r3, r2
 8003af0:	d005      	beq.n	8003afe <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003af2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b9c <ESP_Receive+0x13c>)
 8003af4:	4b26      	ldr	r3, [pc, #152]	@ (8003b90 <ESP_Receive+0x130>)
 8003af6:	0019      	movs	r1, r3
 8003af8:	2001      	movs	r0, #1
 8003afa:	f00a fefb 	bl	800e8f4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003afe:	230e      	movs	r3, #14
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2208      	movs	r2, #8
 8003b06:	4013      	ands	r3, r2
 8003b08:	d005      	beq.n	8003b16 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003b0a:	4a25      	ldr	r2, [pc, #148]	@ (8003ba0 <ESP_Receive+0x140>)
 8003b0c:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <ESP_Receive+0x130>)
 8003b0e:	0019      	movs	r1, r3
 8003b10:	2001      	movs	r0, #1
 8003b12:	f00a feef 	bl	800e8f4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b16:	230e      	movs	r3, #14
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2210      	movs	r2, #16
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d005      	beq.n	8003b2e <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003b22:	4a20      	ldr	r2, [pc, #128]	@ (8003ba4 <ESP_Receive+0x144>)
 8003b24:	4b1a      	ldr	r3, [pc, #104]	@ (8003b90 <ESP_Receive+0x130>)
 8003b26:	0019      	movs	r1, r3
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f00a fee3 	bl	800e8f4 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b2e:	230e      	movs	r3, #14
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2220      	movs	r2, #32
 8003b36:	4013      	ands	r3, r2
 8003b38:	d005      	beq.n	8003b46 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <ESP_Receive+0x148>)
 8003b3c:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <ESP_Receive+0x130>)
 8003b3e:	0019      	movs	r1, r3
 8003b40:	2001      	movs	r0, #1
 8003b42:	f00a fed7 	bl	800e8f4 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b46:	230e      	movs	r3, #14
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2240      	movs	r2, #64	@ 0x40
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d005      	beq.n	8003b5e <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003b52:	4a16      	ldr	r2, [pc, #88]	@ (8003bac <ESP_Receive+0x14c>)
 8003b54:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <ESP_Receive+0x130>)
 8003b56:	0019      	movs	r1, r3
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f00a fecb 	bl	800e8f4 <CreateLine>
    }
#endif
    if (reset) {
 8003b5e:	230f      	movs	r3, #15
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <ESP_Receive+0x110>
      SetAllREDLED();
 8003b68:	f009 fe42 	bl	800d7f0 <SetAllREDLED>
      HAL_NVIC_SystemReset();
 8003b6c:	f00b ffcf 	bl	800fb0e <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003b70:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <ESP_Receive+0x124>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
    return false;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e000      	b.n	8003b7c <ESP_Receive+0x11c>
  }
  return true;
 8003b7a:	2301      	movs	r3, #1
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b005      	add	sp, #20
 8003b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b84:	20000448 	.word	0x20000448
 8003b88:	20000444 	.word	0x20000444
 8003b8c:	080235d8 	.word	0x080235d8
 8003b90:	080235c4 	.word	0x080235c4
 8003b94:	08023608 	.word	0x08023608
 8003b98:	0802362c 	.word	0x0802362c
 8003b9c:	08023650 	.word	0x08023650
 8003ba0:	08023674 	.word	0x08023674
 8003ba4:	08023698 	.word	0x08023698
 8003ba8:	080236c4 	.word	0x080236c4
 8003bac:	080236f4 	.word	0x080236f4

08003bb0 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003bb8:	4b39      	ldr	r3, [pc, #228]	@ (8003ca0 <HAL_UART_ErrorCallback+0xf0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d16b      	bne.n	8003c9a <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2284      	movs	r2, #132	@ 0x84
 8003bc6:	589b      	ldr	r3, [r3, r2]
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d065      	beq.n	8003c98 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2284      	movs	r2, #132	@ 0x84
 8003bd0:	589b      	ldr	r3, [r3, r2]
 8003bd2:	4a34      	ldr	r2, [pc, #208]	@ (8003ca4 <HAL_UART_ErrorCallback+0xf4>)
 8003bd4:	4934      	ldr	r1, [pc, #208]	@ (8003ca8 <HAL_UART_ErrorCallback+0xf8>)
 8003bd6:	2003      	movs	r0, #3
 8003bd8:	f00a fe8c 	bl	800e8f4 <CreateLine>
    switch (huart->ErrorCode) {
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2284      	movs	r2, #132	@ 0x84
 8003be0:	589b      	ldr	r3, [r3, r2]
 8003be2:	2b0c      	cmp	r3, #12
 8003be4:	d851      	bhi.n	8003c8a <HAL_UART_ErrorCallback+0xda>
 8003be6:	009a      	lsls	r2, r3, #2
 8003be8:	4b30      	ldr	r3, [pc, #192]	@ (8003cac <HAL_UART_ErrorCallback+0xfc>)
 8003bea:	18d3      	adds	r3, r2, r3
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8003bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb0 <HAL_UART_ErrorCallback+0x100>)
 8003bf2:	4b30      	ldr	r3, [pc, #192]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f00a fe7c 	bl	800e8f4 <CreateLine>
        break;
 8003bfc:	e04d      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 8003bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb8 <HAL_UART_ErrorCallback+0x108>)
 8003c00:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c02:	0019      	movs	r1, r3
 8003c04:	2001      	movs	r0, #1
 8003c06:	f00a fe75 	bl	800e8f4 <CreateLine>
        break;
 8003c0a:	e046      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cbc <HAL_UART_ErrorCallback+0x10c>)
 8003c0e:	4b29      	ldr	r3, [pc, #164]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c10:	0019      	movs	r1, r3
 8003c12:	2001      	movs	r0, #1
 8003c14:	f00a fe6e 	bl	800e8f4 <CreateLine>
        break;
 8003c18:	e03f      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8003c1a:	4a29      	ldr	r2, [pc, #164]	@ (8003cc0 <HAL_UART_ErrorCallback+0x110>)
 8003c1c:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c1e:	0019      	movs	r1, r3
 8003c20:	2001      	movs	r0, #1
 8003c22:	f00a fe67 	bl	800e8f4 <CreateLine>
        break;
 8003c26:	e038      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8003c28:	4a26      	ldr	r2, [pc, #152]	@ (8003cc4 <HAL_UART_ErrorCallback+0x114>)
 8003c2a:	4b22      	ldr	r3, [pc, #136]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f00a fe60 	bl	800e8f4 <CreateLine>
        break;
 8003c34:	e031      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8003c36:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <HAL_UART_ErrorCallback+0x118>)
 8003c38:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	f00a fe59 	bl	800e8f4 <CreateLine>
        break;
 8003c42:	e02a      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8003c44:	4a21      	ldr	r2, [pc, #132]	@ (8003ccc <HAL_UART_ErrorCallback+0x11c>)
 8003c46:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c48:	0019      	movs	r1, r3
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f00a fe52 	bl	800e8f4 <CreateLine>
        break;
 8003c50:	e023      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 8003c52:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd0 <HAL_UART_ErrorCallback+0x120>)
 8003c54:	4b17      	ldr	r3, [pc, #92]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c56:	0019      	movs	r1, r3
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f00a fe4b 	bl	800e8f4 <CreateLine>
        break;
 8003c5e:	e01c      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 8003c60:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd4 <HAL_UART_ErrorCallback+0x124>)
 8003c62:	4b14      	ldr	r3, [pc, #80]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c64:	0019      	movs	r1, r3
 8003c66:	2001      	movs	r0, #1
 8003c68:	f00a fe44 	bl	800e8f4 <CreateLine>
        break;
 8003c6c:	e015      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd8 <HAL_UART_ErrorCallback+0x128>)
 8003c70:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c72:	0019      	movs	r1, r3
 8003c74:	2001      	movs	r0, #1
 8003c76:	f00a fe3d 	bl	800e8f4 <CreateLine>
        break;
 8003c7a:	e00e      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 8003c7c:	4a17      	ldr	r2, [pc, #92]	@ (8003cdc <HAL_UART_ErrorCallback+0x12c>)
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c80:	0019      	movs	r1, r3
 8003c82:	2001      	movs	r0, #1
 8003c84:	f00a fe36 	bl	800e8f4 <CreateLine>
        break;
 8003c88:	e007      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 8003c8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ce0 <HAL_UART_ErrorCallback+0x130>)
 8003c8c:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <HAL_UART_ErrorCallback+0x104>)
 8003c8e:	0019      	movs	r1, r3
 8003c90:	2001      	movs	r0, #1
 8003c92:	f00a fe2f 	bl	800e8f4 <CreateLine>
 8003c96:	e000      	b.n	8003c9a <HAL_UART_ErrorCallback+0xea>
      return;
 8003c98:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000444 	.word	0x20000444
 8003ca4:	08023724 	.word	0x08023724
 8003ca8:	080235a0 	.word	0x080235a0
 8003cac:	080259d8 	.word	0x080259d8
 8003cb0:	08023754 	.word	0x08023754
 8003cb4:	080235c4 	.word	0x080235c4
 8003cb8:	08023788 	.word	0x08023788
 8003cbc:	080237b4 	.word	0x080237b4
 8003cc0:	080237e8 	.word	0x080237e8
 8003cc4:	08023814 	.word	0x08023814
 8003cc8:	0802383c 	.word	0x0802383c
 8003ccc:	0802386c 	.word	0x0802386c
 8003cd0:	080238a4 	.word	0x080238a4
 8003cd4:	080238dc 	.word	0x080238dc
 8003cd8:	08023904 	.word	0x08023904
 8003cdc:	0802392c 	.word	0x0802392c
 8003ce0:	08023958 	.word	0x08023958

08003ce4 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e010      	b.n	8003d16 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	1898      	adds	r0, r3, r2
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	18d3      	adds	r3, r2, r3
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	001a      	movs	r2, r3
 8003d08:	4b07      	ldr	r3, [pc, #28]	@ (8003d28 <uint8ArrayToString+0x44>)
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	f01c fb4a 	bl	80203a4 <siprintf>
  for (int i = 0; i < 12; i++) {
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b0b      	cmp	r3, #11
 8003d1a:	ddeb      	ble.n	8003cf4 <uint8ArrayToString+0x10>
  }
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b004      	add	sp, #16
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	0802397c 	.word	0x0802397c

08003d2c <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	b089      	sub	sp, #36	@ 0x24
 8003d30:	af04      	add	r7, sp, #16
 8003d32:	6039      	str	r1, [r7, #0]
 8003d34:	0011      	movs	r1, r2
 8003d36:	1dfb      	adds	r3, r7, #7
 8003d38:	1c02      	adds	r2, r0, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	1dbb      	adds	r3, r7, #6
 8003d3e:	1c0a      	adds	r2, r1, #0
 8003d40:	701a      	strb	r2, [r3, #0]
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
#ifdef LONGDATAGRAM
  static char Buffer[25];
#endif
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003d42:	4b20      	ldr	r3, [pc, #128]	@ (8003dc4 <CreateMessage+0x98>)
 8003d44:	4820      	ldr	r0, [pc, #128]	@ (8003dc8 <CreateMessage+0x9c>)
 8003d46:	220c      	movs	r2, #12
 8003d48:	0019      	movs	r1, r3
 8003d4a:	f003 fbd1 	bl	80074f0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dcc <CreateMessage+0xa0>)
 8003d50:	481f      	ldr	r0, [pc, #124]	@ (8003dd0 <CreateMessage+0xa4>)
 8003d52:	220c      	movs	r2, #12
 8003d54:	0019      	movs	r1, r3
 8003d56:	f003 fbcb 	bl	80074f0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd4 <CreateMessage+0xa8>)
 8003d5c:	481e      	ldr	r0, [pc, #120]	@ (8003dd8 <CreateMessage+0xac>)
 8003d5e:	220c      	movs	r2, #12
 8003d60:	0019      	movs	r1, r3
 8003d62:	f003 fbc5 	bl	80074f0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003d66:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <CreateMessage+0xb0>)
 8003d68:	481d      	ldr	r0, [pc, #116]	@ (8003de0 <CreateMessage+0xb4>)
 8003d6a:	220c      	movs	r2, #12
 8003d6c:	0019      	movs	r1, r3
 8003d6e:	f003 fbbf 	bl	80074f0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003d72:	4b1c      	ldr	r3, [pc, #112]	@ (8003de4 <CreateMessage+0xb8>)
 8003d74:	481c      	ldr	r0, [pc, #112]	@ (8003de8 <CreateMessage+0xbc>)
 8003d76:	220c      	movs	r2, #12
 8003d78:	0019      	movs	r1, r3
 8003d7a:	f003 fbb9 	bl	80074f0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <CreateMessage+0xc0>)
 8003d80:	481b      	ldr	r0, [pc, #108]	@ (8003df0 <CreateMessage+0xc4>)
 8003d82:	220c      	movs	r2, #12
 8003d84:	0019      	movs	r1, r3
 8003d86:	f003 fbb3 	bl	80074f0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003df4 <CreateMessage+0xc8>)
 8003d8c:	481a      	ldr	r0, [pc, #104]	@ (8003df8 <CreateMessage+0xcc>)
 8003d8e:	220c      	movs	r2, #12
 8003d90:	0019      	movs	r1, r3
 8003d92:	f003 fbad 	bl	80074f0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003d96:	4b19      	ldr	r3, [pc, #100]	@ (8003dfc <CreateMessage+0xd0>)
 8003d98:	4819      	ldr	r0, [pc, #100]	@ (8003e00 <CreateMessage+0xd4>)
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	f003 fba7 	bl	80074f0 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003da2:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <CreateMessage+0xd8>)
 8003da4:	4818      	ldr	r0, [pc, #96]	@ (8003e08 <CreateMessage+0xdc>)
 8003da6:	220c      	movs	r2, #12
 8003da8:	0019      	movs	r1, r3
 8003daa:	f003 fba1 	bl	80074f0 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003dae:	f7ff fcc5 	bl	800373c <checkName>
 8003db2:	1e03      	subs	r3, r0, #0
 8003db4:	d02e      	beq.n	8003e14 <CreateMessage+0xe8>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003db6:	4b15      	ldr	r3, [pc, #84]	@ (8003e0c <CreateMessage+0xe0>)
 8003db8:	4815      	ldr	r0, [pc, #84]	@ (8003e10 <CreateMessage+0xe4>)
 8003dba:	2220      	movs	r2, #32
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	f003 fb97 	bl	80074f0 <ReadUint8ArrayEEprom>
 8003dc2:	e02d      	b.n	8003e20 <CreateMessage+0xf4>
 8003dc4:	20000694 	.word	0x20000694
 8003dc8:	0808000c 	.word	0x0808000c
 8003dcc:	200006a0 	.word	0x200006a0
 8003dd0:	08080018 	.word	0x08080018
 8003dd4:	200006ac 	.word	0x200006ac
 8003dd8:	08080048 	.word	0x08080048
 8003ddc:	200006b8 	.word	0x200006b8
 8003de0:	08080030 	.word	0x08080030
 8003de4:	200006c4 	.word	0x200006c4
 8003de8:	0808006c 	.word	0x0808006c
 8003dec:	200006d0 	.word	0x200006d0
 8003df0:	08080078 	.word	0x08080078
 8003df4:	200006dc 	.word	0x200006dc
 8003df8:	08080024 	.word	0x08080024
 8003dfc:	200006e8 	.word	0x200006e8
 8003e00:	08080054 	.word	0x08080054
 8003e04:	200006f4 	.word	0x200006f4
 8003e08:	08080060 	.word	0x08080060
 8003e0c:	20000700 	.word	0x20000700
 8003e10:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e14:	4bed      	ldr	r3, [pc, #948]	@ (80041cc <CreateMessage+0x4a0>)
 8003e16:	4aee      	ldr	r2, [pc, #952]	@ (80041d0 <CreateMessage+0x4a4>)
 8003e18:	6811      	ldr	r1, [r2, #0]
 8003e1a:	6019      	str	r1, [r3, #0]
 8003e1c:	7912      	ldrb	r2, [r2, #4]
 8003e1e:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 8003e20:	f7ff fc32 	bl	8003688 <setCharges>
  uint16_t index = 0;
 8003e24:	260e      	movs	r6, #14
 8003e26:	19bb      	adds	r3, r7, r6
 8003e28:	2200      	movs	r2, #0
 8003e2a:	801a      	strh	r2, [r3, #0]
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0
  sprintf(&message[index], "[");
 8003e2c:	19bb      	adds	r3, r7, r6
 8003e2e:	881a      	ldrh	r2, [r3, #0]
 8003e30:	4be8      	ldr	r3, [pc, #928]	@ (80041d4 <CreateMessage+0x4a8>)
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	4ae8      	ldr	r2, [pc, #928]	@ (80041d8 <CreateMessage+0x4ac>)
 8003e36:	0011      	movs	r1, r2
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f01c fab3 	bl	80203a4 <siprintf>

  uint8ArrayToString(Buffer, tempConfig);
 8003e3e:	4ae7      	ldr	r2, [pc, #924]	@ (80041dc <CreateMessage+0x4b0>)
 8003e40:	4be7      	ldr	r3, [pc, #924]	@ (80041e0 <CreateMessage+0x4b4>)
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff ff4d 	bl	8003ce4 <uint8ArrayToString>
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8003e4a:	4be6      	ldr	r3, [pc, #920]	@ (80041e4 <CreateMessage+0x4b8>)
 8003e4c:	689c      	ldr	r4, [r3, #8]
 8003e4e:	4be6      	ldr	r3, [pc, #920]	@ (80041e8 <CreateMessage+0x4bc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	1c18      	adds	r0, r3, #0
 8003e54:	f7ff fb06 	bl	8003464 <__aeabi_f2d>
 8003e58:	0002      	movs	r2, r0
 8003e5a:	000b      	movs	r3, r1
 8003e5c:	4ddb      	ldr	r5, [pc, #876]	@ (80041cc <CreateMessage+0x4a0>)
 8003e5e:	49e3      	ldr	r1, [pc, #908]	@ (80041ec <CreateMessage+0x4c0>)
 8003e60:	48e3      	ldr	r0, [pc, #908]	@ (80041f0 <CreateMessage+0x4c4>)
 8003e62:	9202      	str	r2, [sp, #8]
 8003e64:	9303      	str	r3, [sp, #12]
 8003e66:	4bde      	ldr	r3, [pc, #888]	@ (80041e0 <CreateMessage+0x4b4>)
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	002b      	movs	r3, r5
 8003e6c:	0022      	movs	r2, r4
 8003e6e:	f01c fa99 	bl	80203a4 <siprintf>
  index = strlen(message);
 8003e72:	4bd8      	ldr	r3, [pc, #864]	@ (80041d4 <CreateMessage+0x4a8>)
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7fc f979 	bl	800016c <strlen>
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	19bb      	adds	r3, r7, r6
 8003e7e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003e80:	1dbb      	adds	r3, r7, #6
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d019      	beq.n	8003ebc <CreateMessage+0x190>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003e88:	4bd2      	ldr	r3, [pc, #840]	@ (80041d4 <CreateMessage+0x4a8>)
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7fc f96e 	bl	800016c <strlen>
 8003e90:	0003      	movs	r3, r0
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	4bcf      	ldr	r3, [pc, #828]	@ (80041d4 <CreateMessage+0x4a8>)
 8003e96:	0011      	movs	r1, r2
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff fdad 	bl	80039f8 <ESP_Send>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	001a      	movs	r2, r3
 8003ea2:	4bd4      	ldr	r3, [pc, #848]	@ (80041f4 <CreateMessage+0x4c8>)
 8003ea4:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003ea6:	4bd4      	ldr	r3, [pc, #848]	@ (80041f8 <CreateMessage+0x4cc>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	001a      	movs	r2, r3
 8003eac:	4bd1      	ldr	r3, [pc, #836]	@ (80041f4 <CreateMessage+0x4c8>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	1e5a      	subs	r2, r3, #1
 8003eb4:	4193      	sbcs	r3, r2
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4bcf      	ldr	r3, [pc, #828]	@ (80041f8 <CreateMessage+0x4cc>)
 8003eba:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, humidConfig);
 8003ebc:	4acf      	ldr	r2, [pc, #828]	@ (80041fc <CreateMessage+0x4d0>)
 8003ebe:	4bc8      	ldr	r3, [pc, #800]	@ (80041e0 <CreateMessage+0x4b4>)
 8003ec0:	0011      	movs	r1, r2
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7ff ff0e 	bl	8003ce4 <uint8ArrayToString>
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 8003ec8:	4bc6      	ldr	r3, [pc, #792]	@ (80041e4 <CreateMessage+0x4b8>)
 8003eca:	689c      	ldr	r4, [r3, #8]
 8003ecc:	4bc6      	ldr	r3, [pc, #792]	@ (80041e8 <CreateMessage+0x4bc>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	1c18      	adds	r0, r3, #0
 8003ed2:	f7ff fac7 	bl	8003464 <__aeabi_f2d>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	000b      	movs	r3, r1
 8003eda:	4dbc      	ldr	r5, [pc, #752]	@ (80041cc <CreateMessage+0x4a0>)
 8003edc:	49c8      	ldr	r1, [pc, #800]	@ (8004200 <CreateMessage+0x4d4>)
 8003ede:	48bd      	ldr	r0, [pc, #756]	@ (80041d4 <CreateMessage+0x4a8>)
 8003ee0:	9202      	str	r2, [sp, #8]
 8003ee2:	9303      	str	r3, [sp, #12]
 8003ee4:	4bbe      	ldr	r3, [pc, #760]	@ (80041e0 <CreateMessage+0x4b4>)
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	002b      	movs	r3, r5
 8003eea:	0022      	movs	r2, r4
 8003eec:	f01c fa5a 	bl	80203a4 <siprintf>
  index += strlen(message);
 8003ef0:	4bb8      	ldr	r3, [pc, #736]	@ (80041d4 <CreateMessage+0x4a8>)
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7fc f93a 	bl	800016c <strlen>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	b299      	uxth	r1, r3
 8003efc:	220e      	movs	r2, #14
 8003efe:	18bb      	adds	r3, r7, r2
 8003f00:	18ba      	adds	r2, r7, r2
 8003f02:	8812      	ldrh	r2, [r2, #0]
 8003f04:	188a      	adds	r2, r1, r2
 8003f06:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f08:	1dbb      	adds	r3, r7, #6
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d019      	beq.n	8003f44 <CreateMessage+0x218>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f10:	4bb0      	ldr	r3, [pc, #704]	@ (80041d4 <CreateMessage+0x4a8>)
 8003f12:	0018      	movs	r0, r3
 8003f14:	f7fc f92a 	bl	800016c <strlen>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	4bad      	ldr	r3, [pc, #692]	@ (80041d4 <CreateMessage+0x4a8>)
 8003f1e:	0011      	movs	r1, r2
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff fd69 	bl	80039f8 <ESP_Send>
 8003f26:	0003      	movs	r3, r0
 8003f28:	001a      	movs	r2, r3
 8003f2a:	4bb2      	ldr	r3, [pc, #712]	@ (80041f4 <CreateMessage+0x4c8>)
 8003f2c:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003f2e:	4bb2      	ldr	r3, [pc, #712]	@ (80041f8 <CreateMessage+0x4cc>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	001a      	movs	r2, r3
 8003f34:	4baf      	ldr	r3, [pc, #700]	@ (80041f4 <CreateMessage+0x4c8>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	1e5a      	subs	r2, r3, #1
 8003f3c:	4193      	sbcs	r3, r2
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4bad      	ldr	r3, [pc, #692]	@ (80041f8 <CreateMessage+0x4cc>)
 8003f42:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, vocConfig);
 8003f44:	4aaf      	ldr	r2, [pc, #700]	@ (8004204 <CreateMessage+0x4d8>)
 8003f46:	4ba6      	ldr	r3, [pc, #664]	@ (80041e0 <CreateMessage+0x4b4>)
 8003f48:	0011      	movs	r1, r2
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff feca 	bl	8003ce4 <uint8ArrayToString>
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndexmax);
 8003f50:	4ba4      	ldr	r3, [pc, #656]	@ (80041e4 <CreateMessage+0x4b8>)
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	4ba4      	ldr	r3, [pc, #656]	@ (80041e8 <CreateMessage+0x4bc>)
 8003f56:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003f58:	4c9c      	ldr	r4, [pc, #624]	@ (80041cc <CreateMessage+0x4a0>)
 8003f5a:	49ab      	ldr	r1, [pc, #684]	@ (8004208 <CreateMessage+0x4dc>)
 8003f5c:	489d      	ldr	r0, [pc, #628]	@ (80041d4 <CreateMessage+0x4a8>)
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	4b9f      	ldr	r3, [pc, #636]	@ (80041e0 <CreateMessage+0x4b4>)
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	0023      	movs	r3, r4
 8003f66:	f01c fa1d 	bl	80203a4 <siprintf>
  index += strlen(message);
 8003f6a:	4b9a      	ldr	r3, [pc, #616]	@ (80041d4 <CreateMessage+0x4a8>)
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7fc f8fd 	bl	800016c <strlen>
 8003f72:	0003      	movs	r3, r0
 8003f74:	b299      	uxth	r1, r3
 8003f76:	220e      	movs	r2, #14
 8003f78:	18bb      	adds	r3, r7, r2
 8003f7a:	18ba      	adds	r2, r7, r2
 8003f7c:	8812      	ldrh	r2, [r2, #0]
 8003f7e:	188a      	adds	r2, r1, r2
 8003f80:	801a      	strh	r2, [r3, #0]
  if (send) {
 8003f82:	1dbb      	adds	r3, r7, #6
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d019      	beq.n	8003fbe <CreateMessage+0x292>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8003f8a:	4b92      	ldr	r3, [pc, #584]	@ (80041d4 <CreateMessage+0x4a8>)
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7fc f8ed 	bl	800016c <strlen>
 8003f92:	0003      	movs	r3, r0
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	4b8f      	ldr	r3, [pc, #572]	@ (80041d4 <CreateMessage+0x4a8>)
 8003f98:	0011      	movs	r1, r2
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7ff fd2c 	bl	80039f8 <ESP_Send>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	001a      	movs	r2, r3
 8003fa4:	4b93      	ldr	r3, [pc, #588]	@ (80041f4 <CreateMessage+0x4c8>)
 8003fa6:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8003fa8:	4b93      	ldr	r3, [pc, #588]	@ (80041f8 <CreateMessage+0x4cc>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	001a      	movs	r2, r3
 8003fae:	4b91      	ldr	r3, [pc, #580]	@ (80041f4 <CreateMessage+0x4c8>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	1e5a      	subs	r2, r3, #1
 8003fb6:	4193      	sbcs	r3, r2
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	4b8f      	ldr	r3, [pc, #572]	@ (80041f8 <CreateMessage+0x4cc>)
 8003fbc:	701a      	strb	r2, [r3, #0]
  }

  uint8ArrayToString(Buffer, soundConfig);
 8003fbe:	4a93      	ldr	r2, [pc, #588]	@ (800420c <CreateMessage+0x4e0>)
 8003fc0:	4b87      	ldr	r3, [pc, #540]	@ (80041e0 <CreateMessage+0x4b4>)
 8003fc2:	0011      	movs	r1, r2
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff fe8d 	bl	8003ce4 <uint8ArrayToString>
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 8003fca:	4b86      	ldr	r3, [pc, #536]	@ (80041e4 <CreateMessage+0x4b8>)
 8003fcc:	689c      	ldr	r4, [r3, #8]
 8003fce:	4b86      	ldr	r3, [pc, #536]	@ (80041e8 <CreateMessage+0x4bc>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	1c18      	adds	r0, r3, #0
 8003fd4:	f7ff fa46 	bl	8003464 <__aeabi_f2d>
 8003fd8:	0002      	movs	r2, r0
 8003fda:	000b      	movs	r3, r1
 8003fdc:	4d7b      	ldr	r5, [pc, #492]	@ (80041cc <CreateMessage+0x4a0>)
 8003fde:	498c      	ldr	r1, [pc, #560]	@ (8004210 <CreateMessage+0x4e4>)
 8003fe0:	487c      	ldr	r0, [pc, #496]	@ (80041d4 <CreateMessage+0x4a8>)
 8003fe2:	9202      	str	r2, [sp, #8]
 8003fe4:	9303      	str	r3, [sp, #12]
 8003fe6:	4b7e      	ldr	r3, [pc, #504]	@ (80041e0 <CreateMessage+0x4b4>)
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	002b      	movs	r3, r5
 8003fec:	0022      	movs	r2, r4
 8003fee:	f01c f9d9 	bl	80203a4 <siprintf>
  index += strlen(message);
 8003ff2:	4b78      	ldr	r3, [pc, #480]	@ (80041d4 <CreateMessage+0x4a8>)
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7fc f8b9 	bl	800016c <strlen>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	b299      	uxth	r1, r3
 8003ffe:	220e      	movs	r2, #14
 8004000:	18bb      	adds	r3, r7, r2
 8004002:	18ba      	adds	r2, r7, r2
 8004004:	8812      	ldrh	r2, [r2, #0]
 8004006:	188a      	adds	r2, r1, r2
 8004008:	801a      	strh	r2, [r3, #0]
  if (send) {
 800400a:	1dbb      	adds	r3, r7, #6
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d019      	beq.n	8004046 <CreateMessage+0x31a>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004012:	4b70      	ldr	r3, [pc, #448]	@ (80041d4 <CreateMessage+0x4a8>)
 8004014:	0018      	movs	r0, r3
 8004016:	f7fc f8a9 	bl	800016c <strlen>
 800401a:	0003      	movs	r3, r0
 800401c:	b29a      	uxth	r2, r3
 800401e:	4b6d      	ldr	r3, [pc, #436]	@ (80041d4 <CreateMessage+0x4a8>)
 8004020:	0011      	movs	r1, r2
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff fce8 	bl	80039f8 <ESP_Send>
 8004028:	0003      	movs	r3, r0
 800402a:	001a      	movs	r2, r3
 800402c:	4b71      	ldr	r3, [pc, #452]	@ (80041f4 <CreateMessage+0x4c8>)
 800402e:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004030:	4b71      	ldr	r3, [pc, #452]	@ (80041f8 <CreateMessage+0x4cc>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	001a      	movs	r2, r3
 8004036:	4b6f      	ldr	r3, [pc, #444]	@ (80041f4 <CreateMessage+0x4c8>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	4013      	ands	r3, r2
 800403c:	1e5a      	subs	r2, r3, #1
 800403e:	4193      	sbcs	r3, r2
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4b6d      	ldr	r3, [pc, #436]	@ (80041f8 <CreateMessage+0x4cc>)
 8004044:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8004046:	1dfb      	adds	r3, r7, #7
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2201      	movs	r2, #1
 800404c:	4053      	eors	r3, r2
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d100      	bne.n	8004056 <CreateMessage+0x32a>
 8004054:	e14a      	b.n	80042ec <CreateMessage+0x5c0>
    uint8ArrayToString(Buffer, solarConfig);
 8004056:	4a6f      	ldr	r2, [pc, #444]	@ (8004214 <CreateMessage+0x4e8>)
 8004058:	4b61      	ldr	r3, [pc, #388]	@ (80041e0 <CreateMessage+0x4b4>)
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff fe41 	bl	8003ce4 <uint8ArrayToString>
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8004062:	4b60      	ldr	r3, [pc, #384]	@ (80041e4 <CreateMessage+0x4b8>)
 8004064:	689c      	ldr	r4, [r3, #8]
 8004066:	4b6c      	ldr	r3, [pc, #432]	@ (8004218 <CreateMessage+0x4ec>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1c18      	adds	r0, r3, #0
 800406c:	f7ff f9fa 	bl	8003464 <__aeabi_f2d>
 8004070:	0002      	movs	r2, r0
 8004072:	000b      	movs	r3, r1
 8004074:	4d55      	ldr	r5, [pc, #340]	@ (80041cc <CreateMessage+0x4a0>)
 8004076:	4969      	ldr	r1, [pc, #420]	@ (800421c <CreateMessage+0x4f0>)
 8004078:	4856      	ldr	r0, [pc, #344]	@ (80041d4 <CreateMessage+0x4a8>)
 800407a:	9202      	str	r2, [sp, #8]
 800407c:	9303      	str	r3, [sp, #12]
 800407e:	4b58      	ldr	r3, [pc, #352]	@ (80041e0 <CreateMessage+0x4b4>)
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	002b      	movs	r3, r5
 8004084:	0022      	movs	r2, r4
 8004086:	f01c f98d 	bl	80203a4 <siprintf>
    index += strlen(message);
 800408a:	4b52      	ldr	r3, [pc, #328]	@ (80041d4 <CreateMessage+0x4a8>)
 800408c:	0018      	movs	r0, r3
 800408e:	f7fc f86d 	bl	800016c <strlen>
 8004092:	0003      	movs	r3, r0
 8004094:	b299      	uxth	r1, r3
 8004096:	220e      	movs	r2, #14
 8004098:	18bb      	adds	r3, r7, r2
 800409a:	18ba      	adds	r2, r7, r2
 800409c:	8812      	ldrh	r2, [r2, #0]
 800409e:	188a      	adds	r2, r1, r2
 80040a0:	801a      	strh	r2, [r3, #0]
    if (send) {
 80040a2:	1dbb      	adds	r3, r7, #6
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d019      	beq.n	80040de <CreateMessage+0x3b2>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80040aa:	4b4a      	ldr	r3, [pc, #296]	@ (80041d4 <CreateMessage+0x4a8>)
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7fc f85d 	bl	800016c <strlen>
 80040b2:	0003      	movs	r3, r0
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	4b47      	ldr	r3, [pc, #284]	@ (80041d4 <CreateMessage+0x4a8>)
 80040b8:	0011      	movs	r1, r2
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7ff fc9c 	bl	80039f8 <ESP_Send>
 80040c0:	0003      	movs	r3, r0
 80040c2:	001a      	movs	r2, r3
 80040c4:	4b4b      	ldr	r3, [pc, #300]	@ (80041f4 <CreateMessage+0x4c8>)
 80040c6:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80040c8:	4b4b      	ldr	r3, [pc, #300]	@ (80041f8 <CreateMessage+0x4cc>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	001a      	movs	r2, r3
 80040ce:	4b49      	ldr	r3, [pc, #292]	@ (80041f4 <CreateMessage+0x4c8>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	4013      	ands	r3, r2
 80040d4:	1e5a      	subs	r2, r3, #1
 80040d6:	4193      	sbcs	r3, r2
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	4b47      	ldr	r3, [pc, #284]	@ (80041f8 <CreateMessage+0x4cc>)
 80040dc:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 80040de:	4b50      	ldr	r3, [pc, #320]	@ (8004220 <CreateMessage+0x4f4>)
 80040e0:	791b      	ldrb	r3, [r3, #4]
 80040e2:	2b35      	cmp	r3, #53	@ 0x35
 80040e4:	d140      	bne.n	8004168 <CreateMessage+0x43c>
 80040e6:	f002 fab3 	bl	8006650 <Check_USB_PowerOn>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d03c      	beq.n	8004168 <CreateMessage+0x43c>
      uint8ArrayToString(Buffer, noxConfig);
 80040ee:	4a4d      	ldr	r2, [pc, #308]	@ (8004224 <CreateMessage+0x4f8>)
 80040f0:	4b3b      	ldr	r3, [pc, #236]	@ (80041e0 <CreateMessage+0x4b4>)
 80040f2:	0011      	movs	r1, r2
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7ff fdf5 	bl	8003ce4 <uint8ArrayToString>
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 80040fa:	4b3a      	ldr	r3, [pc, #232]	@ (80041e4 <CreateMessage+0x4b8>)
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	4b3a      	ldr	r3, [pc, #232]	@ (80041e8 <CreateMessage+0x4bc>)
 8004100:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004102:	4c32      	ldr	r4, [pc, #200]	@ (80041cc <CreateMessage+0x4a0>)
 8004104:	4948      	ldr	r1, [pc, #288]	@ (8004228 <CreateMessage+0x4fc>)
 8004106:	4833      	ldr	r0, [pc, #204]	@ (80041d4 <CreateMessage+0x4a8>)
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	4b35      	ldr	r3, [pc, #212]	@ (80041e0 <CreateMessage+0x4b4>)
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	0023      	movs	r3, r4
 8004110:	f01c f948 	bl	80203a4 <siprintf>
      index += strlen(message);
 8004114:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <CreateMessage+0x4a8>)
 8004116:	0018      	movs	r0, r3
 8004118:	f7fc f828 	bl	800016c <strlen>
 800411c:	0003      	movs	r3, r0
 800411e:	b299      	uxth	r1, r3
 8004120:	220e      	movs	r2, #14
 8004122:	18bb      	adds	r3, r7, r2
 8004124:	18ba      	adds	r2, r7, r2
 8004126:	8812      	ldrh	r2, [r2, #0]
 8004128:	188a      	adds	r2, r1, r2
 800412a:	801a      	strh	r2, [r3, #0]
      if (send) {
 800412c:	1dbb      	adds	r3, r7, #6
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d019      	beq.n	8004168 <CreateMessage+0x43c>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8004134:	4b27      	ldr	r3, [pc, #156]	@ (80041d4 <CreateMessage+0x4a8>)
 8004136:	0018      	movs	r0, r3
 8004138:	f7fc f818 	bl	800016c <strlen>
 800413c:	0003      	movs	r3, r0
 800413e:	b29a      	uxth	r2, r3
 8004140:	4b24      	ldr	r3, [pc, #144]	@ (80041d4 <CreateMessage+0x4a8>)
 8004142:	0011      	movs	r1, r2
 8004144:	0018      	movs	r0, r3
 8004146:	f7ff fc57 	bl	80039f8 <ESP_Send>
 800414a:	0003      	movs	r3, r0
 800414c:	001a      	movs	r2, r3
 800414e:	4b29      	ldr	r3, [pc, #164]	@ (80041f4 <CreateMessage+0x4c8>)
 8004150:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8004152:	4b29      	ldr	r3, [pc, #164]	@ (80041f8 <CreateMessage+0x4cc>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	001a      	movs	r2, r3
 8004158:	4b26      	ldr	r3, [pc, #152]	@ (80041f4 <CreateMessage+0x4c8>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	4013      	ands	r3, r2
 800415e:	1e5a      	subs	r2, r3, #1
 8004160:	4193      	sbcs	r3, r2
 8004162:	b2da      	uxtb	r2, r3
 8004164:	4b24      	ldr	r3, [pc, #144]	@ (80041f8 <CreateMessage+0x4cc>)
 8004166:	701a      	strb	r2, [r3, #0]
      }
    }
    if (sen5x_Get_sen5x_enable_state()) {
 8004168:	f005 f90e 	bl	8009388 <sen5x_Get_sen5x_enable_state>
 800416c:	1e03      	subs	r3, r0, #0
 800416e:	d100      	bne.n	8004172 <CreateMessage+0x446>
 8004170:	e0bc      	b.n	80042ec <CreateMessage+0x5c0>
      uint8ArrayToString(Buffer, PM2Config);
 8004172:	4a2e      	ldr	r2, [pc, #184]	@ (800422c <CreateMessage+0x500>)
 8004174:	4b1a      	ldr	r3, [pc, #104]	@ (80041e0 <CreateMessage+0x4b4>)
 8004176:	0011      	movs	r1, r2
 8004178:	0018      	movs	r0, r3
 800417a:	f7ff fdb3 	bl	8003ce4 <uint8ArrayToString>
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 800417e:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <CreateMessage+0x4b8>)
 8004180:	689c      	ldr	r4, [r3, #8]
 8004182:	4b19      	ldr	r3, [pc, #100]	@ (80041e8 <CreateMessage+0x4bc>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	1c18      	adds	r0, r3, #0
 8004188:	f7ff f96c 	bl	8003464 <__aeabi_f2d>
 800418c:	0002      	movs	r2, r0
 800418e:	000b      	movs	r3, r1
 8004190:	4d0e      	ldr	r5, [pc, #56]	@ (80041cc <CreateMessage+0x4a0>)
 8004192:	4927      	ldr	r1, [pc, #156]	@ (8004230 <CreateMessage+0x504>)
 8004194:	480f      	ldr	r0, [pc, #60]	@ (80041d4 <CreateMessage+0x4a8>)
 8004196:	9202      	str	r2, [sp, #8]
 8004198:	9303      	str	r3, [sp, #12]
 800419a:	4b11      	ldr	r3, [pc, #68]	@ (80041e0 <CreateMessage+0x4b4>)
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	002b      	movs	r3, r5
 80041a0:	0022      	movs	r2, r4
 80041a2:	f01c f8ff 	bl	80203a4 <siprintf>
      index += strlen(message);
 80041a6:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <CreateMessage+0x4a8>)
 80041a8:	0018      	movs	r0, r3
 80041aa:	f7fb ffdf 	bl	800016c <strlen>
 80041ae:	0003      	movs	r3, r0
 80041b0:	b299      	uxth	r1, r3
 80041b2:	220e      	movs	r2, #14
 80041b4:	18bb      	adds	r3, r7, r2
 80041b6:	18ba      	adds	r2, r7, r2
 80041b8:	8812      	ldrh	r2, [r2, #0]
 80041ba:	188a      	adds	r2, r1, r2
 80041bc:	801a      	strh	r2, [r3, #0]
      if (send) {
 80041be:	1dbb      	adds	r3, r7, #6
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d04e      	beq.n	8004264 <CreateMessage+0x538>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80041c6:	4b03      	ldr	r3, [pc, #12]	@ (80041d4 <CreateMessage+0x4a8>)
 80041c8:	0018      	movs	r0, r3
 80041ca:	e033      	b.n	8004234 <CreateMessage+0x508>
 80041cc:	20000700 	.word	0x20000700
 80041d0:	0802596c 	.word	0x0802596c
 80041d4:	20000578 	.word	0x20000578
 80041d8:	08023984 	.word	0x08023984
 80041dc:	20000694 	.word	0x20000694
 80041e0:	20000720 	.word	0x20000720
 80041e4:	20000558 	.word	0x20000558
 80041e8:	20000624 	.word	0x20000624
 80041ec:	08023988 	.word	0x08023988
 80041f0:	20000579 	.word	0x20000579
 80041f4:	20000739 	.word	0x20000739
 80041f8:	20000031 	.word	0x20000031
 80041fc:	200006a0 	.word	0x200006a0
 8004200:	080239dc 	.word	0x080239dc
 8004204:	200006b8 	.word	0x200006b8
 8004208:	08023a34 	.word	0x08023a34
 800420c:	200006ac 	.word	0x200006ac
 8004210:	08023a88 	.word	0x08023a88
 8004214:	200006d0 	.word	0x200006d0
 8004218:	20000574 	.word	0x20000574
 800421c:	08023ae4 	.word	0x08023ae4
 8004220:	20000c88 	.word	0x20000c88
 8004224:	200006dc 	.word	0x200006dc
 8004228:	08023b44 	.word	0x08023b44
 800422c:	200006e8 	.word	0x200006e8
 8004230:	08023b98 	.word	0x08023b98
 8004234:	f7fb ff9a 	bl	800016c <strlen>
 8004238:	0003      	movs	r3, r0
 800423a:	b29a      	uxth	r2, r3
 800423c:	4b59      	ldr	r3, [pc, #356]	@ (80043a4 <CreateMessage+0x678>)
 800423e:	0011      	movs	r1, r2
 8004240:	0018      	movs	r0, r3
 8004242:	f7ff fbd9 	bl	80039f8 <ESP_Send>
 8004246:	0003      	movs	r3, r0
 8004248:	001a      	movs	r2, r3
 800424a:	4b57      	ldr	r3, [pc, #348]	@ (80043a8 <CreateMessage+0x67c>)
 800424c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800424e:	4b57      	ldr	r3, [pc, #348]	@ (80043ac <CreateMessage+0x680>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	001a      	movs	r2, r3
 8004254:	4b54      	ldr	r3, [pc, #336]	@ (80043a8 <CreateMessage+0x67c>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	4013      	ands	r3, r2
 800425a:	1e5a      	subs	r2, r3, #1
 800425c:	4193      	sbcs	r3, r2
 800425e:	b2da      	uxtb	r2, r3
 8004260:	4b52      	ldr	r3, [pc, #328]	@ (80043ac <CreateMessage+0x680>)
 8004262:	701a      	strb	r2, [r3, #0]
      }

      uint8ArrayToString(Buffer, PM10Config);
 8004264:	4a52      	ldr	r2, [pc, #328]	@ (80043b0 <CreateMessage+0x684>)
 8004266:	4b53      	ldr	r3, [pc, #332]	@ (80043b4 <CreateMessage+0x688>)
 8004268:	0011      	movs	r1, r2
 800426a:	0018      	movs	r0, r3
 800426c:	f7ff fd3a 	bl	8003ce4 <uint8ArrayToString>
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 8004270:	4b51      	ldr	r3, [pc, #324]	@ (80043b8 <CreateMessage+0x68c>)
 8004272:	689c      	ldr	r4, [r3, #8]
 8004274:	4b51      	ldr	r3, [pc, #324]	@ (80043bc <CreateMessage+0x690>)
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	1c18      	adds	r0, r3, #0
 800427a:	f7ff f8f3 	bl	8003464 <__aeabi_f2d>
 800427e:	0002      	movs	r2, r0
 8004280:	000b      	movs	r3, r1
 8004282:	4d4f      	ldr	r5, [pc, #316]	@ (80043c0 <CreateMessage+0x694>)
 8004284:	494f      	ldr	r1, [pc, #316]	@ (80043c4 <CreateMessage+0x698>)
 8004286:	4847      	ldr	r0, [pc, #284]	@ (80043a4 <CreateMessage+0x678>)
 8004288:	9202      	str	r2, [sp, #8]
 800428a:	9303      	str	r3, [sp, #12]
 800428c:	4b49      	ldr	r3, [pc, #292]	@ (80043b4 <CreateMessage+0x688>)
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	002b      	movs	r3, r5
 8004292:	0022      	movs	r2, r4
 8004294:	f01c f886 	bl	80203a4 <siprintf>
      index += strlen(message);
 8004298:	4b42      	ldr	r3, [pc, #264]	@ (80043a4 <CreateMessage+0x678>)
 800429a:	0018      	movs	r0, r3
 800429c:	f7fb ff66 	bl	800016c <strlen>
 80042a0:	0003      	movs	r3, r0
 80042a2:	b299      	uxth	r1, r3
 80042a4:	220e      	movs	r2, #14
 80042a6:	18bb      	adds	r3, r7, r2
 80042a8:	18ba      	adds	r2, r7, r2
 80042aa:	8812      	ldrh	r2, [r2, #0]
 80042ac:	188a      	adds	r2, r1, r2
 80042ae:	801a      	strh	r2, [r3, #0]
      if (send) {
 80042b0:	1dbb      	adds	r3, r7, #6
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d019      	beq.n	80042ec <CreateMessage+0x5c0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80042b8:	4b3a      	ldr	r3, [pc, #232]	@ (80043a4 <CreateMessage+0x678>)
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7fb ff56 	bl	800016c <strlen>
 80042c0:	0003      	movs	r3, r0
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	4b37      	ldr	r3, [pc, #220]	@ (80043a4 <CreateMessage+0x678>)
 80042c6:	0011      	movs	r1, r2
 80042c8:	0018      	movs	r0, r3
 80042ca:	f7ff fb95 	bl	80039f8 <ESP_Send>
 80042ce:	0003      	movs	r3, r0
 80042d0:	001a      	movs	r2, r3
 80042d2:	4b35      	ldr	r3, [pc, #212]	@ (80043a8 <CreateMessage+0x67c>)
 80042d4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80042d6:	4b35      	ldr	r3, [pc, #212]	@ (80043ac <CreateMessage+0x680>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	001a      	movs	r2, r3
 80042dc:	4b32      	ldr	r3, [pc, #200]	@ (80043a8 <CreateMessage+0x67c>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4013      	ands	r3, r2
 80042e2:	1e5a      	subs	r2, r3, #1
 80042e4:	4193      	sbcs	r3, r2
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	4b30      	ldr	r3, [pc, #192]	@ (80043ac <CreateMessage+0x680>)
 80042ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  uint8ArrayToString(Buffer, batteryConfig);
 80042ec:	4a36      	ldr	r2, [pc, #216]	@ (80043c8 <CreateMessage+0x69c>)
 80042ee:	4b31      	ldr	r3, [pc, #196]	@ (80043b4 <CreateMessage+0x688>)
 80042f0:	0011      	movs	r1, r2
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7ff fcf6 	bl	8003ce4 <uint8ArrayToString>
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 80042f8:	4b2f      	ldr	r3, [pc, #188]	@ (80043b8 <CreateMessage+0x68c>)
 80042fa:	689c      	ldr	r4, [r3, #8]
 80042fc:	4b33      	ldr	r3, [pc, #204]	@ (80043cc <CreateMessage+0x6a0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	1c18      	adds	r0, r3, #0
 8004302:	f7ff f8af 	bl	8003464 <__aeabi_f2d>
 8004306:	0002      	movs	r2, r0
 8004308:	000b      	movs	r3, r1
 800430a:	4d2d      	ldr	r5, [pc, #180]	@ (80043c0 <CreateMessage+0x694>)
 800430c:	4930      	ldr	r1, [pc, #192]	@ (80043d0 <CreateMessage+0x6a4>)
 800430e:	4825      	ldr	r0, [pc, #148]	@ (80043a4 <CreateMessage+0x678>)
 8004310:	9202      	str	r2, [sp, #8]
 8004312:	9303      	str	r3, [sp, #12]
 8004314:	4b27      	ldr	r3, [pc, #156]	@ (80043b4 <CreateMessage+0x688>)
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	002b      	movs	r3, r5
 800431a:	0022      	movs	r2, r4
 800431c:	f01c f842 	bl	80203a4 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
    #endif
  sprintf(&message[strlen(message)], "]");
 8004320:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <CreateMessage+0x678>)
 8004322:	0018      	movs	r0, r3
 8004324:	f7fb ff22 	bl	800016c <strlen>
 8004328:	0002      	movs	r2, r0
 800432a:	4b1e      	ldr	r3, [pc, #120]	@ (80043a4 <CreateMessage+0x678>)
 800432c:	18d3      	adds	r3, r2, r3
 800432e:	4a29      	ldr	r2, [pc, #164]	@ (80043d4 <CreateMessage+0x6a8>)
 8004330:	0011      	movs	r1, r2
 8004332:	0018      	movs	r0, r3
 8004334:	f01c f836 	bl	80203a4 <siprintf>
  index += strlen(message);
 8004338:	4b1a      	ldr	r3, [pc, #104]	@ (80043a4 <CreateMessage+0x678>)
 800433a:	0018      	movs	r0, r3
 800433c:	f7fb ff16 	bl	800016c <strlen>
 8004340:	0003      	movs	r3, r0
 8004342:	b299      	uxth	r1, r3
 8004344:	220e      	movs	r2, #14
 8004346:	18bb      	adds	r3, r7, r2
 8004348:	18ba      	adds	r2, r7, r2
 800434a:	8812      	ldrh	r2, [r2, #0]
 800434c:	188a      	adds	r2, r1, r2
 800434e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8004350:	1dbb      	adds	r3, r7, #6
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d019      	beq.n	800438c <CreateMessage+0x660>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8004358:	4b12      	ldr	r3, [pc, #72]	@ (80043a4 <CreateMessage+0x678>)
 800435a:	0018      	movs	r0, r3
 800435c:	f7fb ff06 	bl	800016c <strlen>
 8004360:	0003      	movs	r3, r0
 8004362:	b29a      	uxth	r2, r3
 8004364:	4b0f      	ldr	r3, [pc, #60]	@ (80043a4 <CreateMessage+0x678>)
 8004366:	0011      	movs	r1, r2
 8004368:	0018      	movs	r0, r3
 800436a:	f7ff fb45 	bl	80039f8 <ESP_Send>
 800436e:	0003      	movs	r3, r0
 8004370:	001a      	movs	r2, r3
 8004372:	4b0d      	ldr	r3, [pc, #52]	@ (80043a8 <CreateMessage+0x67c>)
 8004374:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8004376:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <CreateMessage+0x680>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	001a      	movs	r2, r3
 800437c:	4b0a      	ldr	r3, [pc, #40]	@ (80043a8 <CreateMessage+0x67c>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	4013      	ands	r3, r2
 8004382:	1e5a      	subs	r2, r3, #1
 8004384:	4193      	sbcs	r3, r2
 8004386:	b2da      	uxtb	r2, r3
 8004388:	4b08      	ldr	r3, [pc, #32]	@ (80043ac <CreateMessage+0x680>)
 800438a:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800438c:	4b07      	ldr	r3, [pc, #28]	@ (80043ac <CreateMessage+0x680>)
 800438e:	781a      	ldrb	r2, [r3, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	701a      	strb	r2, [r3, #0]
  return index;
 8004394:	230e      	movs	r3, #14
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	881b      	ldrh	r3, [r3, #0]
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b005      	add	sp, #20
 80043a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	20000578 	.word	0x20000578
 80043a8:	20000739 	.word	0x20000739
 80043ac:	20000031 	.word	0x20000031
 80043b0:	200006f4 	.word	0x200006f4
 80043b4:	20000720 	.word	0x20000720
 80043b8:	20000558 	.word	0x20000558
 80043bc:	20000624 	.word	0x20000624
 80043c0:	20000700 	.word	0x20000700
 80043c4:	08023bf4 	.word	0x08023bf4
 80043c8:	200006c4 	.word	0x200006c4
 80043cc:	20000570 	.word	0x20000570
 80043d0:	08023c50 	.word	0x08023c50
 80043d4:	08023ca8 	.word	0x08023ca8

080043d8 <StartProg>:

void StartProg(){
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 80043dc:	2064      	movs	r0, #100	@ 0x64
 80043de:	f00a fed7 	bl	800f190 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80043e2:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <StartProg+0x60>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	2101      	movs	r1, #1
 80043e8:	0018      	movs	r0, r3
 80043ea:	f00c f958 	bl	801069e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80043ee:	2064      	movs	r0, #100	@ 0x64
 80043f0:	f00a fece 	bl	800f190 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80043f4:	4b10      	ldr	r3, [pc, #64]	@ (8004438 <StartProg+0x60>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	2102      	movs	r1, #2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f00c f94f 	bl	801069e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004400:	23fa      	movs	r3, #250	@ 0xfa
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	0018      	movs	r0, r3
 8004406:	f00a fec3 	bl	800f190 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800440a:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <StartProg+0x60>)
 800440c:	2201      	movs	r2, #1
 800440e:	2101      	movs	r1, #1
 8004410:	0018      	movs	r0, r3
 8004412:	f00c f944 	bl	801069e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004416:	23fa      	movs	r3, #250	@ 0xfa
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	0018      	movs	r0, r3
 800441c:	f00a feb8 	bl	800f190 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <StartProg+0x60>)
 8004422:	2201      	movs	r2, #1
 8004424:	2102      	movs	r1, #2
 8004426:	0018      	movs	r0, r3
 8004428:	f00c f939 	bl	801069e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 800442c:	2028      	movs	r0, #40	@ 0x28
 800442e:	f00a feaf 	bl	800f190 <HAL_Delay>
}
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	50001c00 	.word	0x50001c00

0800443c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 800443c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443e:	b0d9      	sub	sp, #356	@ 0x164
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	0008      	movs	r0, r1
 8004446:	0011      	movs	r1, r2
 8004448:	4ba4      	ldr	r3, [pc, #656]	@ (80046dc <ParseBuffer+0x2a0>)
 800444a:	24b0      	movs	r4, #176	@ 0xb0
 800444c:	0064      	lsls	r4, r4, #1
 800444e:	191b      	adds	r3, r3, r4
 8004450:	19db      	adds	r3, r3, r7
 8004452:	1c02      	adds	r2, r0, #0
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	4ba2      	ldr	r3, [pc, #648]	@ (80046e0 <ParseBuffer+0x2a4>)
 8004458:	191b      	adds	r3, r3, r4
 800445a:	19db      	adds	r3, r3, r7
 800445c:	1c0a      	adds	r2, r1, #0
 800445e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004460:	2380      	movs	r3, #128	@ 0x80
 8004462:	005a      	lsls	r2, r3, #1
 8004464:	2348      	movs	r3, #72	@ 0x48
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	2100      	movs	r1, #0
 800446a:	0018      	movs	r0, r3
 800446c:	f01c f8de 	bl	802062c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004470:	2360      	movs	r3, #96	@ 0x60
 8004472:	33ff      	adds	r3, #255	@ 0xff
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	2203      	movs	r2, #3
 8004478:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800447a:	23ae      	movs	r3, #174	@ 0xae
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	2200      	movs	r2, #0
 8004482:	801a      	strh	r2, [r3, #0]
 8004484:	e013      	b.n	80044ae <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004486:	20ae      	movs	r0, #174	@ 0xae
 8004488:	0040      	lsls	r0, r0, #1
 800448a:	183b      	adds	r3, r7, r0
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	18d2      	adds	r2, r2, r3
 8004492:	183b      	adds	r3, r7, r0
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	7811      	ldrb	r1, [r2, #0]
 8004498:	4a92      	ldr	r2, [pc, #584]	@ (80046e4 <ParseBuffer+0x2a8>)
 800449a:	24b0      	movs	r4, #176	@ 0xb0
 800449c:	0064      	lsls	r4, r4, #1
 800449e:	1912      	adds	r2, r2, r4
 80044a0:	19d2      	adds	r2, r2, r7
 80044a2:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80044a4:	183b      	adds	r3, r7, r0
 80044a6:	881a      	ldrh	r2, [r3, #0]
 80044a8:	183b      	adds	r3, r7, r0
 80044aa:	3201      	adds	r2, #1
 80044ac:	801a      	strh	r2, [r3, #0]
 80044ae:	23ae      	movs	r3, #174	@ 0xae
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	18fa      	adds	r2, r7, r3
 80044b4:	4b89      	ldr	r3, [pc, #548]	@ (80046dc <ParseBuffer+0x2a0>)
 80044b6:	21b0      	movs	r1, #176	@ 0xb0
 80044b8:	0049      	lsls	r1, r1, #1
 80044ba:	185b      	adds	r3, r3, r1
 80044bc:	19db      	adds	r3, r3, r7
 80044be:	8812      	ldrh	r2, [r2, #0]
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d3df      	bcc.n	8004486 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80044c6:	4b85      	ldr	r3, [pc, #532]	@ (80046dc <ParseBuffer+0x2a0>)
 80044c8:	185b      	adds	r3, r3, r1
 80044ca:	19db      	adds	r3, r3, r7
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	4a85      	ldr	r2, [pc, #532]	@ (80046e4 <ParseBuffer+0x2a8>)
 80044d0:	1852      	adds	r2, r2, r1
 80044d2:	19d2      	adds	r2, r2, r7
 80044d4:	2100      	movs	r1, #0
 80044d6:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 80044d8:	f00a fa86 	bl	800e9e8 <GetVerboseLevel>
 80044dc:	0003      	movs	r3, r0
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d106      	bne.n	80044f0 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80044e2:	2348      	movs	r3, #72	@ 0x48
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	4a80      	ldr	r2, [pc, #512]	@ (80046e8 <ParseBuffer+0x2ac>)
 80044e8:	4980      	ldr	r1, [pc, #512]	@ (80046ec <ParseBuffer+0x2b0>)
 80044ea:	2003      	movs	r0, #3
 80044ec:	f00a fa02 	bl	800e8f4 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	26ac      	movs	r6, #172	@ 0xac
 80044f4:	0076      	lsls	r6, r6, #1
 80044f6:	19ba      	adds	r2, r7, r6
 80044f8:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80044fa:	4b7d      	ldr	r3, [pc, #500]	@ (80046f0 <ParseBuffer+0x2b4>)
 80044fc:	25b0      	movs	r5, #176	@ 0xb0
 80044fe:	006d      	lsls	r5, r5, #1
 8004500:	195b      	adds	r3, r3, r5
 8004502:	19db      	adds	r3, r3, r7
 8004504:	4a7b      	ldr	r2, [pc, #492]	@ (80046f4 <ParseBuffer+0x2b8>)
 8004506:	8811      	ldrh	r1, [r2, #0]
 8004508:	8019      	strh	r1, [r3, #0]
 800450a:	7892      	ldrb	r2, [r2, #2]
 800450c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 800450e:	4b7a      	ldr	r3, [pc, #488]	@ (80046f8 <ParseBuffer+0x2bc>)
 8004510:	195b      	adds	r3, r3, r5
 8004512:	19db      	adds	r3, r3, r7
 8004514:	4a79      	ldr	r2, [pc, #484]	@ (80046fc <ParseBuffer+0x2c0>)
 8004516:	6811      	ldr	r1, [r2, #0]
 8004518:	6019      	str	r1, [r3, #0]
 800451a:	8892      	ldrh	r2, [r2, #4]
 800451c:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 800451e:	4b78      	ldr	r3, [pc, #480]	@ (8004700 <ParseBuffer+0x2c4>)
 8004520:	195b      	adds	r3, r3, r5
 8004522:	19db      	adds	r3, r3, r7
 8004524:	4a77      	ldr	r2, [pc, #476]	@ (8004704 <ParseBuffer+0x2c8>)
 8004526:	6811      	ldr	r1, [r2, #0]
 8004528:	6019      	str	r1, [r3, #0]
 800452a:	7912      	ldrb	r2, [r2, #4]
 800452c:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800452e:	4b76      	ldr	r3, [pc, #472]	@ (8004708 <ParseBuffer+0x2cc>)
 8004530:	195b      	adds	r3, r3, r5
 8004532:	19db      	adds	r3, r3, r7
 8004534:	4a75      	ldr	r2, [pc, #468]	@ (800470c <ParseBuffer+0x2d0>)
 8004536:	6811      	ldr	r1, [r2, #0]
 8004538:	6019      	str	r1, [r3, #0]
 800453a:	8892      	ldrh	r2, [r2, #4]
 800453c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800453e:	4b74      	ldr	r3, [pc, #464]	@ (8004710 <ParseBuffer+0x2d4>)
 8004540:	195b      	adds	r3, r3, r5
 8004542:	19db      	adds	r3, r3, r7
 8004544:	223e      	movs	r2, #62	@ 0x3e
 8004546:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004548:	4b72      	ldr	r3, [pc, #456]	@ (8004714 <ParseBuffer+0x2d8>)
 800454a:	195b      	adds	r3, r3, r5
 800454c:	19db      	adds	r3, r3, r7
 800454e:	4a72      	ldr	r2, [pc, #456]	@ (8004718 <ParseBuffer+0x2dc>)
 8004550:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004552:	c313      	stmia	r3!, {r0, r1, r4}
 8004554:	8811      	ldrh	r1, [r2, #0]
 8004556:	8019      	strh	r1, [r3, #0]
 8004558:	7892      	ldrb	r2, [r2, #2]
 800455a:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 800455c:	4b6f      	ldr	r3, [pc, #444]	@ (800471c <ParseBuffer+0x2e0>)
 800455e:	195b      	adds	r3, r3, r5
 8004560:	19db      	adds	r3, r3, r7
 8004562:	4a6f      	ldr	r2, [pc, #444]	@ (8004720 <ParseBuffer+0x2e4>)
 8004564:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004566:	c313      	stmia	r3!, {r0, r1, r4}
 8004568:	8812      	ldrh	r2, [r2, #0]
 800456a:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800456c:	4b5c      	ldr	r3, [pc, #368]	@ (80046e0 <ParseBuffer+0x2a4>)
 800456e:	195b      	adds	r3, r3, r5
 8004570:	19db      	adds	r3, r3, r7
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8004578:	2344      	movs	r3, #68	@ 0x44
 800457a:	18fa      	adds	r2, r7, r3
 800457c:	2348      	movs	r3, #72	@ 0x48
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	0011      	movs	r1, r2
 8004582:	0018      	movs	r0, r3
 8004584:	f01c f88d 	bl	80206a2 <strstr>
 8004588:	0003      	movs	r3, r0
 800458a:	19ba      	adds	r2, r7, r6
 800458c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 800458e:	4b54      	ldr	r3, [pc, #336]	@ (80046e0 <ParseBuffer+0x2a4>)
 8004590:	22b0      	movs	r2, #176	@ 0xb0
 8004592:	0052      	lsls	r2, r2, #1
 8004594:	189b      	adds	r3, r3, r2
 8004596:	19db      	adds	r3, r3, r7
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10c      	bne.n	80045b8 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 800459e:	232c      	movs	r3, #44	@ 0x2c
 80045a0:	18fa      	adds	r2, r7, r3
 80045a2:	2348      	movs	r3, #72	@ 0x48
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	0011      	movs	r1, r2
 80045a8:	0018      	movs	r0, r3
 80045aa:	f01c f87a 	bl	80206a2 <strstr>
 80045ae:	0003      	movs	r3, r0
 80045b0:	22ac      	movs	r2, #172	@ 0xac
 80045b2:	0052      	lsls	r2, r2, #1
 80045b4:	18ba      	adds	r2, r7, r2
 80045b6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80045b8:	4b49      	ldr	r3, [pc, #292]	@ (80046e0 <ParseBuffer+0x2a4>)
 80045ba:	22b0      	movs	r2, #176	@ 0xb0
 80045bc:	0052      	lsls	r2, r2, #1
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	19db      	adds	r3, r3, r7
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d10c      	bne.n	80045e2 <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 80045c8:	2328      	movs	r3, #40	@ 0x28
 80045ca:	18fa      	adds	r2, r7, r3
 80045cc:	2348      	movs	r3, #72	@ 0x48
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	0011      	movs	r1, r2
 80045d2:	0018      	movs	r0, r3
 80045d4:	f01c f865 	bl	80206a2 <strstr>
 80045d8:	0003      	movs	r3, r0
 80045da:	22ac      	movs	r2, #172	@ 0xac
 80045dc:	0052      	lsls	r2, r2, #1
 80045de:	18ba      	adds	r2, r7, r2
 80045e0:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80045e2:	4b3f      	ldr	r3, [pc, #252]	@ (80046e0 <ParseBuffer+0x2a4>)
 80045e4:	22b0      	movs	r2, #176	@ 0xb0
 80045e6:	0052      	lsls	r2, r2, #1
 80045e8:	189b      	adds	r3, r3, r2
 80045ea:	19db      	adds	r3, r3, r7
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d10c      	bne.n	800460c <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 80045f2:	2308      	movs	r3, #8
 80045f4:	18fa      	adds	r2, r7, r3
 80045f6:	2348      	movs	r3, #72	@ 0x48
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	0011      	movs	r1, r2
 80045fc:	0018      	movs	r0, r3
 80045fe:	f01c f850 	bl	80206a2 <strstr>
 8004602:	0003      	movs	r3, r0
 8004604:	22ac      	movs	r2, #172	@ 0xac
 8004606:	0052      	lsls	r2, r2, #1
 8004608:	18ba      	adds	r2, r7, r2
 800460a:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 800460c:	233c      	movs	r3, #60	@ 0x3c
 800460e:	18fa      	adds	r2, r7, r3
 8004610:	2448      	movs	r4, #72	@ 0x48
 8004612:	193b      	adds	r3, r7, r4
 8004614:	0011      	movs	r1, r2
 8004616:	0018      	movs	r0, r3
 8004618:	f01c f843 	bl	80206a2 <strstr>
 800461c:	0003      	movs	r3, r0
 800461e:	22aa      	movs	r2, #170	@ 0xaa
 8004620:	0052      	lsls	r2, r2, #1
 8004622:	18ba      	adds	r2, r7, r2
 8004624:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004626:	2318      	movs	r3, #24
 8004628:	18fa      	adds	r2, r7, r3
 800462a:	193b      	adds	r3, r7, r4
 800462c:	0011      	movs	r1, r2
 800462e:	0018      	movs	r0, r3
 8004630:	f01c f837 	bl	80206a2 <strstr>
 8004634:	0003      	movs	r3, r0
 8004636:	22a8      	movs	r2, #168	@ 0xa8
 8004638:	0052      	lsls	r2, r2, #1
 800463a:	18ba      	adds	r2, r7, r2
 800463c:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 800463e:	4a39      	ldr	r2, [pc, #228]	@ (8004724 <ParseBuffer+0x2e8>)
 8004640:	193b      	adds	r3, r7, r4
 8004642:	0011      	movs	r1, r2
 8004644:	0018      	movs	r0, r3
 8004646:	f01c f82c 	bl	80206a2 <strstr>
 800464a:	0003      	movs	r3, r0
 800464c:	22a6      	movs	r2, #166	@ 0xa6
 800464e:	0052      	lsls	r2, r2, #1
 8004650:	18ba      	adds	r2, r7, r2
 8004652:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004654:	2334      	movs	r3, #52	@ 0x34
 8004656:	18fa      	adds	r2, r7, r3
 8004658:	193b      	adds	r3, r7, r4
 800465a:	0011      	movs	r1, r2
 800465c:	0018      	movs	r0, r3
 800465e:	f01c f820 	bl	80206a2 <strstr>
 8004662:	0003      	movs	r3, r0
 8004664:	22a4      	movs	r2, #164	@ 0xa4
 8004666:	0052      	lsls	r2, r2, #1
 8004668:	18ba      	adds	r2, r7, r2
 800466a:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 800466c:	4b1b      	ldr	r3, [pc, #108]	@ (80046dc <ParseBuffer+0x2a0>)
 800466e:	21b0      	movs	r1, #176	@ 0xb0
 8004670:	0049      	lsls	r1, r1, #1
 8004672:	185b      	adds	r3, r3, r1
 8004674:	19db      	adds	r3, r3, r7
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d800      	bhi.n	800467e <ParseBuffer+0x242>
 800467c:	e0c1      	b.n	8004802 <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 800467e:	22ac      	movs	r2, #172	@ 0xac
 8004680:	0052      	lsls	r2, r2, #1
 8004682:	18bb      	adds	r3, r7, r2
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d054      	beq.n	8004734 <ParseBuffer+0x2f8>
 800468a:	18bb      	adds	r3, r7, r2
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b4f      	cmp	r3, #79	@ 0x4f
 8004692:	d14f      	bne.n	8004734 <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004694:	2360      	movs	r3, #96	@ 0x60
 8004696:	33ff      	adds	r3, #255	@ 0xff
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 800469e:	4b22      	ldr	r3, [pc, #136]	@ (8004728 <ParseBuffer+0x2ec>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b12      	cmp	r3, #18
 80046a4:	d146      	bne.n	8004734 <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80046a6:	4b0d      	ldr	r3, [pc, #52]	@ (80046dc <ParseBuffer+0x2a0>)
 80046a8:	185b      	adds	r3, r3, r1
 80046aa:	19db      	adds	r3, r3, r7
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80046b0:	d10b      	bne.n	80046ca <ParseBuffer+0x28e>
 80046b2:	4b0c      	ldr	r3, [pc, #48]	@ (80046e4 <ParseBuffer+0x2a8>)
 80046b4:	185b      	adds	r3, r3, r1
 80046b6:	19db      	adds	r3, r3, r7
 80046b8:	2221      	movs	r2, #33	@ 0x21
 80046ba:	5c9b      	ldrb	r3, [r3, r2]
 80046bc:	2b32      	cmp	r3, #50	@ 0x32
 80046be:	d104      	bne.n	80046ca <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	0018      	movs	r0, r3
 80046c4:	f002 f930 	bl	8006928 <ParseTime>
 80046c8:	e034      	b.n	8004734 <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 80046ca:	4a18      	ldr	r2, [pc, #96]	@ (800472c <ParseBuffer+0x2f0>)
 80046cc:	4b18      	ldr	r3, [pc, #96]	@ (8004730 <ParseBuffer+0x2f4>)
 80046ce:	0019      	movs	r1, r3
 80046d0:	2001      	movs	r0, #1
 80046d2:	f00a f90f 	bl	800e8f4 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80046d6:	2306      	movs	r3, #6
 80046d8:	e097      	b.n	800480a <ParseBuffer+0x3ce>
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	fffffea2 	.word	0xfffffea2
 80046e0:	fffffea1 	.word	0xfffffea1
 80046e4:	fffffee8 	.word	0xfffffee8
 80046e8:	08023cac 	.word	0x08023cac
 80046ec:	080235a0 	.word	0x080235a0
 80046f0:	fffffee4 	.word	0xfffffee4
 80046f4:	08023cd8 	.word	0x08023cd8
 80046f8:	fffffedc 	.word	0xfffffedc
 80046fc:	08023cdc 	.word	0x08023cdc
 8004700:	fffffed4 	.word	0xfffffed4
 8004704:	08023ce4 	.word	0x08023ce4
 8004708:	fffffecc 	.word	0xfffffecc
 800470c:	08023cec 	.word	0x08023cec
 8004710:	fffffec8 	.word	0xfffffec8
 8004714:	fffffeb8 	.word	0xfffffeb8
 8004718:	08023cf4 	.word	0x08023cf4
 800471c:	fffffea8 	.word	0xfffffea8
 8004720:	08023d04 	.word	0x08023d04
 8004724:	0802594c 	.word	0x0802594c
 8004728:	2000061e 	.word	0x2000061e
 800472c:	08023cc4 	.word	0x08023cc4
 8004730:	080235c4 	.word	0x080235c4
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8004734:	22ac      	movs	r2, #172	@ 0xac
 8004736:	0052      	lsls	r2, r2, #1
 8004738:	18bb      	adds	r3, r7, r2
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <ParseBuffer+0x318>
 8004740:	18bb      	adds	r3, r7, r2
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b72      	cmp	r3, #114	@ 0x72
 8004748:	d104      	bne.n	8004754 <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 800474a:	2360      	movs	r3, #96	@ 0x60
 800474c:	33ff      	adds	r3, #255	@ 0xff
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	2202      	movs	r2, #2
 8004752:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004754:	22ac      	movs	r2, #172	@ 0xac
 8004756:	0052      	lsls	r2, r2, #1
 8004758:	18bb      	adds	r3, r7, r2
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <ParseBuffer+0x338>
 8004760:	18bb      	adds	r3, r7, r2
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b3e      	cmp	r3, #62	@ 0x3e
 8004768:	d104      	bne.n	8004774 <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 800476a:	2360      	movs	r3, #96	@ 0x60
 800476c:	33ff      	adds	r3, #255	@ 0xff
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	2205      	movs	r2, #5
 8004772:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004774:	22ac      	movs	r2, #172	@ 0xac
 8004776:	0052      	lsls	r2, r2, #1
 8004778:	18bb      	adds	r3, r7, r2
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d009      	beq.n	8004794 <ParseBuffer+0x358>
 8004780:	18bb      	adds	r3, r7, r2
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b2b      	cmp	r3, #43	@ 0x2b
 8004788:	d104      	bne.n	8004794 <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 800478a:	2360      	movs	r3, #96	@ 0x60
 800478c:	33ff      	adds	r3, #255	@ 0xff
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	220b      	movs	r2, #11
 8004792:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004794:	22aa      	movs	r2, #170	@ 0xaa
 8004796:	0052      	lsls	r2, r2, #1
 8004798:	18bb      	adds	r3, r7, r2
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <ParseBuffer+0x36e>
 80047a0:	18bb      	adds	r3, r7, r2
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b45      	cmp	r3, #69	@ 0x45
 80047a8:	d00a      	beq.n	80047c0 <ParseBuffer+0x384>
 80047aa:	22a4      	movs	r2, #164	@ 0xa4
 80047ac:	0052      	lsls	r2, r2, #1
 80047ae:	18bb      	adds	r3, r7, r2
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <ParseBuffer+0x38e>
 80047b6:	18bb      	adds	r3, r7, r2
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b46      	cmp	r3, #70	@ 0x46
 80047be:	d104      	bne.n	80047ca <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 80047c0:	2360      	movs	r3, #96	@ 0x60
 80047c2:	33ff      	adds	r3, #255	@ 0xff
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80047ca:	22a8      	movs	r2, #168	@ 0xa8
 80047cc:	0052      	lsls	r2, r2, #1
 80047ce:	18bb      	adds	r3, r7, r2
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <ParseBuffer+0x3aa>
 80047d6:	18bb      	adds	r3, r7, r2
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b57      	cmp	r3, #87	@ 0x57
 80047de:	d102      	bne.n	80047e6 <ParseBuffer+0x3aa>
      ConnectionMade = true;
 80047e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <ParseBuffer+0x3d8>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80047e6:	22a6      	movs	r2, #166	@ 0xa6
 80047e8:	0052      	lsls	r2, r2, #1
 80047ea:	18bb      	adds	r3, r7, r2
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <ParseBuffer+0x3c6>
 80047f2:	18bb      	adds	r3, r7, r2
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b32      	cmp	r3, #50	@ 0x32
 80047fa:	d102      	bne.n	8004802 <ParseBuffer+0x3c6>
      beurs = true;
 80047fc:	4b06      	ldr	r3, [pc, #24]	@ (8004818 <ParseBuffer+0x3dc>)
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8004802:	2360      	movs	r3, #96	@ 0x60
 8004804:	33ff      	adds	r3, #255	@ 0xff
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	781b      	ldrb	r3, [r3, #0]

}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b059      	add	sp, #356	@ 0x164
 8004810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	20000550 	.word	0x20000550
 8004818:	20000552 	.word	0x20000552

0800481c <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004822:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <PollAwake+0x34>)
 8004824:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	0018      	movs	r0, r3
 800482a:	f7fb fc9f 	bl	800016c <strlen>
 800482e:	0003      	movs	r3, r0
 8004830:	b29a      	uxth	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	0011      	movs	r1, r2
 8004836:	0018      	movs	r0, r3
 8004838:	f7ff f8de 	bl	80039f8 <ESP_Send>
 800483c:	1e03      	subs	r3, r0, #0
 800483e:	d001      	beq.n	8004844 <PollAwake+0x28>
    return true;
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <PollAwake+0x2a>
  }
  else{
    return false;
 8004844:	2300      	movs	r3, #0
  }
}
 8004846:	0018      	movs	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	b002      	add	sp, #8
 800484c:	bd80      	pop	{r7, pc}
 800484e:	46c0      	nop			@ (mov r8, r8)
 8004850:	08023d14 	.word	0x08023d14

08004854 <RFPower>:

bool RFPower(){
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800485a:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <RFPower+0x34>)
 800485c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0018      	movs	r0, r3
 8004862:	f7fb fc83 	bl	800016c <strlen>
 8004866:	0003      	movs	r3, r0
 8004868:	b29a      	uxth	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0011      	movs	r1, r2
 800486e:	0018      	movs	r0, r3
 8004870:	f7ff f8c2 	bl	80039f8 <ESP_Send>
 8004874:	1e03      	subs	r3, r0, #0
 8004876:	d001      	beq.n	800487c <RFPower+0x28>
    return true;
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <RFPower+0x2a>
  }
  else{
    return false;
 800487c:	2300      	movs	r3, #0
  }
}
 800487e:	0018      	movs	r0, r3
 8004880:	46bd      	mov	sp, r7
 8004882:	b002      	add	sp, #8
 8004884:	bd80      	pop	{r7, pc}
 8004886:	46c0      	nop			@ (mov r8, r8)
 8004888:	08023d1c 	.word	0x08023d1c

0800488c <CheckRFPower>:

bool CheckRFPower(){
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004892:	4b0b      	ldr	r3, [pc, #44]	@ (80048c0 <CheckRFPower+0x34>)
 8004894:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	0018      	movs	r0, r3
 800489a:	f7fb fc67 	bl	800016c <strlen>
 800489e:	0003      	movs	r3, r0
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0011      	movs	r1, r2
 80048a6:	0018      	movs	r0, r3
 80048a8:	f7ff f8a6 	bl	80039f8 <ESP_Send>
 80048ac:	1e03      	subs	r3, r0, #0
 80048ae:	d001      	beq.n	80048b4 <CheckRFPower+0x28>
    return true;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80048b4:	2300      	movs	r3, #0
  }
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	08023d2c 	.word	0x08023d2c

080048c4 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80048ca:	4b0b      	ldr	r3, [pc, #44]	@ (80048f8 <ATRestore+0x34>)
 80048cc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7fb fc4b 	bl	800016c <strlen>
 80048d6:	0003      	movs	r3, r0
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	0011      	movs	r1, r2
 80048de:	0018      	movs	r0, r3
 80048e0:	f7ff f88a 	bl	80039f8 <ESP_Send>
 80048e4:	1e03      	subs	r3, r0, #0
 80048e6:	d001      	beq.n	80048ec <ATRestore+0x28>
    return true;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <ATRestore+0x2a>
  }
  else{
    return false;
 80048ec:	2300      	movs	r3, #0
  }
}
 80048ee:	0018      	movs	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b002      	add	sp, #8
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	08023d3c 	.word	0x08023d3c

080048fc <CWINIT>:

bool CWINIT(){
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <CWINIT+0x34>)
 8004904:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	0018      	movs	r0, r3
 800490a:	f7fb fc2f 	bl	800016c <strlen>
 800490e:	0003      	movs	r3, r0
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0011      	movs	r1, r2
 8004916:	0018      	movs	r0, r3
 8004918:	f7ff f86e 	bl	80039f8 <ESP_Send>
 800491c:	1e03      	subs	r3, r0, #0
 800491e:	d001      	beq.n	8004924 <CWINIT+0x28>
    return true;
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <CWINIT+0x2a>
  }
  else{
    return false;
 8004924:	2300      	movs	r3, #0
  }
}
 8004926:	0018      	movs	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	b002      	add	sp, #8
 800492c:	bd80      	pop	{r7, pc}
 800492e:	46c0      	nop			@ (mov r8, r8)
 8004930:	08023d4c 	.word	0x08023d4c

08004934 <CWMODE1>:

bool CWMODE1(){
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800493a:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <CWMODE1+0x34>)
 800493c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f7fb fc13 	bl	800016c <strlen>
 8004946:	0003      	movs	r3, r0
 8004948:	b29a      	uxth	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	0011      	movs	r1, r2
 800494e:	0018      	movs	r0, r3
 8004950:	f7ff f852 	bl	80039f8 <ESP_Send>
 8004954:	1e03      	subs	r3, r0, #0
 8004956:	d001      	beq.n	800495c <CWMODE1+0x28>
    return true;
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <CWMODE1+0x2a>
  }
  else{
    return false;
 800495c:	2300      	movs	r3, #0
  }
}
 800495e:	0018      	movs	r0, r3
 8004960:	46bd      	mov	sp, r7
 8004962:	b002      	add	sp, #8
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	08023d5c 	.word	0x08023d5c

0800496c <CWMODE2>:

bool CWMODE2(){
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <CWMODE2+0x34>)
 8004974:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f7fb fbf7 	bl	800016c <strlen>
 800497e:	0003      	movs	r3, r0
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0011      	movs	r1, r2
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff f836 	bl	80039f8 <ESP_Send>
 800498c:	1e03      	subs	r3, r0, #0
 800498e:	d001      	beq.n	8004994 <CWMODE2+0x28>
    return true;
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <CWMODE2+0x2a>
  }
  else{
    return false;
 8004994:	2300      	movs	r3, #0
  }
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b002      	add	sp, #8
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	08023d6c 	.word	0x08023d6c

080049a4 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <CWAUTOCONN+0x34>)
 80049ac:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fb fbdb 	bl	800016c <strlen>
 80049b6:	0003      	movs	r3, r0
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0011      	movs	r1, r2
 80049be:	0018      	movs	r0, r3
 80049c0:	f7ff f81a 	bl	80039f8 <ESP_Send>
 80049c4:	1e03      	subs	r3, r0, #0
 80049c6:	d001      	beq.n	80049cc <CWAUTOCONN+0x28>
    return true;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80049cc:	2300      	movs	r3, #0
  }
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	08023d7c 	.word	0x08023d7c

080049dc <CWJAP>:

bool CWJAP(){
 80049dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049de:	46c6      	mov	lr, r8
 80049e0:	b500      	push	{lr}
 80049e2:	b0a2      	sub	sp, #136	@ 0x88
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	466b      	mov	r3, sp
 80049e8:	4698      	mov	r8, r3
  beursTest = true;
 80049ea:	4b39      	ldr	r3, [pc, #228]	@ (8004ad0 <CWJAP+0xf4>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80049f0:	2618      	movs	r6, #24
 80049f2:	19bb      	adds	r3, r7, r6
 80049f4:	2264      	movs	r2, #100	@ 0x64
 80049f6:	2100      	movs	r1, #0
 80049f8:	0018      	movs	r0, r3
 80049fa:	f01b fe17 	bl	802062c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80049fe:	4b35      	ldr	r3, [pc, #212]	@ (8004ad4 <CWJAP+0xf8>)
 8004a00:	4a35      	ldr	r2, [pc, #212]	@ (8004ad8 <CWJAP+0xfc>)
 8004a02:	4936      	ldr	r1, [pc, #216]	@ (8004adc <CWJAP+0x100>)
 8004a04:	19b8      	adds	r0, r7, r6
 8004a06:	f01b fccd 	bl	80203a4 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004a0a:	19bb      	adds	r3, r7, r6
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f7fb fbad 	bl	800016c <strlen>
 8004a12:	0002      	movs	r2, r0
 8004a14:	216f      	movs	r1, #111	@ 0x6f
 8004a16:	0030      	movs	r0, r6
 8004a18:	180b      	adds	r3, r1, r0
 8004a1a:	19db      	adds	r3, r3, r7
 8004a1c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004a1e:	180b      	adds	r3, r1, r0
 8004a20:	19db      	adds	r3, r3, r7
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	1e5a      	subs	r2, r3, #1
 8004a28:	2180      	movs	r1, #128	@ 0x80
 8004a2a:	1879      	adds	r1, r7, r1
 8004a2c:	600a      	str	r2, [r1, #0]
 8004a2e:	001a      	movs	r2, r3
 8004a30:	60ba      	str	r2, [r7, #8]
 8004a32:	2200      	movs	r2, #0
 8004a34:	60fa      	str	r2, [r7, #12]
 8004a36:	68b8      	ldr	r0, [r7, #8]
 8004a38:	68f9      	ldr	r1, [r7, #12]
 8004a3a:	0002      	movs	r2, r0
 8004a3c:	0f52      	lsrs	r2, r2, #29
 8004a3e:	000e      	movs	r6, r1
 8004a40:	00f6      	lsls	r6, r6, #3
 8004a42:	617e      	str	r6, [r7, #20]
 8004a44:	697e      	ldr	r6, [r7, #20]
 8004a46:	4316      	orrs	r6, r2
 8004a48:	617e      	str	r6, [r7, #20]
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	00d2      	lsls	r2, r2, #3
 8004a4e:	613a      	str	r2, [r7, #16]
 8004a50:	001a      	movs	r2, r3
 8004a52:	603a      	str	r2, [r7, #0]
 8004a54:	2200      	movs	r2, #0
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	6838      	ldr	r0, [r7, #0]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	0f52      	lsrs	r2, r2, #29
 8004a60:	000e      	movs	r6, r1
 8004a62:	00f5      	lsls	r5, r6, #3
 8004a64:	4315      	orrs	r5, r2
 8004a66:	0002      	movs	r2, r0
 8004a68:	00d4      	lsls	r4, r2, #3
 8004a6a:	3307      	adds	r3, #7
 8004a6c:	08db      	lsrs	r3, r3, #3
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	466a      	mov	r2, sp
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	469d      	mov	sp, r3
 8004a76:	466b      	mov	r3, sp
 8004a78:	3300      	adds	r3, #0
 8004a7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004a7c:	246f      	movs	r4, #111	@ 0x6f
 8004a7e:	2518      	movs	r5, #24
 8004a80:	1963      	adds	r3, r4, r5
 8004a82:	19db      	adds	r3, r3, r7
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	3301      	adds	r3, #1
 8004a88:	001a      	movs	r2, r3
 8004a8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f01b fdcc 	bl	802062c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004a94:	1963      	adds	r3, r4, r5
 8004a96:	19db      	adds	r3, r3, r7
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	1979      	adds	r1, r7, r5
 8004a9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f01b fdeb 	bl	802067a <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004aa4:	1963      	adds	r3, r4, r5
 8004aa6:	19db      	adds	r3, r3, r7
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aae:	0011      	movs	r1, r2
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f7fe ffa1 	bl	80039f8 <ESP_Send>
 8004ab6:	1e03      	subs	r3, r0, #0
 8004ab8:	d001      	beq.n	8004abe <CWJAP+0xe2>
    return true;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <CWJAP+0xe4>
  }
  else{
    return false;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	46c5      	mov	sp, r8
  }
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b022      	add	sp, #136	@ 0x88
 8004ac8:	bc80      	pop	{r7}
 8004aca:	46b8      	mov	r8, r7
 8004acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	20000551 	.word	0x20000551
 8004ad4:	08025958 	.word	0x08025958
 8004ad8:	0802594c 	.word	0x0802594c
 8004adc:	08023d90 	.word	0x08023d90

08004ae0 <CWMODE3>:

bool CWMODE3(){
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <CWMODE3+0x34>)
 8004ae8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f7fb fb3d 	bl	800016c <strlen>
 8004af2:	0003      	movs	r3, r0
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0011      	movs	r1, r2
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fe ff7c 	bl	80039f8 <ESP_Send>
 8004b00:	1e03      	subs	r3, r0, #0
 8004b02:	d001      	beq.n	8004b08 <CWMODE3+0x28>
    return true;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <CWMODE3+0x2a>
  }
  else{
    return false;
 8004b08:	2300      	movs	r3, #0
  }
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b002      	add	sp, #8
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	08023da8 	.word	0x08023da8

08004b18 <CWSTATE>:

bool CWSTATE(){
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <CWSTATE+0x34>)
 8004b20:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7fb fb21 	bl	800016c <strlen>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	0011      	movs	r1, r2
 8004b32:	0018      	movs	r0, r3
 8004b34:	f7fe ff60 	bl	80039f8 <ESP_Send>
 8004b38:	1e03      	subs	r3, r0, #0
 8004b3a:	d001      	beq.n	8004b40 <CWSTATE+0x28>
    return true;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004b40:	2300      	movs	r3, #0
  }
}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b002      	add	sp, #8
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	08023db8 	.word	0x08023db8

08004b50 <CWSAP>:

bool CWSAP(){
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004b56:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <CWSAP+0x34>)
 8004b58:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7fb fb05 	bl	800016c <strlen>
 8004b62:	0003      	movs	r3, r0
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0011      	movs	r1, r2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7fe ff44 	bl	80039f8 <ESP_Send>
 8004b70:	1e03      	subs	r3, r0, #0
 8004b72:	d001      	beq.n	8004b78 <CWSAP+0x28>
    return true;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <CWSAP+0x2a>
  }
  else{
    return false;
 8004b78:	2300      	movs	r3, #0
  }
}
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b002      	add	sp, #8
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	08023dc8 	.word	0x08023dc8

08004b88 <CIPMUX>:

bool CIPMUX(){
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bbc <CIPMUX+0x34>)
 8004b90:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	0018      	movs	r0, r3
 8004b96:	f7fb fae9 	bl	800016c <strlen>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0011      	movs	r1, r2
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7fe ff28 	bl	80039f8 <ESP_Send>
 8004ba8:	1e03      	subs	r3, r0, #0
 8004baa:	d001      	beq.n	8004bb0 <CIPMUX+0x28>
    return true;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004bb0:	2300      	movs	r3, #0
  }
}
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b002      	add	sp, #8
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	46c0      	nop			@ (mov r8, r8)
 8004bbc:	08023dec 	.word	0x08023dec

08004bc0 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <WEBSERVER+0x34>)
 8004bc8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7fb facd 	bl	800016c <strlen>
 8004bd2:	0003      	movs	r3, r0
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0011      	movs	r1, r2
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7fe ff0c 	bl	80039f8 <ESP_Send>
 8004be0:	1e03      	subs	r3, r0, #0
 8004be2:	d001      	beq.n	8004be8 <WEBSERVER+0x28>
    return true;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004be8:	2300      	movs	r3, #0
  }
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b002      	add	sp, #8
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			@ (mov r8, r8)
 8004bf4:	08023dfc 	.word	0x08023dfc

08004bf8 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004bf8:	b590      	push	{r4, r7, lr}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 8004bfe:	1cfb      	adds	r3, r7, #3
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 8004c04:	4b26      	ldr	r3, [pc, #152]	@ (8004ca0 <HTTPCPOST+0xa8>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	1dbc      	adds	r4, r7, #6
 8004c0a:	1cf9      	adds	r1, r7, #3
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7ff f88c 	bl	8003d2c <CreateMessage>
 8004c14:	0003      	movs	r3, r0
 8004c16:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004c18:	4b21      	ldr	r3, [pc, #132]	@ (8004ca0 <HTTPCPOST+0xa8>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004c20:	1dbb      	adds	r3, r7, #6
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca4 <HTTPCPOST+0xac>)
 8004c26:	4920      	ldr	r1, [pc, #128]	@ (8004ca8 <HTTPCPOST+0xb0>)
 8004c28:	4820      	ldr	r0, [pc, #128]	@ (8004cac <HTTPCPOST+0xb4>)
 8004c2a:	f01b fbbb 	bl	80203a4 <siprintf>
 8004c2e:	e015      	b.n	8004c5c <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004c30:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb0 <HTTPCPOST+0xb8>)
 8004c32:	4820      	ldr	r0, [pc, #128]	@ (8004cb4 <HTTPCPOST+0xbc>)
 8004c34:	220c      	movs	r2, #12
 8004c36:	0019      	movs	r1, r3
 8004c38:	f002 fc5a 	bl	80074f0 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb0 <HTTPCPOST+0xb8>)
 8004c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb8 <HTTPCPOST+0xc0>)
 8004c40:	0011      	movs	r1, r2
 8004c42:	0018      	movs	r0, r3
 8004c44:	f7ff f84e 	bl	8003ce4 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004c48:	1dbb      	adds	r3, r7, #6
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	4c1a      	ldr	r4, [pc, #104]	@ (8004cb8 <HTTPCPOST+0xc0>)
 8004c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004cbc <HTTPCPOST+0xc4>)
 8004c50:	491b      	ldr	r1, [pc, #108]	@ (8004cc0 <HTTPCPOST+0xc8>)
 8004c52:	4816      	ldr	r0, [pc, #88]	@ (8004cac <HTTPCPOST+0xb4>)
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	0023      	movs	r3, r4
 8004c58:	f01b fba4 	bl	80203a4 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8004c5c:	4b13      	ldr	r3, [pc, #76]	@ (8004cac <HTTPCPOST+0xb4>)
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7fb fa84 	bl	800016c <strlen>
 8004c64:	0002      	movs	r2, r0
 8004c66:	1d3b      	adds	r3, r7, #4
 8004c68:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8004c6a:	1d3b      	adds	r3, r7, #4
 8004c6c:	8818      	ldrh	r0, [r3, #0]
 8004c6e:	1cfb      	adds	r3, r7, #3
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	4a14      	ldr	r2, [pc, #80]	@ (8004cc4 <HTTPCPOST+0xcc>)
 8004c74:	4914      	ldr	r1, [pc, #80]	@ (8004cc8 <HTTPCPOST+0xd0>)
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	0003      	movs	r3, r0
 8004c7a:	2003      	movs	r0, #3
 8004c7c:	f009 fe3a 	bl	800e8f4 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8004c80:	1d3b      	adds	r3, r7, #4
 8004c82:	881a      	ldrh	r2, [r3, #0]
 8004c84:	4b09      	ldr	r3, [pc, #36]	@ (8004cac <HTTPCPOST+0xb4>)
 8004c86:	0011      	movs	r1, r2
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f7fe feb5 	bl	80039f8 <ESP_Send>
 8004c8e:	1e03      	subs	r3, r0, #0
 8004c90:	d001      	beq.n	8004c96 <HTTPCPOST+0x9e>
    return true;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8004c96:	2300      	movs	r3, #0
  }
}
 8004c98:	0018      	movs	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b003      	add	sp, #12
 8004c9e:	bd90      	pop	{r4, r7, pc}
 8004ca0:	20000552 	.word	0x20000552
 8004ca4:	08025974 	.word	0x08025974
 8004ca8:	08023e14 	.word	0x08023e14
 8004cac:	20000578 	.word	0x20000578
 8004cb0:	2000073c 	.word	0x2000073c
 8004cb4:	08080000 	.word	0x08080000
 8004cb8:	20000748 	.word	0x20000748
 8004cbc:	080259b0 	.word	0x080259b0
 8004cc0:	08023e4c 	.word	0x08023e4c
 8004cc4:	08023e8c 	.word	0x08023e8c
 8004cc8:	080235a0 	.word	0x080235a0

08004ccc <SENDDATA>:

bool SENDDATA(){
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af02      	add	r7, sp, #8
  bool result = false;
 8004cd2:	1dfb      	adds	r3, r7, #7
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d14 <SENDDATA+0x48>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	1df9      	adds	r1, r7, #7
 8004cde:	2201      	movs	r2, #1
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7ff f823 	bl	8003d2c <CreateMessage>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	001a      	movs	r2, r3
 8004cea:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <SENDDATA+0x4c>)
 8004cec:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8004cee:	1dfb      	adds	r3, r7, #7
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	4b08      	ldr	r3, [pc, #32]	@ (8004d18 <SENDDATA+0x4c>)
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	4a08      	ldr	r2, [pc, #32]	@ (8004d1c <SENDDATA+0x50>)
 8004cfa:	4909      	ldr	r1, [pc, #36]	@ (8004d20 <SENDDATA+0x54>)
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	0003      	movs	r3, r0
 8004d00:	2003      	movs	r0, #3
 8004d02:	f009 fdf7 	bl	800e8f4 <CreateLine>
  return result;
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	781b      	ldrb	r3, [r3, #0]
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b002      	add	sp, #8
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	20000552 	.word	0x20000552
 8004d18:	2000056c 	.word	0x2000056c
 8004d1c:	08023ee8 	.word	0x08023ee8
 8004d20:	080235a0 	.word	0x080235a0

08004d24 <SLEEP>:

bool SLEEP(){
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <SLEEP+0x34>)
 8004d2c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	0018      	movs	r0, r3
 8004d32:	f7fb fa1b 	bl	800016c <strlen>
 8004d36:	0003      	movs	r3, r0
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0011      	movs	r1, r2
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f7fe fe5a 	bl	80039f8 <ESP_Send>
 8004d44:	1e03      	subs	r3, r0, #0
 8004d46:	d001      	beq.n	8004d4c <SLEEP+0x28>
    return true;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <SLEEP+0x2a>
  }
  else{
    return false;
 8004d4c:	2300      	movs	r3, #0
  }
}
 8004d4e:	0018      	movs	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b002      	add	sp, #8
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	08023f24 	.word	0x08023f24

08004d5c <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004d62:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <CIPSNTPCFG+0x3c>)
 8004d64:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f7fb f9ff 	bl	800016c <strlen>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	0011      	movs	r1, r2
 8004d76:	0018      	movs	r0, r3
 8004d78:	f7fe fe3e 	bl	80039f8 <ESP_Send>
 8004d7c:	1e03      	subs	r3, r0, #0
 8004d7e:	d006      	beq.n	8004d8e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004d80:	23fa      	movs	r3, #250	@ 0xfa
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	0018      	movs	r0, r3
 8004d86:	f00a fa03 	bl	800f190 <HAL_Delay>
    return true;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004d8e:	2300      	movs	r3, #0
  }
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b002      	add	sp, #8
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	08023f34 	.word	0x08023f34

08004d9c <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004da2:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd0 <CIPSNTPTIME+0x34>)
 8004da4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7fb f9df 	bl	800016c <strlen>
 8004dae:	0003      	movs	r3, r0
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0011      	movs	r1, r2
 8004db6:	0018      	movs	r0, r3
 8004db8:	f7fe fe1e 	bl	80039f8 <ESP_Send>
 8004dbc:	1e03      	subs	r3, r0, #0
 8004dbe:	d001      	beq.n	8004dc4 <CIPSNTPTIME+0x28>
    return true;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004dc4:	2300      	movs	r3, #0
  }
}
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	b002      	add	sp, #8
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	08023f84 	.word	0x08023f84

08004dd4 <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004dda:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <CIPSNTPINTV+0x34>)
 8004ddc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f7fb f9c3 	bl	800016c <strlen>
 8004de6:	0003      	movs	r3, r0
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0011      	movs	r1, r2
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7fe fe02 	bl	80039f8 <ESP_Send>
 8004df4:	1e03      	subs	r3, r0, #0
 8004df6:	d001      	beq.n	8004dfc <CIPSNTPINTV+0x28>
    return true;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004dfc:	2300      	movs	r3, #0
  }
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b002      	add	sp, #8
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	08023f98 	.word	0x08023f98

08004e0c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004e0c:	b5b0      	push	{r4, r5, r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	0002      	movs	r2, r0
 8004e14:	1dfb      	adds	r3, r7, #7
 8004e16:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004e18:	4b6c      	ldr	r3, [pc, #432]	@ (8004fcc <DMA_ProcessBuffer+0x1c0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	200e      	movs	r0, #14
 8004e22:	183b      	adds	r3, r7, r0
 8004e24:	2180      	movs	r1, #128	@ 0x80
 8004e26:	0049      	lsls	r1, r1, #1
 8004e28:	1a8a      	subs	r2, r1, r2
 8004e2a:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004e2c:	230d      	movs	r3, #13
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	2203      	movs	r2, #3
 8004e32:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004e34:	183b      	adds	r3, r7, r0
 8004e36:	881a      	ldrh	r2, [r3, #0]
 8004e38:	2380      	movs	r3, #128	@ 0x80
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d903      	bls.n	8004e48 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004e40:	183b      	adds	r3, r7, r0
 8004e42:	2280      	movs	r2, #128	@ 0x80
 8004e44:	0052      	lsls	r2, r2, #1
 8004e46:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004e48:	4b61      	ldr	r3, [pc, #388]	@ (8004fd0 <DMA_ProcessBuffer+0x1c4>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	001a      	movs	r2, r3
 8004e50:	230e      	movs	r3, #14
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d131      	bne.n	8004ebe <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004e5a:	4b5e      	ldr	r3, [pc, #376]	@ (8004fd4 <DMA_ProcessBuffer+0x1c8>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b14      	cmp	r3, #20
 8004e60:	d91b      	bls.n	8004e9a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004e62:	4b5c      	ldr	r3, [pc, #368]	@ (8004fd4 <DMA_ProcessBuffer+0x1c8>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004e68:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd8 <DMA_ProcessBuffer+0x1cc>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d107      	bne.n	8004e80 <DMA_ProcessBuffer+0x74>
 8004e70:	4b5a      	ldr	r3, [pc, #360]	@ (8004fdc <DMA_ProcessBuffer+0x1d0>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004e78:	230d      	movs	r3, #13
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	2207      	movs	r2, #7
 8004e7e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004e80:	4b55      	ldr	r3, [pc, #340]	@ (8004fd8 <DMA_ProcessBuffer+0x1cc>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d103      	bne.n	8004e90 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004e88:	4b55      	ldr	r3, [pc, #340]	@ (8004fe0 <DMA_ProcessBuffer+0x1d4>)
 8004e8a:	220b      	movs	r2, #11
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e016      	b.n	8004ebe <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004e90:	230d      	movs	r3, #13
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	2206      	movs	r2, #6
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e011      	b.n	8004ebe <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8004fd4 <DMA_ProcessBuffer+0x1c8>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8004fd4 <DMA_ProcessBuffer+0x1c8>)
 8004ea4:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004ea6:	f00a f969 	bl	800f17c <HAL_GetTick>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	33f5      	adds	r3, #245	@ 0xf5
 8004eae:	33ff      	adds	r3, #255	@ 0xff
 8004eb0:	001a      	movs	r2, r3
 8004eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8004fe4 <DMA_ProcessBuffer+0x1d8>)
 8004eb4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004eb6:	230d      	movs	r3, #13
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	2204      	movs	r2, #4
 8004ebc:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004ebe:	4b44      	ldr	r3, [pc, #272]	@ (8004fd0 <DMA_ProcessBuffer+0x1c4>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	001a      	movs	r2, r3
 8004ec6:	210e      	movs	r1, #14
 8004ec8:	187b      	adds	r3, r7, r1
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d100      	bne.n	8004ed2 <DMA_ProcessBuffer+0xc6>
 8004ed0:	e075      	b.n	8004fbe <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004ed2:	4b40      	ldr	r3, [pc, #256]	@ (8004fd4 <DMA_ProcessBuffer+0x1c8>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004ed8:	4b43      	ldr	r3, [pc, #268]	@ (8004fe8 <DMA_ProcessBuffer+0x1dc>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd0 <DMA_ProcessBuffer+0x1c4>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d109      	bne.n	8004efc <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004ee8:	187b      	adds	r3, r7, r1
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	4b3e      	ldr	r3, [pc, #248]	@ (8004fe8 <DMA_ProcessBuffer+0x1dc>)
 8004ef0:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004ef2:	230d      	movs	r3, #13
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	220a      	movs	r2, #10
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e060      	b.n	8004fbe <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004efc:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe8 <DMA_ProcessBuffer+0x1dc>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	001a      	movs	r2, r3
 8004f04:	210e      	movs	r1, #14
 8004f06:	187b      	adds	r3, r7, r1
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	4b34      	ldr	r3, [pc, #208]	@ (8004fe8 <DMA_ProcessBuffer+0x1dc>)
 8004f16:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004f18:	230d      	movs	r3, #13
 8004f1a:	18fb      	adds	r3, r7, r3
 8004f1c:	220a      	movs	r2, #10
 8004f1e:	701a      	strb	r2, [r3, #0]
 8004f20:	e04d      	b.n	8004fbe <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004f22:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd0 <DMA_ProcessBuffer+0x1c4>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	001a      	movs	r2, r3
 8004f2a:	210e      	movs	r1, #14
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d917      	bls.n	8004f64 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004f34:	4b26      	ldr	r3, [pc, #152]	@ (8004fd0 <DMA_ProcessBuffer+0x1c4>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fec <DMA_ProcessBuffer+0x1e0>)
 8004f3e:	18d0      	adds	r0, r2, r3
 8004f40:	4b23      	ldr	r3, [pc, #140]	@ (8004fd0 <DMA_ProcessBuffer+0x1c4>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	001a      	movs	r2, r3
 8004f48:	187b      	adds	r3, r7, r1
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	b299      	uxth	r1, r3
 8004f50:	230d      	movs	r3, #13
 8004f52:	18fc      	adds	r4, r7, r3
 8004f54:	1dfb      	adds	r3, r7, #7
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	001a      	movs	r2, r3
 8004f5a:	f7ff fa6f 	bl	800443c <ParseBuffer>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	7023      	strb	r3, [r4, #0]
 8004f62:	e026      	b.n	8004fb2 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004f64:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd0 <DMA_ProcessBuffer+0x1c4>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	001a      	movs	r2, r3
 8004f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fec <DMA_ProcessBuffer+0x1e0>)
 8004f6e:	18d0      	adds	r0, r2, r3
 8004f70:	4b17      	ldr	r3, [pc, #92]	@ (8004fd0 <DMA_ProcessBuffer+0x1c4>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	001a      	movs	r2, r3
 8004f78:	2380      	movs	r3, #128	@ 0x80
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	b299      	uxth	r1, r3
 8004f80:	250d      	movs	r5, #13
 8004f82:	197c      	adds	r4, r7, r5
 8004f84:	1dfb      	adds	r3, r7, #7
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	001a      	movs	r2, r3
 8004f8a:	f7ff fa57 	bl	800443c <ParseBuffer>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004f92:	210e      	movs	r1, #14
 8004f94:	187b      	adds	r3, r7, r1
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004f9c:	197c      	adds	r4, r7, r5
 8004f9e:	1dfb      	adds	r3, r7, #7
 8004fa0:	781a      	ldrb	r2, [r3, #0]
 8004fa2:	187b      	adds	r3, r7, r1
 8004fa4:	8819      	ldrh	r1, [r3, #0]
 8004fa6:	4b11      	ldr	r3, [pc, #68]	@ (8004fec <DMA_ProcessBuffer+0x1e0>)
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f7ff fa47 	bl	800443c <ParseBuffer>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8004fb2:	230e      	movs	r3, #14
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	4b05      	ldr	r3, [pc, #20]	@ (8004fd0 <DMA_ProcessBuffer+0x1c4>)
 8004fbc:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004fbe:	230d      	movs	r3, #13
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	781b      	ldrb	r3, [r3, #0]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b004      	add	sp, #16
 8004fca:	bdb0      	pop	{r4, r5, r7, pc}
 8004fcc:	20001f1c 	.word	0x20001f1c
 8004fd0:	20000761 	.word	0x20000761
 8004fd4:	2000061c 	.word	0x2000061c
 8004fd8:	2000061e 	.word	0x2000061e
 8004fdc:	20000000 	.word	0x20000000
 8004fe0:	20000030 	.word	0x20000030
 8004fe4:	20000618 	.word	0x20000618
 8004fe8:	20000762 	.word	0x20000762
 8004fec:	2000044c 	.word	0x2000044c

08004ff0 <clearDMABuffer>:

void clearDMABuffer(){
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004ff4:	2380      	movs	r3, #128	@ 0x80
 8004ff6:	005a      	lsls	r2, r3, #1
 8004ff8:	4b03      	ldr	r3, [pc, #12]	@ (8005008 <clearDMABuffer+0x18>)
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f01b fb15 	bl	802062c <memset>
}
 8005002:	46c0      	nop			@ (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	2000044c 	.word	0x2000044c

0800500c <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	0002      	movs	r2, r0
 8005014:	1dfb      	adds	r3, r7, #7
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	1dbb      	adds	r3, r7, #6
 800501a:	1c0a      	adds	r2, r1, #0
 800501c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800501e:	210f      	movs	r1, #15
 8005020:	187b      	adds	r3, r7, r1
 8005022:	2200      	movs	r2, #0
 8005024:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8005026:	1dbb      	adds	r3, r7, #6
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d105      	bne.n	800503a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800502e:	187b      	adds	r3, r7, r1
 8005030:	1dfa      	adds	r2, r7, #7
 8005032:	7812      	ldrb	r2, [r2, #0]
 8005034:	4251      	negs	r1, r2
 8005036:	414a      	adcs	r2, r1
 8005038:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800503a:	1dbb      	adds	r3, r7, #6
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d107      	bne.n	8005052 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8005042:	230f      	movs	r3, #15
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	1dfa      	adds	r2, r7, #7
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	3a02      	subs	r2, #2
 800504c:	4251      	negs	r1, r2
 800504e:	414a      	adcs	r2, r1
 8005050:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8005052:	1dbb      	adds	r3, r7, #6
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d107      	bne.n	800506a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800505a:	230f      	movs	r3, #15
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	1dfa      	adds	r2, r7, #7
 8005060:	7812      	ldrb	r2, [r2, #0]
 8005062:	3a05      	subs	r2, #5
 8005064:	4251      	negs	r1, r2
 8005066:	414a      	adcs	r2, r1
 8005068:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 800506a:	1dbb      	adds	r3, r7, #6
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b05      	cmp	r3, #5
 8005070:	d107      	bne.n	8005082 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8005072:	230f      	movs	r3, #15
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	1dfa      	adds	r2, r7, #7
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	3a0b      	subs	r2, #11
 800507c:	4251      	negs	r1, r2
 800507e:	414a      	adcs	r2, r1
 8005080:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8005082:	230f      	movs	r3, #15
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	781b      	ldrb	r3, [r3, #0]
}
 8005088:	0018      	movs	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	b004      	add	sp, #16
 800508e:	bd80      	pop	{r7, pc}

08005090 <AT_Send>:

bool AT_Send(AT_Commands state){
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	0002      	movs	r2, r0
 8005098:	1dfb      	adds	r3, r7, #7
 800509a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 800509c:	230f      	movs	r3, #15
 800509e:	18fb      	adds	r3, r7, r3
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
  switch (state){
 80050a4:	1dfb      	adds	r3, r7, #7
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b14      	cmp	r3, #20
 80050aa:	d900      	bls.n	80050ae <AT_Send+0x1e>
 80050ac:	e19e      	b.n	80053ec <AT_Send+0x35c>
 80050ae:	009a      	lsls	r2, r3, #2
 80050b0:	4bd2      	ldr	r3, [pc, #840]	@ (80053fc <AT_Send+0x36c>)
 80050b2:	18d3      	adds	r3, r2, r3
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80050b8:	4bd1      	ldr	r3, [pc, #836]	@ (8005400 <AT_Send+0x370>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	0018      	movs	r0, r3
 80050be:	f009 fbc3 	bl	800e848 <TimestampIsReached>
 80050c2:	1e03      	subs	r3, r0, #0
 80050c4:	d100      	bne.n	80050c8 <AT_Send+0x38>
 80050c6:	e190      	b.n	80053ea <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 80050c8:	4ace      	ldr	r2, [pc, #824]	@ (8005404 <AT_Send+0x374>)
 80050ca:	4bcf      	ldr	r3, [pc, #828]	@ (8005408 <AT_Send+0x378>)
 80050cc:	0019      	movs	r1, r3
 80050ce:	2003      	movs	r0, #3
 80050d0:	f009 fc10 	bl	800e8f4 <CreateLine>
    ATCommandSend = PollAwake();
 80050d4:	230f      	movs	r3, #15
 80050d6:	18fc      	adds	r4, r7, r3
 80050d8:	f7ff fba0 	bl	800481c <PollAwake>
 80050dc:	0003      	movs	r3, r0
 80050de:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80050e0:	f00a f84c 	bl	800f17c <HAL_GetTick>
 80050e4:	0003      	movs	r3, r0
 80050e6:	3332      	adds	r3, #50	@ 0x32
 80050e8:	001a      	movs	r2, r3
 80050ea:	4bc5      	ldr	r3, [pc, #788]	@ (8005400 <AT_Send+0x370>)
 80050ec:	601a      	str	r2, [r3, #0]
  }
  break;
 80050ee:	e17c      	b.n	80053ea <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80050f0:	4ac6      	ldr	r2, [pc, #792]	@ (800540c <AT_Send+0x37c>)
 80050f2:	4bc5      	ldr	r3, [pc, #788]	@ (8005408 <AT_Send+0x378>)
 80050f4:	0019      	movs	r1, r3
 80050f6:	2003      	movs	r0, #3
 80050f8:	f009 fbfc 	bl	800e8f4 <CreateLine>
    ATCommandSend = RFPower();
 80050fc:	230f      	movs	r3, #15
 80050fe:	18fc      	adds	r4, r7, r3
 8005100:	f7ff fba8 	bl	8004854 <RFPower>
 8005104:	0003      	movs	r3, r0
 8005106:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005108:	f00a f838 	bl	800f17c <HAL_GetTick>
 800510c:	0003      	movs	r3, r0
 800510e:	330a      	adds	r3, #10
 8005110:	001a      	movs	r2, r3
 8005112:	4bbb      	ldr	r3, [pc, #748]	@ (8005400 <AT_Send+0x370>)
 8005114:	601a      	str	r2, [r3, #0]
    break;
 8005116:	e169      	b.n	80053ec <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8005118:	4abd      	ldr	r2, [pc, #756]	@ (8005410 <AT_Send+0x380>)
 800511a:	4bbb      	ldr	r3, [pc, #748]	@ (8005408 <AT_Send+0x378>)
 800511c:	0019      	movs	r1, r3
 800511e:	2003      	movs	r0, #3
 8005120:	f009 fbe8 	bl	800e8f4 <CreateLine>
    ATCommandSend = CheckRFPower();
 8005124:	230f      	movs	r3, #15
 8005126:	18fc      	adds	r4, r7, r3
 8005128:	f7ff fbb0 	bl	800488c <CheckRFPower>
 800512c:	0003      	movs	r3, r0
 800512e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005130:	f00a f824 	bl	800f17c <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	330a      	adds	r3, #10
 8005138:	001a      	movs	r2, r3
 800513a:	4bb1      	ldr	r3, [pc, #708]	@ (8005400 <AT_Send+0x370>)
 800513c:	601a      	str	r2, [r3, #0]
    break;
 800513e:	e155      	b.n	80053ec <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8005140:	4ab4      	ldr	r2, [pc, #720]	@ (8005414 <AT_Send+0x384>)
 8005142:	4bb1      	ldr	r3, [pc, #708]	@ (8005408 <AT_Send+0x378>)
 8005144:	0019      	movs	r1, r3
 8005146:	2003      	movs	r0, #3
 8005148:	f009 fbd4 	bl	800e8f4 <CreateLine>
    ATCommandSend = ATRestore();
 800514c:	230f      	movs	r3, #15
 800514e:	18fc      	adds	r4, r7, r3
 8005150:	f7ff fbb8 	bl	80048c4 <ATRestore>
 8005154:	0003      	movs	r3, r0
 8005156:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8005158:	f00a f810 	bl	800f17c <HAL_GetTick>
 800515c:	0003      	movs	r3, r0
 800515e:	3332      	adds	r3, #50	@ 0x32
 8005160:	001a      	movs	r2, r3
 8005162:	4ba7      	ldr	r3, [pc, #668]	@ (8005400 <AT_Send+0x370>)
 8005164:	601a      	str	r2, [r3, #0]
    break;
 8005166:	e141      	b.n	80053ec <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8005168:	4aab      	ldr	r2, [pc, #684]	@ (8005418 <AT_Send+0x388>)
 800516a:	4ba7      	ldr	r3, [pc, #668]	@ (8005408 <AT_Send+0x378>)
 800516c:	0019      	movs	r1, r3
 800516e:	2003      	movs	r0, #3
 8005170:	f009 fbc0 	bl	800e8f4 <CreateLine>
    ATCommandSend = CWINIT();
 8005174:	230f      	movs	r3, #15
 8005176:	18fc      	adds	r4, r7, r3
 8005178:	f7ff fbc0 	bl	80048fc <CWINIT>
 800517c:	0003      	movs	r3, r0
 800517e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005180:	f009 fffc 	bl	800f17c <HAL_GetTick>
 8005184:	0003      	movs	r3, r0
 8005186:	33f5      	adds	r3, #245	@ 0xf5
 8005188:	33ff      	adds	r3, #255	@ 0xff
 800518a:	001a      	movs	r2, r3
 800518c:	4b9c      	ldr	r3, [pc, #624]	@ (8005400 <AT_Send+0x370>)
 800518e:	601a      	str	r2, [r3, #0]
    break;
 8005190:	e12c      	b.n	80053ec <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8005192:	4aa2      	ldr	r2, [pc, #648]	@ (800541c <AT_Send+0x38c>)
 8005194:	4b9c      	ldr	r3, [pc, #624]	@ (8005408 <AT_Send+0x378>)
 8005196:	0019      	movs	r1, r3
 8005198:	2003      	movs	r0, #3
 800519a:	f009 fbab 	bl	800e8f4 <CreateLine>
    ATCommandSend = CWSTATE();
 800519e:	230f      	movs	r3, #15
 80051a0:	18fc      	adds	r4, r7, r3
 80051a2:	f7ff fcb9 	bl	8004b18 <CWSTATE>
 80051a6:	0003      	movs	r3, r0
 80051a8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051aa:	f009 ffe7 	bl	800f17c <HAL_GetTick>
 80051ae:	0003      	movs	r3, r0
 80051b0:	33f5      	adds	r3, #245	@ 0xf5
 80051b2:	33ff      	adds	r3, #255	@ 0xff
 80051b4:	001a      	movs	r2, r3
 80051b6:	4b92      	ldr	r3, [pc, #584]	@ (8005400 <AT_Send+0x370>)
 80051b8:	601a      	str	r2, [r3, #0]
    break;
 80051ba:	e117      	b.n	80053ec <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80051bc:	4a98      	ldr	r2, [pc, #608]	@ (8005420 <AT_Send+0x390>)
 80051be:	4b92      	ldr	r3, [pc, #584]	@ (8005408 <AT_Send+0x378>)
 80051c0:	0019      	movs	r1, r3
 80051c2:	2003      	movs	r0, #3
 80051c4:	f009 fb96 	bl	800e8f4 <CreateLine>
    ATCommandSend = CWMODE1();
 80051c8:	230f      	movs	r3, #15
 80051ca:	18fc      	adds	r4, r7, r3
 80051cc:	f7ff fbb2 	bl	8004934 <CWMODE1>
 80051d0:	0003      	movs	r3, r0
 80051d2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051d4:	f009 ffd2 	bl	800f17c <HAL_GetTick>
 80051d8:	0003      	movs	r3, r0
 80051da:	330a      	adds	r3, #10
 80051dc:	001a      	movs	r2, r3
 80051de:	4b88      	ldr	r3, [pc, #544]	@ (8005400 <AT_Send+0x370>)
 80051e0:	601a      	str	r2, [r3, #0]
    break;
 80051e2:	e103      	b.n	80053ec <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80051e4:	4a8e      	ldr	r2, [pc, #568]	@ (8005420 <AT_Send+0x390>)
 80051e6:	4b88      	ldr	r3, [pc, #544]	@ (8005408 <AT_Send+0x378>)
 80051e8:	0019      	movs	r1, r3
 80051ea:	2003      	movs	r0, #3
 80051ec:	f009 fb82 	bl	800e8f4 <CreateLine>
    ATCommandSend = CWMODE2();
 80051f0:	230f      	movs	r3, #15
 80051f2:	18fc      	adds	r4, r7, r3
 80051f4:	f7ff fbba 	bl	800496c <CWMODE2>
 80051f8:	0003      	movs	r3, r0
 80051fa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051fc:	f009 ffbe 	bl	800f17c <HAL_GetTick>
 8005200:	0003      	movs	r3, r0
 8005202:	330a      	adds	r3, #10
 8005204:	001a      	movs	r2, r3
 8005206:	4b7e      	ldr	r3, [pc, #504]	@ (8005400 <AT_Send+0x370>)
 8005208:	601a      	str	r2, [r3, #0]
    break;
 800520a:	e0ef      	b.n	80053ec <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 800520c:	4a85      	ldr	r2, [pc, #532]	@ (8005424 <AT_Send+0x394>)
 800520e:	4b7e      	ldr	r3, [pc, #504]	@ (8005408 <AT_Send+0x378>)
 8005210:	0019      	movs	r1, r3
 8005212:	2003      	movs	r0, #3
 8005214:	f009 fb6e 	bl	800e8f4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8005218:	230f      	movs	r3, #15
 800521a:	18fc      	adds	r4, r7, r3
 800521c:	f7ff fbc2 	bl	80049a4 <CWAUTOCONN>
 8005220:	0003      	movs	r3, r0
 8005222:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005224:	f009 ffaa 	bl	800f17c <HAL_GetTick>
 8005228:	0003      	movs	r3, r0
 800522a:	330a      	adds	r3, #10
 800522c:	001a      	movs	r2, r3
 800522e:	4b74      	ldr	r3, [pc, #464]	@ (8005400 <AT_Send+0x370>)
 8005230:	601a      	str	r2, [r3, #0]
    break;
 8005232:	e0db      	b.n	80053ec <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8005234:	4a7c      	ldr	r2, [pc, #496]	@ (8005428 <AT_Send+0x398>)
 8005236:	4b74      	ldr	r3, [pc, #464]	@ (8005408 <AT_Send+0x378>)
 8005238:	0019      	movs	r1, r3
 800523a:	2003      	movs	r0, #3
 800523c:	f009 fb5a 	bl	800e8f4 <CreateLine>
    ATCommandSend = CWJAP();
 8005240:	230f      	movs	r3, #15
 8005242:	18fc      	adds	r4, r7, r3
 8005244:	f7ff fbca 	bl	80049dc <CWJAP>
 8005248:	0003      	movs	r3, r0
 800524a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800524c:	f009 ff96 	bl	800f17c <HAL_GetTick>
 8005250:	0003      	movs	r3, r0
 8005252:	3332      	adds	r3, #50	@ 0x32
 8005254:	001a      	movs	r2, r3
 8005256:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <AT_Send+0x370>)
 8005258:	601a      	str	r2, [r3, #0]
    break;
 800525a:	e0c7      	b.n	80053ec <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 800525c:	4a73      	ldr	r2, [pc, #460]	@ (800542c <AT_Send+0x39c>)
 800525e:	4b6a      	ldr	r3, [pc, #424]	@ (8005408 <AT_Send+0x378>)
 8005260:	0019      	movs	r1, r3
 8005262:	2003      	movs	r0, #3
 8005264:	f009 fb46 	bl	800e8f4 <CreateLine>
    ATCommandSend = CWMODE3();
 8005268:	230f      	movs	r3, #15
 800526a:	18fc      	adds	r4, r7, r3
 800526c:	f7ff fc38 	bl	8004ae0 <CWMODE3>
 8005270:	0003      	movs	r3, r0
 8005272:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005274:	f009 ff82 	bl	800f17c <HAL_GetTick>
 8005278:	0003      	movs	r3, r0
 800527a:	330a      	adds	r3, #10
 800527c:	001a      	movs	r2, r3
 800527e:	4b60      	ldr	r3, [pc, #384]	@ (8005400 <AT_Send+0x370>)
 8005280:	601a      	str	r2, [r3, #0]
    break;
 8005282:	e0b3      	b.n	80053ec <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8005284:	4a6a      	ldr	r2, [pc, #424]	@ (8005430 <AT_Send+0x3a0>)
 8005286:	4b60      	ldr	r3, [pc, #384]	@ (8005408 <AT_Send+0x378>)
 8005288:	0019      	movs	r1, r3
 800528a:	2003      	movs	r0, #3
 800528c:	f009 fb32 	bl	800e8f4 <CreateLine>
    ATCommandSend = CWSAP();
 8005290:	230f      	movs	r3, #15
 8005292:	18fc      	adds	r4, r7, r3
 8005294:	f7ff fc5c 	bl	8004b50 <CWSAP>
 8005298:	0003      	movs	r3, r0
 800529a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800529c:	f009 ff6e 	bl	800f17c <HAL_GetTick>
 80052a0:	0003      	movs	r3, r0
 80052a2:	330a      	adds	r3, #10
 80052a4:	001a      	movs	r2, r3
 80052a6:	4b56      	ldr	r3, [pc, #344]	@ (8005400 <AT_Send+0x370>)
 80052a8:	601a      	str	r2, [r3, #0]
    break;
 80052aa:	e09f      	b.n	80053ec <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 80052ac:	4a61      	ldr	r2, [pc, #388]	@ (8005434 <AT_Send+0x3a4>)
 80052ae:	4b56      	ldr	r3, [pc, #344]	@ (8005408 <AT_Send+0x378>)
 80052b0:	0019      	movs	r1, r3
 80052b2:	2003      	movs	r0, #3
 80052b4:	f009 fb1e 	bl	800e8f4 <CreateLine>
    ATCommandSend = CIPMUX();
 80052b8:	230f      	movs	r3, #15
 80052ba:	18fc      	adds	r4, r7, r3
 80052bc:	f7ff fc64 	bl	8004b88 <CIPMUX>
 80052c0:	0003      	movs	r3, r0
 80052c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052c4:	f009 ff5a 	bl	800f17c <HAL_GetTick>
 80052c8:	0003      	movs	r3, r0
 80052ca:	330a      	adds	r3, #10
 80052cc:	001a      	movs	r2, r3
 80052ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005400 <AT_Send+0x370>)
 80052d0:	601a      	str	r2, [r3, #0]
    break;
 80052d2:	e08b      	b.n	80053ec <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80052d4:	4a58      	ldr	r2, [pc, #352]	@ (8005438 <AT_Send+0x3a8>)
 80052d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005408 <AT_Send+0x378>)
 80052d8:	0019      	movs	r1, r3
 80052da:	2003      	movs	r0, #3
 80052dc:	f009 fb0a 	bl	800e8f4 <CreateLine>
    ATCommandSend = WEBSERVER();
 80052e0:	230f      	movs	r3, #15
 80052e2:	18fc      	adds	r4, r7, r3
 80052e4:	f7ff fc6c 	bl	8004bc0 <WEBSERVER>
 80052e8:	0003      	movs	r3, r0
 80052ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80052ec:	f009 ff46 	bl	800f17c <HAL_GetTick>
 80052f0:	0003      	movs	r3, r0
 80052f2:	330a      	adds	r3, #10
 80052f4:	001a      	movs	r2, r3
 80052f6:	4b42      	ldr	r3, [pc, #264]	@ (8005400 <AT_Send+0x370>)
 80052f8:	601a      	str	r2, [r3, #0]
    break;
 80052fa:	e077      	b.n	80053ec <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80052fc:	230f      	movs	r3, #15
 80052fe:	18fc      	adds	r4, r7, r3
 8005300:	f7ff fc7a 	bl	8004bf8 <HTTPCPOST>
 8005304:	0003      	movs	r3, r0
 8005306:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005308:	f009 ff38 	bl	800f17c <HAL_GetTick>
 800530c:	0003      	movs	r3, r0
 800530e:	33f5      	adds	r3, #245	@ 0xf5
 8005310:	33ff      	adds	r3, #255	@ 0xff
 8005312:	001a      	movs	r2, r3
 8005314:	4b3a      	ldr	r3, [pc, #232]	@ (8005400 <AT_Send+0x370>)
 8005316:	601a      	str	r2, [r3, #0]
    break;
 8005318:	e068      	b.n	80053ec <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 800531a:	4a48      	ldr	r2, [pc, #288]	@ (800543c <AT_Send+0x3ac>)
 800531c:	4b3a      	ldr	r3, [pc, #232]	@ (8005408 <AT_Send+0x378>)
 800531e:	0019      	movs	r1, r3
 8005320:	2003      	movs	r0, #3
 8005322:	f009 fae7 	bl	800e8f4 <CreateLine>
    ATCommandSend = SENDDATA();
 8005326:	230f      	movs	r3, #15
 8005328:	18fc      	adds	r4, r7, r3
 800532a:	f7ff fccf 	bl	8004ccc <SENDDATA>
 800532e:	0003      	movs	r3, r0
 8005330:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005332:	f009 ff23 	bl	800f17c <HAL_GetTick>
 8005336:	0003      	movs	r3, r0
 8005338:	33f5      	adds	r3, #245	@ 0xf5
 800533a:	33ff      	adds	r3, #255	@ 0xff
 800533c:	001a      	movs	r2, r3
 800533e:	4b30      	ldr	r3, [pc, #192]	@ (8005400 <AT_Send+0x370>)
 8005340:	601a      	str	r2, [r3, #0]
    break;
 8005342:	e053      	b.n	80053ec <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005344:	4a3e      	ldr	r2, [pc, #248]	@ (8005440 <AT_Send+0x3b0>)
 8005346:	4b30      	ldr	r3, [pc, #192]	@ (8005408 <AT_Send+0x378>)
 8005348:	0019      	movs	r1, r3
 800534a:	2003      	movs	r0, #3
 800534c:	f009 fad2 	bl	800e8f4 <CreateLine>
    ATCommandSend = SLEEP();
 8005350:	230f      	movs	r3, #15
 8005352:	18fc      	adds	r4, r7, r3
 8005354:	f7ff fce6 	bl	8004d24 <SLEEP>
 8005358:	0003      	movs	r3, r0
 800535a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800535c:	f009 ff0e 	bl	800f17c <HAL_GetTick>
 8005360:	0003      	movs	r3, r0
 8005362:	330a      	adds	r3, #10
 8005364:	001a      	movs	r2, r3
 8005366:	4b26      	ldr	r3, [pc, #152]	@ (8005400 <AT_Send+0x370>)
 8005368:	601a      	str	r2, [r3, #0]
    break;
 800536a:	e03f      	b.n	80053ec <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800536c:	4a35      	ldr	r2, [pc, #212]	@ (8005444 <AT_Send+0x3b4>)
 800536e:	4b26      	ldr	r3, [pc, #152]	@ (8005408 <AT_Send+0x378>)
 8005370:	0019      	movs	r1, r3
 8005372:	2003      	movs	r0, #3
 8005374:	f009 fabe 	bl	800e8f4 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005378:	230f      	movs	r3, #15
 800537a:	18fc      	adds	r4, r7, r3
 800537c:	f7ff fcee 	bl	8004d5c <CIPSNTPCFG>
 8005380:	0003      	movs	r3, r0
 8005382:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005384:	f009 fefa 	bl	800f17c <HAL_GetTick>
 8005388:	0003      	movs	r3, r0
 800538a:	330a      	adds	r3, #10
 800538c:	001a      	movs	r2, r3
 800538e:	4b1c      	ldr	r3, [pc, #112]	@ (8005400 <AT_Send+0x370>)
 8005390:	601a      	str	r2, [r3, #0]
    break;
 8005392:	e02b      	b.n	80053ec <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8005394:	4a2c      	ldr	r2, [pc, #176]	@ (8005448 <AT_Send+0x3b8>)
 8005396:	4b1c      	ldr	r3, [pc, #112]	@ (8005408 <AT_Send+0x378>)
 8005398:	0019      	movs	r1, r3
 800539a:	2003      	movs	r0, #3
 800539c:	f009 faaa 	bl	800e8f4 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80053a0:	230f      	movs	r3, #15
 80053a2:	18fc      	adds	r4, r7, r3
 80053a4:	f7ff fcfa 	bl	8004d9c <CIPSNTPTIME>
 80053a8:	0003      	movs	r3, r0
 80053aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80053ac:	f009 fee6 	bl	800f17c <HAL_GetTick>
 80053b0:	0003      	movs	r3, r0
 80053b2:	33f5      	adds	r3, #245	@ 0xf5
 80053b4:	33ff      	adds	r3, #255	@ 0xff
 80053b6:	001a      	movs	r2, r3
 80053b8:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <AT_Send+0x370>)
 80053ba:	601a      	str	r2, [r3, #0]
    break;
 80053bc:	e016      	b.n	80053ec <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80053be:	4a23      	ldr	r2, [pc, #140]	@ (800544c <AT_Send+0x3bc>)
 80053c0:	4b11      	ldr	r3, [pc, #68]	@ (8005408 <AT_Send+0x378>)
 80053c2:	0019      	movs	r1, r3
 80053c4:	2003      	movs	r0, #3
 80053c6:	f009 fa95 	bl	800e8f4 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80053ca:	230f      	movs	r3, #15
 80053cc:	18fc      	adds	r4, r7, r3
 80053ce:	f7ff fd01 	bl	8004dd4 <CIPSNTPINTV>
 80053d2:	0003      	movs	r3, r0
 80053d4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80053d6:	f009 fed1 	bl	800f17c <HAL_GetTick>
 80053da:	0003      	movs	r3, r0
 80053dc:	330a      	adds	r3, #10
 80053de:	001a      	movs	r2, r3
 80053e0:	4b07      	ldr	r3, [pc, #28]	@ (8005400 <AT_Send+0x370>)
 80053e2:	601a      	str	r2, [r3, #0]
    break;
 80053e4:	e002      	b.n	80053ec <AT_Send+0x35c>

  case AT_END:
    break;
 80053e6:	46c0      	nop			@ (mov r8, r8)
 80053e8:	e000      	b.n	80053ec <AT_Send+0x35c>
  break;
 80053ea:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80053ec:	230f      	movs	r3, #15
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	781b      	ldrb	r3, [r3, #0]
}
 80053f2:	0018      	movs	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	b005      	add	sp, #20
 80053f8:	bd90      	pop	{r4, r7, pc}
 80053fa:	46c0      	nop			@ (mov r8, r8)
 80053fc:	08025a0c 	.word	0x08025a0c
 8005400:	20000618 	.word	0x20000618
 8005404:	08023fb0 	.word	0x08023fb0
 8005408:	080235a0 	.word	0x080235a0
 800540c:	08023fbc 	.word	0x08023fbc
 8005410:	08023fd0 	.word	0x08023fd0
 8005414:	08023fe4 	.word	0x08023fe4
 8005418:	08023ff4 	.word	0x08023ff4
 800541c:	08024008 	.word	0x08024008
 8005420:	08024020 	.word	0x08024020
 8005424:	08024038 	.word	0x08024038
 8005428:	08024050 	.word	0x08024050
 800542c:	08024064 	.word	0x08024064
 8005430:	08024080 	.word	0x08024080
 8005434:	0802409c 	.word	0x0802409c
 8005438:	080240b8 	.word	0x080240b8
 800543c:	080240d4 	.word	0x080240d4
 8005440:	080240e4 	.word	0x080240e4
 8005444:	08024108 	.word	0x08024108
 8005448:	0802411c 	.word	0x0802411c
 800544c:	08024134 	.word	0x08024134

08005450 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8005456:	1dfb      	adds	r3, r7, #7
 8005458:	2200      	movs	r2, #0
 800545a:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 800545c:	4b7d      	ldr	r3, [pc, #500]	@ (8005654 <ESP_WakeTest+0x204>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b05      	cmp	r3, #5
 8005462:	d900      	bls.n	8005466 <ESP_WakeTest+0x16>
 8005464:	e0d9      	b.n	800561a <ESP_WakeTest+0x1ca>
 8005466:	009a      	lsls	r2, r3, #2
 8005468:	4b7b      	ldr	r3, [pc, #492]	@ (8005658 <ESP_WakeTest+0x208>)
 800546a:	18d3      	adds	r3, r2, r3
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8005470:	4b7a      	ldr	r3, [pc, #488]	@ (800565c <ESP_WakeTest+0x20c>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2201      	movs	r2, #1
 8005476:	4053      	eors	r3, r2
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d036      	beq.n	80054ec <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800547e:	2380      	movs	r3, #128	@ 0x80
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	4877      	ldr	r0, [pc, #476]	@ (8005660 <ESP_WakeTest+0x210>)
 8005484:	2200      	movs	r2, #0
 8005486:	0019      	movs	r1, r3
 8005488:	f00b f909 	bl	801069e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800548c:	2032      	movs	r0, #50	@ 0x32
 800548e:	f009 fe7f 	bl	800f190 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	4872      	ldr	r0, [pc, #456]	@ (8005660 <ESP_WakeTest+0x210>)
 8005498:	2201      	movs	r2, #1
 800549a:	0019      	movs	r1, r3
 800549c:	f00b f8ff 	bl	801069e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054a0:	200a      	movs	r0, #10
 80054a2:	f009 fe75 	bl	800f190 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80054a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005664 <ESP_WakeTest+0x214>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	2101      	movs	r1, #1
 80054ac:	0018      	movs	r0, r3
 80054ae:	f00b f8f6 	bl	801069e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054b2:	200a      	movs	r0, #10
 80054b4:	f009 fe6c 	bl	800f190 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80054b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005664 <ESP_WakeTest+0x214>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	2102      	movs	r1, #2
 80054be:	0018      	movs	r0, r3
 80054c0:	f00b f8ed 	bl	801069e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80054c4:	200a      	movs	r0, #10
 80054c6:	f009 fe63 	bl	800f190 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80054ca:	4b66      	ldr	r3, [pc, #408]	@ (8005664 <ESP_WakeTest+0x214>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	2101      	movs	r1, #1
 80054d0:	0018      	movs	r0, r3
 80054d2:	f00b f8e4 	bl	801069e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80054d6:	f009 fe51 	bl	800f17c <HAL_GetTick>
 80054da:	0003      	movs	r3, r0
 80054dc:	22af      	movs	r2, #175	@ 0xaf
 80054de:	0092      	lsls	r2, r2, #2
 80054e0:	189a      	adds	r2, r3, r2
 80054e2:	4b61      	ldr	r3, [pc, #388]	@ (8005668 <ESP_WakeTest+0x218>)
 80054e4:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80054e6:	4b5d      	ldr	r3, [pc, #372]	@ (800565c <ESP_WakeTest+0x20c>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80054ec:	2380      	movs	r3, #128	@ 0x80
 80054ee:	005a      	lsls	r2, r3, #1
 80054f0:	4b5e      	ldr	r3, [pc, #376]	@ (800566c <ESP_WakeTest+0x21c>)
 80054f2:	0011      	movs	r1, r2
 80054f4:	0018      	movs	r0, r3
 80054f6:	f7fe fab3 	bl	8003a60 <ESP_Receive>
 80054fa:	1e03      	subs	r3, r0, #0
 80054fc:	d100      	bne.n	8005500 <ESP_WakeTest+0xb0>
 80054fe:	e09f      	b.n	8005640 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005500:	4b54      	ldr	r3, [pc, #336]	@ (8005654 <ESP_WakeTest+0x204>)
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005506:	e09b      	b.n	8005640 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8005508:	4b57      	ldr	r3, [pc, #348]	@ (8005668 <ESP_WakeTest+0x218>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	0018      	movs	r0, r3
 800550e:	f009 f99b 	bl	800e848 <TimestampIsReached>
 8005512:	1e03      	subs	r3, r0, #0
 8005514:	d100      	bne.n	8005518 <ESP_WakeTest+0xc8>
 8005516:	e095      	b.n	8005644 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 8005518:	4b55      	ldr	r3, [pc, #340]	@ (8005670 <ESP_WakeTest+0x220>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	1dfc      	adds	r4, r7, #7
 800551e:	0018      	movs	r0, r3
 8005520:	f7ff fdb6 	bl	8005090 <AT_Send>
 8005524:	0003      	movs	r3, r0
 8005526:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005528:	1dfb      	adds	r3, r7, #7
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d100      	bne.n	8005532 <ESP_WakeTest+0xe2>
 8005530:	e088      	b.n	8005644 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005532:	4b48      	ldr	r3, [pc, #288]	@ (8005654 <ESP_WakeTest+0x204>)
 8005534:	2202      	movs	r2, #2
 8005536:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005538:	e084      	b.n	8005644 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800553a:	4b4b      	ldr	r3, [pc, #300]	@ (8005668 <ESP_WakeTest+0x218>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	0018      	movs	r0, r3
 8005540:	f009 f982 	bl	800e848 <TimestampIsReached>
 8005544:	1e03      	subs	r3, r0, #0
 8005546:	d100      	bne.n	800554a <ESP_WakeTest+0xfa>
 8005548:	e07e      	b.n	8005648 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800554a:	4b4a      	ldr	r3, [pc, #296]	@ (8005674 <ESP_WakeTest+0x224>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	0018      	movs	r0, r3
 8005550:	f7ff fc5c 	bl	8004e0c <DMA_ProcessBuffer>
 8005554:	0003      	movs	r3, r0
 8005556:	001a      	movs	r2, r3
 8005558:	4b47      	ldr	r3, [pc, #284]	@ (8005678 <ESP_WakeTest+0x228>)
 800555a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800555c:	4b46      	ldr	r3, [pc, #280]	@ (8005678 <ESP_WakeTest+0x228>)
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	4b44      	ldr	r3, [pc, #272]	@ (8005674 <ESP_WakeTest+0x224>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	1dbc      	adds	r4, r7, #6
 8005566:	0019      	movs	r1, r3
 8005568:	0010      	movs	r0, r2
 800556a:	f7ff fd4f 	bl	800500c <ATCompare>
 800556e:	0003      	movs	r3, r0
 8005570:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005572:	4b41      	ldr	r3, [pc, #260]	@ (8005678 <ESP_WakeTest+0x228>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d102      	bne.n	8005580 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 800557a:	4b36      	ldr	r3, [pc, #216]	@ (8005654 <ESP_WakeTest+0x204>)
 800557c:	2201      	movs	r2, #1
 800557e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005580:	4b3d      	ldr	r3, [pc, #244]	@ (8005678 <ESP_WakeTest+0x228>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b07      	cmp	r3, #7
 8005586:	d104      	bne.n	8005592 <ESP_WakeTest+0x142>
          StartProg();
 8005588:	f7fe ff26 	bl	80043d8 <StartProg>
          TestState = ESP_TEST_BOOT;
 800558c:	4b31      	ldr	r3, [pc, #196]	@ (8005654 <ESP_WakeTest+0x204>)
 800558e:	2205      	movs	r2, #5
 8005590:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005592:	4b39      	ldr	r3, [pc, #228]	@ (8005678 <ESP_WakeTest+0x228>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d109      	bne.n	80055ae <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800559a:	f009 fdef 	bl	800f17c <HAL_GetTick>
 800559e:	0003      	movs	r3, r0
 80055a0:	3332      	adds	r3, #50	@ 0x32
 80055a2:	001a      	movs	r2, r3
 80055a4:	4b30      	ldr	r3, [pc, #192]	@ (8005668 <ESP_WakeTest+0x218>)
 80055a6:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80055a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005654 <ESP_WakeTest+0x204>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80055ae:	1dbb      	adds	r3, r7, #6
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d048      	beq.n	8005648 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80055b6:	4b27      	ldr	r3, [pc, #156]	@ (8005654 <ESP_WakeTest+0x204>)
 80055b8:	2203      	movs	r2, #3
 80055ba:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80055bc:	e044      	b.n	8005648 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 80055be:	4b2f      	ldr	r3, [pc, #188]	@ (800567c <ESP_WakeTest+0x22c>)
 80055c0:	22fa      	movs	r2, #250	@ 0xfa
 80055c2:	0112      	lsls	r2, r2, #4
 80055c4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 80055c6:	f007 fef1 	bl	800d3ac <Calculate_LED_ON>
 80055ca:	0003      	movs	r3, r0
 80055cc:	001a      	movs	r2, r3
 80055ce:	4b2b      	ldr	r3, [pc, #172]	@ (800567c <ESP_WakeTest+0x22c>)
 80055d0:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 80055d2:	4b2a      	ldr	r3, [pc, #168]	@ (800567c <ESP_WakeTest+0x22c>)
 80055d4:	22fa      	movs	r2, #250	@ 0xfa
 80055d6:	0112      	lsls	r2, r2, #4
 80055d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80055da:	4b1e      	ldr	r3, [pc, #120]	@ (8005654 <ESP_WakeTest+0x204>)
 80055dc:	2204      	movs	r2, #4
 80055de:	701a      	strb	r2, [r3, #0]

      break;
 80055e0:	e033      	b.n	800564a <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 80055e2:	4b27      	ldr	r3, [pc, #156]	@ (8005680 <ESP_WakeTest+0x230>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80055e8:	4b1c      	ldr	r3, [pc, #112]	@ (800565c <ESP_WakeTest+0x20c>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80055ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005664 <ESP_WakeTest+0x214>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	2101      	movs	r1, #1
 80055f4:	0018      	movs	r0, r3
 80055f6:	f00b f852 	bl	801069e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80055fa:	2380      	movs	r3, #128	@ 0x80
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	4818      	ldr	r0, [pc, #96]	@ (8005660 <ESP_WakeTest+0x210>)
 8005600:	2200      	movs	r2, #0
 8005602:	0019      	movs	r1, r3
 8005604:	f00b f84b 	bl	801069e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005608:	4b16      	ldr	r3, [pc, #88]	@ (8005664 <ESP_WakeTest+0x214>)
 800560a:	2200      	movs	r2, #0
 800560c:	2102      	movs	r1, #2
 800560e:	0018      	movs	r0, r3
 8005610:	f00b f845 	bl	801069e <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8005614:	f003 f8d2 	bl	80087bc <SetESPMeasurementDone>
      break;
 8005618:	e017      	b.n	800564a <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 800561a:	4b0e      	ldr	r3, [pc, #56]	@ (8005654 <ESP_WakeTest+0x204>)
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
      break;
 8005620:	e013      	b.n	800564a <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8005622:	4b16      	ldr	r3, [pc, #88]	@ (800567c <ESP_WakeTest+0x22c>)
 8005624:	22fa      	movs	r2, #250	@ 0xfa
 8005626:	0112      	lsls	r2, r2, #4
 8005628:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 800562a:	4b14      	ldr	r3, [pc, #80]	@ (800567c <ESP_WakeTest+0x22c>)
 800562c:	22fa      	movs	r2, #250	@ 0xfa
 800562e:	0112      	lsls	r2, r2, #4
 8005630:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005632:	f007 febb 	bl	800d3ac <Calculate_LED_ON>
 8005636:	0003      	movs	r3, r0
 8005638:	001a      	movs	r2, r3
 800563a:	4b10      	ldr	r3, [pc, #64]	@ (800567c <ESP_WakeTest+0x22c>)
 800563c:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800563e:	e004      	b.n	800564a <ESP_WakeTest+0x1fa>
      break;
 8005640:	46c0      	nop			@ (mov r8, r8)
 8005642:	e002      	b.n	800564a <ESP_WakeTest+0x1fa>
      break;
 8005644:	46c0      	nop			@ (mov r8, r8)
 8005646:	e000      	b.n	800564a <ESP_WakeTest+0x1fa>
      break;
 8005648:	46c0      	nop			@ (mov r8, r8)
  }
}
 800564a:	46c0      	nop			@ (mov r8, r8)
 800564c:	46bd      	mov	sp, r7
 800564e:	b003      	add	sp, #12
 8005650:	bd90      	pop	{r4, r7, pc}
 8005652:	46c0      	nop			@ (mov r8, r8)
 8005654:	20000620 	.word	0x20000620
 8005658:	08025a60 	.word	0x08025a60
 800565c:	2000054c 	.word	0x2000054c
 8005660:	50000800 	.word	0x50000800
 8005664:	50001c00 	.word	0x50001c00
 8005668:	20000618 	.word	0x20000618
 800566c:	2000044c 	.word	0x2000044c
 8005670:	2000061e 	.word	0x2000061e
 8005674:	2000061d 	.word	0x2000061d
 8005678:	20000032 	.word	0x20000032
 800567c:	40000400 	.word	0x40000400
 8005680:	20000000 	.word	0x20000000

08005684 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005684:	b5b0      	push	{r4, r5, r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800568a:	1dfb      	adds	r3, r7, #7
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8005690:	4be2      	ldr	r3, [pc, #904]	@ (8005a1c <ESP_Upkeep+0x398>)
 8005692:	781a      	ldrb	r2, [r3, #0]
 8005694:	4be2      	ldr	r3, [pc, #904]	@ (8005a20 <ESP_Upkeep+0x39c>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d024      	beq.n	80056e6 <ESP_Upkeep+0x62>
 800569c:	f009 f9a4 	bl	800e9e8 <GetVerboseLevel>
 80056a0:	0003      	movs	r3, r0
 80056a2:	2b03      	cmp	r3, #3
 80056a4:	d11f      	bne.n	80056e6 <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80056a6:	4bdd      	ldr	r3, [pc, #884]	@ (8005a1c <ESP_Upkeep+0x398>)
 80056a8:	781a      	ldrb	r2, [r3, #0]
 80056aa:	4bdd      	ldr	r3, [pc, #884]	@ (8005a20 <ESP_Upkeep+0x39c>)
 80056ac:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80056ae:	4bdc      	ldr	r3, [pc, #880]	@ (8005a20 <ESP_Upkeep+0x39c>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d103      	bne.n	80056be <ESP_Upkeep+0x3a>
 80056b6:	4bdb      	ldr	r3, [pc, #876]	@ (8005a24 <ESP_Upkeep+0x3a0>)
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b0e      	cmp	r3, #14
 80056bc:	d013      	beq.n	80056e6 <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80056be:	4bd8      	ldr	r3, [pc, #864]	@ (8005a20 <ESP_Upkeep+0x39c>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	001d      	movs	r5, r3
 80056c4:	4bd7      	ldr	r3, [pc, #860]	@ (8005a24 <ESP_Upkeep+0x3a0>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	0018      	movs	r0, r3
 80056ca:	4bd7      	ldr	r3, [pc, #860]	@ (8005a28 <ESP_Upkeep+0x3a4>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	001c      	movs	r4, r3
 80056d0:	4bd6      	ldr	r3, [pc, #856]	@ (8005a2c <ESP_Upkeep+0x3a8>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	4ad6      	ldr	r2, [pc, #856]	@ (8005a30 <ESP_Upkeep+0x3ac>)
 80056d6:	49d7      	ldr	r1, [pc, #860]	@ (8005a34 <ESP_Upkeep+0x3b0>)
 80056d8:	9302      	str	r3, [sp, #8]
 80056da:	9401      	str	r4, [sp, #4]
 80056dc:	9000      	str	r0, [sp, #0]
 80056de:	002b      	movs	r3, r5
 80056e0:	2003      	movs	r0, #3
 80056e2:	f009 f907 	bl	800e8f4 <CreateLine>
    }
  }
  switch (EspState) {
 80056e6:	4bcd      	ldr	r3, [pc, #820]	@ (8005a1c <ESP_Upkeep+0x398>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b0f      	cmp	r3, #15
 80056ec:	d901      	bls.n	80056f2 <ESP_Upkeep+0x6e>
 80056ee:	f000 fc32 	bl	8005f56 <ESP_Upkeep+0x8d2>
 80056f2:	009a      	lsls	r2, r3, #2
 80056f4:	4bd0      	ldr	r3, [pc, #832]	@ (8005a38 <ESP_Upkeep+0x3b4>)
 80056f6:	18d3      	adds	r3, r2, r3
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80056fc:	4bc7      	ldr	r3, [pc, #796]	@ (8005a1c <ESP_Upkeep+0x398>)
 80056fe:	2201      	movs	r2, #1
 8005700:	701a      	strb	r2, [r3, #0]
      break;
 8005702:	f000 fc41 	bl	8005f88 <ESP_Upkeep+0x904>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      DisableConnectedDevices();
 8005706:	f003 fab9 	bl	8008c7c <DisableConnectedDevices>
      SetESPIndicator();
 800570a:	f007 ffe1 	bl	800d6d0 <SetESPIndicator>
      if(!EspTurnedOn){
 800570e:	4bcb      	ldr	r3, [pc, #812]	@ (8005a3c <ESP_Upkeep+0x3b8>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2201      	movs	r2, #1
 8005714:	4053      	eors	r3, r2
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d036      	beq.n	800578a <ESP_Upkeep+0x106>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800571c:	2380      	movs	r3, #128	@ 0x80
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	48c7      	ldr	r0, [pc, #796]	@ (8005a40 <ESP_Upkeep+0x3bc>)
 8005722:	2200      	movs	r2, #0
 8005724:	0019      	movs	r1, r3
 8005726:	f00a ffba 	bl	801069e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800572a:	2001      	movs	r0, #1
 800572c:	f009 fd30 	bl	800f190 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005730:	2380      	movs	r3, #128	@ 0x80
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	48c2      	ldr	r0, [pc, #776]	@ (8005a40 <ESP_Upkeep+0x3bc>)
 8005736:	2201      	movs	r2, #1
 8005738:	0019      	movs	r1, r3
 800573a:	f00a ffb0 	bl	801069e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800573e:	2001      	movs	r0, #1
 8005740:	f009 fd26 	bl	800f190 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005744:	4bbf      	ldr	r3, [pc, #764]	@ (8005a44 <ESP_Upkeep+0x3c0>)
 8005746:	2200      	movs	r2, #0
 8005748:	2101      	movs	r1, #1
 800574a:	0018      	movs	r0, r3
 800574c:	f00a ffa7 	bl	801069e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005750:	2001      	movs	r0, #1
 8005752:	f009 fd1d 	bl	800f190 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005756:	4bbb      	ldr	r3, [pc, #748]	@ (8005a44 <ESP_Upkeep+0x3c0>)
 8005758:	2201      	movs	r2, #1
 800575a:	2102      	movs	r1, #2
 800575c:	0018      	movs	r0, r3
 800575e:	f00a ff9e 	bl	801069e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005762:	2001      	movs	r0, #1
 8005764:	f009 fd14 	bl	800f190 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005768:	4bb6      	ldr	r3, [pc, #728]	@ (8005a44 <ESP_Upkeep+0x3c0>)
 800576a:	2201      	movs	r2, #1
 800576c:	2101      	movs	r1, #1
 800576e:	0018      	movs	r0, r3
 8005770:	f00a ff95 	bl	801069e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005774:	f009 fd02 	bl	800f17c <HAL_GetTick>
 8005778:	0003      	movs	r3, r0
 800577a:	22af      	movs	r2, #175	@ 0xaf
 800577c:	0092      	lsls	r2, r2, #2
 800577e:	189a      	adds	r2, r3, r2
 8005780:	4bb1      	ldr	r3, [pc, #708]	@ (8005a48 <ESP_Upkeep+0x3c4>)
 8005782:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005784:	4bad      	ldr	r3, [pc, #692]	@ (8005a3c <ESP_Upkeep+0x3b8>)
 8005786:	2201      	movs	r2, #1
 8005788:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800578a:	2380      	movs	r3, #128	@ 0x80
 800578c:	005a      	lsls	r2, r3, #1
 800578e:	4baf      	ldr	r3, [pc, #700]	@ (8005a4c <ESP_Upkeep+0x3c8>)
 8005790:	0011      	movs	r1, r2
 8005792:	0018      	movs	r0, r3
 8005794:	f7fe f964 	bl	8003a60 <ESP_Receive>
 8005798:	1e03      	subs	r3, r0, #0
 800579a:	d101      	bne.n	80057a0 <ESP_Upkeep+0x11c>
 800579c:	f000 fbe7 	bl	8005f6e <ESP_Upkeep+0x8ea>
        EspState = ESP_STATE_WAIT_AWAKE;
 80057a0:	4b9e      	ldr	r3, [pc, #632]	@ (8005a1c <ESP_Upkeep+0x398>)
 80057a2:	220f      	movs	r2, #15
 80057a4:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80057a6:	f009 fce9 	bl	800f17c <HAL_GetTick>
 80057aa:	0003      	movs	r3, r0
 80057ac:	22fa      	movs	r2, #250	@ 0xfa
 80057ae:	00d2      	lsls	r2, r2, #3
 80057b0:	189a      	adds	r2, r3, r2
 80057b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005a50 <ESP_Upkeep+0x3cc>)
 80057b4:	601a      	str	r2, [r3, #0]
      }
      break;
 80057b6:	f000 fbda 	bl	8005f6e <ESP_Upkeep+0x8ea>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80057ba:	2001      	movs	r0, #1
 80057bc:	f7ff fb26 	bl	8004e0c <DMA_ProcessBuffer>
 80057c0:	0003      	movs	r3, r0
 80057c2:	001a      	movs	r2, r3
 80057c4:	4ba3      	ldr	r3, [pc, #652]	@ (8005a54 <ESP_Upkeep+0x3d0>)
 80057c6:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80057c8:	4ba2      	ldr	r3, [pc, #648]	@ (8005a54 <ESP_Upkeep+0x3d0>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	1dbc      	adds	r4, r7, #6
 80057ce:	2101      	movs	r1, #1
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7ff fc1b 	bl	800500c <ATCompare>
 80057d6:	0003      	movs	r3, r0
 80057d8:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80057da:	1dbb      	adds	r3, r7, #6
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d108      	bne.n	80057f4 <ESP_Upkeep+0x170>
 80057e2:	4b9b      	ldr	r3, [pc, #620]	@ (8005a50 <ESP_Upkeep+0x3cc>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	0018      	movs	r0, r3
 80057e8:	f009 f82e 	bl	800e848 <TimestampIsReached>
 80057ec:	1e03      	subs	r3, r0, #0
 80057ee:	d101      	bne.n	80057f4 <ESP_Upkeep+0x170>
 80057f0:	f000 fbbf 	bl	8005f72 <ESP_Upkeep+0x8ee>
          EspState = ESP_STATE_MODE_SELECT;
 80057f4:	4b89      	ldr	r3, [pc, #548]	@ (8005a1c <ESP_Upkeep+0x398>)
 80057f6:	220b      	movs	r2, #11
 80057f8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80057fa:	f000 fbba 	bl	8005f72 <ESP_Upkeep+0x8ee>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80057fe:	4b96      	ldr	r3, [pc, #600]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 8005800:	2209      	movs	r2, #9
 8005802:	2114      	movs	r1, #20
 8005804:	0018      	movs	r0, r3
 8005806:	f01a ff11 	bl	802062c <memset>
      if(!InitIsDone || WifiReset){
 800580a:	4b94      	ldr	r3, [pc, #592]	@ (8005a5c <ESP_Upkeep+0x3d8>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2201      	movs	r2, #1
 8005810:	4053      	eors	r3, r2
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <ESP_Upkeep+0x19c>
 8005818:	4b91      	ldr	r3, [pc, #580]	@ (8005a60 <ESP_Upkeep+0x3dc>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01a      	beq.n	8005856 <ESP_Upkeep+0x1d2>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005820:	4b8d      	ldr	r3, [pc, #564]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 8005822:	4a90      	ldr	r2, [pc, #576]	@ (8005a64 <ESP_Upkeep+0x3e0>)
 8005824:	6811      	ldr	r1, [r2, #0]
 8005826:	6019      	str	r1, [r3, #0]
 8005828:	8891      	ldrh	r1, [r2, #4]
 800582a:	8099      	strh	r1, [r3, #4]
 800582c:	7992      	ldrb	r2, [r2, #6]
 800582e:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005830:	4b7a      	ldr	r3, [pc, #488]	@ (8005a1c <ESP_Upkeep+0x398>)
 8005832:	2204      	movs	r2, #4
 8005834:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005836:	4b8c      	ldr	r3, [pc, #560]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 800583c:	4b7a      	ldr	r3, [pc, #488]	@ (8005a28 <ESP_Upkeep+0x3a4>)
 800583e:	2200      	movs	r2, #0
 8005840:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005842:	4b89      	ldr	r3, [pc, #548]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	001a      	movs	r2, r3
 8005848:	4b83      	ldr	r3, [pc, #524]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 800584a:	5c9a      	ldrb	r2, [r3, r2]
 800584c:	4b75      	ldr	r3, [pc, #468]	@ (8005a24 <ESP_Upkeep+0x3a0>)
 800584e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005850:	4b76      	ldr	r3, [pc, #472]	@ (8005a2c <ESP_Upkeep+0x3a8>)
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8005856:	4b81      	ldr	r3, [pc, #516]	@ (8005a5c <ESP_Upkeep+0x3d8>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01f      	beq.n	800589e <ESP_Upkeep+0x21a>
 800585e:	4b83      	ldr	r3, [pc, #524]	@ (8005a6c <ESP_Upkeep+0x3e8>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2201      	movs	r2, #1
 8005864:	4053      	eors	r3, r2
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d018      	beq.n	800589e <ESP_Upkeep+0x21a>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 800586c:	4b7a      	ldr	r3, [pc, #488]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 800586e:	4a80      	ldr	r2, [pc, #512]	@ (8005a70 <ESP_Upkeep+0x3ec>)
 8005870:	6811      	ldr	r1, [r2, #0]
 8005872:	6019      	str	r1, [r3, #0]
 8005874:	8892      	ldrh	r2, [r2, #4]
 8005876:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005878:	4b68      	ldr	r3, [pc, #416]	@ (8005a1c <ESP_Upkeep+0x398>)
 800587a:	2204      	movs	r2, #4
 800587c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800587e:	4b7a      	ldr	r3, [pc, #488]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005884:	4b68      	ldr	r3, [pc, #416]	@ (8005a28 <ESP_Upkeep+0x3a4>)
 8005886:	2201      	movs	r2, #1
 8005888:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800588a:	4b77      	ldr	r3, [pc, #476]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	001a      	movs	r2, r3
 8005890:	4b71      	ldr	r3, [pc, #452]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 8005892:	5c9a      	ldrb	r2, [r3, r2]
 8005894:	4b63      	ldr	r3, [pc, #396]	@ (8005a24 <ESP_Upkeep+0x3a0>)
 8005896:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005898:	4b64      	ldr	r3, [pc, #400]	@ (8005a2c <ESP_Upkeep+0x3a8>)
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800589e:	4b6f      	ldr	r3, [pc, #444]	@ (8005a5c <ESP_Upkeep+0x3d8>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d021      	beq.n	80058ea <ESP_Upkeep+0x266>
 80058a6:	4b71      	ldr	r3, [pc, #452]	@ (8005a6c <ESP_Upkeep+0x3e8>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d01d      	beq.n	80058ea <ESP_Upkeep+0x266>
 80058ae:	4b71      	ldr	r3, [pc, #452]	@ (8005a74 <ESP_Upkeep+0x3f0>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2201      	movs	r2, #1
 80058b4:	4053      	eors	r3, r2
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d016      	beq.n	80058ea <ESP_Upkeep+0x266>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80058bc:	4b6e      	ldr	r3, [pc, #440]	@ (8005a78 <ESP_Upkeep+0x3f4>)
 80058be:	881a      	ldrh	r2, [r3, #0]
 80058c0:	4b65      	ldr	r3, [pc, #404]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 80058c2:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80058c4:	4b55      	ldr	r3, [pc, #340]	@ (8005a1c <ESP_Upkeep+0x398>)
 80058c6:	2204      	movs	r2, #4
 80058c8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80058ca:	4b67      	ldr	r3, [pc, #412]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80058d0:	4b55      	ldr	r3, [pc, #340]	@ (8005a28 <ESP_Upkeep+0x3a4>)
 80058d2:	2204      	movs	r2, #4
 80058d4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80058d6:	4b64      	ldr	r3, [pc, #400]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	001a      	movs	r2, r3
 80058dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 80058de:	5c9a      	ldrb	r2, [r3, r2]
 80058e0:	4b50      	ldr	r3, [pc, #320]	@ (8005a24 <ESP_Upkeep+0x3a0>)
 80058e2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80058e4:	4b51      	ldr	r3, [pc, #324]	@ (8005a2c <ESP_Upkeep+0x3a8>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80058ea:	4b5c      	ldr	r3, [pc, #368]	@ (8005a5c <ESP_Upkeep+0x3d8>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d02c      	beq.n	800594c <ESP_Upkeep+0x2c8>
 80058f2:	4b5e      	ldr	r3, [pc, #376]	@ (8005a6c <ESP_Upkeep+0x3e8>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d028      	beq.n	800594c <ESP_Upkeep+0x2c8>
 80058fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005a74 <ESP_Upkeep+0x3f0>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d024      	beq.n	800594c <ESP_Upkeep+0x2c8>
 8005902:	4b5e      	ldr	r3, [pc, #376]	@ (8005a7c <ESP_Upkeep+0x3f8>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2201      	movs	r2, #1
 8005908:	4053      	eors	r3, r2
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01d      	beq.n	800594c <ESP_Upkeep+0x2c8>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005910:	4b51      	ldr	r3, [pc, #324]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 8005912:	4a5b      	ldr	r2, [pc, #364]	@ (8005a80 <ESP_Upkeep+0x3fc>)
 8005914:	8811      	ldrh	r1, [r2, #0]
 8005916:	8019      	strh	r1, [r3, #0]
 8005918:	7892      	ldrb	r2, [r2, #2]
 800591a:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800591c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a1c <ESP_Upkeep+0x398>)
 800591e:	2204      	movs	r2, #4
 8005920:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005922:	4b51      	ldr	r3, [pc, #324]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 8005924:	2200      	movs	r2, #0
 8005926:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005928:	4b3f      	ldr	r3, [pc, #252]	@ (8005a28 <ESP_Upkeep+0x3a4>)
 800592a:	2202      	movs	r2, #2
 800592c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800592e:	f009 fc25 	bl	800f17c <HAL_GetTick>
 8005932:	0002      	movs	r2, r0
 8005934:	4b53      	ldr	r3, [pc, #332]	@ (8005a84 <ESP_Upkeep+0x400>)
 8005936:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005938:	4b4b      	ldr	r3, [pc, #300]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	001a      	movs	r2, r3
 800593e:	4b46      	ldr	r3, [pc, #280]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 8005940:	5c9a      	ldrb	r2, [r3, r2]
 8005942:	4b38      	ldr	r3, [pc, #224]	@ (8005a24 <ESP_Upkeep+0x3a0>)
 8005944:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005946:	4b39      	ldr	r3, [pc, #228]	@ (8005a2c <ESP_Upkeep+0x3a8>)
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 800594c:	4b43      	ldr	r3, [pc, #268]	@ (8005a5c <ESP_Upkeep+0x3d8>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d027      	beq.n	80059a4 <ESP_Upkeep+0x320>
 8005954:	4b45      	ldr	r3, [pc, #276]	@ (8005a6c <ESP_Upkeep+0x3e8>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d023      	beq.n	80059a4 <ESP_Upkeep+0x320>
 800595c:	4b45      	ldr	r3, [pc, #276]	@ (8005a74 <ESP_Upkeep+0x3f0>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d01f      	beq.n	80059a4 <ESP_Upkeep+0x320>
 8005964:	4b45      	ldr	r3, [pc, #276]	@ (8005a7c <ESP_Upkeep+0x3f8>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01b      	beq.n	80059a4 <ESP_Upkeep+0x320>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800596c:	4b46      	ldr	r3, [pc, #280]	@ (8005a88 <ESP_Upkeep+0x404>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	4b39      	ldr	r3, [pc, #228]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 8005972:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005974:	4b29      	ldr	r3, [pc, #164]	@ (8005a1c <ESP_Upkeep+0x398>)
 8005976:	2204      	movs	r2, #4
 8005978:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800597a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005980:	4b29      	ldr	r3, [pc, #164]	@ (8005a28 <ESP_Upkeep+0x3a4>)
 8005982:	2205      	movs	r2, #5
 8005984:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005986:	f009 fbf9 	bl	800f17c <HAL_GetTick>
 800598a:	0002      	movs	r2, r0
 800598c:	4b3d      	ldr	r3, [pc, #244]	@ (8005a84 <ESP_Upkeep+0x400>)
 800598e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005990:	4b35      	ldr	r3, [pc, #212]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	001a      	movs	r2, r3
 8005996:	4b30      	ldr	r3, [pc, #192]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 8005998:	5c9a      	ldrb	r2, [r3, r2]
 800599a:	4b22      	ldr	r3, [pc, #136]	@ (8005a24 <ESP_Upkeep+0x3a0>)
 800599c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800599e:	4b23      	ldr	r3, [pc, #140]	@ (8005a2c <ESP_Upkeep+0x3a8>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80059a4:	4b39      	ldr	r3, [pc, #228]	@ (8005a8c <ESP_Upkeep+0x408>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d100      	bne.n	80059ae <ESP_Upkeep+0x32a>
 80059ac:	e2e3      	b.n	8005f76 <ESP_Upkeep+0x8f2>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80059ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 80059b0:	4a37      	ldr	r2, [pc, #220]	@ (8005a90 <ESP_Upkeep+0x40c>)
 80059b2:	6811      	ldr	r1, [r2, #0]
 80059b4:	6019      	str	r1, [r3, #0]
 80059b6:	7912      	ldrb	r2, [r2, #4]
 80059b8:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 80059ba:	4a36      	ldr	r2, [pc, #216]	@ (8005a94 <ESP_Upkeep+0x410>)
 80059bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a34 <ESP_Upkeep+0x3b0>)
 80059be:	0019      	movs	r1, r3
 80059c0:	2003      	movs	r0, #3
 80059c2:	f008 ff97 	bl	800e8f4 <CreateLine>
        DisableConnectedDevices();
 80059c6:	f003 f959 	bl	8008c7c <DisableConnectedDevices>
        usblog = false;
 80059ca:	4b33      	ldr	r3, [pc, #204]	@ (8005a98 <ESP_Upkeep+0x414>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80059d0:	4b12      	ldr	r3, [pc, #72]	@ (8005a1c <ESP_Upkeep+0x398>)
 80059d2:	2204      	movs	r2, #4
 80059d4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80059d6:	4b24      	ldr	r3, [pc, #144]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80059dc:	4b12      	ldr	r3, [pc, #72]	@ (8005a28 <ESP_Upkeep+0x3a4>)
 80059de:	2203      	movs	r2, #3
 80059e0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80059e2:	4b21      	ldr	r3, [pc, #132]	@ (8005a68 <ESP_Upkeep+0x3e4>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	001a      	movs	r2, r3
 80059e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a58 <ESP_Upkeep+0x3d4>)
 80059ea:	5c9a      	ldrb	r2, [r3, r2]
 80059ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005a24 <ESP_Upkeep+0x3a0>)
 80059ee:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80059f0:	4b0e      	ldr	r3, [pc, #56]	@ (8005a2c <ESP_Upkeep+0x3a8>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
      }
    break;
 80059f6:	e2be      	b.n	8005f76 <ESP_Upkeep+0x8f2>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 80059f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <ESP_Upkeep+0x3a0>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	1dfc      	adds	r4, r7, #7
 80059fe:	0018      	movs	r0, r3
 8005a00:	f7ff fb46 	bl	8005090 <AT_Send>
 8005a04:	0003      	movs	r3, r0
 8005a06:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005a08:	1dfb      	adds	r3, r7, #7
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d100      	bne.n	8005a12 <ESP_Upkeep+0x38e>
 8005a10:	e2b3      	b.n	8005f7a <ESP_Upkeep+0x8f6>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005a12:	4b02      	ldr	r3, [pc, #8]	@ (8005a1c <ESP_Upkeep+0x398>)
 8005a14:	2203      	movs	r2, #3
 8005a16:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005a18:	e2af      	b.n	8005f7a <ESP_Upkeep+0x8f6>
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	20000030 	.word	0x20000030
 8005a20:	20000002 	.word	0x20000002
 8005a24:	2000061e 	.word	0x2000061e
 8005a28:	2000061f 	.word	0x2000061f
 8005a2c:	2000061d 	.word	0x2000061d
 8005a30:	08024154 	.word	0x08024154
 8005a34:	080235a0 	.word	0x080235a0
 8005a38:	08025a78 	.word	0x08025a78
 8005a3c:	2000054c 	.word	0x2000054c
 8005a40:	50000800 	.word	0x50000800
 8005a44:	50001c00 	.word	0x50001c00
 8005a48:	20000618 	.word	0x20000618
 8005a4c:	2000044c 	.word	0x2000044c
 8005a50:	20000764 	.word	0x20000764
 8005a54:	20000033 	.word	0x20000033
 8005a58:	20000608 	.word	0x20000608
 8005a5c:	2000054d 	.word	0x2000054d
 8005a60:	2000054e 	.word	0x2000054e
 8005a64:	20000004 	.word	0x20000004
 8005a68:	20000612 	.word	0x20000612
 8005a6c:	20000550 	.word	0x20000550
 8005a70:	20000014 	.word	0x20000014
 8005a74:	20000551 	.word	0x20000551
 8005a78:	20000010 	.word	0x20000010
 8005a7c:	20000001 	.word	0x20000001
 8005a80:	2000000c 	.word	0x2000000c
 8005a84:	20000564 	.word	0x20000564
 8005a88:	20000024 	.word	0x20000024
 8005a8c:	2000054f 	.word	0x2000054f
 8005a90:	2000001c 	.word	0x2000001c
 8005a94:	08024180 	.word	0x08024180
 8005a98:	200001f7 	.word	0x200001f7

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005a9c:	4bc9      	ldr	r3, [pc, #804]	@ (8005dc4 <ESP_Upkeep+0x740>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <ESP_Upkeep+0x430>
 8005aa4:	4bc8      	ldr	r3, [pc, #800]	@ (8005dc8 <ESP_Upkeep+0x744>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d003      	beq.n	8005ab4 <ESP_Upkeep+0x430>
        EspState = ESP_STATE_MODE_SELECT;
 8005aac:	4bc7      	ldr	r3, [pc, #796]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005aae:	220b      	movs	r2, #11
 8005ab0:	701a      	strb	r2, [r3, #0]
        break;
 8005ab2:	e269      	b.n	8005f88 <ESP_Upkeep+0x904>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8005ab4:	4bc6      	ldr	r3, [pc, #792]	@ (8005dd0 <ESP_Upkeep+0x74c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f008 fec5 	bl	800e848 <TimestampIsReached>
 8005abe:	1e03      	subs	r3, r0, #0
 8005ac0:	d100      	bne.n	8005ac4 <ESP_Upkeep+0x440>
 8005ac2:	e25c      	b.n	8005f7e <ESP_Upkeep+0x8fa>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005ac4:	4bc3      	ldr	r3, [pc, #780]	@ (8005dd4 <ESP_Upkeep+0x750>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f7ff f99f 	bl	8004e0c <DMA_ProcessBuffer>
 8005ace:	0003      	movs	r3, r0
 8005ad0:	001a      	movs	r2, r3
 8005ad2:	4bc1      	ldr	r3, [pc, #772]	@ (8005dd8 <ESP_Upkeep+0x754>)
 8005ad4:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005ad6:	4bc0      	ldr	r3, [pc, #768]	@ (8005dd8 <ESP_Upkeep+0x754>)
 8005ad8:	781a      	ldrb	r2, [r3, #0]
 8005ada:	4bbe      	ldr	r3, [pc, #760]	@ (8005dd4 <ESP_Upkeep+0x750>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	1d7c      	adds	r4, r7, #5
 8005ae0:	0019      	movs	r1, r3
 8005ae2:	0010      	movs	r0, r2
 8005ae4:	f7ff fa92 	bl	800500c <ATCompare>
 8005ae8:	0003      	movs	r3, r0
 8005aea:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005aec:	4bba      	ldr	r3, [pc, #744]	@ (8005dd8 <ESP_Upkeep+0x754>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d138      	bne.n	8005b66 <ESP_Upkeep+0x4e2>
          if(ATCommand == AT_SENDDATA){
 8005af4:	4bb9      	ldr	r3, [pc, #740]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b0f      	cmp	r3, #15
 8005afa:	d108      	bne.n	8005b0e <ESP_Upkeep+0x48a>
            ATCommand = AT_HTTPCPOST;
 8005afc:	4bb7      	ldr	r3, [pc, #732]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005afe:	220e      	movs	r2, #14
 8005b00:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005b02:	4bb4      	ldr	r3, [pc, #720]	@ (8005dd4 <ESP_Upkeep+0x750>)
 8005b04:	2202      	movs	r2, #2
 8005b06:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005b08:	4bb5      	ldr	r3, [pc, #724]	@ (8005de0 <ESP_Upkeep+0x75c>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005b0e:	4baf      	ldr	r3, [pc, #700]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005b10:	2204      	movs	r2, #4
 8005b12:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005b14:	4bb3      	ldr	r3, [pc, #716]	@ (8005de4 <ESP_Upkeep+0x760>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	4bb1      	ldr	r3, [pc, #708]	@ (8005de4 <ESP_Upkeep+0x760>)
 8005b1e:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005b20:	4bb0      	ldr	r3, [pc, #704]	@ (8005de4 <ESP_Upkeep+0x760>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d91e      	bls.n	8005b66 <ESP_Upkeep+0x4e2>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005b28:	f009 fb28 	bl	800f17c <HAL_GetTick>
 8005b2c:	0003      	movs	r3, r0
 8005b2e:	4aae      	ldr	r2, [pc, #696]	@ (8005de8 <ESP_Upkeep+0x764>)
 8005b30:	189a      	adds	r2, r3, r2
 8005b32:	4ba7      	ldr	r3, [pc, #668]	@ (8005dd0 <ESP_Upkeep+0x74c>)
 8005b34:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005b36:	4bad      	ldr	r3, [pc, #692]	@ (8005dec <ESP_Upkeep+0x768>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005b3c:	f7ff fa58 	bl	8004ff0 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b40:	f009 fb1c 	bl	800f17c <HAL_GetTick>
 8005b44:	0002      	movs	r2, r0
 8005b46:	4baa      	ldr	r3, [pc, #680]	@ (8005df0 <ESP_Upkeep+0x76c>)
 8005b48:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005b4a:	4ba9      	ldr	r3, [pc, #676]	@ (8005df0 <ESP_Upkeep+0x76c>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4ba9      	ldr	r3, [pc, #676]	@ (8005df4 <ESP_Upkeep+0x770>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	4aa8      	ldr	r2, [pc, #672]	@ (8005df8 <ESP_Upkeep+0x774>)
 8005b56:	49a9      	ldr	r1, [pc, #676]	@ (8005dfc <ESP_Upkeep+0x778>)
 8005b58:	2001      	movs	r0, #1
 8005b5a:	f008 fecb 	bl	800e8f4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b5e:	4b9b      	ldr	r3, [pc, #620]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005b60:	220d      	movs	r2, #13
 8005b62:	701a      	strb	r2, [r3, #0]
            break;
 8005b64:	e210      	b.n	8005f88 <ESP_Upkeep+0x904>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005b66:	4b9c      	ldr	r3, [pc, #624]	@ (8005dd8 <ESP_Upkeep+0x754>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d106      	bne.n	8005b7c <ESP_Upkeep+0x4f8>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005b6e:	f009 fb05 	bl	800f17c <HAL_GetTick>
 8005b72:	0003      	movs	r3, r0
 8005b74:	330a      	adds	r3, #10
 8005b76:	001a      	movs	r2, r3
 8005b78:	4b95      	ldr	r3, [pc, #596]	@ (8005dd0 <ESP_Upkeep+0x74c>)
 8005b7a:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005b7c:	4b96      	ldr	r3, [pc, #600]	@ (8005dd8 <ESP_Upkeep+0x754>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b0a      	cmp	r3, #10
 8005b82:	d106      	bne.n	8005b92 <ESP_Upkeep+0x50e>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005b84:	f009 fafa 	bl	800f17c <HAL_GetTick>
 8005b88:	0003      	movs	r3, r0
 8005b8a:	330a      	adds	r3, #10
 8005b8c:	001a      	movs	r2, r3
 8005b8e:	4b90      	ldr	r3, [pc, #576]	@ (8005dd0 <ESP_Upkeep+0x74c>)
 8005b90:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005b92:	4b91      	ldr	r3, [pc, #580]	@ (8005dd8 <ESP_Upkeep+0x754>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b06      	cmp	r3, #6
 8005b98:	d14b      	bne.n	8005c32 <ESP_Upkeep+0x5ae>
          timeoutcntr++;
 8005b9a:	4b99      	ldr	r3, [pc, #612]	@ (8005e00 <ESP_Upkeep+0x77c>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	4b97      	ldr	r3, [pc, #604]	@ (8005e00 <ESP_Upkeep+0x77c>)
 8005ba4:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8005ba6:	4a97      	ldr	r2, [pc, #604]	@ (8005e04 <ESP_Upkeep+0x780>)
 8005ba8:	4b94      	ldr	r3, [pc, #592]	@ (8005dfc <ESP_Upkeep+0x778>)
 8005baa:	0019      	movs	r1, r3
 8005bac:	2001      	movs	r0, #1
 8005bae:	f008 fea1 	bl	800e8f4 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8005bb2:	4b93      	ldr	r3, [pc, #588]	@ (8005e00 <ESP_Upkeep+0x77c>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d924      	bls.n	8005c04 <ESP_Upkeep+0x580>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8005bba:	f009 fadf 	bl	800f17c <HAL_GetTick>
 8005bbe:	0003      	movs	r3, r0
 8005bc0:	4a91      	ldr	r2, [pc, #580]	@ (8005e08 <ESP_Upkeep+0x784>)
 8005bc2:	189a      	adds	r2, r3, r2
 8005bc4:	4b82      	ldr	r3, [pc, #520]	@ (8005dd0 <ESP_Upkeep+0x74c>)
 8005bc6:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005bc8:	4b88      	ldr	r3, [pc, #544]	@ (8005dec <ESP_Upkeep+0x768>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8005bce:	f7ff fa0f 	bl	8004ff0 <clearDMABuffer>
            stop = HAL_GetTick();
 8005bd2:	f009 fad3 	bl	800f17c <HAL_GetTick>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	4b85      	ldr	r3, [pc, #532]	@ (8005df0 <ESP_Upkeep+0x76c>)
 8005bda:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005bdc:	4b84      	ldr	r3, [pc, #528]	@ (8005df0 <ESP_Upkeep+0x76c>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4b84      	ldr	r3, [pc, #528]	@ (8005df4 <ESP_Upkeep+0x770>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	4a89      	ldr	r2, [pc, #548]	@ (8005e0c <ESP_Upkeep+0x788>)
 8005be8:	4984      	ldr	r1, [pc, #528]	@ (8005dfc <ESP_Upkeep+0x778>)
 8005bea:	2001      	movs	r0, #1
 8005bec:	f008 fe82 	bl	800e8f4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005bf0:	4b76      	ldr	r3, [pc, #472]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005bf2:	220d      	movs	r2, #13
 8005bf4:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005bf6:	4b79      	ldr	r3, [pc, #484]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005bf8:	2214      	movs	r2, #20
 8005bfa:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005bfc:	4b75      	ldr	r3, [pc, #468]	@ (8005dd4 <ESP_Upkeep+0x750>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
            break;
 8005c02:	e1c1      	b.n	8005f88 <ESP_Upkeep+0x904>
          }
          if(ATCommand != AT_SENDDATA){
 8005c04:	4b75      	ldr	r3, [pc, #468]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b0f      	cmp	r3, #15
 8005c0a:	d003      	beq.n	8005c14 <ESP_Upkeep+0x590>
            EspState = ESP_STATE_SEND;
 8005c0c:	4b6f      	ldr	r3, [pc, #444]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005c0e:	2204      	movs	r2, #4
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e00e      	b.n	8005c32 <ESP_Upkeep+0x5ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005c14:	4b71      	ldr	r3, [pc, #452]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005c16:	220e      	movs	r2, #14
 8005c18:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005c1a:	4b71      	ldr	r3, [pc, #452]	@ (8005de0 <ESP_Upkeep+0x75c>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	4b6f      	ldr	r3, [pc, #444]	@ (8005de0 <ESP_Upkeep+0x75c>)
 8005c24:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005c26:	4b6b      	ldr	r3, [pc, #428]	@ (8005dd4 <ESP_Upkeep+0x750>)
 8005c28:	2202      	movs	r2, #2
 8005c2a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005c2c:	4b67      	ldr	r3, [pc, #412]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005c2e:	2204      	movs	r2, #4
 8005c30:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005c32:	1d7b      	adds	r3, r7, #5
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d100      	bne.n	8005c3c <ESP_Upkeep+0x5b8>
 8005c3a:	e1a0      	b.n	8005f7e <ESP_Upkeep+0x8fa>
          EspState = ESP_STATE_NEXT_AT;
 8005c3c:	4b63      	ldr	r3, [pc, #396]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005c3e:	2205      	movs	r2, #5
 8005c40:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005c42:	e19c      	b.n	8005f7e <ESP_Upkeep+0x8fa>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8005c44:	4b66      	ldr	r3, [pc, #408]	@ (8005de0 <ESP_Upkeep+0x75c>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	4b64      	ldr	r3, [pc, #400]	@ (8005de0 <ESP_Upkeep+0x75c>)
 8005c4e:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005c50:	4b63      	ldr	r3, [pc, #396]	@ (8005de0 <ESP_Upkeep+0x75c>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	001a      	movs	r2, r3
 8005c56:	4b6e      	ldr	r3, [pc, #440]	@ (8005e10 <ESP_Upkeep+0x78c>)
 8005c58:	5c9a      	ldrb	r2, [r3, r2]
 8005c5a:	4b60      	ldr	r3, [pc, #384]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005c5c:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d102      	bne.n	8005c6c <ESP_Upkeep+0x5e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005c66:	4b5b      	ldr	r3, [pc, #364]	@ (8005dd4 <ESP_Upkeep+0x750>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b0e      	cmp	r3, #14
 8005c72:	d102      	bne.n	8005c7a <ESP_Upkeep+0x5f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005c74:	4b57      	ldr	r3, [pc, #348]	@ (8005dd4 <ESP_Upkeep+0x750>)
 8005c76:	2202      	movs	r2, #2
 8005c78:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005c7a:	4b58      	ldr	r3, [pc, #352]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b0e      	cmp	r3, #14
 8005c80:	d006      	beq.n	8005c90 <ESP_Upkeep+0x60c>
 8005c82:	4b56      	ldr	r3, [pc, #344]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d002      	beq.n	8005c90 <ESP_Upkeep+0x60c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005c8a:	4b52      	ldr	r3, [pc, #328]	@ (8005dd4 <ESP_Upkeep+0x750>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005c90:	4b52      	ldr	r3, [pc, #328]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b11      	cmp	r3, #17
 8005c96:	d102      	bne.n	8005c9e <ESP_Upkeep+0x61a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005c98:	4b4e      	ldr	r3, [pc, #312]	@ (8005dd4 <ESP_Upkeep+0x750>)
 8005c9a:	2205      	movs	r2, #5
 8005c9c:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005ca0:	2204      	movs	r2, #4
 8005ca2:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8005ddc <ESP_Upkeep+0x758>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b14      	cmp	r3, #20
 8005caa:	d000      	beq.n	8005cae <ESP_Upkeep+0x62a>
 8005cac:	e169      	b.n	8005f82 <ESP_Upkeep+0x8fe>
        if(Mode == AT_MODE_SEND){
 8005cae:	4b46      	ldr	r3, [pc, #280]	@ (8005dc8 <ESP_Upkeep+0x744>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d124      	bne.n	8005d00 <ESP_Upkeep+0x67c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005cb6:	f009 fa61 	bl	800f17c <HAL_GetTick>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8005de8 <ESP_Upkeep+0x764>)
 8005cbe:	189a      	adds	r2, r3, r2
 8005cc0:	4b43      	ldr	r3, [pc, #268]	@ (8005dd0 <ESP_Upkeep+0x74c>)
 8005cc2:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8005cc4:	f7ff f994 	bl	8004ff0 <clearDMABuffer>
          stop = HAL_GetTick();
 8005cc8:	f009 fa58 	bl	800f17c <HAL_GetTick>
 8005ccc:	0002      	movs	r2, r0
 8005cce:	4b48      	ldr	r3, [pc, #288]	@ (8005df0 <ESP_Upkeep+0x76c>)
 8005cd0:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005cd2:	4b47      	ldr	r3, [pc, #284]	@ (8005df0 <ESP_Upkeep+0x76c>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b47      	ldr	r3, [pc, #284]	@ (8005df4 <ESP_Upkeep+0x770>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	4a4d      	ldr	r2, [pc, #308]	@ (8005e14 <ESP_Upkeep+0x790>)
 8005cde:	494e      	ldr	r1, [pc, #312]	@ (8005e18 <ESP_Upkeep+0x794>)
 8005ce0:	2002      	movs	r0, #2
 8005ce2:	f008 fe07 	bl	800e8f4 <CreateLine>
          ResetdBAmax();
 8005ce6:	f002 ffe7 	bl	8008cb8 <ResetdBAmax>
          resetMaxMeasurementValues();
 8005cea:	f7fd fe11 	bl	8003910 <resetMaxMeasurementValues>
          showTime();
 8005cee:	f000 fcdf 	bl	80066b0 <showTime>
          ESPTransmitDone = true;
 8005cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8005dec <ESP_Upkeep+0x768>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005cf8:	4b34      	ldr	r3, [pc, #208]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005cfa:	220d      	movs	r2, #13
 8005cfc:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005cfe:	e140      	b.n	8005f82 <ESP_Upkeep+0x8fe>
        else if (Mode == AT_MODE_GETTIME) {
 8005d00:	4b31      	ldr	r3, [pc, #196]	@ (8005dc8 <ESP_Upkeep+0x744>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b05      	cmp	r3, #5
 8005d06:	d12c      	bne.n	8005d62 <ESP_Upkeep+0x6de>
            setTime = false;
 8005d08:	4b44      	ldr	r3, [pc, #272]	@ (8005e1c <ESP_Upkeep+0x798>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005d0e:	f009 fa35 	bl	800f17c <HAL_GetTick>
 8005d12:	0003      	movs	r3, r0
 8005d14:	4a42      	ldr	r2, [pc, #264]	@ (8005e20 <ESP_Upkeep+0x79c>)
 8005d16:	189a      	adds	r2, r3, r2
 8005d18:	4b42      	ldr	r3, [pc, #264]	@ (8005e24 <ESP_Upkeep+0x7a0>)
 8005d1a:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005d1c:	4b41      	ldr	r3, [pc, #260]	@ (8005e24 <ESP_Upkeep+0x7a0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a41      	ldr	r2, [pc, #260]	@ (8005e28 <ESP_Upkeep+0x7a4>)
 8005d22:	493d      	ldr	r1, [pc, #244]	@ (8005e18 <ESP_Upkeep+0x794>)
 8005d24:	2002      	movs	r0, #2
 8005d26:	f008 fde5 	bl	800e8f4 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005d2a:	4b40      	ldr	r3, [pc, #256]	@ (8005e2c <ESP_Upkeep+0x7a8>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b28      	ldr	r3, [pc, #160]	@ (8005dd0 <ESP_Upkeep+0x74c>)
 8005d30:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8005d32:	f7ff f95d 	bl	8004ff0 <clearDMABuffer>
            stop = HAL_GetTick();
 8005d36:	f009 fa21 	bl	800f17c <HAL_GetTick>
 8005d3a:	0002      	movs	r2, r0
 8005d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8005df0 <ESP_Upkeep+0x76c>)
 8005d3e:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005d40:	4b2b      	ldr	r3, [pc, #172]	@ (8005df0 <ESP_Upkeep+0x76c>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	4b2b      	ldr	r3, [pc, #172]	@ (8005df4 <ESP_Upkeep+0x770>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	4a39      	ldr	r2, [pc, #228]	@ (8005e30 <ESP_Upkeep+0x7ac>)
 8005d4c:	4932      	ldr	r1, [pc, #200]	@ (8005e18 <ESP_Upkeep+0x794>)
 8005d4e:	2002      	movs	r0, #2
 8005d50:	f008 fdd0 	bl	800e8f4 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005d54:	4b1d      	ldr	r3, [pc, #116]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005d56:	220d      	movs	r2, #13
 8005d58:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc8 <ESP_Upkeep+0x744>)
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	701a      	strb	r2, [r3, #0]
    break;
 8005d60:	e10f      	b.n	8005f82 <ESP_Upkeep+0x8fe>
          EspState = ESP_STATE_RESET;
 8005d62:	4b1a      	ldr	r3, [pc, #104]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005d64:	2209      	movs	r2, #9
 8005d66:	701a      	strb	r2, [r3, #0]
    break;
 8005d68:	e10b      	b.n	8005f82 <ESP_Upkeep+0x8fe>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8005d6a:	4b32      	ldr	r3, [pc, #200]	@ (8005e34 <ESP_Upkeep+0x7b0>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005d70:	4b31      	ldr	r3, [pc, #196]	@ (8005e38 <ESP_Upkeep+0x7b4>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	2101      	movs	r1, #1
 8005d76:	0018      	movs	r0, r3
 8005d78:	f00a fc91 	bl	801069e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	f009 fa07 	bl	800f190 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005d82:	2380      	movs	r3, #128	@ 0x80
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	482d      	ldr	r0, [pc, #180]	@ (8005e3c <ESP_Upkeep+0x7b8>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	0019      	movs	r1, r3
 8005d8c:	f00a fc87 	bl	801069e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005d90:	2001      	movs	r0, #1
 8005d92:	f009 f9fd 	bl	800f190 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005d96:	4b28      	ldr	r3, [pc, #160]	@ (8005e38 <ESP_Upkeep+0x7b4>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f00a fc7e 	bl	801069e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005da2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dcc <ESP_Upkeep+0x748>)
 8005da4:	2209      	movs	r2, #9
 8005da6:	701a      	strb	r2, [r3, #0]
      EnabledConnectedDevices();
 8005da8:	f002 ff3e 	bl	8008c28 <EnabledConnectedDevices>
      HAL_Delay(1);
 8005dac:	2001      	movs	r0, #1
 8005dae:	f009 f9ef 	bl	800f190 <HAL_Delay>
      ResetESPIndicator();
 8005db2:	f007 fca5 	bl	800d700 <ResetESPIndicator>
      errorcntr = 0;
 8005db6:	4b0b      	ldr	r3, [pc, #44]	@ (8005de4 <ESP_Upkeep+0x760>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005dbc:	4b10      	ldr	r3, [pc, #64]	@ (8005e00 <ESP_Upkeep+0x77c>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
      break;
 8005dc2:	e0e1      	b.n	8005f88 <ESP_Upkeep+0x904>
 8005dc4:	2000054f 	.word	0x2000054f
 8005dc8:	2000061f 	.word	0x2000061f
 8005dcc:	20000030 	.word	0x20000030
 8005dd0:	20000618 	.word	0x20000618
 8005dd4:	2000061d 	.word	0x2000061d
 8005dd8:	20000033 	.word	0x20000033
 8005ddc:	2000061e 	.word	0x2000061e
 8005de0:	20000612 	.word	0x20000612
 8005de4:	20000613 	.word	0x20000613
 8005de8:	0003a980 	.word	0x0003a980
 8005dec:	20000554 	.word	0x20000554
 8005df0:	20000568 	.word	0x20000568
 8005df4:	20000564 	.word	0x20000564
 8005df8:	080241b0 	.word	0x080241b0
 8005dfc:	080235c4 	.word	0x080235c4
 8005e00:	20000614 	.word	0x20000614
 8005e04:	080241e4 	.word	0x080241e4
 8005e08:	0000c350 	.word	0x0000c350
 8005e0c:	08024220 	.word	0x08024220
 8005e10:	20000608 	.word	0x20000608
 8005e14:	08024250 	.word	0x08024250
 8005e18:	08024268 	.word	0x08024268
 8005e1c:	20000001 	.word	0x20000001
 8005e20:	047e7c4f 	.word	0x047e7c4f
 8005e24:	20000028 	.word	0x20000028
 8005e28:	0802426c 	.word	0x0802426c
 8005e2c:	2000002c 	.word	0x2000002c
 8005e30:	080242b0 	.word	0x080242b0
 8005e34:	2000054c 	.word	0x2000054c
 8005e38:	50001c00 	.word	0x50001c00
 8005e3c:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005e40:	4b54      	ldr	r3, [pc, #336]	@ (8005f94 <ESP_Upkeep+0x910>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	0018      	movs	r0, r3
 8005e46:	f008 fcff 	bl	800e848 <TimestampIsReached>
 8005e4a:	1e03      	subs	r3, r0, #0
 8005e4c:	d103      	bne.n	8005e56 <ESP_Upkeep+0x7d2>
 8005e4e:	4b52      	ldr	r3, [pc, #328]	@ (8005f98 <ESP_Upkeep+0x914>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d043      	beq.n	8005ede <ESP_Upkeep+0x85a>
        ESPTransmitDone = false;
 8005e56:	4b51      	ldr	r3, [pc, #324]	@ (8005f9c <ESP_Upkeep+0x918>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005e5c:	4b50      	ldr	r3, [pc, #320]	@ (8005fa0 <ESP_Upkeep+0x91c>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d105      	bne.n	8005e70 <ESP_Upkeep+0x7ec>
          InitIsDone = true;
 8005e64:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa4 <ESP_Upkeep+0x920>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa8 <ESP_Upkeep+0x924>)
 8005e6c:	220b      	movs	r2, #11
 8005e6e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005e70:	4b4b      	ldr	r3, [pc, #300]	@ (8005fa0 <ESP_Upkeep+0x91c>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d108      	bne.n	8005e8a <ESP_Upkeep+0x806>
          ConnectionMade = true;
 8005e78:	4b4c      	ldr	r3, [pc, #304]	@ (8005fac <ESP_Upkeep+0x928>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8005fb0 <ESP_Upkeep+0x92c>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005e84:	4b48      	ldr	r3, [pc, #288]	@ (8005fa8 <ESP_Upkeep+0x924>)
 8005e86:	220b      	movs	r2, #11
 8005e88:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005e8a:	4b45      	ldr	r3, [pc, #276]	@ (8005fa0 <ESP_Upkeep+0x91c>)
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d102      	bne.n	8005e98 <ESP_Upkeep+0x814>
          EspState = ESP_STATE_INIT;
 8005e92:	4b45      	ldr	r3, [pc, #276]	@ (8005fa8 <ESP_Upkeep+0x924>)
 8005e94:	2202      	movs	r2, #2
 8005e96:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005e98:	4b41      	ldr	r3, [pc, #260]	@ (8005fa0 <ESP_Upkeep+0x91c>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d108      	bne.n	8005eb2 <ESP_Upkeep+0x82e>
          EspState = ESP_STATE_CONFIG;
 8005ea0:	4b41      	ldr	r3, [pc, #260]	@ (8005fa8 <ESP_Upkeep+0x924>)
 8005ea2:	220e      	movs	r2, #14
 8005ea4:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005ea6:	4a43      	ldr	r2, [pc, #268]	@ (8005fb4 <ESP_Upkeep+0x930>)
 8005ea8:	4b43      	ldr	r3, [pc, #268]	@ (8005fb8 <ESP_Upkeep+0x934>)
 8005eaa:	0019      	movs	r1, r3
 8005eac:	2002      	movs	r0, #2
 8005eae:	f008 fd21 	bl	800e8f4 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa0 <ESP_Upkeep+0x91c>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d105      	bne.n	8005ec6 <ESP_Upkeep+0x842>
          EspState = ESP_STATE_MODE_SELECT;
 8005eba:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa8 <ESP_Upkeep+0x924>)
 8005ebc:	220b      	movs	r2, #11
 8005ebe:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005ec0:	4b3e      	ldr	r3, [pc, #248]	@ (8005fbc <ESP_Upkeep+0x938>)
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005ec6:	4b34      	ldr	r3, [pc, #208]	@ (8005f98 <ESP_Upkeep+0x914>)
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d020      	beq.n	8005f10 <ESP_Upkeep+0x88c>
 8005ece:	4b34      	ldr	r3, [pc, #208]	@ (8005fa0 <ESP_Upkeep+0x91c>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d01c      	beq.n	8005f10 <ESP_Upkeep+0x88c>
          EspState = ESP_STATE_INIT;
 8005ed6:	4b34      	ldr	r3, [pc, #208]	@ (8005fa8 <ESP_Upkeep+0x924>)
 8005ed8:	2202      	movs	r2, #2
 8005eda:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005edc:	e018      	b.n	8005f10 <ESP_Upkeep+0x88c>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005ede:	4b38      	ldr	r3, [pc, #224]	@ (8005fc0 <ESP_Upkeep+0x93c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f008 fcb0 	bl	800e848 <TimestampIsReached>
 8005ee8:	1e03      	subs	r3, r0, #0
 8005eea:	d04c      	beq.n	8005f86 <ESP_Upkeep+0x902>
        if(Mode == AT_MODE_SEND ) {
 8005eec:	4b2c      	ldr	r3, [pc, #176]	@ (8005fa0 <ESP_Upkeep+0x91c>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d148      	bne.n	8005f86 <ESP_Upkeep+0x902>
           Mode = AT_MODE_GETTIME;
 8005ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa0 <ESP_Upkeep+0x91c>)
 8005ef6:	2205      	movs	r2, #5
 8005ef8:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8005efa:	4b2b      	ldr	r3, [pc, #172]	@ (8005fa8 <ESP_Upkeep+0x924>)
 8005efc:	2202      	movs	r2, #2
 8005efe:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8005f00:	4b24      	ldr	r3, [pc, #144]	@ (8005f94 <ESP_Upkeep+0x910>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc4 <ESP_Upkeep+0x940>)
 8005f06:	601a      	str	r2, [r3, #0]
           setTime = true;
 8005f08:	4b2f      	ldr	r3, [pc, #188]	@ (8005fc8 <ESP_Upkeep+0x944>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005f0e:	e03a      	b.n	8005f86 <ESP_Upkeep+0x902>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8005f10:	46c0      	nop			@ (mov r8, r8)
      break;
 8005f12:	e038      	b.n	8005f86 <ESP_Upkeep+0x902>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8005f14:	4b2d      	ldr	r3, [pc, #180]	@ (8005fcc <ESP_Upkeep+0x948>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	4053      	eors	r3, r2
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d008      	beq.n	8005f34 <ESP_Upkeep+0x8b0>
        Info("Do nothing until reset");
 8005f22:	4a24      	ldr	r2, [pc, #144]	@ (8005fb4 <ESP_Upkeep+0x930>)
 8005f24:	4b24      	ldr	r3, [pc, #144]	@ (8005fb8 <ESP_Upkeep+0x934>)
 8005f26:	0019      	movs	r1, r3
 8005f28:	2002      	movs	r0, #2
 8005f2a:	f008 fce3 	bl	800e8f4 <CreateLine>
        msgdone = true;
 8005f2e:	4b27      	ldr	r3, [pc, #156]	@ (8005fcc <ESP_Upkeep+0x948>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8005f34:	f017 f962 	bl	801d1fc <GetUsbRxPointer>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 f8c0 	bl	80060c0 <Process_PC_Config>
      break;
 8005f40:	e022      	b.n	8005f88 <ESP_Upkeep+0x904>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005f42:	4a23      	ldr	r2, [pc, #140]	@ (8005fd0 <ESP_Upkeep+0x94c>)
 8005f44:	4b23      	ldr	r3, [pc, #140]	@ (8005fd4 <ESP_Upkeep+0x950>)
 8005f46:	0019      	movs	r1, r3
 8005f48:	2001      	movs	r0, #1
 8005f4a:	f008 fcd3 	bl	800e8f4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005f4e:	4b16      	ldr	r3, [pc, #88]	@ (8005fa8 <ESP_Upkeep+0x924>)
 8005f50:	2202      	movs	r2, #2
 8005f52:	701a      	strb	r2, [r3, #0]
      break;
 8005f54:	e018      	b.n	8005f88 <ESP_Upkeep+0x904>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005f56:	4a20      	ldr	r2, [pc, #128]	@ (8005fd8 <ESP_Upkeep+0x954>)
 8005f58:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd4 <ESP_Upkeep+0x950>)
 8005f5a:	0019      	movs	r1, r3
 8005f5c:	2001      	movs	r0, #1
 8005f5e:	f008 fcc9 	bl	800e8f4 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005f62:	4b11      	ldr	r3, [pc, #68]	@ (8005fa8 <ESP_Upkeep+0x924>)
 8005f64:	2207      	movs	r2, #7
 8005f66:	701a      	strb	r2, [r3, #0]
      break;
 8005f68:	e00e      	b.n	8005f88 <ESP_Upkeep+0x904>
      break;
 8005f6a:	46c0      	nop			@ (mov r8, r8)
 8005f6c:	e00c      	b.n	8005f88 <ESP_Upkeep+0x904>
      break;
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	e00a      	b.n	8005f88 <ESP_Upkeep+0x904>
        break;
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	e008      	b.n	8005f88 <ESP_Upkeep+0x904>
    break;
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	e006      	b.n	8005f88 <ESP_Upkeep+0x904>
    break;
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	e004      	b.n	8005f88 <ESP_Upkeep+0x904>
      break;
 8005f7e:	46c0      	nop			@ (mov r8, r8)
 8005f80:	e002      	b.n	8005f88 <ESP_Upkeep+0x904>
    break;
 8005f82:	46c0      	nop			@ (mov r8, r8)
 8005f84:	e000      	b.n	8005f88 <ESP_Upkeep+0x904>
      break;
 8005f86:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005f88:	4b07      	ldr	r3, [pc, #28]	@ (8005fa8 <ESP_Upkeep+0x924>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bdb0      	pop	{r4, r5, r7, pc}
 8005f94:	20000618 	.word	0x20000618
 8005f98:	2000054f 	.word	0x2000054f
 8005f9c:	20000554 	.word	0x20000554
 8005fa0:	2000061f 	.word	0x2000061f
 8005fa4:	2000054d 	.word	0x2000054d
 8005fa8:	20000030 	.word	0x20000030
 8005fac:	20000550 	.word	0x20000550
 8005fb0:	20000552 	.word	0x20000552
 8005fb4:	080242d0 	.word	0x080242d0
 8005fb8:	08024268 	.word	0x08024268
 8005fbc:	20000551 	.word	0x20000551
 8005fc0:	20000028 	.word	0x20000028
 8005fc4:	2000002c 	.word	0x2000002c
 8005fc8:	20000001 	.word	0x20000001
 8005fcc:	20000553 	.word	0x20000553
 8005fd0:	080242e8 	.word	0x080242e8
 8005fd4:	080235c4 	.word	0x080235c4
 8005fd8:	080242fc 	.word	0x080242fc

08005fdc <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005fe4:	4b09      	ldr	r3, [pc, #36]	@ (800600c <I2CSensors_Init+0x30>)
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005fea:	4a09      	ldr	r2, [pc, #36]	@ (8006010 <I2CSensors_Init+0x34>)
 8005fec:	4b09      	ldr	r3, [pc, #36]	@ (8006014 <I2CSensors_Init+0x38>)
 8005fee:	0011      	movs	r1, r2
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f008 fde3 	bl	800ebbc <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005ff6:	4a06      	ldr	r2, [pc, #24]	@ (8006010 <I2CSensors_Init+0x34>)
 8005ff8:	4b06      	ldr	r3, [pc, #24]	@ (8006014 <I2CSensors_Init+0x38>)
 8005ffa:	0011      	movs	r1, r2
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f005 fd6d 	bl	800badc <SGP_Init>
}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	46bd      	mov	sp, r7
 8006006:	b002      	add	sp, #8
 8006008:	bd80      	pop	{r7, pc}
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	20000768 	.word	0x20000768
 8006010:	0800606d 	.word	0x0800606d
 8006014:	08006019 	.word	0x08006019

08006018 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8006018:	b5b0      	push	{r4, r5, r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6039      	str	r1, [r7, #0]
 8006020:	0011      	movs	r1, r2
 8006022:	1dfb      	adds	r3, r7, #7
 8006024:	1c02      	adds	r2, r0, #0
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	1dbb      	adds	r3, r7, #6
 800602a:	1c0a      	adds	r2, r1, #0
 800602c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800602e:	4b0e      	ldr	r3, [pc, #56]	@ (8006068 <ReadI2C+0x50>)
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	1dfb      	adds	r3, r7, #7
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	18db      	adds	r3, r3, r3
 800603a:	b299      	uxth	r1, r3
 800603c:	1dbb      	adds	r3, r7, #6
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	250f      	movs	r5, #15
 8006044:	197c      	adds	r4, r7, r5
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	f00a ff0e 	bl	8010e68 <HAL_I2C_Master_Receive_DMA>
 800604c:	0003      	movs	r3, r0
 800604e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8006050:	197b      	adds	r3, r7, r5
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <ReadI2C+0x44>
        return false;
 8006058:	2300      	movs	r3, #0
 800605a:	e000      	b.n	800605e <ReadI2C+0x46>
    }
    return true;
 800605c:	2301      	movs	r3, #1
}
 800605e:	0018      	movs	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	b004      	add	sp, #16
 8006064:	bdb0      	pop	{r4, r5, r7, pc}
 8006066:	46c0      	nop			@ (mov r8, r8)
 8006068:	20000768 	.word	0x20000768

0800606c <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800606c:	b5b0      	push	{r4, r5, r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6039      	str	r1, [r7, #0]
 8006074:	0011      	movs	r1, r2
 8006076:	1dfb      	adds	r3, r7, #7
 8006078:	1c02      	adds	r2, r0, #0
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	1dbb      	adds	r3, r7, #6
 800607e:	1c0a      	adds	r2, r1, #0
 8006080:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8006082:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <WriteI2C+0x50>)
 8006084:	6818      	ldr	r0, [r3, #0]
 8006086:	1dfb      	adds	r3, r7, #7
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	18db      	adds	r3, r3, r3
 800608e:	b299      	uxth	r1, r3
 8006090:	1dbb      	adds	r3, r7, #6
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	250f      	movs	r5, #15
 8006098:	197c      	adds	r4, r7, r5
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	f00a fdde 	bl	8010c5c <HAL_I2C_Master_Transmit_DMA>
 80060a0:	0003      	movs	r3, r0
 80060a2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80060a4:	197b      	adds	r3, r7, r5
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <WriteI2C+0x44>
        return false;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e000      	b.n	80060b2 <WriteI2C+0x46>
    }
    return true;
 80060b0:	2301      	movs	r3, #1
}
 80060b2:	0018      	movs	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b004      	add	sp, #16
 80060b8:	bdb0      	pop	{r4, r5, r7, pc}
 80060ba:	46c0      	nop			@ (mov r8, r8)
 80060bc:	20000768 	.word	0x20000768

080060c0 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	b0c3      	sub	sp, #268	@ 0x10c
 80060c4:	af3e      	add	r7, sp, #248	@ 0xf8
 80060c6:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80060c8:	f017 f8b8 	bl	801d23c <GetUsbRxDataSize>
 80060cc:	0003      	movs	r3, r0
 80060ce:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b05      	cmp	r3, #5
 80060d4:	d971      	bls.n	80061ba <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2123      	movs	r1, #35	@ 0x23
 80060da:	0018      	movs	r0, r3
 80060dc:	f01a faae 	bl	802063c <strchr>
 80060e0:	0003      	movs	r3, r0
 80060e2:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d065      	beq.n	80061b6 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	785a      	ldrb	r2, [r3, #1]
 80060ee:	4b34      	ldr	r3, [pc, #208]	@ (80061c0 <Process_PC_Config+0x100>)
 80060f0:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	789a      	ldrb	r2, [r3, #2]
 80060f6:	4b32      	ldr	r3, [pc, #200]	@ (80061c0 <Process_PC_Config+0x100>)
 80060f8:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80060fa:	4b31      	ldr	r3, [pc, #196]	@ (80061c0 <Process_PC_Config+0x100>)
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	3305      	adds	r3, #5
 8006100:	001a      	movs	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4293      	cmp	r3, r2
 8006106:	d351      	bcc.n	80061ac <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	1cd9      	adds	r1, r3, #3
 800610c:	4b2c      	ldr	r3, [pc, #176]	@ (80061c0 <Process_PC_Config+0x100>)
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	001a      	movs	r2, r3
 8006112:	4b2c      	ldr	r3, [pc, #176]	@ (80061c4 <Process_PC_Config+0x104>)
 8006114:	0018      	movs	r0, r3
 8006116:	f01a fb65 	bl	80207e4 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800611a:	4b29      	ldr	r3, [pc, #164]	@ (80061c0 <Process_PC_Config+0x100>)
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	3303      	adds	r3, #3
 8006120:	001a      	movs	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	189b      	adds	r3, r3, r2
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	b21a      	sxth	r2, r3
 800612c:	4b24      	ldr	r3, [pc, #144]	@ (80061c0 <Process_PC_Config+0x100>)
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	3304      	adds	r3, #4
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	18cb      	adds	r3, r1, r3
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	b21b      	sxth	r3, r3
 800613a:	4313      	orrs	r3, r2
 800613c:	b21b      	sxth	r3, r3
 800613e:	b299      	uxth	r1, r3
 8006140:	4a1f      	ldr	r2, [pc, #124]	@ (80061c0 <Process_PC_Config+0x100>)
 8006142:	2381      	movs	r3, #129	@ 0x81
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8006148:	4a1d      	ldr	r2, [pc, #116]	@ (80061c0 <Process_PC_Config+0x100>)
 800614a:	2381      	movs	r3, #129	@ 0x81
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	5ad4      	ldrh	r4, [r2, r3]
 8006150:	4b1b      	ldr	r3, [pc, #108]	@ (80061c0 <Process_PC_Config+0x100>)
 8006152:	785b      	ldrb	r3, [r3, #1]
 8006154:	3303      	adds	r3, #3
 8006156:	b29a      	uxth	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	0011      	movs	r1, r2
 800615c:	0018      	movs	r0, r3
 800615e:	f000 f975 	bl	800644c <CRC16_ARC>
 8006162:	0003      	movs	r3, r0
 8006164:	429c      	cmp	r4, r3
 8006166:	d007      	beq.n	8006178 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8006168:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <Process_PC_Config+0x100>)
 800616a:	785a      	ldrb	r2, [r3, #1]
 800616c:	4b15      	ldr	r3, [pc, #84]	@ (80061c4 <Process_PC_Config+0x104>)
 800616e:	0019      	movs	r1, r3
 8006170:	2001      	movs	r0, #1
 8006172:	f000 f919 	bl	80063a8 <Create_Message>
 8006176:	e016      	b.n	80061a6 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8006178:	4c11      	ldr	r4, [pc, #68]	@ (80061c0 <Process_PC_Config+0x100>)
 800617a:	466b      	mov	r3, sp
 800617c:	0018      	movs	r0, r3
 800617e:	0023      	movs	r3, r4
 8006180:	3310      	adds	r3, #16
 8006182:	22f4      	movs	r2, #244	@ 0xf4
 8006184:	0019      	movs	r1, r3
 8006186:	f01a fb2d 	bl	80207e4 <memcpy>
 800618a:	6820      	ldr	r0, [r4, #0]
 800618c:	6861      	ldr	r1, [r4, #4]
 800618e:	68a2      	ldr	r2, [r4, #8]
 8006190:	68e3      	ldr	r3, [r4, #12]
 8006192:	f000 f819 	bl	80061c8 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8006196:	4b0a      	ldr	r3, [pc, #40]	@ (80061c0 <Process_PC_Config+0x100>)
 8006198:	7818      	ldrb	r0, [r3, #0]
 800619a:	4b09      	ldr	r3, [pc, #36]	@ (80061c0 <Process_PC_Config+0x100>)
 800619c:	785a      	ldrb	r2, [r3, #1]
 800619e:	4b09      	ldr	r3, [pc, #36]	@ (80061c4 <Process_PC_Config+0x104>)
 80061a0:	0019      	movs	r1, r3
 80061a2:	f000 f901 	bl	80063a8 <Create_Message>
                }
                ResetUsbRxDataSize();
 80061a6:	f017 f831 	bl	801d20c <ResetUsbRxDataSize>
                return;
 80061aa:	e006      	b.n	80061ba <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	0018      	movs	r0, r3
 80061b0:	f017 f84e 	bl	801d250 <GetUsbRxNextChunk>
 80061b4:	e001      	b.n	80061ba <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 80061b6:	f017 f829 	bl	801d20c <ResetUsbRxDataSize>
        }
    }
}
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b005      	add	sp, #20
 80061be:	bd90      	pop	{r4, r7, pc}
 80061c0:	2000076c 	.word	0x2000076c
 80061c4:	2000076e 	.word	0x2000076e

080061c8 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80061c8:	b084      	sub	sp, #16
 80061ca:	b5b0      	push	{r4, r5, r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	2518      	movs	r5, #24
 80061d2:	197c      	adds	r4, r7, r5
 80061d4:	6020      	str	r0, [r4, #0]
 80061d6:	6061      	str	r1, [r4, #4]
 80061d8:	60a2      	str	r2, [r4, #8]
 80061da:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 80061dc:	197b      	adds	r3, r7, r5
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80061e2:	d100      	bne.n	80061e6 <ProcessCmd+0x1e>
 80061e4:	e09c      	b.n	8006320 <ProcessCmd+0x158>
 80061e6:	dd00      	ble.n	80061ea <ProcessCmd+0x22>
 80061e8:	e0bc      	b.n	8006364 <ProcessCmd+0x19c>
 80061ea:	2b0c      	cmp	r3, #12
 80061ec:	dc0a      	bgt.n	8006204 <ProcessCmd+0x3c>
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	da00      	bge.n	80061f4 <ProcessCmd+0x2c>
 80061f2:	e0b7      	b.n	8006364 <ProcessCmd+0x19c>
 80061f4:	2b0c      	cmp	r3, #12
 80061f6:	d900      	bls.n	80061fa <ProcessCmd+0x32>
 80061f8:	e0b4      	b.n	8006364 <ProcessCmd+0x19c>
 80061fa:	009a      	lsls	r2, r3, #2
 80061fc:	4b5d      	ldr	r3, [pc, #372]	@ (8006374 <ProcessCmd+0x1ac>)
 80061fe:	18d3      	adds	r3, r2, r3
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	469f      	mov	pc, r3
 8006204:	2bfd      	cmp	r3, #253	@ 0xfd
 8006206:	d100      	bne.n	800620a <ProcessCmd+0x42>
 8006208:	e084      	b.n	8006314 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 800620a:	e0ab      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800620c:	2118      	movs	r1, #24
 800620e:	187b      	adds	r3, r7, r1
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	001a      	movs	r2, r3
 8006214:	187b      	adds	r3, r7, r1
 8006216:	1c99      	adds	r1, r3, #2
 8006218:	4857      	ldr	r0, [pc, #348]	@ (8006378 <ProcessCmd+0x1b0>)
 800621a:	230c      	movs	r3, #12
 800621c:	f001 f94c 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 8006220:	e0a0      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006222:	2118      	movs	r1, #24
 8006224:	187b      	adds	r3, r7, r1
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	001a      	movs	r2, r3
 800622a:	187b      	adds	r3, r7, r1
 800622c:	1c99      	adds	r1, r3, #2
 800622e:	4853      	ldr	r0, [pc, #332]	@ (800637c <ProcessCmd+0x1b4>)
 8006230:	230c      	movs	r3, #12
 8006232:	f001 f941 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 8006236:	e095      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006238:	2118      	movs	r1, #24
 800623a:	187b      	adds	r3, r7, r1
 800623c:	785b      	ldrb	r3, [r3, #1]
 800623e:	001a      	movs	r2, r3
 8006240:	187b      	adds	r3, r7, r1
 8006242:	1c99      	adds	r1, r3, #2
 8006244:	484e      	ldr	r0, [pc, #312]	@ (8006380 <ProcessCmd+0x1b8>)
 8006246:	230c      	movs	r3, #12
 8006248:	f001 f936 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 800624c:	e08a      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800624e:	2118      	movs	r1, #24
 8006250:	187b      	adds	r3, r7, r1
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	001a      	movs	r2, r3
 8006256:	187b      	adds	r3, r7, r1
 8006258:	1c99      	adds	r1, r3, #2
 800625a:	484a      	ldr	r0, [pc, #296]	@ (8006384 <ProcessCmd+0x1bc>)
 800625c:	230c      	movs	r3, #12
 800625e:	f001 f92b 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 8006262:	e07f      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006264:	2118      	movs	r1, #24
 8006266:	187b      	adds	r3, r7, r1
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	001a      	movs	r2, r3
 800626c:	187b      	adds	r3, r7, r1
 800626e:	1c99      	adds	r1, r3, #2
 8006270:	4845      	ldr	r0, [pc, #276]	@ (8006388 <ProcessCmd+0x1c0>)
 8006272:	230c      	movs	r3, #12
 8006274:	f001 f920 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 8006278:	e074      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800627a:	2118      	movs	r1, #24
 800627c:	187b      	adds	r3, r7, r1
 800627e:	785b      	ldrb	r3, [r3, #1]
 8006280:	001a      	movs	r2, r3
 8006282:	187b      	adds	r3, r7, r1
 8006284:	1c99      	adds	r1, r3, #2
 8006286:	4841      	ldr	r0, [pc, #260]	@ (800638c <ProcessCmd+0x1c4>)
 8006288:	230c      	movs	r3, #12
 800628a:	f001 f915 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 800628e:	e069      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006290:	2118      	movs	r1, #24
 8006292:	187b      	adds	r3, r7, r1
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	001a      	movs	r2, r3
 8006298:	187b      	adds	r3, r7, r1
 800629a:	1c99      	adds	r1, r3, #2
 800629c:	483c      	ldr	r0, [pc, #240]	@ (8006390 <ProcessCmd+0x1c8>)
 800629e:	230c      	movs	r3, #12
 80062a0:	f001 f90a 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 80062a4:	e05e      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80062a6:	2118      	movs	r1, #24
 80062a8:	187b      	adds	r3, r7, r1
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	001a      	movs	r2, r3
 80062ae:	187b      	adds	r3, r7, r1
 80062b0:	1c99      	adds	r1, r3, #2
 80062b2:	4838      	ldr	r0, [pc, #224]	@ (8006394 <ProcessCmd+0x1cc>)
 80062b4:	2320      	movs	r3, #32
 80062b6:	f001 f8ff 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 80062ba:	e053      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062bc:	2118      	movs	r1, #24
 80062be:	187b      	adds	r3, r7, r1
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	001a      	movs	r2, r3
 80062c4:	187b      	adds	r3, r7, r1
 80062c6:	1c99      	adds	r1, r3, #2
 80062c8:	4833      	ldr	r0, [pc, #204]	@ (8006398 <ProcessCmd+0x1d0>)
 80062ca:	230c      	movs	r3, #12
 80062cc:	f001 f8f4 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 80062d0:	e048      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062d2:	2118      	movs	r1, #24
 80062d4:	187b      	adds	r3, r7, r1
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	001a      	movs	r2, r3
 80062da:	187b      	adds	r3, r7, r1
 80062dc:	1c99      	adds	r1, r3, #2
 80062de:	482f      	ldr	r0, [pc, #188]	@ (800639c <ProcessCmd+0x1d4>)
 80062e0:	230c      	movs	r3, #12
 80062e2:	f001 f8e9 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 80062e6:	e03d      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062e8:	2118      	movs	r1, #24
 80062ea:	187b      	adds	r3, r7, r1
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	001a      	movs	r2, r3
 80062f0:	187b      	adds	r3, r7, r1
 80062f2:	1c99      	adds	r1, r3, #2
 80062f4:	482a      	ldr	r0, [pc, #168]	@ (80063a0 <ProcessCmd+0x1d8>)
 80062f6:	230c      	movs	r3, #12
 80062f8:	f001 f8de 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 80062fc:	e032      	b.n	8006364 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80062fe:	2118      	movs	r1, #24
 8006300:	187b      	adds	r3, r7, r1
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	001a      	movs	r2, r3
 8006306:	187b      	adds	r3, r7, r1
 8006308:	1c99      	adds	r1, r3, #2
 800630a:	4826      	ldr	r0, [pc, #152]	@ (80063a4 <ProcessCmd+0x1dc>)
 800630c:	230c      	movs	r3, #12
 800630e:	f001 f8d3 	bl	80074b8 <WriteUint8ArrayEepromSafe>
        break;
 8006312:	e027      	b.n	8006364 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8006314:	4b18      	ldr	r3, [pc, #96]	@ (8006378 <ProcessCmd+0x1b0>)
 8006316:	21bc      	movs	r1, #188	@ 0xbc
 8006318:	0018      	movs	r0, r3
 800631a:	f001 f912 	bl	8007542 <ClearEEprom>
        break;
 800631e:	e021      	b.n	8006364 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006320:	2118      	movs	r1, #24
 8006322:	187b      	adds	r3, r7, r1
 8006324:	789b      	ldrb	r3, [r3, #2]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	b21a      	sxth	r2, r3
 800632a:	187b      	adds	r3, r7, r1
 800632c:	78db      	ldrb	r3, [r3, #3]
 800632e:	b21b      	sxth	r3, r3
 8006330:	4313      	orrs	r3, r2
 8006332:	b21a      	sxth	r2, r3
 8006334:	1dbb      	adds	r3, r7, #6
 8006336:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8006338:	1dbb      	adds	r3, r7, #6
 800633a:	881a      	ldrh	r2, [r3, #0]
 800633c:	23c0      	movs	r3, #192	@ 0xc0
 800633e:	015b      	lsls	r3, r3, #5
 8006340:	429a      	cmp	r2, r3
 8006342:	d207      	bcs.n	8006354 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006344:	1dbb      	adds	r3, r7, #6
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	4a0b      	ldr	r2, [pc, #44]	@ (8006378 <ProcessCmd+0x1b0>)
 800634a:	0019      	movs	r1, r3
 800634c:	0010      	movs	r0, r2
 800634e:	f001 f8f8 	bl	8007542 <ClearEEprom>
            break;
 8006352:	e006      	b.n	8006362 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006354:	23c0      	movs	r3, #192	@ 0xc0
 8006356:	015b      	lsls	r3, r3, #5
 8006358:	4a07      	ldr	r2, [pc, #28]	@ (8006378 <ProcessCmd+0x1b0>)
 800635a:	0019      	movs	r1, r3
 800635c:	0010      	movs	r0, r2
 800635e:	f001 f8f0 	bl	8007542 <ClearEEprom>
            break;
 8006362:	46c0      	nop			@ (mov r8, r8)
}
 8006364:	46c0      	nop			@ (mov r8, r8)
 8006366:	46bd      	mov	sp, r7
 8006368:	b002      	add	sp, #8
 800636a:	bcb0      	pop	{r4, r5, r7}
 800636c:	bc08      	pop	{r3}
 800636e:	b004      	add	sp, #16
 8006370:	4718      	bx	r3
 8006372:	46c0      	nop			@ (mov r8, r8)
 8006374:	08025ab8 	.word	0x08025ab8
 8006378:	08080000 	.word	0x08080000
 800637c:	0808000c 	.word	0x0808000c
 8006380:	08080018 	.word	0x08080018
 8006384:	08080024 	.word	0x08080024
 8006388:	08080030 	.word	0x08080030
 800638c:	0808003c 	.word	0x0808003c
 8006390:	08080048 	.word	0x08080048
 8006394:	08080090 	.word	0x08080090
 8006398:	08080078 	.word	0x08080078
 800639c:	0808006c 	.word	0x0808006c
 80063a0:	08080060 	.word	0x08080060
 80063a4:	08080054 	.word	0x08080054

080063a8 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80063a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6039      	str	r1, [r7, #0]
 80063b0:	0011      	movs	r1, r2
 80063b2:	1dfb      	adds	r3, r7, #7
 80063b4:	1c02      	adds	r2, r0, #0
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	1dbb      	adds	r3, r7, #6
 80063ba:	1c0a      	adds	r2, r1, #0
 80063bc:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 80063be:	2223      	movs	r2, #35	@ 0x23
 80063c0:	4b20      	ldr	r3, [pc, #128]	@ (8006444 <Create_Message+0x9c>)
 80063c2:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80063c4:	4b1f      	ldr	r3, [pc, #124]	@ (8006444 <Create_Message+0x9c>)
 80063c6:	1dfa      	adds	r2, r7, #7
 80063c8:	7812      	ldrb	r2, [r2, #0]
 80063ca:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80063cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006444 <Create_Message+0x9c>)
 80063ce:	1dba      	adds	r2, r7, #6
 80063d0:	7812      	ldrb	r2, [r2, #0]
 80063d2:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80063d4:	1dbb      	adds	r3, r7, #6
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	4b1b      	ldr	r3, [pc, #108]	@ (8006448 <Create_Message+0xa0>)
 80063dc:	0018      	movs	r0, r3
 80063de:	f01a fa01 	bl	80207e4 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80063e2:	1dbb      	adds	r3, r7, #6
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	250e      	movs	r5, #14
 80063ea:	197b      	adds	r3, r7, r5
 80063ec:	3203      	adds	r2, #3
 80063ee:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80063f0:	260c      	movs	r6, #12
 80063f2:	19bc      	adds	r4, r7, r6
 80063f4:	197b      	adds	r3, r7, r5
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	4b12      	ldr	r3, [pc, #72]	@ (8006444 <Create_Message+0x9c>)
 80063fa:	0011      	movs	r1, r2
 80063fc:	0018      	movs	r0, r3
 80063fe:	f000 f825 	bl	800644c <CRC16_ARC>
 8006402:	0003      	movs	r3, r0
 8006404:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8006406:	0030      	movs	r0, r6
 8006408:	183b      	adds	r3, r7, r0
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	b29a      	uxth	r2, r3
 8006410:	197b      	adds	r3, r7, r5
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b2d1      	uxtb	r1, r2
 8006416:	4a0b      	ldr	r2, [pc, #44]	@ (8006444 <Create_Message+0x9c>)
 8006418:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800641a:	197b      	adds	r3, r7, r5
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	183a      	adds	r2, r7, r0
 8006422:	8812      	ldrh	r2, [r2, #0]
 8006424:	b2d1      	uxtb	r1, r2
 8006426:	4a07      	ldr	r2, [pc, #28]	@ (8006444 <Create_Message+0x9c>)
 8006428:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800642a:	197b      	adds	r3, r7, r5
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	3302      	adds	r3, #2
 8006430:	b29a      	uxth	r2, r3
 8006432:	4b04      	ldr	r3, [pc, #16]	@ (8006444 <Create_Message+0x9c>)
 8006434:	0011      	movs	r1, r2
 8006436:	0018      	movs	r0, r3
 8006438:	f016 fea6 	bl	801d188 <CDC_Transmit_FS>
}
 800643c:	46c0      	nop			@ (mov r8, r8)
 800643e:	46bd      	mov	sp, r7
 8006440:	b005      	add	sp, #20
 8006442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006444:	20000870 	.word	0x20000870
 8006448:	20000873 	.word	0x20000873

0800644c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	000a      	movs	r2, r1
 8006456:	1cbb      	adds	r3, r7, #2
 8006458:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800645a:	2316      	movs	r3, #22
 800645c:	18fb      	adds	r3, r7, r3
 800645e:	2200      	movs	r2, #0
 8006460:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	e02e      	b.n	80064c6 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	18d3      	adds	r3, r2, r3
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	0019      	movs	r1, r3
 8006472:	2216      	movs	r2, #22
 8006474:	18bb      	adds	r3, r7, r2
 8006476:	18ba      	adds	r2, r7, r2
 8006478:	8812      	ldrh	r2, [r2, #0]
 800647a:	404a      	eors	r2, r1
 800647c:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	e01a      	b.n	80064ba <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8006484:	2116      	movs	r1, #22
 8006486:	187b      	adds	r3, r7, r1
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	2201      	movs	r2, #1
 800648c:	4013      	ands	r3, r2
 800648e:	d00b      	beq.n	80064a8 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8006490:	187b      	adds	r3, r7, r1
 8006492:	187a      	adds	r2, r7, r1
 8006494:	8812      	ldrh	r2, [r2, #0]
 8006496:	0852      	lsrs	r2, r2, #1
 8006498:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800649a:	187b      	adds	r3, r7, r1
 800649c:	187a      	adds	r2, r7, r1
 800649e:	8812      	ldrh	r2, [r2, #0]
 80064a0:	490f      	ldr	r1, [pc, #60]	@ (80064e0 <CRC16_ARC+0x94>)
 80064a2:	404a      	eors	r2, r1
 80064a4:	801a      	strh	r2, [r3, #0]
 80064a6:	e005      	b.n	80064b4 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80064a8:	2216      	movs	r2, #22
 80064aa:	18bb      	adds	r3, r7, r2
 80064ac:	18ba      	adds	r2, r7, r2
 80064ae:	8812      	ldrh	r2, [r2, #0]
 80064b0:	0852      	lsrs	r2, r2, #1
 80064b2:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3301      	adds	r3, #1
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b07      	cmp	r3, #7
 80064be:	dde1      	ble.n	8006484 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	3301      	adds	r3, #1
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	1cbb      	adds	r3, r7, #2
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	dbcb      	blt.n	8006468 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80064d0:	2316      	movs	r3, #22
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	881b      	ldrh	r3, [r3, #0]
}
 80064d6:	0018      	movs	r0, r3
 80064d8:	46bd      	mov	sp, r7
 80064da:	b006      	add	sp, #24
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	46c0      	nop			@ (mov r8, r8)
 80064e0:	ffffa001 	.word	0xffffa001

080064e4 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 80064e8:	4b26      	ldr	r3, [pc, #152]	@ (8006584 <ReadBatteryVoltage+0xa0>)
 80064ea:	4a27      	ldr	r2, [pc, #156]	@ (8006588 <ReadBatteryVoltage+0xa4>)
 80064ec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80064ee:	4b25      	ldr	r3, [pc, #148]	@ (8006584 <ReadBatteryVoltage+0xa0>)
 80064f0:	2280      	movs	r2, #128	@ 0x80
 80064f2:	0152      	lsls	r2, r2, #5
 80064f4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80064f6:	4a23      	ldr	r2, [pc, #140]	@ (8006584 <ReadBatteryVoltage+0xa0>)
 80064f8:	4b24      	ldr	r3, [pc, #144]	@ (800658c <ReadBatteryVoltage+0xa8>)
 80064fa:	0011      	movs	r1, r2
 80064fc:	0018      	movs	r0, r3
 80064fe:	f009 f915 	bl	800f72c <HAL_ADC_ConfigChannel>
 8006502:	1e03      	subs	r3, r0, #0
 8006504:	d001      	beq.n	800650a <ReadBatteryVoltage+0x26>
    Error_Handler();
 8006506:	f002 f8a3 	bl	8008650 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800650a:	4b20      	ldr	r3, [pc, #128]	@ (800658c <ReadBatteryVoltage+0xa8>)
 800650c:	0018      	movs	r0, r3
 800650e:	f009 f811 	bl	800f534 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006512:	4b1e      	ldr	r3, [pc, #120]	@ (800658c <ReadBatteryVoltage+0xa8>)
 8006514:	2101      	movs	r1, #1
 8006516:	0018      	movs	r0, r3
 8006518:	f009 f860 	bl	800f5dc <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 800651c:	4b1b      	ldr	r3, [pc, #108]	@ (800658c <ReadBatteryVoltage+0xa8>)
 800651e:	0018      	movs	r0, r3
 8006520:	f009 f8f8 	bl	800f714 <HAL_ADC_GetValue>
 8006524:	0002      	movs	r2, r0
 8006526:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <ReadBatteryVoltage+0xac>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4353      	muls	r3, r2
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	4919      	ldr	r1, [pc, #100]	@ (8006594 <ReadBatteryVoltage+0xb0>)
 8006530:	0018      	movs	r0, r3
 8006532:	f7f9 fe37 	bl	80001a4 <__udivsi3>
 8006536:	0003      	movs	r3, r0
 8006538:	001a      	movs	r2, r3
 800653a:	4b17      	ldr	r3, [pc, #92]	@ (8006598 <ReadBatteryVoltage+0xb4>)
 800653c:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 800653e:	4b16      	ldr	r3, [pc, #88]	@ (8006598 <ReadBatteryVoltage+0xb4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	0018      	movs	r0, r3
 8006544:	f7fb f890 	bl	8001668 <__aeabi_ui2f>
 8006548:	1c03      	adds	r3, r0, #0
 800654a:	4914      	ldr	r1, [pc, #80]	@ (800659c <ReadBatteryVoltage+0xb8>)
 800654c:	1c18      	adds	r0, r3, #0
 800654e:	f7fa fb41 	bl	8000bd4 <__aeabi_fdiv>
 8006552:	1c03      	adds	r3, r0, #0
 8006554:	1c1a      	adds	r2, r3, #0
 8006556:	4b12      	ldr	r3, [pc, #72]	@ (80065a0 <ReadBatteryVoltage+0xbc>)
 8006558:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800655a:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <ReadBatteryVoltage+0xa0>)
 800655c:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <ReadBatteryVoltage+0xa4>)
 800655e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006560:	4b08      	ldr	r3, [pc, #32]	@ (8006584 <ReadBatteryVoltage+0xa0>)
 8006562:	4a10      	ldr	r2, [pc, #64]	@ (80065a4 <ReadBatteryVoltage+0xc0>)
 8006564:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006566:	4a07      	ldr	r2, [pc, #28]	@ (8006584 <ReadBatteryVoltage+0xa0>)
 8006568:	4b08      	ldr	r3, [pc, #32]	@ (800658c <ReadBatteryVoltage+0xa8>)
 800656a:	0011      	movs	r1, r2
 800656c:	0018      	movs	r0, r3
 800656e:	f009 f8dd 	bl	800f72c <HAL_ADC_ConfigChannel>
 8006572:	1e03      	subs	r3, r0, #0
 8006574:	d001      	beq.n	800657a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006576:	f002 f86b 	bl	8008650 <Error_Handler>
  }
  return trueValue;
 800657a:	4b09      	ldr	r3, [pc, #36]	@ (80065a0 <ReadBatteryVoltage+0xbc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 }
 800657e:	1c18      	adds	r0, r3, #0
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000978 	.word	0x20000978
 8006588:	38004000 	.word	0x38004000
 800658c:	200009b4 	.word	0x200009b4
 8006590:	20000034 	.word	0x20000034
 8006594:	00000fff 	.word	0x00000fff
 8006598:	20000980 	.word	0x20000980
 800659c:	447a0000 	.word	0x447a0000
 80065a0:	20000984 	.word	0x20000984
 80065a4:	00001001 	.word	0x00001001

080065a8 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 80065ac:	4b21      	ldr	r3, [pc, #132]	@ (8006634 <ReadSolarVoltage+0x8c>)
 80065ae:	4a22      	ldr	r2, [pc, #136]	@ (8006638 <ReadSolarVoltage+0x90>)
 80065b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80065b2:	4b20      	ldr	r3, [pc, #128]	@ (8006634 <ReadSolarVoltage+0x8c>)
 80065b4:	2280      	movs	r2, #128	@ 0x80
 80065b6:	0152      	lsls	r2, r2, #5
 80065b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80065ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006634 <ReadSolarVoltage+0x8c>)
 80065bc:	4b1f      	ldr	r3, [pc, #124]	@ (800663c <ReadSolarVoltage+0x94>)
 80065be:	0011      	movs	r1, r2
 80065c0:	0018      	movs	r0, r3
 80065c2:	f009 f8b3 	bl	800f72c <HAL_ADC_ConfigChannel>
 80065c6:	1e03      	subs	r3, r0, #0
 80065c8:	d001      	beq.n	80065ce <ReadSolarVoltage+0x26>
    Error_Handler();
 80065ca:	f002 f841 	bl	8008650 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80065ce:	4b1b      	ldr	r3, [pc, #108]	@ (800663c <ReadSolarVoltage+0x94>)
 80065d0:	0018      	movs	r0, r3
 80065d2:	f008 ffaf 	bl	800f534 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80065d6:	4b19      	ldr	r3, [pc, #100]	@ (800663c <ReadSolarVoltage+0x94>)
 80065d8:	2101      	movs	r1, #1
 80065da:	0018      	movs	r0, r3
 80065dc:	f008 fffe 	bl	800f5dc <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80065e0:	4b16      	ldr	r3, [pc, #88]	@ (800663c <ReadSolarVoltage+0x94>)
 80065e2:	0018      	movs	r0, r3
 80065e4:	f009 f896 	bl	800f714 <HAL_ADC_GetValue>
 80065e8:	0002      	movs	r2, r0
 80065ea:	4b15      	ldr	r3, [pc, #84]	@ (8006640 <ReadSolarVoltage+0x98>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	435a      	muls	r2, r3
 80065f0:	0013      	movs	r3, r2
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	189b      	adds	r3, r3, r2
 80065f6:	4913      	ldr	r1, [pc, #76]	@ (8006644 <ReadSolarVoltage+0x9c>)
 80065f8:	0018      	movs	r0, r3
 80065fa:	f7f9 fdd3 	bl	80001a4 <__udivsi3>
 80065fe:	0003      	movs	r3, r0
 8006600:	001a      	movs	r2, r3
 8006602:	4b11      	ldr	r3, [pc, #68]	@ (8006648 <ReadSolarVoltage+0xa0>)
 8006604:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006606:	4b0b      	ldr	r3, [pc, #44]	@ (8006634 <ReadSolarVoltage+0x8c>)
 8006608:	4a0b      	ldr	r2, [pc, #44]	@ (8006638 <ReadSolarVoltage+0x90>)
 800660a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800660c:	4b09      	ldr	r3, [pc, #36]	@ (8006634 <ReadSolarVoltage+0x8c>)
 800660e:	4a0f      	ldr	r2, [pc, #60]	@ (800664c <ReadSolarVoltage+0xa4>)
 8006610:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006612:	4a08      	ldr	r2, [pc, #32]	@ (8006634 <ReadSolarVoltage+0x8c>)
 8006614:	4b09      	ldr	r3, [pc, #36]	@ (800663c <ReadSolarVoltage+0x94>)
 8006616:	0011      	movs	r1, r2
 8006618:	0018      	movs	r0, r3
 800661a:	f009 f887 	bl	800f72c <HAL_ADC_ConfigChannel>
 800661e:	1e03      	subs	r3, r0, #0
 8006620:	d001      	beq.n	8006626 <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006622:	f002 f815 	bl	8008650 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8006626:	4b08      	ldr	r3, [pc, #32]	@ (8006648 <ReadSolarVoltage+0xa0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 }
 800662c:	0018      	movs	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	20000978 	.word	0x20000978
 8006638:	3c008000 	.word	0x3c008000
 800663c:	200009b4 	.word	0x200009b4
 8006640:	20000034 	.word	0x20000034
 8006644:	00000fff 	.word	0x00000fff
 8006648:	20000988 	.word	0x20000988
 800664c:	00001001 	.word	0x00001001

08006650 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006654:	23a0      	movs	r3, #160	@ 0xa0
 8006656:	05db      	lsls	r3, r3, #23
 8006658:	2180      	movs	r1, #128	@ 0x80
 800665a:	0018      	movs	r0, r3
 800665c:	f00a f802 	bl	8010664 <HAL_GPIO_ReadPin>
 8006660:	0003      	movs	r3, r0
 8006662:	1e5a      	subs	r2, r3, #1
 8006664:	4193      	sbcs	r3, r2
 8006666:	b2db      	uxtb	r3, r3
}
 8006668:	0018      	movs	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800666e:	b580      	push	{r7, lr}
 8006670:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006672:	2380      	movs	r3, #128	@ 0x80
 8006674:	021a      	lsls	r2, r3, #8
 8006676:	23a0      	movs	r3, #160	@ 0xa0
 8006678:	05db      	lsls	r3, r3, #23
 800667a:	0011      	movs	r1, r2
 800667c:	0018      	movs	r0, r3
 800667e:	f009 fff1 	bl	8010664 <HAL_GPIO_ReadPin>
 8006682:	0003      	movs	r3, r0
 8006684:	1e5a      	subs	r2, r3, #1
 8006686:	4193      	sbcs	r3, r2
 8006688:	b2db      	uxtb	r3, r3
}
 800668a:	0018      	movs	r0, r3
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006694:	4b05      	ldr	r3, [pc, #20]	@ (80066ac <UserButton_Pressed+0x1c>)
 8006696:	2104      	movs	r1, #4
 8006698:	0018      	movs	r0, r3
 800669a:	f009 ffe3 	bl	8010664 <HAL_GPIO_ReadPin>
 800669e:	0003      	movs	r3, r0
 80066a0:	425a      	negs	r2, r3
 80066a2:	4153      	adcs	r3, r2
 80066a4:	b2db      	uxtb	r3, r3
}
 80066a6:	0018      	movs	r0, r3
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	50000c00 	.word	0x50000c00

080066b0 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80066b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066b2:	46d6      	mov	lr, sl
 80066b4:	464f      	mov	r7, r9
 80066b6:	4646      	mov	r6, r8
 80066b8:	b5c0      	push	{r6, r7, lr}
 80066ba:	b08e      	sub	sp, #56	@ 0x38
 80066bc:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80066be:	4b21      	ldr	r3, [pc, #132]	@ (8006744 <showTime+0x94>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d036      	beq.n	8006734 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80066c6:	003a      	movs	r2, r7
 80066c8:	1d3b      	adds	r3, r7, #4
 80066ca:	0011      	movs	r1, r2
 80066cc:	0018      	movs	r0, r3
 80066ce:	f000 fa2b 	bl	8006b28 <RTC_GetTime>
  UpdateSystemUptime();
 80066d2:	f000 f83f 	bl	8006754 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80066d6:	003b      	movs	r3, r7
 80066d8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066da:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80066dc:	003b      	movs	r3, r7
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066e2:	4b19      	ldr	r3, [pc, #100]	@ (8006748 <showTime+0x98>)
 80066e4:	0092      	lsls	r2, r2, #2
 80066e6:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80066e8:	003b      	movs	r3, r7
 80066ea:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066ec:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066f2:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80066f4:	1d3b      	adds	r3, r7, #4
 80066f6:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066f8:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80066fa:	1d3b      	adds	r3, r7, #4
 80066fc:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80066fe:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006700:	4b12      	ldr	r3, [pc, #72]	@ (800674c <showTime+0x9c>)
 8006702:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006704:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006706:	4b11      	ldr	r3, [pc, #68]	@ (800674c <showTime+0x9c>)
 8006708:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800670a:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800670c:	4b0f      	ldr	r3, [pc, #60]	@ (800674c <showTime+0x9c>)
 800670e:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006710:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006712:	4b0e      	ldr	r3, [pc, #56]	@ (800674c <showTime+0x9c>)
 8006714:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006716:	480e      	ldr	r0, [pc, #56]	@ (8006750 <showTime+0xa0>)
 8006718:	9306      	str	r3, [sp, #24]
 800671a:	4643      	mov	r3, r8
 800671c:	9305      	str	r3, [sp, #20]
 800671e:	4663      	mov	r3, ip
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	9603      	str	r6, [sp, #12]
 8006724:	9502      	str	r5, [sp, #8]
 8006726:	9401      	str	r4, [sp, #4]
 8006728:	9100      	str	r1, [sp, #0]
 800672a:	4653      	mov	r3, sl
 800672c:	4649      	mov	r1, r9
 800672e:	f019 fdc9 	bl	80202c4 <iprintf>
 8006732:	e000      	b.n	8006736 <showTime+0x86>
    return;
 8006734:	46c0      	nop			@ (mov r8, r8)
}
 8006736:	46bd      	mov	sp, r7
 8006738:	b006      	add	sp, #24
 800673a:	bce0      	pop	{r5, r6, r7}
 800673c:	46ba      	mov	sl, r7
 800673e:	46b1      	mov	r9, r6
 8006740:	46a8      	mov	r8, r5
 8006742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006744:	20000998 	.word	0x20000998
 8006748:	20000054 	.word	0x20000054
 800674c:	2000098c 	.word	0x2000098c
 8006750:	08024378 	.word	0x08024378

08006754 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800675a:	003a      	movs	r2, r7
 800675c:	1d3b      	adds	r3, r7, #4
 800675e:	0011      	movs	r1, r2
 8006760:	0018      	movs	r0, r3
 8006762:	f000 f9e1 	bl	8006b28 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8006766:	1d3a      	adds	r2, r7, #4
 8006768:	003b      	movs	r3, r7
 800676a:	0011      	movs	r1, r2
 800676c:	0018      	movs	r0, r3
 800676e:	f000 fba7 	bl	8006ec0 <makeTime>
 8006772:	0002      	movs	r2, r0
 8006774:	4b1e      	ldr	r3, [pc, #120]	@ (80067f0 <UpdateSystemUptime+0x9c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	213c      	movs	r1, #60	@ 0x3c
 8006784:	0018      	movs	r0, r3
 8006786:	f7f9 fd93 	bl	80002b0 <__aeabi_uidivmod>
 800678a:	000b      	movs	r3, r1
 800678c:	b2da      	uxtb	r2, r3
 800678e:	4b19      	ldr	r3, [pc, #100]	@ (80067f4 <UpdateSystemUptime+0xa0>)
 8006790:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	213c      	movs	r1, #60	@ 0x3c
 8006796:	0018      	movs	r0, r3
 8006798:	f7f9 fd04 	bl	80001a4 <__udivsi3>
 800679c:	0003      	movs	r3, r0
 800679e:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	213c      	movs	r1, #60	@ 0x3c
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7f9 fd83 	bl	80002b0 <__aeabi_uidivmod>
 80067aa:	000b      	movs	r3, r1
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b11      	ldr	r3, [pc, #68]	@ (80067f4 <UpdateSystemUptime+0xa0>)
 80067b0:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	213c      	movs	r1, #60	@ 0x3c
 80067b6:	0018      	movs	r0, r3
 80067b8:	f7f9 fcf4 	bl	80001a4 <__udivsi3>
 80067bc:	0003      	movs	r3, r0
 80067be:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2118      	movs	r1, #24
 80067c4:	0018      	movs	r0, r3
 80067c6:	f7f9 fd73 	bl	80002b0 <__aeabi_uidivmod>
 80067ca:	000b      	movs	r3, r1
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	4b09      	ldr	r3, [pc, #36]	@ (80067f4 <UpdateSystemUptime+0xa0>)
 80067d0:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2118      	movs	r1, #24
 80067d6:	0018      	movs	r0, r3
 80067d8:	f7f9 fce4 	bl	80001a4 <__udivsi3>
 80067dc:	0003      	movs	r3, r0
 80067de:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	4b03      	ldr	r3, [pc, #12]	@ (80067f4 <UpdateSystemUptime+0xa0>)
 80067e6:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80067e8:	46c0      	nop			@ (mov r8, r8)
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b008      	add	sp, #32
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000998 	.word	0x20000998
 80067f4:	2000098c 	.word	0x2000098c

080067f8 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80067f8:	b590      	push	{r4, r7, lr}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	0008      	movs	r0, r1
 8006802:	0011      	movs	r1, r2
 8006804:	1cfb      	adds	r3, r7, #3
 8006806:	1c02      	adds	r2, r0, #0
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	1cbb      	adds	r3, r7, #2
 800680c:	1c0a      	adds	r2, r1, #0
 800680e:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006810:	230e      	movs	r3, #14
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	2200      	movs	r2, #0
 8006816:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006818:	230f      	movs	r3, #15
 800681a:	18fb      	adds	r3, r7, r3
 800681c:	1cfa      	adds	r2, r7, #3
 800681e:	7812      	ldrb	r2, [r2, #0]
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	e015      	b.n	8006850 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006824:	200f      	movs	r0, #15
 8006826:	183b      	adds	r3, r7, r0
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	18d2      	adds	r2, r2, r3
 800682e:	240e      	movs	r4, #14
 8006830:	193b      	adds	r3, r7, r4
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	7811      	ldrb	r1, [r2, #0]
 8006836:	2208      	movs	r2, #8
 8006838:	18ba      	adds	r2, r7, r2
 800683a:	54d1      	strb	r1, [r2, r3]
    pos++;
 800683c:	193b      	adds	r3, r7, r4
 800683e:	781a      	ldrb	r2, [r3, #0]
 8006840:	193b      	adds	r3, r7, r4
 8006842:	3201      	adds	r2, #1
 8006844:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006846:	183b      	adds	r3, r7, r0
 8006848:	781a      	ldrb	r2, [r3, #0]
 800684a:	183b      	adds	r3, r7, r0
 800684c:	3201      	adds	r2, #1
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	200f      	movs	r0, #15
 8006852:	183a      	adds	r2, r7, r0
 8006854:	1cbb      	adds	r3, r7, #2
 8006856:	7812      	ldrb	r2, [r2, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d9e2      	bls.n	8006824 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800685e:	230e      	movs	r3, #14
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2208      	movs	r2, #8
 8006866:	18ba      	adds	r2, r7, r2
 8006868:	2100      	movs	r1, #0
 800686a:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 800686c:	1cfb      	adds	r3, r7, #3
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b13      	cmp	r3, #19
 8006872:	d849      	bhi.n	8006908 <aBuff2int+0x110>
    if (start == 17) { //month
 8006874:	1cfb      	adds	r3, r7, #3
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b11      	cmp	r3, #17
 800687a:	d122      	bne.n	80068c2 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 800687c:	183b      	adds	r3, r7, r0
 800687e:	2200      	movs	r2, #0
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	e018      	b.n	80068b6 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006884:	240f      	movs	r4, #15
 8006886:	193b      	adds	r3, r7, r4
 8006888:	781a      	ldrb	r2, [r3, #0]
 800688a:	4b25      	ldr	r3, [pc, #148]	@ (8006920 <aBuff2int+0x128>)
 800688c:	0092      	lsls	r2, r2, #2
 800688e:	58d2      	ldr	r2, [r2, r3]
 8006890:	2308      	movs	r3, #8
 8006892:	18fb      	adds	r3, r7, r3
 8006894:	0011      	movs	r1, r2
 8006896:	0018      	movs	r0, r3
 8006898:	f7f9 fc5e 	bl	8000158 <strcmp>
 800689c:	1e03      	subs	r3, r0, #0
 800689e:	d104      	bne.n	80068aa <aBuff2int+0xb2>
          return i+1;
 80068a0:	193b      	adds	r3, r7, r4
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	3301      	adds	r3, #1
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	e035      	b.n	8006916 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80068aa:	210f      	movs	r1, #15
 80068ac:	187b      	adds	r3, r7, r1
 80068ae:	781a      	ldrb	r2, [r3, #0]
 80068b0:	187b      	adds	r3, r7, r1
 80068b2:	3201      	adds	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	230f      	movs	r3, #15
 80068b8:	18fb      	adds	r3, r7, r3
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b0b      	cmp	r3, #11
 80068be:	d9e1      	bls.n	8006884 <aBuff2int+0x8c>
 80068c0:	e022      	b.n	8006908 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80068c2:	230f      	movs	r3, #15
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	e018      	b.n	80068fe <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80068cc:	240f      	movs	r4, #15
 80068ce:	193b      	adds	r3, r7, r4
 80068d0:	781a      	ldrb	r2, [r3, #0]
 80068d2:	4b14      	ldr	r3, [pc, #80]	@ (8006924 <aBuff2int+0x12c>)
 80068d4:	0092      	lsls	r2, r2, #2
 80068d6:	58d2      	ldr	r2, [r2, r3]
 80068d8:	2308      	movs	r3, #8
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	0011      	movs	r1, r2
 80068de:	0018      	movs	r0, r3
 80068e0:	f7f9 fc3a 	bl	8000158 <strcmp>
 80068e4:	1e03      	subs	r3, r0, #0
 80068e6:	d104      	bne.n	80068f2 <aBuff2int+0xfa>
          return i+1;
 80068e8:	193b      	adds	r3, r7, r4
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	3301      	adds	r3, #1
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	e011      	b.n	8006916 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80068f2:	210f      	movs	r1, #15
 80068f4:	187b      	adds	r3, r7, r1
 80068f6:	781a      	ldrb	r2, [r3, #0]
 80068f8:	187b      	adds	r3, r7, r1
 80068fa:	3201      	adds	r2, #1
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	230f      	movs	r3, #15
 8006900:	18fb      	adds	r3, r7, r3
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b06      	cmp	r3, #6
 8006906:	d9e1      	bls.n	80068cc <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006908:	2308      	movs	r3, #8
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	0018      	movs	r0, r3
 800690e:	f018 f8fe 	bl	801eb0e <atoi>
 8006912:	0003      	movs	r3, r0
 8006914:	b2db      	uxtb	r3, r3
}
 8006916:	0018      	movs	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	b005      	add	sp, #20
 800691c:	bd90      	pop	{r4, r7, pc}
 800691e:	46c0      	nop			@ (mov r8, r8)
 8006920:	20000054 	.word	0x20000054
 8006924:	20000038 	.word	0x20000038

08006928 <ParseTime>:

void ParseTime(char* buffer) {
 8006928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800692a:	b08b      	sub	sp, #44	@ 0x2c
 800692c:	af02      	add	r7, sp, #8
 800692e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006930:	2408      	movs	r4, #8
 8006932:	193a      	adds	r2, r7, r4
 8006934:	260c      	movs	r6, #12
 8006936:	19bb      	adds	r3, r7, r6
 8006938:	0011      	movs	r1, r2
 800693a:	0018      	movs	r0, r3
 800693c:	f000 f8f4 	bl	8006b28 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2219      	movs	r2, #25
 8006944:	2118      	movs	r1, #24
 8006946:	0018      	movs	r0, r3
 8006948:	f7ff ff56 	bl	80067f8 <aBuff2int>
 800694c:	0003      	movs	r3, r0
 800694e:	001a      	movs	r2, r3
 8006950:	19bb      	adds	r3, r7, r6
 8006952:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	221c      	movs	r2, #28
 8006958:	211b      	movs	r1, #27
 800695a:	0018      	movs	r0, r3
 800695c:	f7ff ff4c 	bl	80067f8 <aBuff2int>
 8006960:	0003      	movs	r3, r0
 8006962:	001a      	movs	r2, r3
 8006964:	19bb      	adds	r3, r7, r6
 8006966:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	221f      	movs	r2, #31
 800696c:	211e      	movs	r1, #30
 800696e:	0018      	movs	r0, r3
 8006970:	f7ff ff42 	bl	80067f8 <aBuff2int>
 8006974:	0003      	movs	r3, r0
 8006976:	001a      	movs	r2, r3
 8006978:	19bb      	adds	r3, r7, r6
 800697a:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2224      	movs	r2, #36	@ 0x24
 8006980:	2123      	movs	r1, #35	@ 0x23
 8006982:	0018      	movs	r0, r3
 8006984:	f7ff ff38 	bl	80067f8 <aBuff2int>
 8006988:	0003      	movs	r3, r0
 800698a:	001a      	movs	r2, r3
 800698c:	0025      	movs	r5, r4
 800698e:	197b      	adds	r3, r7, r5
 8006990:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2213      	movs	r2, #19
 8006996:	2111      	movs	r1, #17
 8006998:	0018      	movs	r0, r3
 800699a:	f7ff ff2d 	bl	80067f8 <aBuff2int>
 800699e:	0003      	movs	r3, r0
 80069a0:	001a      	movs	r2, r3
 80069a2:	197b      	adds	r3, r7, r5
 80069a4:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2216      	movs	r2, #22
 80069aa:	2115      	movs	r1, #21
 80069ac:	0018      	movs	r0, r3
 80069ae:	f7ff ff23 	bl	80067f8 <aBuff2int>
 80069b2:	0003      	movs	r3, r0
 80069b4:	001a      	movs	r2, r3
 80069b6:	197b      	adds	r3, r7, r5
 80069b8:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	220f      	movs	r2, #15
 80069be:	210d      	movs	r1, #13
 80069c0:	0018      	movs	r0, r3
 80069c2:	f7ff ff19 	bl	80067f8 <aBuff2int>
 80069c6:	0003      	movs	r3, r0
 80069c8:	001a      	movs	r2, r3
 80069ca:	197b      	adds	r3, r7, r5
 80069cc:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80069ce:	19bb      	adds	r3, r7, r6
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	001c      	movs	r4, r3
 80069d4:	19bb      	adds	r3, r7, r6
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	0018      	movs	r0, r3
 80069da:	19bb      	adds	r3, r7, r6
 80069dc:	789b      	ldrb	r3, [r3, #2]
 80069de:	4a1c      	ldr	r2, [pc, #112]	@ (8006a50 <ParseTime+0x128>)
 80069e0:	491c      	ldr	r1, [pc, #112]	@ (8006a54 <ParseTime+0x12c>)
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	9000      	str	r0, [sp, #0]
 80069e6:	0023      	movs	r3, r4
 80069e8:	2003      	movs	r0, #3
 80069ea:	f007 ff83 	bl	800e8f4 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80069ee:	197b      	adds	r3, r7, r5
 80069f0:	789b      	ldrb	r3, [r3, #2]
 80069f2:	001c      	movs	r4, r3
 80069f4:	197b      	adds	r3, r7, r5
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	0018      	movs	r0, r3
 80069fa:	197b      	adds	r3, r7, r5
 80069fc:	78db      	ldrb	r3, [r3, #3]
 80069fe:	4a16      	ldr	r2, [pc, #88]	@ (8006a58 <ParseTime+0x130>)
 8006a00:	4914      	ldr	r1, [pc, #80]	@ (8006a54 <ParseTime+0x12c>)
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	9000      	str	r0, [sp, #0]
 8006a06:	0023      	movs	r3, r4
 8006a08:	2003      	movs	r0, #3
 8006a0a:	f007 ff73 	bl	800e8f4 <CreateLine>
  RTC_SetTime(&currentTime);
 8006a0e:	19bb      	adds	r3, r7, r6
 8006a10:	0018      	movs	r0, r3
 8006a12:	f000 f825 	bl	8006a60 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8006a16:	197b      	adds	r3, r7, r5
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 f847 	bl	8006aac <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006a1e:	197b      	adds	r3, r7, r5
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d101      	bne.n	8006a2a <ParseTime+0x102>
    reset_fanCleaningDone();
 8006a26:	f002 fd99 	bl	800955c <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a5c <ParseTime+0x134>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006a32:	230c      	movs	r3, #12
 8006a34:	18fa      	adds	r2, r7, r3
 8006a36:	2308      	movs	r3, #8
 8006a38:	18fb      	adds	r3, r7, r3
 8006a3a:	0011      	movs	r1, r2
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f000 fa3f 	bl	8006ec0 <makeTime>
 8006a42:	0002      	movs	r2, r0
 8006a44:	4b05      	ldr	r3, [pc, #20]	@ (8006a5c <ParseTime+0x134>)
 8006a46:	601a      	str	r2, [r3, #0]
  }
}
 8006a48:	46c0      	nop			@ (mov r8, r8)
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	b009      	add	sp, #36	@ 0x24
 8006a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a50:	080243d0 	.word	0x080243d0
 8006a54:	08024408 	.word	0x08024408
 8006a58:	0802440c 	.word	0x0802440c
 8006a5c:	20000998 	.word	0x20000998

08006a60 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006a7a:	4b09      	ldr	r3, [pc, #36]	@ (8006aa0 <RTC_SetTime+0x40>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	0018      	movs	r0, r3
 8006a84:	f00f fc9a 	bl	80163bc <HAL_RTC_SetTime>
 8006a88:	1e03      	subs	r3, r0, #0
 8006a8a:	d005      	beq.n	8006a98 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8006a8c:	4a05      	ldr	r2, [pc, #20]	@ (8006aa4 <RTC_SetTime+0x44>)
 8006a8e:	4b06      	ldr	r3, [pc, #24]	@ (8006aa8 <RTC_SetTime+0x48>)
 8006a90:	0019      	movs	r1, r3
 8006a92:	2001      	movs	r0, #1
 8006a94:	f007 ff2e 	bl	800e8f4 <CreateLine>
    }
}
 8006a98:	46c0      	nop			@ (mov r8, r8)
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b002      	add	sp, #8
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000994 	.word	0x20000994
 8006aa4:	08024440 	.word	0x08024440
 8006aa8:	0802445c 	.word	0x0802445c

08006aac <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006ab4:	4b16      	ldr	r3, [pc, #88]	@ (8006b10 <RTC_SetDate+0x64>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	0018      	movs	r0, r3
 8006abe:	f00f fd85 	bl	80165cc <HAL_RTC_SetDate>
 8006ac2:	1e03      	subs	r3, r0, #0
 8006ac4:	d005      	beq.n	8006ad2 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 8006ac6:	4a13      	ldr	r2, [pc, #76]	@ (8006b14 <RTC_SetDate+0x68>)
 8006ac8:	4b13      	ldr	r3, [pc, #76]	@ (8006b18 <RTC_SetDate+0x6c>)
 8006aca:	0019      	movs	r1, r3
 8006acc:	2001      	movs	r0, #1
 8006ace:	f007 ff11 	bl	800e8f4 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b10 <RTC_SetDate+0x64>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f010 f8bd 	bl	8016c58 <HAL_RTCEx_BKUPRead>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	4a0e      	ldr	r2, [pc, #56]	@ (8006b1c <RTC_SetDate+0x70>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d010      	beq.n	8006b08 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 8006ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8006b20 <RTC_SetDate+0x74>)
 8006ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8006b24 <RTC_SetDate+0x78>)
 8006aea:	0019      	movs	r1, r3
 8006aec:	2003      	movs	r0, #3
 8006aee:	f007 ff01 	bl	800e8f4 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 8006af2:	f00e fbe3 	bl	80152bc <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 8006af6:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <RTC_SetDate+0x64>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a08      	ldr	r2, [pc, #32]	@ (8006b1c <RTC_SetDate+0x70>)
 8006afc:	2101      	movs	r1, #1
 8006afe:	0018      	movs	r0, r3
 8006b00:	f010 f892 	bl	8016c28 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 8006b04:	f00e fbe8 	bl	80152d8 <HAL_PWR_DisableBkUpAccess>
    }
}
 8006b08:	46c0      	nop			@ (mov r8, r8)
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	20000994 	.word	0x20000994
 8006b14:	08024460 	.word	0x08024460
 8006b18:	0802445c 	.word	0x0802445c
 8006b1c:	0000bebe 	.word	0x0000bebe
 8006b20:	0802447c 	.word	0x0802447c
 8006b24:	08024408 	.word	0x08024408

08006b28 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8006b32:	250f      	movs	r5, #15
 8006b34:	197b      	adds	r3, r7, r5
 8006b36:	2201      	movs	r2, #1
 8006b38:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8006b3a:	230e      	movs	r3, #14
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8006b42:	260c      	movs	r6, #12
 8006b44:	19bc      	adds	r4, r7, r6
 8006b46:	f006 ff63 	bl	800da10 <powerCheck>
 8006b4a:	0003      	movs	r3, r0
 8006b4c:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8006b4e:	19bb      	adds	r3, r7, r6
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8006b56:	197b      	adds	r3, r7, r5
 8006b58:	781a      	ldrb	r2, [r3, #0]
 8006b5a:	197b      	adds	r3, r7, r5
 8006b5c:	3201      	adds	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006b60:	230d      	movs	r3, #13
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	e039      	b.n	8006bde <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006b6a:	4b23      	ldr	r3, [pc, #140]	@ (8006bf8 <RTC_GetTime+0xd0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	0018      	movs	r0, r3
 8006b74:	f00f fccc 	bl	8016510 <HAL_RTC_GetTime>
 8006b78:	1e03      	subs	r3, r0, #0
 8006b7a:	d005      	beq.n	8006b88 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bfc <RTC_GetTime+0xd4>)
 8006b7e:	4b20      	ldr	r3, [pc, #128]	@ (8006c00 <RTC_GetTime+0xd8>)
 8006b80:	0019      	movs	r1, r3
 8006b82:	2001      	movs	r0, #1
 8006b84:	f007 feb6 	bl	800e8f4 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006b88:	4b1b      	ldr	r3, [pc, #108]	@ (8006bf8 <RTC_GetTime+0xd0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	0018      	movs	r0, r3
 8006b92:	f00f fdaf 	bl	80166f4 <HAL_RTC_GetDate>
 8006b96:	1e03      	subs	r3, r0, #0
 8006b98:	d005      	beq.n	8006ba6 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8006b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006c04 <RTC_GetTime+0xdc>)
 8006b9c:	4b18      	ldr	r3, [pc, #96]	@ (8006c00 <RTC_GetTime+0xd8>)
 8006b9e:	0019      	movs	r1, r3
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	f007 fea7 	bl	800e8f4 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	18fb      	adds	r3, r7, r3
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d110      	bne.n	8006bd2 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	210e      	movs	r1, #14
 8006bb6:	187a      	adds	r2, r7, r1
 8006bb8:	7812      	ldrb	r2, [r2, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d018      	beq.n	8006bf0 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8006bbe:	187b      	adds	r3, r7, r1
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	701a      	strb	r2, [r3, #0]
        t++;
 8006bc6:	210f      	movs	r1, #15
 8006bc8:	187b      	adds	r3, r7, r1
 8006bca:	781a      	ldrb	r2, [r3, #0]
 8006bcc:	187b      	adds	r3, r7, r1
 8006bce:	3201      	adds	r2, #1
 8006bd0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 8006bd2:	210d      	movs	r1, #13
 8006bd4:	187b      	adds	r3, r7, r1
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	187b      	adds	r3, r7, r1
 8006bda:	3201      	adds	r2, #1
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	230d      	movs	r3, #13
 8006be0:	18fa      	adds	r2, r7, r3
 8006be2:	230f      	movs	r3, #15
 8006be4:	18fb      	adds	r3, r7, r3
 8006be6:	7812      	ldrb	r2, [r2, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d3bd      	bcc.n	8006b6a <RTC_GetTime+0x42>
 8006bee:	e000      	b.n	8006bf2 <RTC_GetTime+0xca>
      }
      else {
        return;
 8006bf0:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b005      	add	sp, #20
 8006bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bf8:	20000994 	.word	0x20000994
 8006bfc:	08024494 	.word	0x08024494
 8006c00:	0802445c 	.word	0x0802445c
 8006c04:	080244b0 	.word	0x080244b0

08006c08 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006c0e:	003a      	movs	r2, r7
 8006c10:	1d3b      	adds	r3, r7, #4
 8006c12:	0011      	movs	r1, r2
 8006c14:	0018      	movs	r0, r3
 8006c16:	f7ff ff87 	bl	8006b28 <RTC_GetTime>
  return currentDate.WeekDay;
 8006c1a:	003b      	movs	r3, r7
 8006c1c:	781b      	ldrb	r3, [r3, #0]
}
 8006c1e:	0018      	movs	r0, r3
 8006c20:	46bd      	mov	sp, r7
 8006c22:	b006      	add	sp, #24
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <getPosixTime>:

uint32_t getPosixTime(void) {
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b086      	sub	sp, #24
 8006c2a:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006c2c:	003a      	movs	r2, r7
 8006c2e:	1d3b      	adds	r3, r7, #4
 8006c30:	0011      	movs	r1, r2
 8006c32:	0018      	movs	r0, r3
 8006c34:	f7ff ff78 	bl	8006b28 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006c38:	1d3a      	adds	r2, r7, #4
 8006c3a:	003b      	movs	r3, r7
 8006c3c:	0011      	movs	r1, r2
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f000 f93e 	bl	8006ec0 <makeTime>
 8006c44:	0003      	movs	r3, r0
}
 8006c46:	0018      	movs	r0, r3
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b006      	add	sp, #24
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c52:	b08d      	sub	sp, #52	@ 0x34
 8006c54:	af04      	add	r7, sp, #16
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006c5a:	240c      	movs	r4, #12
 8006c5c:	193a      	adds	r2, r7, r4
 8006c5e:	2508      	movs	r5, #8
 8006c60:	1979      	adds	r1, r7, r5
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 f9f5 	bl	8007054 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006c6a:	002a      	movs	r2, r5
 8006c6c:	18bb      	adds	r3, r7, r2
 8006c6e:	789b      	ldrb	r3, [r3, #2]
 8006c70:	001e      	movs	r6, r3
 8006c72:	18bb      	adds	r3, r7, r2
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	469c      	mov	ip, r3
 8006c78:	18bb      	adds	r3, r7, r2
 8006c7a:	78db      	ldrb	r3, [r3, #3]
 8006c7c:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006c7e:	0021      	movs	r1, r4
 8006c80:	187b      	adds	r3, r7, r1
 8006c82:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006c84:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006c86:	187b      	adds	r3, r7, r1
 8006c88:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006c8a:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006c8c:	187b      	adds	r3, r7, r1
 8006c8e:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006c90:	4906      	ldr	r1, [pc, #24]	@ (8006cac <getUTCfromPosixTime+0x5c>)
 8006c92:	6838      	ldr	r0, [r7, #0]
 8006c94:	9303      	str	r3, [sp, #12]
 8006c96:	9502      	str	r5, [sp, #8]
 8006c98:	9401      	str	r4, [sp, #4]
 8006c9a:	9200      	str	r2, [sp, #0]
 8006c9c:	4663      	mov	r3, ip
 8006c9e:	0032      	movs	r2, r6
 8006ca0:	f019 fb80 	bl	80203a4 <siprintf>
}
 8006ca4:	46c0      	nop			@ (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b009      	add	sp, #36	@ 0x24
 8006caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cac:	080244cc 	.word	0x080244cc

08006cb0 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006cb8:	4b10      	ldr	r3, [pc, #64]	@ (8006cfc <RTC_SetWakeUpTimer+0x4c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f00f ff17 	bl	8016af0 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8006cfc <RTC_SetWakeUpTimer+0x4c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	22ff      	movs	r2, #255	@ 0xff
 8006ccc:	401a      	ands	r2, r3
 8006cce:	4b0b      	ldr	r3, [pc, #44]	@ (8006cfc <RTC_SetWakeUpTimer+0x4c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	490a      	ldr	r1, [pc, #40]	@ (8006d00 <RTC_SetWakeUpTimer+0x50>)
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006cda:	4b0a      	ldr	r3, [pc, #40]	@ (8006d04 <RTC_SetWakeUpTimer+0x54>)
 8006cdc:	2280      	movs	r2, #128	@ 0x80
 8006cde:	0352      	lsls	r2, r2, #13
 8006ce0:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006ce2:	4b06      	ldr	r3, [pc, #24]	@ (8006cfc <RTC_SetWakeUpTimer+0x4c>)
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	2204      	movs	r2, #4
 8006cec:	0019      	movs	r1, r3
 8006cee:	f00f fe27 	bl	8016940 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8006cf2:	46c0      	nop			@ (mov r8, r8)
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	b002      	add	sp, #8
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	46c0      	nop			@ (mov r8, r8)
 8006cfc:	20000994 	.word	0x20000994
 8006d00:	fffffb7f 	.word	0xfffffb7f
 8006d04:	40010400 	.word	0x40010400

08006d08 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8006d3c <Enter_Standby_Mode+0x34>)
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d40 <Enter_Standby_Mode+0x38>)
 8006d10:	0019      	movs	r1, r3
 8006d12:	2003      	movs	r0, #3
 8006d14:	f007 fdee 	bl	800e8f4 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006d18:	2064      	movs	r0, #100	@ 0x64
 8006d1a:	f008 fa39 	bl	800f190 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006d1e:	4b09      	ldr	r3, [pc, #36]	@ (8006d44 <Enter_Standby_Mode+0x3c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	0018      	movs	r0, r3
 8006d24:	f00f fee4 	bl	8016af0 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 8006d28:	f000 febc 	bl	8007aa4 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8006d2c:	f008 fa54 	bl	800f1d8 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8006d30:	f00e fb3e 	bl	80153b0 <HAL_PWR_EnterSTANDBYMode>
}
 8006d34:	46c0      	nop			@ (mov r8, r8)
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	46c0      	nop			@ (mov r8, r8)
 8006d3c:	08024520 	.word	0x08024520
 8006d40:	08024408 	.word	0x08024408
 8006d44:	20000994 	.word	0x20000994

08006d48 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	0002      	movs	r2, r0
 8006d50:	1dbb      	adds	r3, r7, #6
 8006d52:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006d54:	4b47      	ldr	r3, [pc, #284]	@ (8006e74 <Enter_Stop_Mode+0x12c>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006d5c:	f002 fbd2 	bl	8009504 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006d60:	f7ff fbc0 	bl	80064e4 <ReadBatteryVoltage>
 8006d64:	1c03      	adds	r3, r0, #0
 8006d66:	1c18      	adds	r0, r3, #0
 8006d68:	f7fc fb7c 	bl	8003464 <__aeabi_f2d>
 8006d6c:	0002      	movs	r2, r0
 8006d6e:	000b      	movs	r3, r1
 8006d70:	4841      	ldr	r0, [pc, #260]	@ (8006e78 <Enter_Stop_Mode+0x130>)
 8006d72:	4942      	ldr	r1, [pc, #264]	@ (8006e7c <Enter_Stop_Mode+0x134>)
 8006d74:	9200      	str	r2, [sp, #0]
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	0002      	movs	r2, r0
 8006d7a:	2002      	movs	r0, #2
 8006d7c:	f007 fdba 	bl	800e8f4 <CreateLine>
  powerDisplay(powerCheck());
 8006d80:	f006 fe46 	bl	800da10 <powerCheck>
 8006d84:	0003      	movs	r3, r0
 8006d86:	0018      	movs	r0, r3
 8006d88:	f006 fe5e 	bl	800da48 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006d8c:	1dbb      	adds	r3, r7, #6
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	4a3b      	ldr	r2, [pc, #236]	@ (8006e80 <Enter_Stop_Mode+0x138>)
 8006d92:	493c      	ldr	r1, [pc, #240]	@ (8006e84 <Enter_Stop_Mode+0x13c>)
 8006d94:	2003      	movs	r0, #3
 8006d96:	f007 fdad 	bl	800e8f4 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006d9a:	f7ff ff44 	bl	8006c26 <getPosixTime>
 8006d9e:	0002      	movs	r2, r0
 8006da0:	1dbb      	adds	r3, r7, #6
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	18d3      	adds	r3, r2, r3
 8006da6:	4a38      	ldr	r2, [pc, #224]	@ (8006e88 <Enter_Stop_Mode+0x140>)
 8006da8:	0011      	movs	r1, r2
 8006daa:	0018      	movs	r0, r3
 8006dac:	f7ff ff50 	bl	8006c50 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006db0:	4b35      	ldr	r3, [pc, #212]	@ (8006e88 <Enter_Stop_Mode+0x140>)
 8006db2:	4a36      	ldr	r2, [pc, #216]	@ (8006e8c <Enter_Stop_Mode+0x144>)
 8006db4:	4931      	ldr	r1, [pc, #196]	@ (8006e7c <Enter_Stop_Mode+0x134>)
 8006db6:	2002      	movs	r0, #2
 8006db8:	f007 fd9c 	bl	800e8f4 <CreateLine>
  HAL_Delay(100);
 8006dbc:	2064      	movs	r0, #100	@ 0x64
 8006dbe:	f008 f9e7 	bl	800f190 <HAL_Delay>
  HAL_SuspendTick();
 8006dc2:	f008 fa09 	bl	800f1d8 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006dc6:	1dbb      	adds	r3, r7, #6
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	0018      	movs	r0, r3
 8006dcc:	f7ff ff70 	bl	8006cb0 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	f00e fa90 	bl	80152f8 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006dd8:	f001 faf4 	bl	80083c4 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006ddc:	f008 fa0a 	bl	800f1f4 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006de0:	1dbb      	adds	r3, r7, #6
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	0018      	movs	r0, r3
 8006de6:	f002 fb0b 	bl	8009400 <sen5x_enable>
 8006dea:	1e03      	subs	r3, r0, #0
 8006dec:	d01e      	beq.n	8006e2c <Enter_Stop_Mode+0xe4>
    showTime();
 8006dee:	f7ff fc5f 	bl	80066b0 <showTime>
    set_light_on_state();
 8006df2:	f003 f809 	bl	8009e08 <set_light_on_state>
    if (!userToggle) {
 8006df6:	4b26      	ldr	r3, [pc, #152]	@ (8006e90 <Enter_Stop_Mode+0x148>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	4053      	eors	r3, r2
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d013      	beq.n	8006e2c <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006e04:	201c      	movs	r0, #28
 8006e06:	f7ff ff53 	bl	8006cb0 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e80 <Enter_Stop_Mode+0x138>)
 8006e0c:	491d      	ldr	r1, [pc, #116]	@ (8006e84 <Enter_Stop_Mode+0x13c>)
 8006e0e:	231c      	movs	r3, #28
 8006e10:	2003      	movs	r0, #3
 8006e12:	f007 fd6f 	bl	800e8f4 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006e16:	2101      	movs	r1, #1
 8006e18:	2001      	movs	r0, #1
 8006e1a:	f00e fa6d 	bl	80152f8 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006e1e:	f001 fad1 	bl	80083c4 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8006e22:	f008 f9e7 	bl	800f1f4 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 8006e26:	2000      	movs	r0, #0
 8006e28:	f002 fac8 	bl	80093bc <setsen5xReadTimer>
    }
  }
  showTime();
 8006e2c:	f7ff fc40 	bl	80066b0 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006e30:	f001 ff5e 	bl	8008cf0 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006e34:	f004 fe48 	bl	800bac8 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006e38:	2000      	movs	r0, #0
 8006e3a:	f002 fad1 	bl	80093e0 <setsen5xSamplecounter>
  setESPTimeStamp(4500);
 8006e3e:	4b15      	ldr	r3, [pc, #84]	@ (8006e94 <Enter_Stop_Mode+0x14c>)
 8006e40:	0018      	movs	r0, r3
 8006e42:	f7fc fc0f 	bl	8003664 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006e46:	2000      	movs	r0, #0
 8006e48:	f004 fe2c 	bl	800baa4 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f007 ff15 	bl	800ec7c <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006e52:	2000      	movs	r0, #0
 8006e54:	f001 ff3a 	bl	8008ccc <setMICTimeStamp>
  ESPTransmitDone = false;
 8006e58:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <Enter_Stop_Mode+0x150>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 3000;
 8006e5e:	f008 f98d 	bl	800f17c <HAL_GetTick>
 8006e62:	0003      	movs	r3, r0
 8006e64:	4a0d      	ldr	r2, [pc, #52]	@ (8006e9c <Enter_Stop_Mode+0x154>)
 8006e66:	189a      	adds	r2, r3, r2
 8006e68:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <Enter_Stop_Mode+0x158>)
 8006e6a:	601a      	str	r2, [r3, #0]
}
 8006e6c:	46c0      	nop			@ (mov r8, r8)
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	b002      	add	sp, #8
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	20000c85 	.word	0x20000c85
 8006e78:	08024544 	.word	0x08024544
 8006e7c:	0802455c 	.word	0x0802455c
 8006e80:	08024560 	.word	0x08024560
 8006e84:	08024408 	.word	0x08024408
 8006e88:	2000099c 	.word	0x2000099c
 8006e8c:	08024584 	.word	0x08024584
 8006e90:	20001c16 	.word	0x20001c16
 8006e94:	00001194 	.word	0x00001194
 8006e98:	20000554 	.word	0x20000554
 8006e9c:	00000bb8 	.word	0x00000bb8
 8006ea0:	20000be8 	.word	0x20000be8

08006ea4 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006eac:	4b03      	ldr	r3, [pc, #12]	@ (8006ebc <InitClock+0x18>)
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	601a      	str	r2, [r3, #0]
}
 8006eb2:	46c0      	nop			@ (mov r8, r8)
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	b002      	add	sp, #8
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	46c0      	nop			@ (mov r8, r8)
 8006ebc:	20000994 	.word	0x20000994

08006ec0 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	78db      	ldrb	r3, [r3, #3]
 8006ece:	001a      	movs	r2, r3
 8006ed0:	0013      	movs	r3, r2
 8006ed2:	025b      	lsls	r3, r3, #9
 8006ed4:	189b      	adds	r3, r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	189b      	adds	r3, r3, r2
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	189b      	adds	r3, r3, r2
 8006ede:	011a      	lsls	r2, r3, #4
 8006ee0:	1ad2      	subs	r2, r2, r3
 8006ee2:	01d3      	lsls	r3, r2, #7
 8006ee4:	001a      	movs	r2, r3
 8006ee6:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	e028      	b.n	8006f40 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4a53      	ldr	r2, [pc, #332]	@ (8007040 <makeTime+0x180>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	db21      	blt.n	8006f3a <makeTime+0x7a>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	4a52      	ldr	r2, [pc, #328]	@ (8007044 <makeTime+0x184>)
 8006efa:	4694      	mov	ip, r2
 8006efc:	4463      	add	r3, ip
 8006efe:	001a      	movs	r2, r3
 8006f00:	2303      	movs	r3, #3
 8006f02:	4013      	ands	r3, r2
 8006f04:	d119      	bne.n	8006f3a <makeTime+0x7a>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4a4e      	ldr	r2, [pc, #312]	@ (8007044 <makeTime+0x184>)
 8006f0a:	4694      	mov	ip, r2
 8006f0c:	4463      	add	r3, ip
 8006f0e:	2164      	movs	r1, #100	@ 0x64
 8006f10:	0018      	movs	r0, r3
 8006f12:	f7f9 fab7 	bl	8000484 <__aeabi_idivmod>
 8006f16:	1e0b      	subs	r3, r1, #0
 8006f18:	d10a      	bne.n	8006f30 <makeTime+0x70>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4a49      	ldr	r2, [pc, #292]	@ (8007044 <makeTime+0x184>)
 8006f1e:	4694      	mov	ip, r2
 8006f20:	4463      	add	r3, ip
 8006f22:	22c8      	movs	r2, #200	@ 0xc8
 8006f24:	0051      	lsls	r1, r2, #1
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7f9 faac 	bl	8000484 <__aeabi_idivmod>
 8006f2c:	1e0b      	subs	r3, r1, #0
 8006f2e:	d104      	bne.n	8006f3a <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4a45      	ldr	r2, [pc, #276]	@ (8007048 <makeTime+0x188>)
 8006f34:	4694      	mov	ip, r2
 8006f36:	4463      	add	r3, ip
 8006f38:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	78db      	ldrb	r3, [r3, #3]
 8006f44:	001a      	movs	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	dbd0      	blt.n	8006eee <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	e03c      	b.n	8006fcc <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d125      	bne.n	8006fa4 <makeTime+0xe4>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	78db      	ldrb	r3, [r3, #3]
 8006f5c:	4a39      	ldr	r2, [pc, #228]	@ (8007044 <makeTime+0x184>)
 8006f5e:	4694      	mov	ip, r2
 8006f60:	4463      	add	r3, ip
 8006f62:	001a      	movs	r2, r3
 8006f64:	2303      	movs	r3, #3
 8006f66:	4013      	ands	r3, r2
 8006f68:	d11c      	bne.n	8006fa4 <makeTime+0xe4>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	78db      	ldrb	r3, [r3, #3]
 8006f6e:	4a35      	ldr	r2, [pc, #212]	@ (8007044 <makeTime+0x184>)
 8006f70:	4694      	mov	ip, r2
 8006f72:	4463      	add	r3, ip
 8006f74:	2164      	movs	r1, #100	@ 0x64
 8006f76:	0018      	movs	r0, r3
 8006f78:	f7f9 fa84 	bl	8000484 <__aeabi_idivmod>
 8006f7c:	1e0b      	subs	r3, r1, #0
 8006f7e:	d10b      	bne.n	8006f98 <makeTime+0xd8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	78db      	ldrb	r3, [r3, #3]
 8006f84:	4a2f      	ldr	r2, [pc, #188]	@ (8007044 <makeTime+0x184>)
 8006f86:	4694      	mov	ip, r2
 8006f88:	4463      	add	r3, ip
 8006f8a:	22c8      	movs	r2, #200	@ 0xc8
 8006f8c:	0051      	lsls	r1, r2, #1
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f7f9 fa78 	bl	8000484 <__aeabi_idivmod>
 8006f94:	1e0b      	subs	r3, r1, #0
 8006f96:	d105      	bne.n	8006fa4 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800704c <makeTime+0x18c>)
 8006f9c:	4694      	mov	ip, r2
 8006f9e:	4463      	add	r3, ip
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	e010      	b.n	8006fc6 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	4a29      	ldr	r2, [pc, #164]	@ (8007050 <makeTime+0x190>)
 8006faa:	5cd3      	ldrb	r3, [r2, r3]
 8006fac:	001a      	movs	r2, r3
 8006fae:	0013      	movs	r3, r2
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	189b      	adds	r3, r3, r2
 8006fb4:	011a      	lsls	r2, r3, #4
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	0113      	lsls	r3, r2, #4
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	01db      	lsls	r3, r3, #7
 8006fbe:	001a      	movs	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	189b      	adds	r3, r3, r2
 8006fc4:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	785b      	ldrb	r3, [r3, #1]
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	dbbc      	blt.n	8006f52 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	789b      	ldrb	r3, [r3, #2]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	001a      	movs	r2, r3
 8006fe0:	0013      	movs	r3, r2
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	189b      	adds	r3, r3, r2
 8006fe6:	011a      	lsls	r2, r3, #4
 8006fe8:	1ad2      	subs	r2, r2, r3
 8006fea:	0113      	lsls	r3, r2, #4
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	01db      	lsls	r3, r3, #7
 8006ff0:	001a      	movs	r2, r3
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	189b      	adds	r3, r3, r2
 8006ff6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	0013      	movs	r3, r2
 8007000:	011b      	lsls	r3, r3, #4
 8007002:	1a9b      	subs	r3, r3, r2
 8007004:	011a      	lsls	r2, r3, #4
 8007006:	1ad2      	subs	r2, r2, r3
 8007008:	0113      	lsls	r3, r2, #4
 800700a:	001a      	movs	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	189b      	adds	r3, r3, r2
 8007010:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	001a      	movs	r2, r3
 8007018:	0013      	movs	r3, r2
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	1a9b      	subs	r3, r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	001a      	movs	r2, r3
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	189b      	adds	r3, r3, r2
 8007026:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	789b      	ldrb	r3, [r3, #2]
 800702c:	001a      	movs	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	189b      	adds	r3, r3, r2
 8007032:	60bb      	str	r3, [r7, #8]
  return seconds;
 8007034:	68bb      	ldr	r3, [r7, #8]
}
 8007036:	0018      	movs	r0, r3
 8007038:	46bd      	mov	sp, r7
 800703a:	b004      	add	sp, #16
 800703c:	bd80      	pop	{r7, pc}
 800703e:	46c0      	nop			@ (mov r8, r8)
 8007040:	fffff84f 	.word	0xfffff84f
 8007044:	000007b2 	.word	0x000007b2
 8007048:	00015180 	.word	0x00015180
 800704c:	00263b80 	.word	0x00263b80
 8007050:	08025aec 	.word	0x08025aec

08007054 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8007054:	b590      	push	{r4, r7, lr}
 8007056:	b089      	sub	sp, #36	@ 0x24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	213c      	movs	r1, #60	@ 0x3c
 8007068:	0018      	movs	r0, r3
 800706a:	f7f9 f921 	bl	80002b0 <__aeabi_uidivmod>
 800706e:	000b      	movs	r3, r1
 8007070:	b2da      	uxtb	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	213c      	movs	r1, #60	@ 0x3c
 800707a:	0018      	movs	r0, r3
 800707c:	f7f9 f892 	bl	80001a4 <__udivsi3>
 8007080:	0003      	movs	r3, r0
 8007082:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	213c      	movs	r1, #60	@ 0x3c
 8007088:	0018      	movs	r0, r3
 800708a:	f7f9 f911 	bl	80002b0 <__aeabi_uidivmod>
 800708e:	000b      	movs	r3, r1
 8007090:	b2da      	uxtb	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	213c      	movs	r1, #60	@ 0x3c
 800709a:	0018      	movs	r0, r3
 800709c:	f7f9 f882 	bl	80001a4 <__udivsi3>
 80070a0:	0003      	movs	r3, r0
 80070a2:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2118      	movs	r1, #24
 80070a8:	0018      	movs	r0, r3
 80070aa:	f7f9 f901 	bl	80002b0 <__aeabi_uidivmod>
 80070ae:	000b      	movs	r3, r1
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2118      	movs	r1, #24
 80070ba:	0018      	movs	r0, r3
 80070bc:	f7f9 f872 	bl	80001a4 <__udivsi3>
 80070c0:	0003      	movs	r3, r0
 80070c2:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	2107      	movs	r1, #7
 80070ca:	0018      	movs	r0, r3
 80070cc:	f7f9 f8f0 	bl	80002b0 <__aeabi_uidivmod>
 80070d0:	000b      	movs	r3, r1
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	3301      	adds	r3, #1
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	701a      	strb	r2, [r3, #0]
  year = 0;
 80070dc:	231f      	movs	r3, #31
 80070de:	18fb      	adds	r3, r7, r3
 80070e0:	2200      	movs	r2, #0
 80070e2:	701a      	strb	r2, [r3, #0]
  days = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80070e8:	e005      	b.n	80070f6 <breakPosixTime+0xa2>
    year++;
 80070ea:	211f      	movs	r1, #31
 80070ec:	187b      	adds	r3, r7, r1
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	187b      	adds	r3, r7, r1
 80070f2:	3201      	adds	r2, #1
 80070f4:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 80070f6:	241f      	movs	r4, #31
 80070f8:	193b      	adds	r3, r7, r4
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	4a64      	ldr	r2, [pc, #400]	@ (8007290 <breakPosixTime+0x23c>)
 80070fe:	4694      	mov	ip, r2
 8007100:	4463      	add	r3, ip
 8007102:	001a      	movs	r2, r3
 8007104:	2303      	movs	r3, #3
 8007106:	4013      	ands	r3, r2
 8007108:	d119      	bne.n	800713e <breakPosixTime+0xea>
 800710a:	193b      	adds	r3, r7, r4
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	4a60      	ldr	r2, [pc, #384]	@ (8007290 <breakPosixTime+0x23c>)
 8007110:	4694      	mov	ip, r2
 8007112:	4463      	add	r3, ip
 8007114:	2164      	movs	r1, #100	@ 0x64
 8007116:	0018      	movs	r0, r3
 8007118:	f7f9 f9b4 	bl	8000484 <__aeabi_idivmod>
 800711c:	1e0b      	subs	r3, r1, #0
 800711e:	d10b      	bne.n	8007138 <breakPosixTime+0xe4>
 8007120:	193b      	adds	r3, r7, r4
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	4a5a      	ldr	r2, [pc, #360]	@ (8007290 <breakPosixTime+0x23c>)
 8007126:	4694      	mov	ip, r2
 8007128:	4463      	add	r3, ip
 800712a:	22c8      	movs	r2, #200	@ 0xc8
 800712c:	0051      	lsls	r1, r2, #1
 800712e:	0018      	movs	r0, r3
 8007130:	f7f9 f9a8 	bl	8000484 <__aeabi_idivmod>
 8007134:	1e0b      	subs	r3, r1, #0
 8007136:	d102      	bne.n	800713e <breakPosixTime+0xea>
 8007138:	23b7      	movs	r3, #183	@ 0xb7
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	e001      	b.n	8007142 <breakPosixTime+0xee>
 800713e:	236e      	movs	r3, #110	@ 0x6e
 8007140:	33ff      	adds	r3, #255	@ 0xff
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	18d3      	adds	r3, r2, r3
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	429a      	cmp	r2, r3
 800714e:	d9cc      	bls.n	80070ea <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	241f      	movs	r4, #31
 8007154:	193a      	adds	r2, r7, r4
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800715a:	193b      	adds	r3, r7, r4
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	4a4c      	ldr	r2, [pc, #304]	@ (8007290 <breakPosixTime+0x23c>)
 8007160:	4694      	mov	ip, r2
 8007162:	4463      	add	r3, ip
 8007164:	001a      	movs	r2, r3
 8007166:	2303      	movs	r3, #3
 8007168:	4013      	ands	r3, r2
 800716a:	d119      	bne.n	80071a0 <breakPosixTime+0x14c>
 800716c:	193b      	adds	r3, r7, r4
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	4a47      	ldr	r2, [pc, #284]	@ (8007290 <breakPosixTime+0x23c>)
 8007172:	4694      	mov	ip, r2
 8007174:	4463      	add	r3, ip
 8007176:	2164      	movs	r1, #100	@ 0x64
 8007178:	0018      	movs	r0, r3
 800717a:	f7f9 f983 	bl	8000484 <__aeabi_idivmod>
 800717e:	1e0b      	subs	r3, r1, #0
 8007180:	d10b      	bne.n	800719a <breakPosixTime+0x146>
 8007182:	193b      	adds	r3, r7, r4
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	4a42      	ldr	r2, [pc, #264]	@ (8007290 <breakPosixTime+0x23c>)
 8007188:	4694      	mov	ip, r2
 800718a:	4463      	add	r3, ip
 800718c:	22c8      	movs	r2, #200	@ 0xc8
 800718e:	0051      	lsls	r1, r2, #1
 8007190:	0018      	movs	r0, r3
 8007192:	f7f9 f977 	bl	8000484 <__aeabi_idivmod>
 8007196:	1e0b      	subs	r3, r1, #0
 8007198:	d102      	bne.n	80071a0 <breakPosixTime+0x14c>
 800719a:	23b7      	movs	r3, #183	@ 0xb7
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	e001      	b.n	80071a4 <breakPosixTime+0x150>
 80071a0:	236e      	movs	r3, #110	@ 0x6e
 80071a2:	33ff      	adds	r3, #255	@ 0xff
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	61bb      	str	r3, [r7, #24]

  days=0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
  month=0;
 80071b6:	211e      	movs	r1, #30
 80071b8:	187b      	adds	r3, r7, r1
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 80071be:	231d      	movs	r3, #29
 80071c0:	18fb      	adds	r3, r7, r3
 80071c2:	2200      	movs	r2, #0
 80071c4:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 80071c6:	187b      	adds	r3, r7, r1
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	e048      	b.n	8007260 <breakPosixTime+0x20c>
    if (month==1) { // february
 80071ce:	231e      	movs	r3, #30
 80071d0:	18fb      	adds	r3, r7, r3
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d12a      	bne.n	800722e <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 80071d8:	241f      	movs	r4, #31
 80071da:	193b      	adds	r3, r7, r4
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	4a2c      	ldr	r2, [pc, #176]	@ (8007290 <breakPosixTime+0x23c>)
 80071e0:	4694      	mov	ip, r2
 80071e2:	4463      	add	r3, ip
 80071e4:	001a      	movs	r2, r3
 80071e6:	2303      	movs	r3, #3
 80071e8:	4013      	ands	r3, r2
 80071ea:	d11b      	bne.n	8007224 <breakPosixTime+0x1d0>
 80071ec:	193b      	adds	r3, r7, r4
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	4a27      	ldr	r2, [pc, #156]	@ (8007290 <breakPosixTime+0x23c>)
 80071f2:	4694      	mov	ip, r2
 80071f4:	4463      	add	r3, ip
 80071f6:	2164      	movs	r1, #100	@ 0x64
 80071f8:	0018      	movs	r0, r3
 80071fa:	f7f9 f943 	bl	8000484 <__aeabi_idivmod>
 80071fe:	1e0b      	subs	r3, r1, #0
 8007200:	d10b      	bne.n	800721a <breakPosixTime+0x1c6>
 8007202:	193b      	adds	r3, r7, r4
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	4a22      	ldr	r2, [pc, #136]	@ (8007290 <breakPosixTime+0x23c>)
 8007208:	4694      	mov	ip, r2
 800720a:	4463      	add	r3, ip
 800720c:	22c8      	movs	r2, #200	@ 0xc8
 800720e:	0051      	lsls	r1, r2, #1
 8007210:	0018      	movs	r0, r3
 8007212:	f7f9 f937 	bl	8000484 <__aeabi_idivmod>
 8007216:	1e0b      	subs	r3, r1, #0
 8007218:	d104      	bne.n	8007224 <breakPosixTime+0x1d0>
        monthLength=29;
 800721a:	231d      	movs	r3, #29
 800721c:	18fb      	adds	r3, r7, r3
 800721e:	221d      	movs	r2, #29
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	e00c      	b.n	800723e <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8007224:	231d      	movs	r3, #29
 8007226:	18fb      	adds	r3, r7, r3
 8007228:	221c      	movs	r2, #28
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	e007      	b.n	800723e <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800722e:	231e      	movs	r3, #30
 8007230:	18fb      	adds	r3, r7, r3
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	231d      	movs	r3, #29
 8007236:	18fb      	adds	r3, r7, r3
 8007238:	4916      	ldr	r1, [pc, #88]	@ (8007294 <breakPosixTime+0x240>)
 800723a:	5c8a      	ldrb	r2, [r1, r2]
 800723c:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800723e:	211d      	movs	r1, #29
 8007240:	187b      	adds	r3, r7, r1
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	429a      	cmp	r2, r3
 8007248:	d310      	bcc.n	800726c <breakPosixTime+0x218>
      time -= monthLength;
 800724a:	187b      	adds	r3, r7, r1
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8007254:	211e      	movs	r1, #30
 8007256:	187b      	adds	r3, r7, r1
 8007258:	781a      	ldrb	r2, [r3, #0]
 800725a:	187b      	adds	r3, r7, r1
 800725c:	3201      	adds	r2, #1
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	231e      	movs	r3, #30
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b0b      	cmp	r3, #11
 8007268:	d9b1      	bls.n	80071ce <breakPosixTime+0x17a>
 800726a:	e000      	b.n	800726e <breakPosixTime+0x21a>
    } else {
        break;
 800726c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800726e:	231e      	movs	r3, #30
 8007270:	18fb      	adds	r3, r7, r3
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	3301      	adds	r3, #1
 8007276:	b2da      	uxtb	r2, r3
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	3301      	adds	r3, #1
 8007282:	b2da      	uxtb	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	709a      	strb	r2, [r3, #2]
}
 8007288:	46c0      	nop			@ (mov r8, r8)
 800728a:	46bd      	mov	sp, r7
 800728c:	b009      	add	sp, #36	@ 0x24
 800728e:	bd90      	pop	{r4, r7, pc}
 8007290:	000007b2 	.word	0x000007b2
 8007294:	08025aec 	.word	0x08025aec

08007298 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800729e:	003b      	movs	r3, r7
 80072a0:	0018      	movs	r0, r3
 80072a2:	2308      	movs	r3, #8
 80072a4:	001a      	movs	r2, r3
 80072a6:	2100      	movs	r1, #0
 80072a8:	f019 f9c0 	bl	802062c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80072ac:	4b30      	ldr	r3, [pc, #192]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072ae:	4a31      	ldr	r2, [pc, #196]	@ (8007374 <MX_ADC_Init+0xdc>)
 80072b0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80072b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80072b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072ba:	22c0      	movs	r2, #192	@ 0xc0
 80072bc:	0612      	lsls	r2, r2, #24
 80072be:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80072c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80072c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80072cc:	4b28      	ldr	r3, [pc, #160]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072ce:	2201      	movs	r2, #1
 80072d0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80072d2:	4b27      	ldr	r3, [pc, #156]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80072d8:	4b25      	ldr	r3, [pc, #148]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072da:	2220      	movs	r2, #32
 80072dc:	2100      	movs	r1, #0
 80072de:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80072e0:	4b23      	ldr	r3, [pc, #140]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072e2:	2221      	movs	r2, #33	@ 0x21
 80072e4:	2101      	movs	r1, #1
 80072e6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80072e8:	4b21      	ldr	r3, [pc, #132]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80072ee:	4b20      	ldr	r3, [pc, #128]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072f0:	22c2      	movs	r2, #194	@ 0xc2
 80072f2:	32ff      	adds	r2, #255	@ 0xff
 80072f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80072f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007370 <MX_ADC_Init+0xd8>)
 80072f8:	222c      	movs	r2, #44	@ 0x2c
 80072fa:	2100      	movs	r1, #0
 80072fc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80072fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007370 <MX_ADC_Init+0xd8>)
 8007300:	2204      	movs	r2, #4
 8007302:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007304:	4b1a      	ldr	r3, [pc, #104]	@ (8007370 <MX_ADC_Init+0xd8>)
 8007306:	2200      	movs	r2, #0
 8007308:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800730a:	4b19      	ldr	r3, [pc, #100]	@ (8007370 <MX_ADC_Init+0xd8>)
 800730c:	2200      	movs	r2, #0
 800730e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8007310:	4b17      	ldr	r3, [pc, #92]	@ (8007370 <MX_ADC_Init+0xd8>)
 8007312:	2200      	movs	r2, #0
 8007314:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8007316:	4b16      	ldr	r3, [pc, #88]	@ (8007370 <MX_ADC_Init+0xd8>)
 8007318:	2200      	movs	r2, #0
 800731a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800731c:	4b14      	ldr	r3, [pc, #80]	@ (8007370 <MX_ADC_Init+0xd8>)
 800731e:	0018      	movs	r0, r3
 8007320:	f007 ff94 	bl	800f24c <HAL_ADC_Init>
 8007324:	1e03      	subs	r3, r0, #0
 8007326:	d001      	beq.n	800732c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007328:	f001 f992 	bl	8008650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800732c:	003b      	movs	r3, r7
 800732e:	4a12      	ldr	r2, [pc, #72]	@ (8007378 <MX_ADC_Init+0xe0>)
 8007330:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8007332:	003b      	movs	r3, r7
 8007334:	2280      	movs	r2, #128	@ 0x80
 8007336:	0152      	lsls	r2, r2, #5
 8007338:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800733a:	003a      	movs	r2, r7
 800733c:	4b0c      	ldr	r3, [pc, #48]	@ (8007370 <MX_ADC_Init+0xd8>)
 800733e:	0011      	movs	r1, r2
 8007340:	0018      	movs	r0, r3
 8007342:	f008 f9f3 	bl	800f72c <HAL_ADC_ConfigChannel>
 8007346:	1e03      	subs	r3, r0, #0
 8007348:	d001      	beq.n	800734e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800734a:	f001 f981 	bl	8008650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800734e:	003b      	movs	r3, r7
 8007350:	4a0a      	ldr	r2, [pc, #40]	@ (800737c <MX_ADC_Init+0xe4>)
 8007352:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007354:	003a      	movs	r2, r7
 8007356:	4b06      	ldr	r3, [pc, #24]	@ (8007370 <MX_ADC_Init+0xd8>)
 8007358:	0011      	movs	r1, r2
 800735a:	0018      	movs	r0, r3
 800735c:	f008 f9e6 	bl	800f72c <HAL_ADC_ConfigChannel>
 8007360:	1e03      	subs	r3, r0, #0
 8007362:	d001      	beq.n	8007368 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8007364:	f001 f974 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007368:	46c0      	nop			@ (mov r8, r8)
 800736a:	46bd      	mov	sp, r7
 800736c:	b002      	add	sp, #8
 800736e:	bd80      	pop	{r7, pc}
 8007370:	200009b4 	.word	0x200009b4
 8007374:	40012400 	.word	0x40012400
 8007378:	38004000 	.word	0x38004000
 800737c:	3c008000 	.word	0x3c008000

08007380 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007380:	b590      	push	{r4, r7, lr}
 8007382:	b089      	sub	sp, #36	@ 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007388:	240c      	movs	r4, #12
 800738a:	193b      	adds	r3, r7, r4
 800738c:	0018      	movs	r0, r3
 800738e:	2314      	movs	r3, #20
 8007390:	001a      	movs	r2, r3
 8007392:	2100      	movs	r1, #0
 8007394:	f019 f94a 	bl	802062c <memset>
  if(adcHandle->Instance==ADC1)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a14      	ldr	r2, [pc, #80]	@ (80073f0 <HAL_ADC_MspInit+0x70>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d121      	bne.n	80073e6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80073a2:	4b14      	ldr	r3, [pc, #80]	@ (80073f4 <HAL_ADC_MspInit+0x74>)
 80073a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073a6:	4b13      	ldr	r3, [pc, #76]	@ (80073f4 <HAL_ADC_MspInit+0x74>)
 80073a8:	2180      	movs	r1, #128	@ 0x80
 80073aa:	0089      	lsls	r1, r1, #2
 80073ac:	430a      	orrs	r2, r1
 80073ae:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073b0:	4b10      	ldr	r3, [pc, #64]	@ (80073f4 <HAL_ADC_MspInit+0x74>)
 80073b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b4:	4b0f      	ldr	r3, [pc, #60]	@ (80073f4 <HAL_ADC_MspInit+0x74>)
 80073b6:	2104      	movs	r1, #4
 80073b8:	430a      	orrs	r2, r1
 80073ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80073bc:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <HAL_ADC_MspInit+0x74>)
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	2204      	movs	r2, #4
 80073c2:	4013      	ands	r3, r2
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80073c8:	193b      	adds	r3, r7, r4
 80073ca:	2230      	movs	r2, #48	@ 0x30
 80073cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073ce:	193b      	adds	r3, r7, r4
 80073d0:	2203      	movs	r2, #3
 80073d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d4:	193b      	adds	r3, r7, r4
 80073d6:	2200      	movs	r2, #0
 80073d8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073da:	193b      	adds	r3, r7, r4
 80073dc:	4a06      	ldr	r2, [pc, #24]	@ (80073f8 <HAL_ADC_MspInit+0x78>)
 80073de:	0019      	movs	r1, r3
 80073e0:	0010      	movs	r0, r2
 80073e2:	f008 ffc1 	bl	8010368 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80073e6:	46c0      	nop			@ (mov r8, r8)
 80073e8:	46bd      	mov	sp, r7
 80073ea:	b009      	add	sp, #36	@ 0x24
 80073ec:	bd90      	pop	{r4, r7, pc}
 80073ee:	46c0      	nop			@ (mov r8, r8)
 80073f0:	40012400 	.word	0x40012400
 80073f4:	40021000 	.word	0x40021000
 80073f8:	50000800 	.word	0x50000800

080073fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007402:	4b10      	ldr	r3, [pc, #64]	@ (8007444 <MX_DMA_Init+0x48>)
 8007404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007406:	4b0f      	ldr	r3, [pc, #60]	@ (8007444 <MX_DMA_Init+0x48>)
 8007408:	2101      	movs	r1, #1
 800740a:	430a      	orrs	r2, r1
 800740c:	631a      	str	r2, [r3, #48]	@ 0x30
 800740e:	4b0d      	ldr	r3, [pc, #52]	@ (8007444 <MX_DMA_Init+0x48>)
 8007410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007412:	2201      	movs	r2, #1
 8007414:	4013      	ands	r3, r2
 8007416:	607b      	str	r3, [r7, #4]
 8007418:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800741a:	2200      	movs	r2, #0
 800741c:	2100      	movs	r1, #0
 800741e:	200a      	movs	r0, #10
 8007420:	f008 fb50 	bl	800fac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007424:	200a      	movs	r0, #10
 8007426:	f008 fb62 	bl	800faee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800742a:	2200      	movs	r2, #0
 800742c:	2103      	movs	r1, #3
 800742e:	200b      	movs	r0, #11
 8007430:	f008 fb48 	bl	800fac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007434:	200b      	movs	r0, #11
 8007436:	f008 fb5a 	bl	800faee <HAL_NVIC_EnableIRQ>

}
 800743a:	46c0      	nop			@ (mov r8, r8)
 800743c:	46bd      	mov	sp, r7
 800743e:	b002      	add	sp, #8
 8007440:	bd80      	pop	{r7, pc}
 8007442:	46c0      	nop			@ (mov r8, r8)
 8007444:	40021000 	.word	0x40021000

08007448 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8007448:	b590      	push	{r4, r7, lr}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	1dbb      	adds	r3, r7, #6
 8007454:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 8007456:	4b17      	ldr	r3, [pc, #92]	@ (80074b4 <WriteUint8ArrayEeprom+0x6c>)
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800745c:	f008 fec4 	bl	80101e8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8007460:	2316      	movs	r3, #22
 8007462:	18fb      	adds	r3, r7, r3
 8007464:	2200      	movs	r2, #0
 8007466:	801a      	strh	r2, [r3, #0]
 8007468:	e015      	b.n	8007496 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800746a:	4b12      	ldr	r3, [pc, #72]	@ (80074b4 <WriteUint8ArrayEeprom+0x6c>)
 800746c:	6819      	ldr	r1, [r3, #0]
 800746e:	2416      	movs	r4, #22
 8007470:	193b      	adds	r3, r7, r4
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	18d3      	adds	r3, r2, r3
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	001a      	movs	r2, r3
 800747c:	2000      	movs	r0, #0
 800747e:	f008 ff1b 	bl	80102b8 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8007482:	4b0c      	ldr	r3, [pc, #48]	@ (80074b4 <WriteUint8ArrayEeprom+0x6c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	4b0a      	ldr	r3, [pc, #40]	@ (80074b4 <WriteUint8ArrayEeprom+0x6c>)
 800748a:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800748c:	193b      	adds	r3, r7, r4
 800748e:	881a      	ldrh	r2, [r3, #0]
 8007490:	193b      	adds	r3, r7, r4
 8007492:	3201      	adds	r2, #1
 8007494:	801a      	strh	r2, [r3, #0]
 8007496:	2316      	movs	r3, #22
 8007498:	18fa      	adds	r2, r7, r3
 800749a:	1dbb      	adds	r3, r7, #6
 800749c:	8812      	ldrh	r2, [r2, #0]
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d3e2      	bcc.n	800746a <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80074a4:	f008 fece 	bl	8010244 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80074a8:	4b02      	ldr	r3, [pc, #8]	@ (80074b4 <WriteUint8ArrayEeprom+0x6c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
}
 80074ac:	0018      	movs	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b007      	add	sp, #28
 80074b2:	bd90      	pop	{r4, r7, pc}
 80074b4:	20000a10 	.word	0x20000a10

080074b8 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	0019      	movs	r1, r3
 80074c4:	1dbb      	adds	r3, r7, #6
 80074c6:	801a      	strh	r2, [r3, #0]
 80074c8:	1d3b      	adds	r3, r7, #4
 80074ca:	1c0a      	adds	r2, r1, #0
 80074cc:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80074ce:	1dba      	adds	r2, r7, #6
 80074d0:	1d3b      	adds	r3, r7, #4
 80074d2:	8812      	ldrh	r2, [r2, #0]
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d806      	bhi.n	80074e8 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80074da:	1dbb      	adds	r3, r7, #6
 80074dc:	881a      	ldrh	r2, [r3, #0]
 80074de:	68b9      	ldr	r1, [r7, #8]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	0018      	movs	r0, r3
 80074e4:	f7ff ffb0 	bl	8007448 <WriteUint8ArrayEeprom>
    }
}
 80074e8:	46c0      	nop			@ (mov r8, r8)
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b004      	add	sp, #16
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	1dbb      	adds	r3, r7, #6
 80074fc:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 80074fe:	2316      	movs	r3, #22
 8007500:	18fb      	adds	r3, r7, r3
 8007502:	2200      	movs	r2, #0
 8007504:	801a      	strh	r2, [r3, #0]
 8007506:	e010      	b.n	800752a <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8007508:	2016      	movs	r0, #22
 800750a:	183b      	adds	r3, r7, r0
 800750c:	881a      	ldrh	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	18d3      	adds	r3, r2, r3
 8007512:	0019      	movs	r1, r3
 8007514:	183b      	adds	r3, r7, r0
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	18d3      	adds	r3, r2, r3
 800751c:	780a      	ldrb	r2, [r1, #0]
 800751e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8007520:	183b      	adds	r3, r7, r0
 8007522:	881a      	ldrh	r2, [r3, #0]
 8007524:	183b      	adds	r3, r7, r0
 8007526:	3201      	adds	r2, #1
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	2316      	movs	r3, #22
 800752c:	18fa      	adds	r2, r7, r3
 800752e:	1dbb      	adds	r3, r7, #6
 8007530:	8812      	ldrh	r2, [r2, #0]
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d3e7      	bcc.n	8007508 <ReadUint8ArrayEEprom+0x18>
    }
}
 8007538:	46c0      	nop			@ (mov r8, r8)
 800753a:	46c0      	nop			@ (mov r8, r8)
 800753c:	46bd      	mov	sp, r7
 800753e:	b006      	add	sp, #24
 8007540:	bd80      	pop	{r7, pc}

08007542 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8007542:	b590      	push	{r4, r7, lr}
 8007544:	b085      	sub	sp, #20
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	000a      	movs	r2, r1
 800754c:	1cbb      	adds	r3, r7, #2
 800754e:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8007550:	f008 fe4a 	bl	80101e8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 8007554:	230e      	movs	r3, #14
 8007556:	18fb      	adds	r3, r7, r3
 8007558:	2200      	movs	r2, #0
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	e00c      	b.n	8007578 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800755e:	240e      	movs	r4, #14
 8007560:	193b      	adds	r3, r7, r4
 8007562:	881a      	ldrh	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	18d3      	adds	r3, r2, r3
 8007568:	0018      	movs	r0, r3
 800756a:	f008 fe79 	bl	8010260 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800756e:	193b      	adds	r3, r7, r4
 8007570:	193a      	adds	r2, r7, r4
 8007572:	8812      	ldrh	r2, [r2, #0]
 8007574:	3204      	adds	r2, #4
 8007576:	801a      	strh	r2, [r3, #0]
 8007578:	230e      	movs	r3, #14
 800757a:	18fa      	adds	r2, r7, r3
 800757c:	1cbb      	adds	r3, r7, #2
 800757e:	8812      	ldrh	r2, [r2, #0]
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d3eb      	bcc.n	800755e <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 8007586:	f008 fe5d 	bl	8010244 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800758a:	46c0      	nop			@ (mov r8, r8)
 800758c:	46bd      	mov	sp, r7
 800758e:	b005      	add	sp, #20
 8007590:	bd90      	pop	{r4, r7, pc}
	...

08007594 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80075a4:	d901      	bls.n	80075aa <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80075a6:	237f      	movs	r3, #127	@ 0x7f
 80075a8:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80075aa:	2017      	movs	r0, #23
 80075ac:	183b      	adds	r3, r7, r0
 80075ae:	490d      	ldr	r1, [pc, #52]	@ (80075e4 <accessLUT10log10+0x50>)
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	188a      	adds	r2, r1, r2
 80075b4:	7812      	ldrb	r2, [r2, #0]
 80075b6:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80075b8:	0001      	movs	r1, r0
 80075ba:	187b      	adds	r3, r7, r1
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2206      	movs	r2, #6
 80075c0:	4113      	asrs	r3, r2
 80075c2:	001a      	movs	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 80075c8:	187b      	adds	r3, r7, r1
 80075ca:	781a      	ldrb	r2, [r3, #0]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2106      	movs	r1, #6
 80075d2:	408b      	lsls	r3, r1
 80075d4:	1ad2      	subs	r2, r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	601a      	str	r2, [r3, #0]
}
 80075da:	46c0      	nop			@ (mov r8, r8)
 80075dc:	46bd      	mov	sp, r7
 80075de:	b006      	add	sp, #24
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	46c0      	nop			@ (mov r8, r8)
 80075e4:	08025af8 	.word	0x08025af8

080075e8 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80075e8:	b5b0      	push	{r4, r5, r7, lr}
 80075ea:	b090      	sub	sp, #64	@ 0x40
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6138      	str	r0, [r7, #16]
 80075f0:	6179      	str	r1, [r7, #20]
 80075f2:	60fa      	str	r2, [r7, #12]
 80075f4:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80075f6:	2308      	movs	r3, #8
 80075f8:	001a      	movs	r2, r3
 80075fa:	3a20      	subs	r2, #32
 80075fc:	2a00      	cmp	r2, #0
 80075fe:	db03      	blt.n	8007608 <efficient10log10+0x20>
 8007600:	2101      	movs	r1, #1
 8007602:	4091      	lsls	r1, r2
 8007604:	000d      	movs	r5, r1
 8007606:	e008      	b.n	800761a <efficient10log10+0x32>
 8007608:	2220      	movs	r2, #32
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	2101      	movs	r1, #1
 800760e:	40d1      	lsrs	r1, r2
 8007610:	000a      	movs	r2, r1
 8007612:	2100      	movs	r1, #0
 8007614:	4099      	lsls	r1, r3
 8007616:	000d      	movs	r5, r1
 8007618:	4315      	orrs	r5, r2
 800761a:	2201      	movs	r2, #1
 800761c:	409a      	lsls	r2, r3
 800761e:	0014      	movs	r4, r2
 8007620:	2201      	movs	r2, #1
 8007622:	4252      	negs	r2, r2
 8007624:	17d3      	asrs	r3, r2, #31
 8007626:	1912      	adds	r2, r2, r4
 8007628:	416b      	adcs	r3, r5
 800762a:	633a      	str	r2, [r7, #48]	@ 0x30
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800762e:	2336      	movs	r3, #54	@ 0x36
 8007630:	2208      	movs	r2, #8
 8007632:	189b      	adds	r3, r3, r2
 8007634:	19db      	adds	r3, r3, r7
 8007636:	2200      	movs	r2, #0
 8007638:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800763a:	e017      	b.n	800766c <efficient10log10+0x84>
    {
        P = P >> 1;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	07db      	lsls	r3, r3, #31
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	0852      	lsrs	r2, r2, #1
 8007644:	603a      	str	r2, [r7, #0]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	431a      	orrs	r2, r3
 800764a:	603a      	str	r2, [r7, #0]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	085b      	lsrs	r3, r3, #1
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	687c      	ldr	r4, [r7, #4]
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	617c      	str	r4, [r7, #20]
        bShift++;
 800765a:	2136      	movs	r1, #54	@ 0x36
 800765c:	2008      	movs	r0, #8
 800765e:	180b      	adds	r3, r1, r0
 8007660:	19db      	adds	r3, r3, r7
 8007662:	881a      	ldrh	r2, [r3, #0]
 8007664:	180b      	adds	r3, r1, r0
 8007666:	19db      	adds	r3, r3, r7
 8007668:	3201      	adds	r2, #1
 800766a:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007670:	429a      	cmp	r2, r3
 8007672:	d8e3      	bhi.n	800763c <efficient10log10+0x54>
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007678:	429a      	cmp	r2, r3
 800767a:	d103      	bne.n	8007684 <efficient10log10+0x9c>
 800767c:	693a      	ldr	r2, [r7, #16]
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	429a      	cmp	r2, r3
 8007682:	d8db      	bhi.n	800763c <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	2308      	movs	r3, #8
 8007688:	3b01      	subs	r3, #1
 800768a:	2101      	movs	r1, #1
 800768c:	4099      	lsls	r1, r3
 800768e:	000b      	movs	r3, r1
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800769c:	231c      	movs	r3, #28
 800769e:	2408      	movs	r4, #8
 80076a0:	191b      	adds	r3, r3, r4
 80076a2:	19da      	adds	r2, r3, r7
 80076a4:	2320      	movs	r3, #32
 80076a6:	191b      	adds	r3, r3, r4
 80076a8:	19d9      	adds	r1, r3, r7
 80076aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ac:	0018      	movs	r0, r3
 80076ae:	f7ff ff71 	bl	8007594 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80076b2:	2215      	movs	r2, #21
 80076b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b6:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80076b8:	2036      	movs	r0, #54	@ 0x36
 80076ba:	1902      	adds	r2, r0, r4
 80076bc:	19d2      	adds	r2, r2, r7
 80076be:	8812      	ldrh	r2, [r2, #0]
 80076c0:	2103      	movs	r1, #3
 80076c2:	434a      	muls	r2, r1
 80076c4:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80076c6:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 80076c8:	0021      	movs	r1, r4
 80076ca:	1843      	adds	r3, r0, r1
 80076cc:	19db      	adds	r3, r3, r7
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	2201      	movs	r2, #1
 80076d2:	4353      	muls	r3, r2
 80076d4:	2203      	movs	r2, #3
 80076d6:	4113      	asrs	r3, r2
 80076d8:	001a      	movs	r2, r3
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 80076de:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80076e0:	2314      	movs	r3, #20
 80076e2:	185b      	adds	r3, r3, r1
 80076e4:	19da      	adds	r2, r3, r7
 80076e6:	2318      	movs	r3, #24
 80076e8:	185b      	adds	r3, r3, r1
 80076ea:	19db      	adds	r3, r3, r7
 80076ec:	0011      	movs	r1, r2
 80076ee:	0018      	movs	r0, r3
 80076f0:	f000 f80a 	bl	8007708 <correctIntFracNumber>
    integerPart[0] = intPart;
 80076f4:	6a3a      	ldr	r2, [r7, #32]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80076fa:	69fa      	ldr	r2, [r7, #28]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	601a      	str	r2, [r3, #0]
}
 8007700:	46c0      	nop			@ (mov r8, r8)
 8007702:	46bd      	mov	sp, r7
 8007704:	b010      	add	sp, #64	@ 0x40
 8007706:	bdb0      	pop	{r4, r5, r7, pc}

08007708 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8007712:	e00a      	b.n	800772a <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3b0a      	subs	r3, #10
 8007724:	001a      	movs	r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b09      	cmp	r3, #9
 8007730:	dcf0      	bgt.n	8007714 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8007732:	e00a      	b.n	800774a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	1e5a      	subs	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	330a      	adds	r3, #10
 8007744:	001a      	movs	r2, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3309      	adds	r3, #9
 8007750:	dbf0      	blt.n	8007734 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	da0f      	bge.n	800777a <correctIntFracNumber+0x72>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	dd0b      	ble.n	800777a <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3b0a      	subs	r3, #10
 8007772:	001a      	movs	r2, r3
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007778:	e012      	b.n	80077a0 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	dd0e      	ble.n	80077a0 <correctIntFracNumber+0x98>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	da0a      	bge.n	80077a0 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	1e5a      	subs	r2, r3, #1
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330a      	adds	r3, #10
 800779a:	001a      	movs	r2, r3
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	601a      	str	r2, [r3, #0]
}
 80077a0:	46c0      	nop			@ (mov r8, r8)
 80077a2:	46bd      	mov	sp, r7
 80077a4:	b002      	add	sp, #8
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80077a8:	b590      	push	{r4, r7, lr}
 80077aa:	b08b      	sub	sp, #44	@ 0x2c
 80077ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ae:	2414      	movs	r4, #20
 80077b0:	193b      	adds	r3, r7, r4
 80077b2:	0018      	movs	r0, r3
 80077b4:	2314      	movs	r3, #20
 80077b6:	001a      	movs	r2, r3
 80077b8:	2100      	movs	r1, #0
 80077ba:	f018 ff37 	bl	802062c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80077be:	4b8a      	ldr	r3, [pc, #552]	@ (80079e8 <MX_GPIO_Init+0x240>)
 80077c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c2:	4b89      	ldr	r3, [pc, #548]	@ (80079e8 <MX_GPIO_Init+0x240>)
 80077c4:	2104      	movs	r1, #4
 80077c6:	430a      	orrs	r2, r1
 80077c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077ca:	4b87      	ldr	r3, [pc, #540]	@ (80079e8 <MX_GPIO_Init+0x240>)
 80077cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ce:	2204      	movs	r2, #4
 80077d0:	4013      	ands	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]
 80077d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80077d6:	4b84      	ldr	r3, [pc, #528]	@ (80079e8 <MX_GPIO_Init+0x240>)
 80077d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077da:	4b83      	ldr	r3, [pc, #524]	@ (80079e8 <MX_GPIO_Init+0x240>)
 80077dc:	2180      	movs	r1, #128	@ 0x80
 80077de:	430a      	orrs	r2, r1
 80077e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077e2:	4b81      	ldr	r3, [pc, #516]	@ (80079e8 <MX_GPIO_Init+0x240>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e6:	2280      	movs	r2, #128	@ 0x80
 80077e8:	4013      	ands	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80077ee:	4b7e      	ldr	r3, [pc, #504]	@ (80079e8 <MX_GPIO_Init+0x240>)
 80077f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f2:	4b7d      	ldr	r3, [pc, #500]	@ (80079e8 <MX_GPIO_Init+0x240>)
 80077f4:	2101      	movs	r1, #1
 80077f6:	430a      	orrs	r2, r1
 80077f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077fa:	4b7b      	ldr	r3, [pc, #492]	@ (80079e8 <MX_GPIO_Init+0x240>)
 80077fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fe:	2201      	movs	r2, #1
 8007800:	4013      	ands	r3, r2
 8007802:	60bb      	str	r3, [r7, #8]
 8007804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007806:	4b78      	ldr	r3, [pc, #480]	@ (80079e8 <MX_GPIO_Init+0x240>)
 8007808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800780a:	4b77      	ldr	r3, [pc, #476]	@ (80079e8 <MX_GPIO_Init+0x240>)
 800780c:	2102      	movs	r1, #2
 800780e:	430a      	orrs	r2, r1
 8007810:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007812:	4b75      	ldr	r3, [pc, #468]	@ (80079e8 <MX_GPIO_Init+0x240>)
 8007814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007816:	2202      	movs	r2, #2
 8007818:	4013      	ands	r3, r2
 800781a:	607b      	str	r3, [r7, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800781e:	4b72      	ldr	r3, [pc, #456]	@ (80079e8 <MX_GPIO_Init+0x240>)
 8007820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007822:	4b71      	ldr	r3, [pc, #452]	@ (80079e8 <MX_GPIO_Init+0x240>)
 8007824:	2108      	movs	r1, #8
 8007826:	430a      	orrs	r2, r1
 8007828:	62da      	str	r2, [r3, #44]	@ 0x2c
 800782a:	4b6f      	ldr	r3, [pc, #444]	@ (80079e8 <MX_GPIO_Init+0x240>)
 800782c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782e:	2208      	movs	r2, #8
 8007830:	4013      	ands	r3, r2
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007836:	4b6d      	ldr	r3, [pc, #436]	@ (80079ec <MX_GPIO_Init+0x244>)
 8007838:	2201      	movs	r2, #1
 800783a:	2101      	movs	r1, #1
 800783c:	0018      	movs	r0, r3
 800783e:	f008 ff2e 	bl	801069e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8007842:	4b6a      	ldr	r3, [pc, #424]	@ (80079ec <MX_GPIO_Init+0x244>)
 8007844:	2200      	movs	r2, #0
 8007846:	2102      	movs	r1, #2
 8007848:	0018      	movs	r0, r3
 800784a:	f008 ff28 	bl	801069e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800784e:	4968      	ldr	r1, [pc, #416]	@ (80079f0 <MX_GPIO_Init+0x248>)
 8007850:	4b68      	ldr	r3, [pc, #416]	@ (80079f4 <MX_GPIO_Init+0x24c>)
 8007852:	2201      	movs	r2, #1
 8007854:	0018      	movs	r0, r3
 8007856:	f008 ff22 	bl	801069e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800785a:	2380      	movs	r3, #128	@ 0x80
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	4866      	ldr	r0, [pc, #408]	@ (80079f8 <MX_GPIO_Init+0x250>)
 8007860:	2201      	movs	r2, #1
 8007862:	0019      	movs	r1, r3
 8007864:	f008 ff1b 	bl	801069e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8007868:	2380      	movs	r3, #128	@ 0x80
 800786a:	015b      	lsls	r3, r3, #5
 800786c:	4862      	ldr	r0, [pc, #392]	@ (80079f8 <MX_GPIO_Init+0x250>)
 800786e:	2200      	movs	r2, #0
 8007870:	0019      	movs	r1, r3
 8007872:	f008 ff14 	bl	801069e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8007876:	193b      	adds	r3, r7, r4
 8007878:	4a60      	ldr	r2, [pc, #384]	@ (80079fc <MX_GPIO_Init+0x254>)
 800787a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800787c:	193b      	adds	r3, r7, r4
 800787e:	2203      	movs	r2, #3
 8007880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007882:	193b      	adds	r3, r7, r4
 8007884:	2200      	movs	r2, #0
 8007886:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007888:	193b      	adds	r3, r7, r4
 800788a:	4a5b      	ldr	r2, [pc, #364]	@ (80079f8 <MX_GPIO_Init+0x250>)
 800788c:	0019      	movs	r1, r3
 800788e:	0010      	movs	r0, r2
 8007890:	f008 fd6a 	bl	8010368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007894:	193b      	adds	r3, r7, r4
 8007896:	2203      	movs	r2, #3
 8007898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800789a:	193b      	adds	r3, r7, r4
 800789c:	2201      	movs	r2, #1
 800789e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a0:	193b      	adds	r3, r7, r4
 80078a2:	2200      	movs	r2, #0
 80078a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078a6:	193b      	adds	r3, r7, r4
 80078a8:	2200      	movs	r2, #0
 80078aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80078ac:	193b      	adds	r3, r7, r4
 80078ae:	4a4f      	ldr	r2, [pc, #316]	@ (80079ec <MX_GPIO_Init+0x244>)
 80078b0:	0019      	movs	r1, r3
 80078b2:	0010      	movs	r0, r2
 80078b4:	f008 fd58 	bl	8010368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80078b8:	193b      	adds	r3, r7, r4
 80078ba:	2270      	movs	r2, #112	@ 0x70
 80078bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078be:	193b      	adds	r3, r7, r4
 80078c0:	2203      	movs	r2, #3
 80078c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c4:	193b      	adds	r3, r7, r4
 80078c6:	2200      	movs	r2, #0
 80078c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078ca:	193a      	adds	r2, r7, r4
 80078cc:	23a0      	movs	r3, #160	@ 0xa0
 80078ce:	05db      	lsls	r3, r3, #23
 80078d0:	0011      	movs	r1, r2
 80078d2:	0018      	movs	r0, r3
 80078d4:	f008 fd48 	bl	8010368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80078d8:	193b      	adds	r3, r7, r4
 80078da:	22c0      	movs	r2, #192	@ 0xc0
 80078dc:	0052      	lsls	r2, r2, #1
 80078de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078e0:	193b      	adds	r3, r7, r4
 80078e2:	2200      	movs	r2, #0
 80078e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e6:	193b      	adds	r3, r7, r4
 80078e8:	2200      	movs	r2, #0
 80078ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078ec:	193a      	adds	r2, r7, r4
 80078ee:	23a0      	movs	r3, #160	@ 0xa0
 80078f0:	05db      	lsls	r3, r3, #23
 80078f2:	0011      	movs	r1, r2
 80078f4:	0018      	movs	r0, r3
 80078f6:	f008 fd37 	bl	8010368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80078fa:	193b      	adds	r3, r7, r4
 80078fc:	4a3c      	ldr	r2, [pc, #240]	@ (80079f0 <MX_GPIO_Init+0x248>)
 80078fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007900:	193b      	adds	r3, r7, r4
 8007902:	2201      	movs	r2, #1
 8007904:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007906:	193b      	adds	r3, r7, r4
 8007908:	2200      	movs	r2, #0
 800790a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800790c:	193b      	adds	r3, r7, r4
 800790e:	2200      	movs	r2, #0
 8007910:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007912:	193b      	adds	r3, r7, r4
 8007914:	4a37      	ldr	r2, [pc, #220]	@ (80079f4 <MX_GPIO_Init+0x24c>)
 8007916:	0019      	movs	r1, r3
 8007918:	0010      	movs	r0, r2
 800791a:	f008 fd25 	bl	8010368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800791e:	193b      	adds	r3, r7, r4
 8007920:	4a37      	ldr	r2, [pc, #220]	@ (8007a00 <MX_GPIO_Init+0x258>)
 8007922:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007924:	193b      	adds	r3, r7, r4
 8007926:	2203      	movs	r2, #3
 8007928:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792a:	193b      	adds	r3, r7, r4
 800792c:	2200      	movs	r2, #0
 800792e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007930:	193b      	adds	r3, r7, r4
 8007932:	4a30      	ldr	r2, [pc, #192]	@ (80079f4 <MX_GPIO_Init+0x24c>)
 8007934:	0019      	movs	r1, r3
 8007936:	0010      	movs	r0, r2
 8007938:	f008 fd16 	bl	8010368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800793c:	0021      	movs	r1, r4
 800793e:	187b      	adds	r3, r7, r1
 8007940:	2280      	movs	r2, #128	@ 0x80
 8007942:	0092      	lsls	r2, r2, #2
 8007944:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007946:	000c      	movs	r4, r1
 8007948:	193b      	adds	r3, r7, r4
 800794a:	2200      	movs	r2, #0
 800794c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794e:	193b      	adds	r3, r7, r4
 8007950:	2200      	movs	r2, #0
 8007952:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8007954:	193b      	adds	r3, r7, r4
 8007956:	4a28      	ldr	r2, [pc, #160]	@ (80079f8 <MX_GPIO_Init+0x250>)
 8007958:	0019      	movs	r1, r3
 800795a:	0010      	movs	r0, r2
 800795c:	f008 fd04 	bl	8010368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8007960:	193b      	adds	r3, r7, r4
 8007962:	2280      	movs	r2, #128	@ 0x80
 8007964:	0212      	lsls	r2, r2, #8
 8007966:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007968:	193b      	adds	r3, r7, r4
 800796a:	2288      	movs	r2, #136	@ 0x88
 800796c:	0352      	lsls	r2, r2, #13
 800796e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007970:	193b      	adds	r3, r7, r4
 8007972:	2200      	movs	r2, #0
 8007974:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8007976:	193a      	adds	r2, r7, r4
 8007978:	23a0      	movs	r3, #160	@ 0xa0
 800797a:	05db      	lsls	r3, r3, #23
 800797c:	0011      	movs	r1, r2
 800797e:	0018      	movs	r0, r3
 8007980:	f008 fcf2 	bl	8010368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007984:	0021      	movs	r1, r4
 8007986:	187b      	adds	r3, r7, r1
 8007988:	22c0      	movs	r2, #192	@ 0xc0
 800798a:	0152      	lsls	r2, r2, #5
 800798c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800798e:	000c      	movs	r4, r1
 8007990:	193b      	adds	r3, r7, r4
 8007992:	2201      	movs	r2, #1
 8007994:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007996:	193b      	adds	r3, r7, r4
 8007998:	2200      	movs	r2, #0
 800799a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800799c:	193b      	adds	r3, r7, r4
 800799e:	2200      	movs	r2, #0
 80079a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079a2:	193b      	adds	r3, r7, r4
 80079a4:	4a14      	ldr	r2, [pc, #80]	@ (80079f8 <MX_GPIO_Init+0x250>)
 80079a6:	0019      	movs	r1, r3
 80079a8:	0010      	movs	r0, r2
 80079aa:	f008 fcdd 	bl	8010368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80079ae:	0021      	movs	r1, r4
 80079b0:	187b      	adds	r3, r7, r1
 80079b2:	2204      	movs	r2, #4
 80079b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079b6:	187b      	adds	r3, r7, r1
 80079b8:	2200      	movs	r2, #0
 80079ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80079bc:	187b      	adds	r3, r7, r1
 80079be:	2201      	movs	r2, #1
 80079c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80079c2:	187b      	adds	r3, r7, r1
 80079c4:	4a0f      	ldr	r2, [pc, #60]	@ (8007a04 <MX_GPIO_Init+0x25c>)
 80079c6:	0019      	movs	r1, r3
 80079c8:	0010      	movs	r0, r2
 80079ca:	f008 fccd 	bl	8010368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80079ce:	2200      	movs	r2, #0
 80079d0:	2100      	movs	r1, #0
 80079d2:	2007      	movs	r0, #7
 80079d4:	f008 f876 	bl	800fac4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80079d8:	2007      	movs	r0, #7
 80079da:	f008 f888 	bl	800faee <HAL_NVIC_EnableIRQ>

}
 80079de:	46c0      	nop			@ (mov r8, r8)
 80079e0:	46bd      	mov	sp, r7
 80079e2:	b00b      	add	sp, #44	@ 0x2c
 80079e4:	bd90      	pop	{r4, r7, pc}
 80079e6:	46c0      	nop			@ (mov r8, r8)
 80079e8:	40021000 	.word	0x40021000
 80079ec:	50001c00 	.word	0x50001c00
 80079f0:	00000301 	.word	0x00000301
 80079f4:	50000400 	.word	0x50000400
 80079f8:	50000800 	.word	0x50000800
 80079fc:	0000200c 	.word	0x0000200c
 8007a00:	0000403e 	.word	0x0000403e
 8007a04:	50000c00 	.word	0x50000c00

08007a08 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2100      	movs	r1, #0
 8007a16:	0018      	movs	r0, r3
 8007a18:	f00f fa1c 	bl	8016e54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2108      	movs	r1, #8
 8007a20:	0018      	movs	r0, r3
 8007a22:	f00f fa17 	bl	8016e54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	210c      	movs	r1, #12
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f00f fa12 	bl	8016e54 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8007a30:	2380      	movs	r3, #128	@ 0x80
 8007a32:	05db      	lsls	r3, r3, #23
 8007a34:	22fa      	movs	r2, #250	@ 0xfa
 8007a36:	0112      	lsls	r2, r2, #4
 8007a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8007a3a:	2380      	movs	r3, #128	@ 0x80
 8007a3c:	05db      	lsls	r3, r3, #23
 8007a3e:	22fa      	movs	r2, #250	@ 0xfa
 8007a40:	0112      	lsls	r2, r2, #4
 8007a42:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007a44:	2380      	movs	r3, #128	@ 0x80
 8007a46:	05db      	lsls	r3, r3, #23
 8007a48:	22fa      	movs	r2, #250	@ 0xfa
 8007a4a:	0112      	lsls	r2, r2, #4
 8007a4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007a4e:	2380      	movs	r3, #128	@ 0x80
 8007a50:	05db      	lsls	r3, r3, #23
 8007a52:	22fa      	movs	r2, #250	@ 0xfa
 8007a54:	0112      	lsls	r2, r2, #4
 8007a56:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	f00f f9f9 	bl	8016e54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2104      	movs	r1, #4
 8007a66:	0018      	movs	r0, r3
 8007a68:	f00f f9f4 	bl	8016e54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2108      	movs	r1, #8
 8007a70:	0018      	movs	r0, r3
 8007a72:	f00f f9ef 	bl	8016e54 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8007a76:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa0 <GPIO_InitPWMLEDs+0x98>)
 8007a78:	22fa      	movs	r2, #250	@ 0xfa
 8007a7a:	0112      	lsls	r2, r2, #4
 8007a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8007a7e:	4b08      	ldr	r3, [pc, #32]	@ (8007aa0 <GPIO_InitPWMLEDs+0x98>)
 8007a80:	22fa      	movs	r2, #250	@ 0xfa
 8007a82:	0112      	lsls	r2, r2, #4
 8007a84:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8007a86:	4b06      	ldr	r3, [pc, #24]	@ (8007aa0 <GPIO_InitPWMLEDs+0x98>)
 8007a88:	22fa      	movs	r2, #250	@ 0xfa
 8007a8a:	0112      	lsls	r2, r2, #4
 8007a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8007a8e:	4b04      	ldr	r3, [pc, #16]	@ (8007aa0 <GPIO_InitPWMLEDs+0x98>)
 8007a90:	22fa      	movs	r2, #250	@ 0xfa
 8007a92:	0112      	lsls	r2, r2, #4
 8007a94:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007a96:	46c0      	nop			@ (mov r8, r8)
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b002      	add	sp, #8
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	46c0      	nop			@ (mov r8, r8)
 8007aa0:	40000400 	.word	0x40000400

08007aa4 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aaa:	1d3b      	adds	r3, r7, #4
 8007aac:	0018      	movs	r0, r3
 8007aae:	2314      	movs	r3, #20
 8007ab0:	001a      	movs	r2, r3
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	f018 fdba 	bl	802062c <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8007ab8:	1d3b      	adds	r3, r7, #4
 8007aba:	2205      	movs	r2, #5
 8007abc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007abe:	1d3b      	adds	r3, r7, #4
 8007ac0:	2203      	movs	r2, #3
 8007ac2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ac4:	1d3b      	adds	r3, r7, #4
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aca:	1d3a      	adds	r2, r7, #4
 8007acc:	23a0      	movs	r3, #160	@ 0xa0
 8007ace:	05db      	lsls	r3, r3, #23
 8007ad0:	0011      	movs	r1, r2
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	f008 fc48 	bl	8010368 <HAL_GPIO_Init>
}
 8007ad8:	46c0      	nop			@ (mov r8, r8)
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b006      	add	sp, #24
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8007b58 <MX_I2C1_Init+0x78>)
 8007ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007aea:	4b1a      	ldr	r3, [pc, #104]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007aec:	4a1b      	ldr	r2, [pc, #108]	@ (8007b5c <MX_I2C1_Init+0x7c>)
 8007aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007af0:	4b18      	ldr	r3, [pc, #96]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007af6:	4b17      	ldr	r3, [pc, #92]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007af8:	2201      	movs	r2, #1
 8007afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007afc:	4b15      	ldr	r3, [pc, #84]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007b02:	4b14      	ldr	r3, [pc, #80]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007b08:	4b12      	ldr	r3, [pc, #72]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b0e:	4b11      	ldr	r3, [pc, #68]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007b10:	2200      	movs	r2, #0
 8007b12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b14:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	f008 fdf7 	bl	8010710 <HAL_I2C_Init>
 8007b22:	1e03      	subs	r3, r0, #0
 8007b24:	d001      	beq.n	8007b2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007b26:	f000 fd93 	bl	8008650 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f00b f9c8 	bl	8012ec4 <HAL_I2CEx_ConfigAnalogFilter>
 8007b34:	1e03      	subs	r3, r0, #0
 8007b36:	d001      	beq.n	8007b3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007b38:	f000 fd8a 	bl	8008650 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007b3c:	4b05      	ldr	r3, [pc, #20]	@ (8007b54 <MX_I2C1_Init+0x74>)
 8007b3e:	2100      	movs	r1, #0
 8007b40:	0018      	movs	r0, r3
 8007b42:	f00b fa0b 	bl	8012f5c <HAL_I2CEx_ConfigDigitalFilter>
 8007b46:	1e03      	subs	r3, r0, #0
 8007b48:	d001      	beq.n	8007b4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007b4a:	f000 fd81 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007b4e:	46c0      	nop			@ (mov r8, r8)
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000a14 	.word	0x20000a14
 8007b58:	40005400 	.word	0x40005400
 8007b5c:	00503d58 	.word	0x00503d58

08007b60 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007b64:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007b66:	4a1c      	ldr	r2, [pc, #112]	@ (8007bd8 <MX_I2C2_Init+0x78>)
 8007b68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8007b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bdc <MX_I2C2_Init+0x7c>)
 8007b6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007b70:	4b18      	ldr	r3, [pc, #96]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b76:	4b17      	ldr	r3, [pc, #92]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007b78:	2201      	movs	r2, #1
 8007b7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b7c:	4b15      	ldr	r3, [pc, #84]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007b82:	4b14      	ldr	r3, [pc, #80]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007b88:	4b12      	ldr	r3, [pc, #72]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b8e:	4b11      	ldr	r3, [pc, #68]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b94:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f008 fdb7 	bl	8010710 <HAL_I2C_Init>
 8007ba2:	1e03      	subs	r3, r0, #0
 8007ba4:	d001      	beq.n	8007baa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007ba6:	f000 fd53 	bl	8008650 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007baa:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007bac:	2100      	movs	r1, #0
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f00b f988 	bl	8012ec4 <HAL_I2CEx_ConfigAnalogFilter>
 8007bb4:	1e03      	subs	r3, r0, #0
 8007bb6:	d001      	beq.n	8007bbc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007bb8:	f000 fd4a 	bl	8008650 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007bbc:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <MX_I2C2_Init+0x74>)
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f00b f9cb 	bl	8012f5c <HAL_I2CEx_ConfigDigitalFilter>
 8007bc6:	1e03      	subs	r3, r0, #0
 8007bc8:	d001      	beq.n	8007bce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007bca:	f000 fd41 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007bce:	46c0      	nop			@ (mov r8, r8)
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20000a68 	.word	0x20000a68
 8007bd8:	40005800 	.word	0x40005800
 8007bdc:	00503d58 	.word	0x00503d58

08007be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007be0:	b590      	push	{r4, r7, lr}
 8007be2:	b08b      	sub	sp, #44	@ 0x2c
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be8:	2414      	movs	r4, #20
 8007bea:	193b      	adds	r3, r7, r4
 8007bec:	0018      	movs	r0, r3
 8007bee:	2314      	movs	r3, #20
 8007bf0:	001a      	movs	r2, r3
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	f018 fd1a 	bl	802062c <memset>
  if(i2cHandle->Instance==I2C1)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8007d74 <HAL_I2C_MspInit+0x194>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d000      	beq.n	8007c04 <HAL_I2C_MspInit+0x24>
 8007c02:	e083      	b.n	8007d0c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c04:	4b5c      	ldr	r3, [pc, #368]	@ (8007d78 <HAL_I2C_MspInit+0x198>)
 8007c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c08:	4b5b      	ldr	r3, [pc, #364]	@ (8007d78 <HAL_I2C_MspInit+0x198>)
 8007c0a:	2102      	movs	r1, #2
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007c10:	4b59      	ldr	r3, [pc, #356]	@ (8007d78 <HAL_I2C_MspInit+0x198>)
 8007c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c14:	2202      	movs	r2, #2
 8007c16:	4013      	ands	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c1c:	0021      	movs	r1, r4
 8007c1e:	187b      	adds	r3, r7, r1
 8007c20:	22c0      	movs	r2, #192	@ 0xc0
 8007c22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c24:	187b      	adds	r3, r7, r1
 8007c26:	2212      	movs	r2, #18
 8007c28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c2a:	187b      	adds	r3, r7, r1
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c30:	187b      	adds	r3, r7, r1
 8007c32:	2203      	movs	r2, #3
 8007c34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8007c36:	187b      	adds	r3, r7, r1
 8007c38:	2201      	movs	r2, #1
 8007c3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	4a4f      	ldr	r2, [pc, #316]	@ (8007d7c <HAL_I2C_MspInit+0x19c>)
 8007c40:	0019      	movs	r1, r3
 8007c42:	0010      	movs	r0, r2
 8007c44:	f008 fb90 	bl	8010368 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007c48:	4b4b      	ldr	r3, [pc, #300]	@ (8007d78 <HAL_I2C_MspInit+0x198>)
 8007c4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c4c:	4b4a      	ldr	r3, [pc, #296]	@ (8007d78 <HAL_I2C_MspInit+0x198>)
 8007c4e:	2180      	movs	r1, #128	@ 0x80
 8007c50:	0389      	lsls	r1, r1, #14
 8007c52:	430a      	orrs	r2, r1
 8007c54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8007c56:	4b4a      	ldr	r3, [pc, #296]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007c58:	4a4a      	ldr	r2, [pc, #296]	@ (8007d84 <HAL_I2C_MspInit+0x1a4>)
 8007c5a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007c5c:	4b48      	ldr	r3, [pc, #288]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007c5e:	2206      	movs	r2, #6
 8007c60:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c62:	4b47      	ldr	r3, [pc, #284]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c68:	4b45      	ldr	r3, [pc, #276]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c6e:	4b44      	ldr	r3, [pc, #272]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007c70:	2280      	movs	r2, #128	@ 0x80
 8007c72:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c74:	4b42      	ldr	r3, [pc, #264]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c7a:	4b41      	ldr	r3, [pc, #260]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8007c80:	4b3f      	ldr	r3, [pc, #252]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007c86:	4b3e      	ldr	r3, [pc, #248]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f007 ff4e 	bl	800fb30 <HAL_DMA_Init>
 8007c94:	1e03      	subs	r3, r0, #0
 8007c96:	d001      	beq.n	8007c9c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007c98:	f000 fcda 	bl	8008650 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a38      	ldr	r2, [pc, #224]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007ca0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007ca2:	4b37      	ldr	r3, [pc, #220]	@ (8007d80 <HAL_I2C_MspInit+0x1a0>)
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007ca8:	4b37      	ldr	r3, [pc, #220]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007caa:	4a38      	ldr	r2, [pc, #224]	@ (8007d8c <HAL_I2C_MspInit+0x1ac>)
 8007cac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8007cae:	4b36      	ldr	r3, [pc, #216]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007cb0:	2206      	movs	r2, #6
 8007cb2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007cb4:	4b34      	ldr	r3, [pc, #208]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007cb6:	2210      	movs	r2, #16
 8007cb8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cba:	4b33      	ldr	r3, [pc, #204]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007cc0:	4b31      	ldr	r3, [pc, #196]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007cc2:	2280      	movs	r2, #128	@ 0x80
 8007cc4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007cc6:	4b30      	ldr	r3, [pc, #192]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8007cde:	4b2a      	ldr	r3, [pc, #168]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f007 ff25 	bl	800fb30 <HAL_DMA_Init>
 8007ce6:	1e03      	subs	r3, r0, #0
 8007ce8:	d001      	beq.n	8007cee <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007cea:	f000 fcb1 	bl	8008650 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a25      	ldr	r2, [pc, #148]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007cf2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007cf4:	4b24      	ldr	r3, [pc, #144]	@ (8007d88 <HAL_I2C_MspInit+0x1a8>)
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	2017      	movs	r0, #23
 8007d00:	f007 fee0 	bl	800fac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007d04:	2017      	movs	r0, #23
 8007d06:	f007 fef2 	bl	800faee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007d0a:	e02e      	b.n	8007d6a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a1f      	ldr	r2, [pc, #124]	@ (8007d90 <HAL_I2C_MspInit+0x1b0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d129      	bne.n	8007d6a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d16:	4b18      	ldr	r3, [pc, #96]	@ (8007d78 <HAL_I2C_MspInit+0x198>)
 8007d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1a:	4b17      	ldr	r3, [pc, #92]	@ (8007d78 <HAL_I2C_MspInit+0x198>)
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d22:	4b15      	ldr	r3, [pc, #84]	@ (8007d78 <HAL_I2C_MspInit+0x198>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d26:	2202      	movs	r2, #2
 8007d28:	4013      	ands	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007d2e:	2114      	movs	r1, #20
 8007d30:	187b      	adds	r3, r7, r1
 8007d32:	22c0      	movs	r2, #192	@ 0xc0
 8007d34:	0112      	lsls	r2, r2, #4
 8007d36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d38:	187b      	adds	r3, r7, r1
 8007d3a:	2212      	movs	r2, #18
 8007d3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d3e:	187b      	adds	r3, r7, r1
 8007d40:	2200      	movs	r2, #0
 8007d42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d44:	187b      	adds	r3, r7, r1
 8007d46:	2203      	movs	r2, #3
 8007d48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007d4a:	187b      	adds	r3, r7, r1
 8007d4c:	2206      	movs	r2, #6
 8007d4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d50:	187b      	adds	r3, r7, r1
 8007d52:	4a0a      	ldr	r2, [pc, #40]	@ (8007d7c <HAL_I2C_MspInit+0x19c>)
 8007d54:	0019      	movs	r1, r3
 8007d56:	0010      	movs	r0, r2
 8007d58:	f008 fb06 	bl	8010368 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007d5c:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <HAL_I2C_MspInit+0x198>)
 8007d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d60:	4b05      	ldr	r3, [pc, #20]	@ (8007d78 <HAL_I2C_MspInit+0x198>)
 8007d62:	2180      	movs	r1, #128	@ 0x80
 8007d64:	03c9      	lsls	r1, r1, #15
 8007d66:	430a      	orrs	r2, r1
 8007d68:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007d6a:	46c0      	nop			@ (mov r8, r8)
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	b00b      	add	sp, #44	@ 0x2c
 8007d70:	bd90      	pop	{r4, r7, pc}
 8007d72:	46c0      	nop			@ (mov r8, r8)
 8007d74:	40005400 	.word	0x40005400
 8007d78:	40021000 	.word	0x40021000
 8007d7c:	50000400 	.word	0x50000400
 8007d80:	20000abc 	.word	0x20000abc
 8007d84:	40020030 	.word	0x40020030
 8007d88:	20000b04 	.word	0x20000b04
 8007d8c:	4002001c 	.word	0x4002001c
 8007d90:	40005800 	.word	0x40005800

08007d94 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007d98:	4b10      	ldr	r3, [pc, #64]	@ (8007ddc <MX_I2S2_Init+0x48>)
 8007d9a:	4a11      	ldr	r2, [pc, #68]	@ (8007de0 <MX_I2S2_Init+0x4c>)
 8007d9c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8007d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007ddc <MX_I2S2_Init+0x48>)
 8007da0:	22c0      	movs	r2, #192	@ 0xc0
 8007da2:	0092      	lsls	r2, r2, #2
 8007da4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007da6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ddc <MX_I2S2_Init+0x48>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007dac:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <MX_I2S2_Init+0x48>)
 8007dae:	2203      	movs	r2, #3
 8007db0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007db2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ddc <MX_I2S2_Init+0x48>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007db8:	4b08      	ldr	r3, [pc, #32]	@ (8007ddc <MX_I2S2_Init+0x48>)
 8007dba:	22fa      	movs	r2, #250	@ 0xfa
 8007dbc:	0192      	lsls	r2, r2, #6
 8007dbe:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007dc0:	4b06      	ldr	r3, [pc, #24]	@ (8007ddc <MX_I2S2_Init+0x48>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007dc6:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <MX_I2S2_Init+0x48>)
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f00b f913 	bl	8012ff4 <HAL_I2S_Init>
 8007dce:	1e03      	subs	r3, r0, #0
 8007dd0:	d001      	beq.n	8007dd6 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007dd2:	f000 fc3d 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007dd6:	46c0      	nop			@ (mov r8, r8)
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	20000b4c 	.word	0x20000b4c
 8007de0:	40003800 	.word	0x40003800

08007de4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007de4:	b590      	push	{r4, r7, lr}
 8007de6:	b089      	sub	sp, #36	@ 0x24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dec:	240c      	movs	r4, #12
 8007dee:	193b      	adds	r3, r7, r4
 8007df0:	0018      	movs	r0, r3
 8007df2:	2314      	movs	r3, #20
 8007df4:	001a      	movs	r2, r3
 8007df6:	2100      	movs	r1, #0
 8007df8:	f018 fc18 	bl	802062c <memset>
  if(i2sHandle->Instance==SPI2)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a2d      	ldr	r2, [pc, #180]	@ (8007eb8 <HAL_I2S_MspInit+0xd4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d154      	bne.n	8007eb0 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007e06:	4b2d      	ldr	r3, [pc, #180]	@ (8007ebc <HAL_I2S_MspInit+0xd8>)
 8007e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8007ebc <HAL_I2S_MspInit+0xd8>)
 8007e0c:	2180      	movs	r1, #128	@ 0x80
 8007e0e:	01c9      	lsls	r1, r1, #7
 8007e10:	430a      	orrs	r2, r1
 8007e12:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e14:	4b29      	ldr	r3, [pc, #164]	@ (8007ebc <HAL_I2S_MspInit+0xd8>)
 8007e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e18:	4b28      	ldr	r3, [pc, #160]	@ (8007ebc <HAL_I2S_MspInit+0xd8>)
 8007e1a:	2102      	movs	r1, #2
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007e20:	4b26      	ldr	r3, [pc, #152]	@ (8007ebc <HAL_I2S_MspInit+0xd8>)
 8007e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e24:	2202      	movs	r2, #2
 8007e26:	4013      	ands	r3, r2
 8007e28:	60bb      	str	r3, [r7, #8]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007e2c:	193b      	adds	r3, r7, r4
 8007e2e:	22b0      	movs	r2, #176	@ 0xb0
 8007e30:	0212      	lsls	r2, r2, #8
 8007e32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e34:	0021      	movs	r1, r4
 8007e36:	187b      	adds	r3, r7, r1
 8007e38:	2202      	movs	r2, #2
 8007e3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e3c:	187b      	adds	r3, r7, r1
 8007e3e:	2200      	movs	r2, #0
 8007e40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e42:	187b      	adds	r3, r7, r1
 8007e44:	2200      	movs	r2, #0
 8007e46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007e48:	187b      	adds	r3, r7, r1
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e4e:	187b      	adds	r3, r7, r1
 8007e50:	4a1b      	ldr	r2, [pc, #108]	@ (8007ec0 <HAL_I2S_MspInit+0xdc>)
 8007e52:	0019      	movs	r1, r3
 8007e54:	0010      	movs	r0, r2
 8007e56:	f008 fa87 	bl	8010368 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ec8 <HAL_I2S_MspInit+0xe4>)
 8007e5e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007e60:	4b18      	ldr	r3, [pc, #96]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007e62:	2202      	movs	r2, #2
 8007e64:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e66:	4b17      	ldr	r3, [pc, #92]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e6c:	4b15      	ldr	r3, [pc, #84]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e72:	4b14      	ldr	r3, [pc, #80]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007e74:	2280      	movs	r2, #128	@ 0x80
 8007e76:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007e78:	4b12      	ldr	r3, [pc, #72]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007e7a:	2280      	movs	r2, #128	@ 0x80
 8007e7c:	0052      	lsls	r2, r2, #1
 8007e7e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007e80:	4b10      	ldr	r3, [pc, #64]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007e82:	2280      	movs	r2, #128	@ 0x80
 8007e84:	00d2      	lsls	r2, r2, #3
 8007e86:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007e88:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007e94:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007e96:	0018      	movs	r0, r3
 8007e98:	f007 fe4a 	bl	800fb30 <HAL_DMA_Init>
 8007e9c:	1e03      	subs	r3, r0, #0
 8007e9e:	d001      	beq.n	8007ea4 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007ea0:	f000 fbd6 	bl	8008650 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a07      	ldr	r2, [pc, #28]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007ea8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007eaa:	4b06      	ldr	r3, [pc, #24]	@ (8007ec4 <HAL_I2S_MspInit+0xe0>)
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007eb0:	46c0      	nop			@ (mov r8, r8)
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b009      	add	sp, #36	@ 0x24
 8007eb6:	bd90      	pop	{r4, r7, pc}
 8007eb8:	40003800 	.word	0x40003800
 8007ebc:	40021000 	.word	0x40021000
 8007ec0:	50000400 	.word	0x50000400
 8007ec4:	20000b88 	.word	0x20000b88
 8007ec8:	40020044 	.word	0x40020044

08007ecc <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	af00      	add	r7, sp, #0
  testDone = true;
 8007ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8007f4c <SetTestDone+0x80>)
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 8007ed6:	23fa      	movs	r3, #250	@ 0xfa
 8007ed8:	005b      	lsls	r3, r3, #1
 8007eda:	0018      	movs	r0, r3
 8007edc:	f007 f958 	bl	800f190 <HAL_Delay>
  SetDBLED(false, false, true);
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	f005 fadd 	bl	800d4a4 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007eea:	4a19      	ldr	r2, [pc, #100]	@ (8007f50 <SetTestDone+0x84>)
 8007eec:	23fa      	movs	r3, #250	@ 0xfa
 8007eee:	0119      	lsls	r1, r3, #4
 8007ef0:	23fa      	movs	r3, #250	@ 0xfa
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	f005 faa1 	bl	800d43c <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007efa:	4a15      	ldr	r2, [pc, #84]	@ (8007f50 <SetTestDone+0x84>)
 8007efc:	23fa      	movs	r3, #250	@ 0xfa
 8007efe:	0119      	lsls	r1, r3, #4
 8007f00:	23fa      	movs	r3, #250	@ 0xfa
 8007f02:	011b      	lsls	r3, r3, #4
 8007f04:	0018      	movs	r0, r3
 8007f06:	f005 fb17 	bl	800d538 <SetVocLED>
  HAL_Delay(500);
 8007f0a:	23fa      	movs	r3, #250	@ 0xfa
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	0018      	movs	r0, r3
 8007f10:	f007 f93e 	bl	800f190 <HAL_Delay>
  SetDBLED(false, false, false);
 8007f14:	2200      	movs	r2, #0
 8007f16:	2100      	movs	r1, #0
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f005 fac3 	bl	800d4a4 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007f1e:	23fa      	movs	r3, #250	@ 0xfa
 8007f20:	011a      	lsls	r2, r3, #4
 8007f22:	23fa      	movs	r3, #250	@ 0xfa
 8007f24:	0119      	lsls	r1, r3, #4
 8007f26:	23fa      	movs	r3, #250	@ 0xfa
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f005 fa86 	bl	800d43c <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007f30:	23fa      	movs	r3, #250	@ 0xfa
 8007f32:	011a      	lsls	r2, r3, #4
 8007f34:	23fa      	movs	r3, #250	@ 0xfa
 8007f36:	0119      	lsls	r1, r3, #4
 8007f38:	23fa      	movs	r3, #250	@ 0xfa
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	f005 fafb 	bl	800d538 <SetVocLED>
  InitDone();
 8007f42:	f005 f9cf 	bl	800d2e4 <InitDone>
}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20000bd0 	.word	0x20000bd0
 8007f50:	00000bb8 	.word	0x00000bb8

08007f54 <FlashLEDs>:

void FlashLEDs(){
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007f5a:	1dfb      	adds	r3, r7, #7
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
 8007f60:	e021      	b.n	8007fa6 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007f62:	2201      	movs	r2, #1
 8007f64:	2101      	movs	r1, #1
 8007f66:	2001      	movs	r0, #1
 8007f68:	f005 fa9c 	bl	800d4a4 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007f6c:	4a12      	ldr	r2, [pc, #72]	@ (8007fb8 <FlashLEDs+0x64>)
 8007f6e:	23fa      	movs	r3, #250	@ 0xfa
 8007f70:	0119      	lsls	r1, r3, #4
 8007f72:	23fa      	movs	r3, #250	@ 0xfa
 8007f74:	011b      	lsls	r3, r3, #4
 8007f76:	0018      	movs	r0, r3
 8007f78:	f005 fa60 	bl	800d43c <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8007fb8 <FlashLEDs+0x64>)
 8007f7e:	23fa      	movs	r3, #250	@ 0xfa
 8007f80:	0119      	lsls	r1, r3, #4
 8007f82:	23fa      	movs	r3, #250	@ 0xfa
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	0018      	movs	r0, r3
 8007f88:	f005 fad6 	bl	800d538 <SetVocLED>
    HAL_Delay(250);
 8007f8c:	20fa      	movs	r0, #250	@ 0xfa
 8007f8e:	f007 f8ff 	bl	800f190 <HAL_Delay>
    SetLEDsOff();
 8007f92:	f005 fc11 	bl	800d7b8 <SetLEDsOff>
    HAL_Delay(250);
 8007f96:	20fa      	movs	r0, #250	@ 0xfa
 8007f98:	f007 f8fa 	bl	800f190 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007f9c:	1dfb      	adds	r3, r7, #7
 8007f9e:	781a      	ldrb	r2, [r3, #0]
 8007fa0:	1dfb      	adds	r3, r7, #7
 8007fa2:	3201      	adds	r2, #1
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	1dfb      	adds	r3, r7, #7
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	d9d9      	bls.n	8007f62 <FlashLEDs+0xe>
  }
}
 8007fae:	46c0      	nop			@ (mov r8, r8)
 8007fb0:	46c0      	nop			@ (mov r8, r8)
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	b002      	add	sp, #8
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	00000bb8 	.word	0x00000bb8

08007fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007fc2:	f007 f875 	bl	800f0b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007fc6:	f000 f9fd 	bl	80083c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007fca:	f7ff fbed 	bl	80077a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8007fce:	f7ff fa15 	bl	80073fc <MX_DMA_Init>
  MX_I2C1_Init();
 8007fd2:	f7ff fd85 	bl	8007ae0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007fd6:	f7ff fedd 	bl	8007d94 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007fda:	f006 fa99 	bl	800e510 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007fde:	f7ff fdbf 	bl	8007b60 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007fe2:	f006 f88d 	bl	800e100 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007fe6:	f006 f8ff 	bl	800e1e8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007fea:	f006 fac5 	bl	800e578 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007fee:	f7ff f953 	bl	8007298 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007ff2:	f015 f829 	bl	801d048 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007ff6:	f001 f939 	bl	800926c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007ffa:	f006 fa53 	bl	800e4a4 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007ffe:	f006 f971 	bl	800e2e4 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8008002:	4aca      	ldr	r2, [pc, #808]	@ (800832c <main+0x370>)
 8008004:	4bca      	ldr	r3, [pc, #808]	@ (8008330 <main+0x374>)
 8008006:	0011      	movs	r1, r2
 8008008:	0018      	movs	r0, r3
 800800a:	f7ff fcfd 	bl	8007a08 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800800e:	f006 fcf5 	bl	800e9fc <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 8008012:	f005 fefd 	bl	800de10 <Battery_Upkeep>
 8008016:	0003      	movs	r3, r0
 8008018:	001a      	movs	r2, r3
 800801a:	4bc6      	ldr	r3, [pc, #792]	@ (8008334 <main+0x378>)
 800801c:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800801e:	4bc5      	ldr	r3, [pc, #788]	@ (8008334 <main+0x378>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d113      	bne.n	800804e <main+0x92>
    SetAllREDLED();
 8008026:	f005 fbe3 	bl	800d7f0 <SetAllREDLED>
    Info("Battery voltage %.02fV", ReadBatteryVoltage());
 800802a:	f7fe fa5b 	bl	80064e4 <ReadBatteryVoltage>
 800802e:	1c03      	adds	r3, r0, #0
 8008030:	1c18      	adds	r0, r3, #0
 8008032:	f7fb fa17 	bl	8003464 <__aeabi_f2d>
 8008036:	0002      	movs	r2, r0
 8008038:	000b      	movs	r3, r1
 800803a:	48bf      	ldr	r0, [pc, #764]	@ (8008338 <main+0x37c>)
 800803c:	49bf      	ldr	r1, [pc, #764]	@ (800833c <main+0x380>)
 800803e:	9200      	str	r2, [sp, #0]
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	0002      	movs	r2, r0
 8008044:	2002      	movs	r0, #2
 8008046:	f006 fc55 	bl	800e8f4 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800804a:	f7fe fe5d 	bl	8006d08 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800804e:	f7fe fb1f 	bl	8006690 <UserButton_Pressed>
 8008052:	1e03      	subs	r3, r0, #0
 8008054:	d004      	beq.n	8008060 <main+0xa4>
    EnableESPProg();
 8008056:	f015 f8c7 	bl	801d1e8 <EnableESPProg>
    ESP_Programming = true;
 800805a:	4bb9      	ldr	r3, [pc, #740]	@ (8008340 <main+0x384>)
 800805c:	2201      	movs	r2, #1
 800805e:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8008060:	2003      	movs	r0, #3
 8008062:	f006 fcb1 	bl	800e9c8 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8008066:	49b7      	ldr	r1, [pc, #732]	@ (8008344 <main+0x388>)
 8008068:	4bb7      	ldr	r3, [pc, #732]	@ (8008348 <main+0x38c>)
 800806a:	2201      	movs	r2, #1
 800806c:	0018      	movs	r0, r3
 800806e:	f00f fb51 	bl	8017714 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8008072:	4bb6      	ldr	r3, [pc, #728]	@ (800834c <main+0x390>)
 8008074:	0018      	movs	r0, r3
 8008076:	f7fe ff15 	bl	8006ea4 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800807a:	4ab5      	ldr	r2, [pc, #724]	@ (8008350 <main+0x394>)
 800807c:	49b5      	ldr	r1, [pc, #724]	@ (8008354 <main+0x398>)
 800807e:	48b6      	ldr	r0, [pc, #728]	@ (8008358 <main+0x39c>)
 8008080:	230b      	movs	r3, #11
 8008082:	f004 faa5 	bl	800c5d0 <soundInit>
 8008086:	0003      	movs	r3, r0
 8008088:	001a      	movs	r2, r3
 800808a:	2301      	movs	r3, #1
 800808c:	4053      	eors	r3, r2
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d005      	beq.n	80080a0 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 8008094:	4ab1      	ldr	r2, [pc, #708]	@ (800835c <main+0x3a0>)
 8008096:	4bb2      	ldr	r3, [pc, #712]	@ (8008360 <main+0x3a4>)
 8008098:	21fb      	movs	r1, #251	@ 0xfb
 800809a:	0018      	movs	r0, r3
 800809c:	f006 fce2 	bl	800ea64 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 80080a0:	4bb0      	ldr	r3, [pc, #704]	@ (8008364 <main+0x3a8>)
 80080a2:	4ab1      	ldr	r2, [pc, #708]	@ (8008368 <main+0x3ac>)
 80080a4:	49ab      	ldr	r1, [pc, #684]	@ (8008354 <main+0x398>)
 80080a6:	48b1      	ldr	r0, [pc, #708]	@ (800836c <main+0x3b0>)
 80080a8:	f000 fb92 	bl	80087d0 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 25000;
 80080ac:	f007 f866 	bl	800f17c <HAL_GetTick>
 80080b0:	0003      	movs	r3, r0
 80080b2:	4aaf      	ldr	r2, [pc, #700]	@ (8008370 <main+0x3b4>)
 80080b4:	189a      	adds	r2, r3, r2
 80080b6:	4baf      	ldr	r3, [pc, #700]	@ (8008374 <main+0x3b8>)
 80080b8:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 80080ba:	f7fe fac9 	bl	8006650 <Check_USB_PowerOn>
 80080be:	0003      	movs	r3, r0
 80080c0:	1e5a      	subs	r2, r3, #1
 80080c2:	4193      	sbcs	r3, r2
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2201      	movs	r2, #1
 80080c8:	4053      	eors	r3, r2
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	1c1a      	adds	r2, r3, #0
 80080ce:	2301      	movs	r3, #1
 80080d0:	4013      	ands	r3, r2
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	4ba8      	ldr	r3, [pc, #672]	@ (8008378 <main+0x3bc>)
 80080d6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 80080d8:	4ba8      	ldr	r3, [pc, #672]	@ (800837c <main+0x3c0>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	0018      	movs	r0, r3
 80080de:	f006 fbb3 	bl	800e848 <TimestampIsReached>
 80080e2:	1e03      	subs	r3, r0, #0
 80080e4:	d00e      	beq.n	8008104 <main+0x148>
      charge = Battery_Upkeep();
 80080e6:	f005 fe93 	bl	800de10 <Battery_Upkeep>
 80080ea:	0003      	movs	r3, r0
 80080ec:	001a      	movs	r2, r3
 80080ee:	4b91      	ldr	r3, [pc, #580]	@ (8008334 <main+0x378>)
 80080f0:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 80080f2:	f007 f843 	bl	800f17c <HAL_GetTick>
 80080f6:	0003      	movs	r3, r0
 80080f8:	4aa1      	ldr	r2, [pc, #644]	@ (8008380 <main+0x3c4>)
 80080fa:	189a      	adds	r2, r3, r2
 80080fc:	4b9f      	ldr	r3, [pc, #636]	@ (800837c <main+0x3c0>)
 80080fe:	601a      	str	r2, [r3, #0]
      showTime();
 8008100:	f7fe fad6 	bl	80066b0 <showTime>

    }
    configCheck();
 8008104:	f005 fce8 	bl	800dad8 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8008108:	4b9e      	ldr	r3, [pc, #632]	@ (8008384 <main+0x3c8>)
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800810e:	4b89      	ldr	r3, [pc, #548]	@ (8008334 <main+0x378>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d003      	beq.n	800811e <main+0x162>
 8008116:	4b87      	ldr	r3, [pc, #540]	@ (8008334 <main+0x378>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d104      	bne.n	8008128 <main+0x16c>
          FlashLEDs();
 800811e:	f7ff ff19 	bl	8007f54 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8008122:	4b99      	ldr	r3, [pc, #612]	@ (8008388 <main+0x3cc>)
 8008124:	2200      	movs	r2, #0
 8008126:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8008128:	4b82      	ldr	r3, [pc, #520]	@ (8008334 <main+0x378>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d109      	bne.n	8008144 <main+0x188>
 8008130:	4b96      	ldr	r3, [pc, #600]	@ (800838c <main+0x3d0>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b09      	cmp	r3, #9
 8008136:	d105      	bne.n	8008144 <main+0x188>
          batteryEmpty = true;
 8008138:	4b95      	ldr	r3, [pc, #596]	@ (8008390 <main+0x3d4>)
 800813a:	2201      	movs	r2, #1
 800813c:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800813e:	f7fe fde3 	bl	8006d08 <Enter_Standby_Mode>
 8008142:	e002      	b.n	800814a <main+0x18e>
        }
        else{
          batteryEmpty = false;
 8008144:	4b92      	ldr	r3, [pc, #584]	@ (8008390 <main+0x3d4>)
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800814a:	4b92      	ldr	r3, [pc, #584]	@ (8008394 <main+0x3d8>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d100      	bne.n	8008154 <main+0x198>
 8008152:	e0aa      	b.n	80082aa <main+0x2ee>
 8008154:	4b7a      	ldr	r3, [pc, #488]	@ (8008340 <main+0x384>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	2201      	movs	r2, #1
 800815a:	4053      	eors	r3, r2
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d100      	bne.n	8008164 <main+0x1a8>
 8008162:	e0a2      	b.n	80082aa <main+0x2ee>
 8008164:	4b8a      	ldr	r3, [pc, #552]	@ (8008390 <main+0x3d4>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	4053      	eors	r3, r2
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d100      	bne.n	8008174 <main+0x1b8>
 8008172:	e09a      	b.n	80082aa <main+0x2ee>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8008174:	4b80      	ldr	r3, [pc, #512]	@ (8008378 <main+0x3bc>)
 8008176:	781a      	ldrb	r2, [r3, #0]
 8008178:	4b87      	ldr	r3, [pc, #540]	@ (8008398 <main+0x3dc>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	429a      	cmp	r2, r3
 800817e:	d020      	beq.n	80081c2 <main+0x206>
        if (IsSGPPresent() && !usbPluggedIn) {
 8008180:	f000 fab8 	bl	80086f4 <IsSGPPresent>
 8008184:	1e03      	subs	r3, r0, #0
 8008186:	d009      	beq.n	800819c <main+0x1e0>
 8008188:	4b83      	ldr	r3, [pc, #524]	@ (8008398 <main+0x3dc>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2201      	movs	r2, #1
 800818e:	4053      	eors	r3, r2
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <main+0x1e0>
          SetVOCSensorDIS_ENA(true);
 8008196:	2001      	movs	r0, #1
 8008198:	f000 fab6 	bl	8008708 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800819c:	4b7f      	ldr	r3, [pc, #508]	@ (800839c <main+0x3e0>)
 800819e:	791b      	ldrb	r3, [r3, #4]
 80081a0:	2b34      	cmp	r3, #52	@ 0x34
 80081a2:	d003      	beq.n	80081ac <main+0x1f0>
 80081a4:	4b7d      	ldr	r3, [pc, #500]	@ (800839c <main+0x3e0>)
 80081a6:	791b      	ldrb	r3, [r3, #4]
 80081a8:	2b35      	cmp	r3, #53	@ 0x35
 80081aa:	d106      	bne.n	80081ba <main+0x1fe>
 80081ac:	4b7a      	ldr	r3, [pc, #488]	@ (8008398 <main+0x3dc>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <main+0x1fe>
          SetVOCSensorDIS_ENA(false);
 80081b4:	2000      	movs	r0, #0
 80081b6:	f000 faa7 	bl	8008708 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 80081ba:	4b77      	ldr	r3, [pc, #476]	@ (8008398 <main+0x3dc>)
 80081bc:	781a      	ldrb	r2, [r3, #0]
 80081be:	4b6e      	ldr	r3, [pc, #440]	@ (8008378 <main+0x3bc>)
 80081c0:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 80081c2:	4b77      	ldr	r3, [pc, #476]	@ (80083a0 <main+0x3e4>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d00d      	beq.n	80081e6 <main+0x22a>
 80081ca:	4b75      	ldr	r3, [pc, #468]	@ (80083a0 <main+0x3e4>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d009      	beq.n	80081e6 <main+0x22a>
 80081d2:	4b6d      	ldr	r3, [pc, #436]	@ (8008388 <main+0x3cc>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d005      	beq.n	80081e6 <main+0x22a>
        HIDSstate = HIDS_Upkeep();
 80081da:	f006 feaf 	bl	800ef3c <HIDS_Upkeep>
 80081de:	0003      	movs	r3, r0
 80081e0:	001a      	movs	r2, r3
 80081e2:	4b70      	ldr	r3, [pc, #448]	@ (80083a4 <main+0x3e8>)
 80081e4:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 80081e6:	4b6f      	ldr	r3, [pc, #444]	@ (80083a4 <main+0x3e8>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d00d      	beq.n	800820a <main+0x24e>
 80081ee:	4b6d      	ldr	r3, [pc, #436]	@ (80083a4 <main+0x3e8>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d009      	beq.n	800820a <main+0x24e>
 80081f6:	4b64      	ldr	r3, [pc, #400]	@ (8008388 <main+0x3cc>)
 80081f8:	785b      	ldrb	r3, [r3, #1]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <main+0x24e>
        SGPstate = SGP_Upkeep();
 80081fe:	f004 f84d 	bl	800c29c <SGP_Upkeep>
 8008202:	0003      	movs	r3, r0
 8008204:	001a      	movs	r2, r3
 8008206:	4b66      	ldr	r3, [pc, #408]	@ (80083a0 <main+0x3e4>)
 8008208:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 800820a:	4b5f      	ldr	r3, [pc, #380]	@ (8008388 <main+0x3cc>)
 800820c:	78db      	ldrb	r3, [r3, #3]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d005      	beq.n	800821e <main+0x262>
        MICstate = Mic_Upkeep();
 8008212:	f000 ff17 	bl	8009044 <Mic_Upkeep>
 8008216:	0003      	movs	r3, r0
 8008218:	001a      	movs	r2, r3
 800821a:	4b63      	ldr	r3, [pc, #396]	@ (80083a8 <main+0x3ec>)
 800821c:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800821e:	4b45      	ldr	r3, [pc, #276]	@ (8008334 <main+0x378>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d803      	bhi.n	800822e <main+0x272>
 8008226:	4b57      	ldr	r3, [pc, #348]	@ (8008384 <main+0x3c8>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d016      	beq.n	800825c <main+0x2a0>
 800822e:	4b56      	ldr	r3, [pc, #344]	@ (8008388 <main+0x3cc>)
 8008230:	789b      	ldrb	r3, [r3, #2]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d012      	beq.n	800825c <main+0x2a0>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8008236:	f001 f8a7 	bl	8009388 <sen5x_Get_sen5x_enable_state>
 800823a:	0003      	movs	r3, r0
 800823c:	001a      	movs	r2, r3
 800823e:	2301      	movs	r3, #1
 8008240:	4053      	eors	r3, r2
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d006      	beq.n	8008256 <main+0x29a>
 8008248:	4b53      	ldr	r3, [pc, #332]	@ (8008398 <main+0x3dc>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <main+0x29a>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 8008250:	2000      	movs	r0, #0
 8008252:	f001 f8d5 	bl	8009400 <sen5x_enable>
        }
        sen5x_statemachine();
 8008256:	f001 fe15 	bl	8009e84 <sen5x_statemachine>
 800825a:	e020      	b.n	800829e <main+0x2e2>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800825c:	4b35      	ldr	r3, [pc, #212]	@ (8008334 <main+0x378>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d81c      	bhi.n	800829e <main+0x2e2>
 8008264:	4b47      	ldr	r3, [pc, #284]	@ (8008384 <main+0x3c8>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2201      	movs	r2, #1
 800826a:	4053      	eors	r3, r2
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d015      	beq.n	800829e <main+0x2e2>
 8008272:	4b45      	ldr	r3, [pc, #276]	@ (8008388 <main+0x3cc>)
 8008274:	789b      	ldrb	r3, [r3, #2]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d011      	beq.n	800829e <main+0x2e2>
        Info("Battery level insufficient for sen5x operation");
 800827a:	4a4c      	ldr	r2, [pc, #304]	@ (80083ac <main+0x3f0>)
 800827c:	4b2f      	ldr	r3, [pc, #188]	@ (800833c <main+0x380>)
 800827e:	0019      	movs	r1, r3
 8008280:	2002      	movs	r0, #2
 8008282:	f006 fb37 	bl	800e8f4 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8008286:	4b40      	ldr	r3, [pc, #256]	@ (8008388 <main+0x3cc>)
 8008288:	2200      	movs	r2, #0
 800828a:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800828c:	4b48      	ldr	r3, [pc, #288]	@ (80083b0 <main+0x3f4>)
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8008292:	4b48      	ldr	r3, [pc, #288]	@ (80083b4 <main+0x3f8>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <main+0x2e2>
          sen5x_Power_Off();
 800829a:	f001 f933 	bl	8009504 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800829e:	f7fd f9f1 	bl	8005684 <ESP_Upkeep>
 80082a2:	0003      	movs	r3, r0
 80082a4:	001a      	movs	r2, r3
 80082a6:	4b39      	ldr	r3, [pc, #228]	@ (800838c <main+0x3d0>)
 80082a8:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 80082aa:	4b3a      	ldr	r3, [pc, #232]	@ (8008394 <main+0x3d8>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2201      	movs	r2, #1
 80082b0:	4053      	eors	r3, r2
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00f      	beq.n	80082d8 <main+0x31c>
 80082b8:	4b21      	ldr	r3, [pc, #132]	@ (8008340 <main+0x384>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2201      	movs	r2, #1
 80082be:	4053      	eors	r3, r2
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d008      	beq.n	80082d8 <main+0x31c>
 80082c6:	4b32      	ldr	r3, [pc, #200]	@ (8008390 <main+0x3d4>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2201      	movs	r2, #1
 80082cc:	4053      	eors	r3, r2
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <main+0x31c>
      Device_Test();  // for device with startup time
 80082d4:	f000 fbc2 	bl	8008a5c <Device_Test>
    }
    if (!usbPluggedIn) {
 80082d8:	4b2f      	ldr	r3, [pc, #188]	@ (8008398 <main+0x3dc>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2201      	movs	r2, #1
 80082de:	4053      	eors	r3, r2
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d100      	bne.n	80082e8 <main+0x32c>
 80082e6:	e6f7      	b.n	80080d8 <main+0x11c>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 80082e8:	4b33      	ldr	r3, [pc, #204]	@ (80083b8 <main+0x3fc>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2201      	movs	r2, #1
 80082ee:	4053      	eors	r3, r2
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d100      	bne.n	80082f8 <main+0x33c>
 80082f6:	e6ef      	b.n	80080d8 <main+0x11c>
 80082f8:	f000 fc2e 	bl	8008b58 <AllDevicesReady>
 80082fc:	1e03      	subs	r3, r0, #0
 80082fe:	d100      	bne.n	8008302 <main+0x346>
 8008300:	e6ea      	b.n	80080d8 <main+0x11c>
 8008302:	4b2e      	ldr	r3, [pc, #184]	@ (80083bc <main+0x400>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d100      	bne.n	800830c <main+0x350>
 800830a:	e6e5      	b.n	80080d8 <main+0x11c>
        EnabledConnectedDevices();
 800830c:	f000 fc8c 	bl	8008c28 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8008310:	4b2b      	ldr	r3, [pc, #172]	@ (80083c0 <main+0x404>)
 8008312:	789b      	ldrb	r3, [r3, #2]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <main+0x362>
 8008318:	23d7      	movs	r3, #215	@ 0xd7
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	e001      	b.n	8008322 <main+0x366>
 800831e:	23dc      	movs	r3, #220	@ 0xdc
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	0018      	movs	r0, r3
 8008324:	f7fe fd10 	bl	8006d48 <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8008328:	e6d6      	b.n	80080d8 <main+0x11c>
 800832a:	46c0      	nop			@ (mov r8, r8)
 800832c:	20001c74 	.word	0x20001c74
 8008330:	20001c34 	.word	0x20001c34
 8008334:	20000bec 	.word	0x20000bec
 8008338:	080245a4 	.word	0x080245a4
 800833c:	080245bc 	.word	0x080245bc
 8008340:	20000bd1 	.word	0x20000bd1
 8008344:	20000bd8 	.word	0x20000bd8
 8008348:	20001dac 	.word	0x20001dac
 800834c:	20000c60 	.word	0x20000c60
 8008350:	20001cb4 	.word	0x20001cb4
 8008354:	20000b4c 	.word	0x20000b4c
 8008358:	20000b88 	.word	0x20000b88
 800835c:	080245c0 	.word	0x080245c0
 8008360:	08025bc8 	.word	0x08025bc8
 8008364:	20001e64 	.word	0x20001e64
 8008368:	200009b4 	.word	0x200009b4
 800836c:	20000a14 	.word	0x20000a14
 8008370:	000061a8 	.word	0x000061a8
 8008374:	20000be8 	.word	0x20000be8
 8008378:	20000bd3 	.word	0x20000bd3
 800837c:	20000088 	.word	0x20000088
 8008380:	0000c350 	.word	0x0000c350
 8008384:	20000084 	.word	0x20000084
 8008388:	20000bf0 	.word	0x20000bf0
 800838c:	20000bd7 	.word	0x20000bd7
 8008390:	20000bd2 	.word	0x20000bd2
 8008394:	20000bd0 	.word	0x20000bd0
 8008398:	20001c15 	.word	0x20001c15
 800839c:	20000c88 	.word	0x20000c88
 80083a0:	20000bd4 	.word	0x20000bd4
 80083a4:	20000bd5 	.word	0x20000bd5
 80083a8:	20000bd6 	.word	0x20000bd6
 80083ac:	080245d4 	.word	0x080245d4
 80083b0:	20000c86 	.word	0x20000c86
 80083b4:	20000c85 	.word	0x20000c85
 80083b8:	20001c16 	.word	0x20001c16
 80083bc:	20000554 	.word	0x20000554
 80083c0:	20000bf4 	.word	0x20000bf4

080083c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80083c4:	b590      	push	{r4, r7, lr}
 80083c6:	b09d      	sub	sp, #116	@ 0x74
 80083c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80083ca:	2438      	movs	r4, #56	@ 0x38
 80083cc:	193b      	adds	r3, r7, r4
 80083ce:	0018      	movs	r0, r3
 80083d0:	2338      	movs	r3, #56	@ 0x38
 80083d2:	001a      	movs	r2, r3
 80083d4:	2100      	movs	r1, #0
 80083d6:	f018 f929 	bl	802062c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80083da:	2324      	movs	r3, #36	@ 0x24
 80083dc:	18fb      	adds	r3, r7, r3
 80083de:	0018      	movs	r0, r3
 80083e0:	2314      	movs	r3, #20
 80083e2:	001a      	movs	r2, r3
 80083e4:	2100      	movs	r1, #0
 80083e6:	f018 f921 	bl	802062c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80083ea:	003b      	movs	r3, r7
 80083ec:	0018      	movs	r0, r3
 80083ee:	2324      	movs	r3, #36	@ 0x24
 80083f0:	001a      	movs	r2, r3
 80083f2:	2100      	movs	r1, #0
 80083f4:	f018 f91a 	bl	802062c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80083f8:	4b34      	ldr	r3, [pc, #208]	@ (80084cc <SystemClock_Config+0x108>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a34      	ldr	r2, [pc, #208]	@ (80084d0 <SystemClock_Config+0x10c>)
 80083fe:	401a      	ands	r2, r3
 8008400:	4b32      	ldr	r3, [pc, #200]	@ (80084cc <SystemClock_Config+0x108>)
 8008402:	2180      	movs	r1, #128	@ 0x80
 8008404:	0109      	lsls	r1, r1, #4
 8008406:	430a      	orrs	r2, r1
 8008408:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800840a:	f00c ff57 	bl	80152bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800840e:	4b31      	ldr	r3, [pc, #196]	@ (80084d4 <SystemClock_Config+0x110>)
 8008410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008412:	4a2f      	ldr	r2, [pc, #188]	@ (80084d0 <SystemClock_Config+0x10c>)
 8008414:	401a      	ands	r2, r3
 8008416:	4b2f      	ldr	r3, [pc, #188]	@ (80084d4 <SystemClock_Config+0x110>)
 8008418:	2180      	movs	r1, #128	@ 0x80
 800841a:	0149      	lsls	r1, r1, #5
 800841c:	430a      	orrs	r2, r1
 800841e:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008420:	193b      	adds	r3, r7, r4
 8008422:	2226      	movs	r2, #38	@ 0x26
 8008424:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008426:	193b      	adds	r3, r7, r4
 8008428:	2280      	movs	r2, #128	@ 0x80
 800842a:	0052      	lsls	r2, r2, #1
 800842c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800842e:	0021      	movs	r1, r4
 8008430:	187b      	adds	r3, r7, r1
 8008432:	2201      	movs	r2, #1
 8008434:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008436:	187b      	adds	r3, r7, r1
 8008438:	2210      	movs	r2, #16
 800843a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800843c:	187b      	adds	r3, r7, r1
 800843e:	2201      	movs	r2, #1
 8008440:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008442:	187b      	adds	r3, r7, r1
 8008444:	2200      	movs	r2, #0
 8008446:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008448:	187b      	adds	r3, r7, r1
 800844a:	0018      	movs	r0, r3
 800844c:	f00c ffc6 	bl	80153dc <HAL_RCC_OscConfig>
 8008450:	1e03      	subs	r3, r0, #0
 8008452:	d001      	beq.n	8008458 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008454:	f000 f8fc 	bl	8008650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008458:	2124      	movs	r1, #36	@ 0x24
 800845a:	187b      	adds	r3, r7, r1
 800845c:	220f      	movs	r2, #15
 800845e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008460:	187b      	adds	r3, r7, r1
 8008462:	2201      	movs	r2, #1
 8008464:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008466:	187b      	adds	r3, r7, r1
 8008468:	2200      	movs	r2, #0
 800846a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800846c:	187b      	adds	r3, r7, r1
 800846e:	2200      	movs	r2, #0
 8008470:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008472:	187b      	adds	r3, r7, r1
 8008474:	2200      	movs	r2, #0
 8008476:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008478:	187b      	adds	r3, r7, r1
 800847a:	2100      	movs	r1, #0
 800847c:	0018      	movs	r0, r3
 800847e:	f00d fb81 	bl	8015b84 <HAL_RCC_ClockConfig>
 8008482:	1e03      	subs	r3, r0, #0
 8008484:	d001      	beq.n	800848a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8008486:	f000 f8e3 	bl	8008650 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800848a:	003b      	movs	r3, r7
 800848c:	226d      	movs	r2, #109	@ 0x6d
 800848e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008490:	003b      	movs	r3, r7
 8008492:	2200      	movs	r2, #0
 8008494:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8008496:	003b      	movs	r3, r7
 8008498:	2200      	movs	r2, #0
 800849a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800849c:	003b      	movs	r3, r7
 800849e:	2200      	movs	r2, #0
 80084a0:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80084a2:	003b      	movs	r3, r7
 80084a4:	2280      	movs	r2, #128	@ 0x80
 80084a6:	0252      	lsls	r2, r2, #9
 80084a8:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80084aa:	003b      	movs	r3, r7
 80084ac:	2280      	movs	r2, #128	@ 0x80
 80084ae:	04d2      	lsls	r2, r2, #19
 80084b0:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80084b2:	003b      	movs	r3, r7
 80084b4:	0018      	movs	r0, r3
 80084b6:	f00d fd89 	bl	8015fcc <HAL_RCCEx_PeriphCLKConfig>
 80084ba:	1e03      	subs	r3, r0, #0
 80084bc:	d001      	beq.n	80084c2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80084be:	f000 f8c7 	bl	8008650 <Error_Handler>
  }
}
 80084c2:	46c0      	nop			@ (mov r8, r8)
 80084c4:	46bd      	mov	sp, r7
 80084c6:	b01d      	add	sp, #116	@ 0x74
 80084c8:	bd90      	pop	{r4, r7, pc}
 80084ca:	46c0      	nop			@ (mov r8, r8)
 80084cc:	40007000 	.word	0x40007000
 80084d0:	ffffe7ff 	.word	0xffffe7ff
 80084d4:	40021000 	.word	0x40021000

080084d8 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 80084d8:	b580      	push	{r7, lr}
 80084da:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 80084dc:	4b2f      	ldr	r3, [pc, #188]	@ (800859c <check_cli_command+0xc4>)
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	3b61      	subs	r3, #97	@ 0x61
 80084e2:	2b13      	cmp	r3, #19
 80084e4:	d830      	bhi.n	8008548 <check_cli_command+0x70>
 80084e6:	009a      	lsls	r2, r3, #2
 80084e8:	4b2d      	ldr	r3, [pc, #180]	@ (80085a0 <check_cli_command+0xc8>)
 80084ea:	18d3      	adds	r3, r2, r3
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 80084f0:	4b2c      	ldr	r3, [pc, #176]	@ (80085a4 <check_cli_command+0xcc>)
 80084f2:	0018      	movs	r0, r3
 80084f4:	f017 ff4c 	bl	8020390 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 80084f8:	2003      	movs	r0, #3
 80084fa:	f006 fa65 	bl	800e9c8 <SetVerboseLevel>
      break;
 80084fe:	e04a      	b.n	8008596 <check_cli_command+0xbe>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8008500:	f7fb f8a6 	bl	8003650 <forceNTPupdate>
    break;
 8008504:	e047      	b.n	8008596 <check_cli_command+0xbe>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8008506:	4b28      	ldr	r3, [pc, #160]	@ (80085a8 <check_cli_command+0xd0>)
 8008508:	0018      	movs	r0, r3
 800850a:	f017 ff41 	bl	8020390 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800850e:	2002      	movs	r0, #2
 8008510:	f006 fa5a 	bl	800e9c8 <SetVerboseLevel>
      break;
 8008514:	e03f      	b.n	8008596 <check_cli_command+0xbe>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8008516:	4b25      	ldr	r3, [pc, #148]	@ (80085ac <check_cli_command+0xd4>)
 8008518:	0018      	movs	r0, r3
 800851a:	f017 ff39 	bl	8020390 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800851e:	2001      	movs	r0, #1
 8008520:	f006 fa52 	bl	800e9c8 <SetVerboseLevel>
      break;
 8008524:	e037      	b.n	8008596 <check_cli_command+0xbe>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8008526:	4b22      	ldr	r3, [pc, #136]	@ (80085b0 <check_cli_command+0xd8>)
 8008528:	0018      	movs	r0, r3
 800852a:	f017 ff31 	bl	8020390 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800852e:	2000      	movs	r0, #0
 8008530:	f006 fa4a 	bl	800e9c8 <SetVerboseLevel>
      break;
 8008534:	e02f      	b.n	8008596 <check_cli_command+0xbe>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8008536:	f006 fe21 	bl	800f17c <HAL_GetTick>
 800853a:	0002      	movs	r2, r0
 800853c:	4b1d      	ldr	r3, [pc, #116]	@ (80085b4 <check_cli_command+0xdc>)
 800853e:	601a      	str	r2, [r3, #0]
      break;
 8008540:	e029      	b.n	8008596 <check_cli_command+0xbe>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8008542:	f7fe f8b5 	bl	80066b0 <showTime>
      break;
 8008546:	e026      	b.n	8008596 <check_cli_command+0xbe>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8008548:	4a1b      	ldr	r2, [pc, #108]	@ (80085b8 <check_cli_command+0xe0>)
 800854a:	4b1c      	ldr	r3, [pc, #112]	@ (80085bc <check_cli_command+0xe4>)
 800854c:	0019      	movs	r1, r3
 800854e:	2001      	movs	r0, #1
 8008550:	f006 f9d0 	bl	800e8f4 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8008554:	4b1a      	ldr	r3, [pc, #104]	@ (80085c0 <check_cli_command+0xe8>)
 8008556:	0018      	movs	r0, r3
 8008558:	f017 ff1a 	bl	8020390 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800855c:	4b19      	ldr	r3, [pc, #100]	@ (80085c4 <check_cli_command+0xec>)
 800855e:	0018      	movs	r0, r3
 8008560:	f017 ff16 	bl	8020390 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8008564:	4b18      	ldr	r3, [pc, #96]	@ (80085c8 <check_cli_command+0xf0>)
 8008566:	0018      	movs	r0, r3
 8008568:	f017 ff12 	bl	8020390 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800856c:	4b17      	ldr	r3, [pc, #92]	@ (80085cc <check_cli_command+0xf4>)
 800856e:	0018      	movs	r0, r3
 8008570:	f017 ff0e 	bl	8020390 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8008574:	4b16      	ldr	r3, [pc, #88]	@ (80085d0 <check_cli_command+0xf8>)
 8008576:	0018      	movs	r0, r3
 8008578:	f017 ff0a 	bl	8020390 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800857c:	4b15      	ldr	r3, [pc, #84]	@ (80085d4 <check_cli_command+0xfc>)
 800857e:	0018      	movs	r0, r3
 8008580:	f017 ff06 	bl	8020390 <puts>
      printf("s - Start particle measurement\r\n");
 8008584:	4b14      	ldr	r3, [pc, #80]	@ (80085d8 <check_cli_command+0x100>)
 8008586:	0018      	movs	r0, r3
 8008588:	f017 ff02 	bl	8020390 <puts>
      printf("t - Show actual systemtime\r\n");
 800858c:	4b13      	ldr	r3, [pc, #76]	@ (80085dc <check_cli_command+0x104>)
 800858e:	0018      	movs	r0, r3
 8008590:	f017 fefe 	bl	8020390 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 8008594:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008596:	46c0      	nop			@ (mov r8, r8)
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	20000bd8 	.word	0x20000bd8
 80085a0:	08025b78 	.word	0x08025b78
 80085a4:	08024604 	.word	0x08024604
 80085a8:	08024620 	.word	0x08024620
 80085ac:	0802463c 	.word	0x0802463c
 80085b0:	0802465c 	.word	0x0802465c
 80085b4:	20000c94 	.word	0x20000c94
 80085b8:	08024678 	.word	0x08024678
 80085bc:	080246a8 	.word	0x080246a8
 80085c0:	080246ac 	.word	0x080246ac
 80085c4:	080246c4 	.word	0x080246c4
 80085c8:	080246e4 	.word	0x080246e4
 80085cc:	08024708 	.word	0x08024708
 80085d0:	08024728 	.word	0x08024728
 80085d4:	0802474c 	.word	0x0802474c
 80085d8:	0802476c 	.word	0x0802476c
 80085dc:	0802478c 	.word	0x0802478c

080085e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80085e8:	4908      	ldr	r1, [pc, #32]	@ (800860c <HAL_UART_RxCpltCallback+0x2c>)
 80085ea:	4b09      	ldr	r3, [pc, #36]	@ (8008610 <HAL_UART_RxCpltCallback+0x30>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	0018      	movs	r0, r3
 80085f0:	f00f f890 	bl	8017714 <HAL_UART_Receive_IT>
  check_cli_command();
 80085f4:	f7ff ff70 	bl	80084d8 <check_cli_command>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80085f8:	4904      	ldr	r1, [pc, #16]	@ (800860c <HAL_UART_RxCpltCallback+0x2c>)
 80085fa:	4b05      	ldr	r3, [pc, #20]	@ (8008610 <HAL_UART_RxCpltCallback+0x30>)
 80085fc:	2201      	movs	r2, #1
 80085fe:	0018      	movs	r0, r3
 8008600:	f00f f888 	bl	8017714 <HAL_UART_Receive_IT>
}
 8008604:	46c0      	nop			@ (mov r8, r8)
 8008606:	46bd      	mov	sp, r7
 8008608:	b002      	add	sp, #8
 800860a:	bd80      	pop	{r7, pc}
 800860c:	20000bd8 	.word	0x20000bd8
 8008610:	20001dac 	.word	0x20001dac

08008614 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	0002      	movs	r2, r0
 800861c:	1dbb      	adds	r3, r7, #6
 800861e:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008620:	1dbb      	adds	r3, r7, #6
 8008622:	881a      	ldrh	r2, [r3, #0]
 8008624:	2380      	movs	r3, #128	@ 0x80
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	429a      	cmp	r2, r3
 800862a:	d10b      	bne.n	8008644 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800862c:	f005 fc04 	bl	800de38 <setuserToggle>
    if (GetPMSensorPresence()) {
 8008630:	f000 f84c 	bl	80086cc <GetPMSensorPresence>
 8008634:	1e03      	subs	r3, r0, #0
 8008636:	d005      	beq.n	8008644 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 8008638:	4b04      	ldr	r3, [pc, #16]	@ (800864c <HAL_GPIO_EXTI_Callback+0x38>)
 800863a:	2201      	movs	r2, #1
 800863c:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800863e:	2000      	movs	r0, #0
 8008640:	f000 feac 	bl	800939c <sen5x_Set_sen5x_state>
    }
  }
}
 8008644:	46c0      	nop			@ (mov r8, r8)
 8008646:	46bd      	mov	sp, r7
 8008648:	b002      	add	sp, #8
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20000bf0 	.word	0x20000bf0

08008650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008654:	b672      	cpsid	i
}
 8008656:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 8008658:	4a05      	ldr	r2, [pc, #20]	@ (8008670 <Error_Handler+0x20>)
 800865a:	4b06      	ldr	r3, [pc, #24]	@ (8008674 <Error_Handler+0x24>)
 800865c:	0019      	movs	r1, r3
 800865e:	2001      	movs	r0, #1
 8008660:	f006 f948 	bl	800e8f4 <CreateLine>
    HAL_Delay(2500);
 8008664:	4b04      	ldr	r3, [pc, #16]	@ (8008678 <Error_Handler+0x28>)
 8008666:	0018      	movs	r0, r3
 8008668:	f006 fd92 	bl	800f190 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800866c:	46c0      	nop			@ (mov r8, r8)
 800866e:	e7f3      	b.n	8008658 <Error_Handler+0x8>
 8008670:	080247a8 	.word	0x080247a8
 8008674:	080246a8 	.word	0x080246a8
 8008678:	000009c4 	.word	0x000009c4

0800867c <testInit>:
#include "display.h"

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8008680:	4b10      	ldr	r3, [pc, #64]	@ (80086c4 <testInit+0x48>)
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 8008686:	4b0f      	ldr	r3, [pc, #60]	@ (80086c4 <testInit+0x48>)
 8008688:	2200      	movs	r2, #0
 800868a:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 800868c:	4b0d      	ldr	r3, [pc, #52]	@ (80086c4 <testInit+0x48>)
 800868e:	2200      	movs	r2, #0
 8008690:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 8008692:	4b0c      	ldr	r3, [pc, #48]	@ (80086c4 <testInit+0x48>)
 8008694:	2200      	movs	r2, #0
 8008696:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 8008698:	4b0a      	ldr	r3, [pc, #40]	@ (80086c4 <testInit+0x48>)
 800869a:	2200      	movs	r2, #0
 800869c:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 800869e:	4b09      	ldr	r3, [pc, #36]	@ (80086c4 <testInit+0x48>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	715a      	strb	r2, [r3, #5]
  Sensor.HT_measurementEnabled = true;
 80086a4:	4b08      	ldr	r3, [pc, #32]	@ (80086c8 <testInit+0x4c>)
 80086a6:	2201      	movs	r2, #1
 80086a8:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 80086aa:	4b07      	ldr	r3, [pc, #28]	@ (80086c8 <testInit+0x4c>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 80086b0:	4b05      	ldr	r3, [pc, #20]	@ (80086c8 <testInit+0x4c>)
 80086b2:	2201      	movs	r2, #1
 80086b4:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 80086b6:	4b04      	ldr	r3, [pc, #16]	@ (80086c8 <testInit+0x4c>)
 80086b8:	2201      	movs	r2, #1
 80086ba:	70da      	strb	r2, [r3, #3]
}
 80086bc:	46c0      	nop			@ (mov r8, r8)
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	46c0      	nop			@ (mov r8, r8)
 80086c4:	20000bf4 	.word	0x20000bf4
 80086c8:	20000bf0 	.word	0x20000bf0

080086cc <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 80086d0:	4b02      	ldr	r3, [pc, #8]	@ (80086dc <GetPMSensorPresence+0x10>)
 80086d2:	789b      	ldrb	r3, [r3, #2]
}
 80086d4:	0018      	movs	r0, r3
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	46c0      	nop			@ (mov r8, r8)
 80086dc:	20000bf4 	.word	0x20000bf4

080086e0 <DisablePMSensor>:

void DisablePMSensor() {
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 80086e4:	4b02      	ldr	r3, [pc, #8]	@ (80086f0 <DisablePMSensor+0x10>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	709a      	strb	r2, [r3, #2]
}
 80086ea:	46c0      	nop			@ (mov r8, r8)
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20000bf4 	.word	0x20000bf4

080086f4 <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 80086f8:	4b02      	ldr	r3, [pc, #8]	@ (8008704 <IsSGPPresent+0x10>)
 80086fa:	785b      	ldrb	r3, [r3, #1]
}
 80086fc:	0018      	movs	r0, r3
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	46c0      	nop			@ (mov r8, r8)
 8008704:	20000bf4 	.word	0x20000bf4

08008708 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	0002      	movs	r2, r0
 8008710:	1dfb      	adds	r3, r7, #7
 8008712:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 8008714:	4b0b      	ldr	r3, [pc, #44]	@ (8008744 <SetVOCSensorDIS_ENA+0x3c>)
 8008716:	1dfa      	adds	r2, r7, #7
 8008718:	7812      	ldrb	r2, [r2, #0]
 800871a:	715a      	strb	r2, [r3, #5]
  Sensor.VOC_measurementEnabled = setting;
 800871c:	4b0a      	ldr	r3, [pc, #40]	@ (8008748 <SetVOCSensorDIS_ENA+0x40>)
 800871e:	1dfa      	adds	r2, r7, #7
 8008720:	7812      	ldrb	r2, [r2, #0]
 8008722:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 8008724:	1dfb      	adds	r3, r7, #7
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <SetVOCSensorDIS_ENA+0x28>
 800872c:	4b07      	ldr	r3, [pc, #28]	@ (800874c <SetVOCSensorDIS_ENA+0x44>)
 800872e:	e000      	b.n	8008732 <SetVOCSensorDIS_ENA+0x2a>
 8008730:	4b07      	ldr	r3, [pc, #28]	@ (8008750 <SetVOCSensorDIS_ENA+0x48>)
 8008732:	4a08      	ldr	r2, [pc, #32]	@ (8008754 <SetVOCSensorDIS_ENA+0x4c>)
 8008734:	4908      	ldr	r1, [pc, #32]	@ (8008758 <SetVOCSensorDIS_ENA+0x50>)
 8008736:	2003      	movs	r0, #3
 8008738:	f006 f8dc 	bl	800e8f4 <CreateLine>
}
 800873c:	46c0      	nop			@ (mov r8, r8)
 800873e:	46bd      	mov	sp, r7
 8008740:	b002      	add	sp, #8
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000bf4 	.word	0x20000bf4
 8008748:	20000bf0 	.word	0x20000bf0
 800874c:	080247d4 	.word	0x080247d4
 8008750:	080247dc 	.word	0x080247dc
 8008754:	080247e8 	.word	0x080247e8
 8008758:	080247fc 	.word	0x080247fc

0800875c <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008760:	4b02      	ldr	r3, [pc, #8]	@ (800876c <IsPMSensorEnabled+0x10>)
 8008762:	789b      	ldrb	r3, [r3, #2]
}
 8008764:	0018      	movs	r0, r3
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	46c0      	nop			@ (mov r8, r8)
 800876c:	20000bf0 	.word	0x20000bf0

08008770 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	0002      	movs	r2, r0
 8008778:	1dfb      	adds	r3, r7, #7
 800877a:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800877c:	4b05      	ldr	r3, [pc, #20]	@ (8008794 <SetVOCSensorStatus+0x24>)
 800877e:	795b      	ldrb	r3, [r3, #5]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 8008784:	4b04      	ldr	r3, [pc, #16]	@ (8008798 <SetVOCSensorStatus+0x28>)
 8008786:	1dfa      	adds	r2, r7, #7
 8008788:	7812      	ldrb	r2, [r2, #0]
 800878a:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800878c:	46c0      	nop			@ (mov r8, r8)
 800878e:	46bd      	mov	sp, r7
 8008790:	b002      	add	sp, #8
 8008792:	bd80      	pop	{r7, pc}
 8008794:	20000bf4 	.word	0x20000bf4
 8008798:	20000bf0 	.word	0x20000bf0

0800879c <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	0002      	movs	r2, r0
 80087a4:	1dfb      	adds	r3, r7, #7
 80087a6:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 80087a8:	4b03      	ldr	r3, [pc, #12]	@ (80087b8 <SetPMSensorStatus+0x1c>)
 80087aa:	1dfa      	adds	r2, r7, #7
 80087ac:	7812      	ldrb	r2, [r2, #0]
 80087ae:	709a      	strb	r2, [r3, #2]
}
 80087b0:	46c0      	nop			@ (mov r8, r8)
 80087b2:	46bd      	mov	sp, r7
 80087b4:	b002      	add	sp, #8
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000bf0 	.word	0x20000bf0

080087bc <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 80087c0:	4b02      	ldr	r3, [pc, #8]	@ (80087cc <SetESPMeasurementDone+0x10>)
 80087c2:	2201      	movs	r2, #1
 80087c4:	711a      	strb	r2, [r3, #4]
}
 80087c6:	46c0      	nop			@ (mov r8, r8)
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000bf4 	.word	0x20000bf4

080087d0 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	603b      	str	r3, [r7, #0]
  testInit();
 80087de:	f7ff ff4d 	bl	800867c <testInit>
  I2CSensors_Init(sensorI2C);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	0018      	movs	r0, r3
 80087e6:	f7fd fbf9 	bl	8005fdc <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 80087ea:	f006 fab5 	bl	800ed58 <HIDS_DeviceConnected>
 80087ee:	0003      	movs	r3, r0
 80087f0:	001a      	movs	r2, r3
 80087f2:	2301      	movs	r3, #1
 80087f4:	4053      	eors	r3, r2
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00c      	beq.n	8008816 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 80087fc:	4a7f      	ldr	r2, [pc, #508]	@ (80089fc <Device_Init+0x22c>)
 80087fe:	4b80      	ldr	r3, [pc, #512]	@ (8008a00 <Device_Init+0x230>)
 8008800:	0019      	movs	r1, r3
 8008802:	2001      	movs	r0, #1
 8008804:	f006 f876 	bl	800e8f4 <CreateLine>
     SensorProbe.HT_Present = false;
 8008808:	4b7e      	ldr	r3, [pc, #504]	@ (8008a04 <Device_Init+0x234>)
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800880e:	4b7e      	ldr	r3, [pc, #504]	@ (8008a08 <Device_Init+0x238>)
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]
 8008814:	e008      	b.n	8008828 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 8008816:	4b7b      	ldr	r3, [pc, #492]	@ (8008a04 <Device_Init+0x234>)
 8008818:	2201      	movs	r2, #1
 800881a:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800881c:	4a7b      	ldr	r2, [pc, #492]	@ (8008a0c <Device_Init+0x23c>)
 800881e:	4b7c      	ldr	r3, [pc, #496]	@ (8008a10 <Device_Init+0x240>)
 8008820:	0019      	movs	r1, r3
 8008822:	2003      	movs	r0, #3
 8008824:	f006 f866 	bl	800e8f4 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8008828:	f003 fb2e 	bl	800be88 <SGP_DeviceConnected>
 800882c:	0003      	movs	r3, r0
 800882e:	001a      	movs	r2, r3
 8008830:	2301      	movs	r3, #1
 8008832:	4053      	eors	r3, r2
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00c      	beq.n	8008854 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 800883a:	4b72      	ldr	r3, [pc, #456]	@ (8008a04 <Device_Init+0x234>)
 800883c:	2200      	movs	r2, #0
 800883e:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008840:	4a74      	ldr	r2, [pc, #464]	@ (8008a14 <Device_Init+0x244>)
 8008842:	4b6f      	ldr	r3, [pc, #444]	@ (8008a00 <Device_Init+0x230>)
 8008844:	0019      	movs	r1, r3
 8008846:	2001      	movs	r0, #1
 8008848:	f006 f854 	bl	800e8f4 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800884c:	4b6e      	ldr	r3, [pc, #440]	@ (8008a08 <Device_Init+0x238>)
 800884e:	2200      	movs	r2, #0
 8008850:	705a      	strb	r2, [r3, #1]
 8008852:	e00b      	b.n	800886c <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 8008854:	4b6b      	ldr	r3, [pc, #428]	@ (8008a04 <Device_Init+0x234>)
 8008856:	2201      	movs	r2, #1
 8008858:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 800885a:	4b6a      	ldr	r3, [pc, #424]	@ (8008a04 <Device_Init+0x234>)
 800885c:	2201      	movs	r2, #1
 800885e:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008860:	4a6d      	ldr	r2, [pc, #436]	@ (8008a18 <Device_Init+0x248>)
 8008862:	4b6b      	ldr	r3, [pc, #428]	@ (8008a10 <Device_Init+0x240>)
 8008864:	0019      	movs	r1, r3
 8008866:	2003      	movs	r0, #3
 8008868:	f006 f844 	bl	800e8f4 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800886c:	4b65      	ldr	r3, [pc, #404]	@ (8008a04 <Device_Init+0x234>)
 800886e:	785b      	ldrb	r3, [r3, #1]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d009      	beq.n	8008888 <Device_Init+0xb8>
 8008874:	4b63      	ldr	r3, [pc, #396]	@ (8008a04 <Device_Init+0x234>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <Device_Init+0xb8>
    SetDBLED(false, true, false);
 800887c:	2200      	movs	r2, #0
 800887e:	2101      	movs	r1, #1
 8008880:	2000      	movs	r0, #0
 8008882:	f004 fe0f 	bl	800d4a4 <SetDBLED>
 8008886:	e018      	b.n	80088ba <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 8008888:	2200      	movs	r2, #0
 800888a:	2100      	movs	r1, #0
 800888c:	2001      	movs	r0, #1
 800888e:	f004 fe09 	bl	800d4a4 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008892:	4b62      	ldr	r3, [pc, #392]	@ (8008a1c <Device_Init+0x24c>)
 8008894:	2200      	movs	r2, #0
 8008896:	2101      	movs	r1, #1
 8008898:	0018      	movs	r0, r3
 800889a:	f007 ff00 	bl	801069e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800889e:	2380      	movs	r3, #128	@ 0x80
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	485e      	ldr	r0, [pc, #376]	@ (8008a1c <Device_Init+0x24c>)
 80088a4:	2201      	movs	r2, #1
 80088a6:	0019      	movs	r1, r3
 80088a8:	f007 fef9 	bl	801069e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80088ac:	2380      	movs	r3, #128	@ 0x80
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	485a      	ldr	r0, [pc, #360]	@ (8008a1c <Device_Init+0x24c>)
 80088b2:	2201      	movs	r2, #1
 80088b4:	0019      	movs	r1, r3
 80088b6:	f007 fef2 	bl	801069e <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 80088ba:	4b53      	ldr	r3, [pc, #332]	@ (8008a08 <Device_Init+0x238>)
 80088bc:	78db      	ldrb	r3, [r3, #3]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d028      	beq.n	8008914 <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 80088c2:	4a57      	ldr	r2, [pc, #348]	@ (8008a20 <Device_Init+0x250>)
 80088c4:	4b57      	ldr	r3, [pc, #348]	@ (8008a24 <Device_Init+0x254>)
 80088c6:	0019      	movs	r1, r3
 80088c8:	2002      	movs	r0, #2
 80088ca:	f006 f813 	bl	800e8f4 <CreateLine>
    if (!enableMicrophone(true)) {
 80088ce:	2001      	movs	r0, #1
 80088d0:	f003 fee6 	bl	800c6a0 <enableMicrophone>
 80088d4:	0003      	movs	r3, r0
 80088d6:	001a      	movs	r2, r3
 80088d8:	2301      	movs	r3, #1
 80088da:	4053      	eors	r3, r2
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00c      	beq.n	80088fc <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 80088e2:	4a51      	ldr	r2, [pc, #324]	@ (8008a28 <Device_Init+0x258>)
 80088e4:	4b46      	ldr	r3, [pc, #280]	@ (8008a00 <Device_Init+0x230>)
 80088e6:	0019      	movs	r1, r3
 80088e8:	2001      	movs	r0, #1
 80088ea:	f006 f803 	bl	800e8f4 <CreateLine>
      SensorProbe.MIC_Present = false;
 80088ee:	4b45      	ldr	r3, [pc, #276]	@ (8008a04 <Device_Init+0x234>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 80088f4:	4b44      	ldr	r3, [pc, #272]	@ (8008a08 <Device_Init+0x238>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	70da      	strb	r2, [r3, #3]
 80088fa:	e00b      	b.n	8008914 <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 80088fc:	4b41      	ldr	r3, [pc, #260]	@ (8008a04 <Device_Init+0x234>)
 80088fe:	2201      	movs	r2, #1
 8008900:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008902:	4b41      	ldr	r3, [pc, #260]	@ (8008a08 <Device_Init+0x238>)
 8008904:	2201      	movs	r2, #1
 8008906:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 8008908:	4a48      	ldr	r2, [pc, #288]	@ (8008a2c <Device_Init+0x25c>)
 800890a:	4b41      	ldr	r3, [pc, #260]	@ (8008a10 <Device_Init+0x240>)
 800890c:	0019      	movs	r1, r3
 800890e:	2003      	movs	r0, #3
 8008910:	f005 fff0 	bl	800e8f4 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 8008914:	f000 fe2c 	bl	8009570 <probe_sen5x>
 8008918:	1e03      	subs	r3, r0, #0
 800891a:	d122      	bne.n	8008962 <Device_Init+0x192>
    Debug("PM sensor initialised.");
 800891c:	4a44      	ldr	r2, [pc, #272]	@ (8008a30 <Device_Init+0x260>)
 800891e:	4b3c      	ldr	r3, [pc, #240]	@ (8008a10 <Device_Init+0x240>)
 8008920:	0019      	movs	r1, r3
 8008922:	2003      	movs	r0, #3
 8008924:	f005 ffe6 	bl	800e8f4 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8008928:	4b36      	ldr	r3, [pc, #216]	@ (8008a04 <Device_Init+0x234>)
 800892a:	2201      	movs	r2, #1
 800892c:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 800892e:	4b36      	ldr	r3, [pc, #216]	@ (8008a08 <Device_Init+0x238>)
 8008930:	2201      	movs	r2, #1
 8008932:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8008934:	4b3f      	ldr	r3, [pc, #252]	@ (8008a34 <Device_Init+0x264>)
 8008936:	791b      	ldrb	r3, [r3, #4]
 8008938:	2b34      	cmp	r3, #52	@ 0x34
 800893a:	d003      	beq.n	8008944 <Device_Init+0x174>
 800893c:	4b3d      	ldr	r3, [pc, #244]	@ (8008a34 <Device_Init+0x264>)
 800893e:	791b      	ldrb	r3, [r3, #4]
 8008940:	2b35      	cmp	r3, #53	@ 0x35
 8008942:	d11c      	bne.n	800897e <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 8008944:	4a3c      	ldr	r2, [pc, #240]	@ (8008a38 <Device_Init+0x268>)
 8008946:	4b37      	ldr	r3, [pc, #220]	@ (8008a24 <Device_Init+0x254>)
 8008948:	0019      	movs	r1, r3
 800894a:	2002      	movs	r0, #2
 800894c:	f005 ffd2 	bl	800e8f4 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008950:	4b2d      	ldr	r3, [pc, #180]	@ (8008a08 <Device_Init+0x238>)
 8008952:	2200      	movs	r2, #0
 8008954:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 8008956:	4b2b      	ldr	r3, [pc, #172]	@ (8008a04 <Device_Init+0x234>)
 8008958:	2200      	movs	r2, #0
 800895a:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 800895c:	f003 fc78 	bl	800c250 <SGP_SoftReset>
 8008960:	e00d      	b.n	800897e <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 8008962:	f000 fdcf 	bl	8009504 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 8008966:	4a35      	ldr	r2, [pc, #212]	@ (8008a3c <Device_Init+0x26c>)
 8008968:	4b29      	ldr	r3, [pc, #164]	@ (8008a10 <Device_Init+0x240>)
 800896a:	0019      	movs	r1, r3
 800896c:	2003      	movs	r0, #3
 800896e:	f005 ffc1 	bl	800e8f4 <CreateLine>
    SensorProbe.PM_Present = false;
 8008972:	4b24      	ldr	r3, [pc, #144]	@ (8008a04 <Device_Init+0x234>)
 8008974:	2200      	movs	r2, #0
 8008976:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 8008978:	4b23      	ldr	r3, [pc, #140]	@ (8008a08 <Device_Init+0x238>)
 800897a:	2200      	movs	r2, #0
 800897c:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800897e:	4b21      	ldr	r3, [pc, #132]	@ (8008a04 <Device_Init+0x234>)
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <Device_Init+0x1ba>
 8008986:	4b2e      	ldr	r3, [pc, #184]	@ (8008a40 <Device_Init+0x270>)
 8008988:	e000      	b.n	800898c <Device_Init+0x1bc>
 800898a:	4b2e      	ldr	r3, [pc, #184]	@ (8008a44 <Device_Init+0x274>)
 800898c:	4a2e      	ldr	r2, [pc, #184]	@ (8008a48 <Device_Init+0x278>)
 800898e:	4925      	ldr	r1, [pc, #148]	@ (8008a24 <Device_Init+0x254>)
 8008990:	2002      	movs	r0, #2
 8008992:	f005 ffaf 	bl	800e8f4 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 8008996:	4b1b      	ldr	r3, [pc, #108]	@ (8008a04 <Device_Init+0x234>)
 8008998:	785b      	ldrb	r3, [r3, #1]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <Device_Init+0x1d2>
 800899e:	4b28      	ldr	r3, [pc, #160]	@ (8008a40 <Device_Init+0x270>)
 80089a0:	e000      	b.n	80089a4 <Device_Init+0x1d4>
 80089a2:	4b28      	ldr	r3, [pc, #160]	@ (8008a44 <Device_Init+0x274>)
 80089a4:	4a29      	ldr	r2, [pc, #164]	@ (8008a4c <Device_Init+0x27c>)
 80089a6:	491f      	ldr	r1, [pc, #124]	@ (8008a24 <Device_Init+0x254>)
 80089a8:	2002      	movs	r0, #2
 80089aa:	f005 ffa3 	bl	800e8f4 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 80089ae:	4b15      	ldr	r3, [pc, #84]	@ (8008a04 <Device_Init+0x234>)
 80089b0:	789b      	ldrb	r3, [r3, #2]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <Device_Init+0x1ea>
 80089b6:	4b22      	ldr	r3, [pc, #136]	@ (8008a40 <Device_Init+0x270>)
 80089b8:	e000      	b.n	80089bc <Device_Init+0x1ec>
 80089ba:	4b22      	ldr	r3, [pc, #136]	@ (8008a44 <Device_Init+0x274>)
 80089bc:	4a24      	ldr	r2, [pc, #144]	@ (8008a50 <Device_Init+0x280>)
 80089be:	4919      	ldr	r1, [pc, #100]	@ (8008a24 <Device_Init+0x254>)
 80089c0:	2002      	movs	r0, #2
 80089c2:	f005 ff97 	bl	800e8f4 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 80089c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008a04 <Device_Init+0x234>)
 80089c8:	78db      	ldrb	r3, [r3, #3]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <Device_Init+0x202>
 80089ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008a40 <Device_Init+0x270>)
 80089d0:	e000      	b.n	80089d4 <Device_Init+0x204>
 80089d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008a44 <Device_Init+0x274>)
 80089d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008a54 <Device_Init+0x284>)
 80089d6:	4913      	ldr	r1, [pc, #76]	@ (8008a24 <Device_Init+0x254>)
 80089d8:	2002      	movs	r0, #2
 80089da:	f005 ff8b 	bl	800e8f4 <CreateLine>
  ESP_Init(espUart);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	0018      	movs	r0, r3
 80089e2:	f7fa ffed 	bl	80039c0 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 80089e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a58 <Device_Init+0x288>)
 80089e8:	4b09      	ldr	r3, [pc, #36]	@ (8008a10 <Device_Init+0x240>)
 80089ea:	0019      	movs	r1, r3
 80089ec:	2003      	movs	r0, #3
 80089ee:	f005 ff81 	bl	800e8f4 <CreateLine>
}
 80089f2:	46c0      	nop			@ (mov r8, r8)
 80089f4:	46bd      	mov	sp, r7
 80089f6:	b004      	add	sp, #16
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	46c0      	nop			@ (mov r8, r8)
 80089fc:	08024800 	.word	0x08024800
 8008a00:	08024830 	.word	0x08024830
 8008a04:	20000bf4 	.word	0x20000bf4
 8008a08:	20000bf0 	.word	0x20000bf0
 8008a0c:	08024834 	.word	0x08024834
 8008a10:	080247fc 	.word	0x080247fc
 8008a14:	08024860 	.word	0x08024860
 8008a18:	0802487c 	.word	0x0802487c
 8008a1c:	50000400 	.word	0x50000400
 8008a20:	08024894 	.word	0x08024894
 8008a24:	080248b8 	.word	0x080248b8
 8008a28:	080248bc 	.word	0x080248bc
 8008a2c:	080248e8 	.word	0x080248e8
 8008a30:	08024914 	.word	0x08024914
 8008a34:	20000c88 	.word	0x20000c88
 8008a38:	0802492c 	.word	0x0802492c
 8008a3c:	0802497c 	.word	0x0802497c
 8008a40:	080249a0 	.word	0x080249a0
 8008a44:	080249a4 	.word	0x080249a4
 8008a48:	080249a8 	.word	0x080249a8
 8008a4c:	080249c4 	.word	0x080249c4
 8008a50:	080249e0 	.word	0x080249e0
 8008a54:	080249fc 	.word	0x080249fc
 8008a58:	08024a18 	.word	0x08024a18

08008a5c <Device_Test>:

void Device_Test(){
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008a60:	4b34      	ldr	r3, [pc, #208]	@ (8008b34 <Device_Test+0xd8>)
 8008a62:	78db      	ldrb	r3, [r3, #3]
 8008a64:	2201      	movs	r2, #1
 8008a66:	4053      	eors	r3, r2
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d027      	beq.n	8008abe <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 8008a6e:	f000 fab9 	bl	8008fe4 <MIC_TestMeasurementDone>
 8008a72:	1e03      	subs	r3, r0, #0
 8008a74:	d011      	beq.n	8008a9a <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 8008a76:	4b2f      	ldr	r3, [pc, #188]	@ (8008b34 <Device_Test+0xd8>)
 8008a78:	2201      	movs	r2, #1
 8008a7a:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8008b38 <Device_Test+0xdc>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 8008a82:	f004 fc93 	bl	800d3ac <Calculate_LED_ON>
 8008a86:	0003      	movs	r3, r0
 8008a88:	0019      	movs	r1, r3
 8008a8a:	23fa      	movs	r3, #250	@ 0xfa
 8008a8c:	011a      	lsls	r2, r3, #4
 8008a8e:	23fa      	movs	r3, #250	@ 0xfa
 8008a90:	011b      	lsls	r3, r3, #4
 8008a92:	0018      	movs	r0, r3
 8008a94:	f004 fcd2 	bl	800d43c <SetStatusLED>
 8008a98:	e011      	b.n	8008abe <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 8008a9a:	f003 fddd 	bl	800c658 <micSettlingComplete>
 8008a9e:	1e03      	subs	r3, r0, #0
 8008aa0:	d00d      	beq.n	8008abe <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 8008aa2:	4b25      	ldr	r3, [pc, #148]	@ (8008b38 <Device_Test+0xdc>)
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 8008aa8:	f004 fc80 	bl	800d3ac <Calculate_LED_ON>
 8008aac:	0003      	movs	r3, r0
 8008aae:	0018      	movs	r0, r3
 8008ab0:	23fa      	movs	r3, #250	@ 0xfa
 8008ab2:	011a      	lsls	r2, r3, #4
 8008ab4:	23fa      	movs	r3, #250	@ 0xfa
 8008ab6:	011b      	lsls	r3, r3, #4
 8008ab8:	0019      	movs	r1, r3
 8008aba:	f004 fcbf 	bl	800d43c <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 8008abe:	4b1d      	ldr	r3, [pc, #116]	@ (8008b34 <Device_Test+0xd8>)
 8008ac0:	791b      	ldrb	r3, [r3, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	4053      	eors	r3, r2
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 8008acc:	f7fc fcc0 	bl	8005450 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8008ad0:	4b18      	ldr	r3, [pc, #96]	@ (8008b34 <Device_Test+0xd8>)
 8008ad2:	791b      	ldrb	r3, [r3, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d003      	beq.n	8008ae0 <Device_Test+0x84>
 8008ad8:	4b16      	ldr	r3, [pc, #88]	@ (8008b34 <Device_Test+0xd8>)
 8008ada:	78db      	ldrb	r3, [r3, #3]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d106      	bne.n	8008aee <Device_Test+0x92>
 8008ae0:	4b16      	ldr	r3, [pc, #88]	@ (8008b3c <Device_Test+0xe0>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f005 feaf 	bl	800e848 <TimestampIsReached>
 8008aea:	1e03      	subs	r3, r0, #0
 8008aec:	d01f      	beq.n	8008b2e <Device_Test+0xd2>
    Info("Test completed");
 8008aee:	4a14      	ldr	r2, [pc, #80]	@ (8008b40 <Device_Test+0xe4>)
 8008af0:	4b14      	ldr	r3, [pc, #80]	@ (8008b44 <Device_Test+0xe8>)
 8008af2:	0019      	movs	r1, r3
 8008af4:	2002      	movs	r0, #2
 8008af6:	f005 fefd 	bl	800e8f4 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 8008afa:	4b0e      	ldr	r3, [pc, #56]	@ (8008b34 <Device_Test+0xd8>)
 8008afc:	791b      	ldrb	r3, [r3, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <Device_Test+0xaa>
 8008b02:	4b11      	ldr	r3, [pc, #68]	@ (8008b48 <Device_Test+0xec>)
 8008b04:	e000      	b.n	8008b08 <Device_Test+0xac>
 8008b06:	4b11      	ldr	r3, [pc, #68]	@ (8008b4c <Device_Test+0xf0>)
 8008b08:	4a11      	ldr	r2, [pc, #68]	@ (8008b50 <Device_Test+0xf4>)
 8008b0a:	490e      	ldr	r1, [pc, #56]	@ (8008b44 <Device_Test+0xe8>)
 8008b0c:	2002      	movs	r0, #2
 8008b0e:	f005 fef1 	bl	800e8f4 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 8008b12:	4b08      	ldr	r3, [pc, #32]	@ (8008b34 <Device_Test+0xd8>)
 8008b14:	78db      	ldrb	r3, [r3, #3]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <Device_Test+0xc2>
 8008b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b48 <Device_Test+0xec>)
 8008b1c:	e000      	b.n	8008b20 <Device_Test+0xc4>
 8008b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b4c <Device_Test+0xf0>)
 8008b20:	4a0c      	ldr	r2, [pc, #48]	@ (8008b54 <Device_Test+0xf8>)
 8008b22:	4908      	ldr	r1, [pc, #32]	@ (8008b44 <Device_Test+0xe8>)
 8008b24:	2002      	movs	r0, #2
 8008b26:	f005 fee5 	bl	800e8f4 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 8008b2a:	f7ff f9cf 	bl	8007ecc <SetTestDone>
  }
}
 8008b2e:	46c0      	nop			@ (mov r8, r8)
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	20000bf4 	.word	0x20000bf4
 8008b38:	20000bf0 	.word	0x20000bf0
 8008b3c:	20000be8 	.word	0x20000be8
 8008b40:	08024a3c 	.word	0x08024a3c
 8008b44:	080248b8 	.word	0x080248b8
 8008b48:	08024a4c 	.word	0x08024a4c
 8008b4c:	08024a54 	.word	0x08024a54
 8008b50:	08024a5c 	.word	0x08024a5c
 8008b54:	08024a70 	.word	0x08024a70

08008b58 <AllDevicesReady>:

bool AllDevicesReady() {
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8008b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8008c08 <AllDevicesReady+0xb0>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	0018      	movs	r0, r3
 8008b62:	f005 fe71 	bl	800e848 <TimestampIsReached>
 8008b66:	1e03      	subs	r3, r0, #0
 8008b68:	d04a      	beq.n	8008c00 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8008b6a:	4b28      	ldr	r3, [pc, #160]	@ (8008c0c <AllDevicesReady+0xb4>)
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b06      	cmp	r3, #6
 8008b70:	d102      	bne.n	8008b78 <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8008b72:	4b27      	ldr	r3, [pc, #156]	@ (8008c10 <AllDevicesReady+0xb8>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 8008b78:	4b26      	ldr	r3, [pc, #152]	@ (8008c14 <AllDevicesReady+0xbc>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2b07      	cmp	r3, #7
 8008b7e:	d006      	beq.n	8008b8e <AllDevicesReady+0x36>
 8008b80:	4b25      	ldr	r3, [pc, #148]	@ (8008c18 <AllDevicesReady+0xc0>)
 8008b82:	795b      	ldrb	r3, [r3, #5]
 8008b84:	2201      	movs	r2, #1
 8008b86:	4053      	eors	r3, r2
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 8008b8e:	4b20      	ldr	r3, [pc, #128]	@ (8008c10 <AllDevicesReady+0xb8>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8008b94:	4b21      	ldr	r3, [pc, #132]	@ (8008c1c <AllDevicesReady+0xc4>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d102      	bne.n	8008ba2 <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 8008b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008c10 <AllDevicesReady+0xb8>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 8008ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8008c20 <AllDevicesReady+0xc8>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d102      	bne.n	8008bb0 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 8008baa:	4b19      	ldr	r3, [pc, #100]	@ (8008c10 <AllDevicesReady+0xb8>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 8008bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c24 <AllDevicesReady+0xcc>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b09      	cmp	r3, #9
 8008bb6:	d123      	bne.n	8008c00 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008bb8:	4b15      	ldr	r3, [pc, #84]	@ (8008c10 <AllDevicesReady+0xb8>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	4053      	eors	r3, r2
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d016      	beq.n	8008bf4 <AllDevicesReady+0x9c>
 8008bc6:	4b12      	ldr	r3, [pc, #72]	@ (8008c10 <AllDevicesReady+0xb8>)
 8008bc8:	785b      	ldrb	r3, [r3, #1]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	4053      	eors	r3, r2
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00f      	beq.n	8008bf4 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008c10 <AllDevicesReady+0xb8>)
 8008bd6:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008bd8:	2201      	movs	r2, #1
 8008bda:	4053      	eors	r3, r2
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d008      	beq.n	8008bf4 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008be2:	4b0b      	ldr	r3, [pc, #44]	@ (8008c10 <AllDevicesReady+0xb8>)
 8008be4:	78db      	ldrb	r3, [r3, #3]
 8008be6:	2201      	movs	r2, #1
 8008be8:	4053      	eors	r3, r2
 8008bea:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <AllDevicesReady+0x9c>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e000      	b.n	8008bf6 <AllDevicesReady+0x9e>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	1c1a      	adds	r2, r3, #0
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	e000      	b.n	8008c02 <AllDevicesReady+0xaa>
    }
  }
  return false;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	0018      	movs	r0, r3
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	20000be8 	.word	0x20000be8
 8008c0c:	20000bd5 	.word	0x20000bd5
 8008c10:	20000bf0 	.word	0x20000bf0
 8008c14:	20000bd4 	.word	0x20000bd4
 8008c18:	20000bf4 	.word	0x20000bf4
 8008c1c:	2000008d 	.word	0x2000008d
 8008c20:	20000bd6 	.word	0x20000bd6
 8008c24:	20000bd7 	.word	0x20000bd7

08008c28 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8008c2c:	4b11      	ldr	r3, [pc, #68]	@ (8008c74 <EnabledConnectedDevices+0x4c>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8008c34:	4b10      	ldr	r3, [pc, #64]	@ (8008c78 <EnabledConnectedDevices+0x50>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 8008c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008c74 <EnabledConnectedDevices+0x4c>)
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d006      	beq.n	8008c50 <EnabledConnectedDevices+0x28>
 8008c42:	4b0c      	ldr	r3, [pc, #48]	@ (8008c74 <EnabledConnectedDevices+0x4c>)
 8008c44:	795b      	ldrb	r3, [r3, #5]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 8008c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c78 <EnabledConnectedDevices+0x50>)
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008c50:	4b08      	ldr	r3, [pc, #32]	@ (8008c74 <EnabledConnectedDevices+0x4c>)
 8008c52:	789b      	ldrb	r3, [r3, #2]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 8008c58:	4b07      	ldr	r3, [pc, #28]	@ (8008c78 <EnabledConnectedDevices+0x50>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8008c5e:	4b05      	ldr	r3, [pc, #20]	@ (8008c74 <EnabledConnectedDevices+0x4c>)
 8008c60:	78db      	ldrb	r3, [r3, #3]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 8008c66:	4b04      	ldr	r3, [pc, #16]	@ (8008c78 <EnabledConnectedDevices+0x50>)
 8008c68:	2201      	movs	r2, #1
 8008c6a:	70da      	strb	r2, [r3, #3]
  }
}
 8008c6c:	46c0      	nop			@ (mov r8, r8)
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	46c0      	nop			@ (mov r8, r8)
 8008c74:	20000bf4 	.word	0x20000bf4
 8008c78:	20000bf0 	.word	0x20000bf0

08008c7c <DisableConnectedDevices>:

void DisableConnectedDevices() {
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  Debug("Devices disabled");
 8008c80:	4a0a      	ldr	r2, [pc, #40]	@ (8008cac <DisableConnectedDevices+0x30>)
 8008c82:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb0 <DisableConnectedDevices+0x34>)
 8008c84:	0019      	movs	r1, r3
 8008c86:	2003      	movs	r0, #3
 8008c88:	f005 fe34 	bl	800e8f4 <CreateLine>
  Sensor.HT_measurementEnabled = false;
 8008c8c:	4b09      	ldr	r3, [pc, #36]	@ (8008cb4 <DisableConnectedDevices+0x38>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 8008c92:	4b08      	ldr	r3, [pc, #32]	@ (8008cb4 <DisableConnectedDevices+0x38>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = false;
 8008c98:	4b06      	ldr	r3, [pc, #24]	@ (8008cb4 <DisableConnectedDevices+0x38>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 8008c9e:	4b05      	ldr	r3, [pc, #20]	@ (8008cb4 <DisableConnectedDevices+0x38>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	70da      	strb	r2, [r3, #3]
}
 8008ca4:	46c0      	nop			@ (mov r8, r8)
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	46c0      	nop			@ (mov r8, r8)
 8008cac:	08024a84 	.word	0x08024a84
 8008cb0:	080247fc 	.word	0x080247fc
 8008cb4:	20000bf0 	.word	0x20000bf0

08008cb8 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 8008cbc:	4b02      	ldr	r3, [pc, #8]	@ (8008cc8 <ResetdBAmax+0x10>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
}
 8008cc2:	46c0      	nop			@ (mov r8, r8)
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	20000c40 	.word	0x20000c40

08008ccc <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 8008cd4:	f006 fa52 	bl	800f17c <HAL_GetTick>
 8008cd8:	0002      	movs	r2, r0
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	18d2      	adds	r2, r2, r3
 8008cde:	4b03      	ldr	r3, [pc, #12]	@ (8008cec <setMICTimeStamp+0x20>)
 8008ce0:	601a      	str	r2, [r3, #0]
}
 8008ce2:	46c0      	nop			@ (mov r8, r8)
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	b002      	add	sp, #8
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	46c0      	nop			@ (mov r8, r8)
 8008cec:	20000c48 	.word	0x20000c48

08008cf0 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  counter = 0;
 8008cf4:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <ResetDBACalculator+0x1c>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 8008cfa:	4b05      	ldr	r3, [pc, #20]	@ (8008d10 <ResetDBACalculator+0x20>)
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 8008d00:	4b04      	ldr	r3, [pc, #16]	@ (8008d14 <ResetDBACalculator+0x24>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	701a      	strb	r2, [r3, #0]
}
 8008d06:	46c0      	nop			@ (mov r8, r8)
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000c44 	.word	0x20000c44
 8008d10:	2000008c 	.word	0x2000008c
 8008d14:	20000c45 	.word	0x20000c45

08008d18 <MIC_Print>:

void MIC_Print(void) {
 8008d18:	b5b0      	push	{r4, r5, r7, lr}
 8008d1a:	b08a      	sub	sp, #40	@ 0x28
 8008d1c:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 8008d1e:	4b9f      	ldr	r3, [pc, #636]	@ (8008f9c <MIC_Print+0x284>)
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4b9f      	ldr	r3, [pc, #636]	@ (8008fa0 <MIC_Print+0x288>)
 8008d24:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008d26:	4b9f      	ldr	r3, [pc, #636]	@ (8008fa4 <MIC_Print+0x28c>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	001a      	movs	r2, r3
 8008d2c:	4b9c      	ldr	r3, [pc, #624]	@ (8008fa0 <MIC_Print+0x288>)
 8008d2e:	6819      	ldr	r1, [r3, #0]
 8008d30:	4b9d      	ldr	r3, [pc, #628]	@ (8008fa8 <MIC_Print+0x290>)
 8008d32:	0092      	lsls	r2, r2, #2
 8008d34:	50d1      	str	r1, [r2, r3]
  counter++;
 8008d36:	4b9b      	ldr	r3, [pc, #620]	@ (8008fa4 <MIC_Print+0x28c>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	4b99      	ldr	r3, [pc, #612]	@ (8008fa4 <MIC_Print+0x28c>)
 8008d40:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008d42:	4b98      	ldr	r3, [pc, #608]	@ (8008fa4 <MIC_Print+0x28c>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	2b09      	cmp	r3, #9
 8008d48:	d80b      	bhi.n	8008d62 <MIC_Print+0x4a>
 8008d4a:	4b98      	ldr	r3, [pc, #608]	@ (8008fac <MIC_Print+0x294>)
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4053      	eors	r3, r2
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <MIC_Print+0x4a>
    denominator = counter;
 8008d58:	4b92      	ldr	r3, [pc, #584]	@ (8008fa4 <MIC_Print+0x28c>)
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	4b94      	ldr	r3, [pc, #592]	@ (8008fb0 <MIC_Print+0x298>)
 8008d5e:	701a      	strb	r2, [r3, #0]
 8008d60:	e005      	b.n	8008d6e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008d62:	4b93      	ldr	r3, [pc, #588]	@ (8008fb0 <MIC_Print+0x298>)
 8008d64:	220a      	movs	r2, #10
 8008d66:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008d68:	4b90      	ldr	r3, [pc, #576]	@ (8008fac <MIC_Print+0x294>)
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 8008d6e:	4b91      	ldr	r3, [pc, #580]	@ (8008fb4 <MIC_Print+0x29c>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008d74:	230f      	movs	r3, #15
 8008d76:	18fb      	adds	r3, r7, r3
 8008d78:	2200      	movs	r2, #0
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e042      	b.n	8008e04 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 8008d7e:	240f      	movs	r4, #15
 8008d80:	193b      	adds	r3, r7, r4
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	4b88      	ldr	r3, [pc, #544]	@ (8008fa8 <MIC_Print+0x290>)
 8008d86:	0092      	lsls	r2, r2, #2
 8008d88:	58d2      	ldr	r2, [r2, r3]
 8008d8a:	4b8a      	ldr	r3, [pc, #552]	@ (8008fb4 <MIC_Print+0x29c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	1c19      	adds	r1, r3, #0
 8008d90:	1c10      	adds	r0, r2, #0
 8008d92:	f7f7 fd95 	bl	80008c0 <__aeabi_fadd>
 8008d96:	1c03      	adds	r3, r0, #0
 8008d98:	1c1a      	adds	r2, r3, #0
 8008d9a:	4b86      	ldr	r3, [pc, #536]	@ (8008fb4 <MIC_Print+0x29c>)
 8008d9c:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008d9e:	193b      	adds	r3, r7, r4
 8008da0:	781a      	ldrb	r2, [r3, #0]
 8008da2:	4b81      	ldr	r3, [pc, #516]	@ (8008fa8 <MIC_Print+0x290>)
 8008da4:	0092      	lsls	r2, r2, #2
 8008da6:	58d2      	ldr	r2, [r2, r3]
 8008da8:	4b83      	ldr	r3, [pc, #524]	@ (8008fb8 <MIC_Print+0x2a0>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	1c19      	adds	r1, r3, #0
 8008dae:	1c10      	adds	r0, r2, #0
 8008db0:	f7f7 fbd2 	bl	8000558 <__aeabi_fcmpgt>
 8008db4:	1e03      	subs	r3, r0, #0
 8008db6:	d006      	beq.n	8008dc6 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 8008db8:	193b      	adds	r3, r7, r4
 8008dba:	781a      	ldrb	r2, [r3, #0]
 8008dbc:	4b7a      	ldr	r3, [pc, #488]	@ (8008fa8 <MIC_Print+0x290>)
 8008dbe:	0092      	lsls	r2, r2, #2
 8008dc0:	58d2      	ldr	r2, [r2, r3]
 8008dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8008fb8 <MIC_Print+0x2a0>)
 8008dc4:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8008fb4 <MIC_Print+0x29c>)
 8008dc8:	681c      	ldr	r4, [r3, #0]
 8008dca:	4b79      	ldr	r3, [pc, #484]	@ (8008fb0 <MIC_Print+0x298>)
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f7f8 fc4a 	bl	8001668 <__aeabi_ui2f>
 8008dd4:	1c03      	adds	r3, r0, #0
 8008dd6:	1c19      	adds	r1, r3, #0
 8008dd8:	1c20      	adds	r0, r4, #0
 8008dda:	f7f7 fefb 	bl	8000bd4 <__aeabi_fdiv>
 8008dde:	1c03      	adds	r3, r0, #0
 8008de0:	1c1a      	adds	r2, r3, #0
 8008de2:	4b76      	ldr	r3, [pc, #472]	@ (8008fbc <MIC_Print+0x2a4>)
 8008de4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 8008de6:	4b6e      	ldr	r3, [pc, #440]	@ (8008fa0 <MIC_Print+0x288>)
 8008de8:	6818      	ldr	r0, [r3, #0]
 8008dea:	4b73      	ldr	r3, [pc, #460]	@ (8008fb8 <MIC_Print+0x2a0>)
 8008dec:	6819      	ldr	r1, [r3, #0]
 8008dee:	4b73      	ldr	r3, [pc, #460]	@ (8008fbc <MIC_Print+0x2a4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	1c1a      	adds	r2, r3, #0
 8008df4:	f7fa fd04 	bl	8003800 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008df8:	210f      	movs	r1, #15
 8008dfa:	187b      	adds	r3, r7, r1
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	187b      	adds	r3, r7, r1
 8008e00:	3201      	adds	r2, #1
 8008e02:	701a      	strb	r2, [r3, #0]
 8008e04:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb0 <MIC_Print+0x298>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	220f      	movs	r2, #15
 8008e0a:	18ba      	adds	r2, r7, r2
 8008e0c:	7812      	ldrb	r2, [r2, #0]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d3b5      	bcc.n	8008d7e <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008e12:	4b63      	ldr	r3, [pc, #396]	@ (8008fa0 <MIC_Print+0x288>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	1c18      	adds	r0, r3, #0
 8008e18:	f7fa fb24 	bl	8003464 <__aeabi_f2d>
 8008e1c:	6038      	str	r0, [r7, #0]
 8008e1e:	6079      	str	r1, [r7, #4]
 8008e20:	4b65      	ldr	r3, [pc, #404]	@ (8008fb8 <MIC_Print+0x2a0>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	1c18      	adds	r0, r3, #0
 8008e26:	f7fa fb1d 	bl	8003464 <__aeabi_f2d>
 8008e2a:	0004      	movs	r4, r0
 8008e2c:	000d      	movs	r5, r1
 8008e2e:	4b63      	ldr	r3, [pc, #396]	@ (8008fbc <MIC_Print+0x2a4>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	1c18      	adds	r0, r3, #0
 8008e34:	f7fa fb16 	bl	8003464 <__aeabi_f2d>
 8008e38:	0002      	movs	r2, r0
 8008e3a:	000b      	movs	r3, r1
 8008e3c:	4960      	ldr	r1, [pc, #384]	@ (8008fc0 <MIC_Print+0x2a8>)
 8008e3e:	9204      	str	r2, [sp, #16]
 8008e40:	9305      	str	r3, [sp, #20]
 8008e42:	9402      	str	r4, [sp, #8]
 8008e44:	9503      	str	r5, [sp, #12]
 8008e46:	4b5f      	ldr	r3, [pc, #380]	@ (8008fc4 <MIC_Print+0x2ac>)
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	0008      	movs	r0, r1
 8008e50:	f017 fa38 	bl	80202c4 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 8008e54:	4b53      	ldr	r3, [pc, #332]	@ (8008fa4 <MIC_Print+0x28c>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b0a      	cmp	r3, #10
 8008e5a:	d902      	bls.n	8008e62 <MIC_Print+0x14a>
    counter = 0;
 8008e5c:	4b51      	ldr	r3, [pc, #324]	@ (8008fa4 <MIC_Print+0x28c>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008e62:	4b4f      	ldr	r3, [pc, #316]	@ (8008fa0 <MIC_Print+0x288>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4958      	ldr	r1, [pc, #352]	@ (8008fc8 <MIC_Print+0x2b0>)
 8008e68:	1c18      	adds	r0, r3, #0
 8008e6a:	f7f7 fb7f 	bl	800056c <__aeabi_fcmpge>
 8008e6e:	1e03      	subs	r3, r0, #0
 8008e70:	d004      	beq.n	8008e7c <MIC_Print+0x164>
    SetDBLED(true, true, true);
 8008e72:	2201      	movs	r2, #1
 8008e74:	2101      	movs	r1, #1
 8008e76:	2001      	movs	r0, #1
 8008e78:	f004 fb14 	bl	800d4a4 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008e7c:	4b48      	ldr	r3, [pc, #288]	@ (8008fa0 <MIC_Print+0x288>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4952      	ldr	r1, [pc, #328]	@ (8008fcc <MIC_Print+0x2b4>)
 8008e82:	1c18      	adds	r0, r3, #0
 8008e84:	f7f7 fb72 	bl	800056c <__aeabi_fcmpge>
 8008e88:	1e03      	subs	r3, r0, #0
 8008e8a:	d00c      	beq.n	8008ea6 <MIC_Print+0x18e>
 8008e8c:	4b44      	ldr	r3, [pc, #272]	@ (8008fa0 <MIC_Print+0x288>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	494d      	ldr	r1, [pc, #308]	@ (8008fc8 <MIC_Print+0x2b0>)
 8008e92:	1c18      	adds	r0, r3, #0
 8008e94:	f7f7 fb4c 	bl	8000530 <__aeabi_fcmplt>
 8008e98:	1e03      	subs	r3, r0, #0
 8008e9a:	d004      	beq.n	8008ea6 <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	2001      	movs	r0, #1
 8008ea2:	f004 faff 	bl	800d4a4 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8008fa0 <MIC_Print+0x288>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4949      	ldr	r1, [pc, #292]	@ (8008fd0 <MIC_Print+0x2b8>)
 8008eac:	1c18      	adds	r0, r3, #0
 8008eae:	f7f7 fb5d 	bl	800056c <__aeabi_fcmpge>
 8008eb2:	1e03      	subs	r3, r0, #0
 8008eb4:	d00c      	beq.n	8008ed0 <MIC_Print+0x1b8>
 8008eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8008fa0 <MIC_Print+0x288>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4944      	ldr	r1, [pc, #272]	@ (8008fcc <MIC_Print+0x2b4>)
 8008ebc:	1c18      	adds	r0, r3, #0
 8008ebe:	f7f7 fb37 	bl	8000530 <__aeabi_fcmplt>
 8008ec2:	1e03      	subs	r3, r0, #0
 8008ec4:	d004      	beq.n	8008ed0 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2101      	movs	r1, #1
 8008eca:	2001      	movs	r0, #1
 8008ecc:	f004 faea 	bl	800d4a4 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008ed0:	4b33      	ldr	r3, [pc, #204]	@ (8008fa0 <MIC_Print+0x288>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	493f      	ldr	r1, [pc, #252]	@ (8008fd4 <MIC_Print+0x2bc>)
 8008ed6:	1c18      	adds	r0, r3, #0
 8008ed8:	f7f7 fb48 	bl	800056c <__aeabi_fcmpge>
 8008edc:	1e03      	subs	r3, r0, #0
 8008ede:	d00c      	beq.n	8008efa <MIC_Print+0x1e2>
 8008ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8008fa0 <MIC_Print+0x288>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	493a      	ldr	r1, [pc, #232]	@ (8008fd0 <MIC_Print+0x2b8>)
 8008ee6:	1c18      	adds	r0, r3, #0
 8008ee8:	f7f7 fb22 	bl	8000530 <__aeabi_fcmplt>
 8008eec:	1e03      	subs	r3, r0, #0
 8008eee:	d004      	beq.n	8008efa <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	f004 fad5 	bl	800d4a4 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008efa:	4b29      	ldr	r3, [pc, #164]	@ (8008fa0 <MIC_Print+0x288>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4936      	ldr	r1, [pc, #216]	@ (8008fd8 <MIC_Print+0x2c0>)
 8008f00:	1c18      	adds	r0, r3, #0
 8008f02:	f7f7 fb33 	bl	800056c <__aeabi_fcmpge>
 8008f06:	1e03      	subs	r3, r0, #0
 8008f08:	d00c      	beq.n	8008f24 <MIC_Print+0x20c>
 8008f0a:	4b25      	ldr	r3, [pc, #148]	@ (8008fa0 <MIC_Print+0x288>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4931      	ldr	r1, [pc, #196]	@ (8008fd4 <MIC_Print+0x2bc>)
 8008f10:	1c18      	adds	r0, r3, #0
 8008f12:	f7f7 fb0d 	bl	8000530 <__aeabi_fcmplt>
 8008f16:	1e03      	subs	r3, r0, #0
 8008f18:	d004      	beq.n	8008f24 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	2000      	movs	r0, #0
 8008f20:	f004 fac0 	bl	800d4a4 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008f24:	4b1e      	ldr	r3, [pc, #120]	@ (8008fa0 <MIC_Print+0x288>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	492c      	ldr	r1, [pc, #176]	@ (8008fdc <MIC_Print+0x2c4>)
 8008f2a:	1c18      	adds	r0, r3, #0
 8008f2c:	f7f7 fb1e 	bl	800056c <__aeabi_fcmpge>
 8008f30:	1e03      	subs	r3, r0, #0
 8008f32:	d00c      	beq.n	8008f4e <MIC_Print+0x236>
 8008f34:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa0 <MIC_Print+0x288>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4927      	ldr	r1, [pc, #156]	@ (8008fd8 <MIC_Print+0x2c0>)
 8008f3a:	1c18      	adds	r0, r3, #0
 8008f3c:	f7f7 faf8 	bl	8000530 <__aeabi_fcmplt>
 8008f40:	1e03      	subs	r3, r0, #0
 8008f42:	d004      	beq.n	8008f4e <MIC_Print+0x236>
    SetDBLED(false, false, true);
 8008f44:	2201      	movs	r2, #1
 8008f46:	2100      	movs	r1, #0
 8008f48:	2000      	movs	r0, #0
 8008f4a:	f004 faab 	bl	800d4a4 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008f4e:	4b14      	ldr	r3, [pc, #80]	@ (8008fa0 <MIC_Print+0x288>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4923      	ldr	r1, [pc, #140]	@ (8008fe0 <MIC_Print+0x2c8>)
 8008f54:	1c18      	adds	r0, r3, #0
 8008f56:	f7f7 fb09 	bl	800056c <__aeabi_fcmpge>
 8008f5a:	1e03      	subs	r3, r0, #0
 8008f5c:	d00c      	beq.n	8008f78 <MIC_Print+0x260>
 8008f5e:	4b10      	ldr	r3, [pc, #64]	@ (8008fa0 <MIC_Print+0x288>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	491e      	ldr	r1, [pc, #120]	@ (8008fdc <MIC_Print+0x2c4>)
 8008f64:	1c18      	adds	r0, r3, #0
 8008f66:	f7f7 fae3 	bl	8000530 <__aeabi_fcmplt>
 8008f6a:	1e03      	subs	r3, r0, #0
 8008f6c:	d004      	beq.n	8008f78 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 8008f6e:	2201      	movs	r2, #1
 8008f70:	2100      	movs	r1, #0
 8008f72:	2001      	movs	r0, #1
 8008f74:	f004 fa96 	bl	800d4a4 <SetDBLED>
  }
  if(dBA < 35){//off
 8008f78:	4b09      	ldr	r3, [pc, #36]	@ (8008fa0 <MIC_Print+0x288>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4918      	ldr	r1, [pc, #96]	@ (8008fe0 <MIC_Print+0x2c8>)
 8008f7e:	1c18      	adds	r0, r3, #0
 8008f80:	f7f7 fad6 	bl	8000530 <__aeabi_fcmplt>
 8008f84:	1e03      	subs	r3, r0, #0
 8008f86:	d100      	bne.n	8008f8a <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 8008f88:	e004      	b.n	8008f94 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	2000      	movs	r0, #0
 8008f90:	f004 fa88 	bl	800d4a4 <SetDBLED>
}
 8008f94:	46c0      	nop			@ (mov r8, r8)
 8008f96:	46bd      	mov	sp, r7
 8008f98:	b004      	add	sp, #16
 8008f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8008f9c:	20000c3c 	.word	0x20000c3c
 8008fa0:	20000c08 	.word	0x20000c08
 8008fa4:	20000c44 	.word	0x20000c44
 8008fa8:	20000c0c 	.word	0x20000c0c
 8008fac:	20000c45 	.word	0x20000c45
 8008fb0:	2000008c 	.word	0x2000008c
 8008fb4:	20000c38 	.word	0x20000c38
 8008fb8:	20000c40 	.word	0x20000c40
 8008fbc:	20000c34 	.word	0x20000c34
 8008fc0:	08024a98 	.word	0x08024a98
 8008fc4:	20000bfc 	.word	0x20000bfc
 8008fc8:	42b40000 	.word	0x42b40000
 8008fcc:	42a00000 	.word	0x42a00000
 8008fd0:	428c0000 	.word	0x428c0000
 8008fd4:	42700000 	.word	0x42700000
 8008fd8:	42480000 	.word	0x42480000
 8008fdc:	42200000 	.word	0x42200000
 8008fe0:	420c0000 	.word	0x420c0000

08008fe4 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008fea:	4b11      	ldr	r3, [pc, #68]	@ (8009030 <MIC_TestMeasurementDone+0x4c>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	4a10      	ldr	r2, [pc, #64]	@ (8009034 <MIC_TestMeasurementDone+0x50>)
 8008ff2:	4911      	ldr	r1, [pc, #68]	@ (8009038 <MIC_TestMeasurementDone+0x54>)
 8008ff4:	2002      	movs	r0, #2
 8008ff6:	f005 fc7d 	bl	800e8f4 <CreateLine>
  if(DataReady) {
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8009030 <MIC_TestMeasurementDone+0x4c>)
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	d010      	beq.n	8009026 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8009004:	1dfb      	adds	r3, r7, #7
 8009006:	4a0d      	ldr	r2, [pc, #52]	@ (800903c <MIC_TestMeasurementDone+0x58>)
 8009008:	7812      	ldrb	r2, [r2, #0]
 800900a:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800900c:	4b0b      	ldr	r3, [pc, #44]	@ (800903c <MIC_TestMeasurementDone+0x58>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	b2db      	uxtb	r3, r3
 8009012:	4a0b      	ldr	r2, [pc, #44]	@ (8009040 <MIC_TestMeasurementDone+0x5c>)
 8009014:	4908      	ldr	r1, [pc, #32]	@ (8009038 <MIC_TestMeasurementDone+0x54>)
 8009016:	2002      	movs	r0, #2
 8009018:	f005 fc6c 	bl	800e8f4 <CreateLine>
    ResetMICIndicator();
 800901c:	f004 fb30 	bl	800d680 <ResetMICIndicator>
    return Check;
 8009020:	1dfb      	adds	r3, r7, #7
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	e000      	b.n	8009028 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8009026:	2300      	movs	r3, #0
}
 8009028:	0018      	movs	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	b002      	add	sp, #8
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000d79 	.word	0x20000d79
 8009034:	08024ae0 	.word	0x08024ae0
 8009038:	08024b0c 	.word	0x08024b0c
 800903c:	20000d7a 	.word	0x20000d7a
 8009040:	08024b10 	.word	0x08024b10

08009044 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800904a:	4b78      	ldr	r3, [pc, #480]	@ (800922c <Mic_Upkeep+0x1e8>)
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b03      	cmp	r3, #3
 8009050:	d100      	bne.n	8009054 <Mic_Upkeep+0x10>
 8009052:	e0b8      	b.n	80091c6 <Mic_Upkeep+0x182>
 8009054:	dd00      	ble.n	8009058 <Mic_Upkeep+0x14>
 8009056:	e0d3      	b.n	8009200 <Mic_Upkeep+0x1bc>
 8009058:	2b02      	cmp	r3, #2
 800905a:	d037      	beq.n	80090cc <Mic_Upkeep+0x88>
 800905c:	dd00      	ble.n	8009060 <Mic_Upkeep+0x1c>
 800905e:	e0cf      	b.n	8009200 <Mic_Upkeep+0x1bc>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <Mic_Upkeep+0x26>
 8009064:	2b01      	cmp	r3, #1
 8009066:	d014      	beq.n	8009092 <Mic_Upkeep+0x4e>
 8009068:	e0ca      	b.n	8009200 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800906a:	2001      	movs	r0, #1
 800906c:	f003 fb18 	bl	800c6a0 <enableMicrophone>
 8009070:	0003      	movs	r3, r0
 8009072:	001a      	movs	r2, r3
 8009074:	2301      	movs	r3, #1
 8009076:	4053      	eors	r3, r2
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800907e:	4a6c      	ldr	r2, [pc, #432]	@ (8009230 <Mic_Upkeep+0x1ec>)
 8009080:	4b6c      	ldr	r3, [pc, #432]	@ (8009234 <Mic_Upkeep+0x1f0>)
 8009082:	217f      	movs	r1, #127	@ 0x7f
 8009084:	0018      	movs	r0, r3
 8009086:	f005 fced 	bl	800ea64 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800908a:	4b68      	ldr	r3, [pc, #416]	@ (800922c <Mic_Upkeep+0x1e8>)
 800908c:	2201      	movs	r2, #1
 800908e:	701a      	strb	r2, [r3, #0]
    break;
 8009090:	e0c5      	b.n	800921e <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8009092:	f003 fae1 	bl	800c658 <micSettlingComplete>
 8009096:	1e03      	subs	r3, r0, #0
 8009098:	d105      	bne.n	80090a6 <Mic_Upkeep+0x62>
 800909a:	4b67      	ldr	r3, [pc, #412]	@ (8009238 <Mic_Upkeep+0x1f4>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d100      	bne.n	80090a6 <Mic_Upkeep+0x62>
 80090a4:	e0b6      	b.n	8009214 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 80090a6:	f003 fb65 	bl	800c774 <startSPLcalculation>
 80090aa:	0003      	movs	r3, r0
 80090ac:	001a      	movs	r2, r3
 80090ae:	2301      	movs	r3, #1
 80090b0:	4053      	eors	r3, r2
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80090b8:	4a5d      	ldr	r2, [pc, #372]	@ (8009230 <Mic_Upkeep+0x1ec>)
 80090ba:	4b5e      	ldr	r3, [pc, #376]	@ (8009234 <Mic_Upkeep+0x1f0>)
 80090bc:	2188      	movs	r1, #136	@ 0x88
 80090be:	0018      	movs	r0, r3
 80090c0:	f005 fcd0 	bl	800ea64 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80090c4:	4b59      	ldr	r3, [pc, #356]	@ (800922c <Mic_Upkeep+0x1e8>)
 80090c6:	2202      	movs	r2, #2
 80090c8:	701a      	strb	r2, [r3, #0]
    }
    break;
 80090ca:	e0a3      	b.n	8009214 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 80090cc:	4b5b      	ldr	r3, [pc, #364]	@ (800923c <Mic_Upkeep+0x1f8>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	2101      	movs	r1, #1
 80090d2:	0018      	movs	r0, r3
 80090d4:	f003 f9a2 	bl	800c41c <getSoundData>
 80090d8:	1e03      	subs	r3, r0, #0
 80090da:	d100      	bne.n	80090de <Mic_Upkeep+0x9a>
 80090dc:	e09c      	b.n	8009218 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 80090de:	f003 fa9b 	bl	800c618 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80090e2:	4b56      	ldr	r3, [pc, #344]	@ (800923c <Mic_Upkeep+0x1f8>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	001a      	movs	r2, r3
 80090e8:	4b54      	ldr	r3, [pc, #336]	@ (800923c <Mic_Upkeep+0x1f8>)
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	4954      	ldr	r1, [pc, #336]	@ (8009240 <Mic_Upkeep+0x1fc>)
 80090ee:	0038      	movs	r0, r7
 80090f0:	f017 f958 	bl	80203a4 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 80090f4:	4b51      	ldr	r3, [pc, #324]	@ (800923c <Mic_Upkeep+0x1f8>)
 80090f6:	89db      	ldrh	r3, [r3, #14]
 80090f8:	001a      	movs	r2, r3
 80090fa:	4b50      	ldr	r3, [pc, #320]	@ (800923c <Mic_Upkeep+0x1f8>)
 80090fc:	7c1b      	ldrb	r3, [r3, #16]
 80090fe:	4951      	ldr	r1, [pc, #324]	@ (8009244 <Mic_Upkeep+0x200>)
 8009100:	4851      	ldr	r0, [pc, #324]	@ (8009248 <Mic_Upkeep+0x204>)
 8009102:	f017 f94f 	bl	80203a4 <siprintf>
      dBValue = atof(dBbuffer);
 8009106:	003b      	movs	r3, r7
 8009108:	0018      	movs	r0, r3
 800910a:	f015 fcfb 	bl	801eb04 <atof>
 800910e:	0002      	movs	r2, r0
 8009110:	000b      	movs	r3, r1
 8009112:	0010      	movs	r0, r2
 8009114:	0019      	movs	r1, r3
 8009116:	f7fa f9ed 	bl	80034f4 <__aeabi_d2f>
 800911a:	1c02      	adds	r2, r0, #0
 800911c:	4b4b      	ldr	r3, [pc, #300]	@ (800924c <Mic_Upkeep+0x208>)
 800911e:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8009120:	4b4a      	ldr	r3, [pc, #296]	@ (800924c <Mic_Upkeep+0x208>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	494a      	ldr	r1, [pc, #296]	@ (8009250 <Mic_Upkeep+0x20c>)
 8009126:	1c18      	adds	r0, r3, #0
 8009128:	f7f7 ff3a 	bl	8000fa0 <__aeabi_fmul>
 800912c:	1c03      	adds	r3, r0, #0
 800912e:	1c18      	adds	r0, r3, #0
 8009130:	f7fa f998 	bl	8003464 <__aeabi_f2d>
 8009134:	2200      	movs	r2, #0
 8009136:	4b47      	ldr	r3, [pc, #284]	@ (8009254 <Mic_Upkeep+0x210>)
 8009138:	f7f8 fad8 	bl	80016ec <__aeabi_dadd>
 800913c:	0002      	movs	r2, r0
 800913e:	000b      	movs	r3, r1
 8009140:	0010      	movs	r0, r2
 8009142:	0019      	movs	r1, r3
 8009144:	f7fa f900 	bl	8003348 <__aeabi_d2iz>
 8009148:	0003      	movs	r3, r0
 800914a:	0018      	movs	r0, r3
 800914c:	f7fa f938 	bl	80033c0 <__aeabi_i2d>
 8009150:	2200      	movs	r2, #0
 8009152:	4b41      	ldr	r3, [pc, #260]	@ (8009258 <Mic_Upkeep+0x214>)
 8009154:	f7f8 fe2e 	bl	8001db4 <__aeabi_ddiv>
 8009158:	0002      	movs	r2, r0
 800915a:	000b      	movs	r3, r1
 800915c:	0010      	movs	r0, r2
 800915e:	0019      	movs	r1, r3
 8009160:	f7fa f9c8 	bl	80034f4 <__aeabi_d2f>
 8009164:	1c02      	adds	r2, r0, #0
 8009166:	4b39      	ldr	r3, [pc, #228]	@ (800924c <Mic_Upkeep+0x208>)
 8009168:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800916a:	f7ff fdd5 	bl	8008d18 <MIC_Print>
      if (!startSPLcalculation()) {
 800916e:	f003 fb01 	bl	800c774 <startSPLcalculation>
 8009172:	0003      	movs	r3, r0
 8009174:	001a      	movs	r2, r3
 8009176:	2301      	movs	r3, #1
 8009178:	4053      	eors	r3, r2
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d005      	beq.n	800918c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8009180:	4a2b      	ldr	r2, [pc, #172]	@ (8009230 <Mic_Upkeep+0x1ec>)
 8009182:	4b2c      	ldr	r3, [pc, #176]	@ (8009234 <Mic_Upkeep+0x1f0>)
 8009184:	2198      	movs	r1, #152	@ 0x98
 8009186:	0018      	movs	r0, r3
 8009188:	f005 fc6c 	bl	800ea64 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800918c:	2000      	movs	r0, #0
 800918e:	f003 fa87 	bl	800c6a0 <enableMicrophone>
 8009192:	0003      	movs	r3, r0
 8009194:	001a      	movs	r2, r3
 8009196:	2301      	movs	r3, #1
 8009198:	4053      	eors	r3, r2
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 80091a0:	4a23      	ldr	r2, [pc, #140]	@ (8009230 <Mic_Upkeep+0x1ec>)
 80091a2:	4b24      	ldr	r3, [pc, #144]	@ (8009234 <Mic_Upkeep+0x1f0>)
 80091a4:	219b      	movs	r1, #155	@ 0x9b
 80091a6:	0018      	movs	r0, r3
 80091a8:	f005 fc5c 	bl	800ea64 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 80091ac:	f005 ffe6 	bl	800f17c <HAL_GetTick>
 80091b0:	0003      	movs	r3, r0
 80091b2:	4a2a      	ldr	r2, [pc, #168]	@ (800925c <Mic_Upkeep+0x218>)
 80091b4:	189a      	adds	r2, r3, r2
 80091b6:	4b2a      	ldr	r3, [pc, #168]	@ (8009260 <Mic_Upkeep+0x21c>)
 80091b8:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80091ba:	4b1c      	ldr	r3, [pc, #112]	@ (800922c <Mic_Upkeep+0x1e8>)
 80091bc:	2203      	movs	r2, #3
 80091be:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80091c0:	f004 fa5e 	bl	800d680 <ResetMICIndicator>
    }
    break;
 80091c4:	e028      	b.n	8009218 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 80091c6:	4b26      	ldr	r3, [pc, #152]	@ (8009260 <Mic_Upkeep+0x21c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	0018      	movs	r0, r3
 80091cc:	f005 fb3c 	bl	800e848 <TimestampIsReached>
 80091d0:	1e03      	subs	r3, r0, #0
 80091d2:	d023      	beq.n	800921c <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 80091d4:	2001      	movs	r0, #1
 80091d6:	f003 fa63 	bl	800c6a0 <enableMicrophone>
 80091da:	0003      	movs	r3, r0
 80091dc:	001a      	movs	r2, r3
 80091de:	2301      	movs	r3, #1
 80091e0:	4053      	eors	r3, r2
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 80091e8:	4a11      	ldr	r2, [pc, #68]	@ (8009230 <Mic_Upkeep+0x1ec>)
 80091ea:	4b12      	ldr	r3, [pc, #72]	@ (8009234 <Mic_Upkeep+0x1f0>)
 80091ec:	21a6      	movs	r1, #166	@ 0xa6
 80091ee:	0018      	movs	r0, r3
 80091f0:	f005 fc38 	bl	800ea64 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 80091f4:	4b0d      	ldr	r3, [pc, #52]	@ (800922c <Mic_Upkeep+0x1e8>)
 80091f6:	2201      	movs	r2, #1
 80091f8:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 80091fa:	f004 f9ff 	bl	800d5fc <SetMICIndicator>
    }
    break;
 80091fe:	e00d      	b.n	800921c <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8009200:	4a18      	ldr	r2, [pc, #96]	@ (8009264 <Mic_Upkeep+0x220>)
 8009202:	4b19      	ldr	r3, [pc, #100]	@ (8009268 <Mic_Upkeep+0x224>)
 8009204:	0019      	movs	r1, r3
 8009206:	2003      	movs	r0, #3
 8009208:	f005 fb74 	bl	800e8f4 <CreateLine>
    MicState = MIC_STATE_INIT;
 800920c:	4b07      	ldr	r3, [pc, #28]	@ (800922c <Mic_Upkeep+0x1e8>)
 800920e:	2200      	movs	r2, #0
 8009210:	701a      	strb	r2, [r3, #0]
    break;
 8009212:	e004      	b.n	800921e <Mic_Upkeep+0x1da>
    break;
 8009214:	46c0      	nop			@ (mov r8, r8)
 8009216:	e002      	b.n	800921e <Mic_Upkeep+0x1da>
    break;
 8009218:	46c0      	nop			@ (mov r8, r8)
 800921a:	e000      	b.n	800921e <Mic_Upkeep+0x1da>
    break;
 800921c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800921e:	4b03      	ldr	r3, [pc, #12]	@ (800922c <Mic_Upkeep+0x1e8>)
 8009220:	781b      	ldrb	r3, [r3, #0]
}
 8009222:	0018      	movs	r0, r3
 8009224:	46bd      	mov	sp, r7
 8009226:	b002      	add	sp, #8
 8009228:	bd80      	pop	{r7, pc}
 800922a:	46c0      	nop			@ (mov r8, r8)
 800922c:	20000c5e 	.word	0x20000c5e
 8009230:	08024b28 	.word	0x08024b28
 8009234:	08025bd0 	.word	0x08025bd0
 8009238:	20000d79 	.word	0x20000d79
 800923c:	20000c4c 	.word	0x20000c4c
 8009240:	08024b44 	.word	0x08024b44
 8009244:	08024b4c 	.word	0x08024b4c
 8009248:	20000bfc 	.word	0x20000bfc
 800924c:	20000c3c 	.word	0x20000c3c
 8009250:	42c80000 	.word	0x42c80000
 8009254:	3fe00000 	.word	0x3fe00000
 8009258:	40590000 	.word	0x40590000
 800925c:	000002f3 	.word	0x000002f3
 8009260:	20000c48 	.word	0x20000c48
 8009264:	08024b54 	.word	0x08024b54
 8009268:	08024b74 	.word	0x08024b74

0800926c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8009272:	1d3b      	adds	r3, r7, #4
 8009274:	0018      	movs	r0, r3
 8009276:	2314      	movs	r3, #20
 8009278:	001a      	movs	r2, r3
 800927a:	2100      	movs	r1, #0
 800927c:	f017 f9d6 	bl	802062c <memset>
  RTC_DateTypeDef sDate = {0};
 8009280:	003b      	movs	r3, r7
 8009282:	2200      	movs	r2, #0
 8009284:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8009286:	4b2e      	ldr	r3, [pc, #184]	@ (8009340 <MX_RTC_Init+0xd4>)
 8009288:	4a2e      	ldr	r2, [pc, #184]	@ (8009344 <MX_RTC_Init+0xd8>)
 800928a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800928c:	4b2c      	ldr	r3, [pc, #176]	@ (8009340 <MX_RTC_Init+0xd4>)
 800928e:	2200      	movs	r2, #0
 8009290:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009292:	4b2b      	ldr	r3, [pc, #172]	@ (8009340 <MX_RTC_Init+0xd4>)
 8009294:	227f      	movs	r2, #127	@ 0x7f
 8009296:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009298:	4b29      	ldr	r3, [pc, #164]	@ (8009340 <MX_RTC_Init+0xd4>)
 800929a:	22ff      	movs	r2, #255	@ 0xff
 800929c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800929e:	4b28      	ldr	r3, [pc, #160]	@ (8009340 <MX_RTC_Init+0xd4>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80092a4:	4b26      	ldr	r3, [pc, #152]	@ (8009340 <MX_RTC_Init+0xd4>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80092aa:	4b25      	ldr	r3, [pc, #148]	@ (8009340 <MX_RTC_Init+0xd4>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80092b0:	4b23      	ldr	r3, [pc, #140]	@ (8009340 <MX_RTC_Init+0xd4>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80092b6:	4b22      	ldr	r3, [pc, #136]	@ (8009340 <MX_RTC_Init+0xd4>)
 80092b8:	0018      	movs	r0, r3
 80092ba:	f00c ffe3 	bl	8016284 <HAL_RTC_Init>
 80092be:	1e03      	subs	r3, r0, #0
 80092c0:	d001      	beq.n	80092c6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80092c2:	f7ff f9c5 	bl	8008650 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80092c6:	1d3b      	adds	r3, r7, #4
 80092c8:	220d      	movs	r2, #13
 80092ca:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80092cc:	1d3b      	adds	r3, r7, #4
 80092ce:	2200      	movs	r2, #0
 80092d0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80092d2:	1d3b      	adds	r3, r7, #4
 80092d4:	2200      	movs	r2, #0
 80092d6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80092d8:	1d3b      	adds	r3, r7, #4
 80092da:	2200      	movs	r2, #0
 80092dc:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80092de:	1d3b      	adds	r3, r7, #4
 80092e0:	2200      	movs	r2, #0
 80092e2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80092e4:	1d39      	adds	r1, r7, #4
 80092e6:	4b16      	ldr	r3, [pc, #88]	@ (8009340 <MX_RTC_Init+0xd4>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	0018      	movs	r0, r3
 80092ec:	f00d f866 	bl	80163bc <HAL_RTC_SetTime>
 80092f0:	1e03      	subs	r3, r0, #0
 80092f2:	d001      	beq.n	80092f8 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80092f4:	f7ff f9ac 	bl	8008650 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80092f8:	003b      	movs	r3, r7
 80092fa:	2206      	movs	r2, #6
 80092fc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 80092fe:	003b      	movs	r3, r7
 8009300:	2211      	movs	r2, #17
 8009302:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8009304:	003b      	movs	r3, r7
 8009306:	2217      	movs	r2, #23
 8009308:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800930a:	003b      	movs	r3, r7
 800930c:	2218      	movs	r2, #24
 800930e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8009310:	0039      	movs	r1, r7
 8009312:	4b0b      	ldr	r3, [pc, #44]	@ (8009340 <MX_RTC_Init+0xd4>)
 8009314:	2200      	movs	r2, #0
 8009316:	0018      	movs	r0, r3
 8009318:	f00d f958 	bl	80165cc <HAL_RTC_SetDate>
 800931c:	1e03      	subs	r3, r0, #0
 800931e:	d001      	beq.n	8009324 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8009320:	f7ff f996 	bl	8008650 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8009324:	4b06      	ldr	r3, [pc, #24]	@ (8009340 <MX_RTC_Init+0xd4>)
 8009326:	2200      	movs	r2, #0
 8009328:	2100      	movs	r1, #0
 800932a:	0018      	movs	r0, r3
 800932c:	f00d fb08 	bl	8016940 <HAL_RTCEx_SetWakeUpTimer_IT>
 8009330:	1e03      	subs	r3, r0, #0
 8009332:	d001      	beq.n	8009338 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8009334:	f7ff f98c 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009338:	46c0      	nop			@ (mov r8, r8)
 800933a:	46bd      	mov	sp, r7
 800933c:	b006      	add	sp, #24
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20000c60 	.word	0x20000c60
 8009344:	40002800 	.word	0x40002800

08009348 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a0a      	ldr	r2, [pc, #40]	@ (8009380 <HAL_RTC_MspInit+0x38>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d10e      	bne.n	8009378 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800935a:	4b0a      	ldr	r3, [pc, #40]	@ (8009384 <HAL_RTC_MspInit+0x3c>)
 800935c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800935e:	4b09      	ldr	r3, [pc, #36]	@ (8009384 <HAL_RTC_MspInit+0x3c>)
 8009360:	2180      	movs	r1, #128	@ 0x80
 8009362:	02c9      	lsls	r1, r1, #11
 8009364:	430a      	orrs	r2, r1
 8009366:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8009368:	2200      	movs	r2, #0
 800936a:	2100      	movs	r1, #0
 800936c:	2002      	movs	r0, #2
 800936e:	f006 fba9 	bl	800fac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8009372:	2002      	movs	r0, #2
 8009374:	f006 fbbb 	bl	800faee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009378:	46c0      	nop			@ (mov r8, r8)
 800937a:	46bd      	mov	sp, r7
 800937c:	b002      	add	sp, #8
 800937e:	bd80      	pop	{r7, pc}
 8009380:	40002800 	.word	0x40002800
 8009384:	40021000 	.word	0x40021000

08009388 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800938c:	4b02      	ldr	r3, [pc, #8]	@ (8009398 <sen5x_Get_sen5x_enable_state+0x10>)
 800938e:	781b      	ldrb	r3, [r3, #0]
}
 8009390:	0018      	movs	r0, r3
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	20000c87 	.word	0x20000c87

0800939c <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	0002      	movs	r2, r0
 80093a4:	1dfb      	adds	r3, r7, #7
 80093a6:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 80093a8:	4b03      	ldr	r3, [pc, #12]	@ (80093b8 <sen5x_Set_sen5x_state+0x1c>)
 80093aa:	1dfa      	adds	r2, r7, #7
 80093ac:	7812      	ldrb	r2, [r2, #0]
 80093ae:	701a      	strb	r2, [r3, #0]
}
 80093b0:	46c0      	nop			@ (mov r8, r8)
 80093b2:	46bd      	mov	sp, r7
 80093b4:	b002      	add	sp, #8
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000c87 	.word	0x20000c87

080093bc <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 80093c4:	f005 feda 	bl	800f17c <HAL_GetTick>
 80093c8:	0002      	movs	r2, r0
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	18d2      	adds	r2, r2, r3
 80093ce:	4b03      	ldr	r3, [pc, #12]	@ (80093dc <setsen5xReadTimer+0x20>)
 80093d0:	601a      	str	r2, [r3, #0]
}
 80093d2:	46c0      	nop			@ (mov r8, r8)
 80093d4:	46bd      	mov	sp, r7
 80093d6:	b002      	add	sp, #8
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	46c0      	nop			@ (mov r8, r8)
 80093dc:	20000c94 	.word	0x20000c94

080093e0 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	0002      	movs	r2, r0
 80093e8:	1dfb      	adds	r3, r7, #7
 80093ea:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 80093ec:	4b03      	ldr	r3, [pc, #12]	@ (80093fc <setsen5xSamplecounter+0x1c>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	701a      	strb	r2, [r3, #0]
}
 80093f2:	46c0      	nop			@ (mov r8, r8)
 80093f4:	46bd      	mov	sp, r7
 80093f6:	b002      	add	sp, #8
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	46c0      	nop			@ (mov r8, r8)
 80093fc:	20000c90 	.word	0x20000c90

08009400 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8009408:	f7ff f9a8 	bl	800875c <IsPMSensorEnabled>
 800940c:	1e03      	subs	r3, r0, #0
 800940e:	d02c      	beq.n	800946a <sen5x_enable+0x6a>
    sen5x_Enable = !sen5x_Enable;
 8009410:	4b1d      	ldr	r3, [pc, #116]	@ (8009488 <sen5x_enable+0x88>)
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	1e5a      	subs	r2, r3, #1
 8009416:	4193      	sbcs	r3, r2
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2201      	movs	r2, #1
 800941c:	4053      	eors	r3, r2
 800941e:	b2db      	uxtb	r3, r3
 8009420:	1c1a      	adds	r2, r3, #0
 8009422:	2301      	movs	r3, #1
 8009424:	4013      	ands	r3, r2
 8009426:	b2da      	uxtb	r2, r3
 8009428:	4b17      	ldr	r3, [pc, #92]	@ (8009488 <sen5x_enable+0x88>)
 800942a:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 800942c:	4b16      	ldr	r3, [pc, #88]	@ (8009488 <sen5x_enable+0x88>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <sen5x_enable+0x3c>
      setsen5xReadTimer(0);
 8009434:	2000      	movs	r0, #0
 8009436:	f7ff ffc1 	bl	80093bc <setsen5xReadTimer>
 800943a:	e009      	b.n	8009450 <sen5x_enable+0x50>
    }
    else {
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800943c:	f005 fe9e 	bl	800f17c <HAL_GetTick>
 8009440:	0002      	movs	r2, r0
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2164      	movs	r1, #100	@ 0x64
 8009446:	434b      	muls	r3, r1
 8009448:	18d3      	adds	r3, r2, r3
 800944a:	0018      	movs	r0, r3
 800944c:	f7ff ffb6 	bl	80093bc <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 8009450:	4b0d      	ldr	r3, [pc, #52]	@ (8009488 <sen5x_enable+0x88>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <sen5x_enable+0x5c>
 8009458:	4b0c      	ldr	r3, [pc, #48]	@ (800948c <sen5x_enable+0x8c>)
 800945a:	e000      	b.n	800945e <sen5x_enable+0x5e>
 800945c:	4b0c      	ldr	r3, [pc, #48]	@ (8009490 <sen5x_enable+0x90>)
 800945e:	4a0d      	ldr	r2, [pc, #52]	@ (8009494 <sen5x_enable+0x94>)
 8009460:	490d      	ldr	r1, [pc, #52]	@ (8009498 <sen5x_enable+0x98>)
 8009462:	2002      	movs	r0, #2
 8009464:	f005 fa46 	bl	800e8f4 <CreateLine>
 8009468:	e005      	b.n	8009476 <sen5x_enable+0x76>
  }
  else {
    Info("sen5x measurement is disabled");
 800946a:	4a0c      	ldr	r2, [pc, #48]	@ (800949c <sen5x_enable+0x9c>)
 800946c:	4b0a      	ldr	r3, [pc, #40]	@ (8009498 <sen5x_enable+0x98>)
 800946e:	0019      	movs	r1, r3
 8009470:	2002      	movs	r0, #2
 8009472:	f005 fa3f 	bl	800e8f4 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8009476:	4b0a      	ldr	r3, [pc, #40]	@ (80094a0 <sen5x_enable+0xa0>)
 8009478:	2201      	movs	r2, #1
 800947a:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800947c:	4b02      	ldr	r3, [pc, #8]	@ (8009488 <sen5x_enable+0x88>)
 800947e:	781b      	ldrb	r3, [r3, #0]
}
 8009480:	0018      	movs	r0, r3
 8009482:	46bd      	mov	sp, r7
 8009484:	b002      	add	sp, #8
 8009486:	bd80      	pop	{r7, pc}
 8009488:	20000c87 	.word	0x20000c87
 800948c:	08024b78 	.word	0x08024b78
 8009490:	08024b80 	.word	0x08024b80
 8009494:	08024b8c 	.word	0x08024b8c
 8009498:	08024ba8 	.word	0x08024ba8
 800949c:	08024bac 	.word	0x08024bac
 80094a0:	2000008d 	.word	0x2000008d

080094a4 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 80094a8:	2380      	movs	r3, #128	@ 0x80
 80094aa:	015b      	lsls	r3, r3, #5
 80094ac:	480f      	ldr	r0, [pc, #60]	@ (80094ec <sen5x_Power_On+0x48>)
 80094ae:	2201      	movs	r2, #1
 80094b0:	0019      	movs	r1, r3
 80094b2:	f007 f8f4 	bl	801069e <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 80094b6:	4a0e      	ldr	r2, [pc, #56]	@ (80094f0 <sen5x_Power_On+0x4c>)
 80094b8:	4b0e      	ldr	r3, [pc, #56]	@ (80094f4 <sen5x_Power_On+0x50>)
 80094ba:	0019      	movs	r1, r3
 80094bc:	2003      	movs	r0, #3
 80094be:	f005 fa19 	bl	800e8f4 <CreateLine>
  HAL_Delay(150);
 80094c2:	2096      	movs	r0, #150	@ 0x96
 80094c4:	f005 fe64 	bl	800f190 <HAL_Delay>
  if (sen5x_device_reset()) {
 80094c8:	f001 f990 	bl	800a7ec <sen5x_device_reset>
 80094cc:	1e03      	subs	r3, r0, #0
 80094ce:	d006      	beq.n	80094de <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 80094d0:	4a09      	ldr	r2, [pc, #36]	@ (80094f8 <sen5x_Power_On+0x54>)
 80094d2:	4b0a      	ldr	r3, [pc, #40]	@ (80094fc <sen5x_Power_On+0x58>)
 80094d4:	0019      	movs	r1, r3
 80094d6:	2001      	movs	r0, #1
 80094d8:	f005 fa0c 	bl	800e8f4 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 80094dc:	e002      	b.n	80094e4 <sen5x_Power_On+0x40>
    sen5x_On = true;
 80094de:	4b08      	ldr	r3, [pc, #32]	@ (8009500 <sen5x_Power_On+0x5c>)
 80094e0:	2201      	movs	r2, #1
 80094e2:	701a      	strb	r2, [r3, #0]
}
 80094e4:	46c0      	nop			@ (mov r8, r8)
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	46c0      	nop			@ (mov r8, r8)
 80094ec:	50000800 	.word	0x50000800
 80094f0:	08024bcc 	.word	0x08024bcc
 80094f4:	08024be8 	.word	0x08024be8
 80094f8:	08024bec 	.word	0x08024bec
 80094fc:	08024c14 	.word	0x08024c14
 8009500:	20000c85 	.word	0x20000c85

08009504 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 8009508:	4b0e      	ldr	r3, [pc, #56]	@ (8009544 <sen5x_Power_Off+0x40>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d006      	beq.n	800951e <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 8009510:	4a0d      	ldr	r2, [pc, #52]	@ (8009548 <sen5x_Power_Off+0x44>)
 8009512:	4b0e      	ldr	r3, [pc, #56]	@ (800954c <sen5x_Power_Off+0x48>)
 8009514:	0019      	movs	r1, r3
 8009516:	2003      	movs	r0, #3
 8009518:	f005 f9ec 	bl	800e8f4 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800951c:	e00f      	b.n	800953e <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800951e:	4a0c      	ldr	r2, [pc, #48]	@ (8009550 <sen5x_Power_Off+0x4c>)
 8009520:	4b0a      	ldr	r3, [pc, #40]	@ (800954c <sen5x_Power_Off+0x48>)
 8009522:	0019      	movs	r1, r3
 8009524:	2003      	movs	r0, #3
 8009526:	f005 f9e5 	bl	800e8f4 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800952a:	2380      	movs	r3, #128	@ 0x80
 800952c:	015b      	lsls	r3, r3, #5
 800952e:	4809      	ldr	r0, [pc, #36]	@ (8009554 <sen5x_Power_Off+0x50>)
 8009530:	2200      	movs	r2, #0
 8009532:	0019      	movs	r1, r3
 8009534:	f007 f8b3 	bl	801069e <HAL_GPIO_WritePin>
      sen5x_On = false;
 8009538:	4b07      	ldr	r3, [pc, #28]	@ (8009558 <sen5x_Power_Off+0x54>)
 800953a:	2200      	movs	r2, #0
 800953c:	701a      	strb	r2, [r3, #0]
}
 800953e:	46c0      	nop			@ (mov r8, r8)
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20000c86 	.word	0x20000c86
 8009548:	08024c18 	.word	0x08024c18
 800954c:	08024be8 	.word	0x08024be8
 8009550:	08024c48 	.word	0x08024c48
 8009554:	50000800 	.word	0x50000800
 8009558:	20000c85 	.word	0x20000c85

0800955c <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8009560:	4b02      	ldr	r3, [pc, #8]	@ (800956c <reset_fanCleaningDone+0x10>)
 8009562:	2200      	movs	r2, #0
 8009564:	701a      	strb	r2, [r3, #0]
}
 8009566:	46c0      	nop			@ (mov r8, r8)
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20000c84 	.word	0x20000c84

08009570 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8009570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009572:	b093      	sub	sp, #76	@ 0x4c
 8009574:	af04      	add	r7, sp, #16
  int16_t error = 0;
 8009576:	2436      	movs	r4, #54	@ 0x36
 8009578:	193b      	adds	r3, r7, r4
 800957a:	2200      	movs	r2, #0
 800957c:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800957e:	2335      	movs	r3, #53	@ 0x35
 8009580:	18fb      	adds	r3, r7, r3
 8009582:	2220      	movs	r2, #32
 8009584:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 8009586:	2334      	movs	r3, #52	@ 0x34
 8009588:	18fb      	adds	r3, r7, r3
 800958a:	2220      	movs	r2, #32
 800958c:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800958e:	f7ff ff89 	bl	80094a4 <sen5x_Power_On>
  error = sen5x_device_reset();
 8009592:	0025      	movs	r5, r4
 8009594:	193c      	adds	r4, r7, r4
 8009596:	f001 f929 	bl	800a7ec <sen5x_device_reset>
 800959a:	0003      	movs	r3, r0
 800959c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800959e:	002c      	movs	r4, r5
 80095a0:	193b      	adds	r3, r7, r4
 80095a2:	2200      	movs	r2, #0
 80095a4:	5e9b      	ldrsh	r3, [r3, r2]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 80095aa:	193b      	adds	r3, r7, r4
 80095ac:	2200      	movs	r2, #0
 80095ae:	5e9b      	ldrsh	r3, [r3, r2]
 80095b0:	4a75      	ldr	r2, [pc, #468]	@ (8009788 <probe_sen5x+0x218>)
 80095b2:	4976      	ldr	r1, [pc, #472]	@ (800978c <probe_sen5x+0x21c>)
 80095b4:	2001      	movs	r0, #1
 80095b6:	f005 f99d 	bl	800e8f4 <CreateLine>
      return error;
 80095ba:	193b      	adds	r3, r7, r4
 80095bc:	2200      	movs	r2, #0
 80095be:	5e9b      	ldrsh	r3, [r3, r2]
 80095c0:	e0de      	b.n	8009780 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 80095c2:	2536      	movs	r5, #54	@ 0x36
 80095c4:	197c      	adds	r4, r7, r5
 80095c6:	2335      	movs	r3, #53	@ 0x35
 80095c8:	18fb      	adds	r3, r7, r3
 80095ca:	781a      	ldrb	r2, [r3, #0]
 80095cc:	230c      	movs	r3, #12
 80095ce:	18fb      	adds	r3, r7, r3
 80095d0:	0011      	movs	r1, r2
 80095d2:	0018      	movs	r0, r3
 80095d4:	f000 fff6 	bl	800a5c4 <sen5x_get_serial_number>
 80095d8:	0003      	movs	r3, r0
 80095da:	8023      	strh	r3, [r4, #0]
  if (error) {
 80095dc:	197b      	adds	r3, r7, r5
 80095de:	2200      	movs	r2, #0
 80095e0:	5e9b      	ldrsh	r3, [r3, r2]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00b      	beq.n	80095fe <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 80095e6:	197b      	adds	r3, r7, r5
 80095e8:	2200      	movs	r2, #0
 80095ea:	5e9a      	ldrsh	r2, [r3, r2]
 80095ec:	4b68      	ldr	r3, [pc, #416]	@ (8009790 <probe_sen5x+0x220>)
 80095ee:	0011      	movs	r1, r2
 80095f0:	0018      	movs	r0, r3
 80095f2:	f016 fe67 	bl	80202c4 <iprintf>
      return error;
 80095f6:	197b      	adds	r3, r7, r5
 80095f8:	2200      	movs	r2, #0
 80095fa:	5e9b      	ldrsh	r3, [r3, r2]
 80095fc:	e0c0      	b.n	8009780 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 80095fe:	230c      	movs	r3, #12
 8009600:	18fa      	adds	r2, r7, r3
 8009602:	4b64      	ldr	r3, [pc, #400]	@ (8009794 <probe_sen5x+0x224>)
 8009604:	0011      	movs	r1, r2
 8009606:	0018      	movs	r0, r3
 8009608:	f016 fe5c 	bl	80202c4 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800960c:	2536      	movs	r5, #54	@ 0x36
 800960e:	197c      	adds	r4, r7, r5
 8009610:	2334      	movs	r3, #52	@ 0x34
 8009612:	18fb      	adds	r3, r7, r3
 8009614:	781a      	ldrb	r2, [r3, #0]
 8009616:	4b60      	ldr	r3, [pc, #384]	@ (8009798 <probe_sen5x+0x228>)
 8009618:	0011      	movs	r1, r2
 800961a:	0018      	movs	r0, r3
 800961c:	f000 ff7c 	bl	800a518 <sen5x_get_product_name>
 8009620:	0003      	movs	r3, r0
 8009622:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009624:	197b      	adds	r3, r7, r5
 8009626:	2200      	movs	r2, #0
 8009628:	5e9b      	ldrsh	r3, [r3, r2]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00b      	beq.n	8009646 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800962e:	197b      	adds	r3, r7, r5
 8009630:	2200      	movs	r2, #0
 8009632:	5e9a      	ldrsh	r2, [r3, r2]
 8009634:	4b59      	ldr	r3, [pc, #356]	@ (800979c <probe_sen5x+0x22c>)
 8009636:	0011      	movs	r1, r2
 8009638:	0018      	movs	r0, r3
 800963a:	f016 fe43 	bl	80202c4 <iprintf>
      return error;
 800963e:	197b      	adds	r3, r7, r5
 8009640:	2200      	movs	r2, #0
 8009642:	5e9b      	ldrsh	r3, [r3, r2]
 8009644:	e09c      	b.n	8009780 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 8009646:	4a54      	ldr	r2, [pc, #336]	@ (8009798 <probe_sen5x+0x228>)
 8009648:	4b55      	ldr	r3, [pc, #340]	@ (80097a0 <probe_sen5x+0x230>)
 800964a:	0011      	movs	r1, r2
 800964c:	0018      	movs	r0, r3
 800964e:	f016 fe39 	bl	80202c4 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8009652:	2636      	movs	r6, #54	@ 0x36
 8009654:	19bc      	adds	r4, r7, r6
 8009656:	2308      	movs	r3, #8
 8009658:	18fd      	adds	r5, r7, r3
 800965a:	2309      	movs	r3, #9
 800965c:	18fa      	adds	r2, r7, r3
 800965e:	230a      	movs	r3, #10
 8009660:	18f9      	adds	r1, r7, r3
 8009662:	230b      	movs	r3, #11
 8009664:	18f8      	adds	r0, r7, r3
 8009666:	1d7b      	adds	r3, r7, #5
 8009668:	9302      	str	r3, [sp, #8]
 800966a:	1dbb      	adds	r3, r7, #6
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	1dfb      	adds	r3, r7, #7
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	002b      	movs	r3, r5
 8009674:	f000 fffc 	bl	800a670 <sen5x_get_version>
 8009678:	0003      	movs	r3, r0
 800967a:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800967c:	19bb      	adds	r3, r7, r6
 800967e:	2200      	movs	r2, #0
 8009680:	5e9b      	ldrsh	r3, [r3, r2]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00b      	beq.n	800969e <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8009686:	19bb      	adds	r3, r7, r6
 8009688:	2200      	movs	r2, #0
 800968a:	5e9a      	ldrsh	r2, [r3, r2]
 800968c:	4b45      	ldr	r3, [pc, #276]	@ (80097a4 <probe_sen5x+0x234>)
 800968e:	0011      	movs	r1, r2
 8009690:	0018      	movs	r0, r3
 8009692:	f016 fe17 	bl	80202c4 <iprintf>
      return error;
 8009696:	19bb      	adds	r3, r7, r6
 8009698:	2200      	movs	r2, #0
 800969a:	5e9b      	ldrsh	r3, [r3, r2]
 800969c:	e070      	b.n	8009780 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800969e:	230b      	movs	r3, #11
 80096a0:	18fb      	adds	r3, r7, r3
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	0019      	movs	r1, r3
 80096a6:	230a      	movs	r3, #10
 80096a8:	18fb      	adds	r3, r7, r3
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	001a      	movs	r2, r3
 80096ae:	2308      	movs	r3, #8
 80096b0:	18fb      	adds	r3, r7, r3
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	001c      	movs	r4, r3
 80096b6:	1dfb      	adds	r3, r7, #7
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	483b      	ldr	r0, [pc, #236]	@ (80097a8 <probe_sen5x+0x238>)
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	0023      	movs	r3, r4
 80096c0:	f016 fe00 	bl	80202c4 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 80096c4:	2300      	movs	r3, #0
 80096c6:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 80096c8:	262e      	movs	r6, #46	@ 0x2e
 80096ca:	19bb      	adds	r3, r7, r6
 80096cc:	2200      	movs	r2, #0
 80096ce:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 80096d0:	232c      	movs	r3, #44	@ 0x2c
 80096d2:	18fb      	adds	r3, r7, r3
 80096d4:	2200      	movs	r2, #0
 80096d6:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 80096d8:	4934      	ldr	r1, [pc, #208]	@ (80097ac <probe_sen5x+0x23c>)
 80096da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096dc:	f7f7 fc60 	bl	8000fa0 <__aeabi_fmul>
 80096e0:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 80096e2:	1c18      	adds	r0, r3, #0
 80096e4:	f7f7 ff54 	bl	8001590 <__aeabi_f2iz>
 80096e8:	0003      	movs	r3, r0
 80096ea:	b218      	sxth	r0, r3
 80096ec:	2536      	movs	r5, #54	@ 0x36
 80096ee:	197c      	adds	r4, r7, r5
 80096f0:	232c      	movs	r3, #44	@ 0x2c
 80096f2:	18fb      	adds	r3, r7, r3
 80096f4:	881a      	ldrh	r2, [r3, #0]
 80096f6:	19bb      	adds	r3, r7, r6
 80096f8:	2100      	movs	r1, #0
 80096fa:	5e5b      	ldrsh	r3, [r3, r1]
 80096fc:	0019      	movs	r1, r3
 80096fe:	f000 fea7 	bl	800a450 <sen5x_set_temperature_offset_parameters>
 8009702:	0003      	movs	r3, r0
 8009704:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009706:	197b      	adds	r3, r7, r5
 8009708:	2200      	movs	r2, #0
 800970a:	5e9b      	ldrsh	r3, [r3, r2]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8009710:	197b      	adds	r3, r7, r5
 8009712:	2200      	movs	r2, #0
 8009714:	5e9b      	ldrsh	r3, [r3, r2]
 8009716:	4a26      	ldr	r2, [pc, #152]	@ (80097b0 <probe_sen5x+0x240>)
 8009718:	491c      	ldr	r1, [pc, #112]	@ (800978c <probe_sen5x+0x21c>)
 800971a:	2001      	movs	r0, #1
 800971c:	f005 f8ea 	bl	800e8f4 <CreateLine>
      return error;
 8009720:	197b      	adds	r3, r7, r5
 8009722:	2200      	movs	r2, #0
 8009724:	5e9b      	ldrsh	r3, [r3, r2]
 8009726:	e02b      	b.n	8009780 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8009728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800972a:	f7f9 fe9b 	bl	8003464 <__aeabi_f2d>
 800972e:	0002      	movs	r2, r0
 8009730:	000b      	movs	r3, r1
 8009732:	4820      	ldr	r0, [pc, #128]	@ (80097b4 <probe_sen5x+0x244>)
 8009734:	4920      	ldr	r1, [pc, #128]	@ (80097b8 <probe_sen5x+0x248>)
 8009736:	9200      	str	r2, [sp, #0]
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	0002      	movs	r2, r0
 800973c:	2002      	movs	r0, #2
 800973e:	f005 f8d9 	bl	800e8f4 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 8009742:	f7fc ff85 	bl	8006650 <Check_USB_PowerOn>
 8009746:	0003      	movs	r3, r0
 8009748:	001a      	movs	r2, r3
 800974a:	2301      	movs	r3, #1
 800974c:	4053      	eors	r3, r2
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00a      	beq.n	800976a <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 8009754:	f7ff fed6 	bl	8009504 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 8009758:	f005 fd10 	bl	800f17c <HAL_GetTick>
 800975c:	0003      	movs	r3, r0
 800975e:	22fa      	movs	r2, #250	@ 0xfa
 8009760:	00d2      	lsls	r2, r2, #3
 8009762:	189a      	adds	r2, r3, r2
 8009764:	4b15      	ldr	r3, [pc, #84]	@ (80097bc <probe_sen5x+0x24c>)
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	e006      	b.n	8009778 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800976a:	f005 fd07 	bl	800f17c <HAL_GetTick>
 800976e:	0003      	movs	r3, r0
 8009770:	4a13      	ldr	r2, [pc, #76]	@ (80097c0 <probe_sen5x+0x250>)
 8009772:	189a      	adds	r2, r3, r2
 8009774:	4b11      	ldr	r3, [pc, #68]	@ (80097bc <probe_sen5x+0x24c>)
 8009776:	601a      	str	r2, [r3, #0]
  }
  return error;
 8009778:	2336      	movs	r3, #54	@ 0x36
 800977a:	18fb      	adds	r3, r7, r3
 800977c:	2200      	movs	r2, #0
 800977e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009780:	0018      	movs	r0, r3
 8009782:	46bd      	mov	sp, r7
 8009784:	b00f      	add	sp, #60	@ 0x3c
 8009786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009788:	08024c64 	.word	0x08024c64
 800978c:	08024c14 	.word	0x08024c14
 8009790:	08024c90 	.word	0x08024c90
 8009794:	08024cc0 	.word	0x08024cc0
 8009798:	20000c88 	.word	0x20000c88
 800979c:	08024cd4 	.word	0x08024cd4
 80097a0:	08024d04 	.word	0x08024d04
 80097a4:	08024d18 	.word	0x08024d18
 80097a8:	08024d44 	.word	0x08024d44
 80097ac:	43480000 	.word	0x43480000
 80097b0:	08024d68 	.word	0x08024d68
 80097b4:	08024da8 	.word	0x08024da8
 80097b8:	08024ba8 	.word	0x08024ba8
 80097bc:	20000c94 	.word	0x20000c94
 80097c0:	00006d60 	.word	0x00006d60

080097c4 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 80097c4:	b590      	push	{r4, r7, lr}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 80097ca:	1dbb      	adds	r3, r7, #6
 80097cc:	2200      	movs	r2, #0
 80097ce:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 80097d0:	4b1b      	ldr	r3, [pc, #108]	@ (8009840 <sen5x_lightup_measurement+0x7c>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00b      	beq.n	80097f0 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 80097d8:	4a1a      	ldr	r2, [pc, #104]	@ (8009844 <sen5x_lightup_measurement+0x80>)
 80097da:	4b1b      	ldr	r3, [pc, #108]	@ (8009848 <sen5x_lightup_measurement+0x84>)
 80097dc:	0019      	movs	r1, r3
 80097de:	2002      	movs	r0, #2
 80097e0:	f005 f888 	bl	800e8f4 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80097e4:	1dbc      	adds	r4, r7, #6
 80097e6:	f000 fcbf 	bl	800a168 <sen5x_start_measurement_without_pm>
 80097ea:	0003      	movs	r3, r0
 80097ec:	8023      	strh	r3, [r4, #0]
 80097ee:	e00a      	b.n	8009806 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 80097f0:	4a16      	ldr	r2, [pc, #88]	@ (800984c <sen5x_lightup_measurement+0x88>)
 80097f2:	4b15      	ldr	r3, [pc, #84]	@ (8009848 <sen5x_lightup_measurement+0x84>)
 80097f4:	0019      	movs	r1, r3
 80097f6:	2002      	movs	r0, #2
 80097f8:	f005 f87c 	bl	800e8f4 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 80097fc:	1dbc      	adds	r4, r7, #6
 80097fe:	f000 fc85 	bl	800a10c <sen5x_start_measurement>
 8009802:	0003      	movs	r3, r0
 8009804:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 8009806:	1dbb      	adds	r3, r7, #6
 8009808:	2200      	movs	r2, #0
 800980a:	5e9b      	ldrsh	r3, [r3, r2]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d008      	beq.n	8009822 <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 8009810:	1dbb      	adds	r3, r7, #6
 8009812:	2200      	movs	r2, #0
 8009814:	5e9b      	ldrsh	r3, [r3, r2]
 8009816:	4a0e      	ldr	r2, [pc, #56]	@ (8009850 <sen5x_lightup_measurement+0x8c>)
 8009818:	490e      	ldr	r1, [pc, #56]	@ (8009854 <sen5x_lightup_measurement+0x90>)
 800981a:	2001      	movs	r0, #1
 800981c:	f005 f86a 	bl	800e8f4 <CreateLine>
 8009820:	e007      	b.n	8009832 <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 8009822:	f7fc ff45 	bl	80066b0 <showTime>
    Info("sen5x_start_measurement executed");
 8009826:	4a0c      	ldr	r2, [pc, #48]	@ (8009858 <sen5x_lightup_measurement+0x94>)
 8009828:	4b07      	ldr	r3, [pc, #28]	@ (8009848 <sen5x_lightup_measurement+0x84>)
 800982a:	0019      	movs	r1, r3
 800982c:	2002      	movs	r0, #2
 800982e:	f005 f861 	bl	800e8f4 <CreateLine>
  }
  return error;
 8009832:	1dbb      	adds	r3, r7, #6
 8009834:	2200      	movs	r2, #0
 8009836:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009838:	0018      	movs	r0, r3
 800983a:	46bd      	mov	sp, r7
 800983c:	b003      	add	sp, #12
 800983e:	bd90      	pop	{r4, r7, pc}
 8009840:	20000c86 	.word	0x20000c86
 8009844:	08024de0 	.word	0x08024de0
 8009848:	08024ba8 	.word	0x08024ba8
 800984c:	08024e0c 	.word	0x08024e0c
 8009850:	08024e2c 	.word	0x08024e2c
 8009854:	08024c14 	.word	0x08024c14
 8009858:	08024e5c 	.word	0x08024e5c

0800985c <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800985c:	b590      	push	{r4, r7, lr}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
  int16_t error = 0;
 8009862:	1dbb      	adds	r3, r7, #6
 8009864:	2200      	movs	r2, #0
 8009866:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 8009868:	4b21      	ldr	r3, [pc, #132]	@ (80098f0 <sen5x_extinguish_measurement+0x94>)
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d01e      	beq.n	80098ae <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 8009870:	4a20      	ldr	r2, [pc, #128]	@ (80098f4 <sen5x_extinguish_measurement+0x98>)
 8009872:	4b21      	ldr	r3, [pc, #132]	@ (80098f8 <sen5x_extinguish_measurement+0x9c>)
 8009874:	0019      	movs	r1, r3
 8009876:	2002      	movs	r0, #2
 8009878:	f005 f83c 	bl	800e8f4 <CreateLine>
    Info("PM measurement is disabled");
 800987c:	4a1f      	ldr	r2, [pc, #124]	@ (80098fc <sen5x_extinguish_measurement+0xa0>)
 800987e:	4b1e      	ldr	r3, [pc, #120]	@ (80098f8 <sen5x_extinguish_measurement+0x9c>)
 8009880:	0019      	movs	r1, r3
 8009882:	2002      	movs	r0, #2
 8009884:	f005 f836 	bl	800e8f4 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009888:	1dbc      	adds	r4, r7, #6
 800988a:	f000 fc6d 	bl	800a168 <sen5x_start_measurement_without_pm>
 800988e:	0003      	movs	r3, r0
 8009890:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009892:	1dbb      	adds	r3, r7, #6
 8009894:	2200      	movs	r2, #0
 8009896:	5e9b      	ldrsh	r3, [r3, r2]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d022      	beq.n	80098e2 <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800989c:	1dbb      	adds	r3, r7, #6
 800989e:	2200      	movs	r2, #0
 80098a0:	5e9b      	ldrsh	r3, [r3, r2]
 80098a2:	4a17      	ldr	r2, [pc, #92]	@ (8009900 <sen5x_extinguish_measurement+0xa4>)
 80098a4:	4917      	ldr	r1, [pc, #92]	@ (8009904 <sen5x_extinguish_measurement+0xa8>)
 80098a6:	2001      	movs	r0, #1
 80098a8:	f005 f824 	bl	800e8f4 <CreateLine>
 80098ac:	e019      	b.n	80098e2 <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 80098ae:	1dbc      	adds	r4, r7, #6
 80098b0:	f000 fc88 	bl	800a1c4 <sen5x_stop_measurement>
 80098b4:	0003      	movs	r3, r0
 80098b6:	8023      	strh	r3, [r4, #0]
    showTime();
 80098b8:	f7fc fefa 	bl	80066b0 <showTime>
    Info("sen5x_stop_measurement executed");
 80098bc:	4a12      	ldr	r2, [pc, #72]	@ (8009908 <sen5x_extinguish_measurement+0xac>)
 80098be:	4b0e      	ldr	r3, [pc, #56]	@ (80098f8 <sen5x_extinguish_measurement+0x9c>)
 80098c0:	0019      	movs	r1, r3
 80098c2:	2002      	movs	r0, #2
 80098c4:	f005 f816 	bl	800e8f4 <CreateLine>
    if (error) {
 80098c8:	1dbb      	adds	r3, r7, #6
 80098ca:	2200      	movs	r2, #0
 80098cc:	5e9b      	ldrsh	r3, [r3, r2]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d007      	beq.n	80098e2 <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 80098d2:	1dbb      	adds	r3, r7, #6
 80098d4:	2200      	movs	r2, #0
 80098d6:	5e9b      	ldrsh	r3, [r3, r2]
 80098d8:	4a0c      	ldr	r2, [pc, #48]	@ (800990c <sen5x_extinguish_measurement+0xb0>)
 80098da:	490a      	ldr	r1, [pc, #40]	@ (8009904 <sen5x_extinguish_measurement+0xa8>)
 80098dc:	2001      	movs	r0, #1
 80098de:	f005 f809 	bl	800e8f4 <CreateLine>
    }
  }
  return error;
 80098e2:	1dbb      	adds	r3, r7, #6
 80098e4:	2200      	movs	r2, #0
 80098e6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80098e8:	0018      	movs	r0, r3
 80098ea:	46bd      	mov	sp, r7
 80098ec:	b003      	add	sp, #12
 80098ee:	bd90      	pop	{r4, r7, pc}
 80098f0:	20000c86 	.word	0x20000c86
 80098f4:	08024e80 	.word	0x08024e80
 80098f8:	08024ba8 	.word	0x08024ba8
 80098fc:	08024eb8 	.word	0x08024eb8
 8009900:	08024ed4 	.word	0x08024ed4
 8009904:	08024c14 	.word	0x08024c14
 8009908:	08024f14 	.word	0x08024f14
 800990c:	08024f34 	.word	0x08024f34

08009910 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8009910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009912:	b08d      	sub	sp, #52	@ 0x34
 8009914:	af04      	add	r7, sp, #16
 8009916:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8009918:	261e      	movs	r6, #30
 800991a:	19bb      	adds	r3, r7, r6
 800991c:	2200      	movs	r2, #0
 800991e:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8009920:	19bc      	adds	r4, r7, r6
 8009922:	2316      	movs	r3, #22
 8009924:	18fd      	adds	r5, r7, r3
 8009926:	2318      	movs	r3, #24
 8009928:	18fa      	adds	r2, r7, r3
 800992a:	231a      	movs	r3, #26
 800992c:	18f9      	adds	r1, r7, r3
 800992e:	231c      	movs	r3, #28
 8009930:	18f8      	adds	r0, r7, r3
 8009932:	230e      	movs	r3, #14
 8009934:	18fb      	adds	r3, r7, r3
 8009936:	9303      	str	r3, [sp, #12]
 8009938:	2310      	movs	r3, #16
 800993a:	18fb      	adds	r3, r7, r3
 800993c:	9302      	str	r3, [sp, #8]
 800993e:	2312      	movs	r3, #18
 8009940:	18fb      	adds	r3, r7, r3
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	2314      	movs	r3, #20
 8009946:	18fb      	adds	r3, r7, r3
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	002b      	movs	r3, r5
 800994c:	f000 fcbc 	bl	800a2c8 <sen5x_read_measured_values>
 8009950:	0003      	movs	r3, r0
 8009952:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009954:	19bb      	adds	r3, r7, r6
 8009956:	2200      	movs	r2, #0
 8009958:	5e9b      	ldrsh	r3, [r3, r2]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <sen5x_read_measurement+0x56>
    return error;
 800995e:	19bb      	adds	r3, r7, r6
 8009960:	2200      	movs	r2, #0
 8009962:	5e9b      	ldrsh	r3, [r3, r2]
 8009964:	e02c      	b.n	80099c0 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8009966:	231c      	movs	r3, #28
 8009968:	18fb      	adds	r3, r7, r3
 800996a:	881a      	ldrh	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009970:	231a      	movs	r3, #26
 8009972:	18fb      	adds	r3, r7, r3
 8009974:	881a      	ldrh	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800997a:	2318      	movs	r3, #24
 800997c:	18fb      	adds	r3, r7, r3
 800997e:	881a      	ldrh	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8009984:	2316      	movs	r3, #22
 8009986:	18fb      	adds	r3, r7, r3
 8009988:	881a      	ldrh	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800998e:	2314      	movs	r3, #20
 8009990:	18fb      	adds	r3, r7, r3
 8009992:	2200      	movs	r2, #0
 8009994:	5e9a      	ldrsh	r2, [r3, r2]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800999a:	2312      	movs	r3, #18
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	2200      	movs	r2, #0
 80099a0:	5e9a      	ldrsh	r2, [r3, r2]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 80099a6:	2310      	movs	r3, #16
 80099a8:	18fb      	adds	r3, r7, r3
 80099aa:	2200      	movs	r2, #0
 80099ac:	5e9a      	ldrsh	r2, [r3, r2]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 80099b2:	230e      	movs	r3, #14
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	2200      	movs	r2, #0
 80099b8:	5e9a      	ldrsh	r2, [r3, r2]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	81da      	strh	r2, [r3, #14]
  return 0;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	0018      	movs	r0, r3
 80099c2:	46bd      	mov	sp, r7
 80099c4:	b009      	add	sp, #36	@ 0x24
 80099c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099c8 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80099cc:	4b63      	ldr	r3, [pc, #396]	@ (8009b5c <sen5x_printvalues+0x194>)
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	4a63      	ldr	r2, [pc, #396]	@ (8009b60 <sen5x_printvalues+0x198>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d013      	beq.n	80099fe <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80099d6:	4b61      	ldr	r3, [pc, #388]	@ (8009b5c <sen5x_printvalues+0x194>)
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	0018      	movs	r0, r3
 80099dc:	f7f7 fdf8 	bl	80015d0 <__aeabi_i2f>
 80099e0:	1c03      	adds	r3, r0, #0
 80099e2:	4960      	ldr	r1, [pc, #384]	@ (8009b64 <sen5x_printvalues+0x19c>)
 80099e4:	1c18      	adds	r0, r3, #0
 80099e6:	f7f7 f8f5 	bl	8000bd4 <__aeabi_fdiv>
 80099ea:	1c03      	adds	r3, r0, #0
 80099ec:	1c18      	adds	r0, r3, #0
 80099ee:	f7f9 fd39 	bl	8003464 <__aeabi_f2d>
 80099f2:	0002      	movs	r2, r0
 80099f4:	000b      	movs	r3, r1
 80099f6:	495c      	ldr	r1, [pc, #368]	@ (8009b68 <sen5x_printvalues+0x1a0>)
 80099f8:	0008      	movs	r0, r1
 80099fa:	f016 fc63 	bl	80202c4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 80099fe:	4b57      	ldr	r3, [pc, #348]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009a00:	885b      	ldrh	r3, [r3, #2]
 8009a02:	4a57      	ldr	r2, [pc, #348]	@ (8009b60 <sen5x_printvalues+0x198>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d013      	beq.n	8009a30 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009a08:	4b54      	ldr	r3, [pc, #336]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009a0a:	885b      	ldrh	r3, [r3, #2]
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f7f7 fddf 	bl	80015d0 <__aeabi_i2f>
 8009a12:	1c03      	adds	r3, r0, #0
 8009a14:	4953      	ldr	r1, [pc, #332]	@ (8009b64 <sen5x_printvalues+0x19c>)
 8009a16:	1c18      	adds	r0, r3, #0
 8009a18:	f7f7 f8dc 	bl	8000bd4 <__aeabi_fdiv>
 8009a1c:	1c03      	adds	r3, r0, #0
 8009a1e:	1c18      	adds	r0, r3, #0
 8009a20:	f7f9 fd20 	bl	8003464 <__aeabi_f2d>
 8009a24:	0002      	movs	r2, r0
 8009a26:	000b      	movs	r3, r1
 8009a28:	4950      	ldr	r1, [pc, #320]	@ (8009b6c <sen5x_printvalues+0x1a4>)
 8009a2a:	0008      	movs	r0, r1
 8009a2c:	f016 fc4a 	bl	80202c4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009a30:	4b4a      	ldr	r3, [pc, #296]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009a32:	889b      	ldrh	r3, [r3, #4]
 8009a34:	4a4a      	ldr	r2, [pc, #296]	@ (8009b60 <sen5x_printvalues+0x198>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d013      	beq.n	8009a62 <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8009a3a:	4b48      	ldr	r3, [pc, #288]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009a3c:	889b      	ldrh	r3, [r3, #4]
 8009a3e:	0018      	movs	r0, r3
 8009a40:	f7f7 fdc6 	bl	80015d0 <__aeabi_i2f>
 8009a44:	1c03      	adds	r3, r0, #0
 8009a46:	4947      	ldr	r1, [pc, #284]	@ (8009b64 <sen5x_printvalues+0x19c>)
 8009a48:	1c18      	adds	r0, r3, #0
 8009a4a:	f7f7 f8c3 	bl	8000bd4 <__aeabi_fdiv>
 8009a4e:	1c03      	adds	r3, r0, #0
 8009a50:	1c18      	adds	r0, r3, #0
 8009a52:	f7f9 fd07 	bl	8003464 <__aeabi_f2d>
 8009a56:	0002      	movs	r2, r0
 8009a58:	000b      	movs	r3, r1
 8009a5a:	4945      	ldr	r1, [pc, #276]	@ (8009b70 <sen5x_printvalues+0x1a8>)
 8009a5c:	0008      	movs	r0, r1
 8009a5e:	f016 fc31 	bl	80202c4 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009a62:	4b3e      	ldr	r3, [pc, #248]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009a64:	88db      	ldrh	r3, [r3, #6]
 8009a66:	4a3e      	ldr	r2, [pc, #248]	@ (8009b60 <sen5x_printvalues+0x198>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d013      	beq.n	8009a94 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009a6e:	88db      	ldrh	r3, [r3, #6]
 8009a70:	0018      	movs	r0, r3
 8009a72:	f7f7 fdad 	bl	80015d0 <__aeabi_i2f>
 8009a76:	1c03      	adds	r3, r0, #0
 8009a78:	493a      	ldr	r1, [pc, #232]	@ (8009b64 <sen5x_printvalues+0x19c>)
 8009a7a:	1c18      	adds	r0, r3, #0
 8009a7c:	f7f7 f8aa 	bl	8000bd4 <__aeabi_fdiv>
 8009a80:	1c03      	adds	r3, r0, #0
 8009a82:	1c18      	adds	r0, r3, #0
 8009a84:	f7f9 fcee 	bl	8003464 <__aeabi_f2d>
 8009a88:	0002      	movs	r2, r0
 8009a8a:	000b      	movs	r3, r1
 8009a8c:	4939      	ldr	r1, [pc, #228]	@ (8009b74 <sen5x_printvalues+0x1ac>)
 8009a8e:	0008      	movs	r0, r1
 8009a90:	f016 fc18 	bl	80202c4 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 8009a94:	4b31      	ldr	r3, [pc, #196]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009a96:	2208      	movs	r2, #8
 8009a98:	5e9b      	ldrsh	r3, [r3, r2]
 8009a9a:	4a37      	ldr	r2, [pc, #220]	@ (8009b78 <sen5x_printvalues+0x1b0>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d014      	beq.n	8009aca <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009aa2:	2208      	movs	r2, #8
 8009aa4:	5e9b      	ldrsh	r3, [r3, r2]
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f7f7 fd92 	bl	80015d0 <__aeabi_i2f>
 8009aac:	1c03      	adds	r3, r0, #0
 8009aae:	4933      	ldr	r1, [pc, #204]	@ (8009b7c <sen5x_printvalues+0x1b4>)
 8009ab0:	1c18      	adds	r0, r3, #0
 8009ab2:	f7f7 f88f 	bl	8000bd4 <__aeabi_fdiv>
 8009ab6:	1c03      	adds	r3, r0, #0
 8009ab8:	1c18      	adds	r0, r3, #0
 8009aba:	f7f9 fcd3 	bl	8003464 <__aeabi_f2d>
 8009abe:	0002      	movs	r2, r0
 8009ac0:	000b      	movs	r3, r1
 8009ac2:	492f      	ldr	r1, [pc, #188]	@ (8009b80 <sen5x_printvalues+0x1b8>)
 8009ac4:	0008      	movs	r0, r1
 8009ac6:	f016 fbfd 	bl	80202c4 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 8009aca:	4b24      	ldr	r3, [pc, #144]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009acc:	220a      	movs	r2, #10
 8009ace:	5e9b      	ldrsh	r3, [r3, r2]
 8009ad0:	4a29      	ldr	r2, [pc, #164]	@ (8009b78 <sen5x_printvalues+0x1b0>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d014      	beq.n	8009b00 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 8009ad6:	4b21      	ldr	r3, [pc, #132]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009ad8:	220a      	movs	r2, #10
 8009ada:	5e9b      	ldrsh	r3, [r3, r2]
 8009adc:	0018      	movs	r0, r3
 8009ade:	f7f7 fd77 	bl	80015d0 <__aeabi_i2f>
 8009ae2:	1c03      	adds	r3, r0, #0
 8009ae4:	4927      	ldr	r1, [pc, #156]	@ (8009b84 <sen5x_printvalues+0x1bc>)
 8009ae6:	1c18      	adds	r0, r3, #0
 8009ae8:	f7f7 f874 	bl	8000bd4 <__aeabi_fdiv>
 8009aec:	1c03      	adds	r3, r0, #0
 8009aee:	1c18      	adds	r0, r3, #0
 8009af0:	f7f9 fcb8 	bl	8003464 <__aeabi_f2d>
 8009af4:	0002      	movs	r2, r0
 8009af6:	000b      	movs	r3, r1
 8009af8:	4923      	ldr	r1, [pc, #140]	@ (8009b88 <sen5x_printvalues+0x1c0>)
 8009afa:	0008      	movs	r0, r1
 8009afc:	f016 fbe2 	bl	80202c4 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 8009b00:	4b16      	ldr	r3, [pc, #88]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009b02:	220c      	movs	r2, #12
 8009b04:	5e9b      	ldrsh	r3, [r3, r2]
 8009b06:	4a1c      	ldr	r2, [pc, #112]	@ (8009b78 <sen5x_printvalues+0x1b0>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d00e      	beq.n	8009b2a <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 8009b0c:	4b13      	ldr	r3, [pc, #76]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009b0e:	220c      	movs	r2, #12
 8009b10:	5e9b      	ldrsh	r3, [r3, r2]
 8009b12:	210a      	movs	r1, #10
 8009b14:	0018      	movs	r0, r3
 8009b16:	f7f6 fbcf 	bl	80002b8 <__divsi3>
 8009b1a:	0003      	movs	r3, r0
 8009b1c:	b21b      	sxth	r3, r3
 8009b1e:	001a      	movs	r2, r3
 8009b20:	4b1a      	ldr	r3, [pc, #104]	@ (8009b8c <sen5x_printvalues+0x1c4>)
 8009b22:	0011      	movs	r1, r2
 8009b24:	0018      	movs	r0, r3
 8009b26:	f016 fbcd 	bl	80202c4 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009b2c:	220e      	movs	r2, #14
 8009b2e:	5e9b      	ldrsh	r3, [r3, r2]
 8009b30:	4a11      	ldr	r2, [pc, #68]	@ (8009b78 <sen5x_printvalues+0x1b0>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d00e      	beq.n	8009b54 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 8009b36:	4b09      	ldr	r3, [pc, #36]	@ (8009b5c <sen5x_printvalues+0x194>)
 8009b38:	220e      	movs	r2, #14
 8009b3a:	5e9b      	ldrsh	r3, [r3, r2]
 8009b3c:	210a      	movs	r1, #10
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f7f6 fbba 	bl	80002b8 <__divsi3>
 8009b44:	0003      	movs	r3, r0
 8009b46:	b21b      	sxth	r3, r3
 8009b48:	001a      	movs	r2, r3
 8009b4a:	4b11      	ldr	r3, [pc, #68]	@ (8009b90 <sen5x_printvalues+0x1c8>)
 8009b4c:	0011      	movs	r1, r2
 8009b4e:	0018      	movs	r0, r3
 8009b50:	f016 fbb8 	bl	80202c4 <iprintf>
  }
}
 8009b54:	46c0      	nop			@ (mov r8, r8)
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	46c0      	nop			@ (mov r8, r8)
 8009b5c:	20000c98 	.word	0x20000c98
 8009b60:	0000ffff 	.word	0x0000ffff
 8009b64:	41200000 	.word	0x41200000
 8009b68:	08024f64 	.word	0x08024f64
 8009b6c:	08024f90 	.word	0x08024f90
 8009b70:	08024fbc 	.word	0x08024fbc
 8009b74:	08024fe8 	.word	0x08024fe8
 8009b78:	00007fff 	.word	0x00007fff
 8009b7c:	42c80000 	.word	0x42c80000
 8009b80:	08025014 	.word	0x08025014
 8009b84:	43480000 	.word	0x43480000
 8009b88:	08025038 	.word	0x08025038
 8009b8c:	08025060 	.word	0x08025060
 8009b90:	08025078 	.word	0x08025078

08009b94 <sen5xStore>:

void sen5xStore() {
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 8009b98:	4b2e      	ldr	r3, [pc, #184]	@ (8009c54 <sen5xStore+0xc0>)
 8009b9a:	885b      	ldrh	r3, [r3, #2]
 8009b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8009c58 <sen5xStore+0xc4>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d004      	beq.n	8009bac <sen5xStore+0x18>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 8009ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8009c54 <sen5xStore+0xc0>)
 8009ba4:	885b      	ldrh	r3, [r3, #2]
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	f7f9 fe40 	bl	800382c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 8009bac:	4b29      	ldr	r3, [pc, #164]	@ (8009c54 <sen5xStore+0xc0>)
 8009bae:	88db      	ldrh	r3, [r3, #6]
 8009bb0:	4a29      	ldr	r2, [pc, #164]	@ (8009c58 <sen5xStore+0xc4>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d004      	beq.n	8009bc0 <sen5xStore+0x2c>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 8009bb6:	4b27      	ldr	r3, [pc, #156]	@ (8009c54 <sen5xStore+0xc0>)
 8009bb8:	88db      	ldrh	r3, [r3, #6]
 8009bba:	0018      	movs	r0, r3
 8009bbc:	f7f9 fe62 	bl	8003884 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8009bc0:	4b26      	ldr	r3, [pc, #152]	@ (8009c5c <sen5xStore+0xc8>)
 8009bc2:	791b      	ldrb	r3, [r3, #4]
 8009bc4:	2b34      	cmp	r3, #52	@ 0x34
 8009bc6:	d003      	beq.n	8009bd0 <sen5xStore+0x3c>
 8009bc8:	4b24      	ldr	r3, [pc, #144]	@ (8009c5c <sen5xStore+0xc8>)
 8009bca:	791b      	ldrb	r3, [r3, #4]
 8009bcc:	2b35      	cmp	r3, #53	@ 0x35
 8009bce:	d13d      	bne.n	8009c4c <sen5xStore+0xb8>
    if (!VOCNOx || usbPluggedIn) {
 8009bd0:	4b23      	ldr	r3, [pc, #140]	@ (8009c60 <sen5xStore+0xcc>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	4053      	eors	r3, r2
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d103      	bne.n	8009be6 <sen5xStore+0x52>
 8009bde:	4b21      	ldr	r3, [pc, #132]	@ (8009c64 <sen5xStore+0xd0>)
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d032      	beq.n	8009c4c <sen5xStore+0xb8>
      if (sen5x_data.voc_index != 0x7fff) {
 8009be6:	4b1b      	ldr	r3, [pc, #108]	@ (8009c54 <sen5xStore+0xc0>)
 8009be8:	220c      	movs	r2, #12
 8009bea:	5e9b      	ldrsh	r3, [r3, r2]
 8009bec:	4a1e      	ldr	r2, [pc, #120]	@ (8009c68 <sen5xStore+0xd4>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d019      	beq.n	8009c26 <sen5xStore+0x92>
        SetVOCindicator(sen5x_data.voc_index / 10);
 8009bf2:	4b18      	ldr	r3, [pc, #96]	@ (8009c54 <sen5xStore+0xc0>)
 8009bf4:	220c      	movs	r2, #12
 8009bf6:	5e9b      	ldrsh	r3, [r3, r2]
 8009bf8:	210a      	movs	r1, #10
 8009bfa:	0018      	movs	r0, r3
 8009bfc:	f7f6 fb5c 	bl	80002b8 <__divsi3>
 8009c00:	0003      	movs	r3, r0
 8009c02:	b21b      	sxth	r3, r3
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	0018      	movs	r0, r3
 8009c08:	f003 fe20 	bl	800d84c <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 8009c0c:	4b11      	ldr	r3, [pc, #68]	@ (8009c54 <sen5xStore+0xc0>)
 8009c0e:	220c      	movs	r2, #12
 8009c10:	5e9b      	ldrsh	r3, [r3, r2]
 8009c12:	210a      	movs	r1, #10
 8009c14:	0018      	movs	r0, r3
 8009c16:	f7f6 fb4f 	bl	80002b8 <__divsi3>
 8009c1a:	0003      	movs	r3, r0
 8009c1c:	b21b      	sxth	r3, r3
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	0018      	movs	r0, r3
 8009c22:	f7f9 fdd3 	bl	80037cc <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 8009c26:	4b0b      	ldr	r3, [pc, #44]	@ (8009c54 <sen5xStore+0xc0>)
 8009c28:	220e      	movs	r2, #14
 8009c2a:	5e9b      	ldrsh	r3, [r3, r2]
 8009c2c:	4a0e      	ldr	r2, [pc, #56]	@ (8009c68 <sen5xStore+0xd4>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d00c      	beq.n	8009c4c <sen5xStore+0xb8>
        setNOx(sen5x_data.nox_index / 10);
 8009c32:	4b08      	ldr	r3, [pc, #32]	@ (8009c54 <sen5xStore+0xc0>)
 8009c34:	220e      	movs	r2, #14
 8009c36:	5e9b      	ldrsh	r3, [r3, r2]
 8009c38:	210a      	movs	r1, #10
 8009c3a:	0018      	movs	r0, r3
 8009c3c:	f7f6 fb3c 	bl	80002b8 <__divsi3>
 8009c40:	0003      	movs	r3, r0
 8009c42:	b21b      	sxth	r3, r3
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	0018      	movs	r0, r3
 8009c48:	f7f9 fe48 	bl	80038dc <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 8009c4c:	46c0      	nop			@ (mov r8, r8)
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	46c0      	nop			@ (mov r8, r8)
 8009c54:	20000c98 	.word	0x20000c98
 8009c58:	0000ffff 	.word	0x0000ffff
 8009c5c:	20000c88 	.word	0x20000c88
 8009c60:	20000c86 	.word	0x20000c86
 8009c64:	20001c15 	.word	0x20001c15
 8009c68:	00007fff 	.word	0x00007fff

08009c6c <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8009c6c:	b590      	push	{r4, r7, lr}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	6039      	str	r1, [r7, #0]
 8009c74:	0011      	movs	r1, r2
 8009c76:	1dfb      	adds	r3, r7, #7
 8009c78:	1c02      	adds	r2, r0, #0
 8009c7a:	701a      	strb	r2, [r3, #0]
 8009c7c:	1d3b      	adds	r3, r7, #4
 8009c7e:	1c0a      	adds	r2, r1, #0
 8009c80:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8009c82:	1dfb      	adds	r3, r7, #7
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	18db      	adds	r3, r3, r3
 8009c8a:	b299      	uxth	r1, r3
 8009c8c:	1d3b      	adds	r3, r7, #4
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	4805      	ldr	r0, [pc, #20]	@ (8009ca8 <sensirion_i2c_hal_read+0x3c>)
 8009c94:	2464      	movs	r4, #100	@ 0x64
 8009c96:	9400      	str	r4, [sp, #0]
 8009c98:	f006 fed8 	bl	8010a4c <HAL_I2C_Master_Receive>
 8009c9c:	0003      	movs	r3, r0
 8009c9e:	b25b      	sxtb	r3, r3
}
 8009ca0:	0018      	movs	r0, r3
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	b003      	add	sp, #12
 8009ca6:	bd90      	pop	{r4, r7, pc}
 8009ca8:	20000a68 	.word	0x20000a68

08009cac <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009cac:	b590      	push	{r4, r7, lr}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af02      	add	r7, sp, #8
 8009cb2:	6039      	str	r1, [r7, #0]
 8009cb4:	0011      	movs	r1, r2
 8009cb6:	1dfb      	adds	r3, r7, #7
 8009cb8:	1c02      	adds	r2, r0, #0
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	1d3b      	adds	r3, r7, #4
 8009cbe:	1c0a      	adds	r2, r1, #0
 8009cc0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009cc2:	1dfb      	adds	r3, r7, #7
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	18db      	adds	r3, r3, r3
 8009cca:	b299      	uxth	r1, r3
 8009ccc:	1d3b      	adds	r3, r7, #4
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	4805      	ldr	r0, [pc, #20]	@ (8009ce8 <sensirion_i2c_hal_write+0x3c>)
 8009cd4:	2464      	movs	r4, #100	@ 0x64
 8009cd6:	9400      	str	r4, [sp, #0]
 8009cd8:	f006 fdb0 	bl	801083c <HAL_I2C_Master_Transmit>
 8009cdc:	0003      	movs	r3, r0
 8009cde:	b25b      	sxtb	r3, r3
}
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b003      	add	sp, #12
 8009ce6:	bd90      	pop	{r4, r7, pc}
 8009ce8:	20000a68 	.word	0x20000a68

08009cec <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	22fa      	movs	r2, #250	@ 0xfa
 8009cf8:	0091      	lsls	r1, r2, #2
 8009cfa:	0018      	movs	r0, r3
 8009cfc:	f7f6 fa52 	bl	80001a4 <__udivsi3>
 8009d00:	0003      	movs	r3, r0
 8009d02:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	22fa      	movs	r2, #250	@ 0xfa
 8009d08:	0091      	lsls	r1, r2, #2
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f7f6 fad0 	bl	80002b0 <__aeabi_uidivmod>
 8009d10:	1e0b      	subs	r3, r1, #0
 8009d12:	d002      	beq.n	8009d1a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	3301      	adds	r3, #1
 8009d18:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	0018      	movs	r0, r3
 8009d1e:	f005 fa37 	bl	800f190 <HAL_Delay>
}
 8009d22:	46c0      	nop			@ (mov r8, r8)
 8009d24:	46bd      	mov	sp, r7
 8009d26:	b004      	add	sp, #16
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 8009d36:	1d3b      	adds	r3, r7, #4
 8009d38:	0018      	movs	r0, r3
 8009d3a:	f000 fd05 	bl	800a748 <sen5x_read_device_status>
 8009d3e:	1e03      	subs	r3, r0, #0
 8009d40:	d007      	beq.n	8009d52 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8009d42:	4a28      	ldr	r2, [pc, #160]	@ (8009de4 <sen5x_check_for_errors+0xb8>)
 8009d44:	4b28      	ldr	r3, [pc, #160]	@ (8009de8 <sen5x_check_for_errors+0xbc>)
 8009d46:	0019      	movs	r1, r3
 8009d48:	2001      	movs	r0, #1
 8009d4a:	f004 fdd3 	bl	800e8f4 <CreateLine>
    return true;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e043      	b.n	8009dda <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <sen5x_check_for_errors+0x30>
    return false;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e03e      	b.n	8009dda <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	2380      	movs	r3, #128	@ 0x80
 8009d60:	039b      	lsls	r3, r3, #14
 8009d62:	4013      	ands	r3, r2
 8009d64:	d005      	beq.n	8009d72 <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 8009d66:	4a21      	ldr	r2, [pc, #132]	@ (8009dec <sen5x_check_for_errors+0xc0>)
 8009d68:	4b21      	ldr	r3, [pc, #132]	@ (8009df0 <sen5x_check_for_errors+0xc4>)
 8009d6a:	0019      	movs	r1, r3
 8009d6c:	2003      	movs	r0, #3
 8009d6e:	f004 fdc1 	bl	800e8f4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	2380      	movs	r3, #128	@ 0x80
 8009d76:	031b      	lsls	r3, r3, #12
 8009d78:	4013      	ands	r3, r2
 8009d7a:	d005      	beq.n	8009d88 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009df4 <sen5x_check_for_errors+0xc8>)
 8009d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8009df0 <sen5x_check_for_errors+0xc4>)
 8009d80:	0019      	movs	r1, r3
 8009d82:	2003      	movs	r0, #3
 8009d84:	f004 fdb6 	bl	800e8f4 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2280      	movs	r2, #128	@ 0x80
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	d005      	beq.n	8009d9c <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8009d90:	4a19      	ldr	r2, [pc, #100]	@ (8009df8 <sen5x_check_for_errors+0xcc>)
 8009d92:	4b17      	ldr	r3, [pc, #92]	@ (8009df0 <sen5x_check_for_errors+0xc4>)
 8009d94:	0019      	movs	r1, r3
 8009d96:	2003      	movs	r0, #3
 8009d98:	f004 fdac 	bl	800e8f4 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2240      	movs	r2, #64	@ 0x40
 8009da0:	4013      	ands	r3, r2
 8009da2:	d005      	beq.n	8009db0 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 8009da4:	4a15      	ldr	r2, [pc, #84]	@ (8009dfc <sen5x_check_for_errors+0xd0>)
 8009da6:	4b12      	ldr	r3, [pc, #72]	@ (8009df0 <sen5x_check_for_errors+0xc4>)
 8009da8:	0019      	movs	r1, r3
 8009daa:	2003      	movs	r0, #3
 8009dac:	f004 fda2 	bl	800e8f4 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2220      	movs	r2, #32
 8009db4:	4013      	ands	r3, r2
 8009db6:	d005      	beq.n	8009dc4 <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 8009db8:	4a11      	ldr	r2, [pc, #68]	@ (8009e00 <sen5x_check_for_errors+0xd4>)
 8009dba:	4b0d      	ldr	r3, [pc, #52]	@ (8009df0 <sen5x_check_for_errors+0xc4>)
 8009dbc:	0019      	movs	r1, r3
 8009dbe:	2003      	movs	r0, #3
 8009dc0:	f004 fd98 	bl	800e8f4 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2210      	movs	r2, #16
 8009dc8:	4013      	ands	r3, r2
 8009dca:	d005      	beq.n	8009dd8 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8009e04 <sen5x_check_for_errors+0xd8>)
 8009dce:	4b08      	ldr	r3, [pc, #32]	@ (8009df0 <sen5x_check_for_errors+0xc4>)
 8009dd0:	0019      	movs	r1, r3
 8009dd2:	2003      	movs	r0, #3
 8009dd4:	f004 fd8e 	bl	800e8f4 <CreateLine>
  }
  return 1;
 8009dd8:	2301      	movs	r3, #1
}
 8009dda:	0018      	movs	r0, r3
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	b002      	add	sp, #8
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	46c0      	nop			@ (mov r8, r8)
 8009de4:	08025090 	.word	0x08025090
 8009de8:	08024c14 	.word	0x08024c14
 8009dec:	080250bc 	.word	0x080250bc
 8009df0:	08024be8 	.word	0x08024be8
 8009df4:	080250dc 	.word	0x080250dc
 8009df8:	080250f8 	.word	0x080250f8
 8009dfc:	0802511c 	.word	0x0802511c
 8009e00:	0802513c 	.word	0x0802513c
 8009e04:	08025150 	.word	0x08025150

08009e08 <set_light_on_state>:

void set_light_on_state(void) {
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009e0c:	4b15      	ldr	r3, [pc, #84]	@ (8009e64 <set_light_on_state+0x5c>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2201      	movs	r2, #1
 8009e12:	4053      	eors	r3, r2
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d008      	beq.n	8009e2c <set_light_on_state+0x24>
    sen5x_Power_On();
 8009e1a:	f7ff fb43 	bl	80094a4 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009e1e:	4a12      	ldr	r2, [pc, #72]	@ (8009e68 <set_light_on_state+0x60>)
 8009e20:	4b12      	ldr	r3, [pc, #72]	@ (8009e6c <set_light_on_state+0x64>)
 8009e22:	0019      	movs	r1, r3
 8009e24:	2003      	movs	r0, #3
 8009e26:	f004 fd65 	bl	800e8f4 <CreateLine>
 8009e2a:	e00a      	b.n	8009e42 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009e2c:	f005 f9a6 	bl	800f17c <HAL_GetTick>
 8009e30:	0002      	movs	r2, r0
 8009e32:	4b0f      	ldr	r3, [pc, #60]	@ (8009e70 <set_light_on_state+0x68>)
 8009e34:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009e36:	4a0f      	ldr	r2, [pc, #60]	@ (8009e74 <set_light_on_state+0x6c>)
 8009e38:	4b0c      	ldr	r3, [pc, #48]	@ (8009e6c <set_light_on_state+0x64>)
 8009e3a:	0019      	movs	r1, r3
 8009e3c:	2003      	movs	r0, #3
 8009e3e:	f004 fd59 	bl	800e8f4 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009e42:	f7ff fcbf 	bl	80097c4 <sen5x_lightup_measurement>
 8009e46:	1e03      	subs	r3, r0, #0
 8009e48:	d005      	beq.n	8009e56 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8009e78 <set_light_on_state+0x70>)
 8009e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009e7c <set_light_on_state+0x74>)
 8009e4e:	0019      	movs	r1, r3
 8009e50:	2001      	movs	r0, #1
 8009e52:	f004 fd4f 	bl	800e8f4 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009e56:	4b0a      	ldr	r3, [pc, #40]	@ (8009e80 <set_light_on_state+0x78>)
 8009e58:	2203      	movs	r2, #3
 8009e5a:	701a      	strb	r2, [r3, #0]
}
 8009e5c:	46c0      	nop			@ (mov r8, r8)
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	46c0      	nop			@ (mov r8, r8)
 8009e64:	20000c85 	.word	0x20000c85
 8009e68:	0802518c 	.word	0x0802518c
 8009e6c:	08024be8 	.word	0x08024be8
 8009e70:	20000c94 	.word	0x20000c94
 8009e74:	080251b8 	.word	0x080251b8
 8009e78:	080251d0 	.word	0x080251d0
 8009e7c:	08024c14 	.word	0x08024c14
 8009e80:	2000008d 	.word	0x2000008d

08009e84 <sen5x_statemachine>:

void sen5x_statemachine() {
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009e8a:	1dfb      	adds	r3, r7, #7
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 8009e90:	4b88      	ldr	r3, [pc, #544]	@ (800a0b4 <sen5x_statemachine+0x230>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	0018      	movs	r0, r3
 8009e96:	f004 fcd7 	bl	800e848 <TimestampIsReached>
 8009e9a:	1e03      	subs	r3, r0, #0
 8009e9c:	d100      	bne.n	8009ea0 <sen5x_statemachine+0x1c>
 8009e9e:	e105      	b.n	800a0ac <sen5x_statemachine+0x228>
    switch (PMsamplesState) {
 8009ea0:	4b85      	ldr	r3, [pc, #532]	@ (800a0b8 <sen5x_statemachine+0x234>)
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	2b05      	cmp	r3, #5
 8009ea6:	d900      	bls.n	8009eaa <sen5x_statemachine+0x26>
 8009ea8:	e100      	b.n	800a0ac <sen5x_statemachine+0x228>
 8009eaa:	009a      	lsls	r2, r3, #2
 8009eac:	4b83      	ldr	r3, [pc, #524]	@ (800a0bc <sen5x_statemachine+0x238>)
 8009eae:	18d3      	adds	r3, r2, r3
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009eb4:	4a82      	ldr	r2, [pc, #520]	@ (800a0c0 <sen5x_statemachine+0x23c>)
 8009eb6:	4b83      	ldr	r3, [pc, #524]	@ (800a0c4 <sen5x_statemachine+0x240>)
 8009eb8:	0019      	movs	r1, r3
 8009eba:	2001      	movs	r0, #1
 8009ebc:	f004 fd1a 	bl	800e8f4 <CreateLine>
      SetPMSensorStatus(false);
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	f7fe fc6b 	bl	800879c <SetPMSensorStatus>
      DisablePMSensor();
 8009ec6:	f7fe fc0b 	bl	80086e0 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009eca:	f005 f957 	bl	800f17c <HAL_GetTick>
 8009ece:	0003      	movs	r3, r0
 8009ed0:	4a7d      	ldr	r2, [pc, #500]	@ (800a0c8 <sen5x_statemachine+0x244>)
 8009ed2:	189a      	adds	r2, r3, r2
 8009ed4:	4b77      	ldr	r3, [pc, #476]	@ (800a0b4 <sen5x_statemachine+0x230>)
 8009ed6:	601a      	str	r2, [r3, #0]
      break;
 8009ed8:	e0e8      	b.n	800a0ac <sen5x_statemachine+0x228>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009eda:	f005 f94f 	bl	800f17c <HAL_GetTick>
 8009ede:	0003      	movs	r3, r0
 8009ee0:	4a7a      	ldr	r2, [pc, #488]	@ (800a0cc <sen5x_statemachine+0x248>)
 8009ee2:	189a      	adds	r2, r3, r2
 8009ee4:	4b73      	ldr	r3, [pc, #460]	@ (800a0b4 <sen5x_statemachine+0x230>)
 8009ee6:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009ee8:	f7ff ff8e 	bl	8009e08 <set_light_on_state>
      break;
 8009eec:	e0de      	b.n	800a0ac <sen5x_statemachine+0x228>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 8009eee:	4b72      	ldr	r3, [pc, #456]	@ (800a0b8 <sen5x_statemachine+0x234>)
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009ef4:	4b76      	ldr	r3, [pc, #472]	@ (800a0d0 <sen5x_statemachine+0x24c>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	2b05      	cmp	r3, #5
 8009efa:	d905      	bls.n	8009f08 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 8009efc:	4b6e      	ldr	r3, [pc, #440]	@ (800a0b8 <sen5x_statemachine+0x234>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009f02:	f7ff faff 	bl	8009504 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 8009f06:	e0ce      	b.n	800a0a6 <sen5x_statemachine+0x222>
        if (sen5x_check_for_errors()) {
 8009f08:	f7ff ff10 	bl	8009d2c <sen5x_check_for_errors>
 8009f0c:	1e03      	subs	r3, r0, #0
 8009f0e:	d021      	beq.n	8009f54 <sen5x_statemachine+0xd0>
          if (sen5x_device_reset()) {
 8009f10:	f000 fc6c 	bl	800a7ec <sen5x_device_reset>
 8009f14:	1e03      	subs	r3, r0, #0
 8009f16:	d00f      	beq.n	8009f38 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 8009f18:	4a6e      	ldr	r2, [pc, #440]	@ (800a0d4 <sen5x_statemachine+0x250>)
 8009f1a:	4b6a      	ldr	r3, [pc, #424]	@ (800a0c4 <sen5x_statemachine+0x240>)
 8009f1c:	0019      	movs	r1, r3
 8009f1e:	2001      	movs	r0, #1
 8009f20:	f004 fce8 	bl	800e8f4 <CreateLine>
            sen5xErrors++;
 8009f24:	4b6a      	ldr	r3, [pc, #424]	@ (800a0d0 <sen5x_statemachine+0x24c>)
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	4b68      	ldr	r3, [pc, #416]	@ (800a0d0 <sen5x_statemachine+0x24c>)
 8009f2e:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 8009f30:	4b61      	ldr	r3, [pc, #388]	@ (800a0b8 <sen5x_statemachine+0x234>)
 8009f32:	2203      	movs	r2, #3
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	e005      	b.n	8009f44 <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 8009f38:	4a67      	ldr	r2, [pc, #412]	@ (800a0d8 <sen5x_statemachine+0x254>)
 8009f3a:	4b68      	ldr	r3, [pc, #416]	@ (800a0dc <sen5x_statemachine+0x258>)
 8009f3c:	0019      	movs	r1, r3
 8009f3e:	2002      	movs	r0, #2
 8009f40:	f004 fcd8 	bl	800e8f4 <CreateLine>
          sen5xReadTimer = HAL_GetTick() + 200;
 8009f44:	f005 f91a 	bl	800f17c <HAL_GetTick>
 8009f48:	0003      	movs	r3, r0
 8009f4a:	33c8      	adds	r3, #200	@ 0xc8
 8009f4c:	001a      	movs	r2, r3
 8009f4e:	4b59      	ldr	r3, [pc, #356]	@ (800a0b4 <sen5x_statemachine+0x230>)
 8009f50:	601a      	str	r2, [r3, #0]
      break;
 8009f52:	e0a8      	b.n	800a0a6 <sen5x_statemachine+0x222>
          if (sen5xErrors != 0) {
 8009f54:	4b5e      	ldr	r3, [pc, #376]	@ (800a0d0 <sen5x_statemachine+0x24c>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d100      	bne.n	8009f5e <sen5x_statemachine+0xda>
 8009f5c:	e0a3      	b.n	800a0a6 <sen5x_statemachine+0x222>
            sen5xErrors = 0;
 8009f5e:	4b5c      	ldr	r3, [pc, #368]	@ (800a0d0 <sen5x_statemachine+0x24c>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 8009f64:	4a5e      	ldr	r2, [pc, #376]	@ (800a0e0 <sen5x_statemachine+0x25c>)
 8009f66:	4b5f      	ldr	r3, [pc, #380]	@ (800a0e4 <sen5x_statemachine+0x260>)
 8009f68:	0019      	movs	r1, r3
 8009f6a:	2003      	movs	r0, #3
 8009f6c:	f004 fcc2 	bl	800e8f4 <CreateLine>
      break;
 8009f70:	e099      	b.n	800a0a6 <sen5x_statemachine+0x222>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009f72:	1dfb      	adds	r3, r7, #7
 8009f74:	0018      	movs	r0, r3
 8009f76:	f000 f955 	bl	800a224 <sen5x_read_data_ready>
      if (data_ready) {
 8009f7a:	1dfb      	adds	r3, r7, #7
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d031      	beq.n	8009fe6 <sen5x_statemachine+0x162>
        SetPMIndicator();
 8009f82:	f003 fbd3 	bl	800d72c <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009f86:	4b58      	ldr	r3, [pc, #352]	@ (800a0e8 <sen5x_statemachine+0x264>)
 8009f88:	0018      	movs	r0, r3
 8009f8a:	f7ff fcc1 	bl	8009910 <sen5x_read_measurement>
 8009f8e:	1e03      	subs	r3, r0, #0
 8009f90:	d00b      	beq.n	8009faa <sen5x_statemachine+0x126>
          Error("Error executing sen5x_read_measured_values()");
 8009f92:	4a56      	ldr	r2, [pc, #344]	@ (800a0ec <sen5x_statemachine+0x268>)
 8009f94:	4b4b      	ldr	r3, [pc, #300]	@ (800a0c4 <sen5x_statemachine+0x240>)
 8009f96:	0019      	movs	r1, r3
 8009f98:	2001      	movs	r0, #1
 8009f9a:	f004 fcab 	bl	800e8f4 <CreateLine>
          sen5xErrors++;
 8009f9e:	4b4c      	ldr	r3, [pc, #304]	@ (800a0d0 <sen5x_statemachine+0x24c>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	4b4a      	ldr	r3, [pc, #296]	@ (800a0d0 <sen5x_statemachine+0x24c>)
 8009fa8:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 8009faa:	4b51      	ldr	r3, [pc, #324]	@ (800a0f0 <sen5x_statemachine+0x26c>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	4b4f      	ldr	r3, [pc, #316]	@ (800a0f0 <sen5x_statemachine+0x26c>)
 8009fb4:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 8009fb6:	4b4e      	ldr	r3, [pc, #312]	@ (800a0f0 <sen5x_statemachine+0x26c>)
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b1f      	cmp	r3, #31
 8009fbc:	d102      	bne.n	8009fc4 <sen5x_statemachine+0x140>
          sen5xSamples = 0;  // enable display on serial
 8009fbe:	4b4c      	ldr	r3, [pc, #304]	@ (800a0f0 <sen5x_statemachine+0x26c>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009fc4:	4b4a      	ldr	r3, [pc, #296]	@ (800a0f0 <sen5x_statemachine+0x26c>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d901      	bls.n	8009fd0 <sen5x_statemachine+0x14c>
          sen5xStore();
 8009fcc:	f7ff fde2 	bl	8009b94 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009fd0:	4b47      	ldr	r3, [pc, #284]	@ (800a0f0 <sen5x_statemachine+0x26c>)
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d106      	bne.n	8009fe6 <sen5x_statemachine+0x162>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009fd8:	f7ff fcf6 	bl	80099c8 <sen5x_printvalues>
#else
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
          HAL_Delay(1000);
 8009fdc:	23fa      	movs	r3, #250	@ 0xfa
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	f005 f8d5 	bl	800f190 <HAL_Delay>
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009fe6:	4b43      	ldr	r3, [pc, #268]	@ (800a0f4 <sen5x_statemachine+0x270>)
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d103      	bne.n	8009ff6 <sen5x_statemachine+0x172>
 8009fee:	4b40      	ldr	r3, [pc, #256]	@ (800a0f0 <sen5x_statemachine+0x26c>)
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d959      	bls.n	800a0aa <sen5x_statemachine+0x226>
        PMsamplesState = CLEAN_FAN;
 8009ff6:	4b30      	ldr	r3, [pc, #192]	@ (800a0b8 <sen5x_statemachine+0x234>)
 8009ff8:	2204      	movs	r2, #4
 8009ffa:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009ffc:	e055      	b.n	800a0aa <sen5x_statemachine+0x226>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009ffe:	f7fc fe03 	bl	8006c08 <RTC_GetWeekday>
 800a002:	0003      	movs	r3, r0
 800a004:	2b01      	cmp	r3, #1
 800a006:	d118      	bne.n	800a03a <sen5x_statemachine+0x1b6>
 800a008:	4b3b      	ldr	r3, [pc, #236]	@ (800a0f8 <sen5x_statemachine+0x274>)
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	2201      	movs	r2, #1
 800a00e:	4053      	eors	r3, r2
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d011      	beq.n	800a03a <sen5x_statemachine+0x1b6>
        sen5x_start_fan_cleaning();
 800a016:	f000 f9eb 	bl	800a3f0 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800a01a:	4a38      	ldr	r2, [pc, #224]	@ (800a0fc <sen5x_statemachine+0x278>)
 800a01c:	4b2f      	ldr	r3, [pc, #188]	@ (800a0dc <sen5x_statemachine+0x258>)
 800a01e:	0019      	movs	r1, r3
 800a020:	2002      	movs	r0, #2
 800a022:	f004 fc67 	bl	800e8f4 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 800a026:	f005 f8a9 	bl	800f17c <HAL_GetTick>
 800a02a:	0003      	movs	r3, r0
 800a02c:	4a34      	ldr	r2, [pc, #208]	@ (800a100 <sen5x_statemachine+0x27c>)
 800a02e:	189a      	adds	r2, r3, r2
 800a030:	4b20      	ldr	r3, [pc, #128]	@ (800a0b4 <sen5x_statemachine+0x230>)
 800a032:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800a034:	4b30      	ldr	r3, [pc, #192]	@ (800a0f8 <sen5x_statemachine+0x274>)
 800a036:	2201      	movs	r2, #1
 800a038:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 800a03a:	4b1f      	ldr	r3, [pc, #124]	@ (800a0b8 <sen5x_statemachine+0x234>)
 800a03c:	2205      	movs	r2, #5
 800a03e:	701a      	strb	r2, [r3, #0]
      break;
 800a040:	e034      	b.n	800a0ac <sen5x_statemachine+0x228>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800a042:	4b2c      	ldr	r3, [pc, #176]	@ (800a0f4 <sen5x_statemachine+0x270>)
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2201      	movs	r2, #1
 800a048:	4053      	eors	r3, r2
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d01c      	beq.n	800a08a <sen5x_statemachine+0x206>
 800a050:	4b2c      	ldr	r3, [pc, #176]	@ (800a104 <sen5x_statemachine+0x280>)
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2201      	movs	r2, #1
 800a056:	4053      	eors	r3, r2
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d015      	beq.n	800a08a <sen5x_statemachine+0x206>
        if (sen5x_extinguish_measurement()) {
 800a05e:	f7ff fbfd 	bl	800985c <sen5x_extinguish_measurement>
 800a062:	1e03      	subs	r3, r0, #0
 800a064:	d005      	beq.n	800a072 <sen5x_statemachine+0x1ee>
          Error("Error executing sen5x_extinguish_measurement()");
 800a066:	4a28      	ldr	r2, [pc, #160]	@ (800a108 <sen5x_statemachine+0x284>)
 800a068:	4b16      	ldr	r3, [pc, #88]	@ (800a0c4 <sen5x_statemachine+0x240>)
 800a06a:	0019      	movs	r1, r3
 800a06c:	2001      	movs	r0, #1
 800a06e:	f004 fc41 	bl	800e8f4 <CreateLine>
        }
        sen5xSamples = 0;
 800a072:	4b1f      	ldr	r3, [pc, #124]	@ (800a0f0 <sen5x_statemachine+0x26c>)
 800a074:	2200      	movs	r2, #0
 800a076:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800a078:	f7ff fa44 	bl	8009504 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800a07c:	2000      	movs	r0, #0
 800a07e:	f7fe fb8d 	bl	800879c <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800a082:	4b0d      	ldr	r3, [pc, #52]	@ (800a0b8 <sen5x_statemachine+0x234>)
 800a084:	2201      	movs	r2, #1
 800a086:	701a      	strb	r2, [r3, #0]
 800a088:	e002      	b.n	800a090 <sen5x_statemachine+0x20c>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800a08a:	4b0b      	ldr	r3, [pc, #44]	@ (800a0b8 <sen5x_statemachine+0x234>)
 800a08c:	2203      	movs	r2, #3
 800a08e:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800a090:	f003 fb72 	bl	800d778 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 800a094:	f005 f872 	bl	800f17c <HAL_GetTick>
 800a098:	0003      	movs	r3, r0
 800a09a:	22fa      	movs	r2, #250	@ 0xfa
 800a09c:	0092      	lsls	r2, r2, #2
 800a09e:	189a      	adds	r2, r3, r2
 800a0a0:	4b04      	ldr	r3, [pc, #16]	@ (800a0b4 <sen5x_statemachine+0x230>)
 800a0a2:	601a      	str	r2, [r3, #0]
    }
  }
}
 800a0a4:	e002      	b.n	800a0ac <sen5x_statemachine+0x228>
      break;
 800a0a6:	46c0      	nop			@ (mov r8, r8)
 800a0a8:	e000      	b.n	800a0ac <sen5x_statemachine+0x228>
      break;
 800a0aa:	46c0      	nop			@ (mov r8, r8)
}
 800a0ac:	46c0      	nop			@ (mov r8, r8)
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	b002      	add	sp, #8
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000c94 	.word	0x20000c94
 800a0b8:	2000008d 	.word	0x2000008d
 800a0bc:	08025bdc 	.word	0x08025bdc
 800a0c0:	080251fc 	.word	0x080251fc
 800a0c4:	08024c14 	.word	0x08024c14
 800a0c8:	002fefd8 	.word	0x002fefd8
 800a0cc:	00005910 	.word	0x00005910
 800a0d0:	20000c91 	.word	0x20000c91
 800a0d4:	0802522c 	.word	0x0802522c
 800a0d8:	08025244 	.word	0x08025244
 800a0dc:	08024ba8 	.word	0x08024ba8
 800a0e0:	0802525c 	.word	0x0802525c
 800a0e4:	08024be8 	.word	0x08024be8
 800a0e8:	20000c98 	.word	0x20000c98
 800a0ec:	08025270 	.word	0x08025270
 800a0f0:	20000c90 	.word	0x20000c90
 800a0f4:	20001c15 	.word	0x20001c15
 800a0f8:	20000c84 	.word	0x20000c84
 800a0fc:	080252a0 	.word	0x080252a0
 800a100:	00002710 	.word	0x00002710
 800a104:	20001c16 	.word	0x20001c16
 800a108:	080252b8 	.word	0x080252b8

0800a10c <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800a10c:	b590      	push	{r4, r7, lr}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a112:	1dbb      	adds	r3, r7, #6
 800a114:	2200      	movs	r2, #0
 800a116:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800a118:	1dbc      	adds	r4, r7, #6
 800a11a:	1dbb      	adds	r3, r7, #6
 800a11c:	8819      	ldrh	r1, [r3, #0]
 800a11e:	003b      	movs	r3, r7
 800a120:	2221      	movs	r2, #33	@ 0x21
 800a122:	0018      	movs	r0, r3
 800a124:	f001 fb56 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a128:	0003      	movs	r3, r0
 800a12a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a12c:	1d3c      	adds	r4, r7, #4
 800a12e:	1dbb      	adds	r3, r7, #6
 800a130:	881a      	ldrh	r2, [r3, #0]
 800a132:	003b      	movs	r3, r7
 800a134:	0019      	movs	r1, r3
 800a136:	2069      	movs	r0, #105	@ 0x69
 800a138:	f001 fbd0 	bl	800b8dc <sensirion_i2c_write_data>
 800a13c:	0003      	movs	r3, r0
 800a13e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a140:	1d3b      	adds	r3, r7, #4
 800a142:	2200      	movs	r2, #0
 800a144:	5e9b      	ldrsh	r3, [r3, r2]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d003      	beq.n	800a152 <sen5x_start_measurement+0x46>
        return error;
 800a14a:	1d3b      	adds	r3, r7, #4
 800a14c:	2200      	movs	r2, #0
 800a14e:	5e9b      	ldrsh	r3, [r3, r2]
 800a150:	e004      	b.n	800a15c <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800a152:	4b04      	ldr	r3, [pc, #16]	@ (800a164 <sen5x_start_measurement+0x58>)
 800a154:	0018      	movs	r0, r3
 800a156:	f7ff fdc9 	bl	8009cec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	0018      	movs	r0, r3
 800a15e:	46bd      	mov	sp, r7
 800a160:	b003      	add	sp, #12
 800a162:	bd90      	pop	{r4, r7, pc}
 800a164:	0000c350 	.word	0x0000c350

0800a168 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800a168:	b590      	push	{r4, r7, lr}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a16e:	1dbb      	adds	r3, r7, #6
 800a170:	2200      	movs	r2, #0
 800a172:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800a174:	1dbc      	adds	r4, r7, #6
 800a176:	1dbb      	adds	r3, r7, #6
 800a178:	8819      	ldrh	r1, [r3, #0]
 800a17a:	003b      	movs	r3, r7
 800a17c:	2237      	movs	r2, #55	@ 0x37
 800a17e:	0018      	movs	r0, r3
 800a180:	f001 fb28 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a184:	0003      	movs	r3, r0
 800a186:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a188:	1d3c      	adds	r4, r7, #4
 800a18a:	1dbb      	adds	r3, r7, #6
 800a18c:	881a      	ldrh	r2, [r3, #0]
 800a18e:	003b      	movs	r3, r7
 800a190:	0019      	movs	r1, r3
 800a192:	2069      	movs	r0, #105	@ 0x69
 800a194:	f001 fba2 	bl	800b8dc <sensirion_i2c_write_data>
 800a198:	0003      	movs	r3, r0
 800a19a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a19c:	1d3b      	adds	r3, r7, #4
 800a19e:	2200      	movs	r2, #0
 800a1a0:	5e9b      	ldrsh	r3, [r3, r2]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <sen5x_start_measurement_without_pm+0x46>
        return error;
 800a1a6:	1d3b      	adds	r3, r7, #4
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	5e9b      	ldrsh	r3, [r3, r2]
 800a1ac:	e004      	b.n	800a1b8 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800a1ae:	4b04      	ldr	r3, [pc, #16]	@ (800a1c0 <sen5x_start_measurement_without_pm+0x58>)
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	f7ff fd9b 	bl	8009cec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	0018      	movs	r0, r3
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	b003      	add	sp, #12
 800a1be:	bd90      	pop	{r4, r7, pc}
 800a1c0:	0000c350 	.word	0x0000c350

0800a1c4 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800a1c4:	b590      	push	{r4, r7, lr}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a1ca:	1dbb      	adds	r3, r7, #6
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800a1d0:	1dbc      	adds	r4, r7, #6
 800a1d2:	2382      	movs	r3, #130	@ 0x82
 800a1d4:	005a      	lsls	r2, r3, #1
 800a1d6:	1dbb      	adds	r3, r7, #6
 800a1d8:	8819      	ldrh	r1, [r3, #0]
 800a1da:	003b      	movs	r3, r7
 800a1dc:	0018      	movs	r0, r3
 800a1de:	f001 faf9 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a1e2:	0003      	movs	r3, r0
 800a1e4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a1e6:	1d3c      	adds	r4, r7, #4
 800a1e8:	1dbb      	adds	r3, r7, #6
 800a1ea:	881a      	ldrh	r2, [r3, #0]
 800a1ec:	003b      	movs	r3, r7
 800a1ee:	0019      	movs	r1, r3
 800a1f0:	2069      	movs	r0, #105	@ 0x69
 800a1f2:	f001 fb73 	bl	800b8dc <sensirion_i2c_write_data>
 800a1f6:	0003      	movs	r3, r0
 800a1f8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1fa:	1d3b      	adds	r3, r7, #4
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	5e9b      	ldrsh	r3, [r3, r2]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d003      	beq.n	800a20c <sen5x_stop_measurement+0x48>
        return error;
 800a204:	1d3b      	adds	r3, r7, #4
 800a206:	2200      	movs	r2, #0
 800a208:	5e9b      	ldrsh	r3, [r3, r2]
 800a20a:	e004      	b.n	800a216 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a20c:	4b04      	ldr	r3, [pc, #16]	@ (800a220 <sen5x_stop_measurement+0x5c>)
 800a20e:	0018      	movs	r0, r3
 800a210:	f7ff fd6c 	bl	8009cec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a214:	2300      	movs	r3, #0
}
 800a216:	0018      	movs	r0, r3
 800a218:	46bd      	mov	sp, r7
 800a21a:	b003      	add	sp, #12
 800a21c:	bd90      	pop	{r4, r7, pc}
 800a21e:	46c0      	nop			@ (mov r8, r8)
 800a220:	00030d40 	.word	0x00030d40

0800a224 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800a224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800a22c:	250e      	movs	r5, #14
 800a22e:	197b      	adds	r3, r7, r5
 800a230:	2200      	movs	r2, #0
 800a232:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800a234:	197c      	adds	r4, r7, r5
 800a236:	4a22      	ldr	r2, [pc, #136]	@ (800a2c0 <sen5x_read_data_ready+0x9c>)
 800a238:	197b      	adds	r3, r7, r5
 800a23a:	8819      	ldrh	r1, [r3, #0]
 800a23c:	2308      	movs	r3, #8
 800a23e:	18fb      	adds	r3, r7, r3
 800a240:	0018      	movs	r0, r3
 800a242:	f001 fac7 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a246:	0003      	movs	r3, r0
 800a248:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a24a:	260c      	movs	r6, #12
 800a24c:	19bc      	adds	r4, r7, r6
 800a24e:	197b      	adds	r3, r7, r5
 800a250:	881a      	ldrh	r2, [r3, #0]
 800a252:	2308      	movs	r3, #8
 800a254:	18fb      	adds	r3, r7, r3
 800a256:	0019      	movs	r1, r3
 800a258:	2069      	movs	r0, #105	@ 0x69
 800a25a:	f001 fb3f 	bl	800b8dc <sensirion_i2c_write_data>
 800a25e:	0003      	movs	r3, r0
 800a260:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a262:	19bb      	adds	r3, r7, r6
 800a264:	2200      	movs	r2, #0
 800a266:	5e9b      	ldrsh	r3, [r3, r2]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d003      	beq.n	800a274 <sen5x_read_data_ready+0x50>
        return error;
 800a26c:	19bb      	adds	r3, r7, r6
 800a26e:	2200      	movs	r2, #0
 800a270:	5e9b      	ldrsh	r3, [r3, r2]
 800a272:	e020      	b.n	800a2b6 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a274:	4b13      	ldr	r3, [pc, #76]	@ (800a2c4 <sen5x_read_data_ready+0xa0>)
 800a276:	0018      	movs	r0, r3
 800a278:	f7ff fd38 	bl	8009cec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800a27c:	250c      	movs	r5, #12
 800a27e:	197c      	adds	r4, r7, r5
 800a280:	2308      	movs	r3, #8
 800a282:	18fb      	adds	r3, r7, r3
 800a284:	2202      	movs	r2, #2
 800a286:	0019      	movs	r1, r3
 800a288:	2069      	movs	r0, #105	@ 0x69
 800a28a:	f001 fb3f 	bl	800b90c <sensirion_i2c_read_data_inplace>
 800a28e:	0003      	movs	r3, r0
 800a290:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a292:	197b      	adds	r3, r7, r5
 800a294:	2200      	movs	r2, #0
 800a296:	5e9b      	ldrsh	r3, [r3, r2]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <sen5x_read_data_ready+0x80>
        return error;
 800a29c:	197b      	adds	r3, r7, r5
 800a29e:	2200      	movs	r2, #0
 800a2a0:	5e9b      	ldrsh	r3, [r3, r2]
 800a2a2:	e008      	b.n	800a2b6 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800a2a4:	2308      	movs	r3, #8
 800a2a6:	18fb      	adds	r3, r7, r3
 800a2a8:	785b      	ldrb	r3, [r3, #1]
 800a2aa:	1e5a      	subs	r2, r3, #1
 800a2ac:	4193      	sbcs	r3, r2
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	b005      	add	sp, #20
 800a2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2be:	46c0      	nop			@ (mov r8, r8)
 800a2c0:	00000202 	.word	0x00000202
 800a2c4:	00004e20 	.word	0x00004e20

0800a2c8 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800a2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ca:	b08d      	sub	sp, #52	@ 0x34
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800a2d6:	252e      	movs	r5, #46	@ 0x2e
 800a2d8:	197b      	adds	r3, r7, r5
 800a2da:	2200      	movs	r2, #0
 800a2dc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800a2de:	197c      	adds	r4, r7, r5
 800a2e0:	23f1      	movs	r3, #241	@ 0xf1
 800a2e2:	009a      	lsls	r2, r3, #2
 800a2e4:	197b      	adds	r3, r7, r5
 800a2e6:	8819      	ldrh	r1, [r3, #0]
 800a2e8:	2314      	movs	r3, #20
 800a2ea:	18fb      	adds	r3, r7, r3
 800a2ec:	0018      	movs	r0, r3
 800a2ee:	f001 fa71 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a2f2:	0003      	movs	r3, r0
 800a2f4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a2f6:	262c      	movs	r6, #44	@ 0x2c
 800a2f8:	19bc      	adds	r4, r7, r6
 800a2fa:	197b      	adds	r3, r7, r5
 800a2fc:	881a      	ldrh	r2, [r3, #0]
 800a2fe:	2314      	movs	r3, #20
 800a300:	18fb      	adds	r3, r7, r3
 800a302:	0019      	movs	r1, r3
 800a304:	2069      	movs	r0, #105	@ 0x69
 800a306:	f001 fae9 	bl	800b8dc <sensirion_i2c_write_data>
 800a30a:	0003      	movs	r3, r0
 800a30c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a30e:	19bb      	adds	r3, r7, r6
 800a310:	2200      	movs	r2, #0
 800a312:	5e9b      	ldrsh	r3, [r3, r2]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d003      	beq.n	800a320 <sen5x_read_measured_values+0x58>
        return error;
 800a318:	19bb      	adds	r3, r7, r6
 800a31a:	2200      	movs	r2, #0
 800a31c:	5e9b      	ldrsh	r3, [r3, r2]
 800a31e:	e060      	b.n	800a3e2 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a320:	4b32      	ldr	r3, [pc, #200]	@ (800a3ec <sen5x_read_measured_values+0x124>)
 800a322:	0018      	movs	r0, r3
 800a324:	f7ff fce2 	bl	8009cec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800a328:	252c      	movs	r5, #44	@ 0x2c
 800a32a:	197c      	adds	r4, r7, r5
 800a32c:	2314      	movs	r3, #20
 800a32e:	18fb      	adds	r3, r7, r3
 800a330:	2210      	movs	r2, #16
 800a332:	0019      	movs	r1, r3
 800a334:	2069      	movs	r0, #105	@ 0x69
 800a336:	f001 fae9 	bl	800b90c <sensirion_i2c_read_data_inplace>
 800a33a:	0003      	movs	r3, r0
 800a33c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a33e:	197b      	adds	r3, r7, r5
 800a340:	2200      	movs	r2, #0
 800a342:	5e9b      	ldrsh	r3, [r3, r2]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d003      	beq.n	800a350 <sen5x_read_measured_values+0x88>
        return error;
 800a348:	197b      	adds	r3, r7, r5
 800a34a:	2200      	movs	r2, #0
 800a34c:	5e9b      	ldrsh	r3, [r3, r2]
 800a34e:	e048      	b.n	800a3e2 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800a350:	2414      	movs	r4, #20
 800a352:	193b      	adds	r3, r7, r4
 800a354:	0018      	movs	r0, r3
 800a356:	f000 fa79 	bl	800a84c <sensirion_common_bytes_to_uint16_t>
 800a35a:	0003      	movs	r3, r0
 800a35c:	001a      	movs	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800a362:	193b      	adds	r3, r7, r4
 800a364:	3302      	adds	r3, #2
 800a366:	0018      	movs	r0, r3
 800a368:	f000 fa70 	bl	800a84c <sensirion_common_bytes_to_uint16_t>
 800a36c:	0003      	movs	r3, r0
 800a36e:	001a      	movs	r2, r3
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800a374:	193b      	adds	r3, r7, r4
 800a376:	3304      	adds	r3, #4
 800a378:	0018      	movs	r0, r3
 800a37a:	f000 fa67 	bl	800a84c <sensirion_common_bytes_to_uint16_t>
 800a37e:	0003      	movs	r3, r0
 800a380:	001a      	movs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800a386:	193b      	adds	r3, r7, r4
 800a388:	3306      	adds	r3, #6
 800a38a:	0018      	movs	r0, r3
 800a38c:	f000 fa5e 	bl	800a84c <sensirion_common_bytes_to_uint16_t>
 800a390:	0003      	movs	r3, r0
 800a392:	001a      	movs	r2, r3
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800a398:	193b      	adds	r3, r7, r4
 800a39a:	3308      	adds	r3, #8
 800a39c:	0018      	movs	r0, r3
 800a39e:	f000 fa81 	bl	800a8a4 <sensirion_common_bytes_to_int16_t>
 800a3a2:	0003      	movs	r3, r0
 800a3a4:	001a      	movs	r2, r3
 800a3a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3a8:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800a3aa:	193b      	adds	r3, r7, r4
 800a3ac:	330a      	adds	r3, #10
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f000 fa78 	bl	800a8a4 <sensirion_common_bytes_to_int16_t>
 800a3b4:	0003      	movs	r3, r0
 800a3b6:	001a      	movs	r2, r3
 800a3b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3ba:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800a3bc:	193b      	adds	r3, r7, r4
 800a3be:	330c      	adds	r3, #12
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f000 fa6f 	bl	800a8a4 <sensirion_common_bytes_to_int16_t>
 800a3c6:	0003      	movs	r3, r0
 800a3c8:	001a      	movs	r2, r3
 800a3ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3cc:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800a3ce:	193b      	adds	r3, r7, r4
 800a3d0:	330e      	adds	r3, #14
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f000 fa66 	bl	800a8a4 <sensirion_common_bytes_to_int16_t>
 800a3d8:	0003      	movs	r3, r0
 800a3da:	001a      	movs	r2, r3
 800a3dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a3de:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	b00d      	add	sp, #52	@ 0x34
 800a3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ea:	46c0      	nop			@ (mov r8, r8)
 800a3ec:	00004e20 	.word	0x00004e20

0800a3f0 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800a3f0:	b590      	push	{r4, r7, lr}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a3f6:	1dbb      	adds	r3, r7, #6
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800a3fc:	1dbc      	adds	r4, r7, #6
 800a3fe:	4a12      	ldr	r2, [pc, #72]	@ (800a448 <sen5x_start_fan_cleaning+0x58>)
 800a400:	1dbb      	adds	r3, r7, #6
 800a402:	8819      	ldrh	r1, [r3, #0]
 800a404:	003b      	movs	r3, r7
 800a406:	0018      	movs	r0, r3
 800a408:	f001 f9e4 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a40c:	0003      	movs	r3, r0
 800a40e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a410:	1d3c      	adds	r4, r7, #4
 800a412:	1dbb      	adds	r3, r7, #6
 800a414:	881a      	ldrh	r2, [r3, #0]
 800a416:	003b      	movs	r3, r7
 800a418:	0019      	movs	r1, r3
 800a41a:	2069      	movs	r0, #105	@ 0x69
 800a41c:	f001 fa5e 	bl	800b8dc <sensirion_i2c_write_data>
 800a420:	0003      	movs	r3, r0
 800a422:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a424:	1d3b      	adds	r3, r7, #4
 800a426:	2200      	movs	r2, #0
 800a428:	5e9b      	ldrsh	r3, [r3, r2]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d003      	beq.n	800a436 <sen5x_start_fan_cleaning+0x46>
        return error;
 800a42e:	1d3b      	adds	r3, r7, #4
 800a430:	2200      	movs	r2, #0
 800a432:	5e9b      	ldrsh	r3, [r3, r2]
 800a434:	e004      	b.n	800a440 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a436:	4b05      	ldr	r3, [pc, #20]	@ (800a44c <sen5x_start_fan_cleaning+0x5c>)
 800a438:	0018      	movs	r0, r3
 800a43a:	f7ff fc57 	bl	8009cec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	0018      	movs	r0, r3
 800a442:	46bd      	mov	sp, r7
 800a444:	b003      	add	sp, #12
 800a446:	bd90      	pop	{r4, r7, pc}
 800a448:	00005607 	.word	0x00005607
 800a44c:	00004e20 	.word	0x00004e20

0800a450 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	0004      	movs	r4, r0
 800a458:	0008      	movs	r0, r1
 800a45a:	0011      	movs	r1, r2
 800a45c:	1dbb      	adds	r3, r7, #6
 800a45e:	1c22      	adds	r2, r4, #0
 800a460:	801a      	strh	r2, [r3, #0]
 800a462:	1d3b      	adds	r3, r7, #4
 800a464:	1c02      	adds	r2, r0, #0
 800a466:	801a      	strh	r2, [r3, #0]
 800a468:	1cbb      	adds	r3, r7, #2
 800a46a:	1c0a      	adds	r2, r1, #0
 800a46c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a46e:	2516      	movs	r5, #22
 800a470:	197b      	adds	r3, r7, r5
 800a472:	2200      	movs	r2, #0
 800a474:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a476:	197c      	adds	r4, r7, r5
 800a478:	4a25      	ldr	r2, [pc, #148]	@ (800a510 <sen5x_set_temperature_offset_parameters+0xc0>)
 800a47a:	197b      	adds	r3, r7, r5
 800a47c:	8819      	ldrh	r1, [r3, #0]
 800a47e:	2608      	movs	r6, #8
 800a480:	19bb      	adds	r3, r7, r6
 800a482:	0018      	movs	r0, r3
 800a484:	f001 f9a6 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a488:	0003      	movs	r3, r0
 800a48a:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a48c:	197c      	adds	r4, r7, r5
 800a48e:	1dbb      	adds	r3, r7, #6
 800a490:	2200      	movs	r2, #0
 800a492:	5e9a      	ldrsh	r2, [r3, r2]
 800a494:	197b      	adds	r3, r7, r5
 800a496:	8819      	ldrh	r1, [r3, #0]
 800a498:	19bb      	adds	r3, r7, r6
 800a49a:	0018      	movs	r0, r3
 800a49c:	f001 fa05 	bl	800b8aa <sensirion_i2c_add_int16_t_to_buffer>
 800a4a0:	0003      	movs	r3, r0
 800a4a2:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a4a4:	197c      	adds	r4, r7, r5
 800a4a6:	1d3b      	adds	r3, r7, #4
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	5e9a      	ldrsh	r2, [r3, r2]
 800a4ac:	197b      	adds	r3, r7, r5
 800a4ae:	8819      	ldrh	r1, [r3, #0]
 800a4b0:	19bb      	adds	r3, r7, r6
 800a4b2:	0018      	movs	r0, r3
 800a4b4:	f001 f9f9 	bl	800b8aa <sensirion_i2c_add_int16_t_to_buffer>
 800a4b8:	0003      	movs	r3, r0
 800a4ba:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a4bc:	197c      	adds	r4, r7, r5
 800a4be:	1cbb      	adds	r3, r7, #2
 800a4c0:	881a      	ldrh	r2, [r3, #0]
 800a4c2:	197b      	adds	r3, r7, r5
 800a4c4:	8819      	ldrh	r1, [r3, #0]
 800a4c6:	19bb      	adds	r3, r7, r6
 800a4c8:	0018      	movs	r0, r3
 800a4ca:	f001 f9af 	bl	800b82c <sensirion_i2c_add_uint16_t_to_buffer>
 800a4ce:	0003      	movs	r3, r0
 800a4d0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a4d2:	2214      	movs	r2, #20
 800a4d4:	18bc      	adds	r4, r7, r2
 800a4d6:	197b      	adds	r3, r7, r5
 800a4d8:	881a      	ldrh	r2, [r3, #0]
 800a4da:	19bb      	adds	r3, r7, r6
 800a4dc:	0019      	movs	r1, r3
 800a4de:	2069      	movs	r0, #105	@ 0x69
 800a4e0:	f001 f9fc 	bl	800b8dc <sensirion_i2c_write_data>
 800a4e4:	0003      	movs	r3, r0
 800a4e6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a4e8:	2214      	movs	r2, #20
 800a4ea:	18bb      	adds	r3, r7, r2
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	5e5b      	ldrsh	r3, [r3, r1]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d003      	beq.n	800a4fc <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a4f4:	18bb      	adds	r3, r7, r2
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	5e9b      	ldrsh	r3, [r3, r2]
 800a4fa:	e004      	b.n	800a506 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a4fc:	4b05      	ldr	r3, [pc, #20]	@ (800a514 <sen5x_set_temperature_offset_parameters+0xc4>)
 800a4fe:	0018      	movs	r0, r3
 800a500:	f7ff fbf4 	bl	8009cec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a504:	2300      	movs	r3, #0
}
 800a506:	0018      	movs	r0, r3
 800a508:	46bd      	mov	sp, r7
 800a50a:	b007      	add	sp, #28
 800a50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a50e:	46c0      	nop			@ (mov r8, r8)
 800a510:	000060b2 	.word	0x000060b2
 800a514:	00004e20 	.word	0x00004e20

0800a518 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a51a:	b091      	sub	sp, #68	@ 0x44
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	000a      	movs	r2, r1
 800a522:	1cfb      	adds	r3, r7, #3
 800a524:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a526:	253e      	movs	r5, #62	@ 0x3e
 800a528:	197b      	adds	r3, r7, r5
 800a52a:	2200      	movs	r2, #0
 800a52c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a52e:	197c      	adds	r4, r7, r5
 800a530:	4a22      	ldr	r2, [pc, #136]	@ (800a5bc <sen5x_get_product_name+0xa4>)
 800a532:	197b      	adds	r3, r7, r5
 800a534:	8819      	ldrh	r1, [r3, #0]
 800a536:	230c      	movs	r3, #12
 800a538:	18fb      	adds	r3, r7, r3
 800a53a:	0018      	movs	r0, r3
 800a53c:	f001 f94a 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a540:	0003      	movs	r3, r0
 800a542:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a544:	263c      	movs	r6, #60	@ 0x3c
 800a546:	19bc      	adds	r4, r7, r6
 800a548:	197b      	adds	r3, r7, r5
 800a54a:	881a      	ldrh	r2, [r3, #0]
 800a54c:	230c      	movs	r3, #12
 800a54e:	18fb      	adds	r3, r7, r3
 800a550:	0019      	movs	r1, r3
 800a552:	2069      	movs	r0, #105	@ 0x69
 800a554:	f001 f9c2 	bl	800b8dc <sensirion_i2c_write_data>
 800a558:	0003      	movs	r3, r0
 800a55a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a55c:	19bb      	adds	r3, r7, r6
 800a55e:	2200      	movs	r2, #0
 800a560:	5e9b      	ldrsh	r3, [r3, r2]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <sen5x_get_product_name+0x56>
        return error;
 800a566:	19bb      	adds	r3, r7, r6
 800a568:	2200      	movs	r2, #0
 800a56a:	5e9b      	ldrsh	r3, [r3, r2]
 800a56c:	e021      	b.n	800a5b2 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a56e:	4b14      	ldr	r3, [pc, #80]	@ (800a5c0 <sen5x_get_product_name+0xa8>)
 800a570:	0018      	movs	r0, r3
 800a572:	f7ff fbbb 	bl	8009cec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a576:	253c      	movs	r5, #60	@ 0x3c
 800a578:	197c      	adds	r4, r7, r5
 800a57a:	230c      	movs	r3, #12
 800a57c:	18fb      	adds	r3, r7, r3
 800a57e:	2220      	movs	r2, #32
 800a580:	0019      	movs	r1, r3
 800a582:	2069      	movs	r0, #105	@ 0x69
 800a584:	f001 f9c2 	bl	800b90c <sensirion_i2c_read_data_inplace>
 800a588:	0003      	movs	r3, r0
 800a58a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a58c:	197b      	adds	r3, r7, r5
 800a58e:	2200      	movs	r2, #0
 800a590:	5e9b      	ldrsh	r3, [r3, r2]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <sen5x_get_product_name+0x86>
        return error;
 800a596:	197b      	adds	r3, r7, r5
 800a598:	2200      	movs	r2, #0
 800a59a:	5e9b      	ldrsh	r3, [r3, r2]
 800a59c:	e009      	b.n	800a5b2 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a59e:	1cfb      	adds	r3, r7, #3
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	6879      	ldr	r1, [r7, #4]
 800a5a6:	230c      	movs	r3, #12
 800a5a8:	18fb      	adds	r3, r7, r3
 800a5aa:	0018      	movs	r0, r3
 800a5ac:	f000 f988 	bl	800a8c0 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	b011      	add	sp, #68	@ 0x44
 800a5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ba:	46c0      	nop			@ (mov r8, r8)
 800a5bc:	0000d014 	.word	0x0000d014
 800a5c0:	0000c350 	.word	0x0000c350

0800a5c4 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5c6:	b091      	sub	sp, #68	@ 0x44
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	000a      	movs	r2, r1
 800a5ce:	1cfb      	adds	r3, r7, #3
 800a5d0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a5d2:	253e      	movs	r5, #62	@ 0x3e
 800a5d4:	197b      	adds	r3, r7, r5
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a5da:	197c      	adds	r4, r7, r5
 800a5dc:	4a22      	ldr	r2, [pc, #136]	@ (800a668 <sen5x_get_serial_number+0xa4>)
 800a5de:	197b      	adds	r3, r7, r5
 800a5e0:	8819      	ldrh	r1, [r3, #0]
 800a5e2:	230c      	movs	r3, #12
 800a5e4:	18fb      	adds	r3, r7, r3
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f001 f8f4 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a5ec:	0003      	movs	r3, r0
 800a5ee:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a5f0:	263c      	movs	r6, #60	@ 0x3c
 800a5f2:	19bc      	adds	r4, r7, r6
 800a5f4:	197b      	adds	r3, r7, r5
 800a5f6:	881a      	ldrh	r2, [r3, #0]
 800a5f8:	230c      	movs	r3, #12
 800a5fa:	18fb      	adds	r3, r7, r3
 800a5fc:	0019      	movs	r1, r3
 800a5fe:	2069      	movs	r0, #105	@ 0x69
 800a600:	f001 f96c 	bl	800b8dc <sensirion_i2c_write_data>
 800a604:	0003      	movs	r3, r0
 800a606:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a608:	19bb      	adds	r3, r7, r6
 800a60a:	2200      	movs	r2, #0
 800a60c:	5e9b      	ldrsh	r3, [r3, r2]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <sen5x_get_serial_number+0x56>
        return error;
 800a612:	19bb      	adds	r3, r7, r6
 800a614:	2200      	movs	r2, #0
 800a616:	5e9b      	ldrsh	r3, [r3, r2]
 800a618:	e021      	b.n	800a65e <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a61a:	4b14      	ldr	r3, [pc, #80]	@ (800a66c <sen5x_get_serial_number+0xa8>)
 800a61c:	0018      	movs	r0, r3
 800a61e:	f7ff fb65 	bl	8009cec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a622:	253c      	movs	r5, #60	@ 0x3c
 800a624:	197c      	adds	r4, r7, r5
 800a626:	230c      	movs	r3, #12
 800a628:	18fb      	adds	r3, r7, r3
 800a62a:	2220      	movs	r2, #32
 800a62c:	0019      	movs	r1, r3
 800a62e:	2069      	movs	r0, #105	@ 0x69
 800a630:	f001 f96c 	bl	800b90c <sensirion_i2c_read_data_inplace>
 800a634:	0003      	movs	r3, r0
 800a636:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a638:	197b      	adds	r3, r7, r5
 800a63a:	2200      	movs	r2, #0
 800a63c:	5e9b      	ldrsh	r3, [r3, r2]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d003      	beq.n	800a64a <sen5x_get_serial_number+0x86>
        return error;
 800a642:	197b      	adds	r3, r7, r5
 800a644:	2200      	movs	r2, #0
 800a646:	5e9b      	ldrsh	r3, [r3, r2]
 800a648:	e009      	b.n	800a65e <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a64a:	1cfb      	adds	r3, r7, #3
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	b29a      	uxth	r2, r3
 800a650:	6879      	ldr	r1, [r7, #4]
 800a652:	230c      	movs	r3, #12
 800a654:	18fb      	adds	r3, r7, r3
 800a656:	0018      	movs	r0, r3
 800a658:	f000 f932 	bl	800a8c0 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	0018      	movs	r0, r3
 800a660:	46bd      	mov	sp, r7
 800a662:	b011      	add	sp, #68	@ 0x44
 800a664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a666:	46c0      	nop			@ (mov r8, r8)
 800a668:	0000d033 	.word	0x0000d033
 800a66c:	0000c350 	.word	0x0000c350

0800a670 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a672:	b089      	sub	sp, #36	@ 0x24
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
 800a67c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a67e:	251e      	movs	r5, #30
 800a680:	197b      	adds	r3, r7, r5
 800a682:	2200      	movs	r2, #0
 800a684:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a686:	197c      	adds	r4, r7, r5
 800a688:	23d1      	movs	r3, #209	@ 0xd1
 800a68a:	021a      	lsls	r2, r3, #8
 800a68c:	197b      	adds	r3, r7, r5
 800a68e:	8819      	ldrh	r1, [r3, #0]
 800a690:	2310      	movs	r3, #16
 800a692:	18fb      	adds	r3, r7, r3
 800a694:	0018      	movs	r0, r3
 800a696:	f001 f89d 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a69a:	0003      	movs	r3, r0
 800a69c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a69e:	261c      	movs	r6, #28
 800a6a0:	19bc      	adds	r4, r7, r6
 800a6a2:	197b      	adds	r3, r7, r5
 800a6a4:	881a      	ldrh	r2, [r3, #0]
 800a6a6:	2310      	movs	r3, #16
 800a6a8:	18fb      	adds	r3, r7, r3
 800a6aa:	0019      	movs	r1, r3
 800a6ac:	2069      	movs	r0, #105	@ 0x69
 800a6ae:	f001 f915 	bl	800b8dc <sensirion_i2c_write_data>
 800a6b2:	0003      	movs	r3, r0
 800a6b4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a6b6:	19bb      	adds	r3, r7, r6
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	5e9b      	ldrsh	r3, [r3, r2]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d003      	beq.n	800a6c8 <sen5x_get_version+0x58>
        return error;
 800a6c0:	19bb      	adds	r3, r7, r6
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	5e9b      	ldrsh	r3, [r3, r2]
 800a6c6:	e038      	b.n	800a73a <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a6c8:	4b1e      	ldr	r3, [pc, #120]	@ (800a744 <sen5x_get_version+0xd4>)
 800a6ca:	0018      	movs	r0, r3
 800a6cc:	f7ff fb0e 	bl	8009cec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a6d0:	251c      	movs	r5, #28
 800a6d2:	197c      	adds	r4, r7, r5
 800a6d4:	2310      	movs	r3, #16
 800a6d6:	18fb      	adds	r3, r7, r3
 800a6d8:	2208      	movs	r2, #8
 800a6da:	0019      	movs	r1, r3
 800a6dc:	2069      	movs	r0, #105	@ 0x69
 800a6de:	f001 f915 	bl	800b90c <sensirion_i2c_read_data_inplace>
 800a6e2:	0003      	movs	r3, r0
 800a6e4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a6e6:	197b      	adds	r3, r7, r5
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	5e9b      	ldrsh	r3, [r3, r2]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d003      	beq.n	800a6f8 <sen5x_get_version+0x88>
        return error;
 800a6f0:	197b      	adds	r3, r7, r5
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	5e9b      	ldrsh	r3, [r3, r2]
 800a6f6:	e020      	b.n	800a73a <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a6f8:	2110      	movs	r1, #16
 800a6fa:	187b      	adds	r3, r7, r1
 800a6fc:	781a      	ldrb	r2, [r3, #0]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a702:	187b      	adds	r3, r7, r1
 800a704:	785a      	ldrb	r2, [r3, #1]
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a70a:	187b      	adds	r3, r7, r1
 800a70c:	789b      	ldrb	r3, [r3, #2]
 800a70e:	1e5a      	subs	r2, r3, #1
 800a710:	4193      	sbcs	r3, r2
 800a712:	b2da      	uxtb	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a718:	187b      	adds	r3, r7, r1
 800a71a:	78da      	ldrb	r2, [r3, #3]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a720:	187b      	adds	r3, r7, r1
 800a722:	791a      	ldrb	r2, [r3, #4]
 800a724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a726:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a728:	187b      	adds	r3, r7, r1
 800a72a:	795a      	ldrb	r2, [r3, #5]
 800a72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a72e:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a730:	187b      	adds	r3, r7, r1
 800a732:	799a      	ldrb	r2, [r3, #6]
 800a734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a736:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	0018      	movs	r0, r3
 800a73c:	46bd      	mov	sp, r7
 800a73e:	b009      	add	sp, #36	@ 0x24
 800a740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a742:	46c0      	nop			@ (mov r8, r8)
 800a744:	00004e20 	.word	0x00004e20

0800a748 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a750:	2516      	movs	r5, #22
 800a752:	197b      	adds	r3, r7, r5
 800a754:	2200      	movs	r2, #0
 800a756:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a758:	197c      	adds	r4, r7, r5
 800a75a:	4a22      	ldr	r2, [pc, #136]	@ (800a7e4 <sen5x_read_device_status+0x9c>)
 800a75c:	197b      	adds	r3, r7, r5
 800a75e:	8819      	ldrh	r1, [r3, #0]
 800a760:	230c      	movs	r3, #12
 800a762:	18fb      	adds	r3, r7, r3
 800a764:	0018      	movs	r0, r3
 800a766:	f001 f835 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a76a:	0003      	movs	r3, r0
 800a76c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a76e:	2614      	movs	r6, #20
 800a770:	19bc      	adds	r4, r7, r6
 800a772:	197b      	adds	r3, r7, r5
 800a774:	881a      	ldrh	r2, [r3, #0]
 800a776:	230c      	movs	r3, #12
 800a778:	18fb      	adds	r3, r7, r3
 800a77a:	0019      	movs	r1, r3
 800a77c:	2069      	movs	r0, #105	@ 0x69
 800a77e:	f001 f8ad 	bl	800b8dc <sensirion_i2c_write_data>
 800a782:	0003      	movs	r3, r0
 800a784:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a786:	19bb      	adds	r3, r7, r6
 800a788:	2200      	movs	r2, #0
 800a78a:	5e9b      	ldrsh	r3, [r3, r2]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <sen5x_read_device_status+0x50>
        return error;
 800a790:	19bb      	adds	r3, r7, r6
 800a792:	2200      	movs	r2, #0
 800a794:	5e9b      	ldrsh	r3, [r3, r2]
 800a796:	e020      	b.n	800a7da <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a798:	4b13      	ldr	r3, [pc, #76]	@ (800a7e8 <sen5x_read_device_status+0xa0>)
 800a79a:	0018      	movs	r0, r3
 800a79c:	f7ff faa6 	bl	8009cec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a7a0:	2514      	movs	r5, #20
 800a7a2:	197c      	adds	r4, r7, r5
 800a7a4:	230c      	movs	r3, #12
 800a7a6:	18fb      	adds	r3, r7, r3
 800a7a8:	2204      	movs	r2, #4
 800a7aa:	0019      	movs	r1, r3
 800a7ac:	2069      	movs	r0, #105	@ 0x69
 800a7ae:	f001 f8ad 	bl	800b90c <sensirion_i2c_read_data_inplace>
 800a7b2:	0003      	movs	r3, r0
 800a7b4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a7b6:	197b      	adds	r3, r7, r5
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	5e9b      	ldrsh	r3, [r3, r2]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d003      	beq.n	800a7c8 <sen5x_read_device_status+0x80>
        return error;
 800a7c0:	197b      	adds	r3, r7, r5
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	5e9b      	ldrsh	r3, [r3, r2]
 800a7c6:	e008      	b.n	800a7da <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a7c8:	230c      	movs	r3, #12
 800a7ca:	18fb      	adds	r3, r7, r3
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	f000 f850 	bl	800a872 <sensirion_common_bytes_to_uint32_t>
 800a7d2:	0002      	movs	r2, r0
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	0018      	movs	r0, r3
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	b007      	add	sp, #28
 800a7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7e2:	46c0      	nop			@ (mov r8, r8)
 800a7e4:	0000d206 	.word	0x0000d206
 800a7e8:	00004e20 	.word	0x00004e20

0800a7ec <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a7ec:	b590      	push	{r4, r7, lr}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a7f2:	1dbb      	adds	r3, r7, #6
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a7f8:	1dbc      	adds	r4, r7, #6
 800a7fa:	4a12      	ldr	r2, [pc, #72]	@ (800a844 <sen5x_device_reset+0x58>)
 800a7fc:	1dbb      	adds	r3, r7, #6
 800a7fe:	8819      	ldrh	r1, [r3, #0]
 800a800:	003b      	movs	r3, r7
 800a802:	0018      	movs	r0, r3
 800a804:	f000 ffe6 	bl	800b7d4 <sensirion_i2c_add_command_to_buffer>
 800a808:	0003      	movs	r3, r0
 800a80a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a80c:	1d3c      	adds	r4, r7, #4
 800a80e:	1dbb      	adds	r3, r7, #6
 800a810:	881a      	ldrh	r2, [r3, #0]
 800a812:	003b      	movs	r3, r7
 800a814:	0019      	movs	r1, r3
 800a816:	2069      	movs	r0, #105	@ 0x69
 800a818:	f001 f860 	bl	800b8dc <sensirion_i2c_write_data>
 800a81c:	0003      	movs	r3, r0
 800a81e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a820:	1d3b      	adds	r3, r7, #4
 800a822:	2200      	movs	r2, #0
 800a824:	5e9b      	ldrsh	r3, [r3, r2]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <sen5x_device_reset+0x46>
        return error;
 800a82a:	1d3b      	adds	r3, r7, #4
 800a82c:	2200      	movs	r2, #0
 800a82e:	5e9b      	ldrsh	r3, [r3, r2]
 800a830:	e004      	b.n	800a83c <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a832:	4b05      	ldr	r3, [pc, #20]	@ (800a848 <sen5x_device_reset+0x5c>)
 800a834:	0018      	movs	r0, r3
 800a836:	f7ff fa59 	bl	8009cec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	0018      	movs	r0, r3
 800a83e:	46bd      	mov	sp, r7
 800a840:	b003      	add	sp, #12
 800a842:	bd90      	pop	{r4, r7, pc}
 800a844:	0000d304 	.word	0x0000d304
 800a848:	00030d40 	.word	0x00030d40

0800a84c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	021b      	lsls	r3, r3, #8
 800a85a:	b21a      	sxth	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3301      	adds	r3, #1
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	b21b      	sxth	r3, r3
 800a864:	4313      	orrs	r3, r2
 800a866:	b21b      	sxth	r3, r3
 800a868:	b29b      	uxth	r3, r3
}
 800a86a:	0018      	movs	r0, r3
 800a86c:	46bd      	mov	sp, r7
 800a86e:	b002      	add	sp, #8
 800a870:	bd80      	pop	{r7, pc}

0800a872 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	061a      	lsls	r2, r3, #24
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	3301      	adds	r3, #1
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	041b      	lsls	r3, r3, #16
 800a888:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	3302      	adds	r3, #2
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a892:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	3203      	adds	r2, #3
 800a898:	7812      	ldrb	r2, [r2, #0]
 800a89a:	4313      	orrs	r3, r2
}
 800a89c:	0018      	movs	r0, r3
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	b002      	add	sp, #8
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	0018      	movs	r0, r3
 800a8b0:	f7ff ffcc 	bl	800a84c <sensirion_common_bytes_to_uint16_t>
 800a8b4:	0003      	movs	r3, r0
 800a8b6:	b21b      	sxth	r3, r3
}
 800a8b8:	0018      	movs	r0, r3
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	b002      	add	sp, #8
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	1dbb      	adds	r3, r7, #6
 800a8cc:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a8ce:	2316      	movs	r3, #22
 800a8d0:	18fb      	adds	r3, r7, r3
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	801a      	strh	r2, [r3, #0]
 800a8d6:	e00f      	b.n	800a8f8 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a8d8:	2016      	movs	r0, #22
 800a8da:	183b      	adds	r3, r7, r0
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	18d2      	adds	r2, r2, r3
 800a8e2:	183b      	adds	r3, r7, r0
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	68b9      	ldr	r1, [r7, #8]
 800a8e8:	18cb      	adds	r3, r1, r3
 800a8ea:	7812      	ldrb	r2, [r2, #0]
 800a8ec:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a8ee:	183b      	adds	r3, r7, r0
 800a8f0:	881a      	ldrh	r2, [r3, #0]
 800a8f2:	183b      	adds	r3, r7, r0
 800a8f4:	3201      	adds	r2, #1
 800a8f6:	801a      	strh	r2, [r3, #0]
 800a8f8:	2316      	movs	r3, #22
 800a8fa:	18fa      	adds	r2, r7, r3
 800a8fc:	1dbb      	adds	r3, r7, #6
 800a8fe:	8812      	ldrh	r2, [r2, #0]
 800a900:	881b      	ldrh	r3, [r3, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d3e8      	bcc.n	800a8d8 <sensirion_common_copy_bytes+0x18>
    }
}
 800a906:	46c0      	nop			@ (mov r8, r8)
 800a908:	46c0      	nop			@ (mov r8, r8)
 800a90a:	46bd      	mov	sp, r7
 800a90c:	b006      	add	sp, #24
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d113      	bne.n	800a956 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	22fe      	movs	r2, #254	@ 0xfe
 800a932:	0592      	lsls	r2, r2, #22
 800a934:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	4a1a      	ldr	r2, [pc, #104]	@ (800a9a4 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a93a:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4a1a      	ldr	r2, [pc, #104]	@ (800a9a8 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a940:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4a19      	ldr	r2, [pc, #100]	@ (800a9ac <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a946:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	4a19      	ldr	r2, [pc, #100]	@ (800a9b0 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a94c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4a18      	ldr	r2, [pc, #96]	@ (800a9b4 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a952:	61da      	str	r2, [r3, #28]
 800a954:	e011      	b.n	800a97a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4a17      	ldr	r2, [pc, #92]	@ (800a9b8 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a95a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4a17      	ldr	r2, [pc, #92]	@ (800a9bc <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a960:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	4a16      	ldr	r2, [pc, #88]	@ (800a9c0 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a966:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4a16      	ldr	r2, [pc, #88]	@ (800a9c4 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a96c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4a15      	ldr	r2, [pc, #84]	@ (800a9c8 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a972:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	4a15      	ldr	r2, [pc, #84]	@ (800a9cc <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a978:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	4a14      	ldr	r2, [pc, #80]	@ (800a9d0 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a97e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4a14      	ldr	r2, [pc, #80]	@ (800a9d4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a984:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4a12      	ldr	r2, [pc, #72]	@ (800a9d4 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a98a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4a12      	ldr	r2, [pc, #72]	@ (800a9d8 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a990:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	0018      	movs	r0, r3
 800a996:	f000 f833 	bl	800aa00 <GasIndexAlgorithm_reset>
}
 800a99a:	46c0      	nop			@ (mov r8, r8)
 800a99c:	46bd      	mov	sp, r7
 800a99e:	b004      	add	sp, #16
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	46c0      	nop			@ (mov r8, r8)
 800a9a4:	00002710 	.word	0x00002710
 800a9a8:	44340000 	.word	0x44340000
 800a9ac:	46859800 	.word	0x46859800
 800a9b0:	46a05000 	.word	0x46a05000
 800a9b4:	41f00000 	.word	0x41f00000
 800a9b8:	42c80000 	.word	0x42c80000
 800a9bc:	00004e20 	.word	0x00004e20
 800a9c0:	43340000 	.word	0x43340000
 800a9c4:	4528c000 	.word	0x4528c000
 800a9c8:	45a32000 	.word	0x45a32000
 800a9cc:	43aa0000 	.word	0x43aa0000
 800a9d0:	43660000 	.word	0x43660000
 800a9d4:	41400000 	.word	0x41400000
 800a9d8:	42480000 	.word	0x42480000

0800a9dc <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a9e6:	4a05      	ldr	r2, [pc, #20]	@ (800a9fc <GasIndexAlgorithm_init+0x20>)
 800a9e8:	6839      	ldr	r1, [r7, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	0018      	movs	r0, r3
 800a9ee:	f7ff ff8f 	bl	800a910 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a9f2:	46c0      	nop			@ (mov r8, r8)
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	b002      	add	sp, #8
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	46c0      	nop			@ (mov r8, r8)
 800a9fc:	44610000 	.word	0x44610000

0800aa00 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	0018      	movs	r0, r3
 800aa1e:	f000 f805 	bl	800aa2c <GasIndexAlgorithm__init_instances>
}
 800aa22:	46c0      	nop			@ (mov r8, r8)
 800aa24:	46bd      	mov	sp, r7
 800aa26:	b002      	add	sp, #8
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800aa2c:	b590      	push	{r4, r7, lr}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	0018      	movs	r0, r3
 800aa38:	f000 f8e8 	bl	800ac0c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	0018      	movs	r0, r3
 800aa40:	f000 f9a6 	bl	800ad90 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800aa44:	1c04      	adds	r4, r0, #0
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f000 f9ab 	bl	800ada4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800aa4e:	1c02      	adds	r2, r0, #0
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	1c21      	adds	r1, r4, #0
 800aa54:	0018      	movs	r0, r3
 800aa56:	f000 fc3b 	bl	800b2d0 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d107      	bne.n	800aa72 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800aa62:	23fe      	movs	r3, #254	@ 0xfe
 800aa64:	059b      	lsls	r3, r3, #22
 800aa66:	4a0a      	ldr	r2, [pc, #40]	@ (800aa90 <GasIndexAlgorithm__init_instances+0x64>)
 800aa68:	490a      	ldr	r1, [pc, #40]	@ (800aa94 <GasIndexAlgorithm__init_instances+0x68>)
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fc86 	bl	800b37c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800aa70:	e005      	b.n	800aa7e <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800aa72:	4b09      	ldr	r3, [pc, #36]	@ (800aa98 <GasIndexAlgorithm__init_instances+0x6c>)
 800aa74:	4a09      	ldr	r2, [pc, #36]	@ (800aa9c <GasIndexAlgorithm__init_instances+0x70>)
 800aa76:	490a      	ldr	r1, [pc, #40]	@ (800aaa0 <GasIndexAlgorithm__init_instances+0x74>)
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fc7f 	bl	800b37c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	0018      	movs	r0, r3
 800aa82:	f000 fd35 	bl	800b4f0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800aa86:	46c0      	nop			@ (mov r8, r8)
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	b003      	add	sp, #12
 800aa8c:	bd90      	pop	{r4, r7, pc}
 800aa8e:	46c0      	nop			@ (mov r8, r8)
 800aa90:	bc257a78 	.word	0xbc257a78
 800aa94:	44198000 	.word	0x44198000
 800aa98:	42c80000 	.word	0x42c80000
 800aa9c:	bbd4fdf4 	.word	0xbbd4fdf4
 800aaa0:	43550000 	.word	0x43550000

0800aaa4 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800aaa4:	b590      	push	{r4, r7, lr}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aab4:	4952      	ldr	r1, [pc, #328]	@ (800ac00 <GasIndexAlgorithm_process+0x15c>)
 800aab6:	1c18      	adds	r0, r3, #0
 800aab8:	f7f5 fd44 	bl	8000544 <__aeabi_fcmple>
 800aabc:	1e03      	subs	r3, r0, #0
 800aabe:	d00c      	beq.n	800aada <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	1c19      	adds	r1, r3, #0
 800aaca:	1c10      	adds	r0, r2, #0
 800aacc:	f7f5 fef8 	bl	80008c0 <__aeabi_fadd>
 800aad0:	1c03      	adds	r3, r0, #0
 800aad2:	1c1a      	adds	r2, r3, #0
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	631a      	str	r2, [r3, #48]	@ 0x30
 800aad8:	e080      	b.n	800abdc <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	dd25      	ble.n	800ab2c <GasIndexAlgorithm_process+0x88>
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	4a48      	ldr	r2, [pc, #288]	@ (800ac04 <GasIndexAlgorithm_process+0x160>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	dc21      	bgt.n	800ab2c <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	dc04      	bgt.n	800aafc <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	60bb      	str	r3, [r7, #8]
 800aafa:	e00d      	b.n	800ab18 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	4a41      	ldr	r2, [pc, #260]	@ (800ac08 <GasIndexAlgorithm_process+0x164>)
 800ab02:	4694      	mov	ip, r2
 800ab04:	4463      	add	r3, ip
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	dd05      	ble.n	800ab18 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	4a3d      	ldr	r2, [pc, #244]	@ (800ac08 <GasIndexAlgorithm_process+0x164>)
 800ab12:	4694      	mov	ip, r2
 800ab14:	4463      	add	r3, ip
 800ab16:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	0018      	movs	r0, r3
 800ab22:	f7f6 fd55 	bl	80015d0 <__aeabi_i2f>
 800ab26:	1c02      	adds	r2, r0, #0
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d005      	beq.n	800ab40 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	0018      	movs	r0, r3
 800ab38:	f000 f945 	bl	800adc6 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800ab3c:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800ab3e:	d014      	beq.n	800ab6a <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	1c11      	adds	r1, r2, #0
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f000 fbd1 	bl	800b2f0 <GasIndexAlgorithm__mox_model__process>
 800ab4e:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	1c11      	adds	r1, r2, #0
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	f000 fc25 	bl	800b3ac <GasIndexAlgorithm__sigmoid_scaled__process>
 800ab62:	1c02      	adds	r2, r0, #0
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	639a      	str	r2, [r3, #56]	@ 0x38
 800ab68:	e003      	b.n	800ab72 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	689a      	ldr	r2, [r3, #8]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	1c11      	adds	r1, r2, #0
 800ab7a:	0018      	movs	r0, r3
 800ab7c:	f000 fcec 	bl	800b558 <GasIndexAlgorithm__adaptive_lowpass__process>
 800ab80:	1c02      	adds	r2, r0, #0
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab8a:	21fc      	movs	r1, #252	@ 0xfc
 800ab8c:	0589      	lsls	r1, r1, #22
 800ab8e:	1c18      	adds	r0, r3, #0
 800ab90:	f7f5 fcce 	bl	8000530 <__aeabi_fcmplt>
 800ab94:	1e03      	subs	r3, r0, #0
 800ab96:	d003      	beq.n	800aba0 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	22fc      	movs	r2, #252	@ 0xfc
 800ab9c:	0592      	lsls	r2, r2, #22
 800ab9e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aba4:	2100      	movs	r1, #0
 800aba6:	1c18      	adds	r0, r3, #0
 800aba8:	f7f5 fcd6 	bl	8000558 <__aeabi_fcmpgt>
 800abac:	1e03      	subs	r3, r0, #0
 800abae:	d015      	beq.n	800abdc <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	1c11      	adds	r1, r2, #0
 800abb8:	0018      	movs	r0, r3
 800abba:	f000 fa4f 	bl	800b05c <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	0018      	movs	r0, r3
 800abc2:	f000 f8e5 	bl	800ad90 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800abc6:	1c04      	adds	r4, r0, #0
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	0018      	movs	r0, r3
 800abcc:	f000 f8ea 	bl	800ada4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800abd0:	1c02      	adds	r2, r0, #0
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	1c21      	adds	r1, r4, #0
 800abd6:	0018      	movs	r0, r3
 800abd8:	f000 fb7a 	bl	800b2d0 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe0:	21fc      	movs	r1, #252	@ 0xfc
 800abe2:	0589      	lsls	r1, r1, #22
 800abe4:	1c18      	adds	r0, r3, #0
 800abe6:	f7f5 fe6b 	bl	80008c0 <__aeabi_fadd>
 800abea:	1c03      	adds	r3, r0, #0
 800abec:	1c18      	adds	r0, r3, #0
 800abee:	f7f6 fccf 	bl	8001590 <__aeabi_f2iz>
 800abf2:	0002      	movs	r2, r0
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	601a      	str	r2, [r3, #0]
    return;
 800abf8:	46c0      	nop			@ (mov r8, r8)
}
 800abfa:	46bd      	mov	sp, r7
 800abfc:	b005      	add	sp, #20
 800abfe:	bd90      	pop	{r4, r7, pc}
 800ac00:	42340000 	.word	0x42340000
 800ac04:	0000fde7 	.word	0x0000fde7
 800ac08:	00007fff 	.word	0x00007fff

0800ac0c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800ac0c:	b5b0      	push	{r4, r5, r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	223c      	movs	r2, #60	@ 0x3c
 800ac18:	2100      	movs	r1, #0
 800ac1a:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	4952      	ldr	r1, [pc, #328]	@ (800ad80 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ac36:	1c18      	adds	r0, r3, #0
 800ac38:	f7f5 ffcc 	bl	8000bd4 <__aeabi_fdiv>
 800ac3c:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800ac3e:	2188      	movs	r1, #136	@ 0x88
 800ac40:	05c9      	lsls	r1, r1, #23
 800ac42:	1c18      	adds	r0, r3, #0
 800ac44:	f7f6 f9ac 	bl	8000fa0 <__aeabi_fmul>
 800ac48:	1c03      	adds	r3, r0, #0
 800ac4a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	494a      	ldr	r1, [pc, #296]	@ (800ad80 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ac56:	1c18      	adds	r0, r3, #0
 800ac58:	f7f5 ffbc 	bl	8000bd4 <__aeabi_fdiv>
 800ac5c:	1c03      	adds	r3, r0, #0
 800ac5e:	1c19      	adds	r1, r3, #0
 800ac60:	1c20      	adds	r0, r4, #0
 800ac62:	f7f5 fe2d 	bl	80008c0 <__aeabi_fadd>
 800ac66:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800ac68:	1c19      	adds	r1, r3, #0
 800ac6a:	1c28      	adds	r0, r5, #0
 800ac6c:	f7f5 ffb2 	bl	8000bd4 <__aeabi_fdiv>
 800ac70:	1c03      	adds	r3, r0, #0
 800ac72:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	4940      	ldr	r1, [pc, #256]	@ (800ad80 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ac7e:	1c18      	adds	r0, r3, #0
 800ac80:	f7f5 ffa8 	bl	8000bd4 <__aeabi_fdiv>
 800ac84:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ac86:	2185      	movs	r1, #133	@ 0x85
 800ac88:	05c9      	lsls	r1, r1, #23
 800ac8a:	1c18      	adds	r0, r3, #0
 800ac8c:	f7f6 f988 	bl	8000fa0 <__aeabi_fmul>
 800ac90:	1c03      	adds	r3, r0, #0
 800ac92:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	4938      	ldr	r1, [pc, #224]	@ (800ad80 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800ac9e:	1c18      	adds	r0, r3, #0
 800aca0:	f7f5 ff98 	bl	8000bd4 <__aeabi_fdiv>
 800aca4:	1c03      	adds	r3, r0, #0
 800aca6:	1c19      	adds	r1, r3, #0
 800aca8:	1c20      	adds	r0, r4, #0
 800acaa:	f7f5 fe09 	bl	80008c0 <__aeabi_fadd>
 800acae:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800acb0:	1c19      	adds	r1, r3, #0
 800acb2:	1c28      	adds	r0, r5, #0
 800acb4:	f7f5 ff8e 	bl	8000bd4 <__aeabi_fdiv>
 800acb8:	1c03      	adds	r3, r0, #0
 800acba:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d118      	bne.n	800acfa <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800accc:	2188      	movs	r1, #136	@ 0x88
 800acce:	05c9      	lsls	r1, r1, #23
 800acd0:	1c18      	adds	r0, r3, #0
 800acd2:	f7f6 f965 	bl	8000fa0 <__aeabi_fmul>
 800acd6:	1c03      	adds	r3, r0, #0
 800acd8:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800acde:	4929      	ldr	r1, [pc, #164]	@ (800ad84 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800ace0:	1c18      	adds	r0, r3, #0
 800ace2:	f7f5 fded 	bl	80008c0 <__aeabi_fadd>
 800ace6:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ace8:	1c19      	adds	r1, r3, #0
 800acea:	1c20      	adds	r0, r4, #0
 800acec:	f7f5 ff72 	bl	8000bd4 <__aeabi_fdiv>
 800acf0:	1c03      	adds	r3, r0, #0
 800acf2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	655a      	str	r2, [r3, #84]	@ 0x54
 800acf8:	e017      	b.n	800ad2a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800acfe:	2188      	movs	r1, #136	@ 0x88
 800ad00:	05c9      	lsls	r1, r1, #23
 800ad02:	1c18      	adds	r0, r3, #0
 800ad04:	f7f6 f94c 	bl	8000fa0 <__aeabi_fmul>
 800ad08:	1c03      	adds	r3, r0, #0
 800ad0a:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800ad10:	491d      	ldr	r1, [pc, #116]	@ (800ad88 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800ad12:	1c18      	adds	r0, r3, #0
 800ad14:	f7f5 fdd4 	bl	80008c0 <__aeabi_fadd>
 800ad18:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800ad1a:	1c19      	adds	r1, r3, #0
 800ad1c:	1c20      	adds	r0, r4, #0
 800ad1e:	f7f5 ff59 	bl	8000bd4 <__aeabi_fdiv>
 800ad22:	1c03      	adds	r3, r0, #0
 800ad24:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ad2e:	2185      	movs	r1, #133	@ 0x85
 800ad30:	05c9      	lsls	r1, r1, #23
 800ad32:	1c18      	adds	r0, r3, #0
 800ad34:	f7f6 f934 	bl	8000fa0 <__aeabi_fmul>
 800ad38:	1c03      	adds	r3, r0, #0
 800ad3a:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	4912      	ldr	r1, [pc, #72]	@ (800ad8c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800ad42:	1c18      	adds	r0, r3, #0
 800ad44:	f7f5 fdbc 	bl	80008c0 <__aeabi_fadd>
 800ad48:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800ad4a:	1c19      	adds	r1, r3, #0
 800ad4c:	1c20      	adds	r0, r4, #0
 800ad4e:	f7f5 ff41 	bl	8000bd4 <__aeabi_fdiv>
 800ad52:	1c03      	adds	r3, r0, #0
 800ad54:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800ad78:	46c0      	nop			@ (mov r8, r8)
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	b002      	add	sp, #8
 800ad7e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad80:	45610000 	.word	0x45610000
 800ad84:	44960000 	.word	0x44960000
 800ad88:	41a00000 	.word	0x41a00000
 800ad8c:	451c4000 	.word	0x451c4000

0800ad90 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800ad9c:	1c18      	adds	r0, r3, #0
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	b002      	add	sp, #8
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800adb4:	1c19      	adds	r1, r3, #0
 800adb6:	1c10      	adds	r0, r2, #0
 800adb8:	f7f5 fd82 	bl	80008c0 <__aeabi_fadd>
 800adbc:	1c03      	adds	r3, r0, #0
}
 800adbe:	1c18      	adds	r0, r3, #0
 800adc0:	46bd      	mov	sp, r7
 800adc2:	b002      	add	sp, #8
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	223c      	movs	r2, #60	@ 0x3c
 800add2:	5c9b      	ldrb	r3, [r3, r2]
}
 800add4:	0018      	movs	r0, r3
 800add6:	46bd      	mov	sp, r7
 800add8:	b002      	add	sp, #8
 800adda:	bd80      	pop	{r7, pc}

0800addc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800addc:	b5b0      	push	{r4, r5, r7, lr}
 800adde:	b08c      	sub	sp, #48	@ 0x30
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800ade8:	1c19      	adds	r1, r3, #0
 800adea:	4895      	ldr	r0, [pc, #596]	@ (800b040 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800adec:	f7f6 fa16 	bl	800121c <__aeabi_fsub>
 800adf0:	1c03      	adds	r3, r0, #0
 800adf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adf8:	1c19      	adds	r1, r3, #0
 800adfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adfc:	f7f5 fbac 	bl	8000558 <__aeabi_fcmpgt>
 800ae00:	1e03      	subs	r3, r0, #0
 800ae02:	d00b      	beq.n	800ae1c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800ae0c:	1c19      	adds	r1, r3, #0
 800ae0e:	1c10      	adds	r0, r2, #0
 800ae10:	f7f5 fd56 	bl	80008c0 <__aeabi_fadd>
 800ae14:	1c03      	adds	r3, r0, #0
 800ae16:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ae20:	1c19      	adds	r1, r3, #0
 800ae22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae24:	f7f5 fb98 	bl	8000558 <__aeabi_fcmpgt>
 800ae28:	1e03      	subs	r3, r0, #0
 800ae2a:	d00b      	beq.n	800ae44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800ae34:	1c19      	adds	r1, r3, #0
 800ae36:	1c10      	adds	r0, r2, #0
 800ae38:	f7f5 fd42 	bl	80008c0 <__aeabi_fadd>
 800ae3c:	1c03      	adds	r3, r0, #0
 800ae3e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6959      	ldr	r1, [r3, #20]
 800ae48:	4a7e      	ldr	r2, [pc, #504]	@ (800b044 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	0018      	movs	r0, r3
 800ae4e:	f000 f9f1 	bl	800b234 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	1c11      	adds	r1, r2, #0
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	f000 f9fa 	bl	800b254 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ae60:	1c03      	adds	r3, r0, #0
 800ae62:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800ae70:	1c19      	adds	r1, r3, #0
 800ae72:	1c10      	adds	r0, r2, #0
 800ae74:	f7f6 f9d2 	bl	800121c <__aeabi_fsub>
 800ae78:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800ae7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae7c:	1c18      	adds	r0, r3, #0
 800ae7e:	f7f6 f88f 	bl	8000fa0 <__aeabi_fmul>
 800ae82:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800ae84:	1c19      	adds	r1, r3, #0
 800ae86:	1c20      	adds	r0, r4, #0
 800ae88:	f7f5 fd1a 	bl	80008c0 <__aeabi_fadd>
 800ae8c:	1c03      	adds	r3, r0, #0
 800ae8e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ae98:	1c19      	adds	r1, r3, #0
 800ae9a:	486b      	ldr	r0, [pc, #428]	@ (800b048 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ae9c:	f7f6 f9be 	bl	800121c <__aeabi_fsub>
 800aea0:	1c03      	adds	r3, r0, #0
 800aea2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	1c11      	adds	r1, r2, #0
 800aeac:	0018      	movs	r0, r3
 800aeae:	f000 f9d1 	bl	800b254 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aeb2:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800aeb4:	1c19      	adds	r1, r3, #0
 800aeb6:	1c28      	adds	r0, r5, #0
 800aeb8:	f7f6 f872 	bl	8000fa0 <__aeabi_fmul>
 800aebc:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800aebe:	1c19      	adds	r1, r3, #0
 800aec0:	1c20      	adds	r0, r4, #0
 800aec2:	f7f5 fcfd 	bl	80008c0 <__aeabi_fadd>
 800aec6:	1c03      	adds	r3, r0, #0
 800aec8:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aeca:	4a60      	ldr	r2, [pc, #384]	@ (800b04c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800aecc:	6a39      	ldr	r1, [r7, #32]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	0018      	movs	r0, r3
 800aed2:	f000 f9af 	bl	800b234 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	1c11      	adds	r1, r2, #0
 800aede:	0018      	movs	r0, r3
 800aee0:	f000 f9b8 	bl	800b254 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aee4:	1c03      	adds	r3, r0, #0
 800aee6:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800aee8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aeea:	69f8      	ldr	r0, [r7, #28]
 800aeec:	f7f6 f858 	bl	8000fa0 <__aeabi_fmul>
 800aef0:	1c03      	adds	r3, r0, #0
 800aef2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6999      	ldr	r1, [r3, #24]
 800aefc:	4a51      	ldr	r2, [pc, #324]	@ (800b044 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	0018      	movs	r0, r3
 800af02:	f000 f997 	bl	800b234 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	1c11      	adds	r1, r2, #0
 800af0e:	0018      	movs	r0, r3
 800af10:	f000 f9a0 	bl	800b254 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800af14:	1c03      	adds	r3, r0, #0
 800af16:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800af24:	1c19      	adds	r1, r3, #0
 800af26:	1c10      	adds	r0, r2, #0
 800af28:	f7f6 f978 	bl	800121c <__aeabi_fsub>
 800af2c:	1c03      	adds	r3, r0, #0
 800af2e:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800af30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af32:	69b8      	ldr	r0, [r7, #24]
 800af34:	f7f6 f972 	bl	800121c <__aeabi_fsub>
 800af38:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800af3a:	1c19      	adds	r1, r3, #0
 800af3c:	1c28      	adds	r0, r5, #0
 800af3e:	f7f6 f82f 	bl	8000fa0 <__aeabi_fmul>
 800af42:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800af44:	1c19      	adds	r1, r3, #0
 800af46:	1c20      	adds	r0, r4, #0
 800af48:	f7f5 fcba 	bl	80008c0 <__aeabi_fadd>
 800af4c:	1c03      	adds	r3, r0, #0
 800af4e:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800af58:	1c19      	adds	r1, r3, #0
 800af5a:	483b      	ldr	r0, [pc, #236]	@ (800b048 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800af5c:	f7f6 f95e 	bl	800121c <__aeabi_fsub>
 800af60:	1c03      	adds	r3, r0, #0
 800af62:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	1c11      	adds	r1, r2, #0
 800af6c:	0018      	movs	r0, r3
 800af6e:	f000 f971 	bl	800b254 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800af72:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800af74:	1c19      	adds	r1, r3, #0
 800af76:	1c28      	adds	r0, r5, #0
 800af78:	f7f6 f812 	bl	8000fa0 <__aeabi_fmul>
 800af7c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800af7e:	1c19      	adds	r1, r3, #0
 800af80:	1c20      	adds	r0, r4, #0
 800af82:	f7f5 fc9d 	bl	80008c0 <__aeabi_fadd>
 800af86:	1c03      	adds	r3, r0, #0
 800af88:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800af8a:	4a30      	ldr	r2, [pc, #192]	@ (800b04c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800af8c:	6939      	ldr	r1, [r7, #16]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	0018      	movs	r0, r3
 800af92:	f000 f94f 	bl	800b234 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	1c11      	adds	r1, r2, #0
 800af9e:	0018      	movs	r0, r3
 800afa0:	f000 f958 	bl	800b254 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800afa4:	1c03      	adds	r3, r0, #0
 800afa6:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800afa8:	6979      	ldr	r1, [r7, #20]
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f7f5 fff8 	bl	8000fa0 <__aeabi_fmul>
 800afb0:	1c03      	adds	r3, r0, #0
 800afb2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	4923      	ldr	r1, [pc, #140]	@ (800b050 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800afc2:	1c18      	adds	r0, r3, #0
 800afc4:	f7f5 fe06 	bl	8000bd4 <__aeabi_fdiv>
 800afc8:	1c03      	adds	r3, r0, #0
 800afca:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800afcc:	69f9      	ldr	r1, [r7, #28]
 800afce:	20fe      	movs	r0, #254	@ 0xfe
 800afd0:	0580      	lsls	r0, r0, #22
 800afd2:	f7f6 f923 	bl	800121c <__aeabi_fsub>
 800afd6:	1c03      	adds	r3, r0, #0
 800afd8:	491e      	ldr	r1, [pc, #120]	@ (800b054 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800afda:	1c18      	adds	r0, r3, #0
 800afdc:	f7f5 ffe0 	bl	8000fa0 <__aeabi_fmul>
 800afe0:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800afe2:	491d      	ldr	r1, [pc, #116]	@ (800b058 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800afe4:	1c18      	adds	r0, r3, #0
 800afe6:	f7f6 f919 	bl	800121c <__aeabi_fsub>
 800afea:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800afec:	1c19      	adds	r1, r3, #0
 800afee:	1c28      	adds	r0, r5, #0
 800aff0:	f7f5 ffd6 	bl	8000fa0 <__aeabi_fmul>
 800aff4:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800aff6:	1c19      	adds	r1, r3, #0
 800aff8:	1c20      	adds	r0, r4, #0
 800affa:	f7f5 fc61 	bl	80008c0 <__aeabi_fadd>
 800affe:	1c03      	adds	r3, r0, #0
 800b000:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b00a:	2100      	movs	r1, #0
 800b00c:	1c18      	adds	r0, r3, #0
 800b00e:	f7f5 fa8f 	bl	8000530 <__aeabi_fcmplt>
 800b012:	1e03      	subs	r3, r0, #0
 800b014:	d002      	beq.n	800b01c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800b024:	1c19      	adds	r1, r3, #0
 800b026:	1c10      	adds	r0, r2, #0
 800b028:	f7f5 fa96 	bl	8000558 <__aeabi_fcmpgt>
 800b02c:	1e03      	subs	r3, r0, #0
 800b02e:	d100      	bne.n	800b032 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800b030:	e002      	b.n	800b038 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b038:	46c0      	nop			@ (mov r8, r8)
 800b03a:	46bd      	mov	sp, r7
 800b03c:	b00c      	add	sp, #48	@ 0x30
 800b03e:	bdb0      	pop	{r4, r5, r7, pc}
 800b040:	46fffe00 	.word	0x46fffe00
 800b044:	3c23d70a 	.word	0x3c23d70a
 800b048:	43ff0000 	.word	0x43ff0000
 800b04c:	3db851ec 	.word	0x3db851ec
 800b050:	42700000 	.word	0x42700000
 800b054:	3fa66666 	.word	0x3fa66666
 800b058:	3e99999a 	.word	0x3e99999a

0800b05c <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800b05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	223c      	movs	r2, #60	@ 0x3c
 800b06a:	5c9b      	ldrb	r3, [r3, r2]
 800b06c:	2201      	movs	r2, #1
 800b06e:	4053      	eors	r3, r2
 800b070:	b2db      	uxtb	r3, r3
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00a      	beq.n	800b08c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	223c      	movs	r2, #60	@ 0x3c
 800b07a:	2101      	movs	r1, #1
 800b07c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800b08a:	e0c8      	b.n	800b21e <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b090:	4965      	ldr	r1, [pc, #404]	@ (800b228 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800b092:	1c18      	adds	r0, r3, #0
 800b094:	f7f5 fa6a 	bl	800056c <__aeabi_fcmpge>
 800b098:	1e03      	subs	r3, r0, #0
 800b09a:	d107      	bne.n	800b0ac <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800b0a0:	4962      	ldr	r1, [pc, #392]	@ (800b22c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800b0a2:	1c18      	adds	r0, r3, #0
 800b0a4:	f7f5 fa4e 	bl	8000544 <__aeabi_fcmple>
 800b0a8:	1e03      	subs	r3, r0, #0
 800b0aa:	d00e      	beq.n	800b0ca <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800b0b4:	1c19      	adds	r1, r3, #0
 800b0b6:	1c10      	adds	r0, r2, #0
 800b0b8:	f7f5 fc02 	bl	80008c0 <__aeabi_fadd>
 800b0bc:	1c03      	adds	r3, r0, #0
 800b0be:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ce:	1c19      	adds	r1, r3, #0
 800b0d0:	6838      	ldr	r0, [r7, #0]
 800b0d2:	f7f6 f8a3 	bl	800121c <__aeabi_fsub>
 800b0d6:	1c03      	adds	r3, r0, #0
 800b0d8:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	0018      	movs	r0, r3
 800b0de:	f7ff fe7d 	bl	800addc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e6:	1c19      	adds	r1, r3, #0
 800b0e8:	6838      	ldr	r0, [r7, #0]
 800b0ea:	f7f6 f897 	bl	800121c <__aeabi_fsub>
 800b0ee:	1c03      	adds	r3, r0, #0
 800b0f0:	2185      	movs	r1, #133	@ 0x85
 800b0f2:	05c9      	lsls	r1, r1, #23
 800b0f4:	1c18      	adds	r0, r3, #0
 800b0f6:	f7f5 fd6d 	bl	8000bd4 <__aeabi_fdiv>
 800b0fa:	1c03      	adds	r3, r0, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800b0fe:	2100      	movs	r1, #0
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f7f5 fa15 	bl	8000530 <__aeabi_fcmplt>
 800b106:	1e03      	subs	r3, r0, #0
 800b108:	d008      	beq.n	800b11c <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b10e:	68f9      	ldr	r1, [r7, #12]
 800b110:	1c18      	adds	r0, r3, #0
 800b112:	f7f6 f883 	bl	800121c <__aeabi_fsub>
 800b116:	1c03      	adds	r3, r0, #0
 800b118:	617b      	str	r3, [r7, #20]
 800b11a:	e007      	b.n	800b12c <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b120:	1c19      	adds	r1, r3, #0
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7f5 fbcc 	bl	80008c0 <__aeabi_fadd>
 800b128:	1c03      	adds	r3, r0, #0
 800b12a:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800b12c:	23fe      	movs	r3, #254	@ 0xfe
 800b12e:	059b      	lsls	r3, r3, #22
 800b130:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800b132:	493f      	ldr	r1, [pc, #252]	@ (800b230 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b134:	6978      	ldr	r0, [r7, #20]
 800b136:	f7f5 fa0f 	bl	8000558 <__aeabi_fcmpgt>
 800b13a:	1e03      	subs	r3, r0, #0
 800b13c:	d010      	beq.n	800b160 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800b13e:	493c      	ldr	r1, [pc, #240]	@ (800b230 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b140:	6978      	ldr	r0, [r7, #20]
 800b142:	f7f5 fd47 	bl	8000bd4 <__aeabi_fdiv>
 800b146:	1c03      	adds	r3, r0, #0
 800b148:	1c1c      	adds	r4, r3, #0
 800b14a:	4939      	ldr	r1, [pc, #228]	@ (800b230 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800b14c:	6978      	ldr	r0, [r7, #20]
 800b14e:	f7f5 fd41 	bl	8000bd4 <__aeabi_fdiv>
 800b152:	1c03      	adds	r3, r0, #0
 800b154:	1c19      	adds	r1, r3, #0
 800b156:	1c20      	adds	r0, r4, #0
 800b158:	f7f5 ff22 	bl	8000fa0 <__aeabi_fmul>
 800b15c:	1c03      	adds	r3, r0, #0
 800b15e:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800b164:	1c19      	adds	r1, r3, #0
 800b166:	2085      	movs	r0, #133	@ 0x85
 800b168:	05c0      	lsls	r0, r0, #23
 800b16a:	f7f6 f857 	bl	800121c <__aeabi_fsub>
 800b16e:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800b170:	6939      	ldr	r1, [r7, #16]
 800b172:	1c18      	adds	r0, r3, #0
 800b174:	f7f5 ff14 	bl	8000fa0 <__aeabi_fmul>
 800b178:	1c03      	adds	r3, r0, #0
 800b17a:	1c18      	adds	r0, r3, #0
 800b17c:	f018 f820 	bl	80231c0 <sqrtf>
 800b180:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800b18a:	2185      	movs	r1, #133	@ 0x85
 800b18c:	05c9      	lsls	r1, r1, #23
 800b18e:	6938      	ldr	r0, [r7, #16]
 800b190:	f7f5 ff06 	bl	8000fa0 <__aeabi_fmul>
 800b194:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800b196:	1c19      	adds	r1, r3, #0
 800b198:	1c28      	adds	r0, r5, #0
 800b19a:	f7f5 fd1b 	bl	8000bd4 <__aeabi_fdiv>
 800b19e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800b1a0:	1c19      	adds	r1, r3, #0
 800b1a2:	1c20      	adds	r0, r4, #0
 800b1a4:	f7f5 fefc 	bl	8000fa0 <__aeabi_fmul>
 800b1a8:	1c03      	adds	r3, r0, #0
 800b1aa:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1b0:	68f9      	ldr	r1, [r7, #12]
 800b1b2:	1c18      	adds	r0, r3, #0
 800b1b4:	f7f5 fef4 	bl	8000fa0 <__aeabi_fmul>
 800b1b8:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800b1ba:	6939      	ldr	r1, [r7, #16]
 800b1bc:	1c18      	adds	r0, r3, #0
 800b1be:	f7f5 fd09 	bl	8000bd4 <__aeabi_fdiv>
 800b1c2:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800b1c4:	68f9      	ldr	r1, [r7, #12]
 800b1c6:	1c18      	adds	r0, r3, #0
 800b1c8:	f7f5 feea 	bl	8000fa0 <__aeabi_fmul>
 800b1cc:	1c03      	adds	r3, r0, #0
             sqrtf(
 800b1ce:	1c19      	adds	r1, r3, #0
 800b1d0:	1c20      	adds	r0, r4, #0
 800b1d2:	f7f5 fb75 	bl	80008c0 <__aeabi_fadd>
 800b1d6:	1c03      	adds	r3, r0, #0
 800b1d8:	1c18      	adds	r0, r3, #0
 800b1da:	f017 fff1 	bl	80231c0 <sqrtf>
 800b1de:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800b1e0:	1c19      	adds	r1, r3, #0
 800b1e2:	1c30      	adds	r0, r6, #0
 800b1e4:	f7f5 fedc 	bl	8000fa0 <__aeabi_fmul>
 800b1e8:	1c03      	adds	r3, r0, #0
 800b1ea:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1f8:	68f9      	ldr	r1, [r7, #12]
 800b1fa:	1c18      	adds	r0, r3, #0
 800b1fc:	f7f5 fed0 	bl	8000fa0 <__aeabi_fmul>
 800b200:	1c03      	adds	r3, r0, #0
 800b202:	2182      	movs	r1, #130	@ 0x82
 800b204:	05c9      	lsls	r1, r1, #23
 800b206:	1c18      	adds	r0, r3, #0
 800b208:	f7f5 fce4 	bl	8000bd4 <__aeabi_fdiv>
 800b20c:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800b20e:	1c19      	adds	r1, r3, #0
 800b210:	1c20      	adds	r0, r4, #0
 800b212:	f7f5 fb55 	bl	80008c0 <__aeabi_fadd>
 800b216:	1c03      	adds	r3, r0, #0
 800b218:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b21e:	46c0      	nop			@ (mov r8, r8)
 800b220:	46bd      	mov	sp, r7
 800b222:	b007      	add	sp, #28
 800b224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b226:	46c0      	nop			@ (mov r8, r8)
 800b228:	42c80000 	.word	0x42c80000
 800b22c:	c2c80000 	.word	0xc2c80000
 800b230:	44b40000 	.word	0x44b40000

0800b234 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b24c:	46c0      	nop			@ (mov r8, r8)
 800b24e:	46bd      	mov	sp, r7
 800b250:	b004      	add	sp, #16
 800b252:	bd80      	pop	{r7, pc}

0800b254 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800b254:	b590      	push	{r4, r7, lr}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b266:	1c19      	adds	r1, r3, #0
 800b268:	6838      	ldr	r0, [r7, #0]
 800b26a:	f7f5 ffd7 	bl	800121c <__aeabi_fsub>
 800b26e:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800b270:	1c19      	adds	r1, r3, #0
 800b272:	1c20      	adds	r0, r4, #0
 800b274:	f7f5 fe94 	bl	8000fa0 <__aeabi_fmul>
 800b278:	1c03      	adds	r3, r0, #0
 800b27a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800b27c:	4912      	ldr	r1, [pc, #72]	@ (800b2c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f7f5 f956 	bl	8000530 <__aeabi_fcmplt>
 800b284:	1e03      	subs	r3, r0, #0
 800b286:	d002      	beq.n	800b28e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800b288:	23fe      	movs	r3, #254	@ 0xfe
 800b28a:	059b      	lsls	r3, r3, #22
 800b28c:	e018      	b.n	800b2c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800b28e:	490f      	ldr	r1, [pc, #60]	@ (800b2cc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7f5 f961 	bl	8000558 <__aeabi_fcmpgt>
 800b296:	1e03      	subs	r3, r0, #0
 800b298:	d001      	beq.n	800b29e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800b29a:	2300      	movs	r3, #0
 800b29c:	e010      	b.n	800b2c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	1c18      	adds	r0, r3, #0
 800b2a2:	f017 ff65 	bl	8023170 <expf>
 800b2a6:	1c03      	adds	r3, r0, #0
 800b2a8:	21fe      	movs	r1, #254	@ 0xfe
 800b2aa:	0589      	lsls	r1, r1, #22
 800b2ac:	1c18      	adds	r0, r3, #0
 800b2ae:	f7f5 fb07 	bl	80008c0 <__aeabi_fadd>
 800b2b2:	1c03      	adds	r3, r0, #0
 800b2b4:	1c19      	adds	r1, r3, #0
 800b2b6:	20fe      	movs	r0, #254	@ 0xfe
 800b2b8:	0580      	lsls	r0, r0, #22
 800b2ba:	f7f5 fc8b 	bl	8000bd4 <__aeabi_fdiv>
 800b2be:	1c03      	adds	r3, r0, #0
    }
}
 800b2c0:	1c18      	adds	r0, r3, #0
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	b005      	add	sp, #20
 800b2c6:	bd90      	pop	{r4, r7, pc}
 800b2c8:	c2480000 	.word	0xc2480000
 800b2cc:	42480000 	.word	0x42480000

0800b2d0 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b2e8:	46c0      	nop			@ (mov r8, r8)
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	b004      	add	sp, #16
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800b2f0:	b590      	push	{r4, r7, lr}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d114      	bne.n	800b32c <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b306:	1c19      	adds	r1, r3, #0
 800b308:	6838      	ldr	r0, [r7, #0]
 800b30a:	f7f5 ff87 	bl	800121c <__aeabi_fsub>
 800b30e:	1c03      	adds	r3, r0, #0
 800b310:	4918      	ldr	r1, [pc, #96]	@ (800b374 <GasIndexAlgorithm__mox_model__process+0x84>)
 800b312:	1c18      	adds	r0, r3, #0
 800b314:	f7f5 fc5e 	bl	8000bd4 <__aeabi_fdiv>
 800b318:	1c03      	adds	r3, r0, #0
 800b31a:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800b320:	1c19      	adds	r1, r3, #0
 800b322:	1c10      	adds	r0, r2, #0
 800b324:	f7f5 fe3c 	bl	8000fa0 <__aeabi_fmul>
 800b328:	1c03      	adds	r3, r0, #0
 800b32a:	e01f      	b.n	800b36c <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b330:	1c19      	adds	r1, r3, #0
 800b332:	6838      	ldr	r0, [r7, #0]
 800b334:	f7f5 ff72 	bl	800121c <__aeabi_fsub>
 800b338:	1c03      	adds	r3, r0, #0
 800b33a:	1c1a      	adds	r2, r3, #0
 800b33c:	2380      	movs	r3, #128	@ 0x80
 800b33e:	061b      	lsls	r3, r3, #24
 800b340:	4053      	eors	r3, r2
 800b342:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b348:	490b      	ldr	r1, [pc, #44]	@ (800b378 <GasIndexAlgorithm__mox_model__process+0x88>)
 800b34a:	1c18      	adds	r0, r3, #0
 800b34c:	f7f5 fab8 	bl	80008c0 <__aeabi_fadd>
 800b350:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800b352:	1c19      	adds	r1, r3, #0
 800b354:	1c20      	adds	r0, r4, #0
 800b356:	f7f5 fc3d 	bl	8000bd4 <__aeabi_fdiv>
 800b35a:	1c03      	adds	r3, r0, #0
 800b35c:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800b362:	1c19      	adds	r1, r3, #0
 800b364:	1c10      	adds	r0, r2, #0
 800b366:	f7f5 fe1b 	bl	8000fa0 <__aeabi_fmul>
 800b36a:	1c03      	adds	r3, r0, #0
    }
}
 800b36c:	1c18      	adds	r0, r3, #0
 800b36e:	46bd      	mov	sp, r7
 800b370:	b003      	add	sp, #12
 800b372:	bd90      	pop	{r4, r7, pc}
 800b374:	44fa0000 	.word	0x44fa0000
 800b378:	435c0000 	.word	0x435c0000

0800b37c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2180      	movs	r1, #128	@ 0x80
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2184      	movs	r1, #132	@ 0x84
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2188      	movs	r1, #136	@ 0x88
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	505a      	str	r2, [r3, r1]
}
 800b3a2:	46c0      	nop			@ (mov r8, r8)
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	b004      	add	sp, #16
 800b3a8:	bd80      	pop	{r7, pc}
	...

0800b3ac <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800b3ac:	b590      	push	{r4, r7, lr}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2280      	movs	r2, #128	@ 0x80
 800b3ba:	589c      	ldr	r4, [r3, r2]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2284      	movs	r2, #132	@ 0x84
 800b3c0:	589b      	ldr	r3, [r3, r2]
 800b3c2:	1c19      	adds	r1, r3, #0
 800b3c4:	6838      	ldr	r0, [r7, #0]
 800b3c6:	f7f5 ff29 	bl	800121c <__aeabi_fsub>
 800b3ca:	1c03      	adds	r3, r0, #0
 800b3cc:	1c19      	adds	r1, r3, #0
 800b3ce:	1c20      	adds	r0, r4, #0
 800b3d0:	f7f5 fde6 	bl	8000fa0 <__aeabi_fmul>
 800b3d4:	1c03      	adds	r3, r0, #0
 800b3d6:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800b3d8:	4940      	ldr	r1, [pc, #256]	@ (800b4dc <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800b3da:	68b8      	ldr	r0, [r7, #8]
 800b3dc:	f7f5 f8a8 	bl	8000530 <__aeabi_fcmplt>
 800b3e0:	1e03      	subs	r3, r0, #0
 800b3e2:	d001      	beq.n	800b3e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800b3e4:	4b3e      	ldr	r3, [pc, #248]	@ (800b4e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b3e6:	e075      	b.n	800b4d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800b3e8:	493e      	ldr	r1, [pc, #248]	@ (800b4e4 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800b3ea:	68b8      	ldr	r0, [r7, #8]
 800b3ec:	f7f5 f8b4 	bl	8000558 <__aeabi_fcmpgt>
 800b3f0:	1e03      	subs	r3, r0, #0
 800b3f2:	d001      	beq.n	800b3f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	e06d      	b.n	800b4d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	6838      	ldr	r0, [r7, #0]
 800b3fc:	f7f5 f8b6 	bl	800056c <__aeabi_fcmpge>
 800b400:	1e03      	subs	r3, r0, #0
 800b402:	d047      	beq.n	800b494 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2288      	movs	r2, #136	@ 0x88
 800b408:	589b      	ldr	r3, [r3, r2]
 800b40a:	21fe      	movs	r1, #254	@ 0xfe
 800b40c:	0589      	lsls	r1, r1, #22
 800b40e:	1c18      	adds	r0, r3, #0
 800b410:	f7f5 f888 	bl	8000524 <__aeabi_fcmpeq>
 800b414:	1e03      	subs	r3, r0, #0
 800b416:	d00e      	beq.n	800b436 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	1c19      	adds	r1, r3, #0
 800b41e:	20fe      	movs	r0, #254	@ 0xfe
 800b420:	0580      	lsls	r0, r0, #22
 800b422:	f7f5 fefb 	bl	800121c <__aeabi_fsub>
 800b426:	1c03      	adds	r3, r0, #0
 800b428:	492f      	ldr	r1, [pc, #188]	@ (800b4e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800b42a:	1c18      	adds	r0, r3, #0
 800b42c:	f7f5 fdb8 	bl	8000fa0 <__aeabi_fmul>
 800b430:	1c03      	adds	r3, r0, #0
 800b432:	60fb      	str	r3, [r7, #12]
 800b434:	e012      	b.n	800b45c <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	492c      	ldr	r1, [pc, #176]	@ (800b4ec <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800b43c:	1c18      	adds	r0, r3, #0
 800b43e:	f7f5 fdaf 	bl	8000fa0 <__aeabi_fmul>
 800b442:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800b444:	1c19      	adds	r1, r3, #0
 800b446:	4826      	ldr	r0, [pc, #152]	@ (800b4e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b448:	f7f5 fee8 	bl	800121c <__aeabi_fsub>
 800b44c:	1c03      	adds	r3, r0, #0
 800b44e:	2181      	movs	r1, #129	@ 0x81
 800b450:	05c9      	lsls	r1, r1, #23
 800b452:	1c18      	adds	r0, r3, #0
 800b454:	f7f5 fbbe 	bl	8000bd4 <__aeabi_fdiv>
 800b458:	1c03      	adds	r3, r0, #0
 800b45a:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b45c:	4920      	ldr	r1, [pc, #128]	@ (800b4e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f7f5 fa2e 	bl	80008c0 <__aeabi_fadd>
 800b464:	1c03      	adds	r3, r0, #0
 800b466:	1c1c      	adds	r4, r3, #0
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	1c18      	adds	r0, r3, #0
 800b46c:	f017 fe80 	bl	8023170 <expf>
 800b470:	1c03      	adds	r3, r0, #0
 800b472:	21fe      	movs	r1, #254	@ 0xfe
 800b474:	0589      	lsls	r1, r1, #22
 800b476:	1c18      	adds	r0, r3, #0
 800b478:	f7f5 fa22 	bl	80008c0 <__aeabi_fadd>
 800b47c:	1c03      	adds	r3, r0, #0
 800b47e:	1c19      	adds	r1, r3, #0
 800b480:	1c20      	adds	r0, r4, #0
 800b482:	f7f5 fba7 	bl	8000bd4 <__aeabi_fdiv>
 800b486:	1c03      	adds	r3, r0, #0
 800b488:	68f9      	ldr	r1, [r7, #12]
 800b48a:	1c18      	adds	r0, r3, #0
 800b48c:	f7f5 fec6 	bl	800121c <__aeabi_fsub>
 800b490:	1c03      	adds	r3, r0, #0
 800b492:	e01f      	b.n	800b4d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2188      	movs	r1, #136	@ 0x88
 800b49c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b49e:	1c19      	adds	r1, r3, #0
 800b4a0:	1c10      	adds	r0, r2, #0
 800b4a2:	f7f5 fb97 	bl	8000bd4 <__aeabi_fdiv>
 800b4a6:	1c03      	adds	r3, r0, #0
 800b4a8:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	1c18      	adds	r0, r3, #0
 800b4ae:	f017 fe5f 	bl	8023170 <expf>
 800b4b2:	1c03      	adds	r3, r0, #0
 800b4b4:	21fe      	movs	r1, #254	@ 0xfe
 800b4b6:	0589      	lsls	r1, r1, #22
 800b4b8:	1c18      	adds	r0, r3, #0
 800b4ba:	f7f5 fa01 	bl	80008c0 <__aeabi_fadd>
 800b4be:	1c03      	adds	r3, r0, #0
 800b4c0:	1c19      	adds	r1, r3, #0
 800b4c2:	4807      	ldr	r0, [pc, #28]	@ (800b4e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b4c4:	f7f5 fb86 	bl	8000bd4 <__aeabi_fdiv>
 800b4c8:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b4ca:	1c19      	adds	r1, r3, #0
 800b4cc:	1c20      	adds	r0, r4, #0
 800b4ce:	f7f5 fd67 	bl	8000fa0 <__aeabi_fmul>
 800b4d2:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b4d4:	1c18      	adds	r0, r3, #0
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	b005      	add	sp, #20
 800b4da:	bd90      	pop	{r4, r7, pc}
 800b4dc:	c2480000 	.word	0xc2480000
 800b4e0:	43fa0000 	.word	0x43fa0000
 800b4e4:	42480000 	.word	0x42480000
 800b4e8:	3f8041ab 	.word	0x3f8041ab
 800b4ec:	40a00000 	.word	0x40a00000

0800b4f0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b4f0:	b590      	push	{r4, r7, lr}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	4913      	ldr	r1, [pc, #76]	@ (800b550 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b502:	1c18      	adds	r0, r3, #0
 800b504:	f7f5 f9dc 	bl	80008c0 <__aeabi_fadd>
 800b508:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b50a:	1c19      	adds	r1, r3, #0
 800b50c:	1c20      	adds	r0, r4, #0
 800b50e:	f7f5 fb61 	bl	8000bd4 <__aeabi_fdiv>
 800b512:	1c03      	adds	r3, r0, #0
 800b514:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	228c      	movs	r2, #140	@ 0x8c
 800b51a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	490b      	ldr	r1, [pc, #44]	@ (800b554 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b526:	1c18      	adds	r0, r3, #0
 800b528:	f7f5 f9ca 	bl	80008c0 <__aeabi_fadd>
 800b52c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b52e:	1c19      	adds	r1, r3, #0
 800b530:	1c20      	adds	r0, r4, #0
 800b532:	f7f5 fb4f 	bl	8000bd4 <__aeabi_fdiv>
 800b536:	1c03      	adds	r3, r0, #0
 800b538:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2290      	movs	r2, #144	@ 0x90
 800b53e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2294      	movs	r2, #148	@ 0x94
 800b544:	2100      	movs	r1, #0
 800b546:	5499      	strb	r1, [r3, r2]
}
 800b548:	46c0      	nop			@ (mov r8, r8)
 800b54a:	46bd      	mov	sp, r7
 800b54c:	b003      	add	sp, #12
 800b54e:	bd90      	pop	{r4, r7, pc}
 800b550:	41a00000 	.word	0x41a00000
 800b554:	43fa0000 	.word	0x43fa0000

0800b558 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b558:	b590      	push	{r4, r7, lr}
 800b55a:	b087      	sub	sp, #28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2294      	movs	r2, #148	@ 0x94
 800b566:	5c9b      	ldrb	r3, [r3, r2]
 800b568:	2201      	movs	r2, #1
 800b56a:	4053      	eors	r3, r2
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00f      	beq.n	800b592 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2198      	movs	r1, #152	@ 0x98
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	219c      	movs	r1, #156	@ 0x9c
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	21a0      	movs	r1, #160	@ 0xa0
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2294      	movs	r2, #148	@ 0x94
 800b58e:	2101      	movs	r1, #1
 800b590:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	228c      	movs	r2, #140	@ 0x8c
 800b596:	589b      	ldr	r3, [r3, r2]
 800b598:	1c19      	adds	r1, r3, #0
 800b59a:	20fe      	movs	r0, #254	@ 0xfe
 800b59c:	0580      	lsls	r0, r0, #22
 800b59e:	f7f5 fe3d 	bl	800121c <__aeabi_fsub>
 800b5a2:	1c03      	adds	r3, r0, #0
 800b5a4:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2298      	movs	r2, #152	@ 0x98
 800b5aa:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b5ac:	1c19      	adds	r1, r3, #0
 800b5ae:	f7f5 fcf7 	bl	8000fa0 <__aeabi_fmul>
 800b5b2:	1c03      	adds	r3, r0, #0
 800b5b4:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	228c      	movs	r2, #140	@ 0x8c
 800b5ba:	589b      	ldr	r3, [r3, r2]
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	1c18      	adds	r0, r3, #0
 800b5c0:	f7f5 fcee 	bl	8000fa0 <__aeabi_fmul>
 800b5c4:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b5c6:	1c19      	adds	r1, r3, #0
 800b5c8:	1c20      	adds	r0, r4, #0
 800b5ca:	f7f5 f979 	bl	80008c0 <__aeabi_fadd>
 800b5ce:	1c03      	adds	r3, r0, #0
 800b5d0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2298      	movs	r2, #152	@ 0x98
 800b5d6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2290      	movs	r2, #144	@ 0x90
 800b5dc:	589b      	ldr	r3, [r3, r2]
 800b5de:	1c19      	adds	r1, r3, #0
 800b5e0:	20fe      	movs	r0, #254	@ 0xfe
 800b5e2:	0580      	lsls	r0, r0, #22
 800b5e4:	f7f5 fe1a 	bl	800121c <__aeabi_fsub>
 800b5e8:	1c03      	adds	r3, r0, #0
 800b5ea:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	229c      	movs	r2, #156	@ 0x9c
 800b5f0:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b5f2:	1c19      	adds	r1, r3, #0
 800b5f4:	f7f5 fcd4 	bl	8000fa0 <__aeabi_fmul>
 800b5f8:	1c03      	adds	r3, r0, #0
 800b5fa:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2290      	movs	r2, #144	@ 0x90
 800b600:	589b      	ldr	r3, [r3, r2]
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	1c18      	adds	r0, r3, #0
 800b606:	f7f5 fccb 	bl	8000fa0 <__aeabi_fmul>
 800b60a:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b60c:	1c19      	adds	r1, r3, #0
 800b60e:	1c20      	adds	r0, r4, #0
 800b610:	f7f5 f956 	bl	80008c0 <__aeabi_fadd>
 800b614:	1c03      	adds	r3, r0, #0
 800b616:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	229c      	movs	r2, #156	@ 0x9c
 800b61c:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2298      	movs	r2, #152	@ 0x98
 800b622:	589a      	ldr	r2, [r3, r2]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	219c      	movs	r1, #156	@ 0x9c
 800b628:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b62a:	1c19      	adds	r1, r3, #0
 800b62c:	1c10      	adds	r0, r2, #0
 800b62e:	f7f5 fdf5 	bl	800121c <__aeabi_fsub>
 800b632:	1c03      	adds	r3, r0, #0
 800b634:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b636:	2100      	movs	r1, #0
 800b638:	6978      	ldr	r0, [r7, #20]
 800b63a:	f7f4 ff79 	bl	8000530 <__aeabi_fcmplt>
 800b63e:	1e03      	subs	r3, r0, #0
 800b640:	d004      	beq.n	800b64c <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2280      	movs	r2, #128	@ 0x80
 800b646:	0612      	lsls	r2, r2, #24
 800b648:	4053      	eors	r3, r2
 800b64a:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b64c:	4923      	ldr	r1, [pc, #140]	@ (800b6dc <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b64e:	6978      	ldr	r0, [r7, #20]
 800b650:	f7f5 fca6 	bl	8000fa0 <__aeabi_fmul>
 800b654:	1c03      	adds	r3, r0, #0
 800b656:	1c18      	adds	r0, r3, #0
 800b658:	f017 fd8a 	bl	8023170 <expf>
 800b65c:	1c03      	adds	r3, r0, #0
 800b65e:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b660:	491f      	ldr	r1, [pc, #124]	@ (800b6e0 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b662:	6938      	ldr	r0, [r7, #16]
 800b664:	f7f5 fc9c 	bl	8000fa0 <__aeabi_fmul>
 800b668:	1c03      	adds	r3, r0, #0
 800b66a:	491e      	ldr	r1, [pc, #120]	@ (800b6e4 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b66c:	1c18      	adds	r0, r3, #0
 800b66e:	f7f5 f927 	bl	80008c0 <__aeabi_fadd>
 800b672:	1c03      	adds	r3, r0, #0
 800b674:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685c      	ldr	r4, [r3, #4]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	68f9      	ldr	r1, [r7, #12]
 800b680:	1c18      	adds	r0, r3, #0
 800b682:	f7f5 f91d 	bl	80008c0 <__aeabi_fadd>
 800b686:	1c03      	adds	r3, r0, #0
 800b688:	1c19      	adds	r1, r3, #0
 800b68a:	1c20      	adds	r0, r4, #0
 800b68c:	f7f5 faa2 	bl	8000bd4 <__aeabi_fdiv>
 800b690:	1c03      	adds	r3, r0, #0
 800b692:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b694:	68b9      	ldr	r1, [r7, #8]
 800b696:	20fe      	movs	r0, #254	@ 0xfe
 800b698:	0580      	lsls	r0, r0, #22
 800b69a:	f7f5 fdbf 	bl	800121c <__aeabi_fsub>
 800b69e:	1c03      	adds	r3, r0, #0
 800b6a0:	1c18      	adds	r0, r3, #0
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	22a0      	movs	r2, #160	@ 0xa0
 800b6a6:	589b      	ldr	r3, [r3, r2]
 800b6a8:	1c19      	adds	r1, r3, #0
 800b6aa:	f7f5 fc79 	bl	8000fa0 <__aeabi_fmul>
 800b6ae:	1c03      	adds	r3, r0, #0
 800b6b0:	1c1c      	adds	r4, r3, #0
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	68b8      	ldr	r0, [r7, #8]
 800b6b6:	f7f5 fc73 	bl	8000fa0 <__aeabi_fmul>
 800b6ba:	1c03      	adds	r3, r0, #0
 800b6bc:	1c19      	adds	r1, r3, #0
 800b6be:	1c20      	adds	r0, r4, #0
 800b6c0:	f7f5 f8fe 	bl	80008c0 <__aeabi_fadd>
 800b6c4:	1c03      	adds	r3, r0, #0
 800b6c6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	22a0      	movs	r2, #160	@ 0xa0
 800b6cc:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	22a0      	movs	r2, #160	@ 0xa0
 800b6d2:	589b      	ldr	r3, [r3, r2]
}
 800b6d4:	1c18      	adds	r0, r3, #0
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	b007      	add	sp, #28
 800b6da:	bd90      	pop	{r4, r7, pc}
 800b6dc:	be4ccccd 	.word	0xbe4ccccd
 800b6e0:	43f00000 	.word	0x43f00000
 800b6e4:	41a00000 	.word	0x41a00000

0800b6e8 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	000a      	movs	r2, r1
 800b6f2:	1cbb      	adds	r3, r7, #2
 800b6f4:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b6f6:	230d      	movs	r3, #13
 800b6f8:	18fb      	adds	r3, r7, r3
 800b6fa:	22ff      	movs	r2, #255	@ 0xff
 800b6fc:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b6fe:	230e      	movs	r3, #14
 800b700:	18fb      	adds	r3, r7, r3
 800b702:	2200      	movs	r2, #0
 800b704:	801a      	strh	r2, [r3, #0]
 800b706:	e037      	b.n	800b778 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b708:	230e      	movs	r3, #14
 800b70a:	18fb      	adds	r3, r7, r3
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	18d3      	adds	r3, r2, r3
 800b712:	7819      	ldrb	r1, [r3, #0]
 800b714:	220d      	movs	r2, #13
 800b716:	18bb      	adds	r3, r7, r2
 800b718:	18ba      	adds	r2, r7, r2
 800b71a:	7812      	ldrb	r2, [r2, #0]
 800b71c:	404a      	eors	r2, r1
 800b71e:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b720:	230c      	movs	r3, #12
 800b722:	18fb      	adds	r3, r7, r3
 800b724:	2208      	movs	r2, #8
 800b726:	701a      	strb	r2, [r3, #0]
 800b728:	e01b      	b.n	800b762 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b72a:	210d      	movs	r1, #13
 800b72c:	187b      	adds	r3, r7, r1
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	b25b      	sxtb	r3, r3
 800b732:	2b00      	cmp	r3, #0
 800b734:	da09      	bge.n	800b74a <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b736:	187b      	adds	r3, r7, r1
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	b25b      	sxtb	r3, r3
 800b73e:	2231      	movs	r2, #49	@ 0x31
 800b740:	4053      	eors	r3, r2
 800b742:	b25a      	sxtb	r2, r3
 800b744:	187b      	adds	r3, r7, r1
 800b746:	701a      	strb	r2, [r3, #0]
 800b748:	e005      	b.n	800b756 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b74a:	230d      	movs	r3, #13
 800b74c:	18fa      	adds	r2, r7, r3
 800b74e:	18fb      	adds	r3, r7, r3
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	18db      	adds	r3, r3, r3
 800b754:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b756:	220c      	movs	r2, #12
 800b758:	18bb      	adds	r3, r7, r2
 800b75a:	18ba      	adds	r2, r7, r2
 800b75c:	7812      	ldrb	r2, [r2, #0]
 800b75e:	3a01      	subs	r2, #1
 800b760:	701a      	strb	r2, [r3, #0]
 800b762:	230c      	movs	r3, #12
 800b764:	18fb      	adds	r3, r7, r3
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1de      	bne.n	800b72a <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b76c:	220e      	movs	r2, #14
 800b76e:	18bb      	adds	r3, r7, r2
 800b770:	18ba      	adds	r2, r7, r2
 800b772:	8812      	ldrh	r2, [r2, #0]
 800b774:	3201      	adds	r2, #1
 800b776:	801a      	strh	r2, [r3, #0]
 800b778:	230e      	movs	r3, #14
 800b77a:	18fa      	adds	r2, r7, r3
 800b77c:	1cbb      	adds	r3, r7, #2
 800b77e:	8812      	ldrh	r2, [r2, #0]
 800b780:	881b      	ldrh	r3, [r3, #0]
 800b782:	429a      	cmp	r2, r3
 800b784:	d3c0      	bcc.n	800b708 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b786:	230d      	movs	r3, #13
 800b788:	18fb      	adds	r3, r7, r3
 800b78a:	781b      	ldrb	r3, [r3, #0]
}
 800b78c:	0018      	movs	r0, r3
 800b78e:	46bd      	mov	sp, r7
 800b790:	b004      	add	sp, #16
 800b792:	bd80      	pop	{r7, pc}

0800b794 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	0008      	movs	r0, r1
 800b79e:	0011      	movs	r1, r2
 800b7a0:	1cbb      	adds	r3, r7, #2
 800b7a2:	1c02      	adds	r2, r0, #0
 800b7a4:	801a      	strh	r2, [r3, #0]
 800b7a6:	1c7b      	adds	r3, r7, #1
 800b7a8:	1c0a      	adds	r2, r1, #0
 800b7aa:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b7ac:	1cbb      	adds	r3, r7, #2
 800b7ae:	881a      	ldrh	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	0011      	movs	r1, r2
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	f7ff ff97 	bl	800b6e8 <sensirion_i2c_generate_crc>
 800b7ba:	0003      	movs	r3, r0
 800b7bc:	001a      	movs	r2, r3
 800b7be:	1c7b      	adds	r3, r7, #1
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d001      	beq.n	800b7ca <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e000      	b.n	800b7cc <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	0018      	movs	r0, r3
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	b002      	add	sp, #8
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	0008      	movs	r0, r1
 800b7de:	0011      	movs	r1, r2
 800b7e0:	1cbb      	adds	r3, r7, #2
 800b7e2:	1c02      	adds	r2, r0, #0
 800b7e4:	801a      	strh	r2, [r3, #0]
 800b7e6:	003b      	movs	r3, r7
 800b7e8:	1c0a      	adds	r2, r1, #0
 800b7ea:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b7ec:	003b      	movs	r3, r7
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	0a1b      	lsrs	r3, r3, #8
 800b7f2:	b299      	uxth	r1, r3
 800b7f4:	1cbb      	adds	r3, r7, #2
 800b7f6:	881b      	ldrh	r3, [r3, #0]
 800b7f8:	1cba      	adds	r2, r7, #2
 800b7fa:	1c58      	adds	r0, r3, #1
 800b7fc:	8010      	strh	r0, [r2, #0]
 800b7fe:	001a      	movs	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	189b      	adds	r3, r3, r2
 800b804:	b2ca      	uxtb	r2, r1
 800b806:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b808:	1cbb      	adds	r3, r7, #2
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	1cba      	adds	r2, r7, #2
 800b80e:	1c59      	adds	r1, r3, #1
 800b810:	8011      	strh	r1, [r2, #0]
 800b812:	001a      	movs	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	189b      	adds	r3, r3, r2
 800b818:	003a      	movs	r2, r7
 800b81a:	8812      	ldrh	r2, [r2, #0]
 800b81c:	b2d2      	uxtb	r2, r2
 800b81e:	701a      	strb	r2, [r3, #0]
    return offset;
 800b820:	1cbb      	adds	r3, r7, #2
 800b822:	881b      	ldrh	r3, [r3, #0]
}
 800b824:	0018      	movs	r0, r3
 800b826:	46bd      	mov	sp, r7
 800b828:	b002      	add	sp, #8
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b82c:	b590      	push	{r4, r7, lr}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	0008      	movs	r0, r1
 800b836:	0011      	movs	r1, r2
 800b838:	1cbb      	adds	r3, r7, #2
 800b83a:	1c02      	adds	r2, r0, #0
 800b83c:	801a      	strh	r2, [r3, #0]
 800b83e:	003b      	movs	r3, r7
 800b840:	1c0a      	adds	r2, r1, #0
 800b842:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b844:	003b      	movs	r3, r7
 800b846:	881b      	ldrh	r3, [r3, #0]
 800b848:	0a1b      	lsrs	r3, r3, #8
 800b84a:	b299      	uxth	r1, r3
 800b84c:	1cbb      	adds	r3, r7, #2
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	1cba      	adds	r2, r7, #2
 800b852:	1c58      	adds	r0, r3, #1
 800b854:	8010      	strh	r0, [r2, #0]
 800b856:	001a      	movs	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	189b      	adds	r3, r3, r2
 800b85c:	b2ca      	uxtb	r2, r1
 800b85e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b860:	1cbb      	adds	r3, r7, #2
 800b862:	881b      	ldrh	r3, [r3, #0]
 800b864:	1cba      	adds	r2, r7, #2
 800b866:	1c59      	adds	r1, r3, #1
 800b868:	8011      	strh	r1, [r2, #0]
 800b86a:	001a      	movs	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	189b      	adds	r3, r3, r2
 800b870:	003a      	movs	r2, r7
 800b872:	8812      	ldrh	r2, [r2, #0]
 800b874:	b2d2      	uxtb	r2, r2
 800b876:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b878:	1cbb      	adds	r3, r7, #2
 800b87a:	881b      	ldrh	r3, [r3, #0]
 800b87c:	3b02      	subs	r3, #2
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b882:	1cbb      	adds	r3, r7, #2
 800b884:	881b      	ldrh	r3, [r3, #0]
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	18d4      	adds	r4, r2, r3
 800b88a:	2102      	movs	r1, #2
 800b88c:	f7ff ff2c 	bl	800b6e8 <sensirion_i2c_generate_crc>
 800b890:	0003      	movs	r3, r0
 800b892:	7023      	strb	r3, [r4, #0]
    offset++;
 800b894:	1cbb      	adds	r3, r7, #2
 800b896:	881a      	ldrh	r2, [r3, #0]
 800b898:	1cbb      	adds	r3, r7, #2
 800b89a:	3201      	adds	r2, #1
 800b89c:	801a      	strh	r2, [r3, #0]

    return offset;
 800b89e:	1cbb      	adds	r3, r7, #2
 800b8a0:	881b      	ldrh	r3, [r3, #0]
}
 800b8a2:	0018      	movs	r0, r3
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	b003      	add	sp, #12
 800b8a8:	bd90      	pop	{r4, r7, pc}

0800b8aa <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	0008      	movs	r0, r1
 800b8b4:	0011      	movs	r1, r2
 800b8b6:	1cbb      	adds	r3, r7, #2
 800b8b8:	1c02      	adds	r2, r0, #0
 800b8ba:	801a      	strh	r2, [r3, #0]
 800b8bc:	003b      	movs	r3, r7
 800b8be:	1c0a      	adds	r2, r1, #0
 800b8c0:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b8c2:	003b      	movs	r3, r7
 800b8c4:	881a      	ldrh	r2, [r3, #0]
 800b8c6:	1cbb      	adds	r3, r7, #2
 800b8c8:	8819      	ldrh	r1, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	0018      	movs	r0, r3
 800b8ce:	f7ff ffad 	bl	800b82c <sensirion_i2c_add_uint16_t_to_buffer>
 800b8d2:	0003      	movs	r3, r0
}
 800b8d4:	0018      	movs	r0, r3
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	b002      	add	sp, #8
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6039      	str	r1, [r7, #0]
 800b8e4:	0011      	movs	r1, r2
 800b8e6:	1dfb      	adds	r3, r7, #7
 800b8e8:	1c02      	adds	r2, r0, #0
 800b8ea:	701a      	strb	r2, [r3, #0]
 800b8ec:	1d3b      	adds	r3, r7, #4
 800b8ee:	1c0a      	adds	r2, r1, #0
 800b8f0:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b8f2:	1d3b      	adds	r3, r7, #4
 800b8f4:	881a      	ldrh	r2, [r3, #0]
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	1dfb      	adds	r3, r7, #7
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f7fe f9d5 	bl	8009cac <sensirion_i2c_hal_write>
 800b902:	0003      	movs	r3, r0
}
 800b904:	0018      	movs	r0, r3
 800b906:	46bd      	mov	sp, r7
 800b908:	b002      	add	sp, #8
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b90c:	b5b0      	push	{r4, r5, r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6039      	str	r1, [r7, #0]
 800b914:	0011      	movs	r1, r2
 800b916:	1dfb      	adds	r3, r7, #7
 800b918:	1c02      	adds	r2, r0, #0
 800b91a:	701a      	strb	r2, [r3, #0]
 800b91c:	1d3b      	adds	r3, r7, #4
 800b91e:	1c0a      	adds	r2, r1, #0
 800b920:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b922:	1d3b      	adds	r3, r7, #4
 800b924:	881b      	ldrh	r3, [r3, #0]
 800b926:	085b      	lsrs	r3, r3, #1
 800b928:	b29b      	uxth	r3, r3
 800b92a:	220a      	movs	r2, #10
 800b92c:	18ba      	adds	r2, r7, r2
 800b92e:	1c19      	adds	r1, r3, #0
 800b930:	1c0b      	adds	r3, r1, #0
 800b932:	18db      	adds	r3, r3, r3
 800b934:	185b      	adds	r3, r3, r1
 800b936:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b938:	1d3b      	adds	r3, r7, #4
 800b93a:	881b      	ldrh	r3, [r3, #0]
 800b93c:	2201      	movs	r2, #1
 800b93e:	4013      	ands	r3, r2
 800b940:	b29b      	uxth	r3, r3
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b946:	2304      	movs	r3, #4
 800b948:	e06b      	b.n	800ba22 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b94a:	230a      	movs	r3, #10
 800b94c:	18fb      	adds	r3, r7, r3
 800b94e:	881a      	ldrh	r2, [r3, #0]
 800b950:	6839      	ldr	r1, [r7, #0]
 800b952:	1dfb      	adds	r3, r7, #7
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	0018      	movs	r0, r3
 800b958:	f7fe f988 	bl	8009c6c <sensirion_i2c_hal_read>
 800b95c:	0003      	movs	r3, r0
 800b95e:	001a      	movs	r2, r3
 800b960:	2108      	movs	r1, #8
 800b962:	187b      	adds	r3, r7, r1
 800b964:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b966:	000a      	movs	r2, r1
 800b968:	18bb      	adds	r3, r7, r2
 800b96a:	2100      	movs	r1, #0
 800b96c:	5e5b      	ldrsh	r3, [r3, r1]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d003      	beq.n	800b97a <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b972:	18bb      	adds	r3, r7, r2
 800b974:	2200      	movs	r2, #0
 800b976:	5e9b      	ldrsh	r3, [r3, r2]
 800b978:	e053      	b.n	800ba22 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b97a:	230e      	movs	r3, #14
 800b97c:	18fb      	adds	r3, r7, r3
 800b97e:	2200      	movs	r2, #0
 800b980:	801a      	strh	r2, [r3, #0]
 800b982:	230c      	movs	r3, #12
 800b984:	18fb      	adds	r3, r7, r3
 800b986:	2200      	movs	r2, #0
 800b988:	801a      	strh	r2, [r3, #0]
 800b98a:	e041      	b.n	800ba10 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b98c:	210e      	movs	r1, #14
 800b98e:	187b      	adds	r3, r7, r1
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b996:	187b      	adds	r3, r7, r1
 800b998:	881b      	ldrh	r3, [r3, #0]
 800b99a:	3302      	adds	r3, #2
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	001a      	movs	r2, r3
 800b9a4:	2102      	movs	r1, #2
 800b9a6:	f7ff fef5 	bl	800b794 <sensirion_i2c_check_crc>
 800b9aa:	0003      	movs	r3, r0
 800b9ac:	001a      	movs	r2, r3
 800b9ae:	2108      	movs	r1, #8
 800b9b0:	187b      	adds	r3, r7, r1
 800b9b2:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b9b4:	000a      	movs	r2, r1
 800b9b6:	18bb      	adds	r3, r7, r2
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	5e5b      	ldrsh	r3, [r3, r1]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d003      	beq.n	800b9c8 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b9c0:	18bb      	adds	r3, r7, r2
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	5e9b      	ldrsh	r3, [r3, r2]
 800b9c6:	e02c      	b.n	800ba22 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b9c8:	240e      	movs	r4, #14
 800b9ca:	193b      	adds	r3, r7, r4
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	18d2      	adds	r2, r2, r3
 800b9d2:	250c      	movs	r5, #12
 800b9d4:	197b      	adds	r3, r7, r5
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	1979      	adds	r1, r7, r5
 800b9da:	1c58      	adds	r0, r3, #1
 800b9dc:	8008      	strh	r0, [r1, #0]
 800b9de:	0019      	movs	r1, r3
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	185b      	adds	r3, r3, r1
 800b9e4:	7812      	ldrb	r2, [r2, #0]
 800b9e6:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b9e8:	193b      	adds	r3, r7, r4
 800b9ea:	881b      	ldrh	r3, [r3, #0]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	18d2      	adds	r2, r2, r3
 800b9f2:	197b      	adds	r3, r7, r5
 800b9f4:	881b      	ldrh	r3, [r3, #0]
 800b9f6:	1979      	adds	r1, r7, r5
 800b9f8:	1c58      	adds	r0, r3, #1
 800b9fa:	8008      	strh	r0, [r1, #0]
 800b9fc:	0019      	movs	r1, r3
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	185b      	adds	r3, r3, r1
 800ba02:	7812      	ldrb	r2, [r2, #0]
 800ba04:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800ba06:	193b      	adds	r3, r7, r4
 800ba08:	193a      	adds	r2, r7, r4
 800ba0a:	8812      	ldrh	r2, [r2, #0]
 800ba0c:	3203      	adds	r2, #3
 800ba0e:	801a      	strh	r2, [r3, #0]
 800ba10:	230e      	movs	r3, #14
 800ba12:	18fa      	adds	r2, r7, r3
 800ba14:	230a      	movs	r3, #10
 800ba16:	18fb      	adds	r3, r7, r3
 800ba18:	8812      	ldrh	r2, [r2, #0]
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d3b5      	bcc.n	800b98c <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	0018      	movs	r0, r3
 800ba24:	46bd      	mov	sp, r7
 800ba26:	b004      	add	sp, #16
 800ba28:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ba2c <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800ba2c:	b590      	push	{r4, r7, lr}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6039      	str	r1, [r7, #0]
 800ba34:	0011      	movs	r1, r2
 800ba36:	1dfb      	adds	r3, r7, #7
 800ba38:	1c02      	adds	r2, r0, #0
 800ba3a:	701a      	strb	r2, [r3, #0]
 800ba3c:	1dbb      	adds	r3, r7, #6
 800ba3e:	1c0a      	adds	r2, r1, #0
 800ba40:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800ba42:	4b08      	ldr	r3, [pc, #32]	@ (800ba64 <ReadRegister+0x38>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d008      	beq.n	800ba5c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800ba4a:	4b06      	ldr	r3, [pc, #24]	@ (800ba64 <ReadRegister+0x38>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	1dba      	adds	r2, r7, #6
 800ba50:	7814      	ldrb	r4, [r2, #0]
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	1dfa      	adds	r2, r7, #7
 800ba56:	7810      	ldrb	r0, [r2, #0]
 800ba58:	0022      	movs	r2, r4
 800ba5a:	4798      	blx	r3
  }
}
 800ba5c:	46c0      	nop			@ (mov r8, r8)
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	b003      	add	sp, #12
 800ba62:	bd90      	pop	{r4, r7, pc}
 800ba64:	20000cac 	.word	0x20000cac

0800ba68 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800ba68:	b590      	push	{r4, r7, lr}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6039      	str	r1, [r7, #0]
 800ba70:	0011      	movs	r1, r2
 800ba72:	1dfb      	adds	r3, r7, #7
 800ba74:	1c02      	adds	r2, r0, #0
 800ba76:	701a      	strb	r2, [r3, #0]
 800ba78:	1dbb      	adds	r3, r7, #6
 800ba7a:	1c0a      	adds	r2, r1, #0
 800ba7c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ba7e:	4b08      	ldr	r3, [pc, #32]	@ (800baa0 <WriteRegister+0x38>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d008      	beq.n	800ba98 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800ba86:	4b06      	ldr	r3, [pc, #24]	@ (800baa0 <WriteRegister+0x38>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	1dba      	adds	r2, r7, #6
 800ba8c:	7814      	ldrb	r4, [r2, #0]
 800ba8e:	6839      	ldr	r1, [r7, #0]
 800ba90:	1dfa      	adds	r2, r7, #7
 800ba92:	7810      	ldrb	r0, [r2, #0]
 800ba94:	0022      	movs	r2, r4
 800ba96:	4798      	blx	r3
  }
}
 800ba98:	46c0      	nop			@ (mov r8, r8)
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	b003      	add	sp, #12
 800ba9e:	bd90      	pop	{r4, r7, pc}
 800baa0:	20000cb0 	.word	0x20000cb0

0800baa4 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800baac:	f003 fb66 	bl	800f17c <HAL_GetTick>
 800bab0:	0002      	movs	r2, r0
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	18d2      	adds	r2, r2, r3
 800bab6:	4b03      	ldr	r3, [pc, #12]	@ (800bac4 <setSGP40TimeStamp+0x20>)
 800bab8:	601a      	str	r2, [r3, #0]
}
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	46bd      	mov	sp, r7
 800babe:	b002      	add	sp, #8
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	46c0      	nop			@ (mov r8, r8)
 800bac4:	20000cc0 	.word	0x20000cc0

0800bac8 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800bac8:	b580      	push	{r7, lr}
 800baca:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800bacc:	4b02      	ldr	r3, [pc, #8]	@ (800bad8 <ResetSGP40samplecounter+0x10>)
 800bace:	2200      	movs	r2, #0
 800bad0:	701a      	strb	r2, [r3, #0]
}
 800bad2:	46c0      	nop			@ (mov r8, r8)
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	20000cbe 	.word	0x20000cbe

0800badc <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800bae6:	4b07      	ldr	r3, [pc, #28]	@ (800bb04 <SGP_Init+0x28>)
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800baec:	4b06      	ldr	r3, [pc, #24]	@ (800bb08 <SGP_Init+0x2c>)
 800baee:	683a      	ldr	r2, [r7, #0]
 800baf0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800baf2:	4b06      	ldr	r3, [pc, #24]	@ (800bb0c <SGP_Init+0x30>)
 800baf4:	2100      	movs	r1, #0
 800baf6:	0018      	movs	r0, r3
 800baf8:	f7fe ff70 	bl	800a9dc <GasIndexAlgorithm_init>
}
 800bafc:	46c0      	nop			@ (mov r8, r8)
 800bafe:	46bd      	mov	sp, r7
 800bb00:	b002      	add	sp, #8
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	20000cac 	.word	0x20000cac
 800bb08:	20000cb0 	.word	0x20000cb0
 800bb0c:	20000cc8 	.word	0x20000cc8

0800bb10 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800bb14:	4b07      	ldr	r3, [pc, #28]	@ (800bb34 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d004      	beq.n	800bb26 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800bb1c:	4b06      	ldr	r3, [pc, #24]	@ (800bb38 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800bb1e:	22fe      	movs	r2, #254	@ 0xfe
 800bb20:	0592      	lsls	r2, r2, #22
 800bb22:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800bb24:	e002      	b.n	800bb2c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800bb26:	4b04      	ldr	r3, [pc, #16]	@ (800bb38 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800bb28:	4a04      	ldr	r2, [pc, #16]	@ (800bb3c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800bb2a:	605a      	str	r2, [r3, #4]
}
 800bb2c:	46c0      	nop			@ (mov r8, r8)
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	46c0      	nop			@ (mov r8, r8)
 800bb34:	20001c15 	.word	0x20001c15
 800bb38:	20000cc8 	.word	0x20000cc8
 800bb3c:	44610000 	.word	0x44610000

0800bb40 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800bb40:	b580      	push	{r7, lr}
 800bb42:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800bb44:	4b13      	ldr	r3, [pc, #76]	@ (800bb94 <SGP_StartMeasurement+0x54>)
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00d      	beq.n	800bb68 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bb4c:	4b12      	ldr	r3, [pc, #72]	@ (800bb98 <SGP_StartMeasurement+0x58>)
 800bb4e:	2208      	movs	r2, #8
 800bb50:	0019      	movs	r1, r3
 800bb52:	2059      	movs	r0, #89	@ 0x59
 800bb54:	f7ff ff88 	bl	800ba68 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800bb58:	f003 fb10 	bl	800f17c <HAL_GetTick>
 800bb5c:	0003      	movs	r3, r0
 800bb5e:	331e      	adds	r3, #30
 800bb60:	001a      	movs	r2, r3
 800bb62:	4b0e      	ldr	r3, [pc, #56]	@ (800bb9c <SGP_StartMeasurement+0x5c>)
 800bb64:	601a      	str	r2, [r3, #0]
 800bb66:	e00c      	b.n	800bb82 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bb68:	4b0d      	ldr	r3, [pc, #52]	@ (800bba0 <SGP_StartMeasurement+0x60>)
 800bb6a:	2208      	movs	r2, #8
 800bb6c:	0019      	movs	r1, r3
 800bb6e:	2059      	movs	r0, #89	@ 0x59
 800bb70:	f7ff ff7a 	bl	800ba68 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800bb74:	f003 fb02 	bl	800f17c <HAL_GetTick>
 800bb78:	0003      	movs	r3, r0
 800bb7a:	33aa      	adds	r3, #170	@ 0xaa
 800bb7c:	001a      	movs	r2, r3
 800bb7e:	4b09      	ldr	r3, [pc, #36]	@ (800bba4 <SGP_StartMeasurement+0x64>)
 800bb80:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800bb82:	4b09      	ldr	r3, [pc, #36]	@ (800bba8 <SGP_StartMeasurement+0x68>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800bb88:	4b08      	ldr	r3, [pc, #32]	@ (800bbac <SGP_StartMeasurement+0x6c>)
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]
}
 800bb8e:	46c0      	nop			@ (mov r8, r8)
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	20000d70 	.word	0x20000d70
 800bb98:	200000a0 	.word	0x200000a0
 800bb9c:	200000b4 	.word	0x200000b4
 800bba0:	20000098 	.word	0x20000098
 800bba4:	200000ac 	.word	0x200000ac
 800bba8:	20000cc4 	.word	0x20000cc4
 800bbac:	20000cc5 	.word	0x20000cc5

0800bbb0 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800bbb4:	4b04      	ldr	r3, [pc, #16]	@ (800bbc8 <SGP_HeatedUp+0x18>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	0018      	movs	r0, r3
 800bbba:	f002 fe45 	bl	800e848 <TimestampIsReached>
 800bbbe:	0003      	movs	r3, r0
}
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	46c0      	nop			@ (mov r8, r8)
 800bbc8:	200000ac 	.word	0x200000ac

0800bbcc <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800bbd0:	4b04      	ldr	r3, [pc, #16]	@ (800bbe4 <SGP_MeasurementReady+0x18>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	f002 fe37 	bl	800e848 <TimestampIsReached>
 800bbda:	0003      	movs	r3, r0
}
 800bbdc:	0018      	movs	r0, r3
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	46c0      	nop			@ (mov r8, r8)
 800bbe4:	200000b4 	.word	0x200000b4

0800bbe8 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800bbec:	4b04      	ldr	r3, [pc, #16]	@ (800bc00 <SGP_MeasurementDone+0x18>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	0018      	movs	r0, r3
 800bbf2:	f002 fe29 	bl	800e848 <TimestampIsReached>
 800bbf6:	0003      	movs	r3, r0
}
 800bbf8:	0018      	movs	r0, r3
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	46c0      	nop			@ (mov r8, r8)
 800bc00:	200000b0 	.word	0x200000b0

0800bc04 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800bc04:	b580      	push	{r7, lr}
 800bc06:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bc08:	4b04      	ldr	r3, [pc, #16]	@ (800bc1c <SGP_TurnHeaterOff+0x18>)
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	0019      	movs	r1, r3
 800bc0e:	2059      	movs	r0, #89	@ 0x59
 800bc10:	f7ff ff2a 	bl	800ba68 <WriteRegister>
}
 800bc14:	46c0      	nop			@ (mov r8, r8)
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	46c0      	nop			@ (mov r8, r8)
 800bc1c:	20000090 	.word	0x20000090

0800bc20 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800bc20:	b590      	push	{r4, r7, lr}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800bc28:	f7ff ffc2 	bl	800bbb0 <SGP_HeatedUp>
 800bc2c:	1e03      	subs	r3, r0, #0
 800bc2e:	d032      	beq.n	800bc96 <SGP_GetMeasurementValues+0x76>
 800bc30:	4b7f      	ldr	r3, [pc, #508]	@ (800be30 <SGP_GetMeasurementValues+0x210>)
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	2201      	movs	r2, #1
 800bc36:	4053      	eors	r3, r2
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d02b      	beq.n	800bc96 <SGP_GetMeasurementValues+0x76>
 800bc3e:	4b7d      	ldr	r3, [pc, #500]	@ (800be34 <SGP_GetMeasurementValues+0x214>)
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2201      	movs	r2, #1
 800bc44:	4053      	eors	r3, r2
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d024      	beq.n	800bc96 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 800bc4c:	4b78      	ldr	r3, [pc, #480]	@ (800be30 <SGP_GetMeasurementValues+0x210>)
 800bc4e:	2201      	movs	r2, #1
 800bc50:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800bc52:	4b79      	ldr	r3, [pc, #484]	@ (800be38 <SGP_GetMeasurementValues+0x218>)
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00d      	beq.n	800bc76 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bc5a:	4b78      	ldr	r3, [pc, #480]	@ (800be3c <SGP_GetMeasurementValues+0x21c>)
 800bc5c:	2208      	movs	r2, #8
 800bc5e:	0019      	movs	r1, r3
 800bc60:	2059      	movs	r0, #89	@ 0x59
 800bc62:	f7ff ff01 	bl	800ba68 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800bc66:	f003 fa89 	bl	800f17c <HAL_GetTick>
 800bc6a:	0003      	movs	r3, r0
 800bc6c:	331e      	adds	r3, #30
 800bc6e:	001a      	movs	r2, r3
 800bc70:	4b73      	ldr	r3, [pc, #460]	@ (800be40 <SGP_GetMeasurementValues+0x220>)
 800bc72:	601a      	str	r2, [r3, #0]
 800bc74:	e00c      	b.n	800bc90 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800bc76:	4b73      	ldr	r3, [pc, #460]	@ (800be44 <SGP_GetMeasurementValues+0x224>)
 800bc78:	2208      	movs	r2, #8
 800bc7a:	0019      	movs	r1, r3
 800bc7c:	2059      	movs	r0, #89	@ 0x59
 800bc7e:	f7ff fef3 	bl	800ba68 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800bc82:	f003 fa7b 	bl	800f17c <HAL_GetTick>
 800bc86:	0003      	movs	r3, r0
 800bc88:	331e      	adds	r3, #30
 800bc8a:	001a      	movs	r2, r3
 800bc8c:	4b6c      	ldr	r3, [pc, #432]	@ (800be40 <SGP_GetMeasurementValues+0x220>)
 800bc8e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800bc90:	4b68      	ldr	r3, [pc, #416]	@ (800be34 <SGP_GetMeasurementValues+0x214>)
 800bc92:	2201      	movs	r2, #1
 800bc94:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800bc96:	4b66      	ldr	r3, [pc, #408]	@ (800be30 <SGP_GetMeasurementValues+0x210>)
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d100      	bne.n	800bca0 <SGP_GetMeasurementValues+0x80>
 800bc9e:	e0ab      	b.n	800bdf8 <SGP_GetMeasurementValues+0x1d8>
 800bca0:	f7ff ff94 	bl	800bbcc <SGP_MeasurementReady>
 800bca4:	1e03      	subs	r3, r0, #0
 800bca6:	d100      	bne.n	800bcaa <SGP_GetMeasurementValues+0x8a>
 800bca8:	e0a6      	b.n	800bdf8 <SGP_GetMeasurementValues+0x1d8>
 800bcaa:	4b67      	ldr	r3, [pc, #412]	@ (800be48 <SGP_GetMeasurementValues+0x228>)
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	4053      	eors	r3, r2
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d100      	bne.n	800bcba <SGP_GetMeasurementValues+0x9a>
 800bcb8:	e09e      	b.n	800bdf8 <SGP_GetMeasurementValues+0x1d8>
    MeasurementIsReady = true;
 800bcba:	4b63      	ldr	r3, [pc, #396]	@ (800be48 <SGP_GetMeasurementValues+0x228>)
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800bcc0:	4b62      	ldr	r3, [pc, #392]	@ (800be4c <SGP_GetMeasurementValues+0x22c>)
 800bcc2:	2203      	movs	r2, #3
 800bcc4:	0019      	movs	r1, r3
 800bcc6:	2059      	movs	r0, #89	@ 0x59
 800bcc8:	f7ff feb0 	bl	800ba2c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800bccc:	4b5f      	ldr	r3, [pc, #380]	@ (800be4c <SGP_GetMeasurementValues+0x22c>)
 800bcce:	2203      	movs	r2, #3
 800bcd0:	2103      	movs	r1, #3
 800bcd2:	0018      	movs	r0, r3
 800bcd4:	f000 f918 	bl	800bf08 <CheckCRC>
 800bcd8:	0003      	movs	r3, r0
 800bcda:	001a      	movs	r2, r3
 800bcdc:	2301      	movs	r3, #1
 800bcde:	4053      	eors	r3, r2
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d02a      	beq.n	800bd3c <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800bce6:	4a5a      	ldr	r2, [pc, #360]	@ (800be50 <SGP_GetMeasurementValues+0x230>)
 800bce8:	4b5a      	ldr	r3, [pc, #360]	@ (800be54 <SGP_GetMeasurementValues+0x234>)
 800bcea:	0019      	movs	r1, r3
 800bcec:	2001      	movs	r0, #1
 800bcee:	f002 fe01 	bl	800e8f4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800bcf2:	4a59      	ldr	r2, [pc, #356]	@ (800be58 <SGP_GetMeasurementValues+0x238>)
 800bcf4:	4b59      	ldr	r3, [pc, #356]	@ (800be5c <SGP_GetMeasurementValues+0x23c>)
 800bcf6:	0019      	movs	r1, r3
 800bcf8:	2002      	movs	r0, #2
 800bcfa:	f002 fdfb 	bl	800e8f4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800bcfe:	230f      	movs	r3, #15
 800bd00:	18fb      	adds	r3, r7, r3
 800bd02:	2200      	movs	r2, #0
 800bd04:	701a      	strb	r2, [r3, #0]
 800bd06:	e012      	b.n	800bd2e <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800bd08:	240f      	movs	r4, #15
 800bd0a:	193b      	adds	r3, r7, r4
 800bd0c:	7818      	ldrb	r0, [r3, #0]
 800bd0e:	193b      	adds	r3, r7, r4
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	4a4e      	ldr	r2, [pc, #312]	@ (800be4c <SGP_GetMeasurementValues+0x22c>)
 800bd14:	5cd3      	ldrb	r3, [r2, r3]
 800bd16:	4a52      	ldr	r2, [pc, #328]	@ (800be60 <SGP_GetMeasurementValues+0x240>)
 800bd18:	4952      	ldr	r1, [pc, #328]	@ (800be64 <SGP_GetMeasurementValues+0x244>)
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	0003      	movs	r3, r0
 800bd1e:	2003      	movs	r0, #3
 800bd20:	f002 fde8 	bl	800e8f4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800bd24:	193b      	adds	r3, r7, r4
 800bd26:	781a      	ldrb	r2, [r3, #0]
 800bd28:	193b      	adds	r3, r7, r4
 800bd2a:	3201      	adds	r2, #1
 800bd2c:	701a      	strb	r2, [r3, #0]
 800bd2e:	230f      	movs	r3, #15
 800bd30:	18fb      	adds	r3, r7, r3
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d9e7      	bls.n	800bd08 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	e075      	b.n	800be28 <SGP_GetMeasurementValues+0x208>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800bd3c:	f003 fa1e 	bl	800f17c <HAL_GetTick>
 800bd40:	0003      	movs	r3, r0
 800bd42:	22fa      	movs	r2, #250	@ 0xfa
 800bd44:	0092      	lsls	r2, r2, #2
 800bd46:	189a      	adds	r2, r3, r2
 800bd48:	4b47      	ldr	r3, [pc, #284]	@ (800be68 <SGP_GetMeasurementValues+0x248>)
 800bd4a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800bd4c:	f7ff ff5a 	bl	800bc04 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800bd50:	4b46      	ldr	r3, [pc, #280]	@ (800be6c <SGP_GetMeasurementValues+0x24c>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	3301      	adds	r3, #1
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	4b44      	ldr	r3, [pc, #272]	@ (800be6c <SGP_GetMeasurementValues+0x24c>)
 800bd5a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800bd5c:	4b43      	ldr	r3, [pc, #268]	@ (800be6c <SGP_GetMeasurementValues+0x24c>)
 800bd5e:	781a      	ldrb	r2, [r3, #0]
 800bd60:	4b43      	ldr	r3, [pc, #268]	@ (800be70 <SGP_GetMeasurementValues+0x250>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d347      	bcc.n	800bdf8 <SGP_GetMeasurementValues+0x1d8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800bd68:	4b38      	ldr	r3, [pc, #224]	@ (800be4c <SGP_GetMeasurementValues+0x22c>)
 800bd6a:	785b      	ldrb	r3, [r3, #1]
 800bd6c:	021b      	lsls	r3, r3, #8
 800bd6e:	b21a      	sxth	r2, r3
 800bd70:	4b36      	ldr	r3, [pc, #216]	@ (800be4c <SGP_GetMeasurementValues+0x22c>)
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	b21b      	sxth	r3, r3
 800bd76:	4313      	orrs	r3, r2
 800bd78:	b21a      	sxth	r2, r3
 800bd7a:	240c      	movs	r4, #12
 800bd7c:	193b      	adds	r3, r7, r4
 800bd7e:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800bd84:	193b      	adds	r3, r7, r4
 800bd86:	8819      	ldrh	r1, [r3, #0]
 800bd88:	2308      	movs	r3, #8
 800bd8a:	18fa      	adds	r2, r7, r3
 800bd8c:	4b39      	ldr	r3, [pc, #228]	@ (800be74 <SGP_GetMeasurementValues+0x254>)
 800bd8e:	0018      	movs	r0, r3
 800bd90:	f7fe fe88 	bl	800aaa4 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 800bd9a:	4b37      	ldr	r3, [pc, #220]	@ (800be78 <SGP_GetMeasurementValues+0x258>)
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	4b35      	ldr	r3, [pc, #212]	@ (800be78 <SGP_GetMeasurementValues+0x258>)
 800bda4:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800bda6:	4b34      	ldr	r3, [pc, #208]	@ (800be78 <SGP_GetMeasurementValues+0x258>)
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d10d      	bne.n	800bdca <SGP_GetMeasurementValues+0x1aa>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800bdae:	193b      	adds	r3, r7, r4
 800bdb0:	881b      	ldrh	r3, [r3, #0]
 800bdb2:	4a32      	ldr	r2, [pc, #200]	@ (800be7c <SGP_GetMeasurementValues+0x25c>)
 800bdb4:	492b      	ldr	r1, [pc, #172]	@ (800be64 <SGP_GetMeasurementValues+0x244>)
 800bdb6:	2003      	movs	r0, #3
 800bdb8:	f002 fd9c 	bl	800e8f4 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	4a30      	ldr	r2, [pc, #192]	@ (800be80 <SGP_GetMeasurementValues+0x260>)
 800bdc0:	4928      	ldr	r1, [pc, #160]	@ (800be64 <SGP_GetMeasurementValues+0x244>)
 800bdc2:	2003      	movs	r0, #3
 800bdc4:	f002 fd96 	bl	800e8f4 <CreateLine>
 800bdc8:	e006      	b.n	800bdd8 <SGP_GetMeasurementValues+0x1b8>
      }
      else {
        if (sgp40samplecounter == 11) {
 800bdca:	4b2b      	ldr	r3, [pc, #172]	@ (800be78 <SGP_GetMeasurementValues+0x258>)
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b0b      	cmp	r3, #11
 800bdd0:	d102      	bne.n	800bdd8 <SGP_GetMeasurementValues+0x1b8>
          sgp40samplecounter = 0;
 800bdd2:	4b29      	ldr	r3, [pc, #164]	@ (800be78 <SGP_GetMeasurementValues+0x258>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	0018      	movs	r0, r3
 800bdde:	f001 fd35 	bl	800d84c <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 800bde2:	4b22      	ldr	r3, [pc, #136]	@ (800be6c <SGP_GetMeasurementValues+0x24c>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 800bde8:	4b13      	ldr	r3, [pc, #76]	@ (800be38 <SGP_GetMeasurementValues+0x218>)
 800bdea:	2200      	movs	r2, #0
 800bdec:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bdee:	4b11      	ldr	r3, [pc, #68]	@ (800be34 <SGP_GetMeasurementValues+0x214>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	701a      	strb	r2, [r3, #0]
      return true;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e017      	b.n	800be28 <SGP_GetMeasurementValues+0x208>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bdf8:	f7ff fef6 	bl	800bbe8 <SGP_MeasurementDone>
 800bdfc:	1e03      	subs	r3, r0, #0
 800bdfe:	d012      	beq.n	800be26 <SGP_GetMeasurementValues+0x206>
 800be00:	4b0b      	ldr	r3, [pc, #44]	@ (800be30 <SGP_GetMeasurementValues+0x210>)
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00e      	beq.n	800be26 <SGP_GetMeasurementValues+0x206>
 800be08:	4b0f      	ldr	r3, [pc, #60]	@ (800be48 <SGP_GetMeasurementValues+0x228>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00a      	beq.n	800be26 <SGP_GetMeasurementValues+0x206>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800be10:	4a1c      	ldr	r2, [pc, #112]	@ (800be84 <SGP_GetMeasurementValues+0x264>)
 800be12:	4b14      	ldr	r3, [pc, #80]	@ (800be64 <SGP_GetMeasurementValues+0x244>)
 800be14:	0019      	movs	r1, r3
 800be16:	2003      	movs	r0, #3
 800be18:	f002 fd6c 	bl	800e8f4 <CreateLine>
    SGP_StartMeasurement();
 800be1c:	f7ff fe90 	bl	800bb40 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800be20:	4b04      	ldr	r3, [pc, #16]	@ (800be34 <SGP_GetMeasurementValues+0x214>)
 800be22:	2200      	movs	r2, #0
 800be24:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800be26:	2300      	movs	r3, #0
}
 800be28:	0018      	movs	r0, r3
 800be2a:	46bd      	mov	sp, r7
 800be2c:	b005      	add	sp, #20
 800be2e:	bd90      	pop	{r4, r7, pc}
 800be30:	20000cc4 	.word	0x20000cc4
 800be34:	20000d71 	.word	0x20000d71
 800be38:	20000d70 	.word	0x20000d70
 800be3c:	200000a0 	.word	0x200000a0
 800be40:	200000b4 	.word	0x200000b4
 800be44:	20000098 	.word	0x20000098
 800be48:	20000cc5 	.word	0x20000cc5
 800be4c:	20000cb4 	.word	0x20000cb4
 800be50:	080252e8 	.word	0x080252e8
 800be54:	08025310 	.word	0x08025310
 800be58:	08025314 	.word	0x08025314
 800be5c:	08025334 	.word	0x08025334
 800be60:	08025338 	.word	0x08025338
 800be64:	08025358 	.word	0x08025358
 800be68:	200000b0 	.word	0x200000b0
 800be6c:	20000cbd 	.word	0x20000cbd
 800be70:	200000aa 	.word	0x200000aa
 800be74:	20000cc8 	.word	0x20000cc8
 800be78:	20000cbe 	.word	0x20000cbe
 800be7c:	0802535c 	.word	0x0802535c
 800be80:	08025378 	.word	0x08025378
 800be84:	08025394 	.word	0x08025394

0800be88 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800be8e:	4b1a      	ldr	r3, [pc, #104]	@ (800bef8 <SGP_DeviceConnected+0x70>)
 800be90:	2202      	movs	r2, #2
 800be92:	0019      	movs	r1, r3
 800be94:	2059      	movs	r0, #89	@ 0x59
 800be96:	f7ff fde7 	bl	800ba68 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800be9a:	2001      	movs	r0, #1
 800be9c:	f003 f978 	bl	800f190 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bea0:	4b16      	ldr	r3, [pc, #88]	@ (800befc <SGP_DeviceConnected+0x74>)
 800bea2:	2209      	movs	r2, #9
 800bea4:	0019      	movs	r1, r3
 800bea6:	2059      	movs	r0, #89	@ 0x59
 800bea8:	f7ff fdc0 	bl	800ba2c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800beac:	1dfb      	adds	r3, r7, #7
 800beae:	2200      	movs	r2, #0
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	e011      	b.n	800bed8 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800beb4:	1dfb      	adds	r3, r7, #7
 800beb6:	7818      	ldrb	r0, [r3, #0]
 800beb8:	1dfb      	adds	r3, r7, #7
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	4a0f      	ldr	r2, [pc, #60]	@ (800befc <SGP_DeviceConnected+0x74>)
 800bebe:	5cd3      	ldrb	r3, [r2, r3]
 800bec0:	4a0f      	ldr	r2, [pc, #60]	@ (800bf00 <SGP_DeviceConnected+0x78>)
 800bec2:	4910      	ldr	r1, [pc, #64]	@ (800bf04 <SGP_DeviceConnected+0x7c>)
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	0003      	movs	r3, r0
 800bec8:	2002      	movs	r0, #2
 800beca:	f002 fd13 	bl	800e8f4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bece:	1dfb      	adds	r3, r7, #7
 800bed0:	781a      	ldrb	r2, [r3, #0]
 800bed2:	1dfb      	adds	r3, r7, #7
 800bed4:	3201      	adds	r2, #1
 800bed6:	701a      	strb	r2, [r3, #0]
 800bed8:	1dfb      	adds	r3, r7, #7
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b08      	cmp	r3, #8
 800bede:	d9e9      	bls.n	800beb4 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bee0:	4b06      	ldr	r3, [pc, #24]	@ (800befc <SGP_DeviceConnected+0x74>)
 800bee2:	2203      	movs	r2, #3
 800bee4:	2109      	movs	r1, #9
 800bee6:	0018      	movs	r0, r3
 800bee8:	f000 f80e 	bl	800bf08 <CheckCRC>
 800beec:	0003      	movs	r3, r0
}
 800beee:	0018      	movs	r0, r3
 800bef0:	46bd      	mov	sp, r7
 800bef2:	b002      	add	sp, #8
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	46c0      	nop			@ (mov r8, r8)
 800bef8:	20000094 	.word	0x20000094
 800befc:	20000cb4 	.word	0x20000cb4
 800bf00:	080253b4 	.word	0x080253b4
 800bf04:	08025334 	.word	0x08025334

0800bf08 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bf08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf0a:	b08f      	sub	sp, #60	@ 0x3c
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf10:	0008      	movs	r0, r1
 800bf12:	0011      	movs	r1, r2
 800bf14:	2323      	movs	r3, #35	@ 0x23
 800bf16:	18fb      	adds	r3, r7, r3
 800bf18:	1c02      	adds	r2, r0, #0
 800bf1a:	701a      	strb	r2, [r3, #0]
 800bf1c:	2322      	movs	r3, #34	@ 0x22
 800bf1e:	18fb      	adds	r3, r7, r3
 800bf20:	1c0a      	adds	r2, r1, #0
 800bf22:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bf24:	2317      	movs	r3, #23
 800bf26:	2220      	movs	r2, #32
 800bf28:	189b      	adds	r3, r3, r2
 800bf2a:	19db      	adds	r3, r3, r7
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	701a      	strb	r2, [r3, #0]
 800bf30:	e09f      	b.n	800c072 <CheckCRC+0x16a>
 800bf32:	466b      	mov	r3, sp
 800bf34:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bf36:	2322      	movs	r3, #34	@ 0x22
 800bf38:	18fb      	adds	r3, r7, r3
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	001a      	movs	r2, r3
 800bf3e:	3a01      	subs	r2, #1
 800bf40:	633a      	str	r2, [r7, #48]	@ 0x30
 800bf42:	60bb      	str	r3, [r7, #8]
 800bf44:	2200      	movs	r2, #0
 800bf46:	60fa      	str	r2, [r7, #12]
 800bf48:	68b8      	ldr	r0, [r7, #8]
 800bf4a:	68f9      	ldr	r1, [r7, #12]
 800bf4c:	0002      	movs	r2, r0
 800bf4e:	0f52      	lsrs	r2, r2, #29
 800bf50:	000c      	movs	r4, r1
 800bf52:	00e4      	lsls	r4, r4, #3
 800bf54:	61fc      	str	r4, [r7, #28]
 800bf56:	69fc      	ldr	r4, [r7, #28]
 800bf58:	4314      	orrs	r4, r2
 800bf5a:	61fc      	str	r4, [r7, #28]
 800bf5c:	0002      	movs	r2, r0
 800bf5e:	00d2      	lsls	r2, r2, #3
 800bf60:	61ba      	str	r2, [r7, #24]
 800bf62:	603b      	str	r3, [r7, #0]
 800bf64:	2200      	movs	r2, #0
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	6838      	ldr	r0, [r7, #0]
 800bf6a:	6879      	ldr	r1, [r7, #4]
 800bf6c:	0002      	movs	r2, r0
 800bf6e:	0f52      	lsrs	r2, r2, #29
 800bf70:	000c      	movs	r4, r1
 800bf72:	00e4      	lsls	r4, r4, #3
 800bf74:	617c      	str	r4, [r7, #20]
 800bf76:	697c      	ldr	r4, [r7, #20]
 800bf78:	4314      	orrs	r4, r2
 800bf7a:	617c      	str	r4, [r7, #20]
 800bf7c:	0002      	movs	r2, r0
 800bf7e:	00d2      	lsls	r2, r2, #3
 800bf80:	613a      	str	r2, [r7, #16]
 800bf82:	3307      	adds	r3, #7
 800bf84:	08db      	lsrs	r3, r3, #3
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	466a      	mov	r2, sp
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	469d      	mov	sp, r3
 800bf8e:	466b      	mov	r3, sp
 800bf90:	3300      	adds	r3, #0
 800bf92:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bf94:	2316      	movs	r3, #22
 800bf96:	2220      	movs	r2, #32
 800bf98:	189b      	adds	r3, r3, r2
 800bf9a:	19db      	adds	r3, r3, r7
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	701a      	strb	r2, [r3, #0]
 800bfa0:	e01e      	b.n	800bfe0 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bfa2:	2317      	movs	r3, #23
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	189b      	adds	r3, r3, r2
 800bfa8:	19db      	adds	r3, r3, r7
 800bfaa:	781a      	ldrb	r2, [r3, #0]
 800bfac:	2116      	movs	r1, #22
 800bfae:	2320      	movs	r3, #32
 800bfb0:	18cb      	adds	r3, r1, r3
 800bfb2:	19db      	adds	r3, r3, r7
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	18d3      	adds	r3, r2, r3
 800bfb8:	001a      	movs	r2, r3
 800bfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfbc:	189a      	adds	r2, r3, r2
 800bfbe:	0008      	movs	r0, r1
 800bfc0:	2320      	movs	r3, #32
 800bfc2:	18cb      	adds	r3, r1, r3
 800bfc4:	19db      	adds	r3, r3, r7
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	7811      	ldrb	r1, [r2, #0]
 800bfca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfcc:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bfce:	2320      	movs	r3, #32
 800bfd0:	18c3      	adds	r3, r0, r3
 800bfd2:	19db      	adds	r3, r3, r7
 800bfd4:	781a      	ldrb	r2, [r3, #0]
 800bfd6:	2320      	movs	r3, #32
 800bfd8:	18c3      	adds	r3, r0, r3
 800bfda:	19db      	adds	r3, r3, r7
 800bfdc:	3201      	adds	r2, #1
 800bfde:	701a      	strb	r2, [r3, #0]
 800bfe0:	2316      	movs	r3, #22
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	189b      	adds	r3, r3, r2
 800bfe6:	19da      	adds	r2, r3, r7
 800bfe8:	2322      	movs	r3, #34	@ 0x22
 800bfea:	18fb      	adds	r3, r7, r3
 800bfec:	7812      	ldrb	r2, [r2, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d3d6      	bcc.n	800bfa2 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bff4:	2417      	movs	r4, #23
 800bff6:	2320      	movs	r3, #32
 800bff8:	18e3      	adds	r3, r4, r3
 800bffa:	19db      	adds	r3, r3, r7
 800bffc:	781a      	ldrb	r2, [r3, #0]
 800bffe:	2322      	movs	r3, #34	@ 0x22
 800c000:	18fb      	adds	r3, r7, r3
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	18d3      	adds	r3, r2, r3
 800c006:	3b01      	subs	r3, #1
 800c008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c00a:	18d2      	adds	r2, r2, r3
 800c00c:	250b      	movs	r5, #11
 800c00e:	2320      	movs	r3, #32
 800c010:	18eb      	adds	r3, r5, r3
 800c012:	19db      	adds	r3, r3, r7
 800c014:	7812      	ldrb	r2, [r2, #0]
 800c016:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800c018:	2322      	movs	r3, #34	@ 0x22
 800c01a:	18fb      	adds	r3, r7, r3
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	3b01      	subs	r3, #1
 800c020:	b2da      	uxtb	r2, r3
 800c022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c024:	0011      	movs	r1, r2
 800c026:	0018      	movs	r0, r3
 800c028:	f000 f838 	bl	800c09c <CalculateCRC>
 800c02c:	0003      	movs	r3, r0
 800c02e:	001a      	movs	r2, r3
 800c030:	2320      	movs	r3, #32
 800c032:	18eb      	adds	r3, r5, r3
 800c034:	19db      	adds	r3, r3, r7
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	4293      	cmp	r3, r2
 800c03a:	d00c      	beq.n	800c056 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800c03c:	2320      	movs	r3, #32
 800c03e:	18e3      	adds	r3, r4, r3
 800c040:	19db      	adds	r3, r3, r7
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	3301      	adds	r3, #1
 800c046:	4a13      	ldr	r2, [pc, #76]	@ (800c094 <CheckCRC+0x18c>)
 800c048:	4913      	ldr	r1, [pc, #76]	@ (800c098 <CheckCRC+0x190>)
 800c04a:	2001      	movs	r0, #1
 800c04c:	f002 fc52 	bl	800e8f4 <CreateLine>
      return false;
 800c050:	2300      	movs	r3, #0
 800c052:	46b5      	mov	sp, r6
 800c054:	e019      	b.n	800c08a <CheckCRC+0x182>
 800c056:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800c058:	2217      	movs	r2, #23
 800c05a:	2320      	movs	r3, #32
 800c05c:	18d3      	adds	r3, r2, r3
 800c05e:	19db      	adds	r3, r3, r7
 800c060:	2120      	movs	r1, #32
 800c062:	1852      	adds	r2, r2, r1
 800c064:	19d1      	adds	r1, r2, r7
 800c066:	2222      	movs	r2, #34	@ 0x22
 800c068:	18ba      	adds	r2, r7, r2
 800c06a:	7809      	ldrb	r1, [r1, #0]
 800c06c:	7812      	ldrb	r2, [r2, #0]
 800c06e:	188a      	adds	r2, r1, r2
 800c070:	701a      	strb	r2, [r3, #0]
 800c072:	2317      	movs	r3, #23
 800c074:	2220      	movs	r2, #32
 800c076:	189b      	adds	r3, r3, r2
 800c078:	19da      	adds	r2, r3, r7
 800c07a:	2323      	movs	r3, #35	@ 0x23
 800c07c:	18fb      	adds	r3, r7, r3
 800c07e:	7812      	ldrb	r2, [r2, #0]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	429a      	cmp	r2, r3
 800c084:	d200      	bcs.n	800c088 <CheckCRC+0x180>
 800c086:	e754      	b.n	800bf32 <CheckCRC+0x2a>
    }
  }
  return true;
 800c088:	2301      	movs	r3, #1
}
 800c08a:	0018      	movs	r0, r3
 800c08c:	46bd      	mov	sp, r7
 800c08e:	b00f      	add	sp, #60	@ 0x3c
 800c090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c092:	46c0      	nop			@ (mov r8, r8)
 800c094:	080253d4 	.word	0x080253d4
 800c098:	08025310 	.word	0x08025310

0800c09c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	000a      	movs	r2, r1
 800c0a6:	1cfb      	adds	r3, r7, #3
 800c0a8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800c0aa:	230f      	movs	r3, #15
 800c0ac:	18fb      	adds	r3, r7, r3
 800c0ae:	22ff      	movs	r2, #255	@ 0xff
 800c0b0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800c0b2:	230e      	movs	r3, #14
 800c0b4:	18fb      	adds	r3, r7, r3
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	701a      	strb	r2, [r3, #0]
 800c0ba:	e037      	b.n	800c12c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800c0bc:	230e      	movs	r3, #14
 800c0be:	18fb      	adds	r3, r7, r3
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	18d3      	adds	r3, r2, r3
 800c0c6:	7819      	ldrb	r1, [r3, #0]
 800c0c8:	220f      	movs	r2, #15
 800c0ca:	18bb      	adds	r3, r7, r2
 800c0cc:	18ba      	adds	r2, r7, r2
 800c0ce:	7812      	ldrb	r2, [r2, #0]
 800c0d0:	404a      	eors	r2, r1
 800c0d2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800c0d4:	230d      	movs	r3, #13
 800c0d6:	18fb      	adds	r3, r7, r3
 800c0d8:	2200      	movs	r2, #0
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	e01b      	b.n	800c116 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800c0de:	210f      	movs	r1, #15
 800c0e0:	187b      	adds	r3, r7, r1
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	b25b      	sxtb	r3, r3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	da09      	bge.n	800c0fe <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800c0ea:	187b      	adds	r3, r7, r1
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	005b      	lsls	r3, r3, #1
 800c0f0:	b25b      	sxtb	r3, r3
 800c0f2:	2231      	movs	r2, #49	@ 0x31
 800c0f4:	4053      	eors	r3, r2
 800c0f6:	b25a      	sxtb	r2, r3
 800c0f8:	187b      	adds	r3, r7, r1
 800c0fa:	701a      	strb	r2, [r3, #0]
 800c0fc:	e005      	b.n	800c10a <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800c0fe:	230f      	movs	r3, #15
 800c100:	18fa      	adds	r2, r7, r3
 800c102:	18fb      	adds	r3, r7, r3
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	18db      	adds	r3, r3, r3
 800c108:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800c10a:	210d      	movs	r1, #13
 800c10c:	187b      	adds	r3, r7, r1
 800c10e:	781a      	ldrb	r2, [r3, #0]
 800c110:	187b      	adds	r3, r7, r1
 800c112:	3201      	adds	r2, #1
 800c114:	701a      	strb	r2, [r3, #0]
 800c116:	230d      	movs	r3, #13
 800c118:	18fb      	adds	r3, r7, r3
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b07      	cmp	r3, #7
 800c11e:	d9de      	bls.n	800c0de <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800c120:	210e      	movs	r1, #14
 800c122:	187b      	adds	r3, r7, r1
 800c124:	781a      	ldrb	r2, [r3, #0]
 800c126:	187b      	adds	r3, r7, r1
 800c128:	3201      	adds	r2, #1
 800c12a:	701a      	strb	r2, [r3, #0]
 800c12c:	230e      	movs	r3, #14
 800c12e:	18fa      	adds	r2, r7, r3
 800c130:	1cfb      	adds	r3, r7, #3
 800c132:	7812      	ldrb	r2, [r2, #0]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	d3c0      	bcc.n	800c0bc <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800c13a:	230f      	movs	r3, #15
 800c13c:	18fb      	adds	r3, r7, r3
 800c13e:	781b      	ldrb	r3, [r3, #0]
}
 800c140:	0018      	movs	r0, r3
 800c142:	46bd      	mov	sp, r7
 800c144:	b004      	add	sp, #16
 800c146:	bd80      	pop	{r7, pc}

0800c148 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4936      	ldr	r1, [pc, #216]	@ (800c230 <SGP_SetHT+0xe8>)
 800c158:	1c18      	adds	r0, r3, #0
 800c15a:	f7f4 fbb1 	bl	80008c0 <__aeabi_fadd>
 800c15e:	1c03      	adds	r3, r0, #0
 800c160:	4934      	ldr	r1, [pc, #208]	@ (800c234 <SGP_SetHT+0xec>)
 800c162:	1c18      	adds	r0, r3, #0
 800c164:	f7f4 fd36 	bl	8000bd4 <__aeabi_fdiv>
 800c168:	1c03      	adds	r3, r0, #0
 800c16a:	4933      	ldr	r1, [pc, #204]	@ (800c238 <SGP_SetHT+0xf0>)
 800c16c:	1c18      	adds	r0, r3, #0
 800c16e:	f7f4 ff17 	bl	8000fa0 <__aeabi_fmul>
 800c172:	1c03      	adds	r3, r0, #0
 800c174:	1c18      	adds	r0, r3, #0
 800c176:	f7f4 fa51 	bl	800061c <__aeabi_f2uiz>
 800c17a:	0003      	movs	r3, r0
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	4b2f      	ldr	r3, [pc, #188]	@ (800c23c <SGP_SetHT+0xf4>)
 800c180:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	492e      	ldr	r1, [pc, #184]	@ (800c240 <SGP_SetHT+0xf8>)
 800c188:	1c18      	adds	r0, r3, #0
 800c18a:	f7f4 fd23 	bl	8000bd4 <__aeabi_fdiv>
 800c18e:	1c03      	adds	r3, r0, #0
 800c190:	4929      	ldr	r1, [pc, #164]	@ (800c238 <SGP_SetHT+0xf0>)
 800c192:	1c18      	adds	r0, r3, #0
 800c194:	f7f4 ff04 	bl	8000fa0 <__aeabi_fmul>
 800c198:	1c03      	adds	r3, r0, #0
 800c19a:	1c18      	adds	r0, r3, #0
 800c19c:	f7f4 fa3e 	bl	800061c <__aeabi_f2uiz>
 800c1a0:	0003      	movs	r3, r0
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	4b27      	ldr	r3, [pc, #156]	@ (800c244 <SGP_SetHT+0xfc>)
 800c1a6:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800c1a8:	4b26      	ldr	r3, [pc, #152]	@ (800c244 <SGP_SetHT+0xfc>)
 800c1aa:	881b      	ldrh	r3, [r3, #0]
 800c1ac:	0a1b      	lsrs	r3, r3, #8
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	b2da      	uxtb	r2, r3
 800c1b2:	4b25      	ldr	r3, [pc, #148]	@ (800c248 <SGP_SetHT+0x100>)
 800c1b4:	709a      	strb	r2, [r3, #2]
 800c1b6:	4b24      	ldr	r3, [pc, #144]	@ (800c248 <SGP_SetHT+0x100>)
 800c1b8:	789a      	ldrb	r2, [r3, #2]
 800c1ba:	210c      	movs	r1, #12
 800c1bc:	187b      	adds	r3, r7, r1
 800c1be:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800c1c0:	4b20      	ldr	r3, [pc, #128]	@ (800c244 <SGP_SetHT+0xfc>)
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	4b20      	ldr	r3, [pc, #128]	@ (800c248 <SGP_SetHT+0x100>)
 800c1c8:	70da      	strb	r2, [r3, #3]
 800c1ca:	4b1f      	ldr	r3, [pc, #124]	@ (800c248 <SGP_SetHT+0x100>)
 800c1cc:	78da      	ldrb	r2, [r3, #3]
 800c1ce:	187b      	adds	r3, r7, r1
 800c1d0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800c1d2:	187b      	adds	r3, r7, r1
 800c1d4:	2102      	movs	r1, #2
 800c1d6:	0018      	movs	r0, r3
 800c1d8:	f7ff ff60 	bl	800c09c <CalculateCRC>
 800c1dc:	0003      	movs	r3, r0
 800c1de:	001a      	movs	r2, r3
 800c1e0:	4b19      	ldr	r3, [pc, #100]	@ (800c248 <SGP_SetHT+0x100>)
 800c1e2:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800c1e4:	4b15      	ldr	r3, [pc, #84]	@ (800c23c <SGP_SetHT+0xf4>)
 800c1e6:	881b      	ldrh	r3, [r3, #0]
 800c1e8:	0a1b      	lsrs	r3, r3, #8
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	4b16      	ldr	r3, [pc, #88]	@ (800c248 <SGP_SetHT+0x100>)
 800c1f0:	715a      	strb	r2, [r3, #5]
 800c1f2:	4b15      	ldr	r3, [pc, #84]	@ (800c248 <SGP_SetHT+0x100>)
 800c1f4:	795a      	ldrb	r2, [r3, #5]
 800c1f6:	2108      	movs	r1, #8
 800c1f8:	187b      	adds	r3, r7, r1
 800c1fa:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800c1fc:	4b0f      	ldr	r3, [pc, #60]	@ (800c23c <SGP_SetHT+0xf4>)
 800c1fe:	881b      	ldrh	r3, [r3, #0]
 800c200:	b2da      	uxtb	r2, r3
 800c202:	4b11      	ldr	r3, [pc, #68]	@ (800c248 <SGP_SetHT+0x100>)
 800c204:	719a      	strb	r2, [r3, #6]
 800c206:	4b10      	ldr	r3, [pc, #64]	@ (800c248 <SGP_SetHT+0x100>)
 800c208:	799a      	ldrb	r2, [r3, #6]
 800c20a:	187b      	adds	r3, r7, r1
 800c20c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800c20e:	187b      	adds	r3, r7, r1
 800c210:	2102      	movs	r1, #2
 800c212:	0018      	movs	r0, r3
 800c214:	f7ff ff42 	bl	800c09c <CalculateCRC>
 800c218:	0003      	movs	r3, r0
 800c21a:	001a      	movs	r2, r3
 800c21c:	4b0a      	ldr	r3, [pc, #40]	@ (800c248 <SGP_SetHT+0x100>)
 800c21e:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800c220:	4b0a      	ldr	r3, [pc, #40]	@ (800c24c <SGP_SetHT+0x104>)
 800c222:	2201      	movs	r2, #1
 800c224:	701a      	strb	r2, [r3, #0]
}
 800c226:	46c0      	nop			@ (mov r8, r8)
 800c228:	46bd      	mov	sp, r7
 800c22a:	b004      	add	sp, #16
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	46c0      	nop			@ (mov r8, r8)
 800c230:	42340000 	.word	0x42340000
 800c234:	432f0000 	.word	0x432f0000
 800c238:	477fff00 	.word	0x477fff00
 800c23c:	20000d6e 	.word	0x20000d6e
 800c240:	42c80000 	.word	0x42c80000
 800c244:	20000d6c 	.word	0x20000d6c
 800c248:	200000a0 	.word	0x200000a0
 800c24c:	20000d70 	.word	0x20000d70

0800c250 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800c250:	b580      	push	{r7, lr}
 800c252:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800c254:	4a09      	ldr	r2, [pc, #36]	@ (800c27c <SGP_SoftReset+0x2c>)
 800c256:	4b0a      	ldr	r3, [pc, #40]	@ (800c280 <SGP_SoftReset+0x30>)
 800c258:	0019      	movs	r1, r3
 800c25a:	2003      	movs	r0, #3
 800c25c:	f002 fb4a 	bl	800e8f4 <CreateLine>
  SGP_TurnHeaterOff();
 800c260:	f7ff fcd0 	bl	800bc04 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800c264:	200a      	movs	r0, #10
 800c266:	f002 ff93 	bl	800f190 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800c26a:	4b06      	ldr	r3, [pc, #24]	@ (800c284 <SGP_SoftReset+0x34>)
 800c26c:	2202      	movs	r2, #2
 800c26e:	0019      	movs	r1, r3
 800c270:	2059      	movs	r0, #89	@ 0x59
 800c272:	f7ff fbf9 	bl	800ba68 <WriteRegister>
}
 800c276:	46c0      	nop			@ (mov r8, r8)
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	0802547c 	.word	0x0802547c
 800c280:	08025358 	.word	0x08025358
 800c284:	200000a8 	.word	0x200000a8

0800c288 <ResetVOCresult>:

void ResetVOCresult(void) {
 800c288:	b580      	push	{r7, lr}
 800c28a:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c28c:	4b02      	ldr	r3, [pc, #8]	@ (800c298 <ResetVOCresult+0x10>)
 800c28e:	2200      	movs	r2, #0
 800c290:	601a      	str	r2, [r3, #0]
}
 800c292:	46c0      	nop			@ (mov r8, r8)
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	20000d74 	.word	0x20000d74

0800c29c <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c29c:	b580      	push	{r7, lr}
 800c29e:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c2a0:	4b37      	ldr	r3, [pc, #220]	@ (800c380 <SGP_Upkeep+0xe4>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	2b07      	cmp	r3, #7
 800c2a6:	d85f      	bhi.n	800c368 <SGP_Upkeep+0xcc>
 800c2a8:	009a      	lsls	r2, r3, #2
 800c2aa:	4b36      	ldr	r3, [pc, #216]	@ (800c384 <SGP_Upkeep+0xe8>)
 800c2ac:	18d3      	adds	r3, r2, r3
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c2b2:	4a35      	ldr	r2, [pc, #212]	@ (800c388 <SGP_Upkeep+0xec>)
 800c2b4:	4b35      	ldr	r3, [pc, #212]	@ (800c38c <SGP_Upkeep+0xf0>)
 800c2b6:	0019      	movs	r1, r3
 800c2b8:	2003      	movs	r0, #3
 800c2ba:	f002 fb1b 	bl	800e8f4 <CreateLine>
    break;
 800c2be:	e05a      	b.n	800c376 <SGP_Upkeep+0xda>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c2c0:	f7ff ffe2 	bl	800c288 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c2c4:	4b2e      	ldr	r3, [pc, #184]	@ (800c380 <SGP_Upkeep+0xe4>)
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	701a      	strb	r2, [r3, #0]
    break;
 800c2ca:	e054      	b.n	800c376 <SGP_Upkeep+0xda>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c2cc:	f7ff fc38 	bl	800bb40 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c2d0:	f001 f966 	bl	800d5a0 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c2d4:	4b2a      	ldr	r3, [pc, #168]	@ (800c380 <SGP_Upkeep+0xe4>)
 800c2d6:	2202      	movs	r2, #2
 800c2d8:	701a      	strb	r2, [r3, #0]
    break;
 800c2da:	e04c      	b.n	800c376 <SGP_Upkeep+0xda>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c2dc:	4b2c      	ldr	r3, [pc, #176]	@ (800c390 <SGP_Upkeep+0xf4>)
 800c2de:	0018      	movs	r0, r3
 800c2e0:	f7ff fc9e 	bl	800bc20 <SGP_GetMeasurementValues>
 800c2e4:	1e03      	subs	r3, r0, #0
 800c2e6:	d043      	beq.n	800c370 <SGP_Upkeep+0xd4>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c2e8:	4b25      	ldr	r3, [pc, #148]	@ (800c380 <SGP_Upkeep+0xe4>)
 800c2ea:	2203      	movs	r2, #3
 800c2ec:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c2ee:	e03f      	b.n	800c370 <SGP_Upkeep+0xd4>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 800c2f0:	4b27      	ldr	r3, [pc, #156]	@ (800c390 <SGP_Upkeep+0xf4>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	0018      	movs	r0, r3
 800c2f8:	f7f7 fa68 	bl	80037cc <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c2fc:	4b20      	ldr	r3, [pc, #128]	@ (800c380 <SGP_Upkeep+0xe4>)
 800c2fe:	2206      	movs	r2, #6
 800c300:	701a      	strb	r2, [r3, #0]
    break;
 800c302:	e038      	b.n	800c376 <SGP_Upkeep+0xda>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c304:	4b1e      	ldr	r3, [pc, #120]	@ (800c380 <SGP_Upkeep+0xe4>)
 800c306:	2207      	movs	r2, #7
 800c308:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c30a:	4b22      	ldr	r3, [pc, #136]	@ (800c394 <SGP_Upkeep+0xf8>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d112      	bne.n	800c338 <SGP_Upkeep+0x9c>
 800c312:	4b21      	ldr	r3, [pc, #132]	@ (800c398 <SGP_Upkeep+0xfc>)
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	2201      	movs	r2, #1
 800c318:	4053      	eors	r3, r2
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00b      	beq.n	800c338 <SGP_Upkeep+0x9c>
      // During startup take 12 samples
      if (sgpinitdone) {
 800c320:	4b1e      	ldr	r3, [pc, #120]	@ (800c39c <SGP_Upkeep+0x100>)
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d004      	beq.n	800c332 <SGP_Upkeep+0x96>
        SGP_SoftReset();
 800c328:	f7ff ff92 	bl	800c250 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 800c32c:	2000      	movs	r0, #0
 800c32e:	f7fc fa1f 	bl	8008770 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 800c332:	4b1a      	ldr	r3, [pc, #104]	@ (800c39c <SGP_Upkeep+0x100>)
 800c334:	2201      	movs	r2, #1
 800c336:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c338:	f002 ff20 	bl	800f17c <HAL_GetTick>
 800c33c:	0003      	movs	r3, r0
 800c33e:	22c8      	movs	r2, #200	@ 0xc8
 800c340:	0092      	lsls	r2, r2, #2
 800c342:	189a      	adds	r2, r3, r2
 800c344:	4b16      	ldr	r3, [pc, #88]	@ (800c3a0 <SGP_Upkeep+0x104>)
 800c346:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c348:	f001 f942 	bl	800d5d0 <ResetMeasurementIndicator>
  break;
 800c34c:	e013      	b.n	800c376 <SGP_Upkeep+0xda>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c34e:	4b14      	ldr	r3, [pc, #80]	@ (800c3a0 <SGP_Upkeep+0x104>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	0018      	movs	r0, r3
 800c354:	f002 fa78 	bl	800e848 <TimestampIsReached>
 800c358:	1e03      	subs	r3, r0, #0
 800c35a:	d00b      	beq.n	800c374 <SGP_Upkeep+0xd8>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c35c:	f7ff fbd8 	bl	800bb10 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c360:	4b07      	ldr	r3, [pc, #28]	@ (800c380 <SGP_Upkeep+0xe4>)
 800c362:	2200      	movs	r2, #0
 800c364:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c366:	e005      	b.n	800c374 <SGP_Upkeep+0xd8>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c368:	4b05      	ldr	r3, [pc, #20]	@ (800c380 <SGP_Upkeep+0xe4>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	701a      	strb	r2, [r3, #0]
    break;
 800c36e:	e002      	b.n	800c376 <SGP_Upkeep+0xda>
    break;
 800c370:	46c0      	nop			@ (mov r8, r8)
 800c372:	e000      	b.n	800c376 <SGP_Upkeep+0xda>
    break;
 800c374:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c376:	4b02      	ldr	r3, [pc, #8]	@ (800c380 <SGP_Upkeep+0xe4>)
 800c378:	781b      	ldrb	r3, [r3, #0]
}
 800c37a:	0018      	movs	r0, r3
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}
 800c380:	20000d78 	.word	0x20000d78
 800c384:	08025bf4 	.word	0x08025bf4
 800c388:	08025494 	.word	0x08025494
 800c38c:	08025358 	.word	0x08025358
 800c390:	20000d74 	.word	0x20000d74
 800c394:	20000cbe 	.word	0x20000cbe
 800c398:	20001c15 	.word	0x20001c15
 800c39c:	20000ca8 	.word	0x20000ca8
 800c3a0:	20000cc0 	.word	0x20000cc0

0800c3a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	0002      	movs	r2, r0
 800c3ac:	1dfb      	adds	r3, r7, #7
 800c3ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c3b0:	1dfb      	adds	r3, r7, #7
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3b6:	d809      	bhi.n	800c3cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3b8:	1dfb      	adds	r3, r7, #7
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	001a      	movs	r2, r3
 800c3be:	231f      	movs	r3, #31
 800c3c0:	401a      	ands	r2, r3
 800c3c2:	4b04      	ldr	r3, [pc, #16]	@ (800c3d4 <__NVIC_EnableIRQ+0x30>)
 800c3c4:	2101      	movs	r1, #1
 800c3c6:	4091      	lsls	r1, r2
 800c3c8:	000a      	movs	r2, r1
 800c3ca:	601a      	str	r2, [r3, #0]
  }
}
 800c3cc:	46c0      	nop			@ (mov r8, r8)
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	b002      	add	sp, #8
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	e000e100 	.word	0xe000e100

0800c3d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	0002      	movs	r2, r0
 800c3e0:	1dfb      	adds	r3, r7, #7
 800c3e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c3e4:	1dfb      	adds	r3, r7, #7
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3ea:	d810      	bhi.n	800c40e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3ec:	1dfb      	adds	r3, r7, #7
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	001a      	movs	r2, r3
 800c3f2:	231f      	movs	r3, #31
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	4908      	ldr	r1, [pc, #32]	@ (800c418 <__NVIC_DisableIRQ+0x40>)
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	409a      	lsls	r2, r3
 800c3fc:	0013      	movs	r3, r2
 800c3fe:	2280      	movs	r2, #128	@ 0x80
 800c400:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c402:	f3bf 8f4f 	dsb	sy
}
 800c406:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c408:	f3bf 8f6f 	isb	sy
}
 800c40c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c40e:	46c0      	nop			@ (mov r8, r8)
 800c410:	46bd      	mov	sp, r7
 800c412:	b002      	add	sp, #8
 800c414:	bd80      	pop	{r7, pc}
 800c416:	46c0      	nop			@ (mov r8, r8)
 800c418:	e000e100 	.word	0xe000e100

0800c41c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c41c:	b5b0      	push	{r4, r5, r7, lr}
 800c41e:	b088      	sub	sp, #32
 800c420:	af02      	add	r7, sp, #8
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	0008      	movs	r0, r1
 800c426:	0011      	movs	r1, r2
 800c428:	1cfb      	adds	r3, r7, #3
 800c42a:	1c02      	adds	r2, r0, #0
 800c42c:	701a      	strb	r2, [r3, #0]
 800c42e:	1cbb      	adds	r3, r7, #2
 800c430:	1c0a      	adds	r2, r1, #0
 800c432:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c434:	4b5b      	ldr	r3, [pc, #364]	@ (800c5a4 <getSoundData+0x188>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2201      	movs	r2, #1
 800c43c:	4053      	eors	r3, r2
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b00      	cmp	r3, #0
 800c442:	d107      	bne.n	800c454 <getSoundData+0x38>
 800c444:	4b58      	ldr	r3, [pc, #352]	@ (800c5a8 <getSoundData+0x18c>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2201      	movs	r2, #1
 800c44c:	4053      	eors	r3, r2
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b00      	cmp	r3, #0
 800c452:	d001      	beq.n	800c458 <getSoundData+0x3c>
    {
        return false;
 800c454:	2300      	movs	r3, #0
 800c456:	e0a0      	b.n	800c59a <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c458:	4b54      	ldr	r3, [pc, #336]	@ (800c5ac <getSoundData+0x190>)
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d005      	beq.n	800c46e <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c462:	4b53      	ldr	r3, [pc, #332]	@ (800c5b0 <getSoundData+0x194>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	b25b      	sxtb	r3, r3
 800c468:	0018      	movs	r0, r3
 800c46a:	f7ff ffb5 	bl	800c3d8 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c46e:	f3bf 8f4f 	dsb	sy
}
 800c472:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c474:	f3bf 8f6f 	isb	sy
}
 800c478:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c47a:	1cfb      	adds	r3, r7, #3
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d04c      	beq.n	800c51c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c482:	4b4c      	ldr	r3, [pc, #304]	@ (800c5b4 <getSoundData+0x198>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d11b      	bne.n	800c4c2 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c496:	2300      	movs	r3, #0
 800c498:	617b      	str	r3, [r7, #20]
 800c49a:	e00e      	b.n	800c4ba <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	18d3      	adds	r3, r2, r3
 800c4a2:	3302      	adds	r3, #2
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	18d3      	adds	r3, r2, r3
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	617b      	str	r3, [r7, #20]
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2b05      	cmp	r3, #5
 800c4be:	d9ed      	bls.n	800c49c <getSoundData+0x80>
 800c4c0:	e02c      	b.n	800c51c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	1c59      	adds	r1, r3, #1
 800c4c8:	4b3b      	ldr	r3, [pc, #236]	@ (800c5b8 <getSoundData+0x19c>)
 800c4ca:	681a      	ldr	r2, [r3, #0]
 800c4cc:	4b3b      	ldr	r3, [pc, #236]	@ (800c5bc <getSoundData+0x1a0>)
 800c4ce:	681c      	ldr	r4, [r3, #0]
 800c4d0:	4b38      	ldr	r3, [pc, #224]	@ (800c5b4 <getSoundData+0x198>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	9300      	str	r3, [sp, #0]
 800c4d6:	0023      	movs	r3, r4
 800c4d8:	f000 fde8 	bl	800d0ac <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c4dc:	2300      	movs	r3, #0
 800c4de:	613b      	str	r3, [r7, #16]
 800c4e0:	e019      	b.n	800c516 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	18d3      	adds	r3, r2, r3
 800c4e8:	1c98      	adds	r0, r3, #2
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c4f2:	4b33      	ldr	r3, [pc, #204]	@ (800c5c0 <getSoundData+0x1a4>)
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	0092      	lsls	r2, r2, #2
 800c4f8:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c4fa:	4b32      	ldr	r3, [pc, #200]	@ (800c5c4 <getSoundData+0x1a8>)
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	0092      	lsls	r2, r2, #2
 800c500:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c502:	4b2c      	ldr	r3, [pc, #176]	@ (800c5b4 <getSoundData+0x198>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	0013      	movs	r3, r2
 800c50a:	0022      	movs	r2, r4
 800c50c:	f000 fdce 	bl	800d0ac <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	3301      	adds	r3, #1
 800c514:	613b      	str	r3, [r7, #16]
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	2b05      	cmp	r3, #5
 800c51a:	d9e2      	bls.n	800c4e2 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c51c:	1cbb      	adds	r3, r7, #2
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d028      	beq.n	800c576 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c524:	240e      	movs	r4, #14
 800c526:	193b      	adds	r3, r7, r4
 800c528:	2200      	movs	r2, #0
 800c52a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c52c:	250d      	movs	r5, #13
 800c52e:	197b      	adds	r3, r7, r5
 800c530:	2200      	movs	r2, #0
 800c532:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c534:	4b24      	ldr	r3, [pc, #144]	@ (800c5c8 <getSoundData+0x1ac>)
 800c536:	6818      	ldr	r0, [r3, #0]
 800c538:	4924      	ldr	r1, [pc, #144]	@ (800c5cc <getSoundData+0x1b0>)
 800c53a:	197b      	adds	r3, r7, r5
 800c53c:	193a      	adds	r2, r7, r4
 800c53e:	f000 fe59 	bl	800d1f4 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c542:	193b      	adds	r3, r7, r4
 800c544:	881a      	ldrh	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	21ff      	movs	r1, #255	@ 0xff
 800c54a:	4011      	ands	r1, r2
 800c54c:	000c      	movs	r4, r1
 800c54e:	7b99      	ldrb	r1, [r3, #14]
 800c550:	2000      	movs	r0, #0
 800c552:	4001      	ands	r1, r0
 800c554:	1c08      	adds	r0, r1, #0
 800c556:	1c21      	adds	r1, r4, #0
 800c558:	4301      	orrs	r1, r0
 800c55a:	7399      	strb	r1, [r3, #14]
 800c55c:	0a12      	lsrs	r2, r2, #8
 800c55e:	b290      	uxth	r0, r2
 800c560:	7bda      	ldrb	r2, [r3, #15]
 800c562:	2100      	movs	r1, #0
 800c564:	400a      	ands	r2, r1
 800c566:	1c11      	adds	r1, r2, #0
 800c568:	1c02      	adds	r2, r0, #0
 800c56a:	430a      	orrs	r2, r1
 800c56c:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c56e:	197b      	adds	r3, r7, r5
 800c570:	781a      	ldrb	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c576:	f000 f86f 	bl	800c658 <micSettlingComplete>
 800c57a:	0003      	movs	r3, r0
 800c57c:	001a      	movs	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c582:	4b0a      	ldr	r3, [pc, #40]	@ (800c5ac <getSoundData+0x190>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	b2db      	uxtb	r3, r3
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d005      	beq.n	800c598 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c58c:	4b08      	ldr	r3, [pc, #32]	@ (800c5b0 <getSoundData+0x194>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	b25b      	sxtb	r3, r3
 800c592:	0018      	movs	r0, r3
 800c594:	f7ff ff06 	bl	800c3a4 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c598:	2301      	movs	r3, #1
}
 800c59a:	0018      	movs	r0, r3
 800c59c:	46bd      	mov	sp, r7
 800c59e:	b006      	add	sp, #24
 800c5a0:	bdb0      	pop	{r4, r5, r7, pc}
 800c5a2:	46c0      	nop			@ (mov r8, r8)
 800c5a4:	20000d7a 	.word	0x20000d7a
 800c5a8:	20000d7d 	.word	0x20000d7d
 800c5ac:	20000d7c 	.word	0x20000d7c
 800c5b0:	200017cc 	.word	0x200017cc
 800c5b4:	20001808 	.word	0x20001808
 800c5b8:	200017d0 	.word	0x200017d0
 800c5bc:	200017d4 	.word	0x200017d4
 800c5c0:	200017d8 	.word	0x200017d8
 800c5c4:	200017f0 	.word	0x200017f0
 800c5c8:	20000d84 	.word	0x20000d84
 800c5cc:	3b5c7333 	.word	0x3b5c7333

0800c5d0 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
 800c5dc:	001a      	movs	r2, r3
 800c5de:	1cfb      	adds	r3, r7, #3
 800c5e0:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c5e2:	4b09      	ldr	r3, [pc, #36]	@ (800c608 <soundInit+0x38>)
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c5e8:	4b08      	ldr	r3, [pc, #32]	@ (800c60c <soundInit+0x3c>)
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c5ee:	4b08      	ldr	r3, [pc, #32]	@ (800c610 <soundInit+0x40>)
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c5f4:	4b07      	ldr	r3, [pc, #28]	@ (800c614 <soundInit+0x44>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	569a      	ldrsb	r2, [r3, r2]
 800c5fa:	4b06      	ldr	r3, [pc, #24]	@ (800c614 <soundInit+0x44>)
 800c5fc:	701a      	strb	r2, [r3, #0]

    return true;
 800c5fe:	2301      	movs	r3, #1
}
 800c600:	0018      	movs	r0, r3
 800c602:	46bd      	mov	sp, r7
 800c604:	b004      	add	sp, #16
 800c606:	bd80      	pop	{r7, pc}
 800c608:	200017c4 	.word	0x200017c4
 800c60c:	200017c0 	.word	0x200017c0
 800c610:	200017c8 	.word	0x200017c8
 800c614:	200017cc 	.word	0x200017cc

0800c618 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c61c:	4b02      	ldr	r3, [pc, #8]	@ (800c628 <clearMaximumAmplitude+0x10>)
 800c61e:	2200      	movs	r2, #0
 800c620:	601a      	str	r2, [r3, #0]
}
 800c622:	46c0      	nop			@ (mov r8, r8)
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	20000d84 	.word	0x20000d84

0800c62c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c630:	4b08      	ldr	r3, [pc, #32]	@ (800c654 <startMicSettlingPeriod+0x28>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2200      	movs	r2, #0
 800c638:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c63a:	4b06      	ldr	r3, [pc, #24]	@ (800c654 <startMicSettlingPeriod+0x28>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	0018      	movs	r0, r3
 800c640:	f00a fb60 	bl	8016d04 <HAL_TIM_Base_Start>
 800c644:	1e03      	subs	r3, r0, #0
 800c646:	d001      	beq.n	800c64c <startMicSettlingPeriod+0x20>
    {
        return false;
 800c648:	2300      	movs	r3, #0
 800c64a:	e000      	b.n	800c64e <startMicSettlingPeriod+0x22>
    }
    return true;
 800c64c:	2301      	movs	r3, #1
}
 800c64e:	0018      	movs	r0, r3
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	200017c0 	.word	0x200017c0

0800c658 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c65e:	4b0e      	ldr	r3, [pc, #56]	@ (800c698 <micSettlingComplete+0x40>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	2201      	movs	r2, #1
 800c668:	401a      	ands	r2, r3
 800c66a:	1dfb      	adds	r3, r7, #7
 800c66c:	3a01      	subs	r2, #1
 800c66e:	4251      	negs	r1, r2
 800c670:	414a      	adcs	r2, r1
 800c672:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c674:	1dfb      	adds	r3, r7, #7
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d007      	beq.n	800c68c <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c67c:	4b06      	ldr	r3, [pc, #24]	@ (800c698 <micSettlingComplete+0x40>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	0018      	movs	r0, r3
 800c682:	f00a fb89 	bl	8016d98 <HAL_TIM_Base_Stop>
      DataReady = true;
 800c686:	4b05      	ldr	r3, [pc, #20]	@ (800c69c <micSettlingComplete+0x44>)
 800c688:	2201      	movs	r2, #1
 800c68a:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c68c:	1dfb      	adds	r3, r7, #7
 800c68e:	781b      	ldrb	r3, [r3, #0]
}
 800c690:	0018      	movs	r0, r3
 800c692:	46bd      	mov	sp, r7
 800c694:	b002      	add	sp, #8
 800c696:	bd80      	pop	{r7, pc}
 800c698:	200017c0 	.word	0x200017c0
 800c69c:	20000d79 	.word	0x20000d79

0800c6a0 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	0002      	movs	r2, r0
 800c6a8:	1dfb      	adds	r3, r7, #7
 800c6aa:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c6ac:	4b29      	ldr	r3, [pc, #164]	@ (800c754 <enableMicrophone+0xb4>)
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	1dfa      	adds	r2, r7, #7
 800c6b4:	7812      	ldrb	r2, [r2, #0]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d101      	bne.n	800c6be <enableMicrophone+0x1e>
    {
        return true;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e045      	b.n	800c74a <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c6be:	1dfb      	adds	r3, r7, #7
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d025      	beq.n	800c712 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c6c6:	f7ff ffb1 	bl	800c62c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c6ca:	4b23      	ldr	r3, [pc, #140]	@ (800c758 <enableMicrophone+0xb8>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2280      	movs	r2, #128	@ 0x80
 800c6d0:	0092      	lsls	r2, r2, #2
 800c6d2:	4922      	ldr	r1, [pc, #136]	@ (800c75c <enableMicrophone+0xbc>)
 800c6d4:	0018      	movs	r0, r3
 800c6d6:	f006 fd7f 	bl	80131d8 <HAL_I2S_Receive_DMA>
 800c6da:	1e03      	subs	r3, r0, #0
 800c6dc:	d001      	beq.n	800c6e2 <enableMicrophone+0x42>
        {
            return false;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	e033      	b.n	800c74a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c6e2:	f7ff ff99 	bl	800c618 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c6e6:	4b1e      	ldr	r3, [pc, #120]	@ (800c760 <enableMicrophone+0xc0>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c6ec:	4b1d      	ldr	r3, [pc, #116]	@ (800c764 <enableMicrophone+0xc4>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	b25b      	sxtb	r3, r3
 800c6f2:	0018      	movs	r0, r3
 800c6f4:	f7ff fe56 	bl	800c3a4 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c6f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c768 <enableMicrophone+0xc8>)
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c6fe:	4b15      	ldr	r3, [pc, #84]	@ (800c754 <enableMicrophone+0xb4>)
 800c700:	2201      	movs	r2, #1
 800c702:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c704:	4b19      	ldr	r3, [pc, #100]	@ (800c76c <enableMicrophone+0xcc>)
 800c706:	2200      	movs	r2, #0
 800c708:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c70a:	4b19      	ldr	r3, [pc, #100]	@ (800c770 <enableMicrophone+0xd0>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	701a      	strb	r2, [r3, #0]
 800c710:	e01a      	b.n	800c748 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c712:	4b14      	ldr	r3, [pc, #80]	@ (800c764 <enableMicrophone+0xc4>)
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	b25b      	sxtb	r3, r3
 800c718:	0018      	movs	r0, r3
 800c71a:	f7ff fe5d 	bl	800c3d8 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c71e:	4b12      	ldr	r3, [pc, #72]	@ (800c768 <enableMicrophone+0xc8>)
 800c720:	2200      	movs	r2, #0
 800c722:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c724:	4b11      	ldr	r3, [pc, #68]	@ (800c76c <enableMicrophone+0xcc>)
 800c726:	2200      	movs	r2, #0
 800c728:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c72a:	4b11      	ldr	r3, [pc, #68]	@ (800c770 <enableMicrophone+0xd0>)
 800c72c:	2200      	movs	r2, #0
 800c72e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c730:	4b09      	ldr	r3, [pc, #36]	@ (800c758 <enableMicrophone+0xb8>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	0018      	movs	r0, r3
 800c736:	f006 fe11 	bl	801335c <HAL_I2S_DMAStop>
 800c73a:	1e03      	subs	r3, r0, #0
 800c73c:	d001      	beq.n	800c742 <enableMicrophone+0xa2>
        {
            return false;
 800c73e:	2300      	movs	r3, #0
 800c740:	e003      	b.n	800c74a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c742:	4b04      	ldr	r3, [pc, #16]	@ (800c754 <enableMicrophone+0xb4>)
 800c744:	2200      	movs	r2, #0
 800c746:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c748:	2301      	movs	r3, #1
}
 800c74a:	0018      	movs	r0, r3
 800c74c:	46bd      	mov	sp, r7
 800c74e:	b002      	add	sp, #8
 800c750:	bd80      	pop	{r7, pc}
 800c752:	46c0      	nop			@ (mov r8, r8)
 800c754:	20000d7a 	.word	0x20000d7a
 800c758:	200017c4 	.word	0x200017c4
 800c75c:	20000dc0 	.word	0x20000dc0
 800c760:	20000d80 	.word	0x20000d80
 800c764:	200017cc 	.word	0x200017cc
 800c768:	20000d7c 	.word	0x20000d7c
 800c76c:	20000d7b 	.word	0x20000d7b
 800c770:	20000d7d 	.word	0x20000d7d

0800c774 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c778:	4b0c      	ldr	r3, [pc, #48]	@ (800c7ac <startSPLcalculation+0x38>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	2201      	movs	r2, #1
 800c780:	4053      	eors	r3, r2
 800c782:	b2db      	uxtb	r3, r3
 800c784:	2b00      	cmp	r3, #0
 800c786:	d001      	beq.n	800c78c <startSPLcalculation+0x18>
    {
        return false;
 800c788:	2300      	movs	r3, #0
 800c78a:	e00c      	b.n	800c7a6 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c78c:	4b08      	ldr	r3, [pc, #32]	@ (800c7b0 <startSPLcalculation+0x3c>)
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <startSPLcalculation+0x26>
    {
        return true;
 800c796:	2301      	movs	r3, #1
 800c798:	e005      	b.n	800c7a6 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c79a:	f000 fb63 	bl	800ce64 <resetSPLstate>
    SPLcalcEnabled = true;
 800c79e:	4b04      	ldr	r3, [pc, #16]	@ (800c7b0 <startSPLcalculation+0x3c>)
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	701a      	strb	r2, [r3, #0]
    return true;
 800c7a4:	2301      	movs	r3, #1
}
 800c7a6:	0018      	movs	r0, r3
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	20000d7a 	.word	0x20000d7a
 800c7b0:	20000d7b 	.word	0x20000d7b

0800c7b4 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c7bc:	4b05      	ldr	r3, [pc, #20]	@ (800c7d4 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d102      	bne.n	800c7cc <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	f000 f81a 	bl	800c800 <processHalfDMAbuffer>
  }
}
 800c7cc:	46c0      	nop			@ (mov r8, r8)
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	b002      	add	sp, #8
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	200017c4 	.word	0x200017c4

0800c7d8 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c7e0:	4b06      	ldr	r3, [pc, #24]	@ (800c7fc <HAL_I2S_RxCpltCallback+0x24>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d104      	bne.n	800c7f4 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c7ea:	2380      	movs	r3, #128	@ 0x80
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	0018      	movs	r0, r3
 800c7f0:	f000 f806 	bl	800c800 <processHalfDMAbuffer>
  }
}
 800c7f4:	46c0      	nop			@ (mov r8, r8)
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	b002      	add	sp, #8
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	200017c4 	.word	0x200017c4

0800c800 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	005a      	lsls	r2, r3, #1
 800c80c:	4b15      	ldr	r3, [pc, #84]	@ (800c864 <processHalfDMAbuffer+0x64>)
 800c80e:	18d3      	adds	r3, r2, r3
 800c810:	4a15      	ldr	r2, [pc, #84]	@ (800c868 <processHalfDMAbuffer+0x68>)
 800c812:	2180      	movs	r1, #128	@ 0x80
 800c814:	0089      	lsls	r1, r1, #2
 800c816:	0018      	movs	r0, r3
 800c818:	f000 fd35 	bl	800d286 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c81c:	4b13      	ldr	r3, [pc, #76]	@ (800c86c <processHalfDMAbuffer+0x6c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	425a      	negs	r2, r3
 800c822:	4153      	adcs	r3, r2
 800c824:	b2da      	uxtb	r2, r3
 800c826:	4b11      	ldr	r3, [pc, #68]	@ (800c86c <processHalfDMAbuffer+0x6c>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2109      	movs	r1, #9
 800c82c:	4299      	cmp	r1, r3
 800c82e:	419b      	sbcs	r3, r3
 800c830:	425b      	negs	r3, r3
 800c832:	b2db      	uxtb	r3, r3
 800c834:	480c      	ldr	r0, [pc, #48]	@ (800c868 <processHalfDMAbuffer+0x68>)
 800c836:	2180      	movs	r1, #128	@ 0x80
 800c838:	f000 fb46 	bl	800cec8 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c83c:	4b0b      	ldr	r3, [pc, #44]	@ (800c86c <processHalfDMAbuffer+0x6c>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b09      	cmp	r3, #9
 800c842:	d804      	bhi.n	800c84e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c844:	4b09      	ldr	r3, [pc, #36]	@ (800c86c <processHalfDMAbuffer+0x6c>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	1c5a      	adds	r2, r3, #1
 800c84a:	4b08      	ldr	r3, [pc, #32]	@ (800c86c <processHalfDMAbuffer+0x6c>)
 800c84c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c84e:	4b08      	ldr	r3, [pc, #32]	@ (800c870 <processHalfDMAbuffer+0x70>)
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	b2db      	uxtb	r3, r3
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c858:	f000 f826 	bl	800c8a8 <calculateSPLQ31>
    }
}
 800c85c:	46c0      	nop			@ (mov r8, r8)
 800c85e:	46bd      	mov	sp, r7
 800c860:	b002      	add	sp, #8
 800c862:	bd80      	pop	{r7, pc}
 800c864:	20000dc0 	.word	0x20000dc0
 800c868:	200015c0 	.word	0x200015c0
 800c86c:	20000d80 	.word	0x20000d80
 800c870:	20000d7b 	.word	0x20000d7b

0800c874 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c87c:	4b07      	ldr	r3, [pc, #28]	@ (800c89c <HAL_I2S_ErrorCallback+0x28>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	687a      	ldr	r2, [r7, #4]
 800c882:	429a      	cmp	r2, r3
 800c884:	d106      	bne.n	800c894 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c886:	4a06      	ldr	r2, [pc, #24]	@ (800c8a0 <HAL_I2S_ErrorCallback+0x2c>)
 800c888:	239e      	movs	r3, #158	@ 0x9e
 800c88a:	0059      	lsls	r1, r3, #1
 800c88c:	4b05      	ldr	r3, [pc, #20]	@ (800c8a4 <HAL_I2S_ErrorCallback+0x30>)
 800c88e:	0018      	movs	r0, r3
 800c890:	f002 f8e8 	bl	800ea64 <errorHandler>
  }
}
 800c894:	46c0      	nop			@ (mov r8, r8)
 800c896:	46bd      	mov	sp, r7
 800c898:	b002      	add	sp, #8
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	200017c4 	.word	0x200017c4
 800c8a0:	080254bc 	.word	0x080254bc
 800c8a4:	08025ce4 	.word	0x08025ce4

0800c8a8 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8aa:	b0b3      	sub	sp, #204	@ 0xcc
 800c8ac:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c8ae:	4ae2      	ldr	r2, [pc, #904]	@ (800cc38 <calculateSPLQ31+0x390>)
 800c8b0:	2338      	movs	r3, #56	@ 0x38
 800c8b2:	2030      	movs	r0, #48	@ 0x30
 800c8b4:	181b      	adds	r3, r3, r0
 800c8b6:	19d9      	adds	r1, r3, r7
 800c8b8:	2334      	movs	r3, #52	@ 0x34
 800c8ba:	181b      	adds	r3, r3, r0
 800c8bc:	19d8      	adds	r0, r3, r7
 800c8be:	2380      	movs	r3, #128	@ 0x80
 800c8c0:	f000 fc36 	bl	800d130 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c8c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	da00      	bge.n	800c8cc <calculateSPLQ31+0x24>
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	105b      	asrs	r3, r3, #1
 800c8ce:	001a      	movs	r2, r3
 800c8d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	da00      	bge.n	800c8d8 <calculateSPLQ31+0x30>
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	105b      	asrs	r3, r3, #1
 800c8da:	18d3      	adds	r3, r2, r3
 800c8dc:	2188      	movs	r1, #136	@ 0x88
 800c8de:	187a      	adds	r2, r7, r1
 800c8e0:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c8e2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c8e4:	187b      	adds	r3, r7, r1
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	1ad3      	subs	r3, r2, r3
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	2284      	movs	r2, #132	@ 0x84
 800c8ee:	18b9      	adds	r1, r7, r2
 800c8f0:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c8f2:	18bb      	adds	r3, r7, r2
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4ad1      	ldr	r2, [pc, #836]	@ (800cc3c <calculateSPLQ31+0x394>)
 800c8f8:	0019      	movs	r1, r3
 800c8fa:	0010      	movs	r0, r2
 800c8fc:	f000 fc58 	bl	800d1b0 <getPo2factor>
 800c900:	0003      	movs	r3, r0
 800c902:	2280      	movs	r2, #128	@ 0x80
 800c904:	18ba      	adds	r2, r7, r2
 800c906:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c908:	2300      	movs	r3, #0
 800c90a:	2284      	movs	r2, #132	@ 0x84
 800c90c:	2130      	movs	r1, #48	@ 0x30
 800c90e:	1852      	adds	r2, r2, r1
 800c910:	19d2      	adds	r2, r2, r7
 800c912:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c914:	2300      	movs	r3, #0
 800c916:	2280      	movs	r2, #128	@ 0x80
 800c918:	1852      	adds	r2, r2, r1
 800c91a:	19d2      	adds	r2, r2, r7
 800c91c:	6013      	str	r3, [r2, #0]
 800c91e:	e032      	b.n	800c986 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c920:	4ac5      	ldr	r2, [pc, #788]	@ (800cc38 <calculateSPLQ31+0x390>)
 800c922:	2680      	movs	r6, #128	@ 0x80
 800c924:	2330      	movs	r3, #48	@ 0x30
 800c926:	18f1      	adds	r1, r6, r3
 800c928:	19cb      	adds	r3, r1, r7
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	589a      	ldr	r2, [r3, r2]
 800c930:	2188      	movs	r1, #136	@ 0x88
 800c932:	1879      	adds	r1, r7, r1
 800c934:	680b      	ldr	r3, [r1, #0]
 800c936:	1ad2      	subs	r2, r2, r3
 800c938:	2180      	movs	r1, #128	@ 0x80
 800c93a:	1879      	adds	r1, r7, r1
 800c93c:	680b      	ldr	r3, [r1, #0]
 800c93e:	409a      	lsls	r2, r3
 800c940:	0011      	movs	r1, r2
 800c942:	4abf      	ldr	r2, [pc, #764]	@ (800cc40 <calculateSPLQ31+0x398>)
 800c944:	2084      	movs	r0, #132	@ 0x84
 800c946:	2330      	movs	r3, #48	@ 0x30
 800c948:	18c3      	adds	r3, r0, r3
 800c94a:	19db      	adds	r3, r3, r7
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c952:	2230      	movs	r2, #48	@ 0x30
 800c954:	1883      	adds	r3, r0, r2
 800c956:	19db      	adds	r3, r3, r7
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3301      	adds	r3, #1
 800c95c:	49b8      	ldr	r1, [pc, #736]	@ (800cc40 <calculateSPLQ31+0x398>)
 800c95e:	009a      	lsls	r2, r3, #2
 800c960:	2300      	movs	r3, #0
 800c962:	5053      	str	r3, [r2, r1]
        count += 2;
 800c964:	2230      	movs	r2, #48	@ 0x30
 800c966:	1883      	adds	r3, r0, r2
 800c968:	19db      	adds	r3, r3, r7
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	3302      	adds	r3, #2
 800c96e:	0011      	movs	r1, r2
 800c970:	1882      	adds	r2, r0, r2
 800c972:	19d2      	adds	r2, r2, r7
 800c974:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c976:	000a      	movs	r2, r1
 800c978:	18b3      	adds	r3, r6, r2
 800c97a:	19db      	adds	r3, r3, r7
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	3301      	adds	r3, #1
 800c980:	18b2      	adds	r2, r6, r2
 800c982:	19d2      	adds	r2, r2, r7
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	2380      	movs	r3, #128	@ 0x80
 800c988:	2630      	movs	r6, #48	@ 0x30
 800c98a:	199b      	adds	r3, r3, r6
 800c98c:	19db      	adds	r3, r3, r7
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b7f      	cmp	r3, #127	@ 0x7f
 800c992:	d9c5      	bls.n	800c920 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c994:	4bab      	ldr	r3, [pc, #684]	@ (800cc44 <calculateSPLQ31+0x39c>)
 800c996:	6818      	ldr	r0, [r3, #0]
 800c998:	49a9      	ldr	r1, [pc, #676]	@ (800cc40 <calculateSPLQ31+0x398>)
 800c99a:	2301      	movs	r3, #1
 800c99c:	2200      	movs	r2, #0
 800c99e:	f011 fa77 	bl	801de90 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c9a2:	4aa9      	ldr	r2, [pc, #676]	@ (800cc48 <calculateSPLQ31+0x3a0>)
 800c9a4:	2338      	movs	r3, #56	@ 0x38
 800c9a6:	199b      	adds	r3, r3, r6
 800c9a8:	19d9      	adds	r1, r3, r7
 800c9aa:	2334      	movs	r3, #52	@ 0x34
 800c9ac:	199b      	adds	r3, r3, r6
 800c9ae:	19d8      	adds	r0, r3, r7
 800c9b0:	237e      	movs	r3, #126	@ 0x7e
 800c9b2:	f000 fbbd 	bl	800d130 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c9b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c9b8:	2380      	movs	r3, #128	@ 0x80
 800c9ba:	061b      	lsls	r3, r3, #24
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d101      	bne.n	800c9c4 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c9c0:	4b9e      	ldr	r3, [pc, #632]	@ (800cc3c <calculateSPLQ31+0x394>)
 800c9c2:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c9c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c9c6:	2380      	movs	r3, #128	@ 0x80
 800c9c8:	061b      	lsls	r3, r3, #24
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d101      	bne.n	800c9d2 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c9ce:	4b9b      	ldr	r3, [pc, #620]	@ (800cc3c <calculateSPLQ31+0x394>)
 800c9d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c9d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9d4:	17da      	asrs	r2, r3, #31
 800c9d6:	189b      	adds	r3, r3, r2
 800c9d8:	4053      	eors	r3, r2
 800c9da:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c9dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9de:	17da      	asrs	r2, r3, #31
 800c9e0:	189b      	adds	r3, r3, r2
 800c9e2:	4053      	eors	r3, r2
 800c9e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c9e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c9e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	dd01      	ble.n	800c9f2 <calculateSPLQ31+0x14a>
    {
        max = min;
 800c9ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c9f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c9f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c9fa:	4a90      	ldr	r2, [pc, #576]	@ (800cc3c <calculateSPLQ31+0x394>)
 800c9fc:	0019      	movs	r1, r3
 800c9fe:	0010      	movs	r0, r2
 800ca00:	f000 fbd6 	bl	800d1b0 <getPo2factor>
 800ca04:	0003      	movs	r3, r0
 800ca06:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800ca08:	2302      	movs	r3, #2
 800ca0a:	22ac      	movs	r2, #172	@ 0xac
 800ca0c:	18ba      	adds	r2, r7, r2
 800ca0e:	6013      	str	r3, [r2, #0]
 800ca10:	e012      	b.n	800ca38 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800ca12:	4a8b      	ldr	r2, [pc, #556]	@ (800cc40 <calculateSPLQ31+0x398>)
 800ca14:	20ac      	movs	r0, #172	@ 0xac
 800ca16:	183b      	adds	r3, r7, r0
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	589a      	ldr	r2, [r3, r2]
 800ca1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca20:	409a      	lsls	r2, r3
 800ca22:	0011      	movs	r1, r2
 800ca24:	4a86      	ldr	r2, [pc, #536]	@ (800cc40 <calculateSPLQ31+0x398>)
 800ca26:	183b      	adds	r3, r7, r0
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800ca2e:	183b      	adds	r3, r7, r0
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	3301      	adds	r3, #1
 800ca34:	183a      	adds	r2, r7, r0
 800ca36:	6013      	str	r3, [r2, #0]
 800ca38:	23ac      	movs	r3, #172	@ 0xac
 800ca3a:	18fb      	adds	r3, r7, r3
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca40:	d9e7      	bls.n	800ca12 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800ca42:	4b7d      	ldr	r3, [pc, #500]	@ (800cc38 <calculateSPLQ31+0x390>)
 800ca44:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800ca46:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800ca48:	4b7d      	ldr	r3, [pc, #500]	@ (800cc40 <calculateSPLQ31+0x398>)
 800ca4a:	2240      	movs	r2, #64	@ 0x40
 800ca4c:	0018      	movs	r0, r3
 800ca4e:	f011 ffc9 	bl	801e9e4 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800ca52:	2330      	movs	r3, #48	@ 0x30
 800ca54:	18fb      	adds	r3, r7, r3
 800ca56:	0018      	movs	r0, r3
 800ca58:	2330      	movs	r3, #48	@ 0x30
 800ca5a:	001a      	movs	r2, r3
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	f013 fde5 	bl	802062c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800ca62:	2200      	movs	r2, #0
 800ca64:	2300      	movs	r3, #0
 800ca66:	21a0      	movs	r1, #160	@ 0xa0
 800ca68:	1879      	adds	r1, r7, r1
 800ca6a:	600a      	str	r2, [r1, #0]
 800ca6c:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800ca6e:	2301      	movs	r3, #1
 800ca70:	229c      	movs	r2, #156	@ 0x9c
 800ca72:	18ba      	adds	r2, r7, r2
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	e05b      	b.n	800cb30 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800ca78:	269c      	movs	r6, #156	@ 0x9c
 800ca7a:	19bb      	adds	r3, r7, r6
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	009a      	lsls	r2, r3, #2
 800ca80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca82:	189b      	adds	r3, r3, r2
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	613b      	str	r3, [r7, #16]
 800ca88:	17db      	asrs	r3, r3, #31
 800ca8a:	617b      	str	r3, [r7, #20]
 800ca8c:	4b6f      	ldr	r3, [pc, #444]	@ (800cc4c <calculateSPLQ31+0x3a4>)
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	19bb      	adds	r3, r7, r6
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	18d3      	adds	r3, r2, r3
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	60bb      	str	r3, [r7, #8]
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6938      	ldr	r0, [r7, #16]
 800caa6:	6979      	ldr	r1, [r7, #20]
 800caa8:	f7f3 fd8a 	bl	80005c0 <__aeabi_lmul>
 800caac:	0002      	movs	r2, r0
 800caae:	000b      	movs	r3, r1
 800cab0:	0010      	movs	r0, r2
 800cab2:	0019      	movs	r1, r3
 800cab4:	23a0      	movs	r3, #160	@ 0xa0
 800cab6:	18fa      	adds	r2, r7, r3
 800cab8:	6853      	ldr	r3, [r2, #4]
 800caba:	6812      	ldr	r2, [r2, #0]
 800cabc:	1812      	adds	r2, r2, r0
 800cabe:	414b      	adcs	r3, r1
 800cac0:	21a0      	movs	r1, #160	@ 0xa0
 800cac2:	1879      	adds	r1, r7, r1
 800cac4:	600a      	str	r2, [r1, #0]
 800cac6:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800cac8:	4b61      	ldr	r3, [pc, #388]	@ (800cc50 <calculateSPLQ31+0x3a8>)
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	19bb      	adds	r3, r7, r6
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	18d3      	adds	r3, r2, r3
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2b06      	cmp	r3, #6
 800cad6:	d025      	beq.n	800cb24 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800cad8:	4b5d      	ldr	r3, [pc, #372]	@ (800cc50 <calculateSPLQ31+0x3a8>)
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	19bb      	adds	r3, r7, r6
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	18d3      	adds	r3, r2, r3
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2230      	movs	r2, #48	@ 0x30
 800cae6:	18ba      	adds	r2, r7, r2
 800cae8:	00db      	lsls	r3, r3, #3
 800caea:	18d3      	adds	r3, r2, r3
 800caec:	6818      	ldr	r0, [r3, #0]
 800caee:	6859      	ldr	r1, [r3, #4]
 800caf0:	19bb      	adds	r3, r7, r6
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	009a      	lsls	r2, r3, #2
 800caf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800caf8:	189b      	adds	r3, r3, r2
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	603b      	str	r3, [r7, #0]
 800cafe:	17db      	asrs	r3, r3, #31
 800cb00:	607b      	str	r3, [r7, #4]
 800cb02:	4b53      	ldr	r3, [pc, #332]	@ (800cc50 <calculateSPLQ31+0x3a8>)
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	19be      	adds	r6, r7, r6
 800cb08:	6833      	ldr	r3, [r6, #0]
 800cb0a:	18d3      	adds	r3, r2, r3
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	001e      	movs	r6, r3
 800cb10:	683a      	ldr	r2, [r7, #0]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	1880      	adds	r0, r0, r2
 800cb16:	4159      	adcs	r1, r3
 800cb18:	2330      	movs	r3, #48	@ 0x30
 800cb1a:	18fa      	adds	r2, r7, r3
 800cb1c:	00f3      	lsls	r3, r6, #3
 800cb1e:	18d3      	adds	r3, r2, r3
 800cb20:	6018      	str	r0, [r3, #0]
 800cb22:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800cb24:	229c      	movs	r2, #156	@ 0x9c
 800cb26:	18bb      	adds	r3, r7, r2
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	18ba      	adds	r2, r7, r2
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	239c      	movs	r3, #156	@ 0x9c
 800cb32:	18fb      	adds	r3, r7, r3
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b3f      	cmp	r3, #63	@ 0x3f
 800cb38:	d99e      	bls.n	800ca78 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800cb3a:	2380      	movs	r3, #128	@ 0x80
 800cb3c:	18fb      	adds	r3, r7, r3
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	001a      	movs	r2, r3
 800cb44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb46:	005b      	lsls	r3, r3, #1
 800cb48:	18d3      	adds	r3, r2, r3
 800cb4a:	3b22      	subs	r3, #34	@ 0x22
 800cb4c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800cb4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb50:	17da      	asrs	r2, r3, #31
 800cb52:	189b      	adds	r3, r3, r2
 800cb54:	4053      	eors	r3, r2
 800cb56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800cb58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	da62      	bge.n	800cc24 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800cb5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb60:	3b20      	subs	r3, #32
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	db05      	blt.n	800cb72 <calculateSPLQ31+0x2ca>
 800cb66:	22a0      	movs	r2, #160	@ 0xa0
 800cb68:	18ba      	adds	r2, r7, r2
 800cb6a:	6812      	ldr	r2, [r2, #0]
 800cb6c:	409a      	lsls	r2, r3
 800cb6e:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb70:	e010      	b.n	800cb94 <calculateSPLQ31+0x2ec>
 800cb72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb74:	2220      	movs	r2, #32
 800cb76:	1ad3      	subs	r3, r2, r3
 800cb78:	22a0      	movs	r2, #160	@ 0xa0
 800cb7a:	18ba      	adds	r2, r7, r2
 800cb7c:	6812      	ldr	r2, [r2, #0]
 800cb7e:	40da      	lsrs	r2, r3
 800cb80:	0013      	movs	r3, r2
 800cb82:	22a4      	movs	r2, #164	@ 0xa4
 800cb84:	18ba      	adds	r2, r7, r2
 800cb86:	6811      	ldr	r1, [r2, #0]
 800cb88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cb8a:	4091      	lsls	r1, r2
 800cb8c:	6279      	str	r1, [r7, #36]	@ 0x24
 800cb8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb90:	431a      	orrs	r2, r3
 800cb92:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb94:	21a0      	movs	r1, #160	@ 0xa0
 800cb96:	187b      	adds	r3, r7, r1
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb9c:	409a      	lsls	r2, r3
 800cb9e:	623a      	str	r2, [r7, #32]
 800cba0:	6a3b      	ldr	r3, [r7, #32]
 800cba2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800cba4:	187a      	adds	r2, r7, r1
 800cba6:	6013      	str	r3, [r2, #0]
 800cba8:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cbaa:	2300      	movs	r3, #0
 800cbac:	2298      	movs	r2, #152	@ 0x98
 800cbae:	18ba      	adds	r2, r7, r2
 800cbb0:	6013      	str	r3, [r2, #0]
 800cbb2:	e031      	b.n	800cc18 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800cbb4:	2330      	movs	r3, #48	@ 0x30
 800cbb6:	18fa      	adds	r2, r7, r3
 800cbb8:	2398      	movs	r3, #152	@ 0x98
 800cbba:	18fb      	adds	r3, r7, r3
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	18d3      	adds	r3, r2, r3
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cbc8:	3920      	subs	r1, #32
 800cbca:	2900      	cmp	r1, #0
 800cbcc:	db03      	blt.n	800cbd6 <calculateSPLQ31+0x32e>
 800cbce:	0010      	movs	r0, r2
 800cbd0:	4088      	lsls	r0, r1
 800cbd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cbd4:	e00c      	b.n	800cbf0 <calculateSPLQ31+0x348>
 800cbd6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cbd8:	2020      	movs	r0, #32
 800cbda:	1a41      	subs	r1, r0, r1
 800cbdc:	0010      	movs	r0, r2
 800cbde:	40c8      	lsrs	r0, r1
 800cbe0:	0001      	movs	r1, r0
 800cbe2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cbe4:	001c      	movs	r4, r3
 800cbe6:	4084      	lsls	r4, r0
 800cbe8:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800cbea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cbec:	4308      	orrs	r0, r1
 800cbee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cbf0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800cbf2:	0013      	movs	r3, r2
 800cbf4:	408b      	lsls	r3, r1
 800cbf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cbf8:	2330      	movs	r3, #48	@ 0x30
 800cbfa:	18fa      	adds	r2, r7, r3
 800cbfc:	2098      	movs	r0, #152	@ 0x98
 800cbfe:	183b      	adds	r3, r7, r0
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	18d3      	adds	r3, r2, r3
 800cc06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc0a:	6019      	str	r1, [r3, #0]
 800cc0c:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cc0e:	183b      	adds	r3, r7, r0
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	3301      	adds	r3, #1
 800cc14:	183a      	adds	r2, r7, r0
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	2398      	movs	r3, #152	@ 0x98
 800cc1a:	18fb      	adds	r3, r7, r3
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b05      	cmp	r3, #5
 800cc20:	d9c8      	bls.n	800cbb4 <calculateSPLQ31+0x30c>
 800cc22:	e06b      	b.n	800ccfc <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800cc24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc26:	3b20      	subs	r3, #32
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	db13      	blt.n	800cc54 <calculateSPLQ31+0x3ac>
 800cc2c:	22a4      	movs	r2, #164	@ 0xa4
 800cc2e:	18ba      	adds	r2, r7, r2
 800cc30:	6812      	ldr	r2, [r2, #0]
 800cc32:	40da      	lsrs	r2, r3
 800cc34:	61ba      	str	r2, [r7, #24]
 800cc36:	e01e      	b.n	800cc76 <calculateSPLQ31+0x3ce>
 800cc38:	200015c0 	.word	0x200015c0
 800cc3c:	7fffffff 	.word	0x7fffffff
 800cc40:	2000180c 	.word	0x2000180c
 800cc44:	200000b8 	.word	0x200000b8
 800cc48:	20001814 	.word	0x20001814
 800cc4c:	200000bc 	.word	0x200000bc
 800cc50:	200000c8 	.word	0x200000c8
 800cc54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc56:	2220      	movs	r2, #32
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	22a4      	movs	r2, #164	@ 0xa4
 800cc5c:	18ba      	adds	r2, r7, r2
 800cc5e:	6812      	ldr	r2, [r2, #0]
 800cc60:	409a      	lsls	r2, r3
 800cc62:	0013      	movs	r3, r2
 800cc64:	22a0      	movs	r2, #160	@ 0xa0
 800cc66:	18ba      	adds	r2, r7, r2
 800cc68:	6811      	ldr	r1, [r2, #0]
 800cc6a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc6c:	40d1      	lsrs	r1, r2
 800cc6e:	61b9      	str	r1, [r7, #24]
 800cc70:	69ba      	ldr	r2, [r7, #24]
 800cc72:	431a      	orrs	r2, r3
 800cc74:	61ba      	str	r2, [r7, #24]
 800cc76:	23a4      	movs	r3, #164	@ 0xa4
 800cc78:	18fb      	adds	r3, r7, r3
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc7e:	40da      	lsrs	r2, r3
 800cc80:	61fa      	str	r2, [r7, #28]
 800cc82:	69ba      	ldr	r2, [r7, #24]
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	21a0      	movs	r1, #160	@ 0xa0
 800cc88:	1879      	adds	r1, r7, r1
 800cc8a:	600a      	str	r2, [r1, #0]
 800cc8c:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2294      	movs	r2, #148	@ 0x94
 800cc92:	18ba      	adds	r2, r7, r2
 800cc94:	6013      	str	r3, [r2, #0]
 800cc96:	e02c      	b.n	800ccf2 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800cc98:	2330      	movs	r3, #48	@ 0x30
 800cc9a:	18fa      	adds	r2, r7, r3
 800cc9c:	2394      	movs	r3, #148	@ 0x94
 800cc9e:	18fb      	adds	r3, r7, r3
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	18d3      	adds	r3, r2, r3
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ccac:	3920      	subs	r1, #32
 800ccae:	2900      	cmp	r1, #0
 800ccb0:	db03      	blt.n	800ccba <calculateSPLQ31+0x412>
 800ccb2:	0018      	movs	r0, r3
 800ccb4:	40c8      	lsrs	r0, r1
 800ccb6:	0004      	movs	r4, r0
 800ccb8:	e00a      	b.n	800ccd0 <calculateSPLQ31+0x428>
 800ccba:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ccbc:	2020      	movs	r0, #32
 800ccbe:	1a41      	subs	r1, r0, r1
 800ccc0:	0018      	movs	r0, r3
 800ccc2:	4088      	lsls	r0, r1
 800ccc4:	0001      	movs	r1, r0
 800ccc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ccc8:	0016      	movs	r6, r2
 800ccca:	40c6      	lsrs	r6, r0
 800cccc:	0034      	movs	r4, r6
 800ccce:	430c      	orrs	r4, r1
 800ccd0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ccd2:	40cb      	lsrs	r3, r1
 800ccd4:	001d      	movs	r5, r3
 800ccd6:	2330      	movs	r3, #48	@ 0x30
 800ccd8:	18fa      	adds	r2, r7, r3
 800ccda:	2194      	movs	r1, #148	@ 0x94
 800ccdc:	187b      	adds	r3, r7, r1
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	18d3      	adds	r3, r2, r3
 800cce4:	601c      	str	r4, [r3, #0]
 800cce6:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cce8:	187b      	adds	r3, r7, r1
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	3301      	adds	r3, #1
 800ccee:	187a      	adds	r2, r7, r1
 800ccf0:	6013      	str	r3, [r2, #0]
 800ccf2:	2394      	movs	r3, #148	@ 0x94
 800ccf4:	18fb      	adds	r3, r7, r3
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b05      	cmp	r3, #5
 800ccfa:	d9cd      	bls.n	800cc98 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800ccfc:	230f      	movs	r3, #15
 800ccfe:	425d      	negs	r5, r3
 800cd00:	2305      	movs	r3, #5
 800cd02:	425e      	negs	r6, r3
 800cd04:	4b4a      	ldr	r3, [pc, #296]	@ (800ce30 <calculateSPLQ31+0x588>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	4b4a      	ldr	r3, [pc, #296]	@ (800ce34 <calculateSPLQ31+0x58c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	21a0      	movs	r1, #160	@ 0xa0
 800cd12:	1879      	adds	r1, r7, r1
 800cd14:	6808      	ldr	r0, [r1, #0]
 800cd16:	6849      	ldr	r1, [r1, #4]
 800cd18:	4c47      	ldr	r4, [pc, #284]	@ (800ce38 <calculateSPLQ31+0x590>)
 800cd1a:	9403      	str	r4, [sp, #12]
 800cd1c:	4c47      	ldr	r4, [pc, #284]	@ (800ce3c <calculateSPLQ31+0x594>)
 800cd1e:	9402      	str	r4, [sp, #8]
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	9200      	str	r2, [sp, #0]
 800cd24:	0033      	movs	r3, r6
 800cd26:	002a      	movs	r2, r5
 800cd28:	f000 fa86 	bl	800d238 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	2290      	movs	r2, #144	@ 0x90
 800cd30:	18ba      	adds	r2, r7, r2
 800cd32:	6013      	str	r3, [r2, #0]
 800cd34:	e026      	b.n	800cd84 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cd36:	2330      	movs	r3, #48	@ 0x30
 800cd38:	18fa      	adds	r2, r7, r3
 800cd3a:	2490      	movs	r4, #144	@ 0x90
 800cd3c:	193b      	adds	r3, r7, r4
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	18d3      	adds	r3, r2, r3
 800cd44:	6818      	ldr	r0, [r3, #0]
 800cd46:	6859      	ldr	r1, [r3, #4]
 800cd48:	230f      	movs	r3, #15
 800cd4a:	425d      	negs	r5, r3
 800cd4c:	2305      	movs	r3, #5
 800cd4e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800cd50:	193b      	adds	r3, r7, r4
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	009a      	lsls	r2, r3, #2
 800cd56:	4b3a      	ldr	r3, [pc, #232]	@ (800ce40 <calculateSPLQ31+0x598>)
 800cd58:	18d3      	adds	r3, r2, r3
 800cd5a:	193a      	adds	r2, r7, r4
 800cd5c:	6812      	ldr	r2, [r2, #0]
 800cd5e:	0094      	lsls	r4, r2, #2
 800cd60:	4a38      	ldr	r2, [pc, #224]	@ (800ce44 <calculateSPLQ31+0x59c>)
 800cd62:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cd64:	9203      	str	r2, [sp, #12]
 800cd66:	9302      	str	r3, [sp, #8]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	9301      	str	r3, [sp, #4]
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	0033      	movs	r3, r6
 800cd72:	002a      	movs	r2, r5
 800cd74:	f000 fa60 	bl	800d238 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cd78:	2490      	movs	r4, #144	@ 0x90
 800cd7a:	193b      	adds	r3, r7, r4
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	193a      	adds	r2, r7, r4
 800cd82:	6013      	str	r3, [r2, #0]
 800cd84:	2390      	movs	r3, #144	@ 0x90
 800cd86:	18fb      	adds	r3, r7, r3
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2b05      	cmp	r3, #5
 800cd8c:	d9d3      	bls.n	800cd36 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800cd8e:	4b2b      	ldr	r3, [pc, #172]	@ (800ce3c <calculateSPLQ31+0x594>)
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	4b2d      	ldr	r3, [pc, #180]	@ (800ce48 <calculateSPLQ31+0x5a0>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	18d2      	adds	r2, r2, r3
 800cd98:	4b2b      	ldr	r3, [pc, #172]	@ (800ce48 <calculateSPLQ31+0x5a0>)
 800cd9a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800cd9c:	4b26      	ldr	r3, [pc, #152]	@ (800ce38 <calculateSPLQ31+0x590>)
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	4b2a      	ldr	r3, [pc, #168]	@ (800ce4c <calculateSPLQ31+0x5a4>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	18d2      	adds	r2, r2, r3
 800cda6:	4b29      	ldr	r3, [pc, #164]	@ (800ce4c <calculateSPLQ31+0x5a4>)
 800cda8:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cdaa:	2300      	movs	r3, #0
 800cdac:	228c      	movs	r2, #140	@ 0x8c
 800cdae:	18ba      	adds	r2, r7, r2
 800cdb0:	6013      	str	r3, [r2, #0]
 800cdb2:	e025      	b.n	800ce00 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cdb4:	4b22      	ldr	r3, [pc, #136]	@ (800ce40 <calculateSPLQ31+0x598>)
 800cdb6:	208c      	movs	r0, #140	@ 0x8c
 800cdb8:	183a      	adds	r2, r7, r0
 800cdba:	6812      	ldr	r2, [r2, #0]
 800cdbc:	0092      	lsls	r2, r2, #2
 800cdbe:	58d2      	ldr	r2, [r2, r3]
 800cdc0:	4b23      	ldr	r3, [pc, #140]	@ (800ce50 <calculateSPLQ31+0x5a8>)
 800cdc2:	1839      	adds	r1, r7, r0
 800cdc4:	6809      	ldr	r1, [r1, #0]
 800cdc6:	0089      	lsls	r1, r1, #2
 800cdc8:	58cb      	ldr	r3, [r1, r3]
 800cdca:	18d1      	adds	r1, r2, r3
 800cdcc:	4b20      	ldr	r3, [pc, #128]	@ (800ce50 <calculateSPLQ31+0x5a8>)
 800cdce:	183a      	adds	r2, r7, r0
 800cdd0:	6812      	ldr	r2, [r2, #0]
 800cdd2:	0092      	lsls	r2, r2, #2
 800cdd4:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cdd6:	4b1b      	ldr	r3, [pc, #108]	@ (800ce44 <calculateSPLQ31+0x59c>)
 800cdd8:	183a      	adds	r2, r7, r0
 800cdda:	6812      	ldr	r2, [r2, #0]
 800cddc:	0092      	lsls	r2, r2, #2
 800cdde:	58d2      	ldr	r2, [r2, r3]
 800cde0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce54 <calculateSPLQ31+0x5ac>)
 800cde2:	1839      	adds	r1, r7, r0
 800cde4:	6809      	ldr	r1, [r1, #0]
 800cde6:	0089      	lsls	r1, r1, #2
 800cde8:	58cb      	ldr	r3, [r1, r3]
 800cdea:	18d1      	adds	r1, r2, r3
 800cdec:	4b19      	ldr	r3, [pc, #100]	@ (800ce54 <calculateSPLQ31+0x5ac>)
 800cdee:	183a      	adds	r2, r7, r0
 800cdf0:	6812      	ldr	r2, [r2, #0]
 800cdf2:	0092      	lsls	r2, r2, #2
 800cdf4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cdf6:	183b      	adds	r3, r7, r0
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	183a      	adds	r2, r7, r0
 800cdfe:	6013      	str	r3, [r2, #0]
 800ce00:	238c      	movs	r3, #140	@ 0x8c
 800ce02:	18fb      	adds	r3, r7, r3
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b05      	cmp	r3, #5
 800ce08:	d9d4      	bls.n	800cdb4 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800ce0a:	4b13      	ldr	r3, [pc, #76]	@ (800ce58 <calculateSPLQ31+0x5b0>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	1c5a      	adds	r2, r3, #1
 800ce10:	4b11      	ldr	r3, [pc, #68]	@ (800ce58 <calculateSPLQ31+0x5b0>)
 800ce12:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800ce14:	4b10      	ldr	r3, [pc, #64]	@ (800ce58 <calculateSPLQ31+0x5b0>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b0f      	cmp	r3, #15
 800ce1a:	d905      	bls.n	800ce28 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800ce1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ce5c <calculateSPLQ31+0x5b4>)
 800ce1e:	2201      	movs	r2, #1
 800ce20:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ce22:	4b0f      	ldr	r3, [pc, #60]	@ (800ce60 <calculateSPLQ31+0x5b8>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	701a      	strb	r2, [r3, #0]
    }
}
 800ce28:	46c0      	nop			@ (mov r8, r8)
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	b02f      	add	sp, #188	@ 0xbc
 800ce2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce30:	200000c0 	.word	0x200000c0
 800ce34:	200000c4 	.word	0x200000c4
 800ce38:	20000d8c 	.word	0x20000d8c
 800ce3c:	20000d88 	.word	0x20000d88
 800ce40:	20000d90 	.word	0x20000d90
 800ce44:	20000da8 	.word	0x20000da8
 800ce48:	200017d0 	.word	0x200017d0
 800ce4c:	200017d4 	.word	0x200017d4
 800ce50:	200017d8 	.word	0x200017d8
 800ce54:	200017f0 	.word	0x200017f0
 800ce58:	20001808 	.word	0x20001808
 800ce5c:	20000d7d 	.word	0x20000d7d
 800ce60:	20000d7b 	.word	0x20000d7b

0800ce64 <resetSPLstate>:

static void resetSPLstate(void)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800ce6a:	4b11      	ldr	r3, [pc, #68]	@ (800ceb0 <resetSPLstate+0x4c>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800ce70:	4b10      	ldr	r3, [pc, #64]	@ (800ceb4 <resetSPLstate+0x50>)
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800ce76:	4b10      	ldr	r3, [pc, #64]	@ (800ceb8 <resetSPLstate+0x54>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	607b      	str	r3, [r7, #4]
 800ce80:	e00c      	b.n	800ce9c <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800ce82:	4b0e      	ldr	r3, [pc, #56]	@ (800cebc <resetSPLstate+0x58>)
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	0092      	lsls	r2, r2, #2
 800ce88:	2100      	movs	r1, #0
 800ce8a:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800ce8c:	4b0c      	ldr	r3, [pc, #48]	@ (800cec0 <resetSPLstate+0x5c>)
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	0092      	lsls	r2, r2, #2
 800ce92:	2100      	movs	r1, #0
 800ce94:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	607b      	str	r3, [r7, #4]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b05      	cmp	r3, #5
 800cea0:	d9ef      	bls.n	800ce82 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cea2:	4b08      	ldr	r3, [pc, #32]	@ (800cec4 <resetSPLstate+0x60>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	701a      	strb	r2, [r3, #0]
}
 800cea8:	46c0      	nop			@ (mov r8, r8)
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	b002      	add	sp, #8
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	200017d0 	.word	0x200017d0
 800ceb4:	200017d4 	.word	0x200017d4
 800ceb8:	20001808 	.word	0x20001808
 800cebc:	200017d8 	.word	0x200017d8
 800cec0:	200017f0 	.word	0x200017f0
 800cec4:	20000d7d 	.word	0x20000d7d

0800cec8 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cec8:	b5b0      	push	{r4, r5, r7, lr}
 800ceca:	b090      	sub	sp, #64	@ 0x40
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	0019      	movs	r1, r3
 800ced4:	1dfb      	adds	r3, r7, #7
 800ced6:	701a      	strb	r2, [r3, #0]
 800ced8:	1dbb      	adds	r3, r7, #6
 800ceda:	1c0a      	adds	r2, r1, #0
 800cedc:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800cede:	1dfb      	adds	r3, r7, #7
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d005      	beq.n	800cef2 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800cee6:	4b3b      	ldr	r3, [pc, #236]	@ (800cfd4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800ceec:	4b3a      	ldr	r3, [pc, #232]	@ (800cfd8 <getFilteredMaxAmplitudeQ31+0x110>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800cef6:	2300      	movs	r3, #0
 800cef8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800cefa:	2305      	movs	r3, #5
 800cefc:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800cefe:	2300      	movs	r3, #0
 800cf00:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf02:	e040      	b.n	800cf86 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cf04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	18d3      	adds	r3, r2, r3
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf10:	409a      	lsls	r2, r3
 800cf12:	0013      	movs	r3, r2
 800cf14:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800cf16:	4b30      	ldr	r3, [pc, #192]	@ (800cfd8 <getFilteredMaxAmplitudeQ31+0x110>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	425a      	negs	r2, r3
 800cf1c:	4b2e      	ldr	r3, [pc, #184]	@ (800cfd8 <getFilteredMaxAmplitudeQ31+0x110>)
 800cf1e:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cf20:	2418      	movs	r4, #24
 800cf22:	193a      	adds	r2, r7, r4
 800cf24:	492c      	ldr	r1, [pc, #176]	@ (800cfd8 <getFilteredMaxAmplitudeQ31+0x110>)
 800cf26:	231c      	movs	r3, #28
 800cf28:	18f8      	adds	r0, r7, r3
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	f011 fdb2 	bl	801ea94 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cf30:	2514      	movs	r5, #20
 800cf32:	197a      	adds	r2, r7, r5
 800cf34:	1939      	adds	r1, r7, r4
 800cf36:	4829      	ldr	r0, [pc, #164]	@ (800cfdc <getFilteredMaxAmplitudeQ31+0x114>)
 800cf38:	2301      	movs	r3, #1
 800cf3a:	f011 fd79 	bl	801ea30 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800cf3e:	2410      	movs	r4, #16
 800cf40:	193a      	adds	r2, r7, r4
 800cf42:	4924      	ldr	r1, [pc, #144]	@ (800cfd4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf44:	4826      	ldr	r0, [pc, #152]	@ (800cfe0 <getFilteredMaxAmplitudeQ31+0x118>)
 800cf46:	2301      	movs	r3, #1
 800cf48:	f011 fd72 	bl	801ea30 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800cf4c:	4a21      	ldr	r2, [pc, #132]	@ (800cfd4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf4e:	1939      	adds	r1, r7, r4
 800cf50:	1978      	adds	r0, r7, r5
 800cf52:	2301      	movs	r3, #1
 800cf54:	f011 fd9e 	bl	801ea94 <arm_add_q31>

        lastData = fx;
 800cf58:	69fa      	ldr	r2, [r7, #28]
 800cf5a:	4b1f      	ldr	r3, [pc, #124]	@ (800cfd8 <getFilteredMaxAmplitudeQ31+0x110>)
 800cf5c:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800cf5e:	4b1d      	ldr	r3, [pc, #116]	@ (800cfd4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf64:	429a      	cmp	r2, r3
 800cf66:	da03      	bge.n	800cf70 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800cf68:	4b1a      	ldr	r3, [pc, #104]	@ (800cfd4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf6e:	e007      	b.n	800cf80 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800cf70:	4b18      	ldr	r3, [pc, #96]	@ (800cfd4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf76:	429a      	cmp	r2, r3
 800cf78:	dd02      	ble.n	800cf80 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800cf7a:	4b16      	ldr	r3, [pc, #88]	@ (800cfd4 <getFilteredMaxAmplitudeQ31+0x10c>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800cf80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf82:	3301      	adds	r3, #1
 800cf84:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d3ba      	bcc.n	800cf04 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf90:	17da      	asrs	r2, r3, #31
 800cf92:	189b      	adds	r3, r3, r2
 800cf94:	4053      	eors	r3, r2
 800cf96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800cf98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800cf9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d200      	bcs.n	800cfa6 <getFilteredMaxAmplitudeQ31+0xde>
 800cfa4:	0013      	movs	r3, r2
 800cfa6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cfa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfac:	40da      	lsrs	r2, r3
 800cfae:	0013      	movs	r3, r2
 800cfb0:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cfb2:	1dbb      	adds	r3, r7, #6
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d007      	beq.n	800cfca <getFilteredMaxAmplitudeQ31+0x102>
 800cfba:	4b0a      	ldr	r3, [pc, #40]	@ (800cfe4 <getFilteredMaxAmplitudeQ31+0x11c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6a3a      	ldr	r2, [r7, #32]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d902      	bls.n	800cfca <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cfc4:	4b07      	ldr	r3, [pc, #28]	@ (800cfe4 <getFilteredMaxAmplitudeQ31+0x11c>)
 800cfc6:	6a3a      	ldr	r2, [r7, #32]
 800cfc8:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cfca:	6a3b      	ldr	r3, [r7, #32]
}
 800cfcc:	0018      	movs	r0, r3
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	b010      	add	sp, #64	@ 0x40
 800cfd2:	bdb0      	pop	{r4, r5, r7, pc}
 800cfd4:	20001c0c 	.word	0x20001c0c
 800cfd8:	20001c10 	.word	0x20001c10
 800cfdc:	08025cdc 	.word	0x08025cdc
 800cfe0:	08025ce0 	.word	0x08025ce0
 800cfe4:	20000d84 	.word	0x20000d84

0800cfe8 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cff4:	4913      	ldr	r1, [pc, #76]	@ (800d044 <floatToIntAndFrac2dp+0x5c>)
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f7f3 ffd2 	bl	8000fa0 <__aeabi_fmul>
 800cffc:	1c03      	adds	r3, r0, #0
 800cffe:	1c18      	adds	r0, r3, #0
 800d000:	f016 f97c 	bl	80232fc <roundf>
 800d004:	1c03      	adds	r3, r0, #0
 800d006:	1c18      	adds	r0, r3, #0
 800d008:	f7f3 fb08 	bl	800061c <__aeabi_f2uiz>
 800d00c:	0003      	movs	r3, r0
 800d00e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	2164      	movs	r1, #100	@ 0x64
 800d014:	0018      	movs	r0, r3
 800d016:	f7f3 f8c5 	bl	80001a4 <__udivsi3>
 800d01a:	0003      	movs	r3, r0
 800d01c:	001a      	movs	r2, r3
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	b2da      	uxtb	r2, r3
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	2164      	movs	r1, #100	@ 0x64
 800d02e:	434b      	muls	r3, r1
 800d030:	b2db      	uxtb	r3, r3
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	b2da      	uxtb	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	701a      	strb	r2, [r3, #0]
}
 800d03a:	46c0      	nop			@ (mov r8, r8)
 800d03c:	46bd      	mov	sp, r7
 800d03e:	b006      	add	sp, #24
 800d040:	bd80      	pop	{r7, pc}
 800d042:	46c0      	nop			@ (mov r8, r8)
 800d044:	42c80000 	.word	0x42c80000

0800d048 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800d054:	4914      	ldr	r1, [pc, #80]	@ (800d0a8 <floatToIntAndFrac1dp+0x60>)
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f7f3 ffa2 	bl	8000fa0 <__aeabi_fmul>
 800d05c:	1c03      	adds	r3, r0, #0
 800d05e:	1c18      	adds	r0, r3, #0
 800d060:	f016 f94c 	bl	80232fc <roundf>
 800d064:	1c03      	adds	r3, r0, #0
 800d066:	1c18      	adds	r0, r3, #0
 800d068:	f7f3 fad8 	bl	800061c <__aeabi_f2uiz>
 800d06c:	0003      	movs	r3, r0
 800d06e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	210a      	movs	r1, #10
 800d074:	0018      	movs	r0, r3
 800d076:	f7f3 f895 	bl	80001a4 <__udivsi3>
 800d07a:	0003      	movs	r3, r0
 800d07c:	001a      	movs	r2, r3
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	b2da      	uxtb	r2, r3
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	1c19      	adds	r1, r3, #0
 800d08e:	0089      	lsls	r1, r1, #2
 800d090:	18cb      	adds	r3, r1, r3
 800d092:	18db      	adds	r3, r3, r3
 800d094:	b2db      	uxtb	r3, r3
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	701a      	strb	r2, [r3, #0]
}
 800d09e:	46c0      	nop			@ (mov r8, r8)
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	b006      	add	sp, #24
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	46c0      	nop			@ (mov r8, r8)
 800d0a8:	41200000 	.word	0x41200000

0800d0ac <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800d0ac:	b590      	push	{r4, r7, lr}
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
 800d0b8:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7f4 fa88 	bl	80015d0 <__aeabi_i2f>
 800d0c0:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800d0c2:	6838      	ldr	r0, [r7, #0]
 800d0c4:	f7f4 fa84 	bl	80015d0 <__aeabi_i2f>
 800d0c8:	1c03      	adds	r3, r0, #0
 800d0ca:	4918      	ldr	r1, [pc, #96]	@ (800d12c <sumToIntAverage+0x80>)
 800d0cc:	1c18      	adds	r0, r3, #0
 800d0ce:	f7f3 fd81 	bl	8000bd4 <__aeabi_fdiv>
 800d0d2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800d0d4:	1c19      	adds	r1, r3, #0
 800d0d6:	1c20      	adds	r0, r4, #0
 800d0d8:	f7f3 fbf2 	bl	80008c0 <__aeabi_fadd>
 800d0dc:	1c03      	adds	r3, r0, #0
 800d0de:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800d0e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0e2:	f7f4 fac1 	bl	8001668 <__aeabi_ui2f>
 800d0e6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800d0e8:	1c19      	adds	r1, r3, #0
 800d0ea:	1c20      	adds	r0, r4, #0
 800d0ec:	f7f3 fd72 	bl	8000bd4 <__aeabi_fdiv>
 800d0f0:	1c03      	adds	r3, r0, #0
 800d0f2:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	2310      	movs	r3, #16
 800d0fc:	18f9      	adds	r1, r7, r3
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	1c18      	adds	r0, r3, #0
 800d102:	f7ff ffa1 	bl	800d048 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	2bff      	cmp	r3, #255	@ 0xff
 800d10a:	d906      	bls.n	800d11a <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	22ff      	movs	r2, #255	@ 0xff
 800d110:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	2209      	movs	r2, #9
 800d116:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800d118:	e003      	b.n	800d122 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	701a      	strb	r2, [r3, #0]
}
 800d122:	46c0      	nop			@ (mov r8, r8)
 800d124:	46bd      	mov	sp, r7
 800d126:	b007      	add	sp, #28
 800d128:	bd90      	pop	{r4, r7, pc}
 800d12a:	46c0      	nop			@ (mov r8, r8)
 800d12c:	41200000 	.word	0x41200000

0800d130 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2280      	movs	r2, #128	@ 0x80
 800d142:	0612      	lsls	r2, r2, #24
 800d144:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	4a18      	ldr	r2, [pc, #96]	@ (800d1ac <findMinMax+0x7c>)
 800d14a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800d14c:	2300      	movs	r3, #0
 800d14e:	617b      	str	r3, [r7, #20]
 800d150:	e022      	b.n	800d198 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	18d3      	adds	r3, r2, r3
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	429a      	cmp	r2, r3
 800d162:	da06      	bge.n	800d172 <findMinMax+0x42>
        {
            min[0] = array[i];
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	18d3      	adds	r3, r2, r3
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	18d3      	adds	r3, r2, r3
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	429a      	cmp	r2, r3
 800d182:	dd06      	ble.n	800d192 <findMinMax+0x62>
        {
            max[0] = array[i];
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	18d3      	adds	r3, r2, r3
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	3301      	adds	r3, #1
 800d196:	617b      	str	r3, [r7, #20]
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d3d8      	bcc.n	800d152 <findMinMax+0x22>
        }
    }
}
 800d1a0:	46c0      	nop			@ (mov r8, r8)
 800d1a2:	46c0      	nop			@ (mov r8, r8)
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	b006      	add	sp, #24
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	46c0      	nop			@ (mov r8, r8)
 800d1ac:	7fffffff 	.word	0x7fffffff

0800d1b0 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d302      	bcc.n	800d1cc <getPo2factor+0x1c>
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d107      	bne.n	800d1dc <getPo2factor+0x2c>
    {
        return 0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	e00d      	b.n	800d1ec <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	085b      	lsrs	r3, r3, #1
 800d1d4:	607b      	str	r3, [r7, #4]
        bitShift++;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d2f5      	bcs.n	800d1d0 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
}
 800d1ec:	0018      	movs	r0, r3
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	b004      	add	sp, #16
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f7f4 fa30 	bl	8001668 <__aeabi_ui2f>
 800d208:	1c03      	adds	r3, r0, #0
 800d20a:	1c19      	adds	r1, r3, #0
 800d20c:	68b8      	ldr	r0, [r7, #8]
 800d20e:	f7f3 fec7 	bl	8000fa0 <__aeabi_fmul>
 800d212:	1c03      	adds	r3, r0, #0
 800d214:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800d216:	2300      	movs	r3, #0
 800d218:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	2310      	movs	r3, #16
 800d21e:	18f9      	adds	r1, r7, r3
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	1c18      	adds	r0, r3, #0
 800d224:	f7ff fee0 	bl	800cfe8 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	b29a      	uxth	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	801a      	strh	r2, [r3, #0]
}
 800d230:	46c0      	nop			@ (mov r8, r8)
 800d232:	46bd      	mov	sp, r7
 800d234:	b006      	add	sp, #24
 800d236:	bd80      	pop	{r7, pc}

0800d238 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60b8      	str	r0, [r7, #8]
 800d240:	60f9      	str	r1, [r7, #12]
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800d246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d248:	6a3a      	ldr	r2, [r7, #32]
 800d24a:	68b8      	ldr	r0, [r7, #8]
 800d24c:	68f9      	ldr	r1, [r7, #12]
 800d24e:	f7fa f9cb 	bl	80075e8 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800d252:	6a3b      	ldr	r3, [r7, #32]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	18d2      	adds	r2, r2, r3
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	18d2      	adds	r2, r2, r3
 800d25e:	6a3b      	ldr	r3, [r7, #32]
 800d260:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800d262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	18d2      	adds	r2, r2, r3
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	18d2      	adds	r2, r2, r3
 800d26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d270:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800d272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	0011      	movs	r1, r2
 800d278:	0018      	movs	r0, r3
 800d27a:	f7fa fa45 	bl	8007708 <correctIntFracNumber>
}
 800d27e:	46c0      	nop			@ (mov r8, r8)
 800d280:	46bd      	mov	sp, r7
 800d282:	b004      	add	sp, #16
 800d284:	bd80      	pop	{r7, pc}

0800d286 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800d286:	b580      	push	{r7, lr}
 800d288:	b086      	sub	sp, #24
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	60f8      	str	r0, [r7, #12]
 800d28e:	60b9      	str	r1, [r7, #8]
 800d290:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800d292:	2300      	movs	r3, #0
 800d294:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d296:	2300      	movs	r3, #0
 800d298:	613b      	str	r3, [r7, #16]
 800d29a:	e019      	b.n	800d2d0 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	18d3      	adds	r3, r2, r3
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	3201      	adds	r2, #1
 800d2ac:	0052      	lsls	r2, r2, #1
 800d2ae:	68f9      	ldr	r1, [r7, #12]
 800d2b0:	188a      	adds	r2, r1, r2
 800d2b2:	8812      	ldrh	r2, [r2, #0]
 800d2b4:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d2b6:	0019      	movs	r1, r3
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d2c0:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d2c2:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	613b      	str	r3, [r7, #16]
 800d2d0:	693a      	ldr	r2, [r7, #16]
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d3e1      	bcc.n	800d29c <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d2d8:	46c0      	nop			@ (mov r8, r8)
 800d2da:	46c0      	nop			@ (mov r8, r8)
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	b006      	add	sp, #24
 800d2e0:	bd80      	pop	{r7, pc}
	...

0800d2e4 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	af00      	add	r7, sp, #0
  init = false;
 800d2e8:	4b02      	ldr	r3, [pc, #8]	@ (800d2f4 <InitDone+0x10>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	701a      	strb	r2, [r3, #0]
}
 800d2ee:	46c0      	nop			@ (mov r8, r8)
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	200000cc 	.word	0x200000cc

0800d2f8 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d2fe:	f7f9 f8f1 	bl	80064e4 <ReadBatteryVoltage>
 800d302:	1c02      	adds	r2, r0, #0
 800d304:	4b25      	ldr	r3, [pc, #148]	@ (800d39c <batteryChargeCheck+0xa4>)
 800d306:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 800d308:	4b24      	ldr	r3, [pc, #144]	@ (800d39c <batteryChargeCheck+0xa4>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4924      	ldr	r1, [pc, #144]	@ (800d3a0 <batteryChargeCheck+0xa8>)
 800d30e:	1c18      	adds	r0, r3, #0
 800d310:	f7f3 f90e 	bl	8000530 <__aeabi_fcmplt>
 800d314:	1e03      	subs	r3, r0, #0
 800d316:	d002      	beq.n	800d31e <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d318:	1dfb      	adds	r3, r7, #7
 800d31a:	2200      	movs	r2, #0
 800d31c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 800d31e:	4b1f      	ldr	r3, [pc, #124]	@ (800d39c <batteryChargeCheck+0xa4>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	491f      	ldr	r1, [pc, #124]	@ (800d3a0 <batteryChargeCheck+0xa8>)
 800d324:	1c18      	adds	r0, r3, #0
 800d326:	f7f3 f921 	bl	800056c <__aeabi_fcmpge>
 800d32a:	1e03      	subs	r3, r0, #0
 800d32c:	d00d      	beq.n	800d34a <batteryChargeCheck+0x52>
 800d32e:	4b1b      	ldr	r3, [pc, #108]	@ (800d39c <batteryChargeCheck+0xa4>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	1c18      	adds	r0, r3, #0
 800d334:	f7f6 f896 	bl	8003464 <__aeabi_f2d>
 800d338:	4a1a      	ldr	r2, [pc, #104]	@ (800d3a4 <batteryChargeCheck+0xac>)
 800d33a:	4b1b      	ldr	r3, [pc, #108]	@ (800d3a8 <batteryChargeCheck+0xb0>)
 800d33c:	f7f3 f8be 	bl	80004bc <__aeabi_dcmplt>
 800d340:	1e03      	subs	r3, r0, #0
 800d342:	d002      	beq.n	800d34a <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d344:	1dfb      	adds	r3, r7, #7
 800d346:	2201      	movs	r2, #1
 800d348:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 800d34a:	4b14      	ldr	r3, [pc, #80]	@ (800d39c <batteryChargeCheck+0xa4>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	1c18      	adds	r0, r3, #0
 800d350:	f7f6 f888 	bl	8003464 <__aeabi_f2d>
 800d354:	4a13      	ldr	r2, [pc, #76]	@ (800d3a4 <batteryChargeCheck+0xac>)
 800d356:	4b14      	ldr	r3, [pc, #80]	@ (800d3a8 <batteryChargeCheck+0xb0>)
 800d358:	f7f3 f8ce 	bl	80004f8 <__aeabi_dcmpge>
 800d35c:	1e03      	subs	r3, r0, #0
 800d35e:	d00b      	beq.n	800d378 <batteryChargeCheck+0x80>
 800d360:	4b0e      	ldr	r3, [pc, #56]	@ (800d39c <batteryChargeCheck+0xa4>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2181      	movs	r1, #129	@ 0x81
 800d366:	05c9      	lsls	r1, r1, #23
 800d368:	1c18      	adds	r0, r3, #0
 800d36a:	f7f3 f8e1 	bl	8000530 <__aeabi_fcmplt>
 800d36e:	1e03      	subs	r3, r0, #0
 800d370:	d002      	beq.n	800d378 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d372:	1dfb      	adds	r3, r7, #7
 800d374:	2202      	movs	r2, #2
 800d376:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 800d378:	4b08      	ldr	r3, [pc, #32]	@ (800d39c <batteryChargeCheck+0xa4>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2181      	movs	r1, #129	@ 0x81
 800d37e:	05c9      	lsls	r1, r1, #23
 800d380:	1c18      	adds	r0, r3, #0
 800d382:	f7f3 f8f3 	bl	800056c <__aeabi_fcmpge>
 800d386:	1e03      	subs	r3, r0, #0
 800d388:	d002      	beq.n	800d390 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d38a:	1dfb      	adds	r3, r7, #7
 800d38c:	2203      	movs	r2, #3
 800d38e:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d390:	1dfb      	adds	r3, r7, #7
 800d392:	781b      	ldrb	r3, [r3, #0]
}
 800d394:	0018      	movs	r0, r3
 800d396:	46bd      	mov	sp, r7
 800d398:	b002      	add	sp, #8
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	20001c24 	.word	0x20001c24
 800d3a0:	40600000 	.word	0x40600000
 800d3a4:	9999999a 	.word	0x9999999a
 800d3a8:	400d9999 	.word	0x400d9999

0800d3ac <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d3ac:	b5b0      	push	{r4, r5, r7, lr}
 800d3ae:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d3b0:	f7f9 f8fa 	bl	80065a8 <ReadSolarVoltage>
 800d3b4:	0003      	movs	r3, r0
 800d3b6:	001a      	movs	r2, r3
 800d3b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d424 <Calculate_LED_ON+0x78>)
 800d3ba:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d3bc:	4b19      	ldr	r3, [pc, #100]	@ (800d424 <Calculate_LED_ON+0x78>)
 800d3be:	881b      	ldrh	r3, [r3, #0]
 800d3c0:	4a19      	ldr	r2, [pc, #100]	@ (800d428 <Calculate_LED_ON+0x7c>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d802      	bhi.n	800d3cc <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d3c6:	4b17      	ldr	r3, [pc, #92]	@ (800d424 <Calculate_LED_ON+0x78>)
 800d3c8:	4a18      	ldr	r2, [pc, #96]	@ (800d42c <Calculate_LED_ON+0x80>)
 800d3ca:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d3cc:	4b15      	ldr	r3, [pc, #84]	@ (800d424 <Calculate_LED_ON+0x78>)
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	4a17      	ldr	r2, [pc, #92]	@ (800d430 <Calculate_LED_ON+0x84>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d902      	bls.n	800d3dc <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d3d6:	4b13      	ldr	r3, [pc, #76]	@ (800d424 <Calculate_LED_ON+0x78>)
 800d3d8:	4a15      	ldr	r2, [pc, #84]	@ (800d430 <Calculate_LED_ON+0x84>)
 800d3da:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d3dc:	4b11      	ldr	r3, [pc, #68]	@ (800d424 <Calculate_LED_ON+0x78>)
 800d3de:	881b      	ldrh	r3, [r3, #0]
 800d3e0:	0018      	movs	r0, r3
 800d3e2:	f7f5 ffed 	bl	80033c0 <__aeabi_i2d>
 800d3e6:	0004      	movs	r4, r0
 800d3e8:	000d      	movs	r5, r1
 800d3ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d424 <Calculate_LED_ON+0x78>)
 800d3ec:	881b      	ldrh	r3, [r3, #0]
 800d3ee:	001a      	movs	r2, r3
 800d3f0:	4b10      	ldr	r3, [pc, #64]	@ (800d434 <Calculate_LED_ON+0x88>)
 800d3f2:	1a9b      	subs	r3, r3, r2
 800d3f4:	0018      	movs	r0, r3
 800d3f6:	f7f5 ffe3 	bl	80033c0 <__aeabi_i2d>
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	4b0e      	ldr	r3, [pc, #56]	@ (800d438 <Calculate_LED_ON+0x8c>)
 800d3fe:	f7f5 f91d 	bl	800263c <__aeabi_dmul>
 800d402:	0002      	movs	r2, r0
 800d404:	000b      	movs	r3, r1
 800d406:	0020      	movs	r0, r4
 800d408:	0029      	movs	r1, r5
 800d40a:	f7f4 f96f 	bl	80016ec <__aeabi_dadd>
 800d40e:	0002      	movs	r2, r0
 800d410:	000b      	movs	r3, r1
 800d412:	0010      	movs	r0, r2
 800d414:	0019      	movs	r1, r3
 800d416:	f7f3 f919 	bl	800064c <__aeabi_d2uiz>
 800d41a:	0003      	movs	r3, r0
 800d41c:	b29b      	uxth	r3, r3
}
 800d41e:	0018      	movs	r0, r3
 800d420:	46bd      	mov	sp, r7
 800d422:	bdb0      	pop	{r4, r5, r7, pc}
 800d424:	20001c28 	.word	0x20001c28
 800d428:	00000b53 	.word	0x00000b53
 800d42c:	00000b54 	.word	0x00000b54
 800d430:	0000125c 	.word	0x0000125c
 800d434:	00000dee 	.word	0x00000dee
 800d438:	3ff80000 	.word	0x3ff80000

0800d43c <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d43c:	b590      	push	{r4, r7, lr}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	0004      	movs	r4, r0
 800d444:	0008      	movs	r0, r1
 800d446:	0011      	movs	r1, r2
 800d448:	1dbb      	adds	r3, r7, #6
 800d44a:	1c22      	adds	r2, r4, #0
 800d44c:	801a      	strh	r2, [r3, #0]
 800d44e:	1d3b      	adds	r3, r7, #4
 800d450:	1c02      	adds	r2, r0, #0
 800d452:	801a      	strh	r2, [r3, #0]
 800d454:	1cbb      	adds	r3, r7, #2
 800d456:	1c0a      	adds	r2, r1, #0
 800d458:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d45a:	4b0f      	ldr	r3, [pc, #60]	@ (800d498 <SetStatusLED+0x5c>)
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d107      	bne.n	800d472 <SetStatusLED+0x36>
 800d462:	4b0e      	ldr	r3, [pc, #56]	@ (800d49c <SetStatusLED+0x60>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d103      	bne.n	800d472 <SetStatusLED+0x36>
 800d46a:	4b0d      	ldr	r3, [pc, #52]	@ (800d4a0 <SetStatusLED+0x64>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00e      	beq.n	800d490 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d472:	2380      	movs	r3, #128	@ 0x80
 800d474:	05db      	lsls	r3, r3, #23
 800d476:	1dba      	adds	r2, r7, #6
 800d478:	8812      	ldrh	r2, [r2, #0]
 800d47a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d47c:	2380      	movs	r3, #128	@ 0x80
 800d47e:	05db      	lsls	r3, r3, #23
 800d480:	1d3a      	adds	r2, r7, #4
 800d482:	8812      	ldrh	r2, [r2, #0]
 800d484:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d486:	2380      	movs	r3, #128	@ 0x80
 800d488:	05db      	lsls	r3, r3, #23
 800d48a:	1cba      	adds	r2, r7, #2
 800d48c:	8812      	ldrh	r2, [r2, #0]
 800d48e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d490:	46c0      	nop			@ (mov r8, r8)
 800d492:	46bd      	mov	sp, r7
 800d494:	b003      	add	sp, #12
 800d496:	bd90      	pop	{r4, r7, pc}
 800d498:	20001c15 	.word	0x20001c15
 800d49c:	200000cc 	.word	0x200000cc
 800d4a0:	20001c16 	.word	0x20001c16

0800d4a4 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d4a4:	b590      	push	{r4, r7, lr}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	0004      	movs	r4, r0
 800d4ac:	0008      	movs	r0, r1
 800d4ae:	0011      	movs	r1, r2
 800d4b0:	1dfb      	adds	r3, r7, #7
 800d4b2:	1c22      	adds	r2, r4, #0
 800d4b4:	701a      	strb	r2, [r3, #0]
 800d4b6:	1dbb      	adds	r3, r7, #6
 800d4b8:	1c02      	adds	r2, r0, #0
 800d4ba:	701a      	strb	r2, [r3, #0]
 800d4bc:	1d7b      	adds	r3, r7, #5
 800d4be:	1c0a      	adds	r2, r1, #0
 800d4c0:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d4c2:	4b19      	ldr	r3, [pc, #100]	@ (800d528 <SetDBLED+0x84>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d107      	bne.n	800d4da <SetDBLED+0x36>
 800d4ca:	4b18      	ldr	r3, [pc, #96]	@ (800d52c <SetDBLED+0x88>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d103      	bne.n	800d4da <SetDBLED+0x36>
 800d4d2:	4b17      	ldr	r3, [pc, #92]	@ (800d530 <SetDBLED+0x8c>)
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d022      	beq.n	800d520 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d4da:	1dfb      	adds	r3, r7, #7
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	4053      	eors	r3, r2
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	001a      	movs	r2, r3
 800d4e6:	4b13      	ldr	r3, [pc, #76]	@ (800d534 <SetDBLED+0x90>)
 800d4e8:	2101      	movs	r1, #1
 800d4ea:	0018      	movs	r0, r3
 800d4ec:	f003 f8d7 	bl	801069e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d4f0:	1dbb      	adds	r3, r7, #6
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	4053      	eors	r3, r2
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	001a      	movs	r2, r3
 800d4fc:	2380      	movs	r3, #128	@ 0x80
 800d4fe:	005b      	lsls	r3, r3, #1
 800d500:	480c      	ldr	r0, [pc, #48]	@ (800d534 <SetDBLED+0x90>)
 800d502:	0019      	movs	r1, r3
 800d504:	f003 f8cb 	bl	801069e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d508:	1d7b      	adds	r3, r7, #5
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	2201      	movs	r2, #1
 800d50e:	4053      	eors	r3, r2
 800d510:	b2db      	uxtb	r3, r3
 800d512:	001a      	movs	r2, r3
 800d514:	2380      	movs	r3, #128	@ 0x80
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	4806      	ldr	r0, [pc, #24]	@ (800d534 <SetDBLED+0x90>)
 800d51a:	0019      	movs	r1, r3
 800d51c:	f003 f8bf 	bl	801069e <HAL_GPIO_WritePin>
  }
}
 800d520:	46c0      	nop			@ (mov r8, r8)
 800d522:	46bd      	mov	sp, r7
 800d524:	b003      	add	sp, #12
 800d526:	bd90      	pop	{r4, r7, pc}
 800d528:	20001c15 	.word	0x20001c15
 800d52c:	200000cc 	.word	0x200000cc
 800d530:	20001c16 	.word	0x20001c16
 800d534:	50000400 	.word	0x50000400

0800d538 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d538:	b590      	push	{r4, r7, lr}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	0004      	movs	r4, r0
 800d540:	0008      	movs	r0, r1
 800d542:	0011      	movs	r1, r2
 800d544:	1dbb      	adds	r3, r7, #6
 800d546:	1c22      	adds	r2, r4, #0
 800d548:	801a      	strh	r2, [r3, #0]
 800d54a:	1d3b      	adds	r3, r7, #4
 800d54c:	1c02      	adds	r2, r0, #0
 800d54e:	801a      	strh	r2, [r3, #0]
 800d550:	1cbb      	adds	r3, r7, #2
 800d552:	1c0a      	adds	r2, r1, #0
 800d554:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d556:	4b0e      	ldr	r3, [pc, #56]	@ (800d590 <SetVocLED+0x58>)
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d107      	bne.n	800d56e <SetVocLED+0x36>
 800d55e:	4b0d      	ldr	r3, [pc, #52]	@ (800d594 <SetVocLED+0x5c>)
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d103      	bne.n	800d56e <SetVocLED+0x36>
 800d566:	4b0c      	ldr	r3, [pc, #48]	@ (800d598 <SetVocLED+0x60>)
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00b      	beq.n	800d586 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d56e:	4b0b      	ldr	r3, [pc, #44]	@ (800d59c <SetVocLED+0x64>)
 800d570:	1dba      	adds	r2, r7, #6
 800d572:	8812      	ldrh	r2, [r2, #0]
 800d574:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d576:	4b09      	ldr	r3, [pc, #36]	@ (800d59c <SetVocLED+0x64>)
 800d578:	1d3a      	adds	r2, r7, #4
 800d57a:	8812      	ldrh	r2, [r2, #0]
 800d57c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d57e:	4b07      	ldr	r3, [pc, #28]	@ (800d59c <SetVocLED+0x64>)
 800d580:	1cba      	adds	r2, r7, #2
 800d582:	8812      	ldrh	r2, [r2, #0]
 800d584:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d586:	46c0      	nop			@ (mov r8, r8)
 800d588:	46bd      	mov	sp, r7
 800d58a:	b003      	add	sp, #12
 800d58c:	bd90      	pop	{r4, r7, pc}
 800d58e:	46c0      	nop			@ (mov r8, r8)
 800d590:	20001c15 	.word	0x20001c15
 800d594:	200000cc 	.word	0x200000cc
 800d598:	20001c16 	.word	0x20001c16
 800d59c:	40000400 	.word	0x40000400

0800d5a0 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d5a4:	4b08      	ldr	r3, [pc, #32]	@ (800d5c8 <SetMeasurementIndicator+0x28>)
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d103      	bne.n	800d5b4 <SetMeasurementIndicator+0x14>
 800d5ac:	4b07      	ldr	r3, [pc, #28]	@ (800d5cc <SetMeasurementIndicator+0x2c>)
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d006      	beq.n	800d5c2 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d5b4:	f7ff fefa 	bl	800d3ac <Calculate_LED_ON>
 800d5b8:	0003      	movs	r3, r0
 800d5ba:	001a      	movs	r2, r3
 800d5bc:	2380      	movs	r3, #128	@ 0x80
 800d5be:	05db      	lsls	r3, r3, #23
 800d5c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d5c2:	46c0      	nop			@ (mov r8, r8)
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	20001c15 	.word	0x20001c15
 800d5cc:	20001c16 	.word	0x20001c16

0800d5d0 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d5d4:	4b07      	ldr	r3, [pc, #28]	@ (800d5f4 <ResetMeasurementIndicator+0x24>)
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d103      	bne.n	800d5e4 <ResetMeasurementIndicator+0x14>
 800d5dc:	4b06      	ldr	r3, [pc, #24]	@ (800d5f8 <ResetMeasurementIndicator+0x28>)
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d004      	beq.n	800d5ee <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d5e4:	2380      	movs	r3, #128	@ 0x80
 800d5e6:	05db      	lsls	r3, r3, #23
 800d5e8:	22fa      	movs	r2, #250	@ 0xfa
 800d5ea:	0112      	lsls	r2, r2, #4
 800d5ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d5ee:	46c0      	nop			@ (mov r8, r8)
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	20001c15 	.word	0x20001c15
 800d5f8:	20001c16 	.word	0x20001c16

0800d5fc <SetMICIndicator>:
void SetMICIndicator(){
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d600:	4b19      	ldr	r3, [pc, #100]	@ (800d668 <SetMICIndicator+0x6c>)
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d103      	bne.n	800d610 <SetMICIndicator+0x14>
 800d608:	4b18      	ldr	r3, [pc, #96]	@ (800d66c <SetMICIndicator+0x70>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d007      	beq.n	800d620 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d610:	f7ff fecc 	bl	800d3ac <Calculate_LED_ON>
 800d614:	0003      	movs	r3, r0
 800d616:	001a      	movs	r2, r3
 800d618:	2380      	movs	r3, #128	@ 0x80
 800d61a:	05db      	lsls	r3, r3, #23
 800d61c:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 800d61e:	e01f      	b.n	800d660 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 800d620:	4b13      	ldr	r3, [pc, #76]	@ (800d670 <SetMICIndicator+0x74>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	1c18      	adds	r0, r3, #0
 800d626:	f7f5 ff1d 	bl	8003464 <__aeabi_f2d>
 800d62a:	4a12      	ldr	r2, [pc, #72]	@ (800d674 <SetMICIndicator+0x78>)
 800d62c:	4b12      	ldr	r3, [pc, #72]	@ (800d678 <SetMICIndicator+0x7c>)
 800d62e:	f7f2 ff59 	bl	80004e4 <__aeabi_dcmpgt>
 800d632:	1e03      	subs	r3, r0, #0
 800d634:	d00a      	beq.n	800d64c <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d636:	f7ff feb9 	bl	800d3ac <Calculate_LED_ON>
 800d63a:	0003      	movs	r3, r0
 800d63c:	001a      	movs	r2, r3
 800d63e:	2380      	movs	r3, #128	@ 0x80
 800d640:	05db      	lsls	r3, r3, #23
 800d642:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 800d644:	4b0d      	ldr	r3, [pc, #52]	@ (800d67c <SetMICIndicator+0x80>)
 800d646:	2202      	movs	r2, #2
 800d648:	701a      	strb	r2, [r3, #0]
}
 800d64a:	e009      	b.n	800d660 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d64c:	f7ff feae 	bl	800d3ac <Calculate_LED_ON>
 800d650:	0003      	movs	r3, r0
 800d652:	001a      	movs	r2, r3
 800d654:	2380      	movs	r3, #128	@ 0x80
 800d656:	05db      	lsls	r3, r3, #23
 800d658:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 800d65a:	4b08      	ldr	r3, [pc, #32]	@ (800d67c <SetMICIndicator+0x80>)
 800d65c:	2201      	movs	r2, #1
 800d65e:	701a      	strb	r2, [r3, #0]
}
 800d660:	46c0      	nop			@ (mov r8, r8)
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	46c0      	nop			@ (mov r8, r8)
 800d668:	20001c15 	.word	0x20001c15
 800d66c:	20001c16 	.word	0x20001c16
 800d670:	20001c24 	.word	0x20001c24
 800d674:	9999999a 	.word	0x9999999a
 800d678:	400d9999 	.word	0x400d9999
 800d67c:	20001c18 	.word	0x20001c18

0800d680 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d680:	b580      	push	{r7, lr}
 800d682:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d684:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c4 <ResetMICIndicator+0x44>)
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d103      	bne.n	800d694 <ResetMICIndicator+0x14>
 800d68c:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c8 <ResetMICIndicator+0x48>)
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d005      	beq.n	800d6a0 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d694:	2380      	movs	r3, #128	@ 0x80
 800d696:	05db      	lsls	r3, r3, #23
 800d698:	22fa      	movs	r2, #250	@ 0xfa
 800d69a:	0112      	lsls	r2, r2, #4
 800d69c:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d69e:	e00e      	b.n	800d6be <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 800d6a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d6cc <ResetMICIndicator+0x4c>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d105      	bne.n	800d6b4 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 800d6a8:	2380      	movs	r3, #128	@ 0x80
 800d6aa:	05db      	lsls	r3, r3, #23
 800d6ac:	22fa      	movs	r2, #250	@ 0xfa
 800d6ae:	0112      	lsls	r2, r2, #4
 800d6b0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d6b2:	e004      	b.n	800d6be <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 800d6b4:	2380      	movs	r3, #128	@ 0x80
 800d6b6:	05db      	lsls	r3, r3, #23
 800d6b8:	22fa      	movs	r2, #250	@ 0xfa
 800d6ba:	0112      	lsls	r2, r2, #4
 800d6bc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d6be:	46c0      	nop			@ (mov r8, r8)
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	20001c15 	.word	0x20001c15
 800d6c8:	20001c16 	.word	0x20001c16
 800d6cc:	20001c18 	.word	0x20001c18

0800d6d0 <SetESPIndicator>:
void SetESPIndicator(){
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d6d4:	4b08      	ldr	r3, [pc, #32]	@ (800d6f8 <SetESPIndicator+0x28>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d103      	bne.n	800d6e4 <SetESPIndicator+0x14>
 800d6dc:	4b07      	ldr	r3, [pc, #28]	@ (800d6fc <SetESPIndicator+0x2c>)
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d006      	beq.n	800d6f2 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d6e4:	f7ff fe62 	bl	800d3ac <Calculate_LED_ON>
 800d6e8:	0003      	movs	r3, r0
 800d6ea:	001a      	movs	r2, r3
 800d6ec:	2380      	movs	r3, #128	@ 0x80
 800d6ee:	05db      	lsls	r3, r3, #23
 800d6f0:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d6f2:	46c0      	nop			@ (mov r8, r8)
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	20001c15 	.word	0x20001c15
 800d6fc:	20001c16 	.word	0x20001c16

0800d700 <ResetESPIndicator>:
void ResetESPIndicator(){
 800d700:	b580      	push	{r7, lr}
 800d702:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d704:	4b07      	ldr	r3, [pc, #28]	@ (800d724 <ResetESPIndicator+0x24>)
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d103      	bne.n	800d714 <ResetESPIndicator+0x14>
 800d70c:	4b06      	ldr	r3, [pc, #24]	@ (800d728 <ResetESPIndicator+0x28>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d004      	beq.n	800d71e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d714:	2380      	movs	r3, #128	@ 0x80
 800d716:	05db      	lsls	r3, r3, #23
 800d718:	22fa      	movs	r2, #250	@ 0xfa
 800d71a:	0112      	lsls	r2, r2, #4
 800d71c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d71e:	46c0      	nop			@ (mov r8, r8)
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	20001c15 	.word	0x20001c15
 800d728:	20001c16 	.word	0x20001c16

0800d72c <SetPMIndicator>:

void SetPMIndicator() {
 800d72c:	b580      	push	{r7, lr}
 800d72e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d730:	4b0f      	ldr	r3, [pc, #60]	@ (800d770 <SetPMIndicator+0x44>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d103      	bne.n	800d740 <SetPMIndicator+0x14>
 800d738:	4b0e      	ldr	r3, [pc, #56]	@ (800d774 <SetPMIndicator+0x48>)
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d014      	beq.n	800d76a <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d740:	f7ff fe34 	bl	800d3ac <Calculate_LED_ON>
 800d744:	0003      	movs	r3, r0
 800d746:	001a      	movs	r2, r3
 800d748:	2380      	movs	r3, #128	@ 0x80
 800d74a:	05db      	lsls	r3, r3, #23
 800d74c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d74e:	f7ff fe2d 	bl	800d3ac <Calculate_LED_ON>
 800d752:	0003      	movs	r3, r0
 800d754:	001a      	movs	r2, r3
 800d756:	2380      	movs	r3, #128	@ 0x80
 800d758:	05db      	lsls	r3, r3, #23
 800d75a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d75c:	f7ff fe26 	bl	800d3ac <Calculate_LED_ON>
 800d760:	0003      	movs	r3, r0
 800d762:	001a      	movs	r2, r3
 800d764:	2380      	movs	r3, #128	@ 0x80
 800d766:	05db      	lsls	r3, r3, #23
 800d768:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d76a:	46c0      	nop			@ (mov r8, r8)
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	20001c15 	.word	0x20001c15
 800d774:	20001c16 	.word	0x20001c16

0800d778 <ResetPMIndicator>:

void ResetPMIndicator() {
 800d778:	b580      	push	{r7, lr}
 800d77a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d77c:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b0 <ResetPMIndicator+0x38>)
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d103      	bne.n	800d78c <ResetPMIndicator+0x14>
 800d784:	4b0b      	ldr	r3, [pc, #44]	@ (800d7b4 <ResetPMIndicator+0x3c>)
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00e      	beq.n	800d7aa <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d78c:	2380      	movs	r3, #128	@ 0x80
 800d78e:	05db      	lsls	r3, r3, #23
 800d790:	22fa      	movs	r2, #250	@ 0xfa
 800d792:	0112      	lsls	r2, r2, #4
 800d794:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d796:	2380      	movs	r3, #128	@ 0x80
 800d798:	05db      	lsls	r3, r3, #23
 800d79a:	22fa      	movs	r2, #250	@ 0xfa
 800d79c:	0112      	lsls	r2, r2, #4
 800d79e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d7a0:	2380      	movs	r3, #128	@ 0x80
 800d7a2:	05db      	lsls	r3, r3, #23
 800d7a4:	22fa      	movs	r2, #250	@ 0xfa
 800d7a6:	0112      	lsls	r2, r2, #4
 800d7a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d7aa:	46c0      	nop			@ (mov r8, r8)
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	20001c15 	.word	0x20001c15
 800d7b4:	20001c16 	.word	0x20001c16

0800d7b8 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d7bc:	23fa      	movs	r3, #250	@ 0xfa
 800d7be:	011a      	lsls	r2, r3, #4
 800d7c0:	23fa      	movs	r3, #250	@ 0xfa
 800d7c2:	0119      	lsls	r1, r3, #4
 800d7c4:	23fa      	movs	r3, #250	@ 0xfa
 800d7c6:	011b      	lsls	r3, r3, #4
 800d7c8:	0018      	movs	r0, r3
 800d7ca:	f7ff fe37 	bl	800d43c <SetStatusLED>
  SetDBLED(false,false,false);
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	2100      	movs	r1, #0
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	f7ff fe66 	bl	800d4a4 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d7d8:	23fa      	movs	r3, #250	@ 0xfa
 800d7da:	011a      	lsls	r2, r3, #4
 800d7dc:	23fa      	movs	r3, #250	@ 0xfa
 800d7de:	0119      	lsls	r1, r3, #4
 800d7e0:	23fa      	movs	r3, #250	@ 0xfa
 800d7e2:	011b      	lsls	r3, r3, #4
 800d7e4:	0018      	movs	r0, r3
 800d7e6:	f7ff fea7 	bl	800d538 <SetVocLED>
return;
 800d7ea:	46c0      	nop			@ (mov r8, r8)
}
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <SetAllREDLED>:

void SetAllREDLED() {
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = 0;
 800d7f4:	2380      	movs	r3, #128	@ 0x80
 800d7f6:	05db      	lsls	r3, r3, #23
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800d7fc:	2380      	movs	r3, #128	@ 0x80
 800d7fe:	05db      	lsls	r3, r3, #23
 800d800:	22fa      	movs	r2, #250	@ 0xfa
 800d802:	0112      	lsls	r2, r2, #4
 800d804:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800d806:	2380      	movs	r3, #128	@ 0x80
 800d808:	05db      	lsls	r3, r3, #23
 800d80a:	22fa      	movs	r2, #250	@ 0xfa
 800d80c:	0112      	lsls	r2, r2, #4
 800d80e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 0;
 800d810:	4b0c      	ldr	r3, [pc, #48]	@ (800d844 <SetAllREDLED+0x54>)
 800d812:	2200      	movs	r2, #0
 800d814:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800d816:	4b0b      	ldr	r3, [pc, #44]	@ (800d844 <SetAllREDLED+0x54>)
 800d818:	22fa      	movs	r2, #250	@ 0xfa
 800d81a:	0112      	lsls	r2, r2, #4
 800d81c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800d81e:	4b09      	ldr	r3, [pc, #36]	@ (800d844 <SetAllREDLED+0x54>)
 800d820:	22fa      	movs	r2, #250	@ 0xfa
 800d822:	0112      	lsls	r2, r2, #4
 800d824:	63da      	str	r2, [r3, #60]	@ 0x3c

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 800d826:	4b08      	ldr	r3, [pc, #32]	@ (800d848 <SetAllREDLED+0x58>)
 800d828:	2200      	movs	r2, #0
 800d82a:	2101      	movs	r1, #1
 800d82c:	0018      	movs	r0, r3
 800d82e:	f002 ff36 	bl	801069e <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800d832:	23fa      	movs	r3, #250	@ 0xfa
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	0018      	movs	r0, r3
 800d838:	f001 fcaa 	bl	800f190 <HAL_Delay>
}
 800d83c:	46c0      	nop			@ (mov r8, r8)
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	46c0      	nop			@ (mov r8, r8)
 800d844:	40000400 	.word	0x40000400
 800d848:	50000400 	.word	0x50000400

0800d84c <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 800d84c:	b5b0      	push	{r4, r5, r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	0002      	movs	r2, r0
 800d854:	1dbb      	adds	r3, r7, #6
 800d856:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 800d858:	1dbb      	adds	r3, r7, #6
 800d85a:	881b      	ldrh	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d05a      	beq.n	800d916 <SetVOCindicator+0xca>
 800d860:	1dbb      	adds	r3, r7, #6
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	2b64      	cmp	r3, #100	@ 0x64
 800d866:	d856      	bhi.n	800d916 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 800d868:	1dbb      	adds	r3, r7, #6
 800d86a:	881b      	ldrh	r3, [r3, #0]
 800d86c:	0018      	movs	r0, r3
 800d86e:	f7f5 fda7 	bl	80033c0 <__aeabi_i2d>
 800d872:	2200      	movs	r2, #0
 800d874:	4b5f      	ldr	r3, [pc, #380]	@ (800d9f4 <SetVOCindicator+0x1a8>)
 800d876:	f7f4 fa9d 	bl	8001db4 <__aeabi_ddiv>
 800d87a:	0002      	movs	r2, r0
 800d87c:	000b      	movs	r3, r1
 800d87e:	2000      	movs	r0, #0
 800d880:	495d      	ldr	r1, [pc, #372]	@ (800d9f8 <SetVOCindicator+0x1ac>)
 800d882:	f7f5 f9a3 	bl	8002bcc <__aeabi_dsub>
 800d886:	0002      	movs	r2, r0
 800d888:	000b      	movs	r3, r1
 800d88a:	0014      	movs	r4, r2
 800d88c:	001d      	movs	r5, r3
 800d88e:	4b5b      	ldr	r3, [pc, #364]	@ (800d9fc <SetVOCindicator+0x1b0>)
 800d890:	881b      	ldrh	r3, [r3, #0]
 800d892:	0018      	movs	r0, r3
 800d894:	f7f5 fd94 	bl	80033c0 <__aeabi_i2d>
 800d898:	0002      	movs	r2, r0
 800d89a:	000b      	movs	r3, r1
 800d89c:	0020      	movs	r0, r4
 800d89e:	0029      	movs	r1, r5
 800d8a0:	f7f4 fecc 	bl	800263c <__aeabi_dmul>
 800d8a4:	0002      	movs	r2, r0
 800d8a6:	000b      	movs	r3, r1
 800d8a8:	0010      	movs	r0, r2
 800d8aa:	0019      	movs	r1, r3
 800d8ac:	f7f2 fece 	bl	800064c <__aeabi_d2uiz>
 800d8b0:	0003      	movs	r3, r0
 800d8b2:	b29a      	uxth	r2, r3
 800d8b4:	4b52      	ldr	r3, [pc, #328]	@ (800da00 <SetVOCindicator+0x1b4>)
 800d8b6:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 800d8b8:	1dbb      	adds	r3, r7, #6
 800d8ba:	881b      	ldrh	r3, [r3, #0]
 800d8bc:	0018      	movs	r0, r3
 800d8be:	f7f5 fd7f 	bl	80033c0 <__aeabi_i2d>
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	4b4b      	ldr	r3, [pc, #300]	@ (800d9f4 <SetVOCindicator+0x1a8>)
 800d8c6:	f7f4 fa75 	bl	8001db4 <__aeabi_ddiv>
 800d8ca:	0002      	movs	r2, r0
 800d8cc:	000b      	movs	r3, r1
 800d8ce:	0014      	movs	r4, r2
 800d8d0:	001d      	movs	r5, r3
 800d8d2:	4b4a      	ldr	r3, [pc, #296]	@ (800d9fc <SetVOCindicator+0x1b0>)
 800d8d4:	881b      	ldrh	r3, [r3, #0]
 800d8d6:	0018      	movs	r0, r3
 800d8d8:	f7f5 fd72 	bl	80033c0 <__aeabi_i2d>
 800d8dc:	0002      	movs	r2, r0
 800d8de:	000b      	movs	r3, r1
 800d8e0:	0020      	movs	r0, r4
 800d8e2:	0029      	movs	r1, r5
 800d8e4:	f7f4 feaa 	bl	800263c <__aeabi_dmul>
 800d8e8:	0002      	movs	r2, r0
 800d8ea:	000b      	movs	r3, r1
 800d8ec:	0010      	movs	r0, r2
 800d8ee:	0019      	movs	r1, r3
 800d8f0:	f7f2 feac 	bl	800064c <__aeabi_d2uiz>
 800d8f4:	0003      	movs	r3, r0
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	4b42      	ldr	r3, [pc, #264]	@ (800da04 <SetVOCindicator+0x1b8>)
 800d8fa:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 800d8fc:	4b3f      	ldr	r3, [pc, #252]	@ (800d9fc <SetVOCindicator+0x1b0>)
 800d8fe:	881a      	ldrh	r2, [r3, #0]
 800d900:	4b41      	ldr	r3, [pc, #260]	@ (800da08 <SetVOCindicator+0x1bc>)
 800d902:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d904:	4b40      	ldr	r3, [pc, #256]	@ (800da08 <SetVOCindicator+0x1bc>)
 800d906:	8818      	ldrh	r0, [r3, #0]
 800d908:	4b3d      	ldr	r3, [pc, #244]	@ (800da00 <SetVOCindicator+0x1b4>)
 800d90a:	8819      	ldrh	r1, [r3, #0]
 800d90c:	4b3d      	ldr	r3, [pc, #244]	@ (800da04 <SetVOCindicator+0x1b8>)
 800d90e:	881b      	ldrh	r3, [r3, #0]
 800d910:	001a      	movs	r2, r3
 800d912:	f7ff fe11 	bl	800d538 <SetVocLED>
  }
  if(VOCi > 100){
 800d916:	1dbb      	adds	r3, r7, #6
 800d918:	881b      	ldrh	r3, [r3, #0]
 800d91a:	2b64      	cmp	r3, #100	@ 0x64
 800d91c:	d966      	bls.n	800d9ec <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 800d91e:	1dbb      	adds	r3, r7, #6
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	0018      	movs	r0, r3
 800d924:	f7f5 fd4c 	bl	80033c0 <__aeabi_i2d>
 800d928:	2200      	movs	r2, #0
 800d92a:	4b32      	ldr	r3, [pc, #200]	@ (800d9f4 <SetVOCindicator+0x1a8>)
 800d92c:	f7f5 f94e 	bl	8002bcc <__aeabi_dsub>
 800d930:	0002      	movs	r2, r0
 800d932:	000b      	movs	r3, r1
 800d934:	0010      	movs	r0, r2
 800d936:	0019      	movs	r1, r3
 800d938:	2200      	movs	r2, #0
 800d93a:	4b34      	ldr	r3, [pc, #208]	@ (800da0c <SetVOCindicator+0x1c0>)
 800d93c:	f7f4 fa3a 	bl	8001db4 <__aeabi_ddiv>
 800d940:	0002      	movs	r2, r0
 800d942:	000b      	movs	r3, r1
 800d944:	0014      	movs	r4, r2
 800d946:	001d      	movs	r5, r3
 800d948:	4b2c      	ldr	r3, [pc, #176]	@ (800d9fc <SetVOCindicator+0x1b0>)
 800d94a:	881b      	ldrh	r3, [r3, #0]
 800d94c:	0018      	movs	r0, r3
 800d94e:	f7f5 fd37 	bl	80033c0 <__aeabi_i2d>
 800d952:	0002      	movs	r2, r0
 800d954:	000b      	movs	r3, r1
 800d956:	0020      	movs	r0, r4
 800d958:	0029      	movs	r1, r5
 800d95a:	f7f4 fe6f 	bl	800263c <__aeabi_dmul>
 800d95e:	0002      	movs	r2, r0
 800d960:	000b      	movs	r3, r1
 800d962:	0010      	movs	r0, r2
 800d964:	0019      	movs	r1, r3
 800d966:	f7f2 fe71 	bl	800064c <__aeabi_d2uiz>
 800d96a:	0003      	movs	r3, r0
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	4b24      	ldr	r3, [pc, #144]	@ (800da00 <SetVOCindicator+0x1b4>)
 800d970:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 800d972:	1dbb      	adds	r3, r7, #6
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	0018      	movs	r0, r3
 800d978:	f7f5 fd22 	bl	80033c0 <__aeabi_i2d>
 800d97c:	2200      	movs	r2, #0
 800d97e:	4b1d      	ldr	r3, [pc, #116]	@ (800d9f4 <SetVOCindicator+0x1a8>)
 800d980:	f7f5 f924 	bl	8002bcc <__aeabi_dsub>
 800d984:	0002      	movs	r2, r0
 800d986:	000b      	movs	r3, r1
 800d988:	0010      	movs	r0, r2
 800d98a:	0019      	movs	r1, r3
 800d98c:	2200      	movs	r2, #0
 800d98e:	4b1f      	ldr	r3, [pc, #124]	@ (800da0c <SetVOCindicator+0x1c0>)
 800d990:	f7f4 fa10 	bl	8001db4 <__aeabi_ddiv>
 800d994:	0002      	movs	r2, r0
 800d996:	000b      	movs	r3, r1
 800d998:	2000      	movs	r0, #0
 800d99a:	4917      	ldr	r1, [pc, #92]	@ (800d9f8 <SetVOCindicator+0x1ac>)
 800d99c:	f7f5 f916 	bl	8002bcc <__aeabi_dsub>
 800d9a0:	0002      	movs	r2, r0
 800d9a2:	000b      	movs	r3, r1
 800d9a4:	0014      	movs	r4, r2
 800d9a6:	001d      	movs	r5, r3
 800d9a8:	4b14      	ldr	r3, [pc, #80]	@ (800d9fc <SetVOCindicator+0x1b0>)
 800d9aa:	881b      	ldrh	r3, [r3, #0]
 800d9ac:	0018      	movs	r0, r3
 800d9ae:	f7f5 fd07 	bl	80033c0 <__aeabi_i2d>
 800d9b2:	0002      	movs	r2, r0
 800d9b4:	000b      	movs	r3, r1
 800d9b6:	0020      	movs	r0, r4
 800d9b8:	0029      	movs	r1, r5
 800d9ba:	f7f4 fe3f 	bl	800263c <__aeabi_dmul>
 800d9be:	0002      	movs	r2, r0
 800d9c0:	000b      	movs	r3, r1
 800d9c2:	0010      	movs	r0, r2
 800d9c4:	0019      	movs	r1, r3
 800d9c6:	f7f2 fe41 	bl	800064c <__aeabi_d2uiz>
 800d9ca:	0003      	movs	r3, r0
 800d9cc:	b29a      	uxth	r2, r3
 800d9ce:	4b0e      	ldr	r3, [pc, #56]	@ (800da08 <SetVOCindicator+0x1bc>)
 800d9d0:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 800d9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d9fc <SetVOCindicator+0x1b0>)
 800d9d4:	881a      	ldrh	r2, [r3, #0]
 800d9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800da04 <SetVOCindicator+0x1b8>)
 800d9d8:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 800d9da:	4b0b      	ldr	r3, [pc, #44]	@ (800da08 <SetVOCindicator+0x1bc>)
 800d9dc:	8818      	ldrh	r0, [r3, #0]
 800d9de:	4b08      	ldr	r3, [pc, #32]	@ (800da00 <SetVOCindicator+0x1b4>)
 800d9e0:	8819      	ldrh	r1, [r3, #0]
 800d9e2:	4b08      	ldr	r3, [pc, #32]	@ (800da04 <SetVOCindicator+0x1b8>)
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	001a      	movs	r2, r3
 800d9e8:	f7ff fda6 	bl	800d538 <SetVocLED>
  }

}
 800d9ec:	46c0      	nop			@ (mov r8, r8)
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	b002      	add	sp, #8
 800d9f2:	bdb0      	pop	{r4, r5, r7, pc}
 800d9f4:	40590000 	.word	0x40590000
 800d9f8:	3ff00000 	.word	0x3ff00000
 800d9fc:	200000ce 	.word	0x200000ce
 800da00:	20001c2a 	.word	0x20001c2a
 800da04:	20001c2c 	.word	0x20001c2c
 800da08:	20001c2e 	.word	0x20001c2e
 800da0c:	40790000 	.word	0x40790000

0800da10 <powerCheck>:

Battery_Status powerCheck(){
 800da10:	b590      	push	{r4, r7, lr}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800da16:	f7f8 fe1b 	bl	8006650 <Check_USB_PowerOn>
 800da1a:	0003      	movs	r3, r0
 800da1c:	001a      	movs	r2, r3
 800da1e:	2301      	movs	r3, #1
 800da20:	4053      	eors	r3, r2
 800da22:	b2db      	uxtb	r3, r3
 800da24:	2b00      	cmp	r3, #0
 800da26:	d005      	beq.n	800da34 <powerCheck+0x24>
    status = batteryChargeCheck();
 800da28:	1dfc      	adds	r4, r7, #7
 800da2a:	f7ff fc65 	bl	800d2f8 <batteryChargeCheck>
 800da2e:	0003      	movs	r3, r0
 800da30:	7023      	strb	r3, [r4, #0]
 800da32:	e002      	b.n	800da3a <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800da34:	1dfb      	adds	r3, r7, #7
 800da36:	2204      	movs	r2, #4
 800da38:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800da3a:	1dfb      	adds	r3, r7, #7
 800da3c:	781b      	ldrb	r3, [r3, #0]
}
 800da3e:	0018      	movs	r0, r3
 800da40:	46bd      	mov	sp, r7
 800da42:	b003      	add	sp, #12
 800da44:	bd90      	pop	{r4, r7, pc}
	...

0800da48 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	0002      	movs	r2, r0
 800da50:	1dfb      	adds	r3, r7, #7
 800da52:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800da54:	1dfb      	adds	r3, r7, #7
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	2b04      	cmp	r3, #4
 800da5a:	d105      	bne.n	800da68 <powerDisplay+0x20>
    Debug("USB power detected, LED's are okay");
 800da5c:	4a18      	ldr	r2, [pc, #96]	@ (800dac0 <powerDisplay+0x78>)
 800da5e:	4b19      	ldr	r3, [pc, #100]	@ (800dac4 <powerDisplay+0x7c>)
 800da60:	0019      	movs	r1, r3
 800da62:	2003      	movs	r0, #3
 800da64:	f000 ff46 	bl	800e8f4 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800da68:	1dfb      	adds	r3, r7, #7
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	2b03      	cmp	r3, #3
 800da6e:	d105      	bne.n	800da7c <powerDisplay+0x34>
    Debug("Battery fully charged");
 800da70:	4a15      	ldr	r2, [pc, #84]	@ (800dac8 <powerDisplay+0x80>)
 800da72:	4b14      	ldr	r3, [pc, #80]	@ (800dac4 <powerDisplay+0x7c>)
 800da74:	0019      	movs	r1, r3
 800da76:	2003      	movs	r0, #3
 800da78:	f000 ff3c 	bl	800e8f4 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800da7c:	1dfb      	adds	r3, r7, #7
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	2b02      	cmp	r3, #2
 800da82:	d105      	bne.n	800da90 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800da84:	4a11      	ldr	r2, [pc, #68]	@ (800dacc <powerDisplay+0x84>)
 800da86:	4b0f      	ldr	r3, [pc, #60]	@ (800dac4 <powerDisplay+0x7c>)
 800da88:	0019      	movs	r1, r3
 800da8a:	2003      	movs	r0, #3
 800da8c:	f000 ff32 	bl	800e8f4 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800da90:	1dfb      	adds	r3, r7, #7
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	2b01      	cmp	r3, #1
 800da96:	d105      	bne.n	800daa4 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800da98:	4a0d      	ldr	r2, [pc, #52]	@ (800dad0 <powerDisplay+0x88>)
 800da9a:	4b0a      	ldr	r3, [pc, #40]	@ (800dac4 <powerDisplay+0x7c>)
 800da9c:	0019      	movs	r1, r3
 800da9e:	2003      	movs	r0, #3
 800daa0:	f000 ff28 	bl	800e8f4 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800daa4:	1dfb      	adds	r3, r7, #7
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d105      	bne.n	800dab8 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800daac:	4a09      	ldr	r2, [pc, #36]	@ (800dad4 <powerDisplay+0x8c>)
 800daae:	4b05      	ldr	r3, [pc, #20]	@ (800dac4 <powerDisplay+0x7c>)
 800dab0:	0019      	movs	r1, r3
 800dab2:	2003      	movs	r0, #3
 800dab4:	f000 ff1e 	bl	800e8f4 <CreateLine>
  }
}
 800dab8:	46c0      	nop			@ (mov r8, r8)
 800daba:	46bd      	mov	sp, r7
 800dabc:	b002      	add	sp, #8
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	080254dc 	.word	0x080254dc
 800dac4:	08025500 	.word	0x08025500
 800dac8:	08025504 	.word	0x08025504
 800dacc:	0802551c 	.word	0x0802551c
 800dad0:	0802553c 	.word	0x0802553c
 800dad4:	08025554 	.word	0x08025554

0800dad8 <configCheck>:

void configCheck(){
 800dad8:	b590      	push	{r4, r7, lr}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800dade:	f7f8 fdc6 	bl	800666e <BootButton_Pressed>
 800dae2:	1e03      	subs	r3, r0, #0
 800dae4:	d007      	beq.n	800daf6 <configCheck+0x1e>
 800dae6:	f7f8 fdd3 	bl	8006690 <UserButton_Pressed>
 800daea:	1e03      	subs	r3, r0, #0
 800daec:	d003      	beq.n	800daf6 <configCheck+0x1e>
    configSet = true;
 800daee:	4bb2      	ldr	r3, [pc, #712]	@ (800ddb8 <configCheck+0x2e0>)
 800daf0:	2201      	movs	r2, #1
 800daf2:	701a      	strb	r2, [r3, #0]
 800daf4:	e00a      	b.n	800db0c <configCheck+0x34>
  }
  else{
    configSet = false;
 800daf6:	4bb0      	ldr	r3, [pc, #704]	@ (800ddb8 <configCheck+0x2e0>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800dafc:	f001 fb3e 	bl	800f17c <HAL_GetTick>
 800db00:	0003      	movs	r3, r0
 800db02:	22fa      	movs	r2, #250	@ 0xfa
 800db04:	00d2      	lsls	r2, r2, #3
 800db06:	189a      	adds	r2, r3, r2
 800db08:	4bac      	ldr	r3, [pc, #688]	@ (800ddbc <configCheck+0x2e4>)
 800db0a:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800db0c:	4baa      	ldr	r3, [pc, #680]	@ (800ddb8 <configCheck+0x2e0>)
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00d      	beq.n	800db30 <configCheck+0x58>
 800db14:	4ba9      	ldr	r3, [pc, #676]	@ (800ddbc <configCheck+0x2e4>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	0018      	movs	r0, r3
 800db1a:	f000 fe95 	bl	800e848 <TimestampIsReached>
 800db1e:	1e03      	subs	r3, r0, #0
 800db20:	d006      	beq.n	800db30 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800db22:	f7f5 ff0d 	bl	8003940 <SetConfigMode>
    SetDBLED(true, true, true);
 800db26:	2201      	movs	r2, #1
 800db28:	2101      	movs	r1, #1
 800db2a:	2001      	movs	r0, #1
 800db2c:	f7ff fcba 	bl	800d4a4 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 800db30:	f7f8 fd9d 	bl	800666e <BootButton_Pressed>
 800db34:	0003      	movs	r3, r0
 800db36:	001a      	movs	r2, r3
 800db38:	2301      	movs	r3, #1
 800db3a:	4053      	eors	r3, r2
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d054      	beq.n	800dbec <configCheck+0x114>
 800db42:	f7f8 fda5 	bl	8006690 <UserButton_Pressed>
 800db46:	1e03      	subs	r3, r0, #0
 800db48:	d050      	beq.n	800dbec <configCheck+0x114>
 800db4a:	4b9d      	ldr	r3, [pc, #628]	@ (800ddc0 <configCheck+0x2e8>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2201      	movs	r2, #1
 800db50:	4053      	eors	r3, r2
 800db52:	b2db      	uxtb	r3, r3
 800db54:	2b00      	cmp	r3, #0
 800db56:	d049      	beq.n	800dbec <configCheck+0x114>
 800db58:	f7f5 ff12 	bl	8003980 <GetReconfigMode>
 800db5c:	0003      	movs	r3, r0
 800db5e:	001a      	movs	r2, r3
 800db60:	2301      	movs	r3, #1
 800db62:	4053      	eors	r3, r2
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	d040      	beq.n	800dbec <configCheck+0x114>
    SetLEDsOff();
 800db6a:	f7ff fe25 	bl	800d7b8 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 800db6e:	4a95      	ldr	r2, [pc, #596]	@ (800ddc4 <configCheck+0x2ec>)
 800db70:	4994      	ldr	r1, [pc, #592]	@ (800ddc4 <configCheck+0x2ec>)
 800db72:	4b94      	ldr	r3, [pc, #592]	@ (800ddc4 <configCheck+0x2ec>)
 800db74:	0018      	movs	r0, r3
 800db76:	f7ff fcdf 	bl	800d538 <SetVocLED>
    HAL_Delay(1500);
 800db7a:	4b93      	ldr	r3, [pc, #588]	@ (800ddc8 <configCheck+0x2f0>)
 800db7c:	0018      	movs	r0, r3
 800db7e:	f001 fb07 	bl	800f190 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 800db82:	23fa      	movs	r3, #250	@ 0xfa
 800db84:	011a      	lsls	r2, r3, #4
 800db86:	23fa      	movs	r3, #250	@ 0xfa
 800db88:	0119      	lsls	r1, r3, #4
 800db8a:	23fa      	movs	r3, #250	@ 0xfa
 800db8c:	011b      	lsls	r3, r3, #4
 800db8e:	0018      	movs	r0, r3
 800db90:	f7ff fcd2 	bl	800d538 <SetVocLED>
    userToggle = !userToggle;
 800db94:	4b8d      	ldr	r3, [pc, #564]	@ (800ddcc <configCheck+0x2f4>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	1e5a      	subs	r2, r3, #1
 800db9a:	4193      	sbcs	r3, r2
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	2201      	movs	r2, #1
 800dba0:	4053      	eors	r3, r2
 800dba2:	b2db      	uxtb	r3, r3
 800dba4:	1c1a      	adds	r2, r3, #0
 800dba6:	2301      	movs	r3, #1
 800dba8:	4013      	ands	r3, r2
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	4b87      	ldr	r3, [pc, #540]	@ (800ddcc <configCheck+0x2f4>)
 800dbae:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800dbb0:	4b86      	ldr	r3, [pc, #536]	@ (800ddcc <configCheck+0x2f4>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <configCheck+0xe4>
      EnabledConnectedDevices();
 800dbb8:	f7fb f836 	bl	8008c28 <EnabledConnectedDevices>
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 800dbbc:	4b83      	ldr	r3, [pc, #524]	@ (800ddcc <configCheck+0x2f4>)
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <configCheck+0xf0>
 800dbc4:	4b82      	ldr	r3, [pc, #520]	@ (800ddd0 <configCheck+0x2f8>)
 800dbc6:	e000      	b.n	800dbca <configCheck+0xf2>
 800dbc8:	4b82      	ldr	r3, [pc, #520]	@ (800ddd4 <configCheck+0x2fc>)
 800dbca:	4a83      	ldr	r2, [pc, #524]	@ (800ddd8 <configCheck+0x300>)
 800dbcc:	4983      	ldr	r1, [pc, #524]	@ (800dddc <configCheck+0x304>)
 800dbce:	2003      	movs	r0, #3
 800dbd0:	f000 fe90 	bl	800e8f4 <CreateLine>
    userbuttonHeld = true;
 800dbd4:	4b7a      	ldr	r3, [pc, #488]	@ (800ddc0 <configCheck+0x2e8>)
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800dbda:	f001 facf 	bl	800f17c <HAL_GetTick>
 800dbde:	0003      	movs	r3, r0
 800dbe0:	22fa      	movs	r2, #250	@ 0xfa
 800dbe2:	00d2      	lsls	r2, r2, #3
 800dbe4:	189a      	adds	r2, r3, r2
 800dbe6:	4b7e      	ldr	r3, [pc, #504]	@ (800dde0 <configCheck+0x308>)
 800dbe8:	601a      	str	r2, [r3, #0]
 800dbea:	e002      	b.n	800dbf2 <configCheck+0x11a>
  }
  else {
    userbuttonHeld = false;
 800dbec:	4b74      	ldr	r3, [pc, #464]	@ (800ddc0 <configCheck+0x2e8>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 800dbf2:	f7f8 fd3c 	bl	800666e <BootButton_Pressed>
 800dbf6:	0003      	movs	r3, r0
 800dbf8:	001a      	movs	r2, r3
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	4053      	eors	r3, r2
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d100      	bne.n	800dc06 <configCheck+0x12e>
 800dc04:	e0a4      	b.n	800dd50 <configCheck+0x278>
 800dc06:	4b6e      	ldr	r3, [pc, #440]	@ (800ddc0 <configCheck+0x2e8>)
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d100      	bne.n	800dc10 <configCheck+0x138>
 800dc0e:	e09f      	b.n	800dd50 <configCheck+0x278>
 800dc10:	4b73      	ldr	r3, [pc, #460]	@ (800dde0 <configCheck+0x308>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	0018      	movs	r0, r3
 800dc16:	f000 fe17 	bl	800e848 <TimestampIsReached>
 800dc1a:	1e03      	subs	r3, r0, #0
 800dc1c:	d100      	bne.n	800dc20 <configCheck+0x148>
 800dc1e:	e097      	b.n	800dd50 <configCheck+0x278>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800dc20:	f7fa fd54 	bl	80086cc <GetPMSensorPresence>
 800dc24:	1e03      	subs	r3, r0, #0
 800dc26:	d100      	bne.n	800dc2a <configCheck+0x152>
 800dc28:	e082      	b.n	800dd30 <configCheck+0x258>
 800dc2a:	4b6e      	ldr	r3, [pc, #440]	@ (800dde4 <configCheck+0x30c>)
 800dc2c:	791b      	ldrb	r3, [r3, #4]
 800dc2e:	2b34      	cmp	r3, #52	@ 0x34
 800dc30:	d004      	beq.n	800dc3c <configCheck+0x164>
 800dc32:	4b6c      	ldr	r3, [pc, #432]	@ (800dde4 <configCheck+0x30c>)
 800dc34:	791b      	ldrb	r3, [r3, #4]
 800dc36:	2b35      	cmp	r3, #53	@ 0x35
 800dc38:	d000      	beq.n	800dc3c <configCheck+0x164>
 800dc3a:	e079      	b.n	800dd30 <configCheck+0x258>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800dc3c:	4b6a      	ldr	r3, [pc, #424]	@ (800dde8 <configCheck+0x310>)
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	1e5a      	subs	r2, r3, #1
 800dc42:	4193      	sbcs	r3, r2
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	2201      	movs	r2, #1
 800dc48:	4053      	eors	r3, r2
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	1c1a      	adds	r2, r3, #0
 800dc4e:	2301      	movs	r3, #1
 800dc50:	4013      	ands	r3, r2
 800dc52:	b2da      	uxtb	r2, r3
 800dc54:	4b64      	ldr	r3, [pc, #400]	@ (800dde8 <configCheck+0x310>)
 800dc56:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800dc58:	4b63      	ldr	r3, [pc, #396]	@ (800dde8 <configCheck+0x310>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d005      	beq.n	800dc6c <configCheck+0x194>
 800dc60:	1dbc      	adds	r4, r7, #6
 800dc62:	f7ff fba3 	bl	800d3ac <Calculate_LED_ON>
 800dc66:	0003      	movs	r3, r0
 800dc68:	8023      	strh	r3, [r4, #0]
 800dc6a:	e003      	b.n	800dc74 <configCheck+0x19c>
        else color = 4000;
 800dc6c:	1dbb      	adds	r3, r7, #6
 800dc6e:	22fa      	movs	r2, #250	@ 0xfa
 800dc70:	0112      	lsls	r2, r2, #4
 800dc72:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800dc74:	4b5c      	ldr	r3, [pc, #368]	@ (800dde8 <configCheck+0x310>)
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <configCheck+0x1a8>
 800dc7c:	4b5b      	ldr	r3, [pc, #364]	@ (800ddec <configCheck+0x314>)
 800dc7e:	e000      	b.n	800dc82 <configCheck+0x1aa>
 800dc80:	4b5b      	ldr	r3, [pc, #364]	@ (800ddf0 <configCheck+0x318>)
 800dc82:	4a5c      	ldr	r2, [pc, #368]	@ (800ddf4 <configCheck+0x31c>)
 800dc84:	495c      	ldr	r1, [pc, #368]	@ (800ddf8 <configCheck+0x320>)
 800dc86:	2002      	movs	r0, #2
 800dc88:	f000 fe34 	bl	800e8f4 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800dc8c:	1d7b      	adds	r3, r7, #5
 800dc8e:	2200      	movs	r2, #0
 800dc90:	701a      	strb	r2, [r3, #0]
 800dc92:	e028      	b.n	800dce6 <configCheck+0x20e>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800dc94:	f7ff fb8a 	bl	800d3ac <Calculate_LED_ON>
 800dc98:	0003      	movs	r3, r0
 800dc9a:	001a      	movs	r2, r3
 800dc9c:	4b57      	ldr	r3, [pc, #348]	@ (800ddfc <configCheck+0x324>)
 800dc9e:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800dca0:	4b56      	ldr	r3, [pc, #344]	@ (800ddfc <configCheck+0x324>)
 800dca2:	1dba      	adds	r2, r7, #6
 800dca4:	8812      	ldrh	r2, [r2, #0]
 800dca6:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800dca8:	4b54      	ldr	r3, [pc, #336]	@ (800ddfc <configCheck+0x324>)
 800dcaa:	1dba      	adds	r2, r7, #6
 800dcac:	8812      	ldrh	r2, [r2, #0]
 800dcae:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800dcb0:	23c8      	movs	r3, #200	@ 0xc8
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	0018      	movs	r0, r3
 800dcb6:	f001 fa6b 	bl	800f190 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800dcba:	4b50      	ldr	r3, [pc, #320]	@ (800ddfc <configCheck+0x324>)
 800dcbc:	22fa      	movs	r2, #250	@ 0xfa
 800dcbe:	0112      	lsls	r2, r2, #4
 800dcc0:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800dcc2:	4b4e      	ldr	r3, [pc, #312]	@ (800ddfc <configCheck+0x324>)
 800dcc4:	22fa      	movs	r2, #250	@ 0xfa
 800dcc6:	0112      	lsls	r2, r2, #4
 800dcc8:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800dcca:	4b4c      	ldr	r3, [pc, #304]	@ (800ddfc <configCheck+0x324>)
 800dccc:	22fa      	movs	r2, #250	@ 0xfa
 800dcce:	0112      	lsls	r2, r2, #4
 800dcd0:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800dcd2:	23c8      	movs	r3, #200	@ 0xc8
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	0018      	movs	r0, r3
 800dcd8:	f001 fa5a 	bl	800f190 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800dcdc:	1d7b      	adds	r3, r7, #5
 800dcde:	781a      	ldrb	r2, [r3, #0]
 800dce0:	1d7b      	adds	r3, r7, #5
 800dce2:	3201      	adds	r2, #1
 800dce4:	701a      	strb	r2, [r3, #0]
 800dce6:	1d7b      	adds	r3, r7, #5
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d9d2      	bls.n	800dc94 <configCheck+0x1bc>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 800dcee:	4b37      	ldr	r3, [pc, #220]	@ (800ddcc <configCheck+0x2f4>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	1e5a      	subs	r2, r3, #1
 800dcf4:	4193      	sbcs	r3, r2
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	4053      	eors	r3, r2
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	1c1a      	adds	r2, r3, #0
 800dd00:	2301      	movs	r3, #1
 800dd02:	4013      	ands	r3, r2
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	4b31      	ldr	r3, [pc, #196]	@ (800ddcc <configCheck+0x2f4>)
 800dd08:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800dd0a:	4b30      	ldr	r3, [pc, #192]	@ (800ddcc <configCheck+0x2f4>)
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d001      	beq.n	800dd16 <configCheck+0x23e>
 800dd12:	4b36      	ldr	r3, [pc, #216]	@ (800ddec <configCheck+0x314>)
 800dd14:	e000      	b.n	800dd18 <configCheck+0x240>
 800dd16:	4b36      	ldr	r3, [pc, #216]	@ (800ddf0 <configCheck+0x318>)
 800dd18:	4a39      	ldr	r2, [pc, #228]	@ (800de00 <configCheck+0x328>)
 800dd1a:	4937      	ldr	r1, [pc, #220]	@ (800ddf8 <configCheck+0x320>)
 800dd1c:	2002      	movs	r0, #2
 800dd1e:	f000 fde9 	bl	800e8f4 <CreateLine>
      if (usbPluggedIn) {
 800dd22:	4b38      	ldr	r3, [pc, #224]	@ (800de04 <configCheck+0x32c>)
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d009      	beq.n	800dd3e <configCheck+0x266>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800dd2a:	f7fc f86d 	bl	8009e08 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800dd2e:	e006      	b.n	800dd3e <configCheck+0x266>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800dd30:	4a35      	ldr	r2, [pc, #212]	@ (800de08 <configCheck+0x330>)
 800dd32:	4b31      	ldr	r3, [pc, #196]	@ (800ddf8 <configCheck+0x320>)
 800dd34:	0019      	movs	r1, r3
 800dd36:	2002      	movs	r0, #2
 800dd38:	f000 fddc 	bl	800e8f4 <CreateLine>
 800dd3c:	e000      	b.n	800dd40 <configCheck+0x268>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800dd3e:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800dd40:	46c0      	nop			@ (mov r8, r8)
 800dd42:	f7f8 fca5 	bl	8006690 <UserButton_Pressed>
 800dd46:	1e03      	subs	r3, r0, #0
 800dd48:	d1fb      	bne.n	800dd42 <configCheck+0x26a>
    }
    userbuttonHeld = false;
 800dd4a:	4b1d      	ldr	r3, [pc, #116]	@ (800ddc0 <configCheck+0x2e8>)
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800dd50:	f7f8 fc8d 	bl	800666e <BootButton_Pressed>
 800dd54:	0003      	movs	r3, r0
 800dd56:	001a      	movs	r2, r3
 800dd58:	2301      	movs	r3, #1
 800dd5a:	4053      	eors	r3, r2
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00b      	beq.n	800dd7a <configCheck+0x2a2>
 800dd62:	f7f8 fc95 	bl	8006690 <UserButton_Pressed>
 800dd66:	0003      	movs	r3, r0
 800dd68:	001a      	movs	r2, r3
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	4053      	eors	r3, r2
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d002      	beq.n	800dd7a <configCheck+0x2a2>
    userbuttonHeld = false;
 800dd74:	4b12      	ldr	r3, [pc, #72]	@ (800ddc0 <configCheck+0x2e8>)
 800dd76:	2200      	movs	r2, #0
 800dd78:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 800dd7a:	f7f8 fc69 	bl	8006650 <Check_USB_PowerOn>
 800dd7e:	1e03      	subs	r3, r0, #0
 800dd80:	d003      	beq.n	800dd8a <configCheck+0x2b2>
    usbPluggedIn = true;
 800dd82:	4b20      	ldr	r3, [pc, #128]	@ (800de04 <configCheck+0x32c>)
 800dd84:	2201      	movs	r2, #1
 800dd86:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 800dd88:	e012      	b.n	800ddb0 <configCheck+0x2d8>
    if(!userToggle && !init){
 800dd8a:	4b10      	ldr	r3, [pc, #64]	@ (800ddcc <configCheck+0x2f4>)
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	4053      	eors	r3, r2
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d008      	beq.n	800ddaa <configCheck+0x2d2>
 800dd98:	4b1c      	ldr	r3, [pc, #112]	@ (800de0c <configCheck+0x334>)
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	4053      	eors	r3, r2
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d001      	beq.n	800ddaa <configCheck+0x2d2>
      SetLEDsOff();
 800dda6:	f7ff fd07 	bl	800d7b8 <SetLEDsOff>
    usbPluggedIn = false;
 800ddaa:	4b16      	ldr	r3, [pc, #88]	@ (800de04 <configCheck+0x32c>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	701a      	strb	r2, [r3, #0]
}
 800ddb0:	46c0      	nop			@ (mov r8, r8)
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	b003      	add	sp, #12
 800ddb6:	bd90      	pop	{r4, r7, pc}
 800ddb8:	20001c14 	.word	0x20001c14
 800ddbc:	20001c1c 	.word	0x20001c1c
 800ddc0:	20001c17 	.word	0x20001c17
 800ddc4:	00000bb8 	.word	0x00000bb8
 800ddc8:	000005dc 	.word	0x000005dc
 800ddcc:	20001c16 	.word	0x20001c16
 800ddd0:	08025578 	.word	0x08025578
 800ddd4:	0802557c 	.word	0x0802557c
 800ddd8:	08025580 	.word	0x08025580
 800dddc:	08025500 	.word	0x08025500
 800dde0:	20001c20 	.word	0x20001c20
 800dde4:	20000c88 	.word	0x20000c88
 800dde8:	20000c86 	.word	0x20000c86
 800ddec:	080255a0 	.word	0x080255a0
 800ddf0:	080255a8 	.word	0x080255a8
 800ddf4:	080255b4 	.word	0x080255b4
 800ddf8:	080255d4 	.word	0x080255d4
 800ddfc:	40000400 	.word	0x40000400
 800de00:	080255d8 	.word	0x080255d8
 800de04:	20001c15 	.word	0x20001c15
 800de08:	080255f0 	.word	0x080255f0
 800de0c:	200000cc 	.word	0x200000cc

0800de10 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800de10:	b590      	push	{r4, r7, lr}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800de16:	1dfc      	adds	r4, r7, #7
 800de18:	f7ff fdfa 	bl	800da10 <powerCheck>
 800de1c:	0003      	movs	r3, r0
 800de1e:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800de20:	1dfb      	adds	r3, r7, #7
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	0018      	movs	r0, r3
 800de26:	f7ff fe0f 	bl	800da48 <powerDisplay>
  return status;
 800de2a:	1dfb      	adds	r3, r7, #7
 800de2c:	781b      	ldrb	r3, [r3, #0]
}
 800de2e:	0018      	movs	r0, r3
 800de30:	46bd      	mov	sp, r7
 800de32:	b003      	add	sp, #12
 800de34:	bd90      	pop	{r4, r7, pc}
	...

0800de38 <setuserToggle>:

void setuserToggle(void) {
 800de38:	b580      	push	{r7, lr}
 800de3a:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800de3c:	f7ff fde8 	bl	800da10 <powerCheck>
 800de40:	0003      	movs	r3, r0
 800de42:	2b04      	cmp	r3, #4
 800de44:	d004      	beq.n	800de50 <setuserToggle+0x18>
    userToggle = true;
 800de46:	4b04      	ldr	r3, [pc, #16]	@ (800de58 <setuserToggle+0x20>)
 800de48:	2201      	movs	r2, #1
 800de4a:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800de4c:	f7fa feec 	bl	8008c28 <EnabledConnectedDevices>
  }
}
 800de50:	46c0      	nop			@ (mov r8, r8)
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	46c0      	nop			@ (mov r8, r8)
 800de58:	20001c16 	.word	0x20001c16

0800de5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800de60:	4b07      	ldr	r3, [pc, #28]	@ (800de80 <HAL_MspInit+0x24>)
 800de62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de64:	4b06      	ldr	r3, [pc, #24]	@ (800de80 <HAL_MspInit+0x24>)
 800de66:	2101      	movs	r1, #1
 800de68:	430a      	orrs	r2, r1
 800de6a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800de6c:	4b04      	ldr	r3, [pc, #16]	@ (800de80 <HAL_MspInit+0x24>)
 800de6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de70:	4b03      	ldr	r3, [pc, #12]	@ (800de80 <HAL_MspInit+0x24>)
 800de72:	2180      	movs	r1, #128	@ 0x80
 800de74:	0549      	lsls	r1, r1, #21
 800de76:	430a      	orrs	r2, r1
 800de78:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800de7a:	46c0      	nop			@ (mov r8, r8)
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	40021000 	.word	0x40021000

0800de84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800de88:	46c0      	nop			@ (mov r8, r8)
 800de8a:	e7fd      	b.n	800de88 <NMI_Handler+0x4>

0800de8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800de90:	46c0      	nop			@ (mov r8, r8)
 800de92:	e7fd      	b.n	800de90 <HardFault_Handler+0x4>

0800de94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800de98:	46c0      	nop			@ (mov r8, r8)
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dea2:	46c0      	nop			@ (mov r8, r8)
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800deac:	f001 f954 	bl	800f158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 800deb0:	46c0      	nop			@ (mov r8, r8)
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
	...

0800deb8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800debc:	4b03      	ldr	r3, [pc, #12]	@ (800decc <RTC_IRQHandler+0x14>)
 800debe:	0018      	movs	r0, r3
 800dec0:	f008 fe7a 	bl	8016bb8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800dec4:	46c0      	nop			@ (mov r8, r8)
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	46c0      	nop			@ (mov r8, r8)
 800decc:	20000c60 	.word	0x20000c60

0800ded0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800ded4:	2380      	movs	r3, #128	@ 0x80
 800ded6:	021b      	lsls	r3, r3, #8
 800ded8:	0018      	movs	r0, r3
 800deda:	f002 fbfd 	bl	80106d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800dede:	46c0      	nop			@ (mov r8, r8)
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800dee8:	4b05      	ldr	r3, [pc, #20]	@ (800df00 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800deea:	0018      	movs	r0, r3
 800deec:	f001 ff85 	bl	800fdfa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800def0:	4b04      	ldr	r3, [pc, #16]	@ (800df04 <DMA1_Channel2_3_IRQHandler+0x20>)
 800def2:	0018      	movs	r0, r3
 800def4:	f001 ff81 	bl	800fdfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800def8:	46c0      	nop			@ (mov r8, r8)
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	46c0      	nop			@ (mov r8, r8)
 800df00:	20000b04 	.word	0x20000b04
 800df04:	20000abc 	.word	0x20000abc

0800df08 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800df0c:	4b07      	ldr	r3, [pc, #28]	@ (800df2c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800df0e:	0018      	movs	r0, r3
 800df10:	f001 ff73 	bl	800fdfa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800df14:	4b06      	ldr	r3, [pc, #24]	@ (800df30 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800df16:	0018      	movs	r0, r3
 800df18:	f001 ff6f 	bl	800fdfa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800df1c:	4b05      	ldr	r3, [pc, #20]	@ (800df34 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800df1e:	0018      	movs	r0, r3
 800df20:	f001 ff6b 	bl	800fdfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800df24:	46c0      	nop			@ (mov r8, r8)
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	46c0      	nop			@ (mov r8, r8)
 800df2c:	20000b88 	.word	0x20000b88
 800df30:	20001f1c 	.word	0x20001f1c
 800df34:	20001f64 	.word	0x20001f64

0800df38 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800df3c:	4b03      	ldr	r3, [pc, #12]	@ (800df4c <USART4_5_IRQHandler+0x14>)
 800df3e:	0018      	movs	r0, r3
 800df40:	f009 fd34 	bl	80179ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800df44:	46c0      	nop			@ (mov r8, r8)
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	46c0      	nop			@ (mov r8, r8)
 800df4c:	20001e64 	.word	0x20001e64

0800df50 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800df54:	4b09      	ldr	r3, [pc, #36]	@ (800df7c <I2C1_IRQHandler+0x2c>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	699a      	ldr	r2, [r3, #24]
 800df5a:	23e0      	movs	r3, #224	@ 0xe0
 800df5c:	00db      	lsls	r3, r3, #3
 800df5e:	4013      	ands	r3, r2
 800df60:	d004      	beq.n	800df6c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800df62:	4b06      	ldr	r3, [pc, #24]	@ (800df7c <I2C1_IRQHandler+0x2c>)
 800df64:	0018      	movs	r0, r3
 800df66:	f003 f89f 	bl	80110a8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800df6a:	e003      	b.n	800df74 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800df6c:	4b03      	ldr	r3, [pc, #12]	@ (800df7c <I2C1_IRQHandler+0x2c>)
 800df6e:	0018      	movs	r0, r3
 800df70:	f003 f880 	bl	8011074 <HAL_I2C_EV_IRQHandler>
}
 800df74:	46c0      	nop			@ (mov r8, r8)
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	46c0      	nop			@ (mov r8, r8)
 800df7c:	20000a14 	.word	0x20000a14

0800df80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800df84:	4b03      	ldr	r3, [pc, #12]	@ (800df94 <USART1_IRQHandler+0x14>)
 800df86:	0018      	movs	r0, r3
 800df88:	f009 fd10 	bl	80179ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800df8c:	46c0      	nop			@ (mov r8, r8)
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	46c0      	nop			@ (mov r8, r8)
 800df94:	20001dac 	.word	0x20001dac

0800df98 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800df9c:	4b03      	ldr	r3, [pc, #12]	@ (800dfac <USB_IRQHandler+0x14>)
 800df9e:	0018      	movs	r0, r3
 800dfa0:	f005 fc60 	bl	8013864 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800dfa4:	46c0      	nop			@ (mov r8, r8)
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	46c0      	nop			@ (mov r8, r8)
 800dfac:	20002d78 	.word	0x20002d78

0800dfb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	af00      	add	r7, sp, #0
  return 1;
 800dfb4:	2301      	movs	r3, #1
}
 800dfb6:	0018      	movs	r0, r3
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <_kill>:

int _kill(int pid, int sig)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800dfc6:	f012 fbd5 	bl	8020774 <__errno>
 800dfca:	0003      	movs	r3, r0
 800dfcc:	2216      	movs	r2, #22
 800dfce:	601a      	str	r2, [r3, #0]
  return -1;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	425b      	negs	r3, r3
}
 800dfd4:	0018      	movs	r0, r3
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	b002      	add	sp, #8
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <_exit>:

void _exit (int status)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	425a      	negs	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	0011      	movs	r1, r2
 800dfec:	0018      	movs	r0, r3
 800dfee:	f7ff ffe5 	bl	800dfbc <_kill>
  while (1) {}    /* Make sure we hang here */
 800dff2:	46c0      	nop			@ (mov r8, r8)
 800dff4:	e7fd      	b.n	800dff2 <_exit+0x16>

0800dff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dff6:	b580      	push	{r7, lr}
 800dff8:	b086      	sub	sp, #24
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	60f8      	str	r0, [r7, #12]
 800dffe:	60b9      	str	r1, [r7, #8]
 800e000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e002:	2300      	movs	r3, #0
 800e004:	617b      	str	r3, [r7, #20]
 800e006:	e00a      	b.n	800e01e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800e008:	e000      	b.n	800e00c <_read+0x16>
 800e00a:	bf00      	nop
 800e00c:	0001      	movs	r1, r0
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	1c5a      	adds	r2, r3, #1
 800e012:	60ba      	str	r2, [r7, #8]
 800e014:	b2ca      	uxtb	r2, r1
 800e016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	3301      	adds	r3, #1
 800e01c:	617b      	str	r3, [r7, #20]
 800e01e:	697a      	ldr	r2, [r7, #20]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	429a      	cmp	r2, r3
 800e024:	dbf0      	blt.n	800e008 <_read+0x12>
  }

  return len;
 800e026:	687b      	ldr	r3, [r7, #4]
}
 800e028:	0018      	movs	r0, r3
 800e02a:	46bd      	mov	sp, r7
 800e02c:	b006      	add	sp, #24
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <_close>:
  }
  return len;
}

int _close(int file)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800e038:	2301      	movs	r3, #1
 800e03a:	425b      	negs	r3, r3
}
 800e03c:	0018      	movs	r0, r3
 800e03e:	46bd      	mov	sp, r7
 800e040:	b002      	add	sp, #8
 800e042:	bd80      	pop	{r7, pc}

0800e044 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	2280      	movs	r2, #128	@ 0x80
 800e052:	0192      	lsls	r2, r2, #6
 800e054:	605a      	str	r2, [r3, #4]
  return 0;
 800e056:	2300      	movs	r3, #0
}
 800e058:	0018      	movs	r0, r3
 800e05a:	46bd      	mov	sp, r7
 800e05c:	b002      	add	sp, #8
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <_isatty>:

int _isatty(int file)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800e068:	2301      	movs	r3, #1
}
 800e06a:	0018      	movs	r0, r3
 800e06c:	46bd      	mov	sp, r7
 800e06e:	b002      	add	sp, #8
 800e070:	bd80      	pop	{r7, pc}

0800e072 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b084      	sub	sp, #16
 800e076:	af00      	add	r7, sp, #0
 800e078:	60f8      	str	r0, [r7, #12]
 800e07a:	60b9      	str	r1, [r7, #8]
 800e07c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	0018      	movs	r0, r3
 800e082:	46bd      	mov	sp, r7
 800e084:	b004      	add	sp, #16
 800e086:	bd80      	pop	{r7, pc}

0800e088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e090:	4a14      	ldr	r2, [pc, #80]	@ (800e0e4 <_sbrk+0x5c>)
 800e092:	4b15      	ldr	r3, [pc, #84]	@ (800e0e8 <_sbrk+0x60>)
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e09c:	4b13      	ldr	r3, [pc, #76]	@ (800e0ec <_sbrk+0x64>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e0a4:	4b11      	ldr	r3, [pc, #68]	@ (800e0ec <_sbrk+0x64>)
 800e0a6:	4a12      	ldr	r2, [pc, #72]	@ (800e0f0 <_sbrk+0x68>)
 800e0a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e0aa:	4b10      	ldr	r3, [pc, #64]	@ (800e0ec <_sbrk+0x64>)
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	18d3      	adds	r3, r2, r3
 800e0b2:	693a      	ldr	r2, [r7, #16]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d207      	bcs.n	800e0c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e0b8:	f012 fb5c 	bl	8020774 <__errno>
 800e0bc:	0003      	movs	r3, r0
 800e0be:	220c      	movs	r2, #12
 800e0c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	425b      	negs	r3, r3
 800e0c6:	e009      	b.n	800e0dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e0c8:	4b08      	ldr	r3, [pc, #32]	@ (800e0ec <_sbrk+0x64>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e0ce:	4b07      	ldr	r3, [pc, #28]	@ (800e0ec <_sbrk+0x64>)
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	18d2      	adds	r2, r2, r3
 800e0d6:	4b05      	ldr	r3, [pc, #20]	@ (800e0ec <_sbrk+0x64>)
 800e0d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800e0da:	68fb      	ldr	r3, [r7, #12]
}
 800e0dc:	0018      	movs	r0, r3
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	b006      	add	sp, #24
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	20005000 	.word	0x20005000
 800e0e8:	00000400 	.word	0x00000400
 800e0ec:	20001c30 	.word	0x20001c30
 800e0f0:	200033d8 	.word	0x200033d8

0800e0f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e0f8:	46c0      	nop			@ (mov r8, r8)
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
	...

0800e100 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e106:	2310      	movs	r3, #16
 800e108:	18fb      	adds	r3, r7, r3
 800e10a:	0018      	movs	r0, r3
 800e10c:	2308      	movs	r3, #8
 800e10e:	001a      	movs	r2, r3
 800e110:	2100      	movs	r1, #0
 800e112:	f012 fa8b 	bl	802062c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e116:	003b      	movs	r3, r7
 800e118:	0018      	movs	r0, r3
 800e11a:	2310      	movs	r3, #16
 800e11c:	001a      	movs	r2, r3
 800e11e:	2100      	movs	r1, #0
 800e120:	f012 fa84 	bl	802062c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e124:	4b2e      	ldr	r3, [pc, #184]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e126:	2280      	movs	r2, #128	@ 0x80
 800e128:	05d2      	lsls	r2, r2, #23
 800e12a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e12c:	4b2c      	ldr	r3, [pc, #176]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e12e:	2200      	movs	r2, #0
 800e130:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e132:	4b2b      	ldr	r3, [pc, #172]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e134:	2200      	movs	r2, #0
 800e136:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800e138:	4b29      	ldr	r3, [pc, #164]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e13a:	4a2a      	ldr	r2, [pc, #168]	@ (800e1e4 <MX_TIM2_Init+0xe4>)
 800e13c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e13e:	4b28      	ldr	r3, [pc, #160]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e140:	2200      	movs	r2, #0
 800e142:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e144:	4b26      	ldr	r3, [pc, #152]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e146:	2200      	movs	r2, #0
 800e148:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e14a:	4b25      	ldr	r3, [pc, #148]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e14c:	0018      	movs	r0, r3
 800e14e:	f008 fe41 	bl	8016dd4 <HAL_TIM_PWM_Init>
 800e152:	1e03      	subs	r3, r0, #0
 800e154:	d001      	beq.n	800e15a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800e156:	f7fa fa7b 	bl	8008650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e15a:	2110      	movs	r1, #16
 800e15c:	187b      	adds	r3, r7, r1
 800e15e:	2200      	movs	r2, #0
 800e160:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e162:	187b      	adds	r3, r7, r1
 800e164:	2200      	movs	r2, #0
 800e166:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e168:	187a      	adds	r2, r7, r1
 800e16a:	4b1d      	ldr	r3, [pc, #116]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e16c:	0011      	movs	r1, r2
 800e16e:	0018      	movs	r0, r3
 800e170:	f009 f94e 	bl	8017410 <HAL_TIMEx_MasterConfigSynchronization>
 800e174:	1e03      	subs	r3, r0, #0
 800e176:	d001      	beq.n	800e17c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800e178:	f7fa fa6a 	bl	8008650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e17c:	003b      	movs	r3, r7
 800e17e:	2260      	movs	r2, #96	@ 0x60
 800e180:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800e182:	003b      	movs	r3, r7
 800e184:	2200      	movs	r2, #0
 800e186:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e188:	003b      	movs	r3, r7
 800e18a:	2200      	movs	r2, #0
 800e18c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e18e:	003b      	movs	r3, r7
 800e190:	2200      	movs	r2, #0
 800e192:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e194:	0039      	movs	r1, r7
 800e196:	4b12      	ldr	r3, [pc, #72]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e198:	2200      	movs	r2, #0
 800e19a:	0018      	movs	r0, r3
 800e19c:	f008 feec 	bl	8016f78 <HAL_TIM_PWM_ConfigChannel>
 800e1a0:	1e03      	subs	r3, r0, #0
 800e1a2:	d001      	beq.n	800e1a8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800e1a4:	f7fa fa54 	bl	8008650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e1a8:	0039      	movs	r1, r7
 800e1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e1ac:	2208      	movs	r2, #8
 800e1ae:	0018      	movs	r0, r3
 800e1b0:	f008 fee2 	bl	8016f78 <HAL_TIM_PWM_ConfigChannel>
 800e1b4:	1e03      	subs	r3, r0, #0
 800e1b6:	d001      	beq.n	800e1bc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800e1b8:	f7fa fa4a 	bl	8008650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e1bc:	0039      	movs	r1, r7
 800e1be:	4b08      	ldr	r3, [pc, #32]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e1c0:	220c      	movs	r2, #12
 800e1c2:	0018      	movs	r0, r3
 800e1c4:	f008 fed8 	bl	8016f78 <HAL_TIM_PWM_ConfigChannel>
 800e1c8:	1e03      	subs	r3, r0, #0
 800e1ca:	d001      	beq.n	800e1d0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800e1cc:	f7fa fa40 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e1d0:	4b03      	ldr	r3, [pc, #12]	@ (800e1e0 <MX_TIM2_Init+0xe0>)
 800e1d2:	0018      	movs	r0, r3
 800e1d4:	f000 f8fe 	bl	800e3d4 <HAL_TIM_MspPostInit>

}
 800e1d8:	46c0      	nop			@ (mov r8, r8)
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	b006      	add	sp, #24
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	20001c34 	.word	0x20001c34
 800e1e4:	0000ffff 	.word	0x0000ffff

0800e1e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b086      	sub	sp, #24
 800e1ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e1ee:	2310      	movs	r3, #16
 800e1f0:	18fb      	adds	r3, r7, r3
 800e1f2:	0018      	movs	r0, r3
 800e1f4:	2308      	movs	r3, #8
 800e1f6:	001a      	movs	r2, r3
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	f012 fa17 	bl	802062c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e1fe:	003b      	movs	r3, r7
 800e200:	0018      	movs	r0, r3
 800e202:	2310      	movs	r3, #16
 800e204:	001a      	movs	r2, r3
 800e206:	2100      	movs	r1, #0
 800e208:	f012 fa10 	bl	802062c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e20c:	4b32      	ldr	r3, [pc, #200]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e20e:	4a33      	ldr	r2, [pc, #204]	@ (800e2dc <MX_TIM3_Init+0xf4>)
 800e210:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e212:	4b31      	ldr	r3, [pc, #196]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e214:	2200      	movs	r2, #0
 800e216:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e218:	4b2f      	ldr	r3, [pc, #188]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800e21e:	4b2e      	ldr	r3, [pc, #184]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e220:	4a2f      	ldr	r2, [pc, #188]	@ (800e2e0 <MX_TIM3_Init+0xf8>)
 800e222:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e224:	4b2c      	ldr	r3, [pc, #176]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e226:	2200      	movs	r2, #0
 800e228:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e22a:	4b2b      	ldr	r3, [pc, #172]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e230:	4b29      	ldr	r3, [pc, #164]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e232:	0018      	movs	r0, r3
 800e234:	f008 fdce 	bl	8016dd4 <HAL_TIM_PWM_Init>
 800e238:	1e03      	subs	r3, r0, #0
 800e23a:	d001      	beq.n	800e240 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800e23c:	f7fa fa08 	bl	8008650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e240:	2110      	movs	r1, #16
 800e242:	187b      	adds	r3, r7, r1
 800e244:	2200      	movs	r2, #0
 800e246:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e248:	187b      	adds	r3, r7, r1
 800e24a:	2200      	movs	r2, #0
 800e24c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e24e:	187a      	adds	r2, r7, r1
 800e250:	4b21      	ldr	r3, [pc, #132]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e252:	0011      	movs	r1, r2
 800e254:	0018      	movs	r0, r3
 800e256:	f009 f8db 	bl	8017410 <HAL_TIMEx_MasterConfigSynchronization>
 800e25a:	1e03      	subs	r3, r0, #0
 800e25c:	d001      	beq.n	800e262 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800e25e:	f7fa f9f7 	bl	8008650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e262:	003b      	movs	r3, r7
 800e264:	2260      	movs	r2, #96	@ 0x60
 800e266:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800e268:	003b      	movs	r3, r7
 800e26a:	2200      	movs	r2, #0
 800e26c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e26e:	003b      	movs	r3, r7
 800e270:	2200      	movs	r2, #0
 800e272:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e274:	003b      	movs	r3, r7
 800e276:	2200      	movs	r2, #0
 800e278:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e27a:	0039      	movs	r1, r7
 800e27c:	4b16      	ldr	r3, [pc, #88]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e27e:	2200      	movs	r2, #0
 800e280:	0018      	movs	r0, r3
 800e282:	f008 fe79 	bl	8016f78 <HAL_TIM_PWM_ConfigChannel>
 800e286:	1e03      	subs	r3, r0, #0
 800e288:	d001      	beq.n	800e28e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800e28a:	f7fa f9e1 	bl	8008650 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800e28e:	4b12      	ldr	r3, [pc, #72]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e290:	2104      	movs	r1, #4
 800e292:	0018      	movs	r0, r3
 800e294:	f009 f91a 	bl	80174cc <HAL_TIMEx_RemapConfig>
 800e298:	1e03      	subs	r3, r0, #0
 800e29a:	d001      	beq.n	800e2a0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800e29c:	f7fa f9d8 	bl	8008650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e2a0:	0039      	movs	r1, r7
 800e2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e2a4:	2204      	movs	r2, #4
 800e2a6:	0018      	movs	r0, r3
 800e2a8:	f008 fe66 	bl	8016f78 <HAL_TIM_PWM_ConfigChannel>
 800e2ac:	1e03      	subs	r3, r0, #0
 800e2ae:	d001      	beq.n	800e2b4 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800e2b0:	f7fa f9ce 	bl	8008650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e2b4:	0039      	movs	r1, r7
 800e2b6:	4b08      	ldr	r3, [pc, #32]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e2b8:	2208      	movs	r2, #8
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	f008 fe5c 	bl	8016f78 <HAL_TIM_PWM_ConfigChannel>
 800e2c0:	1e03      	subs	r3, r0, #0
 800e2c2:	d001      	beq.n	800e2c8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800e2c4:	f7fa f9c4 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e2c8:	4b03      	ldr	r3, [pc, #12]	@ (800e2d8 <MX_TIM3_Init+0xf0>)
 800e2ca:	0018      	movs	r0, r3
 800e2cc:	f000 f882 	bl	800e3d4 <HAL_TIM_MspPostInit>

}
 800e2d0:	46c0      	nop			@ (mov r8, r8)
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	b006      	add	sp, #24
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	20001c74 	.word	0x20001c74
 800e2dc:	40000400 	.word	0x40000400
 800e2e0:	0000ffff 	.word	0x0000ffff

0800e2e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e2ea:	003b      	movs	r3, r7
 800e2ec:	0018      	movs	r0, r3
 800e2ee:	2308      	movs	r3, #8
 800e2f0:	001a      	movs	r2, r3
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	f012 f99a 	bl	802062c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e2f8:	4b15      	ldr	r3, [pc, #84]	@ (800e350 <MX_TIM6_Init+0x6c>)
 800e2fa:	4a16      	ldr	r2, [pc, #88]	@ (800e354 <MX_TIM6_Init+0x70>)
 800e2fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800e2fe:	4b14      	ldr	r3, [pc, #80]	@ (800e350 <MX_TIM6_Init+0x6c>)
 800e300:	220a      	movs	r2, #10
 800e302:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e304:	4b12      	ldr	r3, [pc, #72]	@ (800e350 <MX_TIM6_Init+0x6c>)
 800e306:	2200      	movs	r2, #0
 800e308:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800e30a:	4b11      	ldr	r3, [pc, #68]	@ (800e350 <MX_TIM6_Init+0x6c>)
 800e30c:	4a12      	ldr	r2, [pc, #72]	@ (800e358 <MX_TIM6_Init+0x74>)
 800e30e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e310:	4b0f      	ldr	r3, [pc, #60]	@ (800e350 <MX_TIM6_Init+0x6c>)
 800e312:	2200      	movs	r2, #0
 800e314:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e316:	4b0e      	ldr	r3, [pc, #56]	@ (800e350 <MX_TIM6_Init+0x6c>)
 800e318:	0018      	movs	r0, r3
 800e31a:	f008 fcb3 	bl	8016c84 <HAL_TIM_Base_Init>
 800e31e:	1e03      	subs	r3, r0, #0
 800e320:	d001      	beq.n	800e326 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800e322:	f7fa f995 	bl	8008650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e326:	003b      	movs	r3, r7
 800e328:	2200      	movs	r2, #0
 800e32a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e32c:	003b      	movs	r3, r7
 800e32e:	2200      	movs	r2, #0
 800e330:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e332:	003a      	movs	r2, r7
 800e334:	4b06      	ldr	r3, [pc, #24]	@ (800e350 <MX_TIM6_Init+0x6c>)
 800e336:	0011      	movs	r1, r2
 800e338:	0018      	movs	r0, r3
 800e33a:	f009 f869 	bl	8017410 <HAL_TIMEx_MasterConfigSynchronization>
 800e33e:	1e03      	subs	r3, r0, #0
 800e340:	d001      	beq.n	800e346 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800e342:	f7fa f985 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e346:	46c0      	nop			@ (mov r8, r8)
 800e348:	46bd      	mov	sp, r7
 800e34a:	b002      	add	sp, #8
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	46c0      	nop			@ (mov r8, r8)
 800e350:	20001cb4 	.word	0x20001cb4
 800e354:	40001000 	.word	0x40001000
 800e358:	0000ffff 	.word	0x0000ffff

0800e35c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	2380      	movs	r3, #128	@ 0x80
 800e36a:	05db      	lsls	r3, r3, #23
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d106      	bne.n	800e37e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e370:	4b0a      	ldr	r3, [pc, #40]	@ (800e39c <HAL_TIM_PWM_MspInit+0x40>)
 800e372:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e374:	4b09      	ldr	r3, [pc, #36]	@ (800e39c <HAL_TIM_PWM_MspInit+0x40>)
 800e376:	2101      	movs	r1, #1
 800e378:	430a      	orrs	r2, r1
 800e37a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800e37c:	e00a      	b.n	800e394 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a07      	ldr	r2, [pc, #28]	@ (800e3a0 <HAL_TIM_PWM_MspInit+0x44>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d105      	bne.n	800e394 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e388:	4b04      	ldr	r3, [pc, #16]	@ (800e39c <HAL_TIM_PWM_MspInit+0x40>)
 800e38a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e38c:	4b03      	ldr	r3, [pc, #12]	@ (800e39c <HAL_TIM_PWM_MspInit+0x40>)
 800e38e:	2102      	movs	r1, #2
 800e390:	430a      	orrs	r2, r1
 800e392:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800e394:	46c0      	nop			@ (mov r8, r8)
 800e396:	46bd      	mov	sp, r7
 800e398:	b002      	add	sp, #8
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	40021000 	.word	0x40021000
 800e3a0:	40000400 	.word	0x40000400

0800e3a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a06      	ldr	r2, [pc, #24]	@ (800e3cc <HAL_TIM_Base_MspInit+0x28>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d105      	bne.n	800e3c2 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800e3b6:	4b06      	ldr	r3, [pc, #24]	@ (800e3d0 <HAL_TIM_Base_MspInit+0x2c>)
 800e3b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e3ba:	4b05      	ldr	r3, [pc, #20]	@ (800e3d0 <HAL_TIM_Base_MspInit+0x2c>)
 800e3bc:	2110      	movs	r1, #16
 800e3be:	430a      	orrs	r2, r1
 800e3c0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800e3c2:	46c0      	nop			@ (mov r8, r8)
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	b002      	add	sp, #8
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	46c0      	nop			@ (mov r8, r8)
 800e3cc:	40001000 	.word	0x40001000
 800e3d0:	40021000 	.word	0x40021000

0800e3d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e3d4:	b590      	push	{r4, r7, lr}
 800e3d6:	b08b      	sub	sp, #44	@ 0x2c
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3dc:	2414      	movs	r4, #20
 800e3de:	193b      	adds	r3, r7, r4
 800e3e0:	0018      	movs	r0, r3
 800e3e2:	2314      	movs	r3, #20
 800e3e4:	001a      	movs	r2, r3
 800e3e6:	2100      	movs	r1, #0
 800e3e8:	f012 f920 	bl	802062c <memset>
  if(timHandle->Instance==TIM2)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681a      	ldr	r2, [r3, #0]
 800e3f0:	2380      	movs	r3, #128	@ 0x80
 800e3f2:	05db      	lsls	r3, r3, #23
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d123      	bne.n	800e440 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3f8:	4b27      	ldr	r3, [pc, #156]	@ (800e498 <HAL_TIM_MspPostInit+0xc4>)
 800e3fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3fc:	4b26      	ldr	r3, [pc, #152]	@ (800e498 <HAL_TIM_MspPostInit+0xc4>)
 800e3fe:	2101      	movs	r1, #1
 800e400:	430a      	orrs	r2, r1
 800e402:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e404:	4b24      	ldr	r3, [pc, #144]	@ (800e498 <HAL_TIM_MspPostInit+0xc4>)
 800e406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e408:	2201      	movs	r2, #1
 800e40a:	4013      	ands	r3, r2
 800e40c:	613b      	str	r3, [r7, #16]
 800e40e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800e410:	0021      	movs	r1, r4
 800e412:	187b      	adds	r3, r7, r1
 800e414:	220d      	movs	r2, #13
 800e416:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e418:	187b      	adds	r3, r7, r1
 800e41a:	2202      	movs	r2, #2
 800e41c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e41e:	187b      	adds	r3, r7, r1
 800e420:	2200      	movs	r2, #0
 800e422:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e424:	187b      	adds	r3, r7, r1
 800e426:	2200      	movs	r2, #0
 800e428:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800e42a:	187b      	adds	r3, r7, r1
 800e42c:	2202      	movs	r2, #2
 800e42e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e430:	187a      	adds	r2, r7, r1
 800e432:	23a0      	movs	r3, #160	@ 0xa0
 800e434:	05db      	lsls	r3, r3, #23
 800e436:	0011      	movs	r1, r2
 800e438:	0018      	movs	r0, r3
 800e43a:	f001 ff95 	bl	8010368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800e43e:	e027      	b.n	800e490 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a15      	ldr	r2, [pc, #84]	@ (800e49c <HAL_TIM_MspPostInit+0xc8>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d122      	bne.n	800e490 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e44a:	4b13      	ldr	r3, [pc, #76]	@ (800e498 <HAL_TIM_MspPostInit+0xc4>)
 800e44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e44e:	4b12      	ldr	r3, [pc, #72]	@ (800e498 <HAL_TIM_MspPostInit+0xc4>)
 800e450:	2104      	movs	r1, #4
 800e452:	430a      	orrs	r2, r1
 800e454:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e456:	4b10      	ldr	r3, [pc, #64]	@ (800e498 <HAL_TIM_MspPostInit+0xc4>)
 800e458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e45a:	2204      	movs	r2, #4
 800e45c:	4013      	ands	r3, r2
 800e45e:	60fb      	str	r3, [r7, #12]
 800e460:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800e462:	2114      	movs	r1, #20
 800e464:	187b      	adds	r3, r7, r1
 800e466:	22e0      	movs	r2, #224	@ 0xe0
 800e468:	0052      	lsls	r2, r2, #1
 800e46a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e46c:	187b      	adds	r3, r7, r1
 800e46e:	2202      	movs	r2, #2
 800e470:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e472:	187b      	adds	r3, r7, r1
 800e474:	2200      	movs	r2, #0
 800e476:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e478:	187b      	adds	r3, r7, r1
 800e47a:	2200      	movs	r2, #0
 800e47c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800e47e:	187b      	adds	r3, r7, r1
 800e480:	2202      	movs	r2, #2
 800e482:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e484:	187b      	adds	r3, r7, r1
 800e486:	4a06      	ldr	r2, [pc, #24]	@ (800e4a0 <HAL_TIM_MspPostInit+0xcc>)
 800e488:	0019      	movs	r1, r3
 800e48a:	0010      	movs	r0, r2
 800e48c:	f001 ff6c 	bl	8010368 <HAL_GPIO_Init>
}
 800e490:	46c0      	nop			@ (mov r8, r8)
 800e492:	46bd      	mov	sp, r7
 800e494:	b00b      	add	sp, #44	@ 0x2c
 800e496:	bd90      	pop	{r4, r7, pc}
 800e498:	40021000 	.word	0x40021000
 800e49c:	40000400 	.word	0x40000400
 800e4a0:	50000800 	.word	0x50000800

0800e4a4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800e4a8:	4b17      	ldr	r3, [pc, #92]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4aa:	4a18      	ldr	r2, [pc, #96]	@ (800e50c <MX_LPUART1_UART_Init+0x68>)
 800e4ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800e4ae:	4b16      	ldr	r3, [pc, #88]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4b0:	22e1      	movs	r2, #225	@ 0xe1
 800e4b2:	0252      	lsls	r2, r2, #9
 800e4b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e4b6:	4b14      	ldr	r3, [pc, #80]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800e4bc:	4b12      	ldr	r3, [pc, #72]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4be:	2200      	movs	r2, #0
 800e4c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800e4c2:	4b11      	ldr	r3, [pc, #68]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800e4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4ca:	220c      	movs	r2, #12
 800e4cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800e4da:	4b0b      	ldr	r3, [pc, #44]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4dc:	2218      	movs	r2, #24
 800e4de:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e4e0:	4b09      	ldr	r3, [pc, #36]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4e2:	2280      	movs	r2, #128	@ 0x80
 800e4e4:	0212      	lsls	r2, r2, #8
 800e4e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800e4e8:	4b07      	ldr	r3, [pc, #28]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4ea:	2280      	movs	r2, #128	@ 0x80
 800e4ec:	0152      	lsls	r2, r2, #5
 800e4ee:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800e4f0:	4b05      	ldr	r3, [pc, #20]	@ (800e508 <MX_LPUART1_UART_Init+0x64>)
 800e4f2:	0018      	movs	r0, r3
 800e4f4:	f009 f808 	bl	8017508 <HAL_UART_Init>
 800e4f8:	1e03      	subs	r3, r0, #0
 800e4fa:	d001      	beq.n	800e500 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800e4fc:	f7fa f8a8 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e500:	46c0      	nop			@ (mov r8, r8)
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	46c0      	nop			@ (mov r8, r8)
 800e508:	20001cf4 	.word	0x20001cf4
 800e50c:	40004800 	.word	0x40004800

0800e510 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e514:	4b16      	ldr	r3, [pc, #88]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e516:	4a17      	ldr	r2, [pc, #92]	@ (800e574 <MX_USART1_UART_Init+0x64>)
 800e518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e51a:	4b15      	ldr	r3, [pc, #84]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e51c:	22e1      	movs	r2, #225	@ 0xe1
 800e51e:	0252      	lsls	r2, r2, #9
 800e520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e522:	4b13      	ldr	r3, [pc, #76]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e524:	2200      	movs	r2, #0
 800e526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e528:	4b11      	ldr	r3, [pc, #68]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e52a:	2200      	movs	r2, #0
 800e52c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e52e:	4b10      	ldr	r3, [pc, #64]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e530:	2200      	movs	r2, #0
 800e532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e534:	4b0e      	ldr	r3, [pc, #56]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e536:	220c      	movs	r2, #12
 800e538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e53a:	4b0d      	ldr	r3, [pc, #52]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e53c:	2200      	movs	r2, #0
 800e53e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e540:	4b0b      	ldr	r3, [pc, #44]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e542:	2200      	movs	r2, #0
 800e544:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e546:	4b0a      	ldr	r3, [pc, #40]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e548:	2200      	movs	r2, #0
 800e54a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e54c:	4b08      	ldr	r3, [pc, #32]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e54e:	2208      	movs	r2, #8
 800e550:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e552:	4b07      	ldr	r3, [pc, #28]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e554:	2280      	movs	r2, #128	@ 0x80
 800e556:	0212      	lsls	r2, r2, #8
 800e558:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e55a:	4b05      	ldr	r3, [pc, #20]	@ (800e570 <MX_USART1_UART_Init+0x60>)
 800e55c:	0018      	movs	r0, r3
 800e55e:	f008 ffd3 	bl	8017508 <HAL_UART_Init>
 800e562:	1e03      	subs	r3, r0, #0
 800e564:	d001      	beq.n	800e56a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e566:	f7fa f873 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e56a:	46c0      	nop			@ (mov r8, r8)
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	20001dac 	.word	0x20001dac
 800e574:	40013800 	.word	0x40013800

0800e578 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e57c:	4b14      	ldr	r3, [pc, #80]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e57e:	4a15      	ldr	r2, [pc, #84]	@ (800e5d4 <MX_USART4_UART_Init+0x5c>)
 800e580:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e582:	4b13      	ldr	r3, [pc, #76]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e584:	22e1      	movs	r2, #225	@ 0xe1
 800e586:	0252      	lsls	r2, r2, #9
 800e588:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e58a:	4b11      	ldr	r3, [pc, #68]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e58c:	2200      	movs	r2, #0
 800e58e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e590:	4b0f      	ldr	r3, [pc, #60]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e592:	2200      	movs	r2, #0
 800e594:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e596:	4b0e      	ldr	r3, [pc, #56]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e598:	2200      	movs	r2, #0
 800e59a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e59c:	4b0c      	ldr	r3, [pc, #48]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e59e:	220c      	movs	r2, #12
 800e5a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5a8:	4b09      	ldr	r3, [pc, #36]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e5ae:	4b08      	ldr	r3, [pc, #32]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e5b4:	4b06      	ldr	r3, [pc, #24]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e5ba:	4b05      	ldr	r3, [pc, #20]	@ (800e5d0 <MX_USART4_UART_Init+0x58>)
 800e5bc:	0018      	movs	r0, r3
 800e5be:	f008 ffa3 	bl	8017508 <HAL_UART_Init>
 800e5c2:	1e03      	subs	r3, r0, #0
 800e5c4:	d001      	beq.n	800e5ca <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e5c6:	f7fa f843 	bl	8008650 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e5ca:	46c0      	nop			@ (mov r8, r8)
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	20001e64 	.word	0x20001e64
 800e5d4:	40004c00 	.word	0x40004c00

0800e5d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e5d8:	b590      	push	{r4, r7, lr}
 800e5da:	b08d      	sub	sp, #52	@ 0x34
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5e0:	241c      	movs	r4, #28
 800e5e2:	193b      	adds	r3, r7, r4
 800e5e4:	0018      	movs	r0, r3
 800e5e6:	2314      	movs	r3, #20
 800e5e8:	001a      	movs	r2, r3
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	f012 f81e 	bl	802062c <memset>
  if(uartHandle->Instance==LPUART1)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a8b      	ldr	r2, [pc, #556]	@ (800e824 <HAL_UART_MspInit+0x24c>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d129      	bne.n	800e64e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e5fa:	4b8b      	ldr	r3, [pc, #556]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5fe:	4b8a      	ldr	r3, [pc, #552]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e600:	2180      	movs	r1, #128	@ 0x80
 800e602:	02c9      	lsls	r1, r1, #11
 800e604:	430a      	orrs	r2, r1
 800e606:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e608:	4b87      	ldr	r3, [pc, #540]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e60a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e60c:	4b86      	ldr	r3, [pc, #536]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e60e:	2104      	movs	r1, #4
 800e610:	430a      	orrs	r2, r1
 800e612:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e614:	4b84      	ldr	r3, [pc, #528]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e618:	2204      	movs	r2, #4
 800e61a:	4013      	ands	r3, r2
 800e61c:	61bb      	str	r3, [r7, #24]
 800e61e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e620:	0021      	movs	r1, r4
 800e622:	187b      	adds	r3, r7, r1
 800e624:	2203      	movs	r2, #3
 800e626:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e628:	187b      	adds	r3, r7, r1
 800e62a:	2202      	movs	r2, #2
 800e62c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e62e:	187b      	adds	r3, r7, r1
 800e630:	2200      	movs	r2, #0
 800e632:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e634:	187b      	adds	r3, r7, r1
 800e636:	2203      	movs	r2, #3
 800e638:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e63a:	187b      	adds	r3, r7, r1
 800e63c:	2206      	movs	r2, #6
 800e63e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e640:	187b      	adds	r3, r7, r1
 800e642:	4a7a      	ldr	r2, [pc, #488]	@ (800e82c <HAL_UART_MspInit+0x254>)
 800e644:	0019      	movs	r1, r3
 800e646:	0010      	movs	r0, r2
 800e648:	f001 fe8e 	bl	8010368 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e64c:	e0e5      	b.n	800e81a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4a77      	ldr	r2, [pc, #476]	@ (800e830 <HAL_UART_MspInit+0x258>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d133      	bne.n	800e6c0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e658:	4b73      	ldr	r3, [pc, #460]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e65a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e65c:	4b72      	ldr	r3, [pc, #456]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e65e:	2180      	movs	r1, #128	@ 0x80
 800e660:	01c9      	lsls	r1, r1, #7
 800e662:	430a      	orrs	r2, r1
 800e664:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e666:	4b70      	ldr	r3, [pc, #448]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e66a:	4b6f      	ldr	r3, [pc, #444]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e66c:	2101      	movs	r1, #1
 800e66e:	430a      	orrs	r2, r1
 800e670:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e672:	4b6d      	ldr	r3, [pc, #436]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e676:	2201      	movs	r2, #1
 800e678:	4013      	ands	r3, r2
 800e67a:	617b      	str	r3, [r7, #20]
 800e67c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e67e:	211c      	movs	r1, #28
 800e680:	187b      	adds	r3, r7, r1
 800e682:	22c0      	movs	r2, #192	@ 0xc0
 800e684:	00d2      	lsls	r2, r2, #3
 800e686:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e688:	187b      	adds	r3, r7, r1
 800e68a:	2202      	movs	r2, #2
 800e68c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e68e:	187b      	adds	r3, r7, r1
 800e690:	2200      	movs	r2, #0
 800e692:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e694:	187b      	adds	r3, r7, r1
 800e696:	2203      	movs	r2, #3
 800e698:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e69a:	187b      	adds	r3, r7, r1
 800e69c:	2204      	movs	r2, #4
 800e69e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6a0:	187a      	adds	r2, r7, r1
 800e6a2:	23a0      	movs	r3, #160	@ 0xa0
 800e6a4:	05db      	lsls	r3, r3, #23
 800e6a6:	0011      	movs	r1, r2
 800e6a8:	0018      	movs	r0, r3
 800e6aa:	f001 fe5d 	bl	8010368 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	201b      	movs	r0, #27
 800e6b4:	f001 fa06 	bl	800fac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e6b8:	201b      	movs	r0, #27
 800e6ba:	f001 fa18 	bl	800faee <HAL_NVIC_EnableIRQ>
}
 800e6be:	e0ac      	b.n	800e81a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a5b      	ldr	r2, [pc, #364]	@ (800e834 <HAL_UART_MspInit+0x25c>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d000      	beq.n	800e6cc <HAL_UART_MspInit+0xf4>
 800e6ca:	e0a6      	b.n	800e81a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e6cc:	4b56      	ldr	r3, [pc, #344]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e6ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6d0:	4b55      	ldr	r3, [pc, #340]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e6d2:	2180      	movs	r1, #128	@ 0x80
 800e6d4:	0309      	lsls	r1, r1, #12
 800e6d6:	430a      	orrs	r2, r1
 800e6d8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6da:	4b53      	ldr	r3, [pc, #332]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6de:	4b52      	ldr	r3, [pc, #328]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e6e0:	2101      	movs	r1, #1
 800e6e2:	430a      	orrs	r2, r1
 800e6e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e6e6:	4b50      	ldr	r3, [pc, #320]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	4013      	ands	r3, r2
 800e6ee:	613b      	str	r3, [r7, #16]
 800e6f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e6f2:	4b4d      	ldr	r3, [pc, #308]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e6f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6f6:	4b4c      	ldr	r3, [pc, #304]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e6f8:	2104      	movs	r1, #4
 800e6fa:	430a      	orrs	r2, r1
 800e6fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e6fe:	4b4a      	ldr	r3, [pc, #296]	@ (800e828 <HAL_UART_MspInit+0x250>)
 800e700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e702:	2204      	movs	r2, #4
 800e704:	4013      	ands	r3, r2
 800e706:	60fb      	str	r3, [r7, #12]
 800e708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e70a:	241c      	movs	r4, #28
 800e70c:	193b      	adds	r3, r7, r4
 800e70e:	2202      	movs	r2, #2
 800e710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e712:	193b      	adds	r3, r7, r4
 800e714:	2202      	movs	r2, #2
 800e716:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e718:	193b      	adds	r3, r7, r4
 800e71a:	2200      	movs	r2, #0
 800e71c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e71e:	193b      	adds	r3, r7, r4
 800e720:	2203      	movs	r2, #3
 800e722:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e724:	193b      	adds	r3, r7, r4
 800e726:	2206      	movs	r2, #6
 800e728:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e72a:	193a      	adds	r2, r7, r4
 800e72c:	23a0      	movs	r3, #160	@ 0xa0
 800e72e:	05db      	lsls	r3, r3, #23
 800e730:	0011      	movs	r1, r2
 800e732:	0018      	movs	r0, r3
 800e734:	f001 fe18 	bl	8010368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e738:	0021      	movs	r1, r4
 800e73a:	187b      	adds	r3, r7, r1
 800e73c:	2280      	movs	r2, #128	@ 0x80
 800e73e:	00d2      	lsls	r2, r2, #3
 800e740:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e742:	187b      	adds	r3, r7, r1
 800e744:	2202      	movs	r2, #2
 800e746:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e748:	187b      	adds	r3, r7, r1
 800e74a:	2200      	movs	r2, #0
 800e74c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e74e:	187b      	adds	r3, r7, r1
 800e750:	2203      	movs	r2, #3
 800e752:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e754:	187b      	adds	r3, r7, r1
 800e756:	2206      	movs	r2, #6
 800e758:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e75a:	187b      	adds	r3, r7, r1
 800e75c:	4a33      	ldr	r2, [pc, #204]	@ (800e82c <HAL_UART_MspInit+0x254>)
 800e75e:	0019      	movs	r1, r3
 800e760:	0010      	movs	r0, r2
 800e762:	f001 fe01 	bl	8010368 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e766:	4b34      	ldr	r3, [pc, #208]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e768:	4a34      	ldr	r2, [pc, #208]	@ (800e83c <HAL_UART_MspInit+0x264>)
 800e76a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e76c:	4b32      	ldr	r3, [pc, #200]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e76e:	220c      	movs	r2, #12
 800e770:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e772:	4b31      	ldr	r3, [pc, #196]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e774:	2200      	movs	r2, #0
 800e776:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e778:	4b2f      	ldr	r3, [pc, #188]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e77a:	2200      	movs	r2, #0
 800e77c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e77e:	4b2e      	ldr	r3, [pc, #184]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e780:	2280      	movs	r2, #128	@ 0x80
 800e782:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e784:	4b2c      	ldr	r3, [pc, #176]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e786:	2200      	movs	r2, #0
 800e788:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e78a:	4b2b      	ldr	r3, [pc, #172]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e78c:	2200      	movs	r2, #0
 800e78e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e790:	4b29      	ldr	r3, [pc, #164]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e792:	2220      	movs	r2, #32
 800e794:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e796:	4b28      	ldr	r3, [pc, #160]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e798:	2200      	movs	r2, #0
 800e79a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e79c:	4b26      	ldr	r3, [pc, #152]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e79e:	0018      	movs	r0, r3
 800e7a0:	f001 f9c6 	bl	800fb30 <HAL_DMA_Init>
 800e7a4:	1e03      	subs	r3, r0, #0
 800e7a6:	d001      	beq.n	800e7ac <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e7a8:	f7f9 ff52 	bl	8008650 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4a22      	ldr	r2, [pc, #136]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e7b0:	675a      	str	r2, [r3, #116]	@ 0x74
 800e7b2:	4b21      	ldr	r3, [pc, #132]	@ (800e838 <HAL_UART_MspInit+0x260>)
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e7b8:	4b21      	ldr	r3, [pc, #132]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e7ba:	4a22      	ldr	r2, [pc, #136]	@ (800e844 <HAL_UART_MspInit+0x26c>)
 800e7bc:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e7be:	4b20      	ldr	r3, [pc, #128]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e7c0:	220c      	movs	r2, #12
 800e7c2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e7c4:	4b1e      	ldr	r3, [pc, #120]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e7c6:	2210      	movs	r2, #16
 800e7c8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e7ca:	4b1d      	ldr	r3, [pc, #116]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e7d0:	4b1b      	ldr	r3, [pc, #108]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e7d2:	2280      	movs	r2, #128	@ 0x80
 800e7d4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e7d6:	4b1a      	ldr	r3, [pc, #104]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e7d8:	2200      	movs	r2, #0
 800e7da:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e7dc:	4b18      	ldr	r3, [pc, #96]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e7de:	2200      	movs	r2, #0
 800e7e0:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e7e2:	4b17      	ldr	r3, [pc, #92]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e7e8:	4b15      	ldr	r3, [pc, #84]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e7ee:	4b14      	ldr	r3, [pc, #80]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e7f0:	0018      	movs	r0, r3
 800e7f2:	f001 f99d 	bl	800fb30 <HAL_DMA_Init>
 800e7f6:	1e03      	subs	r3, r0, #0
 800e7f8:	d001      	beq.n	800e7fe <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e7fa:	f7f9 ff29 	bl	8008650 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	4a0f      	ldr	r2, [pc, #60]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e802:	671a      	str	r2, [r3, #112]	@ 0x70
 800e804:	4b0e      	ldr	r3, [pc, #56]	@ (800e840 <HAL_UART_MspInit+0x268>)
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e80a:	2200      	movs	r2, #0
 800e80c:	2100      	movs	r1, #0
 800e80e:	200e      	movs	r0, #14
 800e810:	f001 f958 	bl	800fac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e814:	200e      	movs	r0, #14
 800e816:	f001 f96a 	bl	800faee <HAL_NVIC_EnableIRQ>
}
 800e81a:	46c0      	nop			@ (mov r8, r8)
 800e81c:	46bd      	mov	sp, r7
 800e81e:	b00d      	add	sp, #52	@ 0x34
 800e820:	bd90      	pop	{r4, r7, pc}
 800e822:	46c0      	nop			@ (mov r8, r8)
 800e824:	40004800 	.word	0x40004800
 800e828:	40021000 	.word	0x40021000
 800e82c:	50000800 	.word	0x50000800
 800e830:	40013800 	.word	0x40013800
 800e834:	40004c00 	.word	0x40004c00
 800e838:	20001f1c 	.word	0x20001f1c
 800e83c:	4002006c 	.word	0x4002006c
 800e840:	20001f64 	.word	0x20001f64
 800e844:	40020080 	.word	0x40020080

0800e848 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e848:	b580      	push	{r7, lr}
 800e84a:	b086      	sub	sp, #24
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e850:	f000 fc94 	bl	800f17c <HAL_GetTick>
 800e854:	0003      	movs	r3, r0
 800e856:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e858:	4b1c      	ldr	r3, [pc, #112]	@ (800e8cc <TimestampIsReached+0x84>)
 800e85a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e85c:	697a      	ldr	r2, [r7, #20]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	429a      	cmp	r2, r3
 800e862:	d307      	bcc.n	800e874 <TimestampIsReached+0x2c>
 800e864:	697a      	ldr	r2, [r7, #20]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	1ad3      	subs	r3, r2, r3
 800e86a:	693a      	ldr	r2, [r7, #16]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d901      	bls.n	800e874 <TimestampIsReached+0x2c>
 800e870:	2201      	movs	r2, #1
 800e872:	e000      	b.n	800e876 <TimestampIsReached+0x2e>
 800e874:	2200      	movs	r2, #0
 800e876:	230f      	movs	r3, #15
 800e878:	18fb      	adds	r3, r7, r3
 800e87a:	701a      	strb	r2, [r3, #0]
 800e87c:	781a      	ldrb	r2, [r3, #0]
 800e87e:	2101      	movs	r1, #1
 800e880:	400a      	ands	r2, r1
 800e882:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e884:	697a      	ldr	r2, [r7, #20]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d207      	bcs.n	800e89c <TimestampIsReached+0x54>
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	1ad3      	subs	r3, r2, r3
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	429a      	cmp	r2, r3
 800e896:	d201      	bcs.n	800e89c <TimestampIsReached+0x54>
 800e898:	2201      	movs	r2, #1
 800e89a:	e000      	b.n	800e89e <TimestampIsReached+0x56>
 800e89c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e89e:	200e      	movs	r0, #14
 800e8a0:	183b      	adds	r3, r7, r0
 800e8a2:	701a      	strb	r2, [r3, #0]
 800e8a4:	781a      	ldrb	r2, [r3, #0]
 800e8a6:	2101      	movs	r1, #1
 800e8a8:	400a      	ands	r2, r1
 800e8aa:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e8ac:	230f      	movs	r3, #15
 800e8ae:	18fb      	adds	r3, r7, r3
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d103      	bne.n	800e8be <TimestampIsReached+0x76>
 800e8b6:	183b      	adds	r3, r7, r0
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d001      	beq.n	800e8c2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e000      	b.n	800e8c4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	0018      	movs	r0, r3
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	b006      	add	sp, #24
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	7fffffff 	.word	0x7fffffff

0800e8d0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e8d8:	f000 fc50 	bl	800f17c <HAL_GetTick>
 800e8dc:	0002      	movs	r2, r0
 800e8de:	4904      	ldr	r1, [pc, #16]	@ (800e8f0 <AddTimestamp+0x20>)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	0018      	movs	r0, r3
 800e8e4:	f011 fd5e 	bl	80203a4 <siprintf>
}
 800e8e8:	46c0      	nop			@ (mov r8, r8)
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	b002      	add	sp, #8
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	08025624 	.word	0x08025624

0800e8f4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e8f4:	b40c      	push	{r2, r3}
 800e8f6:	b5b0      	push	{r4, r5, r7, lr}
 800e8f8:	b0a4      	sub	sp, #144	@ 0x90
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	0002      	movs	r2, r0
 800e8fe:	6039      	str	r1, [r7, #0]
 800e900:	1dfb      	adds	r3, r7, #7
 800e902:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e904:	4b23      	ldr	r3, [pc, #140]	@ (800e994 <CreateLine+0xa0>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	1dfa      	adds	r2, r7, #7
 800e90a:	7812      	ldrb	r2, [r2, #0]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d839      	bhi.n	800e984 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e910:	683a      	ldr	r2, [r7, #0]
 800e912:	4921      	ldr	r1, [pc, #132]	@ (800e998 <CreateLine+0xa4>)
 800e914:	240c      	movs	r4, #12
 800e916:	193b      	adds	r3, r7, r4
 800e918:	0018      	movs	r0, r3
 800e91a:	f011 fd43 	bl	80203a4 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e91e:	4b1d      	ldr	r3, [pc, #116]	@ (800e994 <CreateLine+0xa0>)
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	2b01      	cmp	r3, #1
 800e924:	d909      	bls.n	800e93a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e926:	193b      	adds	r3, r7, r4
 800e928:	0018      	movs	r0, r3
 800e92a:	f7f1 fc1f 	bl	800016c <strlen>
 800e92e:	0002      	movs	r2, r0
 800e930:	193b      	adds	r3, r7, r4
 800e932:	189b      	adds	r3, r3, r2
 800e934:	0018      	movs	r0, r3
 800e936:	f7ff ffcb 	bl	800e8d0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e93a:	240c      	movs	r4, #12
 800e93c:	193b      	adds	r3, r7, r4
 800e93e:	0018      	movs	r0, r3
 800e940:	f7f1 fc14 	bl	800016c <strlen>
 800e944:	0003      	movs	r3, r0
 800e946:	218c      	movs	r1, #140	@ 0x8c
 800e948:	187a      	adds	r2, r7, r1
 800e94a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e94c:	239c      	movs	r3, #156	@ 0x9c
 800e94e:	2508      	movs	r5, #8
 800e950:	195b      	adds	r3, r3, r5
 800e952:	19db      	adds	r3, r3, r7
 800e954:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e956:	193a      	adds	r2, r7, r4
 800e958:	187b      	adds	r3, r7, r1
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	18d0      	adds	r0, r2, r3
 800e95e:	187b      	adds	r3, r7, r1
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	2280      	movs	r2, #128	@ 0x80
 800e964:	1ad3      	subs	r3, r2, r3
 800e966:	0019      	movs	r1, r3
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	2298      	movs	r2, #152	@ 0x98
 800e96c:	1952      	adds	r2, r2, r5
 800e96e:	19d2      	adds	r2, r2, r7
 800e970:	6812      	ldr	r2, [r2, #0]
 800e972:	f011 fdaf 	bl	80204d4 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e976:	193a      	adds	r2, r7, r4
 800e978:	4b08      	ldr	r3, [pc, #32]	@ (800e99c <CreateLine+0xa8>)
 800e97a:	0011      	movs	r1, r2
 800e97c:	0018      	movs	r0, r3
 800e97e:	f011 fca1 	bl	80202c4 <iprintf>
 800e982:	e000      	b.n	800e986 <CreateLine+0x92>
    return;
 800e984:	46c0      	nop			@ (mov r8, r8)
}
 800e986:	46bd      	mov	sp, r7
 800e988:	b024      	add	sp, #144	@ 0x90
 800e98a:	bcb0      	pop	{r4, r5, r7}
 800e98c:	bc08      	pop	{r3}
 800e98e:	b002      	add	sp, #8
 800e990:	4718      	bx	r3
 800e992:	46c0      	nop			@ (mov r8, r8)
 800e994:	200000d4 	.word	0x200000d4
 800e998:	08025630 	.word	0x08025630
 800e99c:	08025634 	.word	0x08025634

0800e9a0 <_write>:

int _write(int fd, void *buf, size_t count) {
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	68b9      	ldr	r1, [r7, #8]
 800e9b2:	4804      	ldr	r0, [pc, #16]	@ (800e9c4 <_write+0x24>)
 800e9b4:	2364      	movs	r3, #100	@ 0x64
 800e9b6:	f008 fe0d 	bl	80175d4 <HAL_UART_Transmit>
    usboutmsg[99] = '\0';
    count = vcp_send(usboutmsg, 100);
  }

#endif
  return count;
 800e9ba:	687b      	ldr	r3, [r7, #4]
}
 800e9bc:	0018      	movs	r0, r3
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	b004      	add	sp, #16
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	20001dac 	.word	0x20001dac

0800e9c8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	0002      	movs	r2, r0
 800e9d0:	1dfb      	adds	r3, r7, #7
 800e9d2:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e9d4:	4b03      	ldr	r3, [pc, #12]	@ (800e9e4 <SetVerboseLevel+0x1c>)
 800e9d6:	1dfa      	adds	r2, r7, #7
 800e9d8:	7812      	ldrb	r2, [r2, #0]
 800e9da:	701a      	strb	r2, [r3, #0]
}
 800e9dc:	46c0      	nop			@ (mov r8, r8)
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	b002      	add	sp, #8
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	200000d4 	.word	0x200000d4

0800e9e8 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e9ec:	4b02      	ldr	r3, [pc, #8]	@ (800e9f8 <GetVerboseLevel+0x10>)
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	0018      	movs	r0, r3
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	46c0      	nop			@ (mov r8, r8)
 800e9f8:	200000d4 	.word	0x200000d4

0800e9fc <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800ea02:	4a0f      	ldr	r2, [pc, #60]	@ (800ea40 <BinaryReleaseInfo+0x44>)
 800ea04:	4b0f      	ldr	r3, [pc, #60]	@ (800ea44 <BinaryReleaseInfo+0x48>)
 800ea06:	0019      	movs	r1, r3
 800ea08:	2002      	movs	r0, #2
 800ea0a:	f7ff ff73 	bl	800e8f4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800ea0e:	480e      	ldr	r0, [pc, #56]	@ (800ea48 <BinaryReleaseInfo+0x4c>)
 800ea10:	4a0e      	ldr	r2, [pc, #56]	@ (800ea4c <BinaryReleaseInfo+0x50>)
 800ea12:	490c      	ldr	r1, [pc, #48]	@ (800ea44 <BinaryReleaseInfo+0x48>)
 800ea14:	4b0e      	ldr	r3, [pc, #56]	@ (800ea50 <BinaryReleaseInfo+0x54>)
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	0003      	movs	r3, r0
 800ea1a:	2002      	movs	r0, #2
 800ea1c:	f7ff ff6a 	bl	800e8f4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800ea20:	4b0c      	ldr	r3, [pc, #48]	@ (800ea54 <BinaryReleaseInfo+0x58>)
 800ea22:	4a0d      	ldr	r2, [pc, #52]	@ (800ea58 <BinaryReleaseInfo+0x5c>)
 800ea24:	4907      	ldr	r1, [pc, #28]	@ (800ea44 <BinaryReleaseInfo+0x48>)
 800ea26:	2002      	movs	r0, #2
 800ea28:	f7ff ff64 	bl	800e8f4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800ea2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ea5c <BinaryReleaseInfo+0x60>)
 800ea2e:	4a0c      	ldr	r2, [pc, #48]	@ (800ea60 <BinaryReleaseInfo+0x64>)
 800ea30:	4904      	ldr	r1, [pc, #16]	@ (800ea44 <BinaryReleaseInfo+0x48>)
 800ea32:	2002      	movs	r0, #2
 800ea34:	f7ff ff5e 	bl	800e8f4 <CreateLine>
}
 800ea38:	46c0      	nop			@ (mov r8, r8)
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	46c0      	nop			@ (mov r8, r8)
 800ea40:	0802563c 	.word	0x0802563c
 800ea44:	08025668 	.word	0x08025668
 800ea48:	0802566c 	.word	0x0802566c
 800ea4c:	08025678 	.word	0x08025678
 800ea50:	0802568c 	.word	0x0802568c
 800ea54:	08025698 	.word	0x08025698
 800ea58:	080256a4 	.word	0x080256a4
 800ea5c:	080256ac 	.word	0x080256ac
 800ea60:	080256b4 	.word	0x080256b4

0800ea64 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	68f9      	ldr	r1, [r7, #12]
 800ea76:	4803      	ldr	r0, [pc, #12]	@ (800ea84 <errorHandler+0x20>)
 800ea78:	f011 fc24 	bl	80202c4 <iprintf>
//    while (true)
//    {
//    }
}
 800ea7c:	46c0      	nop			@ (mov r8, r8)
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	b004      	add	sp, #16
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	080256cc 	.word	0x080256cc

0800ea88 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ea88:	b590      	push	{r4, r7, lr}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6039      	str	r1, [r7, #0]
 800ea90:	0011      	movs	r1, r2
 800ea92:	1dfb      	adds	r3, r7, #7
 800ea94:	1c02      	adds	r2, r0, #0
 800ea96:	701a      	strb	r2, [r3, #0]
 800ea98:	1dbb      	adds	r3, r7, #6
 800ea9a:	1c0a      	adds	r2, r1, #0
 800ea9c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800ea9e:	4b0a      	ldr	r3, [pc, #40]	@ (800eac8 <ReadRegister+0x40>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d00a      	beq.n	800eabc <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800eaa6:	4b08      	ldr	r3, [pc, #32]	@ (800eac8 <ReadRegister+0x40>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	1dba      	adds	r2, r7, #6
 800eaac:	7814      	ldrb	r4, [r2, #0]
 800eaae:	6839      	ldr	r1, [r7, #0]
 800eab0:	1dfa      	adds	r2, r7, #7
 800eab2:	7810      	ldrb	r0, [r2, #0]
 800eab4:	0022      	movs	r2, r4
 800eab6:	4798      	blx	r3
 800eab8:	0003      	movs	r3, r0
 800eaba:	e000      	b.n	800eabe <ReadRegister+0x36>
	}
	return false;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	0018      	movs	r0, r3
 800eac0:	46bd      	mov	sp, r7
 800eac2:	b003      	add	sp, #12
 800eac4:	bd90      	pop	{r4, r7, pc}
 800eac6:	46c0      	nop			@ (mov r8, r8)
 800eac8:	20001fb4 	.word	0x20001fb4

0800eacc <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800eacc:	b590      	push	{r4, r7, lr}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6039      	str	r1, [r7, #0]
 800ead4:	0011      	movs	r1, r2
 800ead6:	1dfb      	adds	r3, r7, #7
 800ead8:	1c02      	adds	r2, r0, #0
 800eada:	701a      	strb	r2, [r3, #0]
 800eadc:	1dbb      	adds	r3, r7, #6
 800eade:	1c0a      	adds	r2, r1, #0
 800eae0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800eae2:	4b0a      	ldr	r3, [pc, #40]	@ (800eb0c <WriteRegister+0x40>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d00a      	beq.n	800eb00 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800eaea:	4b08      	ldr	r3, [pc, #32]	@ (800eb0c <WriteRegister+0x40>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	1dba      	adds	r2, r7, #6
 800eaf0:	7814      	ldrb	r4, [r2, #0]
 800eaf2:	6839      	ldr	r1, [r7, #0]
 800eaf4:	1dfa      	adds	r2, r7, #7
 800eaf6:	7810      	ldrb	r0, [r2, #0]
 800eaf8:	0022      	movs	r2, r4
 800eafa:	4798      	blx	r3
 800eafc:	0003      	movs	r3, r0
 800eafe:	e000      	b.n	800eb02 <WriteRegister+0x36>
  }
  return false;
 800eb00:	2300      	movs	r3, #0
}
 800eb02:	0018      	movs	r0, r3
 800eb04:	46bd      	mov	sp, r7
 800eb06:	b003      	add	sp, #12
 800eb08:	bd90      	pop	{r4, r7, pc}
 800eb0a:	46c0      	nop			@ (mov r8, r8)
 800eb0c:	20001fb8 	.word	0x20001fb8

0800eb10 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	000a      	movs	r2, r1
 800eb1a:	1cfb      	adds	r3, r7, #3
 800eb1c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800eb1e:	230f      	movs	r3, #15
 800eb20:	18fb      	adds	r3, r7, r3
 800eb22:	22ff      	movs	r2, #255	@ 0xff
 800eb24:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800eb26:	230e      	movs	r3, #14
 800eb28:	18fb      	adds	r3, r7, r3
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	701a      	strb	r2, [r3, #0]
 800eb2e:	e037      	b.n	800eba0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800eb30:	230e      	movs	r3, #14
 800eb32:	18fb      	adds	r3, r7, r3
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	18d3      	adds	r3, r2, r3
 800eb3a:	7819      	ldrb	r1, [r3, #0]
 800eb3c:	220f      	movs	r2, #15
 800eb3e:	18bb      	adds	r3, r7, r2
 800eb40:	18ba      	adds	r2, r7, r2
 800eb42:	7812      	ldrb	r2, [r2, #0]
 800eb44:	404a      	eors	r2, r1
 800eb46:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800eb48:	230d      	movs	r3, #13
 800eb4a:	18fb      	adds	r3, r7, r3
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	701a      	strb	r2, [r3, #0]
 800eb50:	e01b      	b.n	800eb8a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800eb52:	210f      	movs	r1, #15
 800eb54:	187b      	adds	r3, r7, r1
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	b25b      	sxtb	r3, r3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	da09      	bge.n	800eb72 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800eb5e:	187b      	adds	r3, r7, r1
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	005b      	lsls	r3, r3, #1
 800eb64:	b25b      	sxtb	r3, r3
 800eb66:	2231      	movs	r2, #49	@ 0x31
 800eb68:	4053      	eors	r3, r2
 800eb6a:	b25a      	sxtb	r2, r3
 800eb6c:	187b      	adds	r3, r7, r1
 800eb6e:	701a      	strb	r2, [r3, #0]
 800eb70:	e005      	b.n	800eb7e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800eb72:	230f      	movs	r3, #15
 800eb74:	18fa      	adds	r2, r7, r3
 800eb76:	18fb      	adds	r3, r7, r3
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	18db      	adds	r3, r3, r3
 800eb7c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800eb7e:	210d      	movs	r1, #13
 800eb80:	187b      	adds	r3, r7, r1
 800eb82:	781a      	ldrb	r2, [r3, #0]
 800eb84:	187b      	adds	r3, r7, r1
 800eb86:	3201      	adds	r2, #1
 800eb88:	701a      	strb	r2, [r3, #0]
 800eb8a:	230d      	movs	r3, #13
 800eb8c:	18fb      	adds	r3, r7, r3
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	2b07      	cmp	r3, #7
 800eb92:	d9de      	bls.n	800eb52 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800eb94:	210e      	movs	r1, #14
 800eb96:	187b      	adds	r3, r7, r1
 800eb98:	781a      	ldrb	r2, [r3, #0]
 800eb9a:	187b      	adds	r3, r7, r1
 800eb9c:	3201      	adds	r2, #1
 800eb9e:	701a      	strb	r2, [r3, #0]
 800eba0:	230e      	movs	r3, #14
 800eba2:	18fa      	adds	r2, r7, r3
 800eba4:	1cfb      	adds	r3, r7, #3
 800eba6:	7812      	ldrb	r2, [r2, #0]
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d3c0      	bcc.n	800eb30 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800ebae:	230f      	movs	r3, #15
 800ebb0:	18fb      	adds	r3, r7, r3
 800ebb2:	781b      	ldrb	r3, [r3, #0]
}
 800ebb4:	0018      	movs	r0, r3
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	b004      	add	sp, #16
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800ebc6:	4b0a      	ldr	r3, [pc, #40]	@ (800ebf0 <HIDS_Init+0x34>)
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800ebcc:	4b09      	ldr	r3, [pc, #36]	@ (800ebf4 <HIDS_Init+0x38>)
 800ebce:	683a      	ldr	r2, [r7, #0]
 800ebd0:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800ebd2:	4b09      	ldr	r3, [pc, #36]	@ (800ebf8 <HIDS_Init+0x3c>)
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	0018      	movs	r0, r3
 800ebd8:	f000 f840 	bl	800ec5c <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800ebdc:	4b07      	ldr	r3, [pc, #28]	@ (800ebfc <HIDS_Init+0x40>)
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	0018      	movs	r0, r3
 800ebe2:	f000 f82b 	bl	800ec3c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800ebe6:	46c0      	nop			@ (mov r8, r8)
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	b002      	add	sp, #8
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	46c0      	nop			@ (mov r8, r8)
 800ebf0:	20001fb4 	.word	0x20001fb4
 800ebf4:	20001fb8 	.word	0x20001fb8
 800ebf8:	200000d6 	.word	0x200000d6
 800ebfc:	200000d5 	.word	0x200000d5

0800ec00 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800ec00:	b580      	push	{r7, lr}
 800ec02:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800ec04:	f000 faba 	bl	800f17c <HAL_GetTick>
 800ec08:	0002      	movs	r2, r0
 800ec0a:	4b08      	ldr	r3, [pc, #32]	@ (800ec2c <HIDS_StartMeasurement+0x2c>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	18d2      	adds	r2, r2, r3
 800ec10:	4b07      	ldr	r3, [pc, #28]	@ (800ec30 <HIDS_StartMeasurement+0x30>)
 800ec12:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800ec14:	4b07      	ldr	r3, [pc, #28]	@ (800ec34 <HIDS_StartMeasurement+0x34>)
 800ec16:	2201      	movs	r2, #1
 800ec18:	0019      	movs	r1, r3
 800ec1a:	2044      	movs	r0, #68	@ 0x44
 800ec1c:	f7ff ff56 	bl	800eacc <WriteRegister>
  MeasurementDone = false;
 800ec20:	4b05      	ldr	r3, [pc, #20]	@ (800ec38 <HIDS_StartMeasurement+0x38>)
 800ec22:	2200      	movs	r2, #0
 800ec24:	701a      	strb	r2, [r3, #0]
}
 800ec26:	46c0      	nop			@ (mov r8, r8)
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}
 800ec2c:	200000dc 	.word	0x200000dc
 800ec30:	200000d8 	.word	0x200000d8
 800ec34:	200000d6 	.word	0x200000d6
 800ec38:	20001fca 	.word	0x20001fca

0800ec3c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	0002      	movs	r2, r0
 800ec44:	1dfb      	adds	r3, r7, #7
 800ec46:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800ec48:	4b03      	ldr	r3, [pc, #12]	@ (800ec58 <HIDS_SetHeaterMode+0x1c>)
 800ec4a:	1dfa      	adds	r2, r7, #7
 800ec4c:	7812      	ldrb	r2, [r2, #0]
 800ec4e:	701a      	strb	r2, [r3, #0]
}
 800ec50:	46c0      	nop			@ (mov r8, r8)
 800ec52:	46bd      	mov	sp, r7
 800ec54:	b002      	add	sp, #8
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	200000d5 	.word	0x200000d5

0800ec5c <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	0002      	movs	r2, r0
 800ec64:	1dfb      	adds	r3, r7, #7
 800ec66:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800ec68:	4b03      	ldr	r3, [pc, #12]	@ (800ec78 <HIDS_SetMeasurementMode+0x1c>)
 800ec6a:	1dfa      	adds	r2, r7, #7
 800ec6c:	7812      	ldrb	r2, [r2, #0]
 800ec6e:	701a      	strb	r2, [r3, #0]
}
 800ec70:	46c0      	nop			@ (mov r8, r8)
 800ec72:	46bd      	mov	sp, r7
 800ec74:	b002      	add	sp, #8
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	200000d6 	.word	0x200000d6

0800ec7c <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800ec84:	f000 fa7a 	bl	800f17c <HAL_GetTick>
 800ec88:	0002      	movs	r2, r0
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	18d2      	adds	r2, r2, r3
 800ec8e:	4b03      	ldr	r3, [pc, #12]	@ (800ec9c <setHIDSTimeStamp+0x20>)
 800ec90:	601a      	str	r2, [r3, #0]
}
 800ec92:	46c0      	nop			@ (mov r8, r8)
 800ec94:	46bd      	mov	sp, r7
 800ec96:	b002      	add	sp, #8
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	46c0      	nop			@ (mov r8, r8)
 800ec9c:	20001fcc 	.word	0x20001fcc

0800eca0 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800eca0:	b590      	push	{r4, r7, lr}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	781a      	ldrb	r2, [r3, #0]
 800ecac:	210c      	movs	r1, #12
 800ecae:	187b      	adds	r3, r7, r1
 800ecb0:	701a      	strb	r2, [r3, #0]
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	785a      	ldrb	r2, [r3, #1]
 800ecb6:	187b      	adds	r3, r7, r1
 800ecb8:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800ecba:	240f      	movs	r4, #15
 800ecbc:	193b      	adds	r3, r7, r4
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	7892      	ldrb	r2, [r2, #2]
 800ecc2:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800ecc4:	187b      	adds	r3, r7, r1
 800ecc6:	2102      	movs	r1, #2
 800ecc8:	0018      	movs	r0, r3
 800ecca:	f7ff ff21 	bl	800eb10 <CalculateCRC>
 800ecce:	0003      	movs	r3, r0
 800ecd0:	001a      	movs	r2, r3
 800ecd2:	193b      	adds	r3, r7, r4
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d007      	beq.n	800ecea <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800ecda:	4a1a      	ldr	r2, [pc, #104]	@ (800ed44 <CheckCRC+0xa4>)
 800ecdc:	4b1a      	ldr	r3, [pc, #104]	@ (800ed48 <CheckCRC+0xa8>)
 800ecde:	0019      	movs	r1, r3
 800ece0:	2001      	movs	r0, #1
 800ece2:	f7ff fe07 	bl	800e8f4 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800ece6:	2300      	movs	r3, #0
 800ece8:	e027      	b.n	800ed3a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	78da      	ldrb	r2, [r3, #3]
 800ecee:	2108      	movs	r1, #8
 800ecf0:	187b      	adds	r3, r7, r1
 800ecf2:	701a      	strb	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	791a      	ldrb	r2, [r3, #4]
 800ecf8:	187b      	adds	r3, r7, r1
 800ecfa:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800ecfc:	240e      	movs	r4, #14
 800ecfe:	193b      	adds	r3, r7, r4
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	7952      	ldrb	r2, [r2, #5]
 800ed04:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800ed06:	187b      	adds	r3, r7, r1
 800ed08:	2102      	movs	r1, #2
 800ed0a:	0018      	movs	r0, r3
 800ed0c:	f7ff ff00 	bl	800eb10 <CalculateCRC>
 800ed10:	0003      	movs	r3, r0
 800ed12:	001a      	movs	r2, r3
 800ed14:	193b      	adds	r3, r7, r4
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d00d      	beq.n	800ed38 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800ed1c:	4a0b      	ldr	r2, [pc, #44]	@ (800ed4c <CheckCRC+0xac>)
 800ed1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ed48 <CheckCRC+0xa8>)
 800ed20:	0019      	movs	r1, r3
 800ed22:	2001      	movs	r0, #1
 800ed24:	f7ff fde6 	bl	800e8f4 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800ed28:	4a09      	ldr	r2, [pc, #36]	@ (800ed50 <CheckCRC+0xb0>)
 800ed2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ed54 <CheckCRC+0xb4>)
 800ed2c:	217c      	movs	r1, #124	@ 0x7c
 800ed2e:	0018      	movs	r0, r3
 800ed30:	f7ff fe98 	bl	800ea64 <errorHandler>
		return false;
 800ed34:	2300      	movs	r3, #0
 800ed36:	e000      	b.n	800ed3a <CheckCRC+0x9a>
	}
	return true;
 800ed38:	2301      	movs	r3, #1
}
 800ed3a:	0018      	movs	r0, r3
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	b005      	add	sp, #20
 800ed40:	bd90      	pop	{r4, r7, pc}
 800ed42:	46c0      	nop			@ (mov r8, r8)
 800ed44:	08025718 	.word	0x08025718
 800ed48:	08025740 	.word	0x08025740
 800ed4c:	08025744 	.word	0x08025744
 800ed50:	08025770 	.word	0x08025770
 800ed54:	08025d3c 	.word	0x08025d3c

0800ed58 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800ed5e:	1dbb      	adds	r3, r7, #6
 800ed60:	2289      	movs	r2, #137	@ 0x89
 800ed62:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800ed64:	1dbb      	adds	r3, r7, #6
 800ed66:	2201      	movs	r2, #1
 800ed68:	0019      	movs	r1, r3
 800ed6a:	2044      	movs	r0, #68	@ 0x44
 800ed6c:	f7ff feae 	bl	800eacc <WriteRegister>
	HAL_Delay(30);
 800ed70:	201e      	movs	r0, #30
 800ed72:	f000 fa0d 	bl	800f190 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800ed76:	4b14      	ldr	r3, [pc, #80]	@ (800edc8 <HIDS_DeviceConnected+0x70>)
 800ed78:	2206      	movs	r2, #6
 800ed7a:	0019      	movs	r1, r3
 800ed7c:	2044      	movs	r0, #68	@ 0x44
 800ed7e:	f7ff fe83 	bl	800ea88 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800ed82:	1dfb      	adds	r3, r7, #7
 800ed84:	2200      	movs	r2, #0
 800ed86:	701a      	strb	r2, [r3, #0]
 800ed88:	e011      	b.n	800edae <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800ed8a:	1dfb      	adds	r3, r7, #7
 800ed8c:	7818      	ldrb	r0, [r3, #0]
 800ed8e:	1dfb      	adds	r3, r7, #7
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	4a0d      	ldr	r2, [pc, #52]	@ (800edc8 <HIDS_DeviceConnected+0x70>)
 800ed94:	5cd3      	ldrb	r3, [r2, r3]
 800ed96:	4a0d      	ldr	r2, [pc, #52]	@ (800edcc <HIDS_DeviceConnected+0x74>)
 800ed98:	490d      	ldr	r1, [pc, #52]	@ (800edd0 <HIDS_DeviceConnected+0x78>)
 800ed9a:	9300      	str	r3, [sp, #0]
 800ed9c:	0003      	movs	r3, r0
 800ed9e:	2002      	movs	r0, #2
 800eda0:	f7ff fda8 	bl	800e8f4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800eda4:	1dfb      	adds	r3, r7, #7
 800eda6:	781a      	ldrb	r2, [r3, #0]
 800eda8:	1dfb      	adds	r3, r7, #7
 800edaa:	3201      	adds	r2, #1
 800edac:	701a      	strb	r2, [r3, #0]
 800edae:	1dfb      	adds	r3, r7, #7
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	2b05      	cmp	r3, #5
 800edb4:	d9e9      	bls.n	800ed8a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800edb6:	4b04      	ldr	r3, [pc, #16]	@ (800edc8 <HIDS_DeviceConnected+0x70>)
 800edb8:	0018      	movs	r0, r3
 800edba:	f7ff ff71 	bl	800eca0 <CheckCRC>
 800edbe:	0003      	movs	r3, r0
}
 800edc0:	0018      	movs	r0, r3
 800edc2:	46bd      	mov	sp, r7
 800edc4:	b002      	add	sp, #8
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	20001fbc 	.word	0x20001fbc
 800edcc:	08025788 	.word	0x08025788
 800edd0:	08025714 	.word	0x08025714

0800edd4 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800edd4:	b580      	push	{r7, lr}
 800edd6:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800edd8:	4b04      	ldr	r3, [pc, #16]	@ (800edec <HIDS_MeasurementReady+0x18>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	0018      	movs	r0, r3
 800edde:	f7ff fd33 	bl	800e848 <TimestampIsReached>
 800ede2:	0003      	movs	r3, r0
}
 800ede4:	0018      	movs	r0, r3
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	46c0      	nop			@ (mov r8, r8)
 800edec:	200000d8 	.word	0x200000d8

0800edf0 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 800edfa:	4b41      	ldr	r3, [pc, #260]	@ (800ef00 <HIDS_GetMeasurementValues+0x110>)
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <HIDS_GetMeasurementValues+0x16>
 800ee02:	2301      	movs	r3, #1
 800ee04:	e077      	b.n	800eef6 <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 800ee06:	f7ff ffe5 	bl	800edd4 <HIDS_MeasurementReady>
 800ee0a:	0003      	movs	r3, r0
 800ee0c:	001a      	movs	r2, r3
 800ee0e:	2301      	movs	r3, #1
 800ee10:	4053      	eors	r3, r2
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d001      	beq.n	800ee1c <HIDS_GetMeasurementValues+0x2c>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	e06c      	b.n	800eef6 <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800ee1c:	4b39      	ldr	r3, [pc, #228]	@ (800ef04 <HIDS_GetMeasurementValues+0x114>)
 800ee1e:	2206      	movs	r2, #6
 800ee20:	0019      	movs	r1, r3
 800ee22:	2044      	movs	r0, #68	@ 0x44
 800ee24:	f7ff fe30 	bl	800ea88 <ReadRegister>
 800ee28:	0003      	movs	r3, r0
 800ee2a:	001a      	movs	r2, r3
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	4053      	eors	r3, r2
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d005      	beq.n	800ee42 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800ee36:	4a34      	ldr	r2, [pc, #208]	@ (800ef08 <HIDS_GetMeasurementValues+0x118>)
 800ee38:	4b34      	ldr	r3, [pc, #208]	@ (800ef0c <HIDS_GetMeasurementValues+0x11c>)
 800ee3a:	0019      	movs	r1, r3
 800ee3c:	2001      	movs	r0, #1
 800ee3e:	f7ff fd59 	bl	800e8f4 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800ee42:	4b30      	ldr	r3, [pc, #192]	@ (800ef04 <HIDS_GetMeasurementValues+0x114>)
 800ee44:	0018      	movs	r0, r3
 800ee46:	f7ff ff2b 	bl	800eca0 <CheckCRC>
 800ee4a:	0003      	movs	r3, r0
 800ee4c:	001a      	movs	r2, r3
 800ee4e:	2301      	movs	r3, #1
 800ee50:	4053      	eors	r3, r2
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d001      	beq.n	800ee5c <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	e04c      	b.n	800eef6 <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800ee5c:	4b29      	ldr	r3, [pc, #164]	@ (800ef04 <HIDS_GetMeasurementValues+0x114>)
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	021b      	lsls	r3, r3, #8
 800ee62:	4a28      	ldr	r2, [pc, #160]	@ (800ef04 <HIDS_GetMeasurementValues+0x114>)
 800ee64:	7852      	ldrb	r2, [r2, #1]
 800ee66:	4313      	orrs	r3, r2
 800ee68:	22af      	movs	r2, #175	@ 0xaf
 800ee6a:	4353      	muls	r3, r2
 800ee6c:	0018      	movs	r0, r3
 800ee6e:	f7f4 faa7 	bl	80033c0 <__aeabi_i2d>
 800ee72:	2200      	movs	r2, #0
 800ee74:	4b26      	ldr	r3, [pc, #152]	@ (800ef10 <HIDS_GetMeasurementValues+0x120>)
 800ee76:	f7f2 ff9d 	bl	8001db4 <__aeabi_ddiv>
 800ee7a:	0002      	movs	r2, r0
 800ee7c:	000b      	movs	r3, r1
 800ee7e:	0010      	movs	r0, r2
 800ee80:	0019      	movs	r1, r3
 800ee82:	f7f4 fb37 	bl	80034f4 <__aeabi_d2f>
 800ee86:	1c03      	adds	r3, r0, #0
 800ee88:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 800ee8a:	4922      	ldr	r1, [pc, #136]	@ (800ef14 <HIDS_GetMeasurementValues+0x124>)
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	f7f2 f9c5 	bl	800121c <__aeabi_fsub>
 800ee92:	1c03      	adds	r3, r0, #0
 800ee94:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800ee96:	4b1b      	ldr	r3, [pc, #108]	@ (800ef04 <HIDS_GetMeasurementValues+0x114>)
 800ee98:	78db      	ldrb	r3, [r3, #3]
 800ee9a:	021b      	lsls	r3, r3, #8
 800ee9c:	4a19      	ldr	r2, [pc, #100]	@ (800ef04 <HIDS_GetMeasurementValues+0x114>)
 800ee9e:	7912      	ldrb	r2, [r2, #4]
 800eea0:	431a      	orrs	r2, r3
 800eea2:	0013      	movs	r3, r2
 800eea4:	015b      	lsls	r3, r3, #5
 800eea6:	1a9b      	subs	r3, r3, r2
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	189b      	adds	r3, r3, r2
 800eeac:	0018      	movs	r0, r3
 800eeae:	f7f4 fa87 	bl	80033c0 <__aeabi_i2d>
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	4b16      	ldr	r3, [pc, #88]	@ (800ef10 <HIDS_GetMeasurementValues+0x120>)
 800eeb6:	f7f2 ff7d 	bl	8001db4 <__aeabi_ddiv>
 800eeba:	0002      	movs	r2, r0
 800eebc:	000b      	movs	r3, r1
 800eebe:	0010      	movs	r0, r2
 800eec0:	0019      	movs	r1, r3
 800eec2:	f7f4 fb17 	bl	80034f4 <__aeabi_d2f>
 800eec6:	1c03      	adds	r3, r0, #0
 800eec8:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 800eeca:	4913      	ldr	r1, [pc, #76]	@ (800ef18 <HIDS_GetMeasurementValues+0x128>)
 800eecc:	68b8      	ldr	r0, [r7, #8]
 800eece:	f7f2 f9a5 	bl	800121c <__aeabi_fsub>
 800eed2:	1c03      	adds	r3, r0, #0
 800eed4:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	68fa      	ldr	r2, [r7, #12]
 800eeda:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	0011      	movs	r1, r2
 800eee8:	0018      	movs	r0, r3
 800eeea:	f7fd f92d 	bl	800c148 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 800eeee:	4b04      	ldr	r3, [pc, #16]	@ (800ef00 <HIDS_GetMeasurementValues+0x110>)
 800eef0:	2201      	movs	r2, #1
 800eef2:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800eef4:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800eef6:	0018      	movs	r0, r3
 800eef8:	46bd      	mov	sp, r7
 800eefa:	b004      	add	sp, #16
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	46c0      	nop			@ (mov r8, r8)
 800ef00:	20001fca 	.word	0x20001fca
 800ef04:	20001fc4 	.word	0x20001fc4
 800ef08:	080257a8 	.word	0x080257a8
 800ef0c:	08025740 	.word	0x08025740
 800ef10:	40efffe0 	.word	0x40efffe0
 800ef14:	42340000 	.word	0x42340000
 800ef18:	40c00000 	.word	0x40c00000

0800ef1c <ResetHIDSresults>:

void ResetHIDSresults() {
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	af00      	add	r7, sp, #0
  humid = 0.0;
 800ef20:	4b04      	ldr	r3, [pc, #16]	@ (800ef34 <ResetHIDSresults+0x18>)
 800ef22:	2200      	movs	r2, #0
 800ef24:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800ef26:	4b04      	ldr	r3, [pc, #16]	@ (800ef38 <ResetHIDSresults+0x1c>)
 800ef28:	2200      	movs	r2, #0
 800ef2a:	601a      	str	r2, [r3, #0]
}
 800ef2c:	46c0      	nop			@ (mov r8, r8)
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
 800ef32:	46c0      	nop			@ (mov r8, r8)
 800ef34:	20001fac 	.word	0x20001fac
 800ef38:	20001fb0 	.word	0x20001fb0

0800ef3c <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800ef3c:	b5b0      	push	{r4, r5, r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800ef42:	4b3c      	ldr	r3, [pc, #240]	@ (800f034 <HIDS_Upkeep+0xf8>)
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	2b06      	cmp	r3, #6
 800ef48:	d868      	bhi.n	800f01c <HIDS_Upkeep+0xe0>
 800ef4a:	009a      	lsls	r2, r3, #2
 800ef4c:	4b3a      	ldr	r3, [pc, #232]	@ (800f038 <HIDS_Upkeep+0xfc>)
 800ef4e:	18d3      	adds	r3, r2, r3
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800ef54:	4a39      	ldr	r2, [pc, #228]	@ (800f03c <HIDS_Upkeep+0x100>)
 800ef56:	4b3a      	ldr	r3, [pc, #232]	@ (800f040 <HIDS_Upkeep+0x104>)
 800ef58:	0019      	movs	r1, r3
 800ef5a:	2003      	movs	r0, #3
 800ef5c:	f7ff fcca 	bl	800e8f4 <CreateLine>
      break;
 800ef60:	e063      	b.n	800f02a <HIDS_Upkeep+0xee>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 800ef62:	f7ff ffdb 	bl	800ef1c <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800ef66:	4b33      	ldr	r3, [pc, #204]	@ (800f034 <HIDS_Upkeep+0xf8>)
 800ef68:	2201      	movs	r2, #1
 800ef6a:	701a      	strb	r2, [r3, #0]
      break;
 800ef6c:	e05d      	b.n	800f02a <HIDS_Upkeep+0xee>

    case HIDS_STATE_START_MEASUREMENTS:
      SetMeasurementIndicator();
 800ef6e:	f7fe fb17 	bl	800d5a0 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800ef72:	f7ff fe45 	bl	800ec00 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800ef76:	4b2f      	ldr	r3, [pc, #188]	@ (800f034 <HIDS_Upkeep+0xf8>)
 800ef78:	2202      	movs	r2, #2
 800ef7a:	701a      	strb	r2, [r3, #0]
      break;
 800ef7c:	e055      	b.n	800f02a <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800ef7e:	4a31      	ldr	r2, [pc, #196]	@ (800f044 <HIDS_Upkeep+0x108>)
 800ef80:	4b31      	ldr	r3, [pc, #196]	@ (800f048 <HIDS_Upkeep+0x10c>)
 800ef82:	0011      	movs	r1, r2
 800ef84:	0018      	movs	r0, r3
 800ef86:	f7ff ff33 	bl	800edf0 <HIDS_GetMeasurementValues>
 800ef8a:	1e03      	subs	r3, r0, #0
 800ef8c:	d04a      	beq.n	800f024 <HIDS_Upkeep+0xe8>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800ef8e:	4b29      	ldr	r3, [pc, #164]	@ (800f034 <HIDS_Upkeep+0xf8>)
 800ef90:	2203      	movs	r2, #3
 800ef92:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ef94:	e046      	b.n	800f024 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800ef96:	4b2c      	ldr	r3, [pc, #176]	@ (800f048 <HIDS_Upkeep+0x10c>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	1c18      	adds	r0, r3, #0
 800ef9c:	f7f4 fa62 	bl	8003464 <__aeabi_f2d>
 800efa0:	0004      	movs	r4, r0
 800efa2:	000d      	movs	r5, r1
 800efa4:	4b27      	ldr	r3, [pc, #156]	@ (800f044 <HIDS_Upkeep+0x108>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	1c18      	adds	r0, r3, #0
 800efaa:	f7f4 fa5b 	bl	8003464 <__aeabi_f2d>
 800efae:	0002      	movs	r2, r0
 800efb0:	000b      	movs	r3, r1
 800efb2:	4826      	ldr	r0, [pc, #152]	@ (800f04c <HIDS_Upkeep+0x110>)
 800efb4:	4922      	ldr	r1, [pc, #136]	@ (800f040 <HIDS_Upkeep+0x104>)
 800efb6:	9202      	str	r2, [sp, #8]
 800efb8:	9303      	str	r3, [sp, #12]
 800efba:	9400      	str	r4, [sp, #0]
 800efbc:	9501      	str	r5, [sp, #4]
 800efbe:	0002      	movs	r2, r0
 800efc0:	2003      	movs	r0, #3
 800efc2:	f7ff fc97 	bl	800e8f4 <CreateLine>
      setHIDS(temp, humid);
 800efc6:	4b1f      	ldr	r3, [pc, #124]	@ (800f044 <HIDS_Upkeep+0x108>)
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	4b1f      	ldr	r3, [pc, #124]	@ (800f048 <HIDS_Upkeep+0x10c>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	1c19      	adds	r1, r3, #0
 800efd0:	1c10      	adds	r0, r2, #0
 800efd2:	f7f4 fbe9 	bl	80037a8 <setHIDS>
      ResetMeasurementIndicator();
 800efd6:	f7fe fafb 	bl	800d5d0 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 800efda:	f000 f8cf 	bl	800f17c <HAL_GetTick>
 800efde:	0004      	movs	r4, r0
 800efe0:	f7f7 fb36 	bl	8006650 <Check_USB_PowerOn>
 800efe4:	1e03      	subs	r3, r0, #0
 800efe6:	d103      	bne.n	800eff0 <HIDS_Upkeep+0xb4>
 800efe8:	4b19      	ldr	r3, [pc, #100]	@ (800f050 <HIDS_Upkeep+0x114>)
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d001      	beq.n	800eff4 <HIDS_Upkeep+0xb8>
 800eff0:	4b18      	ldr	r3, [pc, #96]	@ (800f054 <HIDS_Upkeep+0x118>)
 800eff2:	e001      	b.n	800eff8 <HIDS_Upkeep+0xbc>
 800eff4:	23fa      	movs	r3, #250	@ 0xfa
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	191a      	adds	r2, r3, r4
 800effa:	4b17      	ldr	r3, [pc, #92]	@ (800f058 <HIDS_Upkeep+0x11c>)
 800effc:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800effe:	4b0d      	ldr	r3, [pc, #52]	@ (800f034 <HIDS_Upkeep+0xf8>)
 800f000:	2206      	movs	r2, #6
 800f002:	701a      	strb	r2, [r3, #0]
      break;
 800f004:	e011      	b.n	800f02a <HIDS_Upkeep+0xee>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 800f006:	4b14      	ldr	r3, [pc, #80]	@ (800f058 <HIDS_Upkeep+0x11c>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	0018      	movs	r0, r3
 800f00c:	f7ff fc1c 	bl	800e848 <TimestampIsReached>
 800f010:	1e03      	subs	r3, r0, #0
 800f012:	d009      	beq.n	800f028 <HIDS_Upkeep+0xec>
        HIDSState = HIDS_STATE_INIT;
 800f014:	4b07      	ldr	r3, [pc, #28]	@ (800f034 <HIDS_Upkeep+0xf8>)
 800f016:	2200      	movs	r2, #0
 800f018:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f01a:	e005      	b.n	800f028 <HIDS_Upkeep+0xec>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800f01c:	4b05      	ldr	r3, [pc, #20]	@ (800f034 <HIDS_Upkeep+0xf8>)
 800f01e:	2200      	movs	r2, #0
 800f020:	701a      	strb	r2, [r3, #0]
      break;
 800f022:	e002      	b.n	800f02a <HIDS_Upkeep+0xee>
      break;
 800f024:	46c0      	nop			@ (mov r8, r8)
 800f026:	e000      	b.n	800f02a <HIDS_Upkeep+0xee>
      break;
 800f028:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800f02a:	4b02      	ldr	r3, [pc, #8]	@ (800f034 <HIDS_Upkeep+0xf8>)
 800f02c:	781b      	ldrb	r3, [r3, #0]
}
 800f02e:	0018      	movs	r0, r3
 800f030:	46bd      	mov	sp, r7
 800f032:	bdb0      	pop	{r4, r5, r7, pc}
 800f034:	20001fd0 	.word	0x20001fd0
 800f038:	08025d20 	.word	0x08025d20
 800f03c:	080257dc 	.word	0x080257dc
 800f040:	08025810 	.word	0x08025810
 800f044:	20001fb0 	.word	0x20001fb0
 800f048:	20001fac 	.word	0x20001fac
 800f04c:	08025814 	.word	0x08025814
 800f050:	20001c16 	.word	0x20001c16
 800f054:	00002710 	.word	0x00002710
 800f058:	20001fcc 	.word	0x20001fcc

0800f05c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800f05c:	480d      	ldr	r0, [pc, #52]	@ (800f094 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800f05e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800f060:	f7ff f848 	bl	800e0f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f064:	480c      	ldr	r0, [pc, #48]	@ (800f098 <LoopForever+0x6>)
  ldr r1, =_edata
 800f066:	490d      	ldr	r1, [pc, #52]	@ (800f09c <LoopForever+0xa>)
  ldr r2, =_sidata
 800f068:	4a0d      	ldr	r2, [pc, #52]	@ (800f0a0 <LoopForever+0xe>)
  movs r3, #0
 800f06a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f06c:	e002      	b.n	800f074 <LoopCopyDataInit>

0800f06e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f06e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f072:	3304      	adds	r3, #4

0800f074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f078:	d3f9      	bcc.n	800f06e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f07a:	4a0a      	ldr	r2, [pc, #40]	@ (800f0a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800f07c:	4c0a      	ldr	r4, [pc, #40]	@ (800f0a8 <LoopForever+0x16>)
  movs r3, #0
 800f07e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f080:	e001      	b.n	800f086 <LoopFillZerobss>

0800f082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f084:	3204      	adds	r2, #4

0800f086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f088:	d3fb      	bcc.n	800f082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f08a:	f011 fb79 	bl	8020780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f08e:	f7f8 ff95 	bl	8007fbc <main>

0800f092 <LoopForever>:

LoopForever:
    b LoopForever
 800f092:	e7fe      	b.n	800f092 <LoopForever>
   ldr   r0, =_estack
 800f094:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800f098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f09c:	20000428 	.word	0x20000428
  ldr r2, =_sidata
 800f0a0:	080266c0 	.word	0x080266c0
  ldr r2, =_sbss
 800f0a4:	20000428 	.word	0x20000428
  ldr r4, =_ebss
 800f0a8:	200033d8 	.word	0x200033d8

0800f0ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f0ac:	e7fe      	b.n	800f0ac <ADC1_COMP_IRQHandler>
	...

0800f0b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800f0b6:	1dfb      	adds	r3, r7, #7
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800f0bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f0ec <HAL_Init+0x3c>)
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f0ec <HAL_Init+0x3c>)
 800f0c2:	2140      	movs	r1, #64	@ 0x40
 800f0c4:	430a      	orrs	r2, r1
 800f0c6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800f0c8:	2003      	movs	r0, #3
 800f0ca:	f000 f811 	bl	800f0f0 <HAL_InitTick>
 800f0ce:	1e03      	subs	r3, r0, #0
 800f0d0:	d003      	beq.n	800f0da <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800f0d2:	1dfb      	adds	r3, r7, #7
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	701a      	strb	r2, [r3, #0]
 800f0d8:	e001      	b.n	800f0de <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800f0da:	f7fe febf 	bl	800de5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800f0de:	1dfb      	adds	r3, r7, #7
 800f0e0:	781b      	ldrb	r3, [r3, #0]
}
 800f0e2:	0018      	movs	r0, r3
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	b002      	add	sp, #8
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	46c0      	nop			@ (mov r8, r8)
 800f0ec:	40022000 	.word	0x40022000

0800f0f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f0f0:	b590      	push	{r4, r7, lr}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f0f8:	4b14      	ldr	r3, [pc, #80]	@ (800f14c <HAL_InitTick+0x5c>)
 800f0fa:	681c      	ldr	r4, [r3, #0]
 800f0fc:	4b14      	ldr	r3, [pc, #80]	@ (800f150 <HAL_InitTick+0x60>)
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	0019      	movs	r1, r3
 800f102:	23fa      	movs	r3, #250	@ 0xfa
 800f104:	0098      	lsls	r0, r3, #2
 800f106:	f7f1 f84d 	bl	80001a4 <__udivsi3>
 800f10a:	0003      	movs	r3, r0
 800f10c:	0019      	movs	r1, r3
 800f10e:	0020      	movs	r0, r4
 800f110:	f7f1 f848 	bl	80001a4 <__udivsi3>
 800f114:	0003      	movs	r3, r0
 800f116:	0018      	movs	r0, r3
 800f118:	f000 fcfd 	bl	800fb16 <HAL_SYSTICK_Config>
 800f11c:	1e03      	subs	r3, r0, #0
 800f11e:	d001      	beq.n	800f124 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800f120:	2301      	movs	r3, #1
 800f122:	e00f      	b.n	800f144 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b03      	cmp	r3, #3
 800f128:	d80b      	bhi.n	800f142 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f12a:	6879      	ldr	r1, [r7, #4]
 800f12c:	2301      	movs	r3, #1
 800f12e:	425b      	negs	r3, r3
 800f130:	2200      	movs	r2, #0
 800f132:	0018      	movs	r0, r3
 800f134:	f000 fcc6 	bl	800fac4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f138:	4b06      	ldr	r3, [pc, #24]	@ (800f154 <HAL_InitTick+0x64>)
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f13e:	2300      	movs	r3, #0
 800f140:	e000      	b.n	800f144 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800f142:	2301      	movs	r3, #1
}
 800f144:	0018      	movs	r0, r3
 800f146:	46bd      	mov	sp, r7
 800f148:	b003      	add	sp, #12
 800f14a:	bd90      	pop	{r4, r7, pc}
 800f14c:	200000d0 	.word	0x200000d0
 800f150:	200000e4 	.word	0x200000e4
 800f154:	200000e0 	.word	0x200000e0

0800f158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f15c:	4b05      	ldr	r3, [pc, #20]	@ (800f174 <HAL_IncTick+0x1c>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	001a      	movs	r2, r3
 800f162:	4b05      	ldr	r3, [pc, #20]	@ (800f178 <HAL_IncTick+0x20>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	18d2      	adds	r2, r2, r3
 800f168:	4b03      	ldr	r3, [pc, #12]	@ (800f178 <HAL_IncTick+0x20>)
 800f16a:	601a      	str	r2, [r3, #0]
}
 800f16c:	46c0      	nop			@ (mov r8, r8)
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	46c0      	nop			@ (mov r8, r8)
 800f174:	200000e4 	.word	0x200000e4
 800f178:	20001fd4 	.word	0x20001fd4

0800f17c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	af00      	add	r7, sp, #0
  return uwTick;
 800f180:	4b02      	ldr	r3, [pc, #8]	@ (800f18c <HAL_GetTick+0x10>)
 800f182:	681b      	ldr	r3, [r3, #0]
}
 800f184:	0018      	movs	r0, r3
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	46c0      	nop			@ (mov r8, r8)
 800f18c:	20001fd4 	.word	0x20001fd4

0800f190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f198:	f7ff fff0 	bl	800f17c <HAL_GetTick>
 800f19c:	0003      	movs	r3, r0
 800f19e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	d005      	beq.n	800f1b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f1aa:	4b0a      	ldr	r3, [pc, #40]	@ (800f1d4 <HAL_Delay+0x44>)
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	001a      	movs	r2, r3
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	189b      	adds	r3, r3, r2
 800f1b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f1b6:	46c0      	nop			@ (mov r8, r8)
 800f1b8:	f7ff ffe0 	bl	800f17c <HAL_GetTick>
 800f1bc:	0002      	movs	r2, r0
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d8f7      	bhi.n	800f1b8 <HAL_Delay+0x28>
  {
  }
}
 800f1c8:	46c0      	nop			@ (mov r8, r8)
 800f1ca:	46c0      	nop			@ (mov r8, r8)
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	b004      	add	sp, #16
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	46c0      	nop			@ (mov r8, r8)
 800f1d4:	200000e4 	.word	0x200000e4

0800f1d8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800f1dc:	4b04      	ldr	r3, [pc, #16]	@ (800f1f0 <HAL_SuspendTick+0x18>)
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	4b03      	ldr	r3, [pc, #12]	@ (800f1f0 <HAL_SuspendTick+0x18>)
 800f1e2:	2102      	movs	r1, #2
 800f1e4:	438a      	bics	r2, r1
 800f1e6:	601a      	str	r2, [r3, #0]
}
 800f1e8:	46c0      	nop			@ (mov r8, r8)
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	46c0      	nop			@ (mov r8, r8)
 800f1f0:	e000e010 	.word	0xe000e010

0800f1f4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800f1f8:	4b04      	ldr	r3, [pc, #16]	@ (800f20c <HAL_ResumeTick+0x18>)
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	4b03      	ldr	r3, [pc, #12]	@ (800f20c <HAL_ResumeTick+0x18>)
 800f1fe:	2102      	movs	r1, #2
 800f200:	430a      	orrs	r2, r1
 800f202:	601a      	str	r2, [r3, #0]
}
 800f204:	46c0      	nop			@ (mov r8, r8)
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	46c0      	nop			@ (mov r8, r8)
 800f20c:	e000e010 	.word	0xe000e010

0800f210 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800f214:	4b02      	ldr	r3, [pc, #8]	@ (800f220 <HAL_GetUIDw0+0x10>)
 800f216:	681b      	ldr	r3, [r3, #0]
}
 800f218:	0018      	movs	r0, r3
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	46c0      	nop			@ (mov r8, r8)
 800f220:	1ff80050 	.word	0x1ff80050

0800f224 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800f228:	4b02      	ldr	r3, [pc, #8]	@ (800f234 <HAL_GetUIDw1+0x10>)
 800f22a:	681b      	ldr	r3, [r3, #0]
}
 800f22c:	0018      	movs	r0, r3
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	46c0      	nop			@ (mov r8, r8)
 800f234:	1ff80054 	.word	0x1ff80054

0800f238 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800f23c:	4b02      	ldr	r3, [pc, #8]	@ (800f248 <HAL_GetUIDw2+0x10>)
 800f23e:	681b      	ldr	r3, [r3, #0]
}
 800f240:	0018      	movs	r0, r3
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	46c0      	nop			@ (mov r8, r8)
 800f248:	1ff80064 	.word	0x1ff80064

0800f24c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d101      	bne.n	800f25e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800f25a:	2301      	movs	r3, #1
 800f25c:	e159      	b.n	800f512 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f262:	2b00      	cmp	r3, #0
 800f264:	d10a      	bne.n	800f27c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2200      	movs	r2, #0
 800f26a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2250      	movs	r2, #80	@ 0x50
 800f270:	2100      	movs	r1, #0
 800f272:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	0018      	movs	r0, r3
 800f278:	f7f8 f882 	bl	8007380 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f280:	2210      	movs	r2, #16
 800f282:	4013      	ands	r3, r2
 800f284:	2b10      	cmp	r3, #16
 800f286:	d005      	beq.n	800f294 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	2204      	movs	r2, #4
 800f290:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800f292:	d00b      	beq.n	800f2ac <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f298:	2210      	movs	r2, #16
 800f29a:	431a      	orrs	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2250      	movs	r2, #80	@ 0x50
 800f2a4:	2100      	movs	r1, #0
 800f2a6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	e132      	b.n	800f512 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2b0:	4a9a      	ldr	r2, [pc, #616]	@ (800f51c <HAL_ADC_Init+0x2d0>)
 800f2b2:	4013      	ands	r3, r2
 800f2b4:	2202      	movs	r2, #2
 800f2b6:	431a      	orrs	r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	2203      	movs	r2, #3
 800f2c4:	4013      	ands	r3, r2
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d108      	bne.n	800f2dc <HAL_ADC_Init+0x90>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	4013      	ands	r3, r2
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d101      	bne.n	800f2dc <HAL_ADC_Init+0x90>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	e000      	b.n	800f2de <HAL_ADC_Init+0x92>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d149      	bne.n	800f376 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	685a      	ldr	r2, [r3, #4]
 800f2e6:	23c0      	movs	r3, #192	@ 0xc0
 800f2e8:	061b      	lsls	r3, r3, #24
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d00b      	beq.n	800f306 <HAL_ADC_Init+0xba>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	685a      	ldr	r2, [r3, #4]
 800f2f2:	2380      	movs	r3, #128	@ 0x80
 800f2f4:	05db      	lsls	r3, r3, #23
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d005      	beq.n	800f306 <HAL_ADC_Init+0xba>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	685a      	ldr	r2, [r3, #4]
 800f2fe:	2380      	movs	r3, #128	@ 0x80
 800f300:	061b      	lsls	r3, r3, #24
 800f302:	429a      	cmp	r2, r3
 800f304:	d111      	bne.n	800f32a <HAL_ADC_Init+0xde>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	691a      	ldr	r2, [r3, #16]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	0092      	lsls	r2, r2, #2
 800f312:	0892      	lsrs	r2, r2, #2
 800f314:	611a      	str	r2, [r3, #16]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	6919      	ldr	r1, [r3, #16]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	685a      	ldr	r2, [r3, #4]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	430a      	orrs	r2, r1
 800f326:	611a      	str	r2, [r3, #16]
 800f328:	e014      	b.n	800f354 <HAL_ADC_Init+0x108>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	691a      	ldr	r2, [r3, #16]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	0092      	lsls	r2, r2, #2
 800f336:	0892      	lsrs	r2, r2, #2
 800f338:	611a      	str	r2, [r3, #16]
 800f33a:	4b79      	ldr	r3, [pc, #484]	@ (800f520 <HAL_ADC_Init+0x2d4>)
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	4b78      	ldr	r3, [pc, #480]	@ (800f520 <HAL_ADC_Init+0x2d4>)
 800f340:	4978      	ldr	r1, [pc, #480]	@ (800f524 <HAL_ADC_Init+0x2d8>)
 800f342:	400a      	ands	r2, r1
 800f344:	601a      	str	r2, [r3, #0]
 800f346:	4b76      	ldr	r3, [pc, #472]	@ (800f520 <HAL_ADC_Init+0x2d4>)
 800f348:	6819      	ldr	r1, [r3, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	685a      	ldr	r2, [r3, #4]
 800f34e:	4b74      	ldr	r3, [pc, #464]	@ (800f520 <HAL_ADC_Init+0x2d4>)
 800f350:	430a      	orrs	r2, r1
 800f352:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68da      	ldr	r2, [r3, #12]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	2118      	movs	r1, #24
 800f360:	438a      	bics	r2, r1
 800f362:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68d9      	ldr	r1, [r3, #12]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	689a      	ldr	r2, [r3, #8]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	430a      	orrs	r2, r1
 800f374:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800f376:	4b6a      	ldr	r3, [pc, #424]	@ (800f520 <HAL_ADC_Init+0x2d4>)
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	4b69      	ldr	r3, [pc, #420]	@ (800f520 <HAL_ADC_Init+0x2d4>)
 800f37c:	496a      	ldr	r1, [pc, #424]	@ (800f528 <HAL_ADC_Init+0x2dc>)
 800f37e:	400a      	ands	r2, r1
 800f380:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800f382:	4b67      	ldr	r3, [pc, #412]	@ (800f520 <HAL_ADC_Init+0x2d4>)
 800f384:	6819      	ldr	r1, [r3, #0]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f38a:	065a      	lsls	r2, r3, #25
 800f38c:	4b64      	ldr	r3, [pc, #400]	@ (800f520 <HAL_ADC_Init+0x2d4>)
 800f38e:	430a      	orrs	r2, r1
 800f390:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	689a      	ldr	r2, [r3, #8]
 800f398:	2380      	movs	r3, #128	@ 0x80
 800f39a:	055b      	lsls	r3, r3, #21
 800f39c:	4013      	ands	r3, r2
 800f39e:	d108      	bne.n	800f3b2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	689a      	ldr	r2, [r3, #8]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2180      	movs	r1, #128	@ 0x80
 800f3ac:	0549      	lsls	r1, r1, #21
 800f3ae:	430a      	orrs	r2, r1
 800f3b0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68da      	ldr	r2, [r3, #12]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	495b      	ldr	r1, [pc, #364]	@ (800f52c <HAL_ADC_Init+0x2e0>)
 800f3be:	400a      	ands	r2, r1
 800f3c0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	68d9      	ldr	r1, [r3, #12]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	691b      	ldr	r3, [r3, #16]
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d101      	bne.n	800f3d8 <HAL_ADC_Init+0x18c>
 800f3d4:	2304      	movs	r3, #4
 800f3d6:	e000      	b.n	800f3da <HAL_ADC_Init+0x18e>
 800f3d8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f3da:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2020      	movs	r0, #32
 800f3e0:	5c1b      	ldrb	r3, [r3, r0]
 800f3e2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800f3e4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	202c      	movs	r0, #44	@ 0x2c
 800f3ea:	5c1b      	ldrb	r3, [r3, r0]
 800f3ec:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800f3ee:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800f3f4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	699b      	ldr	r3, [r3, #24]
 800f3fa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800f3fc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	69db      	ldr	r3, [r3, #28]
 800f402:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800f404:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	430a      	orrs	r2, r1
 800f40c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f412:	23c2      	movs	r3, #194	@ 0xc2
 800f414:	33ff      	adds	r3, #255	@ 0xff
 800f416:	429a      	cmp	r2, r3
 800f418:	d00b      	beq.n	800f432 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	68d9      	ldr	r1, [r3, #12]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800f428:	431a      	orrs	r2, r3
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	430a      	orrs	r2, r1
 800f430:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2221      	movs	r2, #33	@ 0x21
 800f436:	5c9b      	ldrb	r3, [r3, r2]
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d11a      	bne.n	800f472 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2220      	movs	r2, #32
 800f440:	5c9b      	ldrb	r3, [r3, r2]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d109      	bne.n	800f45a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	68da      	ldr	r2, [r3, #12]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2180      	movs	r1, #128	@ 0x80
 800f452:	0249      	lsls	r1, r1, #9
 800f454:	430a      	orrs	r2, r1
 800f456:	60da      	str	r2, [r3, #12]
 800f458:	e00b      	b.n	800f472 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f45e:	2220      	movs	r2, #32
 800f460:	431a      	orrs	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f46a:	2201      	movs	r2, #1
 800f46c:	431a      	orrs	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f476:	2b01      	cmp	r3, #1
 800f478:	d11f      	bne.n	800f4ba <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	691a      	ldr	r2, [r3, #16]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	492a      	ldr	r1, [pc, #168]	@ (800f530 <HAL_ADC_Init+0x2e4>)
 800f486:	400a      	ands	r2, r1
 800f488:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	6919      	ldr	r1, [r3, #16]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f498:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800f49e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	430a      	orrs	r2, r1
 800f4a6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	691a      	ldr	r2, [r3, #16]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	2101      	movs	r1, #1
 800f4b4:	430a      	orrs	r2, r1
 800f4b6:	611a      	str	r2, [r3, #16]
 800f4b8:	e00e      	b.n	800f4d8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	691b      	ldr	r3, [r3, #16]
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	4013      	ands	r3, r2
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d107      	bne.n	800f4d8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	691a      	ldr	r2, [r3, #16]
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2101      	movs	r1, #1
 800f4d4:	438a      	bics	r2, r1
 800f4d6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	695a      	ldr	r2, [r3, #20]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2107      	movs	r1, #7
 800f4e4:	438a      	bics	r2, r1
 800f4e6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	6959      	ldr	r1, [r3, #20]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	430a      	orrs	r2, r1
 800f4f8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f504:	2203      	movs	r2, #3
 800f506:	4393      	bics	r3, r2
 800f508:	2201      	movs	r2, #1
 800f50a:	431a      	orrs	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f510:	2300      	movs	r3, #0
}
 800f512:	0018      	movs	r0, r3
 800f514:	46bd      	mov	sp, r7
 800f516:	b002      	add	sp, #8
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	46c0      	nop			@ (mov r8, r8)
 800f51c:	fffffefd 	.word	0xfffffefd
 800f520:	40012708 	.word	0x40012708
 800f524:	ffc3ffff 	.word	0xffc3ffff
 800f528:	fdffffff 	.word	0xfdffffff
 800f52c:	fffe0219 	.word	0xfffe0219
 800f530:	fffffc03 	.word	0xfffffc03

0800f534 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f534:	b590      	push	{r4, r7, lr}
 800f536:	b085      	sub	sp, #20
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f53c:	230f      	movs	r3, #15
 800f53e:	18fb      	adds	r3, r7, r3
 800f540:	2200      	movs	r2, #0
 800f542:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	2204      	movs	r2, #4
 800f54c:	4013      	ands	r3, r2
 800f54e:	d138      	bne.n	800f5c2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2250      	movs	r2, #80	@ 0x50
 800f554:	5c9b      	ldrb	r3, [r3, r2]
 800f556:	2b01      	cmp	r3, #1
 800f558:	d101      	bne.n	800f55e <HAL_ADC_Start+0x2a>
 800f55a:	2302      	movs	r3, #2
 800f55c:	e038      	b.n	800f5d0 <HAL_ADC_Start+0x9c>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2250      	movs	r2, #80	@ 0x50
 800f562:	2101      	movs	r1, #1
 800f564:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	69db      	ldr	r3, [r3, #28]
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d007      	beq.n	800f57e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f56e:	230f      	movs	r3, #15
 800f570:	18fc      	adds	r4, r7, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	0018      	movs	r0, r3
 800f576:	f000 f95f 	bl	800f838 <ADC_Enable>
 800f57a:	0003      	movs	r3, r0
 800f57c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f57e:	230f      	movs	r3, #15
 800f580:	18fb      	adds	r3, r7, r3
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d120      	bne.n	800f5ca <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f58c:	4a12      	ldr	r2, [pc, #72]	@ (800f5d8 <HAL_ADC_Start+0xa4>)
 800f58e:	4013      	ands	r3, r2
 800f590:	2280      	movs	r2, #128	@ 0x80
 800f592:	0052      	lsls	r2, r2, #1
 800f594:	431a      	orrs	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2200      	movs	r2, #0
 800f59e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2250      	movs	r2, #80	@ 0x50
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	221c      	movs	r2, #28
 800f5ae:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	689a      	ldr	r2, [r3, #8]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2104      	movs	r1, #4
 800f5bc:	430a      	orrs	r2, r1
 800f5be:	609a      	str	r2, [r3, #8]
 800f5c0:	e003      	b.n	800f5ca <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f5c2:	230f      	movs	r3, #15
 800f5c4:	18fb      	adds	r3, r7, r3
 800f5c6:	2202      	movs	r2, #2
 800f5c8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f5ca:	230f      	movs	r3, #15
 800f5cc:	18fb      	adds	r3, r7, r3
 800f5ce:	781b      	ldrb	r3, [r3, #0]
}
 800f5d0:	0018      	movs	r0, r3
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	b005      	add	sp, #20
 800f5d6:	bd90      	pop	{r4, r7, pc}
 800f5d8:	fffff0fe 	.word	0xfffff0fe

0800f5dc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b084      	sub	sp, #16
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	695b      	ldr	r3, [r3, #20]
 800f5f2:	2b08      	cmp	r3, #8
 800f5f4:	d102      	bne.n	800f5fc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f5f6:	2308      	movs	r3, #8
 800f5f8:	60fb      	str	r3, [r7, #12]
 800f5fa:	e014      	b.n	800f626 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	2201      	movs	r2, #1
 800f604:	4013      	ands	r3, r2
 800f606:	2b01      	cmp	r3, #1
 800f608:	d10b      	bne.n	800f622 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f60e:	2220      	movs	r2, #32
 800f610:	431a      	orrs	r2, r3
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2250      	movs	r2, #80	@ 0x50
 800f61a:	2100      	movs	r1, #0
 800f61c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f61e:	2301      	movs	r3, #1
 800f620:	e072      	b.n	800f708 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f622:	230c      	movs	r3, #12
 800f624:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f626:	f7ff fda9 	bl	800f17c <HAL_GetTick>
 800f62a:	0003      	movs	r3, r0
 800f62c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f62e:	e01f      	b.n	800f670 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	3301      	adds	r3, #1
 800f634:	d01c      	beq.n	800f670 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d007      	beq.n	800f64c <HAL_ADC_PollForConversion+0x70>
 800f63c:	f7ff fd9e 	bl	800f17c <HAL_GetTick>
 800f640:	0002      	movs	r2, r0
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	1ad3      	subs	r3, r2, r3
 800f646:	683a      	ldr	r2, [r7, #0]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d211      	bcs.n	800f670 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	4013      	ands	r3, r2
 800f656:	d10b      	bne.n	800f670 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f65c:	2204      	movs	r2, #4
 800f65e:	431a      	orrs	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2250      	movs	r2, #80	@ 0x50
 800f668:	2100      	movs	r1, #0
 800f66a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f66c:	2303      	movs	r3, #3
 800f66e:	e04b      	b.n	800f708 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	4013      	ands	r3, r2
 800f67a:	d0d9      	beq.n	800f630 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f680:	2280      	movs	r2, #128	@ 0x80
 800f682:	0092      	lsls	r2, r2, #2
 800f684:	431a      	orrs	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	68da      	ldr	r2, [r3, #12]
 800f690:	23c0      	movs	r3, #192	@ 0xc0
 800f692:	011b      	lsls	r3, r3, #4
 800f694:	4013      	ands	r3, r2
 800f696:	d12e      	bne.n	800f6f6 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2220      	movs	r2, #32
 800f69c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d129      	bne.n	800f6f6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2208      	movs	r2, #8
 800f6aa:	4013      	ands	r3, r2
 800f6ac:	2b08      	cmp	r3, #8
 800f6ae:	d122      	bne.n	800f6f6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	689b      	ldr	r3, [r3, #8]
 800f6b6:	2204      	movs	r2, #4
 800f6b8:	4013      	ands	r3, r2
 800f6ba:	d110      	bne.n	800f6de <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	685a      	ldr	r2, [r3, #4]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	210c      	movs	r1, #12
 800f6c8:	438a      	bics	r2, r1
 800f6ca:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6d0:	4a0f      	ldr	r2, [pc, #60]	@ (800f710 <HAL_ADC_PollForConversion+0x134>)
 800f6d2:	4013      	ands	r3, r2
 800f6d4:	2201      	movs	r2, #1
 800f6d6:	431a      	orrs	r2, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	655a      	str	r2, [r3, #84]	@ 0x54
 800f6dc:	e00b      	b.n	800f6f6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6e2:	2220      	movs	r2, #32
 800f6e4:	431a      	orrs	r2, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	431a      	orrs	r2, r3
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d103      	bne.n	800f706 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	220c      	movs	r2, #12
 800f704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f706:	2300      	movs	r3, #0
}
 800f708:	0018      	movs	r0, r3
 800f70a:	46bd      	mov	sp, r7
 800f70c:	b004      	add	sp, #16
 800f70e:	bd80      	pop	{r7, pc}
 800f710:	fffffefe 	.word	0xfffffefe

0800f714 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f722:	0018      	movs	r0, r3
 800f724:	46bd      	mov	sp, r7
 800f726:	b002      	add	sp, #8
 800f728:	bd80      	pop	{r7, pc}
	...

0800f72c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2250      	movs	r2, #80	@ 0x50
 800f73a:	5c9b      	ldrb	r3, [r3, r2]
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d101      	bne.n	800f744 <HAL_ADC_ConfigChannel+0x18>
 800f740:	2302      	movs	r3, #2
 800f742:	e06c      	b.n	800f81e <HAL_ADC_ConfigChannel+0xf2>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2250      	movs	r2, #80	@ 0x50
 800f748:	2101      	movs	r1, #1
 800f74a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	689b      	ldr	r3, [r3, #8]
 800f752:	2204      	movs	r2, #4
 800f754:	4013      	ands	r3, r2
 800f756:	d00b      	beq.n	800f770 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f75c:	2220      	movs	r2, #32
 800f75e:	431a      	orrs	r2, r3
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2250      	movs	r2, #80	@ 0x50
 800f768:	2100      	movs	r1, #0
 800f76a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f76c:	2301      	movs	r3, #1
 800f76e:	e056      	b.n	800f81e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	685b      	ldr	r3, [r3, #4]
 800f774:	4a2c      	ldr	r2, [pc, #176]	@ (800f828 <HAL_ADC_ConfigChannel+0xfc>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d028      	beq.n	800f7cc <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	035b      	lsls	r3, r3, #13
 800f786:	0b5a      	lsrs	r2, r3, #13
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	430a      	orrs	r2, r1
 800f78e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	2380      	movs	r3, #128	@ 0x80
 800f796:	02db      	lsls	r3, r3, #11
 800f798:	4013      	ands	r3, r2
 800f79a:	d009      	beq.n	800f7b0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f79c:	4b23      	ldr	r3, [pc, #140]	@ (800f82c <HAL_ADC_ConfigChannel+0x100>)
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	4b22      	ldr	r3, [pc, #136]	@ (800f82c <HAL_ADC_ConfigChannel+0x100>)
 800f7a2:	2180      	movs	r1, #128	@ 0x80
 800f7a4:	0409      	lsls	r1, r1, #16
 800f7a6:	430a      	orrs	r2, r1
 800f7a8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f7aa:	200a      	movs	r0, #10
 800f7ac:	f000 f8ac 	bl	800f908 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	2380      	movs	r3, #128	@ 0x80
 800f7b6:	029b      	lsls	r3, r3, #10
 800f7b8:	4013      	ands	r3, r2
 800f7ba:	d02b      	beq.n	800f814 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f7bc:	4b1b      	ldr	r3, [pc, #108]	@ (800f82c <HAL_ADC_ConfigChannel+0x100>)
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	4b1a      	ldr	r3, [pc, #104]	@ (800f82c <HAL_ADC_ConfigChannel+0x100>)
 800f7c2:	2180      	movs	r1, #128	@ 0x80
 800f7c4:	03c9      	lsls	r1, r1, #15
 800f7c6:	430a      	orrs	r2, r1
 800f7c8:	601a      	str	r2, [r3, #0]
 800f7ca:	e023      	b.n	800f814 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	035b      	lsls	r3, r3, #13
 800f7d8:	0b5b      	lsrs	r3, r3, #13
 800f7da:	43d9      	mvns	r1, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	400a      	ands	r2, r1
 800f7e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	681a      	ldr	r2, [r3, #0]
 800f7e8:	2380      	movs	r3, #128	@ 0x80
 800f7ea:	02db      	lsls	r3, r3, #11
 800f7ec:	4013      	ands	r3, r2
 800f7ee:	d005      	beq.n	800f7fc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f7f0:	4b0e      	ldr	r3, [pc, #56]	@ (800f82c <HAL_ADC_ConfigChannel+0x100>)
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	4b0d      	ldr	r3, [pc, #52]	@ (800f82c <HAL_ADC_ConfigChannel+0x100>)
 800f7f6:	490e      	ldr	r1, [pc, #56]	@ (800f830 <HAL_ADC_ConfigChannel+0x104>)
 800f7f8:	400a      	ands	r2, r1
 800f7fa:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	2380      	movs	r3, #128	@ 0x80
 800f802:	029b      	lsls	r3, r3, #10
 800f804:	4013      	ands	r3, r2
 800f806:	d005      	beq.n	800f814 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f808:	4b08      	ldr	r3, [pc, #32]	@ (800f82c <HAL_ADC_ConfigChannel+0x100>)
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	4b07      	ldr	r3, [pc, #28]	@ (800f82c <HAL_ADC_ConfigChannel+0x100>)
 800f80e:	4909      	ldr	r1, [pc, #36]	@ (800f834 <HAL_ADC_ConfigChannel+0x108>)
 800f810:	400a      	ands	r2, r1
 800f812:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2250      	movs	r2, #80	@ 0x50
 800f818:	2100      	movs	r1, #0
 800f81a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f81c:	2300      	movs	r3, #0
}
 800f81e:	0018      	movs	r0, r3
 800f820:	46bd      	mov	sp, r7
 800f822:	b002      	add	sp, #8
 800f824:	bd80      	pop	{r7, pc}
 800f826:	46c0      	nop			@ (mov r8, r8)
 800f828:	00001001 	.word	0x00001001
 800f82c:	40012708 	.word	0x40012708
 800f830:	ff7fffff 	.word	0xff7fffff
 800f834:	ffbfffff 	.word	0xffbfffff

0800f838 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f840:	2300      	movs	r3, #0
 800f842:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	689b      	ldr	r3, [r3, #8]
 800f84a:	2203      	movs	r2, #3
 800f84c:	4013      	ands	r3, r2
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d108      	bne.n	800f864 <ADC_Enable+0x2c>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2201      	movs	r2, #1
 800f85a:	4013      	ands	r3, r2
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d101      	bne.n	800f864 <ADC_Enable+0x2c>
 800f860:	2301      	movs	r3, #1
 800f862:	e000      	b.n	800f866 <ADC_Enable+0x2e>
 800f864:	2300      	movs	r3, #0
 800f866:	2b00      	cmp	r3, #0
 800f868:	d146      	bne.n	800f8f8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	689b      	ldr	r3, [r3, #8]
 800f870:	4a24      	ldr	r2, [pc, #144]	@ (800f904 <ADC_Enable+0xcc>)
 800f872:	4013      	ands	r3, r2
 800f874:	d00d      	beq.n	800f892 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f87a:	2210      	movs	r2, #16
 800f87c:	431a      	orrs	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f886:	2201      	movs	r2, #1
 800f888:	431a      	orrs	r2, r3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f88e:	2301      	movs	r3, #1
 800f890:	e033      	b.n	800f8fa <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	689a      	ldr	r2, [r3, #8]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2101      	movs	r1, #1
 800f89e:	430a      	orrs	r2, r1
 800f8a0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f8a2:	2001      	movs	r0, #1
 800f8a4:	f000 f830 	bl	800f908 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f8a8:	f7ff fc68 	bl	800f17c <HAL_GetTick>
 800f8ac:	0003      	movs	r3, r0
 800f8ae:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f8b0:	e01b      	b.n	800f8ea <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f8b2:	f7ff fc63 	bl	800f17c <HAL_GetTick>
 800f8b6:	0002      	movs	r2, r0
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	1ad3      	subs	r3, r2, r3
 800f8bc:	2b0a      	cmp	r3, #10
 800f8be:	d914      	bls.n	800f8ea <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	4013      	ands	r3, r2
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d00d      	beq.n	800f8ea <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8d2:	2210      	movs	r2, #16
 800f8d4:	431a      	orrs	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f8de:	2201      	movs	r2, #1
 800f8e0:	431a      	orrs	r2, r3
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	e007      	b.n	800f8fa <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	4013      	ands	r3, r2
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d1dc      	bne.n	800f8b2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f8f8:	2300      	movs	r3, #0
}
 800f8fa:	0018      	movs	r0, r3
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	b004      	add	sp, #16
 800f900:	bd80      	pop	{r7, pc}
 800f902:	46c0      	nop			@ (mov r8, r8)
 800f904:	80000017 	.word	0x80000017

0800f908 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f910:	4b0b      	ldr	r3, [pc, #44]	@ (800f940 <ADC_DelayMicroSecond+0x38>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	490b      	ldr	r1, [pc, #44]	@ (800f944 <ADC_DelayMicroSecond+0x3c>)
 800f916:	0018      	movs	r0, r3
 800f918:	f7f0 fc44 	bl	80001a4 <__udivsi3>
 800f91c:	0003      	movs	r3, r0
 800f91e:	001a      	movs	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4353      	muls	r3, r2
 800f924:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f926:	e002      	b.n	800f92e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	3b01      	subs	r3, #1
 800f92c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d1f9      	bne.n	800f928 <ADC_DelayMicroSecond+0x20>
  }
}
 800f934:	46c0      	nop			@ (mov r8, r8)
 800f936:	46c0      	nop			@ (mov r8, r8)
 800f938:	46bd      	mov	sp, r7
 800f93a:	b004      	add	sp, #16
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	46c0      	nop			@ (mov r8, r8)
 800f940:	200000d0 	.word	0x200000d0
 800f944:	000f4240 	.word	0x000f4240

0800f948 <__NVIC_EnableIRQ>:
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	0002      	movs	r2, r0
 800f950:	1dfb      	adds	r3, r7, #7
 800f952:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f954:	1dfb      	adds	r3, r7, #7
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	2b7f      	cmp	r3, #127	@ 0x7f
 800f95a:	d809      	bhi.n	800f970 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f95c:	1dfb      	adds	r3, r7, #7
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	001a      	movs	r2, r3
 800f962:	231f      	movs	r3, #31
 800f964:	401a      	ands	r2, r3
 800f966:	4b04      	ldr	r3, [pc, #16]	@ (800f978 <__NVIC_EnableIRQ+0x30>)
 800f968:	2101      	movs	r1, #1
 800f96a:	4091      	lsls	r1, r2
 800f96c:	000a      	movs	r2, r1
 800f96e:	601a      	str	r2, [r3, #0]
}
 800f970:	46c0      	nop			@ (mov r8, r8)
 800f972:	46bd      	mov	sp, r7
 800f974:	b002      	add	sp, #8
 800f976:	bd80      	pop	{r7, pc}
 800f978:	e000e100 	.word	0xe000e100

0800f97c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f97c:	b590      	push	{r4, r7, lr}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	0002      	movs	r2, r0
 800f984:	6039      	str	r1, [r7, #0]
 800f986:	1dfb      	adds	r3, r7, #7
 800f988:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f98a:	1dfb      	adds	r3, r7, #7
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f990:	d828      	bhi.n	800f9e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f992:	4a2f      	ldr	r2, [pc, #188]	@ (800fa50 <__NVIC_SetPriority+0xd4>)
 800f994:	1dfb      	adds	r3, r7, #7
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	b25b      	sxtb	r3, r3
 800f99a:	089b      	lsrs	r3, r3, #2
 800f99c:	33c0      	adds	r3, #192	@ 0xc0
 800f99e:	009b      	lsls	r3, r3, #2
 800f9a0:	589b      	ldr	r3, [r3, r2]
 800f9a2:	1dfa      	adds	r2, r7, #7
 800f9a4:	7812      	ldrb	r2, [r2, #0]
 800f9a6:	0011      	movs	r1, r2
 800f9a8:	2203      	movs	r2, #3
 800f9aa:	400a      	ands	r2, r1
 800f9ac:	00d2      	lsls	r2, r2, #3
 800f9ae:	21ff      	movs	r1, #255	@ 0xff
 800f9b0:	4091      	lsls	r1, r2
 800f9b2:	000a      	movs	r2, r1
 800f9b4:	43d2      	mvns	r2, r2
 800f9b6:	401a      	ands	r2, r3
 800f9b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	019b      	lsls	r3, r3, #6
 800f9be:	22ff      	movs	r2, #255	@ 0xff
 800f9c0:	401a      	ands	r2, r3
 800f9c2:	1dfb      	adds	r3, r7, #7
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	0018      	movs	r0, r3
 800f9c8:	2303      	movs	r3, #3
 800f9ca:	4003      	ands	r3, r0
 800f9cc:	00db      	lsls	r3, r3, #3
 800f9ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f9d0:	481f      	ldr	r0, [pc, #124]	@ (800fa50 <__NVIC_SetPriority+0xd4>)
 800f9d2:	1dfb      	adds	r3, r7, #7
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	b25b      	sxtb	r3, r3
 800f9d8:	089b      	lsrs	r3, r3, #2
 800f9da:	430a      	orrs	r2, r1
 800f9dc:	33c0      	adds	r3, #192	@ 0xc0
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f9e2:	e031      	b.n	800fa48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f9e4:	4a1b      	ldr	r2, [pc, #108]	@ (800fa54 <__NVIC_SetPriority+0xd8>)
 800f9e6:	1dfb      	adds	r3, r7, #7
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	0019      	movs	r1, r3
 800f9ec:	230f      	movs	r3, #15
 800f9ee:	400b      	ands	r3, r1
 800f9f0:	3b08      	subs	r3, #8
 800f9f2:	089b      	lsrs	r3, r3, #2
 800f9f4:	3306      	adds	r3, #6
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	18d3      	adds	r3, r2, r3
 800f9fa:	3304      	adds	r3, #4
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	1dfa      	adds	r2, r7, #7
 800fa00:	7812      	ldrb	r2, [r2, #0]
 800fa02:	0011      	movs	r1, r2
 800fa04:	2203      	movs	r2, #3
 800fa06:	400a      	ands	r2, r1
 800fa08:	00d2      	lsls	r2, r2, #3
 800fa0a:	21ff      	movs	r1, #255	@ 0xff
 800fa0c:	4091      	lsls	r1, r2
 800fa0e:	000a      	movs	r2, r1
 800fa10:	43d2      	mvns	r2, r2
 800fa12:	401a      	ands	r2, r3
 800fa14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	019b      	lsls	r3, r3, #6
 800fa1a:	22ff      	movs	r2, #255	@ 0xff
 800fa1c:	401a      	ands	r2, r3
 800fa1e:	1dfb      	adds	r3, r7, #7
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	0018      	movs	r0, r3
 800fa24:	2303      	movs	r3, #3
 800fa26:	4003      	ands	r3, r0
 800fa28:	00db      	lsls	r3, r3, #3
 800fa2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800fa2c:	4809      	ldr	r0, [pc, #36]	@ (800fa54 <__NVIC_SetPriority+0xd8>)
 800fa2e:	1dfb      	adds	r3, r7, #7
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	001c      	movs	r4, r3
 800fa34:	230f      	movs	r3, #15
 800fa36:	4023      	ands	r3, r4
 800fa38:	3b08      	subs	r3, #8
 800fa3a:	089b      	lsrs	r3, r3, #2
 800fa3c:	430a      	orrs	r2, r1
 800fa3e:	3306      	adds	r3, #6
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	18c3      	adds	r3, r0, r3
 800fa44:	3304      	adds	r3, #4
 800fa46:	601a      	str	r2, [r3, #0]
}
 800fa48:	46c0      	nop			@ (mov r8, r8)
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	b003      	add	sp, #12
 800fa4e:	bd90      	pop	{r4, r7, pc}
 800fa50:	e000e100 	.word	0xe000e100
 800fa54:	e000ed00 	.word	0xe000ed00

0800fa58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800fa5c:	f3bf 8f4f 	dsb	sy
}
 800fa60:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800fa62:	4b04      	ldr	r3, [pc, #16]	@ (800fa74 <__NVIC_SystemReset+0x1c>)
 800fa64:	4a04      	ldr	r2, [pc, #16]	@ (800fa78 <__NVIC_SystemReset+0x20>)
 800fa66:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800fa68:	f3bf 8f4f 	dsb	sy
}
 800fa6c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800fa6e:	46c0      	nop			@ (mov r8, r8)
 800fa70:	e7fd      	b.n	800fa6e <__NVIC_SystemReset+0x16>
 800fa72:	46c0      	nop			@ (mov r8, r8)
 800fa74:	e000ed00 	.word	0xe000ed00
 800fa78:	05fa0004 	.word	0x05fa0004

0800fa7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	1e5a      	subs	r2, r3, #1
 800fa88:	2380      	movs	r3, #128	@ 0x80
 800fa8a:	045b      	lsls	r3, r3, #17
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d301      	bcc.n	800fa94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800fa90:	2301      	movs	r3, #1
 800fa92:	e010      	b.n	800fab6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800fa94:	4b0a      	ldr	r3, [pc, #40]	@ (800fac0 <SysTick_Config+0x44>)
 800fa96:	687a      	ldr	r2, [r7, #4]
 800fa98:	3a01      	subs	r2, #1
 800fa9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	425b      	negs	r3, r3
 800faa0:	2103      	movs	r1, #3
 800faa2:	0018      	movs	r0, r3
 800faa4:	f7ff ff6a 	bl	800f97c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800faa8:	4b05      	ldr	r3, [pc, #20]	@ (800fac0 <SysTick_Config+0x44>)
 800faaa:	2200      	movs	r2, #0
 800faac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800faae:	4b04      	ldr	r3, [pc, #16]	@ (800fac0 <SysTick_Config+0x44>)
 800fab0:	2207      	movs	r2, #7
 800fab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	0018      	movs	r0, r3
 800fab8:	46bd      	mov	sp, r7
 800faba:	b002      	add	sp, #8
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	46c0      	nop			@ (mov r8, r8)
 800fac0:	e000e010 	.word	0xe000e010

0800fac4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60b9      	str	r1, [r7, #8]
 800facc:	607a      	str	r2, [r7, #4]
 800face:	210f      	movs	r1, #15
 800fad0:	187b      	adds	r3, r7, r1
 800fad2:	1c02      	adds	r2, r0, #0
 800fad4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800fad6:	68ba      	ldr	r2, [r7, #8]
 800fad8:	187b      	adds	r3, r7, r1
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	b25b      	sxtb	r3, r3
 800fade:	0011      	movs	r1, r2
 800fae0:	0018      	movs	r0, r3
 800fae2:	f7ff ff4b 	bl	800f97c <__NVIC_SetPriority>
}
 800fae6:	46c0      	nop			@ (mov r8, r8)
 800fae8:	46bd      	mov	sp, r7
 800faea:	b004      	add	sp, #16
 800faec:	bd80      	pop	{r7, pc}

0800faee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b082      	sub	sp, #8
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	0002      	movs	r2, r0
 800faf6:	1dfb      	adds	r3, r7, #7
 800faf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800fafa:	1dfb      	adds	r3, r7, #7
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	b25b      	sxtb	r3, r3
 800fb00:	0018      	movs	r0, r3
 800fb02:	f7ff ff21 	bl	800f948 <__NVIC_EnableIRQ>
}
 800fb06:	46c0      	nop			@ (mov r8, r8)
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	b002      	add	sp, #8
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800fb0e:	b580      	push	{r7, lr}
 800fb10:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800fb12:	f7ff ffa1 	bl	800fa58 <__NVIC_SystemReset>

0800fb16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fb16:	b580      	push	{r7, lr}
 800fb18:	b082      	sub	sp, #8
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	0018      	movs	r0, r3
 800fb22:	f7ff ffab 	bl	800fa7c <SysTick_Config>
 800fb26:	0003      	movs	r3, r0
}
 800fb28:	0018      	movs	r0, r3
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	b002      	add	sp, #8
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d101      	bne.n	800fb42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e061      	b.n	800fc06 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	4a32      	ldr	r2, [pc, #200]	@ (800fc10 <HAL_DMA_Init+0xe0>)
 800fb48:	4694      	mov	ip, r2
 800fb4a:	4463      	add	r3, ip
 800fb4c:	2114      	movs	r1, #20
 800fb4e:	0018      	movs	r0, r3
 800fb50:	f7f0 fb28 	bl	80001a4 <__udivsi3>
 800fb54:	0003      	movs	r3, r0
 800fb56:	009a      	lsls	r2, r3, #2
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a2d      	ldr	r2, [pc, #180]	@ (800fc14 <HAL_DMA_Init+0xe4>)
 800fb60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2225      	movs	r2, #37	@ 0x25
 800fb66:	2102      	movs	r1, #2
 800fb68:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	4a28      	ldr	r2, [pc, #160]	@ (800fc18 <HAL_DMA_Init+0xe8>)
 800fb76:	4013      	ands	r3, r2
 800fb78:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800fb82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	691b      	ldr	r3, [r3, #16]
 800fb88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fb8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	699b      	ldr	r3, [r3, #24]
 800fb94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fb9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6a1b      	ldr	r3, [r3, #32]
 800fba0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	4313      	orrs	r3, r2
 800fba6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	68fa      	ldr	r2, [r7, #12]
 800fbae:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	689a      	ldr	r2, [r3, #8]
 800fbb4:	2380      	movs	r3, #128	@ 0x80
 800fbb6:	01db      	lsls	r3, r3, #7
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d018      	beq.n	800fbee <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800fbbc:	4b17      	ldr	r3, [pc, #92]	@ (800fc1c <HAL_DMA_Init+0xec>)
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbc4:	211c      	movs	r1, #28
 800fbc6:	400b      	ands	r3, r1
 800fbc8:	210f      	movs	r1, #15
 800fbca:	4099      	lsls	r1, r3
 800fbcc:	000b      	movs	r3, r1
 800fbce:	43d9      	mvns	r1, r3
 800fbd0:	4b12      	ldr	r3, [pc, #72]	@ (800fc1c <HAL_DMA_Init+0xec>)
 800fbd2:	400a      	ands	r2, r1
 800fbd4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800fbd6:	4b11      	ldr	r3, [pc, #68]	@ (800fc1c <HAL_DMA_Init+0xec>)
 800fbd8:	6819      	ldr	r1, [r3, #0]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	685a      	ldr	r2, [r3, #4]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbe2:	201c      	movs	r0, #28
 800fbe4:	4003      	ands	r3, r0
 800fbe6:	409a      	lsls	r2, r3
 800fbe8:	4b0c      	ldr	r3, [pc, #48]	@ (800fc1c <HAL_DMA_Init+0xec>)
 800fbea:	430a      	orrs	r2, r1
 800fbec:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2225      	movs	r2, #37	@ 0x25
 800fbf8:	2101      	movs	r1, #1
 800fbfa:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2224      	movs	r2, #36	@ 0x24
 800fc00:	2100      	movs	r1, #0
 800fc02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	0018      	movs	r0, r3
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	b004      	add	sp, #16
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	46c0      	nop			@ (mov r8, r8)
 800fc10:	bffdfff8 	.word	0xbffdfff8
 800fc14:	40020000 	.word	0x40020000
 800fc18:	ffff800f 	.word	0xffff800f
 800fc1c:	400200a8 	.word	0x400200a8

0800fc20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b086      	sub	sp, #24
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	607a      	str	r2, [r7, #4]
 800fc2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fc2e:	2317      	movs	r3, #23
 800fc30:	18fb      	adds	r3, r7, r3
 800fc32:	2200      	movs	r2, #0
 800fc34:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2224      	movs	r2, #36	@ 0x24
 800fc3a:	5c9b      	ldrb	r3, [r3, r2]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d101      	bne.n	800fc44 <HAL_DMA_Start_IT+0x24>
 800fc40:	2302      	movs	r3, #2
 800fc42:	e04f      	b.n	800fce4 <HAL_DMA_Start_IT+0xc4>
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2224      	movs	r2, #36	@ 0x24
 800fc48:	2101      	movs	r1, #1
 800fc4a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2225      	movs	r2, #37	@ 0x25
 800fc50:	5c9b      	ldrb	r3, [r3, r2]
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	d13a      	bne.n	800fcce <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	2225      	movs	r2, #37	@ 0x25
 800fc5c:	2102      	movs	r1, #2
 800fc5e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	2200      	movs	r2, #0
 800fc64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2101      	movs	r1, #1
 800fc72:	438a      	bics	r2, r1
 800fc74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	68b9      	ldr	r1, [r7, #8]
 800fc7c:	68f8      	ldr	r0, [r7, #12]
 800fc7e:	f000 f976 	bl	800ff6e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d008      	beq.n	800fc9c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	210e      	movs	r1, #14
 800fc96:	430a      	orrs	r2, r1
 800fc98:	601a      	str	r2, [r3, #0]
 800fc9a:	e00f      	b.n	800fcbc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2104      	movs	r1, #4
 800fca8:	438a      	bics	r2, r1
 800fcaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	210a      	movs	r1, #10
 800fcb8:	430a      	orrs	r2, r1
 800fcba:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2101      	movs	r1, #1
 800fcc8:	430a      	orrs	r2, r1
 800fcca:	601a      	str	r2, [r3, #0]
 800fccc:	e007      	b.n	800fcde <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2224      	movs	r2, #36	@ 0x24
 800fcd2:	2100      	movs	r1, #0
 800fcd4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800fcd6:	2317      	movs	r3, #23
 800fcd8:	18fb      	adds	r3, r7, r3
 800fcda:	2202      	movs	r2, #2
 800fcdc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800fcde:	2317      	movs	r3, #23
 800fce0:	18fb      	adds	r3, r7, r3
 800fce2:	781b      	ldrb	r3, [r3, #0]
}
 800fce4:	0018      	movs	r0, r3
 800fce6:	46bd      	mov	sp, r7
 800fce8:	b006      	add	sp, #24
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fcf4:	230f      	movs	r3, #15
 800fcf6:	18fb      	adds	r3, r7, r3
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2225      	movs	r2, #37	@ 0x25
 800fd00:	5c9b      	ldrb	r3, [r3, r2]
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	2b02      	cmp	r3, #2
 800fd06:	d008      	beq.n	800fd1a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2204      	movs	r2, #4
 800fd0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2224      	movs	r2, #36	@ 0x24
 800fd12:	2100      	movs	r1, #0
 800fd14:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800fd16:	2301      	movs	r3, #1
 800fd18:	e024      	b.n	800fd64 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	210e      	movs	r1, #14
 800fd26:	438a      	bics	r2, r1
 800fd28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2101      	movs	r1, #1
 800fd36:	438a      	bics	r2, r1
 800fd38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd3e:	221c      	movs	r2, #28
 800fd40:	401a      	ands	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd46:	2101      	movs	r1, #1
 800fd48:	4091      	lsls	r1, r2
 800fd4a:	000a      	movs	r2, r1
 800fd4c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2225      	movs	r2, #37	@ 0x25
 800fd52:	2101      	movs	r1, #1
 800fd54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2224      	movs	r2, #36	@ 0x24
 800fd5a:	2100      	movs	r1, #0
 800fd5c:	5499      	strb	r1, [r3, r2]

    return status;
 800fd5e:	230f      	movs	r3, #15
 800fd60:	18fb      	adds	r3, r7, r3
 800fd62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd64:	0018      	movs	r0, r3
 800fd66:	46bd      	mov	sp, r7
 800fd68:	b004      	add	sp, #16
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd74:	210f      	movs	r1, #15
 800fd76:	187b      	adds	r3, r7, r1
 800fd78:	2200      	movs	r2, #0
 800fd7a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2225      	movs	r2, #37	@ 0x25
 800fd80:	5c9b      	ldrb	r3, [r3, r2]
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	d006      	beq.n	800fd96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2204      	movs	r2, #4
 800fd8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800fd8e:	187b      	adds	r3, r7, r1
 800fd90:	2201      	movs	r2, #1
 800fd92:	701a      	strb	r2, [r3, #0]
 800fd94:	e02a      	b.n	800fdec <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	210e      	movs	r1, #14
 800fda2:	438a      	bics	r2, r1
 800fda4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2101      	movs	r1, #1
 800fdb2:	438a      	bics	r2, r1
 800fdb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdba:	221c      	movs	r2, #28
 800fdbc:	401a      	ands	r2, r3
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdc2:	2101      	movs	r1, #1
 800fdc4:	4091      	lsls	r1, r2
 800fdc6:	000a      	movs	r2, r1
 800fdc8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2225      	movs	r2, #37	@ 0x25
 800fdce:	2101      	movs	r1, #1
 800fdd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2224      	movs	r2, #36	@ 0x24
 800fdd6:	2100      	movs	r1, #0
 800fdd8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d004      	beq.n	800fdec <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	0010      	movs	r0, r2
 800fdea:	4798      	blx	r3
    }
  }
  return status;
 800fdec:	230f      	movs	r3, #15
 800fdee:	18fb      	adds	r3, r7, r3
 800fdf0:	781b      	ldrb	r3, [r3, #0]
}
 800fdf2:	0018      	movs	r0, r3
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	b004      	add	sp, #16
 800fdf8:	bd80      	pop	{r7, pc}

0800fdfa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fdfa:	b580      	push	{r7, lr}
 800fdfc:	b084      	sub	sp, #16
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe16:	221c      	movs	r2, #28
 800fe18:	4013      	ands	r3, r2
 800fe1a:	2204      	movs	r2, #4
 800fe1c:	409a      	lsls	r2, r3
 800fe1e:	0013      	movs	r3, r2
 800fe20:	68fa      	ldr	r2, [r7, #12]
 800fe22:	4013      	ands	r3, r2
 800fe24:	d026      	beq.n	800fe74 <HAL_DMA_IRQHandler+0x7a>
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	2204      	movs	r2, #4
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	d022      	beq.n	800fe74 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2220      	movs	r2, #32
 800fe36:	4013      	ands	r3, r2
 800fe38:	d107      	bne.n	800fe4a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2104      	movs	r1, #4
 800fe46:	438a      	bics	r2, r1
 800fe48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe4e:	221c      	movs	r2, #28
 800fe50:	401a      	ands	r2, r3
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe56:	2104      	movs	r1, #4
 800fe58:	4091      	lsls	r1, r2
 800fe5a:	000a      	movs	r2, r1
 800fe5c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d100      	bne.n	800fe68 <HAL_DMA_IRQHandler+0x6e>
 800fe66:	e071      	b.n	800ff4c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	0010      	movs	r0, r2
 800fe70:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800fe72:	e06b      	b.n	800ff4c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe78:	221c      	movs	r2, #28
 800fe7a:	4013      	ands	r3, r2
 800fe7c:	2202      	movs	r2, #2
 800fe7e:	409a      	lsls	r2, r3
 800fe80:	0013      	movs	r3, r2
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	4013      	ands	r3, r2
 800fe86:	d02d      	beq.n	800fee4 <HAL_DMA_IRQHandler+0xea>
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	2202      	movs	r2, #2
 800fe8c:	4013      	ands	r3, r2
 800fe8e:	d029      	beq.n	800fee4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2220      	movs	r2, #32
 800fe98:	4013      	ands	r3, r2
 800fe9a:	d10b      	bne.n	800feb4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	210a      	movs	r1, #10
 800fea8:	438a      	bics	r2, r1
 800feaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2225      	movs	r2, #37	@ 0x25
 800feb0:	2101      	movs	r1, #1
 800feb2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800feb8:	221c      	movs	r2, #28
 800feba:	401a      	ands	r2, r3
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fec0:	2102      	movs	r1, #2
 800fec2:	4091      	lsls	r1, r2
 800fec4:	000a      	movs	r2, r1
 800fec6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2224      	movs	r2, #36	@ 0x24
 800fecc:	2100      	movs	r1, #0
 800fece:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d039      	beq.n	800ff4c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	0010      	movs	r0, r2
 800fee0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800fee2:	e033      	b.n	800ff4c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fee8:	221c      	movs	r2, #28
 800feea:	4013      	ands	r3, r2
 800feec:	2208      	movs	r2, #8
 800feee:	409a      	lsls	r2, r3
 800fef0:	0013      	movs	r3, r2
 800fef2:	68fa      	ldr	r2, [r7, #12]
 800fef4:	4013      	ands	r3, r2
 800fef6:	d02a      	beq.n	800ff4e <HAL_DMA_IRQHandler+0x154>
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	2208      	movs	r2, #8
 800fefc:	4013      	ands	r3, r2
 800fefe:	d026      	beq.n	800ff4e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	210e      	movs	r1, #14
 800ff0c:	438a      	bics	r2, r1
 800ff0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff14:	221c      	movs	r2, #28
 800ff16:	401a      	ands	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	4091      	lsls	r1, r2
 800ff20:	000a      	movs	r2, r1
 800ff22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2201      	movs	r2, #1
 800ff28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	2225      	movs	r2, #37	@ 0x25
 800ff2e:	2101      	movs	r1, #1
 800ff30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2224      	movs	r2, #36	@ 0x24
 800ff36:	2100      	movs	r1, #0
 800ff38:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d005      	beq.n	800ff4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	0010      	movs	r0, r2
 800ff4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ff4c:	46c0      	nop			@ (mov r8, r8)
 800ff4e:	46c0      	nop			@ (mov r8, r8)
}
 800ff50:	46bd      	mov	sp, r7
 800ff52:	b004      	add	sp, #16
 800ff54:	bd80      	pop	{r7, pc}

0800ff56 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ff56:	b580      	push	{r7, lr}
 800ff58:	b082      	sub	sp, #8
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2225      	movs	r2, #37	@ 0x25
 800ff62:	5c9b      	ldrb	r3, [r3, r2]
 800ff64:	b2db      	uxtb	r3, r3
}
 800ff66:	0018      	movs	r0, r3
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	b002      	add	sp, #8
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b084      	sub	sp, #16
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	60f8      	str	r0, [r7, #12]
 800ff76:	60b9      	str	r1, [r7, #8]
 800ff78:	607a      	str	r2, [r7, #4]
 800ff7a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff80:	221c      	movs	r2, #28
 800ff82:	401a      	ands	r2, r3
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff88:	2101      	movs	r1, #1
 800ff8a:	4091      	lsls	r1, r2
 800ff8c:	000a      	movs	r2, r1
 800ff8e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	683a      	ldr	r2, [r7, #0]
 800ff96:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	689b      	ldr	r3, [r3, #8]
 800ff9c:	2b10      	cmp	r3, #16
 800ff9e:	d108      	bne.n	800ffb2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	68ba      	ldr	r2, [r7, #8]
 800ffae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ffb0:	e007      	b.n	800ffc2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	68ba      	ldr	r2, [r7, #8]
 800ffb8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	60da      	str	r2, [r3, #12]
}
 800ffc2:	46c0      	nop			@ (mov r8, r8)
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	b004      	add	sp, #16
 800ffc8:	bd80      	pop	{r7, pc}
	...

0800ffcc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ffd4:	f7ff f8d2 	bl	800f17c <HAL_GetTick>
 800ffd8:	0003      	movs	r3, r0
 800ffda:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ffdc:	e00f      	b.n	800fffe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	d00c      	beq.n	800fffe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d007      	beq.n	800fffa <FLASH_WaitForLastOperation+0x2e>
 800ffea:	f7ff f8c7 	bl	800f17c <HAL_GetTick>
 800ffee:	0002      	movs	r2, r0
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	1ad3      	subs	r3, r2, r3
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d201      	bcs.n	800fffe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800fffa:	2303      	movs	r3, #3
 800fffc:	e052      	b.n	80100a4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fffe:	4b2b      	ldr	r3, [pc, #172]	@ (80100ac <FLASH_WaitForLastOperation+0xe0>)
 8010000:	699b      	ldr	r3, [r3, #24]
 8010002:	2201      	movs	r2, #1
 8010004:	4013      	ands	r3, r2
 8010006:	2b01      	cmp	r3, #1
 8010008:	d0e9      	beq.n	800ffde <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801000a:	4b28      	ldr	r3, [pc, #160]	@ (80100ac <FLASH_WaitForLastOperation+0xe0>)
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	2202      	movs	r2, #2
 8010010:	4013      	ands	r3, r2
 8010012:	2b02      	cmp	r3, #2
 8010014:	d102      	bne.n	801001c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010016:	4b25      	ldr	r3, [pc, #148]	@ (80100ac <FLASH_WaitForLastOperation+0xe0>)
 8010018:	2202      	movs	r2, #2
 801001a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 801001c:	4b23      	ldr	r3, [pc, #140]	@ (80100ac <FLASH_WaitForLastOperation+0xe0>)
 801001e:	699a      	ldr	r2, [r3, #24]
 8010020:	2380      	movs	r3, #128	@ 0x80
 8010022:	005b      	lsls	r3, r3, #1
 8010024:	401a      	ands	r2, r3
 8010026:	2380      	movs	r3, #128	@ 0x80
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	429a      	cmp	r2, r3
 801002c:	d035      	beq.n	801009a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 801002e:	4b1f      	ldr	r3, [pc, #124]	@ (80100ac <FLASH_WaitForLastOperation+0xe0>)
 8010030:	699a      	ldr	r2, [r3, #24]
 8010032:	2380      	movs	r3, #128	@ 0x80
 8010034:	009b      	lsls	r3, r3, #2
 8010036:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8010038:	2380      	movs	r3, #128	@ 0x80
 801003a:	009b      	lsls	r3, r3, #2
 801003c:	429a      	cmp	r2, r3
 801003e:	d02c      	beq.n	801009a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8010040:	4b1a      	ldr	r3, [pc, #104]	@ (80100ac <FLASH_WaitForLastOperation+0xe0>)
 8010042:	699a      	ldr	r2, [r3, #24]
 8010044:	2380      	movs	r3, #128	@ 0x80
 8010046:	00db      	lsls	r3, r3, #3
 8010048:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 801004a:	2380      	movs	r3, #128	@ 0x80
 801004c:	00db      	lsls	r3, r3, #3
 801004e:	429a      	cmp	r2, r3
 8010050:	d023      	beq.n	801009a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8010052:	4b16      	ldr	r3, [pc, #88]	@ (80100ac <FLASH_WaitForLastOperation+0xe0>)
 8010054:	699a      	ldr	r2, [r3, #24]
 8010056:	2380      	movs	r3, #128	@ 0x80
 8010058:	011b      	lsls	r3, r3, #4
 801005a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 801005c:	2380      	movs	r3, #128	@ 0x80
 801005e:	011b      	lsls	r3, r3, #4
 8010060:	429a      	cmp	r2, r3
 8010062:	d01a      	beq.n	801009a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8010064:	4b11      	ldr	r3, [pc, #68]	@ (80100ac <FLASH_WaitForLastOperation+0xe0>)
 8010066:	699a      	ldr	r2, [r3, #24]
 8010068:	2380      	movs	r3, #128	@ 0x80
 801006a:	019b      	lsls	r3, r3, #6
 801006c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 801006e:	2380      	movs	r3, #128	@ 0x80
 8010070:	019b      	lsls	r3, r3, #6
 8010072:	429a      	cmp	r2, r3
 8010074:	d011      	beq.n	801009a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8010076:	4b0d      	ldr	r3, [pc, #52]	@ (80100ac <FLASH_WaitForLastOperation+0xe0>)
 8010078:	699a      	ldr	r2, [r3, #24]
 801007a:	2380      	movs	r3, #128	@ 0x80
 801007c:	029b      	lsls	r3, r3, #10
 801007e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8010080:	2380      	movs	r3, #128	@ 0x80
 8010082:	029b      	lsls	r3, r3, #10
 8010084:	429a      	cmp	r2, r3
 8010086:	d008      	beq.n	801009a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8010088:	4b08      	ldr	r3, [pc, #32]	@ (80100ac <FLASH_WaitForLastOperation+0xe0>)
 801008a:	699a      	ldr	r2, [r3, #24]
 801008c:	2380      	movs	r3, #128	@ 0x80
 801008e:	025b      	lsls	r3, r3, #9
 8010090:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8010092:	2380      	movs	r3, #128	@ 0x80
 8010094:	025b      	lsls	r3, r3, #9
 8010096:	429a      	cmp	r2, r3
 8010098:	d103      	bne.n	80100a2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 801009a:	f000 f809 	bl	80100b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801009e:	2301      	movs	r3, #1
 80100a0:	e000      	b.n	80100a4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80100a2:	2300      	movs	r3, #0
}
 80100a4:	0018      	movs	r0, r3
 80100a6:	46bd      	mov	sp, r7
 80100a8:	b004      	add	sp, #16
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	40022000 	.word	0x40022000

080100b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80100b6:	2300      	movs	r3, #0
 80100b8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80100ba:	4b49      	ldr	r3, [pc, #292]	@ (80101e0 <FLASH_SetErrorCode+0x130>)
 80100bc:	699a      	ldr	r2, [r3, #24]
 80100be:	2380      	movs	r3, #128	@ 0x80
 80100c0:	005b      	lsls	r3, r3, #1
 80100c2:	401a      	ands	r2, r3
 80100c4:	2380      	movs	r3, #128	@ 0x80
 80100c6:	005b      	lsls	r3, r3, #1
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d10a      	bne.n	80100e2 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80100cc:	4b45      	ldr	r3, [pc, #276]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 80100ce:	695b      	ldr	r3, [r3, #20]
 80100d0:	2202      	movs	r2, #2
 80100d2:	431a      	orrs	r2, r3
 80100d4:	4b43      	ldr	r3, [pc, #268]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 80100d6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2280      	movs	r2, #128	@ 0x80
 80100dc:	0052      	lsls	r2, r2, #1
 80100de:	4313      	orrs	r3, r2
 80100e0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80100e2:	4b3f      	ldr	r3, [pc, #252]	@ (80101e0 <FLASH_SetErrorCode+0x130>)
 80100e4:	699a      	ldr	r2, [r3, #24]
 80100e6:	2380      	movs	r3, #128	@ 0x80
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	401a      	ands	r2, r3
 80100ec:	2380      	movs	r3, #128	@ 0x80
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d10a      	bne.n	801010a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80100f4:	4b3b      	ldr	r3, [pc, #236]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 80100f6:	695b      	ldr	r3, [r3, #20]
 80100f8:	2201      	movs	r2, #1
 80100fa:	431a      	orrs	r2, r3
 80100fc:	4b39      	ldr	r3, [pc, #228]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 80100fe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2280      	movs	r2, #128	@ 0x80
 8010104:	0092      	lsls	r2, r2, #2
 8010106:	4313      	orrs	r3, r2
 8010108:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 801010a:	4b35      	ldr	r3, [pc, #212]	@ (80101e0 <FLASH_SetErrorCode+0x130>)
 801010c:	699a      	ldr	r2, [r3, #24]
 801010e:	2380      	movs	r3, #128	@ 0x80
 8010110:	00db      	lsls	r3, r3, #3
 8010112:	401a      	ands	r2, r3
 8010114:	2380      	movs	r3, #128	@ 0x80
 8010116:	00db      	lsls	r3, r3, #3
 8010118:	429a      	cmp	r2, r3
 801011a:	d10a      	bne.n	8010132 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 801011c:	4b31      	ldr	r3, [pc, #196]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 801011e:	695b      	ldr	r3, [r3, #20]
 8010120:	2208      	movs	r2, #8
 8010122:	431a      	orrs	r2, r3
 8010124:	4b2f      	ldr	r3, [pc, #188]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 8010126:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2280      	movs	r2, #128	@ 0x80
 801012c:	00d2      	lsls	r2, r2, #3
 801012e:	4313      	orrs	r3, r2
 8010130:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8010132:	4b2b      	ldr	r3, [pc, #172]	@ (80101e0 <FLASH_SetErrorCode+0x130>)
 8010134:	699a      	ldr	r2, [r3, #24]
 8010136:	2380      	movs	r3, #128	@ 0x80
 8010138:	011b      	lsls	r3, r3, #4
 801013a:	401a      	ands	r2, r3
 801013c:	2380      	movs	r3, #128	@ 0x80
 801013e:	011b      	lsls	r3, r3, #4
 8010140:	429a      	cmp	r2, r3
 8010142:	d10a      	bne.n	801015a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8010144:	4b27      	ldr	r3, [pc, #156]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 8010146:	695b      	ldr	r3, [r3, #20]
 8010148:	2204      	movs	r2, #4
 801014a:	431a      	orrs	r2, r3
 801014c:	4b25      	ldr	r3, [pc, #148]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 801014e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2280      	movs	r2, #128	@ 0x80
 8010154:	0112      	lsls	r2, r2, #4
 8010156:	4313      	orrs	r3, r2
 8010158:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 801015a:	4b21      	ldr	r3, [pc, #132]	@ (80101e0 <FLASH_SetErrorCode+0x130>)
 801015c:	699a      	ldr	r2, [r3, #24]
 801015e:	2380      	movs	r3, #128	@ 0x80
 8010160:	019b      	lsls	r3, r3, #6
 8010162:	401a      	ands	r2, r3
 8010164:	2380      	movs	r3, #128	@ 0x80
 8010166:	019b      	lsls	r3, r3, #6
 8010168:	429a      	cmp	r2, r3
 801016a:	d10a      	bne.n	8010182 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801016c:	4b1d      	ldr	r3, [pc, #116]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 801016e:	695b      	ldr	r3, [r3, #20]
 8010170:	2210      	movs	r2, #16
 8010172:	431a      	orrs	r2, r3
 8010174:	4b1b      	ldr	r3, [pc, #108]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 8010176:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2280      	movs	r2, #128	@ 0x80
 801017c:	0192      	lsls	r2, r2, #6
 801017e:	4313      	orrs	r3, r2
 8010180:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8010182:	4b17      	ldr	r3, [pc, #92]	@ (80101e0 <FLASH_SetErrorCode+0x130>)
 8010184:	699a      	ldr	r2, [r3, #24]
 8010186:	2380      	movs	r3, #128	@ 0x80
 8010188:	029b      	lsls	r3, r3, #10
 801018a:	401a      	ands	r2, r3
 801018c:	2380      	movs	r3, #128	@ 0x80
 801018e:	029b      	lsls	r3, r3, #10
 8010190:	429a      	cmp	r2, r3
 8010192:	d109      	bne.n	80101a8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8010194:	4b13      	ldr	r3, [pc, #76]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 8010196:	695b      	ldr	r3, [r3, #20]
 8010198:	2220      	movs	r2, #32
 801019a:	431a      	orrs	r2, r3
 801019c:	4b11      	ldr	r3, [pc, #68]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 801019e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2220      	movs	r2, #32
 80101a4:	4313      	orrs	r3, r2
 80101a6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80101a8:	4b0d      	ldr	r3, [pc, #52]	@ (80101e0 <FLASH_SetErrorCode+0x130>)
 80101aa:	699a      	ldr	r2, [r3, #24]
 80101ac:	2380      	movs	r3, #128	@ 0x80
 80101ae:	025b      	lsls	r3, r3, #9
 80101b0:	401a      	ands	r2, r3
 80101b2:	2380      	movs	r3, #128	@ 0x80
 80101b4:	025b      	lsls	r3, r3, #9
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d10a      	bne.n	80101d0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80101ba:	4b0a      	ldr	r3, [pc, #40]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 80101bc:	695b      	ldr	r3, [r3, #20]
 80101be:	2240      	movs	r2, #64	@ 0x40
 80101c0:	431a      	orrs	r2, r3
 80101c2:	4b08      	ldr	r3, [pc, #32]	@ (80101e4 <FLASH_SetErrorCode+0x134>)
 80101c4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2280      	movs	r2, #128	@ 0x80
 80101ca:	0252      	lsls	r2, r2, #9
 80101cc:	4313      	orrs	r3, r2
 80101ce:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80101d0:	4b03      	ldr	r3, [pc, #12]	@ (80101e0 <FLASH_SetErrorCode+0x130>)
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	619a      	str	r2, [r3, #24]
}  
 80101d6:	46c0      	nop			@ (mov r8, r8)
 80101d8:	46bd      	mov	sp, r7
 80101da:	b002      	add	sp, #8
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	46c0      	nop			@ (mov r8, r8)
 80101e0:	40022000 	.word	0x40022000
 80101e4:	20001fd8 	.word	0x20001fd8

080101e8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80101ee:	4b12      	ldr	r3, [pc, #72]	@ (8010238 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	2201      	movs	r2, #1
 80101f4:	4013      	ands	r3, r2
 80101f6:	d019      	beq.n	801022c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101f8:	f3ef 8310 	mrs	r3, PRIMASK
 80101fc:	607b      	str	r3, [r7, #4]
  return(result);
 80101fe:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8010200:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010202:	b672      	cpsid	i
}
 8010204:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8010206:	4b0c      	ldr	r3, [pc, #48]	@ (8010238 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8010208:	4a0c      	ldr	r2, [pc, #48]	@ (801023c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 801020a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 801020c:	4b0a      	ldr	r3, [pc, #40]	@ (8010238 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 801020e:	4a0c      	ldr	r2, [pc, #48]	@ (8010240 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8010210:	60da      	str	r2, [r3, #12]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	f383 8810 	msr	PRIMASK, r3
}
 801021c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 801021e:	4b06      	ldr	r3, [pc, #24]	@ (8010238 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	2201      	movs	r2, #1
 8010224:	4013      	ands	r3, r2
 8010226:	d001      	beq.n	801022c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8010228:	2301      	movs	r3, #1
 801022a:	e000      	b.n	801022e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 801022c:	2300      	movs	r3, #0
}
 801022e:	0018      	movs	r0, r3
 8010230:	46bd      	mov	sp, r7
 8010232:	b004      	add	sp, #16
 8010234:	bd80      	pop	{r7, pc}
 8010236:	46c0      	nop			@ (mov r8, r8)
 8010238:	40022000 	.word	0x40022000
 801023c:	89abcdef 	.word	0x89abcdef
 8010240:	02030405 	.word	0x02030405

08010244 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8010248:	4b04      	ldr	r3, [pc, #16]	@ (801025c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801024a:	685a      	ldr	r2, [r3, #4]
 801024c:	4b03      	ldr	r3, [pc, #12]	@ (801025c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 801024e:	2101      	movs	r1, #1
 8010250:	430a      	orrs	r2, r1
 8010252:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8010254:	2300      	movs	r3, #0
}
 8010256:	0018      	movs	r0, r3
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	40022000 	.word	0x40022000

08010260 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8010260:	b5b0      	push	{r4, r5, r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010268:	250f      	movs	r5, #15
 801026a:	197b      	adds	r3, r7, r5
 801026c:	2200      	movs	r2, #0
 801026e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010270:	197c      	adds	r4, r7, r5
 8010272:	4b0f      	ldr	r3, [pc, #60]	@ (80102b0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8010274:	0018      	movs	r0, r3
 8010276:	f7ff fea9 	bl	800ffcc <FLASH_WaitForLastOperation>
 801027a:	0003      	movs	r3, r0
 801027c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 801027e:	0029      	movs	r1, r5
 8010280:	187b      	adds	r3, r7, r1
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d10c      	bne.n	80102a2 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010288:	4b0a      	ldr	r3, [pc, #40]	@ (80102b4 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 801028a:	2200      	movs	r2, #0
 801028c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8010294:	187c      	adds	r4, r7, r1
 8010296:	4b06      	ldr	r3, [pc, #24]	@ (80102b0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8010298:	0018      	movs	r0, r3
 801029a:	f7ff fe97 	bl	800ffcc <FLASH_WaitForLastOperation>
 801029e:	0003      	movs	r3, r0
 80102a0:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 80102a2:	230f      	movs	r3, #15
 80102a4:	18fb      	adds	r3, r7, r3
 80102a6:	781b      	ldrb	r3, [r3, #0]
}  
 80102a8:	0018      	movs	r0, r3
 80102aa:	46bd      	mov	sp, r7
 80102ac:	b004      	add	sp, #16
 80102ae:	bdb0      	pop	{r4, r5, r7, pc}
 80102b0:	0000c350 	.word	0x0000c350
 80102b4:	20001fd8 	.word	0x20001fd8

080102b8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80102b8:	b5b0      	push	{r4, r5, r7, lr}
 80102ba:	b086      	sub	sp, #24
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80102c4:	2317      	movs	r3, #23
 80102c6:	18fb      	adds	r3, r7, r3
 80102c8:	2201      	movs	r2, #1
 80102ca:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80102cc:	4b24      	ldr	r3, [pc, #144]	@ (8010360 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80102ce:	7c1b      	ldrb	r3, [r3, #16]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d101      	bne.n	80102d8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80102d4:	2302      	movs	r3, #2
 80102d6:	e03e      	b.n	8010356 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80102d8:	4b21      	ldr	r3, [pc, #132]	@ (8010360 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80102da:	2201      	movs	r2, #1
 80102dc:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80102de:	2517      	movs	r5, #23
 80102e0:	197c      	adds	r4, r7, r5
 80102e2:	4b20      	ldr	r3, [pc, #128]	@ (8010364 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80102e4:	0018      	movs	r0, r3
 80102e6:	f7ff fe71 	bl	800ffcc <FLASH_WaitForLastOperation>
 80102ea:	0003      	movs	r3, r0
 80102ec:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80102ee:	197b      	adds	r3, r7, r5
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d129      	bne.n	801034a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80102f6:	4b1a      	ldr	r3, [pc, #104]	@ (8010360 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80102f8:	2200      	movs	r2, #0
 80102fa:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2b02      	cmp	r3, #2
 8010300:	d103      	bne.n	801030a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	601a      	str	r2, [r3, #0]
 8010308:	e013      	b.n	8010332 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2b01      	cmp	r3, #1
 801030e:	d104      	bne.n	801031a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	b292      	uxth	r2, r2
 8010316:	801a      	strh	r2, [r3, #0]
 8010318:	e00b      	b.n	8010332 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d104      	bne.n	801032a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	b2d2      	uxtb	r2, r2
 8010326:	701a      	strb	r2, [r3, #0]
 8010328:	e003      	b.n	8010332 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 801032a:	2317      	movs	r3, #23
 801032c:	18fb      	adds	r3, r7, r3
 801032e:	2201      	movs	r2, #1
 8010330:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8010332:	2217      	movs	r2, #23
 8010334:	18bb      	adds	r3, r7, r2
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d106      	bne.n	801034a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801033c:	18bc      	adds	r4, r7, r2
 801033e:	4b09      	ldr	r3, [pc, #36]	@ (8010364 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8010340:	0018      	movs	r0, r3
 8010342:	f7ff fe43 	bl	800ffcc <FLASH_WaitForLastOperation>
 8010346:	0003      	movs	r3, r0
 8010348:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801034a:	4b05      	ldr	r3, [pc, #20]	@ (8010360 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 801034c:	2200      	movs	r2, #0
 801034e:	741a      	strb	r2, [r3, #16]

  return status;
 8010350:	2317      	movs	r3, #23
 8010352:	18fb      	adds	r3, r7, r3
 8010354:	781b      	ldrb	r3, [r3, #0]
}
 8010356:	0018      	movs	r0, r3
 8010358:	46bd      	mov	sp, r7
 801035a:	b006      	add	sp, #24
 801035c:	bdb0      	pop	{r4, r5, r7, pc}
 801035e:	46c0      	nop			@ (mov r8, r8)
 8010360:	20001fd8 	.word	0x20001fd8
 8010364:	0000c350 	.word	0x0000c350

08010368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b086      	sub	sp, #24
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8010372:	2300      	movs	r3, #0
 8010374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010376:	2300      	movs	r3, #0
 8010378:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 801037a:	2300      	movs	r3, #0
 801037c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 801037e:	e155      	b.n	801062c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	2101      	movs	r1, #1
 8010386:	697a      	ldr	r2, [r7, #20]
 8010388:	4091      	lsls	r1, r2
 801038a:	000a      	movs	r2, r1
 801038c:	4013      	ands	r3, r2
 801038e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d100      	bne.n	8010398 <HAL_GPIO_Init+0x30>
 8010396:	e146      	b.n	8010626 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	2203      	movs	r2, #3
 801039e:	4013      	ands	r3, r2
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d005      	beq.n	80103b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	2203      	movs	r2, #3
 80103aa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80103ac:	2b02      	cmp	r3, #2
 80103ae:	d130      	bne.n	8010412 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	689b      	ldr	r3, [r3, #8]
 80103b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	005b      	lsls	r3, r3, #1
 80103ba:	2203      	movs	r2, #3
 80103bc:	409a      	lsls	r2, r3
 80103be:	0013      	movs	r3, r2
 80103c0:	43da      	mvns	r2, r3
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	4013      	ands	r3, r2
 80103c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	68da      	ldr	r2, [r3, #12]
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	005b      	lsls	r3, r3, #1
 80103d0:	409a      	lsls	r2, r3
 80103d2:	0013      	movs	r3, r2
 80103d4:	693a      	ldr	r2, [r7, #16]
 80103d6:	4313      	orrs	r3, r2
 80103d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	693a      	ldr	r2, [r7, #16]
 80103de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80103e6:	2201      	movs	r2, #1
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	409a      	lsls	r2, r3
 80103ec:	0013      	movs	r3, r2
 80103ee:	43da      	mvns	r2, r3
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	4013      	ands	r3, r2
 80103f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	091b      	lsrs	r3, r3, #4
 80103fc:	2201      	movs	r2, #1
 80103fe:	401a      	ands	r2, r3
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	409a      	lsls	r2, r3
 8010404:	0013      	movs	r3, r2
 8010406:	693a      	ldr	r2, [r7, #16]
 8010408:	4313      	orrs	r3, r2
 801040a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	693a      	ldr	r2, [r7, #16]
 8010410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	2203      	movs	r2, #3
 8010418:	4013      	ands	r3, r2
 801041a:	2b03      	cmp	r3, #3
 801041c:	d017      	beq.n	801044e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	005b      	lsls	r3, r3, #1
 8010428:	2203      	movs	r2, #3
 801042a:	409a      	lsls	r2, r3
 801042c:	0013      	movs	r3, r2
 801042e:	43da      	mvns	r2, r3
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	4013      	ands	r3, r2
 8010434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	689a      	ldr	r2, [r3, #8]
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	005b      	lsls	r3, r3, #1
 801043e:	409a      	lsls	r2, r3
 8010440:	0013      	movs	r3, r2
 8010442:	693a      	ldr	r2, [r7, #16]
 8010444:	4313      	orrs	r3, r2
 8010446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	2203      	movs	r2, #3
 8010454:	4013      	ands	r3, r2
 8010456:	2b02      	cmp	r3, #2
 8010458:	d123      	bne.n	80104a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	08da      	lsrs	r2, r3, #3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	3208      	adds	r2, #8
 8010462:	0092      	lsls	r2, r2, #2
 8010464:	58d3      	ldr	r3, [r2, r3]
 8010466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	2207      	movs	r2, #7
 801046c:	4013      	ands	r3, r2
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	220f      	movs	r2, #15
 8010472:	409a      	lsls	r2, r3
 8010474:	0013      	movs	r3, r2
 8010476:	43da      	mvns	r2, r3
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	4013      	ands	r3, r2
 801047c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	691a      	ldr	r2, [r3, #16]
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	2107      	movs	r1, #7
 8010486:	400b      	ands	r3, r1
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	409a      	lsls	r2, r3
 801048c:	0013      	movs	r3, r2
 801048e:	693a      	ldr	r2, [r7, #16]
 8010490:	4313      	orrs	r3, r2
 8010492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	08da      	lsrs	r2, r3, #3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	3208      	adds	r2, #8
 801049c:	0092      	lsls	r2, r2, #2
 801049e:	6939      	ldr	r1, [r7, #16]
 80104a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	005b      	lsls	r3, r3, #1
 80104ac:	2203      	movs	r2, #3
 80104ae:	409a      	lsls	r2, r3
 80104b0:	0013      	movs	r3, r2
 80104b2:	43da      	mvns	r2, r3
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	4013      	ands	r3, r2
 80104b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	2203      	movs	r2, #3
 80104c0:	401a      	ands	r2, r3
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	005b      	lsls	r3, r3, #1
 80104c6:	409a      	lsls	r2, r3
 80104c8:	0013      	movs	r3, r2
 80104ca:	693a      	ldr	r2, [r7, #16]
 80104cc:	4313      	orrs	r3, r2
 80104ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	693a      	ldr	r2, [r7, #16]
 80104d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	685a      	ldr	r2, [r3, #4]
 80104da:	23c0      	movs	r3, #192	@ 0xc0
 80104dc:	029b      	lsls	r3, r3, #10
 80104de:	4013      	ands	r3, r2
 80104e0:	d100      	bne.n	80104e4 <HAL_GPIO_Init+0x17c>
 80104e2:	e0a0      	b.n	8010626 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80104e4:	4b57      	ldr	r3, [pc, #348]	@ (8010644 <HAL_GPIO_Init+0x2dc>)
 80104e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80104e8:	4b56      	ldr	r3, [pc, #344]	@ (8010644 <HAL_GPIO_Init+0x2dc>)
 80104ea:	2101      	movs	r1, #1
 80104ec:	430a      	orrs	r2, r1
 80104ee:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80104f0:	4a55      	ldr	r2, [pc, #340]	@ (8010648 <HAL_GPIO_Init+0x2e0>)
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	089b      	lsrs	r3, r3, #2
 80104f6:	3302      	adds	r3, #2
 80104f8:	009b      	lsls	r3, r3, #2
 80104fa:	589b      	ldr	r3, [r3, r2]
 80104fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	2203      	movs	r2, #3
 8010502:	4013      	ands	r3, r2
 8010504:	009b      	lsls	r3, r3, #2
 8010506:	220f      	movs	r2, #15
 8010508:	409a      	lsls	r2, r3
 801050a:	0013      	movs	r3, r2
 801050c:	43da      	mvns	r2, r3
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	4013      	ands	r3, r2
 8010512:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	23a0      	movs	r3, #160	@ 0xa0
 8010518:	05db      	lsls	r3, r3, #23
 801051a:	429a      	cmp	r2, r3
 801051c:	d01f      	beq.n	801055e <HAL_GPIO_Init+0x1f6>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4a4a      	ldr	r2, [pc, #296]	@ (801064c <HAL_GPIO_Init+0x2e4>)
 8010522:	4293      	cmp	r3, r2
 8010524:	d019      	beq.n	801055a <HAL_GPIO_Init+0x1f2>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	4a49      	ldr	r2, [pc, #292]	@ (8010650 <HAL_GPIO_Init+0x2e8>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d013      	beq.n	8010556 <HAL_GPIO_Init+0x1ee>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4a48      	ldr	r2, [pc, #288]	@ (8010654 <HAL_GPIO_Init+0x2ec>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d00d      	beq.n	8010552 <HAL_GPIO_Init+0x1ea>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	4a47      	ldr	r2, [pc, #284]	@ (8010658 <HAL_GPIO_Init+0x2f0>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d007      	beq.n	801054e <HAL_GPIO_Init+0x1e6>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	4a46      	ldr	r2, [pc, #280]	@ (801065c <HAL_GPIO_Init+0x2f4>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d101      	bne.n	801054a <HAL_GPIO_Init+0x1e2>
 8010546:	2305      	movs	r3, #5
 8010548:	e00a      	b.n	8010560 <HAL_GPIO_Init+0x1f8>
 801054a:	2306      	movs	r3, #6
 801054c:	e008      	b.n	8010560 <HAL_GPIO_Init+0x1f8>
 801054e:	2304      	movs	r3, #4
 8010550:	e006      	b.n	8010560 <HAL_GPIO_Init+0x1f8>
 8010552:	2303      	movs	r3, #3
 8010554:	e004      	b.n	8010560 <HAL_GPIO_Init+0x1f8>
 8010556:	2302      	movs	r3, #2
 8010558:	e002      	b.n	8010560 <HAL_GPIO_Init+0x1f8>
 801055a:	2301      	movs	r3, #1
 801055c:	e000      	b.n	8010560 <HAL_GPIO_Init+0x1f8>
 801055e:	2300      	movs	r3, #0
 8010560:	697a      	ldr	r2, [r7, #20]
 8010562:	2103      	movs	r1, #3
 8010564:	400a      	ands	r2, r1
 8010566:	0092      	lsls	r2, r2, #2
 8010568:	4093      	lsls	r3, r2
 801056a:	693a      	ldr	r2, [r7, #16]
 801056c:	4313      	orrs	r3, r2
 801056e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010570:	4935      	ldr	r1, [pc, #212]	@ (8010648 <HAL_GPIO_Init+0x2e0>)
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	089b      	lsrs	r3, r3, #2
 8010576:	3302      	adds	r3, #2
 8010578:	009b      	lsls	r3, r3, #2
 801057a:	693a      	ldr	r2, [r7, #16]
 801057c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801057e:	4b38      	ldr	r3, [pc, #224]	@ (8010660 <HAL_GPIO_Init+0x2f8>)
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	43da      	mvns	r2, r3
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	4013      	ands	r3, r2
 801058c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	685a      	ldr	r2, [r3, #4]
 8010592:	2380      	movs	r3, #128	@ 0x80
 8010594:	035b      	lsls	r3, r3, #13
 8010596:	4013      	ands	r3, r2
 8010598:	d003      	beq.n	80105a2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 801059a:	693a      	ldr	r2, [r7, #16]
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	4313      	orrs	r3, r2
 80105a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80105a2:	4b2f      	ldr	r3, [pc, #188]	@ (8010660 <HAL_GPIO_Init+0x2f8>)
 80105a4:	693a      	ldr	r2, [r7, #16]
 80105a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80105a8:	4b2d      	ldr	r3, [pc, #180]	@ (8010660 <HAL_GPIO_Init+0x2f8>)
 80105aa:	68db      	ldr	r3, [r3, #12]
 80105ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	43da      	mvns	r2, r3
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	4013      	ands	r3, r2
 80105b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	685a      	ldr	r2, [r3, #4]
 80105bc:	2380      	movs	r3, #128	@ 0x80
 80105be:	039b      	lsls	r3, r3, #14
 80105c0:	4013      	ands	r3, r2
 80105c2:	d003      	beq.n	80105cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80105c4:	693a      	ldr	r2, [r7, #16]
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	4313      	orrs	r3, r2
 80105ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80105cc:	4b24      	ldr	r3, [pc, #144]	@ (8010660 <HAL_GPIO_Init+0x2f8>)
 80105ce:	693a      	ldr	r2, [r7, #16]
 80105d0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80105d2:	4b23      	ldr	r3, [pc, #140]	@ (8010660 <HAL_GPIO_Init+0x2f8>)
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	43da      	mvns	r2, r3
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	4013      	ands	r3, r2
 80105e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	685a      	ldr	r2, [r3, #4]
 80105e6:	2380      	movs	r3, #128	@ 0x80
 80105e8:	029b      	lsls	r3, r3, #10
 80105ea:	4013      	ands	r3, r2
 80105ec:	d003      	beq.n	80105f6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80105ee:	693a      	ldr	r2, [r7, #16]
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	4313      	orrs	r3, r2
 80105f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80105f6:	4b1a      	ldr	r3, [pc, #104]	@ (8010660 <HAL_GPIO_Init+0x2f8>)
 80105f8:	693a      	ldr	r2, [r7, #16]
 80105fa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80105fc:	4b18      	ldr	r3, [pc, #96]	@ (8010660 <HAL_GPIO_Init+0x2f8>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	43da      	mvns	r2, r3
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	4013      	ands	r3, r2
 801060a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	685a      	ldr	r2, [r3, #4]
 8010610:	2380      	movs	r3, #128	@ 0x80
 8010612:	025b      	lsls	r3, r3, #9
 8010614:	4013      	ands	r3, r2
 8010616:	d003      	beq.n	8010620 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8010618:	693a      	ldr	r2, [r7, #16]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	4313      	orrs	r3, r2
 801061e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010620:	4b0f      	ldr	r3, [pc, #60]	@ (8010660 <HAL_GPIO_Init+0x2f8>)
 8010622:	693a      	ldr	r2, [r7, #16]
 8010624:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	3301      	adds	r3, #1
 801062a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	40da      	lsrs	r2, r3
 8010634:	1e13      	subs	r3, r2, #0
 8010636:	d000      	beq.n	801063a <HAL_GPIO_Init+0x2d2>
 8010638:	e6a2      	b.n	8010380 <HAL_GPIO_Init+0x18>
  }
}
 801063a:	46c0      	nop			@ (mov r8, r8)
 801063c:	46c0      	nop			@ (mov r8, r8)
 801063e:	46bd      	mov	sp, r7
 8010640:	b006      	add	sp, #24
 8010642:	bd80      	pop	{r7, pc}
 8010644:	40021000 	.word	0x40021000
 8010648:	40010000 	.word	0x40010000
 801064c:	50000400 	.word	0x50000400
 8010650:	50000800 	.word	0x50000800
 8010654:	50000c00 	.word	0x50000c00
 8010658:	50001000 	.word	0x50001000
 801065c:	50001c00 	.word	0x50001c00
 8010660:	40010400 	.word	0x40010400

08010664 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b084      	sub	sp, #16
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	000a      	movs	r2, r1
 801066e:	1cbb      	adds	r3, r7, #2
 8010670:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	691b      	ldr	r3, [r3, #16]
 8010676:	1cba      	adds	r2, r7, #2
 8010678:	8812      	ldrh	r2, [r2, #0]
 801067a:	4013      	ands	r3, r2
 801067c:	d004      	beq.n	8010688 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 801067e:	230f      	movs	r3, #15
 8010680:	18fb      	adds	r3, r7, r3
 8010682:	2201      	movs	r2, #1
 8010684:	701a      	strb	r2, [r3, #0]
 8010686:	e003      	b.n	8010690 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010688:	230f      	movs	r3, #15
 801068a:	18fb      	adds	r3, r7, r3
 801068c:	2200      	movs	r2, #0
 801068e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8010690:	230f      	movs	r3, #15
 8010692:	18fb      	adds	r3, r7, r3
 8010694:	781b      	ldrb	r3, [r3, #0]
}
 8010696:	0018      	movs	r0, r3
 8010698:	46bd      	mov	sp, r7
 801069a:	b004      	add	sp, #16
 801069c:	bd80      	pop	{r7, pc}

0801069e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b082      	sub	sp, #8
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	0008      	movs	r0, r1
 80106a8:	0011      	movs	r1, r2
 80106aa:	1cbb      	adds	r3, r7, #2
 80106ac:	1c02      	adds	r2, r0, #0
 80106ae:	801a      	strh	r2, [r3, #0]
 80106b0:	1c7b      	adds	r3, r7, #1
 80106b2:	1c0a      	adds	r2, r1, #0
 80106b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80106b6:	1c7b      	adds	r3, r7, #1
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d004      	beq.n	80106c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80106be:	1cbb      	adds	r3, r7, #2
 80106c0:	881a      	ldrh	r2, [r3, #0]
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80106c6:	e003      	b.n	80106d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80106c8:	1cbb      	adds	r3, r7, #2
 80106ca:	881a      	ldrh	r2, [r3, #0]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80106d0:	46c0      	nop			@ (mov r8, r8)
 80106d2:	46bd      	mov	sp, r7
 80106d4:	b002      	add	sp, #8
 80106d6:	bd80      	pop	{r7, pc}

080106d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	0002      	movs	r2, r0
 80106e0:	1dbb      	adds	r3, r7, #6
 80106e2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80106e4:	4b09      	ldr	r3, [pc, #36]	@ (801070c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80106e6:	695b      	ldr	r3, [r3, #20]
 80106e8:	1dba      	adds	r2, r7, #6
 80106ea:	8812      	ldrh	r2, [r2, #0]
 80106ec:	4013      	ands	r3, r2
 80106ee:	d008      	beq.n	8010702 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80106f0:	4b06      	ldr	r3, [pc, #24]	@ (801070c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80106f2:	1dba      	adds	r2, r7, #6
 80106f4:	8812      	ldrh	r2, [r2, #0]
 80106f6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80106f8:	1dbb      	adds	r3, r7, #6
 80106fa:	881b      	ldrh	r3, [r3, #0]
 80106fc:	0018      	movs	r0, r3
 80106fe:	f7f7 ff89 	bl	8008614 <HAL_GPIO_EXTI_Callback>
  }
}
 8010702:	46c0      	nop			@ (mov r8, r8)
 8010704:	46bd      	mov	sp, r7
 8010706:	b002      	add	sp, #8
 8010708:	bd80      	pop	{r7, pc}
 801070a:	46c0      	nop			@ (mov r8, r8)
 801070c:	40010400 	.word	0x40010400

08010710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d101      	bne.n	8010722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801071e:	2301      	movs	r3, #1
 8010720:	e082      	b.n	8010828 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2241      	movs	r2, #65	@ 0x41
 8010726:	5c9b      	ldrb	r3, [r3, r2]
 8010728:	b2db      	uxtb	r3, r3
 801072a:	2b00      	cmp	r3, #0
 801072c:	d107      	bne.n	801073e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2240      	movs	r2, #64	@ 0x40
 8010732:	2100      	movs	r1, #0
 8010734:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	0018      	movs	r0, r3
 801073a:	f7f7 fa51 	bl	8007be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2241      	movs	r2, #65	@ 0x41
 8010742:	2124      	movs	r1, #36	@ 0x24
 8010744:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2101      	movs	r1, #1
 8010752:	438a      	bics	r2, r1
 8010754:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	685a      	ldr	r2, [r3, #4]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	4934      	ldr	r1, [pc, #208]	@ (8010830 <HAL_I2C_Init+0x120>)
 8010760:	400a      	ands	r2, r1
 8010762:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	689a      	ldr	r2, [r3, #8]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	4931      	ldr	r1, [pc, #196]	@ (8010834 <HAL_I2C_Init+0x124>)
 8010770:	400a      	ands	r2, r1
 8010772:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	68db      	ldr	r3, [r3, #12]
 8010778:	2b01      	cmp	r3, #1
 801077a:	d108      	bne.n	801078e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	689a      	ldr	r2, [r3, #8]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2180      	movs	r1, #128	@ 0x80
 8010786:	0209      	lsls	r1, r1, #8
 8010788:	430a      	orrs	r2, r1
 801078a:	609a      	str	r2, [r3, #8]
 801078c:	e007      	b.n	801079e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	689a      	ldr	r2, [r3, #8]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2184      	movs	r1, #132	@ 0x84
 8010798:	0209      	lsls	r1, r1, #8
 801079a:	430a      	orrs	r2, r1
 801079c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d104      	bne.n	80107b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	2280      	movs	r2, #128	@ 0x80
 80107ac:	0112      	lsls	r2, r2, #4
 80107ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	685a      	ldr	r2, [r3, #4]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	491f      	ldr	r1, [pc, #124]	@ (8010838 <HAL_I2C_Init+0x128>)
 80107bc:	430a      	orrs	r2, r1
 80107be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	68da      	ldr	r2, [r3, #12]
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	491a      	ldr	r1, [pc, #104]	@ (8010834 <HAL_I2C_Init+0x124>)
 80107cc:	400a      	ands	r2, r1
 80107ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	691a      	ldr	r2, [r3, #16]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	695b      	ldr	r3, [r3, #20]
 80107d8:	431a      	orrs	r2, r3
 80107da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	699b      	ldr	r3, [r3, #24]
 80107e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	430a      	orrs	r2, r1
 80107e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	69d9      	ldr	r1, [r3, #28]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6a1a      	ldr	r2, [r3, #32]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	430a      	orrs	r2, r1
 80107f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2101      	movs	r1, #1
 8010806:	430a      	orrs	r2, r1
 8010808:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2200      	movs	r2, #0
 801080e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2241      	movs	r2, #65	@ 0x41
 8010814:	2120      	movs	r1, #32
 8010816:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2242      	movs	r2, #66	@ 0x42
 8010822:	2100      	movs	r1, #0
 8010824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010826:	2300      	movs	r3, #0
}
 8010828:	0018      	movs	r0, r3
 801082a:	46bd      	mov	sp, r7
 801082c:	b002      	add	sp, #8
 801082e:	bd80      	pop	{r7, pc}
 8010830:	f0ffffff 	.word	0xf0ffffff
 8010834:	ffff7fff 	.word	0xffff7fff
 8010838:	02008000 	.word	0x02008000

0801083c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801083c:	b590      	push	{r4, r7, lr}
 801083e:	b089      	sub	sp, #36	@ 0x24
 8010840:	af02      	add	r7, sp, #8
 8010842:	60f8      	str	r0, [r7, #12]
 8010844:	0008      	movs	r0, r1
 8010846:	607a      	str	r2, [r7, #4]
 8010848:	0019      	movs	r1, r3
 801084a:	230a      	movs	r3, #10
 801084c:	18fb      	adds	r3, r7, r3
 801084e:	1c02      	adds	r2, r0, #0
 8010850:	801a      	strh	r2, [r3, #0]
 8010852:	2308      	movs	r3, #8
 8010854:	18fb      	adds	r3, r7, r3
 8010856:	1c0a      	adds	r2, r1, #0
 8010858:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2241      	movs	r2, #65	@ 0x41
 801085e:	5c9b      	ldrb	r3, [r3, r2]
 8010860:	b2db      	uxtb	r3, r3
 8010862:	2b20      	cmp	r3, #32
 8010864:	d000      	beq.n	8010868 <HAL_I2C_Master_Transmit+0x2c>
 8010866:	e0e7      	b.n	8010a38 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2240      	movs	r2, #64	@ 0x40
 801086c:	5c9b      	ldrb	r3, [r3, r2]
 801086e:	2b01      	cmp	r3, #1
 8010870:	d101      	bne.n	8010876 <HAL_I2C_Master_Transmit+0x3a>
 8010872:	2302      	movs	r3, #2
 8010874:	e0e1      	b.n	8010a3a <HAL_I2C_Master_Transmit+0x1fe>
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	2240      	movs	r2, #64	@ 0x40
 801087a:	2101      	movs	r1, #1
 801087c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801087e:	f7fe fc7d 	bl	800f17c <HAL_GetTick>
 8010882:	0003      	movs	r3, r0
 8010884:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010886:	2380      	movs	r3, #128	@ 0x80
 8010888:	0219      	lsls	r1, r3, #8
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	2319      	movs	r3, #25
 8010892:	2201      	movs	r2, #1
 8010894:	f001 ff98 	bl	80127c8 <I2C_WaitOnFlagUntilTimeout>
 8010898:	1e03      	subs	r3, r0, #0
 801089a:	d001      	beq.n	80108a0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 801089c:	2301      	movs	r3, #1
 801089e:	e0cc      	b.n	8010a3a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2241      	movs	r2, #65	@ 0x41
 80108a4:	2121      	movs	r1, #33	@ 0x21
 80108a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	2242      	movs	r2, #66	@ 0x42
 80108ac:	2110      	movs	r1, #16
 80108ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2200      	movs	r2, #0
 80108b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2208      	movs	r2, #8
 80108c0:	18ba      	adds	r2, r7, r2
 80108c2:	8812      	ldrh	r2, [r2, #0]
 80108c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	2200      	movs	r2, #0
 80108ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	2bff      	cmp	r3, #255	@ 0xff
 80108d4:	d911      	bls.n	80108fa <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	22ff      	movs	r2, #255	@ 0xff
 80108da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108e0:	b2da      	uxtb	r2, r3
 80108e2:	2380      	movs	r3, #128	@ 0x80
 80108e4:	045c      	lsls	r4, r3, #17
 80108e6:	230a      	movs	r3, #10
 80108e8:	18fb      	adds	r3, r7, r3
 80108ea:	8819      	ldrh	r1, [r3, #0]
 80108ec:	68f8      	ldr	r0, [r7, #12]
 80108ee:	4b55      	ldr	r3, [pc, #340]	@ (8010a44 <HAL_I2C_Master_Transmit+0x208>)
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	0023      	movs	r3, r4
 80108f4:	f002 f9ba 	bl	8012c6c <I2C_TransferConfig>
 80108f8:	e075      	b.n	80109e6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108fe:	b29a      	uxth	r2, r3
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010908:	b2da      	uxtb	r2, r3
 801090a:	2380      	movs	r3, #128	@ 0x80
 801090c:	049c      	lsls	r4, r3, #18
 801090e:	230a      	movs	r3, #10
 8010910:	18fb      	adds	r3, r7, r3
 8010912:	8819      	ldrh	r1, [r3, #0]
 8010914:	68f8      	ldr	r0, [r7, #12]
 8010916:	4b4b      	ldr	r3, [pc, #300]	@ (8010a44 <HAL_I2C_Master_Transmit+0x208>)
 8010918:	9300      	str	r3, [sp, #0]
 801091a:	0023      	movs	r3, r4
 801091c:	f002 f9a6 	bl	8012c6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8010920:	e061      	b.n	80109e6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010922:	697a      	ldr	r2, [r7, #20]
 8010924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	0018      	movs	r0, r3
 801092a:	f001 ff9b 	bl	8012864 <I2C_WaitOnTXISFlagUntilTimeout>
 801092e:	1e03      	subs	r3, r0, #0
 8010930:	d001      	beq.n	8010936 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8010932:	2301      	movs	r3, #1
 8010934:	e081      	b.n	8010a3a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801093a:	781a      	ldrb	r2, [r3, #0]
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010946:	1c5a      	adds	r2, r3, #1
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010950:	b29b      	uxth	r3, r3
 8010952:	3b01      	subs	r3, #1
 8010954:	b29a      	uxth	r2, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801095e:	3b01      	subs	r3, #1
 8010960:	b29a      	uxth	r2, r3
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801096a:	b29b      	uxth	r3, r3
 801096c:	2b00      	cmp	r3, #0
 801096e:	d03a      	beq.n	80109e6 <HAL_I2C_Master_Transmit+0x1aa>
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010974:	2b00      	cmp	r3, #0
 8010976:	d136      	bne.n	80109e6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801097a:	68f8      	ldr	r0, [r7, #12]
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	9300      	str	r3, [sp, #0]
 8010980:	0013      	movs	r3, r2
 8010982:	2200      	movs	r2, #0
 8010984:	2180      	movs	r1, #128	@ 0x80
 8010986:	f001 ff1f 	bl	80127c8 <I2C_WaitOnFlagUntilTimeout>
 801098a:	1e03      	subs	r3, r0, #0
 801098c:	d001      	beq.n	8010992 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 801098e:	2301      	movs	r3, #1
 8010990:	e053      	b.n	8010a3a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010996:	b29b      	uxth	r3, r3
 8010998:	2bff      	cmp	r3, #255	@ 0xff
 801099a:	d911      	bls.n	80109c0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	22ff      	movs	r2, #255	@ 0xff
 80109a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109a6:	b2da      	uxtb	r2, r3
 80109a8:	2380      	movs	r3, #128	@ 0x80
 80109aa:	045c      	lsls	r4, r3, #17
 80109ac:	230a      	movs	r3, #10
 80109ae:	18fb      	adds	r3, r7, r3
 80109b0:	8819      	ldrh	r1, [r3, #0]
 80109b2:	68f8      	ldr	r0, [r7, #12]
 80109b4:	2300      	movs	r3, #0
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	0023      	movs	r3, r4
 80109ba:	f002 f957 	bl	8012c6c <I2C_TransferConfig>
 80109be:	e012      	b.n	80109e6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109c4:	b29a      	uxth	r2, r3
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80109ce:	b2da      	uxtb	r2, r3
 80109d0:	2380      	movs	r3, #128	@ 0x80
 80109d2:	049c      	lsls	r4, r3, #18
 80109d4:	230a      	movs	r3, #10
 80109d6:	18fb      	adds	r3, r7, r3
 80109d8:	8819      	ldrh	r1, [r3, #0]
 80109da:	68f8      	ldr	r0, [r7, #12]
 80109dc:	2300      	movs	r3, #0
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	0023      	movs	r3, r4
 80109e2:	f002 f943 	bl	8012c6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d198      	bne.n	8010922 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80109f0:	697a      	ldr	r2, [r7, #20]
 80109f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	0018      	movs	r0, r3
 80109f8:	f001 ff7a 	bl	80128f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80109fc:	1e03      	subs	r3, r0, #0
 80109fe:	d001      	beq.n	8010a04 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8010a00:	2301      	movs	r3, #1
 8010a02:	e01a      	b.n	8010a3a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2220      	movs	r2, #32
 8010a0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	685a      	ldr	r2, [r3, #4]
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	490c      	ldr	r1, [pc, #48]	@ (8010a48 <HAL_I2C_Master_Transmit+0x20c>)
 8010a18:	400a      	ands	r2, r1
 8010a1a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2241      	movs	r2, #65	@ 0x41
 8010a20:	2120      	movs	r1, #32
 8010a22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2242      	movs	r2, #66	@ 0x42
 8010a28:	2100      	movs	r1, #0
 8010a2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2240      	movs	r2, #64	@ 0x40
 8010a30:	2100      	movs	r1, #0
 8010a32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010a34:	2300      	movs	r3, #0
 8010a36:	e000      	b.n	8010a3a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8010a38:	2302      	movs	r3, #2
  }
}
 8010a3a:	0018      	movs	r0, r3
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	b007      	add	sp, #28
 8010a40:	bd90      	pop	{r4, r7, pc}
 8010a42:	46c0      	nop			@ (mov r8, r8)
 8010a44:	80002000 	.word	0x80002000
 8010a48:	fe00e800 	.word	0xfe00e800

08010a4c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8010a4c:	b590      	push	{r4, r7, lr}
 8010a4e:	b089      	sub	sp, #36	@ 0x24
 8010a50:	af02      	add	r7, sp, #8
 8010a52:	60f8      	str	r0, [r7, #12]
 8010a54:	0008      	movs	r0, r1
 8010a56:	607a      	str	r2, [r7, #4]
 8010a58:	0019      	movs	r1, r3
 8010a5a:	230a      	movs	r3, #10
 8010a5c:	18fb      	adds	r3, r7, r3
 8010a5e:	1c02      	adds	r2, r0, #0
 8010a60:	801a      	strh	r2, [r3, #0]
 8010a62:	2308      	movs	r3, #8
 8010a64:	18fb      	adds	r3, r7, r3
 8010a66:	1c0a      	adds	r2, r1, #0
 8010a68:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2241      	movs	r2, #65	@ 0x41
 8010a6e:	5c9b      	ldrb	r3, [r3, r2]
 8010a70:	b2db      	uxtb	r3, r3
 8010a72:	2b20      	cmp	r3, #32
 8010a74:	d000      	beq.n	8010a78 <HAL_I2C_Master_Receive+0x2c>
 8010a76:	e0e8      	b.n	8010c4a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2240      	movs	r2, #64	@ 0x40
 8010a7c:	5c9b      	ldrb	r3, [r3, r2]
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	d101      	bne.n	8010a86 <HAL_I2C_Master_Receive+0x3a>
 8010a82:	2302      	movs	r3, #2
 8010a84:	e0e2      	b.n	8010c4c <HAL_I2C_Master_Receive+0x200>
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	2240      	movs	r2, #64	@ 0x40
 8010a8a:	2101      	movs	r1, #1
 8010a8c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8010a8e:	f7fe fb75 	bl	800f17c <HAL_GetTick>
 8010a92:	0003      	movs	r3, r0
 8010a94:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8010a96:	2380      	movs	r3, #128	@ 0x80
 8010a98:	0219      	lsls	r1, r3, #8
 8010a9a:	68f8      	ldr	r0, [r7, #12]
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	9300      	str	r3, [sp, #0]
 8010aa0:	2319      	movs	r3, #25
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	f001 fe90 	bl	80127c8 <I2C_WaitOnFlagUntilTimeout>
 8010aa8:	1e03      	subs	r3, r0, #0
 8010aaa:	d001      	beq.n	8010ab0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8010aac:	2301      	movs	r3, #1
 8010aae:	e0cd      	b.n	8010c4c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2241      	movs	r2, #65	@ 0x41
 8010ab4:	2122      	movs	r1, #34	@ 0x22
 8010ab6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2242      	movs	r2, #66	@ 0x42
 8010abc:	2110      	movs	r1, #16
 8010abe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2208      	movs	r2, #8
 8010ad0:	18ba      	adds	r2, r7, r2
 8010ad2:	8812      	ldrh	r2, [r2, #0]
 8010ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	2bff      	cmp	r3, #255	@ 0xff
 8010ae4:	d911      	bls.n	8010b0a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	22ff      	movs	r2, #255	@ 0xff
 8010aea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010af0:	b2da      	uxtb	r2, r3
 8010af2:	2380      	movs	r3, #128	@ 0x80
 8010af4:	045c      	lsls	r4, r3, #17
 8010af6:	230a      	movs	r3, #10
 8010af8:	18fb      	adds	r3, r7, r3
 8010afa:	8819      	ldrh	r1, [r3, #0]
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	4b55      	ldr	r3, [pc, #340]	@ (8010c54 <HAL_I2C_Master_Receive+0x208>)
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	0023      	movs	r3, r4
 8010b04:	f002 f8b2 	bl	8012c6c <I2C_TransferConfig>
 8010b08:	e076      	b.n	8010bf8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b18:	b2da      	uxtb	r2, r3
 8010b1a:	2380      	movs	r3, #128	@ 0x80
 8010b1c:	049c      	lsls	r4, r3, #18
 8010b1e:	230a      	movs	r3, #10
 8010b20:	18fb      	adds	r3, r7, r3
 8010b22:	8819      	ldrh	r1, [r3, #0]
 8010b24:	68f8      	ldr	r0, [r7, #12]
 8010b26:	4b4b      	ldr	r3, [pc, #300]	@ (8010c54 <HAL_I2C_Master_Receive+0x208>)
 8010b28:	9300      	str	r3, [sp, #0]
 8010b2a:	0023      	movs	r3, r4
 8010b2c:	f002 f89e 	bl	8012c6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010b30:	e062      	b.n	8010bf8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010b32:	697a      	ldr	r2, [r7, #20]
 8010b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	0018      	movs	r0, r3
 8010b3a:	f001 ff1d 	bl	8012978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010b3e:	1e03      	subs	r3, r0, #0
 8010b40:	d001      	beq.n	8010b46 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8010b42:	2301      	movs	r3, #1
 8010b44:	e082      	b.n	8010c4c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b50:	b2d2      	uxtb	r2, r2
 8010b52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b58:	1c5a      	adds	r2, r3, #1
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b62:	3b01      	subs	r3, #1
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	3b01      	subs	r3, #1
 8010b72:	b29a      	uxth	r2, r3
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010b7c:	b29b      	uxth	r3, r3
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d03a      	beq.n	8010bf8 <HAL_I2C_Master_Receive+0x1ac>
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d136      	bne.n	8010bf8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8010b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010b8c:	68f8      	ldr	r0, [r7, #12]
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	9300      	str	r3, [sp, #0]
 8010b92:	0013      	movs	r3, r2
 8010b94:	2200      	movs	r2, #0
 8010b96:	2180      	movs	r1, #128	@ 0x80
 8010b98:	f001 fe16 	bl	80127c8 <I2C_WaitOnFlagUntilTimeout>
 8010b9c:	1e03      	subs	r3, r0, #0
 8010b9e:	d001      	beq.n	8010ba4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	e053      	b.n	8010c4c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	2bff      	cmp	r3, #255	@ 0xff
 8010bac:	d911      	bls.n	8010bd2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	22ff      	movs	r2, #255	@ 0xff
 8010bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bb8:	b2da      	uxtb	r2, r3
 8010bba:	2380      	movs	r3, #128	@ 0x80
 8010bbc:	045c      	lsls	r4, r3, #17
 8010bbe:	230a      	movs	r3, #10
 8010bc0:	18fb      	adds	r3, r7, r3
 8010bc2:	8819      	ldrh	r1, [r3, #0]
 8010bc4:	68f8      	ldr	r0, [r7, #12]
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	0023      	movs	r3, r4
 8010bcc:	f002 f84e 	bl	8012c6c <I2C_TransferConfig>
 8010bd0:	e012      	b.n	8010bf8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010be0:	b2da      	uxtb	r2, r3
 8010be2:	2380      	movs	r3, #128	@ 0x80
 8010be4:	049c      	lsls	r4, r3, #18
 8010be6:	230a      	movs	r3, #10
 8010be8:	18fb      	adds	r3, r7, r3
 8010bea:	8819      	ldrh	r1, [r3, #0]
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	2300      	movs	r3, #0
 8010bf0:	9300      	str	r3, [sp, #0]
 8010bf2:	0023      	movs	r3, r4
 8010bf4:	f002 f83a 	bl	8012c6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d197      	bne.n	8010b32 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010c02:	697a      	ldr	r2, [r7, #20]
 8010c04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	0018      	movs	r0, r3
 8010c0a:	f001 fe71 	bl	80128f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010c0e:	1e03      	subs	r3, r0, #0
 8010c10:	d001      	beq.n	8010c16 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8010c12:	2301      	movs	r3, #1
 8010c14:	e01a      	b.n	8010c4c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2220      	movs	r2, #32
 8010c1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	685a      	ldr	r2, [r3, #4]
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	490b      	ldr	r1, [pc, #44]	@ (8010c58 <HAL_I2C_Master_Receive+0x20c>)
 8010c2a:	400a      	ands	r2, r1
 8010c2c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2241      	movs	r2, #65	@ 0x41
 8010c32:	2120      	movs	r1, #32
 8010c34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2242      	movs	r2, #66	@ 0x42
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2240      	movs	r2, #64	@ 0x40
 8010c42:	2100      	movs	r1, #0
 8010c44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8010c46:	2300      	movs	r3, #0
 8010c48:	e000      	b.n	8010c4c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8010c4a:	2302      	movs	r3, #2
  }
}
 8010c4c:	0018      	movs	r0, r3
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	b007      	add	sp, #28
 8010c52:	bd90      	pop	{r4, r7, pc}
 8010c54:	80002400 	.word	0x80002400
 8010c58:	fe00e800 	.word	0xfe00e800

08010c5c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8010c5c:	b5b0      	push	{r4, r5, r7, lr}
 8010c5e:	b088      	sub	sp, #32
 8010c60:	af02      	add	r7, sp, #8
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	0008      	movs	r0, r1
 8010c66:	607a      	str	r2, [r7, #4]
 8010c68:	0019      	movs	r1, r3
 8010c6a:	230a      	movs	r3, #10
 8010c6c:	18fb      	adds	r3, r7, r3
 8010c6e:	1c02      	adds	r2, r0, #0
 8010c70:	801a      	strh	r2, [r3, #0]
 8010c72:	2308      	movs	r3, #8
 8010c74:	18fb      	adds	r3, r7, r3
 8010c76:	1c0a      	adds	r2, r1, #0
 8010c78:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	2241      	movs	r2, #65	@ 0x41
 8010c7e:	5c9b      	ldrb	r3, [r3, r2]
 8010c80:	b2db      	uxtb	r3, r3
 8010c82:	2b20      	cmp	r3, #32
 8010c84:	d000      	beq.n	8010c88 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8010c86:	e0dd      	b.n	8010e44 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	699a      	ldr	r2, [r3, #24]
 8010c8e:	2380      	movs	r3, #128	@ 0x80
 8010c90:	021b      	lsls	r3, r3, #8
 8010c92:	401a      	ands	r2, r3
 8010c94:	2380      	movs	r3, #128	@ 0x80
 8010c96:	021b      	lsls	r3, r3, #8
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d101      	bne.n	8010ca0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8010c9c:	2302      	movs	r3, #2
 8010c9e:	e0d2      	b.n	8010e46 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2240      	movs	r2, #64	@ 0x40
 8010ca4:	5c9b      	ldrb	r3, [r3, r2]
 8010ca6:	2b01      	cmp	r3, #1
 8010ca8:	d101      	bne.n	8010cae <HAL_I2C_Master_Transmit_DMA+0x52>
 8010caa:	2302      	movs	r3, #2
 8010cac:	e0cb      	b.n	8010e46 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	2240      	movs	r2, #64	@ 0x40
 8010cb2:	2101      	movs	r1, #1
 8010cb4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2241      	movs	r2, #65	@ 0x41
 8010cba:	2121      	movs	r1, #33	@ 0x21
 8010cbc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2242      	movs	r2, #66	@ 0x42
 8010cc2:	2110      	movs	r1, #16
 8010cc4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	2208      	movs	r2, #8
 8010cd6:	18ba      	adds	r2, r7, r2
 8010cd8:	8812      	ldrh	r2, [r2, #0]
 8010cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	4a5c      	ldr	r2, [pc, #368]	@ (8010e50 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8010ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	4a5b      	ldr	r2, [pc, #364]	@ (8010e54 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8010ce6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	2bff      	cmp	r3, #255	@ 0xff
 8010cf0:	d906      	bls.n	8010d00 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	22ff      	movs	r2, #255	@ 0xff
 8010cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010cf8:	2380      	movs	r3, #128	@ 0x80
 8010cfa:	045b      	lsls	r3, r3, #17
 8010cfc:	617b      	str	r3, [r7, #20]
 8010cfe:	e007      	b.n	8010d10 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010d0a:	2380      	movs	r3, #128	@ 0x80
 8010d0c:	049b      	lsls	r3, r3, #18
 8010d0e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d100      	bne.n	8010d1a <HAL_I2C_Master_Transmit_DMA+0xbe>
 8010d18:	e078      	b.n	8010e0c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d023      	beq.n	8010d6a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d26:	4a4c      	ldr	r2, [pc, #304]	@ (8010e58 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8010d28:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d2e:	4a4b      	ldr	r2, [pc, #300]	@ (8010e5c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010d30:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d36:	2200      	movs	r2, #0
 8010d38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d3e:	2200      	movs	r2, #0
 8010d40:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010d46:	6879      	ldr	r1, [r7, #4]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	3328      	adds	r3, #40	@ 0x28
 8010d4e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8010d54:	2513      	movs	r5, #19
 8010d56:	197c      	adds	r4, r7, r5
 8010d58:	f7fe ff62 	bl	800fc20 <HAL_DMA_Start_IT>
 8010d5c:	0003      	movs	r3, r0
 8010d5e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010d60:	197b      	adds	r3, r7, r5
 8010d62:	781b      	ldrb	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d13d      	bne.n	8010de4 <HAL_I2C_Master_Transmit_DMA+0x188>
 8010d68:	e013      	b.n	8010d92 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	2241      	movs	r2, #65	@ 0x41
 8010d6e:	2120      	movs	r1, #32
 8010d70:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	2242      	movs	r2, #66	@ 0x42
 8010d76:	2100      	movs	r1, #0
 8010d78:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d7e:	2280      	movs	r2, #128	@ 0x80
 8010d80:	431a      	orrs	r2, r3
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	2240      	movs	r2, #64	@ 0x40
 8010d8a:	2100      	movs	r1, #0
 8010d8c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	e059      	b.n	8010e46 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	697c      	ldr	r4, [r7, #20]
 8010d9a:	230a      	movs	r3, #10
 8010d9c:	18fb      	adds	r3, r7, r3
 8010d9e:	8819      	ldrh	r1, [r3, #0]
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	4b2f      	ldr	r3, [pc, #188]	@ (8010e60 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010da4:	9300      	str	r3, [sp, #0]
 8010da6:	0023      	movs	r3, r4
 8010da8:	f001 ff60 	bl	8012c6c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010db0:	b29a      	uxth	r2, r3
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010db6:	1ad3      	subs	r3, r2, r3
 8010db8:	b29a      	uxth	r2, r3
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2240      	movs	r2, #64	@ 0x40
 8010dc2:	2100      	movs	r1, #0
 8010dc4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2110      	movs	r1, #16
 8010dca:	0018      	movs	r0, r3
 8010dcc:	f001 ff88 	bl	8012ce0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	681a      	ldr	r2, [r3, #0]
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2180      	movs	r1, #128	@ 0x80
 8010ddc:	01c9      	lsls	r1, r1, #7
 8010dde:	430a      	orrs	r2, r1
 8010de0:	601a      	str	r2, [r3, #0]
 8010de2:	e02d      	b.n	8010e40 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2241      	movs	r2, #65	@ 0x41
 8010de8:	2120      	movs	r1, #32
 8010dea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	2242      	movs	r2, #66	@ 0x42
 8010df0:	2100      	movs	r1, #0
 8010df2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010df8:	2210      	movs	r2, #16
 8010dfa:	431a      	orrs	r2, r3
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2240      	movs	r2, #64	@ 0x40
 8010e04:	2100      	movs	r1, #0
 8010e06:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	e01c      	b.n	8010e46 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	4a15      	ldr	r2, [pc, #84]	@ (8010e64 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010e10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e16:	b2da      	uxtb	r2, r3
 8010e18:	2380      	movs	r3, #128	@ 0x80
 8010e1a:	049c      	lsls	r4, r3, #18
 8010e1c:	230a      	movs	r3, #10
 8010e1e:	18fb      	adds	r3, r7, r3
 8010e20:	8819      	ldrh	r1, [r3, #0]
 8010e22:	68f8      	ldr	r0, [r7, #12]
 8010e24:	4b0e      	ldr	r3, [pc, #56]	@ (8010e60 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8010e26:	9300      	str	r3, [sp, #0]
 8010e28:	0023      	movs	r3, r4
 8010e2a:	f001 ff1f 	bl	8012c6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2240      	movs	r2, #64	@ 0x40
 8010e32:	2100      	movs	r1, #0
 8010e34:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2101      	movs	r1, #1
 8010e3a:	0018      	movs	r0, r3
 8010e3c:	f001 ff50 	bl	8012ce0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010e40:	2300      	movs	r3, #0
 8010e42:	e000      	b.n	8010e46 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010e44:	2302      	movs	r3, #2
  }
}
 8010e46:	0018      	movs	r0, r3
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	b006      	add	sp, #24
 8010e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8010e4e:	46c0      	nop			@ (mov r8, r8)
 8010e50:	ffff0000 	.word	0xffff0000
 8010e54:	08011661 	.word	0x08011661
 8010e58:	08012619 	.word	0x08012619
 8010e5c:	08012759 	.word	0x08012759
 8010e60:	80002000 	.word	0x80002000
 8010e64:	0801120d 	.word	0x0801120d

08010e68 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010e68:	b5b0      	push	{r4, r5, r7, lr}
 8010e6a:	b088      	sub	sp, #32
 8010e6c:	af02      	add	r7, sp, #8
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	0008      	movs	r0, r1
 8010e72:	607a      	str	r2, [r7, #4]
 8010e74:	0019      	movs	r1, r3
 8010e76:	230a      	movs	r3, #10
 8010e78:	18fb      	adds	r3, r7, r3
 8010e7a:	1c02      	adds	r2, r0, #0
 8010e7c:	801a      	strh	r2, [r3, #0]
 8010e7e:	2308      	movs	r3, #8
 8010e80:	18fb      	adds	r3, r7, r3
 8010e82:	1c0a      	adds	r2, r1, #0
 8010e84:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2241      	movs	r2, #65	@ 0x41
 8010e8a:	5c9b      	ldrb	r3, [r3, r2]
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	2b20      	cmp	r3, #32
 8010e90:	d000      	beq.n	8010e94 <HAL_I2C_Master_Receive_DMA+0x2c>
 8010e92:	e0dd      	b.n	8011050 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	699a      	ldr	r2, [r3, #24]
 8010e9a:	2380      	movs	r3, #128	@ 0x80
 8010e9c:	021b      	lsls	r3, r3, #8
 8010e9e:	401a      	ands	r2, r3
 8010ea0:	2380      	movs	r3, #128	@ 0x80
 8010ea2:	021b      	lsls	r3, r3, #8
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d101      	bne.n	8010eac <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8010ea8:	2302      	movs	r3, #2
 8010eaa:	e0d2      	b.n	8011052 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2240      	movs	r2, #64	@ 0x40
 8010eb0:	5c9b      	ldrb	r3, [r3, r2]
 8010eb2:	2b01      	cmp	r3, #1
 8010eb4:	d101      	bne.n	8010eba <HAL_I2C_Master_Receive_DMA+0x52>
 8010eb6:	2302      	movs	r3, #2
 8010eb8:	e0cb      	b.n	8011052 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2240      	movs	r2, #64	@ 0x40
 8010ebe:	2101      	movs	r1, #1
 8010ec0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	2241      	movs	r2, #65	@ 0x41
 8010ec6:	2122      	movs	r1, #34	@ 0x22
 8010ec8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	2242      	movs	r2, #66	@ 0x42
 8010ece:	2110      	movs	r1, #16
 8010ed0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	687a      	ldr	r2, [r7, #4]
 8010edc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2208      	movs	r2, #8
 8010ee2:	18ba      	adds	r2, r7, r2
 8010ee4:	8812      	ldrh	r2, [r2, #0]
 8010ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	4a5c      	ldr	r2, [pc, #368]	@ (801105c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010eec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	4a5b      	ldr	r2, [pc, #364]	@ (8011060 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010ef2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	2bff      	cmp	r3, #255	@ 0xff
 8010efc:	d906      	bls.n	8010f0c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	22ff      	movs	r2, #255	@ 0xff
 8010f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010f04:	2380      	movs	r3, #128	@ 0x80
 8010f06:	045b      	lsls	r3, r3, #17
 8010f08:	617b      	str	r3, [r7, #20]
 8010f0a:	e007      	b.n	8010f1c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010f16:	2380      	movs	r3, #128	@ 0x80
 8010f18:	049b      	lsls	r3, r3, #18
 8010f1a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d100      	bne.n	8010f26 <HAL_I2C_Master_Receive_DMA+0xbe>
 8010f24:	e078      	b.n	8011018 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d023      	beq.n	8010f76 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f32:	4a4c      	ldr	r2, [pc, #304]	@ (8011064 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010f34:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f3a:	4a4b      	ldr	r2, [pc, #300]	@ (8011068 <HAL_I2C_Master_Receive_DMA+0x200>)
 8010f3c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f42:	2200      	movs	r2, #0
 8010f44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	3324      	adds	r3, #36	@ 0x24
 8010f58:	0019      	movs	r1, r3
 8010f5a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010f60:	2513      	movs	r5, #19
 8010f62:	197c      	adds	r4, r7, r5
 8010f64:	f7fe fe5c 	bl	800fc20 <HAL_DMA_Start_IT>
 8010f68:	0003      	movs	r3, r0
 8010f6a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010f6c:	197b      	adds	r3, r7, r5
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d13d      	bne.n	8010ff0 <HAL_I2C_Master_Receive_DMA+0x188>
 8010f74:	e013      	b.n	8010f9e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2241      	movs	r2, #65	@ 0x41
 8010f7a:	2120      	movs	r1, #32
 8010f7c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2242      	movs	r2, #66	@ 0x42
 8010f82:	2100      	movs	r1, #0
 8010f84:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f8a:	2280      	movs	r2, #128	@ 0x80
 8010f8c:	431a      	orrs	r2, r3
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2240      	movs	r2, #64	@ 0x40
 8010f96:	2100      	movs	r1, #0
 8010f98:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e059      	b.n	8011052 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010fa2:	b2da      	uxtb	r2, r3
 8010fa4:	697c      	ldr	r4, [r7, #20]
 8010fa6:	230a      	movs	r3, #10
 8010fa8:	18fb      	adds	r3, r7, r3
 8010faa:	8819      	ldrh	r1, [r3, #0]
 8010fac:	68f8      	ldr	r0, [r7, #12]
 8010fae:	4b2f      	ldr	r3, [pc, #188]	@ (801106c <HAL_I2C_Master_Receive_DMA+0x204>)
 8010fb0:	9300      	str	r3, [sp, #0]
 8010fb2:	0023      	movs	r3, r4
 8010fb4:	f001 fe5a 	bl	8012c6c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010fc2:	1ad3      	subs	r3, r2, r3
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2240      	movs	r2, #64	@ 0x40
 8010fce:	2100      	movs	r1, #0
 8010fd0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2110      	movs	r1, #16
 8010fd6:	0018      	movs	r0, r3
 8010fd8:	f001 fe82 	bl	8012ce0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	2180      	movs	r1, #128	@ 0x80
 8010fe8:	0209      	lsls	r1, r1, #8
 8010fea:	430a      	orrs	r2, r1
 8010fec:	601a      	str	r2, [r3, #0]
 8010fee:	e02d      	b.n	801104c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	2241      	movs	r2, #65	@ 0x41
 8010ff4:	2120      	movs	r1, #32
 8010ff6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2242      	movs	r2, #66	@ 0x42
 8010ffc:	2100      	movs	r1, #0
 8010ffe:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011004:	2210      	movs	r2, #16
 8011006:	431a      	orrs	r2, r3
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2240      	movs	r2, #64	@ 0x40
 8011010:	2100      	movs	r1, #0
 8011012:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011014:	2301      	movs	r3, #1
 8011016:	e01c      	b.n	8011052 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	4a15      	ldr	r2, [pc, #84]	@ (8011070 <HAL_I2C_Master_Receive_DMA+0x208>)
 801101c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011022:	b2da      	uxtb	r2, r3
 8011024:	2380      	movs	r3, #128	@ 0x80
 8011026:	049c      	lsls	r4, r3, #18
 8011028:	230a      	movs	r3, #10
 801102a:	18fb      	adds	r3, r7, r3
 801102c:	8819      	ldrh	r1, [r3, #0]
 801102e:	68f8      	ldr	r0, [r7, #12]
 8011030:	4b0e      	ldr	r3, [pc, #56]	@ (801106c <HAL_I2C_Master_Receive_DMA+0x204>)
 8011032:	9300      	str	r3, [sp, #0]
 8011034:	0023      	movs	r3, r4
 8011036:	f001 fe19 	bl	8012c6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	2240      	movs	r2, #64	@ 0x40
 801103e:	2100      	movs	r1, #0
 8011040:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2101      	movs	r1, #1
 8011046:	0018      	movs	r0, r3
 8011048:	f001 fe4a 	bl	8012ce0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 801104c:	2300      	movs	r3, #0
 801104e:	e000      	b.n	8011052 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8011050:	2302      	movs	r3, #2
  }
}
 8011052:	0018      	movs	r0, r3
 8011054:	46bd      	mov	sp, r7
 8011056:	b006      	add	sp, #24
 8011058:	bdb0      	pop	{r4, r5, r7, pc}
 801105a:	46c0      	nop			@ (mov r8, r8)
 801105c:	ffff0000 	.word	0xffff0000
 8011060:	08011661 	.word	0x08011661
 8011064:	080126b9 	.word	0x080126b9
 8011068:	08012759 	.word	0x08012759
 801106c:	80002400 	.word	0x80002400
 8011070:	0801120d 	.word	0x0801120d

08011074 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	699b      	ldr	r3, [r3, #24]
 8011082:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011090:	2b00      	cmp	r3, #0
 8011092:	d005      	beq.n	80110a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011098:	68ba      	ldr	r2, [r7, #8]
 801109a:	68f9      	ldr	r1, [r7, #12]
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	4798      	blx	r3
  }
}
 80110a0:	46c0      	nop			@ (mov r8, r8)
 80110a2:	46bd      	mov	sp, r7
 80110a4:	b004      	add	sp, #16
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	699b      	ldr	r3, [r3, #24]
 80110b6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80110c0:	697a      	ldr	r2, [r7, #20]
 80110c2:	2380      	movs	r3, #128	@ 0x80
 80110c4:	005b      	lsls	r3, r3, #1
 80110c6:	4013      	ands	r3, r2
 80110c8:	d00e      	beq.n	80110e8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	2280      	movs	r2, #128	@ 0x80
 80110ce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80110d0:	d00a      	beq.n	80110e8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110d6:	2201      	movs	r2, #1
 80110d8:	431a      	orrs	r2, r3
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	2280      	movs	r2, #128	@ 0x80
 80110e4:	0052      	lsls	r2, r2, #1
 80110e6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80110e8:	697a      	ldr	r2, [r7, #20]
 80110ea:	2380      	movs	r3, #128	@ 0x80
 80110ec:	00db      	lsls	r3, r3, #3
 80110ee:	4013      	ands	r3, r2
 80110f0:	d00e      	beq.n	8011110 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	2280      	movs	r2, #128	@ 0x80
 80110f6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80110f8:	d00a      	beq.n	8011110 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110fe:	2208      	movs	r2, #8
 8011100:	431a      	orrs	r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	2280      	movs	r2, #128	@ 0x80
 801110c:	00d2      	lsls	r2, r2, #3
 801110e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8011110:	697a      	ldr	r2, [r7, #20]
 8011112:	2380      	movs	r3, #128	@ 0x80
 8011114:	009b      	lsls	r3, r3, #2
 8011116:	4013      	ands	r3, r2
 8011118:	d00e      	beq.n	8011138 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	2280      	movs	r2, #128	@ 0x80
 801111e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8011120:	d00a      	beq.n	8011138 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011126:	2202      	movs	r2, #2
 8011128:	431a      	orrs	r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2280      	movs	r2, #128	@ 0x80
 8011134:	0092      	lsls	r2, r2, #2
 8011136:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801113c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	220b      	movs	r2, #11
 8011142:	4013      	ands	r3, r2
 8011144:	d005      	beq.n	8011152 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8011146:	68fa      	ldr	r2, [r7, #12]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	0011      	movs	r1, r2
 801114c:	0018      	movs	r0, r3
 801114e:	f001 f915 	bl	801237c <I2C_ITError>
  }
}
 8011152:	46c0      	nop			@ (mov r8, r8)
 8011154:	46bd      	mov	sp, r7
 8011156:	b006      	add	sp, #24
 8011158:	bd80      	pop	{r7, pc}

0801115a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801115a:	b580      	push	{r7, lr}
 801115c:	b082      	sub	sp, #8
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8011162:	46c0      	nop			@ (mov r8, r8)
 8011164:	46bd      	mov	sp, r7
 8011166:	b002      	add	sp, #8
 8011168:	bd80      	pop	{r7, pc}

0801116a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801116a:	b580      	push	{r7, lr}
 801116c:	b082      	sub	sp, #8
 801116e:	af00      	add	r7, sp, #0
 8011170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8011172:	46c0      	nop			@ (mov r8, r8)
 8011174:	46bd      	mov	sp, r7
 8011176:	b002      	add	sp, #8
 8011178:	bd80      	pop	{r7, pc}

0801117a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b082      	sub	sp, #8
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8011182:	46c0      	nop			@ (mov r8, r8)
 8011184:	46bd      	mov	sp, r7
 8011186:	b002      	add	sp, #8
 8011188:	bd80      	pop	{r7, pc}

0801118a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b082      	sub	sp, #8
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8011192:	46c0      	nop			@ (mov r8, r8)
 8011194:	46bd      	mov	sp, r7
 8011196:	b002      	add	sp, #8
 8011198:	bd80      	pop	{r7, pc}

0801119a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 801119a:	b580      	push	{r7, lr}
 801119c:	b082      	sub	sp, #8
 801119e:	af00      	add	r7, sp, #0
 80111a0:	6078      	str	r0, [r7, #4]
 80111a2:	0008      	movs	r0, r1
 80111a4:	0011      	movs	r1, r2
 80111a6:	1cfb      	adds	r3, r7, #3
 80111a8:	1c02      	adds	r2, r0, #0
 80111aa:	701a      	strb	r2, [r3, #0]
 80111ac:	003b      	movs	r3, r7
 80111ae:	1c0a      	adds	r2, r1, #0
 80111b0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80111b2:	46c0      	nop			@ (mov r8, r8)
 80111b4:	46bd      	mov	sp, r7
 80111b6:	b002      	add	sp, #8
 80111b8:	bd80      	pop	{r7, pc}

080111ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b082      	sub	sp, #8
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80111c2:	46c0      	nop			@ (mov r8, r8)
 80111c4:	46bd      	mov	sp, r7
 80111c6:	b002      	add	sp, #8
 80111c8:	bd80      	pop	{r7, pc}

080111ca <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b082      	sub	sp, #8
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80111d2:	46c0      	nop			@ (mov r8, r8)
 80111d4:	46bd      	mov	sp, r7
 80111d6:	b002      	add	sp, #8
 80111d8:	bd80      	pop	{r7, pc}

080111da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b082      	sub	sp, #8
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80111e2:	46c0      	nop			@ (mov r8, r8)
 80111e4:	46bd      	mov	sp, r7
 80111e6:	b002      	add	sp, #8
 80111e8:	bd80      	pop	{r7, pc}

080111ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80111ea:	b580      	push	{r7, lr}
 80111ec:	b082      	sub	sp, #8
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80111f2:	46c0      	nop			@ (mov r8, r8)
 80111f4:	46bd      	mov	sp, r7
 80111f6:	b002      	add	sp, #8
 80111f8:	bd80      	pop	{r7, pc}

080111fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80111fa:	b580      	push	{r7, lr}
 80111fc:	b082      	sub	sp, #8
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8011202:	46c0      	nop			@ (mov r8, r8)
 8011204:	46bd      	mov	sp, r7
 8011206:	b002      	add	sp, #8
 8011208:	bd80      	pop	{r7, pc}
	...

0801120c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 801120c:	b590      	push	{r4, r7, lr}
 801120e:	b089      	sub	sp, #36	@ 0x24
 8011210:	af02      	add	r7, sp, #8
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2240      	movs	r2, #64	@ 0x40
 8011220:	5c9b      	ldrb	r3, [r3, r2]
 8011222:	2b01      	cmp	r3, #1
 8011224:	d101      	bne.n	801122a <I2C_Master_ISR_IT+0x1e>
 8011226:	2302      	movs	r3, #2
 8011228:	e113      	b.n	8011452 <I2C_Master_ISR_IT+0x246>
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2240      	movs	r2, #64	@ 0x40
 801122e:	2101      	movs	r1, #1
 8011230:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	2210      	movs	r2, #16
 8011236:	4013      	ands	r3, r2
 8011238:	d012      	beq.n	8011260 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2210      	movs	r2, #16
 801123e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8011240:	d00e      	beq.n	8011260 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2210      	movs	r2, #16
 8011248:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801124e:	2204      	movs	r2, #4
 8011250:	431a      	orrs	r2, r3
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	0018      	movs	r0, r3
 801125a:	f001 f9ba 	bl	80125d2 <I2C_Flush_TXDR>
 801125e:	e0e5      	b.n	801142c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	2204      	movs	r2, #4
 8011264:	4013      	ands	r3, r2
 8011266:	d021      	beq.n	80112ac <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2204      	movs	r2, #4
 801126c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801126e:	d01d      	beq.n	80112ac <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	2204      	movs	r2, #4
 8011274:	4393      	bics	r3, r2
 8011276:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011282:	b2d2      	uxtb	r2, r2
 8011284:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801128a:	1c5a      	adds	r2, r3, #1
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011294:	3b01      	subs	r3, #1
 8011296:	b29a      	uxth	r2, r3
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	3b01      	subs	r3, #1
 80112a4:	b29a      	uxth	r2, r3
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80112aa:	e0bf      	b.n	801142c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	2202      	movs	r2, #2
 80112b0:	4013      	ands	r3, r2
 80112b2:	d01c      	beq.n	80112ee <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2202      	movs	r2, #2
 80112b8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80112ba:	d018      	beq.n	80112ee <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112c0:	781a      	ldrb	r2, [r3, #0]
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112cc:	1c5a      	adds	r2, r3, #1
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112d6:	3b01      	subs	r3, #1
 80112d8:	b29a      	uxth	r2, r3
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112e2:	b29b      	uxth	r3, r3
 80112e4:	3b01      	subs	r3, #1
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80112ec:	e09e      	b.n	801142c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	2280      	movs	r2, #128	@ 0x80
 80112f2:	4013      	ands	r3, r2
 80112f4:	d100      	bne.n	80112f8 <I2C_Master_ISR_IT+0xec>
 80112f6:	e069      	b.n	80113cc <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2240      	movs	r2, #64	@ 0x40
 80112fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80112fe:	d065      	beq.n	80113cc <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011304:	b29b      	uxth	r3, r3
 8011306:	2b00      	cmp	r3, #0
 8011308:	d04a      	beq.n	80113a0 <I2C_Master_ISR_IT+0x194>
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801130e:	2b00      	cmp	r3, #0
 8011310:	d146      	bne.n	80113a0 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	b29a      	uxth	r2, r3
 801131a:	2112      	movs	r1, #18
 801131c:	187b      	adds	r3, r7, r1
 801131e:	0592      	lsls	r2, r2, #22
 8011320:	0d92      	lsrs	r2, r2, #22
 8011322:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011328:	b29b      	uxth	r3, r3
 801132a:	2bff      	cmp	r3, #255	@ 0xff
 801132c:	d910      	bls.n	8011350 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	22ff      	movs	r2, #255	@ 0xff
 8011332:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011338:	b2da      	uxtb	r2, r3
 801133a:	2380      	movs	r3, #128	@ 0x80
 801133c:	045c      	lsls	r4, r3, #17
 801133e:	187b      	adds	r3, r7, r1
 8011340:	8819      	ldrh	r1, [r3, #0]
 8011342:	68f8      	ldr	r0, [r7, #12]
 8011344:	2300      	movs	r3, #0
 8011346:	9300      	str	r3, [sp, #0]
 8011348:	0023      	movs	r3, r4
 801134a:	f001 fc8f 	bl	8012c6c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801134e:	e03c      	b.n	80113ca <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011354:	b29a      	uxth	r2, r3
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801135e:	4a3f      	ldr	r2, [pc, #252]	@ (801145c <I2C_Master_ISR_IT+0x250>)
 8011360:	4293      	cmp	r3, r2
 8011362:	d00e      	beq.n	8011382 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011368:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801136e:	2312      	movs	r3, #18
 8011370:	18fb      	adds	r3, r7, r3
 8011372:	8819      	ldrh	r1, [r3, #0]
 8011374:	68f8      	ldr	r0, [r7, #12]
 8011376:	2300      	movs	r3, #0
 8011378:	9300      	str	r3, [sp, #0]
 801137a:	0023      	movs	r3, r4
 801137c:	f001 fc76 	bl	8012c6c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011380:	e023      	b.n	80113ca <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011386:	b2da      	uxtb	r2, r3
 8011388:	2380      	movs	r3, #128	@ 0x80
 801138a:	049c      	lsls	r4, r3, #18
 801138c:	2312      	movs	r3, #18
 801138e:	18fb      	adds	r3, r7, r3
 8011390:	8819      	ldrh	r1, [r3, #0]
 8011392:	68f8      	ldr	r0, [r7, #12]
 8011394:	2300      	movs	r3, #0
 8011396:	9300      	str	r3, [sp, #0]
 8011398:	0023      	movs	r3, r4
 801139a:	f001 fc67 	bl	8012c6c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801139e:	e014      	b.n	80113ca <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	685a      	ldr	r2, [r3, #4]
 80113a6:	2380      	movs	r3, #128	@ 0x80
 80113a8:	049b      	lsls	r3, r3, #18
 80113aa:	401a      	ands	r2, r3
 80113ac:	2380      	movs	r3, #128	@ 0x80
 80113ae:	049b      	lsls	r3, r3, #18
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d004      	beq.n	80113be <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	0018      	movs	r0, r3
 80113b8:	f000 fcf4 	bl	8011da4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80113bc:	e036      	b.n	801142c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	2140      	movs	r1, #64	@ 0x40
 80113c2:	0018      	movs	r0, r3
 80113c4:	f000 ffda 	bl	801237c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80113c8:	e030      	b.n	801142c <I2C_Master_ISR_IT+0x220>
 80113ca:	e02f      	b.n	801142c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	2240      	movs	r2, #64	@ 0x40
 80113d0:	4013      	ands	r3, r2
 80113d2:	d02b      	beq.n	801142c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2240      	movs	r2, #64	@ 0x40
 80113d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80113da:	d027      	beq.n	801142c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d11d      	bne.n	8011422 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	685a      	ldr	r2, [r3, #4]
 80113ec:	2380      	movs	r3, #128	@ 0x80
 80113ee:	049b      	lsls	r3, r3, #18
 80113f0:	401a      	ands	r2, r3
 80113f2:	2380      	movs	r3, #128	@ 0x80
 80113f4:	049b      	lsls	r3, r3, #18
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d018      	beq.n	801142c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113fe:	4a17      	ldr	r2, [pc, #92]	@ (801145c <I2C_Master_ISR_IT+0x250>)
 8011400:	4293      	cmp	r3, r2
 8011402:	d109      	bne.n	8011418 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	685a      	ldr	r2, [r3, #4]
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2180      	movs	r1, #128	@ 0x80
 8011410:	01c9      	lsls	r1, r1, #7
 8011412:	430a      	orrs	r2, r1
 8011414:	605a      	str	r2, [r3, #4]
 8011416:	e009      	b.n	801142c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	0018      	movs	r0, r3
 801141c:	f000 fcc2 	bl	8011da4 <I2C_ITMasterSeqCplt>
 8011420:	e004      	b.n	801142c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	2140      	movs	r1, #64	@ 0x40
 8011426:	0018      	movs	r0, r3
 8011428:	f000 ffa8 	bl	801237c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	2220      	movs	r2, #32
 8011430:	4013      	ands	r3, r2
 8011432:	d009      	beq.n	8011448 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2220      	movs	r2, #32
 8011438:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801143a:	d005      	beq.n	8011448 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 801143c:	697a      	ldr	r2, [r7, #20]
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	0011      	movs	r1, r2
 8011442:	0018      	movs	r0, r3
 8011444:	f000 fd54 	bl	8011ef0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2240      	movs	r2, #64	@ 0x40
 801144c:	2100      	movs	r1, #0
 801144e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011450:	2300      	movs	r3, #0
}
 8011452:	0018      	movs	r0, r3
 8011454:	46bd      	mov	sp, r7
 8011456:	b007      	add	sp, #28
 8011458:	bd90      	pop	{r4, r7, pc}
 801145a:	46c0      	nop			@ (mov r8, r8)
 801145c:	ffff0000 	.word	0xffff0000

08011460 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b086      	sub	sp, #24
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011470:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	2240      	movs	r2, #64	@ 0x40
 801147a:	5c9b      	ldrb	r3, [r3, r2]
 801147c:	2b01      	cmp	r3, #1
 801147e:	d101      	bne.n	8011484 <I2C_Slave_ISR_IT+0x24>
 8011480:	2302      	movs	r3, #2
 8011482:	e0e6      	b.n	8011652 <I2C_Slave_ISR_IT+0x1f2>
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2240      	movs	r2, #64	@ 0x40
 8011488:	2101      	movs	r1, #1
 801148a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	2220      	movs	r2, #32
 8011490:	4013      	ands	r3, r2
 8011492:	d009      	beq.n	80114a8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2220      	movs	r2, #32
 8011498:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801149a:	d005      	beq.n	80114a8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 801149c:	693a      	ldr	r2, [r7, #16]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	0011      	movs	r1, r2
 80114a2:	0018      	movs	r0, r3
 80114a4:	f000 fdf2 	bl	801208c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80114a8:	693b      	ldr	r3, [r7, #16]
 80114aa:	2210      	movs	r2, #16
 80114ac:	4013      	ands	r3, r2
 80114ae:	d052      	beq.n	8011556 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2210      	movs	r2, #16
 80114b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80114b6:	d04e      	beq.n	8011556 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114bc:	b29b      	uxth	r3, r3
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d12d      	bne.n	801151e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2241      	movs	r2, #65	@ 0x41
 80114c6:	5c9b      	ldrb	r3, [r3, r2]
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	2b28      	cmp	r3, #40	@ 0x28
 80114cc:	d10b      	bne.n	80114e6 <I2C_Slave_ISR_IT+0x86>
 80114ce:	697a      	ldr	r2, [r7, #20]
 80114d0:	2380      	movs	r3, #128	@ 0x80
 80114d2:	049b      	lsls	r3, r3, #18
 80114d4:	429a      	cmp	r2, r3
 80114d6:	d106      	bne.n	80114e6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80114d8:	693a      	ldr	r2, [r7, #16]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	0011      	movs	r1, r2
 80114de:	0018      	movs	r0, r3
 80114e0:	f000 fef4 	bl	80122cc <I2C_ITListenCplt>
 80114e4:	e036      	b.n	8011554 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2241      	movs	r2, #65	@ 0x41
 80114ea:	5c9b      	ldrb	r3, [r3, r2]
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	2b29      	cmp	r3, #41	@ 0x29
 80114f0:	d110      	bne.n	8011514 <I2C_Slave_ISR_IT+0xb4>
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	4a59      	ldr	r2, [pc, #356]	@ (801165c <I2C_Slave_ISR_IT+0x1fc>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d00c      	beq.n	8011514 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2210      	movs	r2, #16
 8011500:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	0018      	movs	r0, r3
 8011506:	f001 f864 	bl	80125d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	0018      	movs	r0, r3
 801150e:	f000 fc8b 	bl	8011e28 <I2C_ITSlaveSeqCplt>
 8011512:	e01f      	b.n	8011554 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	2210      	movs	r2, #16
 801151a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 801151c:	e091      	b.n	8011642 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2210      	movs	r2, #16
 8011524:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801152a:	2204      	movs	r2, #4
 801152c:	431a      	orrs	r2, r3
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d005      	beq.n	8011544 <I2C_Slave_ISR_IT+0xe4>
 8011538:	697a      	ldr	r2, [r7, #20]
 801153a:	2380      	movs	r3, #128	@ 0x80
 801153c:	045b      	lsls	r3, r3, #17
 801153e:	429a      	cmp	r2, r3
 8011540:	d000      	beq.n	8011544 <I2C_Slave_ISR_IT+0xe4>
 8011542:	e07e      	b.n	8011642 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	0011      	movs	r1, r2
 801154c:	0018      	movs	r0, r3
 801154e:	f000 ff15 	bl	801237c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011552:	e076      	b.n	8011642 <I2C_Slave_ISR_IT+0x1e2>
 8011554:	e075      	b.n	8011642 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	2204      	movs	r2, #4
 801155a:	4013      	ands	r3, r2
 801155c:	d02f      	beq.n	80115be <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2204      	movs	r2, #4
 8011562:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8011564:	d02b      	beq.n	80115be <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801156a:	b29b      	uxth	r3, r3
 801156c:	2b00      	cmp	r3, #0
 801156e:	d018      	beq.n	80115a2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801157a:	b2d2      	uxtb	r2, r2
 801157c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011582:	1c5a      	adds	r2, r3, #1
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801158c:	3b01      	subs	r3, #1
 801158e:	b29a      	uxth	r2, r3
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011598:	b29b      	uxth	r3, r3
 801159a:	3b01      	subs	r3, #1
 801159c:	b29a      	uxth	r2, r3
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115a6:	b29b      	uxth	r3, r3
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d14c      	bne.n	8011646 <I2C_Slave_ISR_IT+0x1e6>
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	4a2b      	ldr	r2, [pc, #172]	@ (801165c <I2C_Slave_ISR_IT+0x1fc>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	d048      	beq.n	8011646 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	0018      	movs	r0, r3
 80115b8:	f000 fc36 	bl	8011e28 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80115bc:	e043      	b.n	8011646 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	2208      	movs	r2, #8
 80115c2:	4013      	ands	r3, r2
 80115c4:	d00a      	beq.n	80115dc <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2208      	movs	r2, #8
 80115ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80115cc:	d006      	beq.n	80115dc <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80115ce:	693a      	ldr	r2, [r7, #16]
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	0011      	movs	r1, r2
 80115d4:	0018      	movs	r0, r3
 80115d6:	f000 fb41 	bl	8011c5c <I2C_ITAddrCplt>
 80115da:	e035      	b.n	8011648 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	2202      	movs	r2, #2
 80115e0:	4013      	ands	r3, r2
 80115e2:	d031      	beq.n	8011648 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	2202      	movs	r2, #2
 80115e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80115ea:	d02d      	beq.n	8011648 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d018      	beq.n	8011628 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115fa:	781a      	ldrb	r2, [r3, #0]
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011606:	1c5a      	adds	r2, r3, #1
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011610:	b29b      	uxth	r3, r3
 8011612:	3b01      	subs	r3, #1
 8011614:	b29a      	uxth	r2, r3
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801161e:	3b01      	subs	r3, #1
 8011620:	b29a      	uxth	r2, r3
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011626:	e00f      	b.n	8011648 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8011628:	697a      	ldr	r2, [r7, #20]
 801162a:	2380      	movs	r3, #128	@ 0x80
 801162c:	045b      	lsls	r3, r3, #17
 801162e:	429a      	cmp	r2, r3
 8011630:	d002      	beq.n	8011638 <I2C_Slave_ISR_IT+0x1d8>
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d107      	bne.n	8011648 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	0018      	movs	r0, r3
 801163c:	f000 fbf4 	bl	8011e28 <I2C_ITSlaveSeqCplt>
 8011640:	e002      	b.n	8011648 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8011642:	46c0      	nop			@ (mov r8, r8)
 8011644:	e000      	b.n	8011648 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8011646:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	2240      	movs	r2, #64	@ 0x40
 801164c:	2100      	movs	r1, #0
 801164e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011650:	2300      	movs	r3, #0
}
 8011652:	0018      	movs	r0, r3
 8011654:	46bd      	mov	sp, r7
 8011656:	b006      	add	sp, #24
 8011658:	bd80      	pop	{r7, pc}
 801165a:	46c0      	nop			@ (mov r8, r8)
 801165c:	ffff0000 	.word	0xffff0000

08011660 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011660:	b590      	push	{r4, r7, lr}
 8011662:	b089      	sub	sp, #36	@ 0x24
 8011664:	af02      	add	r7, sp, #8
 8011666:	60f8      	str	r0, [r7, #12]
 8011668:	60b9      	str	r1, [r7, #8]
 801166a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	2240      	movs	r2, #64	@ 0x40
 8011670:	5c9b      	ldrb	r3, [r3, r2]
 8011672:	2b01      	cmp	r3, #1
 8011674:	d101      	bne.n	801167a <I2C_Master_ISR_DMA+0x1a>
 8011676:	2302      	movs	r3, #2
 8011678:	e0e7      	b.n	801184a <I2C_Master_ISR_DMA+0x1ea>
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2240      	movs	r2, #64	@ 0x40
 801167e:	2101      	movs	r1, #1
 8011680:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	2210      	movs	r2, #16
 8011686:	4013      	ands	r3, r2
 8011688:	d017      	beq.n	80116ba <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2210      	movs	r2, #16
 801168e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011690:	d013      	beq.n	80116ba <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	2210      	movs	r2, #16
 8011698:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801169e:	2204      	movs	r2, #4
 80116a0:	431a      	orrs	r2, r3
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2120      	movs	r1, #32
 80116aa:	0018      	movs	r0, r3
 80116ac:	f001 fb18 	bl	8012ce0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	0018      	movs	r0, r3
 80116b4:	f000 ff8d 	bl	80125d2 <I2C_Flush_TXDR>
 80116b8:	e0c2      	b.n	8011840 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	2280      	movs	r2, #128	@ 0x80
 80116be:	4013      	ands	r3, r2
 80116c0:	d100      	bne.n	80116c4 <I2C_Master_ISR_DMA+0x64>
 80116c2:	e07c      	b.n	80117be <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2240      	movs	r2, #64	@ 0x40
 80116c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80116ca:	d100      	bne.n	80116ce <I2C_Master_ISR_DMA+0x6e>
 80116cc:	e077      	b.n	80117be <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	2140      	movs	r1, #64	@ 0x40
 80116da:	438a      	bics	r2, r1
 80116dc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d055      	beq.n	8011794 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	2312      	movs	r3, #18
 80116f2:	18fb      	adds	r3, r7, r3
 80116f4:	0592      	lsls	r2, r2, #22
 80116f6:	0d92      	lsrs	r2, r2, #22
 80116f8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116fe:	b29b      	uxth	r3, r3
 8011700:	2bff      	cmp	r3, #255	@ 0xff
 8011702:	d906      	bls.n	8011712 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	22ff      	movs	r2, #255	@ 0xff
 8011708:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801170a:	2380      	movs	r3, #128	@ 0x80
 801170c:	045b      	lsls	r3, r3, #17
 801170e:	617b      	str	r3, [r7, #20]
 8011710:	e010      	b.n	8011734 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011716:	b29a      	uxth	r2, r3
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011720:	4a4c      	ldr	r2, [pc, #304]	@ (8011854 <I2C_Master_ISR_DMA+0x1f4>)
 8011722:	4293      	cmp	r3, r2
 8011724:	d003      	beq.n	801172e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801172a:	617b      	str	r3, [r7, #20]
 801172c:	e002      	b.n	8011734 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801172e:	2380      	movs	r3, #128	@ 0x80
 8011730:	049b      	lsls	r3, r3, #18
 8011732:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011738:	b2da      	uxtb	r2, r3
 801173a:	697c      	ldr	r4, [r7, #20]
 801173c:	2312      	movs	r3, #18
 801173e:	18fb      	adds	r3, r7, r3
 8011740:	8819      	ldrh	r1, [r3, #0]
 8011742:	68f8      	ldr	r0, [r7, #12]
 8011744:	2300      	movs	r3, #0
 8011746:	9300      	str	r3, [sp, #0]
 8011748:	0023      	movs	r3, r4
 801174a:	f001 fa8f 	bl	8012c6c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011752:	b29a      	uxth	r2, r3
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011758:	1ad3      	subs	r3, r2, r3
 801175a:	b29a      	uxth	r2, r3
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2241      	movs	r2, #65	@ 0x41
 8011764:	5c9b      	ldrb	r3, [r3, r2]
 8011766:	b2db      	uxtb	r3, r3
 8011768:	2b22      	cmp	r3, #34	@ 0x22
 801176a:	d109      	bne.n	8011780 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	681a      	ldr	r2, [r3, #0]
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	2180      	movs	r1, #128	@ 0x80
 8011778:	0209      	lsls	r1, r1, #8
 801177a:	430a      	orrs	r2, r1
 801177c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801177e:	e05f      	b.n	8011840 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	2180      	movs	r1, #128	@ 0x80
 801178c:	01c9      	lsls	r1, r1, #7
 801178e:	430a      	orrs	r2, r1
 8011790:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011792:	e055      	b.n	8011840 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	685a      	ldr	r2, [r3, #4]
 801179a:	2380      	movs	r3, #128	@ 0x80
 801179c:	049b      	lsls	r3, r3, #18
 801179e:	401a      	ands	r2, r3
 80117a0:	2380      	movs	r3, #128	@ 0x80
 80117a2:	049b      	lsls	r3, r3, #18
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d004      	beq.n	80117b2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	0018      	movs	r0, r3
 80117ac:	f000 fafa 	bl	8011da4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80117b0:	e046      	b.n	8011840 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2140      	movs	r1, #64	@ 0x40
 80117b6:	0018      	movs	r0, r3
 80117b8:	f000 fde0 	bl	801237c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80117bc:	e040      	b.n	8011840 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80117be:	68bb      	ldr	r3, [r7, #8]
 80117c0:	2240      	movs	r2, #64	@ 0x40
 80117c2:	4013      	ands	r3, r2
 80117c4:	d02c      	beq.n	8011820 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2240      	movs	r2, #64	@ 0x40
 80117ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80117cc:	d028      	beq.n	8011820 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d11d      	bne.n	8011814 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	685a      	ldr	r2, [r3, #4]
 80117de:	2380      	movs	r3, #128	@ 0x80
 80117e0:	049b      	lsls	r3, r3, #18
 80117e2:	401a      	ands	r2, r3
 80117e4:	2380      	movs	r3, #128	@ 0x80
 80117e6:	049b      	lsls	r3, r3, #18
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d028      	beq.n	801183e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117f0:	4a18      	ldr	r2, [pc, #96]	@ (8011854 <I2C_Master_ISR_DMA+0x1f4>)
 80117f2:	4293      	cmp	r3, r2
 80117f4:	d109      	bne.n	801180a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	685a      	ldr	r2, [r3, #4]
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2180      	movs	r1, #128	@ 0x80
 8011802:	01c9      	lsls	r1, r1, #7
 8011804:	430a      	orrs	r2, r1
 8011806:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8011808:	e019      	b.n	801183e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	0018      	movs	r0, r3
 801180e:	f000 fac9 	bl	8011da4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8011812:	e014      	b.n	801183e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2140      	movs	r1, #64	@ 0x40
 8011818:	0018      	movs	r0, r3
 801181a:	f000 fdaf 	bl	801237c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801181e:	e00e      	b.n	801183e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	2220      	movs	r2, #32
 8011824:	4013      	ands	r3, r2
 8011826:	d00b      	beq.n	8011840 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2220      	movs	r2, #32
 801182c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801182e:	d007      	beq.n	8011840 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011830:	68ba      	ldr	r2, [r7, #8]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	0011      	movs	r1, r2
 8011836:	0018      	movs	r0, r3
 8011838:	f000 fb5a 	bl	8011ef0 <I2C_ITMasterCplt>
 801183c:	e000      	b.n	8011840 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 801183e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2240      	movs	r2, #64	@ 0x40
 8011844:	2100      	movs	r1, #0
 8011846:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011848:	2300      	movs	r3, #0
}
 801184a:	0018      	movs	r0, r3
 801184c:	46bd      	mov	sp, r7
 801184e:	b007      	add	sp, #28
 8011850:	bd90      	pop	{r4, r7, pc}
 8011852:	46c0      	nop			@ (mov r8, r8)
 8011854:	ffff0000 	.word	0xffff0000

08011858 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011858:	b590      	push	{r4, r7, lr}
 801185a:	b089      	sub	sp, #36	@ 0x24
 801185c:	af02      	add	r7, sp, #8
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8011864:	4b88      	ldr	r3, [pc, #544]	@ (8011a88 <I2C_Mem_ISR_DMA+0x230>)
 8011866:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2240      	movs	r2, #64	@ 0x40
 801186c:	5c9b      	ldrb	r3, [r3, r2]
 801186e:	2b01      	cmp	r3, #1
 8011870:	d101      	bne.n	8011876 <I2C_Mem_ISR_DMA+0x1e>
 8011872:	2302      	movs	r3, #2
 8011874:	e104      	b.n	8011a80 <I2C_Mem_ISR_DMA+0x228>
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	2240      	movs	r2, #64	@ 0x40
 801187a:	2101      	movs	r1, #1
 801187c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	2210      	movs	r2, #16
 8011882:	4013      	ands	r3, r2
 8011884:	d017      	beq.n	80118b6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2210      	movs	r2, #16
 801188a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801188c:	d013      	beq.n	80118b6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2210      	movs	r2, #16
 8011894:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801189a:	2204      	movs	r2, #4
 801189c:	431a      	orrs	r2, r3
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	2120      	movs	r1, #32
 80118a6:	0018      	movs	r0, r3
 80118a8:	f001 fa1a 	bl	8012ce0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	0018      	movs	r0, r3
 80118b0:	f000 fe8f 	bl	80125d2 <I2C_Flush_TXDR>
 80118b4:	e0df      	b.n	8011a76 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	2202      	movs	r2, #2
 80118ba:	4013      	ands	r3, r2
 80118bc:	d00d      	beq.n	80118da <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2202      	movs	r2, #2
 80118c2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80118c4:	d009      	beq.n	80118da <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	68fa      	ldr	r2, [r7, #12]
 80118cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80118ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	2201      	movs	r2, #1
 80118d4:	4252      	negs	r2, r2
 80118d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80118d8:	e0cd      	b.n	8011a76 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	2280      	movs	r2, #128	@ 0x80
 80118de:	4013      	ands	r3, r2
 80118e0:	d05e      	beq.n	80119a0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2240      	movs	r2, #64	@ 0x40
 80118e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80118e8:	d05a      	beq.n	80119a0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2110      	movs	r1, #16
 80118ee:	0018      	movs	r0, r3
 80118f0:	f001 f9f6 	bl	8012ce0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d04a      	beq.n	8011994 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011902:	b29b      	uxth	r3, r3
 8011904:	2bff      	cmp	r3, #255	@ 0xff
 8011906:	d910      	bls.n	801192a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	22ff      	movs	r2, #255	@ 0xff
 801190c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011912:	b299      	uxth	r1, r3
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011918:	b2da      	uxtb	r2, r3
 801191a:	2380      	movs	r3, #128	@ 0x80
 801191c:	045b      	lsls	r3, r3, #17
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	2400      	movs	r4, #0
 8011922:	9400      	str	r4, [sp, #0]
 8011924:	f001 f9a2 	bl	8012c6c <I2C_TransferConfig>
 8011928:	e011      	b.n	801194e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801192e:	b29a      	uxth	r2, r3
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011938:	b299      	uxth	r1, r3
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801193e:	b2da      	uxtb	r2, r3
 8011940:	2380      	movs	r3, #128	@ 0x80
 8011942:	049b      	lsls	r3, r3, #18
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	2400      	movs	r4, #0
 8011948:	9400      	str	r4, [sp, #0]
 801194a:	f001 f98f 	bl	8012c6c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011952:	b29a      	uxth	r2, r3
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011958:	1ad3      	subs	r3, r2, r3
 801195a:	b29a      	uxth	r2, r3
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2241      	movs	r2, #65	@ 0x41
 8011964:	5c9b      	ldrb	r3, [r3, r2]
 8011966:	b2db      	uxtb	r3, r3
 8011968:	2b22      	cmp	r3, #34	@ 0x22
 801196a:	d109      	bne.n	8011980 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	681a      	ldr	r2, [r3, #0]
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2180      	movs	r1, #128	@ 0x80
 8011978:	0209      	lsls	r1, r1, #8
 801197a:	430a      	orrs	r2, r1
 801197c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801197e:	e07a      	b.n	8011a76 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	681a      	ldr	r2, [r3, #0]
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	2180      	movs	r1, #128	@ 0x80
 801198c:	01c9      	lsls	r1, r1, #7
 801198e:	430a      	orrs	r2, r1
 8011990:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8011992:	e070      	b.n	8011a76 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	2140      	movs	r1, #64	@ 0x40
 8011998:	0018      	movs	r0, r3
 801199a:	f000 fcef 	bl	801237c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801199e:	e06a      	b.n	8011a76 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	2240      	movs	r2, #64	@ 0x40
 80119a4:	4013      	ands	r3, r2
 80119a6:	d058      	beq.n	8011a5a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2240      	movs	r2, #64	@ 0x40
 80119ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80119ae:	d054      	beq.n	8011a5a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2241      	movs	r2, #65	@ 0x41
 80119b4:	5c9b      	ldrb	r3, [r3, r2]
 80119b6:	b2db      	uxtb	r3, r3
 80119b8:	2b22      	cmp	r3, #34	@ 0x22
 80119ba:	d101      	bne.n	80119c0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80119bc:	4b33      	ldr	r3, [pc, #204]	@ (8011a8c <I2C_Mem_ISR_DMA+0x234>)
 80119be:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	2bff      	cmp	r3, #255	@ 0xff
 80119c8:	d911      	bls.n	80119ee <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	22ff      	movs	r2, #255	@ 0xff
 80119ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119d4:	b299      	uxth	r1, r3
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80119da:	b2da      	uxtb	r2, r3
 80119dc:	2380      	movs	r3, #128	@ 0x80
 80119de:	045c      	lsls	r4, r3, #17
 80119e0:	68f8      	ldr	r0, [r7, #12]
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	9300      	str	r3, [sp, #0]
 80119e6:	0023      	movs	r3, r4
 80119e8:	f001 f940 	bl	8012c6c <I2C_TransferConfig>
 80119ec:	e012      	b.n	8011a14 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80119f2:	b29a      	uxth	r2, r3
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80119fc:	b299      	uxth	r1, r3
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a02:	b2da      	uxtb	r2, r3
 8011a04:	2380      	movs	r3, #128	@ 0x80
 8011a06:	049c      	lsls	r4, r3, #18
 8011a08:	68f8      	ldr	r0, [r7, #12]
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	9300      	str	r3, [sp, #0]
 8011a0e:	0023      	movs	r3, r4
 8011a10:	f001 f92c 	bl	8012c6c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011a18:	b29a      	uxth	r2, r3
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a1e:	1ad3      	subs	r3, r2, r3
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	2241      	movs	r2, #65	@ 0x41
 8011a2a:	5c9b      	ldrb	r3, [r3, r2]
 8011a2c:	b2db      	uxtb	r3, r3
 8011a2e:	2b22      	cmp	r3, #34	@ 0x22
 8011a30:	d109      	bne.n	8011a46 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	681a      	ldr	r2, [r3, #0]
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	2180      	movs	r1, #128	@ 0x80
 8011a3e:	0209      	lsls	r1, r1, #8
 8011a40:	430a      	orrs	r2, r1
 8011a42:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a44:	e017      	b.n	8011a76 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2180      	movs	r1, #128	@ 0x80
 8011a52:	01c9      	lsls	r1, r1, #7
 8011a54:	430a      	orrs	r2, r1
 8011a56:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a58:	e00d      	b.n	8011a76 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	2220      	movs	r2, #32
 8011a5e:	4013      	ands	r3, r2
 8011a60:	d009      	beq.n	8011a76 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2220      	movs	r2, #32
 8011a66:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011a68:	d005      	beq.n	8011a76 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011a6a:	68ba      	ldr	r2, [r7, #8]
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	0011      	movs	r1, r2
 8011a70:	0018      	movs	r0, r3
 8011a72:	f000 fa3d 	bl	8011ef0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2240      	movs	r2, #64	@ 0x40
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011a7e:	2300      	movs	r3, #0
}
 8011a80:	0018      	movs	r0, r3
 8011a82:	46bd      	mov	sp, r7
 8011a84:	b007      	add	sp, #28
 8011a86:	bd90      	pop	{r4, r7, pc}
 8011a88:	80002000 	.word	0x80002000
 8011a8c:	80002400 	.word	0x80002400

08011a90 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b088      	sub	sp, #32
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	60b9      	str	r1, [r7, #8]
 8011a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011aa0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	2240      	movs	r2, #64	@ 0x40
 8011aaa:	5c9b      	ldrb	r3, [r3, r2]
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d101      	bne.n	8011ab4 <I2C_Slave_ISR_DMA+0x24>
 8011ab0:	2302      	movs	r3, #2
 8011ab2:	e0cd      	b.n	8011c50 <I2C_Slave_ISR_DMA+0x1c0>
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	2240      	movs	r2, #64	@ 0x40
 8011ab8:	2101      	movs	r1, #1
 8011aba:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	2220      	movs	r2, #32
 8011ac0:	4013      	ands	r3, r2
 8011ac2:	d009      	beq.n	8011ad8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2220      	movs	r2, #32
 8011ac8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011aca:	d005      	beq.n	8011ad8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8011acc:	68ba      	ldr	r2, [r7, #8]
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	0011      	movs	r1, r2
 8011ad2:	0018      	movs	r0, r3
 8011ad4:	f000 fada 	bl	801208c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	2210      	movs	r2, #16
 8011adc:	4013      	ands	r3, r2
 8011ade:	d100      	bne.n	8011ae2 <I2C_Slave_ISR_DMA+0x52>
 8011ae0:	e0a3      	b.n	8011c2a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2210      	movs	r2, #16
 8011ae6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011ae8:	d100      	bne.n	8011aec <I2C_Slave_ISR_DMA+0x5c>
 8011aea:	e09e      	b.n	8011c2a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011aec:	687a      	ldr	r2, [r7, #4]
 8011aee:	2380      	movs	r3, #128	@ 0x80
 8011af0:	01db      	lsls	r3, r3, #7
 8011af2:	4013      	ands	r3, r2
 8011af4:	d105      	bne.n	8011b02 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	2380      	movs	r3, #128	@ 0x80
 8011afa:	021b      	lsls	r3, r3, #8
 8011afc:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011afe:	d100      	bne.n	8011b02 <I2C_Slave_ISR_DMA+0x72>
 8011b00:	e08c      	b.n	8011c1c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d00c      	beq.n	8011b24 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8011b0a:	687a      	ldr	r2, [r7, #4]
 8011b0c:	2380      	movs	r3, #128	@ 0x80
 8011b0e:	021b      	lsls	r3, r3, #8
 8011b10:	4013      	ands	r3, r2
 8011b12:	d007      	beq.n	8011b24 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d101      	bne.n	8011b24 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011b20:	2301      	movs	r3, #1
 8011b22:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d00c      	beq.n	8011b46 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	2380      	movs	r3, #128	@ 0x80
 8011b30:	01db      	lsls	r3, r3, #7
 8011b32:	4013      	ands	r3, r2
 8011b34:	d007      	beq.n	8011b46 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d101      	bne.n	8011b46 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8011b42:	2301      	movs	r3, #1
 8011b44:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8011b46:	69fb      	ldr	r3, [r7, #28]
 8011b48:	2b01      	cmp	r3, #1
 8011b4a:	d12d      	bne.n	8011ba8 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	2241      	movs	r2, #65	@ 0x41
 8011b50:	5c9b      	ldrb	r3, [r3, r2]
 8011b52:	b2db      	uxtb	r3, r3
 8011b54:	2b28      	cmp	r3, #40	@ 0x28
 8011b56:	d10b      	bne.n	8011b70 <I2C_Slave_ISR_DMA+0xe0>
 8011b58:	69ba      	ldr	r2, [r7, #24]
 8011b5a:	2380      	movs	r3, #128	@ 0x80
 8011b5c:	049b      	lsls	r3, r3, #18
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d106      	bne.n	8011b70 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8011b62:	68ba      	ldr	r2, [r7, #8]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	0011      	movs	r1, r2
 8011b68:	0018      	movs	r0, r3
 8011b6a:	f000 fbaf 	bl	80122cc <I2C_ITListenCplt>
 8011b6e:	e054      	b.n	8011c1a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	2241      	movs	r2, #65	@ 0x41
 8011b74:	5c9b      	ldrb	r3, [r3, r2]
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	2b29      	cmp	r3, #41	@ 0x29
 8011b7a:	d110      	bne.n	8011b9e <I2C_Slave_ISR_DMA+0x10e>
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	4a36      	ldr	r2, [pc, #216]	@ (8011c58 <I2C_Slave_ISR_DMA+0x1c8>)
 8011b80:	4293      	cmp	r3, r2
 8011b82:	d00c      	beq.n	8011b9e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	2210      	movs	r2, #16
 8011b8a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	0018      	movs	r0, r3
 8011b90:	f000 fd1f 	bl	80125d2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	0018      	movs	r0, r3
 8011b98:	f000 f946 	bl	8011e28 <I2C_ITSlaveSeqCplt>
 8011b9c:	e03d      	b.n	8011c1a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	2210      	movs	r2, #16
 8011ba4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8011ba6:	e03e      	b.n	8011c26 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2210      	movs	r2, #16
 8011bae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011bb4:	2204      	movs	r2, #4
 8011bb6:	431a      	orrs	r2, r3
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8011bbc:	2317      	movs	r3, #23
 8011bbe:	18fb      	adds	r3, r7, r3
 8011bc0:	68fa      	ldr	r2, [r7, #12]
 8011bc2:	2141      	movs	r1, #65	@ 0x41
 8011bc4:	5c52      	ldrb	r2, [r2, r1]
 8011bc6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8011bc8:	69bb      	ldr	r3, [r7, #24]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d004      	beq.n	8011bd8 <I2C_Slave_ISR_DMA+0x148>
 8011bce:	69ba      	ldr	r2, [r7, #24]
 8011bd0:	2380      	movs	r3, #128	@ 0x80
 8011bd2:	045b      	lsls	r3, r3, #17
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d126      	bne.n	8011c26 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011bd8:	2217      	movs	r2, #23
 8011bda:	18bb      	adds	r3, r7, r2
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	2b21      	cmp	r3, #33	@ 0x21
 8011be0:	d003      	beq.n	8011bea <I2C_Slave_ISR_DMA+0x15a>
 8011be2:	18bb      	adds	r3, r7, r2
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	2b29      	cmp	r3, #41	@ 0x29
 8011be8:	d103      	bne.n	8011bf2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2221      	movs	r2, #33	@ 0x21
 8011bee:	631a      	str	r2, [r3, #48]	@ 0x30
 8011bf0:	e00b      	b.n	8011c0a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011bf2:	2217      	movs	r2, #23
 8011bf4:	18bb      	adds	r3, r7, r2
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	2b22      	cmp	r3, #34	@ 0x22
 8011bfa:	d003      	beq.n	8011c04 <I2C_Slave_ISR_DMA+0x174>
 8011bfc:	18bb      	adds	r3, r7, r2
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c02:	d102      	bne.n	8011c0a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	2222      	movs	r2, #34	@ 0x22
 8011c08:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	0011      	movs	r1, r2
 8011c12:	0018      	movs	r0, r3
 8011c14:	f000 fbb2 	bl	801237c <I2C_ITError>
      if (treatdmanack == 1U)
 8011c18:	e005      	b.n	8011c26 <I2C_Slave_ISR_DMA+0x196>
 8011c1a:	e004      	b.n	8011c26 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2210      	movs	r2, #16
 8011c22:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011c24:	e00f      	b.n	8011c46 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8011c26:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011c28:	e00d      	b.n	8011c46 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	2208      	movs	r2, #8
 8011c2e:	4013      	ands	r3, r2
 8011c30:	d009      	beq.n	8011c46 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2208      	movs	r2, #8
 8011c36:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011c38:	d005      	beq.n	8011c46 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8011c3a:	68ba      	ldr	r2, [r7, #8]
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	0011      	movs	r1, r2
 8011c40:	0018      	movs	r0, r3
 8011c42:	f000 f80b 	bl	8011c5c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2240      	movs	r2, #64	@ 0x40
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011c4e:	2300      	movs	r3, #0
}
 8011c50:	0018      	movs	r0, r3
 8011c52:	46bd      	mov	sp, r7
 8011c54:	b008      	add	sp, #32
 8011c56:	bd80      	pop	{r7, pc}
 8011c58:	ffff0000 	.word	0xffff0000

08011c5c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011c5c:	b5b0      	push	{r4, r5, r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2241      	movs	r2, #65	@ 0x41
 8011c6a:	5c9b      	ldrb	r3, [r3, r2]
 8011c6c:	b2db      	uxtb	r3, r3
 8011c6e:	001a      	movs	r2, r3
 8011c70:	2328      	movs	r3, #40	@ 0x28
 8011c72:	4013      	ands	r3, r2
 8011c74:	2b28      	cmp	r3, #40	@ 0x28
 8011c76:	d000      	beq.n	8011c7a <I2C_ITAddrCplt+0x1e>
 8011c78:	e088      	b.n	8011d8c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	699b      	ldr	r3, [r3, #24]
 8011c80:	0c1b      	lsrs	r3, r3, #16
 8011c82:	b2da      	uxtb	r2, r3
 8011c84:	250f      	movs	r5, #15
 8011c86:	197b      	adds	r3, r7, r5
 8011c88:	2101      	movs	r1, #1
 8011c8a:	400a      	ands	r2, r1
 8011c8c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	699b      	ldr	r3, [r3, #24]
 8011c94:	0c1b      	lsrs	r3, r3, #16
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	200c      	movs	r0, #12
 8011c9a:	183b      	adds	r3, r7, r0
 8011c9c:	21fe      	movs	r1, #254	@ 0xfe
 8011c9e:	400a      	ands	r2, r1
 8011ca0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	689b      	ldr	r3, [r3, #8]
 8011ca8:	b29a      	uxth	r2, r3
 8011caa:	240a      	movs	r4, #10
 8011cac:	193b      	adds	r3, r7, r4
 8011cae:	0592      	lsls	r2, r2, #22
 8011cb0:	0d92      	lsrs	r2, r2, #22
 8011cb2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	2308      	movs	r3, #8
 8011cbe:	18fb      	adds	r3, r7, r3
 8011cc0:	21fe      	movs	r1, #254	@ 0xfe
 8011cc2:	400a      	ands	r2, r1
 8011cc4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	2b02      	cmp	r3, #2
 8011ccc:	d148      	bne.n	8011d60 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8011cce:	0021      	movs	r1, r4
 8011cd0:	187b      	adds	r3, r7, r1
 8011cd2:	881b      	ldrh	r3, [r3, #0]
 8011cd4:	09db      	lsrs	r3, r3, #7
 8011cd6:	b29a      	uxth	r2, r3
 8011cd8:	183b      	adds	r3, r7, r0
 8011cda:	881b      	ldrh	r3, [r3, #0]
 8011cdc:	4053      	eors	r3, r2
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	001a      	movs	r2, r3
 8011ce2:	2306      	movs	r3, #6
 8011ce4:	4013      	ands	r3, r2
 8011ce6:	d120      	bne.n	8011d2a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8011ce8:	183b      	adds	r3, r7, r0
 8011cea:	187a      	adds	r2, r7, r1
 8011cec:	8812      	ldrh	r2, [r2, #0]
 8011cee:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011cf4:	1c5a      	adds	r2, r3, #1
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011cfe:	2b02      	cmp	r3, #2
 8011d00:	d14c      	bne.n	8011d9c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	2208      	movs	r2, #8
 8011d0e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2240      	movs	r2, #64	@ 0x40
 8011d14:	2100      	movs	r1, #0
 8011d16:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011d18:	183b      	adds	r3, r7, r0
 8011d1a:	881a      	ldrh	r2, [r3, #0]
 8011d1c:	197b      	adds	r3, r7, r5
 8011d1e:	7819      	ldrb	r1, [r3, #0]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	0018      	movs	r0, r3
 8011d24:	f7ff fa39 	bl	801119a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011d28:	e038      	b.n	8011d9c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8011d2a:	240c      	movs	r4, #12
 8011d2c:	193b      	adds	r3, r7, r4
 8011d2e:	2208      	movs	r2, #8
 8011d30:	18ba      	adds	r2, r7, r2
 8011d32:	8812      	ldrh	r2, [r2, #0]
 8011d34:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011d36:	2380      	movs	r3, #128	@ 0x80
 8011d38:	021a      	lsls	r2, r3, #8
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	0011      	movs	r1, r2
 8011d3e:	0018      	movs	r0, r3
 8011d40:	f001 f85c 	bl	8012dfc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2240      	movs	r2, #64	@ 0x40
 8011d48:	2100      	movs	r1, #0
 8011d4a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011d4c:	193b      	adds	r3, r7, r4
 8011d4e:	881a      	ldrh	r2, [r3, #0]
 8011d50:	230f      	movs	r3, #15
 8011d52:	18fb      	adds	r3, r7, r3
 8011d54:	7819      	ldrb	r1, [r3, #0]
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	0018      	movs	r0, r3
 8011d5a:	f7ff fa1e 	bl	801119a <HAL_I2C_AddrCallback>
}
 8011d5e:	e01d      	b.n	8011d9c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011d60:	2380      	movs	r3, #128	@ 0x80
 8011d62:	021a      	lsls	r2, r3, #8
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	0011      	movs	r1, r2
 8011d68:	0018      	movs	r0, r3
 8011d6a:	f001 f847 	bl	8012dfc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2240      	movs	r2, #64	@ 0x40
 8011d72:	2100      	movs	r1, #0
 8011d74:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011d76:	230c      	movs	r3, #12
 8011d78:	18fb      	adds	r3, r7, r3
 8011d7a:	881a      	ldrh	r2, [r3, #0]
 8011d7c:	230f      	movs	r3, #15
 8011d7e:	18fb      	adds	r3, r7, r3
 8011d80:	7819      	ldrb	r1, [r3, #0]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	0018      	movs	r0, r3
 8011d86:	f7ff fa08 	bl	801119a <HAL_I2C_AddrCallback>
}
 8011d8a:	e007      	b.n	8011d9c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	2208      	movs	r2, #8
 8011d92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2240      	movs	r2, #64	@ 0x40
 8011d98:	2100      	movs	r1, #0
 8011d9a:	5499      	strb	r1, [r3, r2]
}
 8011d9c:	46c0      	nop			@ (mov r8, r8)
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	b004      	add	sp, #16
 8011da2:	bdb0      	pop	{r4, r5, r7, pc}

08011da4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2242      	movs	r2, #66	@ 0x42
 8011db0:	2100      	movs	r1, #0
 8011db2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2241      	movs	r2, #65	@ 0x41
 8011db8:	5c9b      	ldrb	r3, [r3, r2]
 8011dba:	b2db      	uxtb	r3, r3
 8011dbc:	2b21      	cmp	r3, #33	@ 0x21
 8011dbe:	d117      	bne.n	8011df0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2241      	movs	r2, #65	@ 0x41
 8011dc4:	2120      	movs	r1, #32
 8011dc6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2211      	movs	r2, #17
 8011dcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2101      	movs	r1, #1
 8011dd8:	0018      	movs	r0, r3
 8011dda:	f001 f80f 	bl	8012dfc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2240      	movs	r2, #64	@ 0x40
 8011de2:	2100      	movs	r1, #0
 8011de4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	0018      	movs	r0, r3
 8011dea:	f7ff f9b6 	bl	801115a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011dee:	e016      	b.n	8011e1e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2241      	movs	r2, #65	@ 0x41
 8011df4:	2120      	movs	r1, #32
 8011df6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2212      	movs	r2, #18
 8011dfc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	2200      	movs	r2, #0
 8011e02:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2102      	movs	r1, #2
 8011e08:	0018      	movs	r0, r3
 8011e0a:	f000 fff7 	bl	8012dfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2240      	movs	r2, #64	@ 0x40
 8011e12:	2100      	movs	r1, #0
 8011e14:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	0018      	movs	r0, r3
 8011e1a:	f7ff f9a6 	bl	801116a <HAL_I2C_MasterRxCpltCallback>
}
 8011e1e:	46c0      	nop			@ (mov r8, r8)
 8011e20:	46bd      	mov	sp, r7
 8011e22:	b002      	add	sp, #8
 8011e24:	bd80      	pop	{r7, pc}
	...

08011e28 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b084      	sub	sp, #16
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2242      	movs	r2, #66	@ 0x42
 8011e3c:	2100      	movs	r1, #0
 8011e3e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011e40:	68fa      	ldr	r2, [r7, #12]
 8011e42:	2380      	movs	r3, #128	@ 0x80
 8011e44:	01db      	lsls	r3, r3, #7
 8011e46:	4013      	ands	r3, r2
 8011e48:	d008      	beq.n	8011e5c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	4924      	ldr	r1, [pc, #144]	@ (8011ee8 <I2C_ITSlaveSeqCplt+0xc0>)
 8011e56:	400a      	ands	r2, r1
 8011e58:	601a      	str	r2, [r3, #0]
 8011e5a:	e00c      	b.n	8011e76 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011e5c:	68fa      	ldr	r2, [r7, #12]
 8011e5e:	2380      	movs	r3, #128	@ 0x80
 8011e60:	021b      	lsls	r3, r3, #8
 8011e62:	4013      	ands	r3, r2
 8011e64:	d007      	beq.n	8011e76 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	681a      	ldr	r2, [r3, #0]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	491e      	ldr	r1, [pc, #120]	@ (8011eec <I2C_ITSlaveSeqCplt+0xc4>)
 8011e72:	400a      	ands	r2, r1
 8011e74:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2241      	movs	r2, #65	@ 0x41
 8011e7a:	5c9b      	ldrb	r3, [r3, r2]
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	2b29      	cmp	r3, #41	@ 0x29
 8011e80:	d114      	bne.n	8011eac <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2241      	movs	r2, #65	@ 0x41
 8011e86:	2128      	movs	r1, #40	@ 0x28
 8011e88:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	2221      	movs	r2, #33	@ 0x21
 8011e8e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2101      	movs	r1, #1
 8011e94:	0018      	movs	r0, r3
 8011e96:	f000 ffb1 	bl	8012dfc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2240      	movs	r2, #64	@ 0x40
 8011e9e:	2100      	movs	r1, #0
 8011ea0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	0018      	movs	r0, r3
 8011ea6:	f7ff f968 	bl	801117a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011eaa:	e019      	b.n	8011ee0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2241      	movs	r2, #65	@ 0x41
 8011eb0:	5c9b      	ldrb	r3, [r3, r2]
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011eb6:	d113      	bne.n	8011ee0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2241      	movs	r2, #65	@ 0x41
 8011ebc:	2128      	movs	r1, #40	@ 0x28
 8011ebe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2222      	movs	r2, #34	@ 0x22
 8011ec4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2102      	movs	r1, #2
 8011eca:	0018      	movs	r0, r3
 8011ecc:	f000 ff96 	bl	8012dfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2240      	movs	r2, #64	@ 0x40
 8011ed4:	2100      	movs	r1, #0
 8011ed6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	0018      	movs	r0, r3
 8011edc:	f7ff f955 	bl	801118a <HAL_I2C_SlaveRxCpltCallback>
}
 8011ee0:	46c0      	nop			@ (mov r8, r8)
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	b004      	add	sp, #16
 8011ee6:	bd80      	pop	{r7, pc}
 8011ee8:	ffffbfff 	.word	0xffffbfff
 8011eec:	ffff7fff 	.word	0xffff7fff

08011ef0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b086      	sub	sp, #24
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
 8011ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2220      	movs	r2, #32
 8011f04:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2241      	movs	r2, #65	@ 0x41
 8011f0a:	5c9b      	ldrb	r3, [r3, r2]
 8011f0c:	b2db      	uxtb	r3, r3
 8011f0e:	2b21      	cmp	r3, #33	@ 0x21
 8011f10:	d108      	bne.n	8011f24 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2101      	movs	r1, #1
 8011f16:	0018      	movs	r0, r3
 8011f18:	f000 ff70 	bl	8012dfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2211      	movs	r2, #17
 8011f20:	631a      	str	r2, [r3, #48]	@ 0x30
 8011f22:	e00d      	b.n	8011f40 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2241      	movs	r2, #65	@ 0x41
 8011f28:	5c9b      	ldrb	r3, [r3, r2]
 8011f2a:	b2db      	uxtb	r3, r3
 8011f2c:	2b22      	cmp	r3, #34	@ 0x22
 8011f2e:	d107      	bne.n	8011f40 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2102      	movs	r1, #2
 8011f34:	0018      	movs	r0, r3
 8011f36:	f000 ff61 	bl	8012dfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2212      	movs	r2, #18
 8011f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	685a      	ldr	r2, [r3, #4]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	494e      	ldr	r1, [pc, #312]	@ (8012084 <I2C_ITMasterCplt+0x194>)
 8011f4c:	400a      	ands	r2, r1
 8011f4e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2200      	movs	r2, #0
 8011f54:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	4a4b      	ldr	r2, [pc, #300]	@ (8012088 <I2C_ITMasterCplt+0x198>)
 8011f5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	2210      	movs	r2, #16
 8011f60:	4013      	ands	r3, r2
 8011f62:	d009      	beq.n	8011f78 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2210      	movs	r2, #16
 8011f6a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f70:	2204      	movs	r2, #4
 8011f72:	431a      	orrs	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2241      	movs	r2, #65	@ 0x41
 8011f7c:	5c9b      	ldrb	r3, [r3, r2]
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	2b60      	cmp	r3, #96	@ 0x60
 8011f82:	d109      	bne.n	8011f98 <I2C_ITMasterCplt+0xa8>
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	2204      	movs	r2, #4
 8011f88:	4013      	ands	r3, r2
 8011f8a:	d005      	beq.n	8011f98 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f92:	b2db      	uxtb	r3, r3
 8011f94:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011f96:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	0018      	movs	r0, r3
 8011f9c:	f000 fb19 	bl	80125d2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011fa4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2241      	movs	r2, #65	@ 0x41
 8011faa:	5c9b      	ldrb	r3, [r3, r2]
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	2b60      	cmp	r3, #96	@ 0x60
 8011fb0:	d002      	beq.n	8011fb8 <I2C_ITMasterCplt+0xc8>
 8011fb2:	693b      	ldr	r3, [r7, #16]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d007      	beq.n	8011fc8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	0011      	movs	r1, r2
 8011fc0:	0018      	movs	r0, r3
 8011fc2:	f000 f9db 	bl	801237c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011fc6:	e058      	b.n	801207a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2241      	movs	r2, #65	@ 0x41
 8011fcc:	5c9b      	ldrb	r3, [r3, r2]
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	2b21      	cmp	r3, #33	@ 0x21
 8011fd2:	d126      	bne.n	8012022 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2241      	movs	r2, #65	@ 0x41
 8011fd8:	2120      	movs	r1, #32
 8011fda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2242      	movs	r2, #66	@ 0x42
 8011fe6:	5c9b      	ldrb	r3, [r3, r2]
 8011fe8:	b2db      	uxtb	r3, r3
 8011fea:	2b40      	cmp	r3, #64	@ 0x40
 8011fec:	d10c      	bne.n	8012008 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2242      	movs	r2, #66	@ 0x42
 8011ff2:	2100      	movs	r1, #0
 8011ff4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2240      	movs	r2, #64	@ 0x40
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	0018      	movs	r0, r3
 8012002:	f7ff f8e2 	bl	80111ca <HAL_I2C_MemTxCpltCallback>
}
 8012006:	e038      	b.n	801207a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2242      	movs	r2, #66	@ 0x42
 801200c:	2100      	movs	r1, #0
 801200e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2240      	movs	r2, #64	@ 0x40
 8012014:	2100      	movs	r1, #0
 8012016:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	0018      	movs	r0, r3
 801201c:	f7ff f89d 	bl	801115a <HAL_I2C_MasterTxCpltCallback>
}
 8012020:	e02b      	b.n	801207a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2241      	movs	r2, #65	@ 0x41
 8012026:	5c9b      	ldrb	r3, [r3, r2]
 8012028:	b2db      	uxtb	r3, r3
 801202a:	2b22      	cmp	r3, #34	@ 0x22
 801202c:	d125      	bne.n	801207a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2241      	movs	r2, #65	@ 0x41
 8012032:	2120      	movs	r1, #32
 8012034:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2200      	movs	r2, #0
 801203a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2242      	movs	r2, #66	@ 0x42
 8012040:	5c9b      	ldrb	r3, [r3, r2]
 8012042:	b2db      	uxtb	r3, r3
 8012044:	2b40      	cmp	r3, #64	@ 0x40
 8012046:	d10c      	bne.n	8012062 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2242      	movs	r2, #66	@ 0x42
 801204c:	2100      	movs	r1, #0
 801204e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2240      	movs	r2, #64	@ 0x40
 8012054:	2100      	movs	r1, #0
 8012056:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	0018      	movs	r0, r3
 801205c:	f7ff f8bd 	bl	80111da <HAL_I2C_MemRxCpltCallback>
}
 8012060:	e00b      	b.n	801207a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2242      	movs	r2, #66	@ 0x42
 8012066:	2100      	movs	r1, #0
 8012068:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2240      	movs	r2, #64	@ 0x40
 801206e:	2100      	movs	r1, #0
 8012070:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	0018      	movs	r0, r3
 8012076:	f7ff f878 	bl	801116a <HAL_I2C_MasterRxCpltCallback>
}
 801207a:	46c0      	nop			@ (mov r8, r8)
 801207c:	46bd      	mov	sp, r7
 801207e:	b006      	add	sp, #24
 8012080:	bd80      	pop	{r7, pc}
 8012082:	46c0      	nop			@ (mov r8, r8)
 8012084:	fe00e800 	.word	0xfe00e800
 8012088:	ffff0000 	.word	0xffff0000

0801208c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b086      	sub	sp, #24
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80120a2:	200f      	movs	r0, #15
 80120a4:	183b      	adds	r3, r7, r0
 80120a6:	687a      	ldr	r2, [r7, #4]
 80120a8:	2141      	movs	r1, #65	@ 0x41
 80120aa:	5c52      	ldrb	r2, [r2, r1]
 80120ac:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	2220      	movs	r2, #32
 80120b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80120b6:	183b      	adds	r3, r7, r0
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	2b21      	cmp	r3, #33	@ 0x21
 80120bc:	d003      	beq.n	80120c6 <I2C_ITSlaveCplt+0x3a>
 80120be:	183b      	adds	r3, r7, r0
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	2b29      	cmp	r3, #41	@ 0x29
 80120c4:	d109      	bne.n	80120da <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80120c6:	4a7b      	ldr	r2, [pc, #492]	@ (80122b4 <I2C_ITSlaveCplt+0x228>)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	0011      	movs	r1, r2
 80120cc:	0018      	movs	r0, r3
 80120ce:	f000 fe95 	bl	8012dfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2221      	movs	r2, #33	@ 0x21
 80120d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80120d8:	e011      	b.n	80120fe <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80120da:	220f      	movs	r2, #15
 80120dc:	18bb      	adds	r3, r7, r2
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	2b22      	cmp	r3, #34	@ 0x22
 80120e2:	d003      	beq.n	80120ec <I2C_ITSlaveCplt+0x60>
 80120e4:	18bb      	adds	r3, r7, r2
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80120ea:	d108      	bne.n	80120fe <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80120ec:	4a72      	ldr	r2, [pc, #456]	@ (80122b8 <I2C_ITSlaveCplt+0x22c>)
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	0011      	movs	r1, r2
 80120f2:	0018      	movs	r0, r3
 80120f4:	f000 fe82 	bl	8012dfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2222      	movs	r2, #34	@ 0x22
 80120fc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	685a      	ldr	r2, [r3, #4]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2180      	movs	r1, #128	@ 0x80
 801210a:	0209      	lsls	r1, r1, #8
 801210c:	430a      	orrs	r2, r1
 801210e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	685a      	ldr	r2, [r3, #4]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	4968      	ldr	r1, [pc, #416]	@ (80122bc <I2C_ITSlaveCplt+0x230>)
 801211c:	400a      	ands	r2, r1
 801211e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	0018      	movs	r0, r3
 8012124:	f000 fa55 	bl	80125d2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8012128:	693a      	ldr	r2, [r7, #16]
 801212a:	2380      	movs	r3, #128	@ 0x80
 801212c:	01db      	lsls	r3, r3, #7
 801212e:	4013      	ands	r3, r2
 8012130:	d013      	beq.n	801215a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	681a      	ldr	r2, [r3, #0]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	4960      	ldr	r1, [pc, #384]	@ (80122c0 <I2C_ITSlaveCplt+0x234>)
 801213e:	400a      	ands	r2, r1
 8012140:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012146:	2b00      	cmp	r3, #0
 8012148:	d01f      	beq.n	801218a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	685b      	ldr	r3, [r3, #4]
 8012152:	b29a      	uxth	r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012158:	e017      	b.n	801218a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801215a:	693a      	ldr	r2, [r7, #16]
 801215c:	2380      	movs	r3, #128	@ 0x80
 801215e:	021b      	lsls	r3, r3, #8
 8012160:	4013      	ands	r3, r2
 8012162:	d012      	beq.n	801218a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	4955      	ldr	r1, [pc, #340]	@ (80122c4 <I2C_ITSlaveCplt+0x238>)
 8012170:	400a      	ands	r2, r1
 8012172:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012178:	2b00      	cmp	r3, #0
 801217a:	d006      	beq.n	801218a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	b29a      	uxth	r2, r3
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	2204      	movs	r2, #4
 801218e:	4013      	ands	r3, r2
 8012190:	d020      	beq.n	80121d4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	2204      	movs	r2, #4
 8012196:	4393      	bics	r3, r2
 8012198:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121a4:	b2d2      	uxtb	r2, r2
 80121a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121ac:	1c5a      	adds	r2, r3, #1
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d00c      	beq.n	80121d4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121be:	3b01      	subs	r3, #1
 80121c0:	b29a      	uxth	r2, r3
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	3b01      	subs	r3, #1
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121d8:	b29b      	uxth	r3, r3
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d005      	beq.n	80121ea <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80121e2:	2204      	movs	r2, #4
 80121e4:	431a      	orrs	r2, r3
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2242      	movs	r2, #66	@ 0x42
 80121ee:	2100      	movs	r1, #0
 80121f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2200      	movs	r2, #0
 80121f6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d013      	beq.n	8012228 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	0011      	movs	r1, r2
 8012208:	0018      	movs	r0, r3
 801220a:	f000 f8b7 	bl	801237c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2241      	movs	r2, #65	@ 0x41
 8012212:	5c9b      	ldrb	r3, [r3, r2]
 8012214:	b2db      	uxtb	r3, r3
 8012216:	2b28      	cmp	r3, #40	@ 0x28
 8012218:	d147      	bne.n	80122aa <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 801221a:	697a      	ldr	r2, [r7, #20]
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	0011      	movs	r1, r2
 8012220:	0018      	movs	r0, r3
 8012222:	f000 f853 	bl	80122cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012226:	e040      	b.n	80122aa <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801222c:	4a26      	ldr	r2, [pc, #152]	@ (80122c8 <I2C_ITSlaveCplt+0x23c>)
 801222e:	4293      	cmp	r3, r2
 8012230:	d016      	beq.n	8012260 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	0018      	movs	r0, r3
 8012236:	f7ff fdf7 	bl	8011e28 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	4a22      	ldr	r2, [pc, #136]	@ (80122c8 <I2C_ITSlaveCplt+0x23c>)
 801223e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2241      	movs	r2, #65	@ 0x41
 8012244:	2120      	movs	r1, #32
 8012246:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2200      	movs	r2, #0
 801224c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2240      	movs	r2, #64	@ 0x40
 8012252:	2100      	movs	r1, #0
 8012254:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	0018      	movs	r0, r3
 801225a:	f7fe ffae 	bl	80111ba <HAL_I2C_ListenCpltCallback>
}
 801225e:	e024      	b.n	80122aa <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2241      	movs	r2, #65	@ 0x41
 8012264:	5c9b      	ldrb	r3, [r3, r2]
 8012266:	b2db      	uxtb	r3, r3
 8012268:	2b22      	cmp	r3, #34	@ 0x22
 801226a:	d10f      	bne.n	801228c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2241      	movs	r2, #65	@ 0x41
 8012270:	2120      	movs	r1, #32
 8012272:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2200      	movs	r2, #0
 8012278:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2240      	movs	r2, #64	@ 0x40
 801227e:	2100      	movs	r1, #0
 8012280:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	0018      	movs	r0, r3
 8012286:	f7fe ff80 	bl	801118a <HAL_I2C_SlaveRxCpltCallback>
}
 801228a:	e00e      	b.n	80122aa <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2241      	movs	r2, #65	@ 0x41
 8012290:	2120      	movs	r1, #32
 8012292:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2200      	movs	r2, #0
 8012298:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	2240      	movs	r2, #64	@ 0x40
 801229e:	2100      	movs	r1, #0
 80122a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	0018      	movs	r0, r3
 80122a6:	f7fe ff68 	bl	801117a <HAL_I2C_SlaveTxCpltCallback>
}
 80122aa:	46c0      	nop			@ (mov r8, r8)
 80122ac:	46bd      	mov	sp, r7
 80122ae:	b006      	add	sp, #24
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	46c0      	nop			@ (mov r8, r8)
 80122b4:	00008001 	.word	0x00008001
 80122b8:	00008002 	.word	0x00008002
 80122bc:	fe00e800 	.word	0xfe00e800
 80122c0:	ffffbfff 	.word	0xffffbfff
 80122c4:	ffff7fff 	.word	0xffff7fff
 80122c8:	ffff0000 	.word	0xffff0000

080122cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b082      	sub	sp, #8
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4a26      	ldr	r2, [pc, #152]	@ (8012374 <I2C_ITListenCplt+0xa8>)
 80122da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2200      	movs	r2, #0
 80122e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2241      	movs	r2, #65	@ 0x41
 80122e6:	2120      	movs	r1, #32
 80122e8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2242      	movs	r2, #66	@ 0x42
 80122ee:	2100      	movs	r1, #0
 80122f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2200      	movs	r2, #0
 80122f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	2204      	movs	r2, #4
 80122fc:	4013      	ands	r3, r2
 80122fe:	d022      	beq.n	8012346 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801230a:	b2d2      	uxtb	r2, r2
 801230c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012312:	1c5a      	adds	r2, r3, #1
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801231c:	2b00      	cmp	r3, #0
 801231e:	d012      	beq.n	8012346 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012324:	3b01      	subs	r3, #1
 8012326:	b29a      	uxth	r2, r3
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012330:	b29b      	uxth	r3, r3
 8012332:	3b01      	subs	r3, #1
 8012334:	b29a      	uxth	r2, r3
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801233e:	2204      	movs	r2, #4
 8012340:	431a      	orrs	r2, r3
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8012346:	4a0c      	ldr	r2, [pc, #48]	@ (8012378 <I2C_ITListenCplt+0xac>)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	0011      	movs	r1, r2
 801234c:	0018      	movs	r0, r3
 801234e:	f000 fd55 	bl	8012dfc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	2210      	movs	r2, #16
 8012358:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2240      	movs	r2, #64	@ 0x40
 801235e:	2100      	movs	r1, #0
 8012360:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	0018      	movs	r0, r3
 8012366:	f7fe ff28 	bl	80111ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801236a:	46c0      	nop			@ (mov r8, r8)
 801236c:	46bd      	mov	sp, r7
 801236e:	b002      	add	sp, #8
 8012370:	bd80      	pop	{r7, pc}
 8012372:	46c0      	nop			@ (mov r8, r8)
 8012374:	ffff0000 	.word	0xffff0000
 8012378:	00008003 	.word	0x00008003

0801237c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b084      	sub	sp, #16
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8012386:	200f      	movs	r0, #15
 8012388:	183b      	adds	r3, r7, r0
 801238a:	687a      	ldr	r2, [r7, #4]
 801238c:	2141      	movs	r1, #65	@ 0x41
 801238e:	5c52      	ldrb	r2, [r2, r1]
 8012390:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2242      	movs	r2, #66	@ 0x42
 8012396:	2100      	movs	r1, #0
 8012398:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	4a72      	ldr	r2, [pc, #456]	@ (8012568 <I2C_ITError+0x1ec>)
 801239e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2200      	movs	r2, #0
 80123a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	431a      	orrs	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80123b2:	183b      	adds	r3, r7, r0
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	2b28      	cmp	r3, #40	@ 0x28
 80123b8:	d007      	beq.n	80123ca <I2C_ITError+0x4e>
 80123ba:	183b      	adds	r3, r7, r0
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	2b29      	cmp	r3, #41	@ 0x29
 80123c0:	d003      	beq.n	80123ca <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80123c2:	183b      	adds	r3, r7, r0
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80123c8:	d10c      	bne.n	80123e4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2103      	movs	r1, #3
 80123ce:	0018      	movs	r0, r3
 80123d0:	f000 fd14 	bl	8012dfc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2241      	movs	r2, #65	@ 0x41
 80123d8:	2128      	movs	r1, #40	@ 0x28
 80123da:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	4a63      	ldr	r2, [pc, #396]	@ (801256c <I2C_ITError+0x1f0>)
 80123e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80123e2:	e032      	b.n	801244a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80123e4:	4a62      	ldr	r2, [pc, #392]	@ (8012570 <I2C_ITError+0x1f4>)
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	0011      	movs	r1, r2
 80123ea:	0018      	movs	r0, r3
 80123ec:	f000 fd06 	bl	8012dfc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	0018      	movs	r0, r3
 80123f4:	f000 f8ed 	bl	80125d2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2241      	movs	r2, #65	@ 0x41
 80123fc:	5c9b      	ldrb	r3, [r3, r2]
 80123fe:	b2db      	uxtb	r3, r3
 8012400:	2b60      	cmp	r3, #96	@ 0x60
 8012402:	d01f      	beq.n	8012444 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2241      	movs	r2, #65	@ 0x41
 8012408:	2120      	movs	r1, #32
 801240a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	699b      	ldr	r3, [r3, #24]
 8012412:	2220      	movs	r2, #32
 8012414:	4013      	ands	r3, r2
 8012416:	2b20      	cmp	r3, #32
 8012418:	d114      	bne.n	8012444 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	699b      	ldr	r3, [r3, #24]
 8012420:	2210      	movs	r2, #16
 8012422:	4013      	ands	r3, r2
 8012424:	2b10      	cmp	r3, #16
 8012426:	d109      	bne.n	801243c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2210      	movs	r2, #16
 801242e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012434:	2204      	movs	r2, #4
 8012436:	431a      	orrs	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	2220      	movs	r2, #32
 8012442:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2200      	movs	r2, #0
 8012448:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801244e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012454:	2b00      	cmp	r3, #0
 8012456:	d03b      	beq.n	80124d0 <I2C_ITError+0x154>
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	2b11      	cmp	r3, #17
 801245c:	d002      	beq.n	8012464 <I2C_ITError+0xe8>
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	2b21      	cmp	r3, #33	@ 0x21
 8012462:	d135      	bne.n	80124d0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	2380      	movs	r3, #128	@ 0x80
 801246c:	01db      	lsls	r3, r3, #7
 801246e:	401a      	ands	r2, r3
 8012470:	2380      	movs	r3, #128	@ 0x80
 8012472:	01db      	lsls	r3, r3, #7
 8012474:	429a      	cmp	r2, r3
 8012476:	d107      	bne.n	8012488 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	493c      	ldr	r1, [pc, #240]	@ (8012574 <I2C_ITError+0x1f8>)
 8012484:	400a      	ands	r2, r1
 8012486:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801248c:	0018      	movs	r0, r3
 801248e:	f7fd fd62 	bl	800ff56 <HAL_DMA_GetState>
 8012492:	0003      	movs	r3, r0
 8012494:	2b01      	cmp	r3, #1
 8012496:	d016      	beq.n	80124c6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801249c:	4a36      	ldr	r2, [pc, #216]	@ (8012578 <I2C_ITError+0x1fc>)
 801249e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2240      	movs	r2, #64	@ 0x40
 80124a4:	2100      	movs	r1, #0
 80124a6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124ac:	0018      	movs	r0, r3
 80124ae:	f7fd fc5d 	bl	800fd6c <HAL_DMA_Abort_IT>
 80124b2:	1e03      	subs	r3, r0, #0
 80124b4:	d051      	beq.n	801255a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124c0:	0018      	movs	r0, r3
 80124c2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80124c4:	e049      	b.n	801255a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	0018      	movs	r0, r3
 80124ca:	f000 f859 	bl	8012580 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80124ce:	e044      	b.n	801255a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d03b      	beq.n	8012550 <I2C_ITError+0x1d4>
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	2b12      	cmp	r3, #18
 80124dc:	d002      	beq.n	80124e4 <I2C_ITError+0x168>
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	2b22      	cmp	r3, #34	@ 0x22
 80124e2:	d135      	bne.n	8012550 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	2380      	movs	r3, #128	@ 0x80
 80124ec:	021b      	lsls	r3, r3, #8
 80124ee:	401a      	ands	r2, r3
 80124f0:	2380      	movs	r3, #128	@ 0x80
 80124f2:	021b      	lsls	r3, r3, #8
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d107      	bne.n	8012508 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	681a      	ldr	r2, [r3, #0]
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	491e      	ldr	r1, [pc, #120]	@ (801257c <I2C_ITError+0x200>)
 8012504:	400a      	ands	r2, r1
 8012506:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801250c:	0018      	movs	r0, r3
 801250e:	f7fd fd22 	bl	800ff56 <HAL_DMA_GetState>
 8012512:	0003      	movs	r3, r0
 8012514:	2b01      	cmp	r3, #1
 8012516:	d016      	beq.n	8012546 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801251c:	4a16      	ldr	r2, [pc, #88]	@ (8012578 <I2C_ITError+0x1fc>)
 801251e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2240      	movs	r2, #64	@ 0x40
 8012524:	2100      	movs	r1, #0
 8012526:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801252c:	0018      	movs	r0, r3
 801252e:	f7fd fc1d 	bl	800fd6c <HAL_DMA_Abort_IT>
 8012532:	1e03      	subs	r3, r0, #0
 8012534:	d013      	beq.n	801255e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801253a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012540:	0018      	movs	r0, r3
 8012542:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012544:	e00b      	b.n	801255e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	0018      	movs	r0, r3
 801254a:	f000 f819 	bl	8012580 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801254e:	e006      	b.n	801255e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	0018      	movs	r0, r3
 8012554:	f000 f814 	bl	8012580 <I2C_TreatErrorCallback>
  }
}
 8012558:	e002      	b.n	8012560 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801255a:	46c0      	nop			@ (mov r8, r8)
 801255c:	e000      	b.n	8012560 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801255e:	46c0      	nop			@ (mov r8, r8)
}
 8012560:	46c0      	nop			@ (mov r8, r8)
 8012562:	46bd      	mov	sp, r7
 8012564:	b004      	add	sp, #16
 8012566:	bd80      	pop	{r7, pc}
 8012568:	ffff0000 	.word	0xffff0000
 801256c:	08011461 	.word	0x08011461
 8012570:	00008003 	.word	0x00008003
 8012574:	ffffbfff 	.word	0xffffbfff
 8012578:	0801278b 	.word	0x0801278b
 801257c:	ffff7fff 	.word	0xffff7fff

08012580 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b082      	sub	sp, #8
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2241      	movs	r2, #65	@ 0x41
 801258c:	5c9b      	ldrb	r3, [r3, r2]
 801258e:	b2db      	uxtb	r3, r3
 8012590:	2b60      	cmp	r3, #96	@ 0x60
 8012592:	d10f      	bne.n	80125b4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2241      	movs	r2, #65	@ 0x41
 8012598:	2120      	movs	r1, #32
 801259a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2200      	movs	r2, #0
 80125a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2240      	movs	r2, #64	@ 0x40
 80125a6:	2100      	movs	r1, #0
 80125a8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	0018      	movs	r0, r3
 80125ae:	f7fe fe24 	bl	80111fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80125b2:	e00a      	b.n	80125ca <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2200      	movs	r2, #0
 80125b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2240      	movs	r2, #64	@ 0x40
 80125be:	2100      	movs	r1, #0
 80125c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	0018      	movs	r0, r3
 80125c6:	f7fe fe10 	bl	80111ea <HAL_I2C_ErrorCallback>
}
 80125ca:	46c0      	nop			@ (mov r8, r8)
 80125cc:	46bd      	mov	sp, r7
 80125ce:	b002      	add	sp, #8
 80125d0:	bd80      	pop	{r7, pc}

080125d2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80125d2:	b580      	push	{r7, lr}
 80125d4:	b082      	sub	sp, #8
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	699b      	ldr	r3, [r3, #24]
 80125e0:	2202      	movs	r2, #2
 80125e2:	4013      	ands	r3, r2
 80125e4:	2b02      	cmp	r3, #2
 80125e6:	d103      	bne.n	80125f0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2200      	movs	r2, #0
 80125ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	699b      	ldr	r3, [r3, #24]
 80125f6:	2201      	movs	r2, #1
 80125f8:	4013      	ands	r3, r2
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	d007      	beq.n	801260e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	699a      	ldr	r2, [r3, #24]
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	2101      	movs	r1, #1
 801260a:	430a      	orrs	r2, r1
 801260c:	619a      	str	r2, [r3, #24]
  }
}
 801260e:	46c0      	nop			@ (mov r8, r8)
 8012610:	46bd      	mov	sp, r7
 8012612:	b002      	add	sp, #8
 8012614:	bd80      	pop	{r7, pc}
	...

08012618 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b084      	sub	sp, #16
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012624:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	681a      	ldr	r2, [r3, #0]
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4920      	ldr	r1, [pc, #128]	@ (80126b4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8012632:	400a      	ands	r2, r1
 8012634:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801263a:	b29b      	uxth	r3, r3
 801263c:	2b00      	cmp	r3, #0
 801263e:	d105      	bne.n	801264c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	2120      	movs	r1, #32
 8012644:	0018      	movs	r0, r3
 8012646:	f000 fb4b 	bl	8012ce0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801264a:	e02e      	b.n	80126aa <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012650:	68fa      	ldr	r2, [r7, #12]
 8012652:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8012654:	189a      	adds	r2, r3, r2
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801265e:	b29b      	uxth	r3, r3
 8012660:	2bff      	cmp	r3, #255	@ 0xff
 8012662:	d903      	bls.n	801266c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	22ff      	movs	r2, #255	@ 0xff
 8012668:	851a      	strh	r2, [r3, #40]	@ 0x28
 801266a:	e004      	b.n	8012676 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012670:	b29a      	uxth	r2, r3
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801267e:	0019      	movs	r1, r3
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	3328      	adds	r3, #40	@ 0x28
 8012686:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801268c:	f7fd fac8 	bl	800fc20 <HAL_DMA_Start_IT>
 8012690:	1e03      	subs	r3, r0, #0
 8012692:	d005      	beq.n	80126a0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2110      	movs	r1, #16
 8012698:	0018      	movs	r0, r3
 801269a:	f7ff fe6f 	bl	801237c <I2C_ITError>
}
 801269e:	e004      	b.n	80126aa <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	2140      	movs	r1, #64	@ 0x40
 80126a4:	0018      	movs	r0, r3
 80126a6:	f000 fb1b 	bl	8012ce0 <I2C_Enable_IRQ>
}
 80126aa:	46c0      	nop			@ (mov r8, r8)
 80126ac:	46bd      	mov	sp, r7
 80126ae:	b004      	add	sp, #16
 80126b0:	bd80      	pop	{r7, pc}
 80126b2:	46c0      	nop			@ (mov r8, r8)
 80126b4:	ffffbfff 	.word	0xffffbfff

080126b8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126c4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	4920      	ldr	r1, [pc, #128]	@ (8012754 <I2C_DMAMasterReceiveCplt+0x9c>)
 80126d2:	400a      	ands	r2, r1
 80126d4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80126da:	b29b      	uxth	r3, r3
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d105      	bne.n	80126ec <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	2120      	movs	r1, #32
 80126e4:	0018      	movs	r0, r3
 80126e6:	f000 fafb 	bl	8012ce0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80126ea:	e02e      	b.n	801274a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126f0:	68fa      	ldr	r2, [r7, #12]
 80126f2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80126f4:	189a      	adds	r2, r3, r2
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80126fe:	b29b      	uxth	r3, r3
 8012700:	2bff      	cmp	r3, #255	@ 0xff
 8012702:	d903      	bls.n	801270c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	22ff      	movs	r2, #255	@ 0xff
 8012708:	851a      	strh	r2, [r3, #40]	@ 0x28
 801270a:	e004      	b.n	8012716 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012710:	b29a      	uxth	r2, r3
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	3324      	adds	r3, #36	@ 0x24
 8012720:	0019      	movs	r1, r3
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012726:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801272c:	f7fd fa78 	bl	800fc20 <HAL_DMA_Start_IT>
 8012730:	1e03      	subs	r3, r0, #0
 8012732:	d005      	beq.n	8012740 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	2110      	movs	r1, #16
 8012738:	0018      	movs	r0, r3
 801273a:	f7ff fe1f 	bl	801237c <I2C_ITError>
}
 801273e:	e004      	b.n	801274a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2140      	movs	r1, #64	@ 0x40
 8012744:	0018      	movs	r0, r3
 8012746:	f000 facb 	bl	8012ce0 <I2C_Enable_IRQ>
}
 801274a:	46c0      	nop			@ (mov r8, r8)
 801274c:	46bd      	mov	sp, r7
 801274e:	b004      	add	sp, #16
 8012750:	bd80      	pop	{r7, pc}
 8012752:	46c0      	nop			@ (mov r8, r8)
 8012754:	ffff7fff 	.word	0xffff7fff

08012758 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b084      	sub	sp, #16
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012764:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	685a      	ldr	r2, [r3, #4]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2180      	movs	r1, #128	@ 0x80
 8012772:	0209      	lsls	r1, r1, #8
 8012774:	430a      	orrs	r2, r1
 8012776:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2110      	movs	r1, #16
 801277c:	0018      	movs	r0, r3
 801277e:	f7ff fdfd 	bl	801237c <I2C_ITError>
}
 8012782:	46c0      	nop			@ (mov r8, r8)
 8012784:	46bd      	mov	sp, r7
 8012786:	b004      	add	sp, #16
 8012788:	bd80      	pop	{r7, pc}

0801278a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801278a:	b580      	push	{r7, lr}
 801278c:	b084      	sub	sp, #16
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012796:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801279c:	2b00      	cmp	r3, #0
 801279e:	d003      	beq.n	80127a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127a4:	2200      	movs	r2, #0
 80127a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d003      	beq.n	80127b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127b4:	2200      	movs	r2, #0
 80127b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	0018      	movs	r0, r3
 80127bc:	f7ff fee0 	bl	8012580 <I2C_TreatErrorCallback>
}
 80127c0:	46c0      	nop			@ (mov r8, r8)
 80127c2:	46bd      	mov	sp, r7
 80127c4:	b004      	add	sp, #16
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	603b      	str	r3, [r7, #0]
 80127d4:	1dfb      	adds	r3, r7, #7
 80127d6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80127d8:	e030      	b.n	801283c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	3301      	adds	r3, #1
 80127de:	d02d      	beq.n	801283c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80127e0:	f7fc fccc 	bl	800f17c <HAL_GetTick>
 80127e4:	0002      	movs	r2, r0
 80127e6:	69bb      	ldr	r3, [r7, #24]
 80127e8:	1ad3      	subs	r3, r2, r3
 80127ea:	683a      	ldr	r2, [r7, #0]
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d302      	bcc.n	80127f6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d122      	bne.n	801283c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	699b      	ldr	r3, [r3, #24]
 80127fc:	68ba      	ldr	r2, [r7, #8]
 80127fe:	4013      	ands	r3, r2
 8012800:	68ba      	ldr	r2, [r7, #8]
 8012802:	1ad3      	subs	r3, r2, r3
 8012804:	425a      	negs	r2, r3
 8012806:	4153      	adcs	r3, r2
 8012808:	b2db      	uxtb	r3, r3
 801280a:	001a      	movs	r2, r3
 801280c:	1dfb      	adds	r3, r7, #7
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	429a      	cmp	r2, r3
 8012812:	d113      	bne.n	801283c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012818:	2220      	movs	r2, #32
 801281a:	431a      	orrs	r2, r3
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2241      	movs	r2, #65	@ 0x41
 8012824:	2120      	movs	r1, #32
 8012826:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	2242      	movs	r2, #66	@ 0x42
 801282c:	2100      	movs	r1, #0
 801282e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	2240      	movs	r2, #64	@ 0x40
 8012834:	2100      	movs	r1, #0
 8012836:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8012838:	2301      	movs	r3, #1
 801283a:	e00f      	b.n	801285c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	699b      	ldr	r3, [r3, #24]
 8012842:	68ba      	ldr	r2, [r7, #8]
 8012844:	4013      	ands	r3, r2
 8012846:	68ba      	ldr	r2, [r7, #8]
 8012848:	1ad3      	subs	r3, r2, r3
 801284a:	425a      	negs	r2, r3
 801284c:	4153      	adcs	r3, r2
 801284e:	b2db      	uxtb	r3, r3
 8012850:	001a      	movs	r2, r3
 8012852:	1dfb      	adds	r3, r7, #7
 8012854:	781b      	ldrb	r3, [r3, #0]
 8012856:	429a      	cmp	r2, r3
 8012858:	d0bf      	beq.n	80127da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801285a:	2300      	movs	r3, #0
}
 801285c:	0018      	movs	r0, r3
 801285e:	46bd      	mov	sp, r7
 8012860:	b004      	add	sp, #16
 8012862:	bd80      	pop	{r7, pc}

08012864 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b084      	sub	sp, #16
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	60b9      	str	r1, [r7, #8]
 801286e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012870:	e032      	b.n	80128d8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	68b9      	ldr	r1, [r7, #8]
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	0018      	movs	r0, r3
 801287a:	f000 f8ff 	bl	8012a7c <I2C_IsErrorOccurred>
 801287e:	1e03      	subs	r3, r0, #0
 8012880:	d001      	beq.n	8012886 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012882:	2301      	movs	r3, #1
 8012884:	e030      	b.n	80128e8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	3301      	adds	r3, #1
 801288a:	d025      	beq.n	80128d8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801288c:	f7fc fc76 	bl	800f17c <HAL_GetTick>
 8012890:	0002      	movs	r2, r0
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	1ad3      	subs	r3, r2, r3
 8012896:	68ba      	ldr	r2, [r7, #8]
 8012898:	429a      	cmp	r2, r3
 801289a:	d302      	bcc.n	80128a2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d11a      	bne.n	80128d8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	699b      	ldr	r3, [r3, #24]
 80128a8:	2202      	movs	r2, #2
 80128aa:	4013      	ands	r3, r2
 80128ac:	2b02      	cmp	r3, #2
 80128ae:	d013      	beq.n	80128d8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128b4:	2220      	movs	r2, #32
 80128b6:	431a      	orrs	r2, r3
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	2241      	movs	r2, #65	@ 0x41
 80128c0:	2120      	movs	r1, #32
 80128c2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	2242      	movs	r2, #66	@ 0x42
 80128c8:	2100      	movs	r1, #0
 80128ca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	2240      	movs	r2, #64	@ 0x40
 80128d0:	2100      	movs	r1, #0
 80128d2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80128d4:	2301      	movs	r3, #1
 80128d6:	e007      	b.n	80128e8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	699b      	ldr	r3, [r3, #24]
 80128de:	2202      	movs	r2, #2
 80128e0:	4013      	ands	r3, r2
 80128e2:	2b02      	cmp	r3, #2
 80128e4:	d1c5      	bne.n	8012872 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	0018      	movs	r0, r3
 80128ea:	46bd      	mov	sp, r7
 80128ec:	b004      	add	sp, #16
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b084      	sub	sp, #16
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	60f8      	str	r0, [r7, #12]
 80128f8:	60b9      	str	r1, [r7, #8]
 80128fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80128fc:	e02f      	b.n	801295e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80128fe:	687a      	ldr	r2, [r7, #4]
 8012900:	68b9      	ldr	r1, [r7, #8]
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	0018      	movs	r0, r3
 8012906:	f000 f8b9 	bl	8012a7c <I2C_IsErrorOccurred>
 801290a:	1e03      	subs	r3, r0, #0
 801290c:	d001      	beq.n	8012912 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801290e:	2301      	movs	r3, #1
 8012910:	e02d      	b.n	801296e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012912:	f7fc fc33 	bl	800f17c <HAL_GetTick>
 8012916:	0002      	movs	r2, r0
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	1ad3      	subs	r3, r2, r3
 801291c:	68ba      	ldr	r2, [r7, #8]
 801291e:	429a      	cmp	r2, r3
 8012920:	d302      	bcc.n	8012928 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d11a      	bne.n	801295e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	699b      	ldr	r3, [r3, #24]
 801292e:	2220      	movs	r2, #32
 8012930:	4013      	ands	r3, r2
 8012932:	2b20      	cmp	r3, #32
 8012934:	d013      	beq.n	801295e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801293a:	2220      	movs	r2, #32
 801293c:	431a      	orrs	r2, r3
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	2241      	movs	r2, #65	@ 0x41
 8012946:	2120      	movs	r1, #32
 8012948:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	2242      	movs	r2, #66	@ 0x42
 801294e:	2100      	movs	r1, #0
 8012950:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	2240      	movs	r2, #64	@ 0x40
 8012956:	2100      	movs	r1, #0
 8012958:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801295a:	2301      	movs	r3, #1
 801295c:	e007      	b.n	801296e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	699b      	ldr	r3, [r3, #24]
 8012964:	2220      	movs	r2, #32
 8012966:	4013      	ands	r3, r2
 8012968:	2b20      	cmp	r3, #32
 801296a:	d1c8      	bne.n	80128fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801296c:	2300      	movs	r3, #0
}
 801296e:	0018      	movs	r0, r3
 8012970:	46bd      	mov	sp, r7
 8012972:	b004      	add	sp, #16
 8012974:	bd80      	pop	{r7, pc}
	...

08012978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b084      	sub	sp, #16
 801297c:	af00      	add	r7, sp, #0
 801297e:	60f8      	str	r0, [r7, #12]
 8012980:	60b9      	str	r1, [r7, #8]
 8012982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012984:	e06b      	b.n	8012a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012986:	687a      	ldr	r2, [r7, #4]
 8012988:	68b9      	ldr	r1, [r7, #8]
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	0018      	movs	r0, r3
 801298e:	f000 f875 	bl	8012a7c <I2C_IsErrorOccurred>
 8012992:	1e03      	subs	r3, r0, #0
 8012994:	d001      	beq.n	801299a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012996:	2301      	movs	r3, #1
 8012998:	e069      	b.n	8012a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	699b      	ldr	r3, [r3, #24]
 80129a0:	2220      	movs	r2, #32
 80129a2:	4013      	ands	r3, r2
 80129a4:	2b20      	cmp	r3, #32
 80129a6:	d138      	bne.n	8012a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	699b      	ldr	r3, [r3, #24]
 80129ae:	2204      	movs	r2, #4
 80129b0:	4013      	ands	r3, r2
 80129b2:	2b04      	cmp	r3, #4
 80129b4:	d105      	bne.n	80129c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d001      	beq.n	80129c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80129be:	2300      	movs	r3, #0
 80129c0:	e055      	b.n	8012a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	699b      	ldr	r3, [r3, #24]
 80129c8:	2210      	movs	r2, #16
 80129ca:	4013      	ands	r3, r2
 80129cc:	2b10      	cmp	r3, #16
 80129ce:	d107      	bne.n	80129e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	2210      	movs	r2, #16
 80129d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	2204      	movs	r2, #4
 80129dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80129de:	e002      	b.n	80129e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	2200      	movs	r2, #0
 80129e4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2220      	movs	r2, #32
 80129ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	685a      	ldr	r2, [r3, #4]
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	491f      	ldr	r1, [pc, #124]	@ (8012a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80129fa:	400a      	ands	r2, r1
 80129fc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2241      	movs	r2, #65	@ 0x41
 8012a02:	2120      	movs	r1, #32
 8012a04:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2242      	movs	r2, #66	@ 0x42
 8012a0a:	2100      	movs	r1, #0
 8012a0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	2240      	movs	r2, #64	@ 0x40
 8012a12:	2100      	movs	r1, #0
 8012a14:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012a16:	2301      	movs	r3, #1
 8012a18:	e029      	b.n	8012a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012a1a:	f7fc fbaf 	bl	800f17c <HAL_GetTick>
 8012a1e:	0002      	movs	r2, r0
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	1ad3      	subs	r3, r2, r3
 8012a24:	68ba      	ldr	r2, [r7, #8]
 8012a26:	429a      	cmp	r2, r3
 8012a28:	d302      	bcc.n	8012a30 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d116      	bne.n	8012a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	699b      	ldr	r3, [r3, #24]
 8012a36:	2204      	movs	r2, #4
 8012a38:	4013      	ands	r3, r2
 8012a3a:	2b04      	cmp	r3, #4
 8012a3c:	d00f      	beq.n	8012a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a42:	2220      	movs	r2, #32
 8012a44:	431a      	orrs	r2, r3
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2241      	movs	r2, #65	@ 0x41
 8012a4e:	2120      	movs	r1, #32
 8012a50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	2240      	movs	r2, #64	@ 0x40
 8012a56:	2100      	movs	r1, #0
 8012a58:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e007      	b.n	8012a6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	699b      	ldr	r3, [r3, #24]
 8012a64:	2204      	movs	r2, #4
 8012a66:	4013      	ands	r3, r2
 8012a68:	2b04      	cmp	r3, #4
 8012a6a:	d18c      	bne.n	8012986 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012a6c:	2300      	movs	r3, #0
}
 8012a6e:	0018      	movs	r0, r3
 8012a70:	46bd      	mov	sp, r7
 8012a72:	b004      	add	sp, #16
 8012a74:	bd80      	pop	{r7, pc}
 8012a76:	46c0      	nop			@ (mov r8, r8)
 8012a78:	fe00e800 	.word	0xfe00e800

08012a7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b08a      	sub	sp, #40	@ 0x28
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	60f8      	str	r0, [r7, #12]
 8012a84:	60b9      	str	r1, [r7, #8]
 8012a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012a88:	2327      	movs	r3, #39	@ 0x27
 8012a8a:	18fb      	adds	r3, r7, r3
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	699b      	ldr	r3, [r3, #24]
 8012a96:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012aa0:	69bb      	ldr	r3, [r7, #24]
 8012aa2:	2210      	movs	r2, #16
 8012aa4:	4013      	ands	r3, r2
 8012aa6:	d100      	bne.n	8012aaa <I2C_IsErrorOccurred+0x2e>
 8012aa8:	e079      	b.n	8012b9e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	2210      	movs	r2, #16
 8012ab0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012ab2:	e057      	b.n	8012b64 <I2C_IsErrorOccurred+0xe8>
 8012ab4:	2227      	movs	r2, #39	@ 0x27
 8012ab6:	18bb      	adds	r3, r7, r2
 8012ab8:	18ba      	adds	r2, r7, r2
 8012aba:	7812      	ldrb	r2, [r2, #0]
 8012abc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	3301      	adds	r3, #1
 8012ac2:	d04f      	beq.n	8012b64 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012ac4:	f7fc fb5a 	bl	800f17c <HAL_GetTick>
 8012ac8:	0002      	movs	r2, r0
 8012aca:	69fb      	ldr	r3, [r7, #28]
 8012acc:	1ad3      	subs	r3, r2, r3
 8012ace:	68ba      	ldr	r2, [r7, #8]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d302      	bcc.n	8012ada <I2C_IsErrorOccurred+0x5e>
 8012ad4:	68bb      	ldr	r3, [r7, #8]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d144      	bne.n	8012b64 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	685a      	ldr	r2, [r3, #4]
 8012ae0:	2380      	movs	r3, #128	@ 0x80
 8012ae2:	01db      	lsls	r3, r3, #7
 8012ae4:	4013      	ands	r3, r2
 8012ae6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012ae8:	2013      	movs	r0, #19
 8012aea:	183b      	adds	r3, r7, r0
 8012aec:	68fa      	ldr	r2, [r7, #12]
 8012aee:	2142      	movs	r1, #66	@ 0x42
 8012af0:	5c52      	ldrb	r2, [r2, r1]
 8012af2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	699a      	ldr	r2, [r3, #24]
 8012afa:	2380      	movs	r3, #128	@ 0x80
 8012afc:	021b      	lsls	r3, r3, #8
 8012afe:	401a      	ands	r2, r3
 8012b00:	2380      	movs	r3, #128	@ 0x80
 8012b02:	021b      	lsls	r3, r3, #8
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d126      	bne.n	8012b56 <I2C_IsErrorOccurred+0xda>
 8012b08:	697a      	ldr	r2, [r7, #20]
 8012b0a:	2380      	movs	r3, #128	@ 0x80
 8012b0c:	01db      	lsls	r3, r3, #7
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d021      	beq.n	8012b56 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8012b12:	183b      	adds	r3, r7, r0
 8012b14:	781b      	ldrb	r3, [r3, #0]
 8012b16:	2b20      	cmp	r3, #32
 8012b18:	d01d      	beq.n	8012b56 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	685a      	ldr	r2, [r3, #4]
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	2180      	movs	r1, #128	@ 0x80
 8012b26:	01c9      	lsls	r1, r1, #7
 8012b28:	430a      	orrs	r2, r1
 8012b2a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012b2c:	f7fc fb26 	bl	800f17c <HAL_GetTick>
 8012b30:	0003      	movs	r3, r0
 8012b32:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012b34:	e00f      	b.n	8012b56 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8012b36:	f7fc fb21 	bl	800f17c <HAL_GetTick>
 8012b3a:	0002      	movs	r2, r0
 8012b3c:	69fb      	ldr	r3, [r7, #28]
 8012b3e:	1ad3      	subs	r3, r2, r3
 8012b40:	2b19      	cmp	r3, #25
 8012b42:	d908      	bls.n	8012b56 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8012b44:	6a3b      	ldr	r3, [r7, #32]
 8012b46:	2220      	movs	r2, #32
 8012b48:	4313      	orrs	r3, r2
 8012b4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012b4c:	2327      	movs	r3, #39	@ 0x27
 8012b4e:	18fb      	adds	r3, r7, r3
 8012b50:	2201      	movs	r2, #1
 8012b52:	701a      	strb	r2, [r3, #0]

              break;
 8012b54:	e006      	b.n	8012b64 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	699b      	ldr	r3, [r3, #24]
 8012b5c:	2220      	movs	r2, #32
 8012b5e:	4013      	ands	r3, r2
 8012b60:	2b20      	cmp	r3, #32
 8012b62:	d1e8      	bne.n	8012b36 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	699b      	ldr	r3, [r3, #24]
 8012b6a:	2220      	movs	r2, #32
 8012b6c:	4013      	ands	r3, r2
 8012b6e:	2b20      	cmp	r3, #32
 8012b70:	d004      	beq.n	8012b7c <I2C_IsErrorOccurred+0x100>
 8012b72:	2327      	movs	r3, #39	@ 0x27
 8012b74:	18fb      	adds	r3, r7, r3
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d09b      	beq.n	8012ab4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012b7c:	2327      	movs	r3, #39	@ 0x27
 8012b7e:	18fb      	adds	r3, r7, r3
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d103      	bne.n	8012b8e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2220      	movs	r2, #32
 8012b8c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012b8e:	6a3b      	ldr	r3, [r7, #32]
 8012b90:	2204      	movs	r2, #4
 8012b92:	4313      	orrs	r3, r2
 8012b94:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8012b96:	2327      	movs	r3, #39	@ 0x27
 8012b98:	18fb      	adds	r3, r7, r3
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	699b      	ldr	r3, [r3, #24]
 8012ba4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8012ba6:	69ba      	ldr	r2, [r7, #24]
 8012ba8:	2380      	movs	r3, #128	@ 0x80
 8012baa:	005b      	lsls	r3, r3, #1
 8012bac:	4013      	ands	r3, r2
 8012bae:	d00c      	beq.n	8012bca <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012bb0:	6a3b      	ldr	r3, [r7, #32]
 8012bb2:	2201      	movs	r2, #1
 8012bb4:	4313      	orrs	r3, r2
 8012bb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	2280      	movs	r2, #128	@ 0x80
 8012bbe:	0052      	lsls	r2, r2, #1
 8012bc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012bc2:	2327      	movs	r3, #39	@ 0x27
 8012bc4:	18fb      	adds	r3, r7, r3
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012bca:	69ba      	ldr	r2, [r7, #24]
 8012bcc:	2380      	movs	r3, #128	@ 0x80
 8012bce:	00db      	lsls	r3, r3, #3
 8012bd0:	4013      	ands	r3, r2
 8012bd2:	d00c      	beq.n	8012bee <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012bd4:	6a3b      	ldr	r3, [r7, #32]
 8012bd6:	2208      	movs	r2, #8
 8012bd8:	4313      	orrs	r3, r2
 8012bda:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2280      	movs	r2, #128	@ 0x80
 8012be2:	00d2      	lsls	r2, r2, #3
 8012be4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012be6:	2327      	movs	r3, #39	@ 0x27
 8012be8:	18fb      	adds	r3, r7, r3
 8012bea:	2201      	movs	r2, #1
 8012bec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012bee:	69ba      	ldr	r2, [r7, #24]
 8012bf0:	2380      	movs	r3, #128	@ 0x80
 8012bf2:	009b      	lsls	r3, r3, #2
 8012bf4:	4013      	ands	r3, r2
 8012bf6:	d00c      	beq.n	8012c12 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012bf8:	6a3b      	ldr	r3, [r7, #32]
 8012bfa:	2202      	movs	r2, #2
 8012bfc:	4313      	orrs	r3, r2
 8012bfe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	2280      	movs	r2, #128	@ 0x80
 8012c06:	0092      	lsls	r2, r2, #2
 8012c08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012c0a:	2327      	movs	r3, #39	@ 0x27
 8012c0c:	18fb      	adds	r3, r7, r3
 8012c0e:	2201      	movs	r2, #1
 8012c10:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8012c12:	2327      	movs	r3, #39	@ 0x27
 8012c14:	18fb      	adds	r3, r7, r3
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d01d      	beq.n	8012c58 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	0018      	movs	r0, r3
 8012c20:	f7ff fcd7 	bl	80125d2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	685a      	ldr	r2, [r3, #4]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	490e      	ldr	r1, [pc, #56]	@ (8012c68 <I2C_IsErrorOccurred+0x1ec>)
 8012c30:	400a      	ands	r2, r1
 8012c32:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012c38:	6a3b      	ldr	r3, [r7, #32]
 8012c3a:	431a      	orrs	r2, r3
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	2241      	movs	r2, #65	@ 0x41
 8012c44:	2120      	movs	r1, #32
 8012c46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	2242      	movs	r2, #66	@ 0x42
 8012c4c:	2100      	movs	r1, #0
 8012c4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	2240      	movs	r2, #64	@ 0x40
 8012c54:	2100      	movs	r1, #0
 8012c56:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8012c58:	2327      	movs	r3, #39	@ 0x27
 8012c5a:	18fb      	adds	r3, r7, r3
 8012c5c:	781b      	ldrb	r3, [r3, #0]
}
 8012c5e:	0018      	movs	r0, r3
 8012c60:	46bd      	mov	sp, r7
 8012c62:	b00a      	add	sp, #40	@ 0x28
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	46c0      	nop			@ (mov r8, r8)
 8012c68:	fe00e800 	.word	0xfe00e800

08012c6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012c6c:	b590      	push	{r4, r7, lr}
 8012c6e:	b087      	sub	sp, #28
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	0008      	movs	r0, r1
 8012c76:	0011      	movs	r1, r2
 8012c78:	607b      	str	r3, [r7, #4]
 8012c7a:	240a      	movs	r4, #10
 8012c7c:	193b      	adds	r3, r7, r4
 8012c7e:	1c02      	adds	r2, r0, #0
 8012c80:	801a      	strh	r2, [r3, #0]
 8012c82:	2009      	movs	r0, #9
 8012c84:	183b      	adds	r3, r7, r0
 8012c86:	1c0a      	adds	r2, r1, #0
 8012c88:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012c8a:	193b      	adds	r3, r7, r4
 8012c8c:	881b      	ldrh	r3, [r3, #0]
 8012c8e:	059b      	lsls	r3, r3, #22
 8012c90:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012c92:	183b      	adds	r3, r7, r0
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	0419      	lsls	r1, r3, #16
 8012c98:	23ff      	movs	r3, #255	@ 0xff
 8012c9a:	041b      	lsls	r3, r3, #16
 8012c9c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012c9e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ca6:	4313      	orrs	r3, r2
 8012ca8:	005b      	lsls	r3, r3, #1
 8012caa:	085b      	lsrs	r3, r3, #1
 8012cac:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012cb6:	0d51      	lsrs	r1, r2, #21
 8012cb8:	2280      	movs	r2, #128	@ 0x80
 8012cba:	00d2      	lsls	r2, r2, #3
 8012cbc:	400a      	ands	r2, r1
 8012cbe:	4907      	ldr	r1, [pc, #28]	@ (8012cdc <I2C_TransferConfig+0x70>)
 8012cc0:	430a      	orrs	r2, r1
 8012cc2:	43d2      	mvns	r2, r2
 8012cc4:	401a      	ands	r2, r3
 8012cc6:	0011      	movs	r1, r2
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	697a      	ldr	r2, [r7, #20]
 8012cce:	430a      	orrs	r2, r1
 8012cd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012cd2:	46c0      	nop			@ (mov r8, r8)
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	b007      	add	sp, #28
 8012cd8:	bd90      	pop	{r4, r7, pc}
 8012cda:	46c0      	nop			@ (mov r8, r8)
 8012cdc:	03ff63ff 	.word	0x03ff63ff

08012ce0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	000a      	movs	r2, r1
 8012cea:	1cbb      	adds	r3, r7, #2
 8012cec:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8012df0 <I2C_Enable_IRQ+0x110>)
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d035      	beq.n	8012d68 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012d00:	4b3c      	ldr	r3, [pc, #240]	@ (8012df4 <I2C_Enable_IRQ+0x114>)
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d030      	beq.n	8012d68 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8012df8 <I2C_Enable_IRQ+0x118>)
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d02b      	beq.n	8012d68 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012d10:	1cbb      	adds	r3, r7, #2
 8012d12:	2200      	movs	r2, #0
 8012d14:	5e9b      	ldrsh	r3, [r3, r2]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	da03      	bge.n	8012d22 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	22b8      	movs	r2, #184	@ 0xb8
 8012d1e:	4313      	orrs	r3, r2
 8012d20:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012d22:	1cbb      	adds	r3, r7, #2
 8012d24:	881b      	ldrh	r3, [r3, #0]
 8012d26:	2201      	movs	r2, #1
 8012d28:	4013      	ands	r3, r2
 8012d2a:	d003      	beq.n	8012d34 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	22f2      	movs	r2, #242	@ 0xf2
 8012d30:	4313      	orrs	r3, r2
 8012d32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012d34:	1cbb      	adds	r3, r7, #2
 8012d36:	881b      	ldrh	r3, [r3, #0]
 8012d38:	2202      	movs	r2, #2
 8012d3a:	4013      	ands	r3, r2
 8012d3c:	d003      	beq.n	8012d46 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	22f4      	movs	r2, #244	@ 0xf4
 8012d42:	4313      	orrs	r3, r2
 8012d44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012d46:	1cbb      	adds	r3, r7, #2
 8012d48:	881b      	ldrh	r3, [r3, #0]
 8012d4a:	2b10      	cmp	r3, #16
 8012d4c:	d103      	bne.n	8012d56 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	2290      	movs	r2, #144	@ 0x90
 8012d52:	4313      	orrs	r3, r2
 8012d54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012d56:	1cbb      	adds	r3, r7, #2
 8012d58:	881b      	ldrh	r3, [r3, #0]
 8012d5a:	2b20      	cmp	r3, #32
 8012d5c:	d13c      	bne.n	8012dd8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2220      	movs	r2, #32
 8012d62:	4313      	orrs	r3, r2
 8012d64:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012d66:	e037      	b.n	8012dd8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012d68:	1cbb      	adds	r3, r7, #2
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	5e9b      	ldrsh	r3, [r3, r2]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	da03      	bge.n	8012d7a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	22b8      	movs	r2, #184	@ 0xb8
 8012d76:	4313      	orrs	r3, r2
 8012d78:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012d7a:	1cbb      	adds	r3, r7, #2
 8012d7c:	881b      	ldrh	r3, [r3, #0]
 8012d7e:	2201      	movs	r2, #1
 8012d80:	4013      	ands	r3, r2
 8012d82:	d003      	beq.n	8012d8c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	22f2      	movs	r2, #242	@ 0xf2
 8012d88:	4313      	orrs	r3, r2
 8012d8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012d8c:	1cbb      	adds	r3, r7, #2
 8012d8e:	881b      	ldrh	r3, [r3, #0]
 8012d90:	2202      	movs	r2, #2
 8012d92:	4013      	ands	r3, r2
 8012d94:	d003      	beq.n	8012d9e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	22f4      	movs	r2, #244	@ 0xf4
 8012d9a:	4313      	orrs	r3, r2
 8012d9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012d9e:	1cbb      	adds	r3, r7, #2
 8012da0:	881b      	ldrh	r3, [r3, #0]
 8012da2:	2b10      	cmp	r3, #16
 8012da4:	d103      	bne.n	8012dae <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	2290      	movs	r2, #144	@ 0x90
 8012daa:	4313      	orrs	r3, r2
 8012dac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012dae:	1cbb      	adds	r3, r7, #2
 8012db0:	881b      	ldrh	r3, [r3, #0]
 8012db2:	2b20      	cmp	r3, #32
 8012db4:	d103      	bne.n	8012dbe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	2260      	movs	r2, #96	@ 0x60
 8012dba:	4313      	orrs	r3, r2
 8012dbc:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8012df8 <I2C_Enable_IRQ+0x118>)
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d007      	beq.n	8012dd8 <I2C_Enable_IRQ+0xf8>
 8012dc8:	1cbb      	adds	r3, r7, #2
 8012dca:	881b      	ldrh	r3, [r3, #0]
 8012dcc:	2b40      	cmp	r3, #64	@ 0x40
 8012dce:	d103      	bne.n	8012dd8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	2240      	movs	r2, #64	@ 0x40
 8012dd4:	4313      	orrs	r3, r2
 8012dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	6819      	ldr	r1, [r3, #0]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	68fa      	ldr	r2, [r7, #12]
 8012de4:	430a      	orrs	r2, r1
 8012de6:	601a      	str	r2, [r3, #0]
}
 8012de8:	46c0      	nop			@ (mov r8, r8)
 8012dea:	46bd      	mov	sp, r7
 8012dec:	b004      	add	sp, #16
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	08011661 	.word	0x08011661
 8012df4:	08011a91 	.word	0x08011a91
 8012df8:	08011859 	.word	0x08011859

08012dfc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	000a      	movs	r2, r1
 8012e06:	1cbb      	adds	r3, r7, #2
 8012e08:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012e0e:	1cbb      	adds	r3, r7, #2
 8012e10:	881b      	ldrh	r3, [r3, #0]
 8012e12:	2201      	movs	r2, #1
 8012e14:	4013      	ands	r3, r2
 8012e16:	d010      	beq.n	8012e3a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	2242      	movs	r2, #66	@ 0x42
 8012e1c:	4313      	orrs	r3, r2
 8012e1e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2241      	movs	r2, #65	@ 0x41
 8012e24:	5c9b      	ldrb	r3, [r3, r2]
 8012e26:	b2db      	uxtb	r3, r3
 8012e28:	001a      	movs	r2, r3
 8012e2a:	2328      	movs	r3, #40	@ 0x28
 8012e2c:	4013      	ands	r3, r2
 8012e2e:	2b28      	cmp	r3, #40	@ 0x28
 8012e30:	d003      	beq.n	8012e3a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	22b0      	movs	r2, #176	@ 0xb0
 8012e36:	4313      	orrs	r3, r2
 8012e38:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012e3a:	1cbb      	adds	r3, r7, #2
 8012e3c:	881b      	ldrh	r3, [r3, #0]
 8012e3e:	2202      	movs	r2, #2
 8012e40:	4013      	ands	r3, r2
 8012e42:	d010      	beq.n	8012e66 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	2244      	movs	r2, #68	@ 0x44
 8012e48:	4313      	orrs	r3, r2
 8012e4a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2241      	movs	r2, #65	@ 0x41
 8012e50:	5c9b      	ldrb	r3, [r3, r2]
 8012e52:	b2db      	uxtb	r3, r3
 8012e54:	001a      	movs	r2, r3
 8012e56:	2328      	movs	r3, #40	@ 0x28
 8012e58:	4013      	ands	r3, r2
 8012e5a:	2b28      	cmp	r3, #40	@ 0x28
 8012e5c:	d003      	beq.n	8012e66 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	22b0      	movs	r2, #176	@ 0xb0
 8012e62:	4313      	orrs	r3, r2
 8012e64:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012e66:	1cbb      	adds	r3, r7, #2
 8012e68:	2200      	movs	r2, #0
 8012e6a:	5e9b      	ldrsh	r3, [r3, r2]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	da03      	bge.n	8012e78 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	22b8      	movs	r2, #184	@ 0xb8
 8012e74:	4313      	orrs	r3, r2
 8012e76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8012e78:	1cbb      	adds	r3, r7, #2
 8012e7a:	881b      	ldrh	r3, [r3, #0]
 8012e7c:	2b10      	cmp	r3, #16
 8012e7e:	d103      	bne.n	8012e88 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	2290      	movs	r2, #144	@ 0x90
 8012e84:	4313      	orrs	r3, r2
 8012e86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8012e88:	1cbb      	adds	r3, r7, #2
 8012e8a:	881b      	ldrh	r3, [r3, #0]
 8012e8c:	2b20      	cmp	r3, #32
 8012e8e:	d103      	bne.n	8012e98 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	2220      	movs	r2, #32
 8012e94:	4313      	orrs	r3, r2
 8012e96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8012e98:	1cbb      	adds	r3, r7, #2
 8012e9a:	881b      	ldrh	r3, [r3, #0]
 8012e9c:	2b40      	cmp	r3, #64	@ 0x40
 8012e9e:	d103      	bne.n	8012ea8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2240      	movs	r2, #64	@ 0x40
 8012ea4:	4313      	orrs	r3, r2
 8012ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	681a      	ldr	r2, [r3, #0]
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	43d9      	mvns	r1, r3
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	400a      	ands	r2, r1
 8012eb8:	601a      	str	r2, [r3, #0]
}
 8012eba:	46c0      	nop			@ (mov r8, r8)
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	b004      	add	sp, #16
 8012ec0:	bd80      	pop	{r7, pc}
	...

08012ec4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b082      	sub	sp, #8
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2241      	movs	r2, #65	@ 0x41
 8012ed2:	5c9b      	ldrb	r3, [r3, r2]
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	2b20      	cmp	r3, #32
 8012ed8:	d138      	bne.n	8012f4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2240      	movs	r2, #64	@ 0x40
 8012ede:	5c9b      	ldrb	r3, [r3, r2]
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d101      	bne.n	8012ee8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012ee4:	2302      	movs	r3, #2
 8012ee6:	e032      	b.n	8012f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2240      	movs	r2, #64	@ 0x40
 8012eec:	2101      	movs	r1, #1
 8012eee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2241      	movs	r2, #65	@ 0x41
 8012ef4:	2124      	movs	r1, #36	@ 0x24
 8012ef6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	2101      	movs	r1, #1
 8012f04:	438a      	bics	r2, r1
 8012f06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4911      	ldr	r1, [pc, #68]	@ (8012f58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012f14:	400a      	ands	r2, r1
 8012f16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	6819      	ldr	r1, [r3, #0]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	683a      	ldr	r2, [r7, #0]
 8012f24:	430a      	orrs	r2, r1
 8012f26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	681a      	ldr	r2, [r3, #0]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	2101      	movs	r1, #1
 8012f34:	430a      	orrs	r2, r1
 8012f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2241      	movs	r2, #65	@ 0x41
 8012f3c:	2120      	movs	r1, #32
 8012f3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2240      	movs	r2, #64	@ 0x40
 8012f44:	2100      	movs	r1, #0
 8012f46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	e000      	b.n	8012f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012f4c:	2302      	movs	r3, #2
  }
}
 8012f4e:	0018      	movs	r0, r3
 8012f50:	46bd      	mov	sp, r7
 8012f52:	b002      	add	sp, #8
 8012f54:	bd80      	pop	{r7, pc}
 8012f56:	46c0      	nop			@ (mov r8, r8)
 8012f58:	ffffefff 	.word	0xffffefff

08012f5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2241      	movs	r2, #65	@ 0x41
 8012f6a:	5c9b      	ldrb	r3, [r3, r2]
 8012f6c:	b2db      	uxtb	r3, r3
 8012f6e:	2b20      	cmp	r3, #32
 8012f70:	d139      	bne.n	8012fe6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	2240      	movs	r2, #64	@ 0x40
 8012f76:	5c9b      	ldrb	r3, [r3, r2]
 8012f78:	2b01      	cmp	r3, #1
 8012f7a:	d101      	bne.n	8012f80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012f7c:	2302      	movs	r3, #2
 8012f7e:	e033      	b.n	8012fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2240      	movs	r2, #64	@ 0x40
 8012f84:	2101      	movs	r1, #1
 8012f86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2241      	movs	r2, #65	@ 0x41
 8012f8c:	2124      	movs	r1, #36	@ 0x24
 8012f8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	2101      	movs	r1, #1
 8012f9c:	438a      	bics	r2, r1
 8012f9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	4a11      	ldr	r2, [pc, #68]	@ (8012ff0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012fac:	4013      	ands	r3, r2
 8012fae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	021b      	lsls	r3, r3, #8
 8012fb4:	68fa      	ldr	r2, [r7, #12]
 8012fb6:	4313      	orrs	r3, r2
 8012fb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	68fa      	ldr	r2, [r7, #12]
 8012fc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	681a      	ldr	r2, [r3, #0]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2101      	movs	r1, #1
 8012fce:	430a      	orrs	r2, r1
 8012fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2241      	movs	r2, #65	@ 0x41
 8012fd6:	2120      	movs	r1, #32
 8012fd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2240      	movs	r2, #64	@ 0x40
 8012fde:	2100      	movs	r1, #0
 8012fe0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	e000      	b.n	8012fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012fe6:	2302      	movs	r3, #2
  }
}
 8012fe8:	0018      	movs	r0, r3
 8012fea:	46bd      	mov	sp, r7
 8012fec:	b004      	add	sp, #16
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	fffff0ff 	.word	0xfffff0ff

08012ff4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b088      	sub	sp, #32
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d101      	bne.n	8013006 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8013002:	2301      	movs	r3, #1
 8013004:	e0e1      	b.n	80131ca <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2235      	movs	r2, #53	@ 0x35
 801300a:	5c9b      	ldrb	r3, [r3, r2]
 801300c:	b2db      	uxtb	r3, r3
 801300e:	2b00      	cmp	r3, #0
 8013010:	d107      	bne.n	8013022 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2234      	movs	r2, #52	@ 0x34
 8013016:	2100      	movs	r1, #0
 8013018:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	0018      	movs	r0, r3
 801301e:	f7f4 fee1 	bl	8007de4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	2235      	movs	r2, #53	@ 0x35
 8013026:	2102      	movs	r1, #2
 8013028:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	69da      	ldr	r2, [r3, #28]
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	4967      	ldr	r1, [pc, #412]	@ (80131d4 <HAL_I2S_Init+0x1e0>)
 8013036:	400a      	ands	r2, r1
 8013038:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2202      	movs	r2, #2
 8013040:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	695b      	ldr	r3, [r3, #20]
 8013046:	2b02      	cmp	r3, #2
 8013048:	d073      	beq.n	8013132 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	68db      	ldr	r3, [r3, #12]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d102      	bne.n	8013058 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8013052:	2310      	movs	r3, #16
 8013054:	617b      	str	r3, [r7, #20]
 8013056:	e001      	b.n	801305c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8013058:	2320      	movs	r3, #32
 801305a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	689b      	ldr	r3, [r3, #8]
 8013060:	2b20      	cmp	r3, #32
 8013062:	d802      	bhi.n	801306a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	005b      	lsls	r3, r3, #1
 8013068:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801306a:	f002 fed3 	bl	8015e14 <HAL_RCC_GetSysClockFreq>
 801306e:	0003      	movs	r3, r0
 8013070:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	691a      	ldr	r2, [r3, #16]
 8013076:	2380      	movs	r3, #128	@ 0x80
 8013078:	009b      	lsls	r3, r3, #2
 801307a:	429a      	cmp	r2, r3
 801307c:	d131      	bne.n	80130e2 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	68db      	ldr	r3, [r3, #12]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d016      	beq.n	80130b4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8013086:	697b      	ldr	r3, [r7, #20]
 8013088:	009b      	lsls	r3, r3, #2
 801308a:	0019      	movs	r1, r3
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f7ed f889 	bl	80001a4 <__udivsi3>
 8013092:	0003      	movs	r3, r0
 8013094:	001a      	movs	r2, r3
 8013096:	0013      	movs	r3, r2
 8013098:	009b      	lsls	r3, r3, #2
 801309a:	189b      	adds	r3, r3, r2
 801309c:	005b      	lsls	r3, r3, #1
 801309e:	001a      	movs	r2, r3
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	695b      	ldr	r3, [r3, #20]
 80130a4:	0019      	movs	r1, r3
 80130a6:	0010      	movs	r0, r2
 80130a8:	f7ed f87c 	bl	80001a4 <__udivsi3>
 80130ac:	0003      	movs	r3, r0
 80130ae:	3305      	adds	r3, #5
 80130b0:	613b      	str	r3, [r7, #16]
 80130b2:	e02a      	b.n	801310a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	00db      	lsls	r3, r3, #3
 80130b8:	0019      	movs	r1, r3
 80130ba:	68f8      	ldr	r0, [r7, #12]
 80130bc:	f7ed f872 	bl	80001a4 <__udivsi3>
 80130c0:	0003      	movs	r3, r0
 80130c2:	001a      	movs	r2, r3
 80130c4:	0013      	movs	r3, r2
 80130c6:	009b      	lsls	r3, r3, #2
 80130c8:	189b      	adds	r3, r3, r2
 80130ca:	005b      	lsls	r3, r3, #1
 80130cc:	001a      	movs	r2, r3
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	695b      	ldr	r3, [r3, #20]
 80130d2:	0019      	movs	r1, r3
 80130d4:	0010      	movs	r0, r2
 80130d6:	f7ed f865 	bl	80001a4 <__udivsi3>
 80130da:	0003      	movs	r3, r0
 80130dc:	3305      	adds	r3, #5
 80130de:	613b      	str	r3, [r7, #16]
 80130e0:	e013      	b.n	801310a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80130e2:	6979      	ldr	r1, [r7, #20]
 80130e4:	68f8      	ldr	r0, [r7, #12]
 80130e6:	f7ed f85d 	bl	80001a4 <__udivsi3>
 80130ea:	0003      	movs	r3, r0
 80130ec:	001a      	movs	r2, r3
 80130ee:	0013      	movs	r3, r2
 80130f0:	009b      	lsls	r3, r3, #2
 80130f2:	189b      	adds	r3, r3, r2
 80130f4:	005b      	lsls	r3, r3, #1
 80130f6:	001a      	movs	r2, r3
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	695b      	ldr	r3, [r3, #20]
 80130fc:	0019      	movs	r1, r3
 80130fe:	0010      	movs	r0, r2
 8013100:	f7ed f850 	bl	80001a4 <__udivsi3>
 8013104:	0003      	movs	r3, r0
 8013106:	3305      	adds	r3, #5
 8013108:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	210a      	movs	r1, #10
 801310e:	0018      	movs	r0, r3
 8013110:	f7ed f848 	bl	80001a4 <__udivsi3>
 8013114:	0003      	movs	r3, r0
 8013116:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	2201      	movs	r2, #1
 801311c:	4013      	ands	r3, r2
 801311e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8013120:	693a      	ldr	r2, [r7, #16]
 8013122:	69bb      	ldr	r3, [r7, #24]
 8013124:	1ad3      	subs	r3, r2, r3
 8013126:	085b      	lsrs	r3, r3, #1
 8013128:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801312a:	69bb      	ldr	r3, [r7, #24]
 801312c:	021b      	lsls	r3, r3, #8
 801312e:	61bb      	str	r3, [r7, #24]
 8013130:	e003      	b.n	801313a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8013132:	2302      	movs	r3, #2
 8013134:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8013136:	2300      	movs	r3, #0
 8013138:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	2b01      	cmp	r3, #1
 801313e:	d902      	bls.n	8013146 <HAL_I2S_Init+0x152>
 8013140:	69fb      	ldr	r3, [r7, #28]
 8013142:	2bff      	cmp	r3, #255	@ 0xff
 8013144:	d907      	bls.n	8013156 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801314a:	2210      	movs	r2, #16
 801314c:	431a      	orrs	r2, r3
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8013152:	2301      	movs	r3, #1
 8013154:	e039      	b.n	80131ca <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	691a      	ldr	r2, [r3, #16]
 801315a:	69bb      	ldr	r3, [r7, #24]
 801315c:	431a      	orrs	r2, r3
 801315e:	0011      	movs	r1, r2
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	69fa      	ldr	r2, [r7, #28]
 8013166:	430a      	orrs	r2, r1
 8013168:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	69db      	ldr	r3, [r3, #28]
 8013170:	4a18      	ldr	r2, [pc, #96]	@ (80131d4 <HAL_I2S_Init+0x1e0>)
 8013172:	401a      	ands	r2, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6859      	ldr	r1, [r3, #4]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	689b      	ldr	r3, [r3, #8]
 801317c:	4319      	orrs	r1, r3
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	68db      	ldr	r3, [r3, #12]
 8013182:	4319      	orrs	r1, r3
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	699b      	ldr	r3, [r3, #24]
 8013188:	430b      	orrs	r3, r1
 801318a:	431a      	orrs	r2, r3
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	2180      	movs	r1, #128	@ 0x80
 8013192:	0109      	lsls	r1, r1, #4
 8013194:	430a      	orrs	r2, r1
 8013196:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	689b      	ldr	r3, [r3, #8]
 801319c:	2b30      	cmp	r3, #48	@ 0x30
 801319e:	d003      	beq.n	80131a8 <HAL_I2S_Init+0x1b4>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	689b      	ldr	r3, [r3, #8]
 80131a4:	2bb0      	cmp	r3, #176	@ 0xb0
 80131a6:	d108      	bne.n	80131ba <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	69da      	ldr	r2, [r3, #28]
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2180      	movs	r1, #128	@ 0x80
 80131b4:	0149      	lsls	r1, r1, #5
 80131b6:	430a      	orrs	r2, r1
 80131b8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2235      	movs	r2, #53	@ 0x35
 80131c4:	2101      	movs	r1, #1
 80131c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80131c8:	2300      	movs	r3, #0
}
 80131ca:	0018      	movs	r0, r3
 80131cc:	46bd      	mov	sp, r7
 80131ce:	b008      	add	sp, #32
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	46c0      	nop			@ (mov r8, r8)
 80131d4:	fffff040 	.word	0xfffff040

080131d8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b086      	sub	sp, #24
 80131dc:	af00      	add	r7, sp, #0
 80131de:	60f8      	str	r0, [r7, #12]
 80131e0:	60b9      	str	r1, [r7, #8]
 80131e2:	1dbb      	adds	r3, r7, #6
 80131e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d003      	beq.n	80131f4 <HAL_I2S_Receive_DMA+0x1c>
 80131ec:	1dbb      	adds	r3, r7, #6
 80131ee:	881b      	ldrh	r3, [r3, #0]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d101      	bne.n	80131f8 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80131f4:	2301      	movs	r3, #1
 80131f6:	e0a6      	b.n	8013346 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	2234      	movs	r2, #52	@ 0x34
 80131fc:	5c9b      	ldrb	r3, [r3, r2]
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	2b01      	cmp	r3, #1
 8013202:	d101      	bne.n	8013208 <HAL_I2S_Receive_DMA+0x30>
 8013204:	2302      	movs	r3, #2
 8013206:	e09e      	b.n	8013346 <HAL_I2S_Receive_DMA+0x16e>
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2234      	movs	r2, #52	@ 0x34
 801320c:	2101      	movs	r1, #1
 801320e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	2235      	movs	r2, #53	@ 0x35
 8013214:	5c9b      	ldrb	r3, [r3, r2]
 8013216:	b2db      	uxtb	r3, r3
 8013218:	2b01      	cmp	r3, #1
 801321a:	d005      	beq.n	8013228 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2234      	movs	r2, #52	@ 0x34
 8013220:	2100      	movs	r1, #0
 8013222:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8013224:	2302      	movs	r3, #2
 8013226:	e08e      	b.n	8013346 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2235      	movs	r2, #53	@ 0x35
 801322c:	2104      	movs	r1, #4
 801322e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	2200      	movs	r2, #0
 8013234:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	68ba      	ldr	r2, [r7, #8]
 801323a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	69db      	ldr	r3, [r3, #28]
 8013242:	2207      	movs	r2, #7
 8013244:	4013      	ands	r3, r2
 8013246:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	2b03      	cmp	r3, #3
 801324c:	d002      	beq.n	8013254 <HAL_I2S_Receive_DMA+0x7c>
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	2b05      	cmp	r3, #5
 8013252:	d10c      	bne.n	801326e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8013254:	1dbb      	adds	r3, r7, #6
 8013256:	881b      	ldrh	r3, [r3, #0]
 8013258:	18db      	adds	r3, r3, r3
 801325a:	b29a      	uxth	r2, r3
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8013260:	1dbb      	adds	r3, r7, #6
 8013262:	881b      	ldrh	r3, [r3, #0]
 8013264:	18db      	adds	r3, r3, r3
 8013266:	b29a      	uxth	r2, r3
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801326c:	e007      	b.n	801327e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	1dba      	adds	r2, r7, #6
 8013272:	8812      	ldrh	r2, [r2, #0]
 8013274:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	1dba      	adds	r2, r7, #6
 801327a:	8812      	ldrh	r2, [r2, #0]
 801327c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013282:	4a33      	ldr	r2, [pc, #204]	@ (8013350 <HAL_I2S_Receive_DMA+0x178>)
 8013284:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801328a:	4a32      	ldr	r2, [pc, #200]	@ (8013354 <HAL_I2S_Receive_DMA+0x17c>)
 801328c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013292:	4a31      	ldr	r2, [pc, #196]	@ (8013358 <HAL_I2S_Receive_DMA+0x180>)
 8013294:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	69da      	ldr	r2, [r3, #28]
 801329c:	23c0      	movs	r3, #192	@ 0xc0
 801329e:	009b      	lsls	r3, r3, #2
 80132a0:	401a      	ands	r2, r3
 80132a2:	23c0      	movs	r3, #192	@ 0xc0
 80132a4:	009b      	lsls	r3, r3, #2
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d10a      	bne.n	80132c0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80132aa:	2300      	movs	r3, #0
 80132ac:	613b      	str	r3, [r7, #16]
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	68db      	ldr	r3, [r3, #12]
 80132b4:	613b      	str	r3, [r7, #16]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	689b      	ldr	r3, [r3, #8]
 80132bc:	613b      	str	r3, [r7, #16]
 80132be:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	330c      	adds	r3, #12
 80132ca:	0019      	movs	r1, r3
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132d0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80132d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80132d8:	f7fc fca2 	bl	800fc20 <HAL_DMA_Start_IT>
 80132dc:	1e03      	subs	r3, r0, #0
 80132de:	d00f      	beq.n	8013300 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132e4:	2208      	movs	r2, #8
 80132e6:	431a      	orrs	r2, r3
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	2235      	movs	r2, #53	@ 0x35
 80132f0:	2101      	movs	r1, #1
 80132f2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	2234      	movs	r2, #52	@ 0x34
 80132f8:	2100      	movs	r1, #0
 80132fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80132fc:	2301      	movs	r3, #1
 80132fe:	e022      	b.n	8013346 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	69da      	ldr	r2, [r3, #28]
 8013306:	2380      	movs	r3, #128	@ 0x80
 8013308:	00db      	lsls	r3, r3, #3
 801330a:	4013      	ands	r3, r2
 801330c:	d108      	bne.n	8013320 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	69da      	ldr	r2, [r3, #28]
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	2180      	movs	r1, #128	@ 0x80
 801331a:	00c9      	lsls	r1, r1, #3
 801331c:	430a      	orrs	r2, r1
 801331e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	2201      	movs	r2, #1
 8013328:	4013      	ands	r3, r2
 801332a:	d107      	bne.n	801333c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	685a      	ldr	r2, [r3, #4]
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2101      	movs	r1, #1
 8013338:	430a      	orrs	r2, r1
 801333a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	2234      	movs	r2, #52	@ 0x34
 8013340:	2100      	movs	r1, #0
 8013342:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8013344:	2300      	movs	r3, #0
}
 8013346:	0018      	movs	r0, r3
 8013348:	46bd      	mov	sp, r7
 801334a:	b006      	add	sp, #24
 801334c:	bd80      	pop	{r7, pc}
 801334e:	46c0      	nop			@ (mov r8, r8)
 8013350:	08013539 	.word	0x08013539
 8013354:	080134f5 	.word	0x080134f5
 8013358:	08013557 	.word	0x08013557

0801335c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b086      	sub	sp, #24
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013364:	2317      	movs	r3, #23
 8013366:	18fb      	adds	r3, r7, r3
 8013368:	2200      	movs	r2, #0
 801336a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	685a      	ldr	r2, [r3, #4]
 8013370:	2380      	movs	r3, #128	@ 0x80
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	429a      	cmp	r2, r3
 8013376:	d003      	beq.n	8013380 <HAL_I2S_DMAStop+0x24>
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d158      	bne.n	8013432 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013384:	2b00      	cmp	r3, #0
 8013386:	d010      	beq.n	80133aa <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801338c:	0018      	movs	r0, r3
 801338e:	f7fc fcad 	bl	800fcec <HAL_DMA_Abort>
 8013392:	1e03      	subs	r3, r0, #0
 8013394:	d009      	beq.n	80133aa <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801339a:	2208      	movs	r2, #8
 801339c:	431a      	orrs	r2, r3
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80133a2:	2317      	movs	r3, #23
 80133a4:	18fb      	adds	r3, r7, r3
 80133a6:	2201      	movs	r2, #1
 80133a8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	2364      	movs	r3, #100	@ 0x64
 80133ae:	2201      	movs	r2, #1
 80133b0:	2102      	movs	r1, #2
 80133b2:	f000 f8f7 	bl	80135a4 <I2S_WaitFlagStateUntilTimeout>
 80133b6:	1e03      	subs	r3, r0, #0
 80133b8:	d00d      	beq.n	80133d6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133be:	2201      	movs	r2, #1
 80133c0:	431a      	orrs	r2, r3
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2235      	movs	r2, #53	@ 0x35
 80133ca:	2101      	movs	r1, #1
 80133cc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80133ce:	2317      	movs	r3, #23
 80133d0:	18fb      	adds	r3, r7, r3
 80133d2:	2201      	movs	r2, #1
 80133d4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80133d6:	6878      	ldr	r0, [r7, #4]
 80133d8:	2364      	movs	r3, #100	@ 0x64
 80133da:	2200      	movs	r2, #0
 80133dc:	2180      	movs	r1, #128	@ 0x80
 80133de:	f000 f8e1 	bl	80135a4 <I2S_WaitFlagStateUntilTimeout>
 80133e2:	1e03      	subs	r3, r0, #0
 80133e4:	d00d      	beq.n	8013402 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133ea:	2201      	movs	r2, #1
 80133ec:	431a      	orrs	r2, r3
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2235      	movs	r2, #53	@ 0x35
 80133f6:	2101      	movs	r1, #1
 80133f8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80133fa:	2317      	movs	r3, #23
 80133fc:	18fb      	adds	r3, r7, r3
 80133fe:	2201      	movs	r2, #1
 8013400:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	69da      	ldr	r2, [r3, #28]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	4938      	ldr	r1, [pc, #224]	@ (80134f0 <HAL_I2S_DMAStop+0x194>)
 801340e:	400a      	ands	r2, r1
 8013410:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8013412:	2300      	movs	r3, #0
 8013414:	613b      	str	r3, [r7, #16]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	689b      	ldr	r3, [r3, #8]
 801341c:	613b      	str	r3, [r7, #16]
 801341e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	685a      	ldr	r2, [r3, #4]
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	2102      	movs	r1, #2
 801342c:	438a      	bics	r2, r1
 801342e:	605a      	str	r2, [r3, #4]
 8013430:	e053      	b.n	80134da <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	685a      	ldr	r2, [r3, #4]
 8013436:	23c0      	movs	r3, #192	@ 0xc0
 8013438:	009b      	lsls	r3, r3, #2
 801343a:	429a      	cmp	r2, r3
 801343c:	d005      	beq.n	801344a <HAL_I2S_DMAStop+0xee>
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	685a      	ldr	r2, [r3, #4]
 8013442:	2380      	movs	r3, #128	@ 0x80
 8013444:	005b      	lsls	r3, r3, #1
 8013446:	429a      	cmp	r2, r3
 8013448:	d147      	bne.n	80134da <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801344e:	2b00      	cmp	r3, #0
 8013450:	d010      	beq.n	8013474 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013456:	0018      	movs	r0, r3
 8013458:	f7fc fc48 	bl	800fcec <HAL_DMA_Abort>
 801345c:	1e03      	subs	r3, r0, #0
 801345e:	d009      	beq.n	8013474 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013464:	2208      	movs	r2, #8
 8013466:	431a      	orrs	r2, r3
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801346c:	2317      	movs	r3, #23
 801346e:	18fb      	adds	r3, r7, r3
 8013470:	2201      	movs	r2, #1
 8013472:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	69da      	ldr	r2, [r3, #28]
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	491c      	ldr	r1, [pc, #112]	@ (80134f0 <HAL_I2S_DMAStop+0x194>)
 8013480:	400a      	ands	r2, r1
 8013482:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8013484:	2300      	movs	r3, #0
 8013486:	60fb      	str	r3, [r7, #12]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	68db      	ldr	r3, [r3, #12]
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	689b      	ldr	r3, [r3, #8]
 8013496:	60fb      	str	r3, [r7, #12]
 8013498:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	685a      	ldr	r2, [r3, #4]
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	2101      	movs	r1, #1
 80134a6:	438a      	bics	r2, r1
 80134a8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	685a      	ldr	r2, [r3, #4]
 80134ae:	2380      	movs	r3, #128	@ 0x80
 80134b0:	005b      	lsls	r3, r3, #1
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d10e      	bne.n	80134d4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134ba:	2240      	movs	r2, #64	@ 0x40
 80134bc:	431a      	orrs	r2, r3
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2235      	movs	r2, #53	@ 0x35
 80134c6:	2101      	movs	r1, #1
 80134c8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80134ca:	2317      	movs	r3, #23
 80134cc:	18fb      	adds	r3, r7, r3
 80134ce:	2201      	movs	r2, #1
 80134d0:	701a      	strb	r2, [r3, #0]
 80134d2:	e002      	b.n	80134da <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2235      	movs	r2, #53	@ 0x35
 80134de:	2101      	movs	r1, #1
 80134e0:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80134e2:	2317      	movs	r3, #23
 80134e4:	18fb      	adds	r3, r7, r3
 80134e6:	781b      	ldrb	r3, [r3, #0]
}
 80134e8:	0018      	movs	r0, r3
 80134ea:	46bd      	mov	sp, r7
 80134ec:	b006      	add	sp, #24
 80134ee:	bd80      	pop	{r7, pc}
 80134f0:	fffffbff 	.word	0xfffffbff

080134f4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b084      	sub	sp, #16
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013500:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	69db      	ldr	r3, [r3, #28]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d10e      	bne.n	8013528 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	685a      	ldr	r2, [r3, #4]
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	2101      	movs	r1, #1
 8013516:	438a      	bics	r2, r1
 8013518:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2200      	movs	r2, #0
 801351e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	2235      	movs	r2, #53	@ 0x35
 8013524:	2101      	movs	r1, #1
 8013526:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	0018      	movs	r0, r3
 801352c:	f7f9 f954 	bl	800c7d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013530:	46c0      	nop			@ (mov r8, r8)
 8013532:	46bd      	mov	sp, r7
 8013534:	b004      	add	sp, #16
 8013536:	bd80      	pop	{r7, pc}

08013538 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013544:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	0018      	movs	r0, r3
 801354a:	f7f9 f933 	bl	800c7b4 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801354e:	46c0      	nop			@ (mov r8, r8)
 8013550:	46bd      	mov	sp, r7
 8013552:	b004      	add	sp, #16
 8013554:	bd80      	pop	{r7, pc}

08013556 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8013556:	b580      	push	{r7, lr}
 8013558:	b084      	sub	sp, #16
 801355a:	af00      	add	r7, sp, #0
 801355c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013562:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	685a      	ldr	r2, [r3, #4]
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	2103      	movs	r1, #3
 8013570:	438a      	bics	r2, r1
 8013572:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	2200      	movs	r2, #0
 8013578:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	2200      	movs	r2, #0
 801357e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	2235      	movs	r2, #53	@ 0x35
 8013584:	2101      	movs	r1, #1
 8013586:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801358c:	2208      	movs	r2, #8
 801358e:	431a      	orrs	r2, r3
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	0018      	movs	r0, r3
 8013598:	f7f9 f96c 	bl	800c874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801359c:	46c0      	nop			@ (mov r8, r8)
 801359e:	46bd      	mov	sp, r7
 80135a0:	b004      	add	sp, #16
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b086      	sub	sp, #24
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	60b9      	str	r1, [r7, #8]
 80135ae:	603b      	str	r3, [r7, #0]
 80135b0:	1dfb      	adds	r3, r7, #7
 80135b2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80135b4:	f7fb fde2 	bl	800f17c <HAL_GetTick>
 80135b8:	0003      	movs	r3, r0
 80135ba:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80135bc:	e017      	b.n	80135ee <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	3301      	adds	r3, #1
 80135c2:	d014      	beq.n	80135ee <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80135c4:	f7fb fdda 	bl	800f17c <HAL_GetTick>
 80135c8:	0002      	movs	r2, r0
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	1ad3      	subs	r3, r2, r3
 80135ce:	683a      	ldr	r2, [r7, #0]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d902      	bls.n	80135da <I2S_WaitFlagStateUntilTimeout+0x36>
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d109      	bne.n	80135ee <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2235      	movs	r2, #53	@ 0x35
 80135de:	2101      	movs	r1, #1
 80135e0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2234      	movs	r2, #52	@ 0x34
 80135e6:	2100      	movs	r1, #0
 80135e8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80135ea:	2303      	movs	r3, #3
 80135ec:	e00f      	b.n	801360e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	689b      	ldr	r3, [r3, #8]
 80135f4:	68ba      	ldr	r2, [r7, #8]
 80135f6:	4013      	ands	r3, r2
 80135f8:	68ba      	ldr	r2, [r7, #8]
 80135fa:	1ad3      	subs	r3, r2, r3
 80135fc:	425a      	negs	r2, r3
 80135fe:	4153      	adcs	r3, r2
 8013600:	b2db      	uxtb	r3, r3
 8013602:	001a      	movs	r2, r3
 8013604:	1dfb      	adds	r3, r7, #7
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	429a      	cmp	r2, r3
 801360a:	d1d8      	bne.n	80135be <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 801360c:	2300      	movs	r3, #0
}
 801360e:	0018      	movs	r0, r3
 8013610:	46bd      	mov	sp, r7
 8013612:	b006      	add	sp, #24
 8013614:	bd80      	pop	{r7, pc}
	...

08013618 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801361a:	b08b      	sub	sp, #44	@ 0x2c
 801361c:	af06      	add	r7, sp, #24
 801361e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d101      	bne.n	801362a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8013626:	2301      	movs	r3, #1
 8013628:	e0f0      	b.n	801380c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	4a79      	ldr	r2, [pc, #484]	@ (8013814 <HAL_PCD_Init+0x1fc>)
 801362e:	5c9b      	ldrb	r3, [r3, r2]
 8013630:	b2db      	uxtb	r3, r3
 8013632:	2b00      	cmp	r3, #0
 8013634:	d108      	bne.n	8013648 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8013636:	687a      	ldr	r2, [r7, #4]
 8013638:	23aa      	movs	r3, #170	@ 0xaa
 801363a:	009b      	lsls	r3, r3, #2
 801363c:	2100      	movs	r1, #0
 801363e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	0018      	movs	r0, r3
 8013644:	f009 ff4a 	bl	801d4dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	4a72      	ldr	r2, [pc, #456]	@ (8013814 <HAL_PCD_Init+0x1fc>)
 801364c:	2103      	movs	r1, #3
 801364e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	0018      	movs	r0, r3
 8013656:	f005 fefd 	bl	8019454 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801365a:	230f      	movs	r3, #15
 801365c:	18fb      	adds	r3, r7, r3
 801365e:	2200      	movs	r2, #0
 8013660:	701a      	strb	r2, [r3, #0]
 8013662:	e049      	b.n	80136f8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013664:	200f      	movs	r0, #15
 8013666:	183b      	adds	r3, r7, r0
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	6879      	ldr	r1, [r7, #4]
 801366c:	1c5a      	adds	r2, r3, #1
 801366e:	0013      	movs	r3, r2
 8013670:	009b      	lsls	r3, r3, #2
 8013672:	189b      	adds	r3, r3, r2
 8013674:	00db      	lsls	r3, r3, #3
 8013676:	18cb      	adds	r3, r1, r3
 8013678:	3301      	adds	r3, #1
 801367a:	2201      	movs	r2, #1
 801367c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801367e:	183b      	adds	r3, r7, r0
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	6879      	ldr	r1, [r7, #4]
 8013684:	1c5a      	adds	r2, r3, #1
 8013686:	0013      	movs	r3, r2
 8013688:	009b      	lsls	r3, r3, #2
 801368a:	189b      	adds	r3, r3, r2
 801368c:	00db      	lsls	r3, r3, #3
 801368e:	183a      	adds	r2, r7, r0
 8013690:	7812      	ldrb	r2, [r2, #0]
 8013692:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013694:	183b      	adds	r3, r7, r0
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	6879      	ldr	r1, [r7, #4]
 801369a:	1c5a      	adds	r2, r3, #1
 801369c:	0013      	movs	r3, r2
 801369e:	009b      	lsls	r3, r3, #2
 80136a0:	189b      	adds	r3, r3, r2
 80136a2:	00db      	lsls	r3, r3, #3
 80136a4:	18cb      	adds	r3, r1, r3
 80136a6:	3303      	adds	r3, #3
 80136a8:	2200      	movs	r2, #0
 80136aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80136ac:	183b      	adds	r3, r7, r0
 80136ae:	781a      	ldrb	r2, [r3, #0]
 80136b0:	6879      	ldr	r1, [r7, #4]
 80136b2:	0013      	movs	r3, r2
 80136b4:	009b      	lsls	r3, r3, #2
 80136b6:	189b      	adds	r3, r3, r2
 80136b8:	00db      	lsls	r3, r3, #3
 80136ba:	18cb      	adds	r3, r1, r3
 80136bc:	3338      	adds	r3, #56	@ 0x38
 80136be:	2200      	movs	r2, #0
 80136c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80136c2:	183b      	adds	r3, r7, r0
 80136c4:	781a      	ldrb	r2, [r3, #0]
 80136c6:	6879      	ldr	r1, [r7, #4]
 80136c8:	0013      	movs	r3, r2
 80136ca:	009b      	lsls	r3, r3, #2
 80136cc:	189b      	adds	r3, r3, r2
 80136ce:	00db      	lsls	r3, r3, #3
 80136d0:	18cb      	adds	r3, r1, r3
 80136d2:	333c      	adds	r3, #60	@ 0x3c
 80136d4:	2200      	movs	r2, #0
 80136d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80136d8:	183b      	adds	r3, r7, r0
 80136da:	781a      	ldrb	r2, [r3, #0]
 80136dc:	6879      	ldr	r1, [r7, #4]
 80136de:	0013      	movs	r3, r2
 80136e0:	009b      	lsls	r3, r3, #2
 80136e2:	189b      	adds	r3, r3, r2
 80136e4:	00db      	lsls	r3, r3, #3
 80136e6:	18cb      	adds	r3, r1, r3
 80136e8:	3340      	adds	r3, #64	@ 0x40
 80136ea:	2200      	movs	r2, #0
 80136ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80136ee:	183b      	adds	r3, r7, r0
 80136f0:	781a      	ldrb	r2, [r3, #0]
 80136f2:	183b      	adds	r3, r7, r0
 80136f4:	3201      	adds	r2, #1
 80136f6:	701a      	strb	r2, [r3, #0]
 80136f8:	210f      	movs	r1, #15
 80136fa:	187b      	adds	r3, r7, r1
 80136fc:	781a      	ldrb	r2, [r3, #0]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	685b      	ldr	r3, [r3, #4]
 8013702:	429a      	cmp	r2, r3
 8013704:	d3ae      	bcc.n	8013664 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013706:	187b      	adds	r3, r7, r1
 8013708:	2200      	movs	r2, #0
 801370a:	701a      	strb	r2, [r3, #0]
 801370c:	e056      	b.n	80137bc <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801370e:	240f      	movs	r4, #15
 8013710:	193b      	adds	r3, r7, r4
 8013712:	781a      	ldrb	r2, [r3, #0]
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	236a      	movs	r3, #106	@ 0x6a
 8013718:	33ff      	adds	r3, #255	@ 0xff
 801371a:	0019      	movs	r1, r3
 801371c:	0013      	movs	r3, r2
 801371e:	009b      	lsls	r3, r3, #2
 8013720:	189b      	adds	r3, r3, r2
 8013722:	00db      	lsls	r3, r3, #3
 8013724:	18c3      	adds	r3, r0, r3
 8013726:	185b      	adds	r3, r3, r1
 8013728:	2200      	movs	r2, #0
 801372a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801372c:	193b      	adds	r3, r7, r4
 801372e:	781a      	ldrb	r2, [r3, #0]
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	23b4      	movs	r3, #180	@ 0xb4
 8013734:	0059      	lsls	r1, r3, #1
 8013736:	0013      	movs	r3, r2
 8013738:	009b      	lsls	r3, r3, #2
 801373a:	189b      	adds	r3, r3, r2
 801373c:	00db      	lsls	r3, r3, #3
 801373e:	18c3      	adds	r3, r0, r3
 8013740:	185b      	adds	r3, r3, r1
 8013742:	193a      	adds	r2, r7, r4
 8013744:	7812      	ldrb	r2, [r2, #0]
 8013746:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013748:	193b      	adds	r3, r7, r4
 801374a:	781a      	ldrb	r2, [r3, #0]
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	236c      	movs	r3, #108	@ 0x6c
 8013750:	33ff      	adds	r3, #255	@ 0xff
 8013752:	0019      	movs	r1, r3
 8013754:	0013      	movs	r3, r2
 8013756:	009b      	lsls	r3, r3, #2
 8013758:	189b      	adds	r3, r3, r2
 801375a:	00db      	lsls	r3, r3, #3
 801375c:	18c3      	adds	r3, r0, r3
 801375e:	185b      	adds	r3, r3, r1
 8013760:	2200      	movs	r2, #0
 8013762:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013764:	193b      	adds	r3, r7, r4
 8013766:	781a      	ldrb	r2, [r3, #0]
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	23bc      	movs	r3, #188	@ 0xbc
 801376c:	0059      	lsls	r1, r3, #1
 801376e:	0013      	movs	r3, r2
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	189b      	adds	r3, r3, r2
 8013774:	00db      	lsls	r3, r3, #3
 8013776:	18c3      	adds	r3, r0, r3
 8013778:	185b      	adds	r3, r3, r1
 801377a:	2200      	movs	r2, #0
 801377c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801377e:	193b      	adds	r3, r7, r4
 8013780:	781a      	ldrb	r2, [r3, #0]
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	23be      	movs	r3, #190	@ 0xbe
 8013786:	0059      	lsls	r1, r3, #1
 8013788:	0013      	movs	r3, r2
 801378a:	009b      	lsls	r3, r3, #2
 801378c:	189b      	adds	r3, r3, r2
 801378e:	00db      	lsls	r3, r3, #3
 8013790:	18c3      	adds	r3, r0, r3
 8013792:	185b      	adds	r3, r3, r1
 8013794:	2200      	movs	r2, #0
 8013796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013798:	193b      	adds	r3, r7, r4
 801379a:	781a      	ldrb	r2, [r3, #0]
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	23c0      	movs	r3, #192	@ 0xc0
 80137a0:	0059      	lsls	r1, r3, #1
 80137a2:	0013      	movs	r3, r2
 80137a4:	009b      	lsls	r3, r3, #2
 80137a6:	189b      	adds	r3, r3, r2
 80137a8:	00db      	lsls	r3, r3, #3
 80137aa:	18c3      	adds	r3, r0, r3
 80137ac:	185b      	adds	r3, r3, r1
 80137ae:	2200      	movs	r2, #0
 80137b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80137b2:	193b      	adds	r3, r7, r4
 80137b4:	781a      	ldrb	r2, [r3, #0]
 80137b6:	193b      	adds	r3, r7, r4
 80137b8:	3201      	adds	r2, #1
 80137ba:	701a      	strb	r2, [r3, #0]
 80137bc:	230f      	movs	r3, #15
 80137be:	18fb      	adds	r3, r7, r3
 80137c0:	781a      	ldrb	r2, [r3, #0]
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	685b      	ldr	r3, [r3, #4]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d3a1      	bcc.n	801370e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6818      	ldr	r0, [r3, #0]
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	466a      	mov	r2, sp
 80137d2:	0011      	movs	r1, r2
 80137d4:	001a      	movs	r2, r3
 80137d6:	3210      	adds	r2, #16
 80137d8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80137da:	c170      	stmia	r1!, {r4, r5, r6}
 80137dc:	ca30      	ldmia	r2!, {r4, r5}
 80137de:	c130      	stmia	r1!, {r4, r5}
 80137e0:	6859      	ldr	r1, [r3, #4]
 80137e2:	689a      	ldr	r2, [r3, #8]
 80137e4:	68db      	ldr	r3, [r3, #12]
 80137e6:	f005 fe4f 	bl	8019488 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	2224      	movs	r2, #36	@ 0x24
 80137ee:	2100      	movs	r1, #0
 80137f0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4a07      	ldr	r2, [pc, #28]	@ (8013814 <HAL_PCD_Init+0x1fc>)
 80137f6:	2101      	movs	r1, #1
 80137f8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	69db      	ldr	r3, [r3, #28]
 80137fe:	2b01      	cmp	r3, #1
 8013800:	d103      	bne.n	801380a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	0018      	movs	r0, r3
 8013806:	f001 fd23 	bl	8015250 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801380a:	2300      	movs	r3, #0
}
 801380c:	0018      	movs	r0, r3
 801380e:	46bd      	mov	sp, r7
 8013810:	b005      	add	sp, #20
 8013812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013814:	000002a9 	.word	0x000002a9

08013818 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013820:	687a      	ldr	r2, [r7, #4]
 8013822:	23aa      	movs	r3, #170	@ 0xaa
 8013824:	009b      	lsls	r3, r3, #2
 8013826:	5cd3      	ldrb	r3, [r2, r3]
 8013828:	2b01      	cmp	r3, #1
 801382a:	d101      	bne.n	8013830 <HAL_PCD_Start+0x18>
 801382c:	2302      	movs	r3, #2
 801382e:	e014      	b.n	801385a <HAL_PCD_Start+0x42>
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	23aa      	movs	r3, #170	@ 0xaa
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	2101      	movs	r1, #1
 8013838:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	0018      	movs	r0, r3
 8013840:	f005 fdf2 	bl	8019428 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	0018      	movs	r0, r3
 801384a:	f007 fdf5 	bl	801b438 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	23aa      	movs	r3, #170	@ 0xaa
 8013852:	009b      	lsls	r3, r3, #2
 8013854:	2100      	movs	r1, #0
 8013856:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013858:	2300      	movs	r3, #0
}
 801385a:	0018      	movs	r0, r3
 801385c:	46bd      	mov	sp, r7
 801385e:	b002      	add	sp, #8
 8013860:	bd80      	pop	{r7, pc}
	...

08013864 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b084      	sub	sp, #16
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	0018      	movs	r0, r3
 8013872:	f007 fdf7 	bl	801b464 <USB_ReadInterrupts>
 8013876:	0003      	movs	r3, r0
 8013878:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801387a:	68fa      	ldr	r2, [r7, #12]
 801387c:	2380      	movs	r3, #128	@ 0x80
 801387e:	021b      	lsls	r3, r3, #8
 8013880:	4013      	ands	r3, r2
 8013882:	d004      	beq.n	801388e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	0018      	movs	r0, r3
 8013888:	f000 fb62 	bl	8013f50 <PCD_EP_ISR_Handler>

    return;
 801388c:	e11d      	b.n	8013aca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801388e:	68fa      	ldr	r2, [r7, #12]
 8013890:	2380      	movs	r3, #128	@ 0x80
 8013892:	00db      	lsls	r3, r3, #3
 8013894:	4013      	ands	r3, r2
 8013896:	d015      	beq.n	80138c4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	2244      	movs	r2, #68	@ 0x44
 801389e:	5a9b      	ldrh	r3, [r3, r2]
 80138a0:	b29a      	uxth	r2, r3
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	498a      	ldr	r1, [pc, #552]	@ (8013ad0 <HAL_PCD_IRQHandler+0x26c>)
 80138a8:	400a      	ands	r2, r1
 80138aa:	b291      	uxth	r1, r2
 80138ac:	2244      	movs	r2, #68	@ 0x44
 80138ae:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	0018      	movs	r0, r3
 80138b4:	f009 fe95 	bl	801d5e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2100      	movs	r1, #0
 80138bc:	0018      	movs	r0, r3
 80138be:	f000 f915 	bl	8013aec <HAL_PCD_SetAddress>

    return;
 80138c2:	e102      	b.n	8013aca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	2380      	movs	r3, #128	@ 0x80
 80138c8:	01db      	lsls	r3, r3, #7
 80138ca:	4013      	ands	r3, r2
 80138cc:	d00c      	beq.n	80138e8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	2244      	movs	r2, #68	@ 0x44
 80138d4:	5a9b      	ldrh	r3, [r3, r2]
 80138d6:	b29a      	uxth	r2, r3
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	497d      	ldr	r1, [pc, #500]	@ (8013ad4 <HAL_PCD_IRQHandler+0x270>)
 80138de:	400a      	ands	r2, r1
 80138e0:	b291      	uxth	r1, r2
 80138e2:	2244      	movs	r2, #68	@ 0x44
 80138e4:	5299      	strh	r1, [r3, r2]

    return;
 80138e6:	e0f0      	b.n	8013aca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80138e8:	68fa      	ldr	r2, [r7, #12]
 80138ea:	2380      	movs	r3, #128	@ 0x80
 80138ec:	019b      	lsls	r3, r3, #6
 80138ee:	4013      	ands	r3, r2
 80138f0:	d00c      	beq.n	801390c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	2244      	movs	r2, #68	@ 0x44
 80138f8:	5a9b      	ldrh	r3, [r3, r2]
 80138fa:	b29a      	uxth	r2, r3
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4975      	ldr	r1, [pc, #468]	@ (8013ad8 <HAL_PCD_IRQHandler+0x274>)
 8013902:	400a      	ands	r2, r1
 8013904:	b291      	uxth	r1, r2
 8013906:	2244      	movs	r2, #68	@ 0x44
 8013908:	5299      	strh	r1, [r3, r2]

    return;
 801390a:	e0de      	b.n	8013aca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 801390c:	68fa      	ldr	r2, [r7, #12]
 801390e:	2380      	movs	r3, #128	@ 0x80
 8013910:	015b      	lsls	r3, r3, #5
 8013912:	4013      	ands	r3, r2
 8013914:	d038      	beq.n	8013988 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2240      	movs	r2, #64	@ 0x40
 801391c:	5a9b      	ldrh	r3, [r3, r2]
 801391e:	b29a      	uxth	r2, r3
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	2104      	movs	r1, #4
 8013926:	438a      	bics	r2, r1
 8013928:	b291      	uxth	r1, r2
 801392a:	2240      	movs	r2, #64	@ 0x40
 801392c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	2240      	movs	r2, #64	@ 0x40
 8013934:	5a9b      	ldrh	r3, [r3, r2]
 8013936:	b29a      	uxth	r2, r3
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	2108      	movs	r1, #8
 801393e:	438a      	bics	r2, r1
 8013940:	b291      	uxth	r1, r2
 8013942:	2240      	movs	r2, #64	@ 0x40
 8013944:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	23b8      	movs	r3, #184	@ 0xb8
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	5cd3      	ldrb	r3, [r2, r3]
 801394e:	2b01      	cmp	r3, #1
 8013950:	d109      	bne.n	8013966 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8013952:	687a      	ldr	r2, [r7, #4]
 8013954:	23b8      	movs	r3, #184	@ 0xb8
 8013956:	009b      	lsls	r3, r3, #2
 8013958:	2100      	movs	r1, #0
 801395a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2100      	movs	r1, #0
 8013960:	0018      	movs	r0, r3
 8013962:	f001 fc9f 	bl	80152a4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	0018      	movs	r0, r3
 801396a:	f009 fe7b 	bl	801d664 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	2244      	movs	r2, #68	@ 0x44
 8013974:	5a9b      	ldrh	r3, [r3, r2]
 8013976:	b29a      	uxth	r2, r3
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	4957      	ldr	r1, [pc, #348]	@ (8013adc <HAL_PCD_IRQHandler+0x278>)
 801397e:	400a      	ands	r2, r1
 8013980:	b291      	uxth	r1, r2
 8013982:	2244      	movs	r2, #68	@ 0x44
 8013984:	5299      	strh	r1, [r3, r2]

    return;
 8013986:	e0a0      	b.n	8013aca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8013988:	68fa      	ldr	r2, [r7, #12]
 801398a:	2380      	movs	r3, #128	@ 0x80
 801398c:	011b      	lsls	r3, r3, #4
 801398e:	4013      	ands	r3, r2
 8013990:	d028      	beq.n	80139e4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	2240      	movs	r2, #64	@ 0x40
 8013998:	5a9b      	ldrh	r3, [r3, r2]
 801399a:	b29a      	uxth	r2, r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	2108      	movs	r1, #8
 80139a2:	430a      	orrs	r2, r1
 80139a4:	b291      	uxth	r1, r2
 80139a6:	2240      	movs	r2, #64	@ 0x40
 80139a8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	2244      	movs	r2, #68	@ 0x44
 80139b0:	5a9b      	ldrh	r3, [r3, r2]
 80139b2:	b29a      	uxth	r2, r3
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	4949      	ldr	r1, [pc, #292]	@ (8013ae0 <HAL_PCD_IRQHandler+0x27c>)
 80139ba:	400a      	ands	r2, r1
 80139bc:	b291      	uxth	r1, r2
 80139be:	2244      	movs	r2, #68	@ 0x44
 80139c0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	2240      	movs	r2, #64	@ 0x40
 80139c8:	5a9b      	ldrh	r3, [r3, r2]
 80139ca:	b29a      	uxth	r2, r3
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	2104      	movs	r1, #4
 80139d2:	430a      	orrs	r2, r1
 80139d4:	b291      	uxth	r1, r2
 80139d6:	2240      	movs	r2, #64	@ 0x40
 80139d8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	0018      	movs	r0, r3
 80139de:	f009 fe25 	bl	801d62c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80139e2:	e072      	b.n	8013aca <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2280      	movs	r2, #128	@ 0x80
 80139e8:	4013      	ands	r3, r2
 80139ea:	d046      	beq.n	8013a7a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2244      	movs	r2, #68	@ 0x44
 80139f2:	5a9b      	ldrh	r3, [r3, r2]
 80139f4:	b29a      	uxth	r2, r3
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	2180      	movs	r1, #128	@ 0x80
 80139fc:	438a      	bics	r2, r1
 80139fe:	b291      	uxth	r1, r2
 8013a00:	2244      	movs	r2, #68	@ 0x44
 8013a02:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	23b8      	movs	r3, #184	@ 0xb8
 8013a08:	009b      	lsls	r3, r3, #2
 8013a0a:	5cd3      	ldrb	r3, [r2, r3]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d12f      	bne.n	8013a70 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	2240      	movs	r2, #64	@ 0x40
 8013a16:	5a9b      	ldrh	r3, [r3, r2]
 8013a18:	b29a      	uxth	r2, r3
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	2104      	movs	r1, #4
 8013a20:	430a      	orrs	r2, r1
 8013a22:	b291      	uxth	r1, r2
 8013a24:	2240      	movs	r2, #64	@ 0x40
 8013a26:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2240      	movs	r2, #64	@ 0x40
 8013a2e:	5a9b      	ldrh	r3, [r3, r2]
 8013a30:	b29a      	uxth	r2, r3
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	2108      	movs	r1, #8
 8013a38:	430a      	orrs	r2, r1
 8013a3a:	b291      	uxth	r1, r2
 8013a3c:	2240      	movs	r2, #64	@ 0x40
 8013a3e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	23b8      	movs	r3, #184	@ 0xb8
 8013a44:	009b      	lsls	r3, r3, #2
 8013a46:	2101      	movs	r1, #1
 8013a48:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2254      	movs	r2, #84	@ 0x54
 8013a50:	5a9b      	ldrh	r3, [r3, r2]
 8013a52:	b29b      	uxth	r3, r3
 8013a54:	089b      	lsrs	r3, r3, #2
 8013a56:	223c      	movs	r2, #60	@ 0x3c
 8013a58:	4013      	ands	r3, r2
 8013a5a:	0019      	movs	r1, r3
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	23b9      	movs	r3, #185	@ 0xb9
 8013a60:	009b      	lsls	r3, r3, #2
 8013a62:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2101      	movs	r1, #1
 8013a68:	0018      	movs	r0, r3
 8013a6a:	f001 fc1b 	bl	80152a4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8013a6e:	e02c      	b.n	8013aca <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	0018      	movs	r0, r3
 8013a74:	f009 fdda 	bl	801d62c <HAL_PCD_SuspendCallback>
    return;
 8013a78:	e027      	b.n	8013aca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8013a7a:	68fa      	ldr	r2, [r7, #12]
 8013a7c:	2380      	movs	r3, #128	@ 0x80
 8013a7e:	009b      	lsls	r3, r3, #2
 8013a80:	4013      	ands	r3, r2
 8013a82:	d010      	beq.n	8013aa6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	2244      	movs	r2, #68	@ 0x44
 8013a8a:	5a9b      	ldrh	r3, [r3, r2]
 8013a8c:	b29a      	uxth	r2, r3
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	4914      	ldr	r1, [pc, #80]	@ (8013ae4 <HAL_PCD_IRQHandler+0x280>)
 8013a94:	400a      	ands	r2, r1
 8013a96:	b291      	uxth	r1, r2
 8013a98:	2244      	movs	r2, #68	@ 0x44
 8013a9a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	0018      	movs	r0, r3
 8013aa0:	f009 fd90 	bl	801d5c4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013aa4:	e011      	b.n	8013aca <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8013aa6:	68fa      	ldr	r2, [r7, #12]
 8013aa8:	2380      	movs	r3, #128	@ 0x80
 8013aaa:	005b      	lsls	r3, r3, #1
 8013aac:	4013      	ands	r3, r2
 8013aae:	d00c      	beq.n	8013aca <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	2244      	movs	r2, #68	@ 0x44
 8013ab6:	5a9b      	ldrh	r3, [r3, r2]
 8013ab8:	b29a      	uxth	r2, r3
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	490a      	ldr	r1, [pc, #40]	@ (8013ae8 <HAL_PCD_IRQHandler+0x284>)
 8013ac0:	400a      	ands	r2, r1
 8013ac2:	b291      	uxth	r1, r2
 8013ac4:	2244      	movs	r2, #68	@ 0x44
 8013ac6:	5299      	strh	r1, [r3, r2]

    return;
 8013ac8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8013aca:	46bd      	mov	sp, r7
 8013acc:	b004      	add	sp, #16
 8013ace:	bd80      	pop	{r7, pc}
 8013ad0:	fffffbff 	.word	0xfffffbff
 8013ad4:	ffffbfff 	.word	0xffffbfff
 8013ad8:	ffffdfff 	.word	0xffffdfff
 8013adc:	ffffefff 	.word	0xffffefff
 8013ae0:	fffff7ff 	.word	0xfffff7ff
 8013ae4:	fffffdff 	.word	0xfffffdff
 8013ae8:	fffffeff 	.word	0xfffffeff

08013aec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	000a      	movs	r2, r1
 8013af6:	1cfb      	adds	r3, r7, #3
 8013af8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8013afa:	687a      	ldr	r2, [r7, #4]
 8013afc:	23aa      	movs	r3, #170	@ 0xaa
 8013afe:	009b      	lsls	r3, r3, #2
 8013b00:	5cd3      	ldrb	r3, [r2, r3]
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	d101      	bne.n	8013b0a <HAL_PCD_SetAddress+0x1e>
 8013b06:	2302      	movs	r3, #2
 8013b08:	e017      	b.n	8013b3a <HAL_PCD_SetAddress+0x4e>
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	23aa      	movs	r3, #170	@ 0xaa
 8013b0e:	009b      	lsls	r3, r3, #2
 8013b10:	2101      	movs	r1, #1
 8013b12:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	1cfa      	adds	r2, r7, #3
 8013b18:	2124      	movs	r1, #36	@ 0x24
 8013b1a:	7812      	ldrb	r2, [r2, #0]
 8013b1c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681a      	ldr	r2, [r3, #0]
 8013b22:	1cfb      	adds	r3, r7, #3
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	0019      	movs	r1, r3
 8013b28:	0010      	movs	r0, r2
 8013b2a:	f007 fc71 	bl	801b410 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	23aa      	movs	r3, #170	@ 0xaa
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	2100      	movs	r1, #0
 8013b36:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013b38:	2300      	movs	r3, #0
}
 8013b3a:	0018      	movs	r0, r3
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	b002      	add	sp, #8
 8013b40:	bd80      	pop	{r7, pc}

08013b42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8013b42:	b590      	push	{r4, r7, lr}
 8013b44:	b085      	sub	sp, #20
 8013b46:	af00      	add	r7, sp, #0
 8013b48:	6078      	str	r0, [r7, #4]
 8013b4a:	000c      	movs	r4, r1
 8013b4c:	0010      	movs	r0, r2
 8013b4e:	0019      	movs	r1, r3
 8013b50:	1cfb      	adds	r3, r7, #3
 8013b52:	1c22      	adds	r2, r4, #0
 8013b54:	701a      	strb	r2, [r3, #0]
 8013b56:	003b      	movs	r3, r7
 8013b58:	1c02      	adds	r2, r0, #0
 8013b5a:	801a      	strh	r2, [r3, #0]
 8013b5c:	1cbb      	adds	r3, r7, #2
 8013b5e:	1c0a      	adds	r2, r1, #0
 8013b60:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8013b62:	230b      	movs	r3, #11
 8013b64:	18fb      	adds	r3, r7, r3
 8013b66:	2200      	movs	r2, #0
 8013b68:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013b6a:	1cfb      	adds	r3, r7, #3
 8013b6c:	781b      	ldrb	r3, [r3, #0]
 8013b6e:	b25b      	sxtb	r3, r3
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	da0f      	bge.n	8013b94 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013b74:	1cfb      	adds	r3, r7, #3
 8013b76:	781b      	ldrb	r3, [r3, #0]
 8013b78:	2207      	movs	r2, #7
 8013b7a:	4013      	ands	r3, r2
 8013b7c:	1c5a      	adds	r2, r3, #1
 8013b7e:	0013      	movs	r3, r2
 8013b80:	009b      	lsls	r3, r3, #2
 8013b82:	189b      	adds	r3, r3, r2
 8013b84:	00db      	lsls	r3, r3, #3
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	18d3      	adds	r3, r2, r3
 8013b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	2201      	movs	r2, #1
 8013b90:	705a      	strb	r2, [r3, #1]
 8013b92:	e00f      	b.n	8013bb4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013b94:	1cfb      	adds	r3, r7, #3
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	2207      	movs	r2, #7
 8013b9a:	401a      	ands	r2, r3
 8013b9c:	0013      	movs	r3, r2
 8013b9e:	009b      	lsls	r3, r3, #2
 8013ba0:	189b      	adds	r3, r3, r2
 8013ba2:	00db      	lsls	r3, r3, #3
 8013ba4:	3369      	adds	r3, #105	@ 0x69
 8013ba6:	33ff      	adds	r3, #255	@ 0xff
 8013ba8:	687a      	ldr	r2, [r7, #4]
 8013baa:	18d3      	adds	r3, r2, r3
 8013bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8013bb4:	1cfb      	adds	r3, r7, #3
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	2207      	movs	r2, #7
 8013bba:	4013      	ands	r3, r2
 8013bbc:	b2da      	uxtb	r2, r3
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8013bc2:	003b      	movs	r3, r7
 8013bc4:	881a      	ldrh	r2, [r3, #0]
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	1cba      	adds	r2, r7, #2
 8013bce:	7812      	ldrb	r2, [r2, #0]
 8013bd0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8013bd2:	1cbb      	adds	r3, r7, #2
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	2b02      	cmp	r3, #2
 8013bd8:	d102      	bne.n	8013be0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	2200      	movs	r2, #0
 8013bde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	23aa      	movs	r3, #170	@ 0xaa
 8013be4:	009b      	lsls	r3, r3, #2
 8013be6:	5cd3      	ldrb	r3, [r2, r3]
 8013be8:	2b01      	cmp	r3, #1
 8013bea:	d101      	bne.n	8013bf0 <HAL_PCD_EP_Open+0xae>
 8013bec:	2302      	movs	r3, #2
 8013bee:	e013      	b.n	8013c18 <HAL_PCD_EP_Open+0xd6>
 8013bf0:	687a      	ldr	r2, [r7, #4]
 8013bf2:	23aa      	movs	r3, #170	@ 0xaa
 8013bf4:	009b      	lsls	r3, r3, #2
 8013bf6:	2101      	movs	r1, #1
 8013bf8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	68fa      	ldr	r2, [r7, #12]
 8013c00:	0011      	movs	r1, r2
 8013c02:	0018      	movs	r0, r3
 8013c04:	f005 fc68 	bl	80194d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013c08:	687a      	ldr	r2, [r7, #4]
 8013c0a:	23aa      	movs	r3, #170	@ 0xaa
 8013c0c:	009b      	lsls	r3, r3, #2
 8013c0e:	2100      	movs	r1, #0
 8013c10:	54d1      	strb	r1, [r2, r3]

  return ret;
 8013c12:	230b      	movs	r3, #11
 8013c14:	18fb      	adds	r3, r7, r3
 8013c16:	781b      	ldrb	r3, [r3, #0]
}
 8013c18:	0018      	movs	r0, r3
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	b005      	add	sp, #20
 8013c1e:	bd90      	pop	{r4, r7, pc}

08013c20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b084      	sub	sp, #16
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	000a      	movs	r2, r1
 8013c2a:	1cfb      	adds	r3, r7, #3
 8013c2c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013c2e:	1cfb      	adds	r3, r7, #3
 8013c30:	781b      	ldrb	r3, [r3, #0]
 8013c32:	b25b      	sxtb	r3, r3
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	da0f      	bge.n	8013c58 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013c38:	1cfb      	adds	r3, r7, #3
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	2207      	movs	r2, #7
 8013c3e:	4013      	ands	r3, r2
 8013c40:	1c5a      	adds	r2, r3, #1
 8013c42:	0013      	movs	r3, r2
 8013c44:	009b      	lsls	r3, r3, #2
 8013c46:	189b      	adds	r3, r3, r2
 8013c48:	00db      	lsls	r3, r3, #3
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	18d3      	adds	r3, r2, r3
 8013c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	2201      	movs	r2, #1
 8013c54:	705a      	strb	r2, [r3, #1]
 8013c56:	e00f      	b.n	8013c78 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013c58:	1cfb      	adds	r3, r7, #3
 8013c5a:	781b      	ldrb	r3, [r3, #0]
 8013c5c:	2207      	movs	r2, #7
 8013c5e:	401a      	ands	r2, r3
 8013c60:	0013      	movs	r3, r2
 8013c62:	009b      	lsls	r3, r3, #2
 8013c64:	189b      	adds	r3, r3, r2
 8013c66:	00db      	lsls	r3, r3, #3
 8013c68:	3369      	adds	r3, #105	@ 0x69
 8013c6a:	33ff      	adds	r3, #255	@ 0xff
 8013c6c:	687a      	ldr	r2, [r7, #4]
 8013c6e:	18d3      	adds	r3, r2, r3
 8013c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	2200      	movs	r2, #0
 8013c76:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8013c78:	1cfb      	adds	r3, r7, #3
 8013c7a:	781b      	ldrb	r3, [r3, #0]
 8013c7c:	2207      	movs	r2, #7
 8013c7e:	4013      	ands	r3, r2
 8013c80:	b2da      	uxtb	r2, r3
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013c86:	687a      	ldr	r2, [r7, #4]
 8013c88:	23aa      	movs	r3, #170	@ 0xaa
 8013c8a:	009b      	lsls	r3, r3, #2
 8013c8c:	5cd3      	ldrb	r3, [r2, r3]
 8013c8e:	2b01      	cmp	r3, #1
 8013c90:	d101      	bne.n	8013c96 <HAL_PCD_EP_Close+0x76>
 8013c92:	2302      	movs	r3, #2
 8013c94:	e011      	b.n	8013cba <HAL_PCD_EP_Close+0x9a>
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	23aa      	movs	r3, #170	@ 0xaa
 8013c9a:	009b      	lsls	r3, r3, #2
 8013c9c:	2101      	movs	r1, #1
 8013c9e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	68fa      	ldr	r2, [r7, #12]
 8013ca6:	0011      	movs	r1, r2
 8013ca8:	0018      	movs	r0, r3
 8013caa:	f005 ffb7 	bl	8019c1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013cae:	687a      	ldr	r2, [r7, #4]
 8013cb0:	23aa      	movs	r3, #170	@ 0xaa
 8013cb2:	009b      	lsls	r3, r3, #2
 8013cb4:	2100      	movs	r1, #0
 8013cb6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8013cb8:	2300      	movs	r3, #0
}
 8013cba:	0018      	movs	r0, r3
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	b004      	add	sp, #16
 8013cc0:	bd80      	pop	{r7, pc}

08013cc2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013cc2:	b580      	push	{r7, lr}
 8013cc4:	b086      	sub	sp, #24
 8013cc6:	af00      	add	r7, sp, #0
 8013cc8:	60f8      	str	r0, [r7, #12]
 8013cca:	607a      	str	r2, [r7, #4]
 8013ccc:	603b      	str	r3, [r7, #0]
 8013cce:	200b      	movs	r0, #11
 8013cd0:	183b      	adds	r3, r7, r0
 8013cd2:	1c0a      	adds	r2, r1, #0
 8013cd4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013cd6:	0001      	movs	r1, r0
 8013cd8:	187b      	adds	r3, r7, r1
 8013cda:	781b      	ldrb	r3, [r3, #0]
 8013cdc:	2207      	movs	r2, #7
 8013cde:	401a      	ands	r2, r3
 8013ce0:	0013      	movs	r3, r2
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	189b      	adds	r3, r3, r2
 8013ce6:	00db      	lsls	r3, r3, #3
 8013ce8:	3369      	adds	r3, #105	@ 0x69
 8013cea:	33ff      	adds	r3, #255	@ 0xff
 8013cec:	68fa      	ldr	r2, [r7, #12]
 8013cee:	18d3      	adds	r3, r2, r3
 8013cf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	687a      	ldr	r2, [r7, #4]
 8013cf6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	683a      	ldr	r2, [r7, #0]
 8013cfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	2200      	movs	r2, #0
 8013d02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	2200      	movs	r2, #0
 8013d08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013d0a:	187b      	adds	r3, r7, r1
 8013d0c:	781b      	ldrb	r3, [r3, #0]
 8013d0e:	2207      	movs	r2, #7
 8013d10:	4013      	ands	r3, r2
 8013d12:	b2da      	uxtb	r2, r3
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	697a      	ldr	r2, [r7, #20]
 8013d1e:	0011      	movs	r1, r2
 8013d20:	0018      	movs	r0, r3
 8013d22:	f006 f93b 	bl	8019f9c <USB_EPStartXfer>

  return HAL_OK;
 8013d26:	2300      	movs	r3, #0
}
 8013d28:	0018      	movs	r0, r3
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	b006      	add	sp, #24
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b082      	sub	sp, #8
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
 8013d38:	000a      	movs	r2, r1
 8013d3a:	1cfb      	adds	r3, r7, #3
 8013d3c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013d3e:	1cfb      	adds	r3, r7, #3
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	2207      	movs	r2, #7
 8013d44:	401a      	ands	r2, r3
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	23c2      	movs	r3, #194	@ 0xc2
 8013d4a:	0059      	lsls	r1, r3, #1
 8013d4c:	0013      	movs	r3, r2
 8013d4e:	009b      	lsls	r3, r3, #2
 8013d50:	189b      	adds	r3, r3, r2
 8013d52:	00db      	lsls	r3, r3, #3
 8013d54:	18c3      	adds	r3, r0, r3
 8013d56:	185b      	adds	r3, r3, r1
 8013d58:	681b      	ldr	r3, [r3, #0]
}
 8013d5a:	0018      	movs	r0, r3
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	b002      	add	sp, #8
 8013d60:	bd80      	pop	{r7, pc}

08013d62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013d62:	b580      	push	{r7, lr}
 8013d64:	b086      	sub	sp, #24
 8013d66:	af00      	add	r7, sp, #0
 8013d68:	60f8      	str	r0, [r7, #12]
 8013d6a:	607a      	str	r2, [r7, #4]
 8013d6c:	603b      	str	r3, [r7, #0]
 8013d6e:	200b      	movs	r0, #11
 8013d70:	183b      	adds	r3, r7, r0
 8013d72:	1c0a      	adds	r2, r1, #0
 8013d74:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013d76:	183b      	adds	r3, r7, r0
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	2207      	movs	r2, #7
 8013d7c:	4013      	ands	r3, r2
 8013d7e:	1c5a      	adds	r2, r3, #1
 8013d80:	0013      	movs	r3, r2
 8013d82:	009b      	lsls	r3, r3, #2
 8013d84:	189b      	adds	r3, r3, r2
 8013d86:	00db      	lsls	r3, r3, #3
 8013d88:	68fa      	ldr	r2, [r7, #12]
 8013d8a:	18d3      	adds	r3, r2, r3
 8013d8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	687a      	ldr	r2, [r7, #4]
 8013d92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	683a      	ldr	r2, [r7, #0]
 8013d98:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8013d9a:	697b      	ldr	r3, [r7, #20]
 8013d9c:	2224      	movs	r2, #36	@ 0x24
 8013d9e:	2101      	movs	r1, #1
 8013da0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	683a      	ldr	r2, [r7, #0]
 8013da6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	2200      	movs	r2, #0
 8013dac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	2201      	movs	r2, #1
 8013db2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013db4:	183b      	adds	r3, r7, r0
 8013db6:	781b      	ldrb	r3, [r3, #0]
 8013db8:	2207      	movs	r2, #7
 8013dba:	4013      	ands	r3, r2
 8013dbc:	b2da      	uxtb	r2, r3
 8013dbe:	697b      	ldr	r3, [r7, #20]
 8013dc0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	697a      	ldr	r2, [r7, #20]
 8013dc8:	0011      	movs	r1, r2
 8013dca:	0018      	movs	r0, r3
 8013dcc:	f006 f8e6 	bl	8019f9c <USB_EPStartXfer>

  return HAL_OK;
 8013dd0:	2300      	movs	r3, #0
}
 8013dd2:	0018      	movs	r0, r3
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	b006      	add	sp, #24
 8013dd8:	bd80      	pop	{r7, pc}

08013dda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b084      	sub	sp, #16
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	6078      	str	r0, [r7, #4]
 8013de2:	000a      	movs	r2, r1
 8013de4:	1cfb      	adds	r3, r7, #3
 8013de6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8013de8:	1cfb      	adds	r3, r7, #3
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	2207      	movs	r2, #7
 8013dee:	401a      	ands	r2, r3
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	685b      	ldr	r3, [r3, #4]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d901      	bls.n	8013dfc <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8013df8:	2301      	movs	r3, #1
 8013dfa:	e046      	b.n	8013e8a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013dfc:	1cfb      	adds	r3, r7, #3
 8013dfe:	781b      	ldrb	r3, [r3, #0]
 8013e00:	b25b      	sxtb	r3, r3
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	da0f      	bge.n	8013e26 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013e06:	1cfb      	adds	r3, r7, #3
 8013e08:	781b      	ldrb	r3, [r3, #0]
 8013e0a:	2207      	movs	r2, #7
 8013e0c:	4013      	ands	r3, r2
 8013e0e:	1c5a      	adds	r2, r3, #1
 8013e10:	0013      	movs	r3, r2
 8013e12:	009b      	lsls	r3, r3, #2
 8013e14:	189b      	adds	r3, r3, r2
 8013e16:	00db      	lsls	r3, r3, #3
 8013e18:	687a      	ldr	r2, [r7, #4]
 8013e1a:	18d3      	adds	r3, r2, r3
 8013e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2201      	movs	r2, #1
 8013e22:	705a      	strb	r2, [r3, #1]
 8013e24:	e00d      	b.n	8013e42 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013e26:	1cfb      	adds	r3, r7, #3
 8013e28:	781a      	ldrb	r2, [r3, #0]
 8013e2a:	0013      	movs	r3, r2
 8013e2c:	009b      	lsls	r3, r3, #2
 8013e2e:	189b      	adds	r3, r3, r2
 8013e30:	00db      	lsls	r3, r3, #3
 8013e32:	3369      	adds	r3, #105	@ 0x69
 8013e34:	33ff      	adds	r3, #255	@ 0xff
 8013e36:	687a      	ldr	r2, [r7, #4]
 8013e38:	18d3      	adds	r3, r2, r3
 8013e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	2200      	movs	r2, #0
 8013e40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	2201      	movs	r2, #1
 8013e46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013e48:	1cfb      	adds	r3, r7, #3
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	2207      	movs	r2, #7
 8013e4e:	4013      	ands	r3, r2
 8013e50:	b2da      	uxtb	r2, r3
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013e56:	687a      	ldr	r2, [r7, #4]
 8013e58:	23aa      	movs	r3, #170	@ 0xaa
 8013e5a:	009b      	lsls	r3, r3, #2
 8013e5c:	5cd3      	ldrb	r3, [r2, r3]
 8013e5e:	2b01      	cmp	r3, #1
 8013e60:	d101      	bne.n	8013e66 <HAL_PCD_EP_SetStall+0x8c>
 8013e62:	2302      	movs	r3, #2
 8013e64:	e011      	b.n	8013e8a <HAL_PCD_EP_SetStall+0xb0>
 8013e66:	687a      	ldr	r2, [r7, #4]
 8013e68:	23aa      	movs	r3, #170	@ 0xaa
 8013e6a:	009b      	lsls	r3, r3, #2
 8013e6c:	2101      	movs	r1, #1
 8013e6e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	68fa      	ldr	r2, [r7, #12]
 8013e76:	0011      	movs	r1, r2
 8013e78:	0018      	movs	r0, r3
 8013e7a:	f007 f9c7 	bl	801b20c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8013e7e:	687a      	ldr	r2, [r7, #4]
 8013e80:	23aa      	movs	r3, #170	@ 0xaa
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	2100      	movs	r1, #0
 8013e86:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	0018      	movs	r0, r3
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	b004      	add	sp, #16
 8013e90:	bd80      	pop	{r7, pc}

08013e92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b084      	sub	sp, #16
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	6078      	str	r0, [r7, #4]
 8013e9a:	000a      	movs	r2, r1
 8013e9c:	1cfb      	adds	r3, r7, #3
 8013e9e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8013ea0:	1cfb      	adds	r3, r7, #3
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	220f      	movs	r2, #15
 8013ea6:	401a      	ands	r2, r3
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	685b      	ldr	r3, [r3, #4]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d901      	bls.n	8013eb4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	e048      	b.n	8013f46 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013eb4:	1cfb      	adds	r3, r7, #3
 8013eb6:	781b      	ldrb	r3, [r3, #0]
 8013eb8:	b25b      	sxtb	r3, r3
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	da0f      	bge.n	8013ede <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013ebe:	1cfb      	adds	r3, r7, #3
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	2207      	movs	r2, #7
 8013ec4:	4013      	ands	r3, r2
 8013ec6:	1c5a      	adds	r2, r3, #1
 8013ec8:	0013      	movs	r3, r2
 8013eca:	009b      	lsls	r3, r3, #2
 8013ecc:	189b      	adds	r3, r3, r2
 8013ece:	00db      	lsls	r3, r3, #3
 8013ed0:	687a      	ldr	r2, [r7, #4]
 8013ed2:	18d3      	adds	r3, r2, r3
 8013ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2201      	movs	r2, #1
 8013eda:	705a      	strb	r2, [r3, #1]
 8013edc:	e00f      	b.n	8013efe <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013ede:	1cfb      	adds	r3, r7, #3
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	2207      	movs	r2, #7
 8013ee4:	401a      	ands	r2, r3
 8013ee6:	0013      	movs	r3, r2
 8013ee8:	009b      	lsls	r3, r3, #2
 8013eea:	189b      	adds	r3, r3, r2
 8013eec:	00db      	lsls	r3, r3, #3
 8013eee:	3369      	adds	r3, #105	@ 0x69
 8013ef0:	33ff      	adds	r3, #255	@ 0xff
 8013ef2:	687a      	ldr	r2, [r7, #4]
 8013ef4:	18d3      	adds	r3, r2, r3
 8013ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	2200      	movs	r2, #0
 8013efc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	2200      	movs	r2, #0
 8013f02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013f04:	1cfb      	adds	r3, r7, #3
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	2207      	movs	r2, #7
 8013f0a:	4013      	ands	r3, r2
 8013f0c:	b2da      	uxtb	r2, r3
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	23aa      	movs	r3, #170	@ 0xaa
 8013f16:	009b      	lsls	r3, r3, #2
 8013f18:	5cd3      	ldrb	r3, [r2, r3]
 8013f1a:	2b01      	cmp	r3, #1
 8013f1c:	d101      	bne.n	8013f22 <HAL_PCD_EP_ClrStall+0x90>
 8013f1e:	2302      	movs	r3, #2
 8013f20:	e011      	b.n	8013f46 <HAL_PCD_EP_ClrStall+0xb4>
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	23aa      	movs	r3, #170	@ 0xaa
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	2101      	movs	r1, #1
 8013f2a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	68fa      	ldr	r2, [r7, #12]
 8013f32:	0011      	movs	r1, r2
 8013f34:	0018      	movs	r0, r3
 8013f36:	f007 f9b9 	bl	801b2ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	23aa      	movs	r3, #170	@ 0xaa
 8013f3e:	009b      	lsls	r3, r3, #2
 8013f40:	2100      	movs	r1, #0
 8013f42:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013f44:	2300      	movs	r3, #0
}
 8013f46:	0018      	movs	r0, r3
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	b004      	add	sp, #16
 8013f4c:	bd80      	pop	{r7, pc}
	...

08013f50 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013f50:	b5b0      	push	{r4, r5, r7, lr}
 8013f52:	b096      	sub	sp, #88	@ 0x58
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013f58:	f000 fbec 	bl	8014734 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681a      	ldr	r2, [r3, #0]
 8013f60:	204e      	movs	r0, #78	@ 0x4e
 8013f62:	183b      	adds	r3, r7, r0
 8013f64:	2144      	movs	r1, #68	@ 0x44
 8013f66:	5a52      	ldrh	r2, [r2, r1]
 8013f68:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013f6a:	183b      	adds	r3, r7, r0
 8013f6c:	881b      	ldrh	r3, [r3, #0]
 8013f6e:	b2da      	uxtb	r2, r3
 8013f70:	244d      	movs	r4, #77	@ 0x4d
 8013f72:	193b      	adds	r3, r7, r4
 8013f74:	210f      	movs	r1, #15
 8013f76:	400a      	ands	r2, r1
 8013f78:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013f7a:	193b      	adds	r3, r7, r4
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d000      	beq.n	8013f84 <PCD_EP_ISR_Handler+0x34>
 8013f82:	e18f      	b.n	80142a4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013f84:	183b      	adds	r3, r7, r0
 8013f86:	881b      	ldrh	r3, [r3, #0]
 8013f88:	2210      	movs	r2, #16
 8013f8a:	4013      	ands	r3, r2
 8013f8c:	d155      	bne.n	801403a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	881b      	ldrh	r3, [r3, #0]
 8013f94:	b29a      	uxth	r2, r3
 8013f96:	200e      	movs	r0, #14
 8013f98:	183b      	adds	r3, r7, r0
 8013f9a:	49bb      	ldr	r1, [pc, #748]	@ (8014288 <PCD_EP_ISR_Handler+0x338>)
 8013f9c:	400a      	ands	r2, r1
 8013f9e:	801a      	strh	r2, [r3, #0]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	183a      	adds	r2, r7, r0
 8013fa6:	8812      	ldrh	r2, [r2, #0]
 8013fa8:	49b8      	ldr	r1, [pc, #736]	@ (801428c <PCD_EP_ISR_Handler+0x33c>)
 8013faa:	430a      	orrs	r2, r1
 8013fac:	b292      	uxth	r2, r2
 8013fae:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	3328      	adds	r3, #40	@ 0x28
 8013fb4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	2250      	movs	r2, #80	@ 0x50
 8013fbc:	5a9b      	ldrh	r3, [r3, r2]
 8013fbe:	b29b      	uxth	r3, r3
 8013fc0:	001a      	movs	r2, r3
 8013fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fc4:	781b      	ldrb	r3, [r3, #0]
 8013fc6:	00db      	lsls	r3, r3, #3
 8013fc8:	18d2      	adds	r2, r2, r3
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	18d3      	adds	r3, r2, r3
 8013fd0:	4aaf      	ldr	r2, [pc, #700]	@ (8014290 <PCD_EP_ISR_Handler+0x340>)
 8013fd2:	4694      	mov	ip, r2
 8013fd4:	4463      	add	r3, ip
 8013fd6:	881b      	ldrh	r3, [r3, #0]
 8013fd8:	059b      	lsls	r3, r3, #22
 8013fda:	0d9a      	lsrs	r2, r3, #22
 8013fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fe2:	695a      	ldr	r2, [r3, #20]
 8013fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fe6:	69db      	ldr	r3, [r3, #28]
 8013fe8:	18d2      	adds	r2, r2, r3
 8013fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	2100      	movs	r1, #0
 8013ff2:	0018      	movs	r0, r3
 8013ff4:	f009 fac8 	bl	801d588 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2224      	movs	r2, #36	@ 0x24
 8013ffc:	5c9b      	ldrb	r3, [r3, r2]
 8013ffe:	b2db      	uxtb	r3, r3
 8014000:	2b00      	cmp	r3, #0
 8014002:	d101      	bne.n	8014008 <PCD_EP_ISR_Handler+0xb8>
 8014004:	f000 fb96 	bl	8014734 <PCD_EP_ISR_Handler+0x7e4>
 8014008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801400a:	699b      	ldr	r3, [r3, #24]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d001      	beq.n	8014014 <PCD_EP_ISR_Handler+0xc4>
 8014010:	f000 fb90 	bl	8014734 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	2224      	movs	r2, #36	@ 0x24
 8014018:	5c9b      	ldrb	r3, [r3, r2]
 801401a:	b2db      	uxtb	r3, r3
 801401c:	2280      	movs	r2, #128	@ 0x80
 801401e:	4252      	negs	r2, r2
 8014020:	4313      	orrs	r3, r2
 8014022:	b2da      	uxtb	r2, r3
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	0011      	movs	r1, r2
 801402a:	224c      	movs	r2, #76	@ 0x4c
 801402c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2224      	movs	r2, #36	@ 0x24
 8014032:	2100      	movs	r1, #0
 8014034:	5499      	strb	r1, [r3, r2]
 8014036:	f000 fb7d 	bl	8014734 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	3369      	adds	r3, #105	@ 0x69
 801403e:	33ff      	adds	r3, #255	@ 0xff
 8014040:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681a      	ldr	r2, [r3, #0]
 8014046:	214a      	movs	r1, #74	@ 0x4a
 8014048:	187b      	adds	r3, r7, r1
 801404a:	8812      	ldrh	r2, [r2, #0]
 801404c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801404e:	187b      	adds	r3, r7, r1
 8014050:	881a      	ldrh	r2, [r3, #0]
 8014052:	2380      	movs	r3, #128	@ 0x80
 8014054:	011b      	lsls	r3, r3, #4
 8014056:	4013      	ands	r3, r2
 8014058:	d037      	beq.n	80140ca <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	2250      	movs	r2, #80	@ 0x50
 8014060:	5a9b      	ldrh	r3, [r3, r2]
 8014062:	b29b      	uxth	r3, r3
 8014064:	001a      	movs	r2, r3
 8014066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014068:	781b      	ldrb	r3, [r3, #0]
 801406a:	00db      	lsls	r3, r3, #3
 801406c:	18d2      	adds	r2, r2, r3
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	18d3      	adds	r3, r2, r3
 8014074:	4a87      	ldr	r2, [pc, #540]	@ (8014294 <PCD_EP_ISR_Handler+0x344>)
 8014076:	4694      	mov	ip, r2
 8014078:	4463      	add	r3, ip
 801407a:	881b      	ldrh	r3, [r3, #0]
 801407c:	059b      	lsls	r3, r3, #22
 801407e:	0d9a      	lsrs	r2, r3, #22
 8014080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014082:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6818      	ldr	r0, [r3, #0]
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	22ac      	movs	r2, #172	@ 0xac
 801408c:	0092      	lsls	r2, r2, #2
 801408e:	1899      	adds	r1, r3, r2
 8014090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014092:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8014094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014096:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8014098:	b29b      	uxth	r3, r3
 801409a:	f007 fa3a 	bl	801b512 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	881b      	ldrh	r3, [r3, #0]
 80140a4:	b29a      	uxth	r2, r3
 80140a6:	2010      	movs	r0, #16
 80140a8:	183b      	adds	r3, r7, r0
 80140aa:	497b      	ldr	r1, [pc, #492]	@ (8014298 <PCD_EP_ISR_Handler+0x348>)
 80140ac:	400a      	ands	r2, r1
 80140ae:	801a      	strh	r2, [r3, #0]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	183a      	adds	r2, r7, r0
 80140b6:	8812      	ldrh	r2, [r2, #0]
 80140b8:	2180      	movs	r1, #128	@ 0x80
 80140ba:	430a      	orrs	r2, r1
 80140bc:	b292      	uxth	r2, r2
 80140be:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	0018      	movs	r0, r3
 80140c4:	f009 fa2a 	bl	801d51c <HAL_PCD_SetupStageCallback>
 80140c8:	e334      	b.n	8014734 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80140ca:	234a      	movs	r3, #74	@ 0x4a
 80140cc:	18fb      	adds	r3, r7, r3
 80140ce:	2200      	movs	r2, #0
 80140d0:	5e9b      	ldrsh	r3, [r3, r2]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	db00      	blt.n	80140d8 <PCD_EP_ISR_Handler+0x188>
 80140d6:	e32d      	b.n	8014734 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	881b      	ldrh	r3, [r3, #0]
 80140de:	b29a      	uxth	r2, r3
 80140e0:	201e      	movs	r0, #30
 80140e2:	183b      	adds	r3, r7, r0
 80140e4:	496c      	ldr	r1, [pc, #432]	@ (8014298 <PCD_EP_ISR_Handler+0x348>)
 80140e6:	400a      	ands	r2, r1
 80140e8:	801a      	strh	r2, [r3, #0]
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	183a      	adds	r2, r7, r0
 80140f0:	8812      	ldrh	r2, [r2, #0]
 80140f2:	2180      	movs	r1, #128	@ 0x80
 80140f4:	430a      	orrs	r2, r1
 80140f6:	b292      	uxth	r2, r2
 80140f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	2250      	movs	r2, #80	@ 0x50
 8014100:	5a9b      	ldrh	r3, [r3, r2]
 8014102:	b29b      	uxth	r3, r3
 8014104:	001a      	movs	r2, r3
 8014106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	00db      	lsls	r3, r3, #3
 801410c:	18d2      	adds	r2, r2, r3
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	18d3      	adds	r3, r2, r3
 8014114:	4a5f      	ldr	r2, [pc, #380]	@ (8014294 <PCD_EP_ISR_Handler+0x344>)
 8014116:	4694      	mov	ip, r2
 8014118:	4463      	add	r3, ip
 801411a:	881b      	ldrh	r3, [r3, #0]
 801411c:	059b      	lsls	r3, r3, #22
 801411e:	0d9a      	lsrs	r2, r3, #22
 8014120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014122:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8014124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014126:	69db      	ldr	r3, [r3, #28]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d01a      	beq.n	8014162 <PCD_EP_ISR_Handler+0x212>
 801412c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801412e:	695b      	ldr	r3, [r3, #20]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d016      	beq.n	8014162 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6818      	ldr	r0, [r3, #0]
 8014138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801413a:	6959      	ldr	r1, [r3, #20]
 801413c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801413e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8014140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014142:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8014144:	b29b      	uxth	r3, r3
 8014146:	f007 f9e4 	bl	801b512 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801414a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801414c:	695a      	ldr	r2, [r3, #20]
 801414e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014150:	69db      	ldr	r3, [r3, #28]
 8014152:	18d2      	adds	r2, r2, r3
 8014154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014156:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2100      	movs	r1, #0
 801415c:	0018      	movs	r0, r3
 801415e:	f009 f9f2 	bl	801d546 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	681a      	ldr	r2, [r3, #0]
 8014166:	214a      	movs	r1, #74	@ 0x4a
 8014168:	187b      	adds	r3, r7, r1
 801416a:	8812      	ldrh	r2, [r2, #0]
 801416c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801416e:	187b      	adds	r3, r7, r1
 8014170:	881a      	ldrh	r2, [r3, #0]
 8014172:	2380      	movs	r3, #128	@ 0x80
 8014174:	011b      	lsls	r3, r3, #4
 8014176:	4013      	ands	r3, r2
 8014178:	d000      	beq.n	801417c <PCD_EP_ISR_Handler+0x22c>
 801417a:	e2db      	b.n	8014734 <PCD_EP_ISR_Handler+0x7e4>
 801417c:	187b      	adds	r3, r7, r1
 801417e:	881a      	ldrh	r2, [r3, #0]
 8014180:	23c0      	movs	r3, #192	@ 0xc0
 8014182:	019b      	lsls	r3, r3, #6
 8014184:	401a      	ands	r2, r3
 8014186:	23c0      	movs	r3, #192	@ 0xc0
 8014188:	019b      	lsls	r3, r3, #6
 801418a:	429a      	cmp	r2, r3
 801418c:	d100      	bne.n	8014190 <PCD_EP_ISR_Handler+0x240>
 801418e:	e2d1      	b.n	8014734 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	61bb      	str	r3, [r7, #24]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	2250      	movs	r2, #80	@ 0x50
 801419c:	5a9b      	ldrh	r3, [r3, r2]
 801419e:	b29b      	uxth	r3, r3
 80141a0:	001a      	movs	r2, r3
 80141a2:	69bb      	ldr	r3, [r7, #24]
 80141a4:	189b      	adds	r3, r3, r2
 80141a6:	61bb      	str	r3, [r7, #24]
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	4a3a      	ldr	r2, [pc, #232]	@ (8014294 <PCD_EP_ISR_Handler+0x344>)
 80141ac:	4694      	mov	ip, r2
 80141ae:	4463      	add	r3, ip
 80141b0:	617b      	str	r3, [r7, #20]
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	881b      	ldrh	r3, [r3, #0]
 80141b6:	b29b      	uxth	r3, r3
 80141b8:	059b      	lsls	r3, r3, #22
 80141ba:	0d9b      	lsrs	r3, r3, #22
 80141bc:	b29a      	uxth	r2, r3
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	801a      	strh	r2, [r3, #0]
 80141c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141c4:	691b      	ldr	r3, [r3, #16]
 80141c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80141c8:	d91a      	bls.n	8014200 <PCD_EP_ISR_Handler+0x2b0>
 80141ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141cc:	691b      	ldr	r3, [r3, #16]
 80141ce:	095b      	lsrs	r3, r3, #5
 80141d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80141d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141d4:	691b      	ldr	r3, [r3, #16]
 80141d6:	221f      	movs	r2, #31
 80141d8:	4013      	ands	r3, r2
 80141da:	d102      	bne.n	80141e2 <PCD_EP_ISR_Handler+0x292>
 80141dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141de:	3b01      	subs	r3, #1
 80141e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	881b      	ldrh	r3, [r3, #0]
 80141e6:	b29a      	uxth	r2, r3
 80141e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141ea:	b29b      	uxth	r3, r3
 80141ec:	029b      	lsls	r3, r3, #10
 80141ee:	b29b      	uxth	r3, r3
 80141f0:	4313      	orrs	r3, r2
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	4a25      	ldr	r2, [pc, #148]	@ (801428c <PCD_EP_ISR_Handler+0x33c>)
 80141f6:	4313      	orrs	r3, r2
 80141f8:	b29a      	uxth	r2, r3
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	801a      	strh	r2, [r3, #0]
 80141fe:	e023      	b.n	8014248 <PCD_EP_ISR_Handler+0x2f8>
 8014200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014202:	691b      	ldr	r3, [r3, #16]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d108      	bne.n	801421a <PCD_EP_ISR_Handler+0x2ca>
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	881b      	ldrh	r3, [r3, #0]
 801420c:	b29b      	uxth	r3, r3
 801420e:	4a1f      	ldr	r2, [pc, #124]	@ (801428c <PCD_EP_ISR_Handler+0x33c>)
 8014210:	4313      	orrs	r3, r2
 8014212:	b29a      	uxth	r2, r3
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	801a      	strh	r2, [r3, #0]
 8014218:	e016      	b.n	8014248 <PCD_EP_ISR_Handler+0x2f8>
 801421a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801421c:	691b      	ldr	r3, [r3, #16]
 801421e:	085b      	lsrs	r3, r3, #1
 8014220:	647b      	str	r3, [r7, #68]	@ 0x44
 8014222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014224:	691b      	ldr	r3, [r3, #16]
 8014226:	2201      	movs	r2, #1
 8014228:	4013      	ands	r3, r2
 801422a:	d002      	beq.n	8014232 <PCD_EP_ISR_Handler+0x2e2>
 801422c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801422e:	3301      	adds	r3, #1
 8014230:	647b      	str	r3, [r7, #68]	@ 0x44
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	881b      	ldrh	r3, [r3, #0]
 8014236:	b29a      	uxth	r2, r3
 8014238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801423a:	b29b      	uxth	r3, r3
 801423c:	029b      	lsls	r3, r3, #10
 801423e:	b29b      	uxth	r3, r3
 8014240:	4313      	orrs	r3, r2
 8014242:	b29a      	uxth	r2, r3
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	881b      	ldrh	r3, [r3, #0]
 801424e:	b29a      	uxth	r2, r3
 8014250:	2012      	movs	r0, #18
 8014252:	183b      	adds	r3, r7, r0
 8014254:	4911      	ldr	r1, [pc, #68]	@ (801429c <PCD_EP_ISR_Handler+0x34c>)
 8014256:	400a      	ands	r2, r1
 8014258:	801a      	strh	r2, [r3, #0]
 801425a:	183b      	adds	r3, r7, r0
 801425c:	183a      	adds	r2, r7, r0
 801425e:	8812      	ldrh	r2, [r2, #0]
 8014260:	2180      	movs	r1, #128	@ 0x80
 8014262:	0149      	lsls	r1, r1, #5
 8014264:	404a      	eors	r2, r1
 8014266:	801a      	strh	r2, [r3, #0]
 8014268:	183b      	adds	r3, r7, r0
 801426a:	183a      	adds	r2, r7, r0
 801426c:	8812      	ldrh	r2, [r2, #0]
 801426e:	2180      	movs	r1, #128	@ 0x80
 8014270:	0189      	lsls	r1, r1, #6
 8014272:	404a      	eors	r2, r1
 8014274:	801a      	strh	r2, [r3, #0]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	183a      	adds	r2, r7, r0
 801427c:	8812      	ldrh	r2, [r2, #0]
 801427e:	4908      	ldr	r1, [pc, #32]	@ (80142a0 <PCD_EP_ISR_Handler+0x350>)
 8014280:	430a      	orrs	r2, r1
 8014282:	b292      	uxth	r2, r2
 8014284:	801a      	strh	r2, [r3, #0]
 8014286:	e255      	b.n	8014734 <PCD_EP_ISR_Handler+0x7e4>
 8014288:	ffff8f0f 	.word	0xffff8f0f
 801428c:	ffff8000 	.word	0xffff8000
 8014290:	00000402 	.word	0x00000402
 8014294:	00000406 	.word	0x00000406
 8014298:	00000f8f 	.word	0x00000f8f
 801429c:	ffffbf8f 	.word	0xffffbf8f
 80142a0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	001a      	movs	r2, r3
 80142aa:	204d      	movs	r0, #77	@ 0x4d
 80142ac:	183b      	adds	r3, r7, r0
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	009b      	lsls	r3, r3, #2
 80142b2:	18d2      	adds	r2, r2, r3
 80142b4:	214a      	movs	r1, #74	@ 0x4a
 80142b6:	187b      	adds	r3, r7, r1
 80142b8:	8812      	ldrh	r2, [r2, #0]
 80142ba:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80142bc:	187b      	adds	r3, r7, r1
 80142be:	2200      	movs	r2, #0
 80142c0:	5e9b      	ldrsh	r3, [r3, r2]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	db00      	blt.n	80142c8 <PCD_EP_ISR_Handler+0x378>
 80142c6:	e0fa      	b.n	80144be <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	001a      	movs	r2, r3
 80142ce:	183b      	adds	r3, r7, r0
 80142d0:	781b      	ldrb	r3, [r3, #0]
 80142d2:	009b      	lsls	r3, r3, #2
 80142d4:	18d3      	adds	r3, r2, r3
 80142d6:	881b      	ldrh	r3, [r3, #0]
 80142d8:	b29a      	uxth	r2, r3
 80142da:	2448      	movs	r4, #72	@ 0x48
 80142dc:	193b      	adds	r3, r7, r4
 80142de:	49d1      	ldr	r1, [pc, #836]	@ (8014624 <PCD_EP_ISR_Handler+0x6d4>)
 80142e0:	400a      	ands	r2, r1
 80142e2:	801a      	strh	r2, [r3, #0]
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	001a      	movs	r2, r3
 80142ea:	183b      	adds	r3, r7, r0
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	009b      	lsls	r3, r3, #2
 80142f0:	18d3      	adds	r3, r2, r3
 80142f2:	193a      	adds	r2, r7, r4
 80142f4:	8812      	ldrh	r2, [r2, #0]
 80142f6:	2180      	movs	r1, #128	@ 0x80
 80142f8:	430a      	orrs	r2, r1
 80142fa:	b292      	uxth	r2, r2
 80142fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80142fe:	183b      	adds	r3, r7, r0
 8014300:	781a      	ldrb	r2, [r3, #0]
 8014302:	0013      	movs	r3, r2
 8014304:	009b      	lsls	r3, r3, #2
 8014306:	189b      	adds	r3, r3, r2
 8014308:	00db      	lsls	r3, r3, #3
 801430a:	3369      	adds	r3, #105	@ 0x69
 801430c:	33ff      	adds	r3, #255	@ 0xff
 801430e:	687a      	ldr	r2, [r7, #4]
 8014310:	18d3      	adds	r3, r2, r3
 8014312:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8014314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014316:	7b1b      	ldrb	r3, [r3, #12]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d125      	bne.n	8014368 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2250      	movs	r2, #80	@ 0x50
 8014322:	5a9b      	ldrh	r3, [r3, r2]
 8014324:	b29b      	uxth	r3, r3
 8014326:	001a      	movs	r2, r3
 8014328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	00db      	lsls	r3, r3, #3
 801432e:	18d2      	adds	r2, r2, r3
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	18d3      	adds	r3, r2, r3
 8014336:	4abc      	ldr	r2, [pc, #752]	@ (8014628 <PCD_EP_ISR_Handler+0x6d8>)
 8014338:	4694      	mov	ip, r2
 801433a:	4463      	add	r3, ip
 801433c:	881a      	ldrh	r2, [r3, #0]
 801433e:	2450      	movs	r4, #80	@ 0x50
 8014340:	193b      	adds	r3, r7, r4
 8014342:	0592      	lsls	r2, r2, #22
 8014344:	0d92      	lsrs	r2, r2, #22
 8014346:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8014348:	193b      	adds	r3, r7, r4
 801434a:	881b      	ldrh	r3, [r3, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d100      	bne.n	8014352 <PCD_EP_ISR_Handler+0x402>
 8014350:	e08d      	b.n	801446e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	6818      	ldr	r0, [r3, #0]
 8014356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014358:	6959      	ldr	r1, [r3, #20]
 801435a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801435c:	88da      	ldrh	r2, [r3, #6]
 801435e:	193b      	adds	r3, r7, r4
 8014360:	881b      	ldrh	r3, [r3, #0]
 8014362:	f007 f8d6 	bl	801b512 <USB_ReadPMA>
 8014366:	e082      	b.n	801446e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8014368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801436a:	78db      	ldrb	r3, [r3, #3]
 801436c:	2b02      	cmp	r3, #2
 801436e:	d10c      	bne.n	801438a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8014370:	2350      	movs	r3, #80	@ 0x50
 8014372:	18fc      	adds	r4, r7, r3
 8014374:	234a      	movs	r3, #74	@ 0x4a
 8014376:	18fb      	adds	r3, r7, r3
 8014378:	881a      	ldrh	r2, [r3, #0]
 801437a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	0018      	movs	r0, r3
 8014380:	f000 f9ec 	bl	801475c <HAL_PCD_EP_DB_Receive>
 8014384:	0003      	movs	r3, r0
 8014386:	8023      	strh	r3, [r4, #0]
 8014388:	e071      	b.n	801446e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	001a      	movs	r2, r3
 8014390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014392:	781b      	ldrb	r3, [r3, #0]
 8014394:	009b      	lsls	r3, r3, #2
 8014396:	18d3      	adds	r3, r2, r3
 8014398:	881b      	ldrh	r3, [r3, #0]
 801439a:	b29a      	uxth	r2, r3
 801439c:	2052      	movs	r0, #82	@ 0x52
 801439e:	183b      	adds	r3, r7, r0
 80143a0:	49a2      	ldr	r1, [pc, #648]	@ (801462c <PCD_EP_ISR_Handler+0x6dc>)
 80143a2:	400a      	ands	r2, r1
 80143a4:	801a      	strh	r2, [r3, #0]
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	001a      	movs	r2, r3
 80143ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	18d3      	adds	r3, r2, r3
 80143b4:	183a      	adds	r2, r7, r0
 80143b6:	8812      	ldrh	r2, [r2, #0]
 80143b8:	499d      	ldr	r1, [pc, #628]	@ (8014630 <PCD_EP_ISR_Handler+0x6e0>)
 80143ba:	430a      	orrs	r2, r1
 80143bc:	b292      	uxth	r2, r2
 80143be:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	001a      	movs	r2, r3
 80143c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	009b      	lsls	r3, r3, #2
 80143cc:	18d3      	adds	r3, r2, r3
 80143ce:	881b      	ldrh	r3, [r3, #0]
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	001a      	movs	r2, r3
 80143d4:	2380      	movs	r3, #128	@ 0x80
 80143d6:	01db      	lsls	r3, r3, #7
 80143d8:	4013      	ands	r3, r2
 80143da:	d024      	beq.n	8014426 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2250      	movs	r2, #80	@ 0x50
 80143e2:	5a9b      	ldrh	r3, [r3, r2]
 80143e4:	b29b      	uxth	r3, r3
 80143e6:	001a      	movs	r2, r3
 80143e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	00db      	lsls	r3, r3, #3
 80143ee:	18d2      	adds	r2, r2, r3
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	18d3      	adds	r3, r2, r3
 80143f6:	4a8f      	ldr	r2, [pc, #572]	@ (8014634 <PCD_EP_ISR_Handler+0x6e4>)
 80143f8:	4694      	mov	ip, r2
 80143fa:	4463      	add	r3, ip
 80143fc:	881a      	ldrh	r2, [r3, #0]
 80143fe:	2450      	movs	r4, #80	@ 0x50
 8014400:	193b      	adds	r3, r7, r4
 8014402:	0592      	lsls	r2, r2, #22
 8014404:	0d92      	lsrs	r2, r2, #22
 8014406:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8014408:	193b      	adds	r3, r7, r4
 801440a:	881b      	ldrh	r3, [r3, #0]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d02e      	beq.n	801446e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	6818      	ldr	r0, [r3, #0]
 8014414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014416:	6959      	ldr	r1, [r3, #20]
 8014418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801441a:	891a      	ldrh	r2, [r3, #8]
 801441c:	193b      	adds	r3, r7, r4
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	f007 f877 	bl	801b512 <USB_ReadPMA>
 8014424:	e023      	b.n	801446e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2250      	movs	r2, #80	@ 0x50
 801442c:	5a9b      	ldrh	r3, [r3, r2]
 801442e:	b29b      	uxth	r3, r3
 8014430:	001a      	movs	r2, r3
 8014432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	00db      	lsls	r3, r3, #3
 8014438:	18d2      	adds	r2, r2, r3
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	18d3      	adds	r3, r2, r3
 8014440:	4a79      	ldr	r2, [pc, #484]	@ (8014628 <PCD_EP_ISR_Handler+0x6d8>)
 8014442:	4694      	mov	ip, r2
 8014444:	4463      	add	r3, ip
 8014446:	881a      	ldrh	r2, [r3, #0]
 8014448:	2450      	movs	r4, #80	@ 0x50
 801444a:	193b      	adds	r3, r7, r4
 801444c:	0592      	lsls	r2, r2, #22
 801444e:	0d92      	lsrs	r2, r2, #22
 8014450:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8014452:	193b      	adds	r3, r7, r4
 8014454:	881b      	ldrh	r3, [r3, #0]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d009      	beq.n	801446e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	6818      	ldr	r0, [r3, #0]
 801445e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014460:	6959      	ldr	r1, [r3, #20]
 8014462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014464:	895a      	ldrh	r2, [r3, #10]
 8014466:	193b      	adds	r3, r7, r4
 8014468:	881b      	ldrh	r3, [r3, #0]
 801446a:	f007 f852 	bl	801b512 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801446e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014470:	69da      	ldr	r2, [r3, #28]
 8014472:	2150      	movs	r1, #80	@ 0x50
 8014474:	187b      	adds	r3, r7, r1
 8014476:	881b      	ldrh	r3, [r3, #0]
 8014478:	18d2      	adds	r2, r2, r3
 801447a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801447c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801447e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014480:	695a      	ldr	r2, [r3, #20]
 8014482:	187b      	adds	r3, r7, r1
 8014484:	881b      	ldrh	r3, [r3, #0]
 8014486:	18d2      	adds	r2, r2, r3
 8014488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801448a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801448c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801448e:	699b      	ldr	r3, [r3, #24]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d005      	beq.n	80144a0 <PCD_EP_ISR_Handler+0x550>
 8014494:	187b      	adds	r3, r7, r1
 8014496:	881a      	ldrh	r2, [r3, #0]
 8014498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801449a:	691b      	ldr	r3, [r3, #16]
 801449c:	429a      	cmp	r2, r3
 801449e:	d207      	bcs.n	80144b0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80144a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80144a2:	781a      	ldrb	r2, [r3, #0]
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	0011      	movs	r1, r2
 80144a8:	0018      	movs	r0, r3
 80144aa:	f009 f84c 	bl	801d546 <HAL_PCD_DataOutStageCallback>
 80144ae:	e006      	b.n	80144be <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80144b6:	0011      	movs	r1, r2
 80144b8:	0018      	movs	r0, r3
 80144ba:	f005 fd6f 	bl	8019f9c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80144be:	244a      	movs	r4, #74	@ 0x4a
 80144c0:	193b      	adds	r3, r7, r4
 80144c2:	881b      	ldrh	r3, [r3, #0]
 80144c4:	2280      	movs	r2, #128	@ 0x80
 80144c6:	4013      	ands	r3, r2
 80144c8:	d100      	bne.n	80144cc <PCD_EP_ISR_Handler+0x57c>
 80144ca:	e133      	b.n	8014734 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80144cc:	204d      	movs	r0, #77	@ 0x4d
 80144ce:	183b      	adds	r3, r7, r0
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	1c5a      	adds	r2, r3, #1
 80144d4:	0013      	movs	r3, r2
 80144d6:	009b      	lsls	r3, r3, #2
 80144d8:	189b      	adds	r3, r3, r2
 80144da:	00db      	lsls	r3, r3, #3
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	18d3      	adds	r3, r2, r3
 80144e0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	001a      	movs	r2, r3
 80144e8:	183b      	adds	r3, r7, r0
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	009b      	lsls	r3, r3, #2
 80144ee:	18d3      	adds	r3, r2, r3
 80144f0:	881b      	ldrh	r3, [r3, #0]
 80144f2:	b29a      	uxth	r2, r3
 80144f4:	2542      	movs	r5, #66	@ 0x42
 80144f6:	197b      	adds	r3, r7, r5
 80144f8:	494f      	ldr	r1, [pc, #316]	@ (8014638 <PCD_EP_ISR_Handler+0x6e8>)
 80144fa:	400a      	ands	r2, r1
 80144fc:	801a      	strh	r2, [r3, #0]
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	001a      	movs	r2, r3
 8014504:	183b      	adds	r3, r7, r0
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	009b      	lsls	r3, r3, #2
 801450a:	18d3      	adds	r3, r2, r3
 801450c:	197a      	adds	r2, r7, r5
 801450e:	8812      	ldrh	r2, [r2, #0]
 8014510:	494a      	ldr	r1, [pc, #296]	@ (801463c <PCD_EP_ISR_Handler+0x6ec>)
 8014512:	430a      	orrs	r2, r1
 8014514:	b292      	uxth	r2, r2
 8014516:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8014518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801451a:	78db      	ldrb	r3, [r3, #3]
 801451c:	2b01      	cmp	r3, #1
 801451e:	d000      	beq.n	8014522 <PCD_EP_ISR_Handler+0x5d2>
 8014520:	e0af      	b.n	8014682 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8014522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014524:	2200      	movs	r2, #0
 8014526:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8014528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801452a:	7b1b      	ldrb	r3, [r3, #12]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d100      	bne.n	8014532 <PCD_EP_ISR_Handler+0x5e2>
 8014530:	e09f      	b.n	8014672 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014532:	193b      	adds	r3, r7, r4
 8014534:	881b      	ldrh	r3, [r3, #0]
 8014536:	2240      	movs	r2, #64	@ 0x40
 8014538:	4013      	ands	r3, r2
 801453a:	d046      	beq.n	80145ca <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801453c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801453e:	785b      	ldrb	r3, [r3, #1]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d125      	bne.n	8014590 <PCD_EP_ISR_Handler+0x640>
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	627b      	str	r3, [r7, #36]	@ 0x24
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2250      	movs	r2, #80	@ 0x50
 8014550:	5a9b      	ldrh	r3, [r3, r2]
 8014552:	b29b      	uxth	r3, r3
 8014554:	001a      	movs	r2, r3
 8014556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014558:	189b      	adds	r3, r3, r2
 801455a:	627b      	str	r3, [r7, #36]	@ 0x24
 801455c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	00da      	lsls	r2, r3, #3
 8014562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014564:	18d3      	adds	r3, r2, r3
 8014566:	4a33      	ldr	r2, [pc, #204]	@ (8014634 <PCD_EP_ISR_Handler+0x6e4>)
 8014568:	4694      	mov	ip, r2
 801456a:	4463      	add	r3, ip
 801456c:	623b      	str	r3, [r7, #32]
 801456e:	6a3b      	ldr	r3, [r7, #32]
 8014570:	881b      	ldrh	r3, [r3, #0]
 8014572:	b29b      	uxth	r3, r3
 8014574:	059b      	lsls	r3, r3, #22
 8014576:	0d9b      	lsrs	r3, r3, #22
 8014578:	b29a      	uxth	r2, r3
 801457a:	6a3b      	ldr	r3, [r7, #32]
 801457c:	801a      	strh	r2, [r3, #0]
 801457e:	6a3b      	ldr	r3, [r7, #32]
 8014580:	881b      	ldrh	r3, [r3, #0]
 8014582:	b29b      	uxth	r3, r3
 8014584:	4a2d      	ldr	r2, [pc, #180]	@ (801463c <PCD_EP_ISR_Handler+0x6ec>)
 8014586:	4313      	orrs	r3, r2
 8014588:	b29a      	uxth	r2, r3
 801458a:	6a3b      	ldr	r3, [r7, #32]
 801458c:	801a      	strh	r2, [r3, #0]
 801458e:	e070      	b.n	8014672 <PCD_EP_ISR_Handler+0x722>
 8014590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014592:	785b      	ldrb	r3, [r3, #1]
 8014594:	2b01      	cmp	r3, #1
 8014596:	d16c      	bne.n	8014672 <PCD_EP_ISR_Handler+0x722>
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	2250      	movs	r2, #80	@ 0x50
 80145a4:	5a9b      	ldrh	r3, [r3, r2]
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	001a      	movs	r2, r3
 80145aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ac:	189b      	adds	r3, r3, r2
 80145ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145b2:	781b      	ldrb	r3, [r3, #0]
 80145b4:	00da      	lsls	r2, r3, #3
 80145b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145b8:	18d3      	adds	r3, r2, r3
 80145ba:	4a1e      	ldr	r2, [pc, #120]	@ (8014634 <PCD_EP_ISR_Handler+0x6e4>)
 80145bc:	4694      	mov	ip, r2
 80145be:	4463      	add	r3, ip
 80145c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80145c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145c4:	2200      	movs	r2, #0
 80145c6:	801a      	strh	r2, [r3, #0]
 80145c8:	e053      	b.n	8014672 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80145d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145d2:	785b      	ldrb	r3, [r3, #1]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d133      	bne.n	8014640 <PCD_EP_ISR_Handler+0x6f0>
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	2250      	movs	r2, #80	@ 0x50
 80145e4:	5a9b      	ldrh	r3, [r3, r2]
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	001a      	movs	r2, r3
 80145ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145ec:	189b      	adds	r3, r3, r2
 80145ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80145f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	00da      	lsls	r2, r3, #3
 80145f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145f8:	18d3      	adds	r3, r2, r3
 80145fa:	4a0b      	ldr	r2, [pc, #44]	@ (8014628 <PCD_EP_ISR_Handler+0x6d8>)
 80145fc:	4694      	mov	ip, r2
 80145fe:	4463      	add	r3, ip
 8014600:	633b      	str	r3, [r7, #48]	@ 0x30
 8014602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014604:	881b      	ldrh	r3, [r3, #0]
 8014606:	b29b      	uxth	r3, r3
 8014608:	059b      	lsls	r3, r3, #22
 801460a:	0d9b      	lsrs	r3, r3, #22
 801460c:	b29a      	uxth	r2, r3
 801460e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014610:	801a      	strh	r2, [r3, #0]
 8014612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014614:	881b      	ldrh	r3, [r3, #0]
 8014616:	b29b      	uxth	r3, r3
 8014618:	4a08      	ldr	r2, [pc, #32]	@ (801463c <PCD_EP_ISR_Handler+0x6ec>)
 801461a:	4313      	orrs	r3, r2
 801461c:	b29a      	uxth	r2, r3
 801461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014620:	801a      	strh	r2, [r3, #0]
 8014622:	e026      	b.n	8014672 <PCD_EP_ISR_Handler+0x722>
 8014624:	00000f8f 	.word	0x00000f8f
 8014628:	00000406 	.word	0x00000406
 801462c:	ffff8f8f 	.word	0xffff8f8f
 8014630:	ffff80c0 	.word	0xffff80c0
 8014634:	00000402 	.word	0x00000402
 8014638:	ffff8f0f 	.word	0xffff8f0f
 801463c:	ffff8000 	.word	0xffff8000
 8014640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014642:	785b      	ldrb	r3, [r3, #1]
 8014644:	2b01      	cmp	r3, #1
 8014646:	d114      	bne.n	8014672 <PCD_EP_ISR_Handler+0x722>
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	2250      	movs	r2, #80	@ 0x50
 801464e:	5a9b      	ldrh	r3, [r3, r2]
 8014650:	b29b      	uxth	r3, r3
 8014652:	001a      	movs	r2, r3
 8014654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014656:	189b      	adds	r3, r3, r2
 8014658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801465a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	00da      	lsls	r2, r3, #3
 8014660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014662:	18d3      	adds	r3, r2, r3
 8014664:	4a3b      	ldr	r2, [pc, #236]	@ (8014754 <PCD_EP_ISR_Handler+0x804>)
 8014666:	4694      	mov	ip, r2
 8014668:	4463      	add	r3, ip
 801466a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801466e:	2200      	movs	r2, #0
 8014670:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014674:	781a      	ldrb	r2, [r3, #0]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	0011      	movs	r1, r2
 801467a:	0018      	movs	r0, r3
 801467c:	f008 ff84 	bl	801d588 <HAL_PCD_DataInStageCallback>
 8014680:	e058      	b.n	8014734 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8014682:	234a      	movs	r3, #74	@ 0x4a
 8014684:	18fb      	adds	r3, r7, r3
 8014686:	881a      	ldrh	r2, [r3, #0]
 8014688:	2380      	movs	r3, #128	@ 0x80
 801468a:	005b      	lsls	r3, r3, #1
 801468c:	4013      	ands	r3, r2
 801468e:	d149      	bne.n	8014724 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2250      	movs	r2, #80	@ 0x50
 8014696:	5a9b      	ldrh	r3, [r3, r2]
 8014698:	b29b      	uxth	r3, r3
 801469a:	001a      	movs	r2, r3
 801469c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	00db      	lsls	r3, r3, #3
 80146a2:	18d2      	adds	r2, r2, r3
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	18d3      	adds	r3, r2, r3
 80146aa:	4a2b      	ldr	r2, [pc, #172]	@ (8014758 <PCD_EP_ISR_Handler+0x808>)
 80146ac:	4694      	mov	ip, r2
 80146ae:	4463      	add	r3, ip
 80146b0:	881a      	ldrh	r2, [r3, #0]
 80146b2:	2140      	movs	r1, #64	@ 0x40
 80146b4:	187b      	adds	r3, r7, r1
 80146b6:	0592      	lsls	r2, r2, #22
 80146b8:	0d92      	lsrs	r2, r2, #22
 80146ba:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80146bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146be:	699a      	ldr	r2, [r3, #24]
 80146c0:	187b      	adds	r3, r7, r1
 80146c2:	881b      	ldrh	r3, [r3, #0]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d907      	bls.n	80146d8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80146c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146ca:	699a      	ldr	r2, [r3, #24]
 80146cc:	187b      	adds	r3, r7, r1
 80146ce:	881b      	ldrh	r3, [r3, #0]
 80146d0:	1ad2      	subs	r2, r2, r3
 80146d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146d4:	619a      	str	r2, [r3, #24]
 80146d6:	e002      	b.n	80146de <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80146d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146da:	2200      	movs	r2, #0
 80146dc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80146de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146e0:	699b      	ldr	r3, [r3, #24]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d107      	bne.n	80146f6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80146e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146e8:	781a      	ldrb	r2, [r3, #0]
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	0011      	movs	r1, r2
 80146ee:	0018      	movs	r0, r3
 80146f0:	f008 ff4a 	bl	801d588 <HAL_PCD_DataInStageCallback>
 80146f4:	e01e      	b.n	8014734 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80146f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146f8:	695a      	ldr	r2, [r3, #20]
 80146fa:	2140      	movs	r1, #64	@ 0x40
 80146fc:	187b      	adds	r3, r7, r1
 80146fe:	881b      	ldrh	r3, [r3, #0]
 8014700:	18d2      	adds	r2, r2, r3
 8014702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014704:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8014706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014708:	69da      	ldr	r2, [r3, #28]
 801470a:	187b      	adds	r3, r7, r1
 801470c:	881b      	ldrh	r3, [r3, #0]
 801470e:	18d2      	adds	r2, r2, r3
 8014710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014712:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801471a:	0011      	movs	r1, r2
 801471c:	0018      	movs	r0, r3
 801471e:	f005 fc3d 	bl	8019f9c <USB_EPStartXfer>
 8014722:	e007      	b.n	8014734 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8014724:	234a      	movs	r3, #74	@ 0x4a
 8014726:	18fb      	adds	r3, r7, r3
 8014728:	881a      	ldrh	r2, [r3, #0]
 801472a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	0018      	movs	r0, r3
 8014730:	f000 f930 	bl	8014994 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2244      	movs	r2, #68	@ 0x44
 801473a:	5a9b      	ldrh	r3, [r3, r2]
 801473c:	b29b      	uxth	r3, r3
 801473e:	b21b      	sxth	r3, r3
 8014740:	2b00      	cmp	r3, #0
 8014742:	da01      	bge.n	8014748 <PCD_EP_ISR_Handler+0x7f8>
 8014744:	f7ff fc0a 	bl	8013f5c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8014748:	2300      	movs	r3, #0
}
 801474a:	0018      	movs	r0, r3
 801474c:	46bd      	mov	sp, r7
 801474e:	b016      	add	sp, #88	@ 0x58
 8014750:	bdb0      	pop	{r4, r5, r7, pc}
 8014752:	46c0      	nop			@ (mov r8, r8)
 8014754:	00000406 	.word	0x00000406
 8014758:	00000402 	.word	0x00000402

0801475c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801475c:	b590      	push	{r4, r7, lr}
 801475e:	b089      	sub	sp, #36	@ 0x24
 8014760:	af00      	add	r7, sp, #0
 8014762:	60f8      	str	r0, [r7, #12]
 8014764:	60b9      	str	r1, [r7, #8]
 8014766:	1dbb      	adds	r3, r7, #6
 8014768:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801476a:	1dbb      	adds	r3, r7, #6
 801476c:	881a      	ldrh	r2, [r3, #0]
 801476e:	2380      	movs	r3, #128	@ 0x80
 8014770:	01db      	lsls	r3, r3, #7
 8014772:	4013      	ands	r3, r2
 8014774:	d100      	bne.n	8014778 <HAL_PCD_EP_DB_Receive+0x1c>
 8014776:	e07d      	b.n	8014874 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2250      	movs	r2, #80	@ 0x50
 801477e:	5a9b      	ldrh	r3, [r3, r2]
 8014780:	b29b      	uxth	r3, r3
 8014782:	001a      	movs	r2, r3
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	00db      	lsls	r3, r3, #3
 801478a:	18d2      	adds	r2, r2, r3
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	18d3      	adds	r3, r2, r3
 8014792:	4a7a      	ldr	r2, [pc, #488]	@ (801497c <HAL_PCD_EP_DB_Receive+0x220>)
 8014794:	4694      	mov	ip, r2
 8014796:	4463      	add	r3, ip
 8014798:	881a      	ldrh	r2, [r3, #0]
 801479a:	211a      	movs	r1, #26
 801479c:	187b      	adds	r3, r7, r1
 801479e:	0592      	lsls	r2, r2, #22
 80147a0:	0d92      	lsrs	r2, r2, #22
 80147a2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	699a      	ldr	r2, [r3, #24]
 80147a8:	187b      	adds	r3, r7, r1
 80147aa:	881b      	ldrh	r3, [r3, #0]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d307      	bcc.n	80147c0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	699a      	ldr	r2, [r3, #24]
 80147b4:	187b      	adds	r3, r7, r1
 80147b6:	881b      	ldrh	r3, [r3, #0]
 80147b8:	1ad2      	subs	r2, r2, r3
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	619a      	str	r2, [r3, #24]
 80147be:	e002      	b.n	80147c6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	2200      	movs	r2, #0
 80147c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	699b      	ldr	r3, [r3, #24]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d121      	bne.n	8014812 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	001a      	movs	r2, r3
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	009b      	lsls	r3, r3, #2
 80147da:	18d3      	adds	r3, r2, r3
 80147dc:	881b      	ldrh	r3, [r3, #0]
 80147de:	b29a      	uxth	r2, r3
 80147e0:	2018      	movs	r0, #24
 80147e2:	183b      	adds	r3, r7, r0
 80147e4:	4966      	ldr	r1, [pc, #408]	@ (8014980 <HAL_PCD_EP_DB_Receive+0x224>)
 80147e6:	400a      	ands	r2, r1
 80147e8:	801a      	strh	r2, [r3, #0]
 80147ea:	183b      	adds	r3, r7, r0
 80147ec:	183a      	adds	r2, r7, r0
 80147ee:	8812      	ldrh	r2, [r2, #0]
 80147f0:	2180      	movs	r1, #128	@ 0x80
 80147f2:	0189      	lsls	r1, r1, #6
 80147f4:	404a      	eors	r2, r1
 80147f6:	801a      	strh	r2, [r3, #0]
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	001a      	movs	r2, r3
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	18d3      	adds	r3, r2, r3
 8014806:	183a      	adds	r2, r7, r0
 8014808:	8812      	ldrh	r2, [r2, #0]
 801480a:	495e      	ldr	r1, [pc, #376]	@ (8014984 <HAL_PCD_EP_DB_Receive+0x228>)
 801480c:	430a      	orrs	r2, r1
 801480e:	b292      	uxth	r2, r2
 8014810:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014812:	1dbb      	adds	r3, r7, #6
 8014814:	881b      	ldrh	r3, [r3, #0]
 8014816:	2240      	movs	r2, #64	@ 0x40
 8014818:	4013      	ands	r3, r2
 801481a:	d01a      	beq.n	8014852 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	001a      	movs	r2, r3
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	009b      	lsls	r3, r3, #2
 8014828:	18d3      	adds	r3, r2, r3
 801482a:	881b      	ldrh	r3, [r3, #0]
 801482c:	b29a      	uxth	r2, r3
 801482e:	2016      	movs	r0, #22
 8014830:	183b      	adds	r3, r7, r0
 8014832:	4955      	ldr	r1, [pc, #340]	@ (8014988 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014834:	400a      	ands	r2, r1
 8014836:	801a      	strh	r2, [r3, #0]
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	001a      	movs	r2, r3
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	009b      	lsls	r3, r3, #2
 8014844:	18d3      	adds	r3, r2, r3
 8014846:	183a      	adds	r2, r7, r0
 8014848:	8812      	ldrh	r2, [r2, #0]
 801484a:	4950      	ldr	r1, [pc, #320]	@ (801498c <HAL_PCD_EP_DB_Receive+0x230>)
 801484c:	430a      	orrs	r2, r1
 801484e:	b292      	uxth	r2, r2
 8014850:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014852:	241a      	movs	r4, #26
 8014854:	193b      	adds	r3, r7, r4
 8014856:	881b      	ldrh	r3, [r3, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d100      	bne.n	801485e <HAL_PCD_EP_DB_Receive+0x102>
 801485c:	e086      	b.n	801496c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	6818      	ldr	r0, [r3, #0]
 8014862:	68bb      	ldr	r3, [r7, #8]
 8014864:	6959      	ldr	r1, [r3, #20]
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	891a      	ldrh	r2, [r3, #8]
 801486a:	193b      	adds	r3, r7, r4
 801486c:	881b      	ldrh	r3, [r3, #0]
 801486e:	f006 fe50 	bl	801b512 <USB_ReadPMA>
 8014872:	e07b      	b.n	801496c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	2250      	movs	r2, #80	@ 0x50
 801487a:	5a9b      	ldrh	r3, [r3, r2]
 801487c:	b29b      	uxth	r3, r3
 801487e:	001a      	movs	r2, r3
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	00db      	lsls	r3, r3, #3
 8014886:	18d2      	adds	r2, r2, r3
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	18d3      	adds	r3, r2, r3
 801488e:	4a40      	ldr	r2, [pc, #256]	@ (8014990 <HAL_PCD_EP_DB_Receive+0x234>)
 8014890:	4694      	mov	ip, r2
 8014892:	4463      	add	r3, ip
 8014894:	881a      	ldrh	r2, [r3, #0]
 8014896:	211a      	movs	r1, #26
 8014898:	187b      	adds	r3, r7, r1
 801489a:	0592      	lsls	r2, r2, #22
 801489c:	0d92      	lsrs	r2, r2, #22
 801489e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	699a      	ldr	r2, [r3, #24]
 80148a4:	187b      	adds	r3, r7, r1
 80148a6:	881b      	ldrh	r3, [r3, #0]
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d307      	bcc.n	80148bc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	699a      	ldr	r2, [r3, #24]
 80148b0:	187b      	adds	r3, r7, r1
 80148b2:	881b      	ldrh	r3, [r3, #0]
 80148b4:	1ad2      	subs	r2, r2, r3
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	619a      	str	r2, [r3, #24]
 80148ba:	e002      	b.n	80148c2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80148bc:	68bb      	ldr	r3, [r7, #8]
 80148be:	2200      	movs	r2, #0
 80148c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	699b      	ldr	r3, [r3, #24]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d121      	bne.n	801490e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	001a      	movs	r2, r3
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	781b      	ldrb	r3, [r3, #0]
 80148d4:	009b      	lsls	r3, r3, #2
 80148d6:	18d3      	adds	r3, r2, r3
 80148d8:	881b      	ldrh	r3, [r3, #0]
 80148da:	b29a      	uxth	r2, r3
 80148dc:	201e      	movs	r0, #30
 80148de:	183b      	adds	r3, r7, r0
 80148e0:	4927      	ldr	r1, [pc, #156]	@ (8014980 <HAL_PCD_EP_DB_Receive+0x224>)
 80148e2:	400a      	ands	r2, r1
 80148e4:	801a      	strh	r2, [r3, #0]
 80148e6:	183b      	adds	r3, r7, r0
 80148e8:	183a      	adds	r2, r7, r0
 80148ea:	8812      	ldrh	r2, [r2, #0]
 80148ec:	2180      	movs	r1, #128	@ 0x80
 80148ee:	0189      	lsls	r1, r1, #6
 80148f0:	404a      	eors	r2, r1
 80148f2:	801a      	strh	r2, [r3, #0]
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	001a      	movs	r2, r3
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	781b      	ldrb	r3, [r3, #0]
 80148fe:	009b      	lsls	r3, r3, #2
 8014900:	18d3      	adds	r3, r2, r3
 8014902:	183a      	adds	r2, r7, r0
 8014904:	8812      	ldrh	r2, [r2, #0]
 8014906:	491f      	ldr	r1, [pc, #124]	@ (8014984 <HAL_PCD_EP_DB_Receive+0x228>)
 8014908:	430a      	orrs	r2, r1
 801490a:	b292      	uxth	r2, r2
 801490c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801490e:	1dbb      	adds	r3, r7, #6
 8014910:	881b      	ldrh	r3, [r3, #0]
 8014912:	2240      	movs	r2, #64	@ 0x40
 8014914:	4013      	ands	r3, r2
 8014916:	d11a      	bne.n	801494e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	001a      	movs	r2, r3
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	009b      	lsls	r3, r3, #2
 8014924:	18d3      	adds	r3, r2, r3
 8014926:	881b      	ldrh	r3, [r3, #0]
 8014928:	b29a      	uxth	r2, r3
 801492a:	201c      	movs	r0, #28
 801492c:	183b      	adds	r3, r7, r0
 801492e:	4916      	ldr	r1, [pc, #88]	@ (8014988 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014930:	400a      	ands	r2, r1
 8014932:	801a      	strh	r2, [r3, #0]
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	001a      	movs	r2, r3
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	781b      	ldrb	r3, [r3, #0]
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	18d3      	adds	r3, r2, r3
 8014942:	183a      	adds	r2, r7, r0
 8014944:	8812      	ldrh	r2, [r2, #0]
 8014946:	4911      	ldr	r1, [pc, #68]	@ (801498c <HAL_PCD_EP_DB_Receive+0x230>)
 8014948:	430a      	orrs	r2, r1
 801494a:	b292      	uxth	r2, r2
 801494c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801494e:	241a      	movs	r4, #26
 8014950:	193b      	adds	r3, r7, r4
 8014952:	881b      	ldrh	r3, [r3, #0]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d009      	beq.n	801496c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6818      	ldr	r0, [r3, #0]
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	6959      	ldr	r1, [r3, #20]
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	895a      	ldrh	r2, [r3, #10]
 8014964:	193b      	adds	r3, r7, r4
 8014966:	881b      	ldrh	r3, [r3, #0]
 8014968:	f006 fdd3 	bl	801b512 <USB_ReadPMA>
    }
  }

  return count;
 801496c:	231a      	movs	r3, #26
 801496e:	18fb      	adds	r3, r7, r3
 8014970:	881b      	ldrh	r3, [r3, #0]
}
 8014972:	0018      	movs	r0, r3
 8014974:	46bd      	mov	sp, r7
 8014976:	b009      	add	sp, #36	@ 0x24
 8014978:	bd90      	pop	{r4, r7, pc}
 801497a:	46c0      	nop			@ (mov r8, r8)
 801497c:	00000402 	.word	0x00000402
 8014980:	ffffbf8f 	.word	0xffffbf8f
 8014984:	ffff8080 	.word	0xffff8080
 8014988:	ffff8f8f 	.word	0xffff8f8f
 801498c:	ffff80c0 	.word	0xffff80c0
 8014990:	00000406 	.word	0x00000406

08014994 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b0a4      	sub	sp, #144	@ 0x90
 8014998:	af00      	add	r7, sp, #0
 801499a:	60f8      	str	r0, [r7, #12]
 801499c:	60b9      	str	r1, [r7, #8]
 801499e:	1dbb      	adds	r3, r7, #6
 80149a0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80149a2:	1dbb      	adds	r3, r7, #6
 80149a4:	881b      	ldrh	r3, [r3, #0]
 80149a6:	2240      	movs	r2, #64	@ 0x40
 80149a8:	4013      	ands	r3, r2
 80149aa:	d100      	bne.n	80149ae <HAL_PCD_EP_DB_Transmit+0x1a>
 80149ac:	e1e4      	b.n	8014d78 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	2250      	movs	r2, #80	@ 0x50
 80149b4:	5a9b      	ldrh	r3, [r3, r2]
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	001a      	movs	r2, r3
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	00db      	lsls	r3, r3, #3
 80149c0:	18d2      	adds	r2, r2, r3
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	18d3      	adds	r3, r2, r3
 80149c8:	4ad0      	ldr	r2, [pc, #832]	@ (8014d0c <HAL_PCD_EP_DB_Transmit+0x378>)
 80149ca:	4694      	mov	ip, r2
 80149cc:	4463      	add	r3, ip
 80149ce:	881a      	ldrh	r2, [r3, #0]
 80149d0:	2186      	movs	r1, #134	@ 0x86
 80149d2:	187b      	adds	r3, r7, r1
 80149d4:	0592      	lsls	r2, r2, #22
 80149d6:	0d92      	lsrs	r2, r2, #22
 80149d8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	699a      	ldr	r2, [r3, #24]
 80149de:	187b      	adds	r3, r7, r1
 80149e0:	881b      	ldrh	r3, [r3, #0]
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d907      	bls.n	80149f6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	699a      	ldr	r2, [r3, #24]
 80149ea:	187b      	adds	r3, r7, r1
 80149ec:	881b      	ldrh	r3, [r3, #0]
 80149ee:	1ad2      	subs	r2, r2, r3
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	619a      	str	r2, [r3, #24]
 80149f4:	e002      	b.n	80149fc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	2200      	movs	r2, #0
 80149fa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	699b      	ldr	r3, [r3, #24]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d000      	beq.n	8014a06 <HAL_PCD_EP_DB_Transmit+0x72>
 8014a04:	e0b5      	b.n	8014b72 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014a06:	68bb      	ldr	r3, [r7, #8]
 8014a08:	785b      	ldrb	r3, [r3, #1]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d125      	bne.n	8014a5a <HAL_PCD_EP_DB_Transmit+0xc6>
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	2250      	movs	r2, #80	@ 0x50
 8014a1a:	5a9b      	ldrh	r3, [r3, r2]
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	001a      	movs	r2, r3
 8014a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a22:	189b      	adds	r3, r3, r2
 8014a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	00da      	lsls	r2, r3, #3
 8014a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a2e:	18d3      	adds	r3, r2, r3
 8014a30:	4ab6      	ldr	r2, [pc, #728]	@ (8014d0c <HAL_PCD_EP_DB_Transmit+0x378>)
 8014a32:	4694      	mov	ip, r2
 8014a34:	4463      	add	r3, ip
 8014a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a3a:	881b      	ldrh	r3, [r3, #0]
 8014a3c:	b29b      	uxth	r3, r3
 8014a3e:	059b      	lsls	r3, r3, #22
 8014a40:	0d9b      	lsrs	r3, r3, #22
 8014a42:	b29a      	uxth	r2, r3
 8014a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a46:	801a      	strh	r2, [r3, #0]
 8014a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a4a:	881b      	ldrh	r3, [r3, #0]
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	4ab0      	ldr	r2, [pc, #704]	@ (8014d10 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014a50:	4313      	orrs	r3, r2
 8014a52:	b29a      	uxth	r2, r3
 8014a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a56:	801a      	strh	r2, [r3, #0]
 8014a58:	e01b      	b.n	8014a92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	785b      	ldrb	r3, [r3, #1]
 8014a5e:	2b01      	cmp	r3, #1
 8014a60:	d117      	bne.n	8014a92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	2250      	movs	r2, #80	@ 0x50
 8014a6e:	5a9b      	ldrh	r3, [r3, r2]
 8014a70:	b29b      	uxth	r3, r3
 8014a72:	001a      	movs	r2, r3
 8014a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a76:	189b      	adds	r3, r3, r2
 8014a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	781b      	ldrb	r3, [r3, #0]
 8014a7e:	00da      	lsls	r2, r3, #3
 8014a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a82:	18d3      	adds	r3, r2, r3
 8014a84:	4aa1      	ldr	r2, [pc, #644]	@ (8014d0c <HAL_PCD_EP_DB_Transmit+0x378>)
 8014a86:	4694      	mov	ip, r2
 8014a88:	4463      	add	r3, ip
 8014a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8014a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a8e:	2200      	movs	r2, #0
 8014a90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	785b      	ldrb	r3, [r3, #1]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d125      	bne.n	8014aec <HAL_PCD_EP_DB_Transmit+0x158>
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	61fb      	str	r3, [r7, #28]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	2250      	movs	r2, #80	@ 0x50
 8014aac:	5a9b      	ldrh	r3, [r3, r2]
 8014aae:	b29b      	uxth	r3, r3
 8014ab0:	001a      	movs	r2, r3
 8014ab2:	69fb      	ldr	r3, [r7, #28]
 8014ab4:	189b      	adds	r3, r3, r2
 8014ab6:	61fb      	str	r3, [r7, #28]
 8014ab8:	68bb      	ldr	r3, [r7, #8]
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	00da      	lsls	r2, r3, #3
 8014abe:	69fb      	ldr	r3, [r7, #28]
 8014ac0:	18d3      	adds	r3, r2, r3
 8014ac2:	4a94      	ldr	r2, [pc, #592]	@ (8014d14 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014ac4:	4694      	mov	ip, r2
 8014ac6:	4463      	add	r3, ip
 8014ac8:	61bb      	str	r3, [r7, #24]
 8014aca:	69bb      	ldr	r3, [r7, #24]
 8014acc:	881b      	ldrh	r3, [r3, #0]
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	059b      	lsls	r3, r3, #22
 8014ad2:	0d9b      	lsrs	r3, r3, #22
 8014ad4:	b29a      	uxth	r2, r3
 8014ad6:	69bb      	ldr	r3, [r7, #24]
 8014ad8:	801a      	strh	r2, [r3, #0]
 8014ada:	69bb      	ldr	r3, [r7, #24]
 8014adc:	881b      	ldrh	r3, [r3, #0]
 8014ade:	b29b      	uxth	r3, r3
 8014ae0:	4a8b      	ldr	r2, [pc, #556]	@ (8014d10 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014ae2:	4313      	orrs	r3, r2
 8014ae4:	b29a      	uxth	r2, r3
 8014ae6:	69bb      	ldr	r3, [r7, #24]
 8014ae8:	801a      	strh	r2, [r3, #0]
 8014aea:	e018      	b.n	8014b1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	785b      	ldrb	r3, [r3, #1]
 8014af0:	2b01      	cmp	r3, #1
 8014af2:	d114      	bne.n	8014b1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	2250      	movs	r2, #80	@ 0x50
 8014afa:	5a9b      	ldrh	r3, [r3, r2]
 8014afc:	b29b      	uxth	r3, r3
 8014afe:	001a      	movs	r2, r3
 8014b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b02:	189b      	adds	r3, r3, r2
 8014b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	781b      	ldrb	r3, [r3, #0]
 8014b0a:	00da      	lsls	r2, r3, #3
 8014b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b0e:	18d3      	adds	r3, r2, r3
 8014b10:	4a80      	ldr	r2, [pc, #512]	@ (8014d14 <HAL_PCD_EP_DB_Transmit+0x380>)
 8014b12:	4694      	mov	ip, r2
 8014b14:	4463      	add	r3, ip
 8014b16:	623b      	str	r3, [r7, #32]
 8014b18:	6a3b      	ldr	r3, [r7, #32]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	781a      	ldrb	r2, [r3, #0]
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	0011      	movs	r1, r2
 8014b26:	0018      	movs	r0, r3
 8014b28:	f008 fd2e 	bl	801d588 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014b2c:	1dbb      	adds	r3, r7, #6
 8014b2e:	881a      	ldrh	r2, [r3, #0]
 8014b30:	2380      	movs	r3, #128	@ 0x80
 8014b32:	01db      	lsls	r3, r3, #7
 8014b34:	4013      	ands	r3, r2
 8014b36:	d100      	bne.n	8014b3a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8014b38:	e309      	b.n	801514e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	001a      	movs	r2, r3
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	781b      	ldrb	r3, [r3, #0]
 8014b44:	009b      	lsls	r3, r3, #2
 8014b46:	18d3      	adds	r3, r2, r3
 8014b48:	881b      	ldrh	r3, [r3, #0]
 8014b4a:	b29a      	uxth	r2, r3
 8014b4c:	2016      	movs	r0, #22
 8014b4e:	183b      	adds	r3, r7, r0
 8014b50:	4971      	ldr	r1, [pc, #452]	@ (8014d18 <HAL_PCD_EP_DB_Transmit+0x384>)
 8014b52:	400a      	ands	r2, r1
 8014b54:	801a      	strh	r2, [r3, #0]
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	001a      	movs	r2, r3
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	18d3      	adds	r3, r2, r3
 8014b64:	183a      	adds	r2, r7, r0
 8014b66:	8812      	ldrh	r2, [r2, #0]
 8014b68:	496c      	ldr	r1, [pc, #432]	@ (8014d1c <HAL_PCD_EP_DB_Transmit+0x388>)
 8014b6a:	430a      	orrs	r2, r1
 8014b6c:	b292      	uxth	r2, r2
 8014b6e:	801a      	strh	r2, [r3, #0]
 8014b70:	e2ed      	b.n	801514e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014b72:	1dbb      	adds	r3, r7, #6
 8014b74:	881a      	ldrh	r2, [r3, #0]
 8014b76:	2380      	movs	r3, #128	@ 0x80
 8014b78:	01db      	lsls	r3, r3, #7
 8014b7a:	4013      	ands	r3, r2
 8014b7c:	d01a      	beq.n	8014bb4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	001a      	movs	r2, r3
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	009b      	lsls	r3, r3, #2
 8014b8a:	18d3      	adds	r3, r2, r3
 8014b8c:	881b      	ldrh	r3, [r3, #0]
 8014b8e:	b29a      	uxth	r2, r3
 8014b90:	208a      	movs	r0, #138	@ 0x8a
 8014b92:	183b      	adds	r3, r7, r0
 8014b94:	4960      	ldr	r1, [pc, #384]	@ (8014d18 <HAL_PCD_EP_DB_Transmit+0x384>)
 8014b96:	400a      	ands	r2, r1
 8014b98:	801a      	strh	r2, [r3, #0]
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	001a      	movs	r2, r3
 8014ba0:	68bb      	ldr	r3, [r7, #8]
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	009b      	lsls	r3, r3, #2
 8014ba6:	18d3      	adds	r3, r2, r3
 8014ba8:	183a      	adds	r2, r7, r0
 8014baa:	8812      	ldrh	r2, [r2, #0]
 8014bac:	495b      	ldr	r1, [pc, #364]	@ (8014d1c <HAL_PCD_EP_DB_Transmit+0x388>)
 8014bae:	430a      	orrs	r2, r1
 8014bb0:	b292      	uxth	r2, r2
 8014bb2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	2224      	movs	r2, #36	@ 0x24
 8014bb8:	5c9b      	ldrb	r3, [r3, r2]
 8014bba:	2b01      	cmp	r3, #1
 8014bbc:	d000      	beq.n	8014bc0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8014bbe:	e2c6      	b.n	801514e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	695a      	ldr	r2, [r3, #20]
 8014bc4:	2186      	movs	r1, #134	@ 0x86
 8014bc6:	187b      	adds	r3, r7, r1
 8014bc8:	881b      	ldrh	r3, [r3, #0]
 8014bca:	18d2      	adds	r2, r2, r3
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	69da      	ldr	r2, [r3, #28]
 8014bd4:	187b      	adds	r3, r7, r1
 8014bd6:	881b      	ldrh	r3, [r3, #0]
 8014bd8:	18d2      	adds	r2, r2, r3
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	6a1a      	ldr	r2, [r3, #32]
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	691b      	ldr	r3, [r3, #16]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d30c      	bcc.n	8014c04 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	691b      	ldr	r3, [r3, #16]
 8014bee:	218c      	movs	r1, #140	@ 0x8c
 8014bf0:	187a      	adds	r2, r7, r1
 8014bf2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	6a1a      	ldr	r2, [r3, #32]
 8014bf8:	187b      	adds	r3, r7, r1
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	1ad2      	subs	r2, r2, r3
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	621a      	str	r2, [r3, #32]
 8014c02:	e01a      	b.n	8014c3a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	6a1b      	ldr	r3, [r3, #32]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d10a      	bne.n	8014c22 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8014c0c:	2386      	movs	r3, #134	@ 0x86
 8014c0e:	18fb      	adds	r3, r7, r3
 8014c10:	881b      	ldrh	r3, [r3, #0]
 8014c12:	228c      	movs	r2, #140	@ 0x8c
 8014c14:	18ba      	adds	r2, r7, r2
 8014c16:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	2224      	movs	r2, #36	@ 0x24
 8014c1c:	2100      	movs	r1, #0
 8014c1e:	5499      	strb	r1, [r3, r2]
 8014c20:	e00b      	b.n	8014c3a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8014c22:	68bb      	ldr	r3, [r7, #8]
 8014c24:	2224      	movs	r2, #36	@ 0x24
 8014c26:	2100      	movs	r1, #0
 8014c28:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	6a1b      	ldr	r3, [r3, #32]
 8014c2e:	228c      	movs	r2, #140	@ 0x8c
 8014c30:	18ba      	adds	r2, r7, r2
 8014c32:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014c34:	68bb      	ldr	r3, [r7, #8]
 8014c36:	2200      	movs	r2, #0
 8014c38:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014c3a:	68bb      	ldr	r3, [r7, #8]
 8014c3c:	785b      	ldrb	r3, [r3, #1]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d000      	beq.n	8014c44 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8014c42:	e06d      	b.n	8014d20 <HAL_PCD_EP_DB_Transmit+0x38c>
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	2250      	movs	r2, #80	@ 0x50
 8014c50:	5a9b      	ldrh	r3, [r3, r2]
 8014c52:	b29b      	uxth	r3, r3
 8014c54:	001a      	movs	r2, r3
 8014c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c58:	189b      	adds	r3, r3, r2
 8014c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	00da      	lsls	r2, r3, #3
 8014c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c64:	18d3      	adds	r3, r2, r3
 8014c66:	4a29      	ldr	r2, [pc, #164]	@ (8014d0c <HAL_PCD_EP_DB_Transmit+0x378>)
 8014c68:	4694      	mov	ip, r2
 8014c6a:	4463      	add	r3, ip
 8014c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c70:	881b      	ldrh	r3, [r3, #0]
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	059b      	lsls	r3, r3, #22
 8014c76:	0d9b      	lsrs	r3, r3, #22
 8014c78:	b29a      	uxth	r2, r3
 8014c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c7c:	801a      	strh	r2, [r3, #0]
 8014c7e:	228c      	movs	r2, #140	@ 0x8c
 8014c80:	18bb      	adds	r3, r7, r2
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	2b3e      	cmp	r3, #62	@ 0x3e
 8014c86:	d91a      	bls.n	8014cbe <HAL_PCD_EP_DB_Transmit+0x32a>
 8014c88:	18bb      	adds	r3, r7, r2
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	095b      	lsrs	r3, r3, #5
 8014c8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014c90:	18bb      	adds	r3, r7, r2
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	221f      	movs	r2, #31
 8014c96:	4013      	ands	r3, r2
 8014c98:	d102      	bne.n	8014ca0 <HAL_PCD_EP_DB_Transmit+0x30c>
 8014c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014c9c:	3b01      	subs	r3, #1
 8014c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ca2:	881b      	ldrh	r3, [r3, #0]
 8014ca4:	b29a      	uxth	r2, r3
 8014ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014ca8:	b29b      	uxth	r3, r3
 8014caa:	029b      	lsls	r3, r3, #10
 8014cac:	b29b      	uxth	r3, r3
 8014cae:	4313      	orrs	r3, r2
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	4a17      	ldr	r2, [pc, #92]	@ (8014d10 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014cb4:	4313      	orrs	r3, r2
 8014cb6:	b29a      	uxth	r2, r3
 8014cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cba:	801a      	strh	r2, [r3, #0]
 8014cbc:	e04f      	b.n	8014d5e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014cbe:	238c      	movs	r3, #140	@ 0x8c
 8014cc0:	18fb      	adds	r3, r7, r3
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d108      	bne.n	8014cda <HAL_PCD_EP_DB_Transmit+0x346>
 8014cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cca:	881b      	ldrh	r3, [r3, #0]
 8014ccc:	b29b      	uxth	r3, r3
 8014cce:	4a10      	ldr	r2, [pc, #64]	@ (8014d10 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014cd0:	4313      	orrs	r3, r2
 8014cd2:	b29a      	uxth	r2, r3
 8014cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cd6:	801a      	strh	r2, [r3, #0]
 8014cd8:	e041      	b.n	8014d5e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014cda:	228c      	movs	r2, #140	@ 0x8c
 8014cdc:	18bb      	adds	r3, r7, r2
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	085b      	lsrs	r3, r3, #1
 8014ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014ce4:	18bb      	adds	r3, r7, r2
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	2201      	movs	r2, #1
 8014cea:	4013      	ands	r3, r2
 8014cec:	d002      	beq.n	8014cf4 <HAL_PCD_EP_DB_Transmit+0x360>
 8014cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cf6:	881b      	ldrh	r3, [r3, #0]
 8014cf8:	b29a      	uxth	r2, r3
 8014cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	029b      	lsls	r3, r3, #10
 8014d00:	b29b      	uxth	r3, r3
 8014d02:	4313      	orrs	r3, r2
 8014d04:	b29a      	uxth	r2, r3
 8014d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d08:	801a      	strh	r2, [r3, #0]
 8014d0a:	e028      	b.n	8014d5e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014d0c:	00000402 	.word	0x00000402
 8014d10:	ffff8000 	.word	0xffff8000
 8014d14:	00000406 	.word	0x00000406
 8014d18:	ffff8f8f 	.word	0xffff8f8f
 8014d1c:	ffffc080 	.word	0xffffc080
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	785b      	ldrb	r3, [r3, #1]
 8014d24:	2b01      	cmp	r3, #1
 8014d26:	d11a      	bne.n	8014d5e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	2250      	movs	r2, #80	@ 0x50
 8014d34:	5a9b      	ldrh	r3, [r3, r2]
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	001a      	movs	r2, r3
 8014d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d3c:	189b      	adds	r3, r3, r2
 8014d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	781b      	ldrb	r3, [r3, #0]
 8014d44:	00da      	lsls	r2, r3, #3
 8014d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d48:	18d3      	adds	r3, r2, r3
 8014d4a:	4adb      	ldr	r2, [pc, #876]	@ (80150b8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014d4c:	4694      	mov	ip, r2
 8014d4e:	4463      	add	r3, ip
 8014d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8014d52:	238c      	movs	r3, #140	@ 0x8c
 8014d54:	18fb      	adds	r3, r7, r3
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	b29a      	uxth	r2, r3
 8014d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d5c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	6818      	ldr	r0, [r3, #0]
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	6959      	ldr	r1, [r3, #20]
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	891a      	ldrh	r2, [r3, #8]
 8014d6a:	238c      	movs	r3, #140	@ 0x8c
 8014d6c:	18fb      	adds	r3, r7, r3
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	b29b      	uxth	r3, r3
 8014d72:	f006 fb85 	bl	801b480 <USB_WritePMA>
 8014d76:	e1ea      	b.n	801514e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	2250      	movs	r2, #80	@ 0x50
 8014d7e:	5a9b      	ldrh	r3, [r3, r2]
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	001a      	movs	r2, r3
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	781b      	ldrb	r3, [r3, #0]
 8014d88:	00db      	lsls	r3, r3, #3
 8014d8a:	18d2      	adds	r2, r2, r3
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	18d3      	adds	r3, r2, r3
 8014d92:	4aca      	ldr	r2, [pc, #808]	@ (80150bc <HAL_PCD_EP_DB_Transmit+0x728>)
 8014d94:	4694      	mov	ip, r2
 8014d96:	4463      	add	r3, ip
 8014d98:	881a      	ldrh	r2, [r3, #0]
 8014d9a:	2186      	movs	r1, #134	@ 0x86
 8014d9c:	187b      	adds	r3, r7, r1
 8014d9e:	0592      	lsls	r2, r2, #22
 8014da0:	0d92      	lsrs	r2, r2, #22
 8014da2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8014da4:	68bb      	ldr	r3, [r7, #8]
 8014da6:	699a      	ldr	r2, [r3, #24]
 8014da8:	187b      	adds	r3, r7, r1
 8014daa:	881b      	ldrh	r3, [r3, #0]
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d307      	bcc.n	8014dc0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8014db0:	68bb      	ldr	r3, [r7, #8]
 8014db2:	699a      	ldr	r2, [r3, #24]
 8014db4:	187b      	adds	r3, r7, r1
 8014db6:	881b      	ldrh	r3, [r3, #0]
 8014db8:	1ad2      	subs	r2, r2, r3
 8014dba:	68bb      	ldr	r3, [r7, #8]
 8014dbc:	619a      	str	r2, [r3, #24]
 8014dbe:	e002      	b.n	8014dc6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8014dc0:	68bb      	ldr	r3, [r7, #8]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	699b      	ldr	r3, [r3, #24]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d000      	beq.n	8014dd0 <HAL_PCD_EP_DB_Transmit+0x43c>
 8014dce:	e0bb      	b.n	8014f48 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014dd0:	68bb      	ldr	r3, [r7, #8]
 8014dd2:	785b      	ldrb	r3, [r3, #1]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d125      	bne.n	8014e24 <HAL_PCD_EP_DB_Transmit+0x490>
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	2250      	movs	r2, #80	@ 0x50
 8014de4:	5a9b      	ldrh	r3, [r3, r2]
 8014de6:	b29b      	uxth	r3, r3
 8014de8:	001a      	movs	r2, r3
 8014dea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014dec:	189b      	adds	r3, r3, r2
 8014dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	781b      	ldrb	r3, [r3, #0]
 8014df4:	00da      	lsls	r2, r3, #3
 8014df6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014df8:	18d3      	adds	r3, r2, r3
 8014dfa:	4aaf      	ldr	r2, [pc, #700]	@ (80150b8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014dfc:	4694      	mov	ip, r2
 8014dfe:	4463      	add	r3, ip
 8014e00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8014e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e04:	881b      	ldrh	r3, [r3, #0]
 8014e06:	b29b      	uxth	r3, r3
 8014e08:	059b      	lsls	r3, r3, #22
 8014e0a:	0d9b      	lsrs	r3, r3, #22
 8014e0c:	b29a      	uxth	r2, r3
 8014e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e10:	801a      	strh	r2, [r3, #0]
 8014e12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e14:	881b      	ldrh	r3, [r3, #0]
 8014e16:	b29b      	uxth	r3, r3
 8014e18:	4aa9      	ldr	r2, [pc, #676]	@ (80150c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014e1a:	4313      	orrs	r3, r2
 8014e1c:	b29a      	uxth	r2, r3
 8014e1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e20:	801a      	strh	r2, [r3, #0]
 8014e22:	e01b      	b.n	8014e5c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	785b      	ldrb	r3, [r3, #1]
 8014e28:	2b01      	cmp	r3, #1
 8014e2a:	d117      	bne.n	8014e5c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	667b      	str	r3, [r7, #100]	@ 0x64
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	2250      	movs	r2, #80	@ 0x50
 8014e38:	5a9b      	ldrh	r3, [r3, r2]
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	001a      	movs	r2, r3
 8014e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014e40:	189b      	adds	r3, r3, r2
 8014e42:	667b      	str	r3, [r7, #100]	@ 0x64
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	781b      	ldrb	r3, [r3, #0]
 8014e48:	00da      	lsls	r2, r3, #3
 8014e4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014e4c:	18d3      	adds	r3, r2, r3
 8014e4e:	4a9a      	ldr	r2, [pc, #616]	@ (80150b8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014e50:	4694      	mov	ip, r2
 8014e52:	4463      	add	r3, ip
 8014e54:	663b      	str	r3, [r7, #96]	@ 0x60
 8014e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014e58:	2200      	movs	r2, #0
 8014e5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	677b      	str	r3, [r7, #116]	@ 0x74
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	785b      	ldrb	r3, [r3, #1]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d12b      	bne.n	8014ec2 <HAL_PCD_EP_DB_Transmit+0x52e>
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	2250      	movs	r2, #80	@ 0x50
 8014e76:	5a9b      	ldrh	r3, [r3, r2]
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	001a      	movs	r2, r3
 8014e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e7e:	189b      	adds	r3, r3, r2
 8014e80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	00da      	lsls	r2, r3, #3
 8014e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014e8a:	18d3      	adds	r3, r2, r3
 8014e8c:	4a8b      	ldr	r2, [pc, #556]	@ (80150bc <HAL_PCD_EP_DB_Transmit+0x728>)
 8014e8e:	4694      	mov	ip, r2
 8014e90:	4463      	add	r3, ip
 8014e92:	2180      	movs	r1, #128	@ 0x80
 8014e94:	187a      	adds	r2, r7, r1
 8014e96:	6013      	str	r3, [r2, #0]
 8014e98:	187b      	adds	r3, r7, r1
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	881b      	ldrh	r3, [r3, #0]
 8014e9e:	b29b      	uxth	r3, r3
 8014ea0:	059b      	lsls	r3, r3, #22
 8014ea2:	0d9b      	lsrs	r3, r3, #22
 8014ea4:	b29a      	uxth	r2, r3
 8014ea6:	187b      	adds	r3, r7, r1
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	801a      	strh	r2, [r3, #0]
 8014eac:	187b      	adds	r3, r7, r1
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	881b      	ldrh	r3, [r3, #0]
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	4a82      	ldr	r2, [pc, #520]	@ (80150c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014eb6:	4313      	orrs	r3, r2
 8014eb8:	b29a      	uxth	r2, r3
 8014eba:	187b      	adds	r3, r7, r1
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	801a      	strh	r2, [r3, #0]
 8014ec0:	e018      	b.n	8014ef4 <HAL_PCD_EP_DB_Transmit+0x560>
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	785b      	ldrb	r3, [r3, #1]
 8014ec6:	2b01      	cmp	r3, #1
 8014ec8:	d114      	bne.n	8014ef4 <HAL_PCD_EP_DB_Transmit+0x560>
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	2250      	movs	r2, #80	@ 0x50
 8014ed0:	5a9b      	ldrh	r3, [r3, r2]
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	001a      	movs	r2, r3
 8014ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014ed8:	189b      	adds	r3, r3, r2
 8014eda:	677b      	str	r3, [r7, #116]	@ 0x74
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	00da      	lsls	r2, r3, #3
 8014ee2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014ee4:	18d3      	adds	r3, r2, r3
 8014ee6:	4a75      	ldr	r2, [pc, #468]	@ (80150bc <HAL_PCD_EP_DB_Transmit+0x728>)
 8014ee8:	4694      	mov	ip, r2
 8014eea:	4463      	add	r3, ip
 8014eec:	673b      	str	r3, [r7, #112]	@ 0x70
 8014eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	781a      	ldrb	r2, [r3, #0]
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	0011      	movs	r1, r2
 8014efc:	0018      	movs	r0, r3
 8014efe:	f008 fb43 	bl	801d588 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014f02:	1dbb      	adds	r3, r7, #6
 8014f04:	881a      	ldrh	r2, [r3, #0]
 8014f06:	2380      	movs	r3, #128	@ 0x80
 8014f08:	01db      	lsls	r3, r3, #7
 8014f0a:	4013      	ands	r3, r2
 8014f0c:	d000      	beq.n	8014f10 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014f0e:	e11e      	b.n	801514e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	001a      	movs	r2, r3
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	781b      	ldrb	r3, [r3, #0]
 8014f1a:	009b      	lsls	r3, r3, #2
 8014f1c:	18d3      	adds	r3, r2, r3
 8014f1e:	881b      	ldrh	r3, [r3, #0]
 8014f20:	b29a      	uxth	r2, r3
 8014f22:	2088      	movs	r0, #136	@ 0x88
 8014f24:	183b      	adds	r3, r7, r0
 8014f26:	4967      	ldr	r1, [pc, #412]	@ (80150c4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014f28:	400a      	ands	r2, r1
 8014f2a:	801a      	strh	r2, [r3, #0]
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	001a      	movs	r2, r3
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	781b      	ldrb	r3, [r3, #0]
 8014f36:	009b      	lsls	r3, r3, #2
 8014f38:	18d3      	adds	r3, r2, r3
 8014f3a:	183a      	adds	r2, r7, r0
 8014f3c:	8812      	ldrh	r2, [r2, #0]
 8014f3e:	4962      	ldr	r1, [pc, #392]	@ (80150c8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014f40:	430a      	orrs	r2, r1
 8014f42:	b292      	uxth	r2, r2
 8014f44:	801a      	strh	r2, [r3, #0]
 8014f46:	e102      	b.n	801514e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014f48:	1dbb      	adds	r3, r7, #6
 8014f4a:	881a      	ldrh	r2, [r3, #0]
 8014f4c:	2380      	movs	r3, #128	@ 0x80
 8014f4e:	01db      	lsls	r3, r3, #7
 8014f50:	4013      	ands	r3, r2
 8014f52:	d11a      	bne.n	8014f8a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	001a      	movs	r2, r3
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	009b      	lsls	r3, r3, #2
 8014f60:	18d3      	adds	r3, r2, r3
 8014f62:	881b      	ldrh	r3, [r3, #0]
 8014f64:	b29a      	uxth	r2, r3
 8014f66:	204e      	movs	r0, #78	@ 0x4e
 8014f68:	183b      	adds	r3, r7, r0
 8014f6a:	4956      	ldr	r1, [pc, #344]	@ (80150c4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8014f6c:	400a      	ands	r2, r1
 8014f6e:	801a      	strh	r2, [r3, #0]
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	001a      	movs	r2, r3
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	009b      	lsls	r3, r3, #2
 8014f7c:	18d3      	adds	r3, r2, r3
 8014f7e:	183a      	adds	r2, r7, r0
 8014f80:	8812      	ldrh	r2, [r2, #0]
 8014f82:	4951      	ldr	r1, [pc, #324]	@ (80150c8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014f84:	430a      	orrs	r2, r1
 8014f86:	b292      	uxth	r2, r2
 8014f88:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	2224      	movs	r2, #36	@ 0x24
 8014f8e:	5c9b      	ldrb	r3, [r3, r2]
 8014f90:	2b01      	cmp	r3, #1
 8014f92:	d000      	beq.n	8014f96 <HAL_PCD_EP_DB_Transmit+0x602>
 8014f94:	e0db      	b.n	801514e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	695a      	ldr	r2, [r3, #20]
 8014f9a:	2186      	movs	r1, #134	@ 0x86
 8014f9c:	187b      	adds	r3, r7, r1
 8014f9e:	881b      	ldrh	r3, [r3, #0]
 8014fa0:	18d2      	adds	r2, r2, r3
 8014fa2:	68bb      	ldr	r3, [r7, #8]
 8014fa4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	69da      	ldr	r2, [r3, #28]
 8014faa:	187b      	adds	r3, r7, r1
 8014fac:	881b      	ldrh	r3, [r3, #0]
 8014fae:	18d2      	adds	r2, r2, r3
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	6a1a      	ldr	r2, [r3, #32]
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	691b      	ldr	r3, [r3, #16]
 8014fbc:	429a      	cmp	r2, r3
 8014fbe:	d30c      	bcc.n	8014fda <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	691b      	ldr	r3, [r3, #16]
 8014fc4:	218c      	movs	r1, #140	@ 0x8c
 8014fc6:	187a      	adds	r2, r7, r1
 8014fc8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014fca:	68bb      	ldr	r3, [r7, #8]
 8014fcc:	6a1a      	ldr	r2, [r3, #32]
 8014fce:	187b      	adds	r3, r7, r1
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	1ad2      	subs	r2, r2, r3
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	621a      	str	r2, [r3, #32]
 8014fd8:	e01a      	b.n	8015010 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	6a1b      	ldr	r3, [r3, #32]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d10a      	bne.n	8014ff8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014fe2:	2386      	movs	r3, #134	@ 0x86
 8014fe4:	18fb      	adds	r3, r7, r3
 8014fe6:	881b      	ldrh	r3, [r3, #0]
 8014fe8:	228c      	movs	r2, #140	@ 0x8c
 8014fea:	18ba      	adds	r2, r7, r2
 8014fec:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014fee:	68bb      	ldr	r3, [r7, #8]
 8014ff0:	2224      	movs	r2, #36	@ 0x24
 8014ff2:	2100      	movs	r1, #0
 8014ff4:	5499      	strb	r1, [r3, r2]
 8014ff6:	e00b      	b.n	8015010 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	6a1b      	ldr	r3, [r3, #32]
 8014ffc:	228c      	movs	r2, #140	@ 0x8c
 8014ffe:	18ba      	adds	r2, r7, r2
 8015000:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	2200      	movs	r2, #0
 8015006:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	2224      	movs	r2, #36	@ 0x24
 801500c:	2100      	movs	r1, #0
 801500e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	657b      	str	r3, [r7, #84]	@ 0x54
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	785b      	ldrb	r3, [r3, #1]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d000      	beq.n	8015020 <HAL_PCD_EP_DB_Transmit+0x68c>
 801501e:	e06e      	b.n	80150fe <HAL_PCD_EP_DB_Transmit+0x76a>
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2250      	movs	r2, #80	@ 0x50
 801502c:	5a9b      	ldrh	r3, [r3, r2]
 801502e:	b29b      	uxth	r3, r3
 8015030:	001a      	movs	r2, r3
 8015032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015034:	189b      	adds	r3, r3, r2
 8015036:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	781b      	ldrb	r3, [r3, #0]
 801503c:	00da      	lsls	r2, r3, #3
 801503e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015040:	18d3      	adds	r3, r2, r3
 8015042:	4a1e      	ldr	r2, [pc, #120]	@ (80150bc <HAL_PCD_EP_DB_Transmit+0x728>)
 8015044:	4694      	mov	ip, r2
 8015046:	4463      	add	r3, ip
 8015048:	65bb      	str	r3, [r7, #88]	@ 0x58
 801504a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801504c:	881b      	ldrh	r3, [r3, #0]
 801504e:	b29b      	uxth	r3, r3
 8015050:	059b      	lsls	r3, r3, #22
 8015052:	0d9b      	lsrs	r3, r3, #22
 8015054:	b29a      	uxth	r2, r3
 8015056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015058:	801a      	strh	r2, [r3, #0]
 801505a:	228c      	movs	r2, #140	@ 0x8c
 801505c:	18bb      	adds	r3, r7, r2
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	2b3e      	cmp	r3, #62	@ 0x3e
 8015062:	d91a      	bls.n	801509a <HAL_PCD_EP_DB_Transmit+0x706>
 8015064:	18bb      	adds	r3, r7, r2
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	095b      	lsrs	r3, r3, #5
 801506a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801506c:	18bb      	adds	r3, r7, r2
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	221f      	movs	r2, #31
 8015072:	4013      	ands	r3, r2
 8015074:	d102      	bne.n	801507c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8015076:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015078:	3b01      	subs	r3, #1
 801507a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801507c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801507e:	881b      	ldrh	r3, [r3, #0]
 8015080:	b29a      	uxth	r2, r3
 8015082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015084:	b29b      	uxth	r3, r3
 8015086:	029b      	lsls	r3, r3, #10
 8015088:	b29b      	uxth	r3, r3
 801508a:	4313      	orrs	r3, r2
 801508c:	b29b      	uxth	r3, r3
 801508e:	4a0c      	ldr	r2, [pc, #48]	@ (80150c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8015090:	4313      	orrs	r3, r2
 8015092:	b29a      	uxth	r2, r3
 8015094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015096:	801a      	strh	r2, [r3, #0]
 8015098:	e04d      	b.n	8015136 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801509a:	238c      	movs	r3, #140	@ 0x8c
 801509c:	18fb      	adds	r3, r7, r3
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d113      	bne.n	80150cc <HAL_PCD_EP_DB_Transmit+0x738>
 80150a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80150a6:	881b      	ldrh	r3, [r3, #0]
 80150a8:	b29b      	uxth	r3, r3
 80150aa:	4a05      	ldr	r2, [pc, #20]	@ (80150c0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80150ac:	4313      	orrs	r3, r2
 80150ae:	b29a      	uxth	r2, r3
 80150b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80150b2:	801a      	strh	r2, [r3, #0]
 80150b4:	e03f      	b.n	8015136 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80150b6:	46c0      	nop			@ (mov r8, r8)
 80150b8:	00000402 	.word	0x00000402
 80150bc:	00000406 	.word	0x00000406
 80150c0:	ffff8000 	.word	0xffff8000
 80150c4:	ffff8f8f 	.word	0xffff8f8f
 80150c8:	ffffc080 	.word	0xffffc080
 80150cc:	228c      	movs	r2, #140	@ 0x8c
 80150ce:	18bb      	adds	r3, r7, r2
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	085b      	lsrs	r3, r3, #1
 80150d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80150d6:	18bb      	adds	r3, r7, r2
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	2201      	movs	r2, #1
 80150dc:	4013      	ands	r3, r2
 80150de:	d002      	beq.n	80150e6 <HAL_PCD_EP_DB_Transmit+0x752>
 80150e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80150e2:	3301      	adds	r3, #1
 80150e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80150e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80150e8:	881b      	ldrh	r3, [r3, #0]
 80150ea:	b29a      	uxth	r2, r3
 80150ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	029b      	lsls	r3, r3, #10
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	4313      	orrs	r3, r2
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80150fa:	801a      	strh	r2, [r3, #0]
 80150fc:	e01b      	b.n	8015136 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	785b      	ldrb	r3, [r3, #1]
 8015102:	2b01      	cmp	r3, #1
 8015104:	d117      	bne.n	8015136 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	2250      	movs	r2, #80	@ 0x50
 801510c:	5a9b      	ldrh	r3, [r3, r2]
 801510e:	b29b      	uxth	r3, r3
 8015110:	001a      	movs	r2, r3
 8015112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015114:	189b      	adds	r3, r3, r2
 8015116:	657b      	str	r3, [r7, #84]	@ 0x54
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	00da      	lsls	r2, r3, #3
 801511e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015120:	18d3      	adds	r3, r2, r3
 8015122:	4a21      	ldr	r2, [pc, #132]	@ (80151a8 <HAL_PCD_EP_DB_Transmit+0x814>)
 8015124:	4694      	mov	ip, r2
 8015126:	4463      	add	r3, ip
 8015128:	653b      	str	r3, [r7, #80]	@ 0x50
 801512a:	238c      	movs	r3, #140	@ 0x8c
 801512c:	18fb      	adds	r3, r7, r3
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	b29a      	uxth	r2, r3
 8015132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015134:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	6818      	ldr	r0, [r3, #0]
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	6959      	ldr	r1, [r3, #20]
 801513e:	68bb      	ldr	r3, [r7, #8]
 8015140:	895a      	ldrh	r2, [r3, #10]
 8015142:	238c      	movs	r3, #140	@ 0x8c
 8015144:	18fb      	adds	r3, r7, r3
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	b29b      	uxth	r3, r3
 801514a:	f006 f999 	bl	801b480 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	001a      	movs	r2, r3
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	009b      	lsls	r3, r3, #2
 801515a:	18d3      	adds	r3, r2, r3
 801515c:	881b      	ldrh	r3, [r3, #0]
 801515e:	b29a      	uxth	r2, r3
 8015160:	2014      	movs	r0, #20
 8015162:	183b      	adds	r3, r7, r0
 8015164:	4911      	ldr	r1, [pc, #68]	@ (80151ac <HAL_PCD_EP_DB_Transmit+0x818>)
 8015166:	400a      	ands	r2, r1
 8015168:	801a      	strh	r2, [r3, #0]
 801516a:	183b      	adds	r3, r7, r0
 801516c:	183a      	adds	r2, r7, r0
 801516e:	8812      	ldrh	r2, [r2, #0]
 8015170:	2110      	movs	r1, #16
 8015172:	404a      	eors	r2, r1
 8015174:	801a      	strh	r2, [r3, #0]
 8015176:	183b      	adds	r3, r7, r0
 8015178:	183a      	adds	r2, r7, r0
 801517a:	8812      	ldrh	r2, [r2, #0]
 801517c:	2120      	movs	r1, #32
 801517e:	404a      	eors	r2, r1
 8015180:	801a      	strh	r2, [r3, #0]
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	001a      	movs	r2, r3
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	781b      	ldrb	r3, [r3, #0]
 801518c:	009b      	lsls	r3, r3, #2
 801518e:	18d3      	adds	r3, r2, r3
 8015190:	183a      	adds	r2, r7, r0
 8015192:	8812      	ldrh	r2, [r2, #0]
 8015194:	4906      	ldr	r1, [pc, #24]	@ (80151b0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8015196:	430a      	orrs	r2, r1
 8015198:	b292      	uxth	r2, r2
 801519a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801519c:	2300      	movs	r3, #0
}
 801519e:	0018      	movs	r0, r3
 80151a0:	46bd      	mov	sp, r7
 80151a2:	b024      	add	sp, #144	@ 0x90
 80151a4:	bd80      	pop	{r7, pc}
 80151a6:	46c0      	nop			@ (mov r8, r8)
 80151a8:	00000406 	.word	0x00000406
 80151ac:	ffff8fbf 	.word	0xffff8fbf
 80151b0:	ffff8080 	.word	0xffff8080

080151b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80151b4:	b590      	push	{r4, r7, lr}
 80151b6:	b087      	sub	sp, #28
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	60f8      	str	r0, [r7, #12]
 80151bc:	0008      	movs	r0, r1
 80151be:	0011      	movs	r1, r2
 80151c0:	607b      	str	r3, [r7, #4]
 80151c2:	240a      	movs	r4, #10
 80151c4:	193b      	adds	r3, r7, r4
 80151c6:	1c02      	adds	r2, r0, #0
 80151c8:	801a      	strh	r2, [r3, #0]
 80151ca:	2308      	movs	r3, #8
 80151cc:	18fb      	adds	r3, r7, r3
 80151ce:	1c0a      	adds	r2, r1, #0
 80151d0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80151d2:	0021      	movs	r1, r4
 80151d4:	187b      	adds	r3, r7, r1
 80151d6:	881b      	ldrh	r3, [r3, #0]
 80151d8:	2280      	movs	r2, #128	@ 0x80
 80151da:	4013      	ands	r3, r2
 80151dc:	b29b      	uxth	r3, r3
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d00c      	beq.n	80151fc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80151e2:	187b      	adds	r3, r7, r1
 80151e4:	881b      	ldrh	r3, [r3, #0]
 80151e6:	2207      	movs	r2, #7
 80151e8:	4013      	ands	r3, r2
 80151ea:	1c5a      	adds	r2, r3, #1
 80151ec:	0013      	movs	r3, r2
 80151ee:	009b      	lsls	r3, r3, #2
 80151f0:	189b      	adds	r3, r3, r2
 80151f2:	00db      	lsls	r3, r3, #3
 80151f4:	68fa      	ldr	r2, [r7, #12]
 80151f6:	18d3      	adds	r3, r2, r3
 80151f8:	617b      	str	r3, [r7, #20]
 80151fa:	e00b      	b.n	8015214 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80151fc:	230a      	movs	r3, #10
 80151fe:	18fb      	adds	r3, r7, r3
 8015200:	881a      	ldrh	r2, [r3, #0]
 8015202:	0013      	movs	r3, r2
 8015204:	009b      	lsls	r3, r3, #2
 8015206:	189b      	adds	r3, r3, r2
 8015208:	00db      	lsls	r3, r3, #3
 801520a:	3369      	adds	r3, #105	@ 0x69
 801520c:	33ff      	adds	r3, #255	@ 0xff
 801520e:	68fa      	ldr	r2, [r7, #12]
 8015210:	18d3      	adds	r3, r2, r3
 8015212:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8015214:	2308      	movs	r3, #8
 8015216:	18fb      	adds	r3, r7, r3
 8015218:	881b      	ldrh	r3, [r3, #0]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d107      	bne.n	801522e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801521e:	697b      	ldr	r3, [r7, #20]
 8015220:	2200      	movs	r2, #0
 8015222:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	b29a      	uxth	r2, r3
 8015228:	697b      	ldr	r3, [r7, #20]
 801522a:	80da      	strh	r2, [r3, #6]
 801522c:	e00b      	b.n	8015246 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801522e:	697b      	ldr	r3, [r7, #20]
 8015230:	2201      	movs	r2, #1
 8015232:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	b29a      	uxth	r2, r3
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	0c1b      	lsrs	r3, r3, #16
 8015240:	b29a      	uxth	r2, r3
 8015242:	697b      	ldr	r3, [r7, #20]
 8015244:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8015246:	2300      	movs	r3, #0
}
 8015248:	0018      	movs	r0, r3
 801524a:	46bd      	mov	sp, r7
 801524c:	b007      	add	sp, #28
 801524e:	bd90      	pop	{r4, r7, pc}

08015250 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801525e:	687a      	ldr	r2, [r7, #4]
 8015260:	23ba      	movs	r3, #186	@ 0xba
 8015262:	009b      	lsls	r3, r3, #2
 8015264:	2101      	movs	r1, #1
 8015266:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8015268:	687a      	ldr	r2, [r7, #4]
 801526a:	23b8      	movs	r3, #184	@ 0xb8
 801526c:	009b      	lsls	r3, r3, #2
 801526e:	2100      	movs	r1, #0
 8015270:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	2254      	movs	r2, #84	@ 0x54
 8015276:	5a9b      	ldrh	r3, [r3, r2]
 8015278:	b29b      	uxth	r3, r3
 801527a:	2201      	movs	r2, #1
 801527c:	4313      	orrs	r3, r2
 801527e:	b299      	uxth	r1, r3
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	2254      	movs	r2, #84	@ 0x54
 8015284:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	2254      	movs	r2, #84	@ 0x54
 801528a:	5a9b      	ldrh	r3, [r3, r2]
 801528c:	b29b      	uxth	r3, r3
 801528e:	2202      	movs	r2, #2
 8015290:	4313      	orrs	r3, r2
 8015292:	b299      	uxth	r1, r3
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	2254      	movs	r2, #84	@ 0x54
 8015298:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801529a:	2300      	movs	r3, #0
}
 801529c:	0018      	movs	r0, r3
 801529e:	46bd      	mov	sp, r7
 80152a0:	b004      	add	sp, #16
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b082      	sub	sp, #8
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	000a      	movs	r2, r1
 80152ae:	1cfb      	adds	r3, r7, #3
 80152b0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80152b2:	46c0      	nop			@ (mov r8, r8)
 80152b4:	46bd      	mov	sp, r7
 80152b6:	b002      	add	sp, #8
 80152b8:	bd80      	pop	{r7, pc}
	...

080152bc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80152c0:	4b04      	ldr	r3, [pc, #16]	@ (80152d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80152c2:	681a      	ldr	r2, [r3, #0]
 80152c4:	4b03      	ldr	r3, [pc, #12]	@ (80152d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80152c6:	2180      	movs	r1, #128	@ 0x80
 80152c8:	0049      	lsls	r1, r1, #1
 80152ca:	430a      	orrs	r2, r1
 80152cc:	601a      	str	r2, [r3, #0]
}
 80152ce:	46c0      	nop			@ (mov r8, r8)
 80152d0:	46bd      	mov	sp, r7
 80152d2:	bd80      	pop	{r7, pc}
 80152d4:	40007000 	.word	0x40007000

080152d8 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 80152dc:	4b04      	ldr	r3, [pc, #16]	@ (80152f0 <HAL_PWR_DisableBkUpAccess+0x18>)
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	4b03      	ldr	r3, [pc, #12]	@ (80152f0 <HAL_PWR_DisableBkUpAccess+0x18>)
 80152e2:	4904      	ldr	r1, [pc, #16]	@ (80152f4 <HAL_PWR_DisableBkUpAccess+0x1c>)
 80152e4:	400a      	ands	r2, r1
 80152e6:	601a      	str	r2, [r3, #0]
}
 80152e8:	46c0      	nop			@ (mov r8, r8)
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}
 80152ee:	46c0      	nop			@ (mov r8, r8)
 80152f0:	40007000 	.word	0x40007000
 80152f4:	fffffeff 	.word	0xfffffeff

080152f8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b086      	sub	sp, #24
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	000a      	movs	r2, r1
 8015302:	1cfb      	adds	r3, r7, #3
 8015304:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8015306:	2300      	movs	r3, #0
 8015308:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801530a:	4b25      	ldr	r3, [pc, #148]	@ (80153a0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801530c:	681a      	ldr	r2, [r3, #0]
 801530e:	2380      	movs	r3, #128	@ 0x80
 8015310:	009b      	lsls	r3, r3, #2
 8015312:	4013      	ands	r3, r2
 8015314:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8015316:	4b23      	ldr	r3, [pc, #140]	@ (80153a4 <HAL_PWR_EnterSTOPMode+0xac>)
 8015318:	6a1b      	ldr	r3, [r3, #32]
 801531a:	2201      	movs	r2, #1
 801531c:	4013      	ands	r3, r2
 801531e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d008      	beq.n	8015338 <HAL_PWR_EnterSTOPMode+0x40>
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d005      	beq.n	8015338 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801532c:	4b1c      	ldr	r3, [pc, #112]	@ (80153a0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801532e:	681a      	ldr	r2, [r3, #0]
 8015330:	4b1b      	ldr	r3, [pc, #108]	@ (80153a0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015332:	491d      	ldr	r1, [pc, #116]	@ (80153a8 <HAL_PWR_EnterSTOPMode+0xb0>)
 8015334:	400a      	ands	r2, r1
 8015336:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8015338:	4b19      	ldr	r3, [pc, #100]	@ (80153a0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	2203      	movs	r2, #3
 8015342:	4393      	bics	r3, r2
 8015344:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8015346:	697a      	ldr	r2, [r7, #20]
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	4313      	orrs	r3, r2
 801534c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801534e:	4b14      	ldr	r3, [pc, #80]	@ (80153a0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015350:	697a      	ldr	r2, [r7, #20]
 8015352:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015354:	4b15      	ldr	r3, [pc, #84]	@ (80153ac <HAL_PWR_EnterSTOPMode+0xb4>)
 8015356:	691a      	ldr	r2, [r3, #16]
 8015358:	4b14      	ldr	r3, [pc, #80]	@ (80153ac <HAL_PWR_EnterSTOPMode+0xb4>)
 801535a:	2104      	movs	r1, #4
 801535c:	430a      	orrs	r2, r1
 801535e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8015360:	1cfb      	adds	r3, r7, #3
 8015362:	781b      	ldrb	r3, [r3, #0]
 8015364:	2b01      	cmp	r3, #1
 8015366:	d101      	bne.n	801536c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8015368:	bf30      	wfi
 801536a:	e002      	b.n	8015372 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801536c:	bf40      	sev
    __WFE();
 801536e:	bf20      	wfe
    __WFE();
 8015370:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8015372:	4b0e      	ldr	r3, [pc, #56]	@ (80153ac <HAL_PWR_EnterSTOPMode+0xb4>)
 8015374:	691a      	ldr	r2, [r3, #16]
 8015376:	4b0d      	ldr	r3, [pc, #52]	@ (80153ac <HAL_PWR_EnterSTOPMode+0xb4>)
 8015378:	2104      	movs	r1, #4
 801537a:	438a      	bics	r2, r1
 801537c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d009      	beq.n	8015398 <HAL_PWR_EnterSTOPMode+0xa0>
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d006      	beq.n	8015398 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801538a:	4b05      	ldr	r3, [pc, #20]	@ (80153a0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801538c:	681a      	ldr	r2, [r3, #0]
 801538e:	4b04      	ldr	r3, [pc, #16]	@ (80153a0 <HAL_PWR_EnterSTOPMode+0xa8>)
 8015390:	2180      	movs	r1, #128	@ 0x80
 8015392:	0089      	lsls	r1, r1, #2
 8015394:	430a      	orrs	r2, r1
 8015396:	601a      	str	r2, [r3, #0]
  }
}
 8015398:	46c0      	nop			@ (mov r8, r8)
 801539a:	46bd      	mov	sp, r7
 801539c:	b006      	add	sp, #24
 801539e:	bd80      	pop	{r7, pc}
 80153a0:	40007000 	.word	0x40007000
 80153a4:	40010000 	.word	0x40010000
 80153a8:	fffffdff 	.word	0xfffffdff
 80153ac:	e000ed00 	.word	0xe000ed00

080153b0 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80153b4:	4b07      	ldr	r3, [pc, #28]	@ (80153d4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80153b6:	681a      	ldr	r2, [r3, #0]
 80153b8:	4b06      	ldr	r3, [pc, #24]	@ (80153d4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80153ba:	2102      	movs	r1, #2
 80153bc:	430a      	orrs	r2, r1
 80153be:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80153c0:	4b05      	ldr	r3, [pc, #20]	@ (80153d8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80153c2:	691a      	ldr	r2, [r3, #16]
 80153c4:	4b04      	ldr	r3, [pc, #16]	@ (80153d8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80153c6:	2104      	movs	r1, #4
 80153c8:	430a      	orrs	r2, r1
 80153ca:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80153cc:	bf30      	wfi
}
 80153ce:	46c0      	nop			@ (mov r8, r8)
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}
 80153d4:	40007000 	.word	0x40007000
 80153d8:	e000ed00 	.word	0xe000ed00

080153dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80153dc:	b5b0      	push	{r4, r5, r7, lr}
 80153de:	b08a      	sub	sp, #40	@ 0x28
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d102      	bne.n	80153f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80153ea:	2301      	movs	r3, #1
 80153ec:	f000 fbbf 	bl	8015b6e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80153f0:	4bc9      	ldr	r3, [pc, #804]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80153f2:	68db      	ldr	r3, [r3, #12]
 80153f4:	220c      	movs	r2, #12
 80153f6:	4013      	ands	r3, r2
 80153f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80153fa:	4bc7      	ldr	r3, [pc, #796]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80153fc:	68da      	ldr	r2, [r3, #12]
 80153fe:	2380      	movs	r3, #128	@ 0x80
 8015400:	025b      	lsls	r3, r3, #9
 8015402:	4013      	ands	r3, r2
 8015404:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	2201      	movs	r2, #1
 801540c:	4013      	ands	r3, r2
 801540e:	d100      	bne.n	8015412 <HAL_RCC_OscConfig+0x36>
 8015410:	e07e      	b.n	8015510 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8015412:	69fb      	ldr	r3, [r7, #28]
 8015414:	2b08      	cmp	r3, #8
 8015416:	d007      	beq.n	8015428 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	2b0c      	cmp	r3, #12
 801541c:	d112      	bne.n	8015444 <HAL_RCC_OscConfig+0x68>
 801541e:	69ba      	ldr	r2, [r7, #24]
 8015420:	2380      	movs	r3, #128	@ 0x80
 8015422:	025b      	lsls	r3, r3, #9
 8015424:	429a      	cmp	r2, r3
 8015426:	d10d      	bne.n	8015444 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015428:	4bbb      	ldr	r3, [pc, #748]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 801542a:	681a      	ldr	r2, [r3, #0]
 801542c:	2380      	movs	r3, #128	@ 0x80
 801542e:	029b      	lsls	r3, r3, #10
 8015430:	4013      	ands	r3, r2
 8015432:	d100      	bne.n	8015436 <HAL_RCC_OscConfig+0x5a>
 8015434:	e06b      	b.n	801550e <HAL_RCC_OscConfig+0x132>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	685b      	ldr	r3, [r3, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d167      	bne.n	801550e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801543e:	2301      	movs	r3, #1
 8015440:	f000 fb95 	bl	8015b6e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	685a      	ldr	r2, [r3, #4]
 8015448:	2380      	movs	r3, #128	@ 0x80
 801544a:	025b      	lsls	r3, r3, #9
 801544c:	429a      	cmp	r2, r3
 801544e:	d107      	bne.n	8015460 <HAL_RCC_OscConfig+0x84>
 8015450:	4bb1      	ldr	r3, [pc, #708]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	4bb0      	ldr	r3, [pc, #704]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015456:	2180      	movs	r1, #128	@ 0x80
 8015458:	0249      	lsls	r1, r1, #9
 801545a:	430a      	orrs	r2, r1
 801545c:	601a      	str	r2, [r3, #0]
 801545e:	e027      	b.n	80154b0 <HAL_RCC_OscConfig+0xd4>
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	685a      	ldr	r2, [r3, #4]
 8015464:	23a0      	movs	r3, #160	@ 0xa0
 8015466:	02db      	lsls	r3, r3, #11
 8015468:	429a      	cmp	r2, r3
 801546a:	d10e      	bne.n	801548a <HAL_RCC_OscConfig+0xae>
 801546c:	4baa      	ldr	r3, [pc, #680]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 801546e:	681a      	ldr	r2, [r3, #0]
 8015470:	4ba9      	ldr	r3, [pc, #676]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015472:	2180      	movs	r1, #128	@ 0x80
 8015474:	02c9      	lsls	r1, r1, #11
 8015476:	430a      	orrs	r2, r1
 8015478:	601a      	str	r2, [r3, #0]
 801547a:	4ba7      	ldr	r3, [pc, #668]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 801547c:	681a      	ldr	r2, [r3, #0]
 801547e:	4ba6      	ldr	r3, [pc, #664]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015480:	2180      	movs	r1, #128	@ 0x80
 8015482:	0249      	lsls	r1, r1, #9
 8015484:	430a      	orrs	r2, r1
 8015486:	601a      	str	r2, [r3, #0]
 8015488:	e012      	b.n	80154b0 <HAL_RCC_OscConfig+0xd4>
 801548a:	4ba3      	ldr	r3, [pc, #652]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	4ba2      	ldr	r3, [pc, #648]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015490:	49a2      	ldr	r1, [pc, #648]	@ (801571c <HAL_RCC_OscConfig+0x340>)
 8015492:	400a      	ands	r2, r1
 8015494:	601a      	str	r2, [r3, #0]
 8015496:	4ba0      	ldr	r3, [pc, #640]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015498:	681a      	ldr	r2, [r3, #0]
 801549a:	2380      	movs	r3, #128	@ 0x80
 801549c:	025b      	lsls	r3, r3, #9
 801549e:	4013      	ands	r3, r2
 80154a0:	60fb      	str	r3, [r7, #12]
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	4b9c      	ldr	r3, [pc, #624]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80154a6:	681a      	ldr	r2, [r3, #0]
 80154a8:	4b9b      	ldr	r3, [pc, #620]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80154aa:	499d      	ldr	r1, [pc, #628]	@ (8015720 <HAL_RCC_OscConfig+0x344>)
 80154ac:	400a      	ands	r2, r1
 80154ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	685b      	ldr	r3, [r3, #4]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d015      	beq.n	80154e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80154b8:	f7f9 fe60 	bl	800f17c <HAL_GetTick>
 80154bc:	0003      	movs	r3, r0
 80154be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80154c0:	e009      	b.n	80154d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80154c2:	f7f9 fe5b 	bl	800f17c <HAL_GetTick>
 80154c6:	0002      	movs	r2, r0
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	1ad3      	subs	r3, r2, r3
 80154cc:	2b64      	cmp	r3, #100	@ 0x64
 80154ce:	d902      	bls.n	80154d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80154d0:	2303      	movs	r3, #3
 80154d2:	f000 fb4c 	bl	8015b6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80154d6:	4b90      	ldr	r3, [pc, #576]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80154d8:	681a      	ldr	r2, [r3, #0]
 80154da:	2380      	movs	r3, #128	@ 0x80
 80154dc:	029b      	lsls	r3, r3, #10
 80154de:	4013      	ands	r3, r2
 80154e0:	d0ef      	beq.n	80154c2 <HAL_RCC_OscConfig+0xe6>
 80154e2:	e015      	b.n	8015510 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80154e4:	f7f9 fe4a 	bl	800f17c <HAL_GetTick>
 80154e8:	0003      	movs	r3, r0
 80154ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80154ec:	e008      	b.n	8015500 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80154ee:	f7f9 fe45 	bl	800f17c <HAL_GetTick>
 80154f2:	0002      	movs	r2, r0
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	2b64      	cmp	r3, #100	@ 0x64
 80154fa:	d901      	bls.n	8015500 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80154fc:	2303      	movs	r3, #3
 80154fe:	e336      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015500:	4b85      	ldr	r3, [pc, #532]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015502:	681a      	ldr	r2, [r3, #0]
 8015504:	2380      	movs	r3, #128	@ 0x80
 8015506:	029b      	lsls	r3, r3, #10
 8015508:	4013      	ands	r3, r2
 801550a:	d1f0      	bne.n	80154ee <HAL_RCC_OscConfig+0x112>
 801550c:	e000      	b.n	8015510 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801550e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2202      	movs	r2, #2
 8015516:	4013      	ands	r3, r2
 8015518:	d100      	bne.n	801551c <HAL_RCC_OscConfig+0x140>
 801551a:	e099      	b.n	8015650 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8015522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015524:	2220      	movs	r2, #32
 8015526:	4013      	ands	r3, r2
 8015528:	d009      	beq.n	801553e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801552a:	4b7b      	ldr	r3, [pc, #492]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 801552c:	681a      	ldr	r2, [r3, #0]
 801552e:	4b7a      	ldr	r3, [pc, #488]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015530:	2120      	movs	r1, #32
 8015532:	430a      	orrs	r2, r1
 8015534:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8015536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015538:	2220      	movs	r2, #32
 801553a:	4393      	bics	r3, r2
 801553c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801553e:	69fb      	ldr	r3, [r7, #28]
 8015540:	2b04      	cmp	r3, #4
 8015542:	d005      	beq.n	8015550 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	2b0c      	cmp	r3, #12
 8015548:	d13e      	bne.n	80155c8 <HAL_RCC_OscConfig+0x1ec>
 801554a:	69bb      	ldr	r3, [r7, #24]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d13b      	bne.n	80155c8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8015550:	4b71      	ldr	r3, [pc, #452]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	2204      	movs	r2, #4
 8015556:	4013      	ands	r3, r2
 8015558:	d004      	beq.n	8015564 <HAL_RCC_OscConfig+0x188>
 801555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801555c:	2b00      	cmp	r3, #0
 801555e:	d101      	bne.n	8015564 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8015560:	2301      	movs	r3, #1
 8015562:	e304      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015564:	4b6c      	ldr	r3, [pc, #432]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	4a6e      	ldr	r2, [pc, #440]	@ (8015724 <HAL_RCC_OscConfig+0x348>)
 801556a:	4013      	ands	r3, r2
 801556c:	0019      	movs	r1, r3
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	691b      	ldr	r3, [r3, #16]
 8015572:	021a      	lsls	r2, r3, #8
 8015574:	4b68      	ldr	r3, [pc, #416]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015576:	430a      	orrs	r2, r1
 8015578:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801557a:	4b67      	ldr	r3, [pc, #412]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	2209      	movs	r2, #9
 8015580:	4393      	bics	r3, r2
 8015582:	0019      	movs	r1, r3
 8015584:	4b64      	ldr	r3, [pc, #400]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015588:	430a      	orrs	r2, r1
 801558a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801558c:	f000 fc42 	bl	8015e14 <HAL_RCC_GetSysClockFreq>
 8015590:	0001      	movs	r1, r0
 8015592:	4b61      	ldr	r3, [pc, #388]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015594:	68db      	ldr	r3, [r3, #12]
 8015596:	091b      	lsrs	r3, r3, #4
 8015598:	220f      	movs	r2, #15
 801559a:	4013      	ands	r3, r2
 801559c:	4a62      	ldr	r2, [pc, #392]	@ (8015728 <HAL_RCC_OscConfig+0x34c>)
 801559e:	5cd3      	ldrb	r3, [r2, r3]
 80155a0:	000a      	movs	r2, r1
 80155a2:	40da      	lsrs	r2, r3
 80155a4:	4b61      	ldr	r3, [pc, #388]	@ (801572c <HAL_RCC_OscConfig+0x350>)
 80155a6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80155a8:	4b61      	ldr	r3, [pc, #388]	@ (8015730 <HAL_RCC_OscConfig+0x354>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	2513      	movs	r5, #19
 80155ae:	197c      	adds	r4, r7, r5
 80155b0:	0018      	movs	r0, r3
 80155b2:	f7f9 fd9d 	bl	800f0f0 <HAL_InitTick>
 80155b6:	0003      	movs	r3, r0
 80155b8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80155ba:	197b      	adds	r3, r7, r5
 80155bc:	781b      	ldrb	r3, [r3, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d046      	beq.n	8015650 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80155c2:	197b      	adds	r3, r7, r5
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	e2d2      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80155c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d027      	beq.n	801561e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80155ce:	4b52      	ldr	r3, [pc, #328]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2209      	movs	r2, #9
 80155d4:	4393      	bics	r3, r2
 80155d6:	0019      	movs	r1, r3
 80155d8:	4b4f      	ldr	r3, [pc, #316]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80155da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155dc:	430a      	orrs	r2, r1
 80155de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80155e0:	f7f9 fdcc 	bl	800f17c <HAL_GetTick>
 80155e4:	0003      	movs	r3, r0
 80155e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80155e8:	e008      	b.n	80155fc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80155ea:	f7f9 fdc7 	bl	800f17c <HAL_GetTick>
 80155ee:	0002      	movs	r2, r0
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	1ad3      	subs	r3, r2, r3
 80155f4:	2b02      	cmp	r3, #2
 80155f6:	d901      	bls.n	80155fc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80155f8:	2303      	movs	r3, #3
 80155fa:	e2b8      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80155fc:	4b46      	ldr	r3, [pc, #280]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	2204      	movs	r2, #4
 8015602:	4013      	ands	r3, r2
 8015604:	d0f1      	beq.n	80155ea <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015606:	4b44      	ldr	r3, [pc, #272]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015608:	685b      	ldr	r3, [r3, #4]
 801560a:	4a46      	ldr	r2, [pc, #280]	@ (8015724 <HAL_RCC_OscConfig+0x348>)
 801560c:	4013      	ands	r3, r2
 801560e:	0019      	movs	r1, r3
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	691b      	ldr	r3, [r3, #16]
 8015614:	021a      	lsls	r2, r3, #8
 8015616:	4b40      	ldr	r3, [pc, #256]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015618:	430a      	orrs	r2, r1
 801561a:	605a      	str	r2, [r3, #4]
 801561c:	e018      	b.n	8015650 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801561e:	4b3e      	ldr	r3, [pc, #248]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015620:	681a      	ldr	r2, [r3, #0]
 8015622:	4b3d      	ldr	r3, [pc, #244]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015624:	2101      	movs	r1, #1
 8015626:	438a      	bics	r2, r1
 8015628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801562a:	f7f9 fda7 	bl	800f17c <HAL_GetTick>
 801562e:	0003      	movs	r3, r0
 8015630:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015632:	e008      	b.n	8015646 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015634:	f7f9 fda2 	bl	800f17c <HAL_GetTick>
 8015638:	0002      	movs	r2, r0
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	1ad3      	subs	r3, r2, r3
 801563e:	2b02      	cmp	r3, #2
 8015640:	d901      	bls.n	8015646 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8015642:	2303      	movs	r3, #3
 8015644:	e293      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015646:	4b34      	ldr	r3, [pc, #208]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	2204      	movs	r2, #4
 801564c:	4013      	ands	r3, r2
 801564e:	d1f1      	bne.n	8015634 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	2210      	movs	r2, #16
 8015656:	4013      	ands	r3, r2
 8015658:	d100      	bne.n	801565c <HAL_RCC_OscConfig+0x280>
 801565a:	e0a2      	b.n	80157a2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801565c:	69fb      	ldr	r3, [r7, #28]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d140      	bne.n	80156e4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8015662:	4b2d      	ldr	r3, [pc, #180]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015664:	681a      	ldr	r2, [r3, #0]
 8015666:	2380      	movs	r3, #128	@ 0x80
 8015668:	009b      	lsls	r3, r3, #2
 801566a:	4013      	ands	r3, r2
 801566c:	d005      	beq.n	801567a <HAL_RCC_OscConfig+0x29e>
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	69db      	ldr	r3, [r3, #28]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d101      	bne.n	801567a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8015676:	2301      	movs	r3, #1
 8015678:	e279      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801567a:	4b27      	ldr	r3, [pc, #156]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	4a2d      	ldr	r2, [pc, #180]	@ (8015734 <HAL_RCC_OscConfig+0x358>)
 8015680:	4013      	ands	r3, r2
 8015682:	0019      	movs	r1, r3
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015688:	4b23      	ldr	r3, [pc, #140]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 801568a:	430a      	orrs	r2, r1
 801568c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801568e:	4b22      	ldr	r3, [pc, #136]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 8015690:	685b      	ldr	r3, [r3, #4]
 8015692:	021b      	lsls	r3, r3, #8
 8015694:	0a19      	lsrs	r1, r3, #8
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	6a1b      	ldr	r3, [r3, #32]
 801569a:	061a      	lsls	r2, r3, #24
 801569c:	4b1e      	ldr	r3, [pc, #120]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 801569e:	430a      	orrs	r2, r1
 80156a0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156a6:	0b5b      	lsrs	r3, r3, #13
 80156a8:	3301      	adds	r3, #1
 80156aa:	2280      	movs	r2, #128	@ 0x80
 80156ac:	0212      	lsls	r2, r2, #8
 80156ae:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80156b0:	4b19      	ldr	r3, [pc, #100]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80156b2:	68db      	ldr	r3, [r3, #12]
 80156b4:	091b      	lsrs	r3, r3, #4
 80156b6:	210f      	movs	r1, #15
 80156b8:	400b      	ands	r3, r1
 80156ba:	491b      	ldr	r1, [pc, #108]	@ (8015728 <HAL_RCC_OscConfig+0x34c>)
 80156bc:	5ccb      	ldrb	r3, [r1, r3]
 80156be:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80156c0:	4b1a      	ldr	r3, [pc, #104]	@ (801572c <HAL_RCC_OscConfig+0x350>)
 80156c2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80156c4:	4b1a      	ldr	r3, [pc, #104]	@ (8015730 <HAL_RCC_OscConfig+0x354>)
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	2513      	movs	r5, #19
 80156ca:	197c      	adds	r4, r7, r5
 80156cc:	0018      	movs	r0, r3
 80156ce:	f7f9 fd0f 	bl	800f0f0 <HAL_InitTick>
 80156d2:	0003      	movs	r3, r0
 80156d4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80156d6:	197b      	adds	r3, r7, r5
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d061      	beq.n	80157a2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80156de:	197b      	adds	r3, r7, r5
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	e244      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	69db      	ldr	r3, [r3, #28]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d040      	beq.n	801576e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80156ec:	4b0a      	ldr	r3, [pc, #40]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80156ee:	681a      	ldr	r2, [r3, #0]
 80156f0:	4b09      	ldr	r3, [pc, #36]	@ (8015718 <HAL_RCC_OscConfig+0x33c>)
 80156f2:	2180      	movs	r1, #128	@ 0x80
 80156f4:	0049      	lsls	r1, r1, #1
 80156f6:	430a      	orrs	r2, r1
 80156f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80156fa:	f7f9 fd3f 	bl	800f17c <HAL_GetTick>
 80156fe:	0003      	movs	r3, r0
 8015700:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015702:	e019      	b.n	8015738 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015704:	f7f9 fd3a 	bl	800f17c <HAL_GetTick>
 8015708:	0002      	movs	r2, r0
 801570a:	697b      	ldr	r3, [r7, #20]
 801570c:	1ad3      	subs	r3, r2, r3
 801570e:	2b02      	cmp	r3, #2
 8015710:	d912      	bls.n	8015738 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8015712:	2303      	movs	r3, #3
 8015714:	e22b      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
 8015716:	46c0      	nop			@ (mov r8, r8)
 8015718:	40021000 	.word	0x40021000
 801571c:	fffeffff 	.word	0xfffeffff
 8015720:	fffbffff 	.word	0xfffbffff
 8015724:	ffffe0ff 	.word	0xffffe0ff
 8015728:	08025cfc 	.word	0x08025cfc
 801572c:	200000d0 	.word	0x200000d0
 8015730:	200000e0 	.word	0x200000e0
 8015734:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015738:	4bca      	ldr	r3, [pc, #808]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 801573a:	681a      	ldr	r2, [r3, #0]
 801573c:	2380      	movs	r3, #128	@ 0x80
 801573e:	009b      	lsls	r3, r3, #2
 8015740:	4013      	ands	r3, r2
 8015742:	d0df      	beq.n	8015704 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8015744:	4bc7      	ldr	r3, [pc, #796]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	4ac7      	ldr	r2, [pc, #796]	@ (8015a68 <HAL_RCC_OscConfig+0x68c>)
 801574a:	4013      	ands	r3, r2
 801574c:	0019      	movs	r1, r3
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015752:	4bc4      	ldr	r3, [pc, #784]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015754:	430a      	orrs	r2, r1
 8015756:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015758:	4bc2      	ldr	r3, [pc, #776]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 801575a:	685b      	ldr	r3, [r3, #4]
 801575c:	021b      	lsls	r3, r3, #8
 801575e:	0a19      	lsrs	r1, r3, #8
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	6a1b      	ldr	r3, [r3, #32]
 8015764:	061a      	lsls	r2, r3, #24
 8015766:	4bbf      	ldr	r3, [pc, #764]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015768:	430a      	orrs	r2, r1
 801576a:	605a      	str	r2, [r3, #4]
 801576c:	e019      	b.n	80157a2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801576e:	4bbd      	ldr	r3, [pc, #756]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015770:	681a      	ldr	r2, [r3, #0]
 8015772:	4bbc      	ldr	r3, [pc, #752]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015774:	49bd      	ldr	r1, [pc, #756]	@ (8015a6c <HAL_RCC_OscConfig+0x690>)
 8015776:	400a      	ands	r2, r1
 8015778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801577a:	f7f9 fcff 	bl	800f17c <HAL_GetTick>
 801577e:	0003      	movs	r3, r0
 8015780:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8015782:	e008      	b.n	8015796 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8015784:	f7f9 fcfa 	bl	800f17c <HAL_GetTick>
 8015788:	0002      	movs	r2, r0
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	1ad3      	subs	r3, r2, r3
 801578e:	2b02      	cmp	r3, #2
 8015790:	d901      	bls.n	8015796 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8015792:	2303      	movs	r3, #3
 8015794:	e1eb      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8015796:	4bb3      	ldr	r3, [pc, #716]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015798:	681a      	ldr	r2, [r3, #0]
 801579a:	2380      	movs	r3, #128	@ 0x80
 801579c:	009b      	lsls	r3, r3, #2
 801579e:	4013      	ands	r3, r2
 80157a0:	d1f0      	bne.n	8015784 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	2208      	movs	r2, #8
 80157a8:	4013      	ands	r3, r2
 80157aa:	d036      	beq.n	801581a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	695b      	ldr	r3, [r3, #20]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d019      	beq.n	80157e8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80157b4:	4bab      	ldr	r3, [pc, #684]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80157b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80157b8:	4baa      	ldr	r3, [pc, #680]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80157ba:	2101      	movs	r1, #1
 80157bc:	430a      	orrs	r2, r1
 80157be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80157c0:	f7f9 fcdc 	bl	800f17c <HAL_GetTick>
 80157c4:	0003      	movs	r3, r0
 80157c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80157c8:	e008      	b.n	80157dc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80157ca:	f7f9 fcd7 	bl	800f17c <HAL_GetTick>
 80157ce:	0002      	movs	r2, r0
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	1ad3      	subs	r3, r2, r3
 80157d4:	2b02      	cmp	r3, #2
 80157d6:	d901      	bls.n	80157dc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80157d8:	2303      	movs	r3, #3
 80157da:	e1c8      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80157dc:	4ba1      	ldr	r3, [pc, #644]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80157de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80157e0:	2202      	movs	r2, #2
 80157e2:	4013      	ands	r3, r2
 80157e4:	d0f1      	beq.n	80157ca <HAL_RCC_OscConfig+0x3ee>
 80157e6:	e018      	b.n	801581a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80157e8:	4b9e      	ldr	r3, [pc, #632]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80157ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80157ec:	4b9d      	ldr	r3, [pc, #628]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80157ee:	2101      	movs	r1, #1
 80157f0:	438a      	bics	r2, r1
 80157f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80157f4:	f7f9 fcc2 	bl	800f17c <HAL_GetTick>
 80157f8:	0003      	movs	r3, r0
 80157fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80157fc:	e008      	b.n	8015810 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80157fe:	f7f9 fcbd 	bl	800f17c <HAL_GetTick>
 8015802:	0002      	movs	r2, r0
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	1ad3      	subs	r3, r2, r3
 8015808:	2b02      	cmp	r3, #2
 801580a:	d901      	bls.n	8015810 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801580c:	2303      	movs	r3, #3
 801580e:	e1ae      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015810:	4b94      	ldr	r3, [pc, #592]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015814:	2202      	movs	r2, #2
 8015816:	4013      	ands	r3, r2
 8015818:	d1f1      	bne.n	80157fe <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	2204      	movs	r2, #4
 8015820:	4013      	ands	r3, r2
 8015822:	d100      	bne.n	8015826 <HAL_RCC_OscConfig+0x44a>
 8015824:	e0ae      	b.n	8015984 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015826:	2023      	movs	r0, #35	@ 0x23
 8015828:	183b      	adds	r3, r7, r0
 801582a:	2200      	movs	r2, #0
 801582c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801582e:	4b8d      	ldr	r3, [pc, #564]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015832:	2380      	movs	r3, #128	@ 0x80
 8015834:	055b      	lsls	r3, r3, #21
 8015836:	4013      	ands	r3, r2
 8015838:	d109      	bne.n	801584e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801583a:	4b8a      	ldr	r3, [pc, #552]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 801583c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801583e:	4b89      	ldr	r3, [pc, #548]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015840:	2180      	movs	r1, #128	@ 0x80
 8015842:	0549      	lsls	r1, r1, #21
 8015844:	430a      	orrs	r2, r1
 8015846:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015848:	183b      	adds	r3, r7, r0
 801584a:	2201      	movs	r2, #1
 801584c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801584e:	4b88      	ldr	r3, [pc, #544]	@ (8015a70 <HAL_RCC_OscConfig+0x694>)
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	2380      	movs	r3, #128	@ 0x80
 8015854:	005b      	lsls	r3, r3, #1
 8015856:	4013      	ands	r3, r2
 8015858:	d11a      	bne.n	8015890 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801585a:	4b85      	ldr	r3, [pc, #532]	@ (8015a70 <HAL_RCC_OscConfig+0x694>)
 801585c:	681a      	ldr	r2, [r3, #0]
 801585e:	4b84      	ldr	r3, [pc, #528]	@ (8015a70 <HAL_RCC_OscConfig+0x694>)
 8015860:	2180      	movs	r1, #128	@ 0x80
 8015862:	0049      	lsls	r1, r1, #1
 8015864:	430a      	orrs	r2, r1
 8015866:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015868:	f7f9 fc88 	bl	800f17c <HAL_GetTick>
 801586c:	0003      	movs	r3, r0
 801586e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015870:	e008      	b.n	8015884 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015872:	f7f9 fc83 	bl	800f17c <HAL_GetTick>
 8015876:	0002      	movs	r2, r0
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	1ad3      	subs	r3, r2, r3
 801587c:	2b64      	cmp	r3, #100	@ 0x64
 801587e:	d901      	bls.n	8015884 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8015880:	2303      	movs	r3, #3
 8015882:	e174      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015884:	4b7a      	ldr	r3, [pc, #488]	@ (8015a70 <HAL_RCC_OscConfig+0x694>)
 8015886:	681a      	ldr	r2, [r3, #0]
 8015888:	2380      	movs	r3, #128	@ 0x80
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	4013      	ands	r3, r2
 801588e:	d0f0      	beq.n	8015872 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	689a      	ldr	r2, [r3, #8]
 8015894:	2380      	movs	r3, #128	@ 0x80
 8015896:	005b      	lsls	r3, r3, #1
 8015898:	429a      	cmp	r2, r3
 801589a:	d107      	bne.n	80158ac <HAL_RCC_OscConfig+0x4d0>
 801589c:	4b71      	ldr	r3, [pc, #452]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 801589e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158a0:	4b70      	ldr	r3, [pc, #448]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158a2:	2180      	movs	r1, #128	@ 0x80
 80158a4:	0049      	lsls	r1, r1, #1
 80158a6:	430a      	orrs	r2, r1
 80158a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80158aa:	e031      	b.n	8015910 <HAL_RCC_OscConfig+0x534>
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	689b      	ldr	r3, [r3, #8]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d10c      	bne.n	80158ce <HAL_RCC_OscConfig+0x4f2>
 80158b4:	4b6b      	ldr	r3, [pc, #428]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158b8:	4b6a      	ldr	r3, [pc, #424]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158ba:	496c      	ldr	r1, [pc, #432]	@ (8015a6c <HAL_RCC_OscConfig+0x690>)
 80158bc:	400a      	ands	r2, r1
 80158be:	651a      	str	r2, [r3, #80]	@ 0x50
 80158c0:	4b68      	ldr	r3, [pc, #416]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158c4:	4b67      	ldr	r3, [pc, #412]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158c6:	496b      	ldr	r1, [pc, #428]	@ (8015a74 <HAL_RCC_OscConfig+0x698>)
 80158c8:	400a      	ands	r2, r1
 80158ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80158cc:	e020      	b.n	8015910 <HAL_RCC_OscConfig+0x534>
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	689a      	ldr	r2, [r3, #8]
 80158d2:	23a0      	movs	r3, #160	@ 0xa0
 80158d4:	00db      	lsls	r3, r3, #3
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d10e      	bne.n	80158f8 <HAL_RCC_OscConfig+0x51c>
 80158da:	4b62      	ldr	r3, [pc, #392]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158de:	4b61      	ldr	r3, [pc, #388]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158e0:	2180      	movs	r1, #128	@ 0x80
 80158e2:	00c9      	lsls	r1, r1, #3
 80158e4:	430a      	orrs	r2, r1
 80158e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80158e8:	4b5e      	ldr	r3, [pc, #376]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158ec:	4b5d      	ldr	r3, [pc, #372]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158ee:	2180      	movs	r1, #128	@ 0x80
 80158f0:	0049      	lsls	r1, r1, #1
 80158f2:	430a      	orrs	r2, r1
 80158f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80158f6:	e00b      	b.n	8015910 <HAL_RCC_OscConfig+0x534>
 80158f8:	4b5a      	ldr	r3, [pc, #360]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158fc:	4b59      	ldr	r3, [pc, #356]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80158fe:	495b      	ldr	r1, [pc, #364]	@ (8015a6c <HAL_RCC_OscConfig+0x690>)
 8015900:	400a      	ands	r2, r1
 8015902:	651a      	str	r2, [r3, #80]	@ 0x50
 8015904:	4b57      	ldr	r3, [pc, #348]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015906:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015908:	4b56      	ldr	r3, [pc, #344]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 801590a:	495a      	ldr	r1, [pc, #360]	@ (8015a74 <HAL_RCC_OscConfig+0x698>)
 801590c:	400a      	ands	r2, r1
 801590e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	689b      	ldr	r3, [r3, #8]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d015      	beq.n	8015944 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015918:	f7f9 fc30 	bl	800f17c <HAL_GetTick>
 801591c:	0003      	movs	r3, r0
 801591e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015920:	e009      	b.n	8015936 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015922:	f7f9 fc2b 	bl	800f17c <HAL_GetTick>
 8015926:	0002      	movs	r2, r0
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	1ad3      	subs	r3, r2, r3
 801592c:	4a52      	ldr	r2, [pc, #328]	@ (8015a78 <HAL_RCC_OscConfig+0x69c>)
 801592e:	4293      	cmp	r3, r2
 8015930:	d901      	bls.n	8015936 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8015932:	2303      	movs	r3, #3
 8015934:	e11b      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015936:	4b4b      	ldr	r3, [pc, #300]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801593a:	2380      	movs	r3, #128	@ 0x80
 801593c:	009b      	lsls	r3, r3, #2
 801593e:	4013      	ands	r3, r2
 8015940:	d0ef      	beq.n	8015922 <HAL_RCC_OscConfig+0x546>
 8015942:	e014      	b.n	801596e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015944:	f7f9 fc1a 	bl	800f17c <HAL_GetTick>
 8015948:	0003      	movs	r3, r0
 801594a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801594c:	e009      	b.n	8015962 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801594e:	f7f9 fc15 	bl	800f17c <HAL_GetTick>
 8015952:	0002      	movs	r2, r0
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	1ad3      	subs	r3, r2, r3
 8015958:	4a47      	ldr	r2, [pc, #284]	@ (8015a78 <HAL_RCC_OscConfig+0x69c>)
 801595a:	4293      	cmp	r3, r2
 801595c:	d901      	bls.n	8015962 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801595e:	2303      	movs	r3, #3
 8015960:	e105      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015962:	4b40      	ldr	r3, [pc, #256]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015964:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015966:	2380      	movs	r3, #128	@ 0x80
 8015968:	009b      	lsls	r3, r3, #2
 801596a:	4013      	ands	r3, r2
 801596c:	d1ef      	bne.n	801594e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801596e:	2323      	movs	r3, #35	@ 0x23
 8015970:	18fb      	adds	r3, r7, r3
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	2b01      	cmp	r3, #1
 8015976:	d105      	bne.n	8015984 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015978:	4b3a      	ldr	r3, [pc, #232]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 801597a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801597c:	4b39      	ldr	r3, [pc, #228]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 801597e:	493f      	ldr	r1, [pc, #252]	@ (8015a7c <HAL_RCC_OscConfig+0x6a0>)
 8015980:	400a      	ands	r2, r1
 8015982:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	2220      	movs	r2, #32
 801598a:	4013      	ands	r3, r2
 801598c:	d049      	beq.n	8015a22 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	699b      	ldr	r3, [r3, #24]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d026      	beq.n	80159e4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8015996:	4b33      	ldr	r3, [pc, #204]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015998:	689a      	ldr	r2, [r3, #8]
 801599a:	4b32      	ldr	r3, [pc, #200]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 801599c:	2101      	movs	r1, #1
 801599e:	430a      	orrs	r2, r1
 80159a0:	609a      	str	r2, [r3, #8]
 80159a2:	4b30      	ldr	r3, [pc, #192]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80159a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80159a6:	4b2f      	ldr	r3, [pc, #188]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80159a8:	2101      	movs	r1, #1
 80159aa:	430a      	orrs	r2, r1
 80159ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80159ae:	4b34      	ldr	r3, [pc, #208]	@ (8015a80 <HAL_RCC_OscConfig+0x6a4>)
 80159b0:	6a1a      	ldr	r2, [r3, #32]
 80159b2:	4b33      	ldr	r3, [pc, #204]	@ (8015a80 <HAL_RCC_OscConfig+0x6a4>)
 80159b4:	2180      	movs	r1, #128	@ 0x80
 80159b6:	0189      	lsls	r1, r1, #6
 80159b8:	430a      	orrs	r2, r1
 80159ba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80159bc:	f7f9 fbde 	bl	800f17c <HAL_GetTick>
 80159c0:	0003      	movs	r3, r0
 80159c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80159c4:	e008      	b.n	80159d8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80159c6:	f7f9 fbd9 	bl	800f17c <HAL_GetTick>
 80159ca:	0002      	movs	r2, r0
 80159cc:	697b      	ldr	r3, [r7, #20]
 80159ce:	1ad3      	subs	r3, r2, r3
 80159d0:	2b02      	cmp	r3, #2
 80159d2:	d901      	bls.n	80159d8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80159d4:	2303      	movs	r3, #3
 80159d6:	e0ca      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80159d8:	4b22      	ldr	r3, [pc, #136]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80159da:	689b      	ldr	r3, [r3, #8]
 80159dc:	2202      	movs	r2, #2
 80159de:	4013      	ands	r3, r2
 80159e0:	d0f1      	beq.n	80159c6 <HAL_RCC_OscConfig+0x5ea>
 80159e2:	e01e      	b.n	8015a22 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80159e4:	4b1f      	ldr	r3, [pc, #124]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80159e6:	689a      	ldr	r2, [r3, #8]
 80159e8:	4b1e      	ldr	r3, [pc, #120]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 80159ea:	2101      	movs	r1, #1
 80159ec:	438a      	bics	r2, r1
 80159ee:	609a      	str	r2, [r3, #8]
 80159f0:	4b23      	ldr	r3, [pc, #140]	@ (8015a80 <HAL_RCC_OscConfig+0x6a4>)
 80159f2:	6a1a      	ldr	r2, [r3, #32]
 80159f4:	4b22      	ldr	r3, [pc, #136]	@ (8015a80 <HAL_RCC_OscConfig+0x6a4>)
 80159f6:	4923      	ldr	r1, [pc, #140]	@ (8015a84 <HAL_RCC_OscConfig+0x6a8>)
 80159f8:	400a      	ands	r2, r1
 80159fa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80159fc:	f7f9 fbbe 	bl	800f17c <HAL_GetTick>
 8015a00:	0003      	movs	r3, r0
 8015a02:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015a04:	e008      	b.n	8015a18 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8015a06:	f7f9 fbb9 	bl	800f17c <HAL_GetTick>
 8015a0a:	0002      	movs	r2, r0
 8015a0c:	697b      	ldr	r3, [r7, #20]
 8015a0e:	1ad3      	subs	r3, r2, r3
 8015a10:	2b02      	cmp	r3, #2
 8015a12:	d901      	bls.n	8015a18 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8015a14:	2303      	movs	r3, #3
 8015a16:	e0aa      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015a18:	4b12      	ldr	r3, [pc, #72]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015a1a:	689b      	ldr	r3, [r3, #8]
 8015a1c:	2202      	movs	r2, #2
 8015a1e:	4013      	ands	r3, r2
 8015a20:	d1f1      	bne.n	8015a06 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d100      	bne.n	8015a2c <HAL_RCC_OscConfig+0x650>
 8015a2a:	e09f      	b.n	8015b6c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015a2c:	69fb      	ldr	r3, [r7, #28]
 8015a2e:	2b0c      	cmp	r3, #12
 8015a30:	d100      	bne.n	8015a34 <HAL_RCC_OscConfig+0x658>
 8015a32:	e078      	b.n	8015b26 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a38:	2b02      	cmp	r3, #2
 8015a3a:	d159      	bne.n	8015af0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015a3c:	4b09      	ldr	r3, [pc, #36]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015a3e:	681a      	ldr	r2, [r3, #0]
 8015a40:	4b08      	ldr	r3, [pc, #32]	@ (8015a64 <HAL_RCC_OscConfig+0x688>)
 8015a42:	4911      	ldr	r1, [pc, #68]	@ (8015a88 <HAL_RCC_OscConfig+0x6ac>)
 8015a44:	400a      	ands	r2, r1
 8015a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015a48:	f7f9 fb98 	bl	800f17c <HAL_GetTick>
 8015a4c:	0003      	movs	r3, r0
 8015a4e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015a50:	e01c      	b.n	8015a8c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015a52:	f7f9 fb93 	bl	800f17c <HAL_GetTick>
 8015a56:	0002      	movs	r2, r0
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	1ad3      	subs	r3, r2, r3
 8015a5c:	2b02      	cmp	r3, #2
 8015a5e:	d915      	bls.n	8015a8c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8015a60:	2303      	movs	r3, #3
 8015a62:	e084      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
 8015a64:	40021000 	.word	0x40021000
 8015a68:	ffff1fff 	.word	0xffff1fff
 8015a6c:	fffffeff 	.word	0xfffffeff
 8015a70:	40007000 	.word	0x40007000
 8015a74:	fffffbff 	.word	0xfffffbff
 8015a78:	00001388 	.word	0x00001388
 8015a7c:	efffffff 	.word	0xefffffff
 8015a80:	40010000 	.word	0x40010000
 8015a84:	ffffdfff 	.word	0xffffdfff
 8015a88:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8015b78 <HAL_RCC_OscConfig+0x79c>)
 8015a8e:	681a      	ldr	r2, [r3, #0]
 8015a90:	2380      	movs	r3, #128	@ 0x80
 8015a92:	049b      	lsls	r3, r3, #18
 8015a94:	4013      	ands	r3, r2
 8015a96:	d1dc      	bne.n	8015a52 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015a98:	4b37      	ldr	r3, [pc, #220]	@ (8015b78 <HAL_RCC_OscConfig+0x79c>)
 8015a9a:	68db      	ldr	r3, [r3, #12]
 8015a9c:	4a37      	ldr	r2, [pc, #220]	@ (8015b7c <HAL_RCC_OscConfig+0x7a0>)
 8015a9e:	4013      	ands	r3, r2
 8015aa0:	0019      	movs	r1, r3
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015aaa:	431a      	orrs	r2, r3
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015ab0:	431a      	orrs	r2, r3
 8015ab2:	4b31      	ldr	r3, [pc, #196]	@ (8015b78 <HAL_RCC_OscConfig+0x79c>)
 8015ab4:	430a      	orrs	r2, r1
 8015ab6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8015b78 <HAL_RCC_OscConfig+0x79c>)
 8015aba:	681a      	ldr	r2, [r3, #0]
 8015abc:	4b2e      	ldr	r3, [pc, #184]	@ (8015b78 <HAL_RCC_OscConfig+0x79c>)
 8015abe:	2180      	movs	r1, #128	@ 0x80
 8015ac0:	0449      	lsls	r1, r1, #17
 8015ac2:	430a      	orrs	r2, r1
 8015ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015ac6:	f7f9 fb59 	bl	800f17c <HAL_GetTick>
 8015aca:	0003      	movs	r3, r0
 8015acc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015ace:	e008      	b.n	8015ae2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015ad0:	f7f9 fb54 	bl	800f17c <HAL_GetTick>
 8015ad4:	0002      	movs	r2, r0
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	1ad3      	subs	r3, r2, r3
 8015ada:	2b02      	cmp	r3, #2
 8015adc:	d901      	bls.n	8015ae2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8015ade:	2303      	movs	r3, #3
 8015ae0:	e045      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8015ae2:	4b25      	ldr	r3, [pc, #148]	@ (8015b78 <HAL_RCC_OscConfig+0x79c>)
 8015ae4:	681a      	ldr	r2, [r3, #0]
 8015ae6:	2380      	movs	r3, #128	@ 0x80
 8015ae8:	049b      	lsls	r3, r3, #18
 8015aea:	4013      	ands	r3, r2
 8015aec:	d0f0      	beq.n	8015ad0 <HAL_RCC_OscConfig+0x6f4>
 8015aee:	e03d      	b.n	8015b6c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015af0:	4b21      	ldr	r3, [pc, #132]	@ (8015b78 <HAL_RCC_OscConfig+0x79c>)
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	4b20      	ldr	r3, [pc, #128]	@ (8015b78 <HAL_RCC_OscConfig+0x79c>)
 8015af6:	4922      	ldr	r1, [pc, #136]	@ (8015b80 <HAL_RCC_OscConfig+0x7a4>)
 8015af8:	400a      	ands	r2, r1
 8015afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015afc:	f7f9 fb3e 	bl	800f17c <HAL_GetTick>
 8015b00:	0003      	movs	r3, r0
 8015b02:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015b04:	e008      	b.n	8015b18 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015b06:	f7f9 fb39 	bl	800f17c <HAL_GetTick>
 8015b0a:	0002      	movs	r2, r0
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	1ad3      	subs	r3, r2, r3
 8015b10:	2b02      	cmp	r3, #2
 8015b12:	d901      	bls.n	8015b18 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8015b14:	2303      	movs	r3, #3
 8015b16:	e02a      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015b18:	4b17      	ldr	r3, [pc, #92]	@ (8015b78 <HAL_RCC_OscConfig+0x79c>)
 8015b1a:	681a      	ldr	r2, [r3, #0]
 8015b1c:	2380      	movs	r3, #128	@ 0x80
 8015b1e:	049b      	lsls	r3, r3, #18
 8015b20:	4013      	ands	r3, r2
 8015b22:	d1f0      	bne.n	8015b06 <HAL_RCC_OscConfig+0x72a>
 8015b24:	e022      	b.n	8015b6c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b2a:	2b01      	cmp	r3, #1
 8015b2c:	d101      	bne.n	8015b32 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015b2e:	2301      	movs	r3, #1
 8015b30:	e01d      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8015b32:	4b11      	ldr	r3, [pc, #68]	@ (8015b78 <HAL_RCC_OscConfig+0x79c>)
 8015b34:	68db      	ldr	r3, [r3, #12]
 8015b36:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015b38:	69ba      	ldr	r2, [r7, #24]
 8015b3a:	2380      	movs	r3, #128	@ 0x80
 8015b3c:	025b      	lsls	r3, r3, #9
 8015b3e:	401a      	ands	r2, r3
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b44:	429a      	cmp	r2, r3
 8015b46:	d10f      	bne.n	8015b68 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015b48:	69ba      	ldr	r2, [r7, #24]
 8015b4a:	23f0      	movs	r3, #240	@ 0xf0
 8015b4c:	039b      	lsls	r3, r3, #14
 8015b4e:	401a      	ands	r2, r3
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015b54:	429a      	cmp	r2, r3
 8015b56:	d107      	bne.n	8015b68 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8015b58:	69ba      	ldr	r2, [r7, #24]
 8015b5a:	23c0      	movs	r3, #192	@ 0xc0
 8015b5c:	041b      	lsls	r3, r3, #16
 8015b5e:	401a      	ands	r2, r3
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015b64:	429a      	cmp	r2, r3
 8015b66:	d001      	beq.n	8015b6c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8015b68:	2301      	movs	r3, #1
 8015b6a:	e000      	b.n	8015b6e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8015b6c:	2300      	movs	r3, #0
}
 8015b6e:	0018      	movs	r0, r3
 8015b70:	46bd      	mov	sp, r7
 8015b72:	b00a      	add	sp, #40	@ 0x28
 8015b74:	bdb0      	pop	{r4, r5, r7, pc}
 8015b76:	46c0      	nop			@ (mov r8, r8)
 8015b78:	40021000 	.word	0x40021000
 8015b7c:	ff02ffff 	.word	0xff02ffff
 8015b80:	feffffff 	.word	0xfeffffff

08015b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015b84:	b5b0      	push	{r4, r5, r7, lr}
 8015b86:	b084      	sub	sp, #16
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d101      	bne.n	8015b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015b94:	2301      	movs	r3, #1
 8015b96:	e128      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015b98:	4b96      	ldr	r3, [pc, #600]	@ (8015df4 <HAL_RCC_ClockConfig+0x270>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	2201      	movs	r2, #1
 8015b9e:	4013      	ands	r3, r2
 8015ba0:	683a      	ldr	r2, [r7, #0]
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d91e      	bls.n	8015be4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015ba6:	4b93      	ldr	r3, [pc, #588]	@ (8015df4 <HAL_RCC_ClockConfig+0x270>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	2201      	movs	r2, #1
 8015bac:	4393      	bics	r3, r2
 8015bae:	0019      	movs	r1, r3
 8015bb0:	4b90      	ldr	r3, [pc, #576]	@ (8015df4 <HAL_RCC_ClockConfig+0x270>)
 8015bb2:	683a      	ldr	r2, [r7, #0]
 8015bb4:	430a      	orrs	r2, r1
 8015bb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015bb8:	f7f9 fae0 	bl	800f17c <HAL_GetTick>
 8015bbc:	0003      	movs	r3, r0
 8015bbe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015bc0:	e009      	b.n	8015bd6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015bc2:	f7f9 fadb 	bl	800f17c <HAL_GetTick>
 8015bc6:	0002      	movs	r2, r0
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	1ad3      	subs	r3, r2, r3
 8015bcc:	4a8a      	ldr	r2, [pc, #552]	@ (8015df8 <HAL_RCC_ClockConfig+0x274>)
 8015bce:	4293      	cmp	r3, r2
 8015bd0:	d901      	bls.n	8015bd6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8015bd2:	2303      	movs	r3, #3
 8015bd4:	e109      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015bd6:	4b87      	ldr	r3, [pc, #540]	@ (8015df4 <HAL_RCC_ClockConfig+0x270>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	2201      	movs	r2, #1
 8015bdc:	4013      	ands	r3, r2
 8015bde:	683a      	ldr	r2, [r7, #0]
 8015be0:	429a      	cmp	r2, r3
 8015be2:	d1ee      	bne.n	8015bc2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	2202      	movs	r2, #2
 8015bea:	4013      	ands	r3, r2
 8015bec:	d009      	beq.n	8015c02 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015bee:	4b83      	ldr	r3, [pc, #524]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015bf0:	68db      	ldr	r3, [r3, #12]
 8015bf2:	22f0      	movs	r2, #240	@ 0xf0
 8015bf4:	4393      	bics	r3, r2
 8015bf6:	0019      	movs	r1, r3
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	689a      	ldr	r2, [r3, #8]
 8015bfc:	4b7f      	ldr	r3, [pc, #508]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015bfe:	430a      	orrs	r2, r1
 8015c00:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	2201      	movs	r2, #1
 8015c08:	4013      	ands	r3, r2
 8015c0a:	d100      	bne.n	8015c0e <HAL_RCC_ClockConfig+0x8a>
 8015c0c:	e089      	b.n	8015d22 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	685b      	ldr	r3, [r3, #4]
 8015c12:	2b02      	cmp	r3, #2
 8015c14:	d107      	bne.n	8015c26 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015c16:	4b79      	ldr	r3, [pc, #484]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015c18:	681a      	ldr	r2, [r3, #0]
 8015c1a:	2380      	movs	r3, #128	@ 0x80
 8015c1c:	029b      	lsls	r3, r3, #10
 8015c1e:	4013      	ands	r3, r2
 8015c20:	d120      	bne.n	8015c64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015c22:	2301      	movs	r3, #1
 8015c24:	e0e1      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	685b      	ldr	r3, [r3, #4]
 8015c2a:	2b03      	cmp	r3, #3
 8015c2c:	d107      	bne.n	8015c3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015c2e:	4b73      	ldr	r3, [pc, #460]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	2380      	movs	r3, #128	@ 0x80
 8015c34:	049b      	lsls	r3, r3, #18
 8015c36:	4013      	ands	r3, r2
 8015c38:	d114      	bne.n	8015c64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	e0d5      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	685b      	ldr	r3, [r3, #4]
 8015c42:	2b01      	cmp	r3, #1
 8015c44:	d106      	bne.n	8015c54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015c46:	4b6d      	ldr	r3, [pc, #436]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	2204      	movs	r2, #4
 8015c4c:	4013      	ands	r3, r2
 8015c4e:	d109      	bne.n	8015c64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015c50:	2301      	movs	r3, #1
 8015c52:	e0ca      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015c54:	4b69      	ldr	r3, [pc, #420]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015c56:	681a      	ldr	r2, [r3, #0]
 8015c58:	2380      	movs	r3, #128	@ 0x80
 8015c5a:	009b      	lsls	r3, r3, #2
 8015c5c:	4013      	ands	r3, r2
 8015c5e:	d101      	bne.n	8015c64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015c60:	2301      	movs	r3, #1
 8015c62:	e0c2      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8015c64:	4b65      	ldr	r3, [pc, #404]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	2203      	movs	r2, #3
 8015c6a:	4393      	bics	r3, r2
 8015c6c:	0019      	movs	r1, r3
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	685a      	ldr	r2, [r3, #4]
 8015c72:	4b62      	ldr	r3, [pc, #392]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015c74:	430a      	orrs	r2, r1
 8015c76:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8015c78:	f7f9 fa80 	bl	800f17c <HAL_GetTick>
 8015c7c:	0003      	movs	r3, r0
 8015c7e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	2b02      	cmp	r3, #2
 8015c86:	d111      	bne.n	8015cac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015c88:	e009      	b.n	8015c9e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015c8a:	f7f9 fa77 	bl	800f17c <HAL_GetTick>
 8015c8e:	0002      	movs	r2, r0
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	1ad3      	subs	r3, r2, r3
 8015c94:	4a58      	ldr	r2, [pc, #352]	@ (8015df8 <HAL_RCC_ClockConfig+0x274>)
 8015c96:	4293      	cmp	r3, r2
 8015c98:	d901      	bls.n	8015c9e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8015c9a:	2303      	movs	r3, #3
 8015c9c:	e0a5      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8015c9e:	4b57      	ldr	r3, [pc, #348]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015ca0:	68db      	ldr	r3, [r3, #12]
 8015ca2:	220c      	movs	r2, #12
 8015ca4:	4013      	ands	r3, r2
 8015ca6:	2b08      	cmp	r3, #8
 8015ca8:	d1ef      	bne.n	8015c8a <HAL_RCC_ClockConfig+0x106>
 8015caa:	e03a      	b.n	8015d22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	2b03      	cmp	r3, #3
 8015cb2:	d111      	bne.n	8015cd8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015cb4:	e009      	b.n	8015cca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015cb6:	f7f9 fa61 	bl	800f17c <HAL_GetTick>
 8015cba:	0002      	movs	r2, r0
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	1ad3      	subs	r3, r2, r3
 8015cc0:	4a4d      	ldr	r2, [pc, #308]	@ (8015df8 <HAL_RCC_ClockConfig+0x274>)
 8015cc2:	4293      	cmp	r3, r2
 8015cc4:	d901      	bls.n	8015cca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8015cc6:	2303      	movs	r3, #3
 8015cc8:	e08f      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015cca:	4b4c      	ldr	r3, [pc, #304]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015ccc:	68db      	ldr	r3, [r3, #12]
 8015cce:	220c      	movs	r2, #12
 8015cd0:	4013      	ands	r3, r2
 8015cd2:	2b0c      	cmp	r3, #12
 8015cd4:	d1ef      	bne.n	8015cb6 <HAL_RCC_ClockConfig+0x132>
 8015cd6:	e024      	b.n	8015d22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	685b      	ldr	r3, [r3, #4]
 8015cdc:	2b01      	cmp	r3, #1
 8015cde:	d11b      	bne.n	8015d18 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015ce0:	e009      	b.n	8015cf6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015ce2:	f7f9 fa4b 	bl	800f17c <HAL_GetTick>
 8015ce6:	0002      	movs	r2, r0
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	1ad3      	subs	r3, r2, r3
 8015cec:	4a42      	ldr	r2, [pc, #264]	@ (8015df8 <HAL_RCC_ClockConfig+0x274>)
 8015cee:	4293      	cmp	r3, r2
 8015cf0:	d901      	bls.n	8015cf6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8015cf2:	2303      	movs	r3, #3
 8015cf4:	e079      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015cf6:	4b41      	ldr	r3, [pc, #260]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015cf8:	68db      	ldr	r3, [r3, #12]
 8015cfa:	220c      	movs	r2, #12
 8015cfc:	4013      	ands	r3, r2
 8015cfe:	2b04      	cmp	r3, #4
 8015d00:	d1ef      	bne.n	8015ce2 <HAL_RCC_ClockConfig+0x15e>
 8015d02:	e00e      	b.n	8015d22 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015d04:	f7f9 fa3a 	bl	800f17c <HAL_GetTick>
 8015d08:	0002      	movs	r2, r0
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	1ad3      	subs	r3, r2, r3
 8015d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8015df8 <HAL_RCC_ClockConfig+0x274>)
 8015d10:	4293      	cmp	r3, r2
 8015d12:	d901      	bls.n	8015d18 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8015d14:	2303      	movs	r3, #3
 8015d16:	e068      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8015d18:	4b38      	ldr	r3, [pc, #224]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015d1a:	68db      	ldr	r3, [r3, #12]
 8015d1c:	220c      	movs	r2, #12
 8015d1e:	4013      	ands	r3, r2
 8015d20:	d1f0      	bne.n	8015d04 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015d22:	4b34      	ldr	r3, [pc, #208]	@ (8015df4 <HAL_RCC_ClockConfig+0x270>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	2201      	movs	r2, #1
 8015d28:	4013      	ands	r3, r2
 8015d2a:	683a      	ldr	r2, [r7, #0]
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	d21e      	bcs.n	8015d6e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015d30:	4b30      	ldr	r3, [pc, #192]	@ (8015df4 <HAL_RCC_ClockConfig+0x270>)
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	2201      	movs	r2, #1
 8015d36:	4393      	bics	r3, r2
 8015d38:	0019      	movs	r1, r3
 8015d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8015df4 <HAL_RCC_ClockConfig+0x270>)
 8015d3c:	683a      	ldr	r2, [r7, #0]
 8015d3e:	430a      	orrs	r2, r1
 8015d40:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8015d42:	f7f9 fa1b 	bl	800f17c <HAL_GetTick>
 8015d46:	0003      	movs	r3, r0
 8015d48:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015d4a:	e009      	b.n	8015d60 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015d4c:	f7f9 fa16 	bl	800f17c <HAL_GetTick>
 8015d50:	0002      	movs	r2, r0
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	1ad3      	subs	r3, r2, r3
 8015d56:	4a28      	ldr	r2, [pc, #160]	@ (8015df8 <HAL_RCC_ClockConfig+0x274>)
 8015d58:	4293      	cmp	r3, r2
 8015d5a:	d901      	bls.n	8015d60 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015d5c:	2303      	movs	r3, #3
 8015d5e:	e044      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015d60:	4b24      	ldr	r3, [pc, #144]	@ (8015df4 <HAL_RCC_ClockConfig+0x270>)
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	2201      	movs	r2, #1
 8015d66:	4013      	ands	r3, r2
 8015d68:	683a      	ldr	r2, [r7, #0]
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d1ee      	bne.n	8015d4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	2204      	movs	r2, #4
 8015d74:	4013      	ands	r3, r2
 8015d76:	d009      	beq.n	8015d8c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015d78:	4b20      	ldr	r3, [pc, #128]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015d7a:	68db      	ldr	r3, [r3, #12]
 8015d7c:	4a20      	ldr	r2, [pc, #128]	@ (8015e00 <HAL_RCC_ClockConfig+0x27c>)
 8015d7e:	4013      	ands	r3, r2
 8015d80:	0019      	movs	r1, r3
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	68da      	ldr	r2, [r3, #12]
 8015d86:	4b1d      	ldr	r3, [pc, #116]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015d88:	430a      	orrs	r2, r1
 8015d8a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	2208      	movs	r2, #8
 8015d92:	4013      	ands	r3, r2
 8015d94:	d00a      	beq.n	8015dac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8015d96:	4b19      	ldr	r3, [pc, #100]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015d98:	68db      	ldr	r3, [r3, #12]
 8015d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8015e04 <HAL_RCC_ClockConfig+0x280>)
 8015d9c:	4013      	ands	r3, r2
 8015d9e:	0019      	movs	r1, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	691b      	ldr	r3, [r3, #16]
 8015da4:	00da      	lsls	r2, r3, #3
 8015da6:	4b15      	ldr	r3, [pc, #84]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015da8:	430a      	orrs	r2, r1
 8015daa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015dac:	f000 f832 	bl	8015e14 <HAL_RCC_GetSysClockFreq>
 8015db0:	0001      	movs	r1, r0
 8015db2:	4b12      	ldr	r3, [pc, #72]	@ (8015dfc <HAL_RCC_ClockConfig+0x278>)
 8015db4:	68db      	ldr	r3, [r3, #12]
 8015db6:	091b      	lsrs	r3, r3, #4
 8015db8:	220f      	movs	r2, #15
 8015dba:	4013      	ands	r3, r2
 8015dbc:	4a12      	ldr	r2, [pc, #72]	@ (8015e08 <HAL_RCC_ClockConfig+0x284>)
 8015dbe:	5cd3      	ldrb	r3, [r2, r3]
 8015dc0:	000a      	movs	r2, r1
 8015dc2:	40da      	lsrs	r2, r3
 8015dc4:	4b11      	ldr	r3, [pc, #68]	@ (8015e0c <HAL_RCC_ClockConfig+0x288>)
 8015dc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8015dc8:	4b11      	ldr	r3, [pc, #68]	@ (8015e10 <HAL_RCC_ClockConfig+0x28c>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	250b      	movs	r5, #11
 8015dce:	197c      	adds	r4, r7, r5
 8015dd0:	0018      	movs	r0, r3
 8015dd2:	f7f9 f98d 	bl	800f0f0 <HAL_InitTick>
 8015dd6:	0003      	movs	r3, r0
 8015dd8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8015dda:	197b      	adds	r3, r7, r5
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d002      	beq.n	8015de8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8015de2:	197b      	adds	r3, r7, r5
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	e000      	b.n	8015dea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8015de8:	2300      	movs	r3, #0
}
 8015dea:	0018      	movs	r0, r3
 8015dec:	46bd      	mov	sp, r7
 8015dee:	b004      	add	sp, #16
 8015df0:	bdb0      	pop	{r4, r5, r7, pc}
 8015df2:	46c0      	nop			@ (mov r8, r8)
 8015df4:	40022000 	.word	0x40022000
 8015df8:	00001388 	.word	0x00001388
 8015dfc:	40021000 	.word	0x40021000
 8015e00:	fffff8ff 	.word	0xfffff8ff
 8015e04:	ffffc7ff 	.word	0xffffc7ff
 8015e08:	08025cfc 	.word	0x08025cfc
 8015e0c:	200000d0 	.word	0x200000d0
 8015e10:	200000e0 	.word	0x200000e0

08015e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015e14:	b5b0      	push	{r4, r5, r7, lr}
 8015e16:	b08e      	sub	sp, #56	@ 0x38
 8015e18:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8015e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8015f4c <HAL_RCC_GetSysClockFreq+0x138>)
 8015e1c:	68db      	ldr	r3, [r3, #12]
 8015e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e22:	230c      	movs	r3, #12
 8015e24:	4013      	ands	r3, r2
 8015e26:	2b0c      	cmp	r3, #12
 8015e28:	d014      	beq.n	8015e54 <HAL_RCC_GetSysClockFreq+0x40>
 8015e2a:	d900      	bls.n	8015e2e <HAL_RCC_GetSysClockFreq+0x1a>
 8015e2c:	e07b      	b.n	8015f26 <HAL_RCC_GetSysClockFreq+0x112>
 8015e2e:	2b04      	cmp	r3, #4
 8015e30:	d002      	beq.n	8015e38 <HAL_RCC_GetSysClockFreq+0x24>
 8015e32:	2b08      	cmp	r3, #8
 8015e34:	d00b      	beq.n	8015e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8015e36:	e076      	b.n	8015f26 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015e38:	4b44      	ldr	r3, [pc, #272]	@ (8015f4c <HAL_RCC_GetSysClockFreq+0x138>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	2210      	movs	r2, #16
 8015e3e:	4013      	ands	r3, r2
 8015e40:	d002      	beq.n	8015e48 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8015e42:	4b43      	ldr	r3, [pc, #268]	@ (8015f50 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015e44:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8015e46:	e07c      	b.n	8015f42 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8015e48:	4b42      	ldr	r3, [pc, #264]	@ (8015f54 <HAL_RCC_GetSysClockFreq+0x140>)
 8015e4a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015e4c:	e079      	b.n	8015f42 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015e4e:	4b42      	ldr	r3, [pc, #264]	@ (8015f58 <HAL_RCC_GetSysClockFreq+0x144>)
 8015e50:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015e52:	e076      	b.n	8015f42 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8015e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e56:	0c9a      	lsrs	r2, r3, #18
 8015e58:	230f      	movs	r3, #15
 8015e5a:	401a      	ands	r2, r3
 8015e5c:	4b3f      	ldr	r3, [pc, #252]	@ (8015f5c <HAL_RCC_GetSysClockFreq+0x148>)
 8015e5e:	5c9b      	ldrb	r3, [r3, r2]
 8015e60:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8015e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e64:	0d9a      	lsrs	r2, r3, #22
 8015e66:	2303      	movs	r3, #3
 8015e68:	4013      	ands	r3, r2
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015e6e:	4b37      	ldr	r3, [pc, #220]	@ (8015f4c <HAL_RCC_GetSysClockFreq+0x138>)
 8015e70:	68da      	ldr	r2, [r3, #12]
 8015e72:	2380      	movs	r3, #128	@ 0x80
 8015e74:	025b      	lsls	r3, r3, #9
 8015e76:	4013      	ands	r3, r2
 8015e78:	d01a      	beq.n	8015eb0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e7c:	61bb      	str	r3, [r7, #24]
 8015e7e:	2300      	movs	r3, #0
 8015e80:	61fb      	str	r3, [r7, #28]
 8015e82:	4a35      	ldr	r2, [pc, #212]	@ (8015f58 <HAL_RCC_GetSysClockFreq+0x144>)
 8015e84:	2300      	movs	r3, #0
 8015e86:	69b8      	ldr	r0, [r7, #24]
 8015e88:	69f9      	ldr	r1, [r7, #28]
 8015e8a:	f7ea fb99 	bl	80005c0 <__aeabi_lmul>
 8015e8e:	0002      	movs	r2, r0
 8015e90:	000b      	movs	r3, r1
 8015e92:	0010      	movs	r0, r2
 8015e94:	0019      	movs	r1, r3
 8015e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e98:	613b      	str	r3, [r7, #16]
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	617b      	str	r3, [r7, #20]
 8015e9e:	693a      	ldr	r2, [r7, #16]
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	f7ea fb6d 	bl	8000580 <__aeabi_uldivmod>
 8015ea6:	0002      	movs	r2, r0
 8015ea8:	000b      	movs	r3, r1
 8015eaa:	0013      	movs	r3, r2
 8015eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8015eae:	e037      	b.n	8015f20 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015eb0:	4b26      	ldr	r3, [pc, #152]	@ (8015f4c <HAL_RCC_GetSysClockFreq+0x138>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	2210      	movs	r2, #16
 8015eb6:	4013      	ands	r3, r2
 8015eb8:	d01a      	beq.n	8015ef0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8015eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ebc:	60bb      	str	r3, [r7, #8]
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	60fb      	str	r3, [r7, #12]
 8015ec2:	4a23      	ldr	r2, [pc, #140]	@ (8015f50 <HAL_RCC_GetSysClockFreq+0x13c>)
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	68b8      	ldr	r0, [r7, #8]
 8015ec8:	68f9      	ldr	r1, [r7, #12]
 8015eca:	f7ea fb79 	bl	80005c0 <__aeabi_lmul>
 8015ece:	0002      	movs	r2, r0
 8015ed0:	000b      	movs	r3, r1
 8015ed2:	0010      	movs	r0, r2
 8015ed4:	0019      	movs	r1, r3
 8015ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ed8:	603b      	str	r3, [r7, #0]
 8015eda:	2300      	movs	r3, #0
 8015edc:	607b      	str	r3, [r7, #4]
 8015ede:	683a      	ldr	r2, [r7, #0]
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f7ea fb4d 	bl	8000580 <__aeabi_uldivmod>
 8015ee6:	0002      	movs	r2, r0
 8015ee8:	000b      	movs	r3, r1
 8015eea:	0013      	movs	r3, r2
 8015eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8015eee:	e017      	b.n	8015f20 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ef2:	0018      	movs	r0, r3
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	0019      	movs	r1, r3
 8015ef8:	4a16      	ldr	r2, [pc, #88]	@ (8015f54 <HAL_RCC_GetSysClockFreq+0x140>)
 8015efa:	2300      	movs	r3, #0
 8015efc:	f7ea fb60 	bl	80005c0 <__aeabi_lmul>
 8015f00:	0002      	movs	r2, r0
 8015f02:	000b      	movs	r3, r1
 8015f04:	0010      	movs	r0, r2
 8015f06:	0019      	movs	r1, r3
 8015f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f0a:	001c      	movs	r4, r3
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	001d      	movs	r5, r3
 8015f10:	0022      	movs	r2, r4
 8015f12:	002b      	movs	r3, r5
 8015f14:	f7ea fb34 	bl	8000580 <__aeabi_uldivmod>
 8015f18:	0002      	movs	r2, r0
 8015f1a:	000b      	movs	r3, r1
 8015f1c:	0013      	movs	r3, r2
 8015f1e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f22:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015f24:	e00d      	b.n	8015f42 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015f26:	4b09      	ldr	r3, [pc, #36]	@ (8015f4c <HAL_RCC_GetSysClockFreq+0x138>)
 8015f28:	685b      	ldr	r3, [r3, #4]
 8015f2a:	0b5b      	lsrs	r3, r3, #13
 8015f2c:	2207      	movs	r2, #7
 8015f2e:	4013      	ands	r3, r2
 8015f30:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015f32:	6a3b      	ldr	r3, [r7, #32]
 8015f34:	3301      	adds	r3, #1
 8015f36:	2280      	movs	r2, #128	@ 0x80
 8015f38:	0212      	lsls	r2, r2, #8
 8015f3a:	409a      	lsls	r2, r3
 8015f3c:	0013      	movs	r3, r2
 8015f3e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015f40:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015f44:	0018      	movs	r0, r3
 8015f46:	46bd      	mov	sp, r7
 8015f48:	b00e      	add	sp, #56	@ 0x38
 8015f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8015f4c:	40021000 	.word	0x40021000
 8015f50:	003d0900 	.word	0x003d0900
 8015f54:	00f42400 	.word	0x00f42400
 8015f58:	007a1200 	.word	0x007a1200
 8015f5c:	08025d14 	.word	0x08025d14

08015f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015f64:	4b02      	ldr	r3, [pc, #8]	@ (8015f70 <HAL_RCC_GetHCLKFreq+0x10>)
 8015f66:	681b      	ldr	r3, [r3, #0]
}
 8015f68:	0018      	movs	r0, r3
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}
 8015f6e:	46c0      	nop			@ (mov r8, r8)
 8015f70:	200000d0 	.word	0x200000d0

08015f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015f78:	f7ff fff2 	bl	8015f60 <HAL_RCC_GetHCLKFreq>
 8015f7c:	0001      	movs	r1, r0
 8015f7e:	4b06      	ldr	r3, [pc, #24]	@ (8015f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015f80:	68db      	ldr	r3, [r3, #12]
 8015f82:	0a1b      	lsrs	r3, r3, #8
 8015f84:	2207      	movs	r2, #7
 8015f86:	4013      	ands	r3, r2
 8015f88:	4a04      	ldr	r2, [pc, #16]	@ (8015f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8015f8a:	5cd3      	ldrb	r3, [r2, r3]
 8015f8c:	40d9      	lsrs	r1, r3
 8015f8e:	000b      	movs	r3, r1
}
 8015f90:	0018      	movs	r0, r3
 8015f92:	46bd      	mov	sp, r7
 8015f94:	bd80      	pop	{r7, pc}
 8015f96:	46c0      	nop			@ (mov r8, r8)
 8015f98:	40021000 	.word	0x40021000
 8015f9c:	08025d0c 	.word	0x08025d0c

08015fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015fa4:	f7ff ffdc 	bl	8015f60 <HAL_RCC_GetHCLKFreq>
 8015fa8:	0001      	movs	r1, r0
 8015faa:	4b06      	ldr	r3, [pc, #24]	@ (8015fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015fac:	68db      	ldr	r3, [r3, #12]
 8015fae:	0adb      	lsrs	r3, r3, #11
 8015fb0:	2207      	movs	r2, #7
 8015fb2:	4013      	ands	r3, r2
 8015fb4:	4a04      	ldr	r2, [pc, #16]	@ (8015fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015fb6:	5cd3      	ldrb	r3, [r2, r3]
 8015fb8:	40d9      	lsrs	r1, r3
 8015fba:	000b      	movs	r3, r1
}
 8015fbc:	0018      	movs	r0, r3
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	bd80      	pop	{r7, pc}
 8015fc2:	46c0      	nop			@ (mov r8, r8)
 8015fc4:	40021000 	.word	0x40021000
 8015fc8:	08025d0c 	.word	0x08025d0c

08015fcc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b086      	sub	sp, #24
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015fd4:	2017      	movs	r0, #23
 8015fd6:	183b      	adds	r3, r7, r0
 8015fd8:	2200      	movs	r2, #0
 8015fda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	2220      	movs	r2, #32
 8015fe2:	4013      	ands	r3, r2
 8015fe4:	d100      	bne.n	8015fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015fe6:	e0c7      	b.n	8016178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015fe8:	4b9b      	ldr	r3, [pc, #620]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015fea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015fec:	2380      	movs	r3, #128	@ 0x80
 8015fee:	055b      	lsls	r3, r3, #21
 8015ff0:	4013      	ands	r3, r2
 8015ff2:	d109      	bne.n	8016008 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015ff4:	4b98      	ldr	r3, [pc, #608]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015ff8:	4b97      	ldr	r3, [pc, #604]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ffa:	2180      	movs	r1, #128	@ 0x80
 8015ffc:	0549      	lsls	r1, r1, #21
 8015ffe:	430a      	orrs	r2, r1
 8016000:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8016002:	183b      	adds	r3, r7, r0
 8016004:	2201      	movs	r2, #1
 8016006:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016008:	4b94      	ldr	r3, [pc, #592]	@ (801625c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801600a:	681a      	ldr	r2, [r3, #0]
 801600c:	2380      	movs	r3, #128	@ 0x80
 801600e:	005b      	lsls	r3, r3, #1
 8016010:	4013      	ands	r3, r2
 8016012:	d11a      	bne.n	801604a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8016014:	4b91      	ldr	r3, [pc, #580]	@ (801625c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8016016:	681a      	ldr	r2, [r3, #0]
 8016018:	4b90      	ldr	r3, [pc, #576]	@ (801625c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801601a:	2180      	movs	r1, #128	@ 0x80
 801601c:	0049      	lsls	r1, r1, #1
 801601e:	430a      	orrs	r2, r1
 8016020:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8016022:	f7f9 f8ab 	bl	800f17c <HAL_GetTick>
 8016026:	0003      	movs	r3, r0
 8016028:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801602a:	e008      	b.n	801603e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801602c:	f7f9 f8a6 	bl	800f17c <HAL_GetTick>
 8016030:	0002      	movs	r2, r0
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	1ad3      	subs	r3, r2, r3
 8016036:	2b64      	cmp	r3, #100	@ 0x64
 8016038:	d901      	bls.n	801603e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801603a:	2303      	movs	r3, #3
 801603c:	e107      	b.n	801624e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801603e:	4b87      	ldr	r3, [pc, #540]	@ (801625c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8016040:	681a      	ldr	r2, [r3, #0]
 8016042:	2380      	movs	r3, #128	@ 0x80
 8016044:	005b      	lsls	r3, r3, #1
 8016046:	4013      	ands	r3, r2
 8016048:	d0f0      	beq.n	801602c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801604a:	4b83      	ldr	r3, [pc, #524]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801604c:	681a      	ldr	r2, [r3, #0]
 801604e:	23c0      	movs	r3, #192	@ 0xc0
 8016050:	039b      	lsls	r3, r3, #14
 8016052:	4013      	ands	r3, r2
 8016054:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	685a      	ldr	r2, [r3, #4]
 801605a:	23c0      	movs	r3, #192	@ 0xc0
 801605c:	039b      	lsls	r3, r3, #14
 801605e:	4013      	ands	r3, r2
 8016060:	68fa      	ldr	r2, [r7, #12]
 8016062:	429a      	cmp	r2, r3
 8016064:	d013      	beq.n	801608e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	685a      	ldr	r2, [r3, #4]
 801606a:	23c0      	movs	r3, #192	@ 0xc0
 801606c:	029b      	lsls	r3, r3, #10
 801606e:	401a      	ands	r2, r3
 8016070:	23c0      	movs	r3, #192	@ 0xc0
 8016072:	029b      	lsls	r3, r3, #10
 8016074:	429a      	cmp	r2, r3
 8016076:	d10a      	bne.n	801608e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8016078:	4b77      	ldr	r3, [pc, #476]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801607a:	681a      	ldr	r2, [r3, #0]
 801607c:	2380      	movs	r3, #128	@ 0x80
 801607e:	029b      	lsls	r3, r3, #10
 8016080:	401a      	ands	r2, r3
 8016082:	2380      	movs	r3, #128	@ 0x80
 8016084:	029b      	lsls	r3, r3, #10
 8016086:	429a      	cmp	r2, r3
 8016088:	d101      	bne.n	801608e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801608a:	2301      	movs	r3, #1
 801608c:	e0df      	b.n	801624e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801608e:	4b72      	ldr	r3, [pc, #456]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016092:	23c0      	movs	r3, #192	@ 0xc0
 8016094:	029b      	lsls	r3, r3, #10
 8016096:	4013      	ands	r3, r2
 8016098:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d03b      	beq.n	8016118 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	685a      	ldr	r2, [r3, #4]
 80160a4:	23c0      	movs	r3, #192	@ 0xc0
 80160a6:	029b      	lsls	r3, r3, #10
 80160a8:	4013      	ands	r3, r2
 80160aa:	68fa      	ldr	r2, [r7, #12]
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d033      	beq.n	8016118 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2220      	movs	r2, #32
 80160b6:	4013      	ands	r3, r2
 80160b8:	d02e      	beq.n	8016118 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80160ba:	4b67      	ldr	r3, [pc, #412]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80160be:	4a68      	ldr	r2, [pc, #416]	@ (8016260 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80160c0:	4013      	ands	r3, r2
 80160c2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80160c4:	4b64      	ldr	r3, [pc, #400]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80160c8:	4b63      	ldr	r3, [pc, #396]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160ca:	2180      	movs	r1, #128	@ 0x80
 80160cc:	0309      	lsls	r1, r1, #12
 80160ce:	430a      	orrs	r2, r1
 80160d0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80160d2:	4b61      	ldr	r3, [pc, #388]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80160d6:	4b60      	ldr	r3, [pc, #384]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160d8:	4962      	ldr	r1, [pc, #392]	@ (8016264 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80160da:	400a      	ands	r2, r1
 80160dc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80160de:	4b5e      	ldr	r3, [pc, #376]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80160e0:	68fa      	ldr	r2, [r7, #12]
 80160e2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	2380      	movs	r3, #128	@ 0x80
 80160e8:	005b      	lsls	r3, r3, #1
 80160ea:	4013      	ands	r3, r2
 80160ec:	d014      	beq.n	8016118 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80160ee:	f7f9 f845 	bl	800f17c <HAL_GetTick>
 80160f2:	0003      	movs	r3, r0
 80160f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80160f6:	e009      	b.n	801610c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80160f8:	f7f9 f840 	bl	800f17c <HAL_GetTick>
 80160fc:	0002      	movs	r2, r0
 80160fe:	693b      	ldr	r3, [r7, #16]
 8016100:	1ad3      	subs	r3, r2, r3
 8016102:	4a59      	ldr	r2, [pc, #356]	@ (8016268 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8016104:	4293      	cmp	r3, r2
 8016106:	d901      	bls.n	801610c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8016108:	2303      	movs	r3, #3
 801610a:	e0a0      	b.n	801624e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801610c:	4b52      	ldr	r3, [pc, #328]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801610e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016110:	2380      	movs	r3, #128	@ 0x80
 8016112:	009b      	lsls	r3, r3, #2
 8016114:	4013      	ands	r3, r2
 8016116:	d0ef      	beq.n	80160f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	2220      	movs	r2, #32
 801611e:	4013      	ands	r3, r2
 8016120:	d01f      	beq.n	8016162 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	685a      	ldr	r2, [r3, #4]
 8016126:	23c0      	movs	r3, #192	@ 0xc0
 8016128:	029b      	lsls	r3, r3, #10
 801612a:	401a      	ands	r2, r3
 801612c:	23c0      	movs	r3, #192	@ 0xc0
 801612e:	029b      	lsls	r3, r3, #10
 8016130:	429a      	cmp	r2, r3
 8016132:	d10c      	bne.n	801614e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8016134:	4b48      	ldr	r3, [pc, #288]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	4a4c      	ldr	r2, [pc, #304]	@ (801626c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801613a:	4013      	ands	r3, r2
 801613c:	0019      	movs	r1, r3
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	685a      	ldr	r2, [r3, #4]
 8016142:	23c0      	movs	r3, #192	@ 0xc0
 8016144:	039b      	lsls	r3, r3, #14
 8016146:	401a      	ands	r2, r3
 8016148:	4b43      	ldr	r3, [pc, #268]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801614a:	430a      	orrs	r2, r1
 801614c:	601a      	str	r2, [r3, #0]
 801614e:	4b42      	ldr	r3, [pc, #264]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016150:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	685a      	ldr	r2, [r3, #4]
 8016156:	23c0      	movs	r3, #192	@ 0xc0
 8016158:	029b      	lsls	r3, r3, #10
 801615a:	401a      	ands	r2, r3
 801615c:	4b3e      	ldr	r3, [pc, #248]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801615e:	430a      	orrs	r2, r1
 8016160:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8016162:	2317      	movs	r3, #23
 8016164:	18fb      	adds	r3, r7, r3
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	2b01      	cmp	r3, #1
 801616a:	d105      	bne.n	8016178 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801616c:	4b3a      	ldr	r3, [pc, #232]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801616e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016170:	4b39      	ldr	r3, [pc, #228]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016172:	493f      	ldr	r1, [pc, #252]	@ (8016270 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8016174:	400a      	ands	r2, r1
 8016176:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	2201      	movs	r2, #1
 801617e:	4013      	ands	r3, r2
 8016180:	d009      	beq.n	8016196 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8016182:	4b35      	ldr	r3, [pc, #212]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016186:	2203      	movs	r2, #3
 8016188:	4393      	bics	r3, r2
 801618a:	0019      	movs	r1, r3
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	689a      	ldr	r2, [r3, #8]
 8016190:	4b31      	ldr	r3, [pc, #196]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016192:	430a      	orrs	r2, r1
 8016194:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	2202      	movs	r2, #2
 801619c:	4013      	ands	r3, r2
 801619e:	d009      	beq.n	80161b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80161a0:	4b2d      	ldr	r3, [pc, #180]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161a4:	220c      	movs	r2, #12
 80161a6:	4393      	bics	r3, r2
 80161a8:	0019      	movs	r1, r3
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	68da      	ldr	r2, [r3, #12]
 80161ae:	4b2a      	ldr	r3, [pc, #168]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161b0:	430a      	orrs	r2, r1
 80161b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	2204      	movs	r2, #4
 80161ba:	4013      	ands	r3, r2
 80161bc:	d009      	beq.n	80161d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80161be:	4b26      	ldr	r3, [pc, #152]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161c2:	4a2c      	ldr	r2, [pc, #176]	@ (8016274 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80161c4:	4013      	ands	r3, r2
 80161c6:	0019      	movs	r1, r3
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	691a      	ldr	r2, [r3, #16]
 80161cc:	4b22      	ldr	r3, [pc, #136]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161ce:	430a      	orrs	r2, r1
 80161d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	2208      	movs	r2, #8
 80161d8:	4013      	ands	r3, r2
 80161da:	d009      	beq.n	80161f0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80161dc:	4b1e      	ldr	r3, [pc, #120]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161e0:	4a25      	ldr	r2, [pc, #148]	@ (8016278 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80161e2:	4013      	ands	r3, r2
 80161e4:	0019      	movs	r1, r3
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	695a      	ldr	r2, [r3, #20]
 80161ea:	4b1b      	ldr	r3, [pc, #108]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161ec:	430a      	orrs	r2, r1
 80161ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	681a      	ldr	r2, [r3, #0]
 80161f4:	2380      	movs	r3, #128	@ 0x80
 80161f6:	005b      	lsls	r3, r3, #1
 80161f8:	4013      	ands	r3, r2
 80161fa:	d009      	beq.n	8016210 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80161fc:	4b16      	ldr	r3, [pc, #88]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80161fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016200:	4a17      	ldr	r2, [pc, #92]	@ (8016260 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8016202:	4013      	ands	r3, r2
 8016204:	0019      	movs	r1, r3
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	699a      	ldr	r2, [r3, #24]
 801620a:	4b13      	ldr	r3, [pc, #76]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801620c:	430a      	orrs	r2, r1
 801620e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	2240      	movs	r2, #64	@ 0x40
 8016216:	4013      	ands	r3, r2
 8016218:	d009      	beq.n	801622e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801621a:	4b0f      	ldr	r3, [pc, #60]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801621c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801621e:	4a17      	ldr	r2, [pc, #92]	@ (801627c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8016220:	4013      	ands	r3, r2
 8016222:	0019      	movs	r1, r3
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	6a1a      	ldr	r2, [r3, #32]
 8016228:	4b0b      	ldr	r3, [pc, #44]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801622a:	430a      	orrs	r2, r1
 801622c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	2280      	movs	r2, #128	@ 0x80
 8016234:	4013      	ands	r3, r2
 8016236:	d009      	beq.n	801624c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8016238:	4b07      	ldr	r3, [pc, #28]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801623a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801623c:	4a10      	ldr	r2, [pc, #64]	@ (8016280 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801623e:	4013      	ands	r3, r2
 8016240:	0019      	movs	r1, r3
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	69da      	ldr	r2, [r3, #28]
 8016246:	4b04      	ldr	r3, [pc, #16]	@ (8016258 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8016248:	430a      	orrs	r2, r1
 801624a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801624c:	2300      	movs	r3, #0
}
 801624e:	0018      	movs	r0, r3
 8016250:	46bd      	mov	sp, r7
 8016252:	b006      	add	sp, #24
 8016254:	bd80      	pop	{r7, pc}
 8016256:	46c0      	nop			@ (mov r8, r8)
 8016258:	40021000 	.word	0x40021000
 801625c:	40007000 	.word	0x40007000
 8016260:	fffcffff 	.word	0xfffcffff
 8016264:	fff7ffff 	.word	0xfff7ffff
 8016268:	00001388 	.word	0x00001388
 801626c:	ffcfffff 	.word	0xffcfffff
 8016270:	efffffff 	.word	0xefffffff
 8016274:	fffff3ff 	.word	0xfffff3ff
 8016278:	ffffcfff 	.word	0xffffcfff
 801627c:	fbffffff 	.word	0xfbffffff
 8016280:	fff3ffff 	.word	0xfff3ffff

08016284 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8016284:	b5b0      	push	{r4, r5, r7, lr}
 8016286:	b084      	sub	sp, #16
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801628c:	230f      	movs	r3, #15
 801628e:	18fb      	adds	r3, r7, r3
 8016290:	2201      	movs	r2, #1
 8016292:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d101      	bne.n	801629e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801629a:	2301      	movs	r3, #1
 801629c:	e088      	b.n	80163b0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2221      	movs	r2, #33	@ 0x21
 80162a2:	5c9b      	ldrb	r3, [r3, r2]
 80162a4:	b2db      	uxtb	r3, r3
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d107      	bne.n	80162ba <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	2220      	movs	r2, #32
 80162ae:	2100      	movs	r1, #0
 80162b0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	0018      	movs	r0, r3
 80162b6:	f7f3 f847 	bl	8009348 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2221      	movs	r2, #33	@ 0x21
 80162be:	2102      	movs	r1, #2
 80162c0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	2210      	movs	r2, #16
 80162ca:	4013      	ands	r3, r2
 80162cc:	2b10      	cmp	r3, #16
 80162ce:	d05f      	beq.n	8016390 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	22ca      	movs	r2, #202	@ 0xca
 80162d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	2253      	movs	r2, #83	@ 0x53
 80162de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80162e0:	250f      	movs	r5, #15
 80162e2:	197c      	adds	r4, r7, r5
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	0018      	movs	r0, r3
 80162e8:	f000 fa7c 	bl	80167e4 <RTC_EnterInitMode>
 80162ec:	0003      	movs	r3, r0
 80162ee:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80162f0:	0028      	movs	r0, r5
 80162f2:	183b      	adds	r3, r7, r0
 80162f4:	781b      	ldrb	r3, [r3, #0]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d12c      	bne.n	8016354 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	689a      	ldr	r2, [r3, #8]
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	492c      	ldr	r1, [pc, #176]	@ (80163b8 <HAL_RTC_Init+0x134>)
 8016306:	400a      	ands	r2, r1
 8016308:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	6899      	ldr	r1, [r3, #8]
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	685a      	ldr	r2, [r3, #4]
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	691b      	ldr	r3, [r3, #16]
 8016318:	431a      	orrs	r2, r3
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	699b      	ldr	r3, [r3, #24]
 801631e:	431a      	orrs	r2, r3
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	430a      	orrs	r2, r1
 8016326:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	687a      	ldr	r2, [r7, #4]
 801632e:	68d2      	ldr	r2, [r2, #12]
 8016330:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	6919      	ldr	r1, [r3, #16]
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	689b      	ldr	r3, [r3, #8]
 801633c:	041a      	lsls	r2, r3, #16
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	430a      	orrs	r2, r1
 8016344:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8016346:	183c      	adds	r4, r7, r0
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	0018      	movs	r0, r3
 801634c:	f000 fa8e 	bl	801686c <RTC_ExitInitMode>
 8016350:	0003      	movs	r3, r0
 8016352:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8016354:	230f      	movs	r3, #15
 8016356:	18fb      	adds	r3, r7, r3
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d113      	bne.n	8016386 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	2103      	movs	r1, #3
 801636a:	438a      	bics	r2, r1
 801636c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	69da      	ldr	r2, [r3, #28]
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	695b      	ldr	r3, [r3, #20]
 801637c:	431a      	orrs	r2, r3
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	430a      	orrs	r2, r1
 8016384:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	22ff      	movs	r2, #255	@ 0xff
 801638c:	625a      	str	r2, [r3, #36]	@ 0x24
 801638e:	e003      	b.n	8016398 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8016390:	230f      	movs	r3, #15
 8016392:	18fb      	adds	r3, r7, r3
 8016394:	2200      	movs	r2, #0
 8016396:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8016398:	230f      	movs	r3, #15
 801639a:	18fb      	adds	r3, r7, r3
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d103      	bne.n	80163aa <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2221      	movs	r2, #33	@ 0x21
 80163a6:	2101      	movs	r1, #1
 80163a8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80163aa:	230f      	movs	r3, #15
 80163ac:	18fb      	adds	r3, r7, r3
 80163ae:	781b      	ldrb	r3, [r3, #0]
}
 80163b0:	0018      	movs	r0, r3
 80163b2:	46bd      	mov	sp, r7
 80163b4:	b004      	add	sp, #16
 80163b6:	bdb0      	pop	{r4, r5, r7, pc}
 80163b8:	ff8fffbf 	.word	0xff8fffbf

080163bc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80163bc:	b5b0      	push	{r4, r5, r7, lr}
 80163be:	b086      	sub	sp, #24
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	60f8      	str	r0, [r7, #12]
 80163c4:	60b9      	str	r1, [r7, #8]
 80163c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80163c8:	2300      	movs	r3, #0
 80163ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	2220      	movs	r2, #32
 80163d0:	5c9b      	ldrb	r3, [r3, r2]
 80163d2:	2b01      	cmp	r3, #1
 80163d4:	d101      	bne.n	80163da <HAL_RTC_SetTime+0x1e>
 80163d6:	2302      	movs	r3, #2
 80163d8:	e092      	b.n	8016500 <HAL_RTC_SetTime+0x144>
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2220      	movs	r2, #32
 80163de:	2101      	movs	r1, #1
 80163e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	2221      	movs	r2, #33	@ 0x21
 80163e6:	2102      	movs	r1, #2
 80163e8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d125      	bne.n	801643c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	689b      	ldr	r3, [r3, #8]
 80163f6:	2240      	movs	r2, #64	@ 0x40
 80163f8:	4013      	ands	r3, r2
 80163fa:	d102      	bne.n	8016402 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	2200      	movs	r2, #0
 8016400:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	781b      	ldrb	r3, [r3, #0]
 8016406:	0018      	movs	r0, r3
 8016408:	f000 fa5a 	bl	80168c0 <RTC_ByteToBcd2>
 801640c:	0003      	movs	r3, r0
 801640e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	785b      	ldrb	r3, [r3, #1]
 8016414:	0018      	movs	r0, r3
 8016416:	f000 fa53 	bl	80168c0 <RTC_ByteToBcd2>
 801641a:	0003      	movs	r3, r0
 801641c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801641e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	789b      	ldrb	r3, [r3, #2]
 8016424:	0018      	movs	r0, r3
 8016426:	f000 fa4b 	bl	80168c0 <RTC_ByteToBcd2>
 801642a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801642c:	0022      	movs	r2, r4
 801642e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	78db      	ldrb	r3, [r3, #3]
 8016434:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8016436:	4313      	orrs	r3, r2
 8016438:	617b      	str	r3, [r7, #20]
 801643a:	e017      	b.n	801646c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	689b      	ldr	r3, [r3, #8]
 8016442:	2240      	movs	r2, #64	@ 0x40
 8016444:	4013      	ands	r3, r2
 8016446:	d102      	bne.n	801644e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8016448:	68bb      	ldr	r3, [r7, #8]
 801644a:	2200      	movs	r2, #0
 801644c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801644e:	68bb      	ldr	r3, [r7, #8]
 8016450:	781b      	ldrb	r3, [r3, #0]
 8016452:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	785b      	ldrb	r3, [r3, #1]
 8016458:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801645a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801645c:	68ba      	ldr	r2, [r7, #8]
 801645e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8016460:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	78db      	ldrb	r3, [r3, #3]
 8016466:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8016468:	4313      	orrs	r3, r2
 801646a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	22ca      	movs	r2, #202	@ 0xca
 8016472:	625a      	str	r2, [r3, #36]	@ 0x24
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	2253      	movs	r2, #83	@ 0x53
 801647a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801647c:	2513      	movs	r5, #19
 801647e:	197c      	adds	r4, r7, r5
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	0018      	movs	r0, r3
 8016484:	f000 f9ae 	bl	80167e4 <RTC_EnterInitMode>
 8016488:	0003      	movs	r3, r0
 801648a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801648c:	0028      	movs	r0, r5
 801648e:	183b      	adds	r3, r7, r0
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d120      	bne.n	80164d8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	697a      	ldr	r2, [r7, #20]
 801649c:	491a      	ldr	r1, [pc, #104]	@ (8016508 <HAL_RTC_SetTime+0x14c>)
 801649e:	400a      	ands	r2, r1
 80164a0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	689a      	ldr	r2, [r3, #8]
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	4917      	ldr	r1, [pc, #92]	@ (801650c <HAL_RTC_SetTime+0x150>)
 80164ae:	400a      	ands	r2, r1
 80164b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	6899      	ldr	r1, [r3, #8]
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	68da      	ldr	r2, [r3, #12]
 80164bc:	68bb      	ldr	r3, [r7, #8]
 80164be:	691b      	ldr	r3, [r3, #16]
 80164c0:	431a      	orrs	r2, r3
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	430a      	orrs	r2, r1
 80164c8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80164ca:	183c      	adds	r4, r7, r0
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	0018      	movs	r0, r3
 80164d0:	f000 f9cc 	bl	801686c <RTC_ExitInitMode>
 80164d4:	0003      	movs	r3, r0
 80164d6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80164d8:	2313      	movs	r3, #19
 80164da:	18fb      	adds	r3, r7, r3
 80164dc:	781b      	ldrb	r3, [r3, #0]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d103      	bne.n	80164ea <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	2221      	movs	r2, #33	@ 0x21
 80164e6:	2101      	movs	r1, #1
 80164e8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	22ff      	movs	r2, #255	@ 0xff
 80164f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	2220      	movs	r2, #32
 80164f6:	2100      	movs	r1, #0
 80164f8:	5499      	strb	r1, [r3, r2]

  return status;
 80164fa:	2313      	movs	r3, #19
 80164fc:	18fb      	adds	r3, r7, r3
 80164fe:	781b      	ldrb	r3, [r3, #0]
}
 8016500:	0018      	movs	r0, r3
 8016502:	46bd      	mov	sp, r7
 8016504:	b006      	add	sp, #24
 8016506:	bdb0      	pop	{r4, r5, r7, pc}
 8016508:	007f7f7f 	.word	0x007f7f7f
 801650c:	fffbffff 	.word	0xfffbffff

08016510 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b086      	sub	sp, #24
 8016514:	af00      	add	r7, sp, #0
 8016516:	60f8      	str	r0, [r7, #12]
 8016518:	60b9      	str	r1, [r7, #8]
 801651a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801651c:	2300      	movs	r3, #0
 801651e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016526:	68bb      	ldr	r3, [r7, #8]
 8016528:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	691b      	ldr	r3, [r3, #16]
 8016530:	045b      	lsls	r3, r3, #17
 8016532:	0c5a      	lsrs	r2, r3, #17
 8016534:	68bb      	ldr	r3, [r7, #8]
 8016536:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	4a22      	ldr	r2, [pc, #136]	@ (80165c8 <HAL_RTC_GetTime+0xb8>)
 8016540:	4013      	ands	r3, r2
 8016542:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	0c1b      	lsrs	r3, r3, #16
 8016548:	b2db      	uxtb	r3, r3
 801654a:	223f      	movs	r2, #63	@ 0x3f
 801654c:	4013      	ands	r3, r2
 801654e:	b2da      	uxtb	r2, r3
 8016550:	68bb      	ldr	r3, [r7, #8]
 8016552:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	0a1b      	lsrs	r3, r3, #8
 8016558:	b2db      	uxtb	r3, r3
 801655a:	227f      	movs	r2, #127	@ 0x7f
 801655c:	4013      	ands	r3, r2
 801655e:	b2da      	uxtb	r2, r3
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8016564:	697b      	ldr	r3, [r7, #20]
 8016566:	b2db      	uxtb	r3, r3
 8016568:	227f      	movs	r2, #127	@ 0x7f
 801656a:	4013      	ands	r3, r2
 801656c:	b2da      	uxtb	r2, r3
 801656e:	68bb      	ldr	r3, [r7, #8]
 8016570:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8016572:	697b      	ldr	r3, [r7, #20]
 8016574:	0d9b      	lsrs	r3, r3, #22
 8016576:	b2db      	uxtb	r3, r3
 8016578:	2201      	movs	r2, #1
 801657a:	4013      	ands	r3, r2
 801657c:	b2da      	uxtb	r2, r3
 801657e:	68bb      	ldr	r3, [r7, #8]
 8016580:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d11a      	bne.n	80165be <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8016588:	68bb      	ldr	r3, [r7, #8]
 801658a:	781b      	ldrb	r3, [r3, #0]
 801658c:	0018      	movs	r0, r3
 801658e:	f000 f9b8 	bl	8016902 <RTC_Bcd2ToByte>
 8016592:	0003      	movs	r3, r0
 8016594:	001a      	movs	r2, r3
 8016596:	68bb      	ldr	r3, [r7, #8]
 8016598:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801659a:	68bb      	ldr	r3, [r7, #8]
 801659c:	785b      	ldrb	r3, [r3, #1]
 801659e:	0018      	movs	r0, r3
 80165a0:	f000 f9af 	bl	8016902 <RTC_Bcd2ToByte>
 80165a4:	0003      	movs	r3, r0
 80165a6:	001a      	movs	r2, r3
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80165ac:	68bb      	ldr	r3, [r7, #8]
 80165ae:	789b      	ldrb	r3, [r3, #2]
 80165b0:	0018      	movs	r0, r3
 80165b2:	f000 f9a6 	bl	8016902 <RTC_Bcd2ToByte>
 80165b6:	0003      	movs	r3, r0
 80165b8:	001a      	movs	r2, r3
 80165ba:	68bb      	ldr	r3, [r7, #8]
 80165bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80165be:	2300      	movs	r3, #0
}
 80165c0:	0018      	movs	r0, r3
 80165c2:	46bd      	mov	sp, r7
 80165c4:	b006      	add	sp, #24
 80165c6:	bd80      	pop	{r7, pc}
 80165c8:	007f7f7f 	.word	0x007f7f7f

080165cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80165cc:	b5b0      	push	{r4, r5, r7, lr}
 80165ce:	b086      	sub	sp, #24
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	60f8      	str	r0, [r7, #12]
 80165d4:	60b9      	str	r1, [r7, #8]
 80165d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80165d8:	2300      	movs	r3, #0
 80165da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	2220      	movs	r2, #32
 80165e0:	5c9b      	ldrb	r3, [r3, r2]
 80165e2:	2b01      	cmp	r3, #1
 80165e4:	d101      	bne.n	80165ea <HAL_RTC_SetDate+0x1e>
 80165e6:	2302      	movs	r3, #2
 80165e8:	e07e      	b.n	80166e8 <HAL_RTC_SetDate+0x11c>
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	2220      	movs	r2, #32
 80165ee:	2101      	movs	r1, #1
 80165f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	2221      	movs	r2, #33	@ 0x21
 80165f6:	2102      	movs	r1, #2
 80165f8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d10e      	bne.n	801661e <HAL_RTC_SetDate+0x52>
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	785b      	ldrb	r3, [r3, #1]
 8016604:	001a      	movs	r2, r3
 8016606:	2310      	movs	r3, #16
 8016608:	4013      	ands	r3, r2
 801660a:	d008      	beq.n	801661e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	785b      	ldrb	r3, [r3, #1]
 8016610:	2210      	movs	r2, #16
 8016612:	4393      	bics	r3, r2
 8016614:	b2db      	uxtb	r3, r3
 8016616:	330a      	adds	r3, #10
 8016618:	b2da      	uxtb	r2, r3
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d11c      	bne.n	801665e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016624:	68bb      	ldr	r3, [r7, #8]
 8016626:	78db      	ldrb	r3, [r3, #3]
 8016628:	0018      	movs	r0, r3
 801662a:	f000 f949 	bl	80168c0 <RTC_ByteToBcd2>
 801662e:	0003      	movs	r3, r0
 8016630:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016632:	68bb      	ldr	r3, [r7, #8]
 8016634:	785b      	ldrb	r3, [r3, #1]
 8016636:	0018      	movs	r0, r3
 8016638:	f000 f942 	bl	80168c0 <RTC_ByteToBcd2>
 801663c:	0003      	movs	r3, r0
 801663e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016640:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8016642:	68bb      	ldr	r3, [r7, #8]
 8016644:	789b      	ldrb	r3, [r3, #2]
 8016646:	0018      	movs	r0, r3
 8016648:	f000 f93a 	bl	80168c0 <RTC_ByteToBcd2>
 801664c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801664e:	0022      	movs	r2, r4
 8016650:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	781b      	ldrb	r3, [r3, #0]
 8016656:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016658:	4313      	orrs	r3, r2
 801665a:	617b      	str	r3, [r7, #20]
 801665c:	e00e      	b.n	801667c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	78db      	ldrb	r3, [r3, #3]
 8016662:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	785b      	ldrb	r3, [r3, #1]
 8016668:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801666a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801666c:	68ba      	ldr	r2, [r7, #8]
 801666e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016670:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8016672:	68bb      	ldr	r3, [r7, #8]
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016678:	4313      	orrs	r3, r2
 801667a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	22ca      	movs	r2, #202	@ 0xca
 8016682:	625a      	str	r2, [r3, #36]	@ 0x24
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	2253      	movs	r2, #83	@ 0x53
 801668a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801668c:	2513      	movs	r5, #19
 801668e:	197c      	adds	r4, r7, r5
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	0018      	movs	r0, r3
 8016694:	f000 f8a6 	bl	80167e4 <RTC_EnterInitMode>
 8016698:	0003      	movs	r3, r0
 801669a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801669c:	0028      	movs	r0, r5
 801669e:	183b      	adds	r3, r7, r0
 80166a0:	781b      	ldrb	r3, [r3, #0]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d10c      	bne.n	80166c0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	697a      	ldr	r2, [r7, #20]
 80166ac:	4910      	ldr	r1, [pc, #64]	@ (80166f0 <HAL_RTC_SetDate+0x124>)
 80166ae:	400a      	ands	r2, r1
 80166b0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80166b2:	183c      	adds	r4, r7, r0
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	0018      	movs	r0, r3
 80166b8:	f000 f8d8 	bl	801686c <RTC_ExitInitMode>
 80166bc:	0003      	movs	r3, r0
 80166be:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80166c0:	2313      	movs	r3, #19
 80166c2:	18fb      	adds	r3, r7, r3
 80166c4:	781b      	ldrb	r3, [r3, #0]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d103      	bne.n	80166d2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	2221      	movs	r2, #33	@ 0x21
 80166ce:	2101      	movs	r1, #1
 80166d0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	22ff      	movs	r2, #255	@ 0xff
 80166d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	2220      	movs	r2, #32
 80166de:	2100      	movs	r1, #0
 80166e0:	5499      	strb	r1, [r3, r2]

  return status;
 80166e2:	2313      	movs	r3, #19
 80166e4:	18fb      	adds	r3, r7, r3
 80166e6:	781b      	ldrb	r3, [r3, #0]
}
 80166e8:	0018      	movs	r0, r3
 80166ea:	46bd      	mov	sp, r7
 80166ec:	b006      	add	sp, #24
 80166ee:	bdb0      	pop	{r4, r5, r7, pc}
 80166f0:	00ffff3f 	.word	0x00ffff3f

080166f4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b086      	sub	sp, #24
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	60f8      	str	r0, [r7, #12]
 80166fc:	60b9      	str	r1, [r7, #8]
 80166fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016700:	2300      	movs	r3, #0
 8016702:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	4a21      	ldr	r2, [pc, #132]	@ (8016790 <HAL_RTC_GetDate+0x9c>)
 801670c:	4013      	ands	r3, r2
 801670e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	0c1b      	lsrs	r3, r3, #16
 8016714:	b2da      	uxtb	r2, r3
 8016716:	68bb      	ldr	r3, [r7, #8]
 8016718:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801671a:	697b      	ldr	r3, [r7, #20]
 801671c:	0a1b      	lsrs	r3, r3, #8
 801671e:	b2db      	uxtb	r3, r3
 8016720:	221f      	movs	r2, #31
 8016722:	4013      	ands	r3, r2
 8016724:	b2da      	uxtb	r2, r3
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801672a:	697b      	ldr	r3, [r7, #20]
 801672c:	b2db      	uxtb	r3, r3
 801672e:	223f      	movs	r2, #63	@ 0x3f
 8016730:	4013      	ands	r3, r2
 8016732:	b2da      	uxtb	r2, r3
 8016734:	68bb      	ldr	r3, [r7, #8]
 8016736:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8016738:	697b      	ldr	r3, [r7, #20]
 801673a:	0b5b      	lsrs	r3, r3, #13
 801673c:	b2db      	uxtb	r3, r3
 801673e:	2207      	movs	r2, #7
 8016740:	4013      	ands	r3, r2
 8016742:	b2da      	uxtb	r2, r3
 8016744:	68bb      	ldr	r3, [r7, #8]
 8016746:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d11a      	bne.n	8016784 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801674e:	68bb      	ldr	r3, [r7, #8]
 8016750:	78db      	ldrb	r3, [r3, #3]
 8016752:	0018      	movs	r0, r3
 8016754:	f000 f8d5 	bl	8016902 <RTC_Bcd2ToByte>
 8016758:	0003      	movs	r3, r0
 801675a:	001a      	movs	r2, r3
 801675c:	68bb      	ldr	r3, [r7, #8]
 801675e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016760:	68bb      	ldr	r3, [r7, #8]
 8016762:	785b      	ldrb	r3, [r3, #1]
 8016764:	0018      	movs	r0, r3
 8016766:	f000 f8cc 	bl	8016902 <RTC_Bcd2ToByte>
 801676a:	0003      	movs	r3, r0
 801676c:	001a      	movs	r2, r3
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8016772:	68bb      	ldr	r3, [r7, #8]
 8016774:	789b      	ldrb	r3, [r3, #2]
 8016776:	0018      	movs	r0, r3
 8016778:	f000 f8c3 	bl	8016902 <RTC_Bcd2ToByte>
 801677c:	0003      	movs	r3, r0
 801677e:	001a      	movs	r2, r3
 8016780:	68bb      	ldr	r3, [r7, #8]
 8016782:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8016784:	2300      	movs	r3, #0
}
 8016786:	0018      	movs	r0, r3
 8016788:	46bd      	mov	sp, r7
 801678a:	b006      	add	sp, #24
 801678c:	bd80      	pop	{r7, pc}
 801678e:	46c0      	nop			@ (mov r8, r8)
 8016790:	00ffff3f 	.word	0x00ffff3f

08016794 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b084      	sub	sp, #16
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801679c:	2300      	movs	r3, #0
 801679e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	4a0e      	ldr	r2, [pc, #56]	@ (80167e0 <HAL_RTC_WaitForSynchro+0x4c>)
 80167a6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80167a8:	f7f8 fce8 	bl	800f17c <HAL_GetTick>
 80167ac:	0003      	movs	r3, r0
 80167ae:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80167b0:	e00a      	b.n	80167c8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80167b2:	f7f8 fce3 	bl	800f17c <HAL_GetTick>
 80167b6:	0002      	movs	r2, r0
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	1ad2      	subs	r2, r2, r3
 80167bc:	23fa      	movs	r3, #250	@ 0xfa
 80167be:	009b      	lsls	r3, r3, #2
 80167c0:	429a      	cmp	r2, r3
 80167c2:	d901      	bls.n	80167c8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80167c4:	2303      	movs	r3, #3
 80167c6:	e006      	b.n	80167d6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	68db      	ldr	r3, [r3, #12]
 80167ce:	2220      	movs	r2, #32
 80167d0:	4013      	ands	r3, r2
 80167d2:	d0ee      	beq.n	80167b2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80167d4:	2300      	movs	r3, #0
}
 80167d6:	0018      	movs	r0, r3
 80167d8:	46bd      	mov	sp, r7
 80167da:	b004      	add	sp, #16
 80167dc:	bd80      	pop	{r7, pc}
 80167de:	46c0      	nop			@ (mov r8, r8)
 80167e0:	0001ff5f 	.word	0x0001ff5f

080167e4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b084      	sub	sp, #16
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80167ec:	2300      	movs	r3, #0
 80167ee:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80167f0:	230f      	movs	r3, #15
 80167f2:	18fb      	adds	r3, r7, r3
 80167f4:	2200      	movs	r2, #0
 80167f6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	68db      	ldr	r3, [r3, #12]
 80167fe:	2240      	movs	r2, #64	@ 0x40
 8016800:	4013      	ands	r3, r2
 8016802:	d12c      	bne.n	801685e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	68da      	ldr	r2, [r3, #12]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	2180      	movs	r1, #128	@ 0x80
 8016810:	430a      	orrs	r2, r1
 8016812:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8016814:	f7f8 fcb2 	bl	800f17c <HAL_GetTick>
 8016818:	0003      	movs	r3, r0
 801681a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801681c:	e014      	b.n	8016848 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801681e:	f7f8 fcad 	bl	800f17c <HAL_GetTick>
 8016822:	0002      	movs	r2, r0
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	1ad2      	subs	r2, r2, r3
 8016828:	200f      	movs	r0, #15
 801682a:	183b      	adds	r3, r7, r0
 801682c:	1839      	adds	r1, r7, r0
 801682e:	7809      	ldrb	r1, [r1, #0]
 8016830:	7019      	strb	r1, [r3, #0]
 8016832:	23fa      	movs	r3, #250	@ 0xfa
 8016834:	009b      	lsls	r3, r3, #2
 8016836:	429a      	cmp	r2, r3
 8016838:	d906      	bls.n	8016848 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2221      	movs	r2, #33	@ 0x21
 801683e:	2104      	movs	r1, #4
 8016840:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8016842:	183b      	adds	r3, r7, r0
 8016844:	2201      	movs	r2, #1
 8016846:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	68db      	ldr	r3, [r3, #12]
 801684e:	2240      	movs	r2, #64	@ 0x40
 8016850:	4013      	ands	r3, r2
 8016852:	d104      	bne.n	801685e <RTC_EnterInitMode+0x7a>
 8016854:	230f      	movs	r3, #15
 8016856:	18fb      	adds	r3, r7, r3
 8016858:	781b      	ldrb	r3, [r3, #0]
 801685a:	2b01      	cmp	r3, #1
 801685c:	d1df      	bne.n	801681e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801685e:	230f      	movs	r3, #15
 8016860:	18fb      	adds	r3, r7, r3
 8016862:	781b      	ldrb	r3, [r3, #0]
}
 8016864:	0018      	movs	r0, r3
 8016866:	46bd      	mov	sp, r7
 8016868:	b004      	add	sp, #16
 801686a:	bd80      	pop	{r7, pc}

0801686c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801686c:	b590      	push	{r4, r7, lr}
 801686e:	b085      	sub	sp, #20
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016874:	240f      	movs	r4, #15
 8016876:	193b      	adds	r3, r7, r4
 8016878:	2200      	movs	r2, #0
 801687a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	68da      	ldr	r2, [r3, #12]
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	2180      	movs	r1, #128	@ 0x80
 8016888:	438a      	bics	r2, r1
 801688a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	689b      	ldr	r3, [r3, #8]
 8016892:	2220      	movs	r2, #32
 8016894:	4013      	ands	r3, r2
 8016896:	d10c      	bne.n	80168b2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	0018      	movs	r0, r3
 801689c:	f7ff ff7a 	bl	8016794 <HAL_RTC_WaitForSynchro>
 80168a0:	1e03      	subs	r3, r0, #0
 80168a2:	d006      	beq.n	80168b2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2221      	movs	r2, #33	@ 0x21
 80168a8:	2104      	movs	r1, #4
 80168aa:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80168ac:	193b      	adds	r3, r7, r4
 80168ae:	2201      	movs	r2, #1
 80168b0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80168b2:	230f      	movs	r3, #15
 80168b4:	18fb      	adds	r3, r7, r3
 80168b6:	781b      	ldrb	r3, [r3, #0]
}
 80168b8:	0018      	movs	r0, r3
 80168ba:	46bd      	mov	sp, r7
 80168bc:	b005      	add	sp, #20
 80168be:	bd90      	pop	{r4, r7, pc}

080168c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b084      	sub	sp, #16
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	0002      	movs	r2, r0
 80168c8:	1dfb      	adds	r3, r7, #7
 80168ca:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80168cc:	2300      	movs	r3, #0
 80168ce:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80168d0:	e007      	b.n	80168e2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	3301      	adds	r3, #1
 80168d6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80168d8:	1dfb      	adds	r3, r7, #7
 80168da:	1dfa      	adds	r2, r7, #7
 80168dc:	7812      	ldrb	r2, [r2, #0]
 80168de:	3a0a      	subs	r2, #10
 80168e0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80168e2:	1dfb      	adds	r3, r7, #7
 80168e4:	781b      	ldrb	r3, [r3, #0]
 80168e6:	2b09      	cmp	r3, #9
 80168e8:	d8f3      	bhi.n	80168d2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	011b      	lsls	r3, r3, #4
 80168f0:	b2da      	uxtb	r2, r3
 80168f2:	1dfb      	adds	r3, r7, #7
 80168f4:	781b      	ldrb	r3, [r3, #0]
 80168f6:	4313      	orrs	r3, r2
 80168f8:	b2db      	uxtb	r3, r3
}
 80168fa:	0018      	movs	r0, r3
 80168fc:	46bd      	mov	sp, r7
 80168fe:	b004      	add	sp, #16
 8016900:	bd80      	pop	{r7, pc}

08016902 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8016902:	b580      	push	{r7, lr}
 8016904:	b084      	sub	sp, #16
 8016906:	af00      	add	r7, sp, #0
 8016908:	0002      	movs	r2, r0
 801690a:	1dfb      	adds	r3, r7, #7
 801690c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801690e:	2300      	movs	r3, #0
 8016910:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8016912:	1dfb      	adds	r3, r7, #7
 8016914:	781b      	ldrb	r3, [r3, #0]
 8016916:	091b      	lsrs	r3, r3, #4
 8016918:	b2db      	uxtb	r3, r3
 801691a:	001a      	movs	r2, r3
 801691c:	0013      	movs	r3, r2
 801691e:	009b      	lsls	r3, r3, #2
 8016920:	189b      	adds	r3, r3, r2
 8016922:	005b      	lsls	r3, r3, #1
 8016924:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	b2da      	uxtb	r2, r3
 801692a:	1dfb      	adds	r3, r7, #7
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	210f      	movs	r1, #15
 8016930:	400b      	ands	r3, r1
 8016932:	b2db      	uxtb	r3, r3
 8016934:	18d3      	adds	r3, r2, r3
 8016936:	b2db      	uxtb	r3, r3
}
 8016938:	0018      	movs	r0, r3
 801693a:	46bd      	mov	sp, r7
 801693c:	b004      	add	sp, #16
 801693e:	bd80      	pop	{r7, pc}

08016940 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b086      	sub	sp, #24
 8016944:	af00      	add	r7, sp, #0
 8016946:	60f8      	str	r0, [r7, #12]
 8016948:	60b9      	str	r1, [r7, #8]
 801694a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801694c:	4b64      	ldr	r3, [pc, #400]	@ (8016ae0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	22fa      	movs	r2, #250	@ 0xfa
 8016952:	01d1      	lsls	r1, r2, #7
 8016954:	0018      	movs	r0, r3
 8016956:	f7e9 fc25 	bl	80001a4 <__udivsi3>
 801695a:	0003      	movs	r3, r0
 801695c:	001a      	movs	r2, r3
 801695e:	0013      	movs	r3, r2
 8016960:	015b      	lsls	r3, r3, #5
 8016962:	1a9b      	subs	r3, r3, r2
 8016964:	009b      	lsls	r3, r3, #2
 8016966:	189b      	adds	r3, r3, r2
 8016968:	00db      	lsls	r3, r3, #3
 801696a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	2220      	movs	r2, #32
 8016970:	5c9b      	ldrb	r3, [r3, r2]
 8016972:	2b01      	cmp	r3, #1
 8016974:	d101      	bne.n	801697a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8016976:	2302      	movs	r3, #2
 8016978:	e0ad      	b.n	8016ad6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	2220      	movs	r2, #32
 801697e:	2101      	movs	r1, #1
 8016980:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	2221      	movs	r2, #33	@ 0x21
 8016986:	2102      	movs	r1, #2
 8016988:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	22ca      	movs	r2, #202	@ 0xca
 8016990:	625a      	str	r2, [r3, #36]	@ 0x24
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	2253      	movs	r2, #83	@ 0x53
 8016998:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	689a      	ldr	r2, [r3, #8]
 80169a0:	2380      	movs	r3, #128	@ 0x80
 80169a2:	00db      	lsls	r3, r3, #3
 80169a4:	4013      	ands	r3, r2
 80169a6:	d019      	beq.n	80169dc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80169a8:	697b      	ldr	r3, [r7, #20]
 80169aa:	3b01      	subs	r3, #1
 80169ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d10d      	bne.n	80169d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	22ff      	movs	r2, #255	@ 0xff
 80169ba:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2221      	movs	r2, #33	@ 0x21
 80169c0:	2103      	movs	r1, #3
 80169c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2220      	movs	r2, #32
 80169c8:	2100      	movs	r1, #0
 80169ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80169cc:	2303      	movs	r3, #3
 80169ce:	e082      	b.n	8016ad6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	68db      	ldr	r3, [r3, #12]
 80169d6:	2204      	movs	r2, #4
 80169d8:	4013      	ands	r3, r2
 80169da:	d1e5      	bne.n	80169a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	689a      	ldr	r2, [r3, #8]
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	493f      	ldr	r1, [pc, #252]	@ (8016ae4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80169e8:	400a      	ands	r2, r1
 80169ea:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	68db      	ldr	r3, [r3, #12]
 80169f2:	22ff      	movs	r2, #255	@ 0xff
 80169f4:	401a      	ands	r2, r3
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	493b      	ldr	r1, [pc, #236]	@ (8016ae8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80169fc:	430a      	orrs	r2, r1
 80169fe:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016a00:	4b37      	ldr	r3, [pc, #220]	@ (8016ae0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	22fa      	movs	r2, #250	@ 0xfa
 8016a06:	01d1      	lsls	r1, r2, #7
 8016a08:	0018      	movs	r0, r3
 8016a0a:	f7e9 fbcb 	bl	80001a4 <__udivsi3>
 8016a0e:	0003      	movs	r3, r0
 8016a10:	001a      	movs	r2, r3
 8016a12:	0013      	movs	r3, r2
 8016a14:	015b      	lsls	r3, r3, #5
 8016a16:	1a9b      	subs	r3, r3, r2
 8016a18:	009b      	lsls	r3, r3, #2
 8016a1a:	189b      	adds	r3, r3, r2
 8016a1c:	00db      	lsls	r3, r3, #3
 8016a1e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016a20:	697b      	ldr	r3, [r7, #20]
 8016a22:	3b01      	subs	r3, #1
 8016a24:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d10d      	bne.n	8016a48 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	22ff      	movs	r2, #255	@ 0xff
 8016a32:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	2221      	movs	r2, #33	@ 0x21
 8016a38:	2103      	movs	r1, #3
 8016a3a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	2220      	movs	r2, #32
 8016a40:	2100      	movs	r1, #0
 8016a42:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016a44:	2303      	movs	r3, #3
 8016a46:	e046      	b.n	8016ad6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	68db      	ldr	r3, [r3, #12]
 8016a4e:	2204      	movs	r2, #4
 8016a50:	4013      	ands	r3, r2
 8016a52:	d0e5      	beq.n	8016a20 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	689a      	ldr	r2, [r3, #8]
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	2107      	movs	r1, #7
 8016a60:	438a      	bics	r2, r1
 8016a62:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	6899      	ldr	r1, [r3, #8]
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	687a      	ldr	r2, [r7, #4]
 8016a70:	430a      	orrs	r2, r1
 8016a72:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	68ba      	ldr	r2, [r7, #8]
 8016a7a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8016a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8016aec <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016a7e:	681a      	ldr	r2, [r3, #0]
 8016a80:	4b1a      	ldr	r3, [pc, #104]	@ (8016aec <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016a82:	2180      	movs	r1, #128	@ 0x80
 8016a84:	0349      	lsls	r1, r1, #13
 8016a86:	430a      	orrs	r2, r1
 8016a88:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8016a8a:	4b18      	ldr	r3, [pc, #96]	@ (8016aec <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016a8c:	689a      	ldr	r2, [r3, #8]
 8016a8e:	4b17      	ldr	r3, [pc, #92]	@ (8016aec <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8016a90:	2180      	movs	r1, #128	@ 0x80
 8016a92:	0349      	lsls	r1, r1, #13
 8016a94:	430a      	orrs	r2, r1
 8016a96:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	689a      	ldr	r2, [r3, #8]
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	2180      	movs	r1, #128	@ 0x80
 8016aa4:	01c9      	lsls	r1, r1, #7
 8016aa6:	430a      	orrs	r2, r1
 8016aa8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	689a      	ldr	r2, [r3, #8]
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	2180      	movs	r1, #128	@ 0x80
 8016ab6:	00c9      	lsls	r1, r1, #3
 8016ab8:	430a      	orrs	r2, r1
 8016aba:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	22ff      	movs	r2, #255	@ 0xff
 8016ac2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	2221      	movs	r2, #33	@ 0x21
 8016ac8:	2101      	movs	r1, #1
 8016aca:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	2220      	movs	r2, #32
 8016ad0:	2100      	movs	r1, #0
 8016ad2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016ad4:	2300      	movs	r3, #0
}
 8016ad6:	0018      	movs	r0, r3
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	b006      	add	sp, #24
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	46c0      	nop			@ (mov r8, r8)
 8016ae0:	200000d0 	.word	0x200000d0
 8016ae4:	fffffbff 	.word	0xfffffbff
 8016ae8:	fffffb7f 	.word	0xfffffb7f
 8016aec:	40010400 	.word	0x40010400

08016af0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b084      	sub	sp, #16
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016af8:	2300      	movs	r3, #0
 8016afa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2220      	movs	r2, #32
 8016b00:	5c9b      	ldrb	r3, [r3, r2]
 8016b02:	2b01      	cmp	r3, #1
 8016b04:	d101      	bne.n	8016b0a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8016b06:	2302      	movs	r3, #2
 8016b08:	e04e      	b.n	8016ba8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2220      	movs	r2, #32
 8016b0e:	2101      	movs	r1, #1
 8016b10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	2221      	movs	r2, #33	@ 0x21
 8016b16:	2102      	movs	r1, #2
 8016b18:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	22ca      	movs	r2, #202	@ 0xca
 8016b20:	625a      	str	r2, [r3, #36]	@ 0x24
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	2253      	movs	r2, #83	@ 0x53
 8016b28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	689a      	ldr	r2, [r3, #8]
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	491e      	ldr	r1, [pc, #120]	@ (8016bb0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8016b36:	400a      	ands	r2, r1
 8016b38:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	689a      	ldr	r2, [r3, #8]
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	491b      	ldr	r1, [pc, #108]	@ (8016bb4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8016b46:	400a      	ands	r2, r1
 8016b48:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016b4a:	f7f8 fb17 	bl	800f17c <HAL_GetTick>
 8016b4e:	0003      	movs	r3, r0
 8016b50:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016b52:	e016      	b.n	8016b82 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016b54:	f7f8 fb12 	bl	800f17c <HAL_GetTick>
 8016b58:	0002      	movs	r2, r0
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	1ad2      	subs	r2, r2, r3
 8016b5e:	23fa      	movs	r3, #250	@ 0xfa
 8016b60:	009b      	lsls	r3, r3, #2
 8016b62:	429a      	cmp	r2, r3
 8016b64:	d90d      	bls.n	8016b82 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	22ff      	movs	r2, #255	@ 0xff
 8016b6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2221      	movs	r2, #33	@ 0x21
 8016b72:	2103      	movs	r1, #3
 8016b74:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	2220      	movs	r2, #32
 8016b7a:	2100      	movs	r1, #0
 8016b7c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8016b7e:	2303      	movs	r3, #3
 8016b80:	e012      	b.n	8016ba8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	68db      	ldr	r3, [r3, #12]
 8016b88:	2204      	movs	r2, #4
 8016b8a:	4013      	ands	r3, r2
 8016b8c:	d0e2      	beq.n	8016b54 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	22ff      	movs	r2, #255	@ 0xff
 8016b94:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	2221      	movs	r2, #33	@ 0x21
 8016b9a:	2101      	movs	r1, #1
 8016b9c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	2220      	movs	r2, #32
 8016ba2:	2100      	movs	r1, #0
 8016ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016ba6:	2300      	movs	r3, #0
}
 8016ba8:	0018      	movs	r0, r3
 8016baa:	46bd      	mov	sp, r7
 8016bac:	b004      	add	sp, #16
 8016bae:	bd80      	pop	{r7, pc}
 8016bb0:	fffffbff 	.word	0xfffffbff
 8016bb4:	ffffbfff 	.word	0xffffbfff

08016bb8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8016bc0:	4b13      	ldr	r3, [pc, #76]	@ (8016c10 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8016bc2:	2280      	movs	r2, #128	@ 0x80
 8016bc4:	0352      	lsls	r2, r2, #13
 8016bc6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	689a      	ldr	r2, [r3, #8]
 8016bce:	2380      	movs	r3, #128	@ 0x80
 8016bd0:	01db      	lsls	r3, r3, #7
 8016bd2:	4013      	ands	r3, r2
 8016bd4:	d014      	beq.n	8016c00 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	68da      	ldr	r2, [r3, #12]
 8016bdc:	2380      	movs	r3, #128	@ 0x80
 8016bde:	00db      	lsls	r3, r3, #3
 8016be0:	4013      	ands	r3, r2
 8016be2:	d00d      	beq.n	8016c00 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	68db      	ldr	r3, [r3, #12]
 8016bea:	22ff      	movs	r2, #255	@ 0xff
 8016bec:	401a      	ands	r2, r3
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	4908      	ldr	r1, [pc, #32]	@ (8016c14 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8016bf4:	430a      	orrs	r2, r1
 8016bf6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	0018      	movs	r0, r3
 8016bfc:	f000 f80c 	bl	8016c18 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2221      	movs	r2, #33	@ 0x21
 8016c04:	2101      	movs	r1, #1
 8016c06:	5499      	strb	r1, [r3, r2]
}
 8016c08:	46c0      	nop			@ (mov r8, r8)
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	b002      	add	sp, #8
 8016c0e:	bd80      	pop	{r7, pc}
 8016c10:	40010400 	.word	0x40010400
 8016c14:	fffffb7f 	.word	0xfffffb7f

08016c18 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b082      	sub	sp, #8
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016c20:	46c0      	nop			@ (mov r8, r8)
 8016c22:	46bd      	mov	sp, r7
 8016c24:	b002      	add	sp, #8
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b086      	sub	sp, #24
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	60f8      	str	r0, [r7, #12]
 8016c30:	60b9      	str	r1, [r7, #8]
 8016c32:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8016c34:	2300      	movs	r3, #0
 8016c36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	3350      	adds	r3, #80	@ 0x50
 8016c3e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	009b      	lsls	r3, r3, #2
 8016c44:	697a      	ldr	r2, [r7, #20]
 8016c46:	18d3      	adds	r3, r2, r3
 8016c48:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8016c4a:	697b      	ldr	r3, [r7, #20]
 8016c4c:	687a      	ldr	r2, [r7, #4]
 8016c4e:	601a      	str	r2, [r3, #0]
}
 8016c50:	46c0      	nop			@ (mov r8, r8)
 8016c52:	46bd      	mov	sp, r7
 8016c54:	b006      	add	sp, #24
 8016c56:	bd80      	pop	{r7, pc}

08016c58 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b084      	sub	sp, #16
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
 8016c60:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8016c62:	2300      	movs	r3, #0
 8016c64:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	3350      	adds	r3, #80	@ 0x50
 8016c6c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	009b      	lsls	r3, r3, #2
 8016c72:	68fa      	ldr	r2, [r7, #12]
 8016c74:	18d3      	adds	r3, r2, r3
 8016c76:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	681b      	ldr	r3, [r3, #0]
}
 8016c7c:	0018      	movs	r0, r3
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	b004      	add	sp, #16
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d101      	bne.n	8016c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016c92:	2301      	movs	r3, #1
 8016c94:	e032      	b.n	8016cfc <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2239      	movs	r2, #57	@ 0x39
 8016c9a:	5c9b      	ldrb	r3, [r3, r2]
 8016c9c:	b2db      	uxtb	r3, r3
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d107      	bne.n	8016cb2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	2238      	movs	r2, #56	@ 0x38
 8016ca6:	2100      	movs	r1, #0
 8016ca8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	0018      	movs	r0, r3
 8016cae:	f7f7 fb79 	bl	800e3a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2239      	movs	r2, #57	@ 0x39
 8016cb6:	2102      	movs	r1, #2
 8016cb8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681a      	ldr	r2, [r3, #0]
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	3304      	adds	r3, #4
 8016cc2:	0019      	movs	r1, r3
 8016cc4:	0010      	movs	r0, r2
 8016cc6:	f000 fa1d 	bl	8017104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	223e      	movs	r2, #62	@ 0x3e
 8016cce:	2101      	movs	r1, #1
 8016cd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	223a      	movs	r2, #58	@ 0x3a
 8016cd6:	2101      	movs	r1, #1
 8016cd8:	5499      	strb	r1, [r3, r2]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	223b      	movs	r2, #59	@ 0x3b
 8016cde:	2101      	movs	r1, #1
 8016ce0:	5499      	strb	r1, [r3, r2]
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	223c      	movs	r2, #60	@ 0x3c
 8016ce6:	2101      	movs	r1, #1
 8016ce8:	5499      	strb	r1, [r3, r2]
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	223d      	movs	r2, #61	@ 0x3d
 8016cee:	2101      	movs	r1, #1
 8016cf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2239      	movs	r2, #57	@ 0x39
 8016cf6:	2101      	movs	r1, #1
 8016cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016cfa:	2300      	movs	r3, #0
}
 8016cfc:	0018      	movs	r0, r3
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	b002      	add	sp, #8
 8016d02:	bd80      	pop	{r7, pc}

08016d04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b084      	sub	sp, #16
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2239      	movs	r2, #57	@ 0x39
 8016d10:	5c9b      	ldrb	r3, [r3, r2]
 8016d12:	b2db      	uxtb	r3, r3
 8016d14:	2b01      	cmp	r3, #1
 8016d16:	d001      	beq.n	8016d1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016d18:	2301      	movs	r3, #1
 8016d1a:	e033      	b.n	8016d84 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2239      	movs	r2, #57	@ 0x39
 8016d20:	2102      	movs	r1, #2
 8016d22:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	681a      	ldr	r2, [r3, #0]
 8016d28:	2380      	movs	r3, #128	@ 0x80
 8016d2a:	05db      	lsls	r3, r3, #23
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d00e      	beq.n	8016d4e <HAL_TIM_Base_Start+0x4a>
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	4a15      	ldr	r2, [pc, #84]	@ (8016d8c <HAL_TIM_Base_Start+0x88>)
 8016d36:	4293      	cmp	r3, r2
 8016d38:	d009      	beq.n	8016d4e <HAL_TIM_Base_Start+0x4a>
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	4a14      	ldr	r2, [pc, #80]	@ (8016d90 <HAL_TIM_Base_Start+0x8c>)
 8016d40:	4293      	cmp	r3, r2
 8016d42:	d004      	beq.n	8016d4e <HAL_TIM_Base_Start+0x4a>
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	4a12      	ldr	r2, [pc, #72]	@ (8016d94 <HAL_TIM_Base_Start+0x90>)
 8016d4a:	4293      	cmp	r3, r2
 8016d4c:	d111      	bne.n	8016d72 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	689b      	ldr	r3, [r3, #8]
 8016d54:	2207      	movs	r2, #7
 8016d56:	4013      	ands	r3, r2
 8016d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	2b06      	cmp	r3, #6
 8016d5e:	d010      	beq.n	8016d82 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	681a      	ldr	r2, [r3, #0]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	2101      	movs	r1, #1
 8016d6c:	430a      	orrs	r2, r1
 8016d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016d70:	e007      	b.n	8016d82 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	681a      	ldr	r2, [r3, #0]
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	2101      	movs	r1, #1
 8016d7e:	430a      	orrs	r2, r1
 8016d80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016d82:	2300      	movs	r3, #0
}
 8016d84:	0018      	movs	r0, r3
 8016d86:	46bd      	mov	sp, r7
 8016d88:	b004      	add	sp, #16
 8016d8a:	bd80      	pop	{r7, pc}
 8016d8c:	40000400 	.word	0x40000400
 8016d90:	40010800 	.word	0x40010800
 8016d94:	40011400 	.word	0x40011400

08016d98 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b082      	sub	sp, #8
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	6a1b      	ldr	r3, [r3, #32]
 8016da6:	4a0a      	ldr	r2, [pc, #40]	@ (8016dd0 <HAL_TIM_Base_Stop+0x38>)
 8016da8:	4013      	ands	r3, r2
 8016daa:	d107      	bne.n	8016dbc <HAL_TIM_Base_Stop+0x24>
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	681a      	ldr	r2, [r3, #0]
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	2101      	movs	r1, #1
 8016db8:	438a      	bics	r2, r1
 8016dba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2239      	movs	r2, #57	@ 0x39
 8016dc0:	2101      	movs	r1, #1
 8016dc2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8016dc4:	2300      	movs	r3, #0
}
 8016dc6:	0018      	movs	r0, r3
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	b002      	add	sp, #8
 8016dcc:	bd80      	pop	{r7, pc}
 8016dce:	46c0      	nop			@ (mov r8, r8)
 8016dd0:	00001111 	.word	0x00001111

08016dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b082      	sub	sp, #8
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d101      	bne.n	8016de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016de2:	2301      	movs	r3, #1
 8016de4:	e032      	b.n	8016e4c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	2239      	movs	r2, #57	@ 0x39
 8016dea:	5c9b      	ldrb	r3, [r3, r2]
 8016dec:	b2db      	uxtb	r3, r3
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d107      	bne.n	8016e02 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	2238      	movs	r2, #56	@ 0x38
 8016df6:	2100      	movs	r1, #0
 8016df8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	0018      	movs	r0, r3
 8016dfe:	f7f7 faad 	bl	800e35c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	2239      	movs	r2, #57	@ 0x39
 8016e06:	2102      	movs	r1, #2
 8016e08:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	681a      	ldr	r2, [r3, #0]
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	3304      	adds	r3, #4
 8016e12:	0019      	movs	r1, r3
 8016e14:	0010      	movs	r0, r2
 8016e16:	f000 f975 	bl	8017104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	223e      	movs	r2, #62	@ 0x3e
 8016e1e:	2101      	movs	r1, #1
 8016e20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	223a      	movs	r2, #58	@ 0x3a
 8016e26:	2101      	movs	r1, #1
 8016e28:	5499      	strb	r1, [r3, r2]
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	223b      	movs	r2, #59	@ 0x3b
 8016e2e:	2101      	movs	r1, #1
 8016e30:	5499      	strb	r1, [r3, r2]
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	223c      	movs	r2, #60	@ 0x3c
 8016e36:	2101      	movs	r1, #1
 8016e38:	5499      	strb	r1, [r3, r2]
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	223d      	movs	r2, #61	@ 0x3d
 8016e3e:	2101      	movs	r1, #1
 8016e40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	2239      	movs	r2, #57	@ 0x39
 8016e46:	2101      	movs	r1, #1
 8016e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016e4a:	2300      	movs	r3, #0
}
 8016e4c:	0018      	movs	r0, r3
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	b002      	add	sp, #8
 8016e52:	bd80      	pop	{r7, pc}

08016e54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b084      	sub	sp, #16
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
 8016e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d108      	bne.n	8016e76 <HAL_TIM_PWM_Start+0x22>
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	223a      	movs	r2, #58	@ 0x3a
 8016e68:	5c9b      	ldrb	r3, [r3, r2]
 8016e6a:	b2db      	uxtb	r3, r3
 8016e6c:	3b01      	subs	r3, #1
 8016e6e:	1e5a      	subs	r2, r3, #1
 8016e70:	4193      	sbcs	r3, r2
 8016e72:	b2db      	uxtb	r3, r3
 8016e74:	e01f      	b.n	8016eb6 <HAL_TIM_PWM_Start+0x62>
 8016e76:	683b      	ldr	r3, [r7, #0]
 8016e78:	2b04      	cmp	r3, #4
 8016e7a:	d108      	bne.n	8016e8e <HAL_TIM_PWM_Start+0x3a>
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	223b      	movs	r2, #59	@ 0x3b
 8016e80:	5c9b      	ldrb	r3, [r3, r2]
 8016e82:	b2db      	uxtb	r3, r3
 8016e84:	3b01      	subs	r3, #1
 8016e86:	1e5a      	subs	r2, r3, #1
 8016e88:	4193      	sbcs	r3, r2
 8016e8a:	b2db      	uxtb	r3, r3
 8016e8c:	e013      	b.n	8016eb6 <HAL_TIM_PWM_Start+0x62>
 8016e8e:	683b      	ldr	r3, [r7, #0]
 8016e90:	2b08      	cmp	r3, #8
 8016e92:	d108      	bne.n	8016ea6 <HAL_TIM_PWM_Start+0x52>
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	223c      	movs	r2, #60	@ 0x3c
 8016e98:	5c9b      	ldrb	r3, [r3, r2]
 8016e9a:	b2db      	uxtb	r3, r3
 8016e9c:	3b01      	subs	r3, #1
 8016e9e:	1e5a      	subs	r2, r3, #1
 8016ea0:	4193      	sbcs	r3, r2
 8016ea2:	b2db      	uxtb	r3, r3
 8016ea4:	e007      	b.n	8016eb6 <HAL_TIM_PWM_Start+0x62>
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	223d      	movs	r2, #61	@ 0x3d
 8016eaa:	5c9b      	ldrb	r3, [r3, r2]
 8016eac:	b2db      	uxtb	r3, r3
 8016eae:	3b01      	subs	r3, #1
 8016eb0:	1e5a      	subs	r2, r3, #1
 8016eb2:	4193      	sbcs	r3, r2
 8016eb4:	b2db      	uxtb	r3, r3
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d001      	beq.n	8016ebe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8016eba:	2301      	movs	r3, #1
 8016ebc:	e052      	b.n	8016f64 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016ebe:	683b      	ldr	r3, [r7, #0]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d104      	bne.n	8016ece <HAL_TIM_PWM_Start+0x7a>
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	223a      	movs	r2, #58	@ 0x3a
 8016ec8:	2102      	movs	r1, #2
 8016eca:	5499      	strb	r1, [r3, r2]
 8016ecc:	e013      	b.n	8016ef6 <HAL_TIM_PWM_Start+0xa2>
 8016ece:	683b      	ldr	r3, [r7, #0]
 8016ed0:	2b04      	cmp	r3, #4
 8016ed2:	d104      	bne.n	8016ede <HAL_TIM_PWM_Start+0x8a>
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	223b      	movs	r2, #59	@ 0x3b
 8016ed8:	2102      	movs	r1, #2
 8016eda:	5499      	strb	r1, [r3, r2]
 8016edc:	e00b      	b.n	8016ef6 <HAL_TIM_PWM_Start+0xa2>
 8016ede:	683b      	ldr	r3, [r7, #0]
 8016ee0:	2b08      	cmp	r3, #8
 8016ee2:	d104      	bne.n	8016eee <HAL_TIM_PWM_Start+0x9a>
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	223c      	movs	r2, #60	@ 0x3c
 8016ee8:	2102      	movs	r1, #2
 8016eea:	5499      	strb	r1, [r3, r2]
 8016eec:	e003      	b.n	8016ef6 <HAL_TIM_PWM_Start+0xa2>
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	223d      	movs	r2, #61	@ 0x3d
 8016ef2:	2102      	movs	r1, #2
 8016ef4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	6839      	ldr	r1, [r7, #0]
 8016efc:	2201      	movs	r2, #1
 8016efe:	0018      	movs	r0, r3
 8016f00:	f000 fa62 	bl	80173c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681a      	ldr	r2, [r3, #0]
 8016f08:	2380      	movs	r3, #128	@ 0x80
 8016f0a:	05db      	lsls	r3, r3, #23
 8016f0c:	429a      	cmp	r2, r3
 8016f0e:	d00e      	beq.n	8016f2e <HAL_TIM_PWM_Start+0xda>
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	4a15      	ldr	r2, [pc, #84]	@ (8016f6c <HAL_TIM_PWM_Start+0x118>)
 8016f16:	4293      	cmp	r3, r2
 8016f18:	d009      	beq.n	8016f2e <HAL_TIM_PWM_Start+0xda>
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	4a14      	ldr	r2, [pc, #80]	@ (8016f70 <HAL_TIM_PWM_Start+0x11c>)
 8016f20:	4293      	cmp	r3, r2
 8016f22:	d004      	beq.n	8016f2e <HAL_TIM_PWM_Start+0xda>
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	4a12      	ldr	r2, [pc, #72]	@ (8016f74 <HAL_TIM_PWM_Start+0x120>)
 8016f2a:	4293      	cmp	r3, r2
 8016f2c:	d111      	bne.n	8016f52 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	689b      	ldr	r3, [r3, #8]
 8016f34:	2207      	movs	r2, #7
 8016f36:	4013      	ands	r3, r2
 8016f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	2b06      	cmp	r3, #6
 8016f3e:	d010      	beq.n	8016f62 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	681a      	ldr	r2, [r3, #0]
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	2101      	movs	r1, #1
 8016f4c:	430a      	orrs	r2, r1
 8016f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016f50:	e007      	b.n	8016f62 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	681a      	ldr	r2, [r3, #0]
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	2101      	movs	r1, #1
 8016f5e:	430a      	orrs	r2, r1
 8016f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016f62:	2300      	movs	r3, #0
}
 8016f64:	0018      	movs	r0, r3
 8016f66:	46bd      	mov	sp, r7
 8016f68:	b004      	add	sp, #16
 8016f6a:	bd80      	pop	{r7, pc}
 8016f6c:	40000400 	.word	0x40000400
 8016f70:	40010800 	.word	0x40010800
 8016f74:	40011400 	.word	0x40011400

08016f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b086      	sub	sp, #24
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	60f8      	str	r0, [r7, #12]
 8016f80:	60b9      	str	r1, [r7, #8]
 8016f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016f84:	2317      	movs	r3, #23
 8016f86:	18fb      	adds	r3, r7, r3
 8016f88:	2200      	movs	r2, #0
 8016f8a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	2238      	movs	r2, #56	@ 0x38
 8016f90:	5c9b      	ldrb	r3, [r3, r2]
 8016f92:	2b01      	cmp	r3, #1
 8016f94:	d101      	bne.n	8016f9a <HAL_TIM_PWM_ConfigChannel+0x22>
 8016f96:	2302      	movs	r3, #2
 8016f98:	e0ad      	b.n	80170f6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	2238      	movs	r2, #56	@ 0x38
 8016f9e:	2101      	movs	r1, #1
 8016fa0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	2b0c      	cmp	r3, #12
 8016fa6:	d100      	bne.n	8016faa <HAL_TIM_PWM_ConfigChannel+0x32>
 8016fa8:	e076      	b.n	8017098 <HAL_TIM_PWM_ConfigChannel+0x120>
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	2b0c      	cmp	r3, #12
 8016fae:	d900      	bls.n	8016fb2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016fb0:	e095      	b.n	80170de <HAL_TIM_PWM_ConfigChannel+0x166>
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	2b08      	cmp	r3, #8
 8016fb6:	d04e      	beq.n	8017056 <HAL_TIM_PWM_ConfigChannel+0xde>
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	2b08      	cmp	r3, #8
 8016fbc:	d900      	bls.n	8016fc0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016fbe:	e08e      	b.n	80170de <HAL_TIM_PWM_ConfigChannel+0x166>
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d003      	beq.n	8016fce <HAL_TIM_PWM_ConfigChannel+0x56>
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	2b04      	cmp	r3, #4
 8016fca:	d021      	beq.n	8017010 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016fcc:	e087      	b.n	80170de <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	68ba      	ldr	r2, [r7, #8]
 8016fd4:	0011      	movs	r1, r2
 8016fd6:	0018      	movs	r0, r3
 8016fd8:	f000 f8f2 	bl	80171c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	699a      	ldr	r2, [r3, #24]
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	2108      	movs	r1, #8
 8016fe8:	430a      	orrs	r2, r1
 8016fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	699a      	ldr	r2, [r3, #24]
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	2104      	movs	r1, #4
 8016ff8:	438a      	bics	r2, r1
 8016ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	6999      	ldr	r1, [r3, #24]
 8017002:	68bb      	ldr	r3, [r7, #8]
 8017004:	68da      	ldr	r2, [r3, #12]
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	430a      	orrs	r2, r1
 801700c:	619a      	str	r2, [r3, #24]
      break;
 801700e:	e06b      	b.n	80170e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	68ba      	ldr	r2, [r7, #8]
 8017016:	0011      	movs	r1, r2
 8017018:	0018      	movs	r0, r3
 801701a:	f000 f90d 	bl	8017238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	699a      	ldr	r2, [r3, #24]
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	2180      	movs	r1, #128	@ 0x80
 801702a:	0109      	lsls	r1, r1, #4
 801702c:	430a      	orrs	r2, r1
 801702e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	699a      	ldr	r2, [r3, #24]
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	4931      	ldr	r1, [pc, #196]	@ (8017100 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801703c:	400a      	ands	r2, r1
 801703e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	6999      	ldr	r1, [r3, #24]
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	68db      	ldr	r3, [r3, #12]
 801704a:	021a      	lsls	r2, r3, #8
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	430a      	orrs	r2, r1
 8017052:	619a      	str	r2, [r3, #24]
      break;
 8017054:	e048      	b.n	80170e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	68ba      	ldr	r2, [r7, #8]
 801705c:	0011      	movs	r1, r2
 801705e:	0018      	movs	r0, r3
 8017060:	f000 f92c 	bl	80172bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	69da      	ldr	r2, [r3, #28]
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	2108      	movs	r1, #8
 8017070:	430a      	orrs	r2, r1
 8017072:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	69da      	ldr	r2, [r3, #28]
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	2104      	movs	r1, #4
 8017080:	438a      	bics	r2, r1
 8017082:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	69d9      	ldr	r1, [r3, #28]
 801708a:	68bb      	ldr	r3, [r7, #8]
 801708c:	68da      	ldr	r2, [r3, #12]
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	430a      	orrs	r2, r1
 8017094:	61da      	str	r2, [r3, #28]
      break;
 8017096:	e027      	b.n	80170e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	68ba      	ldr	r2, [r7, #8]
 801709e:	0011      	movs	r1, r2
 80170a0:	0018      	movs	r0, r3
 80170a2:	f000 f94b 	bl	801733c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	69da      	ldr	r2, [r3, #28]
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	2180      	movs	r1, #128	@ 0x80
 80170b2:	0109      	lsls	r1, r1, #4
 80170b4:	430a      	orrs	r2, r1
 80170b6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	69da      	ldr	r2, [r3, #28]
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	490f      	ldr	r1, [pc, #60]	@ (8017100 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80170c4:	400a      	ands	r2, r1
 80170c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	69d9      	ldr	r1, [r3, #28]
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	68db      	ldr	r3, [r3, #12]
 80170d2:	021a      	lsls	r2, r3, #8
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	430a      	orrs	r2, r1
 80170da:	61da      	str	r2, [r3, #28]
      break;
 80170dc:	e004      	b.n	80170e8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80170de:	2317      	movs	r3, #23
 80170e0:	18fb      	adds	r3, r7, r3
 80170e2:	2201      	movs	r2, #1
 80170e4:	701a      	strb	r2, [r3, #0]
      break;
 80170e6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	2238      	movs	r2, #56	@ 0x38
 80170ec:	2100      	movs	r1, #0
 80170ee:	5499      	strb	r1, [r3, r2]

  return status;
 80170f0:	2317      	movs	r3, #23
 80170f2:	18fb      	adds	r3, r7, r3
 80170f4:	781b      	ldrb	r3, [r3, #0]
}
 80170f6:	0018      	movs	r0, r3
 80170f8:	46bd      	mov	sp, r7
 80170fa:	b006      	add	sp, #24
 80170fc:	bd80      	pop	{r7, pc}
 80170fe:	46c0      	nop			@ (mov r8, r8)
 8017100:	fffffbff 	.word	0xfffffbff

08017104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b084      	sub	sp, #16
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
 801710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017114:	687a      	ldr	r2, [r7, #4]
 8017116:	2380      	movs	r3, #128	@ 0x80
 8017118:	05db      	lsls	r3, r3, #23
 801711a:	429a      	cmp	r2, r3
 801711c:	d00b      	beq.n	8017136 <TIM_Base_SetConfig+0x32>
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	4a23      	ldr	r2, [pc, #140]	@ (80171b0 <TIM_Base_SetConfig+0xac>)
 8017122:	4293      	cmp	r3, r2
 8017124:	d007      	beq.n	8017136 <TIM_Base_SetConfig+0x32>
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	4a22      	ldr	r2, [pc, #136]	@ (80171b4 <TIM_Base_SetConfig+0xb0>)
 801712a:	4293      	cmp	r3, r2
 801712c:	d003      	beq.n	8017136 <TIM_Base_SetConfig+0x32>
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	4a21      	ldr	r2, [pc, #132]	@ (80171b8 <TIM_Base_SetConfig+0xb4>)
 8017132:	4293      	cmp	r3, r2
 8017134:	d108      	bne.n	8017148 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	2270      	movs	r2, #112	@ 0x70
 801713a:	4393      	bics	r3, r2
 801713c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	685b      	ldr	r3, [r3, #4]
 8017142:	68fa      	ldr	r2, [r7, #12]
 8017144:	4313      	orrs	r3, r2
 8017146:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017148:	687a      	ldr	r2, [r7, #4]
 801714a:	2380      	movs	r3, #128	@ 0x80
 801714c:	05db      	lsls	r3, r3, #23
 801714e:	429a      	cmp	r2, r3
 8017150:	d00b      	beq.n	801716a <TIM_Base_SetConfig+0x66>
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	4a16      	ldr	r2, [pc, #88]	@ (80171b0 <TIM_Base_SetConfig+0xac>)
 8017156:	4293      	cmp	r3, r2
 8017158:	d007      	beq.n	801716a <TIM_Base_SetConfig+0x66>
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	4a15      	ldr	r2, [pc, #84]	@ (80171b4 <TIM_Base_SetConfig+0xb0>)
 801715e:	4293      	cmp	r3, r2
 8017160:	d003      	beq.n	801716a <TIM_Base_SetConfig+0x66>
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	4a14      	ldr	r2, [pc, #80]	@ (80171b8 <TIM_Base_SetConfig+0xb4>)
 8017166:	4293      	cmp	r3, r2
 8017168:	d108      	bne.n	801717c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	4a13      	ldr	r2, [pc, #76]	@ (80171bc <TIM_Base_SetConfig+0xb8>)
 801716e:	4013      	ands	r3, r2
 8017170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	68db      	ldr	r3, [r3, #12]
 8017176:	68fa      	ldr	r2, [r7, #12]
 8017178:	4313      	orrs	r3, r2
 801717a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	2280      	movs	r2, #128	@ 0x80
 8017180:	4393      	bics	r3, r2
 8017182:	001a      	movs	r2, r3
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	691b      	ldr	r3, [r3, #16]
 8017188:	4313      	orrs	r3, r2
 801718a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	68fa      	ldr	r2, [r7, #12]
 8017190:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	689a      	ldr	r2, [r3, #8]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	681a      	ldr	r2, [r3, #0]
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	2201      	movs	r2, #1
 80171a6:	615a      	str	r2, [r3, #20]
}
 80171a8:	46c0      	nop			@ (mov r8, r8)
 80171aa:	46bd      	mov	sp, r7
 80171ac:	b004      	add	sp, #16
 80171ae:	bd80      	pop	{r7, pc}
 80171b0:	40000400 	.word	0x40000400
 80171b4:	40010800 	.word	0x40010800
 80171b8:	40011400 	.word	0x40011400
 80171bc:	fffffcff 	.word	0xfffffcff

080171c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b086      	sub	sp, #24
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	6a1b      	ldr	r3, [r3, #32]
 80171ce:	2201      	movs	r2, #1
 80171d0:	4393      	bics	r3, r2
 80171d2:	001a      	movs	r2, r3
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	6a1b      	ldr	r3, [r3, #32]
 80171dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	685b      	ldr	r3, [r3, #4]
 80171e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	699b      	ldr	r3, [r3, #24]
 80171e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	2270      	movs	r2, #112	@ 0x70
 80171ee:	4393      	bics	r3, r2
 80171f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	2203      	movs	r2, #3
 80171f6:	4393      	bics	r3, r2
 80171f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	68fa      	ldr	r2, [r7, #12]
 8017200:	4313      	orrs	r3, r2
 8017202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8017204:	697b      	ldr	r3, [r7, #20]
 8017206:	2202      	movs	r2, #2
 8017208:	4393      	bics	r3, r2
 801720a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	689b      	ldr	r3, [r3, #8]
 8017210:	697a      	ldr	r2, [r7, #20]
 8017212:	4313      	orrs	r3, r2
 8017214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	693a      	ldr	r2, [r7, #16]
 801721a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	68fa      	ldr	r2, [r7, #12]
 8017220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	685a      	ldr	r2, [r3, #4]
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	697a      	ldr	r2, [r7, #20]
 801722e:	621a      	str	r2, [r3, #32]
}
 8017230:	46c0      	nop			@ (mov r8, r8)
 8017232:	46bd      	mov	sp, r7
 8017234:	b006      	add	sp, #24
 8017236:	bd80      	pop	{r7, pc}

08017238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b086      	sub	sp, #24
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
 8017240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	6a1b      	ldr	r3, [r3, #32]
 8017246:	2210      	movs	r2, #16
 8017248:	4393      	bics	r3, r2
 801724a:	001a      	movs	r2, r3
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	6a1b      	ldr	r3, [r3, #32]
 8017254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	685b      	ldr	r3, [r3, #4]
 801725a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	699b      	ldr	r3, [r3, #24]
 8017260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	4a13      	ldr	r2, [pc, #76]	@ (80172b4 <TIM_OC2_SetConfig+0x7c>)
 8017266:	4013      	ands	r3, r2
 8017268:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	4a12      	ldr	r2, [pc, #72]	@ (80172b8 <TIM_OC2_SetConfig+0x80>)
 801726e:	4013      	ands	r3, r2
 8017270:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	021b      	lsls	r3, r3, #8
 8017278:	68fa      	ldr	r2, [r7, #12]
 801727a:	4313      	orrs	r3, r2
 801727c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	2220      	movs	r2, #32
 8017282:	4393      	bics	r3, r2
 8017284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017286:	683b      	ldr	r3, [r7, #0]
 8017288:	689b      	ldr	r3, [r3, #8]
 801728a:	011b      	lsls	r3, r3, #4
 801728c:	697a      	ldr	r2, [r7, #20]
 801728e:	4313      	orrs	r3, r2
 8017290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	693a      	ldr	r2, [r7, #16]
 8017296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	68fa      	ldr	r2, [r7, #12]
 801729c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801729e:	683b      	ldr	r3, [r7, #0]
 80172a0:	685a      	ldr	r2, [r3, #4]
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	697a      	ldr	r2, [r7, #20]
 80172aa:	621a      	str	r2, [r3, #32]
}
 80172ac:	46c0      	nop			@ (mov r8, r8)
 80172ae:	46bd      	mov	sp, r7
 80172b0:	b006      	add	sp, #24
 80172b2:	bd80      	pop	{r7, pc}
 80172b4:	ffff8fff 	.word	0xffff8fff
 80172b8:	fffffcff 	.word	0xfffffcff

080172bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b086      	sub	sp, #24
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
 80172c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	6a1b      	ldr	r3, [r3, #32]
 80172ca:	4a1a      	ldr	r2, [pc, #104]	@ (8017334 <TIM_OC3_SetConfig+0x78>)
 80172cc:	401a      	ands	r2, r3
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	6a1b      	ldr	r3, [r3, #32]
 80172d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	685b      	ldr	r3, [r3, #4]
 80172dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	69db      	ldr	r3, [r3, #28]
 80172e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	2270      	movs	r2, #112	@ 0x70
 80172e8:	4393      	bics	r3, r2
 80172ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	2203      	movs	r2, #3
 80172f0:	4393      	bics	r3, r2
 80172f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80172f4:	683b      	ldr	r3, [r7, #0]
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	68fa      	ldr	r2, [r7, #12]
 80172fa:	4313      	orrs	r3, r2
 80172fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80172fe:	697b      	ldr	r3, [r7, #20]
 8017300:	4a0d      	ldr	r2, [pc, #52]	@ (8017338 <TIM_OC3_SetConfig+0x7c>)
 8017302:	4013      	ands	r3, r2
 8017304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017306:	683b      	ldr	r3, [r7, #0]
 8017308:	689b      	ldr	r3, [r3, #8]
 801730a:	021b      	lsls	r3, r3, #8
 801730c:	697a      	ldr	r2, [r7, #20]
 801730e:	4313      	orrs	r3, r2
 8017310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	693a      	ldr	r2, [r7, #16]
 8017316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	68fa      	ldr	r2, [r7, #12]
 801731c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	685a      	ldr	r2, [r3, #4]
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	697a      	ldr	r2, [r7, #20]
 801732a:	621a      	str	r2, [r3, #32]
}
 801732c:	46c0      	nop			@ (mov r8, r8)
 801732e:	46bd      	mov	sp, r7
 8017330:	b006      	add	sp, #24
 8017332:	bd80      	pop	{r7, pc}
 8017334:	fffffeff 	.word	0xfffffeff
 8017338:	fffffdff 	.word	0xfffffdff

0801733c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b086      	sub	sp, #24
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
 8017344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	6a1b      	ldr	r3, [r3, #32]
 801734a:	4a1b      	ldr	r2, [pc, #108]	@ (80173b8 <TIM_OC4_SetConfig+0x7c>)
 801734c:	401a      	ands	r2, r3
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	6a1b      	ldr	r3, [r3, #32]
 8017356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	685b      	ldr	r3, [r3, #4]
 801735c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	69db      	ldr	r3, [r3, #28]
 8017362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	4a15      	ldr	r2, [pc, #84]	@ (80173bc <TIM_OC4_SetConfig+0x80>)
 8017368:	4013      	ands	r3, r2
 801736a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	4a14      	ldr	r2, [pc, #80]	@ (80173c0 <TIM_OC4_SetConfig+0x84>)
 8017370:	4013      	ands	r3, r2
 8017372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017374:	683b      	ldr	r3, [r7, #0]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	021b      	lsls	r3, r3, #8
 801737a:	68fa      	ldr	r2, [r7, #12]
 801737c:	4313      	orrs	r3, r2
 801737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017380:	697b      	ldr	r3, [r7, #20]
 8017382:	4a10      	ldr	r2, [pc, #64]	@ (80173c4 <TIM_OC4_SetConfig+0x88>)
 8017384:	4013      	ands	r3, r2
 8017386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017388:	683b      	ldr	r3, [r7, #0]
 801738a:	689b      	ldr	r3, [r3, #8]
 801738c:	031b      	lsls	r3, r3, #12
 801738e:	697a      	ldr	r2, [r7, #20]
 8017390:	4313      	orrs	r3, r2
 8017392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	693a      	ldr	r2, [r7, #16]
 8017398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	68fa      	ldr	r2, [r7, #12]
 801739e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	685a      	ldr	r2, [r3, #4]
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	697a      	ldr	r2, [r7, #20]
 80173ac:	621a      	str	r2, [r3, #32]
}
 80173ae:	46c0      	nop			@ (mov r8, r8)
 80173b0:	46bd      	mov	sp, r7
 80173b2:	b006      	add	sp, #24
 80173b4:	bd80      	pop	{r7, pc}
 80173b6:	46c0      	nop			@ (mov r8, r8)
 80173b8:	ffffefff 	.word	0xffffefff
 80173bc:	ffff8fff 	.word	0xffff8fff
 80173c0:	fffffcff 	.word	0xfffffcff
 80173c4:	ffffdfff 	.word	0xffffdfff

080173c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b086      	sub	sp, #24
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	60f8      	str	r0, [r7, #12]
 80173d0:	60b9      	str	r1, [r7, #8]
 80173d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80173d4:	68bb      	ldr	r3, [r7, #8]
 80173d6:	221f      	movs	r2, #31
 80173d8:	4013      	ands	r3, r2
 80173da:	2201      	movs	r2, #1
 80173dc:	409a      	lsls	r2, r3
 80173de:	0013      	movs	r3, r2
 80173e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	6a1b      	ldr	r3, [r3, #32]
 80173e6:	697a      	ldr	r2, [r7, #20]
 80173e8:	43d2      	mvns	r2, r2
 80173ea:	401a      	ands	r2, r3
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	6a1a      	ldr	r2, [r3, #32]
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	211f      	movs	r1, #31
 80173f8:	400b      	ands	r3, r1
 80173fa:	6879      	ldr	r1, [r7, #4]
 80173fc:	4099      	lsls	r1, r3
 80173fe:	000b      	movs	r3, r1
 8017400:	431a      	orrs	r2, r3
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	621a      	str	r2, [r3, #32]
}
 8017406:	46c0      	nop			@ (mov r8, r8)
 8017408:	46bd      	mov	sp, r7
 801740a:	b006      	add	sp, #24
 801740c:	bd80      	pop	{r7, pc}
	...

08017410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b084      	sub	sp, #16
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
 8017418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	2238      	movs	r2, #56	@ 0x38
 801741e:	5c9b      	ldrb	r3, [r3, r2]
 8017420:	2b01      	cmp	r3, #1
 8017422:	d101      	bne.n	8017428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017424:	2302      	movs	r3, #2
 8017426:	e047      	b.n	80174b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2238      	movs	r2, #56	@ 0x38
 801742c:	2101      	movs	r1, #1
 801742e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2239      	movs	r2, #57	@ 0x39
 8017434:	2102      	movs	r1, #2
 8017436:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	685b      	ldr	r3, [r3, #4]
 801743e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	689b      	ldr	r3, [r3, #8]
 8017446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	2270      	movs	r2, #112	@ 0x70
 801744c:	4393      	bics	r3, r2
 801744e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	68fa      	ldr	r2, [r7, #12]
 8017456:	4313      	orrs	r3, r2
 8017458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	68fa      	ldr	r2, [r7, #12]
 8017460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	681a      	ldr	r2, [r3, #0]
 8017466:	2380      	movs	r3, #128	@ 0x80
 8017468:	05db      	lsls	r3, r3, #23
 801746a:	429a      	cmp	r2, r3
 801746c:	d00e      	beq.n	801748c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	4a13      	ldr	r2, [pc, #76]	@ (80174c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8017474:	4293      	cmp	r3, r2
 8017476:	d009      	beq.n	801748c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	4a11      	ldr	r2, [pc, #68]	@ (80174c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801747e:	4293      	cmp	r3, r2
 8017480:	d004      	beq.n	801748c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	4a10      	ldr	r2, [pc, #64]	@ (80174c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8017488:	4293      	cmp	r3, r2
 801748a:	d10c      	bne.n	80174a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	2280      	movs	r2, #128	@ 0x80
 8017490:	4393      	bics	r3, r2
 8017492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	68ba      	ldr	r2, [r7, #8]
 801749a:	4313      	orrs	r3, r2
 801749c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	68ba      	ldr	r2, [r7, #8]
 80174a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2239      	movs	r2, #57	@ 0x39
 80174aa:	2101      	movs	r1, #1
 80174ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	2238      	movs	r2, #56	@ 0x38
 80174b2:	2100      	movs	r1, #0
 80174b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80174b6:	2300      	movs	r3, #0
}
 80174b8:	0018      	movs	r0, r3
 80174ba:	46bd      	mov	sp, r7
 80174bc:	b004      	add	sp, #16
 80174be:	bd80      	pop	{r7, pc}
 80174c0:	40000400 	.word	0x40000400
 80174c4:	40010800 	.word	0x40010800
 80174c8:	40011400 	.word	0x40011400

080174cc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b082      	sub	sp, #8
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
 80174d4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2238      	movs	r2, #56	@ 0x38
 80174da:	5c9b      	ldrb	r3, [r3, r2]
 80174dc:	2b01      	cmp	r3, #1
 80174de:	d101      	bne.n	80174e4 <HAL_TIMEx_RemapConfig+0x18>
 80174e0:	2302      	movs	r3, #2
 80174e2:	e00c      	b.n	80174fe <HAL_TIMEx_RemapConfig+0x32>
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2238      	movs	r2, #56	@ 0x38
 80174e8:	2101      	movs	r1, #1
 80174ea:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	683a      	ldr	r2, [r7, #0]
 80174f2:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	2238      	movs	r2, #56	@ 0x38
 80174f8:	2100      	movs	r1, #0
 80174fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80174fc:	2300      	movs	r3, #0
}
 80174fe:	0018      	movs	r0, r3
 8017500:	46bd      	mov	sp, r7
 8017502:	b002      	add	sp, #8
 8017504:	bd80      	pop	{r7, pc}
	...

08017508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b082      	sub	sp, #8
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d101      	bne.n	801751a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017516:	2301      	movs	r3, #1
 8017518:	e053      	b.n	80175c2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801751e:	2b00      	cmp	r3, #0
 8017520:	d116      	bne.n	8017550 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	2278      	movs	r2, #120	@ 0x78
 8017526:	2100      	movs	r1, #0
 8017528:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	0018      	movs	r0, r3
 801752e:	f000 fd65 	bl	8017ffc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	22b0      	movs	r2, #176	@ 0xb0
 8017536:	589b      	ldr	r3, [r3, r2]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d103      	bne.n	8017544 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	21b0      	movs	r1, #176	@ 0xb0
 8017540:	4a22      	ldr	r2, [pc, #136]	@ (80175cc <HAL_UART_Init+0xc4>)
 8017542:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	22b0      	movs	r2, #176	@ 0xb0
 8017548:	589b      	ldr	r3, [r3, r2]
 801754a:	687a      	ldr	r2, [r7, #4]
 801754c:	0010      	movs	r0, r2
 801754e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	2224      	movs	r2, #36	@ 0x24
 8017554:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	681a      	ldr	r2, [r3, #0]
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	2101      	movs	r1, #1
 8017562:	438a      	bics	r2, r1
 8017564:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	0018      	movs	r0, r3
 801756a:	f000 fd8b 	bl	8018084 <UART_SetConfig>
 801756e:	0003      	movs	r3, r0
 8017570:	2b01      	cmp	r3, #1
 8017572:	d101      	bne.n	8017578 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8017574:	2301      	movs	r3, #1
 8017576:	e024      	b.n	80175c2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801757c:	2b00      	cmp	r3, #0
 801757e:	d003      	beq.n	8017588 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	0018      	movs	r0, r3
 8017584:	f001 f81c 	bl	80185c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	685a      	ldr	r2, [r3, #4]
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	490f      	ldr	r1, [pc, #60]	@ (80175d0 <HAL_UART_Init+0xc8>)
 8017594:	400a      	ands	r2, r1
 8017596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	689a      	ldr	r2, [r3, #8]
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	212a      	movs	r1, #42	@ 0x2a
 80175a4:	438a      	bics	r2, r1
 80175a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	2101      	movs	r1, #1
 80175b4:	430a      	orrs	r2, r1
 80175b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	0018      	movs	r0, r3
 80175bc:	f001 f8b4 	bl	8018728 <UART_CheckIdleState>
 80175c0:	0003      	movs	r3, r0
}
 80175c2:	0018      	movs	r0, r3
 80175c4:	46bd      	mov	sp, r7
 80175c6:	b002      	add	sp, #8
 80175c8:	bd80      	pop	{r7, pc}
 80175ca:	46c0      	nop			@ (mov r8, r8)
 80175cc:	0800e5d9 	.word	0x0800e5d9
 80175d0:	ffffb7ff 	.word	0xffffb7ff

080175d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b08a      	sub	sp, #40	@ 0x28
 80175d8:	af02      	add	r7, sp, #8
 80175da:	60f8      	str	r0, [r7, #12]
 80175dc:	60b9      	str	r1, [r7, #8]
 80175de:	603b      	str	r3, [r7, #0]
 80175e0:	1dbb      	adds	r3, r7, #6
 80175e2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80175e8:	2b20      	cmp	r3, #32
 80175ea:	d000      	beq.n	80175ee <HAL_UART_Transmit+0x1a>
 80175ec:	e08c      	b.n	8017708 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80175ee:	68bb      	ldr	r3, [r7, #8]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d003      	beq.n	80175fc <HAL_UART_Transmit+0x28>
 80175f4:	1dbb      	adds	r3, r7, #6
 80175f6:	881b      	ldrh	r3, [r3, #0]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d101      	bne.n	8017600 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80175fc:	2301      	movs	r3, #1
 80175fe:	e084      	b.n	801770a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	689a      	ldr	r2, [r3, #8]
 8017604:	2380      	movs	r3, #128	@ 0x80
 8017606:	015b      	lsls	r3, r3, #5
 8017608:	429a      	cmp	r2, r3
 801760a:	d109      	bne.n	8017620 <HAL_UART_Transmit+0x4c>
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	691b      	ldr	r3, [r3, #16]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d105      	bne.n	8017620 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017614:	68bb      	ldr	r3, [r7, #8]
 8017616:	2201      	movs	r2, #1
 8017618:	4013      	ands	r3, r2
 801761a:	d001      	beq.n	8017620 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801761c:	2301      	movs	r3, #1
 801761e:	e074      	b.n	801770a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	2284      	movs	r2, #132	@ 0x84
 8017624:	2100      	movs	r1, #0
 8017626:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	2221      	movs	r2, #33	@ 0x21
 801762c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801762e:	f7f7 fda5 	bl	800f17c <HAL_GetTick>
 8017632:	0003      	movs	r3, r0
 8017634:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	1dba      	adds	r2, r7, #6
 801763a:	2150      	movs	r1, #80	@ 0x50
 801763c:	8812      	ldrh	r2, [r2, #0]
 801763e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	1dba      	adds	r2, r7, #6
 8017644:	2152      	movs	r1, #82	@ 0x52
 8017646:	8812      	ldrh	r2, [r2, #0]
 8017648:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	689a      	ldr	r2, [r3, #8]
 801764e:	2380      	movs	r3, #128	@ 0x80
 8017650:	015b      	lsls	r3, r3, #5
 8017652:	429a      	cmp	r2, r3
 8017654:	d108      	bne.n	8017668 <HAL_UART_Transmit+0x94>
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	691b      	ldr	r3, [r3, #16]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d104      	bne.n	8017668 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801765e:	2300      	movs	r3, #0
 8017660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8017662:	68bb      	ldr	r3, [r7, #8]
 8017664:	61bb      	str	r3, [r7, #24]
 8017666:	e003      	b.n	8017670 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8017668:	68bb      	ldr	r3, [r7, #8]
 801766a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801766c:	2300      	movs	r3, #0
 801766e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017670:	e02f      	b.n	80176d2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017672:	697a      	ldr	r2, [r7, #20]
 8017674:	68f8      	ldr	r0, [r7, #12]
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	9300      	str	r3, [sp, #0]
 801767a:	0013      	movs	r3, r2
 801767c:	2200      	movs	r2, #0
 801767e:	2180      	movs	r1, #128	@ 0x80
 8017680:	f001 f8fa 	bl	8018878 <UART_WaitOnFlagUntilTimeout>
 8017684:	1e03      	subs	r3, r0, #0
 8017686:	d004      	beq.n	8017692 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2220      	movs	r2, #32
 801768c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801768e:	2303      	movs	r3, #3
 8017690:	e03b      	b.n	801770a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8017692:	69fb      	ldr	r3, [r7, #28]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d10b      	bne.n	80176b0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8017698:	69bb      	ldr	r3, [r7, #24]
 801769a:	881b      	ldrh	r3, [r3, #0]
 801769c:	001a      	movs	r2, r3
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	05d2      	lsls	r2, r2, #23
 80176a4:	0dd2      	lsrs	r2, r2, #23
 80176a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80176a8:	69bb      	ldr	r3, [r7, #24]
 80176aa:	3302      	adds	r3, #2
 80176ac:	61bb      	str	r3, [r7, #24]
 80176ae:	e007      	b.n	80176c0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80176b0:	69fb      	ldr	r3, [r7, #28]
 80176b2:	781a      	ldrb	r2, [r3, #0]
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80176ba:	69fb      	ldr	r3, [r7, #28]
 80176bc:	3301      	adds	r3, #1
 80176be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	2252      	movs	r2, #82	@ 0x52
 80176c4:	5a9b      	ldrh	r3, [r3, r2]
 80176c6:	b29b      	uxth	r3, r3
 80176c8:	3b01      	subs	r3, #1
 80176ca:	b299      	uxth	r1, r3
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	2252      	movs	r2, #82	@ 0x52
 80176d0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	2252      	movs	r2, #82	@ 0x52
 80176d6:	5a9b      	ldrh	r3, [r3, r2]
 80176d8:	b29b      	uxth	r3, r3
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d1c9      	bne.n	8017672 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80176de:	697a      	ldr	r2, [r7, #20]
 80176e0:	68f8      	ldr	r0, [r7, #12]
 80176e2:	683b      	ldr	r3, [r7, #0]
 80176e4:	9300      	str	r3, [sp, #0]
 80176e6:	0013      	movs	r3, r2
 80176e8:	2200      	movs	r2, #0
 80176ea:	2140      	movs	r1, #64	@ 0x40
 80176ec:	f001 f8c4 	bl	8018878 <UART_WaitOnFlagUntilTimeout>
 80176f0:	1e03      	subs	r3, r0, #0
 80176f2:	d004      	beq.n	80176fe <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	2220      	movs	r2, #32
 80176f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80176fa:	2303      	movs	r3, #3
 80176fc:	e005      	b.n	801770a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	2220      	movs	r2, #32
 8017702:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8017704:	2300      	movs	r3, #0
 8017706:	e000      	b.n	801770a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8017708:	2302      	movs	r3, #2
  }
}
 801770a:	0018      	movs	r0, r3
 801770c:	46bd      	mov	sp, r7
 801770e:	b008      	add	sp, #32
 8017710:	bd80      	pop	{r7, pc}
	...

08017714 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b088      	sub	sp, #32
 8017718:	af00      	add	r7, sp, #0
 801771a:	60f8      	str	r0, [r7, #12]
 801771c:	60b9      	str	r1, [r7, #8]
 801771e:	1dbb      	adds	r3, r7, #6
 8017720:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	2280      	movs	r2, #128	@ 0x80
 8017726:	589b      	ldr	r3, [r3, r2]
 8017728:	2b20      	cmp	r3, #32
 801772a:	d14a      	bne.n	80177c2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d003      	beq.n	801773a <HAL_UART_Receive_IT+0x26>
 8017732:	1dbb      	adds	r3, r7, #6
 8017734:	881b      	ldrh	r3, [r3, #0]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d101      	bne.n	801773e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801773a:	2301      	movs	r3, #1
 801773c:	e042      	b.n	80177c4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	689a      	ldr	r2, [r3, #8]
 8017742:	2380      	movs	r3, #128	@ 0x80
 8017744:	015b      	lsls	r3, r3, #5
 8017746:	429a      	cmp	r2, r3
 8017748:	d109      	bne.n	801775e <HAL_UART_Receive_IT+0x4a>
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	691b      	ldr	r3, [r3, #16]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d105      	bne.n	801775e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017752:	68bb      	ldr	r3, [r7, #8]
 8017754:	2201      	movs	r2, #1
 8017756:	4013      	ands	r3, r2
 8017758:	d001      	beq.n	801775e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801775a:	2301      	movs	r3, #1
 801775c:	e032      	b.n	80177c4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	2200      	movs	r2, #0
 8017762:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	4a18      	ldr	r2, [pc, #96]	@ (80177cc <HAL_UART_Receive_IT+0xb8>)
 801776a:	4293      	cmp	r3, r2
 801776c:	d020      	beq.n	80177b0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	685a      	ldr	r2, [r3, #4]
 8017774:	2380      	movs	r3, #128	@ 0x80
 8017776:	041b      	lsls	r3, r3, #16
 8017778:	4013      	ands	r3, r2
 801777a:	d019      	beq.n	80177b0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801777c:	f3ef 8310 	mrs	r3, PRIMASK
 8017780:	613b      	str	r3, [r7, #16]
  return(result);
 8017782:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017784:	61fb      	str	r3, [r7, #28]
 8017786:	2301      	movs	r3, #1
 8017788:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801778a:	697b      	ldr	r3, [r7, #20]
 801778c:	f383 8810 	msr	PRIMASK, r3
}
 8017790:	46c0      	nop			@ (mov r8, r8)
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	681a      	ldr	r2, [r3, #0]
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	681b      	ldr	r3, [r3, #0]
 801779c:	2180      	movs	r1, #128	@ 0x80
 801779e:	04c9      	lsls	r1, r1, #19
 80177a0:	430a      	orrs	r2, r1
 80177a2:	601a      	str	r2, [r3, #0]
 80177a4:	69fb      	ldr	r3, [r7, #28]
 80177a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177a8:	69bb      	ldr	r3, [r7, #24]
 80177aa:	f383 8810 	msr	PRIMASK, r3
}
 80177ae:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80177b0:	1dbb      	adds	r3, r7, #6
 80177b2:	881a      	ldrh	r2, [r3, #0]
 80177b4:	68b9      	ldr	r1, [r7, #8]
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	0018      	movs	r0, r3
 80177ba:	f001 f8c7 	bl	801894c <UART_Start_Receive_IT>
 80177be:	0003      	movs	r3, r0
 80177c0:	e000      	b.n	80177c4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80177c2:	2302      	movs	r3, #2
  }
}
 80177c4:	0018      	movs	r0, r3
 80177c6:	46bd      	mov	sp, r7
 80177c8:	b008      	add	sp, #32
 80177ca:	bd80      	pop	{r7, pc}
 80177cc:	40004800 	.word	0x40004800

080177d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b088      	sub	sp, #32
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	60f8      	str	r0, [r7, #12]
 80177d8:	60b9      	str	r1, [r7, #8]
 80177da:	1dbb      	adds	r3, r7, #6
 80177dc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80177e2:	2b20      	cmp	r3, #32
 80177e4:	d000      	beq.n	80177e8 <HAL_UART_Transmit_DMA+0x18>
 80177e6:	e077      	b.n	80178d8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80177e8:	68bb      	ldr	r3, [r7, #8]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d003      	beq.n	80177f6 <HAL_UART_Transmit_DMA+0x26>
 80177ee:	1dbb      	adds	r3, r7, #6
 80177f0:	881b      	ldrh	r3, [r3, #0]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d101      	bne.n	80177fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80177f6:	2301      	movs	r3, #1
 80177f8:	e06f      	b.n	80178da <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	689a      	ldr	r2, [r3, #8]
 80177fe:	2380      	movs	r3, #128	@ 0x80
 8017800:	015b      	lsls	r3, r3, #5
 8017802:	429a      	cmp	r2, r3
 8017804:	d109      	bne.n	801781a <HAL_UART_Transmit_DMA+0x4a>
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	691b      	ldr	r3, [r3, #16]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d105      	bne.n	801781a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801780e:	68bb      	ldr	r3, [r7, #8]
 8017810:	2201      	movs	r2, #1
 8017812:	4013      	ands	r3, r2
 8017814:	d001      	beq.n	801781a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8017816:	2301      	movs	r3, #1
 8017818:	e05f      	b.n	80178da <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	68ba      	ldr	r2, [r7, #8]
 801781e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	1dba      	adds	r2, r7, #6
 8017824:	2150      	movs	r1, #80	@ 0x50
 8017826:	8812      	ldrh	r2, [r2, #0]
 8017828:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	1dba      	adds	r2, r7, #6
 801782e:	2152      	movs	r1, #82	@ 0x52
 8017830:	8812      	ldrh	r2, [r2, #0]
 8017832:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	2284      	movs	r2, #132	@ 0x84
 8017838:	2100      	movs	r1, #0
 801783a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801783c:	68fb      	ldr	r3, [r7, #12]
 801783e:	2221      	movs	r2, #33	@ 0x21
 8017840:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017846:	2b00      	cmp	r3, #0
 8017848:	d027      	beq.n	801789a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801784e:	4a25      	ldr	r2, [pc, #148]	@ (80178e4 <HAL_UART_Transmit_DMA+0x114>)
 8017850:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017856:	4a24      	ldr	r2, [pc, #144]	@ (80178e8 <HAL_UART_Transmit_DMA+0x118>)
 8017858:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801785e:	4a23      	ldr	r2, [pc, #140]	@ (80178ec <HAL_UART_Transmit_DMA+0x11c>)
 8017860:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017866:	2200      	movs	r2, #0
 8017868:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017872:	0019      	movs	r1, r3
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	3328      	adds	r3, #40	@ 0x28
 801787a:	001a      	movs	r2, r3
 801787c:	1dbb      	adds	r3, r7, #6
 801787e:	881b      	ldrh	r3, [r3, #0]
 8017880:	f7f8 f9ce 	bl	800fc20 <HAL_DMA_Start_IT>
 8017884:	1e03      	subs	r3, r0, #0
 8017886:	d008      	beq.n	801789a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	2284      	movs	r2, #132	@ 0x84
 801788c:	2110      	movs	r1, #16
 801788e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	2220      	movs	r2, #32
 8017894:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8017896:	2301      	movs	r3, #1
 8017898:	e01f      	b.n	80178da <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	2240      	movs	r2, #64	@ 0x40
 80178a0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178a2:	f3ef 8310 	mrs	r3, PRIMASK
 80178a6:	613b      	str	r3, [r7, #16]
  return(result);
 80178a8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80178aa:	61fb      	str	r3, [r7, #28]
 80178ac:	2301      	movs	r3, #1
 80178ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178b0:	697b      	ldr	r3, [r7, #20]
 80178b2:	f383 8810 	msr	PRIMASK, r3
}
 80178b6:	46c0      	nop			@ (mov r8, r8)
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	689a      	ldr	r2, [r3, #8]
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	2180      	movs	r1, #128	@ 0x80
 80178c4:	430a      	orrs	r2, r1
 80178c6:	609a      	str	r2, [r3, #8]
 80178c8:	69fb      	ldr	r3, [r7, #28]
 80178ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178cc:	69bb      	ldr	r3, [r7, #24]
 80178ce:	f383 8810 	msr	PRIMASK, r3
}
 80178d2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80178d4:	2300      	movs	r3, #0
 80178d6:	e000      	b.n	80178da <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80178d8:	2302      	movs	r3, #2
  }
}
 80178da:	0018      	movs	r0, r3
 80178dc:	46bd      	mov	sp, r7
 80178de:	b008      	add	sp, #32
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	46c0      	nop			@ (mov r8, r8)
 80178e4:	08018d31 	.word	0x08018d31
 80178e8:	08018dcd 	.word	0x08018dcd
 80178ec:	08018f6d 	.word	0x08018f6d

080178f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b088      	sub	sp, #32
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	60f8      	str	r0, [r7, #12]
 80178f8:	60b9      	str	r1, [r7, #8]
 80178fa:	1dbb      	adds	r3, r7, #6
 80178fc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	2280      	movs	r2, #128	@ 0x80
 8017902:	589b      	ldr	r3, [r3, r2]
 8017904:	2b20      	cmp	r3, #32
 8017906:	d14a      	bne.n	801799e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017908:	68bb      	ldr	r3, [r7, #8]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d003      	beq.n	8017916 <HAL_UART_Receive_DMA+0x26>
 801790e:	1dbb      	adds	r3, r7, #6
 8017910:	881b      	ldrh	r3, [r3, #0]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d101      	bne.n	801791a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8017916:	2301      	movs	r3, #1
 8017918:	e042      	b.n	80179a0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	689a      	ldr	r2, [r3, #8]
 801791e:	2380      	movs	r3, #128	@ 0x80
 8017920:	015b      	lsls	r3, r3, #5
 8017922:	429a      	cmp	r2, r3
 8017924:	d109      	bne.n	801793a <HAL_UART_Receive_DMA+0x4a>
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	691b      	ldr	r3, [r3, #16]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d105      	bne.n	801793a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801792e:	68bb      	ldr	r3, [r7, #8]
 8017930:	2201      	movs	r2, #1
 8017932:	4013      	ands	r3, r2
 8017934:	d001      	beq.n	801793a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8017936:	2301      	movs	r3, #1
 8017938:	e032      	b.n	80179a0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	2200      	movs	r2, #0
 801793e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	4a18      	ldr	r2, [pc, #96]	@ (80179a8 <HAL_UART_Receive_DMA+0xb8>)
 8017946:	4293      	cmp	r3, r2
 8017948:	d020      	beq.n	801798c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801794a:	68fb      	ldr	r3, [r7, #12]
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	685a      	ldr	r2, [r3, #4]
 8017950:	2380      	movs	r3, #128	@ 0x80
 8017952:	041b      	lsls	r3, r3, #16
 8017954:	4013      	ands	r3, r2
 8017956:	d019      	beq.n	801798c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017958:	f3ef 8310 	mrs	r3, PRIMASK
 801795c:	613b      	str	r3, [r7, #16]
  return(result);
 801795e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017960:	61fb      	str	r3, [r7, #28]
 8017962:	2301      	movs	r3, #1
 8017964:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	f383 8810 	msr	PRIMASK, r3
}
 801796c:	46c0      	nop			@ (mov r8, r8)
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	681a      	ldr	r2, [r3, #0]
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	2180      	movs	r1, #128	@ 0x80
 801797a:	04c9      	lsls	r1, r1, #19
 801797c:	430a      	orrs	r2, r1
 801797e:	601a      	str	r2, [r3, #0]
 8017980:	69fb      	ldr	r3, [r7, #28]
 8017982:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017984:	69bb      	ldr	r3, [r7, #24]
 8017986:	f383 8810 	msr	PRIMASK, r3
}
 801798a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801798c:	1dbb      	adds	r3, r7, #6
 801798e:	881a      	ldrh	r2, [r3, #0]
 8017990:	68b9      	ldr	r1, [r7, #8]
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	0018      	movs	r0, r3
 8017996:	f001 f8a3 	bl	8018ae0 <UART_Start_Receive_DMA>
 801799a:	0003      	movs	r3, r0
 801799c:	e000      	b.n	80179a0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801799e:	2302      	movs	r3, #2
  }
}
 80179a0:	0018      	movs	r0, r3
 80179a2:	46bd      	mov	sp, r7
 80179a4:	b008      	add	sp, #32
 80179a6:	bd80      	pop	{r7, pc}
 80179a8:	40004800 	.word	0x40004800

080179ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80179ac:	b590      	push	{r4, r7, lr}
 80179ae:	b0ab      	sub	sp, #172	@ 0xac
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	69db      	ldr	r3, [r3, #28]
 80179ba:	22a4      	movs	r2, #164	@ 0xa4
 80179bc:	18b9      	adds	r1, r7, r2
 80179be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	20a0      	movs	r0, #160	@ 0xa0
 80179c8:	1839      	adds	r1, r7, r0
 80179ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	689b      	ldr	r3, [r3, #8]
 80179d2:	219c      	movs	r1, #156	@ 0x9c
 80179d4:	1879      	adds	r1, r7, r1
 80179d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80179d8:	0011      	movs	r1, r2
 80179da:	18bb      	adds	r3, r7, r2
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	4a9c      	ldr	r2, [pc, #624]	@ (8017c50 <HAL_UART_IRQHandler+0x2a4>)
 80179e0:	4013      	ands	r3, r2
 80179e2:	2298      	movs	r2, #152	@ 0x98
 80179e4:	18bc      	adds	r4, r7, r2
 80179e6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80179e8:	18bb      	adds	r3, r7, r2
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d114      	bne.n	8017a1a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80179f0:	187b      	adds	r3, r7, r1
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	2220      	movs	r2, #32
 80179f6:	4013      	ands	r3, r2
 80179f8:	d00f      	beq.n	8017a1a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80179fa:	183b      	adds	r3, r7, r0
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	2220      	movs	r2, #32
 8017a00:	4013      	ands	r3, r2
 8017a02:	d00a      	beq.n	8017a1a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d100      	bne.n	8017a0e <HAL_UART_IRQHandler+0x62>
 8017a0c:	e2aa      	b.n	8017f64 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017a12:	687a      	ldr	r2, [r7, #4]
 8017a14:	0010      	movs	r0, r2
 8017a16:	4798      	blx	r3
      }
      return;
 8017a18:	e2a4      	b.n	8017f64 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017a1a:	2398      	movs	r3, #152	@ 0x98
 8017a1c:	18fb      	adds	r3, r7, r3
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d100      	bne.n	8017a26 <HAL_UART_IRQHandler+0x7a>
 8017a24:	e11a      	b.n	8017c5c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8017a26:	239c      	movs	r3, #156	@ 0x9c
 8017a28:	18fb      	adds	r3, r7, r3
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	2201      	movs	r2, #1
 8017a2e:	4013      	ands	r3, r2
 8017a30:	d106      	bne.n	8017a40 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8017a32:	23a0      	movs	r3, #160	@ 0xa0
 8017a34:	18fb      	adds	r3, r7, r3
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	4a86      	ldr	r2, [pc, #536]	@ (8017c54 <HAL_UART_IRQHandler+0x2a8>)
 8017a3a:	4013      	ands	r3, r2
 8017a3c:	d100      	bne.n	8017a40 <HAL_UART_IRQHandler+0x94>
 8017a3e:	e10d      	b.n	8017c5c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017a40:	23a4      	movs	r3, #164	@ 0xa4
 8017a42:	18fb      	adds	r3, r7, r3
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	2201      	movs	r2, #1
 8017a48:	4013      	ands	r3, r2
 8017a4a:	d012      	beq.n	8017a72 <HAL_UART_IRQHandler+0xc6>
 8017a4c:	23a0      	movs	r3, #160	@ 0xa0
 8017a4e:	18fb      	adds	r3, r7, r3
 8017a50:	681a      	ldr	r2, [r3, #0]
 8017a52:	2380      	movs	r3, #128	@ 0x80
 8017a54:	005b      	lsls	r3, r3, #1
 8017a56:	4013      	ands	r3, r2
 8017a58:	d00b      	beq.n	8017a72 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	2201      	movs	r2, #1
 8017a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	2284      	movs	r2, #132	@ 0x84
 8017a66:	589b      	ldr	r3, [r3, r2]
 8017a68:	2201      	movs	r2, #1
 8017a6a:	431a      	orrs	r2, r3
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	2184      	movs	r1, #132	@ 0x84
 8017a70:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017a72:	23a4      	movs	r3, #164	@ 0xa4
 8017a74:	18fb      	adds	r3, r7, r3
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	2202      	movs	r2, #2
 8017a7a:	4013      	ands	r3, r2
 8017a7c:	d011      	beq.n	8017aa2 <HAL_UART_IRQHandler+0xf6>
 8017a7e:	239c      	movs	r3, #156	@ 0x9c
 8017a80:	18fb      	adds	r3, r7, r3
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	2201      	movs	r2, #1
 8017a86:	4013      	ands	r3, r2
 8017a88:	d00b      	beq.n	8017aa2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	2202      	movs	r2, #2
 8017a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	2284      	movs	r2, #132	@ 0x84
 8017a96:	589b      	ldr	r3, [r3, r2]
 8017a98:	2204      	movs	r2, #4
 8017a9a:	431a      	orrs	r2, r3
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	2184      	movs	r1, #132	@ 0x84
 8017aa0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017aa2:	23a4      	movs	r3, #164	@ 0xa4
 8017aa4:	18fb      	adds	r3, r7, r3
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	2204      	movs	r2, #4
 8017aaa:	4013      	ands	r3, r2
 8017aac:	d011      	beq.n	8017ad2 <HAL_UART_IRQHandler+0x126>
 8017aae:	239c      	movs	r3, #156	@ 0x9c
 8017ab0:	18fb      	adds	r3, r7, r3
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	2201      	movs	r2, #1
 8017ab6:	4013      	ands	r3, r2
 8017ab8:	d00b      	beq.n	8017ad2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	2204      	movs	r2, #4
 8017ac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	2284      	movs	r2, #132	@ 0x84
 8017ac6:	589b      	ldr	r3, [r3, r2]
 8017ac8:	2202      	movs	r2, #2
 8017aca:	431a      	orrs	r2, r3
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	2184      	movs	r1, #132	@ 0x84
 8017ad0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017ad2:	23a4      	movs	r3, #164	@ 0xa4
 8017ad4:	18fb      	adds	r3, r7, r3
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	2208      	movs	r2, #8
 8017ada:	4013      	ands	r3, r2
 8017adc:	d017      	beq.n	8017b0e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017ade:	23a0      	movs	r3, #160	@ 0xa0
 8017ae0:	18fb      	adds	r3, r7, r3
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	2220      	movs	r2, #32
 8017ae6:	4013      	ands	r3, r2
 8017ae8:	d105      	bne.n	8017af6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8017aea:	239c      	movs	r3, #156	@ 0x9c
 8017aec:	18fb      	adds	r3, r7, r3
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	2201      	movs	r2, #1
 8017af2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017af4:	d00b      	beq.n	8017b0e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	2208      	movs	r2, #8
 8017afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	2284      	movs	r2, #132	@ 0x84
 8017b02:	589b      	ldr	r3, [r3, r2]
 8017b04:	2208      	movs	r2, #8
 8017b06:	431a      	orrs	r2, r3
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	2184      	movs	r1, #132	@ 0x84
 8017b0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017b0e:	23a4      	movs	r3, #164	@ 0xa4
 8017b10:	18fb      	adds	r3, r7, r3
 8017b12:	681a      	ldr	r2, [r3, #0]
 8017b14:	2380      	movs	r3, #128	@ 0x80
 8017b16:	011b      	lsls	r3, r3, #4
 8017b18:	4013      	ands	r3, r2
 8017b1a:	d013      	beq.n	8017b44 <HAL_UART_IRQHandler+0x198>
 8017b1c:	23a0      	movs	r3, #160	@ 0xa0
 8017b1e:	18fb      	adds	r3, r7, r3
 8017b20:	681a      	ldr	r2, [r3, #0]
 8017b22:	2380      	movs	r3, #128	@ 0x80
 8017b24:	04db      	lsls	r3, r3, #19
 8017b26:	4013      	ands	r3, r2
 8017b28:	d00c      	beq.n	8017b44 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	2280      	movs	r2, #128	@ 0x80
 8017b30:	0112      	lsls	r2, r2, #4
 8017b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	2284      	movs	r2, #132	@ 0x84
 8017b38:	589b      	ldr	r3, [r3, r2]
 8017b3a:	2220      	movs	r2, #32
 8017b3c:	431a      	orrs	r2, r3
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	2184      	movs	r1, #132	@ 0x84
 8017b42:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	2284      	movs	r2, #132	@ 0x84
 8017b48:	589b      	ldr	r3, [r3, r2]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d100      	bne.n	8017b50 <HAL_UART_IRQHandler+0x1a4>
 8017b4e:	e20b      	b.n	8017f68 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017b50:	23a4      	movs	r3, #164	@ 0xa4
 8017b52:	18fb      	adds	r3, r7, r3
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	2220      	movs	r2, #32
 8017b58:	4013      	ands	r3, r2
 8017b5a:	d00e      	beq.n	8017b7a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017b5c:	23a0      	movs	r3, #160	@ 0xa0
 8017b5e:	18fb      	adds	r3, r7, r3
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	2220      	movs	r2, #32
 8017b64:	4013      	ands	r3, r2
 8017b66:	d008      	beq.n	8017b7a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d004      	beq.n	8017b7a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017b74:	687a      	ldr	r2, [r7, #4]
 8017b76:	0010      	movs	r0, r2
 8017b78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	2284      	movs	r2, #132	@ 0x84
 8017b7e:	589b      	ldr	r3, [r3, r2]
 8017b80:	2194      	movs	r1, #148	@ 0x94
 8017b82:	187a      	adds	r2, r7, r1
 8017b84:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	689b      	ldr	r3, [r3, #8]
 8017b8c:	2240      	movs	r2, #64	@ 0x40
 8017b8e:	4013      	ands	r3, r2
 8017b90:	2b40      	cmp	r3, #64	@ 0x40
 8017b92:	d004      	beq.n	8017b9e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017b94:	187b      	adds	r3, r7, r1
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	2228      	movs	r2, #40	@ 0x28
 8017b9a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017b9c:	d04b      	beq.n	8017c36 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	0018      	movs	r0, r3
 8017ba2:	f001 f861 	bl	8018c68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	689b      	ldr	r3, [r3, #8]
 8017bac:	2240      	movs	r2, #64	@ 0x40
 8017bae:	4013      	ands	r3, r2
 8017bb0:	2b40      	cmp	r3, #64	@ 0x40
 8017bb2:	d139      	bne.n	8017c28 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8017bb8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8017bba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017bbc:	2090      	movs	r0, #144	@ 0x90
 8017bbe:	183a      	adds	r2, r7, r0
 8017bc0:	6013      	str	r3, [r2, #0]
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017bc8:	f383 8810 	msr	PRIMASK, r3
}
 8017bcc:	46c0      	nop			@ (mov r8, r8)
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	689a      	ldr	r2, [r3, #8]
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	2140      	movs	r1, #64	@ 0x40
 8017bda:	438a      	bics	r2, r1
 8017bdc:	609a      	str	r2, [r3, #8]
 8017bde:	183b      	adds	r3, r7, r0
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017be4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017be6:	f383 8810 	msr	PRIMASK, r3
}
 8017bea:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d012      	beq.n	8017c1a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017bf8:	4a17      	ldr	r2, [pc, #92]	@ (8017c58 <HAL_UART_IRQHandler+0x2ac>)
 8017bfa:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c00:	0018      	movs	r0, r3
 8017c02:	f7f8 f8b3 	bl	800fd6c <HAL_DMA_Abort_IT>
 8017c06:	1e03      	subs	r3, r0, #0
 8017c08:	d020      	beq.n	8017c4c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c14:	0018      	movs	r0, r3
 8017c16:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c18:	e018      	b.n	8017c4c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	2298      	movs	r2, #152	@ 0x98
 8017c1e:	589b      	ldr	r3, [r3, r2]
 8017c20:	687a      	ldr	r2, [r7, #4]
 8017c22:	0010      	movs	r0, r2
 8017c24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c26:	e011      	b.n	8017c4c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	2298      	movs	r2, #152	@ 0x98
 8017c2c:	589b      	ldr	r3, [r3, r2]
 8017c2e:	687a      	ldr	r2, [r7, #4]
 8017c30:	0010      	movs	r0, r2
 8017c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c34:	e00a      	b.n	8017c4c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	2298      	movs	r2, #152	@ 0x98
 8017c3a:	589b      	ldr	r3, [r3, r2]
 8017c3c:	687a      	ldr	r2, [r7, #4]
 8017c3e:	0010      	movs	r0, r2
 8017c40:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	2284      	movs	r2, #132	@ 0x84
 8017c46:	2100      	movs	r1, #0
 8017c48:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8017c4a:	e18d      	b.n	8017f68 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c4c:	46c0      	nop			@ (mov r8, r8)
    return;
 8017c4e:	e18b      	b.n	8017f68 <HAL_UART_IRQHandler+0x5bc>
 8017c50:	0000080f 	.word	0x0000080f
 8017c54:	04000120 	.word	0x04000120
 8017c58:	08018ff5 	.word	0x08018ff5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017c60:	2b01      	cmp	r3, #1
 8017c62:	d000      	beq.n	8017c66 <HAL_UART_IRQHandler+0x2ba>
 8017c64:	e13d      	b.n	8017ee2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8017c66:	23a4      	movs	r3, #164	@ 0xa4
 8017c68:	18fb      	adds	r3, r7, r3
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	2210      	movs	r2, #16
 8017c6e:	4013      	ands	r3, r2
 8017c70:	d100      	bne.n	8017c74 <HAL_UART_IRQHandler+0x2c8>
 8017c72:	e136      	b.n	8017ee2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8017c74:	23a0      	movs	r3, #160	@ 0xa0
 8017c76:	18fb      	adds	r3, r7, r3
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	2210      	movs	r2, #16
 8017c7c:	4013      	ands	r3, r2
 8017c7e:	d100      	bne.n	8017c82 <HAL_UART_IRQHandler+0x2d6>
 8017c80:	e12f      	b.n	8017ee2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	2210      	movs	r2, #16
 8017c88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	689b      	ldr	r3, [r3, #8]
 8017c90:	2240      	movs	r2, #64	@ 0x40
 8017c92:	4013      	ands	r3, r2
 8017c94:	2b40      	cmp	r3, #64	@ 0x40
 8017c96:	d000      	beq.n	8017c9a <HAL_UART_IRQHandler+0x2ee>
 8017c98:	e0a2      	b.n	8017de0 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	685a      	ldr	r2, [r3, #4]
 8017ca2:	217e      	movs	r1, #126	@ 0x7e
 8017ca4:	187b      	adds	r3, r7, r1
 8017ca6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8017ca8:	187b      	adds	r3, r7, r1
 8017caa:	881b      	ldrh	r3, [r3, #0]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d100      	bne.n	8017cb2 <HAL_UART_IRQHandler+0x306>
 8017cb0:	e15c      	b.n	8017f6c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	2258      	movs	r2, #88	@ 0x58
 8017cb6:	5a9b      	ldrh	r3, [r3, r2]
 8017cb8:	187a      	adds	r2, r7, r1
 8017cba:	8812      	ldrh	r2, [r2, #0]
 8017cbc:	429a      	cmp	r2, r3
 8017cbe:	d300      	bcc.n	8017cc2 <HAL_UART_IRQHandler+0x316>
 8017cc0:	e154      	b.n	8017f6c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	187a      	adds	r2, r7, r1
 8017cc6:	215a      	movs	r1, #90	@ 0x5a
 8017cc8:	8812      	ldrh	r2, [r2, #0]
 8017cca:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	2220      	movs	r2, #32
 8017cd6:	4013      	ands	r3, r2
 8017cd8:	d16f      	bne.n	8017dba <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017cda:	f3ef 8310 	mrs	r3, PRIMASK
 8017cde:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017ce2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cea:	f383 8810 	msr	PRIMASK, r3
}
 8017cee:	46c0      	nop			@ (mov r8, r8)
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	681a      	ldr	r2, [r3, #0]
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	49a0      	ldr	r1, [pc, #640]	@ (8017f7c <HAL_UART_IRQHandler+0x5d0>)
 8017cfc:	400a      	ands	r2, r1
 8017cfe:	601a      	str	r2, [r3, #0]
 8017d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d06:	f383 8810 	msr	PRIMASK, r3
}
 8017d0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8017d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8017d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d14:	677b      	str	r3, [r7, #116]	@ 0x74
 8017d16:	2301      	movs	r3, #1
 8017d18:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017d1c:	f383 8810 	msr	PRIMASK, r3
}
 8017d20:	46c0      	nop			@ (mov r8, r8)
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	689a      	ldr	r2, [r3, #8]
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	2101      	movs	r1, #1
 8017d2e:	438a      	bics	r2, r1
 8017d30:	609a      	str	r2, [r3, #8]
 8017d32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017d34:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d38:	f383 8810 	msr	PRIMASK, r3
}
 8017d3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8017d42:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8017d44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017d46:	673b      	str	r3, [r7, #112]	@ 0x70
 8017d48:	2301      	movs	r3, #1
 8017d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d4e:	f383 8810 	msr	PRIMASK, r3
}
 8017d52:	46c0      	nop			@ (mov r8, r8)
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	689a      	ldr	r2, [r3, #8]
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	2140      	movs	r1, #64	@ 0x40
 8017d60:	438a      	bics	r2, r1
 8017d62:	609a      	str	r2, [r3, #8]
 8017d64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017d66:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d6a:	f383 8810 	msr	PRIMASK, r3
}
 8017d6e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	2280      	movs	r2, #128	@ 0x80
 8017d74:	2120      	movs	r1, #32
 8017d76:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	2200      	movs	r2, #0
 8017d7c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8017d82:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8017d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017d86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8017d88:	2301      	movs	r3, #1
 8017d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017d8e:	f383 8810 	msr	PRIMASK, r3
}
 8017d92:	46c0      	nop			@ (mov r8, r8)
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	681a      	ldr	r2, [r3, #0]
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	2110      	movs	r1, #16
 8017da0:	438a      	bics	r2, r1
 8017da2:	601a      	str	r2, [r3, #0]
 8017da4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017da6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017da8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017daa:	f383 8810 	msr	PRIMASK, r3
}
 8017dae:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017db4:	0018      	movs	r0, r3
 8017db6:	f7f7 ff99 	bl	800fcec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	2202      	movs	r2, #2
 8017dbe:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	22ac      	movs	r2, #172	@ 0xac
 8017dc4:	589b      	ldr	r3, [r3, r2]
 8017dc6:	687a      	ldr	r2, [r7, #4]
 8017dc8:	2158      	movs	r1, #88	@ 0x58
 8017dca:	5a51      	ldrh	r1, [r2, r1]
 8017dcc:	687a      	ldr	r2, [r7, #4]
 8017dce:	205a      	movs	r0, #90	@ 0x5a
 8017dd0:	5a12      	ldrh	r2, [r2, r0]
 8017dd2:	b292      	uxth	r2, r2
 8017dd4:	1a8a      	subs	r2, r1, r2
 8017dd6:	b291      	uxth	r1, r2
 8017dd8:	687a      	ldr	r2, [r7, #4]
 8017dda:	0010      	movs	r0, r2
 8017ddc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017dde:	e0c5      	b.n	8017f6c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	2258      	movs	r2, #88	@ 0x58
 8017de4:	5a99      	ldrh	r1, [r3, r2]
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	225a      	movs	r2, #90	@ 0x5a
 8017dea:	5a9b      	ldrh	r3, [r3, r2]
 8017dec:	b29a      	uxth	r2, r3
 8017dee:	208e      	movs	r0, #142	@ 0x8e
 8017df0:	183b      	adds	r3, r7, r0
 8017df2:	1a8a      	subs	r2, r1, r2
 8017df4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	225a      	movs	r2, #90	@ 0x5a
 8017dfa:	5a9b      	ldrh	r3, [r3, r2]
 8017dfc:	b29b      	uxth	r3, r3
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d100      	bne.n	8017e04 <HAL_UART_IRQHandler+0x458>
 8017e02:	e0b5      	b.n	8017f70 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8017e04:	183b      	adds	r3, r7, r0
 8017e06:	881b      	ldrh	r3, [r3, #0]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d100      	bne.n	8017e0e <HAL_UART_IRQHandler+0x462>
 8017e0c:	e0b0      	b.n	8017f70 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8017e12:	60fb      	str	r3, [r7, #12]
  return(result);
 8017e14:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017e16:	2488      	movs	r4, #136	@ 0x88
 8017e18:	193a      	adds	r2, r7, r4
 8017e1a:	6013      	str	r3, [r2, #0]
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e20:	693b      	ldr	r3, [r7, #16]
 8017e22:	f383 8810 	msr	PRIMASK, r3
}
 8017e26:	46c0      	nop			@ (mov r8, r8)
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	681a      	ldr	r2, [r3, #0]
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	4953      	ldr	r1, [pc, #332]	@ (8017f80 <HAL_UART_IRQHandler+0x5d4>)
 8017e34:	400a      	ands	r2, r1
 8017e36:	601a      	str	r2, [r3, #0]
 8017e38:	193b      	adds	r3, r7, r4
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e3e:	697b      	ldr	r3, [r7, #20]
 8017e40:	f383 8810 	msr	PRIMASK, r3
}
 8017e44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e46:	f3ef 8310 	mrs	r3, PRIMASK
 8017e4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8017e4c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e4e:	2484      	movs	r4, #132	@ 0x84
 8017e50:	193a      	adds	r2, r7, r4
 8017e52:	6013      	str	r3, [r2, #0]
 8017e54:	2301      	movs	r3, #1
 8017e56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e58:	69fb      	ldr	r3, [r7, #28]
 8017e5a:	f383 8810 	msr	PRIMASK, r3
}
 8017e5e:	46c0      	nop			@ (mov r8, r8)
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	689a      	ldr	r2, [r3, #8]
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	2101      	movs	r1, #1
 8017e6c:	438a      	bics	r2, r1
 8017e6e:	609a      	str	r2, [r3, #8]
 8017e70:	193b      	adds	r3, r7, r4
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e76:	6a3b      	ldr	r3, [r7, #32]
 8017e78:	f383 8810 	msr	PRIMASK, r3
}
 8017e7c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2280      	movs	r2, #128	@ 0x80
 8017e82:	2120      	movs	r1, #32
 8017e84:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	2200      	movs	r2, #0
 8017e8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e92:	f3ef 8310 	mrs	r3, PRIMASK
 8017e96:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e9a:	2480      	movs	r4, #128	@ 0x80
 8017e9c:	193a      	adds	r2, r7, r4
 8017e9e:	6013      	str	r3, [r2, #0]
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ea6:	f383 8810 	msr	PRIMASK, r3
}
 8017eaa:	46c0      	nop			@ (mov r8, r8)
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	681a      	ldr	r2, [r3, #0]
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	2110      	movs	r1, #16
 8017eb8:	438a      	bics	r2, r1
 8017eba:	601a      	str	r2, [r3, #0]
 8017ebc:	193b      	adds	r3, r7, r4
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ec4:	f383 8810 	msr	PRIMASK, r3
}
 8017ec8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	2202      	movs	r2, #2
 8017ece:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	22ac      	movs	r2, #172	@ 0xac
 8017ed4:	589b      	ldr	r3, [r3, r2]
 8017ed6:	183a      	adds	r2, r7, r0
 8017ed8:	8811      	ldrh	r1, [r2, #0]
 8017eda:	687a      	ldr	r2, [r7, #4]
 8017edc:	0010      	movs	r0, r2
 8017ede:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017ee0:	e046      	b.n	8017f70 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017ee2:	23a4      	movs	r3, #164	@ 0xa4
 8017ee4:	18fb      	adds	r3, r7, r3
 8017ee6:	681a      	ldr	r2, [r3, #0]
 8017ee8:	2380      	movs	r3, #128	@ 0x80
 8017eea:	035b      	lsls	r3, r3, #13
 8017eec:	4013      	ands	r3, r2
 8017eee:	d012      	beq.n	8017f16 <HAL_UART_IRQHandler+0x56a>
 8017ef0:	239c      	movs	r3, #156	@ 0x9c
 8017ef2:	18fb      	adds	r3, r7, r3
 8017ef4:	681a      	ldr	r2, [r3, #0]
 8017ef6:	2380      	movs	r3, #128	@ 0x80
 8017ef8:	03db      	lsls	r3, r3, #15
 8017efa:	4013      	ands	r3, r2
 8017efc:	d00b      	beq.n	8017f16 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	2280      	movs	r2, #128	@ 0x80
 8017f04:	0352      	lsls	r2, r2, #13
 8017f06:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	22a8      	movs	r2, #168	@ 0xa8
 8017f0c:	589b      	ldr	r3, [r3, r2]
 8017f0e:	687a      	ldr	r2, [r7, #4]
 8017f10:	0010      	movs	r0, r2
 8017f12:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017f14:	e02f      	b.n	8017f76 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017f16:	23a4      	movs	r3, #164	@ 0xa4
 8017f18:	18fb      	adds	r3, r7, r3
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	2280      	movs	r2, #128	@ 0x80
 8017f1e:	4013      	ands	r3, r2
 8017f20:	d00f      	beq.n	8017f42 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017f22:	23a0      	movs	r3, #160	@ 0xa0
 8017f24:	18fb      	adds	r3, r7, r3
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	2280      	movs	r2, #128	@ 0x80
 8017f2a:	4013      	ands	r3, r2
 8017f2c:	d009      	beq.n	8017f42 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d01e      	beq.n	8017f74 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f3a:	687a      	ldr	r2, [r7, #4]
 8017f3c:	0010      	movs	r0, r2
 8017f3e:	4798      	blx	r3
    }
    return;
 8017f40:	e018      	b.n	8017f74 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017f42:	23a4      	movs	r3, #164	@ 0xa4
 8017f44:	18fb      	adds	r3, r7, r3
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	2240      	movs	r2, #64	@ 0x40
 8017f4a:	4013      	ands	r3, r2
 8017f4c:	d013      	beq.n	8017f76 <HAL_UART_IRQHandler+0x5ca>
 8017f4e:	23a0      	movs	r3, #160	@ 0xa0
 8017f50:	18fb      	adds	r3, r7, r3
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	2240      	movs	r2, #64	@ 0x40
 8017f56:	4013      	ands	r3, r2
 8017f58:	d00d      	beq.n	8017f76 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	0018      	movs	r0, r3
 8017f5e:	f001 f862 	bl	8019026 <UART_EndTransmit_IT>
    return;
 8017f62:	e008      	b.n	8017f76 <HAL_UART_IRQHandler+0x5ca>
      return;
 8017f64:	46c0      	nop			@ (mov r8, r8)
 8017f66:	e006      	b.n	8017f76 <HAL_UART_IRQHandler+0x5ca>
    return;
 8017f68:	46c0      	nop			@ (mov r8, r8)
 8017f6a:	e004      	b.n	8017f76 <HAL_UART_IRQHandler+0x5ca>
      return;
 8017f6c:	46c0      	nop			@ (mov r8, r8)
 8017f6e:	e002      	b.n	8017f76 <HAL_UART_IRQHandler+0x5ca>
      return;
 8017f70:	46c0      	nop			@ (mov r8, r8)
 8017f72:	e000      	b.n	8017f76 <HAL_UART_IRQHandler+0x5ca>
    return;
 8017f74:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017f76:	46bd      	mov	sp, r7
 8017f78:	b02b      	add	sp, #172	@ 0xac
 8017f7a:	bd90      	pop	{r4, r7, pc}
 8017f7c:	fffffeff 	.word	0xfffffeff
 8017f80:	fffffedf 	.word	0xfffffedf

08017f84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b082      	sub	sp, #8
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017f8c:	46c0      	nop			@ (mov r8, r8)
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	b002      	add	sp, #8
 8017f92:	bd80      	pop	{r7, pc}

08017f94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b082      	sub	sp, #8
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017f9c:	46c0      	nop			@ (mov r8, r8)
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	b002      	add	sp, #8
 8017fa2:	bd80      	pop	{r7, pc}

08017fa4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b082      	sub	sp, #8
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017fac:	46c0      	nop			@ (mov r8, r8)
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	b002      	add	sp, #8
 8017fb2:	bd80      	pop	{r7, pc}

08017fb4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b082      	sub	sp, #8
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017fbc:	46c0      	nop			@ (mov r8, r8)
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	b002      	add	sp, #8
 8017fc2:	bd80      	pop	{r7, pc}

08017fc4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b082      	sub	sp, #8
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017fcc:	46c0      	nop			@ (mov r8, r8)
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	b002      	add	sp, #8
 8017fd2:	bd80      	pop	{r7, pc}

08017fd4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b082      	sub	sp, #8
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017fdc:	46c0      	nop			@ (mov r8, r8)
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	b002      	add	sp, #8
 8017fe2:	bd80      	pop	{r7, pc}

08017fe4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b082      	sub	sp, #8
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
 8017fec:	000a      	movs	r2, r1
 8017fee:	1cbb      	adds	r3, r7, #2
 8017ff0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017ff2:	46c0      	nop			@ (mov r8, r8)
 8017ff4:	46bd      	mov	sp, r7
 8017ff6:	b002      	add	sp, #8
 8017ff8:	bd80      	pop	{r7, pc}
	...

08017ffc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b082      	sub	sp, #8
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2188      	movs	r1, #136	@ 0x88
 8018008:	4a14      	ldr	r2, [pc, #80]	@ (801805c <UART_InitCallbacksToDefault+0x60>)
 801800a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	218c      	movs	r1, #140	@ 0x8c
 8018010:	4a13      	ldr	r2, [pc, #76]	@ (8018060 <UART_InitCallbacksToDefault+0x64>)
 8018012:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	2190      	movs	r1, #144	@ 0x90
 8018018:	4a12      	ldr	r2, [pc, #72]	@ (8018064 <UART_InitCallbacksToDefault+0x68>)
 801801a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	2194      	movs	r1, #148	@ 0x94
 8018020:	4a11      	ldr	r2, [pc, #68]	@ (8018068 <UART_InitCallbacksToDefault+0x6c>)
 8018022:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	2198      	movs	r1, #152	@ 0x98
 8018028:	4a10      	ldr	r2, [pc, #64]	@ (801806c <UART_InitCallbacksToDefault+0x70>)
 801802a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	219c      	movs	r1, #156	@ 0x9c
 8018030:	4a0f      	ldr	r2, [pc, #60]	@ (8018070 <UART_InitCallbacksToDefault+0x74>)
 8018032:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	21a0      	movs	r1, #160	@ 0xa0
 8018038:	4a0e      	ldr	r2, [pc, #56]	@ (8018074 <UART_InitCallbacksToDefault+0x78>)
 801803a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	21a4      	movs	r1, #164	@ 0xa4
 8018040:	4a0d      	ldr	r2, [pc, #52]	@ (8018078 <UART_InitCallbacksToDefault+0x7c>)
 8018042:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	21a8      	movs	r1, #168	@ 0xa8
 8018048:	4a0c      	ldr	r2, [pc, #48]	@ (801807c <UART_InitCallbacksToDefault+0x80>)
 801804a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	21ac      	movs	r1, #172	@ 0xac
 8018050:	4a0b      	ldr	r2, [pc, #44]	@ (8018080 <UART_InitCallbacksToDefault+0x84>)
 8018052:	505a      	str	r2, [r3, r1]

}
 8018054:	46c0      	nop			@ (mov r8, r8)
 8018056:	46bd      	mov	sp, r7
 8018058:	b002      	add	sp, #8
 801805a:	bd80      	pop	{r7, pc}
 801805c:	08017f95 	.word	0x08017f95
 8018060:	08017f85 	.word	0x08017f85
 8018064:	08017fa5 	.word	0x08017fa5
 8018068:	080085e1 	.word	0x080085e1
 801806c:	08003bb1 	.word	0x08003bb1
 8018070:	08017fb5 	.word	0x08017fb5
 8018074:	08017fc5 	.word	0x08017fc5
 8018078:	08017fd5 	.word	0x08017fd5
 801807c:	08019419 	.word	0x08019419
 8018080:	08017fe5 	.word	0x08017fe5

08018084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018084:	b5b0      	push	{r4, r5, r7, lr}
 8018086:	b08e      	sub	sp, #56	@ 0x38
 8018088:	af00      	add	r7, sp, #0
 801808a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801808c:	231a      	movs	r3, #26
 801808e:	2218      	movs	r2, #24
 8018090:	189b      	adds	r3, r3, r2
 8018092:	19db      	adds	r3, r3, r7
 8018094:	2200      	movs	r2, #0
 8018096:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018098:	69fb      	ldr	r3, [r7, #28]
 801809a:	689a      	ldr	r2, [r3, #8]
 801809c:	69fb      	ldr	r3, [r7, #28]
 801809e:	691b      	ldr	r3, [r3, #16]
 80180a0:	431a      	orrs	r2, r3
 80180a2:	69fb      	ldr	r3, [r7, #28]
 80180a4:	695b      	ldr	r3, [r3, #20]
 80180a6:	431a      	orrs	r2, r3
 80180a8:	69fb      	ldr	r3, [r7, #28]
 80180aa:	69db      	ldr	r3, [r3, #28]
 80180ac:	4313      	orrs	r3, r2
 80180ae:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80180b0:	69fb      	ldr	r3, [r7, #28]
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	4ac3      	ldr	r2, [pc, #780]	@ (80183c4 <UART_SetConfig+0x340>)
 80180b8:	4013      	ands	r3, r2
 80180ba:	0019      	movs	r1, r3
 80180bc:	69fb      	ldr	r3, [r7, #28]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80180c2:	430a      	orrs	r2, r1
 80180c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80180c6:	69fb      	ldr	r3, [r7, #28]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	685b      	ldr	r3, [r3, #4]
 80180cc:	4abe      	ldr	r2, [pc, #760]	@ (80183c8 <UART_SetConfig+0x344>)
 80180ce:	4013      	ands	r3, r2
 80180d0:	0019      	movs	r1, r3
 80180d2:	69fb      	ldr	r3, [r7, #28]
 80180d4:	68da      	ldr	r2, [r3, #12]
 80180d6:	69fb      	ldr	r3, [r7, #28]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	430a      	orrs	r2, r1
 80180dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80180de:	69fb      	ldr	r3, [r7, #28]
 80180e0:	699b      	ldr	r3, [r3, #24]
 80180e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80180e4:	69fb      	ldr	r3, [r7, #28]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	4ab8      	ldr	r2, [pc, #736]	@ (80183cc <UART_SetConfig+0x348>)
 80180ea:	4293      	cmp	r3, r2
 80180ec:	d004      	beq.n	80180f8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80180ee:	69fb      	ldr	r3, [r7, #28]
 80180f0:	6a1b      	ldr	r3, [r3, #32]
 80180f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80180f4:	4313      	orrs	r3, r2
 80180f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80180f8:	69fb      	ldr	r3, [r7, #28]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	689b      	ldr	r3, [r3, #8]
 80180fe:	4ab4      	ldr	r2, [pc, #720]	@ (80183d0 <UART_SetConfig+0x34c>)
 8018100:	4013      	ands	r3, r2
 8018102:	0019      	movs	r1, r3
 8018104:	69fb      	ldr	r3, [r7, #28]
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801810a:	430a      	orrs	r2, r1
 801810c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801810e:	69fb      	ldr	r3, [r7, #28]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	4ab0      	ldr	r2, [pc, #704]	@ (80183d4 <UART_SetConfig+0x350>)
 8018114:	4293      	cmp	r3, r2
 8018116:	d131      	bne.n	801817c <UART_SetConfig+0xf8>
 8018118:	4baf      	ldr	r3, [pc, #700]	@ (80183d8 <UART_SetConfig+0x354>)
 801811a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801811c:	2203      	movs	r2, #3
 801811e:	4013      	ands	r3, r2
 8018120:	2b03      	cmp	r3, #3
 8018122:	d01d      	beq.n	8018160 <UART_SetConfig+0xdc>
 8018124:	d823      	bhi.n	801816e <UART_SetConfig+0xea>
 8018126:	2b02      	cmp	r3, #2
 8018128:	d00c      	beq.n	8018144 <UART_SetConfig+0xc0>
 801812a:	d820      	bhi.n	801816e <UART_SetConfig+0xea>
 801812c:	2b00      	cmp	r3, #0
 801812e:	d002      	beq.n	8018136 <UART_SetConfig+0xb2>
 8018130:	2b01      	cmp	r3, #1
 8018132:	d00e      	beq.n	8018152 <UART_SetConfig+0xce>
 8018134:	e01b      	b.n	801816e <UART_SetConfig+0xea>
 8018136:	231b      	movs	r3, #27
 8018138:	2218      	movs	r2, #24
 801813a:	189b      	adds	r3, r3, r2
 801813c:	19db      	adds	r3, r3, r7
 801813e:	2201      	movs	r2, #1
 8018140:	701a      	strb	r2, [r3, #0]
 8018142:	e0b4      	b.n	80182ae <UART_SetConfig+0x22a>
 8018144:	231b      	movs	r3, #27
 8018146:	2218      	movs	r2, #24
 8018148:	189b      	adds	r3, r3, r2
 801814a:	19db      	adds	r3, r3, r7
 801814c:	2202      	movs	r2, #2
 801814e:	701a      	strb	r2, [r3, #0]
 8018150:	e0ad      	b.n	80182ae <UART_SetConfig+0x22a>
 8018152:	231b      	movs	r3, #27
 8018154:	2218      	movs	r2, #24
 8018156:	189b      	adds	r3, r3, r2
 8018158:	19db      	adds	r3, r3, r7
 801815a:	2204      	movs	r2, #4
 801815c:	701a      	strb	r2, [r3, #0]
 801815e:	e0a6      	b.n	80182ae <UART_SetConfig+0x22a>
 8018160:	231b      	movs	r3, #27
 8018162:	2218      	movs	r2, #24
 8018164:	189b      	adds	r3, r3, r2
 8018166:	19db      	adds	r3, r3, r7
 8018168:	2208      	movs	r2, #8
 801816a:	701a      	strb	r2, [r3, #0]
 801816c:	e09f      	b.n	80182ae <UART_SetConfig+0x22a>
 801816e:	231b      	movs	r3, #27
 8018170:	2218      	movs	r2, #24
 8018172:	189b      	adds	r3, r3, r2
 8018174:	19db      	adds	r3, r3, r7
 8018176:	2210      	movs	r2, #16
 8018178:	701a      	strb	r2, [r3, #0]
 801817a:	e098      	b.n	80182ae <UART_SetConfig+0x22a>
 801817c:	69fb      	ldr	r3, [r7, #28]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	4a96      	ldr	r2, [pc, #600]	@ (80183dc <UART_SetConfig+0x358>)
 8018182:	4293      	cmp	r3, r2
 8018184:	d131      	bne.n	80181ea <UART_SetConfig+0x166>
 8018186:	4b94      	ldr	r3, [pc, #592]	@ (80183d8 <UART_SetConfig+0x354>)
 8018188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801818a:	220c      	movs	r2, #12
 801818c:	4013      	ands	r3, r2
 801818e:	2b0c      	cmp	r3, #12
 8018190:	d01d      	beq.n	80181ce <UART_SetConfig+0x14a>
 8018192:	d823      	bhi.n	80181dc <UART_SetConfig+0x158>
 8018194:	2b08      	cmp	r3, #8
 8018196:	d00c      	beq.n	80181b2 <UART_SetConfig+0x12e>
 8018198:	d820      	bhi.n	80181dc <UART_SetConfig+0x158>
 801819a:	2b00      	cmp	r3, #0
 801819c:	d002      	beq.n	80181a4 <UART_SetConfig+0x120>
 801819e:	2b04      	cmp	r3, #4
 80181a0:	d00e      	beq.n	80181c0 <UART_SetConfig+0x13c>
 80181a2:	e01b      	b.n	80181dc <UART_SetConfig+0x158>
 80181a4:	231b      	movs	r3, #27
 80181a6:	2218      	movs	r2, #24
 80181a8:	189b      	adds	r3, r3, r2
 80181aa:	19db      	adds	r3, r3, r7
 80181ac:	2200      	movs	r2, #0
 80181ae:	701a      	strb	r2, [r3, #0]
 80181b0:	e07d      	b.n	80182ae <UART_SetConfig+0x22a>
 80181b2:	231b      	movs	r3, #27
 80181b4:	2218      	movs	r2, #24
 80181b6:	189b      	adds	r3, r3, r2
 80181b8:	19db      	adds	r3, r3, r7
 80181ba:	2202      	movs	r2, #2
 80181bc:	701a      	strb	r2, [r3, #0]
 80181be:	e076      	b.n	80182ae <UART_SetConfig+0x22a>
 80181c0:	231b      	movs	r3, #27
 80181c2:	2218      	movs	r2, #24
 80181c4:	189b      	adds	r3, r3, r2
 80181c6:	19db      	adds	r3, r3, r7
 80181c8:	2204      	movs	r2, #4
 80181ca:	701a      	strb	r2, [r3, #0]
 80181cc:	e06f      	b.n	80182ae <UART_SetConfig+0x22a>
 80181ce:	231b      	movs	r3, #27
 80181d0:	2218      	movs	r2, #24
 80181d2:	189b      	adds	r3, r3, r2
 80181d4:	19db      	adds	r3, r3, r7
 80181d6:	2208      	movs	r2, #8
 80181d8:	701a      	strb	r2, [r3, #0]
 80181da:	e068      	b.n	80182ae <UART_SetConfig+0x22a>
 80181dc:	231b      	movs	r3, #27
 80181de:	2218      	movs	r2, #24
 80181e0:	189b      	adds	r3, r3, r2
 80181e2:	19db      	adds	r3, r3, r7
 80181e4:	2210      	movs	r2, #16
 80181e6:	701a      	strb	r2, [r3, #0]
 80181e8:	e061      	b.n	80182ae <UART_SetConfig+0x22a>
 80181ea:	69fb      	ldr	r3, [r7, #28]
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	4a7c      	ldr	r2, [pc, #496]	@ (80183e0 <UART_SetConfig+0x35c>)
 80181f0:	4293      	cmp	r3, r2
 80181f2:	d106      	bne.n	8018202 <UART_SetConfig+0x17e>
 80181f4:	231b      	movs	r3, #27
 80181f6:	2218      	movs	r2, #24
 80181f8:	189b      	adds	r3, r3, r2
 80181fa:	19db      	adds	r3, r3, r7
 80181fc:	2200      	movs	r2, #0
 80181fe:	701a      	strb	r2, [r3, #0]
 8018200:	e055      	b.n	80182ae <UART_SetConfig+0x22a>
 8018202:	69fb      	ldr	r3, [r7, #28]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	4a77      	ldr	r2, [pc, #476]	@ (80183e4 <UART_SetConfig+0x360>)
 8018208:	4293      	cmp	r3, r2
 801820a:	d106      	bne.n	801821a <UART_SetConfig+0x196>
 801820c:	231b      	movs	r3, #27
 801820e:	2218      	movs	r2, #24
 8018210:	189b      	adds	r3, r3, r2
 8018212:	19db      	adds	r3, r3, r7
 8018214:	2200      	movs	r2, #0
 8018216:	701a      	strb	r2, [r3, #0]
 8018218:	e049      	b.n	80182ae <UART_SetConfig+0x22a>
 801821a:	69fb      	ldr	r3, [r7, #28]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	4a6b      	ldr	r2, [pc, #428]	@ (80183cc <UART_SetConfig+0x348>)
 8018220:	4293      	cmp	r3, r2
 8018222:	d13e      	bne.n	80182a2 <UART_SetConfig+0x21e>
 8018224:	4b6c      	ldr	r3, [pc, #432]	@ (80183d8 <UART_SetConfig+0x354>)
 8018226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018228:	23c0      	movs	r3, #192	@ 0xc0
 801822a:	011b      	lsls	r3, r3, #4
 801822c:	4013      	ands	r3, r2
 801822e:	22c0      	movs	r2, #192	@ 0xc0
 8018230:	0112      	lsls	r2, r2, #4
 8018232:	4293      	cmp	r3, r2
 8018234:	d027      	beq.n	8018286 <UART_SetConfig+0x202>
 8018236:	22c0      	movs	r2, #192	@ 0xc0
 8018238:	0112      	lsls	r2, r2, #4
 801823a:	4293      	cmp	r3, r2
 801823c:	d82a      	bhi.n	8018294 <UART_SetConfig+0x210>
 801823e:	2280      	movs	r2, #128	@ 0x80
 8018240:	0112      	lsls	r2, r2, #4
 8018242:	4293      	cmp	r3, r2
 8018244:	d011      	beq.n	801826a <UART_SetConfig+0x1e6>
 8018246:	2280      	movs	r2, #128	@ 0x80
 8018248:	0112      	lsls	r2, r2, #4
 801824a:	4293      	cmp	r3, r2
 801824c:	d822      	bhi.n	8018294 <UART_SetConfig+0x210>
 801824e:	2b00      	cmp	r3, #0
 8018250:	d004      	beq.n	801825c <UART_SetConfig+0x1d8>
 8018252:	2280      	movs	r2, #128	@ 0x80
 8018254:	00d2      	lsls	r2, r2, #3
 8018256:	4293      	cmp	r3, r2
 8018258:	d00e      	beq.n	8018278 <UART_SetConfig+0x1f4>
 801825a:	e01b      	b.n	8018294 <UART_SetConfig+0x210>
 801825c:	231b      	movs	r3, #27
 801825e:	2218      	movs	r2, #24
 8018260:	189b      	adds	r3, r3, r2
 8018262:	19db      	adds	r3, r3, r7
 8018264:	2200      	movs	r2, #0
 8018266:	701a      	strb	r2, [r3, #0]
 8018268:	e021      	b.n	80182ae <UART_SetConfig+0x22a>
 801826a:	231b      	movs	r3, #27
 801826c:	2218      	movs	r2, #24
 801826e:	189b      	adds	r3, r3, r2
 8018270:	19db      	adds	r3, r3, r7
 8018272:	2202      	movs	r2, #2
 8018274:	701a      	strb	r2, [r3, #0]
 8018276:	e01a      	b.n	80182ae <UART_SetConfig+0x22a>
 8018278:	231b      	movs	r3, #27
 801827a:	2218      	movs	r2, #24
 801827c:	189b      	adds	r3, r3, r2
 801827e:	19db      	adds	r3, r3, r7
 8018280:	2204      	movs	r2, #4
 8018282:	701a      	strb	r2, [r3, #0]
 8018284:	e013      	b.n	80182ae <UART_SetConfig+0x22a>
 8018286:	231b      	movs	r3, #27
 8018288:	2218      	movs	r2, #24
 801828a:	189b      	adds	r3, r3, r2
 801828c:	19db      	adds	r3, r3, r7
 801828e:	2208      	movs	r2, #8
 8018290:	701a      	strb	r2, [r3, #0]
 8018292:	e00c      	b.n	80182ae <UART_SetConfig+0x22a>
 8018294:	231b      	movs	r3, #27
 8018296:	2218      	movs	r2, #24
 8018298:	189b      	adds	r3, r3, r2
 801829a:	19db      	adds	r3, r3, r7
 801829c:	2210      	movs	r2, #16
 801829e:	701a      	strb	r2, [r3, #0]
 80182a0:	e005      	b.n	80182ae <UART_SetConfig+0x22a>
 80182a2:	231b      	movs	r3, #27
 80182a4:	2218      	movs	r2, #24
 80182a6:	189b      	adds	r3, r3, r2
 80182a8:	19db      	adds	r3, r3, r7
 80182aa:	2210      	movs	r2, #16
 80182ac:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80182ae:	69fb      	ldr	r3, [r7, #28]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	4a46      	ldr	r2, [pc, #280]	@ (80183cc <UART_SetConfig+0x348>)
 80182b4:	4293      	cmp	r3, r2
 80182b6:	d000      	beq.n	80182ba <UART_SetConfig+0x236>
 80182b8:	e09a      	b.n	80183f0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80182ba:	231b      	movs	r3, #27
 80182bc:	2218      	movs	r2, #24
 80182be:	189b      	adds	r3, r3, r2
 80182c0:	19db      	adds	r3, r3, r7
 80182c2:	781b      	ldrb	r3, [r3, #0]
 80182c4:	2b08      	cmp	r3, #8
 80182c6:	d01d      	beq.n	8018304 <UART_SetConfig+0x280>
 80182c8:	dc20      	bgt.n	801830c <UART_SetConfig+0x288>
 80182ca:	2b04      	cmp	r3, #4
 80182cc:	d015      	beq.n	80182fa <UART_SetConfig+0x276>
 80182ce:	dc1d      	bgt.n	801830c <UART_SetConfig+0x288>
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d002      	beq.n	80182da <UART_SetConfig+0x256>
 80182d4:	2b02      	cmp	r3, #2
 80182d6:	d005      	beq.n	80182e4 <UART_SetConfig+0x260>
 80182d8:	e018      	b.n	801830c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80182da:	f7fd fe4b 	bl	8015f74 <HAL_RCC_GetPCLK1Freq>
 80182de:	0003      	movs	r3, r0
 80182e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80182e2:	e01c      	b.n	801831e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80182e4:	4b3c      	ldr	r3, [pc, #240]	@ (80183d8 <UART_SetConfig+0x354>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	2210      	movs	r2, #16
 80182ea:	4013      	ands	r3, r2
 80182ec:	d002      	beq.n	80182f4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80182ee:	4b3e      	ldr	r3, [pc, #248]	@ (80183e8 <UART_SetConfig+0x364>)
 80182f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80182f2:	e014      	b.n	801831e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80182f4:	4b3d      	ldr	r3, [pc, #244]	@ (80183ec <UART_SetConfig+0x368>)
 80182f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80182f8:	e011      	b.n	801831e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80182fa:	f7fd fd8b 	bl	8015e14 <HAL_RCC_GetSysClockFreq>
 80182fe:	0003      	movs	r3, r0
 8018300:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018302:	e00c      	b.n	801831e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018304:	2380      	movs	r3, #128	@ 0x80
 8018306:	021b      	lsls	r3, r3, #8
 8018308:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801830a:	e008      	b.n	801831e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801830c:	2300      	movs	r3, #0
 801830e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018310:	231a      	movs	r3, #26
 8018312:	2218      	movs	r2, #24
 8018314:	189b      	adds	r3, r3, r2
 8018316:	19db      	adds	r3, r3, r7
 8018318:	2201      	movs	r2, #1
 801831a:	701a      	strb	r2, [r3, #0]
        break;
 801831c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801831e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018320:	2b00      	cmp	r3, #0
 8018322:	d100      	bne.n	8018326 <UART_SetConfig+0x2a2>
 8018324:	e133      	b.n	801858e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8018326:	69fb      	ldr	r3, [r7, #28]
 8018328:	685a      	ldr	r2, [r3, #4]
 801832a:	0013      	movs	r3, r2
 801832c:	005b      	lsls	r3, r3, #1
 801832e:	189b      	adds	r3, r3, r2
 8018330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018332:	429a      	cmp	r2, r3
 8018334:	d305      	bcc.n	8018342 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8018336:	69fb      	ldr	r3, [r7, #28]
 8018338:	685b      	ldr	r3, [r3, #4]
 801833a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801833c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801833e:	429a      	cmp	r2, r3
 8018340:	d906      	bls.n	8018350 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8018342:	231a      	movs	r3, #26
 8018344:	2218      	movs	r2, #24
 8018346:	189b      	adds	r3, r3, r2
 8018348:	19db      	adds	r3, r3, r7
 801834a:	2201      	movs	r2, #1
 801834c:	701a      	strb	r2, [r3, #0]
 801834e:	e11e      	b.n	801858e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8018350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018352:	613b      	str	r3, [r7, #16]
 8018354:	2300      	movs	r3, #0
 8018356:	617b      	str	r3, [r7, #20]
 8018358:	6939      	ldr	r1, [r7, #16]
 801835a:	697a      	ldr	r2, [r7, #20]
 801835c:	000b      	movs	r3, r1
 801835e:	0e1b      	lsrs	r3, r3, #24
 8018360:	0010      	movs	r0, r2
 8018362:	0205      	lsls	r5, r0, #8
 8018364:	431d      	orrs	r5, r3
 8018366:	000b      	movs	r3, r1
 8018368:	021c      	lsls	r4, r3, #8
 801836a:	69fb      	ldr	r3, [r7, #28]
 801836c:	685b      	ldr	r3, [r3, #4]
 801836e:	085b      	lsrs	r3, r3, #1
 8018370:	60bb      	str	r3, [r7, #8]
 8018372:	2300      	movs	r3, #0
 8018374:	60fb      	str	r3, [r7, #12]
 8018376:	68b8      	ldr	r0, [r7, #8]
 8018378:	68f9      	ldr	r1, [r7, #12]
 801837a:	1900      	adds	r0, r0, r4
 801837c:	4169      	adcs	r1, r5
 801837e:	69fb      	ldr	r3, [r7, #28]
 8018380:	685b      	ldr	r3, [r3, #4]
 8018382:	603b      	str	r3, [r7, #0]
 8018384:	2300      	movs	r3, #0
 8018386:	607b      	str	r3, [r7, #4]
 8018388:	683a      	ldr	r2, [r7, #0]
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	f7e8 f8f8 	bl	8000580 <__aeabi_uldivmod>
 8018390:	0002      	movs	r2, r0
 8018392:	000b      	movs	r3, r1
 8018394:	0013      	movs	r3, r2
 8018396:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801839a:	23c0      	movs	r3, #192	@ 0xc0
 801839c:	009b      	lsls	r3, r3, #2
 801839e:	429a      	cmp	r2, r3
 80183a0:	d309      	bcc.n	80183b6 <UART_SetConfig+0x332>
 80183a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80183a4:	2380      	movs	r3, #128	@ 0x80
 80183a6:	035b      	lsls	r3, r3, #13
 80183a8:	429a      	cmp	r2, r3
 80183aa:	d204      	bcs.n	80183b6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80183ac:	69fb      	ldr	r3, [r7, #28]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80183b2:	60da      	str	r2, [r3, #12]
 80183b4:	e0eb      	b.n	801858e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80183b6:	231a      	movs	r3, #26
 80183b8:	2218      	movs	r2, #24
 80183ba:	189b      	adds	r3, r3, r2
 80183bc:	19db      	adds	r3, r3, r7
 80183be:	2201      	movs	r2, #1
 80183c0:	701a      	strb	r2, [r3, #0]
 80183c2:	e0e4      	b.n	801858e <UART_SetConfig+0x50a>
 80183c4:	efff69f3 	.word	0xefff69f3
 80183c8:	ffffcfff 	.word	0xffffcfff
 80183cc:	40004800 	.word	0x40004800
 80183d0:	fffff4ff 	.word	0xfffff4ff
 80183d4:	40013800 	.word	0x40013800
 80183d8:	40021000 	.word	0x40021000
 80183dc:	40004400 	.word	0x40004400
 80183e0:	40004c00 	.word	0x40004c00
 80183e4:	40005000 	.word	0x40005000
 80183e8:	003d0900 	.word	0x003d0900
 80183ec:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80183f0:	69fb      	ldr	r3, [r7, #28]
 80183f2:	69da      	ldr	r2, [r3, #28]
 80183f4:	2380      	movs	r3, #128	@ 0x80
 80183f6:	021b      	lsls	r3, r3, #8
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d000      	beq.n	80183fe <UART_SetConfig+0x37a>
 80183fc:	e070      	b.n	80184e0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80183fe:	231b      	movs	r3, #27
 8018400:	2218      	movs	r2, #24
 8018402:	189b      	adds	r3, r3, r2
 8018404:	19db      	adds	r3, r3, r7
 8018406:	781b      	ldrb	r3, [r3, #0]
 8018408:	2b08      	cmp	r3, #8
 801840a:	d822      	bhi.n	8018452 <UART_SetConfig+0x3ce>
 801840c:	009a      	lsls	r2, r3, #2
 801840e:	4b67      	ldr	r3, [pc, #412]	@ (80185ac <UART_SetConfig+0x528>)
 8018410:	18d3      	adds	r3, r2, r3
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018416:	f7fd fdad 	bl	8015f74 <HAL_RCC_GetPCLK1Freq>
 801841a:	0003      	movs	r3, r0
 801841c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801841e:	e021      	b.n	8018464 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018420:	f7fd fdbe 	bl	8015fa0 <HAL_RCC_GetPCLK2Freq>
 8018424:	0003      	movs	r3, r0
 8018426:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018428:	e01c      	b.n	8018464 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801842a:	4b61      	ldr	r3, [pc, #388]	@ (80185b0 <UART_SetConfig+0x52c>)
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	2210      	movs	r2, #16
 8018430:	4013      	ands	r3, r2
 8018432:	d002      	beq.n	801843a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018434:	4b5f      	ldr	r3, [pc, #380]	@ (80185b4 <UART_SetConfig+0x530>)
 8018436:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018438:	e014      	b.n	8018464 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801843a:	4b5f      	ldr	r3, [pc, #380]	@ (80185b8 <UART_SetConfig+0x534>)
 801843c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801843e:	e011      	b.n	8018464 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018440:	f7fd fce8 	bl	8015e14 <HAL_RCC_GetSysClockFreq>
 8018444:	0003      	movs	r3, r0
 8018446:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018448:	e00c      	b.n	8018464 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801844a:	2380      	movs	r3, #128	@ 0x80
 801844c:	021b      	lsls	r3, r3, #8
 801844e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018450:	e008      	b.n	8018464 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8018452:	2300      	movs	r3, #0
 8018454:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018456:	231a      	movs	r3, #26
 8018458:	2218      	movs	r2, #24
 801845a:	189b      	adds	r3, r3, r2
 801845c:	19db      	adds	r3, r3, r7
 801845e:	2201      	movs	r2, #1
 8018460:	701a      	strb	r2, [r3, #0]
        break;
 8018462:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018466:	2b00      	cmp	r3, #0
 8018468:	d100      	bne.n	801846c <UART_SetConfig+0x3e8>
 801846a:	e090      	b.n	801858e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801846c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801846e:	005a      	lsls	r2, r3, #1
 8018470:	69fb      	ldr	r3, [r7, #28]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	085b      	lsrs	r3, r3, #1
 8018476:	18d2      	adds	r2, r2, r3
 8018478:	69fb      	ldr	r3, [r7, #28]
 801847a:	685b      	ldr	r3, [r3, #4]
 801847c:	0019      	movs	r1, r3
 801847e:	0010      	movs	r0, r2
 8018480:	f7e7 fe90 	bl	80001a4 <__udivsi3>
 8018484:	0003      	movs	r3, r0
 8018486:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801848a:	2b0f      	cmp	r3, #15
 801848c:	d921      	bls.n	80184d2 <UART_SetConfig+0x44e>
 801848e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018490:	2380      	movs	r3, #128	@ 0x80
 8018492:	025b      	lsls	r3, r3, #9
 8018494:	429a      	cmp	r2, r3
 8018496:	d21c      	bcs.n	80184d2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801849a:	b29a      	uxth	r2, r3
 801849c:	200e      	movs	r0, #14
 801849e:	2418      	movs	r4, #24
 80184a0:	1903      	adds	r3, r0, r4
 80184a2:	19db      	adds	r3, r3, r7
 80184a4:	210f      	movs	r1, #15
 80184a6:	438a      	bics	r2, r1
 80184a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80184aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184ac:	085b      	lsrs	r3, r3, #1
 80184ae:	b29b      	uxth	r3, r3
 80184b0:	2207      	movs	r2, #7
 80184b2:	4013      	ands	r3, r2
 80184b4:	b299      	uxth	r1, r3
 80184b6:	1903      	adds	r3, r0, r4
 80184b8:	19db      	adds	r3, r3, r7
 80184ba:	1902      	adds	r2, r0, r4
 80184bc:	19d2      	adds	r2, r2, r7
 80184be:	8812      	ldrh	r2, [r2, #0]
 80184c0:	430a      	orrs	r2, r1
 80184c2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80184c4:	69fb      	ldr	r3, [r7, #28]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	1902      	adds	r2, r0, r4
 80184ca:	19d2      	adds	r2, r2, r7
 80184cc:	8812      	ldrh	r2, [r2, #0]
 80184ce:	60da      	str	r2, [r3, #12]
 80184d0:	e05d      	b.n	801858e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80184d2:	231a      	movs	r3, #26
 80184d4:	2218      	movs	r2, #24
 80184d6:	189b      	adds	r3, r3, r2
 80184d8:	19db      	adds	r3, r3, r7
 80184da:	2201      	movs	r2, #1
 80184dc:	701a      	strb	r2, [r3, #0]
 80184de:	e056      	b.n	801858e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80184e0:	231b      	movs	r3, #27
 80184e2:	2218      	movs	r2, #24
 80184e4:	189b      	adds	r3, r3, r2
 80184e6:	19db      	adds	r3, r3, r7
 80184e8:	781b      	ldrb	r3, [r3, #0]
 80184ea:	2b08      	cmp	r3, #8
 80184ec:	d822      	bhi.n	8018534 <UART_SetConfig+0x4b0>
 80184ee:	009a      	lsls	r2, r3, #2
 80184f0:	4b32      	ldr	r3, [pc, #200]	@ (80185bc <UART_SetConfig+0x538>)
 80184f2:	18d3      	adds	r3, r2, r3
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80184f8:	f7fd fd3c 	bl	8015f74 <HAL_RCC_GetPCLK1Freq>
 80184fc:	0003      	movs	r3, r0
 80184fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018500:	e021      	b.n	8018546 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018502:	f7fd fd4d 	bl	8015fa0 <HAL_RCC_GetPCLK2Freq>
 8018506:	0003      	movs	r3, r0
 8018508:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801850a:	e01c      	b.n	8018546 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801850c:	4b28      	ldr	r3, [pc, #160]	@ (80185b0 <UART_SetConfig+0x52c>)
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	2210      	movs	r2, #16
 8018512:	4013      	ands	r3, r2
 8018514:	d002      	beq.n	801851c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8018516:	4b27      	ldr	r3, [pc, #156]	@ (80185b4 <UART_SetConfig+0x530>)
 8018518:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801851a:	e014      	b.n	8018546 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801851c:	4b26      	ldr	r3, [pc, #152]	@ (80185b8 <UART_SetConfig+0x534>)
 801851e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018520:	e011      	b.n	8018546 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018522:	f7fd fc77 	bl	8015e14 <HAL_RCC_GetSysClockFreq>
 8018526:	0003      	movs	r3, r0
 8018528:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801852a:	e00c      	b.n	8018546 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801852c:	2380      	movs	r3, #128	@ 0x80
 801852e:	021b      	lsls	r3, r3, #8
 8018530:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018532:	e008      	b.n	8018546 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8018534:	2300      	movs	r3, #0
 8018536:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018538:	231a      	movs	r3, #26
 801853a:	2218      	movs	r2, #24
 801853c:	189b      	adds	r3, r3, r2
 801853e:	19db      	adds	r3, r3, r7
 8018540:	2201      	movs	r2, #1
 8018542:	701a      	strb	r2, [r3, #0]
        break;
 8018544:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8018546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018548:	2b00      	cmp	r3, #0
 801854a:	d020      	beq.n	801858e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801854c:	69fb      	ldr	r3, [r7, #28]
 801854e:	685b      	ldr	r3, [r3, #4]
 8018550:	085a      	lsrs	r2, r3, #1
 8018552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018554:	18d2      	adds	r2, r2, r3
 8018556:	69fb      	ldr	r3, [r7, #28]
 8018558:	685b      	ldr	r3, [r3, #4]
 801855a:	0019      	movs	r1, r3
 801855c:	0010      	movs	r0, r2
 801855e:	f7e7 fe21 	bl	80001a4 <__udivsi3>
 8018562:	0003      	movs	r3, r0
 8018564:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018568:	2b0f      	cmp	r3, #15
 801856a:	d90a      	bls.n	8018582 <UART_SetConfig+0x4fe>
 801856c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801856e:	2380      	movs	r3, #128	@ 0x80
 8018570:	025b      	lsls	r3, r3, #9
 8018572:	429a      	cmp	r2, r3
 8018574:	d205      	bcs.n	8018582 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8018576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018578:	b29a      	uxth	r2, r3
 801857a:	69fb      	ldr	r3, [r7, #28]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	60da      	str	r2, [r3, #12]
 8018580:	e005      	b.n	801858e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8018582:	231a      	movs	r3, #26
 8018584:	2218      	movs	r2, #24
 8018586:	189b      	adds	r3, r3, r2
 8018588:	19db      	adds	r3, r3, r7
 801858a:	2201      	movs	r2, #1
 801858c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801858e:	69fb      	ldr	r3, [r7, #28]
 8018590:	2200      	movs	r2, #0
 8018592:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8018594:	69fb      	ldr	r3, [r7, #28]
 8018596:	2200      	movs	r2, #0
 8018598:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801859a:	231a      	movs	r3, #26
 801859c:	2218      	movs	r2, #24
 801859e:	189b      	adds	r3, r3, r2
 80185a0:	19db      	adds	r3, r3, r7
 80185a2:	781b      	ldrb	r3, [r3, #0]
}
 80185a4:	0018      	movs	r0, r3
 80185a6:	46bd      	mov	sp, r7
 80185a8:	b00e      	add	sp, #56	@ 0x38
 80185aa:	bdb0      	pop	{r4, r5, r7, pc}
 80185ac:	08025d48 	.word	0x08025d48
 80185b0:	40021000 	.word	0x40021000
 80185b4:	003d0900 	.word	0x003d0900
 80185b8:	00f42400 	.word	0x00f42400
 80185bc:	08025d6c 	.word	0x08025d6c

080185c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b082      	sub	sp, #8
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185cc:	2201      	movs	r2, #1
 80185ce:	4013      	ands	r3, r2
 80185d0:	d00b      	beq.n	80185ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	685b      	ldr	r3, [r3, #4]
 80185d8:	4a4a      	ldr	r2, [pc, #296]	@ (8018704 <UART_AdvFeatureConfig+0x144>)
 80185da:	4013      	ands	r3, r2
 80185dc:	0019      	movs	r1, r3
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	430a      	orrs	r2, r1
 80185e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185ee:	2202      	movs	r2, #2
 80185f0:	4013      	ands	r3, r2
 80185f2:	d00b      	beq.n	801860c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	685b      	ldr	r3, [r3, #4]
 80185fa:	4a43      	ldr	r2, [pc, #268]	@ (8018708 <UART_AdvFeatureConfig+0x148>)
 80185fc:	4013      	ands	r3, r2
 80185fe:	0019      	movs	r1, r3
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	430a      	orrs	r2, r1
 801860a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018610:	2204      	movs	r2, #4
 8018612:	4013      	ands	r3, r2
 8018614:	d00b      	beq.n	801862e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	685b      	ldr	r3, [r3, #4]
 801861c:	4a3b      	ldr	r2, [pc, #236]	@ (801870c <UART_AdvFeatureConfig+0x14c>)
 801861e:	4013      	ands	r3, r2
 8018620:	0019      	movs	r1, r3
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	430a      	orrs	r2, r1
 801862c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018632:	2208      	movs	r2, #8
 8018634:	4013      	ands	r3, r2
 8018636:	d00b      	beq.n	8018650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	685b      	ldr	r3, [r3, #4]
 801863e:	4a34      	ldr	r2, [pc, #208]	@ (8018710 <UART_AdvFeatureConfig+0x150>)
 8018640:	4013      	ands	r3, r2
 8018642:	0019      	movs	r1, r3
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	430a      	orrs	r2, r1
 801864e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018654:	2210      	movs	r2, #16
 8018656:	4013      	ands	r3, r2
 8018658:	d00b      	beq.n	8018672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	689b      	ldr	r3, [r3, #8]
 8018660:	4a2c      	ldr	r2, [pc, #176]	@ (8018714 <UART_AdvFeatureConfig+0x154>)
 8018662:	4013      	ands	r3, r2
 8018664:	0019      	movs	r1, r3
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	430a      	orrs	r2, r1
 8018670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018676:	2220      	movs	r2, #32
 8018678:	4013      	ands	r3, r2
 801867a:	d00b      	beq.n	8018694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	689b      	ldr	r3, [r3, #8]
 8018682:	4a25      	ldr	r2, [pc, #148]	@ (8018718 <UART_AdvFeatureConfig+0x158>)
 8018684:	4013      	ands	r3, r2
 8018686:	0019      	movs	r1, r3
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	430a      	orrs	r2, r1
 8018692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018698:	2240      	movs	r2, #64	@ 0x40
 801869a:	4013      	ands	r3, r2
 801869c:	d01d      	beq.n	80186da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	685b      	ldr	r3, [r3, #4]
 80186a4:	4a1d      	ldr	r2, [pc, #116]	@ (801871c <UART_AdvFeatureConfig+0x15c>)
 80186a6:	4013      	ands	r3, r2
 80186a8:	0019      	movs	r1, r3
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	430a      	orrs	r2, r1
 80186b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80186ba:	2380      	movs	r3, #128	@ 0x80
 80186bc:	035b      	lsls	r3, r3, #13
 80186be:	429a      	cmp	r2, r3
 80186c0:	d10b      	bne.n	80186da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	685b      	ldr	r3, [r3, #4]
 80186c8:	4a15      	ldr	r2, [pc, #84]	@ (8018720 <UART_AdvFeatureConfig+0x160>)
 80186ca:	4013      	ands	r3, r2
 80186cc:	0019      	movs	r1, r3
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	430a      	orrs	r2, r1
 80186d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186de:	2280      	movs	r2, #128	@ 0x80
 80186e0:	4013      	ands	r3, r2
 80186e2:	d00b      	beq.n	80186fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	685b      	ldr	r3, [r3, #4]
 80186ea:	4a0e      	ldr	r2, [pc, #56]	@ (8018724 <UART_AdvFeatureConfig+0x164>)
 80186ec:	4013      	ands	r3, r2
 80186ee:	0019      	movs	r1, r3
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	430a      	orrs	r2, r1
 80186fa:	605a      	str	r2, [r3, #4]
  }
}
 80186fc:	46c0      	nop			@ (mov r8, r8)
 80186fe:	46bd      	mov	sp, r7
 8018700:	b002      	add	sp, #8
 8018702:	bd80      	pop	{r7, pc}
 8018704:	fffdffff 	.word	0xfffdffff
 8018708:	fffeffff 	.word	0xfffeffff
 801870c:	fffbffff 	.word	0xfffbffff
 8018710:	ffff7fff 	.word	0xffff7fff
 8018714:	ffffefff 	.word	0xffffefff
 8018718:	ffffdfff 	.word	0xffffdfff
 801871c:	ffefffff 	.word	0xffefffff
 8018720:	ff9fffff 	.word	0xff9fffff
 8018724:	fff7ffff 	.word	0xfff7ffff

08018728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b092      	sub	sp, #72	@ 0x48
 801872c:	af02      	add	r7, sp, #8
 801872e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2284      	movs	r2, #132	@ 0x84
 8018734:	2100      	movs	r1, #0
 8018736:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018738:	f7f6 fd20 	bl	800f17c <HAL_GetTick>
 801873c:	0003      	movs	r3, r0
 801873e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	2208      	movs	r2, #8
 8018748:	4013      	ands	r3, r2
 801874a:	2b08      	cmp	r3, #8
 801874c:	d12c      	bne.n	80187a8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801874e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018750:	2280      	movs	r2, #128	@ 0x80
 8018752:	0391      	lsls	r1, r2, #14
 8018754:	6878      	ldr	r0, [r7, #4]
 8018756:	4a46      	ldr	r2, [pc, #280]	@ (8018870 <UART_CheckIdleState+0x148>)
 8018758:	9200      	str	r2, [sp, #0]
 801875a:	2200      	movs	r2, #0
 801875c:	f000 f88c 	bl	8018878 <UART_WaitOnFlagUntilTimeout>
 8018760:	1e03      	subs	r3, r0, #0
 8018762:	d021      	beq.n	80187a8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018764:	f3ef 8310 	mrs	r3, PRIMASK
 8018768:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801876c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801876e:	2301      	movs	r3, #1
 8018770:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018774:	f383 8810 	msr	PRIMASK, r3
}
 8018778:	46c0      	nop			@ (mov r8, r8)
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	681a      	ldr	r2, [r3, #0]
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	2180      	movs	r1, #128	@ 0x80
 8018786:	438a      	bics	r2, r1
 8018788:	601a      	str	r2, [r3, #0]
 801878a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801878c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801878e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018790:	f383 8810 	msr	PRIMASK, r3
}
 8018794:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	2220      	movs	r2, #32
 801879a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2278      	movs	r2, #120	@ 0x78
 80187a0:	2100      	movs	r1, #0
 80187a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80187a4:	2303      	movs	r3, #3
 80187a6:	e05f      	b.n	8018868 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	2204      	movs	r2, #4
 80187b0:	4013      	ands	r3, r2
 80187b2:	2b04      	cmp	r3, #4
 80187b4:	d146      	bne.n	8018844 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80187b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80187b8:	2280      	movs	r2, #128	@ 0x80
 80187ba:	03d1      	lsls	r1, r2, #15
 80187bc:	6878      	ldr	r0, [r7, #4]
 80187be:	4a2c      	ldr	r2, [pc, #176]	@ (8018870 <UART_CheckIdleState+0x148>)
 80187c0:	9200      	str	r2, [sp, #0]
 80187c2:	2200      	movs	r2, #0
 80187c4:	f000 f858 	bl	8018878 <UART_WaitOnFlagUntilTimeout>
 80187c8:	1e03      	subs	r3, r0, #0
 80187ca:	d03b      	beq.n	8018844 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187cc:	f3ef 8310 	mrs	r3, PRIMASK
 80187d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80187d2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80187d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80187d6:	2301      	movs	r3, #1
 80187d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187da:	693b      	ldr	r3, [r7, #16]
 80187dc:	f383 8810 	msr	PRIMASK, r3
}
 80187e0:	46c0      	nop			@ (mov r8, r8)
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	681a      	ldr	r2, [r3, #0]
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	4921      	ldr	r1, [pc, #132]	@ (8018874 <UART_CheckIdleState+0x14c>)
 80187ee:	400a      	ands	r2, r1
 80187f0:	601a      	str	r2, [r3, #0]
 80187f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187f6:	697b      	ldr	r3, [r7, #20]
 80187f8:	f383 8810 	msr	PRIMASK, r3
}
 80187fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187fe:	f3ef 8310 	mrs	r3, PRIMASK
 8018802:	61bb      	str	r3, [r7, #24]
  return(result);
 8018804:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018806:	633b      	str	r3, [r7, #48]	@ 0x30
 8018808:	2301      	movs	r3, #1
 801880a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801880c:	69fb      	ldr	r3, [r7, #28]
 801880e:	f383 8810 	msr	PRIMASK, r3
}
 8018812:	46c0      	nop			@ (mov r8, r8)
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	689a      	ldr	r2, [r3, #8]
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	2101      	movs	r1, #1
 8018820:	438a      	bics	r2, r1
 8018822:	609a      	str	r2, [r3, #8]
 8018824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018826:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018828:	6a3b      	ldr	r3, [r7, #32]
 801882a:	f383 8810 	msr	PRIMASK, r3
}
 801882e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	2280      	movs	r2, #128	@ 0x80
 8018834:	2120      	movs	r1, #32
 8018836:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	2278      	movs	r2, #120	@ 0x78
 801883c:	2100      	movs	r1, #0
 801883e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018840:	2303      	movs	r3, #3
 8018842:	e011      	b.n	8018868 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	2220      	movs	r2, #32
 8018848:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2280      	movs	r2, #128	@ 0x80
 801884e:	2120      	movs	r1, #32
 8018850:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	2200      	movs	r2, #0
 8018856:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	2200      	movs	r2, #0
 801885c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	2278      	movs	r2, #120	@ 0x78
 8018862:	2100      	movs	r1, #0
 8018864:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8018866:	2300      	movs	r3, #0
}
 8018868:	0018      	movs	r0, r3
 801886a:	46bd      	mov	sp, r7
 801886c:	b010      	add	sp, #64	@ 0x40
 801886e:	bd80      	pop	{r7, pc}
 8018870:	01ffffff 	.word	0x01ffffff
 8018874:	fffffedf 	.word	0xfffffedf

08018878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b084      	sub	sp, #16
 801887c:	af00      	add	r7, sp, #0
 801887e:	60f8      	str	r0, [r7, #12]
 8018880:	60b9      	str	r1, [r7, #8]
 8018882:	603b      	str	r3, [r7, #0]
 8018884:	1dfb      	adds	r3, r7, #7
 8018886:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018888:	e04b      	b.n	8018922 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801888a:	69bb      	ldr	r3, [r7, #24]
 801888c:	3301      	adds	r3, #1
 801888e:	d048      	beq.n	8018922 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018890:	f7f6 fc74 	bl	800f17c <HAL_GetTick>
 8018894:	0002      	movs	r2, r0
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	1ad3      	subs	r3, r2, r3
 801889a:	69ba      	ldr	r2, [r7, #24]
 801889c:	429a      	cmp	r2, r3
 801889e:	d302      	bcc.n	80188a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80188a0:	69bb      	ldr	r3, [r7, #24]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d101      	bne.n	80188aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80188a6:	2303      	movs	r3, #3
 80188a8:	e04b      	b.n	8018942 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	2204      	movs	r2, #4
 80188b2:	4013      	ands	r3, r2
 80188b4:	d035      	beq.n	8018922 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	69db      	ldr	r3, [r3, #28]
 80188bc:	2208      	movs	r2, #8
 80188be:	4013      	ands	r3, r2
 80188c0:	2b08      	cmp	r3, #8
 80188c2:	d111      	bne.n	80188e8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	2208      	movs	r2, #8
 80188ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	0018      	movs	r0, r3
 80188d0:	f000 f9ca 	bl	8018c68 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	2284      	movs	r2, #132	@ 0x84
 80188d8:	2108      	movs	r1, #8
 80188da:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	2278      	movs	r2, #120	@ 0x78
 80188e0:	2100      	movs	r1, #0
 80188e2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80188e4:	2301      	movs	r3, #1
 80188e6:	e02c      	b.n	8018942 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	69da      	ldr	r2, [r3, #28]
 80188ee:	2380      	movs	r3, #128	@ 0x80
 80188f0:	011b      	lsls	r3, r3, #4
 80188f2:	401a      	ands	r2, r3
 80188f4:	2380      	movs	r3, #128	@ 0x80
 80188f6:	011b      	lsls	r3, r3, #4
 80188f8:	429a      	cmp	r2, r3
 80188fa:	d112      	bne.n	8018922 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	2280      	movs	r2, #128	@ 0x80
 8018902:	0112      	lsls	r2, r2, #4
 8018904:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	0018      	movs	r0, r3
 801890a:	f000 f9ad 	bl	8018c68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	2284      	movs	r2, #132	@ 0x84
 8018912:	2120      	movs	r1, #32
 8018914:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	2278      	movs	r2, #120	@ 0x78
 801891a:	2100      	movs	r1, #0
 801891c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801891e:	2303      	movs	r3, #3
 8018920:	e00f      	b.n	8018942 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	69db      	ldr	r3, [r3, #28]
 8018928:	68ba      	ldr	r2, [r7, #8]
 801892a:	4013      	ands	r3, r2
 801892c:	68ba      	ldr	r2, [r7, #8]
 801892e:	1ad3      	subs	r3, r2, r3
 8018930:	425a      	negs	r2, r3
 8018932:	4153      	adcs	r3, r2
 8018934:	b2db      	uxtb	r3, r3
 8018936:	001a      	movs	r2, r3
 8018938:	1dfb      	adds	r3, r7, #7
 801893a:	781b      	ldrb	r3, [r3, #0]
 801893c:	429a      	cmp	r2, r3
 801893e:	d0a4      	beq.n	801888a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018940:	2300      	movs	r3, #0
}
 8018942:	0018      	movs	r0, r3
 8018944:	46bd      	mov	sp, r7
 8018946:	b004      	add	sp, #16
 8018948:	bd80      	pop	{r7, pc}
	...

0801894c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801894c:	b580      	push	{r7, lr}
 801894e:	b090      	sub	sp, #64	@ 0x40
 8018950:	af00      	add	r7, sp, #0
 8018952:	60f8      	str	r0, [r7, #12]
 8018954:	60b9      	str	r1, [r7, #8]
 8018956:	1dbb      	adds	r3, r7, #6
 8018958:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	68ba      	ldr	r2, [r7, #8]
 801895e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	1dba      	adds	r2, r7, #6
 8018964:	2158      	movs	r1, #88	@ 0x58
 8018966:	8812      	ldrh	r2, [r2, #0]
 8018968:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	1dba      	adds	r2, r7, #6
 801896e:	215a      	movs	r1, #90	@ 0x5a
 8018970:	8812      	ldrh	r2, [r2, #0]
 8018972:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	2200      	movs	r2, #0
 8018978:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	689a      	ldr	r2, [r3, #8]
 801897e:	2380      	movs	r3, #128	@ 0x80
 8018980:	015b      	lsls	r3, r3, #5
 8018982:	429a      	cmp	r2, r3
 8018984:	d10d      	bne.n	80189a2 <UART_Start_Receive_IT+0x56>
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	691b      	ldr	r3, [r3, #16]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d104      	bne.n	8018998 <UART_Start_Receive_IT+0x4c>
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	225c      	movs	r2, #92	@ 0x5c
 8018992:	4950      	ldr	r1, [pc, #320]	@ (8018ad4 <UART_Start_Receive_IT+0x188>)
 8018994:	5299      	strh	r1, [r3, r2]
 8018996:	e02e      	b.n	80189f6 <UART_Start_Receive_IT+0xaa>
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	225c      	movs	r2, #92	@ 0x5c
 801899c:	21ff      	movs	r1, #255	@ 0xff
 801899e:	5299      	strh	r1, [r3, r2]
 80189a0:	e029      	b.n	80189f6 <UART_Start_Receive_IT+0xaa>
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	689b      	ldr	r3, [r3, #8]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d10d      	bne.n	80189c6 <UART_Start_Receive_IT+0x7a>
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	691b      	ldr	r3, [r3, #16]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d104      	bne.n	80189bc <UART_Start_Receive_IT+0x70>
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	225c      	movs	r2, #92	@ 0x5c
 80189b6:	21ff      	movs	r1, #255	@ 0xff
 80189b8:	5299      	strh	r1, [r3, r2]
 80189ba:	e01c      	b.n	80189f6 <UART_Start_Receive_IT+0xaa>
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	225c      	movs	r2, #92	@ 0x5c
 80189c0:	217f      	movs	r1, #127	@ 0x7f
 80189c2:	5299      	strh	r1, [r3, r2]
 80189c4:	e017      	b.n	80189f6 <UART_Start_Receive_IT+0xaa>
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	689a      	ldr	r2, [r3, #8]
 80189ca:	2380      	movs	r3, #128	@ 0x80
 80189cc:	055b      	lsls	r3, r3, #21
 80189ce:	429a      	cmp	r2, r3
 80189d0:	d10d      	bne.n	80189ee <UART_Start_Receive_IT+0xa2>
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	691b      	ldr	r3, [r3, #16]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d104      	bne.n	80189e4 <UART_Start_Receive_IT+0x98>
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	225c      	movs	r2, #92	@ 0x5c
 80189de:	217f      	movs	r1, #127	@ 0x7f
 80189e0:	5299      	strh	r1, [r3, r2]
 80189e2:	e008      	b.n	80189f6 <UART_Start_Receive_IT+0xaa>
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	225c      	movs	r2, #92	@ 0x5c
 80189e8:	213f      	movs	r1, #63	@ 0x3f
 80189ea:	5299      	strh	r1, [r3, r2]
 80189ec:	e003      	b.n	80189f6 <UART_Start_Receive_IT+0xaa>
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	225c      	movs	r2, #92	@ 0x5c
 80189f2:	2100      	movs	r1, #0
 80189f4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	2284      	movs	r2, #132	@ 0x84
 80189fa:	2100      	movs	r1, #0
 80189fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	2280      	movs	r2, #128	@ 0x80
 8018a02:	2122      	movs	r1, #34	@ 0x22
 8018a04:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a06:	f3ef 8310 	mrs	r3, PRIMASK
 8018a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018a10:	2301      	movs	r3, #1
 8018a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018a16:	f383 8810 	msr	PRIMASK, r3
}
 8018a1a:	46c0      	nop			@ (mov r8, r8)
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	689a      	ldr	r2, [r3, #8]
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	2101      	movs	r1, #1
 8018a28:	430a      	orrs	r2, r1
 8018a2a:	609a      	str	r2, [r3, #8]
 8018a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a32:	f383 8810 	msr	PRIMASK, r3
}
 8018a36:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	689a      	ldr	r2, [r3, #8]
 8018a3c:	2380      	movs	r3, #128	@ 0x80
 8018a3e:	015b      	lsls	r3, r3, #5
 8018a40:	429a      	cmp	r2, r3
 8018a42:	d107      	bne.n	8018a54 <UART_Start_Receive_IT+0x108>
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	691b      	ldr	r3, [r3, #16]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d103      	bne.n	8018a54 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	4a22      	ldr	r2, [pc, #136]	@ (8018ad8 <UART_Start_Receive_IT+0x18c>)
 8018a50:	669a      	str	r2, [r3, #104]	@ 0x68
 8018a52:	e002      	b.n	8018a5a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	4a21      	ldr	r2, [pc, #132]	@ (8018adc <UART_Start_Receive_IT+0x190>)
 8018a58:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	691b      	ldr	r3, [r3, #16]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d019      	beq.n	8018a96 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a62:	f3ef 8310 	mrs	r3, PRIMASK
 8018a66:	61fb      	str	r3, [r7, #28]
  return(result);
 8018a68:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8018a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8018a6c:	2301      	movs	r3, #1
 8018a6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a70:	6a3b      	ldr	r3, [r7, #32]
 8018a72:	f383 8810 	msr	PRIMASK, r3
}
 8018a76:	46c0      	nop			@ (mov r8, r8)
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	681a      	ldr	r2, [r3, #0]
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	2190      	movs	r1, #144	@ 0x90
 8018a84:	0049      	lsls	r1, r1, #1
 8018a86:	430a      	orrs	r2, r1
 8018a88:	601a      	str	r2, [r3, #0]
 8018a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a90:	f383 8810 	msr	PRIMASK, r3
}
 8018a94:	e018      	b.n	8018ac8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018a96:	f3ef 8310 	mrs	r3, PRIMASK
 8018a9a:	613b      	str	r3, [r7, #16]
  return(result);
 8018a9c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8018a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018aa0:	2301      	movs	r3, #1
 8018aa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018aa4:	697b      	ldr	r3, [r7, #20]
 8018aa6:	f383 8810 	msr	PRIMASK, r3
}
 8018aaa:	46c0      	nop			@ (mov r8, r8)
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	681a      	ldr	r2, [r3, #0]
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	2120      	movs	r1, #32
 8018ab8:	430a      	orrs	r2, r1
 8018aba:	601a      	str	r2, [r3, #0]
 8018abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018abe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ac0:	69bb      	ldr	r3, [r7, #24]
 8018ac2:	f383 8810 	msr	PRIMASK, r3
}
 8018ac6:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8018ac8:	2300      	movs	r3, #0
}
 8018aca:	0018      	movs	r0, r3
 8018acc:	46bd      	mov	sp, r7
 8018ace:	b010      	add	sp, #64	@ 0x40
 8018ad0:	bd80      	pop	{r7, pc}
 8018ad2:	46c0      	nop			@ (mov r8, r8)
 8018ad4:	000001ff 	.word	0x000001ff
 8018ad8:	0801924d 	.word	0x0801924d
 8018adc:	08019081 	.word	0x08019081

08018ae0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b090      	sub	sp, #64	@ 0x40
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	60f8      	str	r0, [r7, #12]
 8018ae8:	60b9      	str	r1, [r7, #8]
 8018aea:	1dbb      	adds	r3, r7, #6
 8018aec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	68ba      	ldr	r2, [r7, #8]
 8018af2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	1dba      	adds	r2, r7, #6
 8018af8:	2158      	movs	r1, #88	@ 0x58
 8018afa:	8812      	ldrh	r2, [r2, #0]
 8018afc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2284      	movs	r2, #132	@ 0x84
 8018b02:	2100      	movs	r1, #0
 8018b04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	2280      	movs	r2, #128	@ 0x80
 8018b0a:	2122      	movs	r1, #34	@ 0x22
 8018b0c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d028      	beq.n	8018b68 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b1a:	4a3e      	ldr	r2, [pc, #248]	@ (8018c14 <UART_Start_Receive_DMA+0x134>)
 8018b1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b22:	4a3d      	ldr	r2, [pc, #244]	@ (8018c18 <UART_Start_Receive_DMA+0x138>)
 8018b24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b2a:	4a3c      	ldr	r2, [pc, #240]	@ (8018c1c <UART_Start_Receive_DMA+0x13c>)
 8018b2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018b32:	2200      	movs	r2, #0
 8018b34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	3324      	adds	r3, #36	@ 0x24
 8018b40:	0019      	movs	r1, r3
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018b46:	001a      	movs	r2, r3
 8018b48:	1dbb      	adds	r3, r7, #6
 8018b4a:	881b      	ldrh	r3, [r3, #0]
 8018b4c:	f7f7 f868 	bl	800fc20 <HAL_DMA_Start_IT>
 8018b50:	1e03      	subs	r3, r0, #0
 8018b52:	d009      	beq.n	8018b68 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	2284      	movs	r2, #132	@ 0x84
 8018b58:	2110      	movs	r1, #16
 8018b5a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	2280      	movs	r2, #128	@ 0x80
 8018b60:	2120      	movs	r1, #32
 8018b62:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8018b64:	2301      	movs	r3, #1
 8018b66:	e050      	b.n	8018c0a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	691b      	ldr	r3, [r3, #16]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d019      	beq.n	8018ba4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b70:	f3ef 8310 	mrs	r3, PRIMASK
 8018b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018b7a:	2301      	movs	r3, #1
 8018b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b80:	f383 8810 	msr	PRIMASK, r3
}
 8018b84:	46c0      	nop			@ (mov r8, r8)
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	681a      	ldr	r2, [r3, #0]
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	2180      	movs	r1, #128	@ 0x80
 8018b92:	0049      	lsls	r1, r1, #1
 8018b94:	430a      	orrs	r2, r1
 8018b96:	601a      	str	r2, [r3, #0]
 8018b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b9e:	f383 8810 	msr	PRIMASK, r3
}
 8018ba2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8018ba8:	613b      	str	r3, [r7, #16]
  return(result);
 8018baa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018bac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018bae:	2301      	movs	r3, #1
 8018bb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bb2:	697b      	ldr	r3, [r7, #20]
 8018bb4:	f383 8810 	msr	PRIMASK, r3
}
 8018bb8:	46c0      	nop			@ (mov r8, r8)
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	689a      	ldr	r2, [r3, #8]
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	2101      	movs	r1, #1
 8018bc6:	430a      	orrs	r2, r1
 8018bc8:	609a      	str	r2, [r3, #8]
 8018bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018bcc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018bce:	69bb      	ldr	r3, [r7, #24]
 8018bd0:	f383 8810 	msr	PRIMASK, r3
}
 8018bd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8018bda:	61fb      	str	r3, [r7, #28]
  return(result);
 8018bdc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8018be0:	2301      	movs	r3, #1
 8018be2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018be4:	6a3b      	ldr	r3, [r7, #32]
 8018be6:	f383 8810 	msr	PRIMASK, r3
}
 8018bea:	46c0      	nop			@ (mov r8, r8)
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	689a      	ldr	r2, [r3, #8]
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	2140      	movs	r1, #64	@ 0x40
 8018bf8:	430a      	orrs	r2, r1
 8018bfa:	609a      	str	r2, [r3, #8]
 8018bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c02:	f383 8810 	msr	PRIMASK, r3
}
 8018c06:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8018c08:	2300      	movs	r3, #0
}
 8018c0a:	0018      	movs	r0, r3
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	b010      	add	sp, #64	@ 0x40
 8018c10:	bd80      	pop	{r7, pc}
 8018c12:	46c0      	nop			@ (mov r8, r8)
 8018c14:	08018df1 	.word	0x08018df1
 8018c18:	08018f25 	.word	0x08018f25
 8018c1c:	08018f6d 	.word	0x08018f6d

08018c20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b086      	sub	sp, #24
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c28:	f3ef 8310 	mrs	r3, PRIMASK
 8018c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8018c2e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018c30:	617b      	str	r3, [r7, #20]
 8018c32:	2301      	movs	r3, #1
 8018c34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	f383 8810 	msr	PRIMASK, r3
}
 8018c3c:	46c0      	nop			@ (mov r8, r8)
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	681a      	ldr	r2, [r3, #0]
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	21c0      	movs	r1, #192	@ 0xc0
 8018c4a:	438a      	bics	r2, r1
 8018c4c:	601a      	str	r2, [r3, #0]
 8018c4e:	697b      	ldr	r3, [r7, #20]
 8018c50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c52:	693b      	ldr	r3, [r7, #16]
 8018c54:	f383 8810 	msr	PRIMASK, r3
}
 8018c58:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	2220      	movs	r2, #32
 8018c5e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8018c60:	46c0      	nop			@ (mov r8, r8)
 8018c62:	46bd      	mov	sp, r7
 8018c64:	b006      	add	sp, #24
 8018c66:	bd80      	pop	{r7, pc}

08018c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018c68:	b580      	push	{r7, lr}
 8018c6a:	b08e      	sub	sp, #56	@ 0x38
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c70:	f3ef 8310 	mrs	r3, PRIMASK
 8018c74:	617b      	str	r3, [r7, #20]
  return(result);
 8018c76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8018c7a:	2301      	movs	r3, #1
 8018c7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c7e:	69bb      	ldr	r3, [r7, #24]
 8018c80:	f383 8810 	msr	PRIMASK, r3
}
 8018c84:	46c0      	nop			@ (mov r8, r8)
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	681a      	ldr	r2, [r3, #0]
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	4926      	ldr	r1, [pc, #152]	@ (8018d2c <UART_EndRxTransfer+0xc4>)
 8018c92:	400a      	ands	r2, r1
 8018c94:	601a      	str	r2, [r3, #0]
 8018c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018c98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c9a:	69fb      	ldr	r3, [r7, #28]
 8018c9c:	f383 8810 	msr	PRIMASK, r3
}
 8018ca0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8018ca6:	623b      	str	r3, [r7, #32]
  return(result);
 8018ca8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018caa:	633b      	str	r3, [r7, #48]	@ 0x30
 8018cac:	2301      	movs	r3, #1
 8018cae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cb2:	f383 8810 	msr	PRIMASK, r3
}
 8018cb6:	46c0      	nop			@ (mov r8, r8)
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	689a      	ldr	r2, [r3, #8]
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	681b      	ldr	r3, [r3, #0]
 8018cc2:	2101      	movs	r1, #1
 8018cc4:	438a      	bics	r2, r1
 8018cc6:	609a      	str	r2, [r3, #8]
 8018cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018cce:	f383 8810 	msr	PRIMASK, r3
}
 8018cd2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018cd8:	2b01      	cmp	r3, #1
 8018cda:	d118      	bne.n	8018d0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8018ce0:	60bb      	str	r3, [r7, #8]
  return(result);
 8018ce2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	f383 8810 	msr	PRIMASK, r3
}
 8018cf0:	46c0      	nop			@ (mov r8, r8)
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	681a      	ldr	r2, [r3, #0]
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	2110      	movs	r1, #16
 8018cfe:	438a      	bics	r2, r1
 8018d00:	601a      	str	r2, [r3, #0]
 8018d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d06:	693b      	ldr	r3, [r7, #16]
 8018d08:	f383 8810 	msr	PRIMASK, r3
}
 8018d0c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	2280      	movs	r2, #128	@ 0x80
 8018d12:	2120      	movs	r1, #32
 8018d14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	2200      	movs	r2, #0
 8018d1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8018d22:	46c0      	nop			@ (mov r8, r8)
 8018d24:	46bd      	mov	sp, r7
 8018d26:	b00e      	add	sp, #56	@ 0x38
 8018d28:	bd80      	pop	{r7, pc}
 8018d2a:	46c0      	nop			@ (mov r8, r8)
 8018d2c:	fffffedf 	.word	0xfffffedf

08018d30 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b08c      	sub	sp, #48	@ 0x30
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	2220      	movs	r2, #32
 8018d46:	4013      	ands	r3, r2
 8018d48:	d135      	bne.n	8018db6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8018d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d4c:	2252      	movs	r2, #82	@ 0x52
 8018d4e:	2100      	movs	r1, #0
 8018d50:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d52:	f3ef 8310 	mrs	r3, PRIMASK
 8018d56:	60fb      	str	r3, [r7, #12]
  return(result);
 8018d58:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018d5c:	2301      	movs	r3, #1
 8018d5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d60:	693b      	ldr	r3, [r7, #16]
 8018d62:	f383 8810 	msr	PRIMASK, r3
}
 8018d66:	46c0      	nop			@ (mov r8, r8)
 8018d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	689a      	ldr	r2, [r3, #8]
 8018d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	2180      	movs	r1, #128	@ 0x80
 8018d74:	438a      	bics	r2, r1
 8018d76:	609a      	str	r2, [r3, #8]
 8018d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d7c:	697b      	ldr	r3, [r7, #20]
 8018d7e:	f383 8810 	msr	PRIMASK, r3
}
 8018d82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d84:	f3ef 8310 	mrs	r3, PRIMASK
 8018d88:	61bb      	str	r3, [r7, #24]
  return(result);
 8018d8a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8018d8e:	2301      	movs	r3, #1
 8018d90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d92:	69fb      	ldr	r3, [r7, #28]
 8018d94:	f383 8810 	msr	PRIMASK, r3
}
 8018d98:	46c0      	nop			@ (mov r8, r8)
 8018d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	681a      	ldr	r2, [r3, #0]
 8018da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	2140      	movs	r1, #64	@ 0x40
 8018da6:	430a      	orrs	r2, r1
 8018da8:	601a      	str	r2, [r3, #0]
 8018daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dae:	6a3b      	ldr	r3, [r7, #32]
 8018db0:	f383 8810 	msr	PRIMASK, r3
}
 8018db4:	e006      	b.n	8018dc4 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8018db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018db8:	228c      	movs	r2, #140	@ 0x8c
 8018dba:	589b      	ldr	r3, [r3, r2]
 8018dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018dbe:	0010      	movs	r0, r2
 8018dc0:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018dc2:	46c0      	nop			@ (mov r8, r8)
 8018dc4:	46c0      	nop			@ (mov r8, r8)
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	b00c      	add	sp, #48	@ 0x30
 8018dca:	bd80      	pop	{r7, pc}

08018dcc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b084      	sub	sp, #16
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018dd8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	2288      	movs	r2, #136	@ 0x88
 8018dde:	589b      	ldr	r3, [r3, r2]
 8018de0:	68fa      	ldr	r2, [r7, #12]
 8018de2:	0010      	movs	r0, r2
 8018de4:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018de6:	46c0      	nop			@ (mov r8, r8)
 8018de8:	46bd      	mov	sp, r7
 8018dea:	b004      	add	sp, #16
 8018dec:	bd80      	pop	{r7, pc}
	...

08018df0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b094      	sub	sp, #80	@ 0x50
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018dfc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	2220      	movs	r2, #32
 8018e06:	4013      	ands	r3, r2
 8018e08:	d16f      	bne.n	8018eea <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8018e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e0c:	225a      	movs	r2, #90	@ 0x5a
 8018e0e:	2100      	movs	r1, #0
 8018e10:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e12:	f3ef 8310 	mrs	r3, PRIMASK
 8018e16:	61bb      	str	r3, [r7, #24]
  return(result);
 8018e18:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e1c:	2301      	movs	r3, #1
 8018e1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e20:	69fb      	ldr	r3, [r7, #28]
 8018e22:	f383 8810 	msr	PRIMASK, r3
}
 8018e26:	46c0      	nop			@ (mov r8, r8)
 8018e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	681a      	ldr	r2, [r3, #0]
 8018e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	493b      	ldr	r1, [pc, #236]	@ (8018f20 <UART_DMAReceiveCplt+0x130>)
 8018e34:	400a      	ands	r2, r1
 8018e36:	601a      	str	r2, [r3, #0]
 8018e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018e3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e3c:	6a3b      	ldr	r3, [r7, #32]
 8018e3e:	f383 8810 	msr	PRIMASK, r3
}
 8018e42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e44:	f3ef 8310 	mrs	r3, PRIMASK
 8018e48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8018e4e:	2301      	movs	r3, #1
 8018e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e54:	f383 8810 	msr	PRIMASK, r3
}
 8018e58:	46c0      	nop			@ (mov r8, r8)
 8018e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	689a      	ldr	r2, [r3, #8]
 8018e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	2101      	movs	r1, #1
 8018e66:	438a      	bics	r2, r1
 8018e68:	609a      	str	r2, [r3, #8]
 8018e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018e70:	f383 8810 	msr	PRIMASK, r3
}
 8018e74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e76:	f3ef 8310 	mrs	r3, PRIMASK
 8018e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018e7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8018e80:	2301      	movs	r3, #1
 8018e82:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e86:	f383 8810 	msr	PRIMASK, r3
}
 8018e8a:	46c0      	nop			@ (mov r8, r8)
 8018e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	689a      	ldr	r2, [r3, #8]
 8018e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	2140      	movs	r1, #64	@ 0x40
 8018e98:	438a      	bics	r2, r1
 8018e9a:	609a      	str	r2, [r3, #8]
 8018e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ea2:	f383 8810 	msr	PRIMASK, r3
}
 8018ea6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018eaa:	2280      	movs	r2, #128	@ 0x80
 8018eac:	2120      	movs	r1, #32
 8018eae:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018eb4:	2b01      	cmp	r3, #1
 8018eb6:	d118      	bne.n	8018eea <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8018ebc:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ebe:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018ec2:	2301      	movs	r3, #1
 8018ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ec6:	693b      	ldr	r3, [r7, #16]
 8018ec8:	f383 8810 	msr	PRIMASK, r3
}
 8018ecc:	46c0      	nop			@ (mov r8, r8)
 8018ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	681a      	ldr	r2, [r3, #0]
 8018ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	2110      	movs	r1, #16
 8018eda:	438a      	bics	r2, r1
 8018edc:	601a      	str	r2, [r3, #0]
 8018ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ee0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ee2:	697b      	ldr	r3, [r7, #20]
 8018ee4:	f383 8810 	msr	PRIMASK, r3
}
 8018ee8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018eec:	2200      	movs	r2, #0
 8018eee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018ef4:	2b01      	cmp	r3, #1
 8018ef6:	d109      	bne.n	8018f0c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018efa:	22ac      	movs	r2, #172	@ 0xac
 8018efc:	589b      	ldr	r3, [r3, r2]
 8018efe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018f00:	2158      	movs	r1, #88	@ 0x58
 8018f02:	5a51      	ldrh	r1, [r2, r1]
 8018f04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018f06:	0010      	movs	r0, r2
 8018f08:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018f0a:	e005      	b.n	8018f18 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018f0e:	2294      	movs	r2, #148	@ 0x94
 8018f10:	589b      	ldr	r3, [r3, r2]
 8018f12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018f14:	0010      	movs	r0, r2
 8018f16:	4798      	blx	r3
}
 8018f18:	46c0      	nop			@ (mov r8, r8)
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	b014      	add	sp, #80	@ 0x50
 8018f1e:	bd80      	pop	{r7, pc}
 8018f20:	fffffeff 	.word	0xfffffeff

08018f24 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	b084      	sub	sp, #16
 8018f28:	af00      	add	r7, sp, #0
 8018f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f30:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	2201      	movs	r2, #1
 8018f36:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018f3c:	2b01      	cmp	r3, #1
 8018f3e:	d10b      	bne.n	8018f58 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	22ac      	movs	r2, #172	@ 0xac
 8018f44:	589b      	ldr	r3, [r3, r2]
 8018f46:	68fa      	ldr	r2, [r7, #12]
 8018f48:	2158      	movs	r1, #88	@ 0x58
 8018f4a:	5a52      	ldrh	r2, [r2, r1]
 8018f4c:	0852      	lsrs	r2, r2, #1
 8018f4e:	b291      	uxth	r1, r2
 8018f50:	68fa      	ldr	r2, [r7, #12]
 8018f52:	0010      	movs	r0, r2
 8018f54:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018f56:	e005      	b.n	8018f64 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	2290      	movs	r2, #144	@ 0x90
 8018f5c:	589b      	ldr	r3, [r3, r2]
 8018f5e:	68fa      	ldr	r2, [r7, #12]
 8018f60:	0010      	movs	r0, r2
 8018f62:	4798      	blx	r3
}
 8018f64:	46c0      	nop			@ (mov r8, r8)
 8018f66:	46bd      	mov	sp, r7
 8018f68:	b004      	add	sp, #16
 8018f6a:	bd80      	pop	{r7, pc}

08018f6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b086      	sub	sp, #24
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f78:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018f7a:	697b      	ldr	r3, [r7, #20]
 8018f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018f7e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018f80:	697b      	ldr	r3, [r7, #20]
 8018f82:	2280      	movs	r2, #128	@ 0x80
 8018f84:	589b      	ldr	r3, [r3, r2]
 8018f86:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018f88:	697b      	ldr	r3, [r7, #20]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	689b      	ldr	r3, [r3, #8]
 8018f8e:	2280      	movs	r2, #128	@ 0x80
 8018f90:	4013      	ands	r3, r2
 8018f92:	2b80      	cmp	r3, #128	@ 0x80
 8018f94:	d10a      	bne.n	8018fac <UART_DMAError+0x40>
 8018f96:	693b      	ldr	r3, [r7, #16]
 8018f98:	2b21      	cmp	r3, #33	@ 0x21
 8018f9a:	d107      	bne.n	8018fac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018f9c:	697b      	ldr	r3, [r7, #20]
 8018f9e:	2252      	movs	r2, #82	@ 0x52
 8018fa0:	2100      	movs	r1, #0
 8018fa2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	0018      	movs	r0, r3
 8018fa8:	f7ff fe3a 	bl	8018c20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018fac:	697b      	ldr	r3, [r7, #20]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	689b      	ldr	r3, [r3, #8]
 8018fb2:	2240      	movs	r2, #64	@ 0x40
 8018fb4:	4013      	ands	r3, r2
 8018fb6:	2b40      	cmp	r3, #64	@ 0x40
 8018fb8:	d10a      	bne.n	8018fd0 <UART_DMAError+0x64>
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	2b22      	cmp	r3, #34	@ 0x22
 8018fbe:	d107      	bne.n	8018fd0 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018fc0:	697b      	ldr	r3, [r7, #20]
 8018fc2:	225a      	movs	r2, #90	@ 0x5a
 8018fc4:	2100      	movs	r1, #0
 8018fc6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018fc8:	697b      	ldr	r3, [r7, #20]
 8018fca:	0018      	movs	r0, r3
 8018fcc:	f7ff fe4c 	bl	8018c68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018fd0:	697b      	ldr	r3, [r7, #20]
 8018fd2:	2284      	movs	r2, #132	@ 0x84
 8018fd4:	589b      	ldr	r3, [r3, r2]
 8018fd6:	2210      	movs	r2, #16
 8018fd8:	431a      	orrs	r2, r3
 8018fda:	697b      	ldr	r3, [r7, #20]
 8018fdc:	2184      	movs	r1, #132	@ 0x84
 8018fde:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018fe0:	697b      	ldr	r3, [r7, #20]
 8018fe2:	2298      	movs	r2, #152	@ 0x98
 8018fe4:	589b      	ldr	r3, [r3, r2]
 8018fe6:	697a      	ldr	r2, [r7, #20]
 8018fe8:	0010      	movs	r0, r2
 8018fea:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018fec:	46c0      	nop			@ (mov r8, r8)
 8018fee:	46bd      	mov	sp, r7
 8018ff0:	b006      	add	sp, #24
 8018ff2:	bd80      	pop	{r7, pc}

08018ff4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b084      	sub	sp, #16
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019000:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	225a      	movs	r2, #90	@ 0x5a
 8019006:	2100      	movs	r1, #0
 8019008:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	2252      	movs	r2, #82	@ 0x52
 801900e:	2100      	movs	r1, #0
 8019010:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8019012:	68fb      	ldr	r3, [r7, #12]
 8019014:	2298      	movs	r2, #152	@ 0x98
 8019016:	589b      	ldr	r3, [r3, r2]
 8019018:	68fa      	ldr	r2, [r7, #12]
 801901a:	0010      	movs	r0, r2
 801901c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801901e:	46c0      	nop			@ (mov r8, r8)
 8019020:	46bd      	mov	sp, r7
 8019022:	b004      	add	sp, #16
 8019024:	bd80      	pop	{r7, pc}

08019026 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8019026:	b580      	push	{r7, lr}
 8019028:	b086      	sub	sp, #24
 801902a:	af00      	add	r7, sp, #0
 801902c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801902e:	f3ef 8310 	mrs	r3, PRIMASK
 8019032:	60bb      	str	r3, [r7, #8]
  return(result);
 8019034:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8019036:	617b      	str	r3, [r7, #20]
 8019038:	2301      	movs	r3, #1
 801903a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	f383 8810 	msr	PRIMASK, r3
}
 8019042:	46c0      	nop			@ (mov r8, r8)
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	681a      	ldr	r2, [r3, #0]
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	2140      	movs	r1, #64	@ 0x40
 8019050:	438a      	bics	r2, r1
 8019052:	601a      	str	r2, [r3, #0]
 8019054:	697b      	ldr	r3, [r7, #20]
 8019056:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019058:	693b      	ldr	r3, [r7, #16]
 801905a:	f383 8810 	msr	PRIMASK, r3
}
 801905e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	2220      	movs	r2, #32
 8019064:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2200      	movs	r2, #0
 801906a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	228c      	movs	r2, #140	@ 0x8c
 8019070:	589b      	ldr	r3, [r3, r2]
 8019072:	687a      	ldr	r2, [r7, #4]
 8019074:	0010      	movs	r0, r2
 8019076:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8019078:	46c0      	nop			@ (mov r8, r8)
 801907a:	46bd      	mov	sp, r7
 801907c:	b006      	add	sp, #24
 801907e:	bd80      	pop	{r7, pc}

08019080 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8019080:	b580      	push	{r7, lr}
 8019082:	b094      	sub	sp, #80	@ 0x50
 8019084:	af00      	add	r7, sp, #0
 8019086:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8019088:	204e      	movs	r0, #78	@ 0x4e
 801908a:	183b      	adds	r3, r7, r0
 801908c:	687a      	ldr	r2, [r7, #4]
 801908e:	215c      	movs	r1, #92	@ 0x5c
 8019090:	5a52      	ldrh	r2, [r2, r1]
 8019092:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	2280      	movs	r2, #128	@ 0x80
 8019098:	589b      	ldr	r3, [r3, r2]
 801909a:	2b22      	cmp	r3, #34	@ 0x22
 801909c:	d000      	beq.n	80190a0 <UART_RxISR_8BIT+0x20>
 801909e:	e0c2      	b.n	8019226 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80190a6:	214c      	movs	r1, #76	@ 0x4c
 80190a8:	187b      	adds	r3, r7, r1
 80190aa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80190ac:	187b      	adds	r3, r7, r1
 80190ae:	881b      	ldrh	r3, [r3, #0]
 80190b0:	b2da      	uxtb	r2, r3
 80190b2:	183b      	adds	r3, r7, r0
 80190b4:	881b      	ldrh	r3, [r3, #0]
 80190b6:	b2d9      	uxtb	r1, r3
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80190bc:	400a      	ands	r2, r1
 80190be:	b2d2      	uxtb	r2, r2
 80190c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80190c6:	1c5a      	adds	r2, r3, #1
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	225a      	movs	r2, #90	@ 0x5a
 80190d0:	5a9b      	ldrh	r3, [r3, r2]
 80190d2:	b29b      	uxth	r3, r3
 80190d4:	3b01      	subs	r3, #1
 80190d6:	b299      	uxth	r1, r3
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	225a      	movs	r2, #90	@ 0x5a
 80190dc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80190de:	687b      	ldr	r3, [r7, #4]
 80190e0:	225a      	movs	r2, #90	@ 0x5a
 80190e2:	5a9b      	ldrh	r3, [r3, r2]
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d000      	beq.n	80190ec <UART_RxISR_8BIT+0x6c>
 80190ea:	e0a4      	b.n	8019236 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190ec:	f3ef 8310 	mrs	r3, PRIMASK
 80190f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80190f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80190f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80190f6:	2301      	movs	r3, #1
 80190f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190fc:	f383 8810 	msr	PRIMASK, r3
}
 8019100:	46c0      	nop			@ (mov r8, r8)
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	681a      	ldr	r2, [r3, #0]
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	494c      	ldr	r1, [pc, #304]	@ (8019240 <UART_RxISR_8BIT+0x1c0>)
 801910e:	400a      	ands	r2, r1
 8019110:	601a      	str	r2, [r3, #0]
 8019112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019118:	f383 8810 	msr	PRIMASK, r3
}
 801911c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801911e:	f3ef 8310 	mrs	r3, PRIMASK
 8019122:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8019124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019126:	647b      	str	r3, [r7, #68]	@ 0x44
 8019128:	2301      	movs	r3, #1
 801912a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801912c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801912e:	f383 8810 	msr	PRIMASK, r3
}
 8019132:	46c0      	nop			@ (mov r8, r8)
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	689a      	ldr	r2, [r3, #8]
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	2101      	movs	r1, #1
 8019140:	438a      	bics	r2, r1
 8019142:	609a      	str	r2, [r3, #8]
 8019144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019146:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801914a:	f383 8810 	msr	PRIMASK, r3
}
 801914e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	2280      	movs	r2, #128	@ 0x80
 8019154:	2120      	movs	r1, #32
 8019156:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	2200      	movs	r2, #0
 801915c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	2200      	movs	r2, #0
 8019162:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	4a36      	ldr	r2, [pc, #216]	@ (8019244 <UART_RxISR_8BIT+0x1c4>)
 801916a:	4293      	cmp	r3, r2
 801916c:	d01f      	beq.n	80191ae <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	685a      	ldr	r2, [r3, #4]
 8019174:	2380      	movs	r3, #128	@ 0x80
 8019176:	041b      	lsls	r3, r3, #16
 8019178:	4013      	ands	r3, r2
 801917a:	d018      	beq.n	80191ae <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801917c:	f3ef 8310 	mrs	r3, PRIMASK
 8019180:	61bb      	str	r3, [r7, #24]
  return(result);
 8019182:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019184:	643b      	str	r3, [r7, #64]	@ 0x40
 8019186:	2301      	movs	r3, #1
 8019188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801918a:	69fb      	ldr	r3, [r7, #28]
 801918c:	f383 8810 	msr	PRIMASK, r3
}
 8019190:	46c0      	nop			@ (mov r8, r8)
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	681a      	ldr	r2, [r3, #0]
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	492a      	ldr	r1, [pc, #168]	@ (8019248 <UART_RxISR_8BIT+0x1c8>)
 801919e:	400a      	ands	r2, r1
 80191a0:	601a      	str	r2, [r3, #0]
 80191a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80191a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191a6:	6a3b      	ldr	r3, [r7, #32]
 80191a8:	f383 8810 	msr	PRIMASK, r3
}
 80191ac:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80191b2:	2b01      	cmp	r3, #1
 80191b4:	d130      	bne.n	8019218 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	2200      	movs	r2, #0
 80191ba:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191bc:	f3ef 8310 	mrs	r3, PRIMASK
 80191c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80191c2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80191c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191c6:	2301      	movs	r3, #1
 80191c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191ca:	693b      	ldr	r3, [r7, #16]
 80191cc:	f383 8810 	msr	PRIMASK, r3
}
 80191d0:	46c0      	nop			@ (mov r8, r8)
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	681a      	ldr	r2, [r3, #0]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	2110      	movs	r1, #16
 80191de:	438a      	bics	r2, r1
 80191e0:	601a      	str	r2, [r3, #0]
 80191e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191e6:	697b      	ldr	r3, [r7, #20]
 80191e8:	f383 8810 	msr	PRIMASK, r3
}
 80191ec:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	69db      	ldr	r3, [r3, #28]
 80191f4:	2210      	movs	r2, #16
 80191f6:	4013      	ands	r3, r2
 80191f8:	2b10      	cmp	r3, #16
 80191fa:	d103      	bne.n	8019204 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	2210      	movs	r2, #16
 8019202:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	22ac      	movs	r2, #172	@ 0xac
 8019208:	589b      	ldr	r3, [r3, r2]
 801920a:	687a      	ldr	r2, [r7, #4]
 801920c:	2158      	movs	r1, #88	@ 0x58
 801920e:	5a51      	ldrh	r1, [r2, r1]
 8019210:	687a      	ldr	r2, [r7, #4]
 8019212:	0010      	movs	r0, r2
 8019214:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8019216:	e00e      	b.n	8019236 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	2294      	movs	r2, #148	@ 0x94
 801921c:	589b      	ldr	r3, [r3, r2]
 801921e:	687a      	ldr	r2, [r7, #4]
 8019220:	0010      	movs	r0, r2
 8019222:	4798      	blx	r3
}
 8019224:	e007      	b.n	8019236 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	699a      	ldr	r2, [r3, #24]
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	2108      	movs	r1, #8
 8019232:	430a      	orrs	r2, r1
 8019234:	619a      	str	r2, [r3, #24]
}
 8019236:	46c0      	nop			@ (mov r8, r8)
 8019238:	46bd      	mov	sp, r7
 801923a:	b014      	add	sp, #80	@ 0x50
 801923c:	bd80      	pop	{r7, pc}
 801923e:	46c0      	nop			@ (mov r8, r8)
 8019240:	fffffedf 	.word	0xfffffedf
 8019244:	40004800 	.word	0x40004800
 8019248:	fbffffff 	.word	0xfbffffff

0801924c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801924c:	b580      	push	{r7, lr}
 801924e:	b094      	sub	sp, #80	@ 0x50
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8019254:	204e      	movs	r0, #78	@ 0x4e
 8019256:	183b      	adds	r3, r7, r0
 8019258:	687a      	ldr	r2, [r7, #4]
 801925a:	215c      	movs	r1, #92	@ 0x5c
 801925c:	5a52      	ldrh	r2, [r2, r1]
 801925e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	2280      	movs	r2, #128	@ 0x80
 8019264:	589b      	ldr	r3, [r3, r2]
 8019266:	2b22      	cmp	r3, #34	@ 0x22
 8019268:	d000      	beq.n	801926c <UART_RxISR_16BIT+0x20>
 801926a:	e0c2      	b.n	80193f2 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019272:	214c      	movs	r1, #76	@ 0x4c
 8019274:	187b      	adds	r3, r7, r1
 8019276:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801927c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801927e:	187b      	adds	r3, r7, r1
 8019280:	183a      	adds	r2, r7, r0
 8019282:	881b      	ldrh	r3, [r3, #0]
 8019284:	8812      	ldrh	r2, [r2, #0]
 8019286:	4013      	ands	r3, r2
 8019288:	b29a      	uxth	r2, r3
 801928a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801928c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019292:	1c9a      	adds	r2, r3, #2
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	225a      	movs	r2, #90	@ 0x5a
 801929c:	5a9b      	ldrh	r3, [r3, r2]
 801929e:	b29b      	uxth	r3, r3
 80192a0:	3b01      	subs	r3, #1
 80192a2:	b299      	uxth	r1, r3
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	225a      	movs	r2, #90	@ 0x5a
 80192a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	225a      	movs	r2, #90	@ 0x5a
 80192ae:	5a9b      	ldrh	r3, [r3, r2]
 80192b0:	b29b      	uxth	r3, r3
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d000      	beq.n	80192b8 <UART_RxISR_16BIT+0x6c>
 80192b6:	e0a4      	b.n	8019402 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192b8:	f3ef 8310 	mrs	r3, PRIMASK
 80192bc:	623b      	str	r3, [r7, #32]
  return(result);
 80192be:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80192c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80192c2:	2301      	movs	r3, #1
 80192c4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192c8:	f383 8810 	msr	PRIMASK, r3
}
 80192cc:	46c0      	nop			@ (mov r8, r8)
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	681a      	ldr	r2, [r3, #0]
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	494c      	ldr	r1, [pc, #304]	@ (801940c <UART_RxISR_16BIT+0x1c0>)
 80192da:	400a      	ands	r2, r1
 80192dc:	601a      	str	r2, [r3, #0]
 80192de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192e4:	f383 8810 	msr	PRIMASK, r3
}
 80192e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192ea:	f3ef 8310 	mrs	r3, PRIMASK
 80192ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80192f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80192f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80192f4:	2301      	movs	r3, #1
 80192f6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192fa:	f383 8810 	msr	PRIMASK, r3
}
 80192fe:	46c0      	nop			@ (mov r8, r8)
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	689a      	ldr	r2, [r3, #8]
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	2101      	movs	r1, #1
 801930c:	438a      	bics	r2, r1
 801930e:	609a      	str	r2, [r3, #8]
 8019310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019312:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019316:	f383 8810 	msr	PRIMASK, r3
}
 801931a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	2280      	movs	r2, #128	@ 0x80
 8019320:	2120      	movs	r1, #32
 8019322:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	2200      	movs	r2, #0
 8019328:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	2200      	movs	r2, #0
 801932e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	4a36      	ldr	r2, [pc, #216]	@ (8019410 <UART_RxISR_16BIT+0x1c4>)
 8019336:	4293      	cmp	r3, r2
 8019338:	d01f      	beq.n	801937a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	685a      	ldr	r2, [r3, #4]
 8019340:	2380      	movs	r3, #128	@ 0x80
 8019342:	041b      	lsls	r3, r3, #16
 8019344:	4013      	ands	r3, r2
 8019346:	d018      	beq.n	801937a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019348:	f3ef 8310 	mrs	r3, PRIMASK
 801934c:	617b      	str	r3, [r7, #20]
  return(result);
 801934e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8019350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019352:	2301      	movs	r3, #1
 8019354:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019356:	69bb      	ldr	r3, [r7, #24]
 8019358:	f383 8810 	msr	PRIMASK, r3
}
 801935c:	46c0      	nop			@ (mov r8, r8)
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	681a      	ldr	r2, [r3, #0]
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	492a      	ldr	r1, [pc, #168]	@ (8019414 <UART_RxISR_16BIT+0x1c8>)
 801936a:	400a      	ands	r2, r1
 801936c:	601a      	str	r2, [r3, #0]
 801936e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019370:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019372:	69fb      	ldr	r3, [r7, #28]
 8019374:	f383 8810 	msr	PRIMASK, r3
}
 8019378:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801937e:	2b01      	cmp	r3, #1
 8019380:	d130      	bne.n	80193e4 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	2200      	movs	r2, #0
 8019386:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019388:	f3ef 8310 	mrs	r3, PRIMASK
 801938c:	60bb      	str	r3, [r7, #8]
  return(result);
 801938e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8019390:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019392:	2301      	movs	r3, #1
 8019394:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	f383 8810 	msr	PRIMASK, r3
}
 801939c:	46c0      	nop			@ (mov r8, r8)
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	681a      	ldr	r2, [r3, #0]
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	2110      	movs	r1, #16
 80193aa:	438a      	bics	r2, r1
 80193ac:	601a      	str	r2, [r3, #0]
 80193ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193b2:	693b      	ldr	r3, [r7, #16]
 80193b4:	f383 8810 	msr	PRIMASK, r3
}
 80193b8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	69db      	ldr	r3, [r3, #28]
 80193c0:	2210      	movs	r2, #16
 80193c2:	4013      	ands	r3, r2
 80193c4:	2b10      	cmp	r3, #16
 80193c6:	d103      	bne.n	80193d0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	2210      	movs	r2, #16
 80193ce:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	22ac      	movs	r2, #172	@ 0xac
 80193d4:	589b      	ldr	r3, [r3, r2]
 80193d6:	687a      	ldr	r2, [r7, #4]
 80193d8:	2158      	movs	r1, #88	@ 0x58
 80193da:	5a51      	ldrh	r1, [r2, r1]
 80193dc:	687a      	ldr	r2, [r7, #4]
 80193de:	0010      	movs	r0, r2
 80193e0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80193e2:	e00e      	b.n	8019402 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	2294      	movs	r2, #148	@ 0x94
 80193e8:	589b      	ldr	r3, [r3, r2]
 80193ea:	687a      	ldr	r2, [r7, #4]
 80193ec:	0010      	movs	r0, r2
 80193ee:	4798      	blx	r3
}
 80193f0:	e007      	b.n	8019402 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	699a      	ldr	r2, [r3, #24]
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	2108      	movs	r1, #8
 80193fe:	430a      	orrs	r2, r1
 8019400:	619a      	str	r2, [r3, #24]
}
 8019402:	46c0      	nop			@ (mov r8, r8)
 8019404:	46bd      	mov	sp, r7
 8019406:	b014      	add	sp, #80	@ 0x50
 8019408:	bd80      	pop	{r7, pc}
 801940a:	46c0      	nop			@ (mov r8, r8)
 801940c:	fffffedf 	.word	0xfffffedf
 8019410:	40004800 	.word	0x40004800
 8019414:	fbffffff 	.word	0xfbffffff

08019418 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b082      	sub	sp, #8
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8019420:	46c0      	nop			@ (mov r8, r8)
 8019422:	46bd      	mov	sp, r7
 8019424:	b002      	add	sp, #8
 8019426:	bd80      	pop	{r7, pc}

08019428 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b084      	sub	sp, #16
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	2244      	movs	r2, #68	@ 0x44
 8019434:	2100      	movs	r1, #0
 8019436:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8019438:	4b05      	ldr	r3, [pc, #20]	@ (8019450 <USB_EnableGlobalInt+0x28>)
 801943a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	b299      	uxth	r1, r3
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	2240      	movs	r2, #64	@ 0x40
 8019444:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019446:	2300      	movs	r3, #0
}
 8019448:	0018      	movs	r0, r3
 801944a:	46bd      	mov	sp, r7
 801944c:	b004      	add	sp, #16
 801944e:	bd80      	pop	{r7, pc}
 8019450:	0000bf80 	.word	0x0000bf80

08019454 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b084      	sub	sp, #16
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801945c:	4b09      	ldr	r3, [pc, #36]	@ (8019484 <USB_DisableGlobalInt+0x30>)
 801945e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	2240      	movs	r2, #64	@ 0x40
 8019464:	5a9b      	ldrh	r3, [r3, r2]
 8019466:	b29b      	uxth	r3, r3
 8019468:	68fa      	ldr	r2, [r7, #12]
 801946a:	b292      	uxth	r2, r2
 801946c:	43d2      	mvns	r2, r2
 801946e:	b292      	uxth	r2, r2
 8019470:	4013      	ands	r3, r2
 8019472:	b299      	uxth	r1, r3
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	2240      	movs	r2, #64	@ 0x40
 8019478:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801947a:	2300      	movs	r3, #0
}
 801947c:	0018      	movs	r0, r3
 801947e:	46bd      	mov	sp, r7
 8019480:	b004      	add	sp, #16
 8019482:	bd80      	pop	{r7, pc}
 8019484:	0000bf80 	.word	0x0000bf80

08019488 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8019488:	b084      	sub	sp, #16
 801948a:	b590      	push	{r4, r7, lr}
 801948c:	b083      	sub	sp, #12
 801948e:	af00      	add	r7, sp, #0
 8019490:	6078      	str	r0, [r7, #4]
 8019492:	2004      	movs	r0, #4
 8019494:	2410      	movs	r4, #16
 8019496:	1900      	adds	r0, r0, r4
 8019498:	2408      	movs	r4, #8
 801949a:	46a4      	mov	ip, r4
 801949c:	44bc      	add	ip, r7
 801949e:	4460      	add	r0, ip
 80194a0:	6001      	str	r1, [r0, #0]
 80194a2:	6042      	str	r2, [r0, #4]
 80194a4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	2240      	movs	r2, #64	@ 0x40
 80194aa:	2101      	movs	r1, #1
 80194ac:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	2240      	movs	r2, #64	@ 0x40
 80194b2:	2100      	movs	r1, #0
 80194b4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	2244      	movs	r2, #68	@ 0x44
 80194ba:	2100      	movs	r1, #0
 80194bc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	2250      	movs	r2, #80	@ 0x50
 80194c2:	2100      	movs	r1, #0
 80194c4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80194c6:	2300      	movs	r3, #0
}
 80194c8:	0018      	movs	r0, r3
 80194ca:	46bd      	mov	sp, r7
 80194cc:	b003      	add	sp, #12
 80194ce:	bc90      	pop	{r4, r7}
 80194d0:	bc08      	pop	{r3}
 80194d2:	b004      	add	sp, #16
 80194d4:	4718      	bx	r3
	...

080194d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80194d8:	b580      	push	{r7, lr}
 80194da:	b09c      	sub	sp, #112	@ 0x70
 80194dc:	af00      	add	r7, sp, #0
 80194de:	6078      	str	r0, [r7, #4]
 80194e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80194e2:	236f      	movs	r3, #111	@ 0x6f
 80194e4:	18fb      	adds	r3, r7, r3
 80194e6:	2200      	movs	r2, #0
 80194e8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80194ea:	687a      	ldr	r2, [r7, #4]
 80194ec:	683b      	ldr	r3, [r7, #0]
 80194ee:	781b      	ldrb	r3, [r3, #0]
 80194f0:	009b      	lsls	r3, r3, #2
 80194f2:	18d3      	adds	r3, r2, r3
 80194f4:	881b      	ldrh	r3, [r3, #0]
 80194f6:	b29a      	uxth	r2, r3
 80194f8:	236c      	movs	r3, #108	@ 0x6c
 80194fa:	18fb      	adds	r3, r7, r3
 80194fc:	49a3      	ldr	r1, [pc, #652]	@ (801978c <USB_ActivateEndpoint+0x2b4>)
 80194fe:	400a      	ands	r2, r1
 8019500:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8019502:	683b      	ldr	r3, [r7, #0]
 8019504:	78db      	ldrb	r3, [r3, #3]
 8019506:	2b03      	cmp	r3, #3
 8019508:	d017      	beq.n	801953a <USB_ActivateEndpoint+0x62>
 801950a:	dc28      	bgt.n	801955e <USB_ActivateEndpoint+0x86>
 801950c:	2b02      	cmp	r3, #2
 801950e:	d00e      	beq.n	801952e <USB_ActivateEndpoint+0x56>
 8019510:	dc25      	bgt.n	801955e <USB_ActivateEndpoint+0x86>
 8019512:	2b00      	cmp	r3, #0
 8019514:	d002      	beq.n	801951c <USB_ActivateEndpoint+0x44>
 8019516:	2b01      	cmp	r3, #1
 8019518:	d018      	beq.n	801954c <USB_ActivateEndpoint+0x74>
 801951a:	e020      	b.n	801955e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801951c:	226c      	movs	r2, #108	@ 0x6c
 801951e:	18bb      	adds	r3, r7, r2
 8019520:	18ba      	adds	r2, r7, r2
 8019522:	8812      	ldrh	r2, [r2, #0]
 8019524:	2180      	movs	r1, #128	@ 0x80
 8019526:	0089      	lsls	r1, r1, #2
 8019528:	430a      	orrs	r2, r1
 801952a:	801a      	strh	r2, [r3, #0]
      break;
 801952c:	e01c      	b.n	8019568 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801952e:	226c      	movs	r2, #108	@ 0x6c
 8019530:	18bb      	adds	r3, r7, r2
 8019532:	18ba      	adds	r2, r7, r2
 8019534:	8812      	ldrh	r2, [r2, #0]
 8019536:	801a      	strh	r2, [r3, #0]
      break;
 8019538:	e016      	b.n	8019568 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801953a:	226c      	movs	r2, #108	@ 0x6c
 801953c:	18bb      	adds	r3, r7, r2
 801953e:	18ba      	adds	r2, r7, r2
 8019540:	8812      	ldrh	r2, [r2, #0]
 8019542:	21c0      	movs	r1, #192	@ 0xc0
 8019544:	00c9      	lsls	r1, r1, #3
 8019546:	430a      	orrs	r2, r1
 8019548:	801a      	strh	r2, [r3, #0]
      break;
 801954a:	e00d      	b.n	8019568 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801954c:	226c      	movs	r2, #108	@ 0x6c
 801954e:	18bb      	adds	r3, r7, r2
 8019550:	18ba      	adds	r2, r7, r2
 8019552:	8812      	ldrh	r2, [r2, #0]
 8019554:	2180      	movs	r1, #128	@ 0x80
 8019556:	00c9      	lsls	r1, r1, #3
 8019558:	430a      	orrs	r2, r1
 801955a:	801a      	strh	r2, [r3, #0]
      break;
 801955c:	e004      	b.n	8019568 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801955e:	236f      	movs	r3, #111	@ 0x6f
 8019560:	18fb      	adds	r3, r7, r3
 8019562:	2201      	movs	r2, #1
 8019564:	701a      	strb	r2, [r3, #0]
      break;
 8019566:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8019568:	687a      	ldr	r2, [r7, #4]
 801956a:	683b      	ldr	r3, [r7, #0]
 801956c:	781b      	ldrb	r3, [r3, #0]
 801956e:	009b      	lsls	r3, r3, #2
 8019570:	18d3      	adds	r3, r2, r3
 8019572:	226c      	movs	r2, #108	@ 0x6c
 8019574:	18ba      	adds	r2, r7, r2
 8019576:	8812      	ldrh	r2, [r2, #0]
 8019578:	4985      	ldr	r1, [pc, #532]	@ (8019790 <USB_ActivateEndpoint+0x2b8>)
 801957a:	430a      	orrs	r2, r1
 801957c:	b292      	uxth	r2, r2
 801957e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8019580:	687a      	ldr	r2, [r7, #4]
 8019582:	683b      	ldr	r3, [r7, #0]
 8019584:	781b      	ldrb	r3, [r3, #0]
 8019586:	009b      	lsls	r3, r3, #2
 8019588:	18d3      	adds	r3, r2, r3
 801958a:	881b      	ldrh	r3, [r3, #0]
 801958c:	b29b      	uxth	r3, r3
 801958e:	b21b      	sxth	r3, r3
 8019590:	4a80      	ldr	r2, [pc, #512]	@ (8019794 <USB_ActivateEndpoint+0x2bc>)
 8019592:	4013      	ands	r3, r2
 8019594:	b21a      	sxth	r2, r3
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	781b      	ldrb	r3, [r3, #0]
 801959a:	b21b      	sxth	r3, r3
 801959c:	4313      	orrs	r3, r2
 801959e:	b21a      	sxth	r2, r3
 80195a0:	2166      	movs	r1, #102	@ 0x66
 80195a2:	187b      	adds	r3, r7, r1
 80195a4:	801a      	strh	r2, [r3, #0]
 80195a6:	687a      	ldr	r2, [r7, #4]
 80195a8:	683b      	ldr	r3, [r7, #0]
 80195aa:	781b      	ldrb	r3, [r3, #0]
 80195ac:	009b      	lsls	r3, r3, #2
 80195ae:	18d3      	adds	r3, r2, r3
 80195b0:	187a      	adds	r2, r7, r1
 80195b2:	8812      	ldrh	r2, [r2, #0]
 80195b4:	4976      	ldr	r1, [pc, #472]	@ (8019790 <USB_ActivateEndpoint+0x2b8>)
 80195b6:	430a      	orrs	r2, r1
 80195b8:	b292      	uxth	r2, r2
 80195ba:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80195bc:	683b      	ldr	r3, [r7, #0]
 80195be:	7b1b      	ldrb	r3, [r3, #12]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d000      	beq.n	80195c6 <USB_ActivateEndpoint+0xee>
 80195c4:	e178      	b.n	80198b8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	785b      	ldrb	r3, [r3, #1]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d100      	bne.n	80195d0 <USB_ActivateEndpoint+0xf8>
 80195ce:	e07a      	b.n	80196c6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	61bb      	str	r3, [r7, #24]
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	2250      	movs	r2, #80	@ 0x50
 80195d8:	5a9b      	ldrh	r3, [r3, r2]
 80195da:	b29b      	uxth	r3, r3
 80195dc:	001a      	movs	r2, r3
 80195de:	69bb      	ldr	r3, [r7, #24]
 80195e0:	189b      	adds	r3, r3, r2
 80195e2:	61bb      	str	r3, [r7, #24]
 80195e4:	683b      	ldr	r3, [r7, #0]
 80195e6:	781b      	ldrb	r3, [r3, #0]
 80195e8:	00da      	lsls	r2, r3, #3
 80195ea:	69bb      	ldr	r3, [r7, #24]
 80195ec:	18d3      	adds	r3, r2, r3
 80195ee:	2280      	movs	r2, #128	@ 0x80
 80195f0:	00d2      	lsls	r2, r2, #3
 80195f2:	4694      	mov	ip, r2
 80195f4:	4463      	add	r3, ip
 80195f6:	617b      	str	r3, [r7, #20]
 80195f8:	683b      	ldr	r3, [r7, #0]
 80195fa:	88db      	ldrh	r3, [r3, #6]
 80195fc:	085b      	lsrs	r3, r3, #1
 80195fe:	b29b      	uxth	r3, r3
 8019600:	18db      	adds	r3, r3, r3
 8019602:	b29a      	uxth	r2, r3
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019608:	687a      	ldr	r2, [r7, #4]
 801960a:	683b      	ldr	r3, [r7, #0]
 801960c:	781b      	ldrb	r3, [r3, #0]
 801960e:	009b      	lsls	r3, r3, #2
 8019610:	18d2      	adds	r2, r2, r3
 8019612:	2112      	movs	r1, #18
 8019614:	187b      	adds	r3, r7, r1
 8019616:	8812      	ldrh	r2, [r2, #0]
 8019618:	801a      	strh	r2, [r3, #0]
 801961a:	187b      	adds	r3, r7, r1
 801961c:	881b      	ldrh	r3, [r3, #0]
 801961e:	2240      	movs	r2, #64	@ 0x40
 8019620:	4013      	ands	r3, r2
 8019622:	d016      	beq.n	8019652 <USB_ActivateEndpoint+0x17a>
 8019624:	687a      	ldr	r2, [r7, #4]
 8019626:	683b      	ldr	r3, [r7, #0]
 8019628:	781b      	ldrb	r3, [r3, #0]
 801962a:	009b      	lsls	r3, r3, #2
 801962c:	18d3      	adds	r3, r2, r3
 801962e:	881b      	ldrh	r3, [r3, #0]
 8019630:	b29a      	uxth	r2, r3
 8019632:	2010      	movs	r0, #16
 8019634:	183b      	adds	r3, r7, r0
 8019636:	4957      	ldr	r1, [pc, #348]	@ (8019794 <USB_ActivateEndpoint+0x2bc>)
 8019638:	400a      	ands	r2, r1
 801963a:	801a      	strh	r2, [r3, #0]
 801963c:	687a      	ldr	r2, [r7, #4]
 801963e:	683b      	ldr	r3, [r7, #0]
 8019640:	781b      	ldrb	r3, [r3, #0]
 8019642:	009b      	lsls	r3, r3, #2
 8019644:	18d3      	adds	r3, r2, r3
 8019646:	183a      	adds	r2, r7, r0
 8019648:	8812      	ldrh	r2, [r2, #0]
 801964a:	4953      	ldr	r1, [pc, #332]	@ (8019798 <USB_ActivateEndpoint+0x2c0>)
 801964c:	430a      	orrs	r2, r1
 801964e:	b292      	uxth	r2, r2
 8019650:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019652:	683b      	ldr	r3, [r7, #0]
 8019654:	78db      	ldrb	r3, [r3, #3]
 8019656:	2b01      	cmp	r3, #1
 8019658:	d01d      	beq.n	8019696 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801965a:	687a      	ldr	r2, [r7, #4]
 801965c:	683b      	ldr	r3, [r7, #0]
 801965e:	781b      	ldrb	r3, [r3, #0]
 8019660:	009b      	lsls	r3, r3, #2
 8019662:	18d3      	adds	r3, r2, r3
 8019664:	881b      	ldrh	r3, [r3, #0]
 8019666:	b29a      	uxth	r2, r3
 8019668:	200c      	movs	r0, #12
 801966a:	183b      	adds	r3, r7, r0
 801966c:	494b      	ldr	r1, [pc, #300]	@ (801979c <USB_ActivateEndpoint+0x2c4>)
 801966e:	400a      	ands	r2, r1
 8019670:	801a      	strh	r2, [r3, #0]
 8019672:	183b      	adds	r3, r7, r0
 8019674:	183a      	adds	r2, r7, r0
 8019676:	8812      	ldrh	r2, [r2, #0]
 8019678:	2120      	movs	r1, #32
 801967a:	404a      	eors	r2, r1
 801967c:	801a      	strh	r2, [r3, #0]
 801967e:	687a      	ldr	r2, [r7, #4]
 8019680:	683b      	ldr	r3, [r7, #0]
 8019682:	781b      	ldrb	r3, [r3, #0]
 8019684:	009b      	lsls	r3, r3, #2
 8019686:	18d3      	adds	r3, r2, r3
 8019688:	183a      	adds	r2, r7, r0
 801968a:	8812      	ldrh	r2, [r2, #0]
 801968c:	4940      	ldr	r1, [pc, #256]	@ (8019790 <USB_ActivateEndpoint+0x2b8>)
 801968e:	430a      	orrs	r2, r1
 8019690:	b292      	uxth	r2, r2
 8019692:	801a      	strh	r2, [r3, #0]
 8019694:	e2b4      	b.n	8019c00 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019696:	687a      	ldr	r2, [r7, #4]
 8019698:	683b      	ldr	r3, [r7, #0]
 801969a:	781b      	ldrb	r3, [r3, #0]
 801969c:	009b      	lsls	r3, r3, #2
 801969e:	18d3      	adds	r3, r2, r3
 80196a0:	881b      	ldrh	r3, [r3, #0]
 80196a2:	b29a      	uxth	r2, r3
 80196a4:	200e      	movs	r0, #14
 80196a6:	183b      	adds	r3, r7, r0
 80196a8:	493c      	ldr	r1, [pc, #240]	@ (801979c <USB_ActivateEndpoint+0x2c4>)
 80196aa:	400a      	ands	r2, r1
 80196ac:	801a      	strh	r2, [r3, #0]
 80196ae:	687a      	ldr	r2, [r7, #4]
 80196b0:	683b      	ldr	r3, [r7, #0]
 80196b2:	781b      	ldrb	r3, [r3, #0]
 80196b4:	009b      	lsls	r3, r3, #2
 80196b6:	18d3      	adds	r3, r2, r3
 80196b8:	183a      	adds	r2, r7, r0
 80196ba:	8812      	ldrh	r2, [r2, #0]
 80196bc:	4934      	ldr	r1, [pc, #208]	@ (8019790 <USB_ActivateEndpoint+0x2b8>)
 80196be:	430a      	orrs	r2, r1
 80196c0:	b292      	uxth	r2, r2
 80196c2:	801a      	strh	r2, [r3, #0]
 80196c4:	e29c      	b.n	8019c00 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	2250      	movs	r2, #80	@ 0x50
 80196ce:	5a9b      	ldrh	r3, [r3, r2]
 80196d0:	b29b      	uxth	r3, r3
 80196d2:	001a      	movs	r2, r3
 80196d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196d6:	189b      	adds	r3, r3, r2
 80196d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80196da:	683b      	ldr	r3, [r7, #0]
 80196dc:	781b      	ldrb	r3, [r3, #0]
 80196de:	00da      	lsls	r2, r3, #3
 80196e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80196e2:	18d3      	adds	r3, r2, r3
 80196e4:	4a2e      	ldr	r2, [pc, #184]	@ (80197a0 <USB_ActivateEndpoint+0x2c8>)
 80196e6:	4694      	mov	ip, r2
 80196e8:	4463      	add	r3, ip
 80196ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80196ec:	683b      	ldr	r3, [r7, #0]
 80196ee:	88db      	ldrh	r3, [r3, #6]
 80196f0:	085b      	lsrs	r3, r3, #1
 80196f2:	b29b      	uxth	r3, r3
 80196f4:	18db      	adds	r3, r3, r3
 80196f6:	b29a      	uxth	r2, r3
 80196f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	2250      	movs	r2, #80	@ 0x50
 8019704:	5a9b      	ldrh	r3, [r3, r2]
 8019706:	b29b      	uxth	r3, r3
 8019708:	001a      	movs	r2, r3
 801970a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801970c:	189b      	adds	r3, r3, r2
 801970e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019710:	683b      	ldr	r3, [r7, #0]
 8019712:	781b      	ldrb	r3, [r3, #0]
 8019714:	00da      	lsls	r2, r3, #3
 8019716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019718:	18d3      	adds	r3, r2, r3
 801971a:	4a22      	ldr	r2, [pc, #136]	@ (80197a4 <USB_ActivateEndpoint+0x2cc>)
 801971c:	4694      	mov	ip, r2
 801971e:	4463      	add	r3, ip
 8019720:	627b      	str	r3, [r7, #36]	@ 0x24
 8019722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019724:	881b      	ldrh	r3, [r3, #0]
 8019726:	b29b      	uxth	r3, r3
 8019728:	059b      	lsls	r3, r3, #22
 801972a:	0d9b      	lsrs	r3, r3, #22
 801972c:	b29a      	uxth	r2, r3
 801972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019730:	801a      	strh	r2, [r3, #0]
 8019732:	683b      	ldr	r3, [r7, #0]
 8019734:	691b      	ldr	r3, [r3, #16]
 8019736:	2b3e      	cmp	r3, #62	@ 0x3e
 8019738:	d91a      	bls.n	8019770 <USB_ActivateEndpoint+0x298>
 801973a:	683b      	ldr	r3, [r7, #0]
 801973c:	691b      	ldr	r3, [r3, #16]
 801973e:	095b      	lsrs	r3, r3, #5
 8019740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019742:	683b      	ldr	r3, [r7, #0]
 8019744:	691b      	ldr	r3, [r3, #16]
 8019746:	221f      	movs	r2, #31
 8019748:	4013      	ands	r3, r2
 801974a:	d102      	bne.n	8019752 <USB_ActivateEndpoint+0x27a>
 801974c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801974e:	3b01      	subs	r3, #1
 8019750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8019752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019754:	881b      	ldrh	r3, [r3, #0]
 8019756:	b29a      	uxth	r2, r3
 8019758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801975a:	b29b      	uxth	r3, r3
 801975c:	029b      	lsls	r3, r3, #10
 801975e:	b29b      	uxth	r3, r3
 8019760:	4313      	orrs	r3, r2
 8019762:	b29b      	uxth	r3, r3
 8019764:	4a10      	ldr	r2, [pc, #64]	@ (80197a8 <USB_ActivateEndpoint+0x2d0>)
 8019766:	4313      	orrs	r3, r2
 8019768:	b29a      	uxth	r2, r3
 801976a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801976c:	801a      	strh	r2, [r3, #0]
 801976e:	e034      	b.n	80197da <USB_ActivateEndpoint+0x302>
 8019770:	683b      	ldr	r3, [r7, #0]
 8019772:	691b      	ldr	r3, [r3, #16]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d119      	bne.n	80197ac <USB_ActivateEndpoint+0x2d4>
 8019778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801977a:	881b      	ldrh	r3, [r3, #0]
 801977c:	b29b      	uxth	r3, r3
 801977e:	4a0a      	ldr	r2, [pc, #40]	@ (80197a8 <USB_ActivateEndpoint+0x2d0>)
 8019780:	4313      	orrs	r3, r2
 8019782:	b29a      	uxth	r2, r3
 8019784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019786:	801a      	strh	r2, [r3, #0]
 8019788:	e027      	b.n	80197da <USB_ActivateEndpoint+0x302>
 801978a:	46c0      	nop			@ (mov r8, r8)
 801978c:	ffff898f 	.word	0xffff898f
 8019790:	ffff8080 	.word	0xffff8080
 8019794:	ffff8f8f 	.word	0xffff8f8f
 8019798:	ffff80c0 	.word	0xffff80c0
 801979c:	ffff8fbf 	.word	0xffff8fbf
 80197a0:	00000404 	.word	0x00000404
 80197a4:	00000406 	.word	0x00000406
 80197a8:	ffff8000 	.word	0xffff8000
 80197ac:	683b      	ldr	r3, [r7, #0]
 80197ae:	691b      	ldr	r3, [r3, #16]
 80197b0:	085b      	lsrs	r3, r3, #1
 80197b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	691b      	ldr	r3, [r3, #16]
 80197b8:	2201      	movs	r2, #1
 80197ba:	4013      	ands	r3, r2
 80197bc:	d002      	beq.n	80197c4 <USB_ActivateEndpoint+0x2ec>
 80197be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80197c0:	3301      	adds	r3, #1
 80197c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80197c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197c6:	881b      	ldrh	r3, [r3, #0]
 80197c8:	b29a      	uxth	r2, r3
 80197ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80197cc:	b29b      	uxth	r3, r3
 80197ce:	029b      	lsls	r3, r3, #10
 80197d0:	b29b      	uxth	r3, r3
 80197d2:	4313      	orrs	r3, r2
 80197d4:	b29a      	uxth	r2, r3
 80197d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80197da:	687a      	ldr	r2, [r7, #4]
 80197dc:	683b      	ldr	r3, [r7, #0]
 80197de:	781b      	ldrb	r3, [r3, #0]
 80197e0:	009b      	lsls	r3, r3, #2
 80197e2:	18d2      	adds	r2, r2, r3
 80197e4:	2122      	movs	r1, #34	@ 0x22
 80197e6:	187b      	adds	r3, r7, r1
 80197e8:	8812      	ldrh	r2, [r2, #0]
 80197ea:	801a      	strh	r2, [r3, #0]
 80197ec:	187b      	adds	r3, r7, r1
 80197ee:	881a      	ldrh	r2, [r3, #0]
 80197f0:	2380      	movs	r3, #128	@ 0x80
 80197f2:	01db      	lsls	r3, r3, #7
 80197f4:	4013      	ands	r3, r2
 80197f6:	d016      	beq.n	8019826 <USB_ActivateEndpoint+0x34e>
 80197f8:	687a      	ldr	r2, [r7, #4]
 80197fa:	683b      	ldr	r3, [r7, #0]
 80197fc:	781b      	ldrb	r3, [r3, #0]
 80197fe:	009b      	lsls	r3, r3, #2
 8019800:	18d3      	adds	r3, r2, r3
 8019802:	881b      	ldrh	r3, [r3, #0]
 8019804:	b29a      	uxth	r2, r3
 8019806:	2020      	movs	r0, #32
 8019808:	183b      	adds	r3, r7, r0
 801980a:	49dd      	ldr	r1, [pc, #884]	@ (8019b80 <USB_ActivateEndpoint+0x6a8>)
 801980c:	400a      	ands	r2, r1
 801980e:	801a      	strh	r2, [r3, #0]
 8019810:	687a      	ldr	r2, [r7, #4]
 8019812:	683b      	ldr	r3, [r7, #0]
 8019814:	781b      	ldrb	r3, [r3, #0]
 8019816:	009b      	lsls	r3, r3, #2
 8019818:	18d3      	adds	r3, r2, r3
 801981a:	183a      	adds	r2, r7, r0
 801981c:	8812      	ldrh	r2, [r2, #0]
 801981e:	49d9      	ldr	r1, [pc, #868]	@ (8019b84 <USB_ActivateEndpoint+0x6ac>)
 8019820:	430a      	orrs	r2, r1
 8019822:	b292      	uxth	r2, r2
 8019824:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8019826:	683b      	ldr	r3, [r7, #0]
 8019828:	781b      	ldrb	r3, [r3, #0]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d125      	bne.n	801987a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801982e:	687a      	ldr	r2, [r7, #4]
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	781b      	ldrb	r3, [r3, #0]
 8019834:	009b      	lsls	r3, r3, #2
 8019836:	18d3      	adds	r3, r2, r3
 8019838:	881b      	ldrh	r3, [r3, #0]
 801983a:	b29a      	uxth	r2, r3
 801983c:	201c      	movs	r0, #28
 801983e:	183b      	adds	r3, r7, r0
 8019840:	49d1      	ldr	r1, [pc, #836]	@ (8019b88 <USB_ActivateEndpoint+0x6b0>)
 8019842:	400a      	ands	r2, r1
 8019844:	801a      	strh	r2, [r3, #0]
 8019846:	183b      	adds	r3, r7, r0
 8019848:	183a      	adds	r2, r7, r0
 801984a:	8812      	ldrh	r2, [r2, #0]
 801984c:	2180      	movs	r1, #128	@ 0x80
 801984e:	0149      	lsls	r1, r1, #5
 8019850:	404a      	eors	r2, r1
 8019852:	801a      	strh	r2, [r3, #0]
 8019854:	183b      	adds	r3, r7, r0
 8019856:	183a      	adds	r2, r7, r0
 8019858:	8812      	ldrh	r2, [r2, #0]
 801985a:	2180      	movs	r1, #128	@ 0x80
 801985c:	0189      	lsls	r1, r1, #6
 801985e:	404a      	eors	r2, r1
 8019860:	801a      	strh	r2, [r3, #0]
 8019862:	687a      	ldr	r2, [r7, #4]
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	781b      	ldrb	r3, [r3, #0]
 8019868:	009b      	lsls	r3, r3, #2
 801986a:	18d3      	adds	r3, r2, r3
 801986c:	183a      	adds	r2, r7, r0
 801986e:	8812      	ldrh	r2, [r2, #0]
 8019870:	49c6      	ldr	r1, [pc, #792]	@ (8019b8c <USB_ActivateEndpoint+0x6b4>)
 8019872:	430a      	orrs	r2, r1
 8019874:	b292      	uxth	r2, r2
 8019876:	801a      	strh	r2, [r3, #0]
 8019878:	e1c2      	b.n	8019c00 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801987a:	687a      	ldr	r2, [r7, #4]
 801987c:	683b      	ldr	r3, [r7, #0]
 801987e:	781b      	ldrb	r3, [r3, #0]
 8019880:	009b      	lsls	r3, r3, #2
 8019882:	18d3      	adds	r3, r2, r3
 8019884:	881b      	ldrh	r3, [r3, #0]
 8019886:	b29a      	uxth	r2, r3
 8019888:	201e      	movs	r0, #30
 801988a:	183b      	adds	r3, r7, r0
 801988c:	49be      	ldr	r1, [pc, #760]	@ (8019b88 <USB_ActivateEndpoint+0x6b0>)
 801988e:	400a      	ands	r2, r1
 8019890:	801a      	strh	r2, [r3, #0]
 8019892:	183b      	adds	r3, r7, r0
 8019894:	183a      	adds	r2, r7, r0
 8019896:	8812      	ldrh	r2, [r2, #0]
 8019898:	2180      	movs	r1, #128	@ 0x80
 801989a:	0189      	lsls	r1, r1, #6
 801989c:	404a      	eors	r2, r1
 801989e:	801a      	strh	r2, [r3, #0]
 80198a0:	687a      	ldr	r2, [r7, #4]
 80198a2:	683b      	ldr	r3, [r7, #0]
 80198a4:	781b      	ldrb	r3, [r3, #0]
 80198a6:	009b      	lsls	r3, r3, #2
 80198a8:	18d3      	adds	r3, r2, r3
 80198aa:	183a      	adds	r2, r7, r0
 80198ac:	8812      	ldrh	r2, [r2, #0]
 80198ae:	49b7      	ldr	r1, [pc, #732]	@ (8019b8c <USB_ActivateEndpoint+0x6b4>)
 80198b0:	430a      	orrs	r2, r1
 80198b2:	b292      	uxth	r2, r2
 80198b4:	801a      	strh	r2, [r3, #0]
 80198b6:	e1a3      	b.n	8019c00 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80198b8:	683b      	ldr	r3, [r7, #0]
 80198ba:	78db      	ldrb	r3, [r3, #3]
 80198bc:	2b02      	cmp	r3, #2
 80198be:	d117      	bne.n	80198f0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80198c0:	687a      	ldr	r2, [r7, #4]
 80198c2:	683b      	ldr	r3, [r7, #0]
 80198c4:	781b      	ldrb	r3, [r3, #0]
 80198c6:	009b      	lsls	r3, r3, #2
 80198c8:	18d3      	adds	r3, r2, r3
 80198ca:	881b      	ldrh	r3, [r3, #0]
 80198cc:	b29a      	uxth	r2, r3
 80198ce:	2062      	movs	r0, #98	@ 0x62
 80198d0:	183b      	adds	r3, r7, r0
 80198d2:	49ab      	ldr	r1, [pc, #684]	@ (8019b80 <USB_ActivateEndpoint+0x6a8>)
 80198d4:	400a      	ands	r2, r1
 80198d6:	801a      	strh	r2, [r3, #0]
 80198d8:	687a      	ldr	r2, [r7, #4]
 80198da:	683b      	ldr	r3, [r7, #0]
 80198dc:	781b      	ldrb	r3, [r3, #0]
 80198de:	009b      	lsls	r3, r3, #2
 80198e0:	18d3      	adds	r3, r2, r3
 80198e2:	183a      	adds	r2, r7, r0
 80198e4:	8812      	ldrh	r2, [r2, #0]
 80198e6:	49aa      	ldr	r1, [pc, #680]	@ (8019b90 <USB_ActivateEndpoint+0x6b8>)
 80198e8:	430a      	orrs	r2, r1
 80198ea:	b292      	uxth	r2, r2
 80198ec:	801a      	strh	r2, [r3, #0]
 80198ee:	e016      	b.n	801991e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80198f0:	687a      	ldr	r2, [r7, #4]
 80198f2:	683b      	ldr	r3, [r7, #0]
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	009b      	lsls	r3, r3, #2
 80198f8:	18d3      	adds	r3, r2, r3
 80198fa:	881b      	ldrh	r3, [r3, #0]
 80198fc:	b29a      	uxth	r2, r3
 80198fe:	2064      	movs	r0, #100	@ 0x64
 8019900:	183b      	adds	r3, r7, r0
 8019902:	49a4      	ldr	r1, [pc, #656]	@ (8019b94 <USB_ActivateEndpoint+0x6bc>)
 8019904:	400a      	ands	r2, r1
 8019906:	801a      	strh	r2, [r3, #0]
 8019908:	687a      	ldr	r2, [r7, #4]
 801990a:	683b      	ldr	r3, [r7, #0]
 801990c:	781b      	ldrb	r3, [r3, #0]
 801990e:	009b      	lsls	r3, r3, #2
 8019910:	18d3      	adds	r3, r2, r3
 8019912:	183a      	adds	r2, r7, r0
 8019914:	8812      	ldrh	r2, [r2, #0]
 8019916:	499d      	ldr	r1, [pc, #628]	@ (8019b8c <USB_ActivateEndpoint+0x6b4>)
 8019918:	430a      	orrs	r2, r1
 801991a:	b292      	uxth	r2, r2
 801991c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	2250      	movs	r2, #80	@ 0x50
 8019926:	5a9b      	ldrh	r3, [r3, r2]
 8019928:	b29b      	uxth	r3, r3
 801992a:	001a      	movs	r2, r3
 801992c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801992e:	189b      	adds	r3, r3, r2
 8019930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019932:	683b      	ldr	r3, [r7, #0]
 8019934:	781b      	ldrb	r3, [r3, #0]
 8019936:	00da      	lsls	r2, r3, #3
 8019938:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801993a:	18d3      	adds	r3, r2, r3
 801993c:	2280      	movs	r2, #128	@ 0x80
 801993e:	00d2      	lsls	r2, r2, #3
 8019940:	4694      	mov	ip, r2
 8019942:	4463      	add	r3, ip
 8019944:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019946:	683b      	ldr	r3, [r7, #0]
 8019948:	891b      	ldrh	r3, [r3, #8]
 801994a:	085b      	lsrs	r3, r3, #1
 801994c:	b29b      	uxth	r3, r3
 801994e:	18db      	adds	r3, r3, r3
 8019950:	b29a      	uxth	r2, r3
 8019952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019954:	801a      	strh	r2, [r3, #0]
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	657b      	str	r3, [r7, #84]	@ 0x54
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	2250      	movs	r2, #80	@ 0x50
 801995e:	5a9b      	ldrh	r3, [r3, r2]
 8019960:	b29b      	uxth	r3, r3
 8019962:	001a      	movs	r2, r3
 8019964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019966:	189b      	adds	r3, r3, r2
 8019968:	657b      	str	r3, [r7, #84]	@ 0x54
 801996a:	683b      	ldr	r3, [r7, #0]
 801996c:	781b      	ldrb	r3, [r3, #0]
 801996e:	00da      	lsls	r2, r3, #3
 8019970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019972:	18d3      	adds	r3, r2, r3
 8019974:	4a88      	ldr	r2, [pc, #544]	@ (8019b98 <USB_ActivateEndpoint+0x6c0>)
 8019976:	4694      	mov	ip, r2
 8019978:	4463      	add	r3, ip
 801997a:	653b      	str	r3, [r7, #80]	@ 0x50
 801997c:	683b      	ldr	r3, [r7, #0]
 801997e:	895b      	ldrh	r3, [r3, #10]
 8019980:	085b      	lsrs	r3, r3, #1
 8019982:	b29b      	uxth	r3, r3
 8019984:	18db      	adds	r3, r3, r3
 8019986:	b29a      	uxth	r2, r3
 8019988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801998a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801998c:	683b      	ldr	r3, [r7, #0]
 801998e:	785b      	ldrb	r3, [r3, #1]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d000      	beq.n	8019996 <USB_ActivateEndpoint+0x4be>
 8019994:	e087      	b.n	8019aa6 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019996:	687a      	ldr	r2, [r7, #4]
 8019998:	683b      	ldr	r3, [r7, #0]
 801999a:	781b      	ldrb	r3, [r3, #0]
 801999c:	009b      	lsls	r3, r3, #2
 801999e:	18d2      	adds	r2, r2, r3
 80199a0:	2140      	movs	r1, #64	@ 0x40
 80199a2:	187b      	adds	r3, r7, r1
 80199a4:	8812      	ldrh	r2, [r2, #0]
 80199a6:	801a      	strh	r2, [r3, #0]
 80199a8:	187b      	adds	r3, r7, r1
 80199aa:	881a      	ldrh	r2, [r3, #0]
 80199ac:	2380      	movs	r3, #128	@ 0x80
 80199ae:	01db      	lsls	r3, r3, #7
 80199b0:	4013      	ands	r3, r2
 80199b2:	d016      	beq.n	80199e2 <USB_ActivateEndpoint+0x50a>
 80199b4:	687a      	ldr	r2, [r7, #4]
 80199b6:	683b      	ldr	r3, [r7, #0]
 80199b8:	781b      	ldrb	r3, [r3, #0]
 80199ba:	009b      	lsls	r3, r3, #2
 80199bc:	18d3      	adds	r3, r2, r3
 80199be:	881b      	ldrh	r3, [r3, #0]
 80199c0:	b29a      	uxth	r2, r3
 80199c2:	203e      	movs	r0, #62	@ 0x3e
 80199c4:	183b      	adds	r3, r7, r0
 80199c6:	496e      	ldr	r1, [pc, #440]	@ (8019b80 <USB_ActivateEndpoint+0x6a8>)
 80199c8:	400a      	ands	r2, r1
 80199ca:	801a      	strh	r2, [r3, #0]
 80199cc:	687a      	ldr	r2, [r7, #4]
 80199ce:	683b      	ldr	r3, [r7, #0]
 80199d0:	781b      	ldrb	r3, [r3, #0]
 80199d2:	009b      	lsls	r3, r3, #2
 80199d4:	18d3      	adds	r3, r2, r3
 80199d6:	183a      	adds	r2, r7, r0
 80199d8:	8812      	ldrh	r2, [r2, #0]
 80199da:	496a      	ldr	r1, [pc, #424]	@ (8019b84 <USB_ActivateEndpoint+0x6ac>)
 80199dc:	430a      	orrs	r2, r1
 80199de:	b292      	uxth	r2, r2
 80199e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80199e2:	687a      	ldr	r2, [r7, #4]
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	781b      	ldrb	r3, [r3, #0]
 80199e8:	009b      	lsls	r3, r3, #2
 80199ea:	18d2      	adds	r2, r2, r3
 80199ec:	213c      	movs	r1, #60	@ 0x3c
 80199ee:	187b      	adds	r3, r7, r1
 80199f0:	8812      	ldrh	r2, [r2, #0]
 80199f2:	801a      	strh	r2, [r3, #0]
 80199f4:	187b      	adds	r3, r7, r1
 80199f6:	881b      	ldrh	r3, [r3, #0]
 80199f8:	2240      	movs	r2, #64	@ 0x40
 80199fa:	4013      	ands	r3, r2
 80199fc:	d016      	beq.n	8019a2c <USB_ActivateEndpoint+0x554>
 80199fe:	687a      	ldr	r2, [r7, #4]
 8019a00:	683b      	ldr	r3, [r7, #0]
 8019a02:	781b      	ldrb	r3, [r3, #0]
 8019a04:	009b      	lsls	r3, r3, #2
 8019a06:	18d3      	adds	r3, r2, r3
 8019a08:	881b      	ldrh	r3, [r3, #0]
 8019a0a:	b29a      	uxth	r2, r3
 8019a0c:	203a      	movs	r0, #58	@ 0x3a
 8019a0e:	183b      	adds	r3, r7, r0
 8019a10:	495b      	ldr	r1, [pc, #364]	@ (8019b80 <USB_ActivateEndpoint+0x6a8>)
 8019a12:	400a      	ands	r2, r1
 8019a14:	801a      	strh	r2, [r3, #0]
 8019a16:	687a      	ldr	r2, [r7, #4]
 8019a18:	683b      	ldr	r3, [r7, #0]
 8019a1a:	781b      	ldrb	r3, [r3, #0]
 8019a1c:	009b      	lsls	r3, r3, #2
 8019a1e:	18d3      	adds	r3, r2, r3
 8019a20:	183a      	adds	r2, r7, r0
 8019a22:	8812      	ldrh	r2, [r2, #0]
 8019a24:	495d      	ldr	r1, [pc, #372]	@ (8019b9c <USB_ActivateEndpoint+0x6c4>)
 8019a26:	430a      	orrs	r2, r1
 8019a28:	b292      	uxth	r2, r2
 8019a2a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019a2c:	687a      	ldr	r2, [r7, #4]
 8019a2e:	683b      	ldr	r3, [r7, #0]
 8019a30:	781b      	ldrb	r3, [r3, #0]
 8019a32:	009b      	lsls	r3, r3, #2
 8019a34:	18d3      	adds	r3, r2, r3
 8019a36:	881b      	ldrh	r3, [r3, #0]
 8019a38:	b29a      	uxth	r2, r3
 8019a3a:	2038      	movs	r0, #56	@ 0x38
 8019a3c:	183b      	adds	r3, r7, r0
 8019a3e:	4952      	ldr	r1, [pc, #328]	@ (8019b88 <USB_ActivateEndpoint+0x6b0>)
 8019a40:	400a      	ands	r2, r1
 8019a42:	801a      	strh	r2, [r3, #0]
 8019a44:	183b      	adds	r3, r7, r0
 8019a46:	183a      	adds	r2, r7, r0
 8019a48:	8812      	ldrh	r2, [r2, #0]
 8019a4a:	2180      	movs	r1, #128	@ 0x80
 8019a4c:	0149      	lsls	r1, r1, #5
 8019a4e:	404a      	eors	r2, r1
 8019a50:	801a      	strh	r2, [r3, #0]
 8019a52:	183b      	adds	r3, r7, r0
 8019a54:	183a      	adds	r2, r7, r0
 8019a56:	8812      	ldrh	r2, [r2, #0]
 8019a58:	2180      	movs	r1, #128	@ 0x80
 8019a5a:	0189      	lsls	r1, r1, #6
 8019a5c:	404a      	eors	r2, r1
 8019a5e:	801a      	strh	r2, [r3, #0]
 8019a60:	687a      	ldr	r2, [r7, #4]
 8019a62:	683b      	ldr	r3, [r7, #0]
 8019a64:	781b      	ldrb	r3, [r3, #0]
 8019a66:	009b      	lsls	r3, r3, #2
 8019a68:	18d3      	adds	r3, r2, r3
 8019a6a:	183a      	adds	r2, r7, r0
 8019a6c:	8812      	ldrh	r2, [r2, #0]
 8019a6e:	4947      	ldr	r1, [pc, #284]	@ (8019b8c <USB_ActivateEndpoint+0x6b4>)
 8019a70:	430a      	orrs	r2, r1
 8019a72:	b292      	uxth	r2, r2
 8019a74:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019a76:	687a      	ldr	r2, [r7, #4]
 8019a78:	683b      	ldr	r3, [r7, #0]
 8019a7a:	781b      	ldrb	r3, [r3, #0]
 8019a7c:	009b      	lsls	r3, r3, #2
 8019a7e:	18d3      	adds	r3, r2, r3
 8019a80:	881b      	ldrh	r3, [r3, #0]
 8019a82:	b29a      	uxth	r2, r3
 8019a84:	2036      	movs	r0, #54	@ 0x36
 8019a86:	183b      	adds	r3, r7, r0
 8019a88:	4945      	ldr	r1, [pc, #276]	@ (8019ba0 <USB_ActivateEndpoint+0x6c8>)
 8019a8a:	400a      	ands	r2, r1
 8019a8c:	801a      	strh	r2, [r3, #0]
 8019a8e:	687a      	ldr	r2, [r7, #4]
 8019a90:	683b      	ldr	r3, [r7, #0]
 8019a92:	781b      	ldrb	r3, [r3, #0]
 8019a94:	009b      	lsls	r3, r3, #2
 8019a96:	18d3      	adds	r3, r2, r3
 8019a98:	183a      	adds	r2, r7, r0
 8019a9a:	8812      	ldrh	r2, [r2, #0]
 8019a9c:	493b      	ldr	r1, [pc, #236]	@ (8019b8c <USB_ActivateEndpoint+0x6b4>)
 8019a9e:	430a      	orrs	r2, r1
 8019aa0:	b292      	uxth	r2, r2
 8019aa2:	801a      	strh	r2, [r3, #0]
 8019aa4:	e0ac      	b.n	8019c00 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019aa6:	687a      	ldr	r2, [r7, #4]
 8019aa8:	683b      	ldr	r3, [r7, #0]
 8019aaa:	781b      	ldrb	r3, [r3, #0]
 8019aac:	009b      	lsls	r3, r3, #2
 8019aae:	18d2      	adds	r2, r2, r3
 8019ab0:	214e      	movs	r1, #78	@ 0x4e
 8019ab2:	187b      	adds	r3, r7, r1
 8019ab4:	8812      	ldrh	r2, [r2, #0]
 8019ab6:	801a      	strh	r2, [r3, #0]
 8019ab8:	187b      	adds	r3, r7, r1
 8019aba:	881a      	ldrh	r2, [r3, #0]
 8019abc:	2380      	movs	r3, #128	@ 0x80
 8019abe:	01db      	lsls	r3, r3, #7
 8019ac0:	4013      	ands	r3, r2
 8019ac2:	d016      	beq.n	8019af2 <USB_ActivateEndpoint+0x61a>
 8019ac4:	687a      	ldr	r2, [r7, #4]
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	781b      	ldrb	r3, [r3, #0]
 8019aca:	009b      	lsls	r3, r3, #2
 8019acc:	18d3      	adds	r3, r2, r3
 8019ace:	881b      	ldrh	r3, [r3, #0]
 8019ad0:	b29a      	uxth	r2, r3
 8019ad2:	204c      	movs	r0, #76	@ 0x4c
 8019ad4:	183b      	adds	r3, r7, r0
 8019ad6:	492a      	ldr	r1, [pc, #168]	@ (8019b80 <USB_ActivateEndpoint+0x6a8>)
 8019ad8:	400a      	ands	r2, r1
 8019ada:	801a      	strh	r2, [r3, #0]
 8019adc:	687a      	ldr	r2, [r7, #4]
 8019ade:	683b      	ldr	r3, [r7, #0]
 8019ae0:	781b      	ldrb	r3, [r3, #0]
 8019ae2:	009b      	lsls	r3, r3, #2
 8019ae4:	18d3      	adds	r3, r2, r3
 8019ae6:	183a      	adds	r2, r7, r0
 8019ae8:	8812      	ldrh	r2, [r2, #0]
 8019aea:	4926      	ldr	r1, [pc, #152]	@ (8019b84 <USB_ActivateEndpoint+0x6ac>)
 8019aec:	430a      	orrs	r2, r1
 8019aee:	b292      	uxth	r2, r2
 8019af0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019af2:	687a      	ldr	r2, [r7, #4]
 8019af4:	683b      	ldr	r3, [r7, #0]
 8019af6:	781b      	ldrb	r3, [r3, #0]
 8019af8:	009b      	lsls	r3, r3, #2
 8019afa:	18d2      	adds	r2, r2, r3
 8019afc:	214a      	movs	r1, #74	@ 0x4a
 8019afe:	187b      	adds	r3, r7, r1
 8019b00:	8812      	ldrh	r2, [r2, #0]
 8019b02:	801a      	strh	r2, [r3, #0]
 8019b04:	187b      	adds	r3, r7, r1
 8019b06:	881b      	ldrh	r3, [r3, #0]
 8019b08:	2240      	movs	r2, #64	@ 0x40
 8019b0a:	4013      	ands	r3, r2
 8019b0c:	d016      	beq.n	8019b3c <USB_ActivateEndpoint+0x664>
 8019b0e:	687a      	ldr	r2, [r7, #4]
 8019b10:	683b      	ldr	r3, [r7, #0]
 8019b12:	781b      	ldrb	r3, [r3, #0]
 8019b14:	009b      	lsls	r3, r3, #2
 8019b16:	18d3      	adds	r3, r2, r3
 8019b18:	881b      	ldrh	r3, [r3, #0]
 8019b1a:	b29a      	uxth	r2, r3
 8019b1c:	2048      	movs	r0, #72	@ 0x48
 8019b1e:	183b      	adds	r3, r7, r0
 8019b20:	4917      	ldr	r1, [pc, #92]	@ (8019b80 <USB_ActivateEndpoint+0x6a8>)
 8019b22:	400a      	ands	r2, r1
 8019b24:	801a      	strh	r2, [r3, #0]
 8019b26:	687a      	ldr	r2, [r7, #4]
 8019b28:	683b      	ldr	r3, [r7, #0]
 8019b2a:	781b      	ldrb	r3, [r3, #0]
 8019b2c:	009b      	lsls	r3, r3, #2
 8019b2e:	18d3      	adds	r3, r2, r3
 8019b30:	183a      	adds	r2, r7, r0
 8019b32:	8812      	ldrh	r2, [r2, #0]
 8019b34:	4919      	ldr	r1, [pc, #100]	@ (8019b9c <USB_ActivateEndpoint+0x6c4>)
 8019b36:	430a      	orrs	r2, r1
 8019b38:	b292      	uxth	r2, r2
 8019b3a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019b3c:	683b      	ldr	r3, [r7, #0]
 8019b3e:	78db      	ldrb	r3, [r3, #3]
 8019b40:	2b01      	cmp	r3, #1
 8019b42:	d02f      	beq.n	8019ba4 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019b44:	687a      	ldr	r2, [r7, #4]
 8019b46:	683b      	ldr	r3, [r7, #0]
 8019b48:	781b      	ldrb	r3, [r3, #0]
 8019b4a:	009b      	lsls	r3, r3, #2
 8019b4c:	18d3      	adds	r3, r2, r3
 8019b4e:	881b      	ldrh	r3, [r3, #0]
 8019b50:	b29a      	uxth	r2, r3
 8019b52:	2044      	movs	r0, #68	@ 0x44
 8019b54:	183b      	adds	r3, r7, r0
 8019b56:	4912      	ldr	r1, [pc, #72]	@ (8019ba0 <USB_ActivateEndpoint+0x6c8>)
 8019b58:	400a      	ands	r2, r1
 8019b5a:	801a      	strh	r2, [r3, #0]
 8019b5c:	183b      	adds	r3, r7, r0
 8019b5e:	183a      	adds	r2, r7, r0
 8019b60:	8812      	ldrh	r2, [r2, #0]
 8019b62:	2120      	movs	r1, #32
 8019b64:	404a      	eors	r2, r1
 8019b66:	801a      	strh	r2, [r3, #0]
 8019b68:	687a      	ldr	r2, [r7, #4]
 8019b6a:	683b      	ldr	r3, [r7, #0]
 8019b6c:	781b      	ldrb	r3, [r3, #0]
 8019b6e:	009b      	lsls	r3, r3, #2
 8019b70:	18d3      	adds	r3, r2, r3
 8019b72:	183a      	adds	r2, r7, r0
 8019b74:	8812      	ldrh	r2, [r2, #0]
 8019b76:	4905      	ldr	r1, [pc, #20]	@ (8019b8c <USB_ActivateEndpoint+0x6b4>)
 8019b78:	430a      	orrs	r2, r1
 8019b7a:	b292      	uxth	r2, r2
 8019b7c:	801a      	strh	r2, [r3, #0]
 8019b7e:	e028      	b.n	8019bd2 <USB_ActivateEndpoint+0x6fa>
 8019b80:	ffff8f8f 	.word	0xffff8f8f
 8019b84:	ffffc080 	.word	0xffffc080
 8019b88:	ffffbf8f 	.word	0xffffbf8f
 8019b8c:	ffff8080 	.word	0xffff8080
 8019b90:	ffff8180 	.word	0xffff8180
 8019b94:	ffff8e8f 	.word	0xffff8e8f
 8019b98:	00000404 	.word	0x00000404
 8019b9c:	ffff80c0 	.word	0xffff80c0
 8019ba0:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019ba4:	687a      	ldr	r2, [r7, #4]
 8019ba6:	683b      	ldr	r3, [r7, #0]
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	009b      	lsls	r3, r3, #2
 8019bac:	18d3      	adds	r3, r2, r3
 8019bae:	881b      	ldrh	r3, [r3, #0]
 8019bb0:	b29a      	uxth	r2, r3
 8019bb2:	2046      	movs	r0, #70	@ 0x46
 8019bb4:	183b      	adds	r3, r7, r0
 8019bb6:	4916      	ldr	r1, [pc, #88]	@ (8019c10 <USB_ActivateEndpoint+0x738>)
 8019bb8:	400a      	ands	r2, r1
 8019bba:	801a      	strh	r2, [r3, #0]
 8019bbc:	687a      	ldr	r2, [r7, #4]
 8019bbe:	683b      	ldr	r3, [r7, #0]
 8019bc0:	781b      	ldrb	r3, [r3, #0]
 8019bc2:	009b      	lsls	r3, r3, #2
 8019bc4:	18d3      	adds	r3, r2, r3
 8019bc6:	183a      	adds	r2, r7, r0
 8019bc8:	8812      	ldrh	r2, [r2, #0]
 8019bca:	4912      	ldr	r1, [pc, #72]	@ (8019c14 <USB_ActivateEndpoint+0x73c>)
 8019bcc:	430a      	orrs	r2, r1
 8019bce:	b292      	uxth	r2, r2
 8019bd0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019bd2:	687a      	ldr	r2, [r7, #4]
 8019bd4:	683b      	ldr	r3, [r7, #0]
 8019bd6:	781b      	ldrb	r3, [r3, #0]
 8019bd8:	009b      	lsls	r3, r3, #2
 8019bda:	18d3      	adds	r3, r2, r3
 8019bdc:	881b      	ldrh	r3, [r3, #0]
 8019bde:	b29a      	uxth	r2, r3
 8019be0:	2042      	movs	r0, #66	@ 0x42
 8019be2:	183b      	adds	r3, r7, r0
 8019be4:	490c      	ldr	r1, [pc, #48]	@ (8019c18 <USB_ActivateEndpoint+0x740>)
 8019be6:	400a      	ands	r2, r1
 8019be8:	801a      	strh	r2, [r3, #0]
 8019bea:	687a      	ldr	r2, [r7, #4]
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	781b      	ldrb	r3, [r3, #0]
 8019bf0:	009b      	lsls	r3, r3, #2
 8019bf2:	18d3      	adds	r3, r2, r3
 8019bf4:	183a      	adds	r2, r7, r0
 8019bf6:	8812      	ldrh	r2, [r2, #0]
 8019bf8:	4906      	ldr	r1, [pc, #24]	@ (8019c14 <USB_ActivateEndpoint+0x73c>)
 8019bfa:	430a      	orrs	r2, r1
 8019bfc:	b292      	uxth	r2, r2
 8019bfe:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8019c00:	236f      	movs	r3, #111	@ 0x6f
 8019c02:	18fb      	adds	r3, r7, r3
 8019c04:	781b      	ldrb	r3, [r3, #0]
}
 8019c06:	0018      	movs	r0, r3
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	b01c      	add	sp, #112	@ 0x70
 8019c0c:	bd80      	pop	{r7, pc}
 8019c0e:	46c0      	nop			@ (mov r8, r8)
 8019c10:	ffff8fbf 	.word	0xffff8fbf
 8019c14:	ffff8080 	.word	0xffff8080
 8019c18:	ffffbf8f 	.word	0xffffbf8f

08019c1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019c1c:	b580      	push	{r7, lr}
 8019c1e:	b08c      	sub	sp, #48	@ 0x30
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	6078      	str	r0, [r7, #4]
 8019c24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	7b1b      	ldrb	r3, [r3, #12]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d000      	beq.n	8019c30 <USB_DeactivateEndpoint+0x14>
 8019c2e:	e07e      	b.n	8019d2e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019c30:	683b      	ldr	r3, [r7, #0]
 8019c32:	785b      	ldrb	r3, [r3, #1]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d03c      	beq.n	8019cb2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019c38:	687a      	ldr	r2, [r7, #4]
 8019c3a:	683b      	ldr	r3, [r7, #0]
 8019c3c:	781b      	ldrb	r3, [r3, #0]
 8019c3e:	009b      	lsls	r3, r3, #2
 8019c40:	18d2      	adds	r2, r2, r3
 8019c42:	210c      	movs	r1, #12
 8019c44:	187b      	adds	r3, r7, r1
 8019c46:	8812      	ldrh	r2, [r2, #0]
 8019c48:	801a      	strh	r2, [r3, #0]
 8019c4a:	187b      	adds	r3, r7, r1
 8019c4c:	881b      	ldrh	r3, [r3, #0]
 8019c4e:	2240      	movs	r2, #64	@ 0x40
 8019c50:	4013      	ands	r3, r2
 8019c52:	d016      	beq.n	8019c82 <USB_DeactivateEndpoint+0x66>
 8019c54:	687a      	ldr	r2, [r7, #4]
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	781b      	ldrb	r3, [r3, #0]
 8019c5a:	009b      	lsls	r3, r3, #2
 8019c5c:	18d3      	adds	r3, r2, r3
 8019c5e:	881b      	ldrh	r3, [r3, #0]
 8019c60:	b29a      	uxth	r2, r3
 8019c62:	200a      	movs	r0, #10
 8019c64:	183b      	adds	r3, r7, r0
 8019c66:	49c7      	ldr	r1, [pc, #796]	@ (8019f84 <USB_DeactivateEndpoint+0x368>)
 8019c68:	400a      	ands	r2, r1
 8019c6a:	801a      	strh	r2, [r3, #0]
 8019c6c:	687a      	ldr	r2, [r7, #4]
 8019c6e:	683b      	ldr	r3, [r7, #0]
 8019c70:	781b      	ldrb	r3, [r3, #0]
 8019c72:	009b      	lsls	r3, r3, #2
 8019c74:	18d3      	adds	r3, r2, r3
 8019c76:	183a      	adds	r2, r7, r0
 8019c78:	8812      	ldrh	r2, [r2, #0]
 8019c7a:	49c3      	ldr	r1, [pc, #780]	@ (8019f88 <USB_DeactivateEndpoint+0x36c>)
 8019c7c:	430a      	orrs	r2, r1
 8019c7e:	b292      	uxth	r2, r2
 8019c80:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019c82:	687a      	ldr	r2, [r7, #4]
 8019c84:	683b      	ldr	r3, [r7, #0]
 8019c86:	781b      	ldrb	r3, [r3, #0]
 8019c88:	009b      	lsls	r3, r3, #2
 8019c8a:	18d3      	adds	r3, r2, r3
 8019c8c:	881b      	ldrh	r3, [r3, #0]
 8019c8e:	b29a      	uxth	r2, r3
 8019c90:	2008      	movs	r0, #8
 8019c92:	183b      	adds	r3, r7, r0
 8019c94:	49bd      	ldr	r1, [pc, #756]	@ (8019f8c <USB_DeactivateEndpoint+0x370>)
 8019c96:	400a      	ands	r2, r1
 8019c98:	801a      	strh	r2, [r3, #0]
 8019c9a:	687a      	ldr	r2, [r7, #4]
 8019c9c:	683b      	ldr	r3, [r7, #0]
 8019c9e:	781b      	ldrb	r3, [r3, #0]
 8019ca0:	009b      	lsls	r3, r3, #2
 8019ca2:	18d3      	adds	r3, r2, r3
 8019ca4:	183a      	adds	r2, r7, r0
 8019ca6:	8812      	ldrh	r2, [r2, #0]
 8019ca8:	49b9      	ldr	r1, [pc, #740]	@ (8019f90 <USB_DeactivateEndpoint+0x374>)
 8019caa:	430a      	orrs	r2, r1
 8019cac:	b292      	uxth	r2, r2
 8019cae:	801a      	strh	r2, [r3, #0]
 8019cb0:	e163      	b.n	8019f7a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019cb2:	687a      	ldr	r2, [r7, #4]
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	781b      	ldrb	r3, [r3, #0]
 8019cb8:	009b      	lsls	r3, r3, #2
 8019cba:	18d2      	adds	r2, r2, r3
 8019cbc:	2112      	movs	r1, #18
 8019cbe:	187b      	adds	r3, r7, r1
 8019cc0:	8812      	ldrh	r2, [r2, #0]
 8019cc2:	801a      	strh	r2, [r3, #0]
 8019cc4:	187b      	adds	r3, r7, r1
 8019cc6:	881a      	ldrh	r2, [r3, #0]
 8019cc8:	2380      	movs	r3, #128	@ 0x80
 8019cca:	01db      	lsls	r3, r3, #7
 8019ccc:	4013      	ands	r3, r2
 8019cce:	d016      	beq.n	8019cfe <USB_DeactivateEndpoint+0xe2>
 8019cd0:	687a      	ldr	r2, [r7, #4]
 8019cd2:	683b      	ldr	r3, [r7, #0]
 8019cd4:	781b      	ldrb	r3, [r3, #0]
 8019cd6:	009b      	lsls	r3, r3, #2
 8019cd8:	18d3      	adds	r3, r2, r3
 8019cda:	881b      	ldrh	r3, [r3, #0]
 8019cdc:	b29a      	uxth	r2, r3
 8019cde:	2010      	movs	r0, #16
 8019ce0:	183b      	adds	r3, r7, r0
 8019ce2:	49a8      	ldr	r1, [pc, #672]	@ (8019f84 <USB_DeactivateEndpoint+0x368>)
 8019ce4:	400a      	ands	r2, r1
 8019ce6:	801a      	strh	r2, [r3, #0]
 8019ce8:	687a      	ldr	r2, [r7, #4]
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	781b      	ldrb	r3, [r3, #0]
 8019cee:	009b      	lsls	r3, r3, #2
 8019cf0:	18d3      	adds	r3, r2, r3
 8019cf2:	183a      	adds	r2, r7, r0
 8019cf4:	8812      	ldrh	r2, [r2, #0]
 8019cf6:	49a7      	ldr	r1, [pc, #668]	@ (8019f94 <USB_DeactivateEndpoint+0x378>)
 8019cf8:	430a      	orrs	r2, r1
 8019cfa:	b292      	uxth	r2, r2
 8019cfc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019cfe:	687a      	ldr	r2, [r7, #4]
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	781b      	ldrb	r3, [r3, #0]
 8019d04:	009b      	lsls	r3, r3, #2
 8019d06:	18d3      	adds	r3, r2, r3
 8019d08:	881b      	ldrh	r3, [r3, #0]
 8019d0a:	b29a      	uxth	r2, r3
 8019d0c:	200e      	movs	r0, #14
 8019d0e:	183b      	adds	r3, r7, r0
 8019d10:	49a1      	ldr	r1, [pc, #644]	@ (8019f98 <USB_DeactivateEndpoint+0x37c>)
 8019d12:	400a      	ands	r2, r1
 8019d14:	801a      	strh	r2, [r3, #0]
 8019d16:	687a      	ldr	r2, [r7, #4]
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	781b      	ldrb	r3, [r3, #0]
 8019d1c:	009b      	lsls	r3, r3, #2
 8019d1e:	18d3      	adds	r3, r2, r3
 8019d20:	183a      	adds	r2, r7, r0
 8019d22:	8812      	ldrh	r2, [r2, #0]
 8019d24:	499a      	ldr	r1, [pc, #616]	@ (8019f90 <USB_DeactivateEndpoint+0x374>)
 8019d26:	430a      	orrs	r2, r1
 8019d28:	b292      	uxth	r2, r2
 8019d2a:	801a      	strh	r2, [r3, #0]
 8019d2c:	e125      	b.n	8019f7a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	785b      	ldrb	r3, [r3, #1]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d000      	beq.n	8019d38 <USB_DeactivateEndpoint+0x11c>
 8019d36:	e090      	b.n	8019e5a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019d38:	687a      	ldr	r2, [r7, #4]
 8019d3a:	683b      	ldr	r3, [r7, #0]
 8019d3c:	781b      	ldrb	r3, [r3, #0]
 8019d3e:	009b      	lsls	r3, r3, #2
 8019d40:	18d2      	adds	r2, r2, r3
 8019d42:	2120      	movs	r1, #32
 8019d44:	187b      	adds	r3, r7, r1
 8019d46:	8812      	ldrh	r2, [r2, #0]
 8019d48:	801a      	strh	r2, [r3, #0]
 8019d4a:	187b      	adds	r3, r7, r1
 8019d4c:	881a      	ldrh	r2, [r3, #0]
 8019d4e:	2380      	movs	r3, #128	@ 0x80
 8019d50:	01db      	lsls	r3, r3, #7
 8019d52:	4013      	ands	r3, r2
 8019d54:	d016      	beq.n	8019d84 <USB_DeactivateEndpoint+0x168>
 8019d56:	687a      	ldr	r2, [r7, #4]
 8019d58:	683b      	ldr	r3, [r7, #0]
 8019d5a:	781b      	ldrb	r3, [r3, #0]
 8019d5c:	009b      	lsls	r3, r3, #2
 8019d5e:	18d3      	adds	r3, r2, r3
 8019d60:	881b      	ldrh	r3, [r3, #0]
 8019d62:	b29a      	uxth	r2, r3
 8019d64:	201e      	movs	r0, #30
 8019d66:	183b      	adds	r3, r7, r0
 8019d68:	4986      	ldr	r1, [pc, #536]	@ (8019f84 <USB_DeactivateEndpoint+0x368>)
 8019d6a:	400a      	ands	r2, r1
 8019d6c:	801a      	strh	r2, [r3, #0]
 8019d6e:	687a      	ldr	r2, [r7, #4]
 8019d70:	683b      	ldr	r3, [r7, #0]
 8019d72:	781b      	ldrb	r3, [r3, #0]
 8019d74:	009b      	lsls	r3, r3, #2
 8019d76:	18d3      	adds	r3, r2, r3
 8019d78:	183a      	adds	r2, r7, r0
 8019d7a:	8812      	ldrh	r2, [r2, #0]
 8019d7c:	4985      	ldr	r1, [pc, #532]	@ (8019f94 <USB_DeactivateEndpoint+0x378>)
 8019d7e:	430a      	orrs	r2, r1
 8019d80:	b292      	uxth	r2, r2
 8019d82:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019d84:	687a      	ldr	r2, [r7, #4]
 8019d86:	683b      	ldr	r3, [r7, #0]
 8019d88:	781b      	ldrb	r3, [r3, #0]
 8019d8a:	009b      	lsls	r3, r3, #2
 8019d8c:	18d2      	adds	r2, r2, r3
 8019d8e:	211c      	movs	r1, #28
 8019d90:	187b      	adds	r3, r7, r1
 8019d92:	8812      	ldrh	r2, [r2, #0]
 8019d94:	801a      	strh	r2, [r3, #0]
 8019d96:	187b      	adds	r3, r7, r1
 8019d98:	881b      	ldrh	r3, [r3, #0]
 8019d9a:	2240      	movs	r2, #64	@ 0x40
 8019d9c:	4013      	ands	r3, r2
 8019d9e:	d016      	beq.n	8019dce <USB_DeactivateEndpoint+0x1b2>
 8019da0:	687a      	ldr	r2, [r7, #4]
 8019da2:	683b      	ldr	r3, [r7, #0]
 8019da4:	781b      	ldrb	r3, [r3, #0]
 8019da6:	009b      	lsls	r3, r3, #2
 8019da8:	18d3      	adds	r3, r2, r3
 8019daa:	881b      	ldrh	r3, [r3, #0]
 8019dac:	b29a      	uxth	r2, r3
 8019dae:	201a      	movs	r0, #26
 8019db0:	183b      	adds	r3, r7, r0
 8019db2:	4974      	ldr	r1, [pc, #464]	@ (8019f84 <USB_DeactivateEndpoint+0x368>)
 8019db4:	400a      	ands	r2, r1
 8019db6:	801a      	strh	r2, [r3, #0]
 8019db8:	687a      	ldr	r2, [r7, #4]
 8019dba:	683b      	ldr	r3, [r7, #0]
 8019dbc:	781b      	ldrb	r3, [r3, #0]
 8019dbe:	009b      	lsls	r3, r3, #2
 8019dc0:	18d3      	adds	r3, r2, r3
 8019dc2:	183a      	adds	r2, r7, r0
 8019dc4:	8812      	ldrh	r2, [r2, #0]
 8019dc6:	4970      	ldr	r1, [pc, #448]	@ (8019f88 <USB_DeactivateEndpoint+0x36c>)
 8019dc8:	430a      	orrs	r2, r1
 8019dca:	b292      	uxth	r2, r2
 8019dcc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8019dce:	687a      	ldr	r2, [r7, #4]
 8019dd0:	683b      	ldr	r3, [r7, #0]
 8019dd2:	781b      	ldrb	r3, [r3, #0]
 8019dd4:	009b      	lsls	r3, r3, #2
 8019dd6:	18d3      	adds	r3, r2, r3
 8019dd8:	881b      	ldrh	r3, [r3, #0]
 8019dda:	b29a      	uxth	r2, r3
 8019ddc:	2018      	movs	r0, #24
 8019dde:	183b      	adds	r3, r7, r0
 8019de0:	4968      	ldr	r1, [pc, #416]	@ (8019f84 <USB_DeactivateEndpoint+0x368>)
 8019de2:	400a      	ands	r2, r1
 8019de4:	801a      	strh	r2, [r3, #0]
 8019de6:	687a      	ldr	r2, [r7, #4]
 8019de8:	683b      	ldr	r3, [r7, #0]
 8019dea:	781b      	ldrb	r3, [r3, #0]
 8019dec:	009b      	lsls	r3, r3, #2
 8019dee:	18d3      	adds	r3, r2, r3
 8019df0:	183a      	adds	r2, r7, r0
 8019df2:	8812      	ldrh	r2, [r2, #0]
 8019df4:	4964      	ldr	r1, [pc, #400]	@ (8019f88 <USB_DeactivateEndpoint+0x36c>)
 8019df6:	430a      	orrs	r2, r1
 8019df8:	b292      	uxth	r2, r2
 8019dfa:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019dfc:	687a      	ldr	r2, [r7, #4]
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	781b      	ldrb	r3, [r3, #0]
 8019e02:	009b      	lsls	r3, r3, #2
 8019e04:	18d3      	adds	r3, r2, r3
 8019e06:	881b      	ldrh	r3, [r3, #0]
 8019e08:	b29a      	uxth	r2, r3
 8019e0a:	2016      	movs	r0, #22
 8019e0c:	183b      	adds	r3, r7, r0
 8019e0e:	4962      	ldr	r1, [pc, #392]	@ (8019f98 <USB_DeactivateEndpoint+0x37c>)
 8019e10:	400a      	ands	r2, r1
 8019e12:	801a      	strh	r2, [r3, #0]
 8019e14:	687a      	ldr	r2, [r7, #4]
 8019e16:	683b      	ldr	r3, [r7, #0]
 8019e18:	781b      	ldrb	r3, [r3, #0]
 8019e1a:	009b      	lsls	r3, r3, #2
 8019e1c:	18d3      	adds	r3, r2, r3
 8019e1e:	183a      	adds	r2, r7, r0
 8019e20:	8812      	ldrh	r2, [r2, #0]
 8019e22:	495b      	ldr	r1, [pc, #364]	@ (8019f90 <USB_DeactivateEndpoint+0x374>)
 8019e24:	430a      	orrs	r2, r1
 8019e26:	b292      	uxth	r2, r2
 8019e28:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019e2a:	687a      	ldr	r2, [r7, #4]
 8019e2c:	683b      	ldr	r3, [r7, #0]
 8019e2e:	781b      	ldrb	r3, [r3, #0]
 8019e30:	009b      	lsls	r3, r3, #2
 8019e32:	18d3      	adds	r3, r2, r3
 8019e34:	881b      	ldrh	r3, [r3, #0]
 8019e36:	b29a      	uxth	r2, r3
 8019e38:	2014      	movs	r0, #20
 8019e3a:	183b      	adds	r3, r7, r0
 8019e3c:	4953      	ldr	r1, [pc, #332]	@ (8019f8c <USB_DeactivateEndpoint+0x370>)
 8019e3e:	400a      	ands	r2, r1
 8019e40:	801a      	strh	r2, [r3, #0]
 8019e42:	687a      	ldr	r2, [r7, #4]
 8019e44:	683b      	ldr	r3, [r7, #0]
 8019e46:	781b      	ldrb	r3, [r3, #0]
 8019e48:	009b      	lsls	r3, r3, #2
 8019e4a:	18d3      	adds	r3, r2, r3
 8019e4c:	183a      	adds	r2, r7, r0
 8019e4e:	8812      	ldrh	r2, [r2, #0]
 8019e50:	494f      	ldr	r1, [pc, #316]	@ (8019f90 <USB_DeactivateEndpoint+0x374>)
 8019e52:	430a      	orrs	r2, r1
 8019e54:	b292      	uxth	r2, r2
 8019e56:	801a      	strh	r2, [r3, #0]
 8019e58:	e08f      	b.n	8019f7a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019e5a:	687a      	ldr	r2, [r7, #4]
 8019e5c:	683b      	ldr	r3, [r7, #0]
 8019e5e:	781b      	ldrb	r3, [r3, #0]
 8019e60:	009b      	lsls	r3, r3, #2
 8019e62:	18d2      	adds	r2, r2, r3
 8019e64:	212e      	movs	r1, #46	@ 0x2e
 8019e66:	187b      	adds	r3, r7, r1
 8019e68:	8812      	ldrh	r2, [r2, #0]
 8019e6a:	801a      	strh	r2, [r3, #0]
 8019e6c:	187b      	adds	r3, r7, r1
 8019e6e:	881a      	ldrh	r2, [r3, #0]
 8019e70:	2380      	movs	r3, #128	@ 0x80
 8019e72:	01db      	lsls	r3, r3, #7
 8019e74:	4013      	ands	r3, r2
 8019e76:	d016      	beq.n	8019ea6 <USB_DeactivateEndpoint+0x28a>
 8019e78:	687a      	ldr	r2, [r7, #4]
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	781b      	ldrb	r3, [r3, #0]
 8019e7e:	009b      	lsls	r3, r3, #2
 8019e80:	18d3      	adds	r3, r2, r3
 8019e82:	881b      	ldrh	r3, [r3, #0]
 8019e84:	b29a      	uxth	r2, r3
 8019e86:	202c      	movs	r0, #44	@ 0x2c
 8019e88:	183b      	adds	r3, r7, r0
 8019e8a:	493e      	ldr	r1, [pc, #248]	@ (8019f84 <USB_DeactivateEndpoint+0x368>)
 8019e8c:	400a      	ands	r2, r1
 8019e8e:	801a      	strh	r2, [r3, #0]
 8019e90:	687a      	ldr	r2, [r7, #4]
 8019e92:	683b      	ldr	r3, [r7, #0]
 8019e94:	781b      	ldrb	r3, [r3, #0]
 8019e96:	009b      	lsls	r3, r3, #2
 8019e98:	18d3      	adds	r3, r2, r3
 8019e9a:	183a      	adds	r2, r7, r0
 8019e9c:	8812      	ldrh	r2, [r2, #0]
 8019e9e:	493d      	ldr	r1, [pc, #244]	@ (8019f94 <USB_DeactivateEndpoint+0x378>)
 8019ea0:	430a      	orrs	r2, r1
 8019ea2:	b292      	uxth	r2, r2
 8019ea4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019ea6:	687a      	ldr	r2, [r7, #4]
 8019ea8:	683b      	ldr	r3, [r7, #0]
 8019eaa:	781b      	ldrb	r3, [r3, #0]
 8019eac:	009b      	lsls	r3, r3, #2
 8019eae:	18d2      	adds	r2, r2, r3
 8019eb0:	212a      	movs	r1, #42	@ 0x2a
 8019eb2:	187b      	adds	r3, r7, r1
 8019eb4:	8812      	ldrh	r2, [r2, #0]
 8019eb6:	801a      	strh	r2, [r3, #0]
 8019eb8:	187b      	adds	r3, r7, r1
 8019eba:	881b      	ldrh	r3, [r3, #0]
 8019ebc:	2240      	movs	r2, #64	@ 0x40
 8019ebe:	4013      	ands	r3, r2
 8019ec0:	d016      	beq.n	8019ef0 <USB_DeactivateEndpoint+0x2d4>
 8019ec2:	687a      	ldr	r2, [r7, #4]
 8019ec4:	683b      	ldr	r3, [r7, #0]
 8019ec6:	781b      	ldrb	r3, [r3, #0]
 8019ec8:	009b      	lsls	r3, r3, #2
 8019eca:	18d3      	adds	r3, r2, r3
 8019ecc:	881b      	ldrh	r3, [r3, #0]
 8019ece:	b29a      	uxth	r2, r3
 8019ed0:	2028      	movs	r0, #40	@ 0x28
 8019ed2:	183b      	adds	r3, r7, r0
 8019ed4:	492b      	ldr	r1, [pc, #172]	@ (8019f84 <USB_DeactivateEndpoint+0x368>)
 8019ed6:	400a      	ands	r2, r1
 8019ed8:	801a      	strh	r2, [r3, #0]
 8019eda:	687a      	ldr	r2, [r7, #4]
 8019edc:	683b      	ldr	r3, [r7, #0]
 8019ede:	781b      	ldrb	r3, [r3, #0]
 8019ee0:	009b      	lsls	r3, r3, #2
 8019ee2:	18d3      	adds	r3, r2, r3
 8019ee4:	183a      	adds	r2, r7, r0
 8019ee6:	8812      	ldrh	r2, [r2, #0]
 8019ee8:	4927      	ldr	r1, [pc, #156]	@ (8019f88 <USB_DeactivateEndpoint+0x36c>)
 8019eea:	430a      	orrs	r2, r1
 8019eec:	b292      	uxth	r2, r2
 8019eee:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019ef0:	687a      	ldr	r2, [r7, #4]
 8019ef2:	683b      	ldr	r3, [r7, #0]
 8019ef4:	781b      	ldrb	r3, [r3, #0]
 8019ef6:	009b      	lsls	r3, r3, #2
 8019ef8:	18d3      	adds	r3, r2, r3
 8019efa:	881b      	ldrh	r3, [r3, #0]
 8019efc:	b29a      	uxth	r2, r3
 8019efe:	2026      	movs	r0, #38	@ 0x26
 8019f00:	183b      	adds	r3, r7, r0
 8019f02:	4920      	ldr	r1, [pc, #128]	@ (8019f84 <USB_DeactivateEndpoint+0x368>)
 8019f04:	400a      	ands	r2, r1
 8019f06:	801a      	strh	r2, [r3, #0]
 8019f08:	687a      	ldr	r2, [r7, #4]
 8019f0a:	683b      	ldr	r3, [r7, #0]
 8019f0c:	781b      	ldrb	r3, [r3, #0]
 8019f0e:	009b      	lsls	r3, r3, #2
 8019f10:	18d3      	adds	r3, r2, r3
 8019f12:	183a      	adds	r2, r7, r0
 8019f14:	8812      	ldrh	r2, [r2, #0]
 8019f16:	491f      	ldr	r1, [pc, #124]	@ (8019f94 <USB_DeactivateEndpoint+0x378>)
 8019f18:	430a      	orrs	r2, r1
 8019f1a:	b292      	uxth	r2, r2
 8019f1c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019f1e:	687a      	ldr	r2, [r7, #4]
 8019f20:	683b      	ldr	r3, [r7, #0]
 8019f22:	781b      	ldrb	r3, [r3, #0]
 8019f24:	009b      	lsls	r3, r3, #2
 8019f26:	18d3      	adds	r3, r2, r3
 8019f28:	881b      	ldrh	r3, [r3, #0]
 8019f2a:	b29a      	uxth	r2, r3
 8019f2c:	2024      	movs	r0, #36	@ 0x24
 8019f2e:	183b      	adds	r3, r7, r0
 8019f30:	4916      	ldr	r1, [pc, #88]	@ (8019f8c <USB_DeactivateEndpoint+0x370>)
 8019f32:	400a      	ands	r2, r1
 8019f34:	801a      	strh	r2, [r3, #0]
 8019f36:	687a      	ldr	r2, [r7, #4]
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	781b      	ldrb	r3, [r3, #0]
 8019f3c:	009b      	lsls	r3, r3, #2
 8019f3e:	18d3      	adds	r3, r2, r3
 8019f40:	183a      	adds	r2, r7, r0
 8019f42:	8812      	ldrh	r2, [r2, #0]
 8019f44:	4912      	ldr	r1, [pc, #72]	@ (8019f90 <USB_DeactivateEndpoint+0x374>)
 8019f46:	430a      	orrs	r2, r1
 8019f48:	b292      	uxth	r2, r2
 8019f4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019f4c:	687a      	ldr	r2, [r7, #4]
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	781b      	ldrb	r3, [r3, #0]
 8019f52:	009b      	lsls	r3, r3, #2
 8019f54:	18d3      	adds	r3, r2, r3
 8019f56:	881b      	ldrh	r3, [r3, #0]
 8019f58:	b29a      	uxth	r2, r3
 8019f5a:	2022      	movs	r0, #34	@ 0x22
 8019f5c:	183b      	adds	r3, r7, r0
 8019f5e:	490e      	ldr	r1, [pc, #56]	@ (8019f98 <USB_DeactivateEndpoint+0x37c>)
 8019f60:	400a      	ands	r2, r1
 8019f62:	801a      	strh	r2, [r3, #0]
 8019f64:	687a      	ldr	r2, [r7, #4]
 8019f66:	683b      	ldr	r3, [r7, #0]
 8019f68:	781b      	ldrb	r3, [r3, #0]
 8019f6a:	009b      	lsls	r3, r3, #2
 8019f6c:	18d3      	adds	r3, r2, r3
 8019f6e:	183a      	adds	r2, r7, r0
 8019f70:	8812      	ldrh	r2, [r2, #0]
 8019f72:	4907      	ldr	r1, [pc, #28]	@ (8019f90 <USB_DeactivateEndpoint+0x374>)
 8019f74:	430a      	orrs	r2, r1
 8019f76:	b292      	uxth	r2, r2
 8019f78:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019f7a:	2300      	movs	r3, #0
}
 8019f7c:	0018      	movs	r0, r3
 8019f7e:	46bd      	mov	sp, r7
 8019f80:	b00c      	add	sp, #48	@ 0x30
 8019f82:	bd80      	pop	{r7, pc}
 8019f84:	ffff8f8f 	.word	0xffff8f8f
 8019f88:	ffff80c0 	.word	0xffff80c0
 8019f8c:	ffff8fbf 	.word	0xffff8fbf
 8019f90:	ffff8080 	.word	0xffff8080
 8019f94:	ffffc080 	.word	0xffffc080
 8019f98:	ffffbf8f 	.word	0xffffbf8f

08019f9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019f9c:	b590      	push	{r4, r7, lr}
 8019f9e:	b0c3      	sub	sp, #268	@ 0x10c
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
 8019fa4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019fa6:	683b      	ldr	r3, [r7, #0]
 8019fa8:	785b      	ldrb	r3, [r3, #1]
 8019faa:	2b01      	cmp	r3, #1
 8019fac:	d001      	beq.n	8019fb2 <USB_EPStartXfer+0x16>
 8019fae:	f000 fd2d 	bl	801aa0c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019fb2:	683b      	ldr	r3, [r7, #0]
 8019fb4:	699a      	ldr	r2, [r3, #24]
 8019fb6:	683b      	ldr	r3, [r7, #0]
 8019fb8:	691b      	ldr	r3, [r3, #16]
 8019fba:	429a      	cmp	r2, r3
 8019fbc:	d905      	bls.n	8019fca <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019fbe:	683b      	ldr	r3, [r7, #0]
 8019fc0:	691b      	ldr	r3, [r3, #16]
 8019fc2:	1d7a      	adds	r2, r7, #5
 8019fc4:	32ff      	adds	r2, #255	@ 0xff
 8019fc6:	6013      	str	r3, [r2, #0]
 8019fc8:	e004      	b.n	8019fd4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019fca:	683b      	ldr	r3, [r7, #0]
 8019fcc:	699b      	ldr	r3, [r3, #24]
 8019fce:	1d7a      	adds	r2, r7, #5
 8019fd0:	32ff      	adds	r2, #255	@ 0xff
 8019fd2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	7b1b      	ldrb	r3, [r3, #12]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d125      	bne.n	801a028 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	6959      	ldr	r1, [r3, #20]
 8019fe0:	683b      	ldr	r3, [r7, #0]
 8019fe2:	88da      	ldrh	r2, [r3, #6]
 8019fe4:	1d7b      	adds	r3, r7, #5
 8019fe6:	33ff      	adds	r3, #255	@ 0xff
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	b29b      	uxth	r3, r3
 8019fec:	6878      	ldr	r0, [r7, #4]
 8019fee:	f001 fa47 	bl	801b480 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	613b      	str	r3, [r7, #16]
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	2250      	movs	r2, #80	@ 0x50
 8019ffa:	5a9b      	ldrh	r3, [r3, r2]
 8019ffc:	b29b      	uxth	r3, r3
 8019ffe:	001a      	movs	r2, r3
 801a000:	693b      	ldr	r3, [r7, #16]
 801a002:	189b      	adds	r3, r3, r2
 801a004:	613b      	str	r3, [r7, #16]
 801a006:	683b      	ldr	r3, [r7, #0]
 801a008:	781b      	ldrb	r3, [r3, #0]
 801a00a:	00da      	lsls	r2, r3, #3
 801a00c:	693b      	ldr	r3, [r7, #16]
 801a00e:	18d3      	adds	r3, r2, r3
 801a010:	4ad7      	ldr	r2, [pc, #860]	@ (801a370 <USB_EPStartXfer+0x3d4>)
 801a012:	4694      	mov	ip, r2
 801a014:	4463      	add	r3, ip
 801a016:	60fb      	str	r3, [r7, #12]
 801a018:	1d7b      	adds	r3, r7, #5
 801a01a:	33ff      	adds	r3, #255	@ 0xff
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	b29a      	uxth	r2, r3
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	801a      	strh	r2, [r3, #0]
 801a024:	f000 fccd 	bl	801a9c2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801a028:	683b      	ldr	r3, [r7, #0]
 801a02a:	78db      	ldrb	r3, [r3, #3]
 801a02c:	2b02      	cmp	r3, #2
 801a02e:	d000      	beq.n	801a032 <USB_EPStartXfer+0x96>
 801a030:	e362      	b.n	801a6f8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801a032:	683b      	ldr	r3, [r7, #0]
 801a034:	6a1a      	ldr	r2, [r3, #32]
 801a036:	683b      	ldr	r3, [r7, #0]
 801a038:	691b      	ldr	r3, [r3, #16]
 801a03a:	429a      	cmp	r2, r3
 801a03c:	d800      	bhi.n	801a040 <USB_EPStartXfer+0xa4>
 801a03e:	e309      	b.n	801a654 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801a040:	687a      	ldr	r2, [r7, #4]
 801a042:	683b      	ldr	r3, [r7, #0]
 801a044:	781b      	ldrb	r3, [r3, #0]
 801a046:	009b      	lsls	r3, r3, #2
 801a048:	18d3      	adds	r3, r2, r3
 801a04a:	881b      	ldrh	r3, [r3, #0]
 801a04c:	b29a      	uxth	r2, r3
 801a04e:	2056      	movs	r0, #86	@ 0x56
 801a050:	183b      	adds	r3, r7, r0
 801a052:	49c8      	ldr	r1, [pc, #800]	@ (801a374 <USB_EPStartXfer+0x3d8>)
 801a054:	400a      	ands	r2, r1
 801a056:	801a      	strh	r2, [r3, #0]
 801a058:	687a      	ldr	r2, [r7, #4]
 801a05a:	683b      	ldr	r3, [r7, #0]
 801a05c:	781b      	ldrb	r3, [r3, #0]
 801a05e:	009b      	lsls	r3, r3, #2
 801a060:	18d3      	adds	r3, r2, r3
 801a062:	183a      	adds	r2, r7, r0
 801a064:	8812      	ldrh	r2, [r2, #0]
 801a066:	49c4      	ldr	r1, [pc, #784]	@ (801a378 <USB_EPStartXfer+0x3dc>)
 801a068:	430a      	orrs	r2, r1
 801a06a:	b292      	uxth	r2, r2
 801a06c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801a06e:	683b      	ldr	r3, [r7, #0]
 801a070:	6a1a      	ldr	r2, [r3, #32]
 801a072:	1d7b      	adds	r3, r7, #5
 801a074:	33ff      	adds	r3, #255	@ 0xff
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	1ad2      	subs	r2, r2, r3
 801a07a:	683b      	ldr	r3, [r7, #0]
 801a07c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a07e:	687a      	ldr	r2, [r7, #4]
 801a080:	683b      	ldr	r3, [r7, #0]
 801a082:	781b      	ldrb	r3, [r3, #0]
 801a084:	009b      	lsls	r3, r3, #2
 801a086:	18d3      	adds	r3, r2, r3
 801a088:	881b      	ldrh	r3, [r3, #0]
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	001a      	movs	r2, r3
 801a08e:	2340      	movs	r3, #64	@ 0x40
 801a090:	4013      	ands	r3, r2
 801a092:	d100      	bne.n	801a096 <USB_EPStartXfer+0xfa>
 801a094:	e176      	b.n	801a384 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	633b      	str	r3, [r7, #48]	@ 0x30
 801a09a:	683b      	ldr	r3, [r7, #0]
 801a09c:	785b      	ldrb	r3, [r3, #1]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d000      	beq.n	801a0a4 <USB_EPStartXfer+0x108>
 801a0a2:	e074      	b.n	801a18e <USB_EPStartXfer+0x1f2>
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	2250      	movs	r2, #80	@ 0x50
 801a0ac:	5a9b      	ldrh	r3, [r3, r2]
 801a0ae:	b29b      	uxth	r3, r3
 801a0b0:	001a      	movs	r2, r3
 801a0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0b4:	189b      	adds	r3, r3, r2
 801a0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a0b8:	683b      	ldr	r3, [r7, #0]
 801a0ba:	781b      	ldrb	r3, [r3, #0]
 801a0bc:	00da      	lsls	r2, r3, #3
 801a0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a0c0:	18d3      	adds	r3, r2, r3
 801a0c2:	4aae      	ldr	r2, [pc, #696]	@ (801a37c <USB_EPStartXfer+0x3e0>)
 801a0c4:	4694      	mov	ip, r2
 801a0c6:	4463      	add	r3, ip
 801a0c8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0cc:	881b      	ldrh	r3, [r3, #0]
 801a0ce:	b29b      	uxth	r3, r3
 801a0d0:	059b      	lsls	r3, r3, #22
 801a0d2:	0d9b      	lsrs	r3, r3, #22
 801a0d4:	b29a      	uxth	r2, r3
 801a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0d8:	801a      	strh	r2, [r3, #0]
 801a0da:	1d7b      	adds	r3, r7, #5
 801a0dc:	33ff      	adds	r3, #255	@ 0xff
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	2b3e      	cmp	r3, #62	@ 0x3e
 801a0e2:	d924      	bls.n	801a12e <USB_EPStartXfer+0x192>
 801a0e4:	1d7b      	adds	r3, r7, #5
 801a0e6:	33ff      	adds	r3, #255	@ 0xff
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	095b      	lsrs	r3, r3, #5
 801a0ec:	1c7a      	adds	r2, r7, #1
 801a0ee:	32ff      	adds	r2, #255	@ 0xff
 801a0f0:	6013      	str	r3, [r2, #0]
 801a0f2:	1d7b      	adds	r3, r7, #5
 801a0f4:	33ff      	adds	r3, #255	@ 0xff
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	221f      	movs	r2, #31
 801a0fa:	4013      	ands	r3, r2
 801a0fc:	d106      	bne.n	801a10c <USB_EPStartXfer+0x170>
 801a0fe:	1c7b      	adds	r3, r7, #1
 801a100:	33ff      	adds	r3, #255	@ 0xff
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	3b01      	subs	r3, #1
 801a106:	1c7a      	adds	r2, r7, #1
 801a108:	32ff      	adds	r2, #255	@ 0xff
 801a10a:	6013      	str	r3, [r2, #0]
 801a10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a10e:	881b      	ldrh	r3, [r3, #0]
 801a110:	b29a      	uxth	r2, r3
 801a112:	1c7b      	adds	r3, r7, #1
 801a114:	33ff      	adds	r3, #255	@ 0xff
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	b29b      	uxth	r3, r3
 801a11a:	029b      	lsls	r3, r3, #10
 801a11c:	b29b      	uxth	r3, r3
 801a11e:	4313      	orrs	r3, r2
 801a120:	b29b      	uxth	r3, r3
 801a122:	4a97      	ldr	r2, [pc, #604]	@ (801a380 <USB_EPStartXfer+0x3e4>)
 801a124:	4313      	orrs	r3, r2
 801a126:	b29a      	uxth	r2, r3
 801a128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a12a:	801a      	strh	r2, [r3, #0]
 801a12c:	e04a      	b.n	801a1c4 <USB_EPStartXfer+0x228>
 801a12e:	1d7b      	adds	r3, r7, #5
 801a130:	33ff      	adds	r3, #255	@ 0xff
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	2b00      	cmp	r3, #0
 801a136:	d108      	bne.n	801a14a <USB_EPStartXfer+0x1ae>
 801a138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a13a:	881b      	ldrh	r3, [r3, #0]
 801a13c:	b29b      	uxth	r3, r3
 801a13e:	4a90      	ldr	r2, [pc, #576]	@ (801a380 <USB_EPStartXfer+0x3e4>)
 801a140:	4313      	orrs	r3, r2
 801a142:	b29a      	uxth	r2, r3
 801a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a146:	801a      	strh	r2, [r3, #0]
 801a148:	e03c      	b.n	801a1c4 <USB_EPStartXfer+0x228>
 801a14a:	1d7b      	adds	r3, r7, #5
 801a14c:	33ff      	adds	r3, #255	@ 0xff
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	085b      	lsrs	r3, r3, #1
 801a152:	1c7a      	adds	r2, r7, #1
 801a154:	32ff      	adds	r2, #255	@ 0xff
 801a156:	6013      	str	r3, [r2, #0]
 801a158:	1d7b      	adds	r3, r7, #5
 801a15a:	33ff      	adds	r3, #255	@ 0xff
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	2201      	movs	r2, #1
 801a160:	4013      	ands	r3, r2
 801a162:	d006      	beq.n	801a172 <USB_EPStartXfer+0x1d6>
 801a164:	1c7b      	adds	r3, r7, #1
 801a166:	33ff      	adds	r3, #255	@ 0xff
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	3301      	adds	r3, #1
 801a16c:	1c7a      	adds	r2, r7, #1
 801a16e:	32ff      	adds	r2, #255	@ 0xff
 801a170:	6013      	str	r3, [r2, #0]
 801a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a174:	881b      	ldrh	r3, [r3, #0]
 801a176:	b29a      	uxth	r2, r3
 801a178:	1c7b      	adds	r3, r7, #1
 801a17a:	33ff      	adds	r3, #255	@ 0xff
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	b29b      	uxth	r3, r3
 801a180:	029b      	lsls	r3, r3, #10
 801a182:	b29b      	uxth	r3, r3
 801a184:	4313      	orrs	r3, r2
 801a186:	b29a      	uxth	r2, r3
 801a188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a18a:	801a      	strh	r2, [r3, #0]
 801a18c:	e01a      	b.n	801a1c4 <USB_EPStartXfer+0x228>
 801a18e:	683b      	ldr	r3, [r7, #0]
 801a190:	785b      	ldrb	r3, [r3, #1]
 801a192:	2b01      	cmp	r3, #1
 801a194:	d116      	bne.n	801a1c4 <USB_EPStartXfer+0x228>
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	2250      	movs	r2, #80	@ 0x50
 801a19a:	5a9b      	ldrh	r3, [r3, r2]
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	001a      	movs	r2, r3
 801a1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1a2:	189b      	adds	r3, r3, r2
 801a1a4:	633b      	str	r3, [r7, #48]	@ 0x30
 801a1a6:	683b      	ldr	r3, [r7, #0]
 801a1a8:	781b      	ldrb	r3, [r3, #0]
 801a1aa:	00da      	lsls	r2, r3, #3
 801a1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a1ae:	18d3      	adds	r3, r2, r3
 801a1b0:	4a72      	ldr	r2, [pc, #456]	@ (801a37c <USB_EPStartXfer+0x3e0>)
 801a1b2:	4694      	mov	ip, r2
 801a1b4:	4463      	add	r3, ip
 801a1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a1b8:	1d7b      	adds	r3, r7, #5
 801a1ba:	33ff      	adds	r3, #255	@ 0xff
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	b29a      	uxth	r2, r3
 801a1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a1c4:	2076      	movs	r0, #118	@ 0x76
 801a1c6:	183b      	adds	r3, r7, r0
 801a1c8:	683a      	ldr	r2, [r7, #0]
 801a1ca:	8952      	ldrh	r2, [r2, #10]
 801a1cc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a1ce:	683b      	ldr	r3, [r7, #0]
 801a1d0:	6959      	ldr	r1, [r3, #20]
 801a1d2:	1d7b      	adds	r3, r7, #5
 801a1d4:	33ff      	adds	r3, #255	@ 0xff
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	b29c      	uxth	r4, r3
 801a1da:	183b      	adds	r3, r7, r0
 801a1dc:	881a      	ldrh	r2, [r3, #0]
 801a1de:	6878      	ldr	r0, [r7, #4]
 801a1e0:	0023      	movs	r3, r4
 801a1e2:	f001 f94d 	bl	801b480 <USB_WritePMA>
            ep->xfer_buff += len;
 801a1e6:	683b      	ldr	r3, [r7, #0]
 801a1e8:	695a      	ldr	r2, [r3, #20]
 801a1ea:	1d7b      	adds	r3, r7, #5
 801a1ec:	33ff      	adds	r3, #255	@ 0xff
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	18d2      	adds	r2, r2, r3
 801a1f2:	683b      	ldr	r3, [r7, #0]
 801a1f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	6a1a      	ldr	r2, [r3, #32]
 801a1fa:	683b      	ldr	r3, [r7, #0]
 801a1fc:	691b      	ldr	r3, [r3, #16]
 801a1fe:	429a      	cmp	r2, r3
 801a200:	d908      	bls.n	801a214 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801a202:	683b      	ldr	r3, [r7, #0]
 801a204:	6a1a      	ldr	r2, [r3, #32]
 801a206:	1d7b      	adds	r3, r7, #5
 801a208:	33ff      	adds	r3, #255	@ 0xff
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	1ad2      	subs	r2, r2, r3
 801a20e:	683b      	ldr	r3, [r7, #0]
 801a210:	621a      	str	r2, [r3, #32]
 801a212:	e007      	b.n	801a224 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801a214:	683b      	ldr	r3, [r7, #0]
 801a216:	6a1b      	ldr	r3, [r3, #32]
 801a218:	1d7a      	adds	r2, r7, #5
 801a21a:	32ff      	adds	r2, #255	@ 0xff
 801a21c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a21e:	683b      	ldr	r3, [r7, #0]
 801a220:	2200      	movs	r2, #0
 801a222:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a224:	683b      	ldr	r3, [r7, #0]
 801a226:	785b      	ldrb	r3, [r3, #1]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d000      	beq.n	801a22e <USB_EPStartXfer+0x292>
 801a22c:	e070      	b.n	801a310 <USB_EPStartXfer+0x374>
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	61bb      	str	r3, [r7, #24]
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	2250      	movs	r2, #80	@ 0x50
 801a236:	5a9b      	ldrh	r3, [r3, r2]
 801a238:	b29b      	uxth	r3, r3
 801a23a:	001a      	movs	r2, r3
 801a23c:	69bb      	ldr	r3, [r7, #24]
 801a23e:	189b      	adds	r3, r3, r2
 801a240:	61bb      	str	r3, [r7, #24]
 801a242:	683b      	ldr	r3, [r7, #0]
 801a244:	781b      	ldrb	r3, [r3, #0]
 801a246:	00da      	lsls	r2, r3, #3
 801a248:	69bb      	ldr	r3, [r7, #24]
 801a24a:	18d3      	adds	r3, r2, r3
 801a24c:	4a48      	ldr	r2, [pc, #288]	@ (801a370 <USB_EPStartXfer+0x3d4>)
 801a24e:	4694      	mov	ip, r2
 801a250:	4463      	add	r3, ip
 801a252:	617b      	str	r3, [r7, #20]
 801a254:	697b      	ldr	r3, [r7, #20]
 801a256:	881b      	ldrh	r3, [r3, #0]
 801a258:	b29b      	uxth	r3, r3
 801a25a:	059b      	lsls	r3, r3, #22
 801a25c:	0d9b      	lsrs	r3, r3, #22
 801a25e:	b29a      	uxth	r2, r3
 801a260:	697b      	ldr	r3, [r7, #20]
 801a262:	801a      	strh	r2, [r3, #0]
 801a264:	1d7b      	adds	r3, r7, #5
 801a266:	33ff      	adds	r3, #255	@ 0xff
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	2b3e      	cmp	r3, #62	@ 0x3e
 801a26c:	d922      	bls.n	801a2b4 <USB_EPStartXfer+0x318>
 801a26e:	1d7b      	adds	r3, r7, #5
 801a270:	33ff      	adds	r3, #255	@ 0xff
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	095b      	lsrs	r3, r3, #5
 801a276:	21fc      	movs	r1, #252	@ 0xfc
 801a278:	187a      	adds	r2, r7, r1
 801a27a:	6013      	str	r3, [r2, #0]
 801a27c:	1d7b      	adds	r3, r7, #5
 801a27e:	33ff      	adds	r3, #255	@ 0xff
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	221f      	movs	r2, #31
 801a284:	4013      	ands	r3, r2
 801a286:	d104      	bne.n	801a292 <USB_EPStartXfer+0x2f6>
 801a288:	187b      	adds	r3, r7, r1
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	3b01      	subs	r3, #1
 801a28e:	187a      	adds	r2, r7, r1
 801a290:	6013      	str	r3, [r2, #0]
 801a292:	697b      	ldr	r3, [r7, #20]
 801a294:	881b      	ldrh	r3, [r3, #0]
 801a296:	b29a      	uxth	r2, r3
 801a298:	23fc      	movs	r3, #252	@ 0xfc
 801a29a:	18fb      	adds	r3, r7, r3
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	b29b      	uxth	r3, r3
 801a2a0:	029b      	lsls	r3, r3, #10
 801a2a2:	b29b      	uxth	r3, r3
 801a2a4:	4313      	orrs	r3, r2
 801a2a6:	b29b      	uxth	r3, r3
 801a2a8:	4a35      	ldr	r2, [pc, #212]	@ (801a380 <USB_EPStartXfer+0x3e4>)
 801a2aa:	4313      	orrs	r3, r2
 801a2ac:	b29a      	uxth	r2, r3
 801a2ae:	697b      	ldr	r3, [r7, #20]
 801a2b0:	801a      	strh	r2, [r3, #0]
 801a2b2:	e04a      	b.n	801a34a <USB_EPStartXfer+0x3ae>
 801a2b4:	1d7b      	adds	r3, r7, #5
 801a2b6:	33ff      	adds	r3, #255	@ 0xff
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d108      	bne.n	801a2d0 <USB_EPStartXfer+0x334>
 801a2be:	697b      	ldr	r3, [r7, #20]
 801a2c0:	881b      	ldrh	r3, [r3, #0]
 801a2c2:	b29b      	uxth	r3, r3
 801a2c4:	4a2e      	ldr	r2, [pc, #184]	@ (801a380 <USB_EPStartXfer+0x3e4>)
 801a2c6:	4313      	orrs	r3, r2
 801a2c8:	b29a      	uxth	r2, r3
 801a2ca:	697b      	ldr	r3, [r7, #20]
 801a2cc:	801a      	strh	r2, [r3, #0]
 801a2ce:	e03c      	b.n	801a34a <USB_EPStartXfer+0x3ae>
 801a2d0:	1d7b      	adds	r3, r7, #5
 801a2d2:	33ff      	adds	r3, #255	@ 0xff
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	085b      	lsrs	r3, r3, #1
 801a2d8:	21fc      	movs	r1, #252	@ 0xfc
 801a2da:	187a      	adds	r2, r7, r1
 801a2dc:	6013      	str	r3, [r2, #0]
 801a2de:	1d7b      	adds	r3, r7, #5
 801a2e0:	33ff      	adds	r3, #255	@ 0xff
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	2201      	movs	r2, #1
 801a2e6:	4013      	ands	r3, r2
 801a2e8:	d004      	beq.n	801a2f4 <USB_EPStartXfer+0x358>
 801a2ea:	187b      	adds	r3, r7, r1
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	3301      	adds	r3, #1
 801a2f0:	187a      	adds	r2, r7, r1
 801a2f2:	6013      	str	r3, [r2, #0]
 801a2f4:	697b      	ldr	r3, [r7, #20]
 801a2f6:	881b      	ldrh	r3, [r3, #0]
 801a2f8:	b29a      	uxth	r2, r3
 801a2fa:	23fc      	movs	r3, #252	@ 0xfc
 801a2fc:	18fb      	adds	r3, r7, r3
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	b29b      	uxth	r3, r3
 801a302:	029b      	lsls	r3, r3, #10
 801a304:	b29b      	uxth	r3, r3
 801a306:	4313      	orrs	r3, r2
 801a308:	b29a      	uxth	r2, r3
 801a30a:	697b      	ldr	r3, [r7, #20]
 801a30c:	801a      	strh	r2, [r3, #0]
 801a30e:	e01c      	b.n	801a34a <USB_EPStartXfer+0x3ae>
 801a310:	683b      	ldr	r3, [r7, #0]
 801a312:	785b      	ldrb	r3, [r3, #1]
 801a314:	2b01      	cmp	r3, #1
 801a316:	d118      	bne.n	801a34a <USB_EPStartXfer+0x3ae>
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	623b      	str	r3, [r7, #32]
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	2250      	movs	r2, #80	@ 0x50
 801a320:	5a9b      	ldrh	r3, [r3, r2]
 801a322:	b29b      	uxth	r3, r3
 801a324:	001a      	movs	r2, r3
 801a326:	6a3b      	ldr	r3, [r7, #32]
 801a328:	189b      	adds	r3, r3, r2
 801a32a:	623b      	str	r3, [r7, #32]
 801a32c:	683b      	ldr	r3, [r7, #0]
 801a32e:	781b      	ldrb	r3, [r3, #0]
 801a330:	00da      	lsls	r2, r3, #3
 801a332:	6a3b      	ldr	r3, [r7, #32]
 801a334:	18d3      	adds	r3, r2, r3
 801a336:	4a0e      	ldr	r2, [pc, #56]	@ (801a370 <USB_EPStartXfer+0x3d4>)
 801a338:	4694      	mov	ip, r2
 801a33a:	4463      	add	r3, ip
 801a33c:	61fb      	str	r3, [r7, #28]
 801a33e:	1d7b      	adds	r3, r7, #5
 801a340:	33ff      	adds	r3, #255	@ 0xff
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	b29a      	uxth	r2, r3
 801a346:	69fb      	ldr	r3, [r7, #28]
 801a348:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a34a:	2076      	movs	r0, #118	@ 0x76
 801a34c:	183b      	adds	r3, r7, r0
 801a34e:	683a      	ldr	r2, [r7, #0]
 801a350:	8912      	ldrh	r2, [r2, #8]
 801a352:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a354:	683b      	ldr	r3, [r7, #0]
 801a356:	6959      	ldr	r1, [r3, #20]
 801a358:	1d7b      	adds	r3, r7, #5
 801a35a:	33ff      	adds	r3, #255	@ 0xff
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	b29c      	uxth	r4, r3
 801a360:	183b      	adds	r3, r7, r0
 801a362:	881a      	ldrh	r2, [r3, #0]
 801a364:	6878      	ldr	r0, [r7, #4]
 801a366:	0023      	movs	r3, r4
 801a368:	f001 f88a 	bl	801b480 <USB_WritePMA>
 801a36c:	e329      	b.n	801a9c2 <USB_EPStartXfer+0xa26>
 801a36e:	46c0      	nop			@ (mov r8, r8)
 801a370:	00000402 	.word	0x00000402
 801a374:	ffff8f8f 	.word	0xffff8f8f
 801a378:	ffff8180 	.word	0xffff8180
 801a37c:	00000406 	.word	0x00000406
 801a380:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a384:	683b      	ldr	r3, [r7, #0]
 801a386:	785b      	ldrb	r3, [r3, #1]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d000      	beq.n	801a38e <USB_EPStartXfer+0x3f2>
 801a38c:	e070      	b.n	801a470 <USB_EPStartXfer+0x4d4>
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	2250      	movs	r2, #80	@ 0x50
 801a396:	5a9b      	ldrh	r3, [r3, r2]
 801a398:	b29b      	uxth	r3, r3
 801a39a:	001a      	movs	r2, r3
 801a39c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a39e:	189b      	adds	r3, r3, r2
 801a3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a3a2:	683b      	ldr	r3, [r7, #0]
 801a3a4:	781b      	ldrb	r3, [r3, #0]
 801a3a6:	00da      	lsls	r2, r3, #3
 801a3a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a3aa:	18d3      	adds	r3, r2, r3
 801a3ac:	4acd      	ldr	r2, [pc, #820]	@ (801a6e4 <USB_EPStartXfer+0x748>)
 801a3ae:	4694      	mov	ip, r2
 801a3b0:	4463      	add	r3, ip
 801a3b2:	647b      	str	r3, [r7, #68]	@ 0x44
 801a3b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a3b6:	881b      	ldrh	r3, [r3, #0]
 801a3b8:	b29b      	uxth	r3, r3
 801a3ba:	059b      	lsls	r3, r3, #22
 801a3bc:	0d9b      	lsrs	r3, r3, #22
 801a3be:	b29a      	uxth	r2, r3
 801a3c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a3c2:	801a      	strh	r2, [r3, #0]
 801a3c4:	1d7b      	adds	r3, r7, #5
 801a3c6:	33ff      	adds	r3, #255	@ 0xff
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	2b3e      	cmp	r3, #62	@ 0x3e
 801a3cc:	d922      	bls.n	801a414 <USB_EPStartXfer+0x478>
 801a3ce:	1d7b      	adds	r3, r7, #5
 801a3d0:	33ff      	adds	r3, #255	@ 0xff
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	095b      	lsrs	r3, r3, #5
 801a3d6:	21f8      	movs	r1, #248	@ 0xf8
 801a3d8:	187a      	adds	r2, r7, r1
 801a3da:	6013      	str	r3, [r2, #0]
 801a3dc:	1d7b      	adds	r3, r7, #5
 801a3de:	33ff      	adds	r3, #255	@ 0xff
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	221f      	movs	r2, #31
 801a3e4:	4013      	ands	r3, r2
 801a3e6:	d104      	bne.n	801a3f2 <USB_EPStartXfer+0x456>
 801a3e8:	187b      	adds	r3, r7, r1
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	3b01      	subs	r3, #1
 801a3ee:	187a      	adds	r2, r7, r1
 801a3f0:	6013      	str	r3, [r2, #0]
 801a3f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a3f4:	881b      	ldrh	r3, [r3, #0]
 801a3f6:	b29a      	uxth	r2, r3
 801a3f8:	23f8      	movs	r3, #248	@ 0xf8
 801a3fa:	18fb      	adds	r3, r7, r3
 801a3fc:	681b      	ldr	r3, [r3, #0]
 801a3fe:	b29b      	uxth	r3, r3
 801a400:	029b      	lsls	r3, r3, #10
 801a402:	b29b      	uxth	r3, r3
 801a404:	4313      	orrs	r3, r2
 801a406:	b29b      	uxth	r3, r3
 801a408:	4ab7      	ldr	r2, [pc, #732]	@ (801a6e8 <USB_EPStartXfer+0x74c>)
 801a40a:	4313      	orrs	r3, r2
 801a40c:	b29a      	uxth	r2, r3
 801a40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a410:	801a      	strh	r2, [r3, #0]
 801a412:	e04a      	b.n	801a4aa <USB_EPStartXfer+0x50e>
 801a414:	1d7b      	adds	r3, r7, #5
 801a416:	33ff      	adds	r3, #255	@ 0xff
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d108      	bne.n	801a430 <USB_EPStartXfer+0x494>
 801a41e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a420:	881b      	ldrh	r3, [r3, #0]
 801a422:	b29b      	uxth	r3, r3
 801a424:	4ab0      	ldr	r2, [pc, #704]	@ (801a6e8 <USB_EPStartXfer+0x74c>)
 801a426:	4313      	orrs	r3, r2
 801a428:	b29a      	uxth	r2, r3
 801a42a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a42c:	801a      	strh	r2, [r3, #0]
 801a42e:	e03c      	b.n	801a4aa <USB_EPStartXfer+0x50e>
 801a430:	1d7b      	adds	r3, r7, #5
 801a432:	33ff      	adds	r3, #255	@ 0xff
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	085b      	lsrs	r3, r3, #1
 801a438:	21f8      	movs	r1, #248	@ 0xf8
 801a43a:	187a      	adds	r2, r7, r1
 801a43c:	6013      	str	r3, [r2, #0]
 801a43e:	1d7b      	adds	r3, r7, #5
 801a440:	33ff      	adds	r3, #255	@ 0xff
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	2201      	movs	r2, #1
 801a446:	4013      	ands	r3, r2
 801a448:	d004      	beq.n	801a454 <USB_EPStartXfer+0x4b8>
 801a44a:	187b      	adds	r3, r7, r1
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	3301      	adds	r3, #1
 801a450:	187a      	adds	r2, r7, r1
 801a452:	6013      	str	r3, [r2, #0]
 801a454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a456:	881b      	ldrh	r3, [r3, #0]
 801a458:	b29a      	uxth	r2, r3
 801a45a:	23f8      	movs	r3, #248	@ 0xf8
 801a45c:	18fb      	adds	r3, r7, r3
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	b29b      	uxth	r3, r3
 801a462:	029b      	lsls	r3, r3, #10
 801a464:	b29b      	uxth	r3, r3
 801a466:	4313      	orrs	r3, r2
 801a468:	b29a      	uxth	r2, r3
 801a46a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a46c:	801a      	strh	r2, [r3, #0]
 801a46e:	e01c      	b.n	801a4aa <USB_EPStartXfer+0x50e>
 801a470:	683b      	ldr	r3, [r7, #0]
 801a472:	785b      	ldrb	r3, [r3, #1]
 801a474:	2b01      	cmp	r3, #1
 801a476:	d118      	bne.n	801a4aa <USB_EPStartXfer+0x50e>
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	653b      	str	r3, [r7, #80]	@ 0x50
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	2250      	movs	r2, #80	@ 0x50
 801a480:	5a9b      	ldrh	r3, [r3, r2]
 801a482:	b29b      	uxth	r3, r3
 801a484:	001a      	movs	r2, r3
 801a486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a488:	189b      	adds	r3, r3, r2
 801a48a:	653b      	str	r3, [r7, #80]	@ 0x50
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	781b      	ldrb	r3, [r3, #0]
 801a490:	00da      	lsls	r2, r3, #3
 801a492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a494:	18d3      	adds	r3, r2, r3
 801a496:	4a93      	ldr	r2, [pc, #588]	@ (801a6e4 <USB_EPStartXfer+0x748>)
 801a498:	4694      	mov	ip, r2
 801a49a:	4463      	add	r3, ip
 801a49c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a49e:	1d7b      	adds	r3, r7, #5
 801a4a0:	33ff      	adds	r3, #255	@ 0xff
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	b29a      	uxth	r2, r3
 801a4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a4a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801a4aa:	2076      	movs	r0, #118	@ 0x76
 801a4ac:	183b      	adds	r3, r7, r0
 801a4ae:	683a      	ldr	r2, [r7, #0]
 801a4b0:	8912      	ldrh	r2, [r2, #8]
 801a4b2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a4b4:	683b      	ldr	r3, [r7, #0]
 801a4b6:	6959      	ldr	r1, [r3, #20]
 801a4b8:	1d7b      	adds	r3, r7, #5
 801a4ba:	33ff      	adds	r3, #255	@ 0xff
 801a4bc:	681b      	ldr	r3, [r3, #0]
 801a4be:	b29c      	uxth	r4, r3
 801a4c0:	183b      	adds	r3, r7, r0
 801a4c2:	881a      	ldrh	r2, [r3, #0]
 801a4c4:	6878      	ldr	r0, [r7, #4]
 801a4c6:	0023      	movs	r3, r4
 801a4c8:	f000 ffda 	bl	801b480 <USB_WritePMA>
            ep->xfer_buff += len;
 801a4cc:	683b      	ldr	r3, [r7, #0]
 801a4ce:	695a      	ldr	r2, [r3, #20]
 801a4d0:	1d7b      	adds	r3, r7, #5
 801a4d2:	33ff      	adds	r3, #255	@ 0xff
 801a4d4:	681b      	ldr	r3, [r3, #0]
 801a4d6:	18d2      	adds	r2, r2, r3
 801a4d8:	683b      	ldr	r3, [r7, #0]
 801a4da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a4dc:	683b      	ldr	r3, [r7, #0]
 801a4de:	6a1a      	ldr	r2, [r3, #32]
 801a4e0:	683b      	ldr	r3, [r7, #0]
 801a4e2:	691b      	ldr	r3, [r3, #16]
 801a4e4:	429a      	cmp	r2, r3
 801a4e6:	d908      	bls.n	801a4fa <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801a4e8:	683b      	ldr	r3, [r7, #0]
 801a4ea:	6a1a      	ldr	r2, [r3, #32]
 801a4ec:	1d7b      	adds	r3, r7, #5
 801a4ee:	33ff      	adds	r3, #255	@ 0xff
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	1ad2      	subs	r2, r2, r3
 801a4f4:	683b      	ldr	r3, [r7, #0]
 801a4f6:	621a      	str	r2, [r3, #32]
 801a4f8:	e007      	b.n	801a50a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801a4fa:	683b      	ldr	r3, [r7, #0]
 801a4fc:	6a1b      	ldr	r3, [r3, #32]
 801a4fe:	1d7a      	adds	r2, r7, #5
 801a500:	32ff      	adds	r2, #255	@ 0xff
 801a502:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a504:	683b      	ldr	r3, [r7, #0]
 801a506:	2200      	movs	r2, #0
 801a508:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	643b      	str	r3, [r7, #64]	@ 0x40
 801a50e:	683b      	ldr	r3, [r7, #0]
 801a510:	785b      	ldrb	r3, [r3, #1]
 801a512:	2b00      	cmp	r3, #0
 801a514:	d000      	beq.n	801a518 <USB_EPStartXfer+0x57c>
 801a516:	e070      	b.n	801a5fa <USB_EPStartXfer+0x65e>
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	2250      	movs	r2, #80	@ 0x50
 801a520:	5a9b      	ldrh	r3, [r3, r2]
 801a522:	b29b      	uxth	r3, r3
 801a524:	001a      	movs	r2, r3
 801a526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a528:	189b      	adds	r3, r3, r2
 801a52a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	781b      	ldrb	r3, [r3, #0]
 801a530:	00da      	lsls	r2, r3, #3
 801a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a534:	18d3      	adds	r3, r2, r3
 801a536:	4a6d      	ldr	r2, [pc, #436]	@ (801a6ec <USB_EPStartXfer+0x750>)
 801a538:	4694      	mov	ip, r2
 801a53a:	4463      	add	r3, ip
 801a53c:	637b      	str	r3, [r7, #52]	@ 0x34
 801a53e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a540:	881b      	ldrh	r3, [r3, #0]
 801a542:	b29b      	uxth	r3, r3
 801a544:	059b      	lsls	r3, r3, #22
 801a546:	0d9b      	lsrs	r3, r3, #22
 801a548:	b29a      	uxth	r2, r3
 801a54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a54c:	801a      	strh	r2, [r3, #0]
 801a54e:	1d7b      	adds	r3, r7, #5
 801a550:	33ff      	adds	r3, #255	@ 0xff
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	2b3e      	cmp	r3, #62	@ 0x3e
 801a556:	d922      	bls.n	801a59e <USB_EPStartXfer+0x602>
 801a558:	1d7b      	adds	r3, r7, #5
 801a55a:	33ff      	adds	r3, #255	@ 0xff
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	095b      	lsrs	r3, r3, #5
 801a560:	21f4      	movs	r1, #244	@ 0xf4
 801a562:	187a      	adds	r2, r7, r1
 801a564:	6013      	str	r3, [r2, #0]
 801a566:	1d7b      	adds	r3, r7, #5
 801a568:	33ff      	adds	r3, #255	@ 0xff
 801a56a:	681b      	ldr	r3, [r3, #0]
 801a56c:	221f      	movs	r2, #31
 801a56e:	4013      	ands	r3, r2
 801a570:	d104      	bne.n	801a57c <USB_EPStartXfer+0x5e0>
 801a572:	187b      	adds	r3, r7, r1
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	3b01      	subs	r3, #1
 801a578:	187a      	adds	r2, r7, r1
 801a57a:	6013      	str	r3, [r2, #0]
 801a57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a57e:	881b      	ldrh	r3, [r3, #0]
 801a580:	b29a      	uxth	r2, r3
 801a582:	23f4      	movs	r3, #244	@ 0xf4
 801a584:	18fb      	adds	r3, r7, r3
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	b29b      	uxth	r3, r3
 801a58a:	029b      	lsls	r3, r3, #10
 801a58c:	b29b      	uxth	r3, r3
 801a58e:	4313      	orrs	r3, r2
 801a590:	b29b      	uxth	r3, r3
 801a592:	4a55      	ldr	r2, [pc, #340]	@ (801a6e8 <USB_EPStartXfer+0x74c>)
 801a594:	4313      	orrs	r3, r2
 801a596:	b29a      	uxth	r2, r3
 801a598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a59a:	801a      	strh	r2, [r3, #0]
 801a59c:	e048      	b.n	801a630 <USB_EPStartXfer+0x694>
 801a59e:	1d7b      	adds	r3, r7, #5
 801a5a0:	33ff      	adds	r3, #255	@ 0xff
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d108      	bne.n	801a5ba <USB_EPStartXfer+0x61e>
 801a5a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5aa:	881b      	ldrh	r3, [r3, #0]
 801a5ac:	b29b      	uxth	r3, r3
 801a5ae:	4a4e      	ldr	r2, [pc, #312]	@ (801a6e8 <USB_EPStartXfer+0x74c>)
 801a5b0:	4313      	orrs	r3, r2
 801a5b2:	b29a      	uxth	r2, r3
 801a5b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5b6:	801a      	strh	r2, [r3, #0]
 801a5b8:	e03a      	b.n	801a630 <USB_EPStartXfer+0x694>
 801a5ba:	1d7b      	adds	r3, r7, #5
 801a5bc:	33ff      	adds	r3, #255	@ 0xff
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	085b      	lsrs	r3, r3, #1
 801a5c2:	21f4      	movs	r1, #244	@ 0xf4
 801a5c4:	187a      	adds	r2, r7, r1
 801a5c6:	6013      	str	r3, [r2, #0]
 801a5c8:	1d7b      	adds	r3, r7, #5
 801a5ca:	33ff      	adds	r3, #255	@ 0xff
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	2201      	movs	r2, #1
 801a5d0:	4013      	ands	r3, r2
 801a5d2:	d004      	beq.n	801a5de <USB_EPStartXfer+0x642>
 801a5d4:	187b      	adds	r3, r7, r1
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	3301      	adds	r3, #1
 801a5da:	187a      	adds	r2, r7, r1
 801a5dc:	6013      	str	r3, [r2, #0]
 801a5de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5e0:	881b      	ldrh	r3, [r3, #0]
 801a5e2:	b29a      	uxth	r2, r3
 801a5e4:	23f4      	movs	r3, #244	@ 0xf4
 801a5e6:	18fb      	adds	r3, r7, r3
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	b29b      	uxth	r3, r3
 801a5ec:	029b      	lsls	r3, r3, #10
 801a5ee:	b29b      	uxth	r3, r3
 801a5f0:	4313      	orrs	r3, r2
 801a5f2:	b29a      	uxth	r2, r3
 801a5f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5f6:	801a      	strh	r2, [r3, #0]
 801a5f8:	e01a      	b.n	801a630 <USB_EPStartXfer+0x694>
 801a5fa:	683b      	ldr	r3, [r7, #0]
 801a5fc:	785b      	ldrb	r3, [r3, #1]
 801a5fe:	2b01      	cmp	r3, #1
 801a600:	d116      	bne.n	801a630 <USB_EPStartXfer+0x694>
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	2250      	movs	r2, #80	@ 0x50
 801a606:	5a9b      	ldrh	r3, [r3, r2]
 801a608:	b29b      	uxth	r3, r3
 801a60a:	001a      	movs	r2, r3
 801a60c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a60e:	189b      	adds	r3, r3, r2
 801a610:	643b      	str	r3, [r7, #64]	@ 0x40
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	781b      	ldrb	r3, [r3, #0]
 801a616:	00da      	lsls	r2, r3, #3
 801a618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a61a:	18d3      	adds	r3, r2, r3
 801a61c:	4a33      	ldr	r2, [pc, #204]	@ (801a6ec <USB_EPStartXfer+0x750>)
 801a61e:	4694      	mov	ip, r2
 801a620:	4463      	add	r3, ip
 801a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a624:	1d7b      	adds	r3, r7, #5
 801a626:	33ff      	adds	r3, #255	@ 0xff
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	b29a      	uxth	r2, r3
 801a62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a62e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a630:	2076      	movs	r0, #118	@ 0x76
 801a632:	183b      	adds	r3, r7, r0
 801a634:	683a      	ldr	r2, [r7, #0]
 801a636:	8952      	ldrh	r2, [r2, #10]
 801a638:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a63a:	683b      	ldr	r3, [r7, #0]
 801a63c:	6959      	ldr	r1, [r3, #20]
 801a63e:	1d7b      	adds	r3, r7, #5
 801a640:	33ff      	adds	r3, #255	@ 0xff
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	b29c      	uxth	r4, r3
 801a646:	183b      	adds	r3, r7, r0
 801a648:	881a      	ldrh	r2, [r3, #0]
 801a64a:	6878      	ldr	r0, [r7, #4]
 801a64c:	0023      	movs	r3, r4
 801a64e:	f000 ff17 	bl	801b480 <USB_WritePMA>
 801a652:	e1b6      	b.n	801a9c2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a654:	683b      	ldr	r3, [r7, #0]
 801a656:	6a1b      	ldr	r3, [r3, #32]
 801a658:	1d7a      	adds	r2, r7, #5
 801a65a:	32ff      	adds	r2, #255	@ 0xff
 801a65c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a65e:	687a      	ldr	r2, [r7, #4]
 801a660:	683b      	ldr	r3, [r7, #0]
 801a662:	781b      	ldrb	r3, [r3, #0]
 801a664:	009b      	lsls	r3, r3, #2
 801a666:	18d3      	adds	r3, r2, r3
 801a668:	881b      	ldrh	r3, [r3, #0]
 801a66a:	b29a      	uxth	r2, r3
 801a66c:	2062      	movs	r0, #98	@ 0x62
 801a66e:	183b      	adds	r3, r7, r0
 801a670:	491f      	ldr	r1, [pc, #124]	@ (801a6f0 <USB_EPStartXfer+0x754>)
 801a672:	400a      	ands	r2, r1
 801a674:	801a      	strh	r2, [r3, #0]
 801a676:	687a      	ldr	r2, [r7, #4]
 801a678:	683b      	ldr	r3, [r7, #0]
 801a67a:	781b      	ldrb	r3, [r3, #0]
 801a67c:	009b      	lsls	r3, r3, #2
 801a67e:	18d3      	adds	r3, r2, r3
 801a680:	183a      	adds	r2, r7, r0
 801a682:	8812      	ldrh	r2, [r2, #0]
 801a684:	491b      	ldr	r1, [pc, #108]	@ (801a6f4 <USB_EPStartXfer+0x758>)
 801a686:	430a      	orrs	r2, r1
 801a688:	b292      	uxth	r2, r2
 801a68a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	2250      	movs	r2, #80	@ 0x50
 801a694:	5a9b      	ldrh	r3, [r3, r2]
 801a696:	b29b      	uxth	r3, r3
 801a698:	001a      	movs	r2, r3
 801a69a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a69c:	189b      	adds	r3, r3, r2
 801a69e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a6a0:	683b      	ldr	r3, [r7, #0]
 801a6a2:	781b      	ldrb	r3, [r3, #0]
 801a6a4:	00da      	lsls	r2, r3, #3
 801a6a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a6a8:	18d3      	adds	r3, r2, r3
 801a6aa:	4a0e      	ldr	r2, [pc, #56]	@ (801a6e4 <USB_EPStartXfer+0x748>)
 801a6ac:	4694      	mov	ip, r2
 801a6ae:	4463      	add	r3, ip
 801a6b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a6b2:	1d7b      	adds	r3, r7, #5
 801a6b4:	33ff      	adds	r3, #255	@ 0xff
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	b29a      	uxth	r2, r3
 801a6ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a6bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a6be:	2076      	movs	r0, #118	@ 0x76
 801a6c0:	183b      	adds	r3, r7, r0
 801a6c2:	683a      	ldr	r2, [r7, #0]
 801a6c4:	8912      	ldrh	r2, [r2, #8]
 801a6c6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a6c8:	683b      	ldr	r3, [r7, #0]
 801a6ca:	6959      	ldr	r1, [r3, #20]
 801a6cc:	1d7b      	adds	r3, r7, #5
 801a6ce:	33ff      	adds	r3, #255	@ 0xff
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	b29c      	uxth	r4, r3
 801a6d4:	183b      	adds	r3, r7, r0
 801a6d6:	881a      	ldrh	r2, [r3, #0]
 801a6d8:	6878      	ldr	r0, [r7, #4]
 801a6da:	0023      	movs	r3, r4
 801a6dc:	f000 fed0 	bl	801b480 <USB_WritePMA>
 801a6e0:	e16f      	b.n	801a9c2 <USB_EPStartXfer+0xa26>
 801a6e2:	46c0      	nop			@ (mov r8, r8)
 801a6e4:	00000402 	.word	0x00000402
 801a6e8:	ffff8000 	.word	0xffff8000
 801a6ec:	00000406 	.word	0x00000406
 801a6f0:	ffff8e8f 	.word	0xffff8e8f
 801a6f4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a6f8:	683b      	ldr	r3, [r7, #0]
 801a6fa:	6a1a      	ldr	r2, [r3, #32]
 801a6fc:	1d7b      	adds	r3, r7, #5
 801a6fe:	33ff      	adds	r3, #255	@ 0xff
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	1ad2      	subs	r2, r2, r3
 801a704:	683b      	ldr	r3, [r7, #0]
 801a706:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a708:	687a      	ldr	r2, [r7, #4]
 801a70a:	683b      	ldr	r3, [r7, #0]
 801a70c:	781b      	ldrb	r3, [r3, #0]
 801a70e:	009b      	lsls	r3, r3, #2
 801a710:	18d3      	adds	r3, r2, r3
 801a712:	881b      	ldrh	r3, [r3, #0]
 801a714:	b29b      	uxth	r3, r3
 801a716:	001a      	movs	r2, r3
 801a718:	2340      	movs	r3, #64	@ 0x40
 801a71a:	4013      	ands	r3, r2
 801a71c:	d100      	bne.n	801a720 <USB_EPStartXfer+0x784>
 801a71e:	e0a4      	b.n	801a86a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	673b      	str	r3, [r7, #112]	@ 0x70
 801a724:	683b      	ldr	r3, [r7, #0]
 801a726:	785b      	ldrb	r3, [r3, #1]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d000      	beq.n	801a72e <USB_EPStartXfer+0x792>
 801a72c:	e070      	b.n	801a810 <USB_EPStartXfer+0x874>
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	2250      	movs	r2, #80	@ 0x50
 801a736:	5a9b      	ldrh	r3, [r3, r2]
 801a738:	b29b      	uxth	r3, r3
 801a73a:	001a      	movs	r2, r3
 801a73c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a73e:	189b      	adds	r3, r3, r2
 801a740:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a742:	683b      	ldr	r3, [r7, #0]
 801a744:	781b      	ldrb	r3, [r3, #0]
 801a746:	00da      	lsls	r2, r3, #3
 801a748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a74a:	18d3      	adds	r3, r2, r3
 801a74c:	4abc      	ldr	r2, [pc, #752]	@ (801aa40 <USB_EPStartXfer+0xaa4>)
 801a74e:	4694      	mov	ip, r2
 801a750:	4463      	add	r3, ip
 801a752:	667b      	str	r3, [r7, #100]	@ 0x64
 801a754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a756:	881b      	ldrh	r3, [r3, #0]
 801a758:	b29b      	uxth	r3, r3
 801a75a:	059b      	lsls	r3, r3, #22
 801a75c:	0d9b      	lsrs	r3, r3, #22
 801a75e:	b29a      	uxth	r2, r3
 801a760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a762:	801a      	strh	r2, [r3, #0]
 801a764:	1d7b      	adds	r3, r7, #5
 801a766:	33ff      	adds	r3, #255	@ 0xff
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	2b3e      	cmp	r3, #62	@ 0x3e
 801a76c:	d922      	bls.n	801a7b4 <USB_EPStartXfer+0x818>
 801a76e:	1d7b      	adds	r3, r7, #5
 801a770:	33ff      	adds	r3, #255	@ 0xff
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	095b      	lsrs	r3, r3, #5
 801a776:	21f0      	movs	r1, #240	@ 0xf0
 801a778:	187a      	adds	r2, r7, r1
 801a77a:	6013      	str	r3, [r2, #0]
 801a77c:	1d7b      	adds	r3, r7, #5
 801a77e:	33ff      	adds	r3, #255	@ 0xff
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	221f      	movs	r2, #31
 801a784:	4013      	ands	r3, r2
 801a786:	d104      	bne.n	801a792 <USB_EPStartXfer+0x7f6>
 801a788:	187b      	adds	r3, r7, r1
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	3b01      	subs	r3, #1
 801a78e:	187a      	adds	r2, r7, r1
 801a790:	6013      	str	r3, [r2, #0]
 801a792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a794:	881b      	ldrh	r3, [r3, #0]
 801a796:	b29a      	uxth	r2, r3
 801a798:	23f0      	movs	r3, #240	@ 0xf0
 801a79a:	18fb      	adds	r3, r7, r3
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	b29b      	uxth	r3, r3
 801a7a0:	029b      	lsls	r3, r3, #10
 801a7a2:	b29b      	uxth	r3, r3
 801a7a4:	4313      	orrs	r3, r2
 801a7a6:	b29b      	uxth	r3, r3
 801a7a8:	4aa6      	ldr	r2, [pc, #664]	@ (801aa44 <USB_EPStartXfer+0xaa8>)
 801a7aa:	4313      	orrs	r3, r2
 801a7ac:	b29a      	uxth	r2, r3
 801a7ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a7b0:	801a      	strh	r2, [r3, #0]
 801a7b2:	e048      	b.n	801a846 <USB_EPStartXfer+0x8aa>
 801a7b4:	1d7b      	adds	r3, r7, #5
 801a7b6:	33ff      	adds	r3, #255	@ 0xff
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d108      	bne.n	801a7d0 <USB_EPStartXfer+0x834>
 801a7be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a7c0:	881b      	ldrh	r3, [r3, #0]
 801a7c2:	b29b      	uxth	r3, r3
 801a7c4:	4a9f      	ldr	r2, [pc, #636]	@ (801aa44 <USB_EPStartXfer+0xaa8>)
 801a7c6:	4313      	orrs	r3, r2
 801a7c8:	b29a      	uxth	r2, r3
 801a7ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a7cc:	801a      	strh	r2, [r3, #0]
 801a7ce:	e03a      	b.n	801a846 <USB_EPStartXfer+0x8aa>
 801a7d0:	1d7b      	adds	r3, r7, #5
 801a7d2:	33ff      	adds	r3, #255	@ 0xff
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	085b      	lsrs	r3, r3, #1
 801a7d8:	21f0      	movs	r1, #240	@ 0xf0
 801a7da:	187a      	adds	r2, r7, r1
 801a7dc:	6013      	str	r3, [r2, #0]
 801a7de:	1d7b      	adds	r3, r7, #5
 801a7e0:	33ff      	adds	r3, #255	@ 0xff
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	2201      	movs	r2, #1
 801a7e6:	4013      	ands	r3, r2
 801a7e8:	d004      	beq.n	801a7f4 <USB_EPStartXfer+0x858>
 801a7ea:	187b      	adds	r3, r7, r1
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	3301      	adds	r3, #1
 801a7f0:	187a      	adds	r2, r7, r1
 801a7f2:	6013      	str	r3, [r2, #0]
 801a7f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a7f6:	881b      	ldrh	r3, [r3, #0]
 801a7f8:	b29a      	uxth	r2, r3
 801a7fa:	23f0      	movs	r3, #240	@ 0xf0
 801a7fc:	18fb      	adds	r3, r7, r3
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	b29b      	uxth	r3, r3
 801a802:	029b      	lsls	r3, r3, #10
 801a804:	b29b      	uxth	r3, r3
 801a806:	4313      	orrs	r3, r2
 801a808:	b29a      	uxth	r2, r3
 801a80a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a80c:	801a      	strh	r2, [r3, #0]
 801a80e:	e01a      	b.n	801a846 <USB_EPStartXfer+0x8aa>
 801a810:	683b      	ldr	r3, [r7, #0]
 801a812:	785b      	ldrb	r3, [r3, #1]
 801a814:	2b01      	cmp	r3, #1
 801a816:	d116      	bne.n	801a846 <USB_EPStartXfer+0x8aa>
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	2250      	movs	r2, #80	@ 0x50
 801a81c:	5a9b      	ldrh	r3, [r3, r2]
 801a81e:	b29b      	uxth	r3, r3
 801a820:	001a      	movs	r2, r3
 801a822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a824:	189b      	adds	r3, r3, r2
 801a826:	673b      	str	r3, [r7, #112]	@ 0x70
 801a828:	683b      	ldr	r3, [r7, #0]
 801a82a:	781b      	ldrb	r3, [r3, #0]
 801a82c:	00da      	lsls	r2, r3, #3
 801a82e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a830:	18d3      	adds	r3, r2, r3
 801a832:	4a83      	ldr	r2, [pc, #524]	@ (801aa40 <USB_EPStartXfer+0xaa4>)
 801a834:	4694      	mov	ip, r2
 801a836:	4463      	add	r3, ip
 801a838:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a83a:	1d7b      	adds	r3, r7, #5
 801a83c:	33ff      	adds	r3, #255	@ 0xff
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	b29a      	uxth	r2, r3
 801a842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a844:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a846:	2076      	movs	r0, #118	@ 0x76
 801a848:	183b      	adds	r3, r7, r0
 801a84a:	683a      	ldr	r2, [r7, #0]
 801a84c:	8952      	ldrh	r2, [r2, #10]
 801a84e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a850:	683b      	ldr	r3, [r7, #0]
 801a852:	6959      	ldr	r1, [r3, #20]
 801a854:	1d7b      	adds	r3, r7, #5
 801a856:	33ff      	adds	r3, #255	@ 0xff
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	b29c      	uxth	r4, r3
 801a85c:	183b      	adds	r3, r7, r0
 801a85e:	881a      	ldrh	r2, [r3, #0]
 801a860:	6878      	ldr	r0, [r7, #4]
 801a862:	0023      	movs	r3, r4
 801a864:	f000 fe0c 	bl	801b480 <USB_WritePMA>
 801a868:	e0ab      	b.n	801a9c2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a86a:	683b      	ldr	r3, [r7, #0]
 801a86c:	785b      	ldrb	r3, [r3, #1]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d000      	beq.n	801a874 <USB_EPStartXfer+0x8d8>
 801a872:	e070      	b.n	801a956 <USB_EPStartXfer+0x9ba>
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	2250      	movs	r2, #80	@ 0x50
 801a87c:	5a9b      	ldrh	r3, [r3, r2]
 801a87e:	b29b      	uxth	r3, r3
 801a880:	001a      	movs	r2, r3
 801a882:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a884:	189b      	adds	r3, r3, r2
 801a886:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a888:	683b      	ldr	r3, [r7, #0]
 801a88a:	781b      	ldrb	r3, [r3, #0]
 801a88c:	00da      	lsls	r2, r3, #3
 801a88e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a890:	18d3      	adds	r3, r2, r3
 801a892:	4a6d      	ldr	r2, [pc, #436]	@ (801aa48 <USB_EPStartXfer+0xaac>)
 801a894:	4694      	mov	ip, r2
 801a896:	4463      	add	r3, ip
 801a898:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a89a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a89c:	881b      	ldrh	r3, [r3, #0]
 801a89e:	b29b      	uxth	r3, r3
 801a8a0:	059b      	lsls	r3, r3, #22
 801a8a2:	0d9b      	lsrs	r3, r3, #22
 801a8a4:	b29a      	uxth	r2, r3
 801a8a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a8a8:	801a      	strh	r2, [r3, #0]
 801a8aa:	1d7b      	adds	r3, r7, #5
 801a8ac:	33ff      	adds	r3, #255	@ 0xff
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	2b3e      	cmp	r3, #62	@ 0x3e
 801a8b2:	d922      	bls.n	801a8fa <USB_EPStartXfer+0x95e>
 801a8b4:	1d7b      	adds	r3, r7, #5
 801a8b6:	33ff      	adds	r3, #255	@ 0xff
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	095b      	lsrs	r3, r3, #5
 801a8bc:	21ec      	movs	r1, #236	@ 0xec
 801a8be:	187a      	adds	r2, r7, r1
 801a8c0:	6013      	str	r3, [r2, #0]
 801a8c2:	1d7b      	adds	r3, r7, #5
 801a8c4:	33ff      	adds	r3, #255	@ 0xff
 801a8c6:	681b      	ldr	r3, [r3, #0]
 801a8c8:	221f      	movs	r2, #31
 801a8ca:	4013      	ands	r3, r2
 801a8cc:	d104      	bne.n	801a8d8 <USB_EPStartXfer+0x93c>
 801a8ce:	187b      	adds	r3, r7, r1
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	3b01      	subs	r3, #1
 801a8d4:	187a      	adds	r2, r7, r1
 801a8d6:	6013      	str	r3, [r2, #0]
 801a8d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a8da:	881b      	ldrh	r3, [r3, #0]
 801a8dc:	b29a      	uxth	r2, r3
 801a8de:	23ec      	movs	r3, #236	@ 0xec
 801a8e0:	18fb      	adds	r3, r7, r3
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	b29b      	uxth	r3, r3
 801a8e6:	029b      	lsls	r3, r3, #10
 801a8e8:	b29b      	uxth	r3, r3
 801a8ea:	4313      	orrs	r3, r2
 801a8ec:	b29b      	uxth	r3, r3
 801a8ee:	4a55      	ldr	r2, [pc, #340]	@ (801aa44 <USB_EPStartXfer+0xaa8>)
 801a8f0:	4313      	orrs	r3, r2
 801a8f2:	b29a      	uxth	r2, r3
 801a8f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a8f6:	801a      	strh	r2, [r3, #0]
 801a8f8:	e052      	b.n	801a9a0 <USB_EPStartXfer+0xa04>
 801a8fa:	1d7b      	adds	r3, r7, #5
 801a8fc:	33ff      	adds	r3, #255	@ 0xff
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	2b00      	cmp	r3, #0
 801a902:	d108      	bne.n	801a916 <USB_EPStartXfer+0x97a>
 801a904:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a906:	881b      	ldrh	r3, [r3, #0]
 801a908:	b29b      	uxth	r3, r3
 801a90a:	4a4e      	ldr	r2, [pc, #312]	@ (801aa44 <USB_EPStartXfer+0xaa8>)
 801a90c:	4313      	orrs	r3, r2
 801a90e:	b29a      	uxth	r2, r3
 801a910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a912:	801a      	strh	r2, [r3, #0]
 801a914:	e044      	b.n	801a9a0 <USB_EPStartXfer+0xa04>
 801a916:	1d7b      	adds	r3, r7, #5
 801a918:	33ff      	adds	r3, #255	@ 0xff
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	085b      	lsrs	r3, r3, #1
 801a91e:	21ec      	movs	r1, #236	@ 0xec
 801a920:	187a      	adds	r2, r7, r1
 801a922:	6013      	str	r3, [r2, #0]
 801a924:	1d7b      	adds	r3, r7, #5
 801a926:	33ff      	adds	r3, #255	@ 0xff
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	2201      	movs	r2, #1
 801a92c:	4013      	ands	r3, r2
 801a92e:	d004      	beq.n	801a93a <USB_EPStartXfer+0x99e>
 801a930:	187b      	adds	r3, r7, r1
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	3301      	adds	r3, #1
 801a936:	187a      	adds	r2, r7, r1
 801a938:	6013      	str	r3, [r2, #0]
 801a93a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a93c:	881b      	ldrh	r3, [r3, #0]
 801a93e:	b29a      	uxth	r2, r3
 801a940:	23ec      	movs	r3, #236	@ 0xec
 801a942:	18fb      	adds	r3, r7, r3
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	b29b      	uxth	r3, r3
 801a948:	029b      	lsls	r3, r3, #10
 801a94a:	b29b      	uxth	r3, r3
 801a94c:	4313      	orrs	r3, r2
 801a94e:	b29a      	uxth	r2, r3
 801a950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a952:	801a      	strh	r2, [r3, #0]
 801a954:	e024      	b.n	801a9a0 <USB_EPStartXfer+0xa04>
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	785b      	ldrb	r3, [r3, #1]
 801a95a:	2b01      	cmp	r3, #1
 801a95c:	d120      	bne.n	801a9a0 <USB_EPStartXfer+0xa04>
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	2184      	movs	r1, #132	@ 0x84
 801a962:	187a      	adds	r2, r7, r1
 801a964:	6013      	str	r3, [r2, #0]
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	2250      	movs	r2, #80	@ 0x50
 801a96a:	5a9b      	ldrh	r3, [r3, r2]
 801a96c:	b29b      	uxth	r3, r3
 801a96e:	001a      	movs	r2, r3
 801a970:	187b      	adds	r3, r7, r1
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	189b      	adds	r3, r3, r2
 801a976:	187a      	adds	r2, r7, r1
 801a978:	6013      	str	r3, [r2, #0]
 801a97a:	683b      	ldr	r3, [r7, #0]
 801a97c:	781b      	ldrb	r3, [r3, #0]
 801a97e:	00da      	lsls	r2, r3, #3
 801a980:	187b      	adds	r3, r7, r1
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	18d3      	adds	r3, r2, r3
 801a986:	4a30      	ldr	r2, [pc, #192]	@ (801aa48 <USB_EPStartXfer+0xaac>)
 801a988:	4694      	mov	ip, r2
 801a98a:	4463      	add	r3, ip
 801a98c:	2180      	movs	r1, #128	@ 0x80
 801a98e:	187a      	adds	r2, r7, r1
 801a990:	6013      	str	r3, [r2, #0]
 801a992:	1d7b      	adds	r3, r7, #5
 801a994:	33ff      	adds	r3, #255	@ 0xff
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	b29a      	uxth	r2, r3
 801a99a:	187b      	adds	r3, r7, r1
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a9a0:	2076      	movs	r0, #118	@ 0x76
 801a9a2:	183b      	adds	r3, r7, r0
 801a9a4:	683a      	ldr	r2, [r7, #0]
 801a9a6:	8912      	ldrh	r2, [r2, #8]
 801a9a8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a9aa:	683b      	ldr	r3, [r7, #0]
 801a9ac:	6959      	ldr	r1, [r3, #20]
 801a9ae:	1d7b      	adds	r3, r7, #5
 801a9b0:	33ff      	adds	r3, #255	@ 0xff
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	b29c      	uxth	r4, r3
 801a9b6:	183b      	adds	r3, r7, r0
 801a9b8:	881a      	ldrh	r2, [r3, #0]
 801a9ba:	6878      	ldr	r0, [r7, #4]
 801a9bc:	0023      	movs	r3, r4
 801a9be:	f000 fd5f 	bl	801b480 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a9c2:	687a      	ldr	r2, [r7, #4]
 801a9c4:	683b      	ldr	r3, [r7, #0]
 801a9c6:	781b      	ldrb	r3, [r3, #0]
 801a9c8:	009b      	lsls	r3, r3, #2
 801a9ca:	18d3      	adds	r3, r2, r3
 801a9cc:	881b      	ldrh	r3, [r3, #0]
 801a9ce:	b29a      	uxth	r2, r3
 801a9d0:	200a      	movs	r0, #10
 801a9d2:	183b      	adds	r3, r7, r0
 801a9d4:	491d      	ldr	r1, [pc, #116]	@ (801aa4c <USB_EPStartXfer+0xab0>)
 801a9d6:	400a      	ands	r2, r1
 801a9d8:	801a      	strh	r2, [r3, #0]
 801a9da:	183b      	adds	r3, r7, r0
 801a9dc:	183a      	adds	r2, r7, r0
 801a9de:	8812      	ldrh	r2, [r2, #0]
 801a9e0:	2110      	movs	r1, #16
 801a9e2:	404a      	eors	r2, r1
 801a9e4:	801a      	strh	r2, [r3, #0]
 801a9e6:	183b      	adds	r3, r7, r0
 801a9e8:	183a      	adds	r2, r7, r0
 801a9ea:	8812      	ldrh	r2, [r2, #0]
 801a9ec:	2120      	movs	r1, #32
 801a9ee:	404a      	eors	r2, r1
 801a9f0:	801a      	strh	r2, [r3, #0]
 801a9f2:	687a      	ldr	r2, [r7, #4]
 801a9f4:	683b      	ldr	r3, [r7, #0]
 801a9f6:	781b      	ldrb	r3, [r3, #0]
 801a9f8:	009b      	lsls	r3, r3, #2
 801a9fa:	18d3      	adds	r3, r2, r3
 801a9fc:	183a      	adds	r2, r7, r0
 801a9fe:	8812      	ldrh	r2, [r2, #0]
 801aa00:	4913      	ldr	r1, [pc, #76]	@ (801aa50 <USB_EPStartXfer+0xab4>)
 801aa02:	430a      	orrs	r2, r1
 801aa04:	b292      	uxth	r2, r2
 801aa06:	801a      	strh	r2, [r3, #0]
 801aa08:	f000 fbf4 	bl	801b1f4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801aa0c:	683b      	ldr	r3, [r7, #0]
 801aa0e:	7b1b      	ldrb	r3, [r3, #12]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d000      	beq.n	801aa16 <USB_EPStartXfer+0xa7a>
 801aa14:	e0a9      	b.n	801ab6a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801aa16:	683b      	ldr	r3, [r7, #0]
 801aa18:	699a      	ldr	r2, [r3, #24]
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	691b      	ldr	r3, [r3, #16]
 801aa1e:	429a      	cmp	r2, r3
 801aa20:	d918      	bls.n	801aa54 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801aa22:	683b      	ldr	r3, [r7, #0]
 801aa24:	691b      	ldr	r3, [r3, #16]
 801aa26:	1d7a      	adds	r2, r7, #5
 801aa28:	32ff      	adds	r2, #255	@ 0xff
 801aa2a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801aa2c:	683b      	ldr	r3, [r7, #0]
 801aa2e:	699a      	ldr	r2, [r3, #24]
 801aa30:	1d7b      	adds	r3, r7, #5
 801aa32:	33ff      	adds	r3, #255	@ 0xff
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	1ad2      	subs	r2, r2, r3
 801aa38:	683b      	ldr	r3, [r7, #0]
 801aa3a:	619a      	str	r2, [r3, #24]
 801aa3c:	e012      	b.n	801aa64 <USB_EPStartXfer+0xac8>
 801aa3e:	46c0      	nop			@ (mov r8, r8)
 801aa40:	00000406 	.word	0x00000406
 801aa44:	ffff8000 	.word	0xffff8000
 801aa48:	00000402 	.word	0x00000402
 801aa4c:	ffff8fbf 	.word	0xffff8fbf
 801aa50:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801aa54:	683b      	ldr	r3, [r7, #0]
 801aa56:	699b      	ldr	r3, [r3, #24]
 801aa58:	1d7a      	adds	r2, r7, #5
 801aa5a:	32ff      	adds	r2, #255	@ 0xff
 801aa5c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801aa5e:	683b      	ldr	r3, [r7, #0]
 801aa60:	2200      	movs	r2, #0
 801aa62:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	2190      	movs	r1, #144	@ 0x90
 801aa68:	187a      	adds	r2, r7, r1
 801aa6a:	6013      	str	r3, [r2, #0]
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	2250      	movs	r2, #80	@ 0x50
 801aa70:	5a9b      	ldrh	r3, [r3, r2]
 801aa72:	b29b      	uxth	r3, r3
 801aa74:	001a      	movs	r2, r3
 801aa76:	187b      	adds	r3, r7, r1
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	189b      	adds	r3, r3, r2
 801aa7c:	187a      	adds	r2, r7, r1
 801aa7e:	6013      	str	r3, [r2, #0]
 801aa80:	683b      	ldr	r3, [r7, #0]
 801aa82:	781b      	ldrb	r3, [r3, #0]
 801aa84:	00da      	lsls	r2, r3, #3
 801aa86:	187b      	adds	r3, r7, r1
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	18d3      	adds	r3, r2, r3
 801aa8c:	4acf      	ldr	r2, [pc, #828]	@ (801adcc <USB_EPStartXfer+0xe30>)
 801aa8e:	4694      	mov	ip, r2
 801aa90:	4463      	add	r3, ip
 801aa92:	218c      	movs	r1, #140	@ 0x8c
 801aa94:	187a      	adds	r2, r7, r1
 801aa96:	6013      	str	r3, [r2, #0]
 801aa98:	187b      	adds	r3, r7, r1
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	881b      	ldrh	r3, [r3, #0]
 801aa9e:	b29b      	uxth	r3, r3
 801aaa0:	059b      	lsls	r3, r3, #22
 801aaa2:	0d9b      	lsrs	r3, r3, #22
 801aaa4:	b29a      	uxth	r2, r3
 801aaa6:	187b      	adds	r3, r7, r1
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	801a      	strh	r2, [r3, #0]
 801aaac:	1d7b      	adds	r3, r7, #5
 801aaae:	33ff      	adds	r3, #255	@ 0xff
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	2b3e      	cmp	r3, #62	@ 0x3e
 801aab4:	d925      	bls.n	801ab02 <USB_EPStartXfer+0xb66>
 801aab6:	1d7b      	adds	r3, r7, #5
 801aab8:	33ff      	adds	r3, #255	@ 0xff
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	095b      	lsrs	r3, r3, #5
 801aabe:	21e8      	movs	r1, #232	@ 0xe8
 801aac0:	187a      	adds	r2, r7, r1
 801aac2:	6013      	str	r3, [r2, #0]
 801aac4:	1d7b      	adds	r3, r7, #5
 801aac6:	33ff      	adds	r3, #255	@ 0xff
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	221f      	movs	r2, #31
 801aacc:	4013      	ands	r3, r2
 801aace:	d104      	bne.n	801aada <USB_EPStartXfer+0xb3e>
 801aad0:	187b      	adds	r3, r7, r1
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	3b01      	subs	r3, #1
 801aad6:	187a      	adds	r2, r7, r1
 801aad8:	6013      	str	r3, [r2, #0]
 801aada:	218c      	movs	r1, #140	@ 0x8c
 801aadc:	187b      	adds	r3, r7, r1
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	881b      	ldrh	r3, [r3, #0]
 801aae2:	b29a      	uxth	r2, r3
 801aae4:	23e8      	movs	r3, #232	@ 0xe8
 801aae6:	18fb      	adds	r3, r7, r3
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	b29b      	uxth	r3, r3
 801aaec:	029b      	lsls	r3, r3, #10
 801aaee:	b29b      	uxth	r3, r3
 801aaf0:	4313      	orrs	r3, r2
 801aaf2:	b29b      	uxth	r3, r3
 801aaf4:	4ab6      	ldr	r2, [pc, #728]	@ (801add0 <USB_EPStartXfer+0xe34>)
 801aaf6:	4313      	orrs	r3, r2
 801aaf8:	b29a      	uxth	r2, r3
 801aafa:	187b      	adds	r3, r7, r1
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	801a      	strh	r2, [r3, #0]
 801ab00:	e353      	b.n	801b1aa <USB_EPStartXfer+0x120e>
 801ab02:	1d7b      	adds	r3, r7, #5
 801ab04:	33ff      	adds	r3, #255	@ 0xff
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d10b      	bne.n	801ab24 <USB_EPStartXfer+0xb88>
 801ab0c:	218c      	movs	r1, #140	@ 0x8c
 801ab0e:	187b      	adds	r3, r7, r1
 801ab10:	681b      	ldr	r3, [r3, #0]
 801ab12:	881b      	ldrh	r3, [r3, #0]
 801ab14:	b29b      	uxth	r3, r3
 801ab16:	4aae      	ldr	r2, [pc, #696]	@ (801add0 <USB_EPStartXfer+0xe34>)
 801ab18:	4313      	orrs	r3, r2
 801ab1a:	b29a      	uxth	r2, r3
 801ab1c:	187b      	adds	r3, r7, r1
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	801a      	strh	r2, [r3, #0]
 801ab22:	e342      	b.n	801b1aa <USB_EPStartXfer+0x120e>
 801ab24:	1d7b      	adds	r3, r7, #5
 801ab26:	33ff      	adds	r3, #255	@ 0xff
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	085b      	lsrs	r3, r3, #1
 801ab2c:	21e8      	movs	r1, #232	@ 0xe8
 801ab2e:	187a      	adds	r2, r7, r1
 801ab30:	6013      	str	r3, [r2, #0]
 801ab32:	1d7b      	adds	r3, r7, #5
 801ab34:	33ff      	adds	r3, #255	@ 0xff
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	2201      	movs	r2, #1
 801ab3a:	4013      	ands	r3, r2
 801ab3c:	d004      	beq.n	801ab48 <USB_EPStartXfer+0xbac>
 801ab3e:	187b      	adds	r3, r7, r1
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	3301      	adds	r3, #1
 801ab44:	187a      	adds	r2, r7, r1
 801ab46:	6013      	str	r3, [r2, #0]
 801ab48:	218c      	movs	r1, #140	@ 0x8c
 801ab4a:	187b      	adds	r3, r7, r1
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	881b      	ldrh	r3, [r3, #0]
 801ab50:	b29a      	uxth	r2, r3
 801ab52:	23e8      	movs	r3, #232	@ 0xe8
 801ab54:	18fb      	adds	r3, r7, r3
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	b29b      	uxth	r3, r3
 801ab5a:	029b      	lsls	r3, r3, #10
 801ab5c:	b29b      	uxth	r3, r3
 801ab5e:	4313      	orrs	r3, r2
 801ab60:	b29a      	uxth	r2, r3
 801ab62:	187b      	adds	r3, r7, r1
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	801a      	strh	r2, [r3, #0]
 801ab68:	e31f      	b.n	801b1aa <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801ab6a:	683b      	ldr	r3, [r7, #0]
 801ab6c:	78db      	ldrb	r3, [r3, #3]
 801ab6e:	2b02      	cmp	r3, #2
 801ab70:	d000      	beq.n	801ab74 <USB_EPStartXfer+0xbd8>
 801ab72:	e191      	b.n	801ae98 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801ab74:	683b      	ldr	r3, [r7, #0]
 801ab76:	785b      	ldrb	r3, [r3, #1]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d000      	beq.n	801ab7e <USB_EPStartXfer+0xbe2>
 801ab7c:	e07c      	b.n	801ac78 <USB_EPStartXfer+0xcdc>
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	21ac      	movs	r1, #172	@ 0xac
 801ab82:	187a      	adds	r2, r7, r1
 801ab84:	6013      	str	r3, [r2, #0]
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	2250      	movs	r2, #80	@ 0x50
 801ab8a:	5a9b      	ldrh	r3, [r3, r2]
 801ab8c:	b29b      	uxth	r3, r3
 801ab8e:	001a      	movs	r2, r3
 801ab90:	187b      	adds	r3, r7, r1
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	189b      	adds	r3, r3, r2
 801ab96:	187a      	adds	r2, r7, r1
 801ab98:	6013      	str	r3, [r2, #0]
 801ab9a:	683b      	ldr	r3, [r7, #0]
 801ab9c:	781b      	ldrb	r3, [r3, #0]
 801ab9e:	00da      	lsls	r2, r3, #3
 801aba0:	187b      	adds	r3, r7, r1
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	18d3      	adds	r3, r2, r3
 801aba6:	4a8b      	ldr	r2, [pc, #556]	@ (801add4 <USB_EPStartXfer+0xe38>)
 801aba8:	4694      	mov	ip, r2
 801abaa:	4463      	add	r3, ip
 801abac:	21a8      	movs	r1, #168	@ 0xa8
 801abae:	187a      	adds	r2, r7, r1
 801abb0:	6013      	str	r3, [r2, #0]
 801abb2:	187b      	adds	r3, r7, r1
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	881b      	ldrh	r3, [r3, #0]
 801abb8:	b29b      	uxth	r3, r3
 801abba:	059b      	lsls	r3, r3, #22
 801abbc:	0d9b      	lsrs	r3, r3, #22
 801abbe:	b29a      	uxth	r2, r3
 801abc0:	187b      	adds	r3, r7, r1
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	801a      	strh	r2, [r3, #0]
 801abc6:	683b      	ldr	r3, [r7, #0]
 801abc8:	691b      	ldr	r3, [r3, #16]
 801abca:	2b3e      	cmp	r3, #62	@ 0x3e
 801abcc:	d923      	bls.n	801ac16 <USB_EPStartXfer+0xc7a>
 801abce:	683b      	ldr	r3, [r7, #0]
 801abd0:	691b      	ldr	r3, [r3, #16]
 801abd2:	095b      	lsrs	r3, r3, #5
 801abd4:	21e4      	movs	r1, #228	@ 0xe4
 801abd6:	187a      	adds	r2, r7, r1
 801abd8:	6013      	str	r3, [r2, #0]
 801abda:	683b      	ldr	r3, [r7, #0]
 801abdc:	691b      	ldr	r3, [r3, #16]
 801abde:	221f      	movs	r2, #31
 801abe0:	4013      	ands	r3, r2
 801abe2:	d104      	bne.n	801abee <USB_EPStartXfer+0xc52>
 801abe4:	187b      	adds	r3, r7, r1
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	3b01      	subs	r3, #1
 801abea:	187a      	adds	r2, r7, r1
 801abec:	6013      	str	r3, [r2, #0]
 801abee:	21a8      	movs	r1, #168	@ 0xa8
 801abf0:	187b      	adds	r3, r7, r1
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	881b      	ldrh	r3, [r3, #0]
 801abf6:	b29a      	uxth	r2, r3
 801abf8:	23e4      	movs	r3, #228	@ 0xe4
 801abfa:	18fb      	adds	r3, r7, r3
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	b29b      	uxth	r3, r3
 801ac00:	029b      	lsls	r3, r3, #10
 801ac02:	b29b      	uxth	r3, r3
 801ac04:	4313      	orrs	r3, r2
 801ac06:	b29b      	uxth	r3, r3
 801ac08:	4a71      	ldr	r2, [pc, #452]	@ (801add0 <USB_EPStartXfer+0xe34>)
 801ac0a:	4313      	orrs	r3, r2
 801ac0c:	b29a      	uxth	r2, r3
 801ac0e:	187b      	adds	r3, r7, r1
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	801a      	strh	r2, [r3, #0]
 801ac14:	e054      	b.n	801acc0 <USB_EPStartXfer+0xd24>
 801ac16:	683b      	ldr	r3, [r7, #0]
 801ac18:	691b      	ldr	r3, [r3, #16]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d10b      	bne.n	801ac36 <USB_EPStartXfer+0xc9a>
 801ac1e:	21a8      	movs	r1, #168	@ 0xa8
 801ac20:	187b      	adds	r3, r7, r1
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	881b      	ldrh	r3, [r3, #0]
 801ac26:	b29b      	uxth	r3, r3
 801ac28:	4a69      	ldr	r2, [pc, #420]	@ (801add0 <USB_EPStartXfer+0xe34>)
 801ac2a:	4313      	orrs	r3, r2
 801ac2c:	b29a      	uxth	r2, r3
 801ac2e:	187b      	adds	r3, r7, r1
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	801a      	strh	r2, [r3, #0]
 801ac34:	e044      	b.n	801acc0 <USB_EPStartXfer+0xd24>
 801ac36:	683b      	ldr	r3, [r7, #0]
 801ac38:	691b      	ldr	r3, [r3, #16]
 801ac3a:	085b      	lsrs	r3, r3, #1
 801ac3c:	21e4      	movs	r1, #228	@ 0xe4
 801ac3e:	187a      	adds	r2, r7, r1
 801ac40:	6013      	str	r3, [r2, #0]
 801ac42:	683b      	ldr	r3, [r7, #0]
 801ac44:	691b      	ldr	r3, [r3, #16]
 801ac46:	2201      	movs	r2, #1
 801ac48:	4013      	ands	r3, r2
 801ac4a:	d004      	beq.n	801ac56 <USB_EPStartXfer+0xcba>
 801ac4c:	187b      	adds	r3, r7, r1
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	3301      	adds	r3, #1
 801ac52:	187a      	adds	r2, r7, r1
 801ac54:	6013      	str	r3, [r2, #0]
 801ac56:	21a8      	movs	r1, #168	@ 0xa8
 801ac58:	187b      	adds	r3, r7, r1
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	881b      	ldrh	r3, [r3, #0]
 801ac5e:	b29a      	uxth	r2, r3
 801ac60:	23e4      	movs	r3, #228	@ 0xe4
 801ac62:	18fb      	adds	r3, r7, r3
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	b29b      	uxth	r3, r3
 801ac68:	029b      	lsls	r3, r3, #10
 801ac6a:	b29b      	uxth	r3, r3
 801ac6c:	4313      	orrs	r3, r2
 801ac6e:	b29a      	uxth	r2, r3
 801ac70:	187b      	adds	r3, r7, r1
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	801a      	strh	r2, [r3, #0]
 801ac76:	e023      	b.n	801acc0 <USB_EPStartXfer+0xd24>
 801ac78:	683b      	ldr	r3, [r7, #0]
 801ac7a:	785b      	ldrb	r3, [r3, #1]
 801ac7c:	2b01      	cmp	r3, #1
 801ac7e:	d11f      	bne.n	801acc0 <USB_EPStartXfer+0xd24>
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	21b4      	movs	r1, #180	@ 0xb4
 801ac84:	187a      	adds	r2, r7, r1
 801ac86:	6013      	str	r3, [r2, #0]
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	2250      	movs	r2, #80	@ 0x50
 801ac8c:	5a9b      	ldrh	r3, [r3, r2]
 801ac8e:	b29b      	uxth	r3, r3
 801ac90:	001a      	movs	r2, r3
 801ac92:	187b      	adds	r3, r7, r1
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	189b      	adds	r3, r3, r2
 801ac98:	187a      	adds	r2, r7, r1
 801ac9a:	6013      	str	r3, [r2, #0]
 801ac9c:	683b      	ldr	r3, [r7, #0]
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	00da      	lsls	r2, r3, #3
 801aca2:	187b      	adds	r3, r7, r1
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	18d3      	adds	r3, r2, r3
 801aca8:	4a4a      	ldr	r2, [pc, #296]	@ (801add4 <USB_EPStartXfer+0xe38>)
 801acaa:	4694      	mov	ip, r2
 801acac:	4463      	add	r3, ip
 801acae:	21b0      	movs	r1, #176	@ 0xb0
 801acb0:	187a      	adds	r2, r7, r1
 801acb2:	6013      	str	r3, [r2, #0]
 801acb4:	683b      	ldr	r3, [r7, #0]
 801acb6:	691b      	ldr	r3, [r3, #16]
 801acb8:	b29a      	uxth	r2, r3
 801acba:	187b      	adds	r3, r7, r1
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	801a      	strh	r2, [r3, #0]
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	22a4      	movs	r2, #164	@ 0xa4
 801acc4:	18ba      	adds	r2, r7, r2
 801acc6:	6013      	str	r3, [r2, #0]
 801acc8:	683b      	ldr	r3, [r7, #0]
 801acca:	785b      	ldrb	r3, [r3, #1]
 801accc:	2b00      	cmp	r3, #0
 801acce:	d000      	beq.n	801acd2 <USB_EPStartXfer+0xd36>
 801acd0:	e082      	b.n	801add8 <USB_EPStartXfer+0xe3c>
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	219c      	movs	r1, #156	@ 0x9c
 801acd6:	187a      	adds	r2, r7, r1
 801acd8:	6013      	str	r3, [r2, #0]
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	2250      	movs	r2, #80	@ 0x50
 801acde:	5a9b      	ldrh	r3, [r3, r2]
 801ace0:	b29b      	uxth	r3, r3
 801ace2:	001a      	movs	r2, r3
 801ace4:	187b      	adds	r3, r7, r1
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	189b      	adds	r3, r3, r2
 801acea:	187a      	adds	r2, r7, r1
 801acec:	6013      	str	r3, [r2, #0]
 801acee:	683b      	ldr	r3, [r7, #0]
 801acf0:	781b      	ldrb	r3, [r3, #0]
 801acf2:	00da      	lsls	r2, r3, #3
 801acf4:	187b      	adds	r3, r7, r1
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	18d3      	adds	r3, r2, r3
 801acfa:	4a34      	ldr	r2, [pc, #208]	@ (801adcc <USB_EPStartXfer+0xe30>)
 801acfc:	4694      	mov	ip, r2
 801acfe:	4463      	add	r3, ip
 801ad00:	2198      	movs	r1, #152	@ 0x98
 801ad02:	187a      	adds	r2, r7, r1
 801ad04:	6013      	str	r3, [r2, #0]
 801ad06:	187b      	adds	r3, r7, r1
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	881b      	ldrh	r3, [r3, #0]
 801ad0c:	b29b      	uxth	r3, r3
 801ad0e:	059b      	lsls	r3, r3, #22
 801ad10:	0d9b      	lsrs	r3, r3, #22
 801ad12:	b29a      	uxth	r2, r3
 801ad14:	187b      	adds	r3, r7, r1
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	801a      	strh	r2, [r3, #0]
 801ad1a:	683b      	ldr	r3, [r7, #0]
 801ad1c:	691b      	ldr	r3, [r3, #16]
 801ad1e:	2b3e      	cmp	r3, #62	@ 0x3e
 801ad20:	d923      	bls.n	801ad6a <USB_EPStartXfer+0xdce>
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	691b      	ldr	r3, [r3, #16]
 801ad26:	095b      	lsrs	r3, r3, #5
 801ad28:	21e0      	movs	r1, #224	@ 0xe0
 801ad2a:	187a      	adds	r2, r7, r1
 801ad2c:	6013      	str	r3, [r2, #0]
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	691b      	ldr	r3, [r3, #16]
 801ad32:	221f      	movs	r2, #31
 801ad34:	4013      	ands	r3, r2
 801ad36:	d104      	bne.n	801ad42 <USB_EPStartXfer+0xda6>
 801ad38:	187b      	adds	r3, r7, r1
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	3b01      	subs	r3, #1
 801ad3e:	187a      	adds	r2, r7, r1
 801ad40:	6013      	str	r3, [r2, #0]
 801ad42:	2198      	movs	r1, #152	@ 0x98
 801ad44:	187b      	adds	r3, r7, r1
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	881b      	ldrh	r3, [r3, #0]
 801ad4a:	b29a      	uxth	r2, r3
 801ad4c:	23e0      	movs	r3, #224	@ 0xe0
 801ad4e:	18fb      	adds	r3, r7, r3
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	b29b      	uxth	r3, r3
 801ad54:	029b      	lsls	r3, r3, #10
 801ad56:	b29b      	uxth	r3, r3
 801ad58:	4313      	orrs	r3, r2
 801ad5a:	b29b      	uxth	r3, r3
 801ad5c:	4a1c      	ldr	r2, [pc, #112]	@ (801add0 <USB_EPStartXfer+0xe34>)
 801ad5e:	4313      	orrs	r3, r2
 801ad60:	b29a      	uxth	r2, r3
 801ad62:	187b      	adds	r3, r7, r1
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	801a      	strh	r2, [r3, #0]
 801ad68:	e057      	b.n	801ae1a <USB_EPStartXfer+0xe7e>
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	691b      	ldr	r3, [r3, #16]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d10b      	bne.n	801ad8a <USB_EPStartXfer+0xdee>
 801ad72:	2198      	movs	r1, #152	@ 0x98
 801ad74:	187b      	adds	r3, r7, r1
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	881b      	ldrh	r3, [r3, #0]
 801ad7a:	b29b      	uxth	r3, r3
 801ad7c:	4a14      	ldr	r2, [pc, #80]	@ (801add0 <USB_EPStartXfer+0xe34>)
 801ad7e:	4313      	orrs	r3, r2
 801ad80:	b29a      	uxth	r2, r3
 801ad82:	187b      	adds	r3, r7, r1
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	801a      	strh	r2, [r3, #0]
 801ad88:	e047      	b.n	801ae1a <USB_EPStartXfer+0xe7e>
 801ad8a:	683b      	ldr	r3, [r7, #0]
 801ad8c:	691b      	ldr	r3, [r3, #16]
 801ad8e:	085b      	lsrs	r3, r3, #1
 801ad90:	21e0      	movs	r1, #224	@ 0xe0
 801ad92:	187a      	adds	r2, r7, r1
 801ad94:	6013      	str	r3, [r2, #0]
 801ad96:	683b      	ldr	r3, [r7, #0]
 801ad98:	691b      	ldr	r3, [r3, #16]
 801ad9a:	2201      	movs	r2, #1
 801ad9c:	4013      	ands	r3, r2
 801ad9e:	d004      	beq.n	801adaa <USB_EPStartXfer+0xe0e>
 801ada0:	187b      	adds	r3, r7, r1
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	3301      	adds	r3, #1
 801ada6:	187a      	adds	r2, r7, r1
 801ada8:	6013      	str	r3, [r2, #0]
 801adaa:	2198      	movs	r1, #152	@ 0x98
 801adac:	187b      	adds	r3, r7, r1
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	881b      	ldrh	r3, [r3, #0]
 801adb2:	b29a      	uxth	r2, r3
 801adb4:	23e0      	movs	r3, #224	@ 0xe0
 801adb6:	18fb      	adds	r3, r7, r3
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	b29b      	uxth	r3, r3
 801adbc:	029b      	lsls	r3, r3, #10
 801adbe:	b29b      	uxth	r3, r3
 801adc0:	4313      	orrs	r3, r2
 801adc2:	b29a      	uxth	r2, r3
 801adc4:	187b      	adds	r3, r7, r1
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	801a      	strh	r2, [r3, #0]
 801adca:	e026      	b.n	801ae1a <USB_EPStartXfer+0xe7e>
 801adcc:	00000406 	.word	0x00000406
 801add0:	ffff8000 	.word	0xffff8000
 801add4:	00000402 	.word	0x00000402
 801add8:	683b      	ldr	r3, [r7, #0]
 801adda:	785b      	ldrb	r3, [r3, #1]
 801addc:	2b01      	cmp	r3, #1
 801adde:	d11c      	bne.n	801ae1a <USB_EPStartXfer+0xe7e>
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	2250      	movs	r2, #80	@ 0x50
 801ade4:	5a9b      	ldrh	r3, [r3, r2]
 801ade6:	b29b      	uxth	r3, r3
 801ade8:	001a      	movs	r2, r3
 801adea:	21a4      	movs	r1, #164	@ 0xa4
 801adec:	187b      	adds	r3, r7, r1
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	189b      	adds	r3, r3, r2
 801adf2:	187a      	adds	r2, r7, r1
 801adf4:	6013      	str	r3, [r2, #0]
 801adf6:	683b      	ldr	r3, [r7, #0]
 801adf8:	781b      	ldrb	r3, [r3, #0]
 801adfa:	00da      	lsls	r2, r3, #3
 801adfc:	187b      	adds	r3, r7, r1
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	18d3      	adds	r3, r2, r3
 801ae02:	4ad2      	ldr	r2, [pc, #840]	@ (801b14c <USB_EPStartXfer+0x11b0>)
 801ae04:	4694      	mov	ip, r2
 801ae06:	4463      	add	r3, ip
 801ae08:	21a0      	movs	r1, #160	@ 0xa0
 801ae0a:	187a      	adds	r2, r7, r1
 801ae0c:	6013      	str	r3, [r2, #0]
 801ae0e:	683b      	ldr	r3, [r7, #0]
 801ae10:	691b      	ldr	r3, [r3, #16]
 801ae12:	b29a      	uxth	r2, r3
 801ae14:	187b      	adds	r3, r7, r1
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801ae1a:	683b      	ldr	r3, [r7, #0]
 801ae1c:	69db      	ldr	r3, [r3, #28]
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d100      	bne.n	801ae24 <USB_EPStartXfer+0xe88>
 801ae22:	e1c2      	b.n	801b1aa <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801ae24:	687a      	ldr	r2, [r7, #4]
 801ae26:	683b      	ldr	r3, [r7, #0]
 801ae28:	781b      	ldrb	r3, [r3, #0]
 801ae2a:	009b      	lsls	r3, r3, #2
 801ae2c:	18d2      	adds	r2, r2, r3
 801ae2e:	2196      	movs	r1, #150	@ 0x96
 801ae30:	187b      	adds	r3, r7, r1
 801ae32:	8812      	ldrh	r2, [r2, #0]
 801ae34:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ae36:	187b      	adds	r3, r7, r1
 801ae38:	881a      	ldrh	r2, [r3, #0]
 801ae3a:	2380      	movs	r3, #128	@ 0x80
 801ae3c:	01db      	lsls	r3, r3, #7
 801ae3e:	4013      	ands	r3, r2
 801ae40:	d004      	beq.n	801ae4c <USB_EPStartXfer+0xeb0>
 801ae42:	187b      	adds	r3, r7, r1
 801ae44:	881b      	ldrh	r3, [r3, #0]
 801ae46:	2240      	movs	r2, #64	@ 0x40
 801ae48:	4013      	ands	r3, r2
 801ae4a:	d10d      	bne.n	801ae68 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801ae4c:	2196      	movs	r1, #150	@ 0x96
 801ae4e:	187b      	adds	r3, r7, r1
 801ae50:	881a      	ldrh	r2, [r3, #0]
 801ae52:	2380      	movs	r3, #128	@ 0x80
 801ae54:	01db      	lsls	r3, r3, #7
 801ae56:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801ae58:	d000      	beq.n	801ae5c <USB_EPStartXfer+0xec0>
 801ae5a:	e1a6      	b.n	801b1aa <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801ae5c:	187b      	adds	r3, r7, r1
 801ae5e:	881b      	ldrh	r3, [r3, #0]
 801ae60:	2240      	movs	r2, #64	@ 0x40
 801ae62:	4013      	ands	r3, r2
 801ae64:	d000      	beq.n	801ae68 <USB_EPStartXfer+0xecc>
 801ae66:	e1a0      	b.n	801b1aa <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801ae68:	687a      	ldr	r2, [r7, #4]
 801ae6a:	683b      	ldr	r3, [r7, #0]
 801ae6c:	781b      	ldrb	r3, [r3, #0]
 801ae6e:	009b      	lsls	r3, r3, #2
 801ae70:	18d3      	adds	r3, r2, r3
 801ae72:	881b      	ldrh	r3, [r3, #0]
 801ae74:	b29a      	uxth	r2, r3
 801ae76:	2094      	movs	r0, #148	@ 0x94
 801ae78:	183b      	adds	r3, r7, r0
 801ae7a:	49b5      	ldr	r1, [pc, #724]	@ (801b150 <USB_EPStartXfer+0x11b4>)
 801ae7c:	400a      	ands	r2, r1
 801ae7e:	801a      	strh	r2, [r3, #0]
 801ae80:	687a      	ldr	r2, [r7, #4]
 801ae82:	683b      	ldr	r3, [r7, #0]
 801ae84:	781b      	ldrb	r3, [r3, #0]
 801ae86:	009b      	lsls	r3, r3, #2
 801ae88:	18d3      	adds	r3, r2, r3
 801ae8a:	183a      	adds	r2, r7, r0
 801ae8c:	8812      	ldrh	r2, [r2, #0]
 801ae8e:	49b1      	ldr	r1, [pc, #708]	@ (801b154 <USB_EPStartXfer+0x11b8>)
 801ae90:	430a      	orrs	r2, r1
 801ae92:	b292      	uxth	r2, r2
 801ae94:	801a      	strh	r2, [r3, #0]
 801ae96:	e188      	b.n	801b1aa <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801ae98:	683b      	ldr	r3, [r7, #0]
 801ae9a:	78db      	ldrb	r3, [r3, #3]
 801ae9c:	2b01      	cmp	r3, #1
 801ae9e:	d000      	beq.n	801aea2 <USB_EPStartXfer+0xf06>
 801aea0:	e181      	b.n	801b1a6 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	699a      	ldr	r2, [r3, #24]
 801aea6:	683b      	ldr	r3, [r7, #0]
 801aea8:	691b      	ldr	r3, [r3, #16]
 801aeaa:	429a      	cmp	r2, r3
 801aeac:	d90d      	bls.n	801aeca <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801aeae:	683b      	ldr	r3, [r7, #0]
 801aeb0:	691b      	ldr	r3, [r3, #16]
 801aeb2:	1d7a      	adds	r2, r7, #5
 801aeb4:	32ff      	adds	r2, #255	@ 0xff
 801aeb6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801aeb8:	683b      	ldr	r3, [r7, #0]
 801aeba:	699a      	ldr	r2, [r3, #24]
 801aebc:	1d7b      	adds	r3, r7, #5
 801aebe:	33ff      	adds	r3, #255	@ 0xff
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	1ad2      	subs	r2, r2, r3
 801aec4:	683b      	ldr	r3, [r7, #0]
 801aec6:	619a      	str	r2, [r3, #24]
 801aec8:	e007      	b.n	801aeda <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801aeca:	683b      	ldr	r3, [r7, #0]
 801aecc:	699b      	ldr	r3, [r3, #24]
 801aece:	1d7a      	adds	r2, r7, #5
 801aed0:	32ff      	adds	r2, #255	@ 0xff
 801aed2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801aed4:	683b      	ldr	r3, [r7, #0]
 801aed6:	2200      	movs	r2, #0
 801aed8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801aeda:	683b      	ldr	r3, [r7, #0]
 801aedc:	785b      	ldrb	r3, [r3, #1]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d000      	beq.n	801aee4 <USB_EPStartXfer+0xf48>
 801aee2:	e082      	b.n	801afea <USB_EPStartXfer+0x104e>
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	21cc      	movs	r1, #204	@ 0xcc
 801aee8:	187a      	adds	r2, r7, r1
 801aeea:	6013      	str	r3, [r2, #0]
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	2250      	movs	r2, #80	@ 0x50
 801aef0:	5a9b      	ldrh	r3, [r3, r2]
 801aef2:	b29b      	uxth	r3, r3
 801aef4:	001a      	movs	r2, r3
 801aef6:	187b      	adds	r3, r7, r1
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	189b      	adds	r3, r3, r2
 801aefc:	187a      	adds	r2, r7, r1
 801aefe:	6013      	str	r3, [r2, #0]
 801af00:	683b      	ldr	r3, [r7, #0]
 801af02:	781b      	ldrb	r3, [r3, #0]
 801af04:	00da      	lsls	r2, r3, #3
 801af06:	187b      	adds	r3, r7, r1
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	18d3      	adds	r3, r2, r3
 801af0c:	4a92      	ldr	r2, [pc, #584]	@ (801b158 <USB_EPStartXfer+0x11bc>)
 801af0e:	4694      	mov	ip, r2
 801af10:	4463      	add	r3, ip
 801af12:	21c8      	movs	r1, #200	@ 0xc8
 801af14:	187a      	adds	r2, r7, r1
 801af16:	6013      	str	r3, [r2, #0]
 801af18:	187b      	adds	r3, r7, r1
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	881b      	ldrh	r3, [r3, #0]
 801af1e:	b29b      	uxth	r3, r3
 801af20:	059b      	lsls	r3, r3, #22
 801af22:	0d9b      	lsrs	r3, r3, #22
 801af24:	b29a      	uxth	r2, r3
 801af26:	187b      	adds	r3, r7, r1
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	801a      	strh	r2, [r3, #0]
 801af2c:	1d7b      	adds	r3, r7, #5
 801af2e:	33ff      	adds	r3, #255	@ 0xff
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	2b3e      	cmp	r3, #62	@ 0x3e
 801af34:	d925      	bls.n	801af82 <USB_EPStartXfer+0xfe6>
 801af36:	1d7b      	adds	r3, r7, #5
 801af38:	33ff      	adds	r3, #255	@ 0xff
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	095b      	lsrs	r3, r3, #5
 801af3e:	21dc      	movs	r1, #220	@ 0xdc
 801af40:	187a      	adds	r2, r7, r1
 801af42:	6013      	str	r3, [r2, #0]
 801af44:	1d7b      	adds	r3, r7, #5
 801af46:	33ff      	adds	r3, #255	@ 0xff
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	221f      	movs	r2, #31
 801af4c:	4013      	ands	r3, r2
 801af4e:	d104      	bne.n	801af5a <USB_EPStartXfer+0xfbe>
 801af50:	187b      	adds	r3, r7, r1
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	3b01      	subs	r3, #1
 801af56:	187a      	adds	r2, r7, r1
 801af58:	6013      	str	r3, [r2, #0]
 801af5a:	21c8      	movs	r1, #200	@ 0xc8
 801af5c:	187b      	adds	r3, r7, r1
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	881b      	ldrh	r3, [r3, #0]
 801af62:	b29a      	uxth	r2, r3
 801af64:	23dc      	movs	r3, #220	@ 0xdc
 801af66:	18fb      	adds	r3, r7, r3
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	b29b      	uxth	r3, r3
 801af6c:	029b      	lsls	r3, r3, #10
 801af6e:	b29b      	uxth	r3, r3
 801af70:	4313      	orrs	r3, r2
 801af72:	b29b      	uxth	r3, r3
 801af74:	4a79      	ldr	r2, [pc, #484]	@ (801b15c <USB_EPStartXfer+0x11c0>)
 801af76:	4313      	orrs	r3, r2
 801af78:	b29a      	uxth	r2, r3
 801af7a:	187b      	adds	r3, r7, r1
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	801a      	strh	r2, [r3, #0]
 801af80:	e058      	b.n	801b034 <USB_EPStartXfer+0x1098>
 801af82:	1d7b      	adds	r3, r7, #5
 801af84:	33ff      	adds	r3, #255	@ 0xff
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d10b      	bne.n	801afa4 <USB_EPStartXfer+0x1008>
 801af8c:	21c8      	movs	r1, #200	@ 0xc8
 801af8e:	187b      	adds	r3, r7, r1
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	881b      	ldrh	r3, [r3, #0]
 801af94:	b29b      	uxth	r3, r3
 801af96:	4a71      	ldr	r2, [pc, #452]	@ (801b15c <USB_EPStartXfer+0x11c0>)
 801af98:	4313      	orrs	r3, r2
 801af9a:	b29a      	uxth	r2, r3
 801af9c:	187b      	adds	r3, r7, r1
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	801a      	strh	r2, [r3, #0]
 801afa2:	e047      	b.n	801b034 <USB_EPStartXfer+0x1098>
 801afa4:	1d7b      	adds	r3, r7, #5
 801afa6:	33ff      	adds	r3, #255	@ 0xff
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	085b      	lsrs	r3, r3, #1
 801afac:	21dc      	movs	r1, #220	@ 0xdc
 801afae:	187a      	adds	r2, r7, r1
 801afb0:	6013      	str	r3, [r2, #0]
 801afb2:	1d7b      	adds	r3, r7, #5
 801afb4:	33ff      	adds	r3, #255	@ 0xff
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	2201      	movs	r2, #1
 801afba:	4013      	ands	r3, r2
 801afbc:	d004      	beq.n	801afc8 <USB_EPStartXfer+0x102c>
 801afbe:	187b      	adds	r3, r7, r1
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	3301      	adds	r3, #1
 801afc4:	187a      	adds	r2, r7, r1
 801afc6:	6013      	str	r3, [r2, #0]
 801afc8:	21c8      	movs	r1, #200	@ 0xc8
 801afca:	187b      	adds	r3, r7, r1
 801afcc:	681b      	ldr	r3, [r3, #0]
 801afce:	881b      	ldrh	r3, [r3, #0]
 801afd0:	b29a      	uxth	r2, r3
 801afd2:	23dc      	movs	r3, #220	@ 0xdc
 801afd4:	18fb      	adds	r3, r7, r3
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	b29b      	uxth	r3, r3
 801afda:	029b      	lsls	r3, r3, #10
 801afdc:	b29b      	uxth	r3, r3
 801afde:	4313      	orrs	r3, r2
 801afe0:	b29a      	uxth	r2, r3
 801afe2:	187b      	adds	r3, r7, r1
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	801a      	strh	r2, [r3, #0]
 801afe8:	e024      	b.n	801b034 <USB_EPStartXfer+0x1098>
 801afea:	683b      	ldr	r3, [r7, #0]
 801afec:	785b      	ldrb	r3, [r3, #1]
 801afee:	2b01      	cmp	r3, #1
 801aff0:	d120      	bne.n	801b034 <USB_EPStartXfer+0x1098>
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	21d4      	movs	r1, #212	@ 0xd4
 801aff6:	187a      	adds	r2, r7, r1
 801aff8:	6013      	str	r3, [r2, #0]
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	2250      	movs	r2, #80	@ 0x50
 801affe:	5a9b      	ldrh	r3, [r3, r2]
 801b000:	b29b      	uxth	r3, r3
 801b002:	001a      	movs	r2, r3
 801b004:	187b      	adds	r3, r7, r1
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	189b      	adds	r3, r3, r2
 801b00a:	187a      	adds	r2, r7, r1
 801b00c:	6013      	str	r3, [r2, #0]
 801b00e:	683b      	ldr	r3, [r7, #0]
 801b010:	781b      	ldrb	r3, [r3, #0]
 801b012:	00da      	lsls	r2, r3, #3
 801b014:	187b      	adds	r3, r7, r1
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	18d3      	adds	r3, r2, r3
 801b01a:	4a4f      	ldr	r2, [pc, #316]	@ (801b158 <USB_EPStartXfer+0x11bc>)
 801b01c:	4694      	mov	ip, r2
 801b01e:	4463      	add	r3, ip
 801b020:	21d0      	movs	r1, #208	@ 0xd0
 801b022:	187a      	adds	r2, r7, r1
 801b024:	6013      	str	r3, [r2, #0]
 801b026:	1d7b      	adds	r3, r7, #5
 801b028:	33ff      	adds	r3, #255	@ 0xff
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	b29a      	uxth	r2, r3
 801b02e:	187b      	adds	r3, r7, r1
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	801a      	strh	r2, [r3, #0]
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	22c4      	movs	r2, #196	@ 0xc4
 801b038:	18ba      	adds	r2, r7, r2
 801b03a:	6013      	str	r3, [r2, #0]
 801b03c:	683b      	ldr	r3, [r7, #0]
 801b03e:	785b      	ldrb	r3, [r3, #1]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d000      	beq.n	801b046 <USB_EPStartXfer+0x10aa>
 801b044:	e08c      	b.n	801b160 <USB_EPStartXfer+0x11c4>
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	21bc      	movs	r1, #188	@ 0xbc
 801b04a:	187a      	adds	r2, r7, r1
 801b04c:	6013      	str	r3, [r2, #0]
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	2250      	movs	r2, #80	@ 0x50
 801b052:	5a9b      	ldrh	r3, [r3, r2]
 801b054:	b29b      	uxth	r3, r3
 801b056:	001a      	movs	r2, r3
 801b058:	187b      	adds	r3, r7, r1
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	189b      	adds	r3, r3, r2
 801b05e:	187a      	adds	r2, r7, r1
 801b060:	6013      	str	r3, [r2, #0]
 801b062:	683b      	ldr	r3, [r7, #0]
 801b064:	781b      	ldrb	r3, [r3, #0]
 801b066:	00da      	lsls	r2, r3, #3
 801b068:	187b      	adds	r3, r7, r1
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	18d3      	adds	r3, r2, r3
 801b06e:	4a37      	ldr	r2, [pc, #220]	@ (801b14c <USB_EPStartXfer+0x11b0>)
 801b070:	4694      	mov	ip, r2
 801b072:	4463      	add	r3, ip
 801b074:	21b8      	movs	r1, #184	@ 0xb8
 801b076:	187a      	adds	r2, r7, r1
 801b078:	6013      	str	r3, [r2, #0]
 801b07a:	187b      	adds	r3, r7, r1
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	881b      	ldrh	r3, [r3, #0]
 801b080:	b29b      	uxth	r3, r3
 801b082:	059b      	lsls	r3, r3, #22
 801b084:	0d9b      	lsrs	r3, r3, #22
 801b086:	b29a      	uxth	r2, r3
 801b088:	187b      	adds	r3, r7, r1
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	801a      	strh	r2, [r3, #0]
 801b08e:	1d7b      	adds	r3, r7, #5
 801b090:	33ff      	adds	r3, #255	@ 0xff
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	2b3e      	cmp	r3, #62	@ 0x3e
 801b096:	d925      	bls.n	801b0e4 <USB_EPStartXfer+0x1148>
 801b098:	1d7b      	adds	r3, r7, #5
 801b09a:	33ff      	adds	r3, #255	@ 0xff
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	095b      	lsrs	r3, r3, #5
 801b0a0:	21d8      	movs	r1, #216	@ 0xd8
 801b0a2:	187a      	adds	r2, r7, r1
 801b0a4:	6013      	str	r3, [r2, #0]
 801b0a6:	1d7b      	adds	r3, r7, #5
 801b0a8:	33ff      	adds	r3, #255	@ 0xff
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	221f      	movs	r2, #31
 801b0ae:	4013      	ands	r3, r2
 801b0b0:	d104      	bne.n	801b0bc <USB_EPStartXfer+0x1120>
 801b0b2:	187b      	adds	r3, r7, r1
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	3b01      	subs	r3, #1
 801b0b8:	187a      	adds	r2, r7, r1
 801b0ba:	6013      	str	r3, [r2, #0]
 801b0bc:	21b8      	movs	r1, #184	@ 0xb8
 801b0be:	187b      	adds	r3, r7, r1
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	881b      	ldrh	r3, [r3, #0]
 801b0c4:	b29a      	uxth	r2, r3
 801b0c6:	23d8      	movs	r3, #216	@ 0xd8
 801b0c8:	18fb      	adds	r3, r7, r3
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	b29b      	uxth	r3, r3
 801b0ce:	029b      	lsls	r3, r3, #10
 801b0d0:	b29b      	uxth	r3, r3
 801b0d2:	4313      	orrs	r3, r2
 801b0d4:	b29b      	uxth	r3, r3
 801b0d6:	4a21      	ldr	r2, [pc, #132]	@ (801b15c <USB_EPStartXfer+0x11c0>)
 801b0d8:	4313      	orrs	r3, r2
 801b0da:	b29a      	uxth	r2, r3
 801b0dc:	187b      	adds	r3, r7, r1
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	801a      	strh	r2, [r3, #0]
 801b0e2:	e062      	b.n	801b1aa <USB_EPStartXfer+0x120e>
 801b0e4:	1d7b      	adds	r3, r7, #5
 801b0e6:	33ff      	adds	r3, #255	@ 0xff
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d10b      	bne.n	801b106 <USB_EPStartXfer+0x116a>
 801b0ee:	21b8      	movs	r1, #184	@ 0xb8
 801b0f0:	187b      	adds	r3, r7, r1
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	881b      	ldrh	r3, [r3, #0]
 801b0f6:	b29b      	uxth	r3, r3
 801b0f8:	4a18      	ldr	r2, [pc, #96]	@ (801b15c <USB_EPStartXfer+0x11c0>)
 801b0fa:	4313      	orrs	r3, r2
 801b0fc:	b29a      	uxth	r2, r3
 801b0fe:	187b      	adds	r3, r7, r1
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	801a      	strh	r2, [r3, #0]
 801b104:	e051      	b.n	801b1aa <USB_EPStartXfer+0x120e>
 801b106:	1d7b      	adds	r3, r7, #5
 801b108:	33ff      	adds	r3, #255	@ 0xff
 801b10a:	681b      	ldr	r3, [r3, #0]
 801b10c:	085b      	lsrs	r3, r3, #1
 801b10e:	21d8      	movs	r1, #216	@ 0xd8
 801b110:	187a      	adds	r2, r7, r1
 801b112:	6013      	str	r3, [r2, #0]
 801b114:	1d7b      	adds	r3, r7, #5
 801b116:	33ff      	adds	r3, #255	@ 0xff
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	2201      	movs	r2, #1
 801b11c:	4013      	ands	r3, r2
 801b11e:	d004      	beq.n	801b12a <USB_EPStartXfer+0x118e>
 801b120:	187b      	adds	r3, r7, r1
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	3301      	adds	r3, #1
 801b126:	187a      	adds	r2, r7, r1
 801b128:	6013      	str	r3, [r2, #0]
 801b12a:	21b8      	movs	r1, #184	@ 0xb8
 801b12c:	187b      	adds	r3, r7, r1
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	881b      	ldrh	r3, [r3, #0]
 801b132:	b29a      	uxth	r2, r3
 801b134:	23d8      	movs	r3, #216	@ 0xd8
 801b136:	18fb      	adds	r3, r7, r3
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	b29b      	uxth	r3, r3
 801b13c:	029b      	lsls	r3, r3, #10
 801b13e:	b29b      	uxth	r3, r3
 801b140:	4313      	orrs	r3, r2
 801b142:	b29a      	uxth	r2, r3
 801b144:	187b      	adds	r3, r7, r1
 801b146:	681b      	ldr	r3, [r3, #0]
 801b148:	801a      	strh	r2, [r3, #0]
 801b14a:	e02e      	b.n	801b1aa <USB_EPStartXfer+0x120e>
 801b14c:	00000406 	.word	0x00000406
 801b150:	ffff8f8f 	.word	0xffff8f8f
 801b154:	ffff80c0 	.word	0xffff80c0
 801b158:	00000402 	.word	0x00000402
 801b15c:	ffff8000 	.word	0xffff8000
 801b160:	683b      	ldr	r3, [r7, #0]
 801b162:	785b      	ldrb	r3, [r3, #1]
 801b164:	2b01      	cmp	r3, #1
 801b166:	d120      	bne.n	801b1aa <USB_EPStartXfer+0x120e>
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	2250      	movs	r2, #80	@ 0x50
 801b16c:	5a9b      	ldrh	r3, [r3, r2]
 801b16e:	b29b      	uxth	r3, r3
 801b170:	001a      	movs	r2, r3
 801b172:	21c4      	movs	r1, #196	@ 0xc4
 801b174:	187b      	adds	r3, r7, r1
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	189b      	adds	r3, r3, r2
 801b17a:	187a      	adds	r2, r7, r1
 801b17c:	6013      	str	r3, [r2, #0]
 801b17e:	683b      	ldr	r3, [r7, #0]
 801b180:	781b      	ldrb	r3, [r3, #0]
 801b182:	00da      	lsls	r2, r3, #3
 801b184:	187b      	adds	r3, r7, r1
 801b186:	681b      	ldr	r3, [r3, #0]
 801b188:	18d3      	adds	r3, r2, r3
 801b18a:	4a1d      	ldr	r2, [pc, #116]	@ (801b200 <USB_EPStartXfer+0x1264>)
 801b18c:	4694      	mov	ip, r2
 801b18e:	4463      	add	r3, ip
 801b190:	21c0      	movs	r1, #192	@ 0xc0
 801b192:	187a      	adds	r2, r7, r1
 801b194:	6013      	str	r3, [r2, #0]
 801b196:	1d7b      	adds	r3, r7, #5
 801b198:	33ff      	adds	r3, #255	@ 0xff
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	b29a      	uxth	r2, r3
 801b19e:	187b      	adds	r3, r7, r1
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	801a      	strh	r2, [r3, #0]
 801b1a4:	e001      	b.n	801b1aa <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801b1a6:	2301      	movs	r3, #1
 801b1a8:	e025      	b.n	801b1f6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b1aa:	687a      	ldr	r2, [r7, #4]
 801b1ac:	683b      	ldr	r3, [r7, #0]
 801b1ae:	781b      	ldrb	r3, [r3, #0]
 801b1b0:	009b      	lsls	r3, r3, #2
 801b1b2:	18d3      	adds	r3, r2, r3
 801b1b4:	881b      	ldrh	r3, [r3, #0]
 801b1b6:	b29a      	uxth	r2, r3
 801b1b8:	208a      	movs	r0, #138	@ 0x8a
 801b1ba:	183b      	adds	r3, r7, r0
 801b1bc:	4911      	ldr	r1, [pc, #68]	@ (801b204 <USB_EPStartXfer+0x1268>)
 801b1be:	400a      	ands	r2, r1
 801b1c0:	801a      	strh	r2, [r3, #0]
 801b1c2:	183b      	adds	r3, r7, r0
 801b1c4:	183a      	adds	r2, r7, r0
 801b1c6:	8812      	ldrh	r2, [r2, #0]
 801b1c8:	2180      	movs	r1, #128	@ 0x80
 801b1ca:	0149      	lsls	r1, r1, #5
 801b1cc:	404a      	eors	r2, r1
 801b1ce:	801a      	strh	r2, [r3, #0]
 801b1d0:	183b      	adds	r3, r7, r0
 801b1d2:	183a      	adds	r2, r7, r0
 801b1d4:	8812      	ldrh	r2, [r2, #0]
 801b1d6:	2180      	movs	r1, #128	@ 0x80
 801b1d8:	0189      	lsls	r1, r1, #6
 801b1da:	404a      	eors	r2, r1
 801b1dc:	801a      	strh	r2, [r3, #0]
 801b1de:	687a      	ldr	r2, [r7, #4]
 801b1e0:	683b      	ldr	r3, [r7, #0]
 801b1e2:	781b      	ldrb	r3, [r3, #0]
 801b1e4:	009b      	lsls	r3, r3, #2
 801b1e6:	18d3      	adds	r3, r2, r3
 801b1e8:	183a      	adds	r2, r7, r0
 801b1ea:	8812      	ldrh	r2, [r2, #0]
 801b1ec:	4906      	ldr	r1, [pc, #24]	@ (801b208 <USB_EPStartXfer+0x126c>)
 801b1ee:	430a      	orrs	r2, r1
 801b1f0:	b292      	uxth	r2, r2
 801b1f2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801b1f4:	2300      	movs	r3, #0
}
 801b1f6:	0018      	movs	r0, r3
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	b043      	add	sp, #268	@ 0x10c
 801b1fc:	bd90      	pop	{r4, r7, pc}
 801b1fe:	46c0      	nop			@ (mov r8, r8)
 801b200:	00000406 	.word	0x00000406
 801b204:	ffffbf8f 	.word	0xffffbf8f
 801b208:	ffff8080 	.word	0xffff8080

0801b20c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b20c:	b580      	push	{r7, lr}
 801b20e:	b084      	sub	sp, #16
 801b210:	af00      	add	r7, sp, #0
 801b212:	6078      	str	r0, [r7, #4]
 801b214:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801b216:	683b      	ldr	r3, [r7, #0]
 801b218:	785b      	ldrb	r3, [r3, #1]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d01d      	beq.n	801b25a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801b21e:	687a      	ldr	r2, [r7, #4]
 801b220:	683b      	ldr	r3, [r7, #0]
 801b222:	781b      	ldrb	r3, [r3, #0]
 801b224:	009b      	lsls	r3, r3, #2
 801b226:	18d3      	adds	r3, r2, r3
 801b228:	881b      	ldrh	r3, [r3, #0]
 801b22a:	b29a      	uxth	r2, r3
 801b22c:	200c      	movs	r0, #12
 801b22e:	183b      	adds	r3, r7, r0
 801b230:	491b      	ldr	r1, [pc, #108]	@ (801b2a0 <USB_EPSetStall+0x94>)
 801b232:	400a      	ands	r2, r1
 801b234:	801a      	strh	r2, [r3, #0]
 801b236:	183b      	adds	r3, r7, r0
 801b238:	183a      	adds	r2, r7, r0
 801b23a:	8812      	ldrh	r2, [r2, #0]
 801b23c:	2110      	movs	r1, #16
 801b23e:	404a      	eors	r2, r1
 801b240:	801a      	strh	r2, [r3, #0]
 801b242:	687a      	ldr	r2, [r7, #4]
 801b244:	683b      	ldr	r3, [r7, #0]
 801b246:	781b      	ldrb	r3, [r3, #0]
 801b248:	009b      	lsls	r3, r3, #2
 801b24a:	18d3      	adds	r3, r2, r3
 801b24c:	183a      	adds	r2, r7, r0
 801b24e:	8812      	ldrh	r2, [r2, #0]
 801b250:	4914      	ldr	r1, [pc, #80]	@ (801b2a4 <USB_EPSetStall+0x98>)
 801b252:	430a      	orrs	r2, r1
 801b254:	b292      	uxth	r2, r2
 801b256:	801a      	strh	r2, [r3, #0]
 801b258:	e01d      	b.n	801b296 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801b25a:	687a      	ldr	r2, [r7, #4]
 801b25c:	683b      	ldr	r3, [r7, #0]
 801b25e:	781b      	ldrb	r3, [r3, #0]
 801b260:	009b      	lsls	r3, r3, #2
 801b262:	18d3      	adds	r3, r2, r3
 801b264:	881b      	ldrh	r3, [r3, #0]
 801b266:	b29a      	uxth	r2, r3
 801b268:	200e      	movs	r0, #14
 801b26a:	183b      	adds	r3, r7, r0
 801b26c:	490e      	ldr	r1, [pc, #56]	@ (801b2a8 <USB_EPSetStall+0x9c>)
 801b26e:	400a      	ands	r2, r1
 801b270:	801a      	strh	r2, [r3, #0]
 801b272:	183b      	adds	r3, r7, r0
 801b274:	183a      	adds	r2, r7, r0
 801b276:	8812      	ldrh	r2, [r2, #0]
 801b278:	2180      	movs	r1, #128	@ 0x80
 801b27a:	0149      	lsls	r1, r1, #5
 801b27c:	404a      	eors	r2, r1
 801b27e:	801a      	strh	r2, [r3, #0]
 801b280:	687a      	ldr	r2, [r7, #4]
 801b282:	683b      	ldr	r3, [r7, #0]
 801b284:	781b      	ldrb	r3, [r3, #0]
 801b286:	009b      	lsls	r3, r3, #2
 801b288:	18d3      	adds	r3, r2, r3
 801b28a:	183a      	adds	r2, r7, r0
 801b28c:	8812      	ldrh	r2, [r2, #0]
 801b28e:	4905      	ldr	r1, [pc, #20]	@ (801b2a4 <USB_EPSetStall+0x98>)
 801b290:	430a      	orrs	r2, r1
 801b292:	b292      	uxth	r2, r2
 801b294:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801b296:	2300      	movs	r3, #0
}
 801b298:	0018      	movs	r0, r3
 801b29a:	46bd      	mov	sp, r7
 801b29c:	b004      	add	sp, #16
 801b29e:	bd80      	pop	{r7, pc}
 801b2a0:	ffff8fbf 	.word	0xffff8fbf
 801b2a4:	ffff8080 	.word	0xffff8080
 801b2a8:	ffffbf8f 	.word	0xffffbf8f

0801b2ac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	b086      	sub	sp, #24
 801b2b0:	af00      	add	r7, sp, #0
 801b2b2:	6078      	str	r0, [r7, #4]
 801b2b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801b2b6:	683b      	ldr	r3, [r7, #0]
 801b2b8:	7b1b      	ldrb	r3, [r3, #12]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d000      	beq.n	801b2c0 <USB_EPClearStall+0x14>
 801b2be:	e095      	b.n	801b3ec <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801b2c0:	683b      	ldr	r3, [r7, #0]
 801b2c2:	785b      	ldrb	r3, [r3, #1]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d046      	beq.n	801b356 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801b2c8:	687a      	ldr	r2, [r7, #4]
 801b2ca:	683b      	ldr	r3, [r7, #0]
 801b2cc:	781b      	ldrb	r3, [r3, #0]
 801b2ce:	009b      	lsls	r3, r3, #2
 801b2d0:	18d2      	adds	r2, r2, r3
 801b2d2:	2110      	movs	r1, #16
 801b2d4:	187b      	adds	r3, r7, r1
 801b2d6:	8812      	ldrh	r2, [r2, #0]
 801b2d8:	801a      	strh	r2, [r3, #0]
 801b2da:	187b      	adds	r3, r7, r1
 801b2dc:	881b      	ldrh	r3, [r3, #0]
 801b2de:	2240      	movs	r2, #64	@ 0x40
 801b2e0:	4013      	ands	r3, r2
 801b2e2:	d016      	beq.n	801b312 <USB_EPClearStall+0x66>
 801b2e4:	687a      	ldr	r2, [r7, #4]
 801b2e6:	683b      	ldr	r3, [r7, #0]
 801b2e8:	781b      	ldrb	r3, [r3, #0]
 801b2ea:	009b      	lsls	r3, r3, #2
 801b2ec:	18d3      	adds	r3, r2, r3
 801b2ee:	881b      	ldrh	r3, [r3, #0]
 801b2f0:	b29a      	uxth	r2, r3
 801b2f2:	200e      	movs	r0, #14
 801b2f4:	183b      	adds	r3, r7, r0
 801b2f6:	4940      	ldr	r1, [pc, #256]	@ (801b3f8 <USB_EPClearStall+0x14c>)
 801b2f8:	400a      	ands	r2, r1
 801b2fa:	801a      	strh	r2, [r3, #0]
 801b2fc:	687a      	ldr	r2, [r7, #4]
 801b2fe:	683b      	ldr	r3, [r7, #0]
 801b300:	781b      	ldrb	r3, [r3, #0]
 801b302:	009b      	lsls	r3, r3, #2
 801b304:	18d3      	adds	r3, r2, r3
 801b306:	183a      	adds	r2, r7, r0
 801b308:	8812      	ldrh	r2, [r2, #0]
 801b30a:	493c      	ldr	r1, [pc, #240]	@ (801b3fc <USB_EPClearStall+0x150>)
 801b30c:	430a      	orrs	r2, r1
 801b30e:	b292      	uxth	r2, r2
 801b310:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b312:	683b      	ldr	r3, [r7, #0]
 801b314:	78db      	ldrb	r3, [r3, #3]
 801b316:	2b01      	cmp	r3, #1
 801b318:	d068      	beq.n	801b3ec <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801b31a:	687a      	ldr	r2, [r7, #4]
 801b31c:	683b      	ldr	r3, [r7, #0]
 801b31e:	781b      	ldrb	r3, [r3, #0]
 801b320:	009b      	lsls	r3, r3, #2
 801b322:	18d3      	adds	r3, r2, r3
 801b324:	881b      	ldrh	r3, [r3, #0]
 801b326:	b29a      	uxth	r2, r3
 801b328:	200c      	movs	r0, #12
 801b32a:	183b      	adds	r3, r7, r0
 801b32c:	4934      	ldr	r1, [pc, #208]	@ (801b400 <USB_EPClearStall+0x154>)
 801b32e:	400a      	ands	r2, r1
 801b330:	801a      	strh	r2, [r3, #0]
 801b332:	183b      	adds	r3, r7, r0
 801b334:	183a      	adds	r2, r7, r0
 801b336:	8812      	ldrh	r2, [r2, #0]
 801b338:	2120      	movs	r1, #32
 801b33a:	404a      	eors	r2, r1
 801b33c:	801a      	strh	r2, [r3, #0]
 801b33e:	687a      	ldr	r2, [r7, #4]
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	781b      	ldrb	r3, [r3, #0]
 801b344:	009b      	lsls	r3, r3, #2
 801b346:	18d3      	adds	r3, r2, r3
 801b348:	183a      	adds	r2, r7, r0
 801b34a:	8812      	ldrh	r2, [r2, #0]
 801b34c:	492d      	ldr	r1, [pc, #180]	@ (801b404 <USB_EPClearStall+0x158>)
 801b34e:	430a      	orrs	r2, r1
 801b350:	b292      	uxth	r2, r2
 801b352:	801a      	strh	r2, [r3, #0]
 801b354:	e04a      	b.n	801b3ec <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801b356:	687a      	ldr	r2, [r7, #4]
 801b358:	683b      	ldr	r3, [r7, #0]
 801b35a:	781b      	ldrb	r3, [r3, #0]
 801b35c:	009b      	lsls	r3, r3, #2
 801b35e:	18d2      	adds	r2, r2, r3
 801b360:	2116      	movs	r1, #22
 801b362:	187b      	adds	r3, r7, r1
 801b364:	8812      	ldrh	r2, [r2, #0]
 801b366:	801a      	strh	r2, [r3, #0]
 801b368:	187b      	adds	r3, r7, r1
 801b36a:	881a      	ldrh	r2, [r3, #0]
 801b36c:	2380      	movs	r3, #128	@ 0x80
 801b36e:	01db      	lsls	r3, r3, #7
 801b370:	4013      	ands	r3, r2
 801b372:	d016      	beq.n	801b3a2 <USB_EPClearStall+0xf6>
 801b374:	687a      	ldr	r2, [r7, #4]
 801b376:	683b      	ldr	r3, [r7, #0]
 801b378:	781b      	ldrb	r3, [r3, #0]
 801b37a:	009b      	lsls	r3, r3, #2
 801b37c:	18d3      	adds	r3, r2, r3
 801b37e:	881b      	ldrh	r3, [r3, #0]
 801b380:	b29a      	uxth	r2, r3
 801b382:	2014      	movs	r0, #20
 801b384:	183b      	adds	r3, r7, r0
 801b386:	491c      	ldr	r1, [pc, #112]	@ (801b3f8 <USB_EPClearStall+0x14c>)
 801b388:	400a      	ands	r2, r1
 801b38a:	801a      	strh	r2, [r3, #0]
 801b38c:	687a      	ldr	r2, [r7, #4]
 801b38e:	683b      	ldr	r3, [r7, #0]
 801b390:	781b      	ldrb	r3, [r3, #0]
 801b392:	009b      	lsls	r3, r3, #2
 801b394:	18d3      	adds	r3, r2, r3
 801b396:	183a      	adds	r2, r7, r0
 801b398:	8812      	ldrh	r2, [r2, #0]
 801b39a:	491b      	ldr	r1, [pc, #108]	@ (801b408 <USB_EPClearStall+0x15c>)
 801b39c:	430a      	orrs	r2, r1
 801b39e:	b292      	uxth	r2, r2
 801b3a0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801b3a2:	687a      	ldr	r2, [r7, #4]
 801b3a4:	683b      	ldr	r3, [r7, #0]
 801b3a6:	781b      	ldrb	r3, [r3, #0]
 801b3a8:	009b      	lsls	r3, r3, #2
 801b3aa:	18d3      	adds	r3, r2, r3
 801b3ac:	881b      	ldrh	r3, [r3, #0]
 801b3ae:	b29a      	uxth	r2, r3
 801b3b0:	2012      	movs	r0, #18
 801b3b2:	183b      	adds	r3, r7, r0
 801b3b4:	4915      	ldr	r1, [pc, #84]	@ (801b40c <USB_EPClearStall+0x160>)
 801b3b6:	400a      	ands	r2, r1
 801b3b8:	801a      	strh	r2, [r3, #0]
 801b3ba:	183b      	adds	r3, r7, r0
 801b3bc:	183a      	adds	r2, r7, r0
 801b3be:	8812      	ldrh	r2, [r2, #0]
 801b3c0:	2180      	movs	r1, #128	@ 0x80
 801b3c2:	0149      	lsls	r1, r1, #5
 801b3c4:	404a      	eors	r2, r1
 801b3c6:	801a      	strh	r2, [r3, #0]
 801b3c8:	183b      	adds	r3, r7, r0
 801b3ca:	183a      	adds	r2, r7, r0
 801b3cc:	8812      	ldrh	r2, [r2, #0]
 801b3ce:	2180      	movs	r1, #128	@ 0x80
 801b3d0:	0189      	lsls	r1, r1, #6
 801b3d2:	404a      	eors	r2, r1
 801b3d4:	801a      	strh	r2, [r3, #0]
 801b3d6:	687a      	ldr	r2, [r7, #4]
 801b3d8:	683b      	ldr	r3, [r7, #0]
 801b3da:	781b      	ldrb	r3, [r3, #0]
 801b3dc:	009b      	lsls	r3, r3, #2
 801b3de:	18d3      	adds	r3, r2, r3
 801b3e0:	183a      	adds	r2, r7, r0
 801b3e2:	8812      	ldrh	r2, [r2, #0]
 801b3e4:	4907      	ldr	r1, [pc, #28]	@ (801b404 <USB_EPClearStall+0x158>)
 801b3e6:	430a      	orrs	r2, r1
 801b3e8:	b292      	uxth	r2, r2
 801b3ea:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801b3ec:	2300      	movs	r3, #0
}
 801b3ee:	0018      	movs	r0, r3
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	b006      	add	sp, #24
 801b3f4:	bd80      	pop	{r7, pc}
 801b3f6:	46c0      	nop			@ (mov r8, r8)
 801b3f8:	ffff8f8f 	.word	0xffff8f8f
 801b3fc:	ffff80c0 	.word	0xffff80c0
 801b400:	ffff8fbf 	.word	0xffff8fbf
 801b404:	ffff8080 	.word	0xffff8080
 801b408:	ffffc080 	.word	0xffffc080
 801b40c:	ffffbf8f 	.word	0xffffbf8f

0801b410 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801b410:	b580      	push	{r7, lr}
 801b412:	b082      	sub	sp, #8
 801b414:	af00      	add	r7, sp, #0
 801b416:	6078      	str	r0, [r7, #4]
 801b418:	000a      	movs	r2, r1
 801b41a:	1cfb      	adds	r3, r7, #3
 801b41c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801b41e:	1cfb      	adds	r3, r7, #3
 801b420:	781b      	ldrb	r3, [r3, #0]
 801b422:	2b00      	cmp	r3, #0
 801b424:	d103      	bne.n	801b42e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	224c      	movs	r2, #76	@ 0x4c
 801b42a:	2180      	movs	r1, #128	@ 0x80
 801b42c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801b42e:	2300      	movs	r3, #0
}
 801b430:	0018      	movs	r0, r3
 801b432:	46bd      	mov	sp, r7
 801b434:	b002      	add	sp, #8
 801b436:	bd80      	pop	{r7, pc}

0801b438 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b082      	sub	sp, #8
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	2258      	movs	r2, #88	@ 0x58
 801b444:	5a9b      	ldrh	r3, [r3, r2]
 801b446:	b29b      	uxth	r3, r3
 801b448:	4a05      	ldr	r2, [pc, #20]	@ (801b460 <USB_DevConnect+0x28>)
 801b44a:	4313      	orrs	r3, r2
 801b44c:	b299      	uxth	r1, r3
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	2258      	movs	r2, #88	@ 0x58
 801b452:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b454:	2300      	movs	r3, #0
}
 801b456:	0018      	movs	r0, r3
 801b458:	46bd      	mov	sp, r7
 801b45a:	b002      	add	sp, #8
 801b45c:	bd80      	pop	{r7, pc}
 801b45e:	46c0      	nop			@ (mov r8, r8)
 801b460:	ffff8000 	.word	0xffff8000

0801b464 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801b464:	b580      	push	{r7, lr}
 801b466:	b084      	sub	sp, #16
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	2244      	movs	r2, #68	@ 0x44
 801b470:	5a9b      	ldrh	r3, [r3, r2]
 801b472:	b29b      	uxth	r3, r3
 801b474:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801b476:	68fb      	ldr	r3, [r7, #12]
}
 801b478:	0018      	movs	r0, r3
 801b47a:	46bd      	mov	sp, r7
 801b47c:	b004      	add	sp, #16
 801b47e:	bd80      	pop	{r7, pc}

0801b480 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b480:	b580      	push	{r7, lr}
 801b482:	b08a      	sub	sp, #40	@ 0x28
 801b484:	af00      	add	r7, sp, #0
 801b486:	60f8      	str	r0, [r7, #12]
 801b488:	60b9      	str	r1, [r7, #8]
 801b48a:	0019      	movs	r1, r3
 801b48c:	1dbb      	adds	r3, r7, #6
 801b48e:	801a      	strh	r2, [r3, #0]
 801b490:	1d3b      	adds	r3, r7, #4
 801b492:	1c0a      	adds	r2, r1, #0
 801b494:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801b496:	1d3b      	adds	r3, r7, #4
 801b498:	881b      	ldrh	r3, [r3, #0]
 801b49a:	3301      	adds	r3, #1
 801b49c:	085b      	lsrs	r3, r3, #1
 801b49e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b4a4:	68bb      	ldr	r3, [r7, #8]
 801b4a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b4a8:	1dbb      	adds	r3, r7, #6
 801b4aa:	881a      	ldrh	r2, [r3, #0]
 801b4ac:	697b      	ldr	r3, [r7, #20]
 801b4ae:	18d3      	adds	r3, r2, r3
 801b4b0:	2280      	movs	r2, #128	@ 0x80
 801b4b2:	00d2      	lsls	r2, r2, #3
 801b4b4:	4694      	mov	ip, r2
 801b4b6:	4463      	add	r3, ip
 801b4b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b4ba:	69bb      	ldr	r3, [r7, #24]
 801b4bc:	627b      	str	r3, [r7, #36]	@ 0x24
 801b4be:	e020      	b.n	801b502 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801b4c0:	69fb      	ldr	r3, [r7, #28]
 801b4c2:	781a      	ldrb	r2, [r3, #0]
 801b4c4:	2112      	movs	r1, #18
 801b4c6:	187b      	adds	r3, r7, r1
 801b4c8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801b4ca:	69fb      	ldr	r3, [r7, #28]
 801b4cc:	3301      	adds	r3, #1
 801b4ce:	781b      	ldrb	r3, [r3, #0]
 801b4d0:	021b      	lsls	r3, r3, #8
 801b4d2:	b21a      	sxth	r2, r3
 801b4d4:	187b      	adds	r3, r7, r1
 801b4d6:	2000      	movs	r0, #0
 801b4d8:	5e1b      	ldrsh	r3, [r3, r0]
 801b4da:	4313      	orrs	r3, r2
 801b4dc:	b21a      	sxth	r2, r3
 801b4de:	187b      	adds	r3, r7, r1
 801b4e0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801b4e2:	6a3b      	ldr	r3, [r7, #32]
 801b4e4:	187a      	adds	r2, r7, r1
 801b4e6:	8812      	ldrh	r2, [r2, #0]
 801b4e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801b4ea:	6a3b      	ldr	r3, [r7, #32]
 801b4ec:	3302      	adds	r3, #2
 801b4ee:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801b4f0:	69fb      	ldr	r3, [r7, #28]
 801b4f2:	3301      	adds	r3, #1
 801b4f4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801b4f6:	69fb      	ldr	r3, [r7, #28]
 801b4f8:	3301      	adds	r3, #1
 801b4fa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4fe:	3b01      	subs	r3, #1
 801b500:	627b      	str	r3, [r7, #36]	@ 0x24
 801b502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b504:	2b00      	cmp	r3, #0
 801b506:	d1db      	bne.n	801b4c0 <USB_WritePMA+0x40>
  }
}
 801b508:	46c0      	nop			@ (mov r8, r8)
 801b50a:	46c0      	nop			@ (mov r8, r8)
 801b50c:	46bd      	mov	sp, r7
 801b50e:	b00a      	add	sp, #40	@ 0x28
 801b510:	bd80      	pop	{r7, pc}

0801b512 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b512:	b580      	push	{r7, lr}
 801b514:	b08a      	sub	sp, #40	@ 0x28
 801b516:	af00      	add	r7, sp, #0
 801b518:	60f8      	str	r0, [r7, #12]
 801b51a:	60b9      	str	r1, [r7, #8]
 801b51c:	0019      	movs	r1, r3
 801b51e:	1dbb      	adds	r3, r7, #6
 801b520:	801a      	strh	r2, [r3, #0]
 801b522:	1d3b      	adds	r3, r7, #4
 801b524:	1c0a      	adds	r2, r1, #0
 801b526:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b528:	1d3b      	adds	r3, r7, #4
 801b52a:	881b      	ldrh	r3, [r3, #0]
 801b52c:	085b      	lsrs	r3, r3, #1
 801b52e:	b29b      	uxth	r3, r3
 801b530:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b536:	68bb      	ldr	r3, [r7, #8]
 801b538:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b53a:	1dbb      	adds	r3, r7, #6
 801b53c:	881a      	ldrh	r2, [r3, #0]
 801b53e:	697b      	ldr	r3, [r7, #20]
 801b540:	18d3      	adds	r3, r2, r3
 801b542:	2280      	movs	r2, #128	@ 0x80
 801b544:	00d2      	lsls	r2, r2, #3
 801b546:	4694      	mov	ip, r2
 801b548:	4463      	add	r3, ip
 801b54a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b54c:	69bb      	ldr	r3, [r7, #24]
 801b54e:	627b      	str	r3, [r7, #36]	@ 0x24
 801b550:	e018      	b.n	801b584 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b552:	6a3b      	ldr	r3, [r7, #32]
 801b554:	881b      	ldrh	r3, [r3, #0]
 801b556:	b29b      	uxth	r3, r3
 801b558:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b55a:	6a3b      	ldr	r3, [r7, #32]
 801b55c:	3302      	adds	r3, #2
 801b55e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b560:	693b      	ldr	r3, [r7, #16]
 801b562:	b2da      	uxtb	r2, r3
 801b564:	69fb      	ldr	r3, [r7, #28]
 801b566:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b568:	69fb      	ldr	r3, [r7, #28]
 801b56a:	3301      	adds	r3, #1
 801b56c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b56e:	693b      	ldr	r3, [r7, #16]
 801b570:	0a1b      	lsrs	r3, r3, #8
 801b572:	b2da      	uxtb	r2, r3
 801b574:	69fb      	ldr	r3, [r7, #28]
 801b576:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b578:	69fb      	ldr	r3, [r7, #28]
 801b57a:	3301      	adds	r3, #1
 801b57c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b580:	3b01      	subs	r3, #1
 801b582:	627b      	str	r3, [r7, #36]	@ 0x24
 801b584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b586:	2b00      	cmp	r3, #0
 801b588:	d1e3      	bne.n	801b552 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b58a:	1d3b      	adds	r3, r7, #4
 801b58c:	881b      	ldrh	r3, [r3, #0]
 801b58e:	2201      	movs	r2, #1
 801b590:	4013      	ands	r3, r2
 801b592:	b29b      	uxth	r3, r3
 801b594:	2b00      	cmp	r3, #0
 801b596:	d007      	beq.n	801b5a8 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b598:	6a3b      	ldr	r3, [r7, #32]
 801b59a:	881b      	ldrh	r3, [r3, #0]
 801b59c:	b29b      	uxth	r3, r3
 801b59e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b5a0:	693b      	ldr	r3, [r7, #16]
 801b5a2:	b2da      	uxtb	r2, r3
 801b5a4:	69fb      	ldr	r3, [r7, #28]
 801b5a6:	701a      	strb	r2, [r3, #0]
  }
}
 801b5a8:	46c0      	nop			@ (mov r8, r8)
 801b5aa:	46bd      	mov	sp, r7
 801b5ac:	b00a      	add	sp, #40	@ 0x28
 801b5ae:	bd80      	pop	{r7, pc}

0801b5b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b084      	sub	sp, #16
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	6078      	str	r0, [r7, #4]
 801b5b8:	000a      	movs	r2, r1
 801b5ba:	1cfb      	adds	r3, r7, #3
 801b5bc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b5be:	230f      	movs	r3, #15
 801b5c0:	18fb      	adds	r3, r7, r3
 801b5c2:	2200      	movs	r2, #0
 801b5c4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	7c1b      	ldrb	r3, [r3, #16]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d116      	bne.n	801b5fc <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b5ce:	2380      	movs	r3, #128	@ 0x80
 801b5d0:	009b      	lsls	r3, r3, #2
 801b5d2:	6878      	ldr	r0, [r7, #4]
 801b5d4:	2202      	movs	r2, #2
 801b5d6:	2181      	movs	r1, #129	@ 0x81
 801b5d8:	f002 f8eb 	bl	801d7b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	2201      	movs	r2, #1
 801b5e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b5e2:	2380      	movs	r3, #128	@ 0x80
 801b5e4:	009b      	lsls	r3, r3, #2
 801b5e6:	6878      	ldr	r0, [r7, #4]
 801b5e8:	2202      	movs	r2, #2
 801b5ea:	2101      	movs	r1, #1
 801b5ec:	f002 f8e1 	bl	801d7b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b5f0:	687a      	ldr	r2, [r7, #4]
 801b5f2:	23b6      	movs	r3, #182	@ 0xb6
 801b5f4:	005b      	lsls	r3, r3, #1
 801b5f6:	2101      	movs	r1, #1
 801b5f8:	50d1      	str	r1, [r2, r3]
 801b5fa:	e013      	b.n	801b624 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b5fc:	6878      	ldr	r0, [r7, #4]
 801b5fe:	2340      	movs	r3, #64	@ 0x40
 801b600:	2202      	movs	r2, #2
 801b602:	2181      	movs	r1, #129	@ 0x81
 801b604:	f002 f8d5 	bl	801d7b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	2201      	movs	r2, #1
 801b60c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b60e:	6878      	ldr	r0, [r7, #4]
 801b610:	2340      	movs	r3, #64	@ 0x40
 801b612:	2202      	movs	r2, #2
 801b614:	2101      	movs	r1, #1
 801b616:	f002 f8cc 	bl	801d7b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b61a:	687a      	ldr	r2, [r7, #4]
 801b61c:	23b6      	movs	r3, #182	@ 0xb6
 801b61e:	005b      	lsls	r3, r3, #1
 801b620:	2101      	movs	r1, #1
 801b622:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b624:	6878      	ldr	r0, [r7, #4]
 801b626:	2308      	movs	r3, #8
 801b628:	2203      	movs	r2, #3
 801b62a:	2182      	movs	r1, #130	@ 0x82
 801b62c:	f002 f8c1 	bl	801d7b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	2201      	movs	r2, #1
 801b634:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b636:	2387      	movs	r3, #135	@ 0x87
 801b638:	009b      	lsls	r3, r3, #2
 801b63a:	0018      	movs	r0, r3
 801b63c:	f002 fa52 	bl	801dae4 <USBD_static_malloc>
 801b640:	0001      	movs	r1, r0
 801b642:	687a      	ldr	r2, [r7, #4]
 801b644:	23ae      	movs	r3, #174	@ 0xae
 801b646:	009b      	lsls	r3, r3, #2
 801b648:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b64a:	687a      	ldr	r2, [r7, #4]
 801b64c:	23ae      	movs	r3, #174	@ 0xae
 801b64e:	009b      	lsls	r3, r3, #2
 801b650:	58d3      	ldr	r3, [r2, r3]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d104      	bne.n	801b660 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b656:	230f      	movs	r3, #15
 801b658:	18fb      	adds	r3, r7, r3
 801b65a:	2201      	movs	r2, #1
 801b65c:	701a      	strb	r2, [r3, #0]
 801b65e:	e02c      	b.n	801b6ba <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b660:	687a      	ldr	r2, [r7, #4]
 801b662:	23ae      	movs	r3, #174	@ 0xae
 801b664:	009b      	lsls	r3, r3, #2
 801b666:	58d3      	ldr	r3, [r2, r3]
 801b668:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b66a:	687a      	ldr	r2, [r7, #4]
 801b66c:	23af      	movs	r3, #175	@ 0xaf
 801b66e:	009b      	lsls	r3, r3, #2
 801b670:	58d3      	ldr	r3, [r2, r3]
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b676:	68ba      	ldr	r2, [r7, #8]
 801b678:	2385      	movs	r3, #133	@ 0x85
 801b67a:	009b      	lsls	r3, r3, #2
 801b67c:	2100      	movs	r1, #0
 801b67e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b680:	68ba      	ldr	r2, [r7, #8]
 801b682:	2386      	movs	r3, #134	@ 0x86
 801b684:	009b      	lsls	r3, r3, #2
 801b686:	2100      	movs	r1, #0
 801b688:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	7c1b      	ldrb	r3, [r3, #16]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d10a      	bne.n	801b6a8 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b692:	68ba      	ldr	r2, [r7, #8]
 801b694:	2381      	movs	r3, #129	@ 0x81
 801b696:	009b      	lsls	r3, r3, #2
 801b698:	58d2      	ldr	r2, [r2, r3]
 801b69a:	2380      	movs	r3, #128	@ 0x80
 801b69c:	009b      	lsls	r3, r3, #2
 801b69e:	6878      	ldr	r0, [r7, #4]
 801b6a0:	2101      	movs	r1, #1
 801b6a2:	f002 f9d1 	bl	801da48 <USBD_LL_PrepareReceive>
 801b6a6:	e008      	b.n	801b6ba <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b6a8:	68ba      	ldr	r2, [r7, #8]
 801b6aa:	2381      	movs	r3, #129	@ 0x81
 801b6ac:	009b      	lsls	r3, r3, #2
 801b6ae:	58d2      	ldr	r2, [r2, r3]
 801b6b0:	6878      	ldr	r0, [r7, #4]
 801b6b2:	2340      	movs	r3, #64	@ 0x40
 801b6b4:	2101      	movs	r1, #1
 801b6b6:	f002 f9c7 	bl	801da48 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b6ba:	230f      	movs	r3, #15
 801b6bc:	18fb      	adds	r3, r7, r3
 801b6be:	781b      	ldrb	r3, [r3, #0]
}
 801b6c0:	0018      	movs	r0, r3
 801b6c2:	46bd      	mov	sp, r7
 801b6c4:	b004      	add	sp, #16
 801b6c6:	bd80      	pop	{r7, pc}

0801b6c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b084      	sub	sp, #16
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	6078      	str	r0, [r7, #4]
 801b6d0:	000a      	movs	r2, r1
 801b6d2:	1cfb      	adds	r3, r7, #3
 801b6d4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b6d6:	230f      	movs	r3, #15
 801b6d8:	18fb      	adds	r3, r7, r3
 801b6da:	2200      	movs	r2, #0
 801b6dc:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	2181      	movs	r1, #129	@ 0x81
 801b6e2:	0018      	movs	r0, r3
 801b6e4:	f002 f89c 	bl	801d820 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	2200      	movs	r2, #0
 801b6ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	2101      	movs	r1, #1
 801b6f2:	0018      	movs	r0, r3
 801b6f4:	f002 f894 	bl	801d820 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b6f8:	687a      	ldr	r2, [r7, #4]
 801b6fa:	23b6      	movs	r3, #182	@ 0xb6
 801b6fc:	005b      	lsls	r3, r3, #1
 801b6fe:	2100      	movs	r1, #0
 801b700:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	2182      	movs	r1, #130	@ 0x82
 801b706:	0018      	movs	r0, r3
 801b708:	f002 f88a 	bl	801d820 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	2200      	movs	r2, #0
 801b710:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b712:	687a      	ldr	r2, [r7, #4]
 801b714:	23ae      	movs	r3, #174	@ 0xae
 801b716:	009b      	lsls	r3, r3, #2
 801b718:	58d3      	ldr	r3, [r2, r3]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d011      	beq.n	801b742 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b71e:	687a      	ldr	r2, [r7, #4]
 801b720:	23af      	movs	r3, #175	@ 0xaf
 801b722:	009b      	lsls	r3, r3, #2
 801b724:	58d3      	ldr	r3, [r2, r3]
 801b726:	685b      	ldr	r3, [r3, #4]
 801b728:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b72a:	687a      	ldr	r2, [r7, #4]
 801b72c:	23ae      	movs	r3, #174	@ 0xae
 801b72e:	009b      	lsls	r3, r3, #2
 801b730:	58d3      	ldr	r3, [r2, r3]
 801b732:	0018      	movs	r0, r3
 801b734:	f002 f9e2 	bl	801dafc <USBD_static_free>
    pdev->pClassData = NULL;
 801b738:	687a      	ldr	r2, [r7, #4]
 801b73a:	23ae      	movs	r3, #174	@ 0xae
 801b73c:	009b      	lsls	r3, r3, #2
 801b73e:	2100      	movs	r1, #0
 801b740:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b742:	230f      	movs	r3, #15
 801b744:	18fb      	adds	r3, r7, r3
 801b746:	781b      	ldrb	r3, [r3, #0]
}
 801b748:	0018      	movs	r0, r3
 801b74a:	46bd      	mov	sp, r7
 801b74c:	b004      	add	sp, #16
 801b74e:	bd80      	pop	{r7, pc}

0801b750 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b750:	b580      	push	{r7, lr}
 801b752:	b086      	sub	sp, #24
 801b754:	af00      	add	r7, sp, #0
 801b756:	6078      	str	r0, [r7, #4]
 801b758:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b75a:	687a      	ldr	r2, [r7, #4]
 801b75c:	23ae      	movs	r3, #174	@ 0xae
 801b75e:	009b      	lsls	r3, r3, #2
 801b760:	58d3      	ldr	r3, [r2, r3]
 801b762:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b764:	230f      	movs	r3, #15
 801b766:	18fb      	adds	r3, r7, r3
 801b768:	2200      	movs	r2, #0
 801b76a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b76c:	230c      	movs	r3, #12
 801b76e:	18fb      	adds	r3, r7, r3
 801b770:	2200      	movs	r2, #0
 801b772:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b774:	2317      	movs	r3, #23
 801b776:	18fb      	adds	r3, r7, r3
 801b778:	2200      	movs	r2, #0
 801b77a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b77c:	683b      	ldr	r3, [r7, #0]
 801b77e:	781b      	ldrb	r3, [r3, #0]
 801b780:	001a      	movs	r2, r3
 801b782:	2360      	movs	r3, #96	@ 0x60
 801b784:	4013      	ands	r3, r2
 801b786:	d03d      	beq.n	801b804 <USBD_CDC_Setup+0xb4>
 801b788:	2b20      	cmp	r3, #32
 801b78a:	d000      	beq.n	801b78e <USBD_CDC_Setup+0x3e>
 801b78c:	e094      	b.n	801b8b8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b78e:	683b      	ldr	r3, [r7, #0]
 801b790:	88db      	ldrh	r3, [r3, #6]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d02b      	beq.n	801b7ee <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b796:	683b      	ldr	r3, [r7, #0]
 801b798:	781b      	ldrb	r3, [r3, #0]
 801b79a:	b25b      	sxtb	r3, r3
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	da12      	bge.n	801b7c6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b7a0:	687a      	ldr	r2, [r7, #4]
 801b7a2:	23af      	movs	r3, #175	@ 0xaf
 801b7a4:	009b      	lsls	r3, r3, #2
 801b7a6:	58d3      	ldr	r3, [r2, r3]
 801b7a8:	689b      	ldr	r3, [r3, #8]
 801b7aa:	683a      	ldr	r2, [r7, #0]
 801b7ac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b7ae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b7b0:	683a      	ldr	r2, [r7, #0]
 801b7b2:	88d2      	ldrh	r2, [r2, #6]
 801b7b4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b7b6:	6939      	ldr	r1, [r7, #16]
 801b7b8:	683b      	ldr	r3, [r7, #0]
 801b7ba:	88da      	ldrh	r2, [r3, #6]
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	0018      	movs	r0, r3
 801b7c0:	f001 fbaf 	bl	801cf22 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b7c4:	e083      	b.n	801b8ce <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b7c6:	683b      	ldr	r3, [r7, #0]
 801b7c8:	7859      	ldrb	r1, [r3, #1]
 801b7ca:	693a      	ldr	r2, [r7, #16]
 801b7cc:	2380      	movs	r3, #128	@ 0x80
 801b7ce:	009b      	lsls	r3, r3, #2
 801b7d0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b7d2:	683b      	ldr	r3, [r7, #0]
 801b7d4:	88db      	ldrh	r3, [r3, #6]
 801b7d6:	b2d9      	uxtb	r1, r3
 801b7d8:	693b      	ldr	r3, [r7, #16]
 801b7da:	4a40      	ldr	r2, [pc, #256]	@ (801b8dc <USBD_CDC_Setup+0x18c>)
 801b7dc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b7de:	6939      	ldr	r1, [r7, #16]
 801b7e0:	683b      	ldr	r3, [r7, #0]
 801b7e2:	88da      	ldrh	r2, [r3, #6]
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	0018      	movs	r0, r3
 801b7e8:	f001 fbce 	bl	801cf88 <USBD_CtlPrepareRx>
      break;
 801b7ec:	e06f      	b.n	801b8ce <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b7ee:	687a      	ldr	r2, [r7, #4]
 801b7f0:	23af      	movs	r3, #175	@ 0xaf
 801b7f2:	009b      	lsls	r3, r3, #2
 801b7f4:	58d3      	ldr	r3, [r2, r3]
 801b7f6:	689b      	ldr	r3, [r3, #8]
 801b7f8:	683a      	ldr	r2, [r7, #0]
 801b7fa:	7850      	ldrb	r0, [r2, #1]
 801b7fc:	6839      	ldr	r1, [r7, #0]
 801b7fe:	2200      	movs	r2, #0
 801b800:	4798      	blx	r3
      break;
 801b802:	e064      	b.n	801b8ce <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b804:	683b      	ldr	r3, [r7, #0]
 801b806:	785b      	ldrb	r3, [r3, #1]
 801b808:	2b0b      	cmp	r3, #11
 801b80a:	d037      	beq.n	801b87c <USBD_CDC_Setup+0x12c>
 801b80c:	dc47      	bgt.n	801b89e <USBD_CDC_Setup+0x14e>
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d002      	beq.n	801b818 <USBD_CDC_Setup+0xc8>
 801b812:	2b0a      	cmp	r3, #10
 801b814:	d019      	beq.n	801b84a <USBD_CDC_Setup+0xfa>
 801b816:	e042      	b.n	801b89e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b818:	687a      	ldr	r2, [r7, #4]
 801b81a:	23a7      	movs	r3, #167	@ 0xa7
 801b81c:	009b      	lsls	r3, r3, #2
 801b81e:	5cd3      	ldrb	r3, [r2, r3]
 801b820:	2b03      	cmp	r3, #3
 801b822:	d107      	bne.n	801b834 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b824:	230c      	movs	r3, #12
 801b826:	18f9      	adds	r1, r7, r3
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	2202      	movs	r2, #2
 801b82c:	0018      	movs	r0, r3
 801b82e:	f001 fb78 	bl	801cf22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b832:	e040      	b.n	801b8b6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b834:	683a      	ldr	r2, [r7, #0]
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	0011      	movs	r1, r2
 801b83a:	0018      	movs	r0, r3
 801b83c:	f001 faf3 	bl	801ce26 <USBD_CtlError>
            ret = USBD_FAIL;
 801b840:	2317      	movs	r3, #23
 801b842:	18fb      	adds	r3, r7, r3
 801b844:	2202      	movs	r2, #2
 801b846:	701a      	strb	r2, [r3, #0]
          break;
 801b848:	e035      	b.n	801b8b6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b84a:	687a      	ldr	r2, [r7, #4]
 801b84c:	23a7      	movs	r3, #167	@ 0xa7
 801b84e:	009b      	lsls	r3, r3, #2
 801b850:	5cd3      	ldrb	r3, [r2, r3]
 801b852:	2b03      	cmp	r3, #3
 801b854:	d107      	bne.n	801b866 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b856:	230f      	movs	r3, #15
 801b858:	18f9      	adds	r1, r7, r3
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	2201      	movs	r2, #1
 801b85e:	0018      	movs	r0, r3
 801b860:	f001 fb5f 	bl	801cf22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b864:	e027      	b.n	801b8b6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b866:	683a      	ldr	r2, [r7, #0]
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	0011      	movs	r1, r2
 801b86c:	0018      	movs	r0, r3
 801b86e:	f001 fada 	bl	801ce26 <USBD_CtlError>
            ret = USBD_FAIL;
 801b872:	2317      	movs	r3, #23
 801b874:	18fb      	adds	r3, r7, r3
 801b876:	2202      	movs	r2, #2
 801b878:	701a      	strb	r2, [r3, #0]
          break;
 801b87a:	e01c      	b.n	801b8b6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b87c:	687a      	ldr	r2, [r7, #4]
 801b87e:	23a7      	movs	r3, #167	@ 0xa7
 801b880:	009b      	lsls	r3, r3, #2
 801b882:	5cd3      	ldrb	r3, [r2, r3]
 801b884:	2b03      	cmp	r3, #3
 801b886:	d015      	beq.n	801b8b4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b888:	683a      	ldr	r2, [r7, #0]
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	0011      	movs	r1, r2
 801b88e:	0018      	movs	r0, r3
 801b890:	f001 fac9 	bl	801ce26 <USBD_CtlError>
            ret = USBD_FAIL;
 801b894:	2317      	movs	r3, #23
 801b896:	18fb      	adds	r3, r7, r3
 801b898:	2202      	movs	r2, #2
 801b89a:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b89c:	e00a      	b.n	801b8b4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b89e:	683a      	ldr	r2, [r7, #0]
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	0011      	movs	r1, r2
 801b8a4:	0018      	movs	r0, r3
 801b8a6:	f001 fabe 	bl	801ce26 <USBD_CtlError>
          ret = USBD_FAIL;
 801b8aa:	2317      	movs	r3, #23
 801b8ac:	18fb      	adds	r3, r7, r3
 801b8ae:	2202      	movs	r2, #2
 801b8b0:	701a      	strb	r2, [r3, #0]
          break;
 801b8b2:	e000      	b.n	801b8b6 <USBD_CDC_Setup+0x166>
          break;
 801b8b4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b8b6:	e00a      	b.n	801b8ce <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b8b8:	683a      	ldr	r2, [r7, #0]
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	0011      	movs	r1, r2
 801b8be:	0018      	movs	r0, r3
 801b8c0:	f001 fab1 	bl	801ce26 <USBD_CtlError>
      ret = USBD_FAIL;
 801b8c4:	2317      	movs	r3, #23
 801b8c6:	18fb      	adds	r3, r7, r3
 801b8c8:	2202      	movs	r2, #2
 801b8ca:	701a      	strb	r2, [r3, #0]
      break;
 801b8cc:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b8ce:	2317      	movs	r3, #23
 801b8d0:	18fb      	adds	r3, r7, r3
 801b8d2:	781b      	ldrb	r3, [r3, #0]
}
 801b8d4:	0018      	movs	r0, r3
 801b8d6:	46bd      	mov	sp, r7
 801b8d8:	b006      	add	sp, #24
 801b8da:	bd80      	pop	{r7, pc}
 801b8dc:	00000201 	.word	0x00000201

0801b8e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	b084      	sub	sp, #16
 801b8e4:	af00      	add	r7, sp, #0
 801b8e6:	6078      	str	r0, [r7, #4]
 801b8e8:	000a      	movs	r2, r1
 801b8ea:	1cfb      	adds	r3, r7, #3
 801b8ec:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b8ee:	687a      	ldr	r2, [r7, #4]
 801b8f0:	23ae      	movs	r3, #174	@ 0xae
 801b8f2:	009b      	lsls	r3, r3, #2
 801b8f4:	58d3      	ldr	r3, [r2, r3]
 801b8f6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b8f8:	687a      	ldr	r2, [r7, #4]
 801b8fa:	23b0      	movs	r3, #176	@ 0xb0
 801b8fc:	009b      	lsls	r3, r3, #2
 801b8fe:	58d3      	ldr	r3, [r2, r3]
 801b900:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b902:	687a      	ldr	r2, [r7, #4]
 801b904:	23ae      	movs	r3, #174	@ 0xae
 801b906:	009b      	lsls	r3, r3, #2
 801b908:	58d3      	ldr	r3, [r2, r3]
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d03e      	beq.n	801b98c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b90e:	1cfb      	adds	r3, r7, #3
 801b910:	781a      	ldrb	r2, [r3, #0]
 801b912:	6879      	ldr	r1, [r7, #4]
 801b914:	0013      	movs	r3, r2
 801b916:	009b      	lsls	r3, r3, #2
 801b918:	189b      	adds	r3, r3, r2
 801b91a:	009b      	lsls	r3, r3, #2
 801b91c:	18cb      	adds	r3, r1, r3
 801b91e:	331c      	adds	r3, #28
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d02b      	beq.n	801b97e <USBD_CDC_DataIn+0x9e>
 801b926:	1cfb      	adds	r3, r7, #3
 801b928:	781a      	ldrb	r2, [r3, #0]
 801b92a:	6879      	ldr	r1, [r7, #4]
 801b92c:	0013      	movs	r3, r2
 801b92e:	009b      	lsls	r3, r3, #2
 801b930:	189b      	adds	r3, r3, r2
 801b932:	009b      	lsls	r3, r3, #2
 801b934:	18cb      	adds	r3, r1, r3
 801b936:	331c      	adds	r3, #28
 801b938:	6818      	ldr	r0, [r3, #0]
 801b93a:	1cfb      	adds	r3, r7, #3
 801b93c:	781a      	ldrb	r2, [r3, #0]
 801b93e:	68b9      	ldr	r1, [r7, #8]
 801b940:	0013      	movs	r3, r2
 801b942:	009b      	lsls	r3, r3, #2
 801b944:	189b      	adds	r3, r3, r2
 801b946:	00db      	lsls	r3, r3, #3
 801b948:	18cb      	adds	r3, r1, r3
 801b94a:	3338      	adds	r3, #56	@ 0x38
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	0019      	movs	r1, r3
 801b950:	f7e4 fcae 	bl	80002b0 <__aeabi_uidivmod>
 801b954:	1e0b      	subs	r3, r1, #0
 801b956:	d112      	bne.n	801b97e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b958:	1cfb      	adds	r3, r7, #3
 801b95a:	781a      	ldrb	r2, [r3, #0]
 801b95c:	6879      	ldr	r1, [r7, #4]
 801b95e:	0013      	movs	r3, r2
 801b960:	009b      	lsls	r3, r3, #2
 801b962:	189b      	adds	r3, r3, r2
 801b964:	009b      	lsls	r3, r3, #2
 801b966:	18cb      	adds	r3, r1, r3
 801b968:	331c      	adds	r3, #28
 801b96a:	2200      	movs	r2, #0
 801b96c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b96e:	1cfb      	adds	r3, r7, #3
 801b970:	7819      	ldrb	r1, [r3, #0]
 801b972:	6878      	ldr	r0, [r7, #4]
 801b974:	2300      	movs	r3, #0
 801b976:	2200      	movs	r2, #0
 801b978:	f002 f82f 	bl	801d9da <USBD_LL_Transmit>
 801b97c:	e004      	b.n	801b988 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b97e:	68fa      	ldr	r2, [r7, #12]
 801b980:	2385      	movs	r3, #133	@ 0x85
 801b982:	009b      	lsls	r3, r3, #2
 801b984:	2100      	movs	r1, #0
 801b986:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b988:	2300      	movs	r3, #0
 801b98a:	e000      	b.n	801b98e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b98c:	2302      	movs	r3, #2
  }
}
 801b98e:	0018      	movs	r0, r3
 801b990:	46bd      	mov	sp, r7
 801b992:	b004      	add	sp, #16
 801b994:	bd80      	pop	{r7, pc}

0801b996 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b996:	b580      	push	{r7, lr}
 801b998:	b084      	sub	sp, #16
 801b99a:	af00      	add	r7, sp, #0
 801b99c:	6078      	str	r0, [r7, #4]
 801b99e:	000a      	movs	r2, r1
 801b9a0:	1cfb      	adds	r3, r7, #3
 801b9a2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b9a4:	687a      	ldr	r2, [r7, #4]
 801b9a6:	23ae      	movs	r3, #174	@ 0xae
 801b9a8:	009b      	lsls	r3, r3, #2
 801b9aa:	58d3      	ldr	r3, [r2, r3]
 801b9ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b9ae:	1cfb      	adds	r3, r7, #3
 801b9b0:	781a      	ldrb	r2, [r3, #0]
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	0011      	movs	r1, r2
 801b9b6:	0018      	movs	r0, r3
 801b9b8:	f002 f87d 	bl	801dab6 <USBD_LL_GetRxDataSize>
 801b9bc:	0001      	movs	r1, r0
 801b9be:	68fa      	ldr	r2, [r7, #12]
 801b9c0:	2383      	movs	r3, #131	@ 0x83
 801b9c2:	009b      	lsls	r3, r3, #2
 801b9c4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b9c6:	687a      	ldr	r2, [r7, #4]
 801b9c8:	23ae      	movs	r3, #174	@ 0xae
 801b9ca:	009b      	lsls	r3, r3, #2
 801b9cc:	58d3      	ldr	r3, [r2, r3]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d011      	beq.n	801b9f6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b9d2:	687a      	ldr	r2, [r7, #4]
 801b9d4:	23af      	movs	r3, #175	@ 0xaf
 801b9d6:	009b      	lsls	r3, r3, #2
 801b9d8:	58d3      	ldr	r3, [r2, r3]
 801b9da:	68da      	ldr	r2, [r3, #12]
 801b9dc:	68f9      	ldr	r1, [r7, #12]
 801b9de:	2381      	movs	r3, #129	@ 0x81
 801b9e0:	009b      	lsls	r3, r3, #2
 801b9e2:	58c8      	ldr	r0, [r1, r3]
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	2183      	movs	r1, #131	@ 0x83
 801b9e8:	0089      	lsls	r1, r1, #2
 801b9ea:	468c      	mov	ip, r1
 801b9ec:	4463      	add	r3, ip
 801b9ee:	0019      	movs	r1, r3
 801b9f0:	4790      	blx	r2

    return USBD_OK;
 801b9f2:	2300      	movs	r3, #0
 801b9f4:	e000      	b.n	801b9f8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b9f6:	2302      	movs	r3, #2
  }
}
 801b9f8:	0018      	movs	r0, r3
 801b9fa:	46bd      	mov	sp, r7
 801b9fc:	b004      	add	sp, #16
 801b9fe:	bd80      	pop	{r7, pc}

0801ba00 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801ba00:	b590      	push	{r4, r7, lr}
 801ba02:	b085      	sub	sp, #20
 801ba04:	af00      	add	r7, sp, #0
 801ba06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ba08:	687a      	ldr	r2, [r7, #4]
 801ba0a:	23ae      	movs	r3, #174	@ 0xae
 801ba0c:	009b      	lsls	r3, r3, #2
 801ba0e:	58d3      	ldr	r3, [r2, r3]
 801ba10:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801ba12:	687a      	ldr	r2, [r7, #4]
 801ba14:	23af      	movs	r3, #175	@ 0xaf
 801ba16:	009b      	lsls	r3, r3, #2
 801ba18:	58d3      	ldr	r3, [r2, r3]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d018      	beq.n	801ba50 <USBD_CDC_EP0_RxReady+0x50>
 801ba1e:	68fa      	ldr	r2, [r7, #12]
 801ba20:	2380      	movs	r3, #128	@ 0x80
 801ba22:	009b      	lsls	r3, r3, #2
 801ba24:	5cd3      	ldrb	r3, [r2, r3]
 801ba26:	2bff      	cmp	r3, #255	@ 0xff
 801ba28:	d012      	beq.n	801ba50 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ba2a:	687a      	ldr	r2, [r7, #4]
 801ba2c:	23af      	movs	r3, #175	@ 0xaf
 801ba2e:	009b      	lsls	r3, r3, #2
 801ba30:	58d3      	ldr	r3, [r2, r3]
 801ba32:	689b      	ldr	r3, [r3, #8]
 801ba34:	68f9      	ldr	r1, [r7, #12]
 801ba36:	2280      	movs	r2, #128	@ 0x80
 801ba38:	0092      	lsls	r2, r2, #2
 801ba3a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801ba3c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801ba3e:	68fa      	ldr	r2, [r7, #12]
 801ba40:	4c06      	ldr	r4, [pc, #24]	@ (801ba5c <USBD_CDC_EP0_RxReady+0x5c>)
 801ba42:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801ba44:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801ba46:	68fa      	ldr	r2, [r7, #12]
 801ba48:	2380      	movs	r3, #128	@ 0x80
 801ba4a:	009b      	lsls	r3, r3, #2
 801ba4c:	21ff      	movs	r1, #255	@ 0xff
 801ba4e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801ba50:	2300      	movs	r3, #0
}
 801ba52:	0018      	movs	r0, r3
 801ba54:	46bd      	mov	sp, r7
 801ba56:	b005      	add	sp, #20
 801ba58:	bd90      	pop	{r4, r7, pc}
 801ba5a:	46c0      	nop			@ (mov r8, r8)
 801ba5c:	00000201 	.word	0x00000201

0801ba60 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801ba60:	b580      	push	{r7, lr}
 801ba62:	b082      	sub	sp, #8
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	2243      	movs	r2, #67	@ 0x43
 801ba6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801ba6e:	4b02      	ldr	r3, [pc, #8]	@ (801ba78 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801ba70:	0018      	movs	r0, r3
 801ba72:	46bd      	mov	sp, r7
 801ba74:	b002      	add	sp, #8
 801ba76:	bd80      	pop	{r7, pc}
 801ba78:	20000170 	.word	0x20000170

0801ba7c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b082      	sub	sp, #8
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	2243      	movs	r2, #67	@ 0x43
 801ba88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801ba8a:	4b02      	ldr	r3, [pc, #8]	@ (801ba94 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801ba8c:	0018      	movs	r0, r3
 801ba8e:	46bd      	mov	sp, r7
 801ba90:	b002      	add	sp, #8
 801ba92:	bd80      	pop	{r7, pc}
 801ba94:	2000012c 	.word	0x2000012c

0801ba98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801ba98:	b580      	push	{r7, lr}
 801ba9a:	b082      	sub	sp, #8
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	2243      	movs	r2, #67	@ 0x43
 801baa4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801baa6:	4b02      	ldr	r3, [pc, #8]	@ (801bab0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801baa8:	0018      	movs	r0, r3
 801baaa:	46bd      	mov	sp, r7
 801baac:	b002      	add	sp, #8
 801baae:	bd80      	pop	{r7, pc}
 801bab0:	200001b4 	.word	0x200001b4

0801bab4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801bab4:	b580      	push	{r7, lr}
 801bab6:	b082      	sub	sp, #8
 801bab8:	af00      	add	r7, sp, #0
 801baba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	220a      	movs	r2, #10
 801bac0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801bac2:	4b02      	ldr	r3, [pc, #8]	@ (801bacc <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801bac4:	0018      	movs	r0, r3
 801bac6:	46bd      	mov	sp, r7
 801bac8:	b002      	add	sp, #8
 801baca:	bd80      	pop	{r7, pc}
 801bacc:	200000e8 	.word	0x200000e8

0801bad0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801bad0:	b580      	push	{r7, lr}
 801bad2:	b084      	sub	sp, #16
 801bad4:	af00      	add	r7, sp, #0
 801bad6:	6078      	str	r0, [r7, #4]
 801bad8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801bada:	200f      	movs	r0, #15
 801badc:	183b      	adds	r3, r7, r0
 801bade:	2202      	movs	r2, #2
 801bae0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801bae2:	683b      	ldr	r3, [r7, #0]
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d007      	beq.n	801baf8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801bae8:	687a      	ldr	r2, [r7, #4]
 801baea:	23af      	movs	r3, #175	@ 0xaf
 801baec:	009b      	lsls	r3, r3, #2
 801baee:	6839      	ldr	r1, [r7, #0]
 801baf0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801baf2:	183b      	adds	r3, r7, r0
 801baf4:	2200      	movs	r2, #0
 801baf6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801baf8:	230f      	movs	r3, #15
 801bafa:	18fb      	adds	r3, r7, r3
 801bafc:	781b      	ldrb	r3, [r3, #0]
}
 801bafe:	0018      	movs	r0, r3
 801bb00:	46bd      	mov	sp, r7
 801bb02:	b004      	add	sp, #16
 801bb04:	bd80      	pop	{r7, pc}

0801bb06 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801bb06:	b580      	push	{r7, lr}
 801bb08:	b086      	sub	sp, #24
 801bb0a:	af00      	add	r7, sp, #0
 801bb0c:	60f8      	str	r0, [r7, #12]
 801bb0e:	60b9      	str	r1, [r7, #8]
 801bb10:	1dbb      	adds	r3, r7, #6
 801bb12:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bb14:	68fa      	ldr	r2, [r7, #12]
 801bb16:	23ae      	movs	r3, #174	@ 0xae
 801bb18:	009b      	lsls	r3, r3, #2
 801bb1a:	58d3      	ldr	r3, [r2, r3]
 801bb1c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801bb1e:	697a      	ldr	r2, [r7, #20]
 801bb20:	2382      	movs	r3, #130	@ 0x82
 801bb22:	009b      	lsls	r3, r3, #2
 801bb24:	68b9      	ldr	r1, [r7, #8]
 801bb26:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801bb28:	1dbb      	adds	r3, r7, #6
 801bb2a:	8819      	ldrh	r1, [r3, #0]
 801bb2c:	697a      	ldr	r2, [r7, #20]
 801bb2e:	2384      	movs	r3, #132	@ 0x84
 801bb30:	009b      	lsls	r3, r3, #2
 801bb32:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801bb34:	2300      	movs	r3, #0
}
 801bb36:	0018      	movs	r0, r3
 801bb38:	46bd      	mov	sp, r7
 801bb3a:	b006      	add	sp, #24
 801bb3c:	bd80      	pop	{r7, pc}

0801bb3e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801bb3e:	b580      	push	{r7, lr}
 801bb40:	b084      	sub	sp, #16
 801bb42:	af00      	add	r7, sp, #0
 801bb44:	6078      	str	r0, [r7, #4]
 801bb46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bb48:	687a      	ldr	r2, [r7, #4]
 801bb4a:	23ae      	movs	r3, #174	@ 0xae
 801bb4c:	009b      	lsls	r3, r3, #2
 801bb4e:	58d3      	ldr	r3, [r2, r3]
 801bb50:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801bb52:	68fa      	ldr	r2, [r7, #12]
 801bb54:	2381      	movs	r3, #129	@ 0x81
 801bb56:	009b      	lsls	r3, r3, #2
 801bb58:	6839      	ldr	r1, [r7, #0]
 801bb5a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801bb5c:	2300      	movs	r3, #0
}
 801bb5e:	0018      	movs	r0, r3
 801bb60:	46bd      	mov	sp, r7
 801bb62:	b004      	add	sp, #16
 801bb64:	bd80      	pop	{r7, pc}

0801bb66 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801bb66:	b580      	push	{r7, lr}
 801bb68:	b084      	sub	sp, #16
 801bb6a:	af00      	add	r7, sp, #0
 801bb6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bb6e:	687a      	ldr	r2, [r7, #4]
 801bb70:	23ae      	movs	r3, #174	@ 0xae
 801bb72:	009b      	lsls	r3, r3, #2
 801bb74:	58d3      	ldr	r3, [r2, r3]
 801bb76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801bb78:	687a      	ldr	r2, [r7, #4]
 801bb7a:	23ae      	movs	r3, #174	@ 0xae
 801bb7c:	009b      	lsls	r3, r3, #2
 801bb7e:	58d3      	ldr	r3, [r2, r3]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d022      	beq.n	801bbca <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801bb84:	68fa      	ldr	r2, [r7, #12]
 801bb86:	2385      	movs	r3, #133	@ 0x85
 801bb88:	009b      	lsls	r3, r3, #2
 801bb8a:	58d3      	ldr	r3, [r2, r3]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d11a      	bne.n	801bbc6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801bb90:	68fa      	ldr	r2, [r7, #12]
 801bb92:	2385      	movs	r3, #133	@ 0x85
 801bb94:	009b      	lsls	r3, r3, #2
 801bb96:	2101      	movs	r1, #1
 801bb98:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801bb9a:	68fa      	ldr	r2, [r7, #12]
 801bb9c:	2384      	movs	r3, #132	@ 0x84
 801bb9e:	009b      	lsls	r3, r3, #2
 801bba0:	58d2      	ldr	r2, [r2, r3]
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801bba6:	68fa      	ldr	r2, [r7, #12]
 801bba8:	2382      	movs	r3, #130	@ 0x82
 801bbaa:	009b      	lsls	r3, r3, #2
 801bbac:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801bbae:	68fa      	ldr	r2, [r7, #12]
 801bbb0:	2384      	movs	r3, #132	@ 0x84
 801bbb2:	009b      	lsls	r3, r3, #2
 801bbb4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801bbb6:	b29b      	uxth	r3, r3
 801bbb8:	6878      	ldr	r0, [r7, #4]
 801bbba:	000a      	movs	r2, r1
 801bbbc:	2181      	movs	r1, #129	@ 0x81
 801bbbe:	f001 ff0c 	bl	801d9da <USBD_LL_Transmit>

      return USBD_OK;
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	e002      	b.n	801bbcc <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801bbc6:	2301      	movs	r3, #1
 801bbc8:	e000      	b.n	801bbcc <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801bbca:	2302      	movs	r3, #2
  }
}
 801bbcc:	0018      	movs	r0, r3
 801bbce:	46bd      	mov	sp, r7
 801bbd0:	b004      	add	sp, #16
 801bbd2:	bd80      	pop	{r7, pc}

0801bbd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	b084      	sub	sp, #16
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bbdc:	687a      	ldr	r2, [r7, #4]
 801bbde:	23ae      	movs	r3, #174	@ 0xae
 801bbe0:	009b      	lsls	r3, r3, #2
 801bbe2:	58d3      	ldr	r3, [r2, r3]
 801bbe4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801bbe6:	687a      	ldr	r2, [r7, #4]
 801bbe8:	23ae      	movs	r3, #174	@ 0xae
 801bbea:	009b      	lsls	r3, r3, #2
 801bbec:	58d3      	ldr	r3, [r2, r3]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d019      	beq.n	801bc26 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	7c1b      	ldrb	r3, [r3, #16]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d10a      	bne.n	801bc10 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801bbfa:	68fa      	ldr	r2, [r7, #12]
 801bbfc:	2381      	movs	r3, #129	@ 0x81
 801bbfe:	009b      	lsls	r3, r3, #2
 801bc00:	58d2      	ldr	r2, [r2, r3]
 801bc02:	2380      	movs	r3, #128	@ 0x80
 801bc04:	009b      	lsls	r3, r3, #2
 801bc06:	6878      	ldr	r0, [r7, #4]
 801bc08:	2101      	movs	r1, #1
 801bc0a:	f001 ff1d 	bl	801da48 <USBD_LL_PrepareReceive>
 801bc0e:	e008      	b.n	801bc22 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801bc10:	68fa      	ldr	r2, [r7, #12]
 801bc12:	2381      	movs	r3, #129	@ 0x81
 801bc14:	009b      	lsls	r3, r3, #2
 801bc16:	58d2      	ldr	r2, [r2, r3]
 801bc18:	6878      	ldr	r0, [r7, #4]
 801bc1a:	2340      	movs	r3, #64	@ 0x40
 801bc1c:	2101      	movs	r1, #1
 801bc1e:	f001 ff13 	bl	801da48 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801bc22:	2300      	movs	r3, #0
 801bc24:	e000      	b.n	801bc28 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801bc26:	2302      	movs	r3, #2
  }
}
 801bc28:	0018      	movs	r0, r3
 801bc2a:	46bd      	mov	sp, r7
 801bc2c:	b004      	add	sp, #16
 801bc2e:	bd80      	pop	{r7, pc}

0801bc30 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801bc30:	b580      	push	{r7, lr}
 801bc32:	b084      	sub	sp, #16
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	60f8      	str	r0, [r7, #12]
 801bc38:	60b9      	str	r1, [r7, #8]
 801bc3a:	1dfb      	adds	r3, r7, #7
 801bc3c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	d101      	bne.n	801bc48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801bc44:	2302      	movs	r3, #2
 801bc46:	e020      	b.n	801bc8a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801bc48:	68fa      	ldr	r2, [r7, #12]
 801bc4a:	23ad      	movs	r3, #173	@ 0xad
 801bc4c:	009b      	lsls	r3, r3, #2
 801bc4e:	58d3      	ldr	r3, [r2, r3]
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d004      	beq.n	801bc5e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801bc54:	68fa      	ldr	r2, [r7, #12]
 801bc56:	23ad      	movs	r3, #173	@ 0xad
 801bc58:	009b      	lsls	r3, r3, #2
 801bc5a:	2100      	movs	r1, #0
 801bc5c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801bc5e:	68bb      	ldr	r3, [r7, #8]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d004      	beq.n	801bc6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801bc64:	68fa      	ldr	r2, [r7, #12]
 801bc66:	23ac      	movs	r3, #172	@ 0xac
 801bc68:	009b      	lsls	r3, r3, #2
 801bc6a:	68b9      	ldr	r1, [r7, #8]
 801bc6c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801bc6e:	68fa      	ldr	r2, [r7, #12]
 801bc70:	23a7      	movs	r3, #167	@ 0xa7
 801bc72:	009b      	lsls	r3, r3, #2
 801bc74:	2101      	movs	r1, #1
 801bc76:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	1dfa      	adds	r2, r7, #7
 801bc7c:	7812      	ldrb	r2, [r2, #0]
 801bc7e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801bc80:	68fb      	ldr	r3, [r7, #12]
 801bc82:	0018      	movs	r0, r3
 801bc84:	f001 fd0c 	bl	801d6a0 <USBD_LL_Init>

  return USBD_OK;
 801bc88:	2300      	movs	r3, #0
}
 801bc8a:	0018      	movs	r0, r3
 801bc8c:	46bd      	mov	sp, r7
 801bc8e:	b004      	add	sp, #16
 801bc90:	bd80      	pop	{r7, pc}

0801bc92 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801bc92:	b580      	push	{r7, lr}
 801bc94:	b084      	sub	sp, #16
 801bc96:	af00      	add	r7, sp, #0
 801bc98:	6078      	str	r0, [r7, #4]
 801bc9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801bc9c:	200f      	movs	r0, #15
 801bc9e:	183b      	adds	r3, r7, r0
 801bca0:	2200      	movs	r2, #0
 801bca2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801bca4:	683b      	ldr	r3, [r7, #0]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d008      	beq.n	801bcbc <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801bcaa:	687a      	ldr	r2, [r7, #4]
 801bcac:	23ad      	movs	r3, #173	@ 0xad
 801bcae:	009b      	lsls	r3, r3, #2
 801bcb0:	6839      	ldr	r1, [r7, #0]
 801bcb2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801bcb4:	183b      	adds	r3, r7, r0
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	701a      	strb	r2, [r3, #0]
 801bcba:	e003      	b.n	801bcc4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801bcbc:	230f      	movs	r3, #15
 801bcbe:	18fb      	adds	r3, r7, r3
 801bcc0:	2202      	movs	r2, #2
 801bcc2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801bcc4:	230f      	movs	r3, #15
 801bcc6:	18fb      	adds	r3, r7, r3
 801bcc8:	781b      	ldrb	r3, [r3, #0]
}
 801bcca:	0018      	movs	r0, r3
 801bccc:	46bd      	mov	sp, r7
 801bcce:	b004      	add	sp, #16
 801bcd0:	bd80      	pop	{r7, pc}

0801bcd2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801bcd2:	b580      	push	{r7, lr}
 801bcd4:	b082      	sub	sp, #8
 801bcd6:	af00      	add	r7, sp, #0
 801bcd8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	0018      	movs	r0, r3
 801bcde:	f001 fd43 	bl	801d768 <USBD_LL_Start>

  return USBD_OK;
 801bce2:	2300      	movs	r3, #0
}
 801bce4:	0018      	movs	r0, r3
 801bce6:	46bd      	mov	sp, r7
 801bce8:	b002      	add	sp, #8
 801bcea:	bd80      	pop	{r7, pc}

0801bcec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801bcec:	b580      	push	{r7, lr}
 801bcee:	b082      	sub	sp, #8
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801bcf4:	2300      	movs	r3, #0
}
 801bcf6:	0018      	movs	r0, r3
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	b002      	add	sp, #8
 801bcfc:	bd80      	pop	{r7, pc}

0801bcfe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801bcfe:	b590      	push	{r4, r7, lr}
 801bd00:	b085      	sub	sp, #20
 801bd02:	af00      	add	r7, sp, #0
 801bd04:	6078      	str	r0, [r7, #4]
 801bd06:	000a      	movs	r2, r1
 801bd08:	1cfb      	adds	r3, r7, #3
 801bd0a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801bd0c:	240f      	movs	r4, #15
 801bd0e:	193b      	adds	r3, r7, r4
 801bd10:	2202      	movs	r2, #2
 801bd12:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801bd14:	687a      	ldr	r2, [r7, #4]
 801bd16:	23ad      	movs	r3, #173	@ 0xad
 801bd18:	009b      	lsls	r3, r3, #2
 801bd1a:	58d3      	ldr	r3, [r2, r3]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d00e      	beq.n	801bd3e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801bd20:	687a      	ldr	r2, [r7, #4]
 801bd22:	23ad      	movs	r3, #173	@ 0xad
 801bd24:	009b      	lsls	r3, r3, #2
 801bd26:	58d3      	ldr	r3, [r2, r3]
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	1cfa      	adds	r2, r7, #3
 801bd2c:	7811      	ldrb	r1, [r2, #0]
 801bd2e:	687a      	ldr	r2, [r7, #4]
 801bd30:	0010      	movs	r0, r2
 801bd32:	4798      	blx	r3
 801bd34:	1e03      	subs	r3, r0, #0
 801bd36:	d102      	bne.n	801bd3e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801bd38:	193b      	adds	r3, r7, r4
 801bd3a:	2200      	movs	r2, #0
 801bd3c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801bd3e:	230f      	movs	r3, #15
 801bd40:	18fb      	adds	r3, r7, r3
 801bd42:	781b      	ldrb	r3, [r3, #0]
}
 801bd44:	0018      	movs	r0, r3
 801bd46:	46bd      	mov	sp, r7
 801bd48:	b005      	add	sp, #20
 801bd4a:	bd90      	pop	{r4, r7, pc}

0801bd4c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b082      	sub	sp, #8
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	6078      	str	r0, [r7, #4]
 801bd54:	000a      	movs	r2, r1
 801bd56:	1cfb      	adds	r3, r7, #3
 801bd58:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801bd5a:	687a      	ldr	r2, [r7, #4]
 801bd5c:	23ad      	movs	r3, #173	@ 0xad
 801bd5e:	009b      	lsls	r3, r3, #2
 801bd60:	58d3      	ldr	r3, [r2, r3]
 801bd62:	685b      	ldr	r3, [r3, #4]
 801bd64:	1cfa      	adds	r2, r7, #3
 801bd66:	7811      	ldrb	r1, [r2, #0]
 801bd68:	687a      	ldr	r2, [r7, #4]
 801bd6a:	0010      	movs	r0, r2
 801bd6c:	4798      	blx	r3

  return USBD_OK;
 801bd6e:	2300      	movs	r3, #0
}
 801bd70:	0018      	movs	r0, r3
 801bd72:	46bd      	mov	sp, r7
 801bd74:	b002      	add	sp, #8
 801bd76:	bd80      	pop	{r7, pc}

0801bd78 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801bd78:	b580      	push	{r7, lr}
 801bd7a:	b082      	sub	sp, #8
 801bd7c:	af00      	add	r7, sp, #0
 801bd7e:	6078      	str	r0, [r7, #4]
 801bd80:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	22aa      	movs	r2, #170	@ 0xaa
 801bd86:	0092      	lsls	r2, r2, #2
 801bd88:	4694      	mov	ip, r2
 801bd8a:	4463      	add	r3, ip
 801bd8c:	683a      	ldr	r2, [r7, #0]
 801bd8e:	0011      	movs	r1, r2
 801bd90:	0018      	movs	r0, r3
 801bd92:	f001 f810 	bl	801cdb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801bd96:	687a      	ldr	r2, [r7, #4]
 801bd98:	23a5      	movs	r3, #165	@ 0xa5
 801bd9a:	009b      	lsls	r3, r3, #2
 801bd9c:	2101      	movs	r1, #1
 801bd9e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	4a23      	ldr	r2, [pc, #140]	@ (801be30 <USBD_LL_SetupStage+0xb8>)
 801bda4:	5a9b      	ldrh	r3, [r3, r2]
 801bda6:	0019      	movs	r1, r3
 801bda8:	687a      	ldr	r2, [r7, #4]
 801bdaa:	23a6      	movs	r3, #166	@ 0xa6
 801bdac:	009b      	lsls	r3, r3, #2
 801bdae:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801bdb0:	687a      	ldr	r2, [r7, #4]
 801bdb2:	23aa      	movs	r3, #170	@ 0xaa
 801bdb4:	009b      	lsls	r3, r3, #2
 801bdb6:	5cd3      	ldrb	r3, [r2, r3]
 801bdb8:	001a      	movs	r2, r3
 801bdba:	231f      	movs	r3, #31
 801bdbc:	4013      	ands	r3, r2
 801bdbe:	2b02      	cmp	r3, #2
 801bdc0:	d019      	beq.n	801bdf6 <USBD_LL_SetupStage+0x7e>
 801bdc2:	d822      	bhi.n	801be0a <USBD_LL_SetupStage+0x92>
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d002      	beq.n	801bdce <USBD_LL_SetupStage+0x56>
 801bdc8:	2b01      	cmp	r3, #1
 801bdca:	d00a      	beq.n	801bde2 <USBD_LL_SetupStage+0x6a>
 801bdcc:	e01d      	b.n	801be0a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	22aa      	movs	r2, #170	@ 0xaa
 801bdd2:	0092      	lsls	r2, r2, #2
 801bdd4:	189a      	adds	r2, r3, r2
 801bdd6:	687b      	ldr	r3, [r7, #4]
 801bdd8:	0011      	movs	r1, r2
 801bdda:	0018      	movs	r0, r3
 801bddc:	f000 fa10 	bl	801c200 <USBD_StdDevReq>
      break;
 801bde0:	e020      	b.n	801be24 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	22aa      	movs	r2, #170	@ 0xaa
 801bde6:	0092      	lsls	r2, r2, #2
 801bde8:	189a      	adds	r2, r3, r2
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	0011      	movs	r1, r2
 801bdee:	0018      	movs	r0, r3
 801bdf0:	f000 fa78 	bl	801c2e4 <USBD_StdItfReq>
      break;
 801bdf4:	e016      	b.n	801be24 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	22aa      	movs	r2, #170	@ 0xaa
 801bdfa:	0092      	lsls	r2, r2, #2
 801bdfc:	189a      	adds	r2, r3, r2
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	0011      	movs	r1, r2
 801be02:	0018      	movs	r0, r3
 801be04:	f000 fac5 	bl	801c392 <USBD_StdEPReq>
      break;
 801be08:	e00c      	b.n	801be24 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801be0a:	687a      	ldr	r2, [r7, #4]
 801be0c:	23aa      	movs	r3, #170	@ 0xaa
 801be0e:	009b      	lsls	r3, r3, #2
 801be10:	5cd3      	ldrb	r3, [r2, r3]
 801be12:	227f      	movs	r2, #127	@ 0x7f
 801be14:	4393      	bics	r3, r2
 801be16:	b2da      	uxtb	r2, r3
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	0011      	movs	r1, r2
 801be1c:	0018      	movs	r0, r3
 801be1e:	f001 fd2a 	bl	801d876 <USBD_LL_StallEP>
      break;
 801be22:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801be24:	2300      	movs	r3, #0
}
 801be26:	0018      	movs	r0, r3
 801be28:	46bd      	mov	sp, r7
 801be2a:	b002      	add	sp, #8
 801be2c:	bd80      	pop	{r7, pc}
 801be2e:	46c0      	nop			@ (mov r8, r8)
 801be30:	000002ae 	.word	0x000002ae

0801be34 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801be34:	b580      	push	{r7, lr}
 801be36:	b086      	sub	sp, #24
 801be38:	af00      	add	r7, sp, #0
 801be3a:	60f8      	str	r0, [r7, #12]
 801be3c:	607a      	str	r2, [r7, #4]
 801be3e:	200b      	movs	r0, #11
 801be40:	183b      	adds	r3, r7, r0
 801be42:	1c0a      	adds	r2, r1, #0
 801be44:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801be46:	183b      	adds	r3, r7, r0
 801be48:	781b      	ldrb	r3, [r3, #0]
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d154      	bne.n	801bef8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801be4e:	68fb      	ldr	r3, [r7, #12]
 801be50:	3355      	adds	r3, #85	@ 0x55
 801be52:	33ff      	adds	r3, #255	@ 0xff
 801be54:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801be56:	68fa      	ldr	r2, [r7, #12]
 801be58:	23a5      	movs	r3, #165	@ 0xa5
 801be5a:	009b      	lsls	r3, r3, #2
 801be5c:	58d3      	ldr	r3, [r2, r3]
 801be5e:	2b03      	cmp	r3, #3
 801be60:	d139      	bne.n	801bed6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801be62:	697b      	ldr	r3, [r7, #20]
 801be64:	68da      	ldr	r2, [r3, #12]
 801be66:	697b      	ldr	r3, [r7, #20]
 801be68:	691b      	ldr	r3, [r3, #16]
 801be6a:	429a      	cmp	r2, r3
 801be6c:	d919      	bls.n	801bea2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801be6e:	697b      	ldr	r3, [r7, #20]
 801be70:	68da      	ldr	r2, [r3, #12]
 801be72:	697b      	ldr	r3, [r7, #20]
 801be74:	691b      	ldr	r3, [r3, #16]
 801be76:	1ad2      	subs	r2, r2, r3
 801be78:	697b      	ldr	r3, [r7, #20]
 801be7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801be7c:	697b      	ldr	r3, [r7, #20]
 801be7e:	68da      	ldr	r2, [r3, #12]
 801be80:	697b      	ldr	r3, [r7, #20]
 801be82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801be84:	429a      	cmp	r2, r3
 801be86:	d203      	bcs.n	801be90 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801be88:	697b      	ldr	r3, [r7, #20]
 801be8a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801be8c:	b29b      	uxth	r3, r3
 801be8e:	e002      	b.n	801be96 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801be90:	697b      	ldr	r3, [r7, #20]
 801be92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801be94:	b29b      	uxth	r3, r3
 801be96:	6879      	ldr	r1, [r7, #4]
 801be98:	68f8      	ldr	r0, [r7, #12]
 801be9a:	001a      	movs	r2, r3
 801be9c:	f001 f898 	bl	801cfd0 <USBD_CtlContinueRx>
 801bea0:	e045      	b.n	801bf2e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801bea2:	68fa      	ldr	r2, [r7, #12]
 801bea4:	23ad      	movs	r3, #173	@ 0xad
 801bea6:	009b      	lsls	r3, r3, #2
 801bea8:	58d3      	ldr	r3, [r2, r3]
 801beaa:	691b      	ldr	r3, [r3, #16]
 801beac:	2b00      	cmp	r3, #0
 801beae:	d00d      	beq.n	801becc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801beb0:	68fa      	ldr	r2, [r7, #12]
 801beb2:	23a7      	movs	r3, #167	@ 0xa7
 801beb4:	009b      	lsls	r3, r3, #2
 801beb6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801beb8:	2b03      	cmp	r3, #3
 801beba:	d107      	bne.n	801becc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801bebc:	68fa      	ldr	r2, [r7, #12]
 801bebe:	23ad      	movs	r3, #173	@ 0xad
 801bec0:	009b      	lsls	r3, r3, #2
 801bec2:	58d3      	ldr	r3, [r2, r3]
 801bec4:	691b      	ldr	r3, [r3, #16]
 801bec6:	68fa      	ldr	r2, [r7, #12]
 801bec8:	0010      	movs	r0, r2
 801beca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	0018      	movs	r0, r3
 801bed0:	f001 f891 	bl	801cff6 <USBD_CtlSendStatus>
 801bed4:	e02b      	b.n	801bf2e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801bed6:	68fa      	ldr	r2, [r7, #12]
 801bed8:	23a5      	movs	r3, #165	@ 0xa5
 801beda:	009b      	lsls	r3, r3, #2
 801bedc:	58d3      	ldr	r3, [r2, r3]
 801bede:	2b05      	cmp	r3, #5
 801bee0:	d125      	bne.n	801bf2e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801bee2:	68fa      	ldr	r2, [r7, #12]
 801bee4:	23a5      	movs	r3, #165	@ 0xa5
 801bee6:	009b      	lsls	r3, r3, #2
 801bee8:	2100      	movs	r1, #0
 801beea:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	2100      	movs	r1, #0
 801bef0:	0018      	movs	r0, r3
 801bef2:	f001 fcc0 	bl	801d876 <USBD_LL_StallEP>
 801bef6:	e01a      	b.n	801bf2e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801bef8:	68fa      	ldr	r2, [r7, #12]
 801befa:	23ad      	movs	r3, #173	@ 0xad
 801befc:	009b      	lsls	r3, r3, #2
 801befe:	58d3      	ldr	r3, [r2, r3]
 801bf00:	699b      	ldr	r3, [r3, #24]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d011      	beq.n	801bf2a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bf06:	68fa      	ldr	r2, [r7, #12]
 801bf08:	23a7      	movs	r3, #167	@ 0xa7
 801bf0a:	009b      	lsls	r3, r3, #2
 801bf0c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801bf0e:	2b03      	cmp	r3, #3
 801bf10:	d10b      	bne.n	801bf2a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801bf12:	68fa      	ldr	r2, [r7, #12]
 801bf14:	23ad      	movs	r3, #173	@ 0xad
 801bf16:	009b      	lsls	r3, r3, #2
 801bf18:	58d3      	ldr	r3, [r2, r3]
 801bf1a:	699b      	ldr	r3, [r3, #24]
 801bf1c:	220b      	movs	r2, #11
 801bf1e:	18ba      	adds	r2, r7, r2
 801bf20:	7811      	ldrb	r1, [r2, #0]
 801bf22:	68fa      	ldr	r2, [r7, #12]
 801bf24:	0010      	movs	r0, r2
 801bf26:	4798      	blx	r3
 801bf28:	e001      	b.n	801bf2e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bf2a:	2302      	movs	r3, #2
 801bf2c:	e000      	b.n	801bf30 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801bf2e:	2300      	movs	r3, #0
}
 801bf30:	0018      	movs	r0, r3
 801bf32:	46bd      	mov	sp, r7
 801bf34:	b006      	add	sp, #24
 801bf36:	bd80      	pop	{r7, pc}

0801bf38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801bf38:	b580      	push	{r7, lr}
 801bf3a:	b086      	sub	sp, #24
 801bf3c:	af00      	add	r7, sp, #0
 801bf3e:	60f8      	str	r0, [r7, #12]
 801bf40:	607a      	str	r2, [r7, #4]
 801bf42:	200b      	movs	r0, #11
 801bf44:	183b      	adds	r3, r7, r0
 801bf46:	1c0a      	adds	r2, r1, #0
 801bf48:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801bf4a:	183b      	adds	r3, r7, r0
 801bf4c:	781b      	ldrb	r3, [r3, #0]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d000      	beq.n	801bf54 <USBD_LL_DataInStage+0x1c>
 801bf52:	e08e      	b.n	801c072 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	3314      	adds	r3, #20
 801bf58:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801bf5a:	68fa      	ldr	r2, [r7, #12]
 801bf5c:	23a5      	movs	r3, #165	@ 0xa5
 801bf5e:	009b      	lsls	r3, r3, #2
 801bf60:	58d3      	ldr	r3, [r2, r3]
 801bf62:	2b02      	cmp	r3, #2
 801bf64:	d164      	bne.n	801c030 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801bf66:	697b      	ldr	r3, [r7, #20]
 801bf68:	68da      	ldr	r2, [r3, #12]
 801bf6a:	697b      	ldr	r3, [r7, #20]
 801bf6c:	691b      	ldr	r3, [r3, #16]
 801bf6e:	429a      	cmp	r2, r3
 801bf70:	d915      	bls.n	801bf9e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801bf72:	697b      	ldr	r3, [r7, #20]
 801bf74:	68da      	ldr	r2, [r3, #12]
 801bf76:	697b      	ldr	r3, [r7, #20]
 801bf78:	691b      	ldr	r3, [r3, #16]
 801bf7a:	1ad2      	subs	r2, r2, r3
 801bf7c:	697b      	ldr	r3, [r7, #20]
 801bf7e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801bf80:	697b      	ldr	r3, [r7, #20]
 801bf82:	68db      	ldr	r3, [r3, #12]
 801bf84:	b29a      	uxth	r2, r3
 801bf86:	6879      	ldr	r1, [r7, #4]
 801bf88:	68fb      	ldr	r3, [r7, #12]
 801bf8a:	0018      	movs	r0, r3
 801bf8c:	f000 ffe9 	bl	801cf62 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bf90:	68f8      	ldr	r0, [r7, #12]
 801bf92:	2300      	movs	r3, #0
 801bf94:	2200      	movs	r2, #0
 801bf96:	2100      	movs	r1, #0
 801bf98:	f001 fd56 	bl	801da48 <USBD_LL_PrepareReceive>
 801bf9c:	e059      	b.n	801c052 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bf9e:	697b      	ldr	r3, [r7, #20]
 801bfa0:	689a      	ldr	r2, [r3, #8]
 801bfa2:	697b      	ldr	r3, [r7, #20]
 801bfa4:	691b      	ldr	r3, [r3, #16]
 801bfa6:	0019      	movs	r1, r3
 801bfa8:	0010      	movs	r0, r2
 801bfaa:	f7e4 f981 	bl	80002b0 <__aeabi_uidivmod>
 801bfae:	1e0b      	subs	r3, r1, #0
 801bfb0:	d11f      	bne.n	801bff2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801bfb2:	697b      	ldr	r3, [r7, #20]
 801bfb4:	689a      	ldr	r2, [r3, #8]
 801bfb6:	697b      	ldr	r3, [r7, #20]
 801bfb8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bfba:	429a      	cmp	r2, r3
 801bfbc:	d319      	bcc.n	801bff2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801bfbe:	697b      	ldr	r3, [r7, #20]
 801bfc0:	689a      	ldr	r2, [r3, #8]
 801bfc2:	68f9      	ldr	r1, [r7, #12]
 801bfc4:	23a6      	movs	r3, #166	@ 0xa6
 801bfc6:	009b      	lsls	r3, r3, #2
 801bfc8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801bfca:	429a      	cmp	r2, r3
 801bfcc:	d211      	bcs.n	801bff2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	2200      	movs	r2, #0
 801bfd2:	2100      	movs	r1, #0
 801bfd4:	0018      	movs	r0, r3
 801bfd6:	f000 ffc4 	bl	801cf62 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bfda:	68fa      	ldr	r2, [r7, #12]
 801bfdc:	23a6      	movs	r3, #166	@ 0xa6
 801bfde:	009b      	lsls	r3, r3, #2
 801bfe0:	2100      	movs	r1, #0
 801bfe2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bfe4:	68f8      	ldr	r0, [r7, #12]
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	2200      	movs	r2, #0
 801bfea:	2100      	movs	r1, #0
 801bfec:	f001 fd2c 	bl	801da48 <USBD_LL_PrepareReceive>
 801bff0:	e02f      	b.n	801c052 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bff2:	68fa      	ldr	r2, [r7, #12]
 801bff4:	23ad      	movs	r3, #173	@ 0xad
 801bff6:	009b      	lsls	r3, r3, #2
 801bff8:	58d3      	ldr	r3, [r2, r3]
 801bffa:	68db      	ldr	r3, [r3, #12]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	d00d      	beq.n	801c01c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c000:	68fa      	ldr	r2, [r7, #12]
 801c002:	23a7      	movs	r3, #167	@ 0xa7
 801c004:	009b      	lsls	r3, r3, #2
 801c006:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c008:	2b03      	cmp	r3, #3
 801c00a:	d107      	bne.n	801c01c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801c00c:	68fa      	ldr	r2, [r7, #12]
 801c00e:	23ad      	movs	r3, #173	@ 0xad
 801c010:	009b      	lsls	r3, r3, #2
 801c012:	58d3      	ldr	r3, [r2, r3]
 801c014:	68db      	ldr	r3, [r3, #12]
 801c016:	68fa      	ldr	r2, [r7, #12]
 801c018:	0010      	movs	r0, r2
 801c01a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801c01c:	68fb      	ldr	r3, [r7, #12]
 801c01e:	2180      	movs	r1, #128	@ 0x80
 801c020:	0018      	movs	r0, r3
 801c022:	f001 fc28 	bl	801d876 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801c026:	68fb      	ldr	r3, [r7, #12]
 801c028:	0018      	movs	r0, r3
 801c02a:	f000 fff8 	bl	801d01e <USBD_CtlReceiveStatus>
 801c02e:	e010      	b.n	801c052 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c030:	68fa      	ldr	r2, [r7, #12]
 801c032:	23a5      	movs	r3, #165	@ 0xa5
 801c034:	009b      	lsls	r3, r3, #2
 801c036:	58d3      	ldr	r3, [r2, r3]
 801c038:	2b04      	cmp	r3, #4
 801c03a:	d005      	beq.n	801c048 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801c03c:	68fa      	ldr	r2, [r7, #12]
 801c03e:	23a5      	movs	r3, #165	@ 0xa5
 801c040:	009b      	lsls	r3, r3, #2
 801c042:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c044:	2b00      	cmp	r3, #0
 801c046:	d104      	bne.n	801c052 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	2180      	movs	r1, #128	@ 0x80
 801c04c:	0018      	movs	r0, r3
 801c04e:	f001 fc12 	bl	801d876 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801c052:	68fa      	ldr	r2, [r7, #12]
 801c054:	23a8      	movs	r3, #168	@ 0xa8
 801c056:	009b      	lsls	r3, r3, #2
 801c058:	5cd3      	ldrb	r3, [r2, r3]
 801c05a:	2b01      	cmp	r3, #1
 801c05c:	d124      	bne.n	801c0a8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	0018      	movs	r0, r3
 801c062:	f7ff fe43 	bl	801bcec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801c066:	68fa      	ldr	r2, [r7, #12]
 801c068:	23a8      	movs	r3, #168	@ 0xa8
 801c06a:	009b      	lsls	r3, r3, #2
 801c06c:	2100      	movs	r1, #0
 801c06e:	54d1      	strb	r1, [r2, r3]
 801c070:	e01a      	b.n	801c0a8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801c072:	68fa      	ldr	r2, [r7, #12]
 801c074:	23ad      	movs	r3, #173	@ 0xad
 801c076:	009b      	lsls	r3, r3, #2
 801c078:	58d3      	ldr	r3, [r2, r3]
 801c07a:	695b      	ldr	r3, [r3, #20]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d011      	beq.n	801c0a4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c080:	68fa      	ldr	r2, [r7, #12]
 801c082:	23a7      	movs	r3, #167	@ 0xa7
 801c084:	009b      	lsls	r3, r3, #2
 801c086:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801c088:	2b03      	cmp	r3, #3
 801c08a:	d10b      	bne.n	801c0a4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801c08c:	68fa      	ldr	r2, [r7, #12]
 801c08e:	23ad      	movs	r3, #173	@ 0xad
 801c090:	009b      	lsls	r3, r3, #2
 801c092:	58d3      	ldr	r3, [r2, r3]
 801c094:	695b      	ldr	r3, [r3, #20]
 801c096:	220b      	movs	r2, #11
 801c098:	18ba      	adds	r2, r7, r2
 801c09a:	7811      	ldrb	r1, [r2, #0]
 801c09c:	68fa      	ldr	r2, [r7, #12]
 801c09e:	0010      	movs	r0, r2
 801c0a0:	4798      	blx	r3
 801c0a2:	e001      	b.n	801c0a8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c0a4:	2302      	movs	r3, #2
 801c0a6:	e000      	b.n	801c0aa <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801c0a8:	2300      	movs	r3, #0
}
 801c0aa:	0018      	movs	r0, r3
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	b006      	add	sp, #24
 801c0b0:	bd80      	pop	{r7, pc}

0801c0b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801c0b2:	b580      	push	{r7, lr}
 801c0b4:	b082      	sub	sp, #8
 801c0b6:	af00      	add	r7, sp, #0
 801c0b8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c0ba:	6878      	ldr	r0, [r7, #4]
 801c0bc:	2340      	movs	r3, #64	@ 0x40
 801c0be:	2200      	movs	r2, #0
 801c0c0:	2100      	movs	r1, #0
 801c0c2:	f001 fb76 	bl	801d7b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801c0c6:	687a      	ldr	r2, [r7, #4]
 801c0c8:	23ac      	movs	r3, #172	@ 0xac
 801c0ca:	005b      	lsls	r3, r3, #1
 801c0cc:	2101      	movs	r1, #1
 801c0ce:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c0d0:	687a      	ldr	r2, [r7, #4]
 801c0d2:	23b2      	movs	r3, #178	@ 0xb2
 801c0d4:	005b      	lsls	r3, r3, #1
 801c0d6:	2140      	movs	r1, #64	@ 0x40
 801c0d8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c0da:	6878      	ldr	r0, [r7, #4]
 801c0dc:	2340      	movs	r3, #64	@ 0x40
 801c0de:	2200      	movs	r2, #0
 801c0e0:	2180      	movs	r1, #128	@ 0x80
 801c0e2:	f001 fb66 	bl	801d7b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	2201      	movs	r2, #1
 801c0ea:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	2240      	movs	r2, #64	@ 0x40
 801c0f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c0f2:	687a      	ldr	r2, [r7, #4]
 801c0f4:	23a7      	movs	r3, #167	@ 0xa7
 801c0f6:	009b      	lsls	r3, r3, #2
 801c0f8:	2101      	movs	r1, #1
 801c0fa:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801c0fc:	687a      	ldr	r2, [r7, #4]
 801c0fe:	23a5      	movs	r3, #165	@ 0xa5
 801c100:	009b      	lsls	r3, r3, #2
 801c102:	2100      	movs	r1, #0
 801c104:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	2200      	movs	r2, #0
 801c10a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801c10c:	687a      	ldr	r2, [r7, #4]
 801c10e:	23a9      	movs	r3, #169	@ 0xa9
 801c110:	009b      	lsls	r3, r3, #2
 801c112:	2100      	movs	r1, #0
 801c114:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801c116:	687a      	ldr	r2, [r7, #4]
 801c118:	23ae      	movs	r3, #174	@ 0xae
 801c11a:	009b      	lsls	r3, r3, #2
 801c11c:	58d3      	ldr	r3, [r2, r3]
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d00a      	beq.n	801c138 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801c122:	687a      	ldr	r2, [r7, #4]
 801c124:	23ad      	movs	r3, #173	@ 0xad
 801c126:	009b      	lsls	r3, r3, #2
 801c128:	58d3      	ldr	r3, [r2, r3]
 801c12a:	685a      	ldr	r2, [r3, #4]
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	685b      	ldr	r3, [r3, #4]
 801c130:	b2d9      	uxtb	r1, r3
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	0018      	movs	r0, r3
 801c136:	4790      	blx	r2
  }

  return USBD_OK;
 801c138:	2300      	movs	r3, #0
}
 801c13a:	0018      	movs	r0, r3
 801c13c:	46bd      	mov	sp, r7
 801c13e:	b002      	add	sp, #8
 801c140:	bd80      	pop	{r7, pc}

0801c142 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801c142:	b580      	push	{r7, lr}
 801c144:	b082      	sub	sp, #8
 801c146:	af00      	add	r7, sp, #0
 801c148:	6078      	str	r0, [r7, #4]
 801c14a:	000a      	movs	r2, r1
 801c14c:	1cfb      	adds	r3, r7, #3
 801c14e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	1cfa      	adds	r2, r7, #3
 801c154:	7812      	ldrb	r2, [r2, #0]
 801c156:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801c158:	2300      	movs	r3, #0
}
 801c15a:	0018      	movs	r0, r3
 801c15c:	46bd      	mov	sp, r7
 801c15e:	b002      	add	sp, #8
 801c160:	bd80      	pop	{r7, pc}
	...

0801c164 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801c164:	b580      	push	{r7, lr}
 801c166:	b082      	sub	sp, #8
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801c16c:	687a      	ldr	r2, [r7, #4]
 801c16e:	23a7      	movs	r3, #167	@ 0xa7
 801c170:	009b      	lsls	r3, r3, #2
 801c172:	5cd1      	ldrb	r1, [r2, r3]
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	4a06      	ldr	r2, [pc, #24]	@ (801c190 <USBD_LL_Suspend+0x2c>)
 801c178:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801c17a:	687a      	ldr	r2, [r7, #4]
 801c17c:	23a7      	movs	r3, #167	@ 0xa7
 801c17e:	009b      	lsls	r3, r3, #2
 801c180:	2104      	movs	r1, #4
 801c182:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801c184:	2300      	movs	r3, #0
}
 801c186:	0018      	movs	r0, r3
 801c188:	46bd      	mov	sp, r7
 801c18a:	b002      	add	sp, #8
 801c18c:	bd80      	pop	{r7, pc}
 801c18e:	46c0      	nop			@ (mov r8, r8)
 801c190:	0000029d 	.word	0x0000029d

0801c194 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801c194:	b580      	push	{r7, lr}
 801c196:	b082      	sub	sp, #8
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801c19c:	687a      	ldr	r2, [r7, #4]
 801c19e:	23a7      	movs	r3, #167	@ 0xa7
 801c1a0:	009b      	lsls	r3, r3, #2
 801c1a2:	5cd3      	ldrb	r3, [r2, r3]
 801c1a4:	2b04      	cmp	r3, #4
 801c1a6:	d106      	bne.n	801c1b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	4a05      	ldr	r2, [pc, #20]	@ (801c1c0 <USBD_LL_Resume+0x2c>)
 801c1ac:	5c99      	ldrb	r1, [r3, r2]
 801c1ae:	687a      	ldr	r2, [r7, #4]
 801c1b0:	23a7      	movs	r3, #167	@ 0xa7
 801c1b2:	009b      	lsls	r3, r3, #2
 801c1b4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801c1b6:	2300      	movs	r3, #0
}
 801c1b8:	0018      	movs	r0, r3
 801c1ba:	46bd      	mov	sp, r7
 801c1bc:	b002      	add	sp, #8
 801c1be:	bd80      	pop	{r7, pc}
 801c1c0:	0000029d 	.word	0x0000029d

0801c1c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b082      	sub	sp, #8
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c1cc:	687a      	ldr	r2, [r7, #4]
 801c1ce:	23a7      	movs	r3, #167	@ 0xa7
 801c1d0:	009b      	lsls	r3, r3, #2
 801c1d2:	5cd3      	ldrb	r3, [r2, r3]
 801c1d4:	2b03      	cmp	r3, #3
 801c1d6:	d10e      	bne.n	801c1f6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801c1d8:	687a      	ldr	r2, [r7, #4]
 801c1da:	23ad      	movs	r3, #173	@ 0xad
 801c1dc:	009b      	lsls	r3, r3, #2
 801c1de:	58d3      	ldr	r3, [r2, r3]
 801c1e0:	69db      	ldr	r3, [r3, #28]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d007      	beq.n	801c1f6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801c1e6:	687a      	ldr	r2, [r7, #4]
 801c1e8:	23ad      	movs	r3, #173	@ 0xad
 801c1ea:	009b      	lsls	r3, r3, #2
 801c1ec:	58d3      	ldr	r3, [r2, r3]
 801c1ee:	69db      	ldr	r3, [r3, #28]
 801c1f0:	687a      	ldr	r2, [r7, #4]
 801c1f2:	0010      	movs	r0, r2
 801c1f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c1f6:	2300      	movs	r3, #0
}
 801c1f8:	0018      	movs	r0, r3
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	b002      	add	sp, #8
 801c1fe:	bd80      	pop	{r7, pc}

0801c200 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801c200:	b580      	push	{r7, lr}
 801c202:	b084      	sub	sp, #16
 801c204:	af00      	add	r7, sp, #0
 801c206:	6078      	str	r0, [r7, #4]
 801c208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c20a:	230f      	movs	r3, #15
 801c20c:	18fb      	adds	r3, r7, r3
 801c20e:	2200      	movs	r2, #0
 801c210:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c212:	683b      	ldr	r3, [r7, #0]
 801c214:	781b      	ldrb	r3, [r3, #0]
 801c216:	001a      	movs	r2, r3
 801c218:	2360      	movs	r3, #96	@ 0x60
 801c21a:	4013      	ands	r3, r2
 801c21c:	2b40      	cmp	r3, #64	@ 0x40
 801c21e:	d004      	beq.n	801c22a <USBD_StdDevReq+0x2a>
 801c220:	d84f      	bhi.n	801c2c2 <USBD_StdDevReq+0xc2>
 801c222:	2b00      	cmp	r3, #0
 801c224:	d00b      	beq.n	801c23e <USBD_StdDevReq+0x3e>
 801c226:	2b20      	cmp	r3, #32
 801c228:	d14b      	bne.n	801c2c2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	23ad      	movs	r3, #173	@ 0xad
 801c22e:	009b      	lsls	r3, r3, #2
 801c230:	58d3      	ldr	r3, [r2, r3]
 801c232:	689b      	ldr	r3, [r3, #8]
 801c234:	6839      	ldr	r1, [r7, #0]
 801c236:	687a      	ldr	r2, [r7, #4]
 801c238:	0010      	movs	r0, r2
 801c23a:	4798      	blx	r3
      break;
 801c23c:	e048      	b.n	801c2d0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c23e:	683b      	ldr	r3, [r7, #0]
 801c240:	785b      	ldrb	r3, [r3, #1]
 801c242:	2b09      	cmp	r3, #9
 801c244:	d835      	bhi.n	801c2b2 <USBD_StdDevReq+0xb2>
 801c246:	009a      	lsls	r2, r3, #2
 801c248:	4b25      	ldr	r3, [pc, #148]	@ (801c2e0 <USBD_StdDevReq+0xe0>)
 801c24a:	18d3      	adds	r3, r2, r3
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801c250:	683a      	ldr	r2, [r7, #0]
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	0011      	movs	r1, r2
 801c256:	0018      	movs	r0, r3
 801c258:	f000 fa52 	bl	801c700 <USBD_GetDescriptor>
          break;
 801c25c:	e030      	b.n	801c2c0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801c25e:	683a      	ldr	r2, [r7, #0]
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	0011      	movs	r1, r2
 801c264:	0018      	movs	r0, r3
 801c266:	f000 fbfd 	bl	801ca64 <USBD_SetAddress>
          break;
 801c26a:	e029      	b.n	801c2c0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801c26c:	683a      	ldr	r2, [r7, #0]
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	0011      	movs	r1, r2
 801c272:	0018      	movs	r0, r3
 801c274:	f000 fc4a 	bl	801cb0c <USBD_SetConfig>
          break;
 801c278:	e022      	b.n	801c2c0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801c27a:	683a      	ldr	r2, [r7, #0]
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	0011      	movs	r1, r2
 801c280:	0018      	movs	r0, r3
 801c282:	f000 fce7 	bl	801cc54 <USBD_GetConfig>
          break;
 801c286:	e01b      	b.n	801c2c0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801c288:	683a      	ldr	r2, [r7, #0]
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	0011      	movs	r1, r2
 801c28e:	0018      	movs	r0, r3
 801c290:	f000 fd1b 	bl	801ccca <USBD_GetStatus>
          break;
 801c294:	e014      	b.n	801c2c0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801c296:	683a      	ldr	r2, [r7, #0]
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	0011      	movs	r1, r2
 801c29c:	0018      	movs	r0, r3
 801c29e:	f000 fd4e 	bl	801cd3e <USBD_SetFeature>
          break;
 801c2a2:	e00d      	b.n	801c2c0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801c2a4:	683a      	ldr	r2, [r7, #0]
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	0011      	movs	r1, r2
 801c2aa:	0018      	movs	r0, r3
 801c2ac:	f000 fd5d 	bl	801cd6a <USBD_ClrFeature>
          break;
 801c2b0:	e006      	b.n	801c2c0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801c2b2:	683a      	ldr	r2, [r7, #0]
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	0011      	movs	r1, r2
 801c2b8:	0018      	movs	r0, r3
 801c2ba:	f000 fdb4 	bl	801ce26 <USBD_CtlError>
          break;
 801c2be:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c2c0:	e006      	b.n	801c2d0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801c2c2:	683a      	ldr	r2, [r7, #0]
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	0011      	movs	r1, r2
 801c2c8:	0018      	movs	r0, r3
 801c2ca:	f000 fdac 	bl	801ce26 <USBD_CtlError>
      break;
 801c2ce:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c2d0:	230f      	movs	r3, #15
 801c2d2:	18fb      	adds	r3, r7, r3
 801c2d4:	781b      	ldrb	r3, [r3, #0]
}
 801c2d6:	0018      	movs	r0, r3
 801c2d8:	46bd      	mov	sp, r7
 801c2da:	b004      	add	sp, #16
 801c2dc:	bd80      	pop	{r7, pc}
 801c2de:	46c0      	nop			@ (mov r8, r8)
 801c2e0:	08025d90 	.word	0x08025d90

0801c2e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801c2e4:	b5b0      	push	{r4, r5, r7, lr}
 801c2e6:	b084      	sub	sp, #16
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]
 801c2ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c2ee:	230f      	movs	r3, #15
 801c2f0:	18fb      	adds	r3, r7, r3
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c2f6:	683b      	ldr	r3, [r7, #0]
 801c2f8:	781b      	ldrb	r3, [r3, #0]
 801c2fa:	001a      	movs	r2, r3
 801c2fc:	2360      	movs	r3, #96	@ 0x60
 801c2fe:	4013      	ands	r3, r2
 801c300:	2b40      	cmp	r3, #64	@ 0x40
 801c302:	d004      	beq.n	801c30e <USBD_StdItfReq+0x2a>
 801c304:	d839      	bhi.n	801c37a <USBD_StdItfReq+0x96>
 801c306:	2b00      	cmp	r3, #0
 801c308:	d001      	beq.n	801c30e <USBD_StdItfReq+0x2a>
 801c30a:	2b20      	cmp	r3, #32
 801c30c:	d135      	bne.n	801c37a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801c30e:	687a      	ldr	r2, [r7, #4]
 801c310:	23a7      	movs	r3, #167	@ 0xa7
 801c312:	009b      	lsls	r3, r3, #2
 801c314:	5cd3      	ldrb	r3, [r2, r3]
 801c316:	3b01      	subs	r3, #1
 801c318:	2b02      	cmp	r3, #2
 801c31a:	d825      	bhi.n	801c368 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801c31c:	683b      	ldr	r3, [r7, #0]
 801c31e:	889b      	ldrh	r3, [r3, #4]
 801c320:	b2db      	uxtb	r3, r3
 801c322:	2b01      	cmp	r3, #1
 801c324:	d819      	bhi.n	801c35a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c326:	687a      	ldr	r2, [r7, #4]
 801c328:	23ad      	movs	r3, #173	@ 0xad
 801c32a:	009b      	lsls	r3, r3, #2
 801c32c:	58d3      	ldr	r3, [r2, r3]
 801c32e:	689b      	ldr	r3, [r3, #8]
 801c330:	250f      	movs	r5, #15
 801c332:	197c      	adds	r4, r7, r5
 801c334:	6839      	ldr	r1, [r7, #0]
 801c336:	687a      	ldr	r2, [r7, #4]
 801c338:	0010      	movs	r0, r2
 801c33a:	4798      	blx	r3
 801c33c:	0003      	movs	r3, r0
 801c33e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801c340:	683b      	ldr	r3, [r7, #0]
 801c342:	88db      	ldrh	r3, [r3, #6]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d116      	bne.n	801c376 <USBD_StdItfReq+0x92>
 801c348:	197b      	adds	r3, r7, r5
 801c34a:	781b      	ldrb	r3, [r3, #0]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d112      	bne.n	801c376 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	0018      	movs	r0, r3
 801c354:	f000 fe4f 	bl	801cff6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801c358:	e00d      	b.n	801c376 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801c35a:	683a      	ldr	r2, [r7, #0]
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	0011      	movs	r1, r2
 801c360:	0018      	movs	r0, r3
 801c362:	f000 fd60 	bl	801ce26 <USBD_CtlError>
          break;
 801c366:	e006      	b.n	801c376 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801c368:	683a      	ldr	r2, [r7, #0]
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	0011      	movs	r1, r2
 801c36e:	0018      	movs	r0, r3
 801c370:	f000 fd59 	bl	801ce26 <USBD_CtlError>
          break;
 801c374:	e000      	b.n	801c378 <USBD_StdItfReq+0x94>
          break;
 801c376:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c378:	e006      	b.n	801c388 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801c37a:	683a      	ldr	r2, [r7, #0]
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	0011      	movs	r1, r2
 801c380:	0018      	movs	r0, r3
 801c382:	f000 fd50 	bl	801ce26 <USBD_CtlError>
      break;
 801c386:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801c388:	2300      	movs	r3, #0
}
 801c38a:	0018      	movs	r0, r3
 801c38c:	46bd      	mov	sp, r7
 801c38e:	b004      	add	sp, #16
 801c390:	bdb0      	pop	{r4, r5, r7, pc}

0801c392 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801c392:	b5b0      	push	{r4, r5, r7, lr}
 801c394:	b084      	sub	sp, #16
 801c396:	af00      	add	r7, sp, #0
 801c398:	6078      	str	r0, [r7, #4]
 801c39a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801c39c:	230f      	movs	r3, #15
 801c39e:	18fb      	adds	r3, r7, r3
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801c3a4:	683b      	ldr	r3, [r7, #0]
 801c3a6:	889a      	ldrh	r2, [r3, #4]
 801c3a8:	230e      	movs	r3, #14
 801c3aa:	18fb      	adds	r3, r7, r3
 801c3ac:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c3ae:	683b      	ldr	r3, [r7, #0]
 801c3b0:	781b      	ldrb	r3, [r3, #0]
 801c3b2:	001a      	movs	r2, r3
 801c3b4:	2360      	movs	r3, #96	@ 0x60
 801c3b6:	4013      	ands	r3, r2
 801c3b8:	2b40      	cmp	r3, #64	@ 0x40
 801c3ba:	d006      	beq.n	801c3ca <USBD_StdEPReq+0x38>
 801c3bc:	d900      	bls.n	801c3c0 <USBD_StdEPReq+0x2e>
 801c3be:	e190      	b.n	801c6e2 <USBD_StdEPReq+0x350>
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d00c      	beq.n	801c3de <USBD_StdEPReq+0x4c>
 801c3c4:	2b20      	cmp	r3, #32
 801c3c6:	d000      	beq.n	801c3ca <USBD_StdEPReq+0x38>
 801c3c8:	e18b      	b.n	801c6e2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c3ca:	687a      	ldr	r2, [r7, #4]
 801c3cc:	23ad      	movs	r3, #173	@ 0xad
 801c3ce:	009b      	lsls	r3, r3, #2
 801c3d0:	58d3      	ldr	r3, [r2, r3]
 801c3d2:	689b      	ldr	r3, [r3, #8]
 801c3d4:	6839      	ldr	r1, [r7, #0]
 801c3d6:	687a      	ldr	r2, [r7, #4]
 801c3d8:	0010      	movs	r0, r2
 801c3da:	4798      	blx	r3
      break;
 801c3dc:	e188      	b.n	801c6f0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801c3de:	683b      	ldr	r3, [r7, #0]
 801c3e0:	781b      	ldrb	r3, [r3, #0]
 801c3e2:	001a      	movs	r2, r3
 801c3e4:	2360      	movs	r3, #96	@ 0x60
 801c3e6:	4013      	ands	r3, r2
 801c3e8:	2b20      	cmp	r3, #32
 801c3ea:	d10f      	bne.n	801c40c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801c3ec:	687a      	ldr	r2, [r7, #4]
 801c3ee:	23ad      	movs	r3, #173	@ 0xad
 801c3f0:	009b      	lsls	r3, r3, #2
 801c3f2:	58d3      	ldr	r3, [r2, r3]
 801c3f4:	689b      	ldr	r3, [r3, #8]
 801c3f6:	250f      	movs	r5, #15
 801c3f8:	197c      	adds	r4, r7, r5
 801c3fa:	6839      	ldr	r1, [r7, #0]
 801c3fc:	687a      	ldr	r2, [r7, #4]
 801c3fe:	0010      	movs	r0, r2
 801c400:	4798      	blx	r3
 801c402:	0003      	movs	r3, r0
 801c404:	7023      	strb	r3, [r4, #0]

        return ret;
 801c406:	197b      	adds	r3, r7, r5
 801c408:	781b      	ldrb	r3, [r3, #0]
 801c40a:	e174      	b.n	801c6f6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801c40c:	683b      	ldr	r3, [r7, #0]
 801c40e:	785b      	ldrb	r3, [r3, #1]
 801c410:	2b03      	cmp	r3, #3
 801c412:	d007      	beq.n	801c424 <USBD_StdEPReq+0x92>
 801c414:	dd00      	ble.n	801c418 <USBD_StdEPReq+0x86>
 801c416:	e15c      	b.n	801c6d2 <USBD_StdEPReq+0x340>
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d100      	bne.n	801c41e <USBD_StdEPReq+0x8c>
 801c41c:	e092      	b.n	801c544 <USBD_StdEPReq+0x1b2>
 801c41e:	2b01      	cmp	r3, #1
 801c420:	d04b      	beq.n	801c4ba <USBD_StdEPReq+0x128>
 801c422:	e156      	b.n	801c6d2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801c424:	687a      	ldr	r2, [r7, #4]
 801c426:	23a7      	movs	r3, #167	@ 0xa7
 801c428:	009b      	lsls	r3, r3, #2
 801c42a:	5cd3      	ldrb	r3, [r2, r3]
 801c42c:	2b02      	cmp	r3, #2
 801c42e:	d002      	beq.n	801c436 <USBD_StdEPReq+0xa4>
 801c430:	2b03      	cmp	r3, #3
 801c432:	d01d      	beq.n	801c470 <USBD_StdEPReq+0xde>
 801c434:	e039      	b.n	801c4aa <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c436:	220e      	movs	r2, #14
 801c438:	18bb      	adds	r3, r7, r2
 801c43a:	781b      	ldrb	r3, [r3, #0]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d010      	beq.n	801c462 <USBD_StdEPReq+0xd0>
 801c440:	18bb      	adds	r3, r7, r2
 801c442:	781b      	ldrb	r3, [r3, #0]
 801c444:	2b80      	cmp	r3, #128	@ 0x80
 801c446:	d00c      	beq.n	801c462 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c448:	18bb      	adds	r3, r7, r2
 801c44a:	781a      	ldrb	r2, [r3, #0]
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	0011      	movs	r1, r2
 801c450:	0018      	movs	r0, r3
 801c452:	f001 fa10 	bl	801d876 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	2180      	movs	r1, #128	@ 0x80
 801c45a:	0018      	movs	r0, r3
 801c45c:	f001 fa0b 	bl	801d876 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c460:	e02a      	b.n	801c4b8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801c462:	683a      	ldr	r2, [r7, #0]
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	0011      	movs	r1, r2
 801c468:	0018      	movs	r0, r3
 801c46a:	f000 fcdc 	bl	801ce26 <USBD_CtlError>
              break;
 801c46e:	e023      	b.n	801c4b8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c470:	683b      	ldr	r3, [r7, #0]
 801c472:	885b      	ldrh	r3, [r3, #2]
 801c474:	2b00      	cmp	r3, #0
 801c476:	d113      	bne.n	801c4a0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801c478:	220e      	movs	r2, #14
 801c47a:	18bb      	adds	r3, r7, r2
 801c47c:	781b      	ldrb	r3, [r3, #0]
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d00e      	beq.n	801c4a0 <USBD_StdEPReq+0x10e>
 801c482:	18bb      	adds	r3, r7, r2
 801c484:	781b      	ldrb	r3, [r3, #0]
 801c486:	2b80      	cmp	r3, #128	@ 0x80
 801c488:	d00a      	beq.n	801c4a0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801c48a:	683b      	ldr	r3, [r7, #0]
 801c48c:	88db      	ldrh	r3, [r3, #6]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d106      	bne.n	801c4a0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801c492:	18bb      	adds	r3, r7, r2
 801c494:	781a      	ldrb	r2, [r3, #0]
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	0011      	movs	r1, r2
 801c49a:	0018      	movs	r0, r3
 801c49c:	f001 f9eb 	bl	801d876 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	0018      	movs	r0, r3
 801c4a4:	f000 fda7 	bl	801cff6 <USBD_CtlSendStatus>

              break;
 801c4a8:	e006      	b.n	801c4b8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801c4aa:	683a      	ldr	r2, [r7, #0]
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	0011      	movs	r1, r2
 801c4b0:	0018      	movs	r0, r3
 801c4b2:	f000 fcb8 	bl	801ce26 <USBD_CtlError>
              break;
 801c4b6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c4b8:	e112      	b.n	801c6e0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801c4ba:	687a      	ldr	r2, [r7, #4]
 801c4bc:	23a7      	movs	r3, #167	@ 0xa7
 801c4be:	009b      	lsls	r3, r3, #2
 801c4c0:	5cd3      	ldrb	r3, [r2, r3]
 801c4c2:	2b02      	cmp	r3, #2
 801c4c4:	d002      	beq.n	801c4cc <USBD_StdEPReq+0x13a>
 801c4c6:	2b03      	cmp	r3, #3
 801c4c8:	d01d      	beq.n	801c506 <USBD_StdEPReq+0x174>
 801c4ca:	e032      	b.n	801c532 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c4cc:	220e      	movs	r2, #14
 801c4ce:	18bb      	adds	r3, r7, r2
 801c4d0:	781b      	ldrb	r3, [r3, #0]
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d010      	beq.n	801c4f8 <USBD_StdEPReq+0x166>
 801c4d6:	18bb      	adds	r3, r7, r2
 801c4d8:	781b      	ldrb	r3, [r3, #0]
 801c4da:	2b80      	cmp	r3, #128	@ 0x80
 801c4dc:	d00c      	beq.n	801c4f8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c4de:	18bb      	adds	r3, r7, r2
 801c4e0:	781a      	ldrb	r2, [r3, #0]
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	0011      	movs	r1, r2
 801c4e6:	0018      	movs	r0, r3
 801c4e8:	f001 f9c5 	bl	801d876 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	2180      	movs	r1, #128	@ 0x80
 801c4f0:	0018      	movs	r0, r3
 801c4f2:	f001 f9c0 	bl	801d876 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c4f6:	e024      	b.n	801c542 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801c4f8:	683a      	ldr	r2, [r7, #0]
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	0011      	movs	r1, r2
 801c4fe:	0018      	movs	r0, r3
 801c500:	f000 fc91 	bl	801ce26 <USBD_CtlError>
              break;
 801c504:	e01d      	b.n	801c542 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c506:	683b      	ldr	r3, [r7, #0]
 801c508:	885b      	ldrh	r3, [r3, #2]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d118      	bne.n	801c540 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c50e:	210e      	movs	r1, #14
 801c510:	187b      	adds	r3, r7, r1
 801c512:	781b      	ldrb	r3, [r3, #0]
 801c514:	227f      	movs	r2, #127	@ 0x7f
 801c516:	4013      	ands	r3, r2
 801c518:	d006      	beq.n	801c528 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c51a:	187b      	adds	r3, r7, r1
 801c51c:	781a      	ldrb	r2, [r3, #0]
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	0011      	movs	r1, r2
 801c522:	0018      	movs	r0, r3
 801c524:	f001 f9d2 	bl	801d8cc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	0018      	movs	r0, r3
 801c52c:	f000 fd63 	bl	801cff6 <USBD_CtlSendStatus>
              }
              break;
 801c530:	e006      	b.n	801c540 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c532:	683a      	ldr	r2, [r7, #0]
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	0011      	movs	r1, r2
 801c538:	0018      	movs	r0, r3
 801c53a:	f000 fc74 	bl	801ce26 <USBD_CtlError>
              break;
 801c53e:	e000      	b.n	801c542 <USBD_StdEPReq+0x1b0>
              break;
 801c540:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c542:	e0cd      	b.n	801c6e0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c544:	687a      	ldr	r2, [r7, #4]
 801c546:	23a7      	movs	r3, #167	@ 0xa7
 801c548:	009b      	lsls	r3, r3, #2
 801c54a:	5cd3      	ldrb	r3, [r2, r3]
 801c54c:	2b02      	cmp	r3, #2
 801c54e:	d002      	beq.n	801c556 <USBD_StdEPReq+0x1c4>
 801c550:	2b03      	cmp	r3, #3
 801c552:	d03c      	beq.n	801c5ce <USBD_StdEPReq+0x23c>
 801c554:	e0b5      	b.n	801c6c2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c556:	220e      	movs	r2, #14
 801c558:	18bb      	adds	r3, r7, r2
 801c55a:	781b      	ldrb	r3, [r3, #0]
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d00a      	beq.n	801c576 <USBD_StdEPReq+0x1e4>
 801c560:	18bb      	adds	r3, r7, r2
 801c562:	781b      	ldrb	r3, [r3, #0]
 801c564:	2b80      	cmp	r3, #128	@ 0x80
 801c566:	d006      	beq.n	801c576 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c568:	683a      	ldr	r2, [r7, #0]
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	0011      	movs	r1, r2
 801c56e:	0018      	movs	r0, r3
 801c570:	f000 fc59 	bl	801ce26 <USBD_CtlError>
                break;
 801c574:	e0ac      	b.n	801c6d0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c576:	220e      	movs	r2, #14
 801c578:	18bb      	adds	r3, r7, r2
 801c57a:	781b      	ldrb	r3, [r3, #0]
 801c57c:	b25b      	sxtb	r3, r3
 801c57e:	2b00      	cmp	r3, #0
 801c580:	da0c      	bge.n	801c59c <USBD_StdEPReq+0x20a>
 801c582:	18bb      	adds	r3, r7, r2
 801c584:	781b      	ldrb	r3, [r3, #0]
 801c586:	227f      	movs	r2, #127	@ 0x7f
 801c588:	401a      	ands	r2, r3
 801c58a:	0013      	movs	r3, r2
 801c58c:	009b      	lsls	r3, r3, #2
 801c58e:	189b      	adds	r3, r3, r2
 801c590:	009b      	lsls	r3, r3, #2
 801c592:	3310      	adds	r3, #16
 801c594:	687a      	ldr	r2, [r7, #4]
 801c596:	18d3      	adds	r3, r2, r3
 801c598:	3304      	adds	r3, #4
 801c59a:	e00d      	b.n	801c5b8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c59c:	230e      	movs	r3, #14
 801c59e:	18fb      	adds	r3, r7, r3
 801c5a0:	781b      	ldrb	r3, [r3, #0]
 801c5a2:	227f      	movs	r2, #127	@ 0x7f
 801c5a4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c5a6:	0013      	movs	r3, r2
 801c5a8:	009b      	lsls	r3, r3, #2
 801c5aa:	189b      	adds	r3, r3, r2
 801c5ac:	009b      	lsls	r3, r3, #2
 801c5ae:	3351      	adds	r3, #81	@ 0x51
 801c5b0:	33ff      	adds	r3, #255	@ 0xff
 801c5b2:	687a      	ldr	r2, [r7, #4]
 801c5b4:	18d3      	adds	r3, r2, r3
 801c5b6:	3304      	adds	r3, #4
 801c5b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c5ba:	68bb      	ldr	r3, [r7, #8]
 801c5bc:	2200      	movs	r2, #0
 801c5be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c5c0:	68b9      	ldr	r1, [r7, #8]
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	2202      	movs	r2, #2
 801c5c6:	0018      	movs	r0, r3
 801c5c8:	f000 fcab 	bl	801cf22 <USBD_CtlSendData>
              break;
 801c5cc:	e080      	b.n	801c6d0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c5ce:	220e      	movs	r2, #14
 801c5d0:	18bb      	adds	r3, r7, r2
 801c5d2:	781b      	ldrb	r3, [r3, #0]
 801c5d4:	b25b      	sxtb	r3, r3
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	da14      	bge.n	801c604 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c5da:	18bb      	adds	r3, r7, r2
 801c5dc:	781b      	ldrb	r3, [r3, #0]
 801c5de:	220f      	movs	r2, #15
 801c5e0:	401a      	ands	r2, r3
 801c5e2:	6879      	ldr	r1, [r7, #4]
 801c5e4:	0013      	movs	r3, r2
 801c5e6:	009b      	lsls	r3, r3, #2
 801c5e8:	189b      	adds	r3, r3, r2
 801c5ea:	009b      	lsls	r3, r3, #2
 801c5ec:	18cb      	adds	r3, r1, r3
 801c5ee:	3318      	adds	r3, #24
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d11e      	bne.n	801c634 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c5f6:	683a      	ldr	r2, [r7, #0]
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	0011      	movs	r1, r2
 801c5fc:	0018      	movs	r0, r3
 801c5fe:	f000 fc12 	bl	801ce26 <USBD_CtlError>
                  break;
 801c602:	e065      	b.n	801c6d0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c604:	230e      	movs	r3, #14
 801c606:	18fb      	adds	r3, r7, r3
 801c608:	781b      	ldrb	r3, [r3, #0]
 801c60a:	220f      	movs	r2, #15
 801c60c:	401a      	ands	r2, r3
 801c60e:	6878      	ldr	r0, [r7, #4]
 801c610:	23ac      	movs	r3, #172	@ 0xac
 801c612:	0059      	lsls	r1, r3, #1
 801c614:	0013      	movs	r3, r2
 801c616:	009b      	lsls	r3, r3, #2
 801c618:	189b      	adds	r3, r3, r2
 801c61a:	009b      	lsls	r3, r3, #2
 801c61c:	18c3      	adds	r3, r0, r3
 801c61e:	185b      	adds	r3, r3, r1
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	2b00      	cmp	r3, #0
 801c624:	d106      	bne.n	801c634 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c626:	683a      	ldr	r2, [r7, #0]
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	0011      	movs	r1, r2
 801c62c:	0018      	movs	r0, r3
 801c62e:	f000 fbfa 	bl	801ce26 <USBD_CtlError>
                  break;
 801c632:	e04d      	b.n	801c6d0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c634:	220e      	movs	r2, #14
 801c636:	18bb      	adds	r3, r7, r2
 801c638:	781b      	ldrb	r3, [r3, #0]
 801c63a:	b25b      	sxtb	r3, r3
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	da0c      	bge.n	801c65a <USBD_StdEPReq+0x2c8>
 801c640:	18bb      	adds	r3, r7, r2
 801c642:	781b      	ldrb	r3, [r3, #0]
 801c644:	227f      	movs	r2, #127	@ 0x7f
 801c646:	401a      	ands	r2, r3
 801c648:	0013      	movs	r3, r2
 801c64a:	009b      	lsls	r3, r3, #2
 801c64c:	189b      	adds	r3, r3, r2
 801c64e:	009b      	lsls	r3, r3, #2
 801c650:	3310      	adds	r3, #16
 801c652:	687a      	ldr	r2, [r7, #4]
 801c654:	18d3      	adds	r3, r2, r3
 801c656:	3304      	adds	r3, #4
 801c658:	e00d      	b.n	801c676 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c65a:	230e      	movs	r3, #14
 801c65c:	18fb      	adds	r3, r7, r3
 801c65e:	781b      	ldrb	r3, [r3, #0]
 801c660:	227f      	movs	r2, #127	@ 0x7f
 801c662:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c664:	0013      	movs	r3, r2
 801c666:	009b      	lsls	r3, r3, #2
 801c668:	189b      	adds	r3, r3, r2
 801c66a:	009b      	lsls	r3, r3, #2
 801c66c:	3351      	adds	r3, #81	@ 0x51
 801c66e:	33ff      	adds	r3, #255	@ 0xff
 801c670:	687a      	ldr	r2, [r7, #4]
 801c672:	18d3      	adds	r3, r2, r3
 801c674:	3304      	adds	r3, #4
 801c676:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c678:	220e      	movs	r2, #14
 801c67a:	18bb      	adds	r3, r7, r2
 801c67c:	781b      	ldrb	r3, [r3, #0]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d003      	beq.n	801c68a <USBD_StdEPReq+0x2f8>
 801c682:	18bb      	adds	r3, r7, r2
 801c684:	781b      	ldrb	r3, [r3, #0]
 801c686:	2b80      	cmp	r3, #128	@ 0x80
 801c688:	d103      	bne.n	801c692 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c68a:	68bb      	ldr	r3, [r7, #8]
 801c68c:	2200      	movs	r2, #0
 801c68e:	601a      	str	r2, [r3, #0]
 801c690:	e010      	b.n	801c6b4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c692:	230e      	movs	r3, #14
 801c694:	18fb      	adds	r3, r7, r3
 801c696:	781a      	ldrb	r2, [r3, #0]
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	0011      	movs	r1, r2
 801c69c:	0018      	movs	r0, r3
 801c69e:	f001 f940 	bl	801d922 <USBD_LL_IsStallEP>
 801c6a2:	1e03      	subs	r3, r0, #0
 801c6a4:	d003      	beq.n	801c6ae <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c6a6:	68bb      	ldr	r3, [r7, #8]
 801c6a8:	2201      	movs	r2, #1
 801c6aa:	601a      	str	r2, [r3, #0]
 801c6ac:	e002      	b.n	801c6b4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c6ae:	68bb      	ldr	r3, [r7, #8]
 801c6b0:	2200      	movs	r2, #0
 801c6b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c6b4:	68b9      	ldr	r1, [r7, #8]
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	2202      	movs	r2, #2
 801c6ba:	0018      	movs	r0, r3
 801c6bc:	f000 fc31 	bl	801cf22 <USBD_CtlSendData>
              break;
 801c6c0:	e006      	b.n	801c6d0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c6c2:	683a      	ldr	r2, [r7, #0]
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	0011      	movs	r1, r2
 801c6c8:	0018      	movs	r0, r3
 801c6ca:	f000 fbac 	bl	801ce26 <USBD_CtlError>
              break;
 801c6ce:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c6d0:	e006      	b.n	801c6e0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c6d2:	683a      	ldr	r2, [r7, #0]
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	0011      	movs	r1, r2
 801c6d8:	0018      	movs	r0, r3
 801c6da:	f000 fba4 	bl	801ce26 <USBD_CtlError>
          break;
 801c6de:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c6e0:	e006      	b.n	801c6f0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c6e2:	683a      	ldr	r2, [r7, #0]
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	0011      	movs	r1, r2
 801c6e8:	0018      	movs	r0, r3
 801c6ea:	f000 fb9c 	bl	801ce26 <USBD_CtlError>
      break;
 801c6ee:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c6f0:	230f      	movs	r3, #15
 801c6f2:	18fb      	adds	r3, r7, r3
 801c6f4:	781b      	ldrb	r3, [r3, #0]
}
 801c6f6:	0018      	movs	r0, r3
 801c6f8:	46bd      	mov	sp, r7
 801c6fa:	b004      	add	sp, #16
 801c6fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c700 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c700:	b580      	push	{r7, lr}
 801c702:	b084      	sub	sp, #16
 801c704:	af00      	add	r7, sp, #0
 801c706:	6078      	str	r0, [r7, #4]
 801c708:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c70a:	2308      	movs	r3, #8
 801c70c:	18fb      	adds	r3, r7, r3
 801c70e:	2200      	movs	r2, #0
 801c710:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c712:	2300      	movs	r3, #0
 801c714:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c716:	230b      	movs	r3, #11
 801c718:	18fb      	adds	r3, r7, r3
 801c71a:	2200      	movs	r2, #0
 801c71c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c71e:	683b      	ldr	r3, [r7, #0]
 801c720:	885b      	ldrh	r3, [r3, #2]
 801c722:	0a1b      	lsrs	r3, r3, #8
 801c724:	b29b      	uxth	r3, r3
 801c726:	2b07      	cmp	r3, #7
 801c728:	d900      	bls.n	801c72c <USBD_GetDescriptor+0x2c>
 801c72a:	e159      	b.n	801c9e0 <USBD_GetDescriptor+0x2e0>
 801c72c:	009a      	lsls	r2, r3, #2
 801c72e:	4bcb      	ldr	r3, [pc, #812]	@ (801ca5c <USBD_GetDescriptor+0x35c>)
 801c730:	18d3      	adds	r3, r2, r3
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c736:	687a      	ldr	r2, [r7, #4]
 801c738:	23ac      	movs	r3, #172	@ 0xac
 801c73a:	009b      	lsls	r3, r3, #2
 801c73c:	58d3      	ldr	r3, [r2, r3]
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	687a      	ldr	r2, [r7, #4]
 801c742:	7c12      	ldrb	r2, [r2, #16]
 801c744:	2108      	movs	r1, #8
 801c746:	1879      	adds	r1, r7, r1
 801c748:	0010      	movs	r0, r2
 801c74a:	4798      	blx	r3
 801c74c:	0003      	movs	r3, r0
 801c74e:	60fb      	str	r3, [r7, #12]
      break;
 801c750:	e153      	b.n	801c9fa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	7c1b      	ldrb	r3, [r3, #16]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d10f      	bne.n	801c77a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c75a:	687a      	ldr	r2, [r7, #4]
 801c75c:	23ad      	movs	r3, #173	@ 0xad
 801c75e:	009b      	lsls	r3, r3, #2
 801c760:	58d3      	ldr	r3, [r2, r3]
 801c762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c764:	2208      	movs	r2, #8
 801c766:	18ba      	adds	r2, r7, r2
 801c768:	0010      	movs	r0, r2
 801c76a:	4798      	blx	r3
 801c76c:	0003      	movs	r3, r0
 801c76e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	3301      	adds	r3, #1
 801c774:	2202      	movs	r2, #2
 801c776:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c778:	e13f      	b.n	801c9fa <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c77a:	687a      	ldr	r2, [r7, #4]
 801c77c:	23ad      	movs	r3, #173	@ 0xad
 801c77e:	009b      	lsls	r3, r3, #2
 801c780:	58d3      	ldr	r3, [r2, r3]
 801c782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c784:	2208      	movs	r2, #8
 801c786:	18ba      	adds	r2, r7, r2
 801c788:	0010      	movs	r0, r2
 801c78a:	4798      	blx	r3
 801c78c:	0003      	movs	r3, r0
 801c78e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	3301      	adds	r3, #1
 801c794:	2202      	movs	r2, #2
 801c796:	701a      	strb	r2, [r3, #0]
      break;
 801c798:	e12f      	b.n	801c9fa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	885b      	ldrh	r3, [r3, #2]
 801c79e:	b2db      	uxtb	r3, r3
 801c7a0:	2b05      	cmp	r3, #5
 801c7a2:	d900      	bls.n	801c7a6 <USBD_GetDescriptor+0xa6>
 801c7a4:	e0d0      	b.n	801c948 <USBD_GetDescriptor+0x248>
 801c7a6:	009a      	lsls	r2, r3, #2
 801c7a8:	4bad      	ldr	r3, [pc, #692]	@ (801ca60 <USBD_GetDescriptor+0x360>)
 801c7aa:	18d3      	adds	r3, r2, r3
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c7b0:	687a      	ldr	r2, [r7, #4]
 801c7b2:	23ac      	movs	r3, #172	@ 0xac
 801c7b4:	009b      	lsls	r3, r3, #2
 801c7b6:	58d3      	ldr	r3, [r2, r3]
 801c7b8:	685b      	ldr	r3, [r3, #4]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d00d      	beq.n	801c7da <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c7be:	687a      	ldr	r2, [r7, #4]
 801c7c0:	23ac      	movs	r3, #172	@ 0xac
 801c7c2:	009b      	lsls	r3, r3, #2
 801c7c4:	58d3      	ldr	r3, [r2, r3]
 801c7c6:	685b      	ldr	r3, [r3, #4]
 801c7c8:	687a      	ldr	r2, [r7, #4]
 801c7ca:	7c12      	ldrb	r2, [r2, #16]
 801c7cc:	2108      	movs	r1, #8
 801c7ce:	1879      	adds	r1, r7, r1
 801c7d0:	0010      	movs	r0, r2
 801c7d2:	4798      	blx	r3
 801c7d4:	0003      	movs	r3, r0
 801c7d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c7d8:	e0c3      	b.n	801c962 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c7da:	683a      	ldr	r2, [r7, #0]
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	0011      	movs	r1, r2
 801c7e0:	0018      	movs	r0, r3
 801c7e2:	f000 fb20 	bl	801ce26 <USBD_CtlError>
            err++;
 801c7e6:	210b      	movs	r1, #11
 801c7e8:	187b      	adds	r3, r7, r1
 801c7ea:	781a      	ldrb	r2, [r3, #0]
 801c7ec:	187b      	adds	r3, r7, r1
 801c7ee:	3201      	adds	r2, #1
 801c7f0:	701a      	strb	r2, [r3, #0]
          break;
 801c7f2:	e0b6      	b.n	801c962 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c7f4:	687a      	ldr	r2, [r7, #4]
 801c7f6:	23ac      	movs	r3, #172	@ 0xac
 801c7f8:	009b      	lsls	r3, r3, #2
 801c7fa:	58d3      	ldr	r3, [r2, r3]
 801c7fc:	689b      	ldr	r3, [r3, #8]
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d00d      	beq.n	801c81e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c802:	687a      	ldr	r2, [r7, #4]
 801c804:	23ac      	movs	r3, #172	@ 0xac
 801c806:	009b      	lsls	r3, r3, #2
 801c808:	58d3      	ldr	r3, [r2, r3]
 801c80a:	689b      	ldr	r3, [r3, #8]
 801c80c:	687a      	ldr	r2, [r7, #4]
 801c80e:	7c12      	ldrb	r2, [r2, #16]
 801c810:	2108      	movs	r1, #8
 801c812:	1879      	adds	r1, r7, r1
 801c814:	0010      	movs	r0, r2
 801c816:	4798      	blx	r3
 801c818:	0003      	movs	r3, r0
 801c81a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c81c:	e0a1      	b.n	801c962 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c81e:	683a      	ldr	r2, [r7, #0]
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	0011      	movs	r1, r2
 801c824:	0018      	movs	r0, r3
 801c826:	f000 fafe 	bl	801ce26 <USBD_CtlError>
            err++;
 801c82a:	210b      	movs	r1, #11
 801c82c:	187b      	adds	r3, r7, r1
 801c82e:	781a      	ldrb	r2, [r3, #0]
 801c830:	187b      	adds	r3, r7, r1
 801c832:	3201      	adds	r2, #1
 801c834:	701a      	strb	r2, [r3, #0]
          break;
 801c836:	e094      	b.n	801c962 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c838:	687a      	ldr	r2, [r7, #4]
 801c83a:	23ac      	movs	r3, #172	@ 0xac
 801c83c:	009b      	lsls	r3, r3, #2
 801c83e:	58d3      	ldr	r3, [r2, r3]
 801c840:	68db      	ldr	r3, [r3, #12]
 801c842:	2b00      	cmp	r3, #0
 801c844:	d00d      	beq.n	801c862 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c846:	687a      	ldr	r2, [r7, #4]
 801c848:	23ac      	movs	r3, #172	@ 0xac
 801c84a:	009b      	lsls	r3, r3, #2
 801c84c:	58d3      	ldr	r3, [r2, r3]
 801c84e:	68db      	ldr	r3, [r3, #12]
 801c850:	687a      	ldr	r2, [r7, #4]
 801c852:	7c12      	ldrb	r2, [r2, #16]
 801c854:	2108      	movs	r1, #8
 801c856:	1879      	adds	r1, r7, r1
 801c858:	0010      	movs	r0, r2
 801c85a:	4798      	blx	r3
 801c85c:	0003      	movs	r3, r0
 801c85e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c860:	e07f      	b.n	801c962 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c862:	683a      	ldr	r2, [r7, #0]
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	0011      	movs	r1, r2
 801c868:	0018      	movs	r0, r3
 801c86a:	f000 fadc 	bl	801ce26 <USBD_CtlError>
            err++;
 801c86e:	210b      	movs	r1, #11
 801c870:	187b      	adds	r3, r7, r1
 801c872:	781a      	ldrb	r2, [r3, #0]
 801c874:	187b      	adds	r3, r7, r1
 801c876:	3201      	adds	r2, #1
 801c878:	701a      	strb	r2, [r3, #0]
          break;
 801c87a:	e072      	b.n	801c962 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c87c:	687a      	ldr	r2, [r7, #4]
 801c87e:	23ac      	movs	r3, #172	@ 0xac
 801c880:	009b      	lsls	r3, r3, #2
 801c882:	58d3      	ldr	r3, [r2, r3]
 801c884:	691b      	ldr	r3, [r3, #16]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d00d      	beq.n	801c8a6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c88a:	687a      	ldr	r2, [r7, #4]
 801c88c:	23ac      	movs	r3, #172	@ 0xac
 801c88e:	009b      	lsls	r3, r3, #2
 801c890:	58d3      	ldr	r3, [r2, r3]
 801c892:	691b      	ldr	r3, [r3, #16]
 801c894:	687a      	ldr	r2, [r7, #4]
 801c896:	7c12      	ldrb	r2, [r2, #16]
 801c898:	2108      	movs	r1, #8
 801c89a:	1879      	adds	r1, r7, r1
 801c89c:	0010      	movs	r0, r2
 801c89e:	4798      	blx	r3
 801c8a0:	0003      	movs	r3, r0
 801c8a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c8a4:	e05d      	b.n	801c962 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c8a6:	683a      	ldr	r2, [r7, #0]
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	0011      	movs	r1, r2
 801c8ac:	0018      	movs	r0, r3
 801c8ae:	f000 faba 	bl	801ce26 <USBD_CtlError>
            err++;
 801c8b2:	210b      	movs	r1, #11
 801c8b4:	187b      	adds	r3, r7, r1
 801c8b6:	781a      	ldrb	r2, [r3, #0]
 801c8b8:	187b      	adds	r3, r7, r1
 801c8ba:	3201      	adds	r2, #1
 801c8bc:	701a      	strb	r2, [r3, #0]
          break;
 801c8be:	e050      	b.n	801c962 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c8c0:	687a      	ldr	r2, [r7, #4]
 801c8c2:	23ac      	movs	r3, #172	@ 0xac
 801c8c4:	009b      	lsls	r3, r3, #2
 801c8c6:	58d3      	ldr	r3, [r2, r3]
 801c8c8:	695b      	ldr	r3, [r3, #20]
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d00d      	beq.n	801c8ea <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c8ce:	687a      	ldr	r2, [r7, #4]
 801c8d0:	23ac      	movs	r3, #172	@ 0xac
 801c8d2:	009b      	lsls	r3, r3, #2
 801c8d4:	58d3      	ldr	r3, [r2, r3]
 801c8d6:	695b      	ldr	r3, [r3, #20]
 801c8d8:	687a      	ldr	r2, [r7, #4]
 801c8da:	7c12      	ldrb	r2, [r2, #16]
 801c8dc:	2108      	movs	r1, #8
 801c8de:	1879      	adds	r1, r7, r1
 801c8e0:	0010      	movs	r0, r2
 801c8e2:	4798      	blx	r3
 801c8e4:	0003      	movs	r3, r0
 801c8e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c8e8:	e03b      	b.n	801c962 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c8ea:	683a      	ldr	r2, [r7, #0]
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	0011      	movs	r1, r2
 801c8f0:	0018      	movs	r0, r3
 801c8f2:	f000 fa98 	bl	801ce26 <USBD_CtlError>
            err++;
 801c8f6:	210b      	movs	r1, #11
 801c8f8:	187b      	adds	r3, r7, r1
 801c8fa:	781a      	ldrb	r2, [r3, #0]
 801c8fc:	187b      	adds	r3, r7, r1
 801c8fe:	3201      	adds	r2, #1
 801c900:	701a      	strb	r2, [r3, #0]
          break;
 801c902:	e02e      	b.n	801c962 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c904:	687a      	ldr	r2, [r7, #4]
 801c906:	23ac      	movs	r3, #172	@ 0xac
 801c908:	009b      	lsls	r3, r3, #2
 801c90a:	58d3      	ldr	r3, [r2, r3]
 801c90c:	699b      	ldr	r3, [r3, #24]
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d00d      	beq.n	801c92e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c912:	687a      	ldr	r2, [r7, #4]
 801c914:	23ac      	movs	r3, #172	@ 0xac
 801c916:	009b      	lsls	r3, r3, #2
 801c918:	58d3      	ldr	r3, [r2, r3]
 801c91a:	699b      	ldr	r3, [r3, #24]
 801c91c:	687a      	ldr	r2, [r7, #4]
 801c91e:	7c12      	ldrb	r2, [r2, #16]
 801c920:	2108      	movs	r1, #8
 801c922:	1879      	adds	r1, r7, r1
 801c924:	0010      	movs	r0, r2
 801c926:	4798      	blx	r3
 801c928:	0003      	movs	r3, r0
 801c92a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c92c:	e019      	b.n	801c962 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c92e:	683a      	ldr	r2, [r7, #0]
 801c930:	687b      	ldr	r3, [r7, #4]
 801c932:	0011      	movs	r1, r2
 801c934:	0018      	movs	r0, r3
 801c936:	f000 fa76 	bl	801ce26 <USBD_CtlError>
            err++;
 801c93a:	210b      	movs	r1, #11
 801c93c:	187b      	adds	r3, r7, r1
 801c93e:	781a      	ldrb	r2, [r3, #0]
 801c940:	187b      	adds	r3, r7, r1
 801c942:	3201      	adds	r2, #1
 801c944:	701a      	strb	r2, [r3, #0]
          break;
 801c946:	e00c      	b.n	801c962 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c948:	683a      	ldr	r2, [r7, #0]
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	0011      	movs	r1, r2
 801c94e:	0018      	movs	r0, r3
 801c950:	f000 fa69 	bl	801ce26 <USBD_CtlError>
          err++;
 801c954:	210b      	movs	r1, #11
 801c956:	187b      	adds	r3, r7, r1
 801c958:	781a      	ldrb	r2, [r3, #0]
 801c95a:	187b      	adds	r3, r7, r1
 801c95c:	3201      	adds	r2, #1
 801c95e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c960:	e04b      	b.n	801c9fa <USBD_GetDescriptor+0x2fa>
 801c962:	e04a      	b.n	801c9fa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	7c1b      	ldrb	r3, [r3, #16]
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d10b      	bne.n	801c984 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c96c:	687a      	ldr	r2, [r7, #4]
 801c96e:	23ad      	movs	r3, #173	@ 0xad
 801c970:	009b      	lsls	r3, r3, #2
 801c972:	58d3      	ldr	r3, [r2, r3]
 801c974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c976:	2208      	movs	r2, #8
 801c978:	18ba      	adds	r2, r7, r2
 801c97a:	0010      	movs	r0, r2
 801c97c:	4798      	blx	r3
 801c97e:	0003      	movs	r3, r0
 801c980:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c982:	e03a      	b.n	801c9fa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c984:	683a      	ldr	r2, [r7, #0]
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	0011      	movs	r1, r2
 801c98a:	0018      	movs	r0, r3
 801c98c:	f000 fa4b 	bl	801ce26 <USBD_CtlError>
        err++;
 801c990:	210b      	movs	r1, #11
 801c992:	187b      	adds	r3, r7, r1
 801c994:	781a      	ldrb	r2, [r3, #0]
 801c996:	187b      	adds	r3, r7, r1
 801c998:	3201      	adds	r2, #1
 801c99a:	701a      	strb	r2, [r3, #0]
      break;
 801c99c:	e02d      	b.n	801c9fa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c99e:	687b      	ldr	r3, [r7, #4]
 801c9a0:	7c1b      	ldrb	r3, [r3, #16]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d10f      	bne.n	801c9c6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c9a6:	687a      	ldr	r2, [r7, #4]
 801c9a8:	23ad      	movs	r3, #173	@ 0xad
 801c9aa:	009b      	lsls	r3, r3, #2
 801c9ac:	58d3      	ldr	r3, [r2, r3]
 801c9ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c9b0:	2208      	movs	r2, #8
 801c9b2:	18ba      	adds	r2, r7, r2
 801c9b4:	0010      	movs	r0, r2
 801c9b6:	4798      	blx	r3
 801c9b8:	0003      	movs	r3, r0
 801c9ba:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c9bc:	68fb      	ldr	r3, [r7, #12]
 801c9be:	3301      	adds	r3, #1
 801c9c0:	2207      	movs	r2, #7
 801c9c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c9c4:	e019      	b.n	801c9fa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c9c6:	683a      	ldr	r2, [r7, #0]
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	0011      	movs	r1, r2
 801c9cc:	0018      	movs	r0, r3
 801c9ce:	f000 fa2a 	bl	801ce26 <USBD_CtlError>
        err++;
 801c9d2:	210b      	movs	r1, #11
 801c9d4:	187b      	adds	r3, r7, r1
 801c9d6:	781a      	ldrb	r2, [r3, #0]
 801c9d8:	187b      	adds	r3, r7, r1
 801c9da:	3201      	adds	r2, #1
 801c9dc:	701a      	strb	r2, [r3, #0]
      break;
 801c9de:	e00c      	b.n	801c9fa <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c9e0:	683a      	ldr	r2, [r7, #0]
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	0011      	movs	r1, r2
 801c9e6:	0018      	movs	r0, r3
 801c9e8:	f000 fa1d 	bl	801ce26 <USBD_CtlError>
      err++;
 801c9ec:	210b      	movs	r1, #11
 801c9ee:	187b      	adds	r3, r7, r1
 801c9f0:	781a      	ldrb	r2, [r3, #0]
 801c9f2:	187b      	adds	r3, r7, r1
 801c9f4:	3201      	adds	r2, #1
 801c9f6:	701a      	strb	r2, [r3, #0]
      break;
 801c9f8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c9fa:	230b      	movs	r3, #11
 801c9fc:	18fb      	adds	r3, r7, r3
 801c9fe:	781b      	ldrb	r3, [r3, #0]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d127      	bne.n	801ca54 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801ca04:	2108      	movs	r1, #8
 801ca06:	187b      	adds	r3, r7, r1
 801ca08:	881b      	ldrh	r3, [r3, #0]
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	d019      	beq.n	801ca42 <USBD_GetDescriptor+0x342>
 801ca0e:	683b      	ldr	r3, [r7, #0]
 801ca10:	88db      	ldrh	r3, [r3, #6]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d015      	beq.n	801ca42 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801ca16:	683b      	ldr	r3, [r7, #0]
 801ca18:	88da      	ldrh	r2, [r3, #6]
 801ca1a:	187b      	adds	r3, r7, r1
 801ca1c:	881b      	ldrh	r3, [r3, #0]
 801ca1e:	1c18      	adds	r0, r3, #0
 801ca20:	1c11      	adds	r1, r2, #0
 801ca22:	b28a      	uxth	r2, r1
 801ca24:	b283      	uxth	r3, r0
 801ca26:	429a      	cmp	r2, r3
 801ca28:	d900      	bls.n	801ca2c <USBD_GetDescriptor+0x32c>
 801ca2a:	1c01      	adds	r1, r0, #0
 801ca2c:	b28a      	uxth	r2, r1
 801ca2e:	2108      	movs	r1, #8
 801ca30:	187b      	adds	r3, r7, r1
 801ca32:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801ca34:	187b      	adds	r3, r7, r1
 801ca36:	881a      	ldrh	r2, [r3, #0]
 801ca38:	68f9      	ldr	r1, [r7, #12]
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	0018      	movs	r0, r3
 801ca3e:	f000 fa70 	bl	801cf22 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801ca42:	683b      	ldr	r3, [r7, #0]
 801ca44:	88db      	ldrh	r3, [r3, #6]
 801ca46:	2b00      	cmp	r3, #0
 801ca48:	d105      	bne.n	801ca56 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	0018      	movs	r0, r3
 801ca4e:	f000 fad2 	bl	801cff6 <USBD_CtlSendStatus>
 801ca52:	e000      	b.n	801ca56 <USBD_GetDescriptor+0x356>
    return;
 801ca54:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801ca56:	46bd      	mov	sp, r7
 801ca58:	b004      	add	sp, #16
 801ca5a:	bd80      	pop	{r7, pc}
 801ca5c:	08025db8 	.word	0x08025db8
 801ca60:	08025dd8 	.word	0x08025dd8

0801ca64 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ca64:	b590      	push	{r4, r7, lr}
 801ca66:	b085      	sub	sp, #20
 801ca68:	af00      	add	r7, sp, #0
 801ca6a:	6078      	str	r0, [r7, #4]
 801ca6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ca6e:	683b      	ldr	r3, [r7, #0]
 801ca70:	889b      	ldrh	r3, [r3, #4]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d13d      	bne.n	801caf2 <USBD_SetAddress+0x8e>
 801ca76:	683b      	ldr	r3, [r7, #0]
 801ca78:	88db      	ldrh	r3, [r3, #6]
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d139      	bne.n	801caf2 <USBD_SetAddress+0x8e>
 801ca7e:	683b      	ldr	r3, [r7, #0]
 801ca80:	885b      	ldrh	r3, [r3, #2]
 801ca82:	2b7f      	cmp	r3, #127	@ 0x7f
 801ca84:	d835      	bhi.n	801caf2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ca86:	683b      	ldr	r3, [r7, #0]
 801ca88:	885b      	ldrh	r3, [r3, #2]
 801ca8a:	b2da      	uxtb	r2, r3
 801ca8c:	230f      	movs	r3, #15
 801ca8e:	18fb      	adds	r3, r7, r3
 801ca90:	217f      	movs	r1, #127	@ 0x7f
 801ca92:	400a      	ands	r2, r1
 801ca94:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ca96:	687a      	ldr	r2, [r7, #4]
 801ca98:	23a7      	movs	r3, #167	@ 0xa7
 801ca9a:	009b      	lsls	r3, r3, #2
 801ca9c:	5cd3      	ldrb	r3, [r2, r3]
 801ca9e:	2b03      	cmp	r3, #3
 801caa0:	d106      	bne.n	801cab0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801caa2:	683a      	ldr	r2, [r7, #0]
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	0011      	movs	r1, r2
 801caa8:	0018      	movs	r0, r3
 801caaa:	f000 f9bc 	bl	801ce26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801caae:	e027      	b.n	801cb00 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	240f      	movs	r4, #15
 801cab4:	193a      	adds	r2, r7, r4
 801cab6:	4914      	ldr	r1, [pc, #80]	@ (801cb08 <USBD_SetAddress+0xa4>)
 801cab8:	7812      	ldrb	r2, [r2, #0]
 801caba:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801cabc:	193b      	adds	r3, r7, r4
 801cabe:	781a      	ldrb	r2, [r3, #0]
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	0011      	movs	r1, r2
 801cac4:	0018      	movs	r0, r3
 801cac6:	f000 ff5d 	bl	801d984 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	0018      	movs	r0, r3
 801cace:	f000 fa92 	bl	801cff6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801cad2:	193b      	adds	r3, r7, r4
 801cad4:	781b      	ldrb	r3, [r3, #0]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d005      	beq.n	801cae6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801cada:	687a      	ldr	r2, [r7, #4]
 801cadc:	23a7      	movs	r3, #167	@ 0xa7
 801cade:	009b      	lsls	r3, r3, #2
 801cae0:	2102      	movs	r1, #2
 801cae2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cae4:	e00c      	b.n	801cb00 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801cae6:	687a      	ldr	r2, [r7, #4]
 801cae8:	23a7      	movs	r3, #167	@ 0xa7
 801caea:	009b      	lsls	r3, r3, #2
 801caec:	2101      	movs	r1, #1
 801caee:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801caf0:	e006      	b.n	801cb00 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801caf2:	683a      	ldr	r2, [r7, #0]
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	0011      	movs	r1, r2
 801caf8:	0018      	movs	r0, r3
 801cafa:	f000 f994 	bl	801ce26 <USBD_CtlError>
  }
}
 801cafe:	46c0      	nop			@ (mov r8, r8)
 801cb00:	46c0      	nop			@ (mov r8, r8)
 801cb02:	46bd      	mov	sp, r7
 801cb04:	b005      	add	sp, #20
 801cb06:	bd90      	pop	{r4, r7, pc}
 801cb08:	0000029e 	.word	0x0000029e

0801cb0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cb0c:	b580      	push	{r7, lr}
 801cb0e:	b082      	sub	sp, #8
 801cb10:	af00      	add	r7, sp, #0
 801cb12:	6078      	str	r0, [r7, #4]
 801cb14:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801cb16:	683b      	ldr	r3, [r7, #0]
 801cb18:	885b      	ldrh	r3, [r3, #2]
 801cb1a:	b2da      	uxtb	r2, r3
 801cb1c:	4b4c      	ldr	r3, [pc, #304]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cb1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801cb20:	4b4b      	ldr	r3, [pc, #300]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cb22:	781b      	ldrb	r3, [r3, #0]
 801cb24:	2b01      	cmp	r3, #1
 801cb26:	d906      	bls.n	801cb36 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801cb28:	683a      	ldr	r2, [r7, #0]
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	0011      	movs	r1, r2
 801cb2e:	0018      	movs	r0, r3
 801cb30:	f000 f979 	bl	801ce26 <USBD_CtlError>
 801cb34:	e088      	b.n	801cc48 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801cb36:	687a      	ldr	r2, [r7, #4]
 801cb38:	23a7      	movs	r3, #167	@ 0xa7
 801cb3a:	009b      	lsls	r3, r3, #2
 801cb3c:	5cd3      	ldrb	r3, [r2, r3]
 801cb3e:	2b02      	cmp	r3, #2
 801cb40:	d002      	beq.n	801cb48 <USBD_SetConfig+0x3c>
 801cb42:	2b03      	cmp	r3, #3
 801cb44:	d029      	beq.n	801cb9a <USBD_SetConfig+0x8e>
 801cb46:	e071      	b.n	801cc2c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801cb48:	4b41      	ldr	r3, [pc, #260]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cb4a:	781b      	ldrb	r3, [r3, #0]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d01f      	beq.n	801cb90 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801cb50:	4b3f      	ldr	r3, [pc, #252]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cb52:	781b      	ldrb	r3, [r3, #0]
 801cb54:	001a      	movs	r2, r3
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801cb5a:	687a      	ldr	r2, [r7, #4]
 801cb5c:	23a7      	movs	r3, #167	@ 0xa7
 801cb5e:	009b      	lsls	r3, r3, #2
 801cb60:	2103      	movs	r1, #3
 801cb62:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801cb64:	4b3a      	ldr	r3, [pc, #232]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cb66:	781a      	ldrb	r2, [r3, #0]
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	0011      	movs	r1, r2
 801cb6c:	0018      	movs	r0, r3
 801cb6e:	f7ff f8c6 	bl	801bcfe <USBD_SetClassConfig>
 801cb72:	0003      	movs	r3, r0
 801cb74:	2b02      	cmp	r3, #2
 801cb76:	d106      	bne.n	801cb86 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801cb78:	683a      	ldr	r2, [r7, #0]
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	0011      	movs	r1, r2
 801cb7e:	0018      	movs	r0, r3
 801cb80:	f000 f951 	bl	801ce26 <USBD_CtlError>
            return;
 801cb84:	e060      	b.n	801cc48 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	0018      	movs	r0, r3
 801cb8a:	f000 fa34 	bl	801cff6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801cb8e:	e05b      	b.n	801cc48 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	0018      	movs	r0, r3
 801cb94:	f000 fa2f 	bl	801cff6 <USBD_CtlSendStatus>
        break;
 801cb98:	e056      	b.n	801cc48 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801cb9a:	4b2d      	ldr	r3, [pc, #180]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cb9c:	781b      	ldrb	r3, [r3, #0]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d115      	bne.n	801cbce <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801cba2:	687a      	ldr	r2, [r7, #4]
 801cba4:	23a7      	movs	r3, #167	@ 0xa7
 801cba6:	009b      	lsls	r3, r3, #2
 801cba8:	2102      	movs	r1, #2
 801cbaa:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801cbac:	4b28      	ldr	r3, [pc, #160]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cbae:	781b      	ldrb	r3, [r3, #0]
 801cbb0:	001a      	movs	r2, r3
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801cbb6:	4b26      	ldr	r3, [pc, #152]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cbb8:	781a      	ldrb	r2, [r3, #0]
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	0011      	movs	r1, r2
 801cbbe:	0018      	movs	r0, r3
 801cbc0:	f7ff f8c4 	bl	801bd4c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	0018      	movs	r0, r3
 801cbc8:	f000 fa15 	bl	801cff6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801cbcc:	e03c      	b.n	801cc48 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801cbce:	4b20      	ldr	r3, [pc, #128]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cbd0:	781b      	ldrb	r3, [r3, #0]
 801cbd2:	001a      	movs	r2, r3
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	685b      	ldr	r3, [r3, #4]
 801cbd8:	429a      	cmp	r2, r3
 801cbda:	d022      	beq.n	801cc22 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	685b      	ldr	r3, [r3, #4]
 801cbe0:	b2da      	uxtb	r2, r3
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	0011      	movs	r1, r2
 801cbe6:	0018      	movs	r0, r3
 801cbe8:	f7ff f8b0 	bl	801bd4c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801cbec:	4b18      	ldr	r3, [pc, #96]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cbee:	781b      	ldrb	r3, [r3, #0]
 801cbf0:	001a      	movs	r2, r3
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801cbf6:	4b16      	ldr	r3, [pc, #88]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cbf8:	781a      	ldrb	r2, [r3, #0]
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	0011      	movs	r1, r2
 801cbfe:	0018      	movs	r0, r3
 801cc00:	f7ff f87d 	bl	801bcfe <USBD_SetClassConfig>
 801cc04:	0003      	movs	r3, r0
 801cc06:	2b02      	cmp	r3, #2
 801cc08:	d106      	bne.n	801cc18 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801cc0a:	683a      	ldr	r2, [r7, #0]
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	0011      	movs	r1, r2
 801cc10:	0018      	movs	r0, r3
 801cc12:	f000 f908 	bl	801ce26 <USBD_CtlError>
            return;
 801cc16:	e017      	b.n	801cc48 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	0018      	movs	r0, r3
 801cc1c:	f000 f9eb 	bl	801cff6 <USBD_CtlSendStatus>
        break;
 801cc20:	e012      	b.n	801cc48 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	0018      	movs	r0, r3
 801cc26:	f000 f9e6 	bl	801cff6 <USBD_CtlSendStatus>
        break;
 801cc2a:	e00d      	b.n	801cc48 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801cc2c:	683a      	ldr	r2, [r7, #0]
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	0011      	movs	r1, r2
 801cc32:	0018      	movs	r0, r3
 801cc34:	f000 f8f7 	bl	801ce26 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801cc38:	4b05      	ldr	r3, [pc, #20]	@ (801cc50 <USBD_SetConfig+0x144>)
 801cc3a:	781a      	ldrb	r2, [r3, #0]
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	0011      	movs	r1, r2
 801cc40:	0018      	movs	r0, r3
 801cc42:	f7ff f883 	bl	801bd4c <USBD_ClrClassConfig>
        break;
 801cc46:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801cc48:	46bd      	mov	sp, r7
 801cc4a:	b002      	add	sp, #8
 801cc4c:	bd80      	pop	{r7, pc}
 801cc4e:	46c0      	nop			@ (mov r8, r8)
 801cc50:	20001ff0 	.word	0x20001ff0

0801cc54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b082      	sub	sp, #8
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
 801cc5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801cc5e:	683b      	ldr	r3, [r7, #0]
 801cc60:	88db      	ldrh	r3, [r3, #6]
 801cc62:	2b01      	cmp	r3, #1
 801cc64:	d006      	beq.n	801cc74 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801cc66:	683a      	ldr	r2, [r7, #0]
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	0011      	movs	r1, r2
 801cc6c:	0018      	movs	r0, r3
 801cc6e:	f000 f8da 	bl	801ce26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801cc72:	e026      	b.n	801ccc2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801cc74:	687a      	ldr	r2, [r7, #4]
 801cc76:	23a7      	movs	r3, #167	@ 0xa7
 801cc78:	009b      	lsls	r3, r3, #2
 801cc7a:	5cd3      	ldrb	r3, [r2, r3]
 801cc7c:	2b02      	cmp	r3, #2
 801cc7e:	dc02      	bgt.n	801cc86 <USBD_GetConfig+0x32>
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	dc03      	bgt.n	801cc8c <USBD_GetConfig+0x38>
 801cc84:	e016      	b.n	801ccb4 <USBD_GetConfig+0x60>
 801cc86:	2b03      	cmp	r3, #3
 801cc88:	d00c      	beq.n	801cca4 <USBD_GetConfig+0x50>
 801cc8a:	e013      	b.n	801ccb4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	2200      	movs	r2, #0
 801cc90:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	3308      	adds	r3, #8
 801cc96:	0019      	movs	r1, r3
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	2201      	movs	r2, #1
 801cc9c:	0018      	movs	r0, r3
 801cc9e:	f000 f940 	bl	801cf22 <USBD_CtlSendData>
        break;
 801cca2:	e00e      	b.n	801ccc2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	1d19      	adds	r1, r3, #4
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	2201      	movs	r2, #1
 801ccac:	0018      	movs	r0, r3
 801ccae:	f000 f938 	bl	801cf22 <USBD_CtlSendData>
        break;
 801ccb2:	e006      	b.n	801ccc2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801ccb4:	683a      	ldr	r2, [r7, #0]
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	0011      	movs	r1, r2
 801ccba:	0018      	movs	r0, r3
 801ccbc:	f000 f8b3 	bl	801ce26 <USBD_CtlError>
        break;
 801ccc0:	46c0      	nop			@ (mov r8, r8)
}
 801ccc2:	46c0      	nop			@ (mov r8, r8)
 801ccc4:	46bd      	mov	sp, r7
 801ccc6:	b002      	add	sp, #8
 801ccc8:	bd80      	pop	{r7, pc}

0801ccca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ccca:	b580      	push	{r7, lr}
 801cccc:	b082      	sub	sp, #8
 801ccce:	af00      	add	r7, sp, #0
 801ccd0:	6078      	str	r0, [r7, #4]
 801ccd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ccd4:	687a      	ldr	r2, [r7, #4]
 801ccd6:	23a7      	movs	r3, #167	@ 0xa7
 801ccd8:	009b      	lsls	r3, r3, #2
 801ccda:	5cd3      	ldrb	r3, [r2, r3]
 801ccdc:	3b01      	subs	r3, #1
 801ccde:	2b02      	cmp	r3, #2
 801cce0:	d822      	bhi.n	801cd28 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801cce2:	683b      	ldr	r3, [r7, #0]
 801cce4:	88db      	ldrh	r3, [r3, #6]
 801cce6:	2b02      	cmp	r3, #2
 801cce8:	d006      	beq.n	801ccf8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801ccea:	683a      	ldr	r2, [r7, #0]
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	0011      	movs	r1, r2
 801ccf0:	0018      	movs	r0, r3
 801ccf2:	f000 f898 	bl	801ce26 <USBD_CtlError>
        break;
 801ccf6:	e01e      	b.n	801cd36 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	2201      	movs	r2, #1
 801ccfc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801ccfe:	687a      	ldr	r2, [r7, #4]
 801cd00:	23a9      	movs	r3, #169	@ 0xa9
 801cd02:	009b      	lsls	r3, r3, #2
 801cd04:	58d3      	ldr	r3, [r2, r3]
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d005      	beq.n	801cd16 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	68db      	ldr	r3, [r3, #12]
 801cd0e:	2202      	movs	r2, #2
 801cd10:	431a      	orrs	r2, r3
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	330c      	adds	r3, #12
 801cd1a:	0019      	movs	r1, r3
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	2202      	movs	r2, #2
 801cd20:	0018      	movs	r0, r3
 801cd22:	f000 f8fe 	bl	801cf22 <USBD_CtlSendData>
      break;
 801cd26:	e006      	b.n	801cd36 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801cd28:	683a      	ldr	r2, [r7, #0]
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	0011      	movs	r1, r2
 801cd2e:	0018      	movs	r0, r3
 801cd30:	f000 f879 	bl	801ce26 <USBD_CtlError>
      break;
 801cd34:	46c0      	nop			@ (mov r8, r8)
  }
}
 801cd36:	46c0      	nop			@ (mov r8, r8)
 801cd38:	46bd      	mov	sp, r7
 801cd3a:	b002      	add	sp, #8
 801cd3c:	bd80      	pop	{r7, pc}

0801cd3e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801cd3e:	b580      	push	{r7, lr}
 801cd40:	b082      	sub	sp, #8
 801cd42:	af00      	add	r7, sp, #0
 801cd44:	6078      	str	r0, [r7, #4]
 801cd46:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801cd48:	683b      	ldr	r3, [r7, #0]
 801cd4a:	885b      	ldrh	r3, [r3, #2]
 801cd4c:	2b01      	cmp	r3, #1
 801cd4e:	d108      	bne.n	801cd62 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801cd50:	687a      	ldr	r2, [r7, #4]
 801cd52:	23a9      	movs	r3, #169	@ 0xa9
 801cd54:	009b      	lsls	r3, r3, #2
 801cd56:	2101      	movs	r1, #1
 801cd58:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	0018      	movs	r0, r3
 801cd5e:	f000 f94a 	bl	801cff6 <USBD_CtlSendStatus>
  }
}
 801cd62:	46c0      	nop			@ (mov r8, r8)
 801cd64:	46bd      	mov	sp, r7
 801cd66:	b002      	add	sp, #8
 801cd68:	bd80      	pop	{r7, pc}

0801cd6a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801cd6a:	b580      	push	{r7, lr}
 801cd6c:	b082      	sub	sp, #8
 801cd6e:	af00      	add	r7, sp, #0
 801cd70:	6078      	str	r0, [r7, #4]
 801cd72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801cd74:	687a      	ldr	r2, [r7, #4]
 801cd76:	23a7      	movs	r3, #167	@ 0xa7
 801cd78:	009b      	lsls	r3, r3, #2
 801cd7a:	5cd3      	ldrb	r3, [r2, r3]
 801cd7c:	3b01      	subs	r3, #1
 801cd7e:	2b02      	cmp	r3, #2
 801cd80:	d80d      	bhi.n	801cd9e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801cd82:	683b      	ldr	r3, [r7, #0]
 801cd84:	885b      	ldrh	r3, [r3, #2]
 801cd86:	2b01      	cmp	r3, #1
 801cd88:	d110      	bne.n	801cdac <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801cd8a:	687a      	ldr	r2, [r7, #4]
 801cd8c:	23a9      	movs	r3, #169	@ 0xa9
 801cd8e:	009b      	lsls	r3, r3, #2
 801cd90:	2100      	movs	r1, #0
 801cd92:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	0018      	movs	r0, r3
 801cd98:	f000 f92d 	bl	801cff6 <USBD_CtlSendStatus>
      }
      break;
 801cd9c:	e006      	b.n	801cdac <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801cd9e:	683a      	ldr	r2, [r7, #0]
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	0011      	movs	r1, r2
 801cda4:	0018      	movs	r0, r3
 801cda6:	f000 f83e 	bl	801ce26 <USBD_CtlError>
      break;
 801cdaa:	e000      	b.n	801cdae <USBD_ClrFeature+0x44>
      break;
 801cdac:	46c0      	nop			@ (mov r8, r8)
  }
}
 801cdae:	46c0      	nop			@ (mov r8, r8)
 801cdb0:	46bd      	mov	sp, r7
 801cdb2:	b002      	add	sp, #8
 801cdb4:	bd80      	pop	{r7, pc}

0801cdb6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801cdb6:	b580      	push	{r7, lr}
 801cdb8:	b082      	sub	sp, #8
 801cdba:	af00      	add	r7, sp, #0
 801cdbc:	6078      	str	r0, [r7, #4]
 801cdbe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801cdc0:	683b      	ldr	r3, [r7, #0]
 801cdc2:	781a      	ldrb	r2, [r3, #0]
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801cdc8:	683b      	ldr	r3, [r7, #0]
 801cdca:	785a      	ldrb	r2, [r3, #1]
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801cdd0:	683b      	ldr	r3, [r7, #0]
 801cdd2:	3302      	adds	r3, #2
 801cdd4:	781b      	ldrb	r3, [r3, #0]
 801cdd6:	001a      	movs	r2, r3
 801cdd8:	683b      	ldr	r3, [r7, #0]
 801cdda:	3303      	adds	r3, #3
 801cddc:	781b      	ldrb	r3, [r3, #0]
 801cdde:	021b      	lsls	r3, r3, #8
 801cde0:	b29b      	uxth	r3, r3
 801cde2:	18d3      	adds	r3, r2, r3
 801cde4:	b29a      	uxth	r2, r3
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801cdea:	683b      	ldr	r3, [r7, #0]
 801cdec:	3304      	adds	r3, #4
 801cdee:	781b      	ldrb	r3, [r3, #0]
 801cdf0:	001a      	movs	r2, r3
 801cdf2:	683b      	ldr	r3, [r7, #0]
 801cdf4:	3305      	adds	r3, #5
 801cdf6:	781b      	ldrb	r3, [r3, #0]
 801cdf8:	021b      	lsls	r3, r3, #8
 801cdfa:	b29b      	uxth	r3, r3
 801cdfc:	18d3      	adds	r3, r2, r3
 801cdfe:	b29a      	uxth	r2, r3
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801ce04:	683b      	ldr	r3, [r7, #0]
 801ce06:	3306      	adds	r3, #6
 801ce08:	781b      	ldrb	r3, [r3, #0]
 801ce0a:	001a      	movs	r2, r3
 801ce0c:	683b      	ldr	r3, [r7, #0]
 801ce0e:	3307      	adds	r3, #7
 801ce10:	781b      	ldrb	r3, [r3, #0]
 801ce12:	021b      	lsls	r3, r3, #8
 801ce14:	b29b      	uxth	r3, r3
 801ce16:	18d3      	adds	r3, r2, r3
 801ce18:	b29a      	uxth	r2, r3
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	80da      	strh	r2, [r3, #6]

}
 801ce1e:	46c0      	nop			@ (mov r8, r8)
 801ce20:	46bd      	mov	sp, r7
 801ce22:	b002      	add	sp, #8
 801ce24:	bd80      	pop	{r7, pc}

0801ce26 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801ce26:	b580      	push	{r7, lr}
 801ce28:	b082      	sub	sp, #8
 801ce2a:	af00      	add	r7, sp, #0
 801ce2c:	6078      	str	r0, [r7, #4]
 801ce2e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801ce30:	687b      	ldr	r3, [r7, #4]
 801ce32:	2180      	movs	r1, #128	@ 0x80
 801ce34:	0018      	movs	r0, r3
 801ce36:	f000 fd1e 	bl	801d876 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	2100      	movs	r1, #0
 801ce3e:	0018      	movs	r0, r3
 801ce40:	f000 fd19 	bl	801d876 <USBD_LL_StallEP>
}
 801ce44:	46c0      	nop			@ (mov r8, r8)
 801ce46:	46bd      	mov	sp, r7
 801ce48:	b002      	add	sp, #8
 801ce4a:	bd80      	pop	{r7, pc}

0801ce4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801ce4c:	b590      	push	{r4, r7, lr}
 801ce4e:	b087      	sub	sp, #28
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	60f8      	str	r0, [r7, #12]
 801ce54:	60b9      	str	r1, [r7, #8]
 801ce56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801ce58:	2417      	movs	r4, #23
 801ce5a:	193b      	adds	r3, r7, r4
 801ce5c:	2200      	movs	r2, #0
 801ce5e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	d03c      	beq.n	801cee0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801ce66:	68fb      	ldr	r3, [r7, #12]
 801ce68:	0018      	movs	r0, r3
 801ce6a:	f000 f83d 	bl	801cee8 <USBD_GetLen>
 801ce6e:	0003      	movs	r3, r0
 801ce70:	3301      	adds	r3, #1
 801ce72:	b29b      	uxth	r3, r3
 801ce74:	18db      	adds	r3, r3, r3
 801ce76:	b29a      	uxth	r2, r3
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801ce7c:	193b      	adds	r3, r7, r4
 801ce7e:	781b      	ldrb	r3, [r3, #0]
 801ce80:	193a      	adds	r2, r7, r4
 801ce82:	1c59      	adds	r1, r3, #1
 801ce84:	7011      	strb	r1, [r2, #0]
 801ce86:	001a      	movs	r2, r3
 801ce88:	68bb      	ldr	r3, [r7, #8]
 801ce8a:	189b      	adds	r3, r3, r2
 801ce8c:	687a      	ldr	r2, [r7, #4]
 801ce8e:	7812      	ldrb	r2, [r2, #0]
 801ce90:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801ce92:	193b      	adds	r3, r7, r4
 801ce94:	781b      	ldrb	r3, [r3, #0]
 801ce96:	193a      	adds	r2, r7, r4
 801ce98:	1c59      	adds	r1, r3, #1
 801ce9a:	7011      	strb	r1, [r2, #0]
 801ce9c:	001a      	movs	r2, r3
 801ce9e:	68bb      	ldr	r3, [r7, #8]
 801cea0:	189b      	adds	r3, r3, r2
 801cea2:	2203      	movs	r2, #3
 801cea4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801cea6:	e017      	b.n	801ced8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	1c5a      	adds	r2, r3, #1
 801ceac:	60fa      	str	r2, [r7, #12]
 801ceae:	2417      	movs	r4, #23
 801ceb0:	193a      	adds	r2, r7, r4
 801ceb2:	7812      	ldrb	r2, [r2, #0]
 801ceb4:	1939      	adds	r1, r7, r4
 801ceb6:	1c50      	adds	r0, r2, #1
 801ceb8:	7008      	strb	r0, [r1, #0]
 801ceba:	0011      	movs	r1, r2
 801cebc:	68ba      	ldr	r2, [r7, #8]
 801cebe:	1852      	adds	r2, r2, r1
 801cec0:	781b      	ldrb	r3, [r3, #0]
 801cec2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801cec4:	193b      	adds	r3, r7, r4
 801cec6:	781b      	ldrb	r3, [r3, #0]
 801cec8:	193a      	adds	r2, r7, r4
 801ceca:	1c59      	adds	r1, r3, #1
 801cecc:	7011      	strb	r1, [r2, #0]
 801cece:	001a      	movs	r2, r3
 801ced0:	68bb      	ldr	r3, [r7, #8]
 801ced2:	189b      	adds	r3, r3, r2
 801ced4:	2200      	movs	r2, #0
 801ced6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801ced8:	68fb      	ldr	r3, [r7, #12]
 801ceda:	781b      	ldrb	r3, [r3, #0]
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d1e3      	bne.n	801cea8 <USBD_GetString+0x5c>
    }
  }
}
 801cee0:	46c0      	nop			@ (mov r8, r8)
 801cee2:	46bd      	mov	sp, r7
 801cee4:	b007      	add	sp, #28
 801cee6:	bd90      	pop	{r4, r7, pc}

0801cee8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801cee8:	b580      	push	{r7, lr}
 801ceea:	b084      	sub	sp, #16
 801ceec:	af00      	add	r7, sp, #0
 801ceee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801cef0:	230f      	movs	r3, #15
 801cef2:	18fb      	adds	r3, r7, r3
 801cef4:	2200      	movs	r2, #0
 801cef6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801cef8:	e008      	b.n	801cf0c <USBD_GetLen+0x24>
  {
    len++;
 801cefa:	210f      	movs	r1, #15
 801cefc:	187b      	adds	r3, r7, r1
 801cefe:	781a      	ldrb	r2, [r3, #0]
 801cf00:	187b      	adds	r3, r7, r1
 801cf02:	3201      	adds	r2, #1
 801cf04:	701a      	strb	r2, [r3, #0]
    buf++;
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	3301      	adds	r3, #1
 801cf0a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	781b      	ldrb	r3, [r3, #0]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d1f2      	bne.n	801cefa <USBD_GetLen+0x12>
  }

  return len;
 801cf14:	230f      	movs	r3, #15
 801cf16:	18fb      	adds	r3, r7, r3
 801cf18:	781b      	ldrb	r3, [r3, #0]
}
 801cf1a:	0018      	movs	r0, r3
 801cf1c:	46bd      	mov	sp, r7
 801cf1e:	b004      	add	sp, #16
 801cf20:	bd80      	pop	{r7, pc}

0801cf22 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801cf22:	b580      	push	{r7, lr}
 801cf24:	b084      	sub	sp, #16
 801cf26:	af00      	add	r7, sp, #0
 801cf28:	60f8      	str	r0, [r7, #12]
 801cf2a:	60b9      	str	r1, [r7, #8]
 801cf2c:	1dbb      	adds	r3, r7, #6
 801cf2e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801cf30:	68fa      	ldr	r2, [r7, #12]
 801cf32:	23a5      	movs	r3, #165	@ 0xa5
 801cf34:	009b      	lsls	r3, r3, #2
 801cf36:	2102      	movs	r1, #2
 801cf38:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801cf3a:	1dbb      	adds	r3, r7, #6
 801cf3c:	881a      	ldrh	r2, [r3, #0]
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801cf42:	1dbb      	adds	r3, r7, #6
 801cf44:	881a      	ldrh	r2, [r3, #0]
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cf4a:	1dbb      	adds	r3, r7, #6
 801cf4c:	881b      	ldrh	r3, [r3, #0]
 801cf4e:	68ba      	ldr	r2, [r7, #8]
 801cf50:	68f8      	ldr	r0, [r7, #12]
 801cf52:	2100      	movs	r1, #0
 801cf54:	f000 fd41 	bl	801d9da <USBD_LL_Transmit>

  return USBD_OK;
 801cf58:	2300      	movs	r3, #0
}
 801cf5a:	0018      	movs	r0, r3
 801cf5c:	46bd      	mov	sp, r7
 801cf5e:	b004      	add	sp, #16
 801cf60:	bd80      	pop	{r7, pc}

0801cf62 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801cf62:	b580      	push	{r7, lr}
 801cf64:	b084      	sub	sp, #16
 801cf66:	af00      	add	r7, sp, #0
 801cf68:	60f8      	str	r0, [r7, #12]
 801cf6a:	60b9      	str	r1, [r7, #8]
 801cf6c:	1dbb      	adds	r3, r7, #6
 801cf6e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801cf70:	1dbb      	adds	r3, r7, #6
 801cf72:	881b      	ldrh	r3, [r3, #0]
 801cf74:	68ba      	ldr	r2, [r7, #8]
 801cf76:	68f8      	ldr	r0, [r7, #12]
 801cf78:	2100      	movs	r1, #0
 801cf7a:	f000 fd2e 	bl	801d9da <USBD_LL_Transmit>

  return USBD_OK;
 801cf7e:	2300      	movs	r3, #0
}
 801cf80:	0018      	movs	r0, r3
 801cf82:	46bd      	mov	sp, r7
 801cf84:	b004      	add	sp, #16
 801cf86:	bd80      	pop	{r7, pc}

0801cf88 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b084      	sub	sp, #16
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	60f8      	str	r0, [r7, #12]
 801cf90:	60b9      	str	r1, [r7, #8]
 801cf92:	1dbb      	adds	r3, r7, #6
 801cf94:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801cf96:	68fa      	ldr	r2, [r7, #12]
 801cf98:	23a5      	movs	r3, #165	@ 0xa5
 801cf9a:	009b      	lsls	r3, r3, #2
 801cf9c:	2103      	movs	r1, #3
 801cf9e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801cfa0:	1dbb      	adds	r3, r7, #6
 801cfa2:	8819      	ldrh	r1, [r3, #0]
 801cfa4:	68fa      	ldr	r2, [r7, #12]
 801cfa6:	23ae      	movs	r3, #174	@ 0xae
 801cfa8:	005b      	lsls	r3, r3, #1
 801cfaa:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801cfac:	1dbb      	adds	r3, r7, #6
 801cfae:	8819      	ldrh	r1, [r3, #0]
 801cfb0:	68fa      	ldr	r2, [r7, #12]
 801cfb2:	23b0      	movs	r3, #176	@ 0xb0
 801cfb4:	005b      	lsls	r3, r3, #1
 801cfb6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cfb8:	1dbb      	adds	r3, r7, #6
 801cfba:	881b      	ldrh	r3, [r3, #0]
 801cfbc:	68ba      	ldr	r2, [r7, #8]
 801cfbe:	68f8      	ldr	r0, [r7, #12]
 801cfc0:	2100      	movs	r1, #0
 801cfc2:	f000 fd41 	bl	801da48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cfc6:	2300      	movs	r3, #0
}
 801cfc8:	0018      	movs	r0, r3
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	b004      	add	sp, #16
 801cfce:	bd80      	pop	{r7, pc}

0801cfd0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b084      	sub	sp, #16
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	60f8      	str	r0, [r7, #12]
 801cfd8:	60b9      	str	r1, [r7, #8]
 801cfda:	1dbb      	adds	r3, r7, #6
 801cfdc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cfde:	1dbb      	adds	r3, r7, #6
 801cfe0:	881b      	ldrh	r3, [r3, #0]
 801cfe2:	68ba      	ldr	r2, [r7, #8]
 801cfe4:	68f8      	ldr	r0, [r7, #12]
 801cfe6:	2100      	movs	r1, #0
 801cfe8:	f000 fd2e 	bl	801da48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cfec:	2300      	movs	r3, #0
}
 801cfee:	0018      	movs	r0, r3
 801cff0:	46bd      	mov	sp, r7
 801cff2:	b004      	add	sp, #16
 801cff4:	bd80      	pop	{r7, pc}

0801cff6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801cff6:	b580      	push	{r7, lr}
 801cff8:	b082      	sub	sp, #8
 801cffa:	af00      	add	r7, sp, #0
 801cffc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cffe:	687a      	ldr	r2, [r7, #4]
 801d000:	23a5      	movs	r3, #165	@ 0xa5
 801d002:	009b      	lsls	r3, r3, #2
 801d004:	2104      	movs	r1, #4
 801d006:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801d008:	6878      	ldr	r0, [r7, #4]
 801d00a:	2300      	movs	r3, #0
 801d00c:	2200      	movs	r2, #0
 801d00e:	2100      	movs	r1, #0
 801d010:	f000 fce3 	bl	801d9da <USBD_LL_Transmit>

  return USBD_OK;
 801d014:	2300      	movs	r3, #0
}
 801d016:	0018      	movs	r0, r3
 801d018:	46bd      	mov	sp, r7
 801d01a:	b002      	add	sp, #8
 801d01c:	bd80      	pop	{r7, pc}

0801d01e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801d01e:	b580      	push	{r7, lr}
 801d020:	b082      	sub	sp, #8
 801d022:	af00      	add	r7, sp, #0
 801d024:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801d026:	687a      	ldr	r2, [r7, #4]
 801d028:	23a5      	movs	r3, #165	@ 0xa5
 801d02a:	009b      	lsls	r3, r3, #2
 801d02c:	2105      	movs	r1, #5
 801d02e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d030:	6878      	ldr	r0, [r7, #4]
 801d032:	2300      	movs	r3, #0
 801d034:	2200      	movs	r2, #0
 801d036:	2100      	movs	r1, #0
 801d038:	f000 fd06 	bl	801da48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d03c:	2300      	movs	r3, #0
}
 801d03e:	0018      	movs	r0, r3
 801d040:	46bd      	mov	sp, r7
 801d042:	b002      	add	sp, #8
 801d044:	bd80      	pop	{r7, pc}
	...

0801d048 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d048:	b580      	push	{r7, lr}
 801d04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d04c:	4914      	ldr	r1, [pc, #80]	@ (801d0a0 <MX_USB_DEVICE_Init+0x58>)
 801d04e:	4b15      	ldr	r3, [pc, #84]	@ (801d0a4 <MX_USB_DEVICE_Init+0x5c>)
 801d050:	2200      	movs	r2, #0
 801d052:	0018      	movs	r0, r3
 801d054:	f7fe fdec 	bl	801bc30 <USBD_Init>
 801d058:	1e03      	subs	r3, r0, #0
 801d05a:	d001      	beq.n	801d060 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d05c:	f7eb faf8 	bl	8008650 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d060:	4a11      	ldr	r2, [pc, #68]	@ (801d0a8 <MX_USB_DEVICE_Init+0x60>)
 801d062:	4b10      	ldr	r3, [pc, #64]	@ (801d0a4 <MX_USB_DEVICE_Init+0x5c>)
 801d064:	0011      	movs	r1, r2
 801d066:	0018      	movs	r0, r3
 801d068:	f7fe fe13 	bl	801bc92 <USBD_RegisterClass>
 801d06c:	1e03      	subs	r3, r0, #0
 801d06e:	d001      	beq.n	801d074 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801d070:	f7eb faee 	bl	8008650 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d074:	4a0d      	ldr	r2, [pc, #52]	@ (801d0ac <MX_USB_DEVICE_Init+0x64>)
 801d076:	4b0b      	ldr	r3, [pc, #44]	@ (801d0a4 <MX_USB_DEVICE_Init+0x5c>)
 801d078:	0011      	movs	r1, r2
 801d07a:	0018      	movs	r0, r3
 801d07c:	f7fe fd28 	bl	801bad0 <USBD_CDC_RegisterInterface>
 801d080:	1e03      	subs	r3, r0, #0
 801d082:	d001      	beq.n	801d088 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801d084:	f7eb fae4 	bl	8008650 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d088:	4b06      	ldr	r3, [pc, #24]	@ (801d0a4 <MX_USB_DEVICE_Init+0x5c>)
 801d08a:	0018      	movs	r0, r3
 801d08c:	f7fe fe21 	bl	801bcd2 <USBD_Start>
 801d090:	1e03      	subs	r3, r0, #0
 801d092:	d001      	beq.n	801d098 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801d094:	f7eb fadc 	bl	8008650 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d098:	46c0      	nop			@ (mov r8, r8)
 801d09a:	46bd      	mov	sp, r7
 801d09c:	bd80      	pop	{r7, pc}
 801d09e:	46c0      	nop			@ (mov r8, r8)
 801d0a0:	20000208 	.word	0x20000208
 801d0a4:	20001ff4 	.word	0x20001ff4
 801d0a8:	200000f4 	.word	0x200000f4
 801d0ac:	200001f8 	.word	0x200001f8

0801d0b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d0b0:	b580      	push	{r7, lr}
 801d0b2:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d0b4:	4907      	ldr	r1, [pc, #28]	@ (801d0d4 <CDC_Init_FS+0x24>)
 801d0b6:	4b08      	ldr	r3, [pc, #32]	@ (801d0d8 <CDC_Init_FS+0x28>)
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	0018      	movs	r0, r3
 801d0bc:	f7fe fd23 	bl	801bb06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d0c0:	4a06      	ldr	r2, [pc, #24]	@ (801d0dc <CDC_Init_FS+0x2c>)
 801d0c2:	4b05      	ldr	r3, [pc, #20]	@ (801d0d8 <CDC_Init_FS+0x28>)
 801d0c4:	0011      	movs	r1, r2
 801d0c6:	0018      	movs	r0, r3
 801d0c8:	f7fe fd39 	bl	801bb3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d0cc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d0ce:	0018      	movs	r0, r3
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bd80      	pop	{r7, pc}
 801d0d4:	20002778 	.word	0x20002778
 801d0d8:	20001ff4 	.word	0x20001ff4
 801d0dc:	20002378 	.word	0x20002378

0801d0e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d0e0:	b580      	push	{r7, lr}
 801d0e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d0e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d0e6:	0018      	movs	r0, r3
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	bd80      	pop	{r7, pc}

0801d0ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d0ec:	b580      	push	{r7, lr}
 801d0ee:	b082      	sub	sp, #8
 801d0f0:	af00      	add	r7, sp, #0
 801d0f2:	6039      	str	r1, [r7, #0]
 801d0f4:	0011      	movs	r1, r2
 801d0f6:	1dfb      	adds	r3, r7, #7
 801d0f8:	1c02      	adds	r2, r0, #0
 801d0fa:	701a      	strb	r2, [r3, #0]
 801d0fc:	1d3b      	adds	r3, r7, #4
 801d0fe:	1c0a      	adds	r2, r1, #0
 801d100:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d102:	1dfb      	adds	r3, r7, #7
 801d104:	781b      	ldrb	r3, [r3, #0]
 801d106:	2b23      	cmp	r3, #35	@ 0x23
 801d108:	d804      	bhi.n	801d114 <CDC_Control_FS+0x28>
 801d10a:	009a      	lsls	r2, r3, #2
 801d10c:	4b04      	ldr	r3, [pc, #16]	@ (801d120 <CDC_Control_FS+0x34>)
 801d10e:	18d3      	adds	r3, r2, r3
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d114:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801d116:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d118:	0018      	movs	r0, r3
 801d11a:	46bd      	mov	sp, r7
 801d11c:	b002      	add	sp, #8
 801d11e:	bd80      	pop	{r7, pc}
 801d120:	08025df0 	.word	0x08025df0

0801d124 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d124:	b580      	push	{r7, lr}
 801d126:	b082      	sub	sp, #8
 801d128:	af00      	add	r7, sp, #0
 801d12a:	6078      	str	r0, [r7, #4]
 801d12c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801d12e:	4b12      	ldr	r3, [pc, #72]	@ (801d178 <CDC_Receive_FS+0x54>)
 801d130:	781b      	ldrb	r3, [r3, #0]
 801d132:	2b00      	cmp	r3, #0
 801d134:	d013      	beq.n	801d15e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801d136:	683b      	ldr	r3, [r7, #0]
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	b29a      	uxth	r2, r3
 801d13c:	2301      	movs	r3, #1
 801d13e:	425b      	negs	r3, r3
 801d140:	6879      	ldr	r1, [r7, #4]
 801d142:	480e      	ldr	r0, [pc, #56]	@ (801d17c <CDC_Receive_FS+0x58>)
 801d144:	f7fa fa46 	bl	80175d4 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d148:	687a      	ldr	r2, [r7, #4]
 801d14a:	4b0d      	ldr	r3, [pc, #52]	@ (801d180 <CDC_Receive_FS+0x5c>)
 801d14c:	0011      	movs	r1, r2
 801d14e:	0018      	movs	r0, r3
 801d150:	f7fe fcf5 	bl	801bb3e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d154:	4b0a      	ldr	r3, [pc, #40]	@ (801d180 <CDC_Receive_FS+0x5c>)
 801d156:	0018      	movs	r0, r3
 801d158:	f7fe fd3c 	bl	801bbd4 <USBD_CDC_ReceivePacket>
 801d15c:	e006      	b.n	801d16c <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 801d15e:	683b      	ldr	r3, [r7, #0]
 801d160:	681a      	ldr	r2, [r3, #0]
 801d162:	4b08      	ldr	r3, [pc, #32]	@ (801d184 <CDC_Receive_FS+0x60>)
 801d164:	681b      	ldr	r3, [r3, #0]
 801d166:	18d2      	adds	r2, r2, r3
 801d168:	4b06      	ldr	r3, [pc, #24]	@ (801d184 <CDC_Receive_FS+0x60>)
 801d16a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801d16c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d16e:	0018      	movs	r0, r3
 801d170:	46bd      	mov	sp, r7
 801d172:	b002      	add	sp, #8
 801d174:	bd80      	pop	{r7, pc}
 801d176:	46c0      	nop			@ (mov r8, r8)
 801d178:	200022b8 	.word	0x200022b8
 801d17c:	200022bc 	.word	0x200022bc
 801d180:	20001ff4 	.word	0x20001ff4
 801d184:	20002374 	.word	0x20002374

0801d188 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d188:	b5b0      	push	{r4, r5, r7, lr}
 801d18a:	b084      	sub	sp, #16
 801d18c:	af00      	add	r7, sp, #0
 801d18e:	6078      	str	r0, [r7, #4]
 801d190:	000a      	movs	r2, r1
 801d192:	1cbb      	adds	r3, r7, #2
 801d194:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801d196:	230f      	movs	r3, #15
 801d198:	18fb      	adds	r3, r7, r3
 801d19a:	2200      	movs	r2, #0
 801d19c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d19e:	4a11      	ldr	r2, [pc, #68]	@ (801d1e4 <CDC_Transmit_FS+0x5c>)
 801d1a0:	23ae      	movs	r3, #174	@ 0xae
 801d1a2:	009b      	lsls	r3, r3, #2
 801d1a4:	58d3      	ldr	r3, [r2, r3]
 801d1a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d1a8:	68ba      	ldr	r2, [r7, #8]
 801d1aa:	2385      	movs	r3, #133	@ 0x85
 801d1ac:	009b      	lsls	r3, r3, #2
 801d1ae:	58d3      	ldr	r3, [r2, r3]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d001      	beq.n	801d1b8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801d1b4:	2301      	movs	r3, #1
 801d1b6:	e010      	b.n	801d1da <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d1b8:	1cbb      	adds	r3, r7, #2
 801d1ba:	881a      	ldrh	r2, [r3, #0]
 801d1bc:	6879      	ldr	r1, [r7, #4]
 801d1be:	4b09      	ldr	r3, [pc, #36]	@ (801d1e4 <CDC_Transmit_FS+0x5c>)
 801d1c0:	0018      	movs	r0, r3
 801d1c2:	f7fe fca0 	bl	801bb06 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d1c6:	250f      	movs	r5, #15
 801d1c8:	197c      	adds	r4, r7, r5
 801d1ca:	4b06      	ldr	r3, [pc, #24]	@ (801d1e4 <CDC_Transmit_FS+0x5c>)
 801d1cc:	0018      	movs	r0, r3
 801d1ce:	f7fe fcca 	bl	801bb66 <USBD_CDC_TransmitPacket>
 801d1d2:	0003      	movs	r3, r0
 801d1d4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801d1d6:	197b      	adds	r3, r7, r5
 801d1d8:	781b      	ldrb	r3, [r3, #0]
}
 801d1da:	0018      	movs	r0, r3
 801d1dc:	46bd      	mov	sp, r7
 801d1de:	b004      	add	sp, #16
 801d1e0:	bdb0      	pop	{r4, r5, r7, pc}
 801d1e2:	46c0      	nop			@ (mov r8, r8)
 801d1e4:	20001ff4 	.word	0x20001ff4

0801d1e8 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801d1e8:	b580      	push	{r7, lr}
 801d1ea:	af00      	add	r7, sp, #0
  ESPProg = true;
 801d1ec:	4b02      	ldr	r3, [pc, #8]	@ (801d1f8 <EnableESPProg+0x10>)
 801d1ee:	2201      	movs	r2, #1
 801d1f0:	701a      	strb	r2, [r3, #0]
}
 801d1f2:	46c0      	nop			@ (mov r8, r8)
 801d1f4:	46bd      	mov	sp, r7
 801d1f6:	bd80      	pop	{r7, pc}
 801d1f8:	200022b8 	.word	0x200022b8

0801d1fc <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801d1fc:	b580      	push	{r7, lr}
 801d1fe:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801d200:	4b01      	ldr	r3, [pc, #4]	@ (801d208 <GetUsbRxPointer+0xc>)
}
 801d202:	0018      	movs	r0, r3
 801d204:	46bd      	mov	sp, r7
 801d206:	bd80      	pop	{r7, pc}
 801d208:	20002378 	.word	0x20002378

0801d20c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801d20c:	b580      	push	{r7, lr}
 801d20e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801d210:	4b07      	ldr	r3, [pc, #28]	@ (801d230 <ResetUsbRxDataSize+0x24>)
 801d212:	2200      	movs	r2, #0
 801d214:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801d216:	4a07      	ldr	r2, [pc, #28]	@ (801d234 <ResetUsbRxDataSize+0x28>)
 801d218:	4b07      	ldr	r3, [pc, #28]	@ (801d238 <ResetUsbRxDataSize+0x2c>)
 801d21a:	0011      	movs	r1, r2
 801d21c:	0018      	movs	r0, r3
 801d21e:	f7fe fc8e 	bl	801bb3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d222:	4b05      	ldr	r3, [pc, #20]	@ (801d238 <ResetUsbRxDataSize+0x2c>)
 801d224:	0018      	movs	r0, r3
 801d226:	f7fe fcd5 	bl	801bbd4 <USBD_CDC_ReceivePacket>
}
 801d22a:	46c0      	nop			@ (mov r8, r8)
 801d22c:	46bd      	mov	sp, r7
 801d22e:	bd80      	pop	{r7, pc}
 801d230:	20002374 	.word	0x20002374
 801d234:	20002378 	.word	0x20002378
 801d238:	20001ff4 	.word	0x20001ff4

0801d23c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801d23c:	b580      	push	{r7, lr}
 801d23e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801d240:	4b02      	ldr	r3, [pc, #8]	@ (801d24c <GetUsbRxDataSize+0x10>)
 801d242:	681b      	ldr	r3, [r3, #0]
}
 801d244:	0018      	movs	r0, r3
 801d246:	46bd      	mov	sp, r7
 801d248:	bd80      	pop	{r7, pc}
 801d24a:	46c0      	nop			@ (mov r8, r8)
 801d24c:	20002374 	.word	0x20002374

0801d250 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801d250:	b580      	push	{r7, lr}
 801d252:	b082      	sub	sp, #8
 801d254:	af00      	add	r7, sp, #0
 801d256:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801d258:	687a      	ldr	r2, [r7, #4]
 801d25a:	4b07      	ldr	r3, [pc, #28]	@ (801d278 <GetUsbRxNextChunk+0x28>)
 801d25c:	18d2      	adds	r2, r2, r3
 801d25e:	4b07      	ldr	r3, [pc, #28]	@ (801d27c <GetUsbRxNextChunk+0x2c>)
 801d260:	0011      	movs	r1, r2
 801d262:	0018      	movs	r0, r3
 801d264:	f7fe fc6b 	bl	801bb3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d268:	4b04      	ldr	r3, [pc, #16]	@ (801d27c <GetUsbRxNextChunk+0x2c>)
 801d26a:	0018      	movs	r0, r3
 801d26c:	f7fe fcb2 	bl	801bbd4 <USBD_CDC_ReceivePacket>
}
 801d270:	46c0      	nop			@ (mov r8, r8)
 801d272:	46bd      	mov	sp, r7
 801d274:	b002      	add	sp, #8
 801d276:	bd80      	pop	{r7, pc}
 801d278:	20002378 	.word	0x20002378
 801d27c:	20001ff4 	.word	0x20001ff4

0801d280 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d280:	b580      	push	{r7, lr}
 801d282:	b082      	sub	sp, #8
 801d284:	af00      	add	r7, sp, #0
 801d286:	0002      	movs	r2, r0
 801d288:	6039      	str	r1, [r7, #0]
 801d28a:	1dfb      	adds	r3, r7, #7
 801d28c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d28e:	683b      	ldr	r3, [r7, #0]
 801d290:	2212      	movs	r2, #18
 801d292:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d294:	4b02      	ldr	r3, [pc, #8]	@ (801d2a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 801d296:	0018      	movs	r0, r3
 801d298:	46bd      	mov	sp, r7
 801d29a:	b002      	add	sp, #8
 801d29c:	bd80      	pop	{r7, pc}
 801d29e:	46c0      	nop			@ (mov r8, r8)
 801d2a0:	20000224 	.word	0x20000224

0801d2a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d2a4:	b580      	push	{r7, lr}
 801d2a6:	b082      	sub	sp, #8
 801d2a8:	af00      	add	r7, sp, #0
 801d2aa:	0002      	movs	r2, r0
 801d2ac:	6039      	str	r1, [r7, #0]
 801d2ae:	1dfb      	adds	r3, r7, #7
 801d2b0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d2b2:	683b      	ldr	r3, [r7, #0]
 801d2b4:	2204      	movs	r2, #4
 801d2b6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d2b8:	4b02      	ldr	r3, [pc, #8]	@ (801d2c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d2ba:	0018      	movs	r0, r3
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	b002      	add	sp, #8
 801d2c0:	bd80      	pop	{r7, pc}
 801d2c2:	46c0      	nop			@ (mov r8, r8)
 801d2c4:	20000238 	.word	0x20000238

0801d2c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d2c8:	b580      	push	{r7, lr}
 801d2ca:	b082      	sub	sp, #8
 801d2cc:	af00      	add	r7, sp, #0
 801d2ce:	0002      	movs	r2, r0
 801d2d0:	6039      	str	r1, [r7, #0]
 801d2d2:	1dfb      	adds	r3, r7, #7
 801d2d4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d2d6:	1dfb      	adds	r3, r7, #7
 801d2d8:	781b      	ldrb	r3, [r3, #0]
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d106      	bne.n	801d2ec <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d2de:	683a      	ldr	r2, [r7, #0]
 801d2e0:	4908      	ldr	r1, [pc, #32]	@ (801d304 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d2e2:	4b09      	ldr	r3, [pc, #36]	@ (801d308 <USBD_FS_ProductStrDescriptor+0x40>)
 801d2e4:	0018      	movs	r0, r3
 801d2e6:	f7ff fdb1 	bl	801ce4c <USBD_GetString>
 801d2ea:	e005      	b.n	801d2f8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d2ec:	683a      	ldr	r2, [r7, #0]
 801d2ee:	4905      	ldr	r1, [pc, #20]	@ (801d304 <USBD_FS_ProductStrDescriptor+0x3c>)
 801d2f0:	4b05      	ldr	r3, [pc, #20]	@ (801d308 <USBD_FS_ProductStrDescriptor+0x40>)
 801d2f2:	0018      	movs	r0, r3
 801d2f4:	f7ff fdaa 	bl	801ce4c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d2f8:	4b02      	ldr	r3, [pc, #8]	@ (801d304 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801d2fa:	0018      	movs	r0, r3
 801d2fc:	46bd      	mov	sp, r7
 801d2fe:	b002      	add	sp, #8
 801d300:	bd80      	pop	{r7, pc}
 801d302:	46c0      	nop			@ (mov r8, r8)
 801d304:	20002b78 	.word	0x20002b78
 801d308:	08025848 	.word	0x08025848

0801d30c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d30c:	b580      	push	{r7, lr}
 801d30e:	b082      	sub	sp, #8
 801d310:	af00      	add	r7, sp, #0
 801d312:	0002      	movs	r2, r0
 801d314:	6039      	str	r1, [r7, #0]
 801d316:	1dfb      	adds	r3, r7, #7
 801d318:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d31a:	683a      	ldr	r2, [r7, #0]
 801d31c:	4904      	ldr	r1, [pc, #16]	@ (801d330 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d31e:	4b05      	ldr	r3, [pc, #20]	@ (801d334 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801d320:	0018      	movs	r0, r3
 801d322:	f7ff fd93 	bl	801ce4c <USBD_GetString>
  return USBD_StrDesc;
 801d326:	4b02      	ldr	r3, [pc, #8]	@ (801d330 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801d328:	0018      	movs	r0, r3
 801d32a:	46bd      	mov	sp, r7
 801d32c:	b002      	add	sp, #8
 801d32e:	bd80      	pop	{r7, pc}
 801d330:	20002b78 	.word	0x20002b78
 801d334:	08025860 	.word	0x08025860

0801d338 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d338:	b580      	push	{r7, lr}
 801d33a:	b082      	sub	sp, #8
 801d33c:	af00      	add	r7, sp, #0
 801d33e:	0002      	movs	r2, r0
 801d340:	6039      	str	r1, [r7, #0]
 801d342:	1dfb      	adds	r3, r7, #7
 801d344:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d346:	683b      	ldr	r3, [r7, #0]
 801d348:	221a      	movs	r2, #26
 801d34a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d34c:	f000 f84c 	bl	801d3e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d350:	4b02      	ldr	r3, [pc, #8]	@ (801d35c <USBD_FS_SerialStrDescriptor+0x24>)
}
 801d352:	0018      	movs	r0, r3
 801d354:	46bd      	mov	sp, r7
 801d356:	b002      	add	sp, #8
 801d358:	bd80      	pop	{r7, pc}
 801d35a:	46c0      	nop			@ (mov r8, r8)
 801d35c:	2000023c 	.word	0x2000023c

0801d360 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d360:	b580      	push	{r7, lr}
 801d362:	b082      	sub	sp, #8
 801d364:	af00      	add	r7, sp, #0
 801d366:	0002      	movs	r2, r0
 801d368:	6039      	str	r1, [r7, #0]
 801d36a:	1dfb      	adds	r3, r7, #7
 801d36c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801d36e:	1dfb      	adds	r3, r7, #7
 801d370:	781b      	ldrb	r3, [r3, #0]
 801d372:	2b00      	cmp	r3, #0
 801d374:	d106      	bne.n	801d384 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d376:	683a      	ldr	r2, [r7, #0]
 801d378:	4908      	ldr	r1, [pc, #32]	@ (801d39c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d37a:	4b09      	ldr	r3, [pc, #36]	@ (801d3a0 <USBD_FS_ConfigStrDescriptor+0x40>)
 801d37c:	0018      	movs	r0, r3
 801d37e:	f7ff fd65 	bl	801ce4c <USBD_GetString>
 801d382:	e005      	b.n	801d390 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d384:	683a      	ldr	r2, [r7, #0]
 801d386:	4905      	ldr	r1, [pc, #20]	@ (801d39c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801d388:	4b05      	ldr	r3, [pc, #20]	@ (801d3a0 <USBD_FS_ConfigStrDescriptor+0x40>)
 801d38a:	0018      	movs	r0, r3
 801d38c:	f7ff fd5e 	bl	801ce4c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d390:	4b02      	ldr	r3, [pc, #8]	@ (801d39c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801d392:	0018      	movs	r0, r3
 801d394:	46bd      	mov	sp, r7
 801d396:	b002      	add	sp, #8
 801d398:	bd80      	pop	{r7, pc}
 801d39a:	46c0      	nop			@ (mov r8, r8)
 801d39c:	20002b78 	.word	0x20002b78
 801d3a0:	08025874 	.word	0x08025874

0801d3a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d3a4:	b580      	push	{r7, lr}
 801d3a6:	b082      	sub	sp, #8
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	0002      	movs	r2, r0
 801d3ac:	6039      	str	r1, [r7, #0]
 801d3ae:	1dfb      	adds	r3, r7, #7
 801d3b0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d3b2:	1dfb      	adds	r3, r7, #7
 801d3b4:	781b      	ldrb	r3, [r3, #0]
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d106      	bne.n	801d3c8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d3ba:	683a      	ldr	r2, [r7, #0]
 801d3bc:	4908      	ldr	r1, [pc, #32]	@ (801d3e0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d3be:	4b09      	ldr	r3, [pc, #36]	@ (801d3e4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d3c0:	0018      	movs	r0, r3
 801d3c2:	f7ff fd43 	bl	801ce4c <USBD_GetString>
 801d3c6:	e005      	b.n	801d3d4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d3c8:	683a      	ldr	r2, [r7, #0]
 801d3ca:	4905      	ldr	r1, [pc, #20]	@ (801d3e0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801d3cc:	4b05      	ldr	r3, [pc, #20]	@ (801d3e4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801d3ce:	0018      	movs	r0, r3
 801d3d0:	f7ff fd3c 	bl	801ce4c <USBD_GetString>
  }
  return USBD_StrDesc;
 801d3d4:	4b02      	ldr	r3, [pc, #8]	@ (801d3e0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801d3d6:	0018      	movs	r0, r3
 801d3d8:	46bd      	mov	sp, r7
 801d3da:	b002      	add	sp, #8
 801d3dc:	bd80      	pop	{r7, pc}
 801d3de:	46c0      	nop			@ (mov r8, r8)
 801d3e0:	20002b78 	.word	0x20002b78
 801d3e4:	08025880 	.word	0x08025880

0801d3e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d3e8:	b580      	push	{r7, lr}
 801d3ea:	b084      	sub	sp, #16
 801d3ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d3ee:	4b10      	ldr	r3, [pc, #64]	@ (801d430 <Get_SerialNum+0x48>)
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d3f4:	4b0f      	ldr	r3, [pc, #60]	@ (801d434 <Get_SerialNum+0x4c>)
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d3fa:	4b0f      	ldr	r3, [pc, #60]	@ (801d438 <Get_SerialNum+0x50>)
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d400:	68fa      	ldr	r2, [r7, #12]
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	18d3      	adds	r3, r2, r3
 801d406:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d00b      	beq.n	801d426 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d40e:	490b      	ldr	r1, [pc, #44]	@ (801d43c <Get_SerialNum+0x54>)
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	2208      	movs	r2, #8
 801d414:	0018      	movs	r0, r3
 801d416:	f000 f815 	bl	801d444 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d41a:	4909      	ldr	r1, [pc, #36]	@ (801d440 <Get_SerialNum+0x58>)
 801d41c:	68bb      	ldr	r3, [r7, #8]
 801d41e:	2204      	movs	r2, #4
 801d420:	0018      	movs	r0, r3
 801d422:	f000 f80f 	bl	801d444 <IntToUnicode>
  }
}
 801d426:	46c0      	nop			@ (mov r8, r8)
 801d428:	46bd      	mov	sp, r7
 801d42a:	b004      	add	sp, #16
 801d42c:	bd80      	pop	{r7, pc}
 801d42e:	46c0      	nop			@ (mov r8, r8)
 801d430:	1ff80050 	.word	0x1ff80050
 801d434:	1ff80054 	.word	0x1ff80054
 801d438:	1ff80058 	.word	0x1ff80058
 801d43c:	2000023e 	.word	0x2000023e
 801d440:	2000024e 	.word	0x2000024e

0801d444 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d444:	b580      	push	{r7, lr}
 801d446:	b086      	sub	sp, #24
 801d448:	af00      	add	r7, sp, #0
 801d44a:	60f8      	str	r0, [r7, #12]
 801d44c:	60b9      	str	r1, [r7, #8]
 801d44e:	1dfb      	adds	r3, r7, #7
 801d450:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801d452:	2117      	movs	r1, #23
 801d454:	187b      	adds	r3, r7, r1
 801d456:	2200      	movs	r2, #0
 801d458:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801d45a:	187b      	adds	r3, r7, r1
 801d45c:	2200      	movs	r2, #0
 801d45e:	701a      	strb	r2, [r3, #0]
 801d460:	e02f      	b.n	801d4c2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	0f1b      	lsrs	r3, r3, #28
 801d466:	2b09      	cmp	r3, #9
 801d468:	d80d      	bhi.n	801d486 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d46a:	68fb      	ldr	r3, [r7, #12]
 801d46c:	0f1b      	lsrs	r3, r3, #28
 801d46e:	b2da      	uxtb	r2, r3
 801d470:	2317      	movs	r3, #23
 801d472:	18fb      	adds	r3, r7, r3
 801d474:	781b      	ldrb	r3, [r3, #0]
 801d476:	005b      	lsls	r3, r3, #1
 801d478:	0019      	movs	r1, r3
 801d47a:	68bb      	ldr	r3, [r7, #8]
 801d47c:	185b      	adds	r3, r3, r1
 801d47e:	3230      	adds	r2, #48	@ 0x30
 801d480:	b2d2      	uxtb	r2, r2
 801d482:	701a      	strb	r2, [r3, #0]
 801d484:	e00c      	b.n	801d4a0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d486:	68fb      	ldr	r3, [r7, #12]
 801d488:	0f1b      	lsrs	r3, r3, #28
 801d48a:	b2da      	uxtb	r2, r3
 801d48c:	2317      	movs	r3, #23
 801d48e:	18fb      	adds	r3, r7, r3
 801d490:	781b      	ldrb	r3, [r3, #0]
 801d492:	005b      	lsls	r3, r3, #1
 801d494:	0019      	movs	r1, r3
 801d496:	68bb      	ldr	r3, [r7, #8]
 801d498:	185b      	adds	r3, r3, r1
 801d49a:	3237      	adds	r2, #55	@ 0x37
 801d49c:	b2d2      	uxtb	r2, r2
 801d49e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d4a0:	68fb      	ldr	r3, [r7, #12]
 801d4a2:	011b      	lsls	r3, r3, #4
 801d4a4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d4a6:	2117      	movs	r1, #23
 801d4a8:	187b      	adds	r3, r7, r1
 801d4aa:	781b      	ldrb	r3, [r3, #0]
 801d4ac:	005b      	lsls	r3, r3, #1
 801d4ae:	3301      	adds	r3, #1
 801d4b0:	68ba      	ldr	r2, [r7, #8]
 801d4b2:	18d3      	adds	r3, r2, r3
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d4b8:	187b      	adds	r3, r7, r1
 801d4ba:	781a      	ldrb	r2, [r3, #0]
 801d4bc:	187b      	adds	r3, r7, r1
 801d4be:	3201      	adds	r2, #1
 801d4c0:	701a      	strb	r2, [r3, #0]
 801d4c2:	2317      	movs	r3, #23
 801d4c4:	18fa      	adds	r2, r7, r3
 801d4c6:	1dfb      	adds	r3, r7, #7
 801d4c8:	7812      	ldrb	r2, [r2, #0]
 801d4ca:	781b      	ldrb	r3, [r3, #0]
 801d4cc:	429a      	cmp	r2, r3
 801d4ce:	d3c8      	bcc.n	801d462 <IntToUnicode+0x1e>
  }
}
 801d4d0:	46c0      	nop			@ (mov r8, r8)
 801d4d2:	46c0      	nop			@ (mov r8, r8)
 801d4d4:	46bd      	mov	sp, r7
 801d4d6:	b006      	add	sp, #24
 801d4d8:	bd80      	pop	{r7, pc}
	...

0801d4dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d4dc:	b580      	push	{r7, lr}
 801d4de:	b082      	sub	sp, #8
 801d4e0:	af00      	add	r7, sp, #0
 801d4e2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	4a0a      	ldr	r2, [pc, #40]	@ (801d514 <HAL_PCD_MspInit+0x38>)
 801d4ea:	4293      	cmp	r3, r2
 801d4ec:	d10e      	bne.n	801d50c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d4ee:	4b0a      	ldr	r3, [pc, #40]	@ (801d518 <HAL_PCD_MspInit+0x3c>)
 801d4f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d4f2:	4b09      	ldr	r3, [pc, #36]	@ (801d518 <HAL_PCD_MspInit+0x3c>)
 801d4f4:	2180      	movs	r1, #128	@ 0x80
 801d4f6:	0409      	lsls	r1, r1, #16
 801d4f8:	430a      	orrs	r2, r1
 801d4fa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801d4fc:	2200      	movs	r2, #0
 801d4fe:	2100      	movs	r1, #0
 801d500:	201f      	movs	r0, #31
 801d502:	f7f2 fadf 	bl	800fac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801d506:	201f      	movs	r0, #31
 801d508:	f7f2 faf1 	bl	800faee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d50c:	46c0      	nop			@ (mov r8, r8)
 801d50e:	46bd      	mov	sp, r7
 801d510:	b002      	add	sp, #8
 801d512:	bd80      	pop	{r7, pc}
 801d514:	40005c00 	.word	0x40005c00
 801d518:	40021000 	.word	0x40021000

0801d51c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d51c:	b580      	push	{r7, lr}
 801d51e:	b082      	sub	sp, #8
 801d520:	af00      	add	r7, sp, #0
 801d522:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d524:	687a      	ldr	r2, [r7, #4]
 801d526:	23bc      	movs	r3, #188	@ 0xbc
 801d528:	009b      	lsls	r3, r3, #2
 801d52a:	58d2      	ldr	r2, [r2, r3]
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	21ac      	movs	r1, #172	@ 0xac
 801d530:	0089      	lsls	r1, r1, #2
 801d532:	468c      	mov	ip, r1
 801d534:	4463      	add	r3, ip
 801d536:	0019      	movs	r1, r3
 801d538:	0010      	movs	r0, r2
 801d53a:	f7fe fc1d 	bl	801bd78 <USBD_LL_SetupStage>
}
 801d53e:	46c0      	nop			@ (mov r8, r8)
 801d540:	46bd      	mov	sp, r7
 801d542:	b002      	add	sp, #8
 801d544:	bd80      	pop	{r7, pc}

0801d546 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d546:	b590      	push	{r4, r7, lr}
 801d548:	b083      	sub	sp, #12
 801d54a:	af00      	add	r7, sp, #0
 801d54c:	6078      	str	r0, [r7, #4]
 801d54e:	000a      	movs	r2, r1
 801d550:	1cfb      	adds	r3, r7, #3
 801d552:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d554:	687a      	ldr	r2, [r7, #4]
 801d556:	23bc      	movs	r3, #188	@ 0xbc
 801d558:	009b      	lsls	r3, r3, #2
 801d55a:	58d4      	ldr	r4, [r2, r3]
 801d55c:	1cfb      	adds	r3, r7, #3
 801d55e:	781a      	ldrb	r2, [r3, #0]
 801d560:	6878      	ldr	r0, [r7, #4]
 801d562:	23be      	movs	r3, #190	@ 0xbe
 801d564:	0059      	lsls	r1, r3, #1
 801d566:	0013      	movs	r3, r2
 801d568:	009b      	lsls	r3, r3, #2
 801d56a:	189b      	adds	r3, r3, r2
 801d56c:	00db      	lsls	r3, r3, #3
 801d56e:	18c3      	adds	r3, r0, r3
 801d570:	185b      	adds	r3, r3, r1
 801d572:	681a      	ldr	r2, [r3, #0]
 801d574:	1cfb      	adds	r3, r7, #3
 801d576:	781b      	ldrb	r3, [r3, #0]
 801d578:	0019      	movs	r1, r3
 801d57a:	0020      	movs	r0, r4
 801d57c:	f7fe fc5a 	bl	801be34 <USBD_LL_DataOutStage>
}
 801d580:	46c0      	nop			@ (mov r8, r8)
 801d582:	46bd      	mov	sp, r7
 801d584:	b003      	add	sp, #12
 801d586:	bd90      	pop	{r4, r7, pc}

0801d588 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d588:	b580      	push	{r7, lr}
 801d58a:	b082      	sub	sp, #8
 801d58c:	af00      	add	r7, sp, #0
 801d58e:	6078      	str	r0, [r7, #4]
 801d590:	000a      	movs	r2, r1
 801d592:	1cfb      	adds	r3, r7, #3
 801d594:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d596:	687a      	ldr	r2, [r7, #4]
 801d598:	23bc      	movs	r3, #188	@ 0xbc
 801d59a:	009b      	lsls	r3, r3, #2
 801d59c:	58d0      	ldr	r0, [r2, r3]
 801d59e:	1cfb      	adds	r3, r7, #3
 801d5a0:	781a      	ldrb	r2, [r3, #0]
 801d5a2:	6879      	ldr	r1, [r7, #4]
 801d5a4:	0013      	movs	r3, r2
 801d5a6:	009b      	lsls	r3, r3, #2
 801d5a8:	189b      	adds	r3, r3, r2
 801d5aa:	00db      	lsls	r3, r3, #3
 801d5ac:	18cb      	adds	r3, r1, r3
 801d5ae:	333c      	adds	r3, #60	@ 0x3c
 801d5b0:	681a      	ldr	r2, [r3, #0]
 801d5b2:	1cfb      	adds	r3, r7, #3
 801d5b4:	781b      	ldrb	r3, [r3, #0]
 801d5b6:	0019      	movs	r1, r3
 801d5b8:	f7fe fcbe 	bl	801bf38 <USBD_LL_DataInStage>
}
 801d5bc:	46c0      	nop			@ (mov r8, r8)
 801d5be:	46bd      	mov	sp, r7
 801d5c0:	b002      	add	sp, #8
 801d5c2:	bd80      	pop	{r7, pc}

0801d5c4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d5c4:	b580      	push	{r7, lr}
 801d5c6:	b082      	sub	sp, #8
 801d5c8:	af00      	add	r7, sp, #0
 801d5ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d5cc:	687a      	ldr	r2, [r7, #4]
 801d5ce:	23bc      	movs	r3, #188	@ 0xbc
 801d5d0:	009b      	lsls	r3, r3, #2
 801d5d2:	58d3      	ldr	r3, [r2, r3]
 801d5d4:	0018      	movs	r0, r3
 801d5d6:	f7fe fdf5 	bl	801c1c4 <USBD_LL_SOF>
}
 801d5da:	46c0      	nop			@ (mov r8, r8)
 801d5dc:	46bd      	mov	sp, r7
 801d5de:	b002      	add	sp, #8
 801d5e0:	bd80      	pop	{r7, pc}

0801d5e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d5e2:	b580      	push	{r7, lr}
 801d5e4:	b084      	sub	sp, #16
 801d5e6:	af00      	add	r7, sp, #0
 801d5e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d5ea:	230f      	movs	r3, #15
 801d5ec:	18fb      	adds	r3, r7, r3
 801d5ee:	2201      	movs	r2, #1
 801d5f0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	689b      	ldr	r3, [r3, #8]
 801d5f6:	2b02      	cmp	r3, #2
 801d5f8:	d001      	beq.n	801d5fe <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d5fa:	f7eb f829 	bl	8008650 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d5fe:	687a      	ldr	r2, [r7, #4]
 801d600:	23bc      	movs	r3, #188	@ 0xbc
 801d602:	009b      	lsls	r3, r3, #2
 801d604:	58d2      	ldr	r2, [r2, r3]
 801d606:	230f      	movs	r3, #15
 801d608:	18fb      	adds	r3, r7, r3
 801d60a:	781b      	ldrb	r3, [r3, #0]
 801d60c:	0019      	movs	r1, r3
 801d60e:	0010      	movs	r0, r2
 801d610:	f7fe fd97 	bl	801c142 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d614:	687a      	ldr	r2, [r7, #4]
 801d616:	23bc      	movs	r3, #188	@ 0xbc
 801d618:	009b      	lsls	r3, r3, #2
 801d61a:	58d3      	ldr	r3, [r2, r3]
 801d61c:	0018      	movs	r0, r3
 801d61e:	f7fe fd48 	bl	801c0b2 <USBD_LL_Reset>
}
 801d622:	46c0      	nop			@ (mov r8, r8)
 801d624:	46bd      	mov	sp, r7
 801d626:	b004      	add	sp, #16
 801d628:	bd80      	pop	{r7, pc}
	...

0801d62c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d62c:	b580      	push	{r7, lr}
 801d62e:	b082      	sub	sp, #8
 801d630:	af00      	add	r7, sp, #0
 801d632:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d634:	687a      	ldr	r2, [r7, #4]
 801d636:	23bc      	movs	r3, #188	@ 0xbc
 801d638:	009b      	lsls	r3, r3, #2
 801d63a:	58d3      	ldr	r3, [r2, r3]
 801d63c:	0018      	movs	r0, r3
 801d63e:	f7fe fd91 	bl	801c164 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	699b      	ldr	r3, [r3, #24]
 801d646:	2b00      	cmp	r3, #0
 801d648:	d005      	beq.n	801d656 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d64a:	4b05      	ldr	r3, [pc, #20]	@ (801d660 <HAL_PCD_SuspendCallback+0x34>)
 801d64c:	691a      	ldr	r2, [r3, #16]
 801d64e:	4b04      	ldr	r3, [pc, #16]	@ (801d660 <HAL_PCD_SuspendCallback+0x34>)
 801d650:	2106      	movs	r1, #6
 801d652:	430a      	orrs	r2, r1
 801d654:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d656:	46c0      	nop			@ (mov r8, r8)
 801d658:	46bd      	mov	sp, r7
 801d65a:	b002      	add	sp, #8
 801d65c:	bd80      	pop	{r7, pc}
 801d65e:	46c0      	nop			@ (mov r8, r8)
 801d660:	e000ed00 	.word	0xe000ed00

0801d664 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d664:	b580      	push	{r7, lr}
 801d666:	b082      	sub	sp, #8
 801d668:	af00      	add	r7, sp, #0
 801d66a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	699b      	ldr	r3, [r3, #24]
 801d670:	2b00      	cmp	r3, #0
 801d672:	d007      	beq.n	801d684 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d674:	4b09      	ldr	r3, [pc, #36]	@ (801d69c <HAL_PCD_ResumeCallback+0x38>)
 801d676:	691a      	ldr	r2, [r3, #16]
 801d678:	4b08      	ldr	r3, [pc, #32]	@ (801d69c <HAL_PCD_ResumeCallback+0x38>)
 801d67a:	2106      	movs	r1, #6
 801d67c:	438a      	bics	r2, r1
 801d67e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d680:	f000 fa44 	bl	801db0c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d684:	687a      	ldr	r2, [r7, #4]
 801d686:	23bc      	movs	r3, #188	@ 0xbc
 801d688:	009b      	lsls	r3, r3, #2
 801d68a:	58d3      	ldr	r3, [r2, r3]
 801d68c:	0018      	movs	r0, r3
 801d68e:	f7fe fd81 	bl	801c194 <USBD_LL_Resume>
}
 801d692:	46c0      	nop			@ (mov r8, r8)
 801d694:	46bd      	mov	sp, r7
 801d696:	b002      	add	sp, #8
 801d698:	bd80      	pop	{r7, pc}
 801d69a:	46c0      	nop			@ (mov r8, r8)
 801d69c:	e000ed00 	.word	0xe000ed00

0801d6a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d6a0:	b580      	push	{r7, lr}
 801d6a2:	b082      	sub	sp, #8
 801d6a4:	af00      	add	r7, sp, #0
 801d6a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d6a8:	4a2d      	ldr	r2, [pc, #180]	@ (801d760 <USBD_LL_Init+0xc0>)
 801d6aa:	23bc      	movs	r3, #188	@ 0xbc
 801d6ac:	009b      	lsls	r3, r3, #2
 801d6ae:	6879      	ldr	r1, [r7, #4]
 801d6b0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d6b2:	687a      	ldr	r2, [r7, #4]
 801d6b4:	23b0      	movs	r3, #176	@ 0xb0
 801d6b6:	009b      	lsls	r3, r3, #2
 801d6b8:	4929      	ldr	r1, [pc, #164]	@ (801d760 <USBD_LL_Init+0xc0>)
 801d6ba:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d6bc:	4b28      	ldr	r3, [pc, #160]	@ (801d760 <USBD_LL_Init+0xc0>)
 801d6be:	4a29      	ldr	r2, [pc, #164]	@ (801d764 <USBD_LL_Init+0xc4>)
 801d6c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d6c2:	4b27      	ldr	r3, [pc, #156]	@ (801d760 <USBD_LL_Init+0xc0>)
 801d6c4:	2208      	movs	r2, #8
 801d6c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d6c8:	4b25      	ldr	r3, [pc, #148]	@ (801d760 <USBD_LL_Init+0xc0>)
 801d6ca:	2202      	movs	r2, #2
 801d6cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d6ce:	4b24      	ldr	r3, [pc, #144]	@ (801d760 <USBD_LL_Init+0xc0>)
 801d6d0:	2202      	movs	r2, #2
 801d6d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d6d4:	4b22      	ldr	r3, [pc, #136]	@ (801d760 <USBD_LL_Init+0xc0>)
 801d6d6:	2200      	movs	r2, #0
 801d6d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d6da:	4b21      	ldr	r3, [pc, #132]	@ (801d760 <USBD_LL_Init+0xc0>)
 801d6dc:	2200      	movs	r2, #0
 801d6de:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d6e0:	4b1f      	ldr	r3, [pc, #124]	@ (801d760 <USBD_LL_Init+0xc0>)
 801d6e2:	2200      	movs	r2, #0
 801d6e4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d6e6:	4b1e      	ldr	r3, [pc, #120]	@ (801d760 <USBD_LL_Init+0xc0>)
 801d6e8:	0018      	movs	r0, r3
 801d6ea:	f7f5 ff95 	bl	8013618 <HAL_PCD_Init>
 801d6ee:	1e03      	subs	r3, r0, #0
 801d6f0:	d001      	beq.n	801d6f6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d6f2:	f7ea ffad 	bl	8008650 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d6f6:	687a      	ldr	r2, [r7, #4]
 801d6f8:	23b0      	movs	r3, #176	@ 0xb0
 801d6fa:	009b      	lsls	r3, r3, #2
 801d6fc:	58d0      	ldr	r0, [r2, r3]
 801d6fe:	2318      	movs	r3, #24
 801d700:	2200      	movs	r2, #0
 801d702:	2100      	movs	r1, #0
 801d704:	f7f7 fd56 	bl	80151b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d708:	687a      	ldr	r2, [r7, #4]
 801d70a:	23b0      	movs	r3, #176	@ 0xb0
 801d70c:	009b      	lsls	r3, r3, #2
 801d70e:	58d0      	ldr	r0, [r2, r3]
 801d710:	2358      	movs	r3, #88	@ 0x58
 801d712:	2200      	movs	r2, #0
 801d714:	2180      	movs	r1, #128	@ 0x80
 801d716:	f7f7 fd4d 	bl	80151b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d71a:	687a      	ldr	r2, [r7, #4]
 801d71c:	23b0      	movs	r3, #176	@ 0xb0
 801d71e:	009b      	lsls	r3, r3, #2
 801d720:	58d0      	ldr	r0, [r2, r3]
 801d722:	23c0      	movs	r3, #192	@ 0xc0
 801d724:	2200      	movs	r2, #0
 801d726:	2181      	movs	r1, #129	@ 0x81
 801d728:	f7f7 fd44 	bl	80151b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d72c:	687a      	ldr	r2, [r7, #4]
 801d72e:	23b0      	movs	r3, #176	@ 0xb0
 801d730:	009b      	lsls	r3, r3, #2
 801d732:	58d0      	ldr	r0, [r2, r3]
 801d734:	2388      	movs	r3, #136	@ 0x88
 801d736:	005b      	lsls	r3, r3, #1
 801d738:	2200      	movs	r2, #0
 801d73a:	2101      	movs	r1, #1
 801d73c:	f7f7 fd3a 	bl	80151b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d740:	687a      	ldr	r2, [r7, #4]
 801d742:	23b0      	movs	r3, #176	@ 0xb0
 801d744:	009b      	lsls	r3, r3, #2
 801d746:	58d0      	ldr	r0, [r2, r3]
 801d748:	2380      	movs	r3, #128	@ 0x80
 801d74a:	005b      	lsls	r3, r3, #1
 801d74c:	2200      	movs	r2, #0
 801d74e:	2182      	movs	r1, #130	@ 0x82
 801d750:	f7f7 fd30 	bl	80151b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d754:	2300      	movs	r3, #0
}
 801d756:	0018      	movs	r0, r3
 801d758:	46bd      	mov	sp, r7
 801d75a:	b002      	add	sp, #8
 801d75c:	bd80      	pop	{r7, pc}
 801d75e:	46c0      	nop			@ (mov r8, r8)
 801d760:	20002d78 	.word	0x20002d78
 801d764:	40005c00 	.word	0x40005c00

0801d768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d76a:	b085      	sub	sp, #20
 801d76c:	af00      	add	r7, sp, #0
 801d76e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d770:	210f      	movs	r1, #15
 801d772:	187b      	adds	r3, r7, r1
 801d774:	2200      	movs	r2, #0
 801d776:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d778:	260e      	movs	r6, #14
 801d77a:	19bb      	adds	r3, r7, r6
 801d77c:	2200      	movs	r2, #0
 801d77e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d780:	687a      	ldr	r2, [r7, #4]
 801d782:	23b0      	movs	r3, #176	@ 0xb0
 801d784:	009b      	lsls	r3, r3, #2
 801d786:	58d3      	ldr	r3, [r2, r3]
 801d788:	000d      	movs	r5, r1
 801d78a:	187c      	adds	r4, r7, r1
 801d78c:	0018      	movs	r0, r3
 801d78e:	f7f6 f843 	bl	8013818 <HAL_PCD_Start>
 801d792:	0003      	movs	r3, r0
 801d794:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d796:	19bc      	adds	r4, r7, r6
 801d798:	197b      	adds	r3, r7, r5
 801d79a:	781b      	ldrb	r3, [r3, #0]
 801d79c:	0018      	movs	r0, r3
 801d79e:	f000 f9bc 	bl	801db1a <USBD_Get_USB_Status>
 801d7a2:	0003      	movs	r3, r0
 801d7a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d7a6:	19bb      	adds	r3, r7, r6
 801d7a8:	781b      	ldrb	r3, [r3, #0]
}
 801d7aa:	0018      	movs	r0, r3
 801d7ac:	46bd      	mov	sp, r7
 801d7ae:	b005      	add	sp, #20
 801d7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d7b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d7b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7b4:	b085      	sub	sp, #20
 801d7b6:	af00      	add	r7, sp, #0
 801d7b8:	6078      	str	r0, [r7, #4]
 801d7ba:	000c      	movs	r4, r1
 801d7bc:	0010      	movs	r0, r2
 801d7be:	0019      	movs	r1, r3
 801d7c0:	1cfb      	adds	r3, r7, #3
 801d7c2:	1c22      	adds	r2, r4, #0
 801d7c4:	701a      	strb	r2, [r3, #0]
 801d7c6:	1cbb      	adds	r3, r7, #2
 801d7c8:	1c02      	adds	r2, r0, #0
 801d7ca:	701a      	strb	r2, [r3, #0]
 801d7cc:	003b      	movs	r3, r7
 801d7ce:	1c0a      	adds	r2, r1, #0
 801d7d0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d7d2:	260f      	movs	r6, #15
 801d7d4:	19bb      	adds	r3, r7, r6
 801d7d6:	2200      	movs	r2, #0
 801d7d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d7da:	250e      	movs	r5, #14
 801d7dc:	197b      	adds	r3, r7, r5
 801d7de:	2200      	movs	r2, #0
 801d7e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d7e2:	687a      	ldr	r2, [r7, #4]
 801d7e4:	23b0      	movs	r3, #176	@ 0xb0
 801d7e6:	009b      	lsls	r3, r3, #2
 801d7e8:	58d0      	ldr	r0, [r2, r3]
 801d7ea:	19bc      	adds	r4, r7, r6
 801d7ec:	1cbb      	adds	r3, r7, #2
 801d7ee:	781d      	ldrb	r5, [r3, #0]
 801d7f0:	003b      	movs	r3, r7
 801d7f2:	881a      	ldrh	r2, [r3, #0]
 801d7f4:	1cfb      	adds	r3, r7, #3
 801d7f6:	7819      	ldrb	r1, [r3, #0]
 801d7f8:	002b      	movs	r3, r5
 801d7fa:	f7f6 f9a2 	bl	8013b42 <HAL_PCD_EP_Open>
 801d7fe:	0003      	movs	r3, r0
 801d800:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d802:	250e      	movs	r5, #14
 801d804:	197c      	adds	r4, r7, r5
 801d806:	19bb      	adds	r3, r7, r6
 801d808:	781b      	ldrb	r3, [r3, #0]
 801d80a:	0018      	movs	r0, r3
 801d80c:	f000 f985 	bl	801db1a <USBD_Get_USB_Status>
 801d810:	0003      	movs	r3, r0
 801d812:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d814:	197b      	adds	r3, r7, r5
 801d816:	781b      	ldrb	r3, [r3, #0]
}
 801d818:	0018      	movs	r0, r3
 801d81a:	46bd      	mov	sp, r7
 801d81c:	b005      	add	sp, #20
 801d81e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d820 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d820:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d822:	b085      	sub	sp, #20
 801d824:	af00      	add	r7, sp, #0
 801d826:	6078      	str	r0, [r7, #4]
 801d828:	000a      	movs	r2, r1
 801d82a:	1cfb      	adds	r3, r7, #3
 801d82c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d82e:	210f      	movs	r1, #15
 801d830:	187b      	adds	r3, r7, r1
 801d832:	2200      	movs	r2, #0
 801d834:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d836:	260e      	movs	r6, #14
 801d838:	19bb      	adds	r3, r7, r6
 801d83a:	2200      	movs	r2, #0
 801d83c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d83e:	687a      	ldr	r2, [r7, #4]
 801d840:	23b0      	movs	r3, #176	@ 0xb0
 801d842:	009b      	lsls	r3, r3, #2
 801d844:	58d2      	ldr	r2, [r2, r3]
 801d846:	000d      	movs	r5, r1
 801d848:	187c      	adds	r4, r7, r1
 801d84a:	1cfb      	adds	r3, r7, #3
 801d84c:	781b      	ldrb	r3, [r3, #0]
 801d84e:	0019      	movs	r1, r3
 801d850:	0010      	movs	r0, r2
 801d852:	f7f6 f9e5 	bl	8013c20 <HAL_PCD_EP_Close>
 801d856:	0003      	movs	r3, r0
 801d858:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d85a:	19bc      	adds	r4, r7, r6
 801d85c:	197b      	adds	r3, r7, r5
 801d85e:	781b      	ldrb	r3, [r3, #0]
 801d860:	0018      	movs	r0, r3
 801d862:	f000 f95a 	bl	801db1a <USBD_Get_USB_Status>
 801d866:	0003      	movs	r3, r0
 801d868:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d86a:	19bb      	adds	r3, r7, r6
 801d86c:	781b      	ldrb	r3, [r3, #0]
}
 801d86e:	0018      	movs	r0, r3
 801d870:	46bd      	mov	sp, r7
 801d872:	b005      	add	sp, #20
 801d874:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d876 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d876:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d878:	b085      	sub	sp, #20
 801d87a:	af00      	add	r7, sp, #0
 801d87c:	6078      	str	r0, [r7, #4]
 801d87e:	000a      	movs	r2, r1
 801d880:	1cfb      	adds	r3, r7, #3
 801d882:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d884:	210f      	movs	r1, #15
 801d886:	187b      	adds	r3, r7, r1
 801d888:	2200      	movs	r2, #0
 801d88a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d88c:	260e      	movs	r6, #14
 801d88e:	19bb      	adds	r3, r7, r6
 801d890:	2200      	movs	r2, #0
 801d892:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d894:	687a      	ldr	r2, [r7, #4]
 801d896:	23b0      	movs	r3, #176	@ 0xb0
 801d898:	009b      	lsls	r3, r3, #2
 801d89a:	58d2      	ldr	r2, [r2, r3]
 801d89c:	000d      	movs	r5, r1
 801d89e:	187c      	adds	r4, r7, r1
 801d8a0:	1cfb      	adds	r3, r7, #3
 801d8a2:	781b      	ldrb	r3, [r3, #0]
 801d8a4:	0019      	movs	r1, r3
 801d8a6:	0010      	movs	r0, r2
 801d8a8:	f7f6 fa97 	bl	8013dda <HAL_PCD_EP_SetStall>
 801d8ac:	0003      	movs	r3, r0
 801d8ae:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d8b0:	19bc      	adds	r4, r7, r6
 801d8b2:	197b      	adds	r3, r7, r5
 801d8b4:	781b      	ldrb	r3, [r3, #0]
 801d8b6:	0018      	movs	r0, r3
 801d8b8:	f000 f92f 	bl	801db1a <USBD_Get_USB_Status>
 801d8bc:	0003      	movs	r3, r0
 801d8be:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d8c0:	19bb      	adds	r3, r7, r6
 801d8c2:	781b      	ldrb	r3, [r3, #0]
}
 801d8c4:	0018      	movs	r0, r3
 801d8c6:	46bd      	mov	sp, r7
 801d8c8:	b005      	add	sp, #20
 801d8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d8cc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8ce:	b085      	sub	sp, #20
 801d8d0:	af00      	add	r7, sp, #0
 801d8d2:	6078      	str	r0, [r7, #4]
 801d8d4:	000a      	movs	r2, r1
 801d8d6:	1cfb      	adds	r3, r7, #3
 801d8d8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d8da:	210f      	movs	r1, #15
 801d8dc:	187b      	adds	r3, r7, r1
 801d8de:	2200      	movs	r2, #0
 801d8e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d8e2:	260e      	movs	r6, #14
 801d8e4:	19bb      	adds	r3, r7, r6
 801d8e6:	2200      	movs	r2, #0
 801d8e8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d8ea:	687a      	ldr	r2, [r7, #4]
 801d8ec:	23b0      	movs	r3, #176	@ 0xb0
 801d8ee:	009b      	lsls	r3, r3, #2
 801d8f0:	58d2      	ldr	r2, [r2, r3]
 801d8f2:	000d      	movs	r5, r1
 801d8f4:	187c      	adds	r4, r7, r1
 801d8f6:	1cfb      	adds	r3, r7, #3
 801d8f8:	781b      	ldrb	r3, [r3, #0]
 801d8fa:	0019      	movs	r1, r3
 801d8fc:	0010      	movs	r0, r2
 801d8fe:	f7f6 fac8 	bl	8013e92 <HAL_PCD_EP_ClrStall>
 801d902:	0003      	movs	r3, r0
 801d904:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d906:	19bc      	adds	r4, r7, r6
 801d908:	197b      	adds	r3, r7, r5
 801d90a:	781b      	ldrb	r3, [r3, #0]
 801d90c:	0018      	movs	r0, r3
 801d90e:	f000 f904 	bl	801db1a <USBD_Get_USB_Status>
 801d912:	0003      	movs	r3, r0
 801d914:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d916:	19bb      	adds	r3, r7, r6
 801d918:	781b      	ldrb	r3, [r3, #0]
}
 801d91a:	0018      	movs	r0, r3
 801d91c:	46bd      	mov	sp, r7
 801d91e:	b005      	add	sp, #20
 801d920:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d922 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d922:	b580      	push	{r7, lr}
 801d924:	b084      	sub	sp, #16
 801d926:	af00      	add	r7, sp, #0
 801d928:	6078      	str	r0, [r7, #4]
 801d92a:	000a      	movs	r2, r1
 801d92c:	1cfb      	adds	r3, r7, #3
 801d92e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d930:	687a      	ldr	r2, [r7, #4]
 801d932:	23b0      	movs	r3, #176	@ 0xb0
 801d934:	009b      	lsls	r3, r3, #2
 801d936:	58d3      	ldr	r3, [r2, r3]
 801d938:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d93a:	1cfb      	adds	r3, r7, #3
 801d93c:	781b      	ldrb	r3, [r3, #0]
 801d93e:	b25b      	sxtb	r3, r3
 801d940:	2b00      	cmp	r3, #0
 801d942:	da0d      	bge.n	801d960 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d944:	1cfb      	adds	r3, r7, #3
 801d946:	781b      	ldrb	r3, [r3, #0]
 801d948:	227f      	movs	r2, #127	@ 0x7f
 801d94a:	4013      	ands	r3, r2
 801d94c:	68f9      	ldr	r1, [r7, #12]
 801d94e:	1c5a      	adds	r2, r3, #1
 801d950:	0013      	movs	r3, r2
 801d952:	009b      	lsls	r3, r3, #2
 801d954:	189b      	adds	r3, r3, r2
 801d956:	00db      	lsls	r3, r3, #3
 801d958:	18cb      	adds	r3, r1, r3
 801d95a:	3302      	adds	r3, #2
 801d95c:	781b      	ldrb	r3, [r3, #0]
 801d95e:	e00d      	b.n	801d97c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d960:	1cfb      	adds	r3, r7, #3
 801d962:	781b      	ldrb	r3, [r3, #0]
 801d964:	227f      	movs	r2, #127	@ 0x7f
 801d966:	401a      	ands	r2, r3
 801d968:	68f8      	ldr	r0, [r7, #12]
 801d96a:	23b5      	movs	r3, #181	@ 0xb5
 801d96c:	0059      	lsls	r1, r3, #1
 801d96e:	0013      	movs	r3, r2
 801d970:	009b      	lsls	r3, r3, #2
 801d972:	189b      	adds	r3, r3, r2
 801d974:	00db      	lsls	r3, r3, #3
 801d976:	18c3      	adds	r3, r0, r3
 801d978:	185b      	adds	r3, r3, r1
 801d97a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d97c:	0018      	movs	r0, r3
 801d97e:	46bd      	mov	sp, r7
 801d980:	b004      	add	sp, #16
 801d982:	bd80      	pop	{r7, pc}

0801d984 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d984:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d986:	b085      	sub	sp, #20
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]
 801d98c:	000a      	movs	r2, r1
 801d98e:	1cfb      	adds	r3, r7, #3
 801d990:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d992:	210f      	movs	r1, #15
 801d994:	187b      	adds	r3, r7, r1
 801d996:	2200      	movs	r2, #0
 801d998:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d99a:	260e      	movs	r6, #14
 801d99c:	19bb      	adds	r3, r7, r6
 801d99e:	2200      	movs	r2, #0
 801d9a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d9a2:	687a      	ldr	r2, [r7, #4]
 801d9a4:	23b0      	movs	r3, #176	@ 0xb0
 801d9a6:	009b      	lsls	r3, r3, #2
 801d9a8:	58d2      	ldr	r2, [r2, r3]
 801d9aa:	000d      	movs	r5, r1
 801d9ac:	187c      	adds	r4, r7, r1
 801d9ae:	1cfb      	adds	r3, r7, #3
 801d9b0:	781b      	ldrb	r3, [r3, #0]
 801d9b2:	0019      	movs	r1, r3
 801d9b4:	0010      	movs	r0, r2
 801d9b6:	f7f6 f899 	bl	8013aec <HAL_PCD_SetAddress>
 801d9ba:	0003      	movs	r3, r0
 801d9bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d9be:	19bc      	adds	r4, r7, r6
 801d9c0:	197b      	adds	r3, r7, r5
 801d9c2:	781b      	ldrb	r3, [r3, #0]
 801d9c4:	0018      	movs	r0, r3
 801d9c6:	f000 f8a8 	bl	801db1a <USBD_Get_USB_Status>
 801d9ca:	0003      	movs	r3, r0
 801d9cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d9ce:	19bb      	adds	r3, r7, r6
 801d9d0:	781b      	ldrb	r3, [r3, #0]
}
 801d9d2:	0018      	movs	r0, r3
 801d9d4:	46bd      	mov	sp, r7
 801d9d6:	b005      	add	sp, #20
 801d9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d9da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d9da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9dc:	b087      	sub	sp, #28
 801d9de:	af00      	add	r7, sp, #0
 801d9e0:	60f8      	str	r0, [r7, #12]
 801d9e2:	0008      	movs	r0, r1
 801d9e4:	607a      	str	r2, [r7, #4]
 801d9e6:	0019      	movs	r1, r3
 801d9e8:	230b      	movs	r3, #11
 801d9ea:	18fb      	adds	r3, r7, r3
 801d9ec:	1c02      	adds	r2, r0, #0
 801d9ee:	701a      	strb	r2, [r3, #0]
 801d9f0:	2408      	movs	r4, #8
 801d9f2:	193b      	adds	r3, r7, r4
 801d9f4:	1c0a      	adds	r2, r1, #0
 801d9f6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d9f8:	2117      	movs	r1, #23
 801d9fa:	187b      	adds	r3, r7, r1
 801d9fc:	2200      	movs	r2, #0
 801d9fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da00:	2516      	movs	r5, #22
 801da02:	197b      	adds	r3, r7, r5
 801da04:	2200      	movs	r2, #0
 801da06:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801da08:	68fa      	ldr	r2, [r7, #12]
 801da0a:	23b0      	movs	r3, #176	@ 0xb0
 801da0c:	009b      	lsls	r3, r3, #2
 801da0e:	58d0      	ldr	r0, [r2, r3]
 801da10:	193b      	adds	r3, r7, r4
 801da12:	881d      	ldrh	r5, [r3, #0]
 801da14:	000e      	movs	r6, r1
 801da16:	187c      	adds	r4, r7, r1
 801da18:	687a      	ldr	r2, [r7, #4]
 801da1a:	230b      	movs	r3, #11
 801da1c:	18fb      	adds	r3, r7, r3
 801da1e:	7819      	ldrb	r1, [r3, #0]
 801da20:	002b      	movs	r3, r5
 801da22:	f7f6 f99e 	bl	8013d62 <HAL_PCD_EP_Transmit>
 801da26:	0003      	movs	r3, r0
 801da28:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801da2a:	2516      	movs	r5, #22
 801da2c:	197c      	adds	r4, r7, r5
 801da2e:	19bb      	adds	r3, r7, r6
 801da30:	781b      	ldrb	r3, [r3, #0]
 801da32:	0018      	movs	r0, r3
 801da34:	f000 f871 	bl	801db1a <USBD_Get_USB_Status>
 801da38:	0003      	movs	r3, r0
 801da3a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801da3c:	197b      	adds	r3, r7, r5
 801da3e:	781b      	ldrb	r3, [r3, #0]
}
 801da40:	0018      	movs	r0, r3
 801da42:	46bd      	mov	sp, r7
 801da44:	b007      	add	sp, #28
 801da46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801da48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801da48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da4a:	b087      	sub	sp, #28
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	60f8      	str	r0, [r7, #12]
 801da50:	0008      	movs	r0, r1
 801da52:	607a      	str	r2, [r7, #4]
 801da54:	0019      	movs	r1, r3
 801da56:	230b      	movs	r3, #11
 801da58:	18fb      	adds	r3, r7, r3
 801da5a:	1c02      	adds	r2, r0, #0
 801da5c:	701a      	strb	r2, [r3, #0]
 801da5e:	2408      	movs	r4, #8
 801da60:	193b      	adds	r3, r7, r4
 801da62:	1c0a      	adds	r2, r1, #0
 801da64:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801da66:	2117      	movs	r1, #23
 801da68:	187b      	adds	r3, r7, r1
 801da6a:	2200      	movs	r2, #0
 801da6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801da6e:	2516      	movs	r5, #22
 801da70:	197b      	adds	r3, r7, r5
 801da72:	2200      	movs	r2, #0
 801da74:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801da76:	68fa      	ldr	r2, [r7, #12]
 801da78:	23b0      	movs	r3, #176	@ 0xb0
 801da7a:	009b      	lsls	r3, r3, #2
 801da7c:	58d0      	ldr	r0, [r2, r3]
 801da7e:	193b      	adds	r3, r7, r4
 801da80:	881d      	ldrh	r5, [r3, #0]
 801da82:	000e      	movs	r6, r1
 801da84:	187c      	adds	r4, r7, r1
 801da86:	687a      	ldr	r2, [r7, #4]
 801da88:	230b      	movs	r3, #11
 801da8a:	18fb      	adds	r3, r7, r3
 801da8c:	7819      	ldrb	r1, [r3, #0]
 801da8e:	002b      	movs	r3, r5
 801da90:	f7f6 f917 	bl	8013cc2 <HAL_PCD_EP_Receive>
 801da94:	0003      	movs	r3, r0
 801da96:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801da98:	2516      	movs	r5, #22
 801da9a:	197c      	adds	r4, r7, r5
 801da9c:	19bb      	adds	r3, r7, r6
 801da9e:	781b      	ldrb	r3, [r3, #0]
 801daa0:	0018      	movs	r0, r3
 801daa2:	f000 f83a 	bl	801db1a <USBD_Get_USB_Status>
 801daa6:	0003      	movs	r3, r0
 801daa8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801daaa:	197b      	adds	r3, r7, r5
 801daac:	781b      	ldrb	r3, [r3, #0]
}
 801daae:	0018      	movs	r0, r3
 801dab0:	46bd      	mov	sp, r7
 801dab2:	b007      	add	sp, #28
 801dab4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dab6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dab6:	b580      	push	{r7, lr}
 801dab8:	b082      	sub	sp, #8
 801daba:	af00      	add	r7, sp, #0
 801dabc:	6078      	str	r0, [r7, #4]
 801dabe:	000a      	movs	r2, r1
 801dac0:	1cfb      	adds	r3, r7, #3
 801dac2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801dac4:	687a      	ldr	r2, [r7, #4]
 801dac6:	23b0      	movs	r3, #176	@ 0xb0
 801dac8:	009b      	lsls	r3, r3, #2
 801daca:	58d2      	ldr	r2, [r2, r3]
 801dacc:	1cfb      	adds	r3, r7, #3
 801dace:	781b      	ldrb	r3, [r3, #0]
 801dad0:	0019      	movs	r1, r3
 801dad2:	0010      	movs	r0, r2
 801dad4:	f7f6 f92c 	bl	8013d30 <HAL_PCD_EP_GetRxCount>
 801dad8:	0003      	movs	r3, r0
}
 801dada:	0018      	movs	r0, r3
 801dadc:	46bd      	mov	sp, r7
 801dade:	b002      	add	sp, #8
 801dae0:	bd80      	pop	{r7, pc}
	...

0801dae4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801dae4:	b580      	push	{r7, lr}
 801dae6:	b082      	sub	sp, #8
 801dae8:	af00      	add	r7, sp, #0
 801daea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801daec:	4b02      	ldr	r3, [pc, #8]	@ (801daf8 <USBD_static_malloc+0x14>)
}
 801daee:	0018      	movs	r0, r3
 801daf0:	46bd      	mov	sp, r7
 801daf2:	b002      	add	sp, #8
 801daf4:	bd80      	pop	{r7, pc}
 801daf6:	46c0      	nop			@ (mov r8, r8)
 801daf8:	2000306c 	.word	0x2000306c

0801dafc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801dafc:	b580      	push	{r7, lr}
 801dafe:	b082      	sub	sp, #8
 801db00:	af00      	add	r7, sp, #0
 801db02:	6078      	str	r0, [r7, #4]

}
 801db04:	46c0      	nop			@ (mov r8, r8)
 801db06:	46bd      	mov	sp, r7
 801db08:	b002      	add	sp, #8
 801db0a:	bd80      	pop	{r7, pc}

0801db0c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801db0c:	b580      	push	{r7, lr}
 801db0e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801db10:	f7ea fc58 	bl	80083c4 <SystemClock_Config>
}
 801db14:	46c0      	nop			@ (mov r8, r8)
 801db16:	46bd      	mov	sp, r7
 801db18:	bd80      	pop	{r7, pc}

0801db1a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801db1a:	b580      	push	{r7, lr}
 801db1c:	b084      	sub	sp, #16
 801db1e:	af00      	add	r7, sp, #0
 801db20:	0002      	movs	r2, r0
 801db22:	1dfb      	adds	r3, r7, #7
 801db24:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801db26:	230f      	movs	r3, #15
 801db28:	18fb      	adds	r3, r7, r3
 801db2a:	2200      	movs	r2, #0
 801db2c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801db2e:	1dfb      	adds	r3, r7, #7
 801db30:	781b      	ldrb	r3, [r3, #0]
 801db32:	2b03      	cmp	r3, #3
 801db34:	d017      	beq.n	801db66 <USBD_Get_USB_Status+0x4c>
 801db36:	dc1b      	bgt.n	801db70 <USBD_Get_USB_Status+0x56>
 801db38:	2b02      	cmp	r3, #2
 801db3a:	d00f      	beq.n	801db5c <USBD_Get_USB_Status+0x42>
 801db3c:	dc18      	bgt.n	801db70 <USBD_Get_USB_Status+0x56>
 801db3e:	2b00      	cmp	r3, #0
 801db40:	d002      	beq.n	801db48 <USBD_Get_USB_Status+0x2e>
 801db42:	2b01      	cmp	r3, #1
 801db44:	d005      	beq.n	801db52 <USBD_Get_USB_Status+0x38>
 801db46:	e013      	b.n	801db70 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801db48:	230f      	movs	r3, #15
 801db4a:	18fb      	adds	r3, r7, r3
 801db4c:	2200      	movs	r2, #0
 801db4e:	701a      	strb	r2, [r3, #0]
    break;
 801db50:	e013      	b.n	801db7a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801db52:	230f      	movs	r3, #15
 801db54:	18fb      	adds	r3, r7, r3
 801db56:	2202      	movs	r2, #2
 801db58:	701a      	strb	r2, [r3, #0]
    break;
 801db5a:	e00e      	b.n	801db7a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801db5c:	230f      	movs	r3, #15
 801db5e:	18fb      	adds	r3, r7, r3
 801db60:	2201      	movs	r2, #1
 801db62:	701a      	strb	r2, [r3, #0]
    break;
 801db64:	e009      	b.n	801db7a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801db66:	230f      	movs	r3, #15
 801db68:	18fb      	adds	r3, r7, r3
 801db6a:	2202      	movs	r2, #2
 801db6c:	701a      	strb	r2, [r3, #0]
    break;
 801db6e:	e004      	b.n	801db7a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801db70:	230f      	movs	r3, #15
 801db72:	18fb      	adds	r3, r7, r3
 801db74:	2202      	movs	r2, #2
 801db76:	701a      	strb	r2, [r3, #0]
    break;
 801db78:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801db7a:	230f      	movs	r3, #15
 801db7c:	18fb      	adds	r3, r7, r3
 801db7e:	781b      	ldrb	r3, [r3, #0]
}
 801db80:	0018      	movs	r0, r3
 801db82:	46bd      	mov	sp, r7
 801db84:	b004      	add	sp, #16
 801db86:	bd80      	pop	{r7, pc}

0801db88 <arm_cfft_radix4by2_q31>:
 801db88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db8a:	465f      	mov	r7, fp
 801db8c:	4656      	mov	r6, sl
 801db8e:	464d      	mov	r5, r9
 801db90:	4644      	mov	r4, r8
 801db92:	000b      	movs	r3, r1
 801db94:	b4f0      	push	{r4, r5, r6, r7}
 801db96:	085b      	lsrs	r3, r3, #1
 801db98:	b08f      	sub	sp, #60	@ 0x3c
 801db9a:	910a      	str	r1, [sp, #40]	@ 0x28
 801db9c:	0007      	movs	r7, r0
 801db9e:	9009      	str	r0, [sp, #36]	@ 0x24
 801dba0:	0011      	movs	r1, r2
 801dba2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801dba4:	930c      	str	r3, [sp, #48]	@ 0x30
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d100      	bne.n	801dbac <arm_cfft_radix4by2_q31+0x24>
 801dbaa:	e0a0      	b.n	801dcee <arm_cfft_radix4by2_q31+0x166>
 801dbac:	0002      	movs	r2, r0
 801dbae:	00db      	lsls	r3, r3, #3
 801dbb0:	3204      	adds	r2, #4
 801dbb2:	4691      	mov	r9, r2
 801dbb4:	4698      	mov	r8, r3
 801dbb6:	000a      	movs	r2, r1
 801dbb8:	464e      	mov	r6, r9
 801dbba:	4442      	add	r2, r8
 801dbbc:	4699      	mov	r9, r3
 801dbbe:	4688      	mov	r8, r1
 801dbc0:	9208      	str	r2, [sp, #32]
 801dbc2:	900d      	str	r0, [sp, #52]	@ 0x34
 801dbc4:	4643      	mov	r3, r8
 801dbc6:	681b      	ldr	r3, [r3, #0]
 801dbc8:	469b      	mov	fp, r3
 801dbca:	4643      	mov	r3, r8
 801dbcc:	685b      	ldr	r3, [r3, #4]
 801dbce:	469a      	mov	sl, r3
 801dbd0:	683b      	ldr	r3, [r7, #0]
 801dbd2:	109c      	asrs	r4, r3, #2
 801dbd4:	464b      	mov	r3, r9
 801dbd6:	58fb      	ldr	r3, [r7, r3]
 801dbd8:	109a      	asrs	r2, r3, #2
 801dbda:	18a3      	adds	r3, r4, r2
 801dbdc:	603b      	str	r3, [r7, #0]
 801dbde:	6833      	ldr	r3, [r6, #0]
 801dbe0:	1aa4      	subs	r4, r4, r2
 801dbe2:	109d      	asrs	r5, r3, #2
 801dbe4:	464b      	mov	r3, r9
 801dbe6:	58f3      	ldr	r3, [r6, r3]
 801dbe8:	17e2      	asrs	r2, r4, #31
 801dbea:	109b      	asrs	r3, r3, #2
 801dbec:	18e9      	adds	r1, r5, r3
 801dbee:	6031      	str	r1, [r6, #0]
 801dbf0:	0011      	movs	r1, r2
 801dbf2:	465a      	mov	r2, fp
 801dbf4:	17d2      	asrs	r2, r2, #31
 801dbf6:	0010      	movs	r0, r2
 801dbf8:	4652      	mov	r2, sl
 801dbfa:	1aed      	subs	r5, r5, r3
 801dbfc:	17eb      	asrs	r3, r5, #31
 801dbfe:	17d2      	asrs	r2, r2, #31
 801dc00:	9307      	str	r3, [sp, #28]
 801dc02:	9204      	str	r2, [sp, #16]
 801dc04:	0003      	movs	r3, r0
 801dc06:	465a      	mov	r2, fp
 801dc08:	9006      	str	r0, [sp, #24]
 801dc0a:	0020      	movs	r0, r4
 801dc0c:	9105      	str	r1, [sp, #20]
 801dc0e:	f7e2 fcd7 	bl	80005c0 <__aeabi_lmul>
 801dc12:	2280      	movs	r2, #128	@ 0x80
 801dc14:	2300      	movs	r3, #0
 801dc16:	0612      	lsls	r2, r2, #24
 801dc18:	1880      	adds	r0, r0, r2
 801dc1a:	4159      	adcs	r1, r3
 801dc1c:	2300      	movs	r3, #0
 801dc1e:	9101      	str	r1, [sp, #4]
 801dc20:	9300      	str	r3, [sp, #0]
 801dc22:	4652      	mov	r2, sl
 801dc24:	9b04      	ldr	r3, [sp, #16]
 801dc26:	0028      	movs	r0, r5
 801dc28:	17e9      	asrs	r1, r5, #31
 801dc2a:	f7e2 fcc9 	bl	80005c0 <__aeabi_lmul>
 801dc2e:	9a00      	ldr	r2, [sp, #0]
 801dc30:	9b01      	ldr	r3, [sp, #4]
 801dc32:	1880      	adds	r0, r0, r2
 801dc34:	4159      	adcs	r1, r3
 801dc36:	2280      	movs	r2, #128	@ 0x80
 801dc38:	2300      	movs	r3, #0
 801dc3a:	0612      	lsls	r2, r2, #24
 801dc3c:	1880      	adds	r0, r0, r2
 801dc3e:	4159      	adcs	r1, r3
 801dc40:	464a      	mov	r2, r9
 801dc42:	004b      	lsls	r3, r1, #1
 801dc44:	50bb      	str	r3, [r7, r2]
 801dc46:	4658      	mov	r0, fp
 801dc48:	002a      	movs	r2, r5
 801dc4a:	9b07      	ldr	r3, [sp, #28]
 801dc4c:	9906      	ldr	r1, [sp, #24]
 801dc4e:	f7e2 fcb7 	bl	80005c0 <__aeabi_lmul>
 801dc52:	2280      	movs	r2, #128	@ 0x80
 801dc54:	2300      	movs	r3, #0
 801dc56:	0612      	lsls	r2, r2, #24
 801dc58:	1880      	adds	r0, r0, r2
 801dc5a:	4159      	adcs	r1, r3
 801dc5c:	2000      	movs	r0, #0
 801dc5e:	9103      	str	r1, [sp, #12]
 801dc60:	9002      	str	r0, [sp, #8]
 801dc62:	4652      	mov	r2, sl
 801dc64:	9b04      	ldr	r3, [sp, #16]
 801dc66:	0020      	movs	r0, r4
 801dc68:	9905      	ldr	r1, [sp, #20]
 801dc6a:	f7e2 fca9 	bl	80005c0 <__aeabi_lmul>
 801dc6e:	9a02      	ldr	r2, [sp, #8]
 801dc70:	9b03      	ldr	r3, [sp, #12]
 801dc72:	1a12      	subs	r2, r2, r0
 801dc74:	418b      	sbcs	r3, r1
 801dc76:	2080      	movs	r0, #128	@ 0x80
 801dc78:	2100      	movs	r1, #0
 801dc7a:	0600      	lsls	r0, r0, #24
 801dc7c:	1812      	adds	r2, r2, r0
 801dc7e:	414b      	adcs	r3, r1
 801dc80:	464a      	mov	r2, r9
 801dc82:	005b      	lsls	r3, r3, #1
 801dc84:	50b3      	str	r3, [r6, r2]
 801dc86:	2308      	movs	r3, #8
 801dc88:	469c      	mov	ip, r3
 801dc8a:	9b08      	ldr	r3, [sp, #32]
 801dc8c:	44e0      	add	r8, ip
 801dc8e:	3708      	adds	r7, #8
 801dc90:	3608      	adds	r6, #8
 801dc92:	4598      	cmp	r8, r3
 801dc94:	d196      	bne.n	801dbc4 <arm_cfft_radix4by2_q31+0x3c>
 801dc96:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801dc98:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801dc9a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801dc9c:	2302      	movs	r3, #2
 801dc9e:	003a      	movs	r2, r7
 801dca0:	0029      	movs	r1, r5
 801dca2:	0020      	movs	r0, r4
 801dca4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801dca6:	f000 f957 	bl	801df58 <arm_radix4_butterfly_q31>
 801dcaa:	46a4      	mov	ip, r4
 801dcac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dcae:	2302      	movs	r3, #2
 801dcb0:	0088      	lsls	r0, r1, #2
 801dcb2:	4460      	add	r0, ip
 801dcb4:	003a      	movs	r2, r7
 801dcb6:	0029      	movs	r1, r5
 801dcb8:	f000 f94e 	bl	801df58 <arm_radix4_butterfly_q31>
 801dcbc:	46a4      	mov	ip, r4
 801dcbe:	0128      	lsls	r0, r5, #4
 801dcc0:	4460      	add	r0, ip
 801dcc2:	6833      	ldr	r3, [r6, #0]
 801dcc4:	005b      	lsls	r3, r3, #1
 801dcc6:	6033      	str	r3, [r6, #0]
 801dcc8:	6873      	ldr	r3, [r6, #4]
 801dcca:	005b      	lsls	r3, r3, #1
 801dccc:	6073      	str	r3, [r6, #4]
 801dcce:	68b3      	ldr	r3, [r6, #8]
 801dcd0:	005b      	lsls	r3, r3, #1
 801dcd2:	60b3      	str	r3, [r6, #8]
 801dcd4:	68f3      	ldr	r3, [r6, #12]
 801dcd6:	005b      	lsls	r3, r3, #1
 801dcd8:	60f3      	str	r3, [r6, #12]
 801dcda:	3610      	adds	r6, #16
 801dcdc:	42b0      	cmp	r0, r6
 801dcde:	d1f0      	bne.n	801dcc2 <arm_cfft_radix4by2_q31+0x13a>
 801dce0:	b00f      	add	sp, #60	@ 0x3c
 801dce2:	bc3c      	pop	{r2, r3, r4, r5}
 801dce4:	4690      	mov	r8, r2
 801dce6:	4699      	mov	r9, r3
 801dce8:	46a2      	mov	sl, r4
 801dcea:	46ab      	mov	fp, r5
 801dcec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dcee:	2302      	movs	r3, #2
 801dcf0:	2100      	movs	r1, #0
 801dcf2:	0015      	movs	r5, r2
 801dcf4:	f000 f930 	bl	801df58 <arm_radix4_butterfly_q31>
 801dcf8:	46bc      	mov	ip, r7
 801dcfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dcfc:	002a      	movs	r2, r5
 801dcfe:	0098      	lsls	r0, r3, #2
 801dd00:	4460      	add	r0, ip
 801dd02:	2302      	movs	r3, #2
 801dd04:	2100      	movs	r1, #0
 801dd06:	f000 f927 	bl	801df58 <arm_radix4_butterfly_q31>
 801dd0a:	e7e9      	b.n	801dce0 <arm_cfft_radix4by2_q31+0x158>

0801dd0c <arm_cfft_radix4by2_inverse_q31>:
 801dd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dd0e:	465f      	mov	r7, fp
 801dd10:	4656      	mov	r6, sl
 801dd12:	464d      	mov	r5, r9
 801dd14:	4644      	mov	r4, r8
 801dd16:	000b      	movs	r3, r1
 801dd18:	b4f0      	push	{r4, r5, r6, r7}
 801dd1a:	085b      	lsrs	r3, r3, #1
 801dd1c:	b08f      	sub	sp, #60	@ 0x3c
 801dd1e:	910a      	str	r1, [sp, #40]	@ 0x28
 801dd20:	0007      	movs	r7, r0
 801dd22:	9009      	str	r0, [sp, #36]	@ 0x24
 801dd24:	0011      	movs	r1, r2
 801dd26:	920b      	str	r2, [sp, #44]	@ 0x2c
 801dd28:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd2a:	2b00      	cmp	r3, #0
 801dd2c:	d100      	bne.n	801dd30 <arm_cfft_radix4by2_inverse_q31+0x24>
 801dd2e:	e0a0      	b.n	801de72 <arm_cfft_radix4by2_inverse_q31+0x166>
 801dd30:	0002      	movs	r2, r0
 801dd32:	00db      	lsls	r3, r3, #3
 801dd34:	3204      	adds	r2, #4
 801dd36:	4691      	mov	r9, r2
 801dd38:	4698      	mov	r8, r3
 801dd3a:	000a      	movs	r2, r1
 801dd3c:	464e      	mov	r6, r9
 801dd3e:	4442      	add	r2, r8
 801dd40:	4699      	mov	r9, r3
 801dd42:	4688      	mov	r8, r1
 801dd44:	9208      	str	r2, [sp, #32]
 801dd46:	900d      	str	r0, [sp, #52]	@ 0x34
 801dd48:	4643      	mov	r3, r8
 801dd4a:	681b      	ldr	r3, [r3, #0]
 801dd4c:	469b      	mov	fp, r3
 801dd4e:	4643      	mov	r3, r8
 801dd50:	685b      	ldr	r3, [r3, #4]
 801dd52:	469a      	mov	sl, r3
 801dd54:	683b      	ldr	r3, [r7, #0]
 801dd56:	109c      	asrs	r4, r3, #2
 801dd58:	464b      	mov	r3, r9
 801dd5a:	58fb      	ldr	r3, [r7, r3]
 801dd5c:	109a      	asrs	r2, r3, #2
 801dd5e:	18a3      	adds	r3, r4, r2
 801dd60:	603b      	str	r3, [r7, #0]
 801dd62:	6833      	ldr	r3, [r6, #0]
 801dd64:	1aa4      	subs	r4, r4, r2
 801dd66:	109d      	asrs	r5, r3, #2
 801dd68:	464b      	mov	r3, r9
 801dd6a:	58f3      	ldr	r3, [r6, r3]
 801dd6c:	17e2      	asrs	r2, r4, #31
 801dd6e:	109b      	asrs	r3, r3, #2
 801dd70:	18e9      	adds	r1, r5, r3
 801dd72:	6031      	str	r1, [r6, #0]
 801dd74:	0011      	movs	r1, r2
 801dd76:	465a      	mov	r2, fp
 801dd78:	17d2      	asrs	r2, r2, #31
 801dd7a:	0010      	movs	r0, r2
 801dd7c:	4652      	mov	r2, sl
 801dd7e:	1aed      	subs	r5, r5, r3
 801dd80:	17eb      	asrs	r3, r5, #31
 801dd82:	17d2      	asrs	r2, r2, #31
 801dd84:	9307      	str	r3, [sp, #28]
 801dd86:	9204      	str	r2, [sp, #16]
 801dd88:	0003      	movs	r3, r0
 801dd8a:	465a      	mov	r2, fp
 801dd8c:	9006      	str	r0, [sp, #24]
 801dd8e:	0020      	movs	r0, r4
 801dd90:	9105      	str	r1, [sp, #20]
 801dd92:	f7e2 fc15 	bl	80005c0 <__aeabi_lmul>
 801dd96:	2280      	movs	r2, #128	@ 0x80
 801dd98:	2300      	movs	r3, #0
 801dd9a:	0612      	lsls	r2, r2, #24
 801dd9c:	1880      	adds	r0, r0, r2
 801dd9e:	4159      	adcs	r1, r3
 801dda0:	2300      	movs	r3, #0
 801dda2:	9101      	str	r1, [sp, #4]
 801dda4:	9300      	str	r3, [sp, #0]
 801dda6:	4652      	mov	r2, sl
 801dda8:	9b04      	ldr	r3, [sp, #16]
 801ddaa:	0028      	movs	r0, r5
 801ddac:	17e9      	asrs	r1, r5, #31
 801ddae:	f7e2 fc07 	bl	80005c0 <__aeabi_lmul>
 801ddb2:	9a00      	ldr	r2, [sp, #0]
 801ddb4:	9b01      	ldr	r3, [sp, #4]
 801ddb6:	1a12      	subs	r2, r2, r0
 801ddb8:	418b      	sbcs	r3, r1
 801ddba:	2080      	movs	r0, #128	@ 0x80
 801ddbc:	2100      	movs	r1, #0
 801ddbe:	0600      	lsls	r0, r0, #24
 801ddc0:	1812      	adds	r2, r2, r0
 801ddc2:	414b      	adcs	r3, r1
 801ddc4:	464a      	mov	r2, r9
 801ddc6:	005b      	lsls	r3, r3, #1
 801ddc8:	50bb      	str	r3, [r7, r2]
 801ddca:	4658      	mov	r0, fp
 801ddcc:	002a      	movs	r2, r5
 801ddce:	9b07      	ldr	r3, [sp, #28]
 801ddd0:	9906      	ldr	r1, [sp, #24]
 801ddd2:	f7e2 fbf5 	bl	80005c0 <__aeabi_lmul>
 801ddd6:	2280      	movs	r2, #128	@ 0x80
 801ddd8:	2300      	movs	r3, #0
 801ddda:	0612      	lsls	r2, r2, #24
 801dddc:	1880      	adds	r0, r0, r2
 801ddde:	4159      	adcs	r1, r3
 801dde0:	2000      	movs	r0, #0
 801dde2:	9103      	str	r1, [sp, #12]
 801dde4:	9002      	str	r0, [sp, #8]
 801dde6:	4652      	mov	r2, sl
 801dde8:	9b04      	ldr	r3, [sp, #16]
 801ddea:	0020      	movs	r0, r4
 801ddec:	9905      	ldr	r1, [sp, #20]
 801ddee:	f7e2 fbe7 	bl	80005c0 <__aeabi_lmul>
 801ddf2:	9b02      	ldr	r3, [sp, #8]
 801ddf4:	9c03      	ldr	r4, [sp, #12]
 801ddf6:	18c0      	adds	r0, r0, r3
 801ddf8:	4161      	adcs	r1, r4
 801ddfa:	2380      	movs	r3, #128	@ 0x80
 801ddfc:	2400      	movs	r4, #0
 801ddfe:	061b      	lsls	r3, r3, #24
 801de00:	18c0      	adds	r0, r0, r3
 801de02:	4161      	adcs	r1, r4
 801de04:	464a      	mov	r2, r9
 801de06:	004b      	lsls	r3, r1, #1
 801de08:	50b3      	str	r3, [r6, r2]
 801de0a:	2308      	movs	r3, #8
 801de0c:	469c      	mov	ip, r3
 801de0e:	9b08      	ldr	r3, [sp, #32]
 801de10:	44e0      	add	r8, ip
 801de12:	3708      	adds	r7, #8
 801de14:	3608      	adds	r6, #8
 801de16:	4598      	cmp	r8, r3
 801de18:	d196      	bne.n	801dd48 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801de1a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801de1c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801de1e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801de20:	2302      	movs	r3, #2
 801de22:	003a      	movs	r2, r7
 801de24:	0029      	movs	r1, r5
 801de26:	0020      	movs	r0, r4
 801de28:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801de2a:	f000 fb3b 	bl	801e4a4 <arm_radix4_butterfly_inverse_q31>
 801de2e:	46a4      	mov	ip, r4
 801de30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de32:	2302      	movs	r3, #2
 801de34:	0088      	lsls	r0, r1, #2
 801de36:	4460      	add	r0, ip
 801de38:	003a      	movs	r2, r7
 801de3a:	0029      	movs	r1, r5
 801de3c:	f000 fb32 	bl	801e4a4 <arm_radix4_butterfly_inverse_q31>
 801de40:	46a4      	mov	ip, r4
 801de42:	0128      	lsls	r0, r5, #4
 801de44:	4460      	add	r0, ip
 801de46:	6833      	ldr	r3, [r6, #0]
 801de48:	005b      	lsls	r3, r3, #1
 801de4a:	6033      	str	r3, [r6, #0]
 801de4c:	6873      	ldr	r3, [r6, #4]
 801de4e:	005b      	lsls	r3, r3, #1
 801de50:	6073      	str	r3, [r6, #4]
 801de52:	68b3      	ldr	r3, [r6, #8]
 801de54:	005b      	lsls	r3, r3, #1
 801de56:	60b3      	str	r3, [r6, #8]
 801de58:	68f3      	ldr	r3, [r6, #12]
 801de5a:	005b      	lsls	r3, r3, #1
 801de5c:	60f3      	str	r3, [r6, #12]
 801de5e:	3610      	adds	r6, #16
 801de60:	42b0      	cmp	r0, r6
 801de62:	d1f0      	bne.n	801de46 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801de64:	b00f      	add	sp, #60	@ 0x3c
 801de66:	bc3c      	pop	{r2, r3, r4, r5}
 801de68:	4690      	mov	r8, r2
 801de6a:	4699      	mov	r9, r3
 801de6c:	46a2      	mov	sl, r4
 801de6e:	46ab      	mov	fp, r5
 801de70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801de72:	2302      	movs	r3, #2
 801de74:	2100      	movs	r1, #0
 801de76:	0015      	movs	r5, r2
 801de78:	f000 fb14 	bl	801e4a4 <arm_radix4_butterfly_inverse_q31>
 801de7c:	46bc      	mov	ip, r7
 801de7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de80:	002a      	movs	r2, r5
 801de82:	0098      	lsls	r0, r3, #2
 801de84:	4460      	add	r0, ip
 801de86:	2302      	movs	r3, #2
 801de88:	2100      	movs	r1, #0
 801de8a:	f000 fb0b 	bl	801e4a4 <arm_radix4_butterfly_inverse_q31>
 801de8e:	e7e9      	b.n	801de64 <arm_cfft_radix4by2_inverse_q31+0x158>

0801de90 <arm_cfft_q31>:
 801de90:	b570      	push	{r4, r5, r6, lr}
 801de92:	001e      	movs	r6, r3
 801de94:	2380      	movs	r3, #128	@ 0x80
 801de96:	000d      	movs	r5, r1
 801de98:	0004      	movs	r4, r0
 801de9a:	8801      	ldrh	r1, [r0, #0]
 801de9c:	005b      	lsls	r3, r3, #1
 801de9e:	2a01      	cmp	r2, #1
 801dea0:	d028      	beq.n	801def4 <arm_cfft_q31+0x64>
 801dea2:	4299      	cmp	r1, r3
 801dea4:	d020      	beq.n	801dee8 <arm_cfft_q31+0x58>
 801dea6:	d812      	bhi.n	801dece <arm_cfft_q31+0x3e>
 801dea8:	2920      	cmp	r1, #32
 801deaa:	d004      	beq.n	801deb6 <arm_cfft_q31+0x26>
 801deac:	d949      	bls.n	801df42 <arm_cfft_q31+0xb2>
 801deae:	2940      	cmp	r1, #64	@ 0x40
 801deb0:	d01a      	beq.n	801dee8 <arm_cfft_q31+0x58>
 801deb2:	2980      	cmp	r1, #128	@ 0x80
 801deb4:	d103      	bne.n	801debe <arm_cfft_q31+0x2e>
 801deb6:	6862      	ldr	r2, [r4, #4]
 801deb8:	0028      	movs	r0, r5
 801deba:	f7ff fe65 	bl	801db88 <arm_cfft_radix4by2_q31>
 801debe:	2e00      	cmp	r6, #0
 801dec0:	d004      	beq.n	801decc <arm_cfft_q31+0x3c>
 801dec2:	68a2      	ldr	r2, [r4, #8]
 801dec4:	89a1      	ldrh	r1, [r4, #12]
 801dec6:	0028      	movs	r0, r5
 801dec8:	f7e2 f91e 	bl	8000108 <arm_bitreversal_32>
 801decc:	bd70      	pop	{r4, r5, r6, pc}
 801dece:	2380      	movs	r3, #128	@ 0x80
 801ded0:	00db      	lsls	r3, r3, #3
 801ded2:	4299      	cmp	r1, r3
 801ded4:	d008      	beq.n	801dee8 <arm_cfft_q31+0x58>
 801ded6:	d92f      	bls.n	801df38 <arm_cfft_q31+0xa8>
 801ded8:	2380      	movs	r3, #128	@ 0x80
 801deda:	011b      	lsls	r3, r3, #4
 801dedc:	4299      	cmp	r1, r3
 801dede:	d0ea      	beq.n	801deb6 <arm_cfft_q31+0x26>
 801dee0:	2380      	movs	r3, #128	@ 0x80
 801dee2:	015b      	lsls	r3, r3, #5
 801dee4:	4299      	cmp	r1, r3
 801dee6:	d1ea      	bne.n	801debe <arm_cfft_q31+0x2e>
 801dee8:	2301      	movs	r3, #1
 801deea:	6862      	ldr	r2, [r4, #4]
 801deec:	0028      	movs	r0, r5
 801deee:	f000 f833 	bl	801df58 <arm_radix4_butterfly_q31>
 801def2:	e7e4      	b.n	801debe <arm_cfft_q31+0x2e>
 801def4:	4299      	cmp	r1, r3
 801def6:	d019      	beq.n	801df2c <arm_cfft_q31+0x9c>
 801def8:	d80b      	bhi.n	801df12 <arm_cfft_q31+0x82>
 801defa:	2920      	cmp	r1, #32
 801defc:	d004      	beq.n	801df08 <arm_cfft_q31+0x78>
 801defe:	d928      	bls.n	801df52 <arm_cfft_q31+0xc2>
 801df00:	2940      	cmp	r1, #64	@ 0x40
 801df02:	d013      	beq.n	801df2c <arm_cfft_q31+0x9c>
 801df04:	2980      	cmp	r1, #128	@ 0x80
 801df06:	d1da      	bne.n	801debe <arm_cfft_q31+0x2e>
 801df08:	6862      	ldr	r2, [r4, #4]
 801df0a:	0028      	movs	r0, r5
 801df0c:	f7ff fefe 	bl	801dd0c <arm_cfft_radix4by2_inverse_q31>
 801df10:	e7d5      	b.n	801debe <arm_cfft_q31+0x2e>
 801df12:	2380      	movs	r3, #128	@ 0x80
 801df14:	00db      	lsls	r3, r3, #3
 801df16:	4299      	cmp	r1, r3
 801df18:	d008      	beq.n	801df2c <arm_cfft_q31+0x9c>
 801df1a:	d915      	bls.n	801df48 <arm_cfft_q31+0xb8>
 801df1c:	2380      	movs	r3, #128	@ 0x80
 801df1e:	011b      	lsls	r3, r3, #4
 801df20:	4299      	cmp	r1, r3
 801df22:	d0f1      	beq.n	801df08 <arm_cfft_q31+0x78>
 801df24:	2380      	movs	r3, #128	@ 0x80
 801df26:	015b      	lsls	r3, r3, #5
 801df28:	4299      	cmp	r1, r3
 801df2a:	d1c8      	bne.n	801debe <arm_cfft_q31+0x2e>
 801df2c:	2301      	movs	r3, #1
 801df2e:	6862      	ldr	r2, [r4, #4]
 801df30:	0028      	movs	r0, r5
 801df32:	f000 fab7 	bl	801e4a4 <arm_radix4_butterfly_inverse_q31>
 801df36:	e7c2      	b.n	801debe <arm_cfft_q31+0x2e>
 801df38:	2380      	movs	r3, #128	@ 0x80
 801df3a:	009b      	lsls	r3, r3, #2
 801df3c:	4299      	cmp	r1, r3
 801df3e:	d0ba      	beq.n	801deb6 <arm_cfft_q31+0x26>
 801df40:	e7bd      	b.n	801debe <arm_cfft_q31+0x2e>
 801df42:	2910      	cmp	r1, #16
 801df44:	d1bb      	bne.n	801debe <arm_cfft_q31+0x2e>
 801df46:	e7cf      	b.n	801dee8 <arm_cfft_q31+0x58>
 801df48:	2380      	movs	r3, #128	@ 0x80
 801df4a:	009b      	lsls	r3, r3, #2
 801df4c:	4299      	cmp	r1, r3
 801df4e:	d0db      	beq.n	801df08 <arm_cfft_q31+0x78>
 801df50:	e7b5      	b.n	801debe <arm_cfft_q31+0x2e>
 801df52:	2910      	cmp	r1, #16
 801df54:	d1b3      	bne.n	801debe <arm_cfft_q31+0x2e>
 801df56:	e7e9      	b.n	801df2c <arm_cfft_q31+0x9c>

0801df58 <arm_radix4_butterfly_q31>:
 801df58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df5a:	464d      	mov	r5, r9
 801df5c:	4644      	mov	r4, r8
 801df5e:	465f      	mov	r7, fp
 801df60:	4656      	mov	r6, sl
 801df62:	469c      	mov	ip, r3
 801df64:	b4f0      	push	{r4, r5, r6, r7}
 801df66:	b0a7      	sub	sp, #156	@ 0x9c
 801df68:	9114      	str	r1, [sp, #80]	@ 0x50
 801df6a:	0889      	lsrs	r1, r1, #2
 801df6c:	9310      	str	r3, [sp, #64]	@ 0x40
 801df6e:	00cb      	lsls	r3, r1, #3
 801df70:	0015      	movs	r5, r2
 801df72:	9223      	str	r2, [sp, #140]	@ 0x8c
 801df74:	18c2      	adds	r2, r0, r3
 801df76:	000c      	movs	r4, r1
 801df78:	469a      	mov	sl, r3
 801df7a:	9124      	str	r1, [sp, #144]	@ 0x90
 801df7c:	18d1      	adds	r1, r2, r3
 801df7e:	4663      	mov	r3, ip
 801df80:	468b      	mov	fp, r1
 801df82:	0119      	lsls	r1, r3, #4
 801df84:	910d      	str	r1, [sp, #52]	@ 0x34
 801df86:	00d9      	lsls	r1, r3, #3
 801df88:	005b      	lsls	r3, r3, #1
 801df8a:	4463      	add	r3, ip
 801df8c:	910e      	str	r1, [sp, #56]	@ 0x38
 801df8e:	00d9      	lsls	r1, r3, #3
 801df90:	465b      	mov	r3, fp
 801df92:	44da      	add	sl, fp
 801df94:	4690      	mov	r8, r2
 801df96:	4683      	mov	fp, r0
 801df98:	4699      	mov	r9, r3
 801df9a:	9022      	str	r0, [sp, #136]	@ 0x88
 801df9c:	9025      	str	r0, [sp, #148]	@ 0x94
 801df9e:	910f      	str	r1, [sp, #60]	@ 0x3c
 801dfa0:	9502      	str	r5, [sp, #8]
 801dfa2:	9500      	str	r5, [sp, #0]
 801dfa4:	9501      	str	r5, [sp, #4]
 801dfa6:	9407      	str	r4, [sp, #28]
 801dfa8:	465b      	mov	r3, fp
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	4642      	mov	r2, r8
 801dfae:	111c      	asrs	r4, r3, #4
 801dfb0:	464b      	mov	r3, r9
 801dfb2:	4658      	mov	r0, fp
 801dfb4:	681b      	ldr	r3, [r3, #0]
 801dfb6:	6812      	ldr	r2, [r2, #0]
 801dfb8:	111b      	asrs	r3, r3, #4
 801dfba:	18e7      	adds	r7, r4, r3
 801dfbc:	1ae3      	subs	r3, r4, r3
 801dfbe:	1114      	asrs	r4, r2, #4
 801dfc0:	4652      	mov	r2, sl
 801dfc2:	6840      	ldr	r0, [r0, #4]
 801dfc4:	6812      	ldr	r2, [r2, #0]
 801dfc6:	1105      	asrs	r5, r0, #4
 801dfc8:	4648      	mov	r0, r9
 801dfca:	9303      	str	r3, [sp, #12]
 801dfcc:	1113      	asrs	r3, r2, #4
 801dfce:	18e2      	adds	r2, r4, r3
 801dfd0:	465c      	mov	r4, fp
 801dfd2:	6840      	ldr	r0, [r0, #4]
 801dfd4:	1103      	asrs	r3, r0, #4
 801dfd6:	18ee      	adds	r6, r5, r3
 801dfd8:	1ae8      	subs	r0, r5, r3
 801dfda:	18bb      	adds	r3, r7, r2
 801dfdc:	6023      	str	r3, [r4, #0]
 801dfde:	4644      	mov	r4, r8
 801dfe0:	6864      	ldr	r4, [r4, #4]
 801dfe2:	9004      	str	r0, [sp, #16]
 801dfe4:	1125      	asrs	r5, r4, #4
 801dfe6:	4654      	mov	r4, sl
 801dfe8:	6864      	ldr	r4, [r4, #4]
 801dfea:	1123      	asrs	r3, r4, #4
 801dfec:	465c      	mov	r4, fp
 801dfee:	18eb      	adds	r3, r5, r3
 801dff0:	18f1      	adds	r1, r6, r3
 801dff2:	6061      	str	r1, [r4, #4]
 801dff4:	4655      	mov	r5, sl
 801dff6:	4644      	mov	r4, r8
 801dff8:	686d      	ldr	r5, [r5, #4]
 801dffa:	6864      	ldr	r4, [r4, #4]
 801dffc:	1129      	asrs	r1, r5, #4
 801dffe:	1124      	asrs	r4, r4, #4
 801e000:	1a64      	subs	r4, r4, r1
 801e002:	4641      	mov	r1, r8
 801e004:	6809      	ldr	r1, [r1, #0]
 801e006:	9405      	str	r4, [sp, #20]
 801e008:	1108      	asrs	r0, r1, #4
 801e00a:	4651      	mov	r1, sl
 801e00c:	6809      	ldr	r1, [r1, #0]
 801e00e:	1abc      	subs	r4, r7, r2
 801e010:	1109      	asrs	r1, r1, #4
 801e012:	1a41      	subs	r1, r0, r1
 801e014:	17e2      	asrs	r2, r4, #31
 801e016:	9106      	str	r1, [sp, #24]
 801e018:	0011      	movs	r1, r2
 801e01a:	9a01      	ldr	r2, [sp, #4]
 801e01c:	9108      	str	r1, [sp, #32]
 801e01e:	6817      	ldr	r7, [r2, #0]
 801e020:	17fd      	asrs	r5, r7, #31
 801e022:	0028      	movs	r0, r5
 801e024:	1af5      	subs	r5, r6, r3
 801e026:	17ee      	asrs	r6, r5, #31
 801e028:	960a      	str	r6, [sp, #40]	@ 0x28
 801e02a:	6856      	ldr	r6, [r2, #4]
 801e02c:	9009      	str	r0, [sp, #36]	@ 0x24
 801e02e:	17f3      	asrs	r3, r6, #31
 801e030:	003a      	movs	r2, r7
 801e032:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e034:	0003      	movs	r3, r0
 801e036:	0020      	movs	r0, r4
 801e038:	f7e2 fac2 	bl	80005c0 <__aeabi_lmul>
 801e03c:	0032      	movs	r2, r6
 801e03e:	17f3      	asrs	r3, r6, #31
 801e040:	910c      	str	r1, [sp, #48]	@ 0x30
 801e042:	0028      	movs	r0, r5
 801e044:	17e9      	asrs	r1, r5, #31
 801e046:	f7e2 fabb 	bl	80005c0 <__aeabi_lmul>
 801e04a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e04c:	002a      	movs	r2, r5
 801e04e:	4684      	mov	ip, r0
 801e050:	4640      	mov	r0, r8
 801e052:	4461      	add	r1, ip
 801e054:	0049      	lsls	r1, r1, #1
 801e056:	6001      	str	r1, [r0, #0]
 801e058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e05a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e05c:	0038      	movs	r0, r7
 801e05e:	f7e2 faaf 	bl	80005c0 <__aeabi_lmul>
 801e062:	0032      	movs	r2, r6
 801e064:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e066:	000d      	movs	r5, r1
 801e068:	0020      	movs	r0, r4
 801e06a:	9908      	ldr	r1, [sp, #32]
 801e06c:	f7e2 faa8 	bl	80005c0 <__aeabi_lmul>
 801e070:	4646      	mov	r6, r8
 801e072:	1a6d      	subs	r5, r5, r1
 801e074:	006d      	lsls	r5, r5, #1
 801e076:	6075      	str	r5, [r6, #4]
 801e078:	9903      	ldr	r1, [sp, #12]
 801e07a:	9d05      	ldr	r5, [sp, #20]
 801e07c:	000c      	movs	r4, r1
 801e07e:	46ac      	mov	ip, r5
 801e080:	4464      	add	r4, ip
 801e082:	17e6      	asrs	r6, r4, #31
 801e084:	0031      	movs	r1, r6
 801e086:	9b00      	ldr	r3, [sp, #0]
 801e088:	9804      	ldr	r0, [sp, #16]
 801e08a:	681e      	ldr	r6, [r3, #0]
 801e08c:	17f7      	asrs	r7, r6, #31
 801e08e:	9709      	str	r7, [sp, #36]	@ 0x24
 801e090:	9f06      	ldr	r7, [sp, #24]
 801e092:	0032      	movs	r2, r6
 801e094:	1bc7      	subs	r7, r0, r7
 801e096:	17fd      	asrs	r5, r7, #31
 801e098:	950a      	str	r5, [sp, #40]	@ 0x28
 801e09a:	685d      	ldr	r5, [r3, #4]
 801e09c:	17f3      	asrs	r3, r6, #31
 801e09e:	17e8      	asrs	r0, r5, #31
 801e0a0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e0a2:	0020      	movs	r0, r4
 801e0a4:	9108      	str	r1, [sp, #32]
 801e0a6:	f7e2 fa8b 	bl	80005c0 <__aeabi_lmul>
 801e0aa:	002a      	movs	r2, r5
 801e0ac:	17eb      	asrs	r3, r5, #31
 801e0ae:	910c      	str	r1, [sp, #48]	@ 0x30
 801e0b0:	0038      	movs	r0, r7
 801e0b2:	17f9      	asrs	r1, r7, #31
 801e0b4:	f7e2 fa84 	bl	80005c0 <__aeabi_lmul>
 801e0b8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801e0ba:	003a      	movs	r2, r7
 801e0bc:	4684      	mov	ip, r0
 801e0be:	4648      	mov	r0, r9
 801e0c0:	4461      	add	r1, ip
 801e0c2:	0049      	lsls	r1, r1, #1
 801e0c4:	6001      	str	r1, [r0, #0]
 801e0c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e0c8:	0030      	movs	r0, r6
 801e0ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e0cc:	f7e2 fa78 	bl	80005c0 <__aeabi_lmul>
 801e0d0:	002a      	movs	r2, r5
 801e0d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0d4:	000e      	movs	r6, r1
 801e0d6:	0020      	movs	r0, r4
 801e0d8:	9908      	ldr	r1, [sp, #32]
 801e0da:	f7e2 fa71 	bl	80005c0 <__aeabi_lmul>
 801e0de:	464c      	mov	r4, r9
 801e0e0:	9d05      	ldr	r5, [sp, #20]
 801e0e2:	1a76      	subs	r6, r6, r1
 801e0e4:	9903      	ldr	r1, [sp, #12]
 801e0e6:	0076      	lsls	r6, r6, #1
 801e0e8:	6066      	str	r6, [r4, #4]
 801e0ea:	1b4c      	subs	r4, r1, r5
 801e0ec:	9e06      	ldr	r6, [sp, #24]
 801e0ee:	17e1      	asrs	r1, r4, #31
 801e0f0:	9103      	str	r1, [sp, #12]
 801e0f2:	9902      	ldr	r1, [sp, #8]
 801e0f4:	46b4      	mov	ip, r6
 801e0f6:	680f      	ldr	r7, [r1, #0]
 801e0f8:	9804      	ldr	r0, [sp, #16]
 801e0fa:	17fd      	asrs	r5, r7, #31
 801e0fc:	002b      	movs	r3, r5
 801e0fe:	684e      	ldr	r6, [r1, #4]
 801e100:	4460      	add	r0, ip
 801e102:	0005      	movs	r5, r0
 801e104:	17c0      	asrs	r0, r0, #31
 801e106:	9005      	str	r0, [sp, #20]
 801e108:	17f0      	asrs	r0, r6, #31
 801e10a:	9006      	str	r0, [sp, #24]
 801e10c:	003a      	movs	r2, r7
 801e10e:	0020      	movs	r0, r4
 801e110:	17e1      	asrs	r1, r4, #31
 801e112:	9304      	str	r3, [sp, #16]
 801e114:	f7e2 fa54 	bl	80005c0 <__aeabi_lmul>
 801e118:	0032      	movs	r2, r6
 801e11a:	9108      	str	r1, [sp, #32]
 801e11c:	17f3      	asrs	r3, r6, #31
 801e11e:	0028      	movs	r0, r5
 801e120:	17e9      	asrs	r1, r5, #31
 801e122:	f7e2 fa4d 	bl	80005c0 <__aeabi_lmul>
 801e126:	9808      	ldr	r0, [sp, #32]
 801e128:	002a      	movs	r2, r5
 801e12a:	4684      	mov	ip, r0
 801e12c:	4650      	mov	r0, sl
 801e12e:	4461      	add	r1, ip
 801e130:	0049      	lsls	r1, r1, #1
 801e132:	6001      	str	r1, [r0, #0]
 801e134:	9b05      	ldr	r3, [sp, #20]
 801e136:	9904      	ldr	r1, [sp, #16]
 801e138:	0038      	movs	r0, r7
 801e13a:	f7e2 fa41 	bl	80005c0 <__aeabi_lmul>
 801e13e:	0020      	movs	r0, r4
 801e140:	2408      	movs	r4, #8
 801e142:	000d      	movs	r5, r1
 801e144:	0032      	movs	r2, r6
 801e146:	9b06      	ldr	r3, [sp, #24]
 801e148:	9903      	ldr	r1, [sp, #12]
 801e14a:	f7e2 fa39 	bl	80005c0 <__aeabi_lmul>
 801e14e:	46a4      	mov	ip, r4
 801e150:	4650      	mov	r0, sl
 801e152:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e154:	44e3      	add	fp, ip
 801e156:	44e0      	add	r8, ip
 801e158:	44e1      	add	r9, ip
 801e15a:	44e2      	add	sl, ip
 801e15c:	46a4      	mov	ip, r4
 801e15e:	1a6d      	subs	r5, r5, r1
 801e160:	006d      	lsls	r5, r5, #1
 801e162:	9a01      	ldr	r2, [sp, #4]
 801e164:	6045      	str	r5, [r0, #4]
 801e166:	9807      	ldr	r0, [sp, #28]
 801e168:	4462      	add	r2, ip
 801e16a:	3801      	subs	r0, #1
 801e16c:	9201      	str	r2, [sp, #4]
 801e16e:	9007      	str	r0, [sp, #28]
 801e170:	9b00      	ldr	r3, [sp, #0]
 801e172:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e174:	9902      	ldr	r1, [sp, #8]
 801e176:	4694      	mov	ip, r2
 801e178:	4463      	add	r3, ip
 801e17a:	9300      	str	r3, [sp, #0]
 801e17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e17e:	469c      	mov	ip, r3
 801e180:	4461      	add	r1, ip
 801e182:	9102      	str	r1, [sp, #8]
 801e184:	2800      	cmp	r0, #0
 801e186:	d000      	beq.n	801e18a <arm_radix4_butterfly_q31+0x232>
 801e188:	e70e      	b.n	801dfa8 <arm_radix4_butterfly_q31+0x50>
 801e18a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e18c:	009b      	lsls	r3, r3, #2
 801e18e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e190:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e192:	9320      	str	r3, [sp, #128]	@ 0x80
 801e194:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e196:	2b04      	cmp	r3, #4
 801e198:	d800      	bhi.n	801e19c <arm_radix4_butterfly_q31+0x244>
 801e19a:	e180      	b.n	801e49e <arm_radix4_butterfly_q31+0x546>
 801e19c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e19e:	0893      	lsrs	r3, r2, #2
 801e1a0:	1e59      	subs	r1, r3, #1
 801e1a2:	9321      	str	r3, [sp, #132]	@ 0x84
 801e1a4:	00db      	lsls	r3, r3, #3
 801e1a6:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e1a8:	00d3      	lsls	r3, r2, #3
 801e1aa:	9300      	str	r3, [sp, #0]
 801e1ac:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e1ae:	911a      	str	r1, [sp, #104]	@ 0x68
 801e1b0:	00da      	lsls	r2, r3, #3
 801e1b2:	921e      	str	r2, [sp, #120]	@ 0x78
 801e1b4:	011a      	lsls	r2, r3, #4
 801e1b6:	921d      	str	r2, [sp, #116]	@ 0x74
 801e1b8:	001a      	movs	r2, r3
 801e1ba:	4694      	mov	ip, r2
 801e1bc:	005b      	lsls	r3, r3, #1
 801e1be:	4463      	add	r3, ip
 801e1c0:	00db      	lsls	r3, r3, #3
 801e1c2:	931c      	str	r3, [sp, #112]	@ 0x70
 801e1c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e1c6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e1c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e1ca:	9318      	str	r3, [sp, #96]	@ 0x60
 801e1cc:	9319      	str	r3, [sp, #100]	@ 0x64
 801e1ce:	9316      	str	r3, [sp, #88]	@ 0x58
 801e1d0:	2300      	movs	r3, #0
 801e1d2:	9315      	str	r3, [sp, #84]	@ 0x54
 801e1d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e1d6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e1d8:	681a      	ldr	r2, [r3, #0]
 801e1da:	685b      	ldr	r3, [r3, #4]
 801e1dc:	9205      	str	r2, [sp, #20]
 801e1de:	9306      	str	r3, [sp, #24]
 801e1e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e1e2:	468c      	mov	ip, r1
 801e1e4:	681a      	ldr	r2, [r3, #0]
 801e1e6:	685b      	ldr	r3, [r3, #4]
 801e1e8:	9207      	str	r2, [sp, #28]
 801e1ea:	9308      	str	r3, [sp, #32]
 801e1ec:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e1ee:	681a      	ldr	r2, [r3, #0]
 801e1f0:	685b      	ldr	r3, [r3, #4]
 801e1f2:	9209      	str	r2, [sp, #36]	@ 0x24
 801e1f4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e1f6:	930a      	str	r3, [sp, #40]	@ 0x28
 801e1f8:	0013      	movs	r3, r2
 801e1fa:	4463      	add	r3, ip
 801e1fc:	4698      	mov	r8, r3
 801e1fe:	0013      	movs	r3, r2
 801e200:	4442      	add	r2, r8
 801e202:	4691      	mov	r9, r2
 801e204:	001a      	movs	r2, r3
 801e206:	444a      	add	r2, r9
 801e208:	4692      	mov	sl, r2
 801e20a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e20c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e20e:	4293      	cmp	r3, r2
 801e210:	d800      	bhi.n	801e214 <arm_radix4_butterfly_q31+0x2bc>
 801e212:	e0dd      	b.n	801e3d0 <arm_radix4_butterfly_q31+0x478>
 801e214:	4694      	mov	ip, r2
 801e216:	468b      	mov	fp, r1
 801e218:	4644      	mov	r4, r8
 801e21a:	4655      	mov	r5, sl
 801e21c:	9b07      	ldr	r3, [sp, #28]
 801e21e:	17db      	asrs	r3, r3, #31
 801e220:	930c      	str	r3, [sp, #48]	@ 0x30
 801e222:	9b08      	ldr	r3, [sp, #32]
 801e224:	17db      	asrs	r3, r3, #31
 801e226:	930d      	str	r3, [sp, #52]	@ 0x34
 801e228:	9b05      	ldr	r3, [sp, #20]
 801e22a:	17db      	asrs	r3, r3, #31
 801e22c:	930e      	str	r3, [sp, #56]	@ 0x38
 801e22e:	9b06      	ldr	r3, [sp, #24]
 801e230:	17db      	asrs	r3, r3, #31
 801e232:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e236:	17db      	asrs	r3, r3, #31
 801e238:	9310      	str	r3, [sp, #64]	@ 0x40
 801e23a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e23c:	17db      	asrs	r3, r3, #31
 801e23e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e240:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e242:	4463      	add	r3, ip
 801e244:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e246:	465b      	mov	r3, fp
 801e248:	4659      	mov	r1, fp
 801e24a:	681a      	ldr	r2, [r3, #0]
 801e24c:	464b      	mov	r3, r9
 801e24e:	684f      	ldr	r7, [r1, #4]
 801e250:	4649      	mov	r1, r9
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	18d6      	adds	r6, r2, r3
 801e256:	1ad3      	subs	r3, r2, r3
 801e258:	9301      	str	r3, [sp, #4]
 801e25a:	684b      	ldr	r3, [r1, #4]
 801e25c:	18f8      	adds	r0, r7, r3
 801e25e:	1af9      	subs	r1, r7, r3
 801e260:	6827      	ldr	r7, [r4, #0]
 801e262:	9102      	str	r1, [sp, #8]
 801e264:	003a      	movs	r2, r7
 801e266:	682f      	ldr	r7, [r5, #0]
 801e268:	46bc      	mov	ip, r7
 801e26a:	465f      	mov	r7, fp
 801e26c:	4462      	add	r2, ip
 801e26e:	18b3      	adds	r3, r6, r2
 801e270:	109b      	asrs	r3, r3, #2
 801e272:	603b      	str	r3, [r7, #0]
 801e274:	6867      	ldr	r7, [r4, #4]
 801e276:	1ab6      	subs	r6, r6, r2
 801e278:	46b8      	mov	r8, r7
 801e27a:	686f      	ldr	r7, [r5, #4]
 801e27c:	17f2      	asrs	r2, r6, #31
 801e27e:	46bc      	mov	ip, r7
 801e280:	44e0      	add	r8, ip
 801e282:	4643      	mov	r3, r8
 801e284:	465f      	mov	r7, fp
 801e286:	18c1      	adds	r1, r0, r3
 801e288:	1089      	asrs	r1, r1, #2
 801e28a:	6079      	str	r1, [r7, #4]
 801e28c:	9900      	ldr	r1, [sp, #0]
 801e28e:	4690      	mov	r8, r2
 801e290:	468c      	mov	ip, r1
 801e292:	6867      	ldr	r7, [r4, #4]
 801e294:	6869      	ldr	r1, [r5, #4]
 801e296:	44e3      	add	fp, ip
 801e298:	1a7f      	subs	r7, r7, r1
 801e29a:	9703      	str	r7, [sp, #12]
 801e29c:	6829      	ldr	r1, [r5, #0]
 801e29e:	6827      	ldr	r7, [r4, #0]
 801e2a0:	1a7f      	subs	r7, r7, r1
 801e2a2:	9704      	str	r7, [sp, #16]
 801e2a4:	1ac7      	subs	r7, r0, r3
 801e2a6:	17fa      	asrs	r2, r7, #31
 801e2a8:	4692      	mov	sl, r2
 801e2aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2ac:	9a07      	ldr	r2, [sp, #28]
 801e2ae:	0030      	movs	r0, r6
 801e2b0:	4641      	mov	r1, r8
 801e2b2:	f7e2 f985 	bl	80005c0 <__aeabi_lmul>
 801e2b6:	9a08      	ldr	r2, [sp, #32]
 801e2b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2ba:	9112      	str	r1, [sp, #72]	@ 0x48
 801e2bc:	0038      	movs	r0, r7
 801e2be:	4651      	mov	r1, sl
 801e2c0:	f7e2 f97e 	bl	80005c0 <__aeabi_lmul>
 801e2c4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e2c6:	9a07      	ldr	r2, [sp, #28]
 801e2c8:	4684      	mov	ip, r0
 801e2ca:	4461      	add	r1, ip
 801e2cc:	1049      	asrs	r1, r1, #1
 801e2ce:	6021      	str	r1, [r4, #0]
 801e2d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e2d2:	0038      	movs	r0, r7
 801e2d4:	4651      	mov	r1, sl
 801e2d6:	f7e2 f973 	bl	80005c0 <__aeabi_lmul>
 801e2da:	9a08      	ldr	r2, [sp, #32]
 801e2dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2de:	000f      	movs	r7, r1
 801e2e0:	0030      	movs	r0, r6
 801e2e2:	4641      	mov	r1, r8
 801e2e4:	f7e2 f96c 	bl	80005c0 <__aeabi_lmul>
 801e2e8:	9b00      	ldr	r3, [sp, #0]
 801e2ea:	9a01      	ldr	r2, [sp, #4]
 801e2ec:	469c      	mov	ip, r3
 801e2ee:	9803      	ldr	r0, [sp, #12]
 801e2f0:	1a7f      	subs	r7, r7, r1
 801e2f2:	107f      	asrs	r7, r7, #1
 801e2f4:	6067      	str	r7, [r4, #4]
 801e2f6:	0016      	movs	r6, r2
 801e2f8:	4464      	add	r4, ip
 801e2fa:	4684      	mov	ip, r0
 801e2fc:	4466      	add	r6, ip
 801e2fe:	17f2      	asrs	r2, r6, #31
 801e300:	4690      	mov	r8, r2
 801e302:	9902      	ldr	r1, [sp, #8]
 801e304:	9f04      	ldr	r7, [sp, #16]
 801e306:	0030      	movs	r0, r6
 801e308:	1bcf      	subs	r7, r1, r7
 801e30a:	17fa      	asrs	r2, r7, #31
 801e30c:	4692      	mov	sl, r2
 801e30e:	4641      	mov	r1, r8
 801e310:	9a05      	ldr	r2, [sp, #20]
 801e312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e314:	f7e2 f954 	bl	80005c0 <__aeabi_lmul>
 801e318:	9a06      	ldr	r2, [sp, #24]
 801e31a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e31c:	9112      	str	r1, [sp, #72]	@ 0x48
 801e31e:	0038      	movs	r0, r7
 801e320:	4651      	mov	r1, sl
 801e322:	f7e2 f94d 	bl	80005c0 <__aeabi_lmul>
 801e326:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e328:	9a05      	ldr	r2, [sp, #20]
 801e32a:	4684      	mov	ip, r0
 801e32c:	4648      	mov	r0, r9
 801e32e:	4461      	add	r1, ip
 801e330:	1049      	asrs	r1, r1, #1
 801e332:	6001      	str	r1, [r0, #0]
 801e334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e336:	0038      	movs	r0, r7
 801e338:	4651      	mov	r1, sl
 801e33a:	f7e2 f941 	bl	80005c0 <__aeabi_lmul>
 801e33e:	9a06      	ldr	r2, [sp, #24]
 801e340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e342:	000f      	movs	r7, r1
 801e344:	0030      	movs	r0, r6
 801e346:	4641      	mov	r1, r8
 801e348:	f7e2 f93a 	bl	80005c0 <__aeabi_lmul>
 801e34c:	464e      	mov	r6, r9
 801e34e:	9a00      	ldr	r2, [sp, #0]
 801e350:	9b01      	ldr	r3, [sp, #4]
 801e352:	4694      	mov	ip, r2
 801e354:	9803      	ldr	r0, [sp, #12]
 801e356:	1a7f      	subs	r7, r7, r1
 801e358:	107f      	asrs	r7, r7, #1
 801e35a:	6077      	str	r7, [r6, #4]
 801e35c:	1a1e      	subs	r6, r3, r0
 801e35e:	9b04      	ldr	r3, [sp, #16]
 801e360:	44e1      	add	r9, ip
 801e362:	469c      	mov	ip, r3
 801e364:	17f0      	asrs	r0, r6, #31
 801e366:	4680      	mov	r8, r0
 801e368:	9902      	ldr	r1, [sp, #8]
 801e36a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e36c:	4461      	add	r1, ip
 801e36e:	17cb      	asrs	r3, r1, #31
 801e370:	000f      	movs	r7, r1
 801e372:	469a      	mov	sl, r3
 801e374:	0030      	movs	r0, r6
 801e376:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e378:	4641      	mov	r1, r8
 801e37a:	f7e2 f921 	bl	80005c0 <__aeabi_lmul>
 801e37e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e380:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e382:	9101      	str	r1, [sp, #4]
 801e384:	0038      	movs	r0, r7
 801e386:	4651      	mov	r1, sl
 801e388:	f7e2 f91a 	bl	80005c0 <__aeabi_lmul>
 801e38c:	9801      	ldr	r0, [sp, #4]
 801e38e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e390:	4684      	mov	ip, r0
 801e392:	4461      	add	r1, ip
 801e394:	1049      	asrs	r1, r1, #1
 801e396:	6029      	str	r1, [r5, #0]
 801e398:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e39a:	0038      	movs	r0, r7
 801e39c:	4651      	mov	r1, sl
 801e39e:	f7e2 f90f 	bl	80005c0 <__aeabi_lmul>
 801e3a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e3a4:	000f      	movs	r7, r1
 801e3a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e3a8:	0030      	movs	r0, r6
 801e3aa:	4641      	mov	r1, r8
 801e3ac:	f7e2 f908 	bl	80005c0 <__aeabi_lmul>
 801e3b0:	1a7f      	subs	r7, r7, r1
 801e3b2:	107f      	asrs	r7, r7, #1
 801e3b4:	606f      	str	r7, [r5, #4]
 801e3b6:	9a00      	ldr	r2, [sp, #0]
 801e3b8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e3ba:	4694      	mov	ip, r2
 801e3bc:	4465      	add	r5, ip
 801e3be:	468c      	mov	ip, r1
 801e3c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e3c2:	0013      	movs	r3, r2
 801e3c4:	4462      	add	r2, ip
 801e3c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e3c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e3ca:	429a      	cmp	r2, r3
 801e3cc:	d900      	bls.n	801e3d0 <arm_radix4_butterfly_q31+0x478>
 801e3ce:	e73a      	b.n	801e246 <arm_radix4_butterfly_q31+0x2ee>
 801e3d0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e3d2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e3d4:	468c      	mov	ip, r1
 801e3d6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e3d8:	4462      	add	r2, ip
 801e3da:	468c      	mov	ip, r1
 801e3dc:	9216      	str	r2, [sp, #88]	@ 0x58
 801e3de:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e3e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e3e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e3e4:	4462      	add	r2, ip
 801e3e6:	468c      	mov	ip, r1
 801e3e8:	9219      	str	r2, [sp, #100]	@ 0x64
 801e3ea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e3ec:	3301      	adds	r3, #1
 801e3ee:	4462      	add	r2, ip
 801e3f0:	9218      	str	r2, [sp, #96]	@ 0x60
 801e3f2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e3f4:	9315      	str	r3, [sp, #84]	@ 0x54
 801e3f6:	3208      	adds	r2, #8
 801e3f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e3fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e3fc:	4293      	cmp	r3, r2
 801e3fe:	d800      	bhi.n	801e402 <arm_radix4_butterfly_q31+0x4aa>
 801e400:	e6e8      	b.n	801e1d4 <arm_radix4_butterfly_q31+0x27c>
 801e402:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e404:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e406:	009b      	lsls	r3, r3, #2
 801e408:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e40a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e40c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e40e:	089b      	lsrs	r3, r3, #2
 801e410:	9320      	str	r3, [sp, #128]	@ 0x80
 801e412:	2b04      	cmp	r3, #4
 801e414:	d900      	bls.n	801e418 <arm_radix4_butterfly_q31+0x4c0>
 801e416:	e6c1      	b.n	801e19c <arm_radix4_butterfly_q31+0x244>
 801e418:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e41a:	469a      	mov	sl, r3
 801e41c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e41e:	691c      	ldr	r4, [r3, #16]
 801e420:	685a      	ldr	r2, [r3, #4]
 801e422:	46a1      	mov	r9, r4
 801e424:	4690      	mov	r8, r2
 801e426:	6819      	ldr	r1, [r3, #0]
 801e428:	689a      	ldr	r2, [r3, #8]
 801e42a:	699f      	ldr	r7, [r3, #24]
 801e42c:	188d      	adds	r5, r1, r2
 801e42e:	444d      	add	r5, r9
 801e430:	19ed      	adds	r5, r5, r7
 801e432:	69de      	ldr	r6, [r3, #28]
 801e434:	601d      	str	r5, [r3, #0]
 801e436:	4645      	mov	r5, r8
 801e438:	46b4      	mov	ip, r6
 801e43a:	68d8      	ldr	r0, [r3, #12]
 801e43c:	695c      	ldr	r4, [r3, #20]
 801e43e:	182d      	adds	r5, r5, r0
 801e440:	192d      	adds	r5, r5, r4
 801e442:	4465      	add	r5, ip
 801e444:	605d      	str	r5, [r3, #4]
 801e446:	1a8d      	subs	r5, r1, r2
 801e448:	444d      	add	r5, r9
 801e44a:	1bed      	subs	r5, r5, r7
 801e44c:	609d      	str	r5, [r3, #8]
 801e44e:	4645      	mov	r5, r8
 801e450:	1a2d      	subs	r5, r5, r0
 801e452:	192d      	adds	r5, r5, r4
 801e454:	1bad      	subs	r5, r5, r6
 801e456:	464e      	mov	r6, r9
 801e458:	60dd      	str	r5, [r3, #12]
 801e45a:	180d      	adds	r5, r1, r0
 801e45c:	1bad      	subs	r5, r5, r6
 801e45e:	4666      	mov	r6, ip
 801e460:	1bad      	subs	r5, r5, r6
 801e462:	611d      	str	r5, [r3, #16]
 801e464:	4645      	mov	r5, r8
 801e466:	1aad      	subs	r5, r5, r2
 801e468:	4442      	add	r2, r8
 801e46a:	1b12      	subs	r2, r2, r4
 801e46c:	1bd2      	subs	r2, r2, r7
 801e46e:	1a08      	subs	r0, r1, r0
 801e470:	61da      	str	r2, [r3, #28]
 801e472:	4649      	mov	r1, r9
 801e474:	2201      	movs	r2, #1
 801e476:	1a41      	subs	r1, r0, r1
 801e478:	4252      	negs	r2, r2
 801e47a:	4461      	add	r1, ip
 801e47c:	4694      	mov	ip, r2
 801e47e:	44e2      	add	sl, ip
 801e480:	4652      	mov	r2, sl
 801e482:	1b2d      	subs	r5, r5, r4
 801e484:	19ed      	adds	r5, r5, r7
 801e486:	615d      	str	r5, [r3, #20]
 801e488:	6199      	str	r1, [r3, #24]
 801e48a:	3320      	adds	r3, #32
 801e48c:	2a00      	cmp	r2, #0
 801e48e:	d1c6      	bne.n	801e41e <arm_radix4_butterfly_q31+0x4c6>
 801e490:	b027      	add	sp, #156	@ 0x9c
 801e492:	bc3c      	pop	{r2, r3, r4, r5}
 801e494:	4690      	mov	r8, r2
 801e496:	4699      	mov	r9, r3
 801e498:	46a2      	mov	sl, r4
 801e49a:	46ab      	mov	fp, r5
 801e49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e49e:	469a      	mov	sl, r3
 801e4a0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e4a2:	e7bc      	b.n	801e41e <arm_radix4_butterfly_q31+0x4c6>

0801e4a4 <arm_radix4_butterfly_inverse_q31>:
 801e4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4a6:	464d      	mov	r5, r9
 801e4a8:	4644      	mov	r4, r8
 801e4aa:	465f      	mov	r7, fp
 801e4ac:	4656      	mov	r6, sl
 801e4ae:	b4f0      	push	{r4, r5, r6, r7}
 801e4b0:	b0a7      	sub	sp, #156	@ 0x9c
 801e4b2:	469c      	mov	ip, r3
 801e4b4:	9114      	str	r1, [sp, #80]	@ 0x50
 801e4b6:	0889      	lsrs	r1, r1, #2
 801e4b8:	9310      	str	r3, [sp, #64]	@ 0x40
 801e4ba:	00cb      	lsls	r3, r1, #3
 801e4bc:	0015      	movs	r5, r2
 801e4be:	9223      	str	r2, [sp, #140]	@ 0x8c
 801e4c0:	18c2      	adds	r2, r0, r3
 801e4c2:	000c      	movs	r4, r1
 801e4c4:	9124      	str	r1, [sp, #144]	@ 0x90
 801e4c6:	18d1      	adds	r1, r2, r3
 801e4c8:	468b      	mov	fp, r1
 801e4ca:	469a      	mov	sl, r3
 801e4cc:	4663      	mov	r3, ip
 801e4ce:	44da      	add	sl, fp
 801e4d0:	46d0      	mov	r8, sl
 801e4d2:	4681      	mov	r9, r0
 801e4d4:	4692      	mov	sl, r2
 801e4d6:	0119      	lsls	r1, r3, #4
 801e4d8:	910d      	str	r1, [sp, #52]	@ 0x34
 801e4da:	00d9      	lsls	r1, r3, #3
 801e4dc:	005b      	lsls	r3, r3, #1
 801e4de:	4463      	add	r3, ip
 801e4e0:	910e      	str	r1, [sp, #56]	@ 0x38
 801e4e2:	00d9      	lsls	r1, r3, #3
 801e4e4:	9022      	str	r0, [sp, #136]	@ 0x88
 801e4e6:	9025      	str	r0, [sp, #148]	@ 0x94
 801e4e8:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e4ea:	9502      	str	r5, [sp, #8]
 801e4ec:	9500      	str	r5, [sp, #0]
 801e4ee:	9501      	str	r5, [sp, #4]
 801e4f0:	9409      	str	r4, [sp, #36]	@ 0x24
 801e4f2:	464b      	mov	r3, r9
 801e4f4:	681b      	ldr	r3, [r3, #0]
 801e4f6:	4652      	mov	r2, sl
 801e4f8:	111c      	asrs	r4, r3, #4
 801e4fa:	465b      	mov	r3, fp
 801e4fc:	4648      	mov	r0, r9
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	6812      	ldr	r2, [r2, #0]
 801e502:	6840      	ldr	r0, [r0, #4]
 801e504:	111b      	asrs	r3, r3, #4
 801e506:	18e7      	adds	r7, r4, r3
 801e508:	1ae3      	subs	r3, r4, r3
 801e50a:	1114      	asrs	r4, r2, #4
 801e50c:	4642      	mov	r2, r8
 801e50e:	1105      	asrs	r5, r0, #4
 801e510:	4658      	mov	r0, fp
 801e512:	6812      	ldr	r2, [r2, #0]
 801e514:	6840      	ldr	r0, [r0, #4]
 801e516:	9303      	str	r3, [sp, #12]
 801e518:	1113      	asrs	r3, r2, #4
 801e51a:	18e2      	adds	r2, r4, r3
 801e51c:	1103      	asrs	r3, r0, #4
 801e51e:	18ee      	adds	r6, r5, r3
 801e520:	1ae8      	subs	r0, r5, r3
 801e522:	464d      	mov	r5, r9
 801e524:	18bb      	adds	r3, r7, r2
 801e526:	602b      	str	r3, [r5, #0]
 801e528:	4641      	mov	r1, r8
 801e52a:	4655      	mov	r5, sl
 801e52c:	6849      	ldr	r1, [r1, #4]
 801e52e:	686d      	ldr	r5, [r5, #4]
 801e530:	110b      	asrs	r3, r1, #4
 801e532:	112d      	asrs	r5, r5, #4
 801e534:	18eb      	adds	r3, r5, r3
 801e536:	464d      	mov	r5, r9
 801e538:	18f1      	adds	r1, r6, r3
 801e53a:	6069      	str	r1, [r5, #4]
 801e53c:	4655      	mov	r5, sl
 801e53e:	686d      	ldr	r5, [r5, #4]
 801e540:	9004      	str	r0, [sp, #16]
 801e542:	112c      	asrs	r4, r5, #4
 801e544:	4645      	mov	r5, r8
 801e546:	686d      	ldr	r5, [r5, #4]
 801e548:	1129      	asrs	r1, r5, #4
 801e54a:	1a65      	subs	r5, r4, r1
 801e54c:	4651      	mov	r1, sl
 801e54e:	6809      	ldr	r1, [r1, #0]
 801e550:	1abc      	subs	r4, r7, r2
 801e552:	1108      	asrs	r0, r1, #4
 801e554:	4641      	mov	r1, r8
 801e556:	17e2      	asrs	r2, r4, #31
 801e558:	6809      	ldr	r1, [r1, #0]
 801e55a:	9207      	str	r2, [sp, #28]
 801e55c:	9a01      	ldr	r2, [sp, #4]
 801e55e:	1109      	asrs	r1, r1, #4
 801e560:	6817      	ldr	r7, [r2, #0]
 801e562:	1a41      	subs	r1, r0, r1
 801e564:	9106      	str	r1, [sp, #24]
 801e566:	0039      	movs	r1, r7
 801e568:	17ff      	asrs	r7, r7, #31
 801e56a:	0038      	movs	r0, r7
 801e56c:	9505      	str	r5, [sp, #20]
 801e56e:	1af5      	subs	r5, r6, r3
 801e570:	17ef      	asrs	r7, r5, #31
 801e572:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e574:	6857      	ldr	r7, [r2, #4]
 801e576:	0003      	movs	r3, r0
 801e578:	17fe      	asrs	r6, r7, #31
 801e57a:	000a      	movs	r2, r1
 801e57c:	9108      	str	r1, [sp, #32]
 801e57e:	900a      	str	r0, [sp, #40]	@ 0x28
 801e580:	17e1      	asrs	r1, r4, #31
 801e582:	0020      	movs	r0, r4
 801e584:	960c      	str	r6, [sp, #48]	@ 0x30
 801e586:	f7e2 f81b 	bl	80005c0 <__aeabi_lmul>
 801e58a:	003a      	movs	r2, r7
 801e58c:	17fb      	asrs	r3, r7, #31
 801e58e:	000e      	movs	r6, r1
 801e590:	0028      	movs	r0, r5
 801e592:	17e9      	asrs	r1, r5, #31
 801e594:	f7e2 f814 	bl	80005c0 <__aeabi_lmul>
 801e598:	4653      	mov	r3, sl
 801e59a:	1a76      	subs	r6, r6, r1
 801e59c:	0076      	lsls	r6, r6, #1
 801e59e:	601e      	str	r6, [r3, #0]
 801e5a0:	002a      	movs	r2, r5
 801e5a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e5a4:	9808      	ldr	r0, [sp, #32]
 801e5a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e5a8:	f7e2 f80a 	bl	80005c0 <__aeabi_lmul>
 801e5ac:	003a      	movs	r2, r7
 801e5ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e5b0:	000d      	movs	r5, r1
 801e5b2:	0020      	movs	r0, r4
 801e5b4:	9907      	ldr	r1, [sp, #28]
 801e5b6:	f7e2 f803 	bl	80005c0 <__aeabi_lmul>
 801e5ba:	4657      	mov	r7, sl
 801e5bc:	186d      	adds	r5, r5, r1
 801e5be:	006d      	lsls	r5, r5, #1
 801e5c0:	607d      	str	r5, [r7, #4]
 801e5c2:	9b03      	ldr	r3, [sp, #12]
 801e5c4:	9e06      	ldr	r6, [sp, #24]
 801e5c6:	9d05      	ldr	r5, [sp, #20]
 801e5c8:	46b4      	mov	ip, r6
 801e5ca:	1b5d      	subs	r5, r3, r5
 801e5cc:	9b00      	ldr	r3, [sp, #0]
 801e5ce:	17ef      	asrs	r7, r5, #31
 801e5d0:	0039      	movs	r1, r7
 801e5d2:	681f      	ldr	r7, [r3, #0]
 801e5d4:	17fc      	asrs	r4, r7, #31
 801e5d6:	0020      	movs	r0, r4
 801e5d8:	9c04      	ldr	r4, [sp, #16]
 801e5da:	4464      	add	r4, ip
 801e5dc:	17e6      	asrs	r6, r4, #31
 801e5de:	9407      	str	r4, [sp, #28]
 801e5e0:	9608      	str	r6, [sp, #32]
 801e5e2:	685e      	ldr	r6, [r3, #4]
 801e5e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e5e6:	17f2      	asrs	r2, r6, #31
 801e5e8:	0003      	movs	r3, r0
 801e5ea:	920c      	str	r2, [sp, #48]	@ 0x30
 801e5ec:	0028      	movs	r0, r5
 801e5ee:	003a      	movs	r2, r7
 801e5f0:	910a      	str	r1, [sp, #40]	@ 0x28
 801e5f2:	f7e1 ffe5 	bl	80005c0 <__aeabi_lmul>
 801e5f6:	0032      	movs	r2, r6
 801e5f8:	17f3      	asrs	r3, r6, #31
 801e5fa:	9807      	ldr	r0, [sp, #28]
 801e5fc:	000c      	movs	r4, r1
 801e5fe:	9908      	ldr	r1, [sp, #32]
 801e600:	f7e1 ffde 	bl	80005c0 <__aeabi_lmul>
 801e604:	4658      	mov	r0, fp
 801e606:	1a64      	subs	r4, r4, r1
 801e608:	0064      	lsls	r4, r4, #1
 801e60a:	9a07      	ldr	r2, [sp, #28]
 801e60c:	6004      	str	r4, [r0, #0]
 801e60e:	9b08      	ldr	r3, [sp, #32]
 801e610:	0038      	movs	r0, r7
 801e612:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e614:	f7e1 ffd4 	bl	80005c0 <__aeabi_lmul>
 801e618:	0032      	movs	r2, r6
 801e61a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e61c:	000c      	movs	r4, r1
 801e61e:	0028      	movs	r0, r5
 801e620:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e622:	f7e1 ffcd 	bl	80005c0 <__aeabi_lmul>
 801e626:	9d05      	ldr	r5, [sp, #20]
 801e628:	465f      	mov	r7, fp
 801e62a:	46ac      	mov	ip, r5
 801e62c:	1864      	adds	r4, r4, r1
 801e62e:	9903      	ldr	r1, [sp, #12]
 801e630:	0064      	lsls	r4, r4, #1
 801e632:	4461      	add	r1, ip
 801e634:	607c      	str	r4, [r7, #4]
 801e636:	000c      	movs	r4, r1
 801e638:	17c9      	asrs	r1, r1, #31
 801e63a:	9105      	str	r1, [sp, #20]
 801e63c:	9902      	ldr	r1, [sp, #8]
 801e63e:	9804      	ldr	r0, [sp, #16]
 801e640:	680d      	ldr	r5, [r1, #0]
 801e642:	9e06      	ldr	r6, [sp, #24]
 801e644:	002b      	movs	r3, r5
 801e646:	17ed      	asrs	r5, r5, #31
 801e648:	684f      	ldr	r7, [r1, #4]
 801e64a:	9503      	str	r5, [sp, #12]
 801e64c:	1b85      	subs	r5, r0, r6
 801e64e:	17e8      	asrs	r0, r5, #31
 801e650:	001a      	movs	r2, r3
 801e652:	9006      	str	r0, [sp, #24]
 801e654:	17fe      	asrs	r6, r7, #31
 801e656:	9304      	str	r3, [sp, #16]
 801e658:	0020      	movs	r0, r4
 801e65a:	9b03      	ldr	r3, [sp, #12]
 801e65c:	17e1      	asrs	r1, r4, #31
 801e65e:	9607      	str	r6, [sp, #28]
 801e660:	f7e1 ffae 	bl	80005c0 <__aeabi_lmul>
 801e664:	003a      	movs	r2, r7
 801e666:	000e      	movs	r6, r1
 801e668:	17fb      	asrs	r3, r7, #31
 801e66a:	0028      	movs	r0, r5
 801e66c:	17e9      	asrs	r1, r5, #31
 801e66e:	f7e1 ffa7 	bl	80005c0 <__aeabi_lmul>
 801e672:	4640      	mov	r0, r8
 801e674:	1a76      	subs	r6, r6, r1
 801e676:	0076      	lsls	r6, r6, #1
 801e678:	002a      	movs	r2, r5
 801e67a:	9b06      	ldr	r3, [sp, #24]
 801e67c:	6006      	str	r6, [r0, #0]
 801e67e:	9903      	ldr	r1, [sp, #12]
 801e680:	9804      	ldr	r0, [sp, #16]
 801e682:	f7e1 ff9d 	bl	80005c0 <__aeabi_lmul>
 801e686:	0020      	movs	r0, r4
 801e688:	2408      	movs	r4, #8
 801e68a:	9b07      	ldr	r3, [sp, #28]
 801e68c:	000d      	movs	r5, r1
 801e68e:	003a      	movs	r2, r7
 801e690:	9905      	ldr	r1, [sp, #20]
 801e692:	f7e1 ff95 	bl	80005c0 <__aeabi_lmul>
 801e696:	4640      	mov	r0, r8
 801e698:	46a4      	mov	ip, r4
 801e69a:	186d      	adds	r5, r5, r1
 801e69c:	006d      	lsls	r5, r5, #1
 801e69e:	6045      	str	r5, [r0, #4]
 801e6a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e6a2:	44e1      	add	r9, ip
 801e6a4:	3801      	subs	r0, #1
 801e6a6:	9009      	str	r0, [sp, #36]	@ 0x24
 801e6a8:	9a01      	ldr	r2, [sp, #4]
 801e6aa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e6ac:	44e2      	add	sl, ip
 801e6ae:	44e3      	add	fp, ip
 801e6b0:	44e0      	add	r8, ip
 801e6b2:	46a4      	mov	ip, r4
 801e6b4:	4462      	add	r2, ip
 801e6b6:	9201      	str	r2, [sp, #4]
 801e6b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e6ba:	9b00      	ldr	r3, [sp, #0]
 801e6bc:	4694      	mov	ip, r2
 801e6be:	4463      	add	r3, ip
 801e6c0:	9300      	str	r3, [sp, #0]
 801e6c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e6c4:	9902      	ldr	r1, [sp, #8]
 801e6c6:	469c      	mov	ip, r3
 801e6c8:	4461      	add	r1, ip
 801e6ca:	9102      	str	r1, [sp, #8]
 801e6cc:	2800      	cmp	r0, #0
 801e6ce:	d000      	beq.n	801e6d2 <arm_radix4_butterfly_inverse_q31+0x22e>
 801e6d0:	e70f      	b.n	801e4f2 <arm_radix4_butterfly_inverse_q31+0x4e>
 801e6d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e6d4:	009b      	lsls	r3, r3, #2
 801e6d6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e6d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e6da:	9320      	str	r3, [sp, #128]	@ 0x80
 801e6dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e6de:	2b04      	cmp	r3, #4
 801e6e0:	d800      	bhi.n	801e6e4 <arm_radix4_butterfly_inverse_q31+0x240>
 801e6e2:	e17c      	b.n	801e9de <arm_radix4_butterfly_inverse_q31+0x53a>
 801e6e4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e6e6:	0893      	lsrs	r3, r2, #2
 801e6e8:	1e59      	subs	r1, r3, #1
 801e6ea:	9321      	str	r3, [sp, #132]	@ 0x84
 801e6ec:	00db      	lsls	r3, r3, #3
 801e6ee:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e6f0:	00d3      	lsls	r3, r2, #3
 801e6f2:	9300      	str	r3, [sp, #0]
 801e6f4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e6f6:	911a      	str	r1, [sp, #104]	@ 0x68
 801e6f8:	00da      	lsls	r2, r3, #3
 801e6fa:	921e      	str	r2, [sp, #120]	@ 0x78
 801e6fc:	011a      	lsls	r2, r3, #4
 801e6fe:	921d      	str	r2, [sp, #116]	@ 0x74
 801e700:	001a      	movs	r2, r3
 801e702:	4694      	mov	ip, r2
 801e704:	005b      	lsls	r3, r3, #1
 801e706:	4463      	add	r3, ip
 801e708:	00db      	lsls	r3, r3, #3
 801e70a:	931c      	str	r3, [sp, #112]	@ 0x70
 801e70c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e70e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e710:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e712:	9318      	str	r3, [sp, #96]	@ 0x60
 801e714:	9319      	str	r3, [sp, #100]	@ 0x64
 801e716:	9316      	str	r3, [sp, #88]	@ 0x58
 801e718:	2300      	movs	r3, #0
 801e71a:	9315      	str	r3, [sp, #84]	@ 0x54
 801e71c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e71e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e720:	681a      	ldr	r2, [r3, #0]
 801e722:	685b      	ldr	r3, [r3, #4]
 801e724:	9205      	str	r2, [sp, #20]
 801e726:	9306      	str	r3, [sp, #24]
 801e728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e72a:	468c      	mov	ip, r1
 801e72c:	681a      	ldr	r2, [r3, #0]
 801e72e:	685b      	ldr	r3, [r3, #4]
 801e730:	9207      	str	r2, [sp, #28]
 801e732:	9308      	str	r3, [sp, #32]
 801e734:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e736:	681a      	ldr	r2, [r3, #0]
 801e738:	685b      	ldr	r3, [r3, #4]
 801e73a:	9209      	str	r2, [sp, #36]	@ 0x24
 801e73c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e73e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e740:	0013      	movs	r3, r2
 801e742:	4463      	add	r3, ip
 801e744:	4698      	mov	r8, r3
 801e746:	0013      	movs	r3, r2
 801e748:	4442      	add	r2, r8
 801e74a:	4691      	mov	r9, r2
 801e74c:	001a      	movs	r2, r3
 801e74e:	444a      	add	r2, r9
 801e750:	4692      	mov	sl, r2
 801e752:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e754:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e756:	4293      	cmp	r3, r2
 801e758:	d800      	bhi.n	801e75c <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e75a:	e0d9      	b.n	801e910 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e75c:	4694      	mov	ip, r2
 801e75e:	4644      	mov	r4, r8
 801e760:	4655      	mov	r5, sl
 801e762:	4688      	mov	r8, r1
 801e764:	9b07      	ldr	r3, [sp, #28]
 801e766:	17db      	asrs	r3, r3, #31
 801e768:	930c      	str	r3, [sp, #48]	@ 0x30
 801e76a:	9b08      	ldr	r3, [sp, #32]
 801e76c:	17db      	asrs	r3, r3, #31
 801e76e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e770:	9b05      	ldr	r3, [sp, #20]
 801e772:	17db      	asrs	r3, r3, #31
 801e774:	930e      	str	r3, [sp, #56]	@ 0x38
 801e776:	9b06      	ldr	r3, [sp, #24]
 801e778:	17db      	asrs	r3, r3, #31
 801e77a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e77c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e77e:	17db      	asrs	r3, r3, #31
 801e780:	9310      	str	r3, [sp, #64]	@ 0x40
 801e782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e784:	17db      	asrs	r3, r3, #31
 801e786:	9311      	str	r3, [sp, #68]	@ 0x44
 801e788:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e78a:	4463      	add	r3, ip
 801e78c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e78e:	4643      	mov	r3, r8
 801e790:	4641      	mov	r1, r8
 801e792:	681a      	ldr	r2, [r3, #0]
 801e794:	464b      	mov	r3, r9
 801e796:	684f      	ldr	r7, [r1, #4]
 801e798:	4649      	mov	r1, r9
 801e79a:	681b      	ldr	r3, [r3, #0]
 801e79c:	18d6      	adds	r6, r2, r3
 801e79e:	1ad3      	subs	r3, r2, r3
 801e7a0:	9301      	str	r3, [sp, #4]
 801e7a2:	684b      	ldr	r3, [r1, #4]
 801e7a4:	1af9      	subs	r1, r7, r3
 801e7a6:	9102      	str	r1, [sp, #8]
 801e7a8:	6829      	ldr	r1, [r5, #0]
 801e7aa:	18f8      	adds	r0, r7, r3
 801e7ac:	468c      	mov	ip, r1
 801e7ae:	6827      	ldr	r7, [r4, #0]
 801e7b0:	4467      	add	r7, ip
 801e7b2:	003a      	movs	r2, r7
 801e7b4:	19f3      	adds	r3, r6, r7
 801e7b6:	4647      	mov	r7, r8
 801e7b8:	109b      	asrs	r3, r3, #2
 801e7ba:	603b      	str	r3, [r7, #0]
 801e7bc:	6869      	ldr	r1, [r5, #4]
 801e7be:	6867      	ldr	r7, [r4, #4]
 801e7c0:	468c      	mov	ip, r1
 801e7c2:	4467      	add	r7, ip
 801e7c4:	003b      	movs	r3, r7
 801e7c6:	19c1      	adds	r1, r0, r7
 801e7c8:	4647      	mov	r7, r8
 801e7ca:	1ab6      	subs	r6, r6, r2
 801e7cc:	1089      	asrs	r1, r1, #2
 801e7ce:	6079      	str	r1, [r7, #4]
 801e7d0:	17f2      	asrs	r2, r6, #31
 801e7d2:	9900      	ldr	r1, [sp, #0]
 801e7d4:	4692      	mov	sl, r2
 801e7d6:	468c      	mov	ip, r1
 801e7d8:	6867      	ldr	r7, [r4, #4]
 801e7da:	6869      	ldr	r1, [r5, #4]
 801e7dc:	44e0      	add	r8, ip
 801e7de:	1a7f      	subs	r7, r7, r1
 801e7e0:	9703      	str	r7, [sp, #12]
 801e7e2:	6821      	ldr	r1, [r4, #0]
 801e7e4:	682f      	ldr	r7, [r5, #0]
 801e7e6:	1bc9      	subs	r1, r1, r7
 801e7e8:	1ac7      	subs	r7, r0, r3
 801e7ea:	17fa      	asrs	r2, r7, #31
 801e7ec:	4693      	mov	fp, r2
 801e7ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e7f0:	9a07      	ldr	r2, [sp, #28]
 801e7f2:	9104      	str	r1, [sp, #16]
 801e7f4:	0030      	movs	r0, r6
 801e7f6:	4651      	mov	r1, sl
 801e7f8:	f7e1 fee2 	bl	80005c0 <__aeabi_lmul>
 801e7fc:	9a08      	ldr	r2, [sp, #32]
 801e7fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e800:	9112      	str	r1, [sp, #72]	@ 0x48
 801e802:	0038      	movs	r0, r7
 801e804:	4659      	mov	r1, fp
 801e806:	f7e1 fedb 	bl	80005c0 <__aeabi_lmul>
 801e80a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e80c:	9a07      	ldr	r2, [sp, #28]
 801e80e:	1a41      	subs	r1, r0, r1
 801e810:	1049      	asrs	r1, r1, #1
 801e812:	6021      	str	r1, [r4, #0]
 801e814:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e816:	0038      	movs	r0, r7
 801e818:	4659      	mov	r1, fp
 801e81a:	f7e1 fed1 	bl	80005c0 <__aeabi_lmul>
 801e81e:	9a08      	ldr	r2, [sp, #32]
 801e820:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e822:	000f      	movs	r7, r1
 801e824:	0030      	movs	r0, r6
 801e826:	4651      	mov	r1, sl
 801e828:	f7e1 feca 	bl	80005c0 <__aeabi_lmul>
 801e82c:	9b00      	ldr	r3, [sp, #0]
 801e82e:	187f      	adds	r7, r7, r1
 801e830:	469c      	mov	ip, r3
 801e832:	107f      	asrs	r7, r7, #1
 801e834:	6067      	str	r7, [r4, #4]
 801e836:	9a01      	ldr	r2, [sp, #4]
 801e838:	9f03      	ldr	r7, [sp, #12]
 801e83a:	9802      	ldr	r0, [sp, #8]
 801e83c:	1bd7      	subs	r7, r2, r7
 801e83e:	17fe      	asrs	r6, r7, #31
 801e840:	0031      	movs	r1, r6
 801e842:	9e04      	ldr	r6, [sp, #16]
 801e844:	4682      	mov	sl, r0
 801e846:	4464      	add	r4, ip
 801e848:	46b4      	mov	ip, r6
 801e84a:	44e2      	add	sl, ip
 801e84c:	4652      	mov	r2, sl
 801e84e:	17d2      	asrs	r2, r2, #31
 801e850:	4693      	mov	fp, r2
 801e852:	0038      	movs	r0, r7
 801e854:	9a05      	ldr	r2, [sp, #20]
 801e856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e858:	9112      	str	r1, [sp, #72]	@ 0x48
 801e85a:	f7e1 feb1 	bl	80005c0 <__aeabi_lmul>
 801e85e:	9a06      	ldr	r2, [sp, #24]
 801e860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e862:	000e      	movs	r6, r1
 801e864:	4650      	mov	r0, sl
 801e866:	4659      	mov	r1, fp
 801e868:	f7e1 feaa 	bl	80005c0 <__aeabi_lmul>
 801e86c:	4648      	mov	r0, r9
 801e86e:	1a76      	subs	r6, r6, r1
 801e870:	1076      	asrs	r6, r6, #1
 801e872:	6006      	str	r6, [r0, #0]
 801e874:	9a05      	ldr	r2, [sp, #20]
 801e876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e878:	4650      	mov	r0, sl
 801e87a:	4659      	mov	r1, fp
 801e87c:	f7e1 fea0 	bl	80005c0 <__aeabi_lmul>
 801e880:	9a06      	ldr	r2, [sp, #24]
 801e882:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e884:	000e      	movs	r6, r1
 801e886:	0038      	movs	r0, r7
 801e888:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e88a:	f7e1 fe99 	bl	80005c0 <__aeabi_lmul>
 801e88e:	9a00      	ldr	r2, [sp, #0]
 801e890:	9f03      	ldr	r7, [sp, #12]
 801e892:	4694      	mov	ip, r2
 801e894:	1876      	adds	r6, r6, r1
 801e896:	4649      	mov	r1, r9
 801e898:	44e1      	add	r9, ip
 801e89a:	46bc      	mov	ip, r7
 801e89c:	9b01      	ldr	r3, [sp, #4]
 801e89e:	1076      	asrs	r6, r6, #1
 801e8a0:	4463      	add	r3, ip
 801e8a2:	17df      	asrs	r7, r3, #31
 801e8a4:	604e      	str	r6, [r1, #4]
 801e8a6:	46ba      	mov	sl, r7
 801e8a8:	001e      	movs	r6, r3
 801e8aa:	9802      	ldr	r0, [sp, #8]
 801e8ac:	9b04      	ldr	r3, [sp, #16]
 801e8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e8b0:	1ac7      	subs	r7, r0, r3
 801e8b2:	17fb      	asrs	r3, r7, #31
 801e8b4:	469b      	mov	fp, r3
 801e8b6:	0030      	movs	r0, r6
 801e8b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8ba:	4651      	mov	r1, sl
 801e8bc:	f7e1 fe80 	bl	80005c0 <__aeabi_lmul>
 801e8c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e8c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e8c4:	9101      	str	r1, [sp, #4]
 801e8c6:	0038      	movs	r0, r7
 801e8c8:	4659      	mov	r1, fp
 801e8ca:	f7e1 fe79 	bl	80005c0 <__aeabi_lmul>
 801e8ce:	9801      	ldr	r0, [sp, #4]
 801e8d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e8d2:	1a41      	subs	r1, r0, r1
 801e8d4:	1049      	asrs	r1, r1, #1
 801e8d6:	6029      	str	r1, [r5, #0]
 801e8d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8da:	0038      	movs	r0, r7
 801e8dc:	4659      	mov	r1, fp
 801e8de:	f7e1 fe6f 	bl	80005c0 <__aeabi_lmul>
 801e8e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e8e4:	000f      	movs	r7, r1
 801e8e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e8e8:	0030      	movs	r0, r6
 801e8ea:	4651      	mov	r1, sl
 801e8ec:	f7e1 fe68 	bl	80005c0 <__aeabi_lmul>
 801e8f0:	187f      	adds	r7, r7, r1
 801e8f2:	107f      	asrs	r7, r7, #1
 801e8f4:	606f      	str	r7, [r5, #4]
 801e8f6:	9a00      	ldr	r2, [sp, #0]
 801e8f8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e8fa:	4694      	mov	ip, r2
 801e8fc:	4465      	add	r5, ip
 801e8fe:	468c      	mov	ip, r1
 801e900:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e902:	0013      	movs	r3, r2
 801e904:	4462      	add	r2, ip
 801e906:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e908:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e90a:	429a      	cmp	r2, r3
 801e90c:	d900      	bls.n	801e910 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e90e:	e73e      	b.n	801e78e <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e910:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e912:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e914:	468c      	mov	ip, r1
 801e916:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e918:	4462      	add	r2, ip
 801e91a:	468c      	mov	ip, r1
 801e91c:	9216      	str	r2, [sp, #88]	@ 0x58
 801e91e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e920:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e922:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e924:	4462      	add	r2, ip
 801e926:	468c      	mov	ip, r1
 801e928:	9219      	str	r2, [sp, #100]	@ 0x64
 801e92a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e92c:	3301      	adds	r3, #1
 801e92e:	4462      	add	r2, ip
 801e930:	9218      	str	r2, [sp, #96]	@ 0x60
 801e932:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e934:	9315      	str	r3, [sp, #84]	@ 0x54
 801e936:	3208      	adds	r2, #8
 801e938:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e93a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e93c:	4293      	cmp	r3, r2
 801e93e:	d800      	bhi.n	801e942 <arm_radix4_butterfly_inverse_q31+0x49e>
 801e940:	e6ec      	b.n	801e71c <arm_radix4_butterfly_inverse_q31+0x278>
 801e942:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e944:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e946:	009b      	lsls	r3, r3, #2
 801e948:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e94a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e94c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e94e:	089b      	lsrs	r3, r3, #2
 801e950:	9320      	str	r3, [sp, #128]	@ 0x80
 801e952:	2b04      	cmp	r3, #4
 801e954:	d900      	bls.n	801e958 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e956:	e6c5      	b.n	801e6e4 <arm_radix4_butterfly_inverse_q31+0x240>
 801e958:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e95a:	469a      	mov	sl, r3
 801e95c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e95e:	681a      	ldr	r2, [r3, #0]
 801e960:	6918      	ldr	r0, [r3, #16]
 801e962:	4691      	mov	r9, r2
 801e964:	464c      	mov	r4, r9
 801e966:	4680      	mov	r8, r0
 801e968:	69de      	ldr	r6, [r3, #28]
 801e96a:	689d      	ldr	r5, [r3, #8]
 801e96c:	46b4      	mov	ip, r6
 801e96e:	6998      	ldr	r0, [r3, #24]
 801e970:	1964      	adds	r4, r4, r5
 801e972:	6859      	ldr	r1, [r3, #4]
 801e974:	68da      	ldr	r2, [r3, #12]
 801e976:	4444      	add	r4, r8
 801e978:	695f      	ldr	r7, [r3, #20]
 801e97a:	1824      	adds	r4, r4, r0
 801e97c:	601c      	str	r4, [r3, #0]
 801e97e:	188c      	adds	r4, r1, r2
 801e980:	19e4      	adds	r4, r4, r7
 801e982:	4464      	add	r4, ip
 801e984:	605c      	str	r4, [r3, #4]
 801e986:	464c      	mov	r4, r9
 801e988:	1b64      	subs	r4, r4, r5
 801e98a:	4444      	add	r4, r8
 801e98c:	1a24      	subs	r4, r4, r0
 801e98e:	609c      	str	r4, [r3, #8]
 801e990:	1a8c      	subs	r4, r1, r2
 801e992:	19e4      	adds	r4, r4, r7
 801e994:	1ba4      	subs	r4, r4, r6
 801e996:	60dc      	str	r4, [r3, #12]
 801e998:	464c      	mov	r4, r9
 801e99a:	4646      	mov	r6, r8
 801e99c:	1aa4      	subs	r4, r4, r2
 801e99e:	1ba4      	subs	r4, r4, r6
 801e9a0:	4464      	add	r4, ip
 801e9a2:	611c      	str	r4, [r3, #16]
 801e9a4:	194c      	adds	r4, r1, r5
 801e9a6:	1be4      	subs	r4, r4, r7
 801e9a8:	1a24      	subs	r4, r4, r0
 801e9aa:	615c      	str	r4, [r3, #20]
 801e9ac:	4644      	mov	r4, r8
 801e9ae:	4666      	mov	r6, ip
 801e9b0:	444a      	add	r2, r9
 801e9b2:	1b12      	subs	r2, r2, r4
 801e9b4:	1b92      	subs	r2, r2, r6
 801e9b6:	619a      	str	r2, [r3, #24]
 801e9b8:	1b4a      	subs	r2, r1, r5
 801e9ba:	1bd1      	subs	r1, r2, r7
 801e9bc:	2201      	movs	r2, #1
 801e9be:	4252      	negs	r2, r2
 801e9c0:	4694      	mov	ip, r2
 801e9c2:	44e2      	add	sl, ip
 801e9c4:	4652      	mov	r2, sl
 801e9c6:	1809      	adds	r1, r1, r0
 801e9c8:	61d9      	str	r1, [r3, #28]
 801e9ca:	3320      	adds	r3, #32
 801e9cc:	2a00      	cmp	r2, #0
 801e9ce:	d1c6      	bne.n	801e95e <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e9d0:	b027      	add	sp, #156	@ 0x9c
 801e9d2:	bc3c      	pop	{r2, r3, r4, r5}
 801e9d4:	4690      	mov	r8, r2
 801e9d6:	4699      	mov	r9, r3
 801e9d8:	46a2      	mov	sl, r4
 801e9da:	46ab      	mov	fp, r5
 801e9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9de:	469a      	mov	sl, r3
 801e9e0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e9e2:	e7bc      	b.n	801e95e <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e9e4 <arm_cmplx_mag_squared_q31>:
 801e9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9e6:	464f      	mov	r7, r9
 801e9e8:	4646      	mov	r6, r8
 801e9ea:	0004      	movs	r4, r0
 801e9ec:	b4c0      	push	{r6, r7}
 801e9ee:	0016      	movs	r6, r2
 801e9f0:	000f      	movs	r7, r1
 801e9f2:	2a00      	cmp	r2, #0
 801e9f4:	d018      	beq.n	801ea28 <arm_cmplx_mag_squared_q31+0x44>
 801e9f6:	6823      	ldr	r3, [r4, #0]
 801e9f8:	6822      	ldr	r2, [r4, #0]
 801e9fa:	17d9      	asrs	r1, r3, #31
 801e9fc:	6863      	ldr	r3, [r4, #4]
 801e9fe:	0010      	movs	r0, r2
 801ea00:	4698      	mov	r8, r3
 801ea02:	17db      	asrs	r3, r3, #31
 801ea04:	4699      	mov	r9, r3
 801ea06:	000b      	movs	r3, r1
 801ea08:	f7e1 fdda 	bl	80005c0 <__aeabi_lmul>
 801ea0c:	4642      	mov	r2, r8
 801ea0e:	104d      	asrs	r5, r1, #1
 801ea10:	464b      	mov	r3, r9
 801ea12:	4640      	mov	r0, r8
 801ea14:	4649      	mov	r1, r9
 801ea16:	f7e1 fdd3 	bl	80005c0 <__aeabi_lmul>
 801ea1a:	1049      	asrs	r1, r1, #1
 801ea1c:	1869      	adds	r1, r5, r1
 801ea1e:	3e01      	subs	r6, #1
 801ea20:	c702      	stmia	r7!, {r1}
 801ea22:	3408      	adds	r4, #8
 801ea24:	2e00      	cmp	r6, #0
 801ea26:	d1e6      	bne.n	801e9f6 <arm_cmplx_mag_squared_q31+0x12>
 801ea28:	bc0c      	pop	{r2, r3}
 801ea2a:	4690      	mov	r8, r2
 801ea2c:	4699      	mov	r9, r3
 801ea2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ea30 <arm_mult_q31>:
 801ea30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea32:	4646      	mov	r6, r8
 801ea34:	464f      	mov	r7, r9
 801ea36:	4690      	mov	r8, r2
 801ea38:	b4c0      	push	{r6, r7}
 801ea3a:	001d      	movs	r5, r3
 801ea3c:	0006      	movs	r6, r0
 801ea3e:	000f      	movs	r7, r1
 801ea40:	2400      	movs	r4, #0
 801ea42:	2b00      	cmp	r3, #0
 801ea44:	d020      	beq.n	801ea88 <arm_mult_q31+0x58>
 801ea46:	4b12      	ldr	r3, [pc, #72]	@ (801ea90 <arm_mult_q31+0x60>)
 801ea48:	4699      	mov	r9, r3
 801ea4a:	e007      	b.n	801ea5c <arm_mult_q31+0x2c>
 801ea4c:	464b      	mov	r3, r9
 801ea4e:	4059      	eors	r1, r3
 801ea50:	4643      	mov	r3, r8
 801ea52:	3d01      	subs	r5, #1
 801ea54:	5119      	str	r1, [r3, r4]
 801ea56:	3404      	adds	r4, #4
 801ea58:	2d00      	cmp	r5, #0
 801ea5a:	d015      	beq.n	801ea88 <arm_mult_q31+0x58>
 801ea5c:	5933      	ldr	r3, [r6, r4]
 801ea5e:	593a      	ldr	r2, [r7, r4]
 801ea60:	17d9      	asrs	r1, r3, #31
 801ea62:	593b      	ldr	r3, [r7, r4]
 801ea64:	5930      	ldr	r0, [r6, r4]
 801ea66:	17db      	asrs	r3, r3, #31
 801ea68:	f7e1 fdaa 	bl	80005c0 <__aeabi_lmul>
 801ea6c:	004b      	lsls	r3, r1, #1
 801ea6e:	0fc0      	lsrs	r0, r0, #31
 801ea70:	4318      	orrs	r0, r3
 801ea72:	17c9      	asrs	r1, r1, #31
 801ea74:	17c3      	asrs	r3, r0, #31
 801ea76:	428b      	cmp	r3, r1
 801ea78:	d1e8      	bne.n	801ea4c <arm_mult_q31+0x1c>
 801ea7a:	0001      	movs	r1, r0
 801ea7c:	4643      	mov	r3, r8
 801ea7e:	3d01      	subs	r5, #1
 801ea80:	5119      	str	r1, [r3, r4]
 801ea82:	3404      	adds	r4, #4
 801ea84:	2d00      	cmp	r5, #0
 801ea86:	d1e9      	bne.n	801ea5c <arm_mult_q31+0x2c>
 801ea88:	bc0c      	pop	{r2, r3}
 801ea8a:	4690      	mov	r8, r2
 801ea8c:	4699      	mov	r9, r3
 801ea8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea90:	7fffffff 	.word	0x7fffffff

0801ea94 <arm_add_q31>:
 801ea94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea96:	465f      	mov	r7, fp
 801ea98:	4656      	mov	r6, sl
 801ea9a:	464d      	mov	r5, r9
 801ea9c:	4644      	mov	r4, r8
 801ea9e:	b4f0      	push	{r4, r5, r6, r7}
 801eaa0:	4693      	mov	fp, r2
 801eaa2:	b083      	sub	sp, #12
 801eaa4:	4681      	mov	r9, r0
 801eaa6:	468a      	mov	sl, r1
 801eaa8:	4698      	mov	r8, r3
 801eaaa:	2200      	movs	r2, #0
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	d020      	beq.n	801eaf2 <arm_add_q31+0x5e>
 801eab0:	4649      	mov	r1, r9
 801eab2:	4653      	mov	r3, sl
 801eab4:	588e      	ldr	r6, [r1, r2]
 801eab6:	589b      	ldr	r3, [r3, r2]
 801eab8:	17f7      	asrs	r7, r6, #31
 801eaba:	001c      	movs	r4, r3
 801eabc:	0030      	movs	r0, r6
 801eabe:	0039      	movs	r1, r7
 801eac0:	17dd      	asrs	r5, r3, #31
 801eac2:	46b4      	mov	ip, r6
 801eac4:	1900      	adds	r0, r0, r4
 801eac6:	4169      	adcs	r1, r5
 801eac8:	4463      	add	r3, ip
 801eaca:	9000      	str	r0, [sp, #0]
 801eacc:	9101      	str	r1, [sp, #4]
 801eace:	17d9      	asrs	r1, r3, #31
 801ead0:	468c      	mov	ip, r1
 801ead2:	9901      	ldr	r1, [sp, #4]
 801ead4:	458c      	cmp	ip, r1
 801ead6:	d002      	beq.n	801eade <arm_add_q31+0x4a>
 801ead8:	17cb      	asrs	r3, r1, #31
 801eada:	4909      	ldr	r1, [pc, #36]	@ (801eb00 <arm_add_q31+0x6c>)
 801eadc:	404b      	eors	r3, r1
 801eade:	4659      	mov	r1, fp
 801eae0:	508b      	str	r3, [r1, r2]
 801eae2:	2301      	movs	r3, #1
 801eae4:	425b      	negs	r3, r3
 801eae6:	469c      	mov	ip, r3
 801eae8:	44e0      	add	r8, ip
 801eaea:	4643      	mov	r3, r8
 801eaec:	3204      	adds	r2, #4
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d1de      	bne.n	801eab0 <arm_add_q31+0x1c>
 801eaf2:	b003      	add	sp, #12
 801eaf4:	bc3c      	pop	{r2, r3, r4, r5}
 801eaf6:	4690      	mov	r8, r2
 801eaf8:	4699      	mov	r9, r3
 801eafa:	46a2      	mov	sl, r4
 801eafc:	46ab      	mov	fp, r5
 801eafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb00:	7fffffff 	.word	0x7fffffff

0801eb04 <atof>:
 801eb04:	b510      	push	{r4, lr}
 801eb06:	2100      	movs	r1, #0
 801eb08:	f000 fe12 	bl	801f730 <strtod>
 801eb0c:	bd10      	pop	{r4, pc}

0801eb0e <atoi>:
 801eb0e:	b510      	push	{r4, lr}
 801eb10:	220a      	movs	r2, #10
 801eb12:	2100      	movs	r1, #0
 801eb14:	f000 fea4 	bl	801f860 <strtol>
 801eb18:	bd10      	pop	{r4, pc}
	...

0801eb1c <sulp>:
 801eb1c:	b570      	push	{r4, r5, r6, lr}
 801eb1e:	0016      	movs	r6, r2
 801eb20:	000d      	movs	r5, r1
 801eb22:	f003 fcf3 	bl	802250c <__ulp>
 801eb26:	2e00      	cmp	r6, #0
 801eb28:	d00d      	beq.n	801eb46 <sulp+0x2a>
 801eb2a:	236b      	movs	r3, #107	@ 0x6b
 801eb2c:	006a      	lsls	r2, r5, #1
 801eb2e:	0d52      	lsrs	r2, r2, #21
 801eb30:	1a9b      	subs	r3, r3, r2
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	dd07      	ble.n	801eb46 <sulp+0x2a>
 801eb36:	2400      	movs	r4, #0
 801eb38:	4a03      	ldr	r2, [pc, #12]	@ (801eb48 <sulp+0x2c>)
 801eb3a:	051b      	lsls	r3, r3, #20
 801eb3c:	189d      	adds	r5, r3, r2
 801eb3e:	002b      	movs	r3, r5
 801eb40:	0022      	movs	r2, r4
 801eb42:	f7e3 fd7b 	bl	800263c <__aeabi_dmul>
 801eb46:	bd70      	pop	{r4, r5, r6, pc}
 801eb48:	3ff00000 	.word	0x3ff00000

0801eb4c <_strtod_l>:
 801eb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb4e:	b0a3      	sub	sp, #140	@ 0x8c
 801eb50:	921b      	str	r2, [sp, #108]	@ 0x6c
 801eb52:	2200      	movs	r2, #0
 801eb54:	2600      	movs	r6, #0
 801eb56:	2700      	movs	r7, #0
 801eb58:	9005      	str	r0, [sp, #20]
 801eb5a:	9109      	str	r1, [sp, #36]	@ 0x24
 801eb5c:	921e      	str	r2, [sp, #120]	@ 0x78
 801eb5e:	911d      	str	r1, [sp, #116]	@ 0x74
 801eb60:	780a      	ldrb	r2, [r1, #0]
 801eb62:	2a2b      	cmp	r2, #43	@ 0x2b
 801eb64:	d053      	beq.n	801ec0e <_strtod_l+0xc2>
 801eb66:	d83f      	bhi.n	801ebe8 <_strtod_l+0x9c>
 801eb68:	2a0d      	cmp	r2, #13
 801eb6a:	d839      	bhi.n	801ebe0 <_strtod_l+0x94>
 801eb6c:	2a08      	cmp	r2, #8
 801eb6e:	d839      	bhi.n	801ebe4 <_strtod_l+0x98>
 801eb70:	2a00      	cmp	r2, #0
 801eb72:	d042      	beq.n	801ebfa <_strtod_l+0xae>
 801eb74:	2200      	movs	r2, #0
 801eb76:	9212      	str	r2, [sp, #72]	@ 0x48
 801eb78:	2100      	movs	r1, #0
 801eb7a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801eb7c:	910c      	str	r1, [sp, #48]	@ 0x30
 801eb7e:	782a      	ldrb	r2, [r5, #0]
 801eb80:	2a30      	cmp	r2, #48	@ 0x30
 801eb82:	d000      	beq.n	801eb86 <_strtod_l+0x3a>
 801eb84:	e083      	b.n	801ec8e <_strtod_l+0x142>
 801eb86:	786a      	ldrb	r2, [r5, #1]
 801eb88:	3120      	adds	r1, #32
 801eb8a:	438a      	bics	r2, r1
 801eb8c:	2a58      	cmp	r2, #88	@ 0x58
 801eb8e:	d000      	beq.n	801eb92 <_strtod_l+0x46>
 801eb90:	e073      	b.n	801ec7a <_strtod_l+0x12e>
 801eb92:	9302      	str	r3, [sp, #8]
 801eb94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801eb96:	4a95      	ldr	r2, [pc, #596]	@ (801edec <_strtod_l+0x2a0>)
 801eb98:	9301      	str	r3, [sp, #4]
 801eb9a:	ab1e      	add	r3, sp, #120	@ 0x78
 801eb9c:	9300      	str	r3, [sp, #0]
 801eb9e:	9805      	ldr	r0, [sp, #20]
 801eba0:	ab1f      	add	r3, sp, #124	@ 0x7c
 801eba2:	a91d      	add	r1, sp, #116	@ 0x74
 801eba4:	f002 fd62 	bl	802166c <__gethex>
 801eba8:	230f      	movs	r3, #15
 801ebaa:	0002      	movs	r2, r0
 801ebac:	401a      	ands	r2, r3
 801ebae:	0004      	movs	r4, r0
 801ebb0:	9206      	str	r2, [sp, #24]
 801ebb2:	4218      	tst	r0, r3
 801ebb4:	d005      	beq.n	801ebc2 <_strtod_l+0x76>
 801ebb6:	2a06      	cmp	r2, #6
 801ebb8:	d12b      	bne.n	801ec12 <_strtod_l+0xc6>
 801ebba:	2300      	movs	r3, #0
 801ebbc:	3501      	adds	r5, #1
 801ebbe:	951d      	str	r5, [sp, #116]	@ 0x74
 801ebc0:	9312      	str	r3, [sp, #72]	@ 0x48
 801ebc2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	d002      	beq.n	801ebce <_strtod_l+0x82>
 801ebc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ebca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ebcc:	6013      	str	r3, [r2, #0]
 801ebce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ebd0:	2b00      	cmp	r3, #0
 801ebd2:	d019      	beq.n	801ec08 <_strtod_l+0xbc>
 801ebd4:	2380      	movs	r3, #128	@ 0x80
 801ebd6:	0030      	movs	r0, r6
 801ebd8:	061b      	lsls	r3, r3, #24
 801ebda:	18f9      	adds	r1, r7, r3
 801ebdc:	b023      	add	sp, #140	@ 0x8c
 801ebde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ebe0:	2a20      	cmp	r2, #32
 801ebe2:	d1c7      	bne.n	801eb74 <_strtod_l+0x28>
 801ebe4:	3101      	adds	r1, #1
 801ebe6:	e7ba      	b.n	801eb5e <_strtod_l+0x12>
 801ebe8:	2a2d      	cmp	r2, #45	@ 0x2d
 801ebea:	d1c3      	bne.n	801eb74 <_strtod_l+0x28>
 801ebec:	3a2c      	subs	r2, #44	@ 0x2c
 801ebee:	9212      	str	r2, [sp, #72]	@ 0x48
 801ebf0:	1c4a      	adds	r2, r1, #1
 801ebf2:	921d      	str	r2, [sp, #116]	@ 0x74
 801ebf4:	784a      	ldrb	r2, [r1, #1]
 801ebf6:	2a00      	cmp	r2, #0
 801ebf8:	d1be      	bne.n	801eb78 <_strtod_l+0x2c>
 801ebfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ebfc:	931d      	str	r3, [sp, #116]	@ 0x74
 801ebfe:	2300      	movs	r3, #0
 801ec00:	9312      	str	r3, [sp, #72]	@ 0x48
 801ec02:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ec04:	2b00      	cmp	r3, #0
 801ec06:	d1df      	bne.n	801ebc8 <_strtod_l+0x7c>
 801ec08:	0030      	movs	r0, r6
 801ec0a:	0039      	movs	r1, r7
 801ec0c:	e7e6      	b.n	801ebdc <_strtod_l+0x90>
 801ec0e:	2200      	movs	r2, #0
 801ec10:	e7ed      	b.n	801ebee <_strtod_l+0xa2>
 801ec12:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ec14:	2a00      	cmp	r2, #0
 801ec16:	d007      	beq.n	801ec28 <_strtod_l+0xdc>
 801ec18:	2135      	movs	r1, #53	@ 0x35
 801ec1a:	a820      	add	r0, sp, #128	@ 0x80
 801ec1c:	f003 fd6c 	bl	80226f8 <__copybits>
 801ec20:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ec22:	9805      	ldr	r0, [sp, #20]
 801ec24:	f003 f926 	bl	8021e74 <_Bfree>
 801ec28:	9806      	ldr	r0, [sp, #24]
 801ec2a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ec2c:	3801      	subs	r0, #1
 801ec2e:	2804      	cmp	r0, #4
 801ec30:	d806      	bhi.n	801ec40 <_strtod_l+0xf4>
 801ec32:	f7e1 faa3 	bl	800017c <__gnu_thumb1_case_uqi>
 801ec36:	0312      	.short	0x0312
 801ec38:	1e1c      	.short	0x1e1c
 801ec3a:	12          	.byte	0x12
 801ec3b:	00          	.byte	0x00
 801ec3c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ec3e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801ec40:	05e4      	lsls	r4, r4, #23
 801ec42:	d502      	bpl.n	801ec4a <_strtod_l+0xfe>
 801ec44:	2380      	movs	r3, #128	@ 0x80
 801ec46:	061b      	lsls	r3, r3, #24
 801ec48:	431f      	orrs	r7, r3
 801ec4a:	4b69      	ldr	r3, [pc, #420]	@ (801edf0 <_strtod_l+0x2a4>)
 801ec4c:	423b      	tst	r3, r7
 801ec4e:	d1b8      	bne.n	801ebc2 <_strtod_l+0x76>
 801ec50:	f001 fd90 	bl	8020774 <__errno>
 801ec54:	2322      	movs	r3, #34	@ 0x22
 801ec56:	6003      	str	r3, [r0, #0]
 801ec58:	e7b3      	b.n	801ebc2 <_strtod_l+0x76>
 801ec5a:	4966      	ldr	r1, [pc, #408]	@ (801edf4 <_strtod_l+0x2a8>)
 801ec5c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ec5e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ec60:	400a      	ands	r2, r1
 801ec62:	4965      	ldr	r1, [pc, #404]	@ (801edf8 <_strtod_l+0x2ac>)
 801ec64:	185b      	adds	r3, r3, r1
 801ec66:	051b      	lsls	r3, r3, #20
 801ec68:	431a      	orrs	r2, r3
 801ec6a:	0017      	movs	r7, r2
 801ec6c:	e7e8      	b.n	801ec40 <_strtod_l+0xf4>
 801ec6e:	4f60      	ldr	r7, [pc, #384]	@ (801edf0 <_strtod_l+0x2a4>)
 801ec70:	e7e6      	b.n	801ec40 <_strtod_l+0xf4>
 801ec72:	2601      	movs	r6, #1
 801ec74:	4f61      	ldr	r7, [pc, #388]	@ (801edfc <_strtod_l+0x2b0>)
 801ec76:	4276      	negs	r6, r6
 801ec78:	e7e2      	b.n	801ec40 <_strtod_l+0xf4>
 801ec7a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ec7c:	1c5a      	adds	r2, r3, #1
 801ec7e:	921d      	str	r2, [sp, #116]	@ 0x74
 801ec80:	785b      	ldrb	r3, [r3, #1]
 801ec82:	2b30      	cmp	r3, #48	@ 0x30
 801ec84:	d0f9      	beq.n	801ec7a <_strtod_l+0x12e>
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d09b      	beq.n	801ebc2 <_strtod_l+0x76>
 801ec8a:	2301      	movs	r3, #1
 801ec8c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec8e:	2500      	movs	r5, #0
 801ec90:	220a      	movs	r2, #10
 801ec92:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ec94:	950d      	str	r5, [sp, #52]	@ 0x34
 801ec96:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ec98:	9508      	str	r5, [sp, #32]
 801ec9a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801ec9c:	7804      	ldrb	r4, [r0, #0]
 801ec9e:	0023      	movs	r3, r4
 801eca0:	3b30      	subs	r3, #48	@ 0x30
 801eca2:	b2d9      	uxtb	r1, r3
 801eca4:	2909      	cmp	r1, #9
 801eca6:	d927      	bls.n	801ecf8 <_strtod_l+0x1ac>
 801eca8:	2201      	movs	r2, #1
 801ecaa:	4955      	ldr	r1, [pc, #340]	@ (801ee00 <_strtod_l+0x2b4>)
 801ecac:	f001 fcd4 	bl	8020658 <strncmp>
 801ecb0:	2800      	cmp	r0, #0
 801ecb2:	d031      	beq.n	801ed18 <_strtod_l+0x1cc>
 801ecb4:	2000      	movs	r0, #0
 801ecb6:	0023      	movs	r3, r4
 801ecb8:	4684      	mov	ip, r0
 801ecba:	9a08      	ldr	r2, [sp, #32]
 801ecbc:	900e      	str	r0, [sp, #56]	@ 0x38
 801ecbe:	9206      	str	r2, [sp, #24]
 801ecc0:	2220      	movs	r2, #32
 801ecc2:	0019      	movs	r1, r3
 801ecc4:	4391      	bics	r1, r2
 801ecc6:	000a      	movs	r2, r1
 801ecc8:	2100      	movs	r1, #0
 801ecca:	9107      	str	r1, [sp, #28]
 801eccc:	2a45      	cmp	r2, #69	@ 0x45
 801ecce:	d000      	beq.n	801ecd2 <_strtod_l+0x186>
 801ecd0:	e0c0      	b.n	801ee54 <_strtod_l+0x308>
 801ecd2:	9b06      	ldr	r3, [sp, #24]
 801ecd4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ecd6:	4303      	orrs	r3, r0
 801ecd8:	4313      	orrs	r3, r2
 801ecda:	428b      	cmp	r3, r1
 801ecdc:	d08d      	beq.n	801ebfa <_strtod_l+0xae>
 801ecde:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ece0:	9309      	str	r3, [sp, #36]	@ 0x24
 801ece2:	3301      	adds	r3, #1
 801ece4:	931d      	str	r3, [sp, #116]	@ 0x74
 801ece6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ece8:	785b      	ldrb	r3, [r3, #1]
 801ecea:	2b2b      	cmp	r3, #43	@ 0x2b
 801ecec:	d070      	beq.n	801edd0 <_strtod_l+0x284>
 801ecee:	000c      	movs	r4, r1
 801ecf0:	2b2d      	cmp	r3, #45	@ 0x2d
 801ecf2:	d173      	bne.n	801eddc <_strtod_l+0x290>
 801ecf4:	2401      	movs	r4, #1
 801ecf6:	e06c      	b.n	801edd2 <_strtod_l+0x286>
 801ecf8:	9908      	ldr	r1, [sp, #32]
 801ecfa:	2908      	cmp	r1, #8
 801ecfc:	dc09      	bgt.n	801ed12 <_strtod_l+0x1c6>
 801ecfe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ed00:	4351      	muls	r1, r2
 801ed02:	185b      	adds	r3, r3, r1
 801ed04:	930d      	str	r3, [sp, #52]	@ 0x34
 801ed06:	9b08      	ldr	r3, [sp, #32]
 801ed08:	3001      	adds	r0, #1
 801ed0a:	3301      	adds	r3, #1
 801ed0c:	9308      	str	r3, [sp, #32]
 801ed0e:	901d      	str	r0, [sp, #116]	@ 0x74
 801ed10:	e7c3      	b.n	801ec9a <_strtod_l+0x14e>
 801ed12:	4355      	muls	r5, r2
 801ed14:	195d      	adds	r5, r3, r5
 801ed16:	e7f6      	b.n	801ed06 <_strtod_l+0x1ba>
 801ed18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ed1a:	1c5a      	adds	r2, r3, #1
 801ed1c:	921d      	str	r2, [sp, #116]	@ 0x74
 801ed1e:	9a08      	ldr	r2, [sp, #32]
 801ed20:	785b      	ldrb	r3, [r3, #1]
 801ed22:	2a00      	cmp	r2, #0
 801ed24:	d03a      	beq.n	801ed9c <_strtod_l+0x250>
 801ed26:	900e      	str	r0, [sp, #56]	@ 0x38
 801ed28:	9206      	str	r2, [sp, #24]
 801ed2a:	001a      	movs	r2, r3
 801ed2c:	3a30      	subs	r2, #48	@ 0x30
 801ed2e:	2a09      	cmp	r2, #9
 801ed30:	d912      	bls.n	801ed58 <_strtod_l+0x20c>
 801ed32:	2201      	movs	r2, #1
 801ed34:	4694      	mov	ip, r2
 801ed36:	e7c3      	b.n	801ecc0 <_strtod_l+0x174>
 801ed38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ed3a:	3001      	adds	r0, #1
 801ed3c:	1c5a      	adds	r2, r3, #1
 801ed3e:	921d      	str	r2, [sp, #116]	@ 0x74
 801ed40:	785b      	ldrb	r3, [r3, #1]
 801ed42:	2b30      	cmp	r3, #48	@ 0x30
 801ed44:	d0f8      	beq.n	801ed38 <_strtod_l+0x1ec>
 801ed46:	001a      	movs	r2, r3
 801ed48:	3a31      	subs	r2, #49	@ 0x31
 801ed4a:	2a08      	cmp	r2, #8
 801ed4c:	d83b      	bhi.n	801edc6 <_strtod_l+0x27a>
 801ed4e:	900e      	str	r0, [sp, #56]	@ 0x38
 801ed50:	2000      	movs	r0, #0
 801ed52:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ed54:	9006      	str	r0, [sp, #24]
 801ed56:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ed58:	001a      	movs	r2, r3
 801ed5a:	1c41      	adds	r1, r0, #1
 801ed5c:	3a30      	subs	r2, #48	@ 0x30
 801ed5e:	2b30      	cmp	r3, #48	@ 0x30
 801ed60:	d016      	beq.n	801ed90 <_strtod_l+0x244>
 801ed62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed64:	185b      	adds	r3, r3, r1
 801ed66:	930e      	str	r3, [sp, #56]	@ 0x38
 801ed68:	9b06      	ldr	r3, [sp, #24]
 801ed6a:	210a      	movs	r1, #10
 801ed6c:	469c      	mov	ip, r3
 801ed6e:	4484      	add	ip, r0
 801ed70:	459c      	cmp	ip, r3
 801ed72:	d115      	bne.n	801eda0 <_strtod_l+0x254>
 801ed74:	9906      	ldr	r1, [sp, #24]
 801ed76:	9b06      	ldr	r3, [sp, #24]
 801ed78:	3101      	adds	r1, #1
 801ed7a:	1809      	adds	r1, r1, r0
 801ed7c:	181b      	adds	r3, r3, r0
 801ed7e:	9106      	str	r1, [sp, #24]
 801ed80:	2b08      	cmp	r3, #8
 801ed82:	dc19      	bgt.n	801edb8 <_strtod_l+0x26c>
 801ed84:	230a      	movs	r3, #10
 801ed86:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ed88:	434b      	muls	r3, r1
 801ed8a:	2100      	movs	r1, #0
 801ed8c:	18d3      	adds	r3, r2, r3
 801ed8e:	930d      	str	r3, [sp, #52]	@ 0x34
 801ed90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ed92:	0008      	movs	r0, r1
 801ed94:	1c5a      	adds	r2, r3, #1
 801ed96:	921d      	str	r2, [sp, #116]	@ 0x74
 801ed98:	785b      	ldrb	r3, [r3, #1]
 801ed9a:	e7c6      	b.n	801ed2a <_strtod_l+0x1de>
 801ed9c:	9808      	ldr	r0, [sp, #32]
 801ed9e:	e7d0      	b.n	801ed42 <_strtod_l+0x1f6>
 801eda0:	1c5c      	adds	r4, r3, #1
 801eda2:	2b08      	cmp	r3, #8
 801eda4:	dc04      	bgt.n	801edb0 <_strtod_l+0x264>
 801eda6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eda8:	434b      	muls	r3, r1
 801edaa:	930d      	str	r3, [sp, #52]	@ 0x34
 801edac:	0023      	movs	r3, r4
 801edae:	e7df      	b.n	801ed70 <_strtod_l+0x224>
 801edb0:	2c10      	cmp	r4, #16
 801edb2:	dcfb      	bgt.n	801edac <_strtod_l+0x260>
 801edb4:	434d      	muls	r5, r1
 801edb6:	e7f9      	b.n	801edac <_strtod_l+0x260>
 801edb8:	2100      	movs	r1, #0
 801edba:	2b0f      	cmp	r3, #15
 801edbc:	dce8      	bgt.n	801ed90 <_strtod_l+0x244>
 801edbe:	230a      	movs	r3, #10
 801edc0:	435d      	muls	r5, r3
 801edc2:	1955      	adds	r5, r2, r5
 801edc4:	e7e4      	b.n	801ed90 <_strtod_l+0x244>
 801edc6:	2200      	movs	r2, #0
 801edc8:	920e      	str	r2, [sp, #56]	@ 0x38
 801edca:	9206      	str	r2, [sp, #24]
 801edcc:	3201      	adds	r2, #1
 801edce:	e7b1      	b.n	801ed34 <_strtod_l+0x1e8>
 801edd0:	2400      	movs	r4, #0
 801edd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edd4:	3302      	adds	r3, #2
 801edd6:	931d      	str	r3, [sp, #116]	@ 0x74
 801edd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edda:	789b      	ldrb	r3, [r3, #2]
 801eddc:	001a      	movs	r2, r3
 801edde:	3a30      	subs	r2, #48	@ 0x30
 801ede0:	2a09      	cmp	r2, #9
 801ede2:	d913      	bls.n	801ee0c <_strtod_l+0x2c0>
 801ede4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ede6:	921d      	str	r2, [sp, #116]	@ 0x74
 801ede8:	2200      	movs	r2, #0
 801edea:	e032      	b.n	801ee52 <_strtod_l+0x306>
 801edec:	08026288 	.word	0x08026288
 801edf0:	7ff00000 	.word	0x7ff00000
 801edf4:	ffefffff 	.word	0xffefffff
 801edf8:	00000433 	.word	0x00000433
 801edfc:	7fffffff 	.word	0x7fffffff
 801ee00:	08026270 	.word	0x08026270
 801ee04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee06:	1c5a      	adds	r2, r3, #1
 801ee08:	921d      	str	r2, [sp, #116]	@ 0x74
 801ee0a:	785b      	ldrb	r3, [r3, #1]
 801ee0c:	2b30      	cmp	r3, #48	@ 0x30
 801ee0e:	d0f9      	beq.n	801ee04 <_strtod_l+0x2b8>
 801ee10:	2200      	movs	r2, #0
 801ee12:	9207      	str	r2, [sp, #28]
 801ee14:	001a      	movs	r2, r3
 801ee16:	3a31      	subs	r2, #49	@ 0x31
 801ee18:	2a08      	cmp	r2, #8
 801ee1a:	d81b      	bhi.n	801ee54 <_strtod_l+0x308>
 801ee1c:	3b30      	subs	r3, #48	@ 0x30
 801ee1e:	9310      	str	r3, [sp, #64]	@ 0x40
 801ee20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee22:	9307      	str	r3, [sp, #28]
 801ee24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee26:	1c59      	adds	r1, r3, #1
 801ee28:	911d      	str	r1, [sp, #116]	@ 0x74
 801ee2a:	785b      	ldrb	r3, [r3, #1]
 801ee2c:	001a      	movs	r2, r3
 801ee2e:	3a30      	subs	r2, #48	@ 0x30
 801ee30:	2a09      	cmp	r2, #9
 801ee32:	d93a      	bls.n	801eeaa <_strtod_l+0x35e>
 801ee34:	9a07      	ldr	r2, [sp, #28]
 801ee36:	1a8a      	subs	r2, r1, r2
 801ee38:	49b4      	ldr	r1, [pc, #720]	@ (801f10c <_strtod_l+0x5c0>)
 801ee3a:	9107      	str	r1, [sp, #28]
 801ee3c:	2a08      	cmp	r2, #8
 801ee3e:	dc04      	bgt.n	801ee4a <_strtod_l+0x2fe>
 801ee40:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ee42:	9207      	str	r2, [sp, #28]
 801ee44:	428a      	cmp	r2, r1
 801ee46:	dd00      	ble.n	801ee4a <_strtod_l+0x2fe>
 801ee48:	9107      	str	r1, [sp, #28]
 801ee4a:	2c00      	cmp	r4, #0
 801ee4c:	d002      	beq.n	801ee54 <_strtod_l+0x308>
 801ee4e:	9a07      	ldr	r2, [sp, #28]
 801ee50:	4252      	negs	r2, r2
 801ee52:	9207      	str	r2, [sp, #28]
 801ee54:	9a06      	ldr	r2, [sp, #24]
 801ee56:	2a00      	cmp	r2, #0
 801ee58:	d14d      	bne.n	801eef6 <_strtod_l+0x3aa>
 801ee5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee5c:	4310      	orrs	r0, r2
 801ee5e:	d000      	beq.n	801ee62 <_strtod_l+0x316>
 801ee60:	e6af      	b.n	801ebc2 <_strtod_l+0x76>
 801ee62:	4662      	mov	r2, ip
 801ee64:	2a00      	cmp	r2, #0
 801ee66:	d000      	beq.n	801ee6a <_strtod_l+0x31e>
 801ee68:	e6c7      	b.n	801ebfa <_strtod_l+0xae>
 801ee6a:	2b69      	cmp	r3, #105	@ 0x69
 801ee6c:	d027      	beq.n	801eebe <_strtod_l+0x372>
 801ee6e:	dc23      	bgt.n	801eeb8 <_strtod_l+0x36c>
 801ee70:	2b49      	cmp	r3, #73	@ 0x49
 801ee72:	d024      	beq.n	801eebe <_strtod_l+0x372>
 801ee74:	2b4e      	cmp	r3, #78	@ 0x4e
 801ee76:	d000      	beq.n	801ee7a <_strtod_l+0x32e>
 801ee78:	e6bf      	b.n	801ebfa <_strtod_l+0xae>
 801ee7a:	49a5      	ldr	r1, [pc, #660]	@ (801f110 <_strtod_l+0x5c4>)
 801ee7c:	a81d      	add	r0, sp, #116	@ 0x74
 801ee7e:	f002 fe2b 	bl	8021ad8 <__match>
 801ee82:	2800      	cmp	r0, #0
 801ee84:	d100      	bne.n	801ee88 <_strtod_l+0x33c>
 801ee86:	e6b8      	b.n	801ebfa <_strtod_l+0xae>
 801ee88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ee8a:	781b      	ldrb	r3, [r3, #0]
 801ee8c:	2b28      	cmp	r3, #40	@ 0x28
 801ee8e:	d12c      	bne.n	801eeea <_strtod_l+0x39e>
 801ee90:	49a0      	ldr	r1, [pc, #640]	@ (801f114 <_strtod_l+0x5c8>)
 801ee92:	aa20      	add	r2, sp, #128	@ 0x80
 801ee94:	a81d      	add	r0, sp, #116	@ 0x74
 801ee96:	f002 fe33 	bl	8021b00 <__hexnan>
 801ee9a:	2805      	cmp	r0, #5
 801ee9c:	d125      	bne.n	801eeea <_strtod_l+0x39e>
 801ee9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801eea0:	4a9d      	ldr	r2, [pc, #628]	@ (801f118 <_strtod_l+0x5cc>)
 801eea2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801eea4:	431a      	orrs	r2, r3
 801eea6:	0017      	movs	r7, r2
 801eea8:	e68b      	b.n	801ebc2 <_strtod_l+0x76>
 801eeaa:	220a      	movs	r2, #10
 801eeac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801eeae:	434a      	muls	r2, r1
 801eeb0:	18d2      	adds	r2, r2, r3
 801eeb2:	3a30      	subs	r2, #48	@ 0x30
 801eeb4:	9210      	str	r2, [sp, #64]	@ 0x40
 801eeb6:	e7b5      	b.n	801ee24 <_strtod_l+0x2d8>
 801eeb8:	2b6e      	cmp	r3, #110	@ 0x6e
 801eeba:	d0de      	beq.n	801ee7a <_strtod_l+0x32e>
 801eebc:	e69d      	b.n	801ebfa <_strtod_l+0xae>
 801eebe:	4997      	ldr	r1, [pc, #604]	@ (801f11c <_strtod_l+0x5d0>)
 801eec0:	a81d      	add	r0, sp, #116	@ 0x74
 801eec2:	f002 fe09 	bl	8021ad8 <__match>
 801eec6:	2800      	cmp	r0, #0
 801eec8:	d100      	bne.n	801eecc <_strtod_l+0x380>
 801eeca:	e696      	b.n	801ebfa <_strtod_l+0xae>
 801eecc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eece:	4994      	ldr	r1, [pc, #592]	@ (801f120 <_strtod_l+0x5d4>)
 801eed0:	3b01      	subs	r3, #1
 801eed2:	a81d      	add	r0, sp, #116	@ 0x74
 801eed4:	931d      	str	r3, [sp, #116]	@ 0x74
 801eed6:	f002 fdff 	bl	8021ad8 <__match>
 801eeda:	2800      	cmp	r0, #0
 801eedc:	d102      	bne.n	801eee4 <_strtod_l+0x398>
 801eede:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801eee0:	3301      	adds	r3, #1
 801eee2:	931d      	str	r3, [sp, #116]	@ 0x74
 801eee4:	2600      	movs	r6, #0
 801eee6:	4f8c      	ldr	r7, [pc, #560]	@ (801f118 <_strtod_l+0x5cc>)
 801eee8:	e66b      	b.n	801ebc2 <_strtod_l+0x76>
 801eeea:	488e      	ldr	r0, [pc, #568]	@ (801f124 <_strtod_l+0x5d8>)
 801eeec:	f001 fc84 	bl	80207f8 <nan>
 801eef0:	0006      	movs	r6, r0
 801eef2:	000f      	movs	r7, r1
 801eef4:	e665      	b.n	801ebc2 <_strtod_l+0x76>
 801eef6:	9b07      	ldr	r3, [sp, #28]
 801eef8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eefa:	1a9b      	subs	r3, r3, r2
 801eefc:	930c      	str	r3, [sp, #48]	@ 0x30
 801eefe:	9b08      	ldr	r3, [sp, #32]
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d101      	bne.n	801ef08 <_strtod_l+0x3bc>
 801ef04:	9b06      	ldr	r3, [sp, #24]
 801ef06:	9308      	str	r3, [sp, #32]
 801ef08:	9c06      	ldr	r4, [sp, #24]
 801ef0a:	2c10      	cmp	r4, #16
 801ef0c:	dd00      	ble.n	801ef10 <_strtod_l+0x3c4>
 801ef0e:	2410      	movs	r4, #16
 801ef10:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ef12:	f7e4 fa83 	bl	800341c <__aeabi_ui2d>
 801ef16:	9b06      	ldr	r3, [sp, #24]
 801ef18:	0006      	movs	r6, r0
 801ef1a:	000f      	movs	r7, r1
 801ef1c:	2b09      	cmp	r3, #9
 801ef1e:	dc13      	bgt.n	801ef48 <_strtod_l+0x3fc>
 801ef20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef22:	2b00      	cmp	r3, #0
 801ef24:	d100      	bne.n	801ef28 <_strtod_l+0x3dc>
 801ef26:	e64c      	b.n	801ebc2 <_strtod_l+0x76>
 801ef28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	dc00      	bgt.n	801ef30 <_strtod_l+0x3e4>
 801ef2e:	e07e      	b.n	801f02e <_strtod_l+0x4e2>
 801ef30:	2b16      	cmp	r3, #22
 801ef32:	dc63      	bgt.n	801effc <_strtod_l+0x4b0>
 801ef34:	497c      	ldr	r1, [pc, #496]	@ (801f128 <_strtod_l+0x5dc>)
 801ef36:	00db      	lsls	r3, r3, #3
 801ef38:	18c9      	adds	r1, r1, r3
 801ef3a:	0032      	movs	r2, r6
 801ef3c:	6808      	ldr	r0, [r1, #0]
 801ef3e:	6849      	ldr	r1, [r1, #4]
 801ef40:	003b      	movs	r3, r7
 801ef42:	f7e3 fb7b 	bl	800263c <__aeabi_dmul>
 801ef46:	e7d3      	b.n	801eef0 <_strtod_l+0x3a4>
 801ef48:	0022      	movs	r2, r4
 801ef4a:	4b77      	ldr	r3, [pc, #476]	@ (801f128 <_strtod_l+0x5dc>)
 801ef4c:	3a09      	subs	r2, #9
 801ef4e:	00d2      	lsls	r2, r2, #3
 801ef50:	189b      	adds	r3, r3, r2
 801ef52:	681a      	ldr	r2, [r3, #0]
 801ef54:	685b      	ldr	r3, [r3, #4]
 801ef56:	f7e3 fb71 	bl	800263c <__aeabi_dmul>
 801ef5a:	0006      	movs	r6, r0
 801ef5c:	0028      	movs	r0, r5
 801ef5e:	000f      	movs	r7, r1
 801ef60:	f7e4 fa5c 	bl	800341c <__aeabi_ui2d>
 801ef64:	000b      	movs	r3, r1
 801ef66:	0002      	movs	r2, r0
 801ef68:	0039      	movs	r1, r7
 801ef6a:	0030      	movs	r0, r6
 801ef6c:	f7e2 fbbe 	bl	80016ec <__aeabi_dadd>
 801ef70:	9b06      	ldr	r3, [sp, #24]
 801ef72:	0006      	movs	r6, r0
 801ef74:	000f      	movs	r7, r1
 801ef76:	2b0f      	cmp	r3, #15
 801ef78:	ddd2      	ble.n	801ef20 <_strtod_l+0x3d4>
 801ef7a:	9b06      	ldr	r3, [sp, #24]
 801ef7c:	1b1c      	subs	r4, r3, r4
 801ef7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ef80:	18e4      	adds	r4, r4, r3
 801ef82:	2c00      	cmp	r4, #0
 801ef84:	dc00      	bgt.n	801ef88 <_strtod_l+0x43c>
 801ef86:	e09b      	b.n	801f0c0 <_strtod_l+0x574>
 801ef88:	220f      	movs	r2, #15
 801ef8a:	0023      	movs	r3, r4
 801ef8c:	4013      	ands	r3, r2
 801ef8e:	4214      	tst	r4, r2
 801ef90:	d00a      	beq.n	801efa8 <_strtod_l+0x45c>
 801ef92:	4965      	ldr	r1, [pc, #404]	@ (801f128 <_strtod_l+0x5dc>)
 801ef94:	00db      	lsls	r3, r3, #3
 801ef96:	18c9      	adds	r1, r1, r3
 801ef98:	0032      	movs	r2, r6
 801ef9a:	6808      	ldr	r0, [r1, #0]
 801ef9c:	6849      	ldr	r1, [r1, #4]
 801ef9e:	003b      	movs	r3, r7
 801efa0:	f7e3 fb4c 	bl	800263c <__aeabi_dmul>
 801efa4:	0006      	movs	r6, r0
 801efa6:	000f      	movs	r7, r1
 801efa8:	230f      	movs	r3, #15
 801efaa:	439c      	bics	r4, r3
 801efac:	d073      	beq.n	801f096 <_strtod_l+0x54a>
 801efae:	3326      	adds	r3, #38	@ 0x26
 801efb0:	33ff      	adds	r3, #255	@ 0xff
 801efb2:	429c      	cmp	r4, r3
 801efb4:	dd4b      	ble.n	801f04e <_strtod_l+0x502>
 801efb6:	2300      	movs	r3, #0
 801efb8:	9306      	str	r3, [sp, #24]
 801efba:	9307      	str	r3, [sp, #28]
 801efbc:	930d      	str	r3, [sp, #52]	@ 0x34
 801efbe:	9308      	str	r3, [sp, #32]
 801efc0:	2322      	movs	r3, #34	@ 0x22
 801efc2:	2600      	movs	r6, #0
 801efc4:	9a05      	ldr	r2, [sp, #20]
 801efc6:	4f54      	ldr	r7, [pc, #336]	@ (801f118 <_strtod_l+0x5cc>)
 801efc8:	6013      	str	r3, [r2, #0]
 801efca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801efcc:	42b3      	cmp	r3, r6
 801efce:	d100      	bne.n	801efd2 <_strtod_l+0x486>
 801efd0:	e5f7      	b.n	801ebc2 <_strtod_l+0x76>
 801efd2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801efd4:	9805      	ldr	r0, [sp, #20]
 801efd6:	f002 ff4d 	bl	8021e74 <_Bfree>
 801efda:	9908      	ldr	r1, [sp, #32]
 801efdc:	9805      	ldr	r0, [sp, #20]
 801efde:	f002 ff49 	bl	8021e74 <_Bfree>
 801efe2:	9907      	ldr	r1, [sp, #28]
 801efe4:	9805      	ldr	r0, [sp, #20]
 801efe6:	f002 ff45 	bl	8021e74 <_Bfree>
 801efea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801efec:	9805      	ldr	r0, [sp, #20]
 801efee:	f002 ff41 	bl	8021e74 <_Bfree>
 801eff2:	9906      	ldr	r1, [sp, #24]
 801eff4:	9805      	ldr	r0, [sp, #20]
 801eff6:	f002 ff3d 	bl	8021e74 <_Bfree>
 801effa:	e5e2      	b.n	801ebc2 <_strtod_l+0x76>
 801effc:	2325      	movs	r3, #37	@ 0x25
 801effe:	9a06      	ldr	r2, [sp, #24]
 801f000:	1a9b      	subs	r3, r3, r2
 801f002:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f004:	4293      	cmp	r3, r2
 801f006:	dbb8      	blt.n	801ef7a <_strtod_l+0x42e>
 801f008:	240f      	movs	r4, #15
 801f00a:	9b06      	ldr	r3, [sp, #24]
 801f00c:	4d46      	ldr	r5, [pc, #280]	@ (801f128 <_strtod_l+0x5dc>)
 801f00e:	1ae4      	subs	r4, r4, r3
 801f010:	00e1      	lsls	r1, r4, #3
 801f012:	1869      	adds	r1, r5, r1
 801f014:	0032      	movs	r2, r6
 801f016:	6808      	ldr	r0, [r1, #0]
 801f018:	6849      	ldr	r1, [r1, #4]
 801f01a:	003b      	movs	r3, r7
 801f01c:	f7e3 fb0e 	bl	800263c <__aeabi_dmul>
 801f020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f022:	1b1c      	subs	r4, r3, r4
 801f024:	00e4      	lsls	r4, r4, #3
 801f026:	192d      	adds	r5, r5, r4
 801f028:	682a      	ldr	r2, [r5, #0]
 801f02a:	686b      	ldr	r3, [r5, #4]
 801f02c:	e789      	b.n	801ef42 <_strtod_l+0x3f6>
 801f02e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f030:	3316      	adds	r3, #22
 801f032:	dba2      	blt.n	801ef7a <_strtod_l+0x42e>
 801f034:	9907      	ldr	r1, [sp, #28]
 801f036:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f038:	4b3b      	ldr	r3, [pc, #236]	@ (801f128 <_strtod_l+0x5dc>)
 801f03a:	1a52      	subs	r2, r2, r1
 801f03c:	00d2      	lsls	r2, r2, #3
 801f03e:	189b      	adds	r3, r3, r2
 801f040:	0030      	movs	r0, r6
 801f042:	681a      	ldr	r2, [r3, #0]
 801f044:	685b      	ldr	r3, [r3, #4]
 801f046:	0039      	movs	r1, r7
 801f048:	f7e2 feb4 	bl	8001db4 <__aeabi_ddiv>
 801f04c:	e750      	b.n	801eef0 <_strtod_l+0x3a4>
 801f04e:	2300      	movs	r3, #0
 801f050:	0030      	movs	r0, r6
 801f052:	0039      	movs	r1, r7
 801f054:	4d35      	ldr	r5, [pc, #212]	@ (801f12c <_strtod_l+0x5e0>)
 801f056:	1124      	asrs	r4, r4, #4
 801f058:	9309      	str	r3, [sp, #36]	@ 0x24
 801f05a:	2c01      	cmp	r4, #1
 801f05c:	dc1e      	bgt.n	801f09c <_strtod_l+0x550>
 801f05e:	2b00      	cmp	r3, #0
 801f060:	d001      	beq.n	801f066 <_strtod_l+0x51a>
 801f062:	0006      	movs	r6, r0
 801f064:	000f      	movs	r7, r1
 801f066:	4b32      	ldr	r3, [pc, #200]	@ (801f130 <_strtod_l+0x5e4>)
 801f068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f06a:	18ff      	adds	r7, r7, r3
 801f06c:	4b2f      	ldr	r3, [pc, #188]	@ (801f12c <_strtod_l+0x5e0>)
 801f06e:	00d5      	lsls	r5, r2, #3
 801f070:	195d      	adds	r5, r3, r5
 801f072:	0032      	movs	r2, r6
 801f074:	6828      	ldr	r0, [r5, #0]
 801f076:	6869      	ldr	r1, [r5, #4]
 801f078:	003b      	movs	r3, r7
 801f07a:	f7e3 fadf 	bl	800263c <__aeabi_dmul>
 801f07e:	4b26      	ldr	r3, [pc, #152]	@ (801f118 <_strtod_l+0x5cc>)
 801f080:	4a2c      	ldr	r2, [pc, #176]	@ (801f134 <_strtod_l+0x5e8>)
 801f082:	0006      	movs	r6, r0
 801f084:	400b      	ands	r3, r1
 801f086:	4293      	cmp	r3, r2
 801f088:	d895      	bhi.n	801efb6 <_strtod_l+0x46a>
 801f08a:	4a2b      	ldr	r2, [pc, #172]	@ (801f138 <_strtod_l+0x5ec>)
 801f08c:	4293      	cmp	r3, r2
 801f08e:	d913      	bls.n	801f0b8 <_strtod_l+0x56c>
 801f090:	2601      	movs	r6, #1
 801f092:	4f2a      	ldr	r7, [pc, #168]	@ (801f13c <_strtod_l+0x5f0>)
 801f094:	4276      	negs	r6, r6
 801f096:	2300      	movs	r3, #0
 801f098:	9309      	str	r3, [sp, #36]	@ 0x24
 801f09a:	e086      	b.n	801f1aa <_strtod_l+0x65e>
 801f09c:	2201      	movs	r2, #1
 801f09e:	4214      	tst	r4, r2
 801f0a0:	d004      	beq.n	801f0ac <_strtod_l+0x560>
 801f0a2:	682a      	ldr	r2, [r5, #0]
 801f0a4:	686b      	ldr	r3, [r5, #4]
 801f0a6:	f7e3 fac9 	bl	800263c <__aeabi_dmul>
 801f0aa:	2301      	movs	r3, #1
 801f0ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f0ae:	1064      	asrs	r4, r4, #1
 801f0b0:	3201      	adds	r2, #1
 801f0b2:	9209      	str	r2, [sp, #36]	@ 0x24
 801f0b4:	3508      	adds	r5, #8
 801f0b6:	e7d0      	b.n	801f05a <_strtod_l+0x50e>
 801f0b8:	23d4      	movs	r3, #212	@ 0xd4
 801f0ba:	049b      	lsls	r3, r3, #18
 801f0bc:	18cf      	adds	r7, r1, r3
 801f0be:	e7ea      	b.n	801f096 <_strtod_l+0x54a>
 801f0c0:	2c00      	cmp	r4, #0
 801f0c2:	d0e8      	beq.n	801f096 <_strtod_l+0x54a>
 801f0c4:	4264      	negs	r4, r4
 801f0c6:	230f      	movs	r3, #15
 801f0c8:	0022      	movs	r2, r4
 801f0ca:	401a      	ands	r2, r3
 801f0cc:	421c      	tst	r4, r3
 801f0ce:	d00a      	beq.n	801f0e6 <_strtod_l+0x59a>
 801f0d0:	4b15      	ldr	r3, [pc, #84]	@ (801f128 <_strtod_l+0x5dc>)
 801f0d2:	00d2      	lsls	r2, r2, #3
 801f0d4:	189b      	adds	r3, r3, r2
 801f0d6:	0030      	movs	r0, r6
 801f0d8:	681a      	ldr	r2, [r3, #0]
 801f0da:	685b      	ldr	r3, [r3, #4]
 801f0dc:	0039      	movs	r1, r7
 801f0de:	f7e2 fe69 	bl	8001db4 <__aeabi_ddiv>
 801f0e2:	0006      	movs	r6, r0
 801f0e4:	000f      	movs	r7, r1
 801f0e6:	1124      	asrs	r4, r4, #4
 801f0e8:	d0d5      	beq.n	801f096 <_strtod_l+0x54a>
 801f0ea:	2c1f      	cmp	r4, #31
 801f0ec:	dd28      	ble.n	801f140 <_strtod_l+0x5f4>
 801f0ee:	2300      	movs	r3, #0
 801f0f0:	9306      	str	r3, [sp, #24]
 801f0f2:	9307      	str	r3, [sp, #28]
 801f0f4:	930d      	str	r3, [sp, #52]	@ 0x34
 801f0f6:	9308      	str	r3, [sp, #32]
 801f0f8:	2322      	movs	r3, #34	@ 0x22
 801f0fa:	9a05      	ldr	r2, [sp, #20]
 801f0fc:	2600      	movs	r6, #0
 801f0fe:	6013      	str	r3, [r2, #0]
 801f100:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f102:	2700      	movs	r7, #0
 801f104:	2b00      	cmp	r3, #0
 801f106:	d000      	beq.n	801f10a <_strtod_l+0x5be>
 801f108:	e763      	b.n	801efd2 <_strtod_l+0x486>
 801f10a:	e55a      	b.n	801ebc2 <_strtod_l+0x76>
 801f10c:	00004e1f 	.word	0x00004e1f
 801f110:	080263d6 	.word	0x080263d6
 801f114:	08026274 	.word	0x08026274
 801f118:	7ff00000 	.word	0x7ff00000
 801f11c:	080263ce 	.word	0x080263ce
 801f120:	08026408 	.word	0x08026408
 801f124:	08026694 	.word	0x08026694
 801f128:	08026580 	.word	0x08026580
 801f12c:	08026558 	.word	0x08026558
 801f130:	fcb00000 	.word	0xfcb00000
 801f134:	7ca00000 	.word	0x7ca00000
 801f138:	7c900000 	.word	0x7c900000
 801f13c:	7fefffff 	.word	0x7fefffff
 801f140:	2310      	movs	r3, #16
 801f142:	0022      	movs	r2, r4
 801f144:	401a      	ands	r2, r3
 801f146:	9209      	str	r2, [sp, #36]	@ 0x24
 801f148:	421c      	tst	r4, r3
 801f14a:	d001      	beq.n	801f150 <_strtod_l+0x604>
 801f14c:	335a      	adds	r3, #90	@ 0x5a
 801f14e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f150:	0030      	movs	r0, r6
 801f152:	0039      	movs	r1, r7
 801f154:	2300      	movs	r3, #0
 801f156:	4dbf      	ldr	r5, [pc, #764]	@ (801f454 <_strtod_l+0x908>)
 801f158:	2201      	movs	r2, #1
 801f15a:	4214      	tst	r4, r2
 801f15c:	d004      	beq.n	801f168 <_strtod_l+0x61c>
 801f15e:	682a      	ldr	r2, [r5, #0]
 801f160:	686b      	ldr	r3, [r5, #4]
 801f162:	f7e3 fa6b 	bl	800263c <__aeabi_dmul>
 801f166:	2301      	movs	r3, #1
 801f168:	1064      	asrs	r4, r4, #1
 801f16a:	3508      	adds	r5, #8
 801f16c:	2c00      	cmp	r4, #0
 801f16e:	d1f3      	bne.n	801f158 <_strtod_l+0x60c>
 801f170:	2b00      	cmp	r3, #0
 801f172:	d001      	beq.n	801f178 <_strtod_l+0x62c>
 801f174:	0006      	movs	r6, r0
 801f176:	000f      	movs	r7, r1
 801f178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f17a:	2b00      	cmp	r3, #0
 801f17c:	d00d      	beq.n	801f19a <_strtod_l+0x64e>
 801f17e:	236b      	movs	r3, #107	@ 0x6b
 801f180:	007a      	lsls	r2, r7, #1
 801f182:	0d52      	lsrs	r2, r2, #21
 801f184:	0039      	movs	r1, r7
 801f186:	1a9b      	subs	r3, r3, r2
 801f188:	2b00      	cmp	r3, #0
 801f18a:	dd06      	ble.n	801f19a <_strtod_l+0x64e>
 801f18c:	2b1f      	cmp	r3, #31
 801f18e:	dd5a      	ble.n	801f246 <_strtod_l+0x6fa>
 801f190:	2600      	movs	r6, #0
 801f192:	2b34      	cmp	r3, #52	@ 0x34
 801f194:	dd50      	ble.n	801f238 <_strtod_l+0x6ec>
 801f196:	27dc      	movs	r7, #220	@ 0xdc
 801f198:	04bf      	lsls	r7, r7, #18
 801f19a:	2200      	movs	r2, #0
 801f19c:	2300      	movs	r3, #0
 801f19e:	0030      	movs	r0, r6
 801f1a0:	0039      	movs	r1, r7
 801f1a2:	f7e1 f985 	bl	80004b0 <__aeabi_dcmpeq>
 801f1a6:	2800      	cmp	r0, #0
 801f1a8:	d1a1      	bne.n	801f0ee <_strtod_l+0x5a2>
 801f1aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f1ac:	9a08      	ldr	r2, [sp, #32]
 801f1ae:	9300      	str	r3, [sp, #0]
 801f1b0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f1b2:	9b06      	ldr	r3, [sp, #24]
 801f1b4:	9805      	ldr	r0, [sp, #20]
 801f1b6:	f002 fec5 	bl	8021f44 <__s2b>
 801f1ba:	900d      	str	r0, [sp, #52]	@ 0x34
 801f1bc:	2800      	cmp	r0, #0
 801f1be:	d100      	bne.n	801f1c2 <_strtod_l+0x676>
 801f1c0:	e6f9      	b.n	801efb6 <_strtod_l+0x46a>
 801f1c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f1c4:	9907      	ldr	r1, [sp, #28]
 801f1c6:	17da      	asrs	r2, r3, #31
 801f1c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f1ca:	1a5b      	subs	r3, r3, r1
 801f1cc:	401a      	ands	r2, r3
 801f1ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f1d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801f1d2:	43db      	mvns	r3, r3
 801f1d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f1d6:	17db      	asrs	r3, r3, #31
 801f1d8:	401a      	ands	r2, r3
 801f1da:	2300      	movs	r3, #0
 801f1dc:	921a      	str	r2, [sp, #104]	@ 0x68
 801f1de:	9306      	str	r3, [sp, #24]
 801f1e0:	9307      	str	r3, [sp, #28]
 801f1e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f1e4:	9805      	ldr	r0, [sp, #20]
 801f1e6:	6859      	ldr	r1, [r3, #4]
 801f1e8:	f002 fe00 	bl	8021dec <_Balloc>
 801f1ec:	9008      	str	r0, [sp, #32]
 801f1ee:	2800      	cmp	r0, #0
 801f1f0:	d100      	bne.n	801f1f4 <_strtod_l+0x6a8>
 801f1f2:	e6e5      	b.n	801efc0 <_strtod_l+0x474>
 801f1f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f1f6:	300c      	adds	r0, #12
 801f1f8:	0019      	movs	r1, r3
 801f1fa:	691a      	ldr	r2, [r3, #16]
 801f1fc:	310c      	adds	r1, #12
 801f1fe:	3202      	adds	r2, #2
 801f200:	0092      	lsls	r2, r2, #2
 801f202:	f001 faef 	bl	80207e4 <memcpy>
 801f206:	ab20      	add	r3, sp, #128	@ 0x80
 801f208:	9301      	str	r3, [sp, #4]
 801f20a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801f20c:	9300      	str	r3, [sp, #0]
 801f20e:	0032      	movs	r2, r6
 801f210:	003b      	movs	r3, r7
 801f212:	9805      	ldr	r0, [sp, #20]
 801f214:	9610      	str	r6, [sp, #64]	@ 0x40
 801f216:	9711      	str	r7, [sp, #68]	@ 0x44
 801f218:	f003 f9e4 	bl	80225e4 <__d2b>
 801f21c:	901e      	str	r0, [sp, #120]	@ 0x78
 801f21e:	2800      	cmp	r0, #0
 801f220:	d100      	bne.n	801f224 <_strtod_l+0x6d8>
 801f222:	e6cd      	b.n	801efc0 <_strtod_l+0x474>
 801f224:	2101      	movs	r1, #1
 801f226:	9805      	ldr	r0, [sp, #20]
 801f228:	f002 ff28 	bl	802207c <__i2b>
 801f22c:	9007      	str	r0, [sp, #28]
 801f22e:	2800      	cmp	r0, #0
 801f230:	d10e      	bne.n	801f250 <_strtod_l+0x704>
 801f232:	2300      	movs	r3, #0
 801f234:	9307      	str	r3, [sp, #28]
 801f236:	e6c3      	b.n	801efc0 <_strtod_l+0x474>
 801f238:	234b      	movs	r3, #75	@ 0x4b
 801f23a:	1a9a      	subs	r2, r3, r2
 801f23c:	3b4c      	subs	r3, #76	@ 0x4c
 801f23e:	4093      	lsls	r3, r2
 801f240:	4019      	ands	r1, r3
 801f242:	000f      	movs	r7, r1
 801f244:	e7a9      	b.n	801f19a <_strtod_l+0x64e>
 801f246:	2201      	movs	r2, #1
 801f248:	4252      	negs	r2, r2
 801f24a:	409a      	lsls	r2, r3
 801f24c:	4016      	ands	r6, r2
 801f24e:	e7a4      	b.n	801f19a <_strtod_l+0x64e>
 801f250:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f252:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f254:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801f256:	1ad4      	subs	r4, r2, r3
 801f258:	2b00      	cmp	r3, #0
 801f25a:	db01      	blt.n	801f260 <_strtod_l+0x714>
 801f25c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801f25e:	195d      	adds	r5, r3, r5
 801f260:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f262:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f264:	1a5b      	subs	r3, r3, r1
 801f266:	2136      	movs	r1, #54	@ 0x36
 801f268:	189b      	adds	r3, r3, r2
 801f26a:	1a8a      	subs	r2, r1, r2
 801f26c:	497a      	ldr	r1, [pc, #488]	@ (801f458 <_strtod_l+0x90c>)
 801f26e:	2001      	movs	r0, #1
 801f270:	468c      	mov	ip, r1
 801f272:	2100      	movs	r1, #0
 801f274:	3b01      	subs	r3, #1
 801f276:	9116      	str	r1, [sp, #88]	@ 0x58
 801f278:	9014      	str	r0, [sp, #80]	@ 0x50
 801f27a:	4563      	cmp	r3, ip
 801f27c:	da06      	bge.n	801f28c <_strtod_l+0x740>
 801f27e:	4661      	mov	r1, ip
 801f280:	1ac9      	subs	r1, r1, r3
 801f282:	1a52      	subs	r2, r2, r1
 801f284:	291f      	cmp	r1, #31
 801f286:	dc3f      	bgt.n	801f308 <_strtod_l+0x7bc>
 801f288:	4088      	lsls	r0, r1
 801f28a:	9014      	str	r0, [sp, #80]	@ 0x50
 801f28c:	18ab      	adds	r3, r5, r2
 801f28e:	930e      	str	r3, [sp, #56]	@ 0x38
 801f290:	18a4      	adds	r4, r4, r2
 801f292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f296:	191c      	adds	r4, r3, r4
 801f298:	002b      	movs	r3, r5
 801f29a:	4295      	cmp	r5, r2
 801f29c:	dd00      	ble.n	801f2a0 <_strtod_l+0x754>
 801f29e:	0013      	movs	r3, r2
 801f2a0:	42a3      	cmp	r3, r4
 801f2a2:	dd00      	ble.n	801f2a6 <_strtod_l+0x75a>
 801f2a4:	0023      	movs	r3, r4
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	dd04      	ble.n	801f2b4 <_strtod_l+0x768>
 801f2aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f2ac:	1ae4      	subs	r4, r4, r3
 801f2ae:	1ad2      	subs	r2, r2, r3
 801f2b0:	920e      	str	r2, [sp, #56]	@ 0x38
 801f2b2:	1aed      	subs	r5, r5, r3
 801f2b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	dd16      	ble.n	801f2e8 <_strtod_l+0x79c>
 801f2ba:	001a      	movs	r2, r3
 801f2bc:	9907      	ldr	r1, [sp, #28]
 801f2be:	9805      	ldr	r0, [sp, #20]
 801f2c0:	f002 ffa6 	bl	8022210 <__pow5mult>
 801f2c4:	9007      	str	r0, [sp, #28]
 801f2c6:	2800      	cmp	r0, #0
 801f2c8:	d0b3      	beq.n	801f232 <_strtod_l+0x6e6>
 801f2ca:	0001      	movs	r1, r0
 801f2cc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f2ce:	9805      	ldr	r0, [sp, #20]
 801f2d0:	f002 feec 	bl	80220ac <__multiply>
 801f2d4:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f2d6:	2800      	cmp	r0, #0
 801f2d8:	d100      	bne.n	801f2dc <_strtod_l+0x790>
 801f2da:	e671      	b.n	801efc0 <_strtod_l+0x474>
 801f2dc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f2de:	9805      	ldr	r0, [sp, #20]
 801f2e0:	f002 fdc8 	bl	8021e74 <_Bfree>
 801f2e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f2e6:	931e      	str	r3, [sp, #120]	@ 0x78
 801f2e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f2ea:	2b00      	cmp	r3, #0
 801f2ec:	dc12      	bgt.n	801f314 <_strtod_l+0x7c8>
 801f2ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	dd18      	ble.n	801f326 <_strtod_l+0x7da>
 801f2f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f2f6:	9908      	ldr	r1, [sp, #32]
 801f2f8:	9805      	ldr	r0, [sp, #20]
 801f2fa:	f002 ff89 	bl	8022210 <__pow5mult>
 801f2fe:	9008      	str	r0, [sp, #32]
 801f300:	2800      	cmp	r0, #0
 801f302:	d110      	bne.n	801f326 <_strtod_l+0x7da>
 801f304:	2300      	movs	r3, #0
 801f306:	e65a      	b.n	801efbe <_strtod_l+0x472>
 801f308:	4954      	ldr	r1, [pc, #336]	@ (801f45c <_strtod_l+0x910>)
 801f30a:	1acb      	subs	r3, r1, r3
 801f30c:	0001      	movs	r1, r0
 801f30e:	4099      	lsls	r1, r3
 801f310:	9116      	str	r1, [sp, #88]	@ 0x58
 801f312:	e7ba      	b.n	801f28a <_strtod_l+0x73e>
 801f314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f316:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f318:	9805      	ldr	r0, [sp, #20]
 801f31a:	f002 ffd5 	bl	80222c8 <__lshift>
 801f31e:	901e      	str	r0, [sp, #120]	@ 0x78
 801f320:	2800      	cmp	r0, #0
 801f322:	d1e4      	bne.n	801f2ee <_strtod_l+0x7a2>
 801f324:	e64c      	b.n	801efc0 <_strtod_l+0x474>
 801f326:	2c00      	cmp	r4, #0
 801f328:	dd07      	ble.n	801f33a <_strtod_l+0x7ee>
 801f32a:	0022      	movs	r2, r4
 801f32c:	9908      	ldr	r1, [sp, #32]
 801f32e:	9805      	ldr	r0, [sp, #20]
 801f330:	f002 ffca 	bl	80222c8 <__lshift>
 801f334:	9008      	str	r0, [sp, #32]
 801f336:	2800      	cmp	r0, #0
 801f338:	d0e4      	beq.n	801f304 <_strtod_l+0x7b8>
 801f33a:	2d00      	cmp	r5, #0
 801f33c:	dd08      	ble.n	801f350 <_strtod_l+0x804>
 801f33e:	002a      	movs	r2, r5
 801f340:	9907      	ldr	r1, [sp, #28]
 801f342:	9805      	ldr	r0, [sp, #20]
 801f344:	f002 ffc0 	bl	80222c8 <__lshift>
 801f348:	9007      	str	r0, [sp, #28]
 801f34a:	2800      	cmp	r0, #0
 801f34c:	d100      	bne.n	801f350 <_strtod_l+0x804>
 801f34e:	e637      	b.n	801efc0 <_strtod_l+0x474>
 801f350:	9a08      	ldr	r2, [sp, #32]
 801f352:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f354:	9805      	ldr	r0, [sp, #20]
 801f356:	f003 f83f 	bl	80223d8 <__mdiff>
 801f35a:	9006      	str	r0, [sp, #24]
 801f35c:	2800      	cmp	r0, #0
 801f35e:	d100      	bne.n	801f362 <_strtod_l+0x816>
 801f360:	e62e      	b.n	801efc0 <_strtod_l+0x474>
 801f362:	68c3      	ldr	r3, [r0, #12]
 801f364:	9907      	ldr	r1, [sp, #28]
 801f366:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f368:	2300      	movs	r3, #0
 801f36a:	60c3      	str	r3, [r0, #12]
 801f36c:	f003 f818 	bl	80223a0 <__mcmp>
 801f370:	2800      	cmp	r0, #0
 801f372:	da3b      	bge.n	801f3ec <_strtod_l+0x8a0>
 801f374:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f376:	4333      	orrs	r3, r6
 801f378:	d167      	bne.n	801f44a <_strtod_l+0x8fe>
 801f37a:	033b      	lsls	r3, r7, #12
 801f37c:	d165      	bne.n	801f44a <_strtod_l+0x8fe>
 801f37e:	22d6      	movs	r2, #214	@ 0xd6
 801f380:	4b37      	ldr	r3, [pc, #220]	@ (801f460 <_strtod_l+0x914>)
 801f382:	04d2      	lsls	r2, r2, #19
 801f384:	403b      	ands	r3, r7
 801f386:	4293      	cmp	r3, r2
 801f388:	d95f      	bls.n	801f44a <_strtod_l+0x8fe>
 801f38a:	9b06      	ldr	r3, [sp, #24]
 801f38c:	695b      	ldr	r3, [r3, #20]
 801f38e:	2b00      	cmp	r3, #0
 801f390:	d103      	bne.n	801f39a <_strtod_l+0x84e>
 801f392:	9b06      	ldr	r3, [sp, #24]
 801f394:	691b      	ldr	r3, [r3, #16]
 801f396:	2b01      	cmp	r3, #1
 801f398:	dd57      	ble.n	801f44a <_strtod_l+0x8fe>
 801f39a:	9906      	ldr	r1, [sp, #24]
 801f39c:	2201      	movs	r2, #1
 801f39e:	9805      	ldr	r0, [sp, #20]
 801f3a0:	f002 ff92 	bl	80222c8 <__lshift>
 801f3a4:	9907      	ldr	r1, [sp, #28]
 801f3a6:	9006      	str	r0, [sp, #24]
 801f3a8:	f002 fffa 	bl	80223a0 <__mcmp>
 801f3ac:	2800      	cmp	r0, #0
 801f3ae:	dd4c      	ble.n	801f44a <_strtod_l+0x8fe>
 801f3b0:	4b2b      	ldr	r3, [pc, #172]	@ (801f460 <_strtod_l+0x914>)
 801f3b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f3b4:	403b      	ands	r3, r7
 801f3b6:	2a00      	cmp	r2, #0
 801f3b8:	d074      	beq.n	801f4a4 <_strtod_l+0x958>
 801f3ba:	22d6      	movs	r2, #214	@ 0xd6
 801f3bc:	04d2      	lsls	r2, r2, #19
 801f3be:	4293      	cmp	r3, r2
 801f3c0:	d870      	bhi.n	801f4a4 <_strtod_l+0x958>
 801f3c2:	22dc      	movs	r2, #220	@ 0xdc
 801f3c4:	0492      	lsls	r2, r2, #18
 801f3c6:	4293      	cmp	r3, r2
 801f3c8:	d800      	bhi.n	801f3cc <_strtod_l+0x880>
 801f3ca:	e695      	b.n	801f0f8 <_strtod_l+0x5ac>
 801f3cc:	0030      	movs	r0, r6
 801f3ce:	0039      	movs	r1, r7
 801f3d0:	4b24      	ldr	r3, [pc, #144]	@ (801f464 <_strtod_l+0x918>)
 801f3d2:	2200      	movs	r2, #0
 801f3d4:	f7e3 f932 	bl	800263c <__aeabi_dmul>
 801f3d8:	4b21      	ldr	r3, [pc, #132]	@ (801f460 <_strtod_l+0x914>)
 801f3da:	0006      	movs	r6, r0
 801f3dc:	000f      	movs	r7, r1
 801f3de:	420b      	tst	r3, r1
 801f3e0:	d000      	beq.n	801f3e4 <_strtod_l+0x898>
 801f3e2:	e5f6      	b.n	801efd2 <_strtod_l+0x486>
 801f3e4:	2322      	movs	r3, #34	@ 0x22
 801f3e6:	9a05      	ldr	r2, [sp, #20]
 801f3e8:	6013      	str	r3, [r2, #0]
 801f3ea:	e5f2      	b.n	801efd2 <_strtod_l+0x486>
 801f3ec:	970e      	str	r7, [sp, #56]	@ 0x38
 801f3ee:	2800      	cmp	r0, #0
 801f3f0:	d175      	bne.n	801f4de <_strtod_l+0x992>
 801f3f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f3f4:	033b      	lsls	r3, r7, #12
 801f3f6:	0b1b      	lsrs	r3, r3, #12
 801f3f8:	2a00      	cmp	r2, #0
 801f3fa:	d039      	beq.n	801f470 <_strtod_l+0x924>
 801f3fc:	4a1a      	ldr	r2, [pc, #104]	@ (801f468 <_strtod_l+0x91c>)
 801f3fe:	4293      	cmp	r3, r2
 801f400:	d138      	bne.n	801f474 <_strtod_l+0x928>
 801f402:	2101      	movs	r1, #1
 801f404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f406:	4249      	negs	r1, r1
 801f408:	0032      	movs	r2, r6
 801f40a:	0008      	movs	r0, r1
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	d00b      	beq.n	801f428 <_strtod_l+0x8dc>
 801f410:	24d4      	movs	r4, #212	@ 0xd4
 801f412:	4b13      	ldr	r3, [pc, #76]	@ (801f460 <_strtod_l+0x914>)
 801f414:	0008      	movs	r0, r1
 801f416:	403b      	ands	r3, r7
 801f418:	04e4      	lsls	r4, r4, #19
 801f41a:	42a3      	cmp	r3, r4
 801f41c:	d804      	bhi.n	801f428 <_strtod_l+0x8dc>
 801f41e:	306c      	adds	r0, #108	@ 0x6c
 801f420:	0d1b      	lsrs	r3, r3, #20
 801f422:	1ac3      	subs	r3, r0, r3
 801f424:	4099      	lsls	r1, r3
 801f426:	0008      	movs	r0, r1
 801f428:	4282      	cmp	r2, r0
 801f42a:	d123      	bne.n	801f474 <_strtod_l+0x928>
 801f42c:	4b0f      	ldr	r3, [pc, #60]	@ (801f46c <_strtod_l+0x920>)
 801f42e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f430:	4299      	cmp	r1, r3
 801f432:	d102      	bne.n	801f43a <_strtod_l+0x8ee>
 801f434:	3201      	adds	r2, #1
 801f436:	d100      	bne.n	801f43a <_strtod_l+0x8ee>
 801f438:	e5c2      	b.n	801efc0 <_strtod_l+0x474>
 801f43a:	4b09      	ldr	r3, [pc, #36]	@ (801f460 <_strtod_l+0x914>)
 801f43c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f43e:	2600      	movs	r6, #0
 801f440:	401a      	ands	r2, r3
 801f442:	0013      	movs	r3, r2
 801f444:	2280      	movs	r2, #128	@ 0x80
 801f446:	0352      	lsls	r2, r2, #13
 801f448:	189f      	adds	r7, r3, r2
 801f44a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	d1bd      	bne.n	801f3cc <_strtod_l+0x880>
 801f450:	e5bf      	b.n	801efd2 <_strtod_l+0x486>
 801f452:	46c0      	nop			@ (mov r8, r8)
 801f454:	080262a0 	.word	0x080262a0
 801f458:	fffffc02 	.word	0xfffffc02
 801f45c:	fffffbe2 	.word	0xfffffbe2
 801f460:	7ff00000 	.word	0x7ff00000
 801f464:	39500000 	.word	0x39500000
 801f468:	000fffff 	.word	0x000fffff
 801f46c:	7fefffff 	.word	0x7fefffff
 801f470:	4333      	orrs	r3, r6
 801f472:	d09d      	beq.n	801f3b0 <_strtod_l+0x864>
 801f474:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f476:	2b00      	cmp	r3, #0
 801f478:	d01c      	beq.n	801f4b4 <_strtod_l+0x968>
 801f47a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f47c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f47e:	4213      	tst	r3, r2
 801f480:	d0e3      	beq.n	801f44a <_strtod_l+0x8fe>
 801f482:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f484:	0030      	movs	r0, r6
 801f486:	0039      	movs	r1, r7
 801f488:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	d016      	beq.n	801f4bc <_strtod_l+0x970>
 801f48e:	f7ff fb45 	bl	801eb1c <sulp>
 801f492:	0002      	movs	r2, r0
 801f494:	000b      	movs	r3, r1
 801f496:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f498:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f49a:	f7e2 f927 	bl	80016ec <__aeabi_dadd>
 801f49e:	0006      	movs	r6, r0
 801f4a0:	000f      	movs	r7, r1
 801f4a2:	e7d2      	b.n	801f44a <_strtod_l+0x8fe>
 801f4a4:	2601      	movs	r6, #1
 801f4a6:	4a92      	ldr	r2, [pc, #584]	@ (801f6f0 <_strtod_l+0xba4>)
 801f4a8:	4276      	negs	r6, r6
 801f4aa:	189b      	adds	r3, r3, r2
 801f4ac:	4a91      	ldr	r2, [pc, #580]	@ (801f6f4 <_strtod_l+0xba8>)
 801f4ae:	431a      	orrs	r2, r3
 801f4b0:	0017      	movs	r7, r2
 801f4b2:	e7ca      	b.n	801f44a <_strtod_l+0x8fe>
 801f4b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f4b6:	4233      	tst	r3, r6
 801f4b8:	d0c7      	beq.n	801f44a <_strtod_l+0x8fe>
 801f4ba:	e7e2      	b.n	801f482 <_strtod_l+0x936>
 801f4bc:	f7ff fb2e 	bl	801eb1c <sulp>
 801f4c0:	0002      	movs	r2, r0
 801f4c2:	000b      	movs	r3, r1
 801f4c4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f4c6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f4c8:	f7e3 fb80 	bl	8002bcc <__aeabi_dsub>
 801f4cc:	2200      	movs	r2, #0
 801f4ce:	2300      	movs	r3, #0
 801f4d0:	0006      	movs	r6, r0
 801f4d2:	000f      	movs	r7, r1
 801f4d4:	f7e0 ffec 	bl	80004b0 <__aeabi_dcmpeq>
 801f4d8:	2800      	cmp	r0, #0
 801f4da:	d0b6      	beq.n	801f44a <_strtod_l+0x8fe>
 801f4dc:	e60c      	b.n	801f0f8 <_strtod_l+0x5ac>
 801f4de:	9907      	ldr	r1, [sp, #28]
 801f4e0:	9806      	ldr	r0, [sp, #24]
 801f4e2:	f003 f8df 	bl	80226a4 <__ratio>
 801f4e6:	2380      	movs	r3, #128	@ 0x80
 801f4e8:	2200      	movs	r2, #0
 801f4ea:	05db      	lsls	r3, r3, #23
 801f4ec:	0004      	movs	r4, r0
 801f4ee:	000d      	movs	r5, r1
 801f4f0:	f7e0 ffee 	bl	80004d0 <__aeabi_dcmple>
 801f4f4:	2800      	cmp	r0, #0
 801f4f6:	d06c      	beq.n	801f5d2 <_strtod_l+0xa86>
 801f4f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d177      	bne.n	801f5ee <_strtod_l+0xaa2>
 801f4fe:	2e00      	cmp	r6, #0
 801f500:	d157      	bne.n	801f5b2 <_strtod_l+0xa66>
 801f502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f504:	031b      	lsls	r3, r3, #12
 801f506:	d15a      	bne.n	801f5be <_strtod_l+0xa72>
 801f508:	2200      	movs	r2, #0
 801f50a:	0020      	movs	r0, r4
 801f50c:	0029      	movs	r1, r5
 801f50e:	4b7a      	ldr	r3, [pc, #488]	@ (801f6f8 <_strtod_l+0xbac>)
 801f510:	f7e0 ffd4 	bl	80004bc <__aeabi_dcmplt>
 801f514:	2800      	cmp	r0, #0
 801f516:	d159      	bne.n	801f5cc <_strtod_l+0xa80>
 801f518:	0020      	movs	r0, r4
 801f51a:	0029      	movs	r1, r5
 801f51c:	2200      	movs	r2, #0
 801f51e:	4b77      	ldr	r3, [pc, #476]	@ (801f6fc <_strtod_l+0xbb0>)
 801f520:	f7e3 f88c 	bl	800263c <__aeabi_dmul>
 801f524:	0004      	movs	r4, r0
 801f526:	000d      	movs	r5, r1
 801f528:	2380      	movs	r3, #128	@ 0x80
 801f52a:	061b      	lsls	r3, r3, #24
 801f52c:	18eb      	adds	r3, r5, r3
 801f52e:	940a      	str	r4, [sp, #40]	@ 0x28
 801f530:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f532:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f534:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f536:	9214      	str	r2, [sp, #80]	@ 0x50
 801f538:	9315      	str	r3, [sp, #84]	@ 0x54
 801f53a:	4a71      	ldr	r2, [pc, #452]	@ (801f700 <_strtod_l+0xbb4>)
 801f53c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f53e:	4013      	ands	r3, r2
 801f540:	9316      	str	r3, [sp, #88]	@ 0x58
 801f542:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f544:	4b6f      	ldr	r3, [pc, #444]	@ (801f704 <_strtod_l+0xbb8>)
 801f546:	429a      	cmp	r2, r3
 801f548:	d000      	beq.n	801f54c <_strtod_l+0xa00>
 801f54a:	e087      	b.n	801f65c <_strtod_l+0xb10>
 801f54c:	4a6e      	ldr	r2, [pc, #440]	@ (801f708 <_strtod_l+0xbbc>)
 801f54e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f550:	4694      	mov	ip, r2
 801f552:	4463      	add	r3, ip
 801f554:	001f      	movs	r7, r3
 801f556:	0030      	movs	r0, r6
 801f558:	0019      	movs	r1, r3
 801f55a:	f002 ffd7 	bl	802250c <__ulp>
 801f55e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f560:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f562:	f7e3 f86b 	bl	800263c <__aeabi_dmul>
 801f566:	0032      	movs	r2, r6
 801f568:	003b      	movs	r3, r7
 801f56a:	f7e2 f8bf 	bl	80016ec <__aeabi_dadd>
 801f56e:	4a64      	ldr	r2, [pc, #400]	@ (801f700 <_strtod_l+0xbb4>)
 801f570:	4b66      	ldr	r3, [pc, #408]	@ (801f70c <_strtod_l+0xbc0>)
 801f572:	0006      	movs	r6, r0
 801f574:	400a      	ands	r2, r1
 801f576:	429a      	cmp	r2, r3
 801f578:	d940      	bls.n	801f5fc <_strtod_l+0xab0>
 801f57a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f57c:	4a64      	ldr	r2, [pc, #400]	@ (801f710 <_strtod_l+0xbc4>)
 801f57e:	4293      	cmp	r3, r2
 801f580:	d103      	bne.n	801f58a <_strtod_l+0xa3e>
 801f582:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f584:	3301      	adds	r3, #1
 801f586:	d100      	bne.n	801f58a <_strtod_l+0xa3e>
 801f588:	e51a      	b.n	801efc0 <_strtod_l+0x474>
 801f58a:	2601      	movs	r6, #1
 801f58c:	4f60      	ldr	r7, [pc, #384]	@ (801f710 <_strtod_l+0xbc4>)
 801f58e:	4276      	negs	r6, r6
 801f590:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f592:	9805      	ldr	r0, [sp, #20]
 801f594:	f002 fc6e 	bl	8021e74 <_Bfree>
 801f598:	9908      	ldr	r1, [sp, #32]
 801f59a:	9805      	ldr	r0, [sp, #20]
 801f59c:	f002 fc6a 	bl	8021e74 <_Bfree>
 801f5a0:	9907      	ldr	r1, [sp, #28]
 801f5a2:	9805      	ldr	r0, [sp, #20]
 801f5a4:	f002 fc66 	bl	8021e74 <_Bfree>
 801f5a8:	9906      	ldr	r1, [sp, #24]
 801f5aa:	9805      	ldr	r0, [sp, #20]
 801f5ac:	f002 fc62 	bl	8021e74 <_Bfree>
 801f5b0:	e617      	b.n	801f1e2 <_strtod_l+0x696>
 801f5b2:	2e01      	cmp	r6, #1
 801f5b4:	d103      	bne.n	801f5be <_strtod_l+0xa72>
 801f5b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	d100      	bne.n	801f5be <_strtod_l+0xa72>
 801f5bc:	e59c      	b.n	801f0f8 <_strtod_l+0x5ac>
 801f5be:	2300      	movs	r3, #0
 801f5c0:	4c54      	ldr	r4, [pc, #336]	@ (801f714 <_strtod_l+0xbc8>)
 801f5c2:	4d4d      	ldr	r5, [pc, #308]	@ (801f6f8 <_strtod_l+0xbac>)
 801f5c4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f5c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f5c8:	2400      	movs	r4, #0
 801f5ca:	e7b2      	b.n	801f532 <_strtod_l+0x9e6>
 801f5cc:	2400      	movs	r4, #0
 801f5ce:	4d4b      	ldr	r5, [pc, #300]	@ (801f6fc <_strtod_l+0xbb0>)
 801f5d0:	e7aa      	b.n	801f528 <_strtod_l+0x9dc>
 801f5d2:	0020      	movs	r0, r4
 801f5d4:	0029      	movs	r1, r5
 801f5d6:	4b49      	ldr	r3, [pc, #292]	@ (801f6fc <_strtod_l+0xbb0>)
 801f5d8:	2200      	movs	r2, #0
 801f5da:	f7e3 f82f 	bl	800263c <__aeabi_dmul>
 801f5de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f5e0:	0004      	movs	r4, r0
 801f5e2:	000d      	movs	r5, r1
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d09f      	beq.n	801f528 <_strtod_l+0x9dc>
 801f5e8:	940a      	str	r4, [sp, #40]	@ 0x28
 801f5ea:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f5ec:	e7a1      	b.n	801f532 <_strtod_l+0x9e6>
 801f5ee:	2300      	movs	r3, #0
 801f5f0:	4c41      	ldr	r4, [pc, #260]	@ (801f6f8 <_strtod_l+0xbac>)
 801f5f2:	0025      	movs	r5, r4
 801f5f4:	930a      	str	r3, [sp, #40]	@ 0x28
 801f5f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f5f8:	001c      	movs	r4, r3
 801f5fa:	e79a      	b.n	801f532 <_strtod_l+0x9e6>
 801f5fc:	23d4      	movs	r3, #212	@ 0xd4
 801f5fe:	049b      	lsls	r3, r3, #18
 801f600:	18cf      	adds	r7, r1, r3
 801f602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f604:	9710      	str	r7, [sp, #64]	@ 0x40
 801f606:	2b00      	cmp	r3, #0
 801f608:	d1c2      	bne.n	801f590 <_strtod_l+0xa44>
 801f60a:	4b3d      	ldr	r3, [pc, #244]	@ (801f700 <_strtod_l+0xbb4>)
 801f60c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f60e:	403b      	ands	r3, r7
 801f610:	429a      	cmp	r2, r3
 801f612:	d1bd      	bne.n	801f590 <_strtod_l+0xa44>
 801f614:	0020      	movs	r0, r4
 801f616:	0029      	movs	r1, r5
 801f618:	f7e1 f836 	bl	8000688 <__aeabi_d2lz>
 801f61c:	f7e1 f86e 	bl	80006fc <__aeabi_l2d>
 801f620:	0002      	movs	r2, r0
 801f622:	000b      	movs	r3, r1
 801f624:	0020      	movs	r0, r4
 801f626:	0029      	movs	r1, r5
 801f628:	f7e3 fad0 	bl	8002bcc <__aeabi_dsub>
 801f62c:	033c      	lsls	r4, r7, #12
 801f62e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f630:	0b24      	lsrs	r4, r4, #12
 801f632:	4334      	orrs	r4, r6
 801f634:	900e      	str	r0, [sp, #56]	@ 0x38
 801f636:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f638:	4a37      	ldr	r2, [pc, #220]	@ (801f718 <_strtod_l+0xbcc>)
 801f63a:	431c      	orrs	r4, r3
 801f63c:	d052      	beq.n	801f6e4 <_strtod_l+0xb98>
 801f63e:	4b37      	ldr	r3, [pc, #220]	@ (801f71c <_strtod_l+0xbd0>)
 801f640:	f7e0 ff3c 	bl	80004bc <__aeabi_dcmplt>
 801f644:	2800      	cmp	r0, #0
 801f646:	d000      	beq.n	801f64a <_strtod_l+0xafe>
 801f648:	e4c3      	b.n	801efd2 <_strtod_l+0x486>
 801f64a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f64c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f64e:	4a34      	ldr	r2, [pc, #208]	@ (801f720 <_strtod_l+0xbd4>)
 801f650:	4b2a      	ldr	r3, [pc, #168]	@ (801f6fc <_strtod_l+0xbb0>)
 801f652:	f7e0 ff47 	bl	80004e4 <__aeabi_dcmpgt>
 801f656:	2800      	cmp	r0, #0
 801f658:	d09a      	beq.n	801f590 <_strtod_l+0xa44>
 801f65a:	e4ba      	b.n	801efd2 <_strtod_l+0x486>
 801f65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f65e:	2b00      	cmp	r3, #0
 801f660:	d02a      	beq.n	801f6b8 <_strtod_l+0xb6c>
 801f662:	23d4      	movs	r3, #212	@ 0xd4
 801f664:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f666:	04db      	lsls	r3, r3, #19
 801f668:	429a      	cmp	r2, r3
 801f66a:	d825      	bhi.n	801f6b8 <_strtod_l+0xb6c>
 801f66c:	0020      	movs	r0, r4
 801f66e:	0029      	movs	r1, r5
 801f670:	4a2c      	ldr	r2, [pc, #176]	@ (801f724 <_strtod_l+0xbd8>)
 801f672:	4b2d      	ldr	r3, [pc, #180]	@ (801f728 <_strtod_l+0xbdc>)
 801f674:	f7e0 ff2c 	bl	80004d0 <__aeabi_dcmple>
 801f678:	2800      	cmp	r0, #0
 801f67a:	d016      	beq.n	801f6aa <_strtod_l+0xb5e>
 801f67c:	0020      	movs	r0, r4
 801f67e:	0029      	movs	r1, r5
 801f680:	f7e0 ffe4 	bl	800064c <__aeabi_d2uiz>
 801f684:	2800      	cmp	r0, #0
 801f686:	d100      	bne.n	801f68a <_strtod_l+0xb3e>
 801f688:	3001      	adds	r0, #1
 801f68a:	f7e3 fec7 	bl	800341c <__aeabi_ui2d>
 801f68e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f690:	0004      	movs	r4, r0
 801f692:	000d      	movs	r5, r1
 801f694:	2b00      	cmp	r3, #0
 801f696:	d122      	bne.n	801f6de <_strtod_l+0xb92>
 801f698:	2380      	movs	r3, #128	@ 0x80
 801f69a:	061b      	lsls	r3, r3, #24
 801f69c:	18cb      	adds	r3, r1, r3
 801f69e:	9018      	str	r0, [sp, #96]	@ 0x60
 801f6a0:	9319      	str	r3, [sp, #100]	@ 0x64
 801f6a2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f6a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f6a6:	9214      	str	r2, [sp, #80]	@ 0x50
 801f6a8:	9315      	str	r3, [sp, #84]	@ 0x54
 801f6aa:	22d6      	movs	r2, #214	@ 0xd6
 801f6ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f6ae:	04d2      	lsls	r2, r2, #19
 801f6b0:	189b      	adds	r3, r3, r2
 801f6b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f6b4:	1a9b      	subs	r3, r3, r2
 801f6b6:	9315      	str	r3, [sp, #84]	@ 0x54
 801f6b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f6ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f6bc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f6be:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f6c0:	f002 ff24 	bl	802250c <__ulp>
 801f6c4:	0002      	movs	r2, r0
 801f6c6:	000b      	movs	r3, r1
 801f6c8:	0030      	movs	r0, r6
 801f6ca:	0039      	movs	r1, r7
 801f6cc:	f7e2 ffb6 	bl	800263c <__aeabi_dmul>
 801f6d0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f6d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f6d4:	f7e2 f80a 	bl	80016ec <__aeabi_dadd>
 801f6d8:	0006      	movs	r6, r0
 801f6da:	000f      	movs	r7, r1
 801f6dc:	e791      	b.n	801f602 <_strtod_l+0xab6>
 801f6de:	9418      	str	r4, [sp, #96]	@ 0x60
 801f6e0:	9519      	str	r5, [sp, #100]	@ 0x64
 801f6e2:	e7de      	b.n	801f6a2 <_strtod_l+0xb56>
 801f6e4:	4b11      	ldr	r3, [pc, #68]	@ (801f72c <_strtod_l+0xbe0>)
 801f6e6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f6e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f6ea:	f7e0 fee7 	bl	80004bc <__aeabi_dcmplt>
 801f6ee:	e7b2      	b.n	801f656 <_strtod_l+0xb0a>
 801f6f0:	fff00000 	.word	0xfff00000
 801f6f4:	000fffff 	.word	0x000fffff
 801f6f8:	3ff00000 	.word	0x3ff00000
 801f6fc:	3fe00000 	.word	0x3fe00000
 801f700:	7ff00000 	.word	0x7ff00000
 801f704:	7fe00000 	.word	0x7fe00000
 801f708:	fcb00000 	.word	0xfcb00000
 801f70c:	7c9fffff 	.word	0x7c9fffff
 801f710:	7fefffff 	.word	0x7fefffff
 801f714:	bff00000 	.word	0xbff00000
 801f718:	94a03595 	.word	0x94a03595
 801f71c:	3fdfffff 	.word	0x3fdfffff
 801f720:	35afe535 	.word	0x35afe535
 801f724:	ffc00000 	.word	0xffc00000
 801f728:	41dfffff 	.word	0x41dfffff
 801f72c:	3fcfffff 	.word	0x3fcfffff

0801f730 <strtod>:
 801f730:	b510      	push	{r4, lr}
 801f732:	4c04      	ldr	r4, [pc, #16]	@ (801f744 <strtod+0x14>)
 801f734:	000a      	movs	r2, r1
 801f736:	0001      	movs	r1, r0
 801f738:	4b03      	ldr	r3, [pc, #12]	@ (801f748 <strtod+0x18>)
 801f73a:	6820      	ldr	r0, [r4, #0]
 801f73c:	f7ff fa06 	bl	801eb4c <_strtod_l>
 801f740:	bd10      	pop	{r4, pc}
 801f742:	46c0      	nop			@ (mov r8, r8)
 801f744:	200003d0 	.word	0x200003d0
 801f748:	20000264 	.word	0x20000264

0801f74c <_strtol_l.constprop.0>:
 801f74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f74e:	b085      	sub	sp, #20
 801f750:	0017      	movs	r7, r2
 801f752:	001e      	movs	r6, r3
 801f754:	9003      	str	r0, [sp, #12]
 801f756:	9101      	str	r1, [sp, #4]
 801f758:	2b24      	cmp	r3, #36	@ 0x24
 801f75a:	d844      	bhi.n	801f7e6 <_strtol_l.constprop.0+0x9a>
 801f75c:	000c      	movs	r4, r1
 801f75e:	2b01      	cmp	r3, #1
 801f760:	d041      	beq.n	801f7e6 <_strtol_l.constprop.0+0x9a>
 801f762:	4b3d      	ldr	r3, [pc, #244]	@ (801f858 <_strtol_l.constprop.0+0x10c>)
 801f764:	2208      	movs	r2, #8
 801f766:	469c      	mov	ip, r3
 801f768:	0023      	movs	r3, r4
 801f76a:	4661      	mov	r1, ip
 801f76c:	781d      	ldrb	r5, [r3, #0]
 801f76e:	3401      	adds	r4, #1
 801f770:	5d48      	ldrb	r0, [r1, r5]
 801f772:	0001      	movs	r1, r0
 801f774:	4011      	ands	r1, r2
 801f776:	4210      	tst	r0, r2
 801f778:	d1f6      	bne.n	801f768 <_strtol_l.constprop.0+0x1c>
 801f77a:	2d2d      	cmp	r5, #45	@ 0x2d
 801f77c:	d13a      	bne.n	801f7f4 <_strtol_l.constprop.0+0xa8>
 801f77e:	7825      	ldrb	r5, [r4, #0]
 801f780:	1c9c      	adds	r4, r3, #2
 801f782:	2301      	movs	r3, #1
 801f784:	9300      	str	r3, [sp, #0]
 801f786:	2210      	movs	r2, #16
 801f788:	0033      	movs	r3, r6
 801f78a:	4393      	bics	r3, r2
 801f78c:	d109      	bne.n	801f7a2 <_strtol_l.constprop.0+0x56>
 801f78e:	2d30      	cmp	r5, #48	@ 0x30
 801f790:	d136      	bne.n	801f800 <_strtol_l.constprop.0+0xb4>
 801f792:	2120      	movs	r1, #32
 801f794:	7823      	ldrb	r3, [r4, #0]
 801f796:	438b      	bics	r3, r1
 801f798:	2b58      	cmp	r3, #88	@ 0x58
 801f79a:	d131      	bne.n	801f800 <_strtol_l.constprop.0+0xb4>
 801f79c:	0016      	movs	r6, r2
 801f79e:	7865      	ldrb	r5, [r4, #1]
 801f7a0:	3402      	adds	r4, #2
 801f7a2:	4a2e      	ldr	r2, [pc, #184]	@ (801f85c <_strtol_l.constprop.0+0x110>)
 801f7a4:	9b00      	ldr	r3, [sp, #0]
 801f7a6:	4694      	mov	ip, r2
 801f7a8:	4463      	add	r3, ip
 801f7aa:	0031      	movs	r1, r6
 801f7ac:	0018      	movs	r0, r3
 801f7ae:	9302      	str	r3, [sp, #8]
 801f7b0:	f7e0 fd7e 	bl	80002b0 <__aeabi_uidivmod>
 801f7b4:	2200      	movs	r2, #0
 801f7b6:	4684      	mov	ip, r0
 801f7b8:	0010      	movs	r0, r2
 801f7ba:	002b      	movs	r3, r5
 801f7bc:	3b30      	subs	r3, #48	@ 0x30
 801f7be:	2b09      	cmp	r3, #9
 801f7c0:	d825      	bhi.n	801f80e <_strtol_l.constprop.0+0xc2>
 801f7c2:	001d      	movs	r5, r3
 801f7c4:	42ae      	cmp	r6, r5
 801f7c6:	dd31      	ble.n	801f82c <_strtol_l.constprop.0+0xe0>
 801f7c8:	1c53      	adds	r3, r2, #1
 801f7ca:	d009      	beq.n	801f7e0 <_strtol_l.constprop.0+0x94>
 801f7cc:	2201      	movs	r2, #1
 801f7ce:	4252      	negs	r2, r2
 801f7d0:	4584      	cmp	ip, r0
 801f7d2:	d305      	bcc.n	801f7e0 <_strtol_l.constprop.0+0x94>
 801f7d4:	d101      	bne.n	801f7da <_strtol_l.constprop.0+0x8e>
 801f7d6:	42a9      	cmp	r1, r5
 801f7d8:	db25      	blt.n	801f826 <_strtol_l.constprop.0+0xda>
 801f7da:	2201      	movs	r2, #1
 801f7dc:	4370      	muls	r0, r6
 801f7de:	1828      	adds	r0, r5, r0
 801f7e0:	7825      	ldrb	r5, [r4, #0]
 801f7e2:	3401      	adds	r4, #1
 801f7e4:	e7e9      	b.n	801f7ba <_strtol_l.constprop.0+0x6e>
 801f7e6:	f000 ffc5 	bl	8020774 <__errno>
 801f7ea:	2316      	movs	r3, #22
 801f7ec:	6003      	str	r3, [r0, #0]
 801f7ee:	2000      	movs	r0, #0
 801f7f0:	b005      	add	sp, #20
 801f7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f7f4:	9100      	str	r1, [sp, #0]
 801f7f6:	2d2b      	cmp	r5, #43	@ 0x2b
 801f7f8:	d1c5      	bne.n	801f786 <_strtol_l.constprop.0+0x3a>
 801f7fa:	7825      	ldrb	r5, [r4, #0]
 801f7fc:	1c9c      	adds	r4, r3, #2
 801f7fe:	e7c2      	b.n	801f786 <_strtol_l.constprop.0+0x3a>
 801f800:	2e00      	cmp	r6, #0
 801f802:	d1ce      	bne.n	801f7a2 <_strtol_l.constprop.0+0x56>
 801f804:	3608      	adds	r6, #8
 801f806:	2d30      	cmp	r5, #48	@ 0x30
 801f808:	d0cb      	beq.n	801f7a2 <_strtol_l.constprop.0+0x56>
 801f80a:	3602      	adds	r6, #2
 801f80c:	e7c9      	b.n	801f7a2 <_strtol_l.constprop.0+0x56>
 801f80e:	002b      	movs	r3, r5
 801f810:	3b41      	subs	r3, #65	@ 0x41
 801f812:	2b19      	cmp	r3, #25
 801f814:	d801      	bhi.n	801f81a <_strtol_l.constprop.0+0xce>
 801f816:	3d37      	subs	r5, #55	@ 0x37
 801f818:	e7d4      	b.n	801f7c4 <_strtol_l.constprop.0+0x78>
 801f81a:	002b      	movs	r3, r5
 801f81c:	3b61      	subs	r3, #97	@ 0x61
 801f81e:	2b19      	cmp	r3, #25
 801f820:	d804      	bhi.n	801f82c <_strtol_l.constprop.0+0xe0>
 801f822:	3d57      	subs	r5, #87	@ 0x57
 801f824:	e7ce      	b.n	801f7c4 <_strtol_l.constprop.0+0x78>
 801f826:	2201      	movs	r2, #1
 801f828:	4252      	negs	r2, r2
 801f82a:	e7d9      	b.n	801f7e0 <_strtol_l.constprop.0+0x94>
 801f82c:	1c53      	adds	r3, r2, #1
 801f82e:	d108      	bne.n	801f842 <_strtol_l.constprop.0+0xf6>
 801f830:	2322      	movs	r3, #34	@ 0x22
 801f832:	9a03      	ldr	r2, [sp, #12]
 801f834:	9802      	ldr	r0, [sp, #8]
 801f836:	6013      	str	r3, [r2, #0]
 801f838:	2f00      	cmp	r7, #0
 801f83a:	d0d9      	beq.n	801f7f0 <_strtol_l.constprop.0+0xa4>
 801f83c:	1e63      	subs	r3, r4, #1
 801f83e:	9301      	str	r3, [sp, #4]
 801f840:	e007      	b.n	801f852 <_strtol_l.constprop.0+0x106>
 801f842:	9b00      	ldr	r3, [sp, #0]
 801f844:	2b00      	cmp	r3, #0
 801f846:	d000      	beq.n	801f84a <_strtol_l.constprop.0+0xfe>
 801f848:	4240      	negs	r0, r0
 801f84a:	2f00      	cmp	r7, #0
 801f84c:	d0d0      	beq.n	801f7f0 <_strtol_l.constprop.0+0xa4>
 801f84e:	2a00      	cmp	r2, #0
 801f850:	d1f4      	bne.n	801f83c <_strtol_l.constprop.0+0xf0>
 801f852:	9b01      	ldr	r3, [sp, #4]
 801f854:	603b      	str	r3, [r7, #0]
 801f856:	e7cb      	b.n	801f7f0 <_strtol_l.constprop.0+0xa4>
 801f858:	080262c9 	.word	0x080262c9
 801f85c:	7fffffff 	.word	0x7fffffff

0801f860 <strtol>:
 801f860:	b510      	push	{r4, lr}
 801f862:	4c04      	ldr	r4, [pc, #16]	@ (801f874 <strtol+0x14>)
 801f864:	0013      	movs	r3, r2
 801f866:	000a      	movs	r2, r1
 801f868:	0001      	movs	r1, r0
 801f86a:	6820      	ldr	r0, [r4, #0]
 801f86c:	f7ff ff6e 	bl	801f74c <_strtol_l.constprop.0>
 801f870:	bd10      	pop	{r4, pc}
 801f872:	46c0      	nop			@ (mov r8, r8)
 801f874:	200003d0 	.word	0x200003d0

0801f878 <__cvt>:
 801f878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f87a:	001f      	movs	r7, r3
 801f87c:	2300      	movs	r3, #0
 801f87e:	0016      	movs	r6, r2
 801f880:	b08b      	sub	sp, #44	@ 0x2c
 801f882:	429f      	cmp	r7, r3
 801f884:	da04      	bge.n	801f890 <__cvt+0x18>
 801f886:	2180      	movs	r1, #128	@ 0x80
 801f888:	0609      	lsls	r1, r1, #24
 801f88a:	187b      	adds	r3, r7, r1
 801f88c:	001f      	movs	r7, r3
 801f88e:	232d      	movs	r3, #45	@ 0x2d
 801f890:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f892:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f894:	7013      	strb	r3, [r2, #0]
 801f896:	2320      	movs	r3, #32
 801f898:	2203      	movs	r2, #3
 801f89a:	439d      	bics	r5, r3
 801f89c:	2d46      	cmp	r5, #70	@ 0x46
 801f89e:	d007      	beq.n	801f8b0 <__cvt+0x38>
 801f8a0:	002b      	movs	r3, r5
 801f8a2:	3b45      	subs	r3, #69	@ 0x45
 801f8a4:	4259      	negs	r1, r3
 801f8a6:	414b      	adcs	r3, r1
 801f8a8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f8aa:	3a01      	subs	r2, #1
 801f8ac:	18cb      	adds	r3, r1, r3
 801f8ae:	9310      	str	r3, [sp, #64]	@ 0x40
 801f8b0:	ab09      	add	r3, sp, #36	@ 0x24
 801f8b2:	9304      	str	r3, [sp, #16]
 801f8b4:	ab08      	add	r3, sp, #32
 801f8b6:	9303      	str	r3, [sp, #12]
 801f8b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f8ba:	9200      	str	r2, [sp, #0]
 801f8bc:	9302      	str	r3, [sp, #8]
 801f8be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f8c0:	0032      	movs	r2, r6
 801f8c2:	9301      	str	r3, [sp, #4]
 801f8c4:	003b      	movs	r3, r7
 801f8c6:	f001 f82b 	bl	8020920 <_dtoa_r>
 801f8ca:	0004      	movs	r4, r0
 801f8cc:	2d47      	cmp	r5, #71	@ 0x47
 801f8ce:	d11b      	bne.n	801f908 <__cvt+0x90>
 801f8d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f8d2:	07db      	lsls	r3, r3, #31
 801f8d4:	d511      	bpl.n	801f8fa <__cvt+0x82>
 801f8d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f8d8:	18c3      	adds	r3, r0, r3
 801f8da:	9307      	str	r3, [sp, #28]
 801f8dc:	2200      	movs	r2, #0
 801f8de:	2300      	movs	r3, #0
 801f8e0:	0030      	movs	r0, r6
 801f8e2:	0039      	movs	r1, r7
 801f8e4:	f7e0 fde4 	bl	80004b0 <__aeabi_dcmpeq>
 801f8e8:	2800      	cmp	r0, #0
 801f8ea:	d001      	beq.n	801f8f0 <__cvt+0x78>
 801f8ec:	9b07      	ldr	r3, [sp, #28]
 801f8ee:	9309      	str	r3, [sp, #36]	@ 0x24
 801f8f0:	2230      	movs	r2, #48	@ 0x30
 801f8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8f4:	9907      	ldr	r1, [sp, #28]
 801f8f6:	428b      	cmp	r3, r1
 801f8f8:	d320      	bcc.n	801f93c <__cvt+0xc4>
 801f8fa:	0020      	movs	r0, r4
 801f8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f900:	1b1b      	subs	r3, r3, r4
 801f902:	6013      	str	r3, [r2, #0]
 801f904:	b00b      	add	sp, #44	@ 0x2c
 801f906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f908:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f90a:	18c3      	adds	r3, r0, r3
 801f90c:	9307      	str	r3, [sp, #28]
 801f90e:	2d46      	cmp	r5, #70	@ 0x46
 801f910:	d1e4      	bne.n	801f8dc <__cvt+0x64>
 801f912:	7803      	ldrb	r3, [r0, #0]
 801f914:	2b30      	cmp	r3, #48	@ 0x30
 801f916:	d10c      	bne.n	801f932 <__cvt+0xba>
 801f918:	2200      	movs	r2, #0
 801f91a:	2300      	movs	r3, #0
 801f91c:	0030      	movs	r0, r6
 801f91e:	0039      	movs	r1, r7
 801f920:	f7e0 fdc6 	bl	80004b0 <__aeabi_dcmpeq>
 801f924:	2800      	cmp	r0, #0
 801f926:	d104      	bne.n	801f932 <__cvt+0xba>
 801f928:	2301      	movs	r3, #1
 801f92a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f92c:	1a9b      	subs	r3, r3, r2
 801f92e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f930:	6013      	str	r3, [r2, #0]
 801f932:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f934:	9a07      	ldr	r2, [sp, #28]
 801f936:	681b      	ldr	r3, [r3, #0]
 801f938:	18d3      	adds	r3, r2, r3
 801f93a:	e7ce      	b.n	801f8da <__cvt+0x62>
 801f93c:	1c59      	adds	r1, r3, #1
 801f93e:	9109      	str	r1, [sp, #36]	@ 0x24
 801f940:	701a      	strb	r2, [r3, #0]
 801f942:	e7d6      	b.n	801f8f2 <__cvt+0x7a>

0801f944 <__exponent>:
 801f944:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f946:	232b      	movs	r3, #43	@ 0x2b
 801f948:	0005      	movs	r5, r0
 801f94a:	000c      	movs	r4, r1
 801f94c:	b085      	sub	sp, #20
 801f94e:	7002      	strb	r2, [r0, #0]
 801f950:	2900      	cmp	r1, #0
 801f952:	da01      	bge.n	801f958 <__exponent+0x14>
 801f954:	424c      	negs	r4, r1
 801f956:	3302      	adds	r3, #2
 801f958:	706b      	strb	r3, [r5, #1]
 801f95a:	2c09      	cmp	r4, #9
 801f95c:	dd2c      	ble.n	801f9b8 <__exponent+0x74>
 801f95e:	ab02      	add	r3, sp, #8
 801f960:	1dde      	adds	r6, r3, #7
 801f962:	0020      	movs	r0, r4
 801f964:	210a      	movs	r1, #10
 801f966:	f7e0 fd8d 	bl	8000484 <__aeabi_idivmod>
 801f96a:	0037      	movs	r7, r6
 801f96c:	3130      	adds	r1, #48	@ 0x30
 801f96e:	3e01      	subs	r6, #1
 801f970:	0020      	movs	r0, r4
 801f972:	7031      	strb	r1, [r6, #0]
 801f974:	210a      	movs	r1, #10
 801f976:	9401      	str	r4, [sp, #4]
 801f978:	f7e0 fc9e 	bl	80002b8 <__divsi3>
 801f97c:	9b01      	ldr	r3, [sp, #4]
 801f97e:	0004      	movs	r4, r0
 801f980:	2b63      	cmp	r3, #99	@ 0x63
 801f982:	dcee      	bgt.n	801f962 <__exponent+0x1e>
 801f984:	1eba      	subs	r2, r7, #2
 801f986:	1ca8      	adds	r0, r5, #2
 801f988:	0001      	movs	r1, r0
 801f98a:	0013      	movs	r3, r2
 801f98c:	3430      	adds	r4, #48	@ 0x30
 801f98e:	7014      	strb	r4, [r2, #0]
 801f990:	ac02      	add	r4, sp, #8
 801f992:	3407      	adds	r4, #7
 801f994:	429c      	cmp	r4, r3
 801f996:	d80a      	bhi.n	801f9ae <__exponent+0x6a>
 801f998:	2300      	movs	r3, #0
 801f99a:	42a2      	cmp	r2, r4
 801f99c:	d803      	bhi.n	801f9a6 <__exponent+0x62>
 801f99e:	3309      	adds	r3, #9
 801f9a0:	aa02      	add	r2, sp, #8
 801f9a2:	189b      	adds	r3, r3, r2
 801f9a4:	1bdb      	subs	r3, r3, r7
 801f9a6:	18c0      	adds	r0, r0, r3
 801f9a8:	1b40      	subs	r0, r0, r5
 801f9aa:	b005      	add	sp, #20
 801f9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f9ae:	781c      	ldrb	r4, [r3, #0]
 801f9b0:	3301      	adds	r3, #1
 801f9b2:	700c      	strb	r4, [r1, #0]
 801f9b4:	3101      	adds	r1, #1
 801f9b6:	e7eb      	b.n	801f990 <__exponent+0x4c>
 801f9b8:	2330      	movs	r3, #48	@ 0x30
 801f9ba:	18e4      	adds	r4, r4, r3
 801f9bc:	70ab      	strb	r3, [r5, #2]
 801f9be:	1d28      	adds	r0, r5, #4
 801f9c0:	70ec      	strb	r4, [r5, #3]
 801f9c2:	e7f1      	b.n	801f9a8 <__exponent+0x64>

0801f9c4 <_printf_float>:
 801f9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f9c6:	b097      	sub	sp, #92	@ 0x5c
 801f9c8:	000d      	movs	r5, r1
 801f9ca:	920a      	str	r2, [sp, #40]	@ 0x28
 801f9cc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f9ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f9d0:	9009      	str	r0, [sp, #36]	@ 0x24
 801f9d2:	f000 fe7d 	bl	80206d0 <_localeconv_r>
 801f9d6:	6803      	ldr	r3, [r0, #0]
 801f9d8:	0018      	movs	r0, r3
 801f9da:	930d      	str	r3, [sp, #52]	@ 0x34
 801f9dc:	f7e0 fbc6 	bl	800016c <strlen>
 801f9e0:	2300      	movs	r3, #0
 801f9e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f9e4:	9314      	str	r3, [sp, #80]	@ 0x50
 801f9e6:	7e2b      	ldrb	r3, [r5, #24]
 801f9e8:	2207      	movs	r2, #7
 801f9ea:	930c      	str	r3, [sp, #48]	@ 0x30
 801f9ec:	682b      	ldr	r3, [r5, #0]
 801f9ee:	930e      	str	r3, [sp, #56]	@ 0x38
 801f9f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f9f2:	6823      	ldr	r3, [r4, #0]
 801f9f4:	05c9      	lsls	r1, r1, #23
 801f9f6:	d545      	bpl.n	801fa84 <_printf_float+0xc0>
 801f9f8:	189b      	adds	r3, r3, r2
 801f9fa:	4393      	bics	r3, r2
 801f9fc:	001a      	movs	r2, r3
 801f9fe:	3208      	adds	r2, #8
 801fa00:	6022      	str	r2, [r4, #0]
 801fa02:	2201      	movs	r2, #1
 801fa04:	681e      	ldr	r6, [r3, #0]
 801fa06:	685f      	ldr	r7, [r3, #4]
 801fa08:	007b      	lsls	r3, r7, #1
 801fa0a:	085b      	lsrs	r3, r3, #1
 801fa0c:	9311      	str	r3, [sp, #68]	@ 0x44
 801fa0e:	9610      	str	r6, [sp, #64]	@ 0x40
 801fa10:	64ae      	str	r6, [r5, #72]	@ 0x48
 801fa12:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801fa14:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fa16:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fa18:	4ba7      	ldr	r3, [pc, #668]	@ (801fcb8 <_printf_float+0x2f4>)
 801fa1a:	4252      	negs	r2, r2
 801fa1c:	f7e3 fc72 	bl	8003304 <__aeabi_dcmpun>
 801fa20:	2800      	cmp	r0, #0
 801fa22:	d131      	bne.n	801fa88 <_printf_float+0xc4>
 801fa24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801fa26:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801fa28:	2201      	movs	r2, #1
 801fa2a:	4ba3      	ldr	r3, [pc, #652]	@ (801fcb8 <_printf_float+0x2f4>)
 801fa2c:	4252      	negs	r2, r2
 801fa2e:	f7e0 fd4f 	bl	80004d0 <__aeabi_dcmple>
 801fa32:	2800      	cmp	r0, #0
 801fa34:	d128      	bne.n	801fa88 <_printf_float+0xc4>
 801fa36:	2200      	movs	r2, #0
 801fa38:	2300      	movs	r3, #0
 801fa3a:	0030      	movs	r0, r6
 801fa3c:	0039      	movs	r1, r7
 801fa3e:	f7e0 fd3d 	bl	80004bc <__aeabi_dcmplt>
 801fa42:	2800      	cmp	r0, #0
 801fa44:	d003      	beq.n	801fa4e <_printf_float+0x8a>
 801fa46:	002b      	movs	r3, r5
 801fa48:	222d      	movs	r2, #45	@ 0x2d
 801fa4a:	3343      	adds	r3, #67	@ 0x43
 801fa4c:	701a      	strb	r2, [r3, #0]
 801fa4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fa50:	4f9a      	ldr	r7, [pc, #616]	@ (801fcbc <_printf_float+0x2f8>)
 801fa52:	2b47      	cmp	r3, #71	@ 0x47
 801fa54:	d900      	bls.n	801fa58 <_printf_float+0x94>
 801fa56:	4f9a      	ldr	r7, [pc, #616]	@ (801fcc0 <_printf_float+0x2fc>)
 801fa58:	2303      	movs	r3, #3
 801fa5a:	2400      	movs	r4, #0
 801fa5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fa5e:	612b      	str	r3, [r5, #16]
 801fa60:	3301      	adds	r3, #1
 801fa62:	439a      	bics	r2, r3
 801fa64:	602a      	str	r2, [r5, #0]
 801fa66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fa68:	0029      	movs	r1, r5
 801fa6a:	9300      	str	r3, [sp, #0]
 801fa6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fa6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fa70:	aa15      	add	r2, sp, #84	@ 0x54
 801fa72:	f000 f9e5 	bl	801fe40 <_printf_common>
 801fa76:	3001      	adds	r0, #1
 801fa78:	d000      	beq.n	801fa7c <_printf_float+0xb8>
 801fa7a:	e09f      	b.n	801fbbc <_printf_float+0x1f8>
 801fa7c:	2001      	movs	r0, #1
 801fa7e:	4240      	negs	r0, r0
 801fa80:	b017      	add	sp, #92	@ 0x5c
 801fa82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa84:	3307      	adds	r3, #7
 801fa86:	e7b8      	b.n	801f9fa <_printf_float+0x36>
 801fa88:	0032      	movs	r2, r6
 801fa8a:	003b      	movs	r3, r7
 801fa8c:	0030      	movs	r0, r6
 801fa8e:	0039      	movs	r1, r7
 801fa90:	f7e3 fc38 	bl	8003304 <__aeabi_dcmpun>
 801fa94:	2800      	cmp	r0, #0
 801fa96:	d00b      	beq.n	801fab0 <_printf_float+0xec>
 801fa98:	2f00      	cmp	r7, #0
 801fa9a:	da03      	bge.n	801faa4 <_printf_float+0xe0>
 801fa9c:	002b      	movs	r3, r5
 801fa9e:	222d      	movs	r2, #45	@ 0x2d
 801faa0:	3343      	adds	r3, #67	@ 0x43
 801faa2:	701a      	strb	r2, [r3, #0]
 801faa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801faa6:	4f87      	ldr	r7, [pc, #540]	@ (801fcc4 <_printf_float+0x300>)
 801faa8:	2b47      	cmp	r3, #71	@ 0x47
 801faaa:	d9d5      	bls.n	801fa58 <_printf_float+0x94>
 801faac:	4f86      	ldr	r7, [pc, #536]	@ (801fcc8 <_printf_float+0x304>)
 801faae:	e7d3      	b.n	801fa58 <_printf_float+0x94>
 801fab0:	2220      	movs	r2, #32
 801fab2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fab4:	686b      	ldr	r3, [r5, #4]
 801fab6:	4394      	bics	r4, r2
 801fab8:	1c5a      	adds	r2, r3, #1
 801faba:	d146      	bne.n	801fb4a <_printf_float+0x186>
 801fabc:	3307      	adds	r3, #7
 801fabe:	606b      	str	r3, [r5, #4]
 801fac0:	2380      	movs	r3, #128	@ 0x80
 801fac2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fac4:	00db      	lsls	r3, r3, #3
 801fac6:	4313      	orrs	r3, r2
 801fac8:	2200      	movs	r2, #0
 801faca:	602b      	str	r3, [r5, #0]
 801facc:	9206      	str	r2, [sp, #24]
 801face:	aa14      	add	r2, sp, #80	@ 0x50
 801fad0:	9205      	str	r2, [sp, #20]
 801fad2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fad4:	a90a      	add	r1, sp, #40	@ 0x28
 801fad6:	9204      	str	r2, [sp, #16]
 801fad8:	aa13      	add	r2, sp, #76	@ 0x4c
 801fada:	9203      	str	r2, [sp, #12]
 801fadc:	2223      	movs	r2, #35	@ 0x23
 801fade:	1852      	adds	r2, r2, r1
 801fae0:	9202      	str	r2, [sp, #8]
 801fae2:	9301      	str	r3, [sp, #4]
 801fae4:	686b      	ldr	r3, [r5, #4]
 801fae6:	0032      	movs	r2, r6
 801fae8:	9300      	str	r3, [sp, #0]
 801faea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801faec:	003b      	movs	r3, r7
 801faee:	f7ff fec3 	bl	801f878 <__cvt>
 801faf2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801faf4:	0007      	movs	r7, r0
 801faf6:	2c47      	cmp	r4, #71	@ 0x47
 801faf8:	d12d      	bne.n	801fb56 <_printf_float+0x192>
 801fafa:	1cd3      	adds	r3, r2, #3
 801fafc:	db02      	blt.n	801fb04 <_printf_float+0x140>
 801fafe:	686b      	ldr	r3, [r5, #4]
 801fb00:	429a      	cmp	r2, r3
 801fb02:	dd48      	ble.n	801fb96 <_printf_float+0x1d2>
 801fb04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fb08:	3b02      	subs	r3, #2
 801fb0a:	b2db      	uxtb	r3, r3
 801fb0c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb0e:	0028      	movs	r0, r5
 801fb10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fb12:	3901      	subs	r1, #1
 801fb14:	3050      	adds	r0, #80	@ 0x50
 801fb16:	9113      	str	r1, [sp, #76]	@ 0x4c
 801fb18:	f7ff ff14 	bl	801f944 <__exponent>
 801fb1c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fb1e:	0004      	movs	r4, r0
 801fb20:	1813      	adds	r3, r2, r0
 801fb22:	612b      	str	r3, [r5, #16]
 801fb24:	2a01      	cmp	r2, #1
 801fb26:	dc02      	bgt.n	801fb2e <_printf_float+0x16a>
 801fb28:	682a      	ldr	r2, [r5, #0]
 801fb2a:	07d2      	lsls	r2, r2, #31
 801fb2c:	d501      	bpl.n	801fb32 <_printf_float+0x16e>
 801fb2e:	3301      	adds	r3, #1
 801fb30:	612b      	str	r3, [r5, #16]
 801fb32:	2323      	movs	r3, #35	@ 0x23
 801fb34:	aa0a      	add	r2, sp, #40	@ 0x28
 801fb36:	189b      	adds	r3, r3, r2
 801fb38:	781b      	ldrb	r3, [r3, #0]
 801fb3a:	2b00      	cmp	r3, #0
 801fb3c:	d100      	bne.n	801fb40 <_printf_float+0x17c>
 801fb3e:	e792      	b.n	801fa66 <_printf_float+0xa2>
 801fb40:	002b      	movs	r3, r5
 801fb42:	222d      	movs	r2, #45	@ 0x2d
 801fb44:	3343      	adds	r3, #67	@ 0x43
 801fb46:	701a      	strb	r2, [r3, #0]
 801fb48:	e78d      	b.n	801fa66 <_printf_float+0xa2>
 801fb4a:	2c47      	cmp	r4, #71	@ 0x47
 801fb4c:	d1b8      	bne.n	801fac0 <_printf_float+0xfc>
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	d1b6      	bne.n	801fac0 <_printf_float+0xfc>
 801fb52:	3301      	adds	r3, #1
 801fb54:	e7b3      	b.n	801fabe <_printf_float+0xfa>
 801fb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb58:	0011      	movs	r1, r2
 801fb5a:	2b65      	cmp	r3, #101	@ 0x65
 801fb5c:	d9d7      	bls.n	801fb0e <_printf_float+0x14a>
 801fb5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb60:	2b66      	cmp	r3, #102	@ 0x66
 801fb62:	d11a      	bne.n	801fb9a <_printf_float+0x1d6>
 801fb64:	686b      	ldr	r3, [r5, #4]
 801fb66:	2a00      	cmp	r2, #0
 801fb68:	dd09      	ble.n	801fb7e <_printf_float+0x1ba>
 801fb6a:	612a      	str	r2, [r5, #16]
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d102      	bne.n	801fb76 <_printf_float+0x1b2>
 801fb70:	6829      	ldr	r1, [r5, #0]
 801fb72:	07c9      	lsls	r1, r1, #31
 801fb74:	d50b      	bpl.n	801fb8e <_printf_float+0x1ca>
 801fb76:	3301      	adds	r3, #1
 801fb78:	189b      	adds	r3, r3, r2
 801fb7a:	612b      	str	r3, [r5, #16]
 801fb7c:	e007      	b.n	801fb8e <_printf_float+0x1ca>
 801fb7e:	2b00      	cmp	r3, #0
 801fb80:	d103      	bne.n	801fb8a <_printf_float+0x1c6>
 801fb82:	2201      	movs	r2, #1
 801fb84:	6829      	ldr	r1, [r5, #0]
 801fb86:	4211      	tst	r1, r2
 801fb88:	d000      	beq.n	801fb8c <_printf_float+0x1c8>
 801fb8a:	1c9a      	adds	r2, r3, #2
 801fb8c:	612a      	str	r2, [r5, #16]
 801fb8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fb90:	2400      	movs	r4, #0
 801fb92:	65ab      	str	r3, [r5, #88]	@ 0x58
 801fb94:	e7cd      	b.n	801fb32 <_printf_float+0x16e>
 801fb96:	2367      	movs	r3, #103	@ 0x67
 801fb98:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb9a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fb9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fb9e:	4299      	cmp	r1, r3
 801fba0:	db06      	blt.n	801fbb0 <_printf_float+0x1ec>
 801fba2:	682b      	ldr	r3, [r5, #0]
 801fba4:	6129      	str	r1, [r5, #16]
 801fba6:	07db      	lsls	r3, r3, #31
 801fba8:	d5f1      	bpl.n	801fb8e <_printf_float+0x1ca>
 801fbaa:	3101      	adds	r1, #1
 801fbac:	6129      	str	r1, [r5, #16]
 801fbae:	e7ee      	b.n	801fb8e <_printf_float+0x1ca>
 801fbb0:	2201      	movs	r2, #1
 801fbb2:	2900      	cmp	r1, #0
 801fbb4:	dce0      	bgt.n	801fb78 <_printf_float+0x1b4>
 801fbb6:	1892      	adds	r2, r2, r2
 801fbb8:	1a52      	subs	r2, r2, r1
 801fbba:	e7dd      	b.n	801fb78 <_printf_float+0x1b4>
 801fbbc:	682a      	ldr	r2, [r5, #0]
 801fbbe:	0553      	lsls	r3, r2, #21
 801fbc0:	d408      	bmi.n	801fbd4 <_printf_float+0x210>
 801fbc2:	692b      	ldr	r3, [r5, #16]
 801fbc4:	003a      	movs	r2, r7
 801fbc6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fbc8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fbca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fbcc:	47a0      	blx	r4
 801fbce:	3001      	adds	r0, #1
 801fbd0:	d129      	bne.n	801fc26 <_printf_float+0x262>
 801fbd2:	e753      	b.n	801fa7c <_printf_float+0xb8>
 801fbd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fbd6:	2b65      	cmp	r3, #101	@ 0x65
 801fbd8:	d800      	bhi.n	801fbdc <_printf_float+0x218>
 801fbda:	e0da      	b.n	801fd92 <_printf_float+0x3ce>
 801fbdc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801fbde:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801fbe0:	2200      	movs	r2, #0
 801fbe2:	2300      	movs	r3, #0
 801fbe4:	f7e0 fc64 	bl	80004b0 <__aeabi_dcmpeq>
 801fbe8:	2800      	cmp	r0, #0
 801fbea:	d033      	beq.n	801fc54 <_printf_float+0x290>
 801fbec:	2301      	movs	r3, #1
 801fbee:	4a37      	ldr	r2, [pc, #220]	@ (801fccc <_printf_float+0x308>)
 801fbf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fbf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fbf4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fbf6:	47a0      	blx	r4
 801fbf8:	3001      	adds	r0, #1
 801fbfa:	d100      	bne.n	801fbfe <_printf_float+0x23a>
 801fbfc:	e73e      	b.n	801fa7c <_printf_float+0xb8>
 801fbfe:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801fc00:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc02:	42b3      	cmp	r3, r6
 801fc04:	db02      	blt.n	801fc0c <_printf_float+0x248>
 801fc06:	682b      	ldr	r3, [r5, #0]
 801fc08:	07db      	lsls	r3, r3, #31
 801fc0a:	d50c      	bpl.n	801fc26 <_printf_float+0x262>
 801fc0c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fc0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fc10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fc12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fc16:	47a0      	blx	r4
 801fc18:	2400      	movs	r4, #0
 801fc1a:	3001      	adds	r0, #1
 801fc1c:	d100      	bne.n	801fc20 <_printf_float+0x25c>
 801fc1e:	e72d      	b.n	801fa7c <_printf_float+0xb8>
 801fc20:	1e73      	subs	r3, r6, #1
 801fc22:	42a3      	cmp	r3, r4
 801fc24:	dc0a      	bgt.n	801fc3c <_printf_float+0x278>
 801fc26:	682b      	ldr	r3, [r5, #0]
 801fc28:	079b      	lsls	r3, r3, #30
 801fc2a:	d500      	bpl.n	801fc2e <_printf_float+0x26a>
 801fc2c:	e105      	b.n	801fe3a <_printf_float+0x476>
 801fc2e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fc30:	68e8      	ldr	r0, [r5, #12]
 801fc32:	4298      	cmp	r0, r3
 801fc34:	db00      	blt.n	801fc38 <_printf_float+0x274>
 801fc36:	e723      	b.n	801fa80 <_printf_float+0xbc>
 801fc38:	0018      	movs	r0, r3
 801fc3a:	e721      	b.n	801fa80 <_printf_float+0xbc>
 801fc3c:	002a      	movs	r2, r5
 801fc3e:	2301      	movs	r3, #1
 801fc40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fc44:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fc46:	321a      	adds	r2, #26
 801fc48:	47b8      	blx	r7
 801fc4a:	3001      	adds	r0, #1
 801fc4c:	d100      	bne.n	801fc50 <_printf_float+0x28c>
 801fc4e:	e715      	b.n	801fa7c <_printf_float+0xb8>
 801fc50:	3401      	adds	r4, #1
 801fc52:	e7e5      	b.n	801fc20 <_printf_float+0x25c>
 801fc54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc56:	2b00      	cmp	r3, #0
 801fc58:	dc3a      	bgt.n	801fcd0 <_printf_float+0x30c>
 801fc5a:	2301      	movs	r3, #1
 801fc5c:	4a1b      	ldr	r2, [pc, #108]	@ (801fccc <_printf_float+0x308>)
 801fc5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fc62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fc64:	47a0      	blx	r4
 801fc66:	3001      	adds	r0, #1
 801fc68:	d100      	bne.n	801fc6c <_printf_float+0x2a8>
 801fc6a:	e707      	b.n	801fa7c <_printf_float+0xb8>
 801fc6c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801fc6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc70:	4333      	orrs	r3, r6
 801fc72:	d102      	bne.n	801fc7a <_printf_float+0x2b6>
 801fc74:	682b      	ldr	r3, [r5, #0]
 801fc76:	07db      	lsls	r3, r3, #31
 801fc78:	d5d5      	bpl.n	801fc26 <_printf_float+0x262>
 801fc7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fc7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fc7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fc80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fc82:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fc84:	47a0      	blx	r4
 801fc86:	2300      	movs	r3, #0
 801fc88:	3001      	adds	r0, #1
 801fc8a:	d100      	bne.n	801fc8e <_printf_float+0x2ca>
 801fc8c:	e6f6      	b.n	801fa7c <_printf_float+0xb8>
 801fc8e:	930c      	str	r3, [sp, #48]	@ 0x30
 801fc90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fc92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fc94:	425b      	negs	r3, r3
 801fc96:	4293      	cmp	r3, r2
 801fc98:	dc01      	bgt.n	801fc9e <_printf_float+0x2da>
 801fc9a:	0033      	movs	r3, r6
 801fc9c:	e792      	b.n	801fbc4 <_printf_float+0x200>
 801fc9e:	002a      	movs	r2, r5
 801fca0:	2301      	movs	r3, #1
 801fca2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fca4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fca6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fca8:	321a      	adds	r2, #26
 801fcaa:	47a0      	blx	r4
 801fcac:	3001      	adds	r0, #1
 801fcae:	d100      	bne.n	801fcb2 <_printf_float+0x2ee>
 801fcb0:	e6e4      	b.n	801fa7c <_printf_float+0xb8>
 801fcb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fcb4:	3301      	adds	r3, #1
 801fcb6:	e7ea      	b.n	801fc8e <_printf_float+0x2ca>
 801fcb8:	7fefffff 	.word	0x7fefffff
 801fcbc:	080263c9 	.word	0x080263c9
 801fcc0:	080263cd 	.word	0x080263cd
 801fcc4:	080263d1 	.word	0x080263d1
 801fcc8:	080263d5 	.word	0x080263d5
 801fccc:	080263d9 	.word	0x080263d9
 801fcd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fcd2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801fcd4:	930c      	str	r3, [sp, #48]	@ 0x30
 801fcd6:	429e      	cmp	r6, r3
 801fcd8:	dd00      	ble.n	801fcdc <_printf_float+0x318>
 801fcda:	001e      	movs	r6, r3
 801fcdc:	2e00      	cmp	r6, #0
 801fcde:	dc31      	bgt.n	801fd44 <_printf_float+0x380>
 801fce0:	43f3      	mvns	r3, r6
 801fce2:	2400      	movs	r4, #0
 801fce4:	17db      	asrs	r3, r3, #31
 801fce6:	4033      	ands	r3, r6
 801fce8:	930e      	str	r3, [sp, #56]	@ 0x38
 801fcea:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801fcec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fcee:	1af3      	subs	r3, r6, r3
 801fcf0:	42a3      	cmp	r3, r4
 801fcf2:	dc30      	bgt.n	801fd56 <_printf_float+0x392>
 801fcf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fcf6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fcf8:	429a      	cmp	r2, r3
 801fcfa:	dc38      	bgt.n	801fd6e <_printf_float+0x3aa>
 801fcfc:	682b      	ldr	r3, [r5, #0]
 801fcfe:	07db      	lsls	r3, r3, #31
 801fd00:	d435      	bmi.n	801fd6e <_printf_float+0x3aa>
 801fd02:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fd04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fd06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fd08:	1b9b      	subs	r3, r3, r6
 801fd0a:	1b14      	subs	r4, r2, r4
 801fd0c:	429c      	cmp	r4, r3
 801fd0e:	dd00      	ble.n	801fd12 <_printf_float+0x34e>
 801fd10:	001c      	movs	r4, r3
 801fd12:	2c00      	cmp	r4, #0
 801fd14:	dc34      	bgt.n	801fd80 <_printf_float+0x3bc>
 801fd16:	43e3      	mvns	r3, r4
 801fd18:	2600      	movs	r6, #0
 801fd1a:	17db      	asrs	r3, r3, #31
 801fd1c:	401c      	ands	r4, r3
 801fd1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801fd20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fd22:	1ad3      	subs	r3, r2, r3
 801fd24:	1b1b      	subs	r3, r3, r4
 801fd26:	42b3      	cmp	r3, r6
 801fd28:	dc00      	bgt.n	801fd2c <_printf_float+0x368>
 801fd2a:	e77c      	b.n	801fc26 <_printf_float+0x262>
 801fd2c:	002a      	movs	r2, r5
 801fd2e:	2301      	movs	r3, #1
 801fd30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd34:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fd36:	321a      	adds	r2, #26
 801fd38:	47b8      	blx	r7
 801fd3a:	3001      	adds	r0, #1
 801fd3c:	d100      	bne.n	801fd40 <_printf_float+0x37c>
 801fd3e:	e69d      	b.n	801fa7c <_printf_float+0xb8>
 801fd40:	3601      	adds	r6, #1
 801fd42:	e7ec      	b.n	801fd1e <_printf_float+0x35a>
 801fd44:	0033      	movs	r3, r6
 801fd46:	003a      	movs	r2, r7
 801fd48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd4c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fd4e:	47a0      	blx	r4
 801fd50:	3001      	adds	r0, #1
 801fd52:	d1c5      	bne.n	801fce0 <_printf_float+0x31c>
 801fd54:	e692      	b.n	801fa7c <_printf_float+0xb8>
 801fd56:	002a      	movs	r2, r5
 801fd58:	2301      	movs	r3, #1
 801fd5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd5e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fd60:	321a      	adds	r2, #26
 801fd62:	47b0      	blx	r6
 801fd64:	3001      	adds	r0, #1
 801fd66:	d100      	bne.n	801fd6a <_printf_float+0x3a6>
 801fd68:	e688      	b.n	801fa7c <_printf_float+0xb8>
 801fd6a:	3401      	adds	r4, #1
 801fd6c:	e7bd      	b.n	801fcea <_printf_float+0x326>
 801fd6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fd70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fd72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd76:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fd78:	47a0      	blx	r4
 801fd7a:	3001      	adds	r0, #1
 801fd7c:	d1c1      	bne.n	801fd02 <_printf_float+0x33e>
 801fd7e:	e67d      	b.n	801fa7c <_printf_float+0xb8>
 801fd80:	19ba      	adds	r2, r7, r6
 801fd82:	0023      	movs	r3, r4
 801fd84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fd86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fd88:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fd8a:	47b0      	blx	r6
 801fd8c:	3001      	adds	r0, #1
 801fd8e:	d1c2      	bne.n	801fd16 <_printf_float+0x352>
 801fd90:	e674      	b.n	801fa7c <_printf_float+0xb8>
 801fd92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fd94:	930c      	str	r3, [sp, #48]	@ 0x30
 801fd96:	2b01      	cmp	r3, #1
 801fd98:	dc02      	bgt.n	801fda0 <_printf_float+0x3dc>
 801fd9a:	2301      	movs	r3, #1
 801fd9c:	421a      	tst	r2, r3
 801fd9e:	d039      	beq.n	801fe14 <_printf_float+0x450>
 801fda0:	2301      	movs	r3, #1
 801fda2:	003a      	movs	r2, r7
 801fda4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fda6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fda8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fdaa:	47b0      	blx	r6
 801fdac:	3001      	adds	r0, #1
 801fdae:	d100      	bne.n	801fdb2 <_printf_float+0x3ee>
 801fdb0:	e664      	b.n	801fa7c <_printf_float+0xb8>
 801fdb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fdb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fdb6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fdb8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fdba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fdbc:	47b0      	blx	r6
 801fdbe:	3001      	adds	r0, #1
 801fdc0:	d100      	bne.n	801fdc4 <_printf_float+0x400>
 801fdc2:	e65b      	b.n	801fa7c <_printf_float+0xb8>
 801fdc4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801fdc6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801fdc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fdca:	2200      	movs	r2, #0
 801fdcc:	3b01      	subs	r3, #1
 801fdce:	930c      	str	r3, [sp, #48]	@ 0x30
 801fdd0:	2300      	movs	r3, #0
 801fdd2:	f7e0 fb6d 	bl	80004b0 <__aeabi_dcmpeq>
 801fdd6:	2800      	cmp	r0, #0
 801fdd8:	d11a      	bne.n	801fe10 <_printf_float+0x44c>
 801fdda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fddc:	1c7a      	adds	r2, r7, #1
 801fdde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fde0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fde2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fde4:	47b0      	blx	r6
 801fde6:	3001      	adds	r0, #1
 801fde8:	d10e      	bne.n	801fe08 <_printf_float+0x444>
 801fdea:	e647      	b.n	801fa7c <_printf_float+0xb8>
 801fdec:	002a      	movs	r2, r5
 801fdee:	2301      	movs	r3, #1
 801fdf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fdf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fdf4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fdf6:	321a      	adds	r2, #26
 801fdf8:	47b8      	blx	r7
 801fdfa:	3001      	adds	r0, #1
 801fdfc:	d100      	bne.n	801fe00 <_printf_float+0x43c>
 801fdfe:	e63d      	b.n	801fa7c <_printf_float+0xb8>
 801fe00:	3601      	adds	r6, #1
 801fe02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fe04:	429e      	cmp	r6, r3
 801fe06:	dbf1      	blt.n	801fdec <_printf_float+0x428>
 801fe08:	002a      	movs	r2, r5
 801fe0a:	0023      	movs	r3, r4
 801fe0c:	3250      	adds	r2, #80	@ 0x50
 801fe0e:	e6da      	b.n	801fbc6 <_printf_float+0x202>
 801fe10:	2600      	movs	r6, #0
 801fe12:	e7f6      	b.n	801fe02 <_printf_float+0x43e>
 801fe14:	003a      	movs	r2, r7
 801fe16:	e7e2      	b.n	801fdde <_printf_float+0x41a>
 801fe18:	002a      	movs	r2, r5
 801fe1a:	2301      	movs	r3, #1
 801fe1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fe1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fe20:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801fe22:	3219      	adds	r2, #25
 801fe24:	47b0      	blx	r6
 801fe26:	3001      	adds	r0, #1
 801fe28:	d100      	bne.n	801fe2c <_printf_float+0x468>
 801fe2a:	e627      	b.n	801fa7c <_printf_float+0xb8>
 801fe2c:	3401      	adds	r4, #1
 801fe2e:	68eb      	ldr	r3, [r5, #12]
 801fe30:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801fe32:	1a9b      	subs	r3, r3, r2
 801fe34:	42a3      	cmp	r3, r4
 801fe36:	dcef      	bgt.n	801fe18 <_printf_float+0x454>
 801fe38:	e6f9      	b.n	801fc2e <_printf_float+0x26a>
 801fe3a:	2400      	movs	r4, #0
 801fe3c:	e7f7      	b.n	801fe2e <_printf_float+0x46a>
 801fe3e:	46c0      	nop			@ (mov r8, r8)

0801fe40 <_printf_common>:
 801fe40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fe42:	0016      	movs	r6, r2
 801fe44:	9301      	str	r3, [sp, #4]
 801fe46:	688a      	ldr	r2, [r1, #8]
 801fe48:	690b      	ldr	r3, [r1, #16]
 801fe4a:	000c      	movs	r4, r1
 801fe4c:	9000      	str	r0, [sp, #0]
 801fe4e:	4293      	cmp	r3, r2
 801fe50:	da00      	bge.n	801fe54 <_printf_common+0x14>
 801fe52:	0013      	movs	r3, r2
 801fe54:	0022      	movs	r2, r4
 801fe56:	6033      	str	r3, [r6, #0]
 801fe58:	3243      	adds	r2, #67	@ 0x43
 801fe5a:	7812      	ldrb	r2, [r2, #0]
 801fe5c:	2a00      	cmp	r2, #0
 801fe5e:	d001      	beq.n	801fe64 <_printf_common+0x24>
 801fe60:	3301      	adds	r3, #1
 801fe62:	6033      	str	r3, [r6, #0]
 801fe64:	6823      	ldr	r3, [r4, #0]
 801fe66:	069b      	lsls	r3, r3, #26
 801fe68:	d502      	bpl.n	801fe70 <_printf_common+0x30>
 801fe6a:	6833      	ldr	r3, [r6, #0]
 801fe6c:	3302      	adds	r3, #2
 801fe6e:	6033      	str	r3, [r6, #0]
 801fe70:	6822      	ldr	r2, [r4, #0]
 801fe72:	2306      	movs	r3, #6
 801fe74:	0015      	movs	r5, r2
 801fe76:	401d      	ands	r5, r3
 801fe78:	421a      	tst	r2, r3
 801fe7a:	d027      	beq.n	801fecc <_printf_common+0x8c>
 801fe7c:	0023      	movs	r3, r4
 801fe7e:	3343      	adds	r3, #67	@ 0x43
 801fe80:	781b      	ldrb	r3, [r3, #0]
 801fe82:	1e5a      	subs	r2, r3, #1
 801fe84:	4193      	sbcs	r3, r2
 801fe86:	6822      	ldr	r2, [r4, #0]
 801fe88:	0692      	lsls	r2, r2, #26
 801fe8a:	d430      	bmi.n	801feee <_printf_common+0xae>
 801fe8c:	0022      	movs	r2, r4
 801fe8e:	9901      	ldr	r1, [sp, #4]
 801fe90:	9800      	ldr	r0, [sp, #0]
 801fe92:	9d08      	ldr	r5, [sp, #32]
 801fe94:	3243      	adds	r2, #67	@ 0x43
 801fe96:	47a8      	blx	r5
 801fe98:	3001      	adds	r0, #1
 801fe9a:	d025      	beq.n	801fee8 <_printf_common+0xa8>
 801fe9c:	2206      	movs	r2, #6
 801fe9e:	6823      	ldr	r3, [r4, #0]
 801fea0:	2500      	movs	r5, #0
 801fea2:	4013      	ands	r3, r2
 801fea4:	2b04      	cmp	r3, #4
 801fea6:	d105      	bne.n	801feb4 <_printf_common+0x74>
 801fea8:	6833      	ldr	r3, [r6, #0]
 801feaa:	68e5      	ldr	r5, [r4, #12]
 801feac:	1aed      	subs	r5, r5, r3
 801feae:	43eb      	mvns	r3, r5
 801feb0:	17db      	asrs	r3, r3, #31
 801feb2:	401d      	ands	r5, r3
 801feb4:	68a3      	ldr	r3, [r4, #8]
 801feb6:	6922      	ldr	r2, [r4, #16]
 801feb8:	4293      	cmp	r3, r2
 801feba:	dd01      	ble.n	801fec0 <_printf_common+0x80>
 801febc:	1a9b      	subs	r3, r3, r2
 801febe:	18ed      	adds	r5, r5, r3
 801fec0:	2600      	movs	r6, #0
 801fec2:	42b5      	cmp	r5, r6
 801fec4:	d120      	bne.n	801ff08 <_printf_common+0xc8>
 801fec6:	2000      	movs	r0, #0
 801fec8:	e010      	b.n	801feec <_printf_common+0xac>
 801feca:	3501      	adds	r5, #1
 801fecc:	68e3      	ldr	r3, [r4, #12]
 801fece:	6832      	ldr	r2, [r6, #0]
 801fed0:	1a9b      	subs	r3, r3, r2
 801fed2:	42ab      	cmp	r3, r5
 801fed4:	ddd2      	ble.n	801fe7c <_printf_common+0x3c>
 801fed6:	0022      	movs	r2, r4
 801fed8:	2301      	movs	r3, #1
 801feda:	9901      	ldr	r1, [sp, #4]
 801fedc:	9800      	ldr	r0, [sp, #0]
 801fede:	9f08      	ldr	r7, [sp, #32]
 801fee0:	3219      	adds	r2, #25
 801fee2:	47b8      	blx	r7
 801fee4:	3001      	adds	r0, #1
 801fee6:	d1f0      	bne.n	801feca <_printf_common+0x8a>
 801fee8:	2001      	movs	r0, #1
 801feea:	4240      	negs	r0, r0
 801feec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801feee:	2030      	movs	r0, #48	@ 0x30
 801fef0:	18e1      	adds	r1, r4, r3
 801fef2:	3143      	adds	r1, #67	@ 0x43
 801fef4:	7008      	strb	r0, [r1, #0]
 801fef6:	0021      	movs	r1, r4
 801fef8:	1c5a      	adds	r2, r3, #1
 801fefa:	3145      	adds	r1, #69	@ 0x45
 801fefc:	7809      	ldrb	r1, [r1, #0]
 801fefe:	18a2      	adds	r2, r4, r2
 801ff00:	3243      	adds	r2, #67	@ 0x43
 801ff02:	3302      	adds	r3, #2
 801ff04:	7011      	strb	r1, [r2, #0]
 801ff06:	e7c1      	b.n	801fe8c <_printf_common+0x4c>
 801ff08:	0022      	movs	r2, r4
 801ff0a:	2301      	movs	r3, #1
 801ff0c:	9901      	ldr	r1, [sp, #4]
 801ff0e:	9800      	ldr	r0, [sp, #0]
 801ff10:	9f08      	ldr	r7, [sp, #32]
 801ff12:	321a      	adds	r2, #26
 801ff14:	47b8      	blx	r7
 801ff16:	3001      	adds	r0, #1
 801ff18:	d0e6      	beq.n	801fee8 <_printf_common+0xa8>
 801ff1a:	3601      	adds	r6, #1
 801ff1c:	e7d1      	b.n	801fec2 <_printf_common+0x82>
	...

0801ff20 <_printf_i>:
 801ff20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff22:	b08b      	sub	sp, #44	@ 0x2c
 801ff24:	9206      	str	r2, [sp, #24]
 801ff26:	000a      	movs	r2, r1
 801ff28:	3243      	adds	r2, #67	@ 0x43
 801ff2a:	9307      	str	r3, [sp, #28]
 801ff2c:	9005      	str	r0, [sp, #20]
 801ff2e:	9203      	str	r2, [sp, #12]
 801ff30:	7e0a      	ldrb	r2, [r1, #24]
 801ff32:	000c      	movs	r4, r1
 801ff34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ff36:	2a78      	cmp	r2, #120	@ 0x78
 801ff38:	d809      	bhi.n	801ff4e <_printf_i+0x2e>
 801ff3a:	2a62      	cmp	r2, #98	@ 0x62
 801ff3c:	d80b      	bhi.n	801ff56 <_printf_i+0x36>
 801ff3e:	2a00      	cmp	r2, #0
 801ff40:	d100      	bne.n	801ff44 <_printf_i+0x24>
 801ff42:	e0bc      	b.n	80200be <_printf_i+0x19e>
 801ff44:	497b      	ldr	r1, [pc, #492]	@ (8020134 <_printf_i+0x214>)
 801ff46:	9104      	str	r1, [sp, #16]
 801ff48:	2a58      	cmp	r2, #88	@ 0x58
 801ff4a:	d100      	bne.n	801ff4e <_printf_i+0x2e>
 801ff4c:	e090      	b.n	8020070 <_printf_i+0x150>
 801ff4e:	0025      	movs	r5, r4
 801ff50:	3542      	adds	r5, #66	@ 0x42
 801ff52:	702a      	strb	r2, [r5, #0]
 801ff54:	e022      	b.n	801ff9c <_printf_i+0x7c>
 801ff56:	0010      	movs	r0, r2
 801ff58:	3863      	subs	r0, #99	@ 0x63
 801ff5a:	2815      	cmp	r0, #21
 801ff5c:	d8f7      	bhi.n	801ff4e <_printf_i+0x2e>
 801ff5e:	f7e0 f917 	bl	8000190 <__gnu_thumb1_case_shi>
 801ff62:	0016      	.short	0x0016
 801ff64:	fff6001f 	.word	0xfff6001f
 801ff68:	fff6fff6 	.word	0xfff6fff6
 801ff6c:	001ffff6 	.word	0x001ffff6
 801ff70:	fff6fff6 	.word	0xfff6fff6
 801ff74:	fff6fff6 	.word	0xfff6fff6
 801ff78:	003600a1 	.word	0x003600a1
 801ff7c:	fff60080 	.word	0xfff60080
 801ff80:	00b2fff6 	.word	0x00b2fff6
 801ff84:	0036fff6 	.word	0x0036fff6
 801ff88:	fff6fff6 	.word	0xfff6fff6
 801ff8c:	0084      	.short	0x0084
 801ff8e:	0025      	movs	r5, r4
 801ff90:	681a      	ldr	r2, [r3, #0]
 801ff92:	3542      	adds	r5, #66	@ 0x42
 801ff94:	1d11      	adds	r1, r2, #4
 801ff96:	6019      	str	r1, [r3, #0]
 801ff98:	6813      	ldr	r3, [r2, #0]
 801ff9a:	702b      	strb	r3, [r5, #0]
 801ff9c:	2301      	movs	r3, #1
 801ff9e:	e0a0      	b.n	80200e2 <_printf_i+0x1c2>
 801ffa0:	6818      	ldr	r0, [r3, #0]
 801ffa2:	6809      	ldr	r1, [r1, #0]
 801ffa4:	1d02      	adds	r2, r0, #4
 801ffa6:	060d      	lsls	r5, r1, #24
 801ffa8:	d50b      	bpl.n	801ffc2 <_printf_i+0xa2>
 801ffaa:	6806      	ldr	r6, [r0, #0]
 801ffac:	601a      	str	r2, [r3, #0]
 801ffae:	2e00      	cmp	r6, #0
 801ffb0:	da03      	bge.n	801ffba <_printf_i+0x9a>
 801ffb2:	232d      	movs	r3, #45	@ 0x2d
 801ffb4:	9a03      	ldr	r2, [sp, #12]
 801ffb6:	4276      	negs	r6, r6
 801ffb8:	7013      	strb	r3, [r2, #0]
 801ffba:	4b5e      	ldr	r3, [pc, #376]	@ (8020134 <_printf_i+0x214>)
 801ffbc:	270a      	movs	r7, #10
 801ffbe:	9304      	str	r3, [sp, #16]
 801ffc0:	e018      	b.n	801fff4 <_printf_i+0xd4>
 801ffc2:	6806      	ldr	r6, [r0, #0]
 801ffc4:	601a      	str	r2, [r3, #0]
 801ffc6:	0649      	lsls	r1, r1, #25
 801ffc8:	d5f1      	bpl.n	801ffae <_printf_i+0x8e>
 801ffca:	b236      	sxth	r6, r6
 801ffcc:	e7ef      	b.n	801ffae <_printf_i+0x8e>
 801ffce:	6808      	ldr	r0, [r1, #0]
 801ffd0:	6819      	ldr	r1, [r3, #0]
 801ffd2:	c940      	ldmia	r1!, {r6}
 801ffd4:	0605      	lsls	r5, r0, #24
 801ffd6:	d402      	bmi.n	801ffde <_printf_i+0xbe>
 801ffd8:	0640      	lsls	r0, r0, #25
 801ffda:	d500      	bpl.n	801ffde <_printf_i+0xbe>
 801ffdc:	b2b6      	uxth	r6, r6
 801ffde:	6019      	str	r1, [r3, #0]
 801ffe0:	4b54      	ldr	r3, [pc, #336]	@ (8020134 <_printf_i+0x214>)
 801ffe2:	270a      	movs	r7, #10
 801ffe4:	9304      	str	r3, [sp, #16]
 801ffe6:	2a6f      	cmp	r2, #111	@ 0x6f
 801ffe8:	d100      	bne.n	801ffec <_printf_i+0xcc>
 801ffea:	3f02      	subs	r7, #2
 801ffec:	0023      	movs	r3, r4
 801ffee:	2200      	movs	r2, #0
 801fff0:	3343      	adds	r3, #67	@ 0x43
 801fff2:	701a      	strb	r2, [r3, #0]
 801fff4:	6863      	ldr	r3, [r4, #4]
 801fff6:	60a3      	str	r3, [r4, #8]
 801fff8:	2b00      	cmp	r3, #0
 801fffa:	db03      	blt.n	8020004 <_printf_i+0xe4>
 801fffc:	2104      	movs	r1, #4
 801fffe:	6822      	ldr	r2, [r4, #0]
 8020000:	438a      	bics	r2, r1
 8020002:	6022      	str	r2, [r4, #0]
 8020004:	2e00      	cmp	r6, #0
 8020006:	d102      	bne.n	802000e <_printf_i+0xee>
 8020008:	9d03      	ldr	r5, [sp, #12]
 802000a:	2b00      	cmp	r3, #0
 802000c:	d00c      	beq.n	8020028 <_printf_i+0x108>
 802000e:	9d03      	ldr	r5, [sp, #12]
 8020010:	0030      	movs	r0, r6
 8020012:	0039      	movs	r1, r7
 8020014:	f7e0 f94c 	bl	80002b0 <__aeabi_uidivmod>
 8020018:	9b04      	ldr	r3, [sp, #16]
 802001a:	3d01      	subs	r5, #1
 802001c:	5c5b      	ldrb	r3, [r3, r1]
 802001e:	702b      	strb	r3, [r5, #0]
 8020020:	0033      	movs	r3, r6
 8020022:	0006      	movs	r6, r0
 8020024:	429f      	cmp	r7, r3
 8020026:	d9f3      	bls.n	8020010 <_printf_i+0xf0>
 8020028:	2f08      	cmp	r7, #8
 802002a:	d109      	bne.n	8020040 <_printf_i+0x120>
 802002c:	6823      	ldr	r3, [r4, #0]
 802002e:	07db      	lsls	r3, r3, #31
 8020030:	d506      	bpl.n	8020040 <_printf_i+0x120>
 8020032:	6862      	ldr	r2, [r4, #4]
 8020034:	6923      	ldr	r3, [r4, #16]
 8020036:	429a      	cmp	r2, r3
 8020038:	dc02      	bgt.n	8020040 <_printf_i+0x120>
 802003a:	2330      	movs	r3, #48	@ 0x30
 802003c:	3d01      	subs	r5, #1
 802003e:	702b      	strb	r3, [r5, #0]
 8020040:	9b03      	ldr	r3, [sp, #12]
 8020042:	1b5b      	subs	r3, r3, r5
 8020044:	6123      	str	r3, [r4, #16]
 8020046:	9b07      	ldr	r3, [sp, #28]
 8020048:	0021      	movs	r1, r4
 802004a:	9300      	str	r3, [sp, #0]
 802004c:	9805      	ldr	r0, [sp, #20]
 802004e:	9b06      	ldr	r3, [sp, #24]
 8020050:	aa09      	add	r2, sp, #36	@ 0x24
 8020052:	f7ff fef5 	bl	801fe40 <_printf_common>
 8020056:	3001      	adds	r0, #1
 8020058:	d148      	bne.n	80200ec <_printf_i+0x1cc>
 802005a:	2001      	movs	r0, #1
 802005c:	4240      	negs	r0, r0
 802005e:	b00b      	add	sp, #44	@ 0x2c
 8020060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020062:	2220      	movs	r2, #32
 8020064:	6809      	ldr	r1, [r1, #0]
 8020066:	430a      	orrs	r2, r1
 8020068:	6022      	str	r2, [r4, #0]
 802006a:	2278      	movs	r2, #120	@ 0x78
 802006c:	4932      	ldr	r1, [pc, #200]	@ (8020138 <_printf_i+0x218>)
 802006e:	9104      	str	r1, [sp, #16]
 8020070:	0021      	movs	r1, r4
 8020072:	3145      	adds	r1, #69	@ 0x45
 8020074:	700a      	strb	r2, [r1, #0]
 8020076:	6819      	ldr	r1, [r3, #0]
 8020078:	6822      	ldr	r2, [r4, #0]
 802007a:	c940      	ldmia	r1!, {r6}
 802007c:	0610      	lsls	r0, r2, #24
 802007e:	d402      	bmi.n	8020086 <_printf_i+0x166>
 8020080:	0650      	lsls	r0, r2, #25
 8020082:	d500      	bpl.n	8020086 <_printf_i+0x166>
 8020084:	b2b6      	uxth	r6, r6
 8020086:	6019      	str	r1, [r3, #0]
 8020088:	07d3      	lsls	r3, r2, #31
 802008a:	d502      	bpl.n	8020092 <_printf_i+0x172>
 802008c:	2320      	movs	r3, #32
 802008e:	4313      	orrs	r3, r2
 8020090:	6023      	str	r3, [r4, #0]
 8020092:	2e00      	cmp	r6, #0
 8020094:	d001      	beq.n	802009a <_printf_i+0x17a>
 8020096:	2710      	movs	r7, #16
 8020098:	e7a8      	b.n	801ffec <_printf_i+0xcc>
 802009a:	2220      	movs	r2, #32
 802009c:	6823      	ldr	r3, [r4, #0]
 802009e:	4393      	bics	r3, r2
 80200a0:	6023      	str	r3, [r4, #0]
 80200a2:	e7f8      	b.n	8020096 <_printf_i+0x176>
 80200a4:	681a      	ldr	r2, [r3, #0]
 80200a6:	680d      	ldr	r5, [r1, #0]
 80200a8:	1d10      	adds	r0, r2, #4
 80200aa:	6949      	ldr	r1, [r1, #20]
 80200ac:	6018      	str	r0, [r3, #0]
 80200ae:	6813      	ldr	r3, [r2, #0]
 80200b0:	062e      	lsls	r6, r5, #24
 80200b2:	d501      	bpl.n	80200b8 <_printf_i+0x198>
 80200b4:	6019      	str	r1, [r3, #0]
 80200b6:	e002      	b.n	80200be <_printf_i+0x19e>
 80200b8:	066d      	lsls	r5, r5, #25
 80200ba:	d5fb      	bpl.n	80200b4 <_printf_i+0x194>
 80200bc:	8019      	strh	r1, [r3, #0]
 80200be:	2300      	movs	r3, #0
 80200c0:	9d03      	ldr	r5, [sp, #12]
 80200c2:	6123      	str	r3, [r4, #16]
 80200c4:	e7bf      	b.n	8020046 <_printf_i+0x126>
 80200c6:	681a      	ldr	r2, [r3, #0]
 80200c8:	1d11      	adds	r1, r2, #4
 80200ca:	6019      	str	r1, [r3, #0]
 80200cc:	6815      	ldr	r5, [r2, #0]
 80200ce:	2100      	movs	r1, #0
 80200d0:	0028      	movs	r0, r5
 80200d2:	6862      	ldr	r2, [r4, #4]
 80200d4:	f000 fb7b 	bl	80207ce <memchr>
 80200d8:	2800      	cmp	r0, #0
 80200da:	d001      	beq.n	80200e0 <_printf_i+0x1c0>
 80200dc:	1b40      	subs	r0, r0, r5
 80200de:	6060      	str	r0, [r4, #4]
 80200e0:	6863      	ldr	r3, [r4, #4]
 80200e2:	6123      	str	r3, [r4, #16]
 80200e4:	2300      	movs	r3, #0
 80200e6:	9a03      	ldr	r2, [sp, #12]
 80200e8:	7013      	strb	r3, [r2, #0]
 80200ea:	e7ac      	b.n	8020046 <_printf_i+0x126>
 80200ec:	002a      	movs	r2, r5
 80200ee:	6923      	ldr	r3, [r4, #16]
 80200f0:	9906      	ldr	r1, [sp, #24]
 80200f2:	9805      	ldr	r0, [sp, #20]
 80200f4:	9d07      	ldr	r5, [sp, #28]
 80200f6:	47a8      	blx	r5
 80200f8:	3001      	adds	r0, #1
 80200fa:	d0ae      	beq.n	802005a <_printf_i+0x13a>
 80200fc:	6823      	ldr	r3, [r4, #0]
 80200fe:	079b      	lsls	r3, r3, #30
 8020100:	d415      	bmi.n	802012e <_printf_i+0x20e>
 8020102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020104:	68e0      	ldr	r0, [r4, #12]
 8020106:	4298      	cmp	r0, r3
 8020108:	daa9      	bge.n	802005e <_printf_i+0x13e>
 802010a:	0018      	movs	r0, r3
 802010c:	e7a7      	b.n	802005e <_printf_i+0x13e>
 802010e:	0022      	movs	r2, r4
 8020110:	2301      	movs	r3, #1
 8020112:	9906      	ldr	r1, [sp, #24]
 8020114:	9805      	ldr	r0, [sp, #20]
 8020116:	9e07      	ldr	r6, [sp, #28]
 8020118:	3219      	adds	r2, #25
 802011a:	47b0      	blx	r6
 802011c:	3001      	adds	r0, #1
 802011e:	d09c      	beq.n	802005a <_printf_i+0x13a>
 8020120:	3501      	adds	r5, #1
 8020122:	68e3      	ldr	r3, [r4, #12]
 8020124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020126:	1a9b      	subs	r3, r3, r2
 8020128:	42ab      	cmp	r3, r5
 802012a:	dcf0      	bgt.n	802010e <_printf_i+0x1ee>
 802012c:	e7e9      	b.n	8020102 <_printf_i+0x1e2>
 802012e:	2500      	movs	r5, #0
 8020130:	e7f7      	b.n	8020122 <_printf_i+0x202>
 8020132:	46c0      	nop			@ (mov r8, r8)
 8020134:	080263db 	.word	0x080263db
 8020138:	080263ec 	.word	0x080263ec

0802013c <std>:
 802013c:	2300      	movs	r3, #0
 802013e:	b510      	push	{r4, lr}
 8020140:	0004      	movs	r4, r0
 8020142:	6003      	str	r3, [r0, #0]
 8020144:	6043      	str	r3, [r0, #4]
 8020146:	6083      	str	r3, [r0, #8]
 8020148:	8181      	strh	r1, [r0, #12]
 802014a:	6643      	str	r3, [r0, #100]	@ 0x64
 802014c:	81c2      	strh	r2, [r0, #14]
 802014e:	6103      	str	r3, [r0, #16]
 8020150:	6143      	str	r3, [r0, #20]
 8020152:	6183      	str	r3, [r0, #24]
 8020154:	0019      	movs	r1, r3
 8020156:	2208      	movs	r2, #8
 8020158:	305c      	adds	r0, #92	@ 0x5c
 802015a:	f000 fa67 	bl	802062c <memset>
 802015e:	4b0b      	ldr	r3, [pc, #44]	@ (802018c <std+0x50>)
 8020160:	6224      	str	r4, [r4, #32]
 8020162:	6263      	str	r3, [r4, #36]	@ 0x24
 8020164:	4b0a      	ldr	r3, [pc, #40]	@ (8020190 <std+0x54>)
 8020166:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020168:	4b0a      	ldr	r3, [pc, #40]	@ (8020194 <std+0x58>)
 802016a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802016c:	4b0a      	ldr	r3, [pc, #40]	@ (8020198 <std+0x5c>)
 802016e:	6323      	str	r3, [r4, #48]	@ 0x30
 8020170:	4b0a      	ldr	r3, [pc, #40]	@ (802019c <std+0x60>)
 8020172:	429c      	cmp	r4, r3
 8020174:	d005      	beq.n	8020182 <std+0x46>
 8020176:	4b0a      	ldr	r3, [pc, #40]	@ (80201a0 <std+0x64>)
 8020178:	429c      	cmp	r4, r3
 802017a:	d002      	beq.n	8020182 <std+0x46>
 802017c:	4b09      	ldr	r3, [pc, #36]	@ (80201a4 <std+0x68>)
 802017e:	429c      	cmp	r4, r3
 8020180:	d103      	bne.n	802018a <std+0x4e>
 8020182:	0020      	movs	r0, r4
 8020184:	3058      	adds	r0, #88	@ 0x58
 8020186:	f000 fb1f 	bl	80207c8 <__retarget_lock_init_recursive>
 802018a:	bd10      	pop	{r4, pc}
 802018c:	080203e5 	.word	0x080203e5
 8020190:	0802040d 	.word	0x0802040d
 8020194:	08020445 	.word	0x08020445
 8020198:	08020471 	.word	0x08020471
 802019c:	2000328c 	.word	0x2000328c
 80201a0:	200032f4 	.word	0x200032f4
 80201a4:	2000335c 	.word	0x2000335c

080201a8 <stdio_exit_handler>:
 80201a8:	b510      	push	{r4, lr}
 80201aa:	4a03      	ldr	r2, [pc, #12]	@ (80201b8 <stdio_exit_handler+0x10>)
 80201ac:	4903      	ldr	r1, [pc, #12]	@ (80201bc <stdio_exit_handler+0x14>)
 80201ae:	4804      	ldr	r0, [pc, #16]	@ (80201c0 <stdio_exit_handler+0x18>)
 80201b0:	f000 f86c 	bl	802028c <_fwalk_sglue>
 80201b4:	bd10      	pop	{r4, pc}
 80201b6:	46c0      	nop			@ (mov r8, r8)
 80201b8:	20000258 	.word	0x20000258
 80201bc:	08022ded 	.word	0x08022ded
 80201c0:	200003d4 	.word	0x200003d4

080201c4 <cleanup_stdio>:
 80201c4:	6841      	ldr	r1, [r0, #4]
 80201c6:	4b0b      	ldr	r3, [pc, #44]	@ (80201f4 <cleanup_stdio+0x30>)
 80201c8:	b510      	push	{r4, lr}
 80201ca:	0004      	movs	r4, r0
 80201cc:	4299      	cmp	r1, r3
 80201ce:	d001      	beq.n	80201d4 <cleanup_stdio+0x10>
 80201d0:	f002 fe0c 	bl	8022dec <_fflush_r>
 80201d4:	68a1      	ldr	r1, [r4, #8]
 80201d6:	4b08      	ldr	r3, [pc, #32]	@ (80201f8 <cleanup_stdio+0x34>)
 80201d8:	4299      	cmp	r1, r3
 80201da:	d002      	beq.n	80201e2 <cleanup_stdio+0x1e>
 80201dc:	0020      	movs	r0, r4
 80201de:	f002 fe05 	bl	8022dec <_fflush_r>
 80201e2:	68e1      	ldr	r1, [r4, #12]
 80201e4:	4b05      	ldr	r3, [pc, #20]	@ (80201fc <cleanup_stdio+0x38>)
 80201e6:	4299      	cmp	r1, r3
 80201e8:	d002      	beq.n	80201f0 <cleanup_stdio+0x2c>
 80201ea:	0020      	movs	r0, r4
 80201ec:	f002 fdfe 	bl	8022dec <_fflush_r>
 80201f0:	bd10      	pop	{r4, pc}
 80201f2:	46c0      	nop			@ (mov r8, r8)
 80201f4:	2000328c 	.word	0x2000328c
 80201f8:	200032f4 	.word	0x200032f4
 80201fc:	2000335c 	.word	0x2000335c

08020200 <global_stdio_init.part.0>:
 8020200:	b510      	push	{r4, lr}
 8020202:	4b09      	ldr	r3, [pc, #36]	@ (8020228 <global_stdio_init.part.0+0x28>)
 8020204:	4a09      	ldr	r2, [pc, #36]	@ (802022c <global_stdio_init.part.0+0x2c>)
 8020206:	2104      	movs	r1, #4
 8020208:	601a      	str	r2, [r3, #0]
 802020a:	4809      	ldr	r0, [pc, #36]	@ (8020230 <global_stdio_init.part.0+0x30>)
 802020c:	2200      	movs	r2, #0
 802020e:	f7ff ff95 	bl	802013c <std>
 8020212:	2201      	movs	r2, #1
 8020214:	2109      	movs	r1, #9
 8020216:	4807      	ldr	r0, [pc, #28]	@ (8020234 <global_stdio_init.part.0+0x34>)
 8020218:	f7ff ff90 	bl	802013c <std>
 802021c:	2202      	movs	r2, #2
 802021e:	2112      	movs	r1, #18
 8020220:	4805      	ldr	r0, [pc, #20]	@ (8020238 <global_stdio_init.part.0+0x38>)
 8020222:	f7ff ff8b 	bl	802013c <std>
 8020226:	bd10      	pop	{r4, pc}
 8020228:	200033c4 	.word	0x200033c4
 802022c:	080201a9 	.word	0x080201a9
 8020230:	2000328c 	.word	0x2000328c
 8020234:	200032f4 	.word	0x200032f4
 8020238:	2000335c 	.word	0x2000335c

0802023c <__sfp_lock_acquire>:
 802023c:	b510      	push	{r4, lr}
 802023e:	4802      	ldr	r0, [pc, #8]	@ (8020248 <__sfp_lock_acquire+0xc>)
 8020240:	f000 fac3 	bl	80207ca <__retarget_lock_acquire_recursive>
 8020244:	bd10      	pop	{r4, pc}
 8020246:	46c0      	nop			@ (mov r8, r8)
 8020248:	200033cd 	.word	0x200033cd

0802024c <__sfp_lock_release>:
 802024c:	b510      	push	{r4, lr}
 802024e:	4802      	ldr	r0, [pc, #8]	@ (8020258 <__sfp_lock_release+0xc>)
 8020250:	f000 fabc 	bl	80207cc <__retarget_lock_release_recursive>
 8020254:	bd10      	pop	{r4, pc}
 8020256:	46c0      	nop			@ (mov r8, r8)
 8020258:	200033cd 	.word	0x200033cd

0802025c <__sinit>:
 802025c:	b510      	push	{r4, lr}
 802025e:	0004      	movs	r4, r0
 8020260:	f7ff ffec 	bl	802023c <__sfp_lock_acquire>
 8020264:	6a23      	ldr	r3, [r4, #32]
 8020266:	2b00      	cmp	r3, #0
 8020268:	d002      	beq.n	8020270 <__sinit+0x14>
 802026a:	f7ff ffef 	bl	802024c <__sfp_lock_release>
 802026e:	bd10      	pop	{r4, pc}
 8020270:	4b04      	ldr	r3, [pc, #16]	@ (8020284 <__sinit+0x28>)
 8020272:	6223      	str	r3, [r4, #32]
 8020274:	4b04      	ldr	r3, [pc, #16]	@ (8020288 <__sinit+0x2c>)
 8020276:	681b      	ldr	r3, [r3, #0]
 8020278:	2b00      	cmp	r3, #0
 802027a:	d1f6      	bne.n	802026a <__sinit+0xe>
 802027c:	f7ff ffc0 	bl	8020200 <global_stdio_init.part.0>
 8020280:	e7f3      	b.n	802026a <__sinit+0xe>
 8020282:	46c0      	nop			@ (mov r8, r8)
 8020284:	080201c5 	.word	0x080201c5
 8020288:	200033c4 	.word	0x200033c4

0802028c <_fwalk_sglue>:
 802028c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802028e:	0014      	movs	r4, r2
 8020290:	2600      	movs	r6, #0
 8020292:	9000      	str	r0, [sp, #0]
 8020294:	9101      	str	r1, [sp, #4]
 8020296:	68a5      	ldr	r5, [r4, #8]
 8020298:	6867      	ldr	r7, [r4, #4]
 802029a:	3f01      	subs	r7, #1
 802029c:	d504      	bpl.n	80202a8 <_fwalk_sglue+0x1c>
 802029e:	6824      	ldr	r4, [r4, #0]
 80202a0:	2c00      	cmp	r4, #0
 80202a2:	d1f8      	bne.n	8020296 <_fwalk_sglue+0xa>
 80202a4:	0030      	movs	r0, r6
 80202a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80202a8:	89ab      	ldrh	r3, [r5, #12]
 80202aa:	2b01      	cmp	r3, #1
 80202ac:	d908      	bls.n	80202c0 <_fwalk_sglue+0x34>
 80202ae:	220e      	movs	r2, #14
 80202b0:	5eab      	ldrsh	r3, [r5, r2]
 80202b2:	3301      	adds	r3, #1
 80202b4:	d004      	beq.n	80202c0 <_fwalk_sglue+0x34>
 80202b6:	0029      	movs	r1, r5
 80202b8:	9800      	ldr	r0, [sp, #0]
 80202ba:	9b01      	ldr	r3, [sp, #4]
 80202bc:	4798      	blx	r3
 80202be:	4306      	orrs	r6, r0
 80202c0:	3568      	adds	r5, #104	@ 0x68
 80202c2:	e7ea      	b.n	802029a <_fwalk_sglue+0xe>

080202c4 <iprintf>:
 80202c4:	b40f      	push	{r0, r1, r2, r3}
 80202c6:	b507      	push	{r0, r1, r2, lr}
 80202c8:	4905      	ldr	r1, [pc, #20]	@ (80202e0 <iprintf+0x1c>)
 80202ca:	ab04      	add	r3, sp, #16
 80202cc:	6808      	ldr	r0, [r1, #0]
 80202ce:	cb04      	ldmia	r3!, {r2}
 80202d0:	6881      	ldr	r1, [r0, #8]
 80202d2:	9301      	str	r3, [sp, #4]
 80202d4:	f002 fbe8 	bl	8022aa8 <_vfiprintf_r>
 80202d8:	b003      	add	sp, #12
 80202da:	bc08      	pop	{r3}
 80202dc:	b004      	add	sp, #16
 80202de:	4718      	bx	r3
 80202e0:	200003d0 	.word	0x200003d0

080202e4 <_puts_r>:
 80202e4:	6a03      	ldr	r3, [r0, #32]
 80202e6:	b570      	push	{r4, r5, r6, lr}
 80202e8:	0005      	movs	r5, r0
 80202ea:	000e      	movs	r6, r1
 80202ec:	6884      	ldr	r4, [r0, #8]
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	d101      	bne.n	80202f6 <_puts_r+0x12>
 80202f2:	f7ff ffb3 	bl	802025c <__sinit>
 80202f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80202f8:	07db      	lsls	r3, r3, #31
 80202fa:	d405      	bmi.n	8020308 <_puts_r+0x24>
 80202fc:	89a3      	ldrh	r3, [r4, #12]
 80202fe:	059b      	lsls	r3, r3, #22
 8020300:	d402      	bmi.n	8020308 <_puts_r+0x24>
 8020302:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020304:	f000 fa61 	bl	80207ca <__retarget_lock_acquire_recursive>
 8020308:	89a3      	ldrh	r3, [r4, #12]
 802030a:	071b      	lsls	r3, r3, #28
 802030c:	d502      	bpl.n	8020314 <_puts_r+0x30>
 802030e:	6923      	ldr	r3, [r4, #16]
 8020310:	2b00      	cmp	r3, #0
 8020312:	d11f      	bne.n	8020354 <_puts_r+0x70>
 8020314:	0021      	movs	r1, r4
 8020316:	0028      	movs	r0, r5
 8020318:	f000 f92a 	bl	8020570 <__swsetup_r>
 802031c:	2800      	cmp	r0, #0
 802031e:	d019      	beq.n	8020354 <_puts_r+0x70>
 8020320:	2501      	movs	r5, #1
 8020322:	426d      	negs	r5, r5
 8020324:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020326:	07db      	lsls	r3, r3, #31
 8020328:	d405      	bmi.n	8020336 <_puts_r+0x52>
 802032a:	89a3      	ldrh	r3, [r4, #12]
 802032c:	059b      	lsls	r3, r3, #22
 802032e:	d402      	bmi.n	8020336 <_puts_r+0x52>
 8020330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020332:	f000 fa4b 	bl	80207cc <__retarget_lock_release_recursive>
 8020336:	0028      	movs	r0, r5
 8020338:	bd70      	pop	{r4, r5, r6, pc}
 802033a:	3601      	adds	r6, #1
 802033c:	60a3      	str	r3, [r4, #8]
 802033e:	2b00      	cmp	r3, #0
 8020340:	da04      	bge.n	802034c <_puts_r+0x68>
 8020342:	69a2      	ldr	r2, [r4, #24]
 8020344:	429a      	cmp	r2, r3
 8020346:	dc16      	bgt.n	8020376 <_puts_r+0x92>
 8020348:	290a      	cmp	r1, #10
 802034a:	d014      	beq.n	8020376 <_puts_r+0x92>
 802034c:	6823      	ldr	r3, [r4, #0]
 802034e:	1c5a      	adds	r2, r3, #1
 8020350:	6022      	str	r2, [r4, #0]
 8020352:	7019      	strb	r1, [r3, #0]
 8020354:	68a3      	ldr	r3, [r4, #8]
 8020356:	7831      	ldrb	r1, [r6, #0]
 8020358:	3b01      	subs	r3, #1
 802035a:	2900      	cmp	r1, #0
 802035c:	d1ed      	bne.n	802033a <_puts_r+0x56>
 802035e:	60a3      	str	r3, [r4, #8]
 8020360:	2b00      	cmp	r3, #0
 8020362:	da0f      	bge.n	8020384 <_puts_r+0xa0>
 8020364:	0022      	movs	r2, r4
 8020366:	0028      	movs	r0, r5
 8020368:	310a      	adds	r1, #10
 802036a:	f000 f8bf 	bl	80204ec <__swbuf_r>
 802036e:	3001      	adds	r0, #1
 8020370:	d0d6      	beq.n	8020320 <_puts_r+0x3c>
 8020372:	250a      	movs	r5, #10
 8020374:	e7d6      	b.n	8020324 <_puts_r+0x40>
 8020376:	0022      	movs	r2, r4
 8020378:	0028      	movs	r0, r5
 802037a:	f000 f8b7 	bl	80204ec <__swbuf_r>
 802037e:	3001      	adds	r0, #1
 8020380:	d1e8      	bne.n	8020354 <_puts_r+0x70>
 8020382:	e7cd      	b.n	8020320 <_puts_r+0x3c>
 8020384:	6823      	ldr	r3, [r4, #0]
 8020386:	1c5a      	adds	r2, r3, #1
 8020388:	6022      	str	r2, [r4, #0]
 802038a:	220a      	movs	r2, #10
 802038c:	701a      	strb	r2, [r3, #0]
 802038e:	e7f0      	b.n	8020372 <_puts_r+0x8e>

08020390 <puts>:
 8020390:	b510      	push	{r4, lr}
 8020392:	4b03      	ldr	r3, [pc, #12]	@ (80203a0 <puts+0x10>)
 8020394:	0001      	movs	r1, r0
 8020396:	6818      	ldr	r0, [r3, #0]
 8020398:	f7ff ffa4 	bl	80202e4 <_puts_r>
 802039c:	bd10      	pop	{r4, pc}
 802039e:	46c0      	nop			@ (mov r8, r8)
 80203a0:	200003d0 	.word	0x200003d0

080203a4 <siprintf>:
 80203a4:	b40e      	push	{r1, r2, r3}
 80203a6:	b500      	push	{lr}
 80203a8:	490b      	ldr	r1, [pc, #44]	@ (80203d8 <siprintf+0x34>)
 80203aa:	b09c      	sub	sp, #112	@ 0x70
 80203ac:	ab1d      	add	r3, sp, #116	@ 0x74
 80203ae:	9002      	str	r0, [sp, #8]
 80203b0:	9006      	str	r0, [sp, #24]
 80203b2:	9107      	str	r1, [sp, #28]
 80203b4:	9104      	str	r1, [sp, #16]
 80203b6:	4809      	ldr	r0, [pc, #36]	@ (80203dc <siprintf+0x38>)
 80203b8:	4909      	ldr	r1, [pc, #36]	@ (80203e0 <siprintf+0x3c>)
 80203ba:	cb04      	ldmia	r3!, {r2}
 80203bc:	9105      	str	r1, [sp, #20]
 80203be:	6800      	ldr	r0, [r0, #0]
 80203c0:	a902      	add	r1, sp, #8
 80203c2:	9301      	str	r3, [sp, #4]
 80203c4:	f002 fa4a 	bl	802285c <_svfiprintf_r>
 80203c8:	2200      	movs	r2, #0
 80203ca:	9b02      	ldr	r3, [sp, #8]
 80203cc:	701a      	strb	r2, [r3, #0]
 80203ce:	b01c      	add	sp, #112	@ 0x70
 80203d0:	bc08      	pop	{r3}
 80203d2:	b003      	add	sp, #12
 80203d4:	4718      	bx	r3
 80203d6:	46c0      	nop			@ (mov r8, r8)
 80203d8:	7fffffff 	.word	0x7fffffff
 80203dc:	200003d0 	.word	0x200003d0
 80203e0:	ffff0208 	.word	0xffff0208

080203e4 <__sread>:
 80203e4:	b570      	push	{r4, r5, r6, lr}
 80203e6:	000c      	movs	r4, r1
 80203e8:	250e      	movs	r5, #14
 80203ea:	5f49      	ldrsh	r1, [r1, r5]
 80203ec:	f000 f99a 	bl	8020724 <_read_r>
 80203f0:	2800      	cmp	r0, #0
 80203f2:	db03      	blt.n	80203fc <__sread+0x18>
 80203f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80203f6:	181b      	adds	r3, r3, r0
 80203f8:	6563      	str	r3, [r4, #84]	@ 0x54
 80203fa:	bd70      	pop	{r4, r5, r6, pc}
 80203fc:	89a3      	ldrh	r3, [r4, #12]
 80203fe:	4a02      	ldr	r2, [pc, #8]	@ (8020408 <__sread+0x24>)
 8020400:	4013      	ands	r3, r2
 8020402:	81a3      	strh	r3, [r4, #12]
 8020404:	e7f9      	b.n	80203fa <__sread+0x16>
 8020406:	46c0      	nop			@ (mov r8, r8)
 8020408:	ffffefff 	.word	0xffffefff

0802040c <__swrite>:
 802040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802040e:	001f      	movs	r7, r3
 8020410:	898b      	ldrh	r3, [r1, #12]
 8020412:	0005      	movs	r5, r0
 8020414:	000c      	movs	r4, r1
 8020416:	0016      	movs	r6, r2
 8020418:	05db      	lsls	r3, r3, #23
 802041a:	d505      	bpl.n	8020428 <__swrite+0x1c>
 802041c:	230e      	movs	r3, #14
 802041e:	5ec9      	ldrsh	r1, [r1, r3]
 8020420:	2200      	movs	r2, #0
 8020422:	2302      	movs	r3, #2
 8020424:	f000 f96a 	bl	80206fc <_lseek_r>
 8020428:	89a3      	ldrh	r3, [r4, #12]
 802042a:	4a05      	ldr	r2, [pc, #20]	@ (8020440 <__swrite+0x34>)
 802042c:	0028      	movs	r0, r5
 802042e:	4013      	ands	r3, r2
 8020430:	81a3      	strh	r3, [r4, #12]
 8020432:	0032      	movs	r2, r6
 8020434:	230e      	movs	r3, #14
 8020436:	5ee1      	ldrsh	r1, [r4, r3]
 8020438:	003b      	movs	r3, r7
 802043a:	f000 f987 	bl	802074c <_write_r>
 802043e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020440:	ffffefff 	.word	0xffffefff

08020444 <__sseek>:
 8020444:	b570      	push	{r4, r5, r6, lr}
 8020446:	000c      	movs	r4, r1
 8020448:	250e      	movs	r5, #14
 802044a:	5f49      	ldrsh	r1, [r1, r5]
 802044c:	f000 f956 	bl	80206fc <_lseek_r>
 8020450:	89a3      	ldrh	r3, [r4, #12]
 8020452:	1c42      	adds	r2, r0, #1
 8020454:	d103      	bne.n	802045e <__sseek+0x1a>
 8020456:	4a05      	ldr	r2, [pc, #20]	@ (802046c <__sseek+0x28>)
 8020458:	4013      	ands	r3, r2
 802045a:	81a3      	strh	r3, [r4, #12]
 802045c:	bd70      	pop	{r4, r5, r6, pc}
 802045e:	2280      	movs	r2, #128	@ 0x80
 8020460:	0152      	lsls	r2, r2, #5
 8020462:	4313      	orrs	r3, r2
 8020464:	81a3      	strh	r3, [r4, #12]
 8020466:	6560      	str	r0, [r4, #84]	@ 0x54
 8020468:	e7f8      	b.n	802045c <__sseek+0x18>
 802046a:	46c0      	nop			@ (mov r8, r8)
 802046c:	ffffefff 	.word	0xffffefff

08020470 <__sclose>:
 8020470:	b510      	push	{r4, lr}
 8020472:	230e      	movs	r3, #14
 8020474:	5ec9      	ldrsh	r1, [r1, r3]
 8020476:	f000 f92f 	bl	80206d8 <_close_r>
 802047a:	bd10      	pop	{r4, pc}

0802047c <_vsniprintf_r>:
 802047c:	b530      	push	{r4, r5, lr}
 802047e:	0014      	movs	r4, r2
 8020480:	0005      	movs	r5, r0
 8020482:	001a      	movs	r2, r3
 8020484:	b09b      	sub	sp, #108	@ 0x6c
 8020486:	2c00      	cmp	r4, #0
 8020488:	da05      	bge.n	8020496 <_vsniprintf_r+0x1a>
 802048a:	238b      	movs	r3, #139	@ 0x8b
 802048c:	6003      	str	r3, [r0, #0]
 802048e:	2001      	movs	r0, #1
 8020490:	4240      	negs	r0, r0
 8020492:	b01b      	add	sp, #108	@ 0x6c
 8020494:	bd30      	pop	{r4, r5, pc}
 8020496:	2382      	movs	r3, #130	@ 0x82
 8020498:	4668      	mov	r0, sp
 802049a:	009b      	lsls	r3, r3, #2
 802049c:	8183      	strh	r3, [r0, #12]
 802049e:	2300      	movs	r3, #0
 80204a0:	9100      	str	r1, [sp, #0]
 80204a2:	9104      	str	r1, [sp, #16]
 80204a4:	429c      	cmp	r4, r3
 80204a6:	d000      	beq.n	80204aa <_vsniprintf_r+0x2e>
 80204a8:	1e63      	subs	r3, r4, #1
 80204aa:	9302      	str	r3, [sp, #8]
 80204ac:	9305      	str	r3, [sp, #20]
 80204ae:	2301      	movs	r3, #1
 80204b0:	4669      	mov	r1, sp
 80204b2:	425b      	negs	r3, r3
 80204b4:	81cb      	strh	r3, [r1, #14]
 80204b6:	0028      	movs	r0, r5
 80204b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80204ba:	f002 f9cf 	bl	802285c <_svfiprintf_r>
 80204be:	1c43      	adds	r3, r0, #1
 80204c0:	da01      	bge.n	80204c6 <_vsniprintf_r+0x4a>
 80204c2:	238b      	movs	r3, #139	@ 0x8b
 80204c4:	602b      	str	r3, [r5, #0]
 80204c6:	2c00      	cmp	r4, #0
 80204c8:	d0e3      	beq.n	8020492 <_vsniprintf_r+0x16>
 80204ca:	2200      	movs	r2, #0
 80204cc:	9b00      	ldr	r3, [sp, #0]
 80204ce:	701a      	strb	r2, [r3, #0]
 80204d0:	e7df      	b.n	8020492 <_vsniprintf_r+0x16>
	...

080204d4 <vsniprintf>:
 80204d4:	b513      	push	{r0, r1, r4, lr}
 80204d6:	4c04      	ldr	r4, [pc, #16]	@ (80204e8 <vsniprintf+0x14>)
 80204d8:	9300      	str	r3, [sp, #0]
 80204da:	0013      	movs	r3, r2
 80204dc:	000a      	movs	r2, r1
 80204de:	0001      	movs	r1, r0
 80204e0:	6820      	ldr	r0, [r4, #0]
 80204e2:	f7ff ffcb 	bl	802047c <_vsniprintf_r>
 80204e6:	bd16      	pop	{r1, r2, r4, pc}
 80204e8:	200003d0 	.word	0x200003d0

080204ec <__swbuf_r>:
 80204ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204ee:	0006      	movs	r6, r0
 80204f0:	000d      	movs	r5, r1
 80204f2:	0014      	movs	r4, r2
 80204f4:	2800      	cmp	r0, #0
 80204f6:	d004      	beq.n	8020502 <__swbuf_r+0x16>
 80204f8:	6a03      	ldr	r3, [r0, #32]
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d101      	bne.n	8020502 <__swbuf_r+0x16>
 80204fe:	f7ff fead 	bl	802025c <__sinit>
 8020502:	69a3      	ldr	r3, [r4, #24]
 8020504:	60a3      	str	r3, [r4, #8]
 8020506:	89a3      	ldrh	r3, [r4, #12]
 8020508:	071b      	lsls	r3, r3, #28
 802050a:	d502      	bpl.n	8020512 <__swbuf_r+0x26>
 802050c:	6923      	ldr	r3, [r4, #16]
 802050e:	2b00      	cmp	r3, #0
 8020510:	d109      	bne.n	8020526 <__swbuf_r+0x3a>
 8020512:	0021      	movs	r1, r4
 8020514:	0030      	movs	r0, r6
 8020516:	f000 f82b 	bl	8020570 <__swsetup_r>
 802051a:	2800      	cmp	r0, #0
 802051c:	d003      	beq.n	8020526 <__swbuf_r+0x3a>
 802051e:	2501      	movs	r5, #1
 8020520:	426d      	negs	r5, r5
 8020522:	0028      	movs	r0, r5
 8020524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020526:	6923      	ldr	r3, [r4, #16]
 8020528:	6820      	ldr	r0, [r4, #0]
 802052a:	b2ef      	uxtb	r7, r5
 802052c:	1ac0      	subs	r0, r0, r3
 802052e:	6963      	ldr	r3, [r4, #20]
 8020530:	b2ed      	uxtb	r5, r5
 8020532:	4283      	cmp	r3, r0
 8020534:	dc05      	bgt.n	8020542 <__swbuf_r+0x56>
 8020536:	0021      	movs	r1, r4
 8020538:	0030      	movs	r0, r6
 802053a:	f002 fc57 	bl	8022dec <_fflush_r>
 802053e:	2800      	cmp	r0, #0
 8020540:	d1ed      	bne.n	802051e <__swbuf_r+0x32>
 8020542:	68a3      	ldr	r3, [r4, #8]
 8020544:	3001      	adds	r0, #1
 8020546:	3b01      	subs	r3, #1
 8020548:	60a3      	str	r3, [r4, #8]
 802054a:	6823      	ldr	r3, [r4, #0]
 802054c:	1c5a      	adds	r2, r3, #1
 802054e:	6022      	str	r2, [r4, #0]
 8020550:	701f      	strb	r7, [r3, #0]
 8020552:	6963      	ldr	r3, [r4, #20]
 8020554:	4283      	cmp	r3, r0
 8020556:	d004      	beq.n	8020562 <__swbuf_r+0x76>
 8020558:	89a3      	ldrh	r3, [r4, #12]
 802055a:	07db      	lsls	r3, r3, #31
 802055c:	d5e1      	bpl.n	8020522 <__swbuf_r+0x36>
 802055e:	2d0a      	cmp	r5, #10
 8020560:	d1df      	bne.n	8020522 <__swbuf_r+0x36>
 8020562:	0021      	movs	r1, r4
 8020564:	0030      	movs	r0, r6
 8020566:	f002 fc41 	bl	8022dec <_fflush_r>
 802056a:	2800      	cmp	r0, #0
 802056c:	d0d9      	beq.n	8020522 <__swbuf_r+0x36>
 802056e:	e7d6      	b.n	802051e <__swbuf_r+0x32>

08020570 <__swsetup_r>:
 8020570:	4b2d      	ldr	r3, [pc, #180]	@ (8020628 <__swsetup_r+0xb8>)
 8020572:	b570      	push	{r4, r5, r6, lr}
 8020574:	0005      	movs	r5, r0
 8020576:	6818      	ldr	r0, [r3, #0]
 8020578:	000c      	movs	r4, r1
 802057a:	2800      	cmp	r0, #0
 802057c:	d004      	beq.n	8020588 <__swsetup_r+0x18>
 802057e:	6a03      	ldr	r3, [r0, #32]
 8020580:	2b00      	cmp	r3, #0
 8020582:	d101      	bne.n	8020588 <__swsetup_r+0x18>
 8020584:	f7ff fe6a 	bl	802025c <__sinit>
 8020588:	230c      	movs	r3, #12
 802058a:	5ee2      	ldrsh	r2, [r4, r3]
 802058c:	0713      	lsls	r3, r2, #28
 802058e:	d423      	bmi.n	80205d8 <__swsetup_r+0x68>
 8020590:	06d3      	lsls	r3, r2, #27
 8020592:	d407      	bmi.n	80205a4 <__swsetup_r+0x34>
 8020594:	2309      	movs	r3, #9
 8020596:	602b      	str	r3, [r5, #0]
 8020598:	2340      	movs	r3, #64	@ 0x40
 802059a:	2001      	movs	r0, #1
 802059c:	4313      	orrs	r3, r2
 802059e:	81a3      	strh	r3, [r4, #12]
 80205a0:	4240      	negs	r0, r0
 80205a2:	e03a      	b.n	802061a <__swsetup_r+0xaa>
 80205a4:	0752      	lsls	r2, r2, #29
 80205a6:	d513      	bpl.n	80205d0 <__swsetup_r+0x60>
 80205a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80205aa:	2900      	cmp	r1, #0
 80205ac:	d008      	beq.n	80205c0 <__swsetup_r+0x50>
 80205ae:	0023      	movs	r3, r4
 80205b0:	3344      	adds	r3, #68	@ 0x44
 80205b2:	4299      	cmp	r1, r3
 80205b4:	d002      	beq.n	80205bc <__swsetup_r+0x4c>
 80205b6:	0028      	movs	r0, r5
 80205b8:	f000 ffa6 	bl	8021508 <_free_r>
 80205bc:	2300      	movs	r3, #0
 80205be:	6363      	str	r3, [r4, #52]	@ 0x34
 80205c0:	2224      	movs	r2, #36	@ 0x24
 80205c2:	89a3      	ldrh	r3, [r4, #12]
 80205c4:	4393      	bics	r3, r2
 80205c6:	81a3      	strh	r3, [r4, #12]
 80205c8:	2300      	movs	r3, #0
 80205ca:	6063      	str	r3, [r4, #4]
 80205cc:	6923      	ldr	r3, [r4, #16]
 80205ce:	6023      	str	r3, [r4, #0]
 80205d0:	2308      	movs	r3, #8
 80205d2:	89a2      	ldrh	r2, [r4, #12]
 80205d4:	4313      	orrs	r3, r2
 80205d6:	81a3      	strh	r3, [r4, #12]
 80205d8:	6923      	ldr	r3, [r4, #16]
 80205da:	2b00      	cmp	r3, #0
 80205dc:	d10b      	bne.n	80205f6 <__swsetup_r+0x86>
 80205de:	21a0      	movs	r1, #160	@ 0xa0
 80205e0:	2280      	movs	r2, #128	@ 0x80
 80205e2:	89a3      	ldrh	r3, [r4, #12]
 80205e4:	0089      	lsls	r1, r1, #2
 80205e6:	0092      	lsls	r2, r2, #2
 80205e8:	400b      	ands	r3, r1
 80205ea:	4293      	cmp	r3, r2
 80205ec:	d003      	beq.n	80205f6 <__swsetup_r+0x86>
 80205ee:	0021      	movs	r1, r4
 80205f0:	0028      	movs	r0, r5
 80205f2:	f002 fc51 	bl	8022e98 <__smakebuf_r>
 80205f6:	230c      	movs	r3, #12
 80205f8:	5ee2      	ldrsh	r2, [r4, r3]
 80205fa:	2101      	movs	r1, #1
 80205fc:	0013      	movs	r3, r2
 80205fe:	400b      	ands	r3, r1
 8020600:	420a      	tst	r2, r1
 8020602:	d00b      	beq.n	802061c <__swsetup_r+0xac>
 8020604:	2300      	movs	r3, #0
 8020606:	60a3      	str	r3, [r4, #8]
 8020608:	6963      	ldr	r3, [r4, #20]
 802060a:	425b      	negs	r3, r3
 802060c:	61a3      	str	r3, [r4, #24]
 802060e:	2000      	movs	r0, #0
 8020610:	6923      	ldr	r3, [r4, #16]
 8020612:	4283      	cmp	r3, r0
 8020614:	d101      	bne.n	802061a <__swsetup_r+0xaa>
 8020616:	0613      	lsls	r3, r2, #24
 8020618:	d4be      	bmi.n	8020598 <__swsetup_r+0x28>
 802061a:	bd70      	pop	{r4, r5, r6, pc}
 802061c:	0791      	lsls	r1, r2, #30
 802061e:	d400      	bmi.n	8020622 <__swsetup_r+0xb2>
 8020620:	6963      	ldr	r3, [r4, #20]
 8020622:	60a3      	str	r3, [r4, #8]
 8020624:	e7f3      	b.n	802060e <__swsetup_r+0x9e>
 8020626:	46c0      	nop			@ (mov r8, r8)
 8020628:	200003d0 	.word	0x200003d0

0802062c <memset>:
 802062c:	0003      	movs	r3, r0
 802062e:	1882      	adds	r2, r0, r2
 8020630:	4293      	cmp	r3, r2
 8020632:	d100      	bne.n	8020636 <memset+0xa>
 8020634:	4770      	bx	lr
 8020636:	7019      	strb	r1, [r3, #0]
 8020638:	3301      	adds	r3, #1
 802063a:	e7f9      	b.n	8020630 <memset+0x4>

0802063c <strchr>:
 802063c:	b2c9      	uxtb	r1, r1
 802063e:	7803      	ldrb	r3, [r0, #0]
 8020640:	2b00      	cmp	r3, #0
 8020642:	d004      	beq.n	802064e <strchr+0x12>
 8020644:	428b      	cmp	r3, r1
 8020646:	d100      	bne.n	802064a <strchr+0xe>
 8020648:	4770      	bx	lr
 802064a:	3001      	adds	r0, #1
 802064c:	e7f7      	b.n	802063e <strchr+0x2>
 802064e:	424b      	negs	r3, r1
 8020650:	4159      	adcs	r1, r3
 8020652:	4249      	negs	r1, r1
 8020654:	4008      	ands	r0, r1
 8020656:	e7f7      	b.n	8020648 <strchr+0xc>

08020658 <strncmp>:
 8020658:	b530      	push	{r4, r5, lr}
 802065a:	0005      	movs	r5, r0
 802065c:	1e10      	subs	r0, r2, #0
 802065e:	d00b      	beq.n	8020678 <strncmp+0x20>
 8020660:	2400      	movs	r4, #0
 8020662:	3a01      	subs	r2, #1
 8020664:	5d2b      	ldrb	r3, [r5, r4]
 8020666:	5d08      	ldrb	r0, [r1, r4]
 8020668:	4283      	cmp	r3, r0
 802066a:	d104      	bne.n	8020676 <strncmp+0x1e>
 802066c:	42a2      	cmp	r2, r4
 802066e:	d002      	beq.n	8020676 <strncmp+0x1e>
 8020670:	3401      	adds	r4, #1
 8020672:	2b00      	cmp	r3, #0
 8020674:	d1f6      	bne.n	8020664 <strncmp+0xc>
 8020676:	1a18      	subs	r0, r3, r0
 8020678:	bd30      	pop	{r4, r5, pc}

0802067a <strncpy>:
 802067a:	0003      	movs	r3, r0
 802067c:	b530      	push	{r4, r5, lr}
 802067e:	001d      	movs	r5, r3
 8020680:	2a00      	cmp	r2, #0
 8020682:	d006      	beq.n	8020692 <strncpy+0x18>
 8020684:	780c      	ldrb	r4, [r1, #0]
 8020686:	3a01      	subs	r2, #1
 8020688:	3301      	adds	r3, #1
 802068a:	702c      	strb	r4, [r5, #0]
 802068c:	3101      	adds	r1, #1
 802068e:	2c00      	cmp	r4, #0
 8020690:	d1f5      	bne.n	802067e <strncpy+0x4>
 8020692:	2100      	movs	r1, #0
 8020694:	189a      	adds	r2, r3, r2
 8020696:	4293      	cmp	r3, r2
 8020698:	d100      	bne.n	802069c <strncpy+0x22>
 802069a:	bd30      	pop	{r4, r5, pc}
 802069c:	7019      	strb	r1, [r3, #0]
 802069e:	3301      	adds	r3, #1
 80206a0:	e7f9      	b.n	8020696 <strncpy+0x1c>

080206a2 <strstr>:
 80206a2:	780a      	ldrb	r2, [r1, #0]
 80206a4:	b530      	push	{r4, r5, lr}
 80206a6:	2a00      	cmp	r2, #0
 80206a8:	d10c      	bne.n	80206c4 <strstr+0x22>
 80206aa:	bd30      	pop	{r4, r5, pc}
 80206ac:	429a      	cmp	r2, r3
 80206ae:	d108      	bne.n	80206c2 <strstr+0x20>
 80206b0:	2301      	movs	r3, #1
 80206b2:	5ccc      	ldrb	r4, [r1, r3]
 80206b4:	2c00      	cmp	r4, #0
 80206b6:	d0f8      	beq.n	80206aa <strstr+0x8>
 80206b8:	5cc5      	ldrb	r5, [r0, r3]
 80206ba:	42a5      	cmp	r5, r4
 80206bc:	d101      	bne.n	80206c2 <strstr+0x20>
 80206be:	3301      	adds	r3, #1
 80206c0:	e7f7      	b.n	80206b2 <strstr+0x10>
 80206c2:	3001      	adds	r0, #1
 80206c4:	7803      	ldrb	r3, [r0, #0]
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	d1f0      	bne.n	80206ac <strstr+0xa>
 80206ca:	0018      	movs	r0, r3
 80206cc:	e7ed      	b.n	80206aa <strstr+0x8>
	...

080206d0 <_localeconv_r>:
 80206d0:	4800      	ldr	r0, [pc, #0]	@ (80206d4 <_localeconv_r+0x4>)
 80206d2:	4770      	bx	lr
 80206d4:	20000354 	.word	0x20000354

080206d8 <_close_r>:
 80206d8:	2300      	movs	r3, #0
 80206da:	b570      	push	{r4, r5, r6, lr}
 80206dc:	4d06      	ldr	r5, [pc, #24]	@ (80206f8 <_close_r+0x20>)
 80206de:	0004      	movs	r4, r0
 80206e0:	0008      	movs	r0, r1
 80206e2:	602b      	str	r3, [r5, #0]
 80206e4:	f7ed fca4 	bl	800e030 <_close>
 80206e8:	1c43      	adds	r3, r0, #1
 80206ea:	d103      	bne.n	80206f4 <_close_r+0x1c>
 80206ec:	682b      	ldr	r3, [r5, #0]
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	d000      	beq.n	80206f4 <_close_r+0x1c>
 80206f2:	6023      	str	r3, [r4, #0]
 80206f4:	bd70      	pop	{r4, r5, r6, pc}
 80206f6:	46c0      	nop			@ (mov r8, r8)
 80206f8:	200033c8 	.word	0x200033c8

080206fc <_lseek_r>:
 80206fc:	b570      	push	{r4, r5, r6, lr}
 80206fe:	0004      	movs	r4, r0
 8020700:	0008      	movs	r0, r1
 8020702:	0011      	movs	r1, r2
 8020704:	001a      	movs	r2, r3
 8020706:	2300      	movs	r3, #0
 8020708:	4d05      	ldr	r5, [pc, #20]	@ (8020720 <_lseek_r+0x24>)
 802070a:	602b      	str	r3, [r5, #0]
 802070c:	f7ed fcb1 	bl	800e072 <_lseek>
 8020710:	1c43      	adds	r3, r0, #1
 8020712:	d103      	bne.n	802071c <_lseek_r+0x20>
 8020714:	682b      	ldr	r3, [r5, #0]
 8020716:	2b00      	cmp	r3, #0
 8020718:	d000      	beq.n	802071c <_lseek_r+0x20>
 802071a:	6023      	str	r3, [r4, #0]
 802071c:	bd70      	pop	{r4, r5, r6, pc}
 802071e:	46c0      	nop			@ (mov r8, r8)
 8020720:	200033c8 	.word	0x200033c8

08020724 <_read_r>:
 8020724:	b570      	push	{r4, r5, r6, lr}
 8020726:	0004      	movs	r4, r0
 8020728:	0008      	movs	r0, r1
 802072a:	0011      	movs	r1, r2
 802072c:	001a      	movs	r2, r3
 802072e:	2300      	movs	r3, #0
 8020730:	4d05      	ldr	r5, [pc, #20]	@ (8020748 <_read_r+0x24>)
 8020732:	602b      	str	r3, [r5, #0]
 8020734:	f7ed fc5f 	bl	800dff6 <_read>
 8020738:	1c43      	adds	r3, r0, #1
 802073a:	d103      	bne.n	8020744 <_read_r+0x20>
 802073c:	682b      	ldr	r3, [r5, #0]
 802073e:	2b00      	cmp	r3, #0
 8020740:	d000      	beq.n	8020744 <_read_r+0x20>
 8020742:	6023      	str	r3, [r4, #0]
 8020744:	bd70      	pop	{r4, r5, r6, pc}
 8020746:	46c0      	nop			@ (mov r8, r8)
 8020748:	200033c8 	.word	0x200033c8

0802074c <_write_r>:
 802074c:	b570      	push	{r4, r5, r6, lr}
 802074e:	0004      	movs	r4, r0
 8020750:	0008      	movs	r0, r1
 8020752:	0011      	movs	r1, r2
 8020754:	001a      	movs	r2, r3
 8020756:	2300      	movs	r3, #0
 8020758:	4d05      	ldr	r5, [pc, #20]	@ (8020770 <_write_r+0x24>)
 802075a:	602b      	str	r3, [r5, #0]
 802075c:	f7ee f920 	bl	800e9a0 <_write>
 8020760:	1c43      	adds	r3, r0, #1
 8020762:	d103      	bne.n	802076c <_write_r+0x20>
 8020764:	682b      	ldr	r3, [r5, #0]
 8020766:	2b00      	cmp	r3, #0
 8020768:	d000      	beq.n	802076c <_write_r+0x20>
 802076a:	6023      	str	r3, [r4, #0]
 802076c:	bd70      	pop	{r4, r5, r6, pc}
 802076e:	46c0      	nop			@ (mov r8, r8)
 8020770:	200033c8 	.word	0x200033c8

08020774 <__errno>:
 8020774:	4b01      	ldr	r3, [pc, #4]	@ (802077c <__errno+0x8>)
 8020776:	6818      	ldr	r0, [r3, #0]
 8020778:	4770      	bx	lr
 802077a:	46c0      	nop			@ (mov r8, r8)
 802077c:	200003d0 	.word	0x200003d0

08020780 <__libc_init_array>:
 8020780:	b570      	push	{r4, r5, r6, lr}
 8020782:	2600      	movs	r6, #0
 8020784:	4c0c      	ldr	r4, [pc, #48]	@ (80207b8 <__libc_init_array+0x38>)
 8020786:	4d0d      	ldr	r5, [pc, #52]	@ (80207bc <__libc_init_array+0x3c>)
 8020788:	1b64      	subs	r4, r4, r5
 802078a:	10a4      	asrs	r4, r4, #2
 802078c:	42a6      	cmp	r6, r4
 802078e:	d109      	bne.n	80207a4 <__libc_init_array+0x24>
 8020790:	2600      	movs	r6, #0
 8020792:	f002 fee9 	bl	8023568 <_init>
 8020796:	4c0a      	ldr	r4, [pc, #40]	@ (80207c0 <__libc_init_array+0x40>)
 8020798:	4d0a      	ldr	r5, [pc, #40]	@ (80207c4 <__libc_init_array+0x44>)
 802079a:	1b64      	subs	r4, r4, r5
 802079c:	10a4      	asrs	r4, r4, #2
 802079e:	42a6      	cmp	r6, r4
 80207a0:	d105      	bne.n	80207ae <__libc_init_array+0x2e>
 80207a2:	bd70      	pop	{r4, r5, r6, pc}
 80207a4:	00b3      	lsls	r3, r6, #2
 80207a6:	58eb      	ldr	r3, [r5, r3]
 80207a8:	4798      	blx	r3
 80207aa:	3601      	adds	r6, #1
 80207ac:	e7ee      	b.n	802078c <__libc_init_array+0xc>
 80207ae:	00b3      	lsls	r3, r6, #2
 80207b0:	58eb      	ldr	r3, [r5, r3]
 80207b2:	4798      	blx	r3
 80207b4:	3601      	adds	r6, #1
 80207b6:	e7f2      	b.n	802079e <__libc_init_array+0x1e>
 80207b8:	080266b8 	.word	0x080266b8
 80207bc:	080266b8 	.word	0x080266b8
 80207c0:	080266bc 	.word	0x080266bc
 80207c4:	080266b8 	.word	0x080266b8

080207c8 <__retarget_lock_init_recursive>:
 80207c8:	4770      	bx	lr

080207ca <__retarget_lock_acquire_recursive>:
 80207ca:	4770      	bx	lr

080207cc <__retarget_lock_release_recursive>:
 80207cc:	4770      	bx	lr

080207ce <memchr>:
 80207ce:	b2c9      	uxtb	r1, r1
 80207d0:	1882      	adds	r2, r0, r2
 80207d2:	4290      	cmp	r0, r2
 80207d4:	d101      	bne.n	80207da <memchr+0xc>
 80207d6:	2000      	movs	r0, #0
 80207d8:	4770      	bx	lr
 80207da:	7803      	ldrb	r3, [r0, #0]
 80207dc:	428b      	cmp	r3, r1
 80207de:	d0fb      	beq.n	80207d8 <memchr+0xa>
 80207e0:	3001      	adds	r0, #1
 80207e2:	e7f6      	b.n	80207d2 <memchr+0x4>

080207e4 <memcpy>:
 80207e4:	2300      	movs	r3, #0
 80207e6:	b510      	push	{r4, lr}
 80207e8:	429a      	cmp	r2, r3
 80207ea:	d100      	bne.n	80207ee <memcpy+0xa>
 80207ec:	bd10      	pop	{r4, pc}
 80207ee:	5ccc      	ldrb	r4, [r1, r3]
 80207f0:	54c4      	strb	r4, [r0, r3]
 80207f2:	3301      	adds	r3, #1
 80207f4:	e7f8      	b.n	80207e8 <memcpy+0x4>
	...

080207f8 <nan>:
 80207f8:	2000      	movs	r0, #0
 80207fa:	4901      	ldr	r1, [pc, #4]	@ (8020800 <nan+0x8>)
 80207fc:	4770      	bx	lr
 80207fe:	46c0      	nop			@ (mov r8, r8)
 8020800:	7ff80000 	.word	0x7ff80000

08020804 <quorem>:
 8020804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020806:	6902      	ldr	r2, [r0, #16]
 8020808:	690f      	ldr	r7, [r1, #16]
 802080a:	b087      	sub	sp, #28
 802080c:	0006      	movs	r6, r0
 802080e:	000b      	movs	r3, r1
 8020810:	2000      	movs	r0, #0
 8020812:	9102      	str	r1, [sp, #8]
 8020814:	42ba      	cmp	r2, r7
 8020816:	db6d      	blt.n	80208f4 <quorem+0xf0>
 8020818:	3f01      	subs	r7, #1
 802081a:	00bc      	lsls	r4, r7, #2
 802081c:	3314      	adds	r3, #20
 802081e:	9305      	str	r3, [sp, #20]
 8020820:	191b      	adds	r3, r3, r4
 8020822:	9303      	str	r3, [sp, #12]
 8020824:	0033      	movs	r3, r6
 8020826:	3314      	adds	r3, #20
 8020828:	191c      	adds	r4, r3, r4
 802082a:	9301      	str	r3, [sp, #4]
 802082c:	6823      	ldr	r3, [r4, #0]
 802082e:	9304      	str	r3, [sp, #16]
 8020830:	9b03      	ldr	r3, [sp, #12]
 8020832:	9804      	ldr	r0, [sp, #16]
 8020834:	681d      	ldr	r5, [r3, #0]
 8020836:	3501      	adds	r5, #1
 8020838:	0029      	movs	r1, r5
 802083a:	f7df fcb3 	bl	80001a4 <__udivsi3>
 802083e:	9b04      	ldr	r3, [sp, #16]
 8020840:	9000      	str	r0, [sp, #0]
 8020842:	42ab      	cmp	r3, r5
 8020844:	d32b      	bcc.n	802089e <quorem+0x9a>
 8020846:	9b05      	ldr	r3, [sp, #20]
 8020848:	9d01      	ldr	r5, [sp, #4]
 802084a:	469c      	mov	ip, r3
 802084c:	2300      	movs	r3, #0
 802084e:	9305      	str	r3, [sp, #20]
 8020850:	9304      	str	r3, [sp, #16]
 8020852:	4662      	mov	r2, ip
 8020854:	ca08      	ldmia	r2!, {r3}
 8020856:	6828      	ldr	r0, [r5, #0]
 8020858:	4694      	mov	ip, r2
 802085a:	9a00      	ldr	r2, [sp, #0]
 802085c:	b299      	uxth	r1, r3
 802085e:	4351      	muls	r1, r2
 8020860:	9a05      	ldr	r2, [sp, #20]
 8020862:	0c1b      	lsrs	r3, r3, #16
 8020864:	1889      	adds	r1, r1, r2
 8020866:	9a00      	ldr	r2, [sp, #0]
 8020868:	4353      	muls	r3, r2
 802086a:	0c0a      	lsrs	r2, r1, #16
 802086c:	189b      	adds	r3, r3, r2
 802086e:	0c1a      	lsrs	r2, r3, #16
 8020870:	b289      	uxth	r1, r1
 8020872:	9205      	str	r2, [sp, #20]
 8020874:	b282      	uxth	r2, r0
 8020876:	1a52      	subs	r2, r2, r1
 8020878:	9904      	ldr	r1, [sp, #16]
 802087a:	0c00      	lsrs	r0, r0, #16
 802087c:	1852      	adds	r2, r2, r1
 802087e:	b29b      	uxth	r3, r3
 8020880:	1411      	asrs	r1, r2, #16
 8020882:	1ac3      	subs	r3, r0, r3
 8020884:	185b      	adds	r3, r3, r1
 8020886:	1419      	asrs	r1, r3, #16
 8020888:	b292      	uxth	r2, r2
 802088a:	041b      	lsls	r3, r3, #16
 802088c:	431a      	orrs	r2, r3
 802088e:	9b03      	ldr	r3, [sp, #12]
 8020890:	9104      	str	r1, [sp, #16]
 8020892:	c504      	stmia	r5!, {r2}
 8020894:	4563      	cmp	r3, ip
 8020896:	d2dc      	bcs.n	8020852 <quorem+0x4e>
 8020898:	6823      	ldr	r3, [r4, #0]
 802089a:	2b00      	cmp	r3, #0
 802089c:	d030      	beq.n	8020900 <quorem+0xfc>
 802089e:	0030      	movs	r0, r6
 80208a0:	9902      	ldr	r1, [sp, #8]
 80208a2:	f001 fd7d 	bl	80223a0 <__mcmp>
 80208a6:	2800      	cmp	r0, #0
 80208a8:	db23      	blt.n	80208f2 <quorem+0xee>
 80208aa:	0034      	movs	r4, r6
 80208ac:	2500      	movs	r5, #0
 80208ae:	9902      	ldr	r1, [sp, #8]
 80208b0:	3414      	adds	r4, #20
 80208b2:	3114      	adds	r1, #20
 80208b4:	6823      	ldr	r3, [r4, #0]
 80208b6:	c901      	ldmia	r1!, {r0}
 80208b8:	9302      	str	r3, [sp, #8]
 80208ba:	466b      	mov	r3, sp
 80208bc:	891b      	ldrh	r3, [r3, #8]
 80208be:	b282      	uxth	r2, r0
 80208c0:	1a9a      	subs	r2, r3, r2
 80208c2:	9b02      	ldr	r3, [sp, #8]
 80208c4:	1952      	adds	r2, r2, r5
 80208c6:	0c00      	lsrs	r0, r0, #16
 80208c8:	0c1b      	lsrs	r3, r3, #16
 80208ca:	1a1b      	subs	r3, r3, r0
 80208cc:	1410      	asrs	r0, r2, #16
 80208ce:	181b      	adds	r3, r3, r0
 80208d0:	141d      	asrs	r5, r3, #16
 80208d2:	b292      	uxth	r2, r2
 80208d4:	041b      	lsls	r3, r3, #16
 80208d6:	431a      	orrs	r2, r3
 80208d8:	9b03      	ldr	r3, [sp, #12]
 80208da:	c404      	stmia	r4!, {r2}
 80208dc:	428b      	cmp	r3, r1
 80208de:	d2e9      	bcs.n	80208b4 <quorem+0xb0>
 80208e0:	9a01      	ldr	r2, [sp, #4]
 80208e2:	00bb      	lsls	r3, r7, #2
 80208e4:	18d3      	adds	r3, r2, r3
 80208e6:	681a      	ldr	r2, [r3, #0]
 80208e8:	2a00      	cmp	r2, #0
 80208ea:	d013      	beq.n	8020914 <quorem+0x110>
 80208ec:	9b00      	ldr	r3, [sp, #0]
 80208ee:	3301      	adds	r3, #1
 80208f0:	9300      	str	r3, [sp, #0]
 80208f2:	9800      	ldr	r0, [sp, #0]
 80208f4:	b007      	add	sp, #28
 80208f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80208f8:	6823      	ldr	r3, [r4, #0]
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	d104      	bne.n	8020908 <quorem+0x104>
 80208fe:	3f01      	subs	r7, #1
 8020900:	9b01      	ldr	r3, [sp, #4]
 8020902:	3c04      	subs	r4, #4
 8020904:	42a3      	cmp	r3, r4
 8020906:	d3f7      	bcc.n	80208f8 <quorem+0xf4>
 8020908:	6137      	str	r7, [r6, #16]
 802090a:	e7c8      	b.n	802089e <quorem+0x9a>
 802090c:	681a      	ldr	r2, [r3, #0]
 802090e:	2a00      	cmp	r2, #0
 8020910:	d104      	bne.n	802091c <quorem+0x118>
 8020912:	3f01      	subs	r7, #1
 8020914:	9a01      	ldr	r2, [sp, #4]
 8020916:	3b04      	subs	r3, #4
 8020918:	429a      	cmp	r2, r3
 802091a:	d3f7      	bcc.n	802090c <quorem+0x108>
 802091c:	6137      	str	r7, [r6, #16]
 802091e:	e7e5      	b.n	80208ec <quorem+0xe8>

08020920 <_dtoa_r>:
 8020920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020922:	0014      	movs	r4, r2
 8020924:	001d      	movs	r5, r3
 8020926:	69c6      	ldr	r6, [r0, #28]
 8020928:	b09d      	sub	sp, #116	@ 0x74
 802092a:	940a      	str	r4, [sp, #40]	@ 0x28
 802092c:	950b      	str	r5, [sp, #44]	@ 0x2c
 802092e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020930:	9003      	str	r0, [sp, #12]
 8020932:	2e00      	cmp	r6, #0
 8020934:	d10f      	bne.n	8020956 <_dtoa_r+0x36>
 8020936:	2010      	movs	r0, #16
 8020938:	f001 f98a 	bl	8021c50 <malloc>
 802093c:	9b03      	ldr	r3, [sp, #12]
 802093e:	1e02      	subs	r2, r0, #0
 8020940:	61d8      	str	r0, [r3, #28]
 8020942:	d104      	bne.n	802094e <_dtoa_r+0x2e>
 8020944:	21ef      	movs	r1, #239	@ 0xef
 8020946:	4bc7      	ldr	r3, [pc, #796]	@ (8020c64 <_dtoa_r+0x344>)
 8020948:	48c7      	ldr	r0, [pc, #796]	@ (8020c68 <_dtoa_r+0x348>)
 802094a:	f002 fb2f 	bl	8022fac <__assert_func>
 802094e:	6046      	str	r6, [r0, #4]
 8020950:	6086      	str	r6, [r0, #8]
 8020952:	6006      	str	r6, [r0, #0]
 8020954:	60c6      	str	r6, [r0, #12]
 8020956:	9b03      	ldr	r3, [sp, #12]
 8020958:	69db      	ldr	r3, [r3, #28]
 802095a:	6819      	ldr	r1, [r3, #0]
 802095c:	2900      	cmp	r1, #0
 802095e:	d00b      	beq.n	8020978 <_dtoa_r+0x58>
 8020960:	685a      	ldr	r2, [r3, #4]
 8020962:	2301      	movs	r3, #1
 8020964:	4093      	lsls	r3, r2
 8020966:	604a      	str	r2, [r1, #4]
 8020968:	608b      	str	r3, [r1, #8]
 802096a:	9803      	ldr	r0, [sp, #12]
 802096c:	f001 fa82 	bl	8021e74 <_Bfree>
 8020970:	2200      	movs	r2, #0
 8020972:	9b03      	ldr	r3, [sp, #12]
 8020974:	69db      	ldr	r3, [r3, #28]
 8020976:	601a      	str	r2, [r3, #0]
 8020978:	2d00      	cmp	r5, #0
 802097a:	da1e      	bge.n	80209ba <_dtoa_r+0x9a>
 802097c:	2301      	movs	r3, #1
 802097e:	603b      	str	r3, [r7, #0]
 8020980:	006b      	lsls	r3, r5, #1
 8020982:	085b      	lsrs	r3, r3, #1
 8020984:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020986:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020988:	4bb8      	ldr	r3, [pc, #736]	@ (8020c6c <_dtoa_r+0x34c>)
 802098a:	4ab8      	ldr	r2, [pc, #736]	@ (8020c6c <_dtoa_r+0x34c>)
 802098c:	403b      	ands	r3, r7
 802098e:	4293      	cmp	r3, r2
 8020990:	d116      	bne.n	80209c0 <_dtoa_r+0xa0>
 8020992:	4bb7      	ldr	r3, [pc, #732]	@ (8020c70 <_dtoa_r+0x350>)
 8020994:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020996:	6013      	str	r3, [r2, #0]
 8020998:	033b      	lsls	r3, r7, #12
 802099a:	0b1b      	lsrs	r3, r3, #12
 802099c:	4323      	orrs	r3, r4
 802099e:	d101      	bne.n	80209a4 <_dtoa_r+0x84>
 80209a0:	f000 fd83 	bl	80214aa <_dtoa_r+0xb8a>
 80209a4:	4bb3      	ldr	r3, [pc, #716]	@ (8020c74 <_dtoa_r+0x354>)
 80209a6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80209a8:	9308      	str	r3, [sp, #32]
 80209aa:	2a00      	cmp	r2, #0
 80209ac:	d002      	beq.n	80209b4 <_dtoa_r+0x94>
 80209ae:	4bb2      	ldr	r3, [pc, #712]	@ (8020c78 <_dtoa_r+0x358>)
 80209b0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80209b2:	6013      	str	r3, [r2, #0]
 80209b4:	9808      	ldr	r0, [sp, #32]
 80209b6:	b01d      	add	sp, #116	@ 0x74
 80209b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209ba:	2300      	movs	r3, #0
 80209bc:	603b      	str	r3, [r7, #0]
 80209be:	e7e2      	b.n	8020986 <_dtoa_r+0x66>
 80209c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80209c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80209c4:	9212      	str	r2, [sp, #72]	@ 0x48
 80209c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80209c8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80209ca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80209cc:	2200      	movs	r2, #0
 80209ce:	2300      	movs	r3, #0
 80209d0:	f7df fd6e 	bl	80004b0 <__aeabi_dcmpeq>
 80209d4:	1e06      	subs	r6, r0, #0
 80209d6:	d00b      	beq.n	80209f0 <_dtoa_r+0xd0>
 80209d8:	2301      	movs	r3, #1
 80209da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80209dc:	6013      	str	r3, [r2, #0]
 80209de:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d002      	beq.n	80209ea <_dtoa_r+0xca>
 80209e4:	4ba5      	ldr	r3, [pc, #660]	@ (8020c7c <_dtoa_r+0x35c>)
 80209e6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80209e8:	6013      	str	r3, [r2, #0]
 80209ea:	4ba5      	ldr	r3, [pc, #660]	@ (8020c80 <_dtoa_r+0x360>)
 80209ec:	9308      	str	r3, [sp, #32]
 80209ee:	e7e1      	b.n	80209b4 <_dtoa_r+0x94>
 80209f0:	ab1a      	add	r3, sp, #104	@ 0x68
 80209f2:	9301      	str	r3, [sp, #4]
 80209f4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80209f6:	9300      	str	r3, [sp, #0]
 80209f8:	9803      	ldr	r0, [sp, #12]
 80209fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80209fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80209fe:	f001 fdf1 	bl	80225e4 <__d2b>
 8020a02:	007a      	lsls	r2, r7, #1
 8020a04:	9005      	str	r0, [sp, #20]
 8020a06:	0d52      	lsrs	r2, r2, #21
 8020a08:	d100      	bne.n	8020a0c <_dtoa_r+0xec>
 8020a0a:	e07b      	b.n	8020b04 <_dtoa_r+0x1e4>
 8020a0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020a0e:	9618      	str	r6, [sp, #96]	@ 0x60
 8020a10:	0319      	lsls	r1, r3, #12
 8020a12:	4b9c      	ldr	r3, [pc, #624]	@ (8020c84 <_dtoa_r+0x364>)
 8020a14:	0b09      	lsrs	r1, r1, #12
 8020a16:	430b      	orrs	r3, r1
 8020a18:	499b      	ldr	r1, [pc, #620]	@ (8020c88 <_dtoa_r+0x368>)
 8020a1a:	1857      	adds	r7, r2, r1
 8020a1c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020a1e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020a20:	0019      	movs	r1, r3
 8020a22:	2200      	movs	r2, #0
 8020a24:	4b99      	ldr	r3, [pc, #612]	@ (8020c8c <_dtoa_r+0x36c>)
 8020a26:	f7e2 f8d1 	bl	8002bcc <__aeabi_dsub>
 8020a2a:	4a99      	ldr	r2, [pc, #612]	@ (8020c90 <_dtoa_r+0x370>)
 8020a2c:	4b99      	ldr	r3, [pc, #612]	@ (8020c94 <_dtoa_r+0x374>)
 8020a2e:	f7e1 fe05 	bl	800263c <__aeabi_dmul>
 8020a32:	4a99      	ldr	r2, [pc, #612]	@ (8020c98 <_dtoa_r+0x378>)
 8020a34:	4b99      	ldr	r3, [pc, #612]	@ (8020c9c <_dtoa_r+0x37c>)
 8020a36:	f7e0 fe59 	bl	80016ec <__aeabi_dadd>
 8020a3a:	0004      	movs	r4, r0
 8020a3c:	0038      	movs	r0, r7
 8020a3e:	000d      	movs	r5, r1
 8020a40:	f7e2 fcbe 	bl	80033c0 <__aeabi_i2d>
 8020a44:	4a96      	ldr	r2, [pc, #600]	@ (8020ca0 <_dtoa_r+0x380>)
 8020a46:	4b97      	ldr	r3, [pc, #604]	@ (8020ca4 <_dtoa_r+0x384>)
 8020a48:	f7e1 fdf8 	bl	800263c <__aeabi_dmul>
 8020a4c:	0002      	movs	r2, r0
 8020a4e:	000b      	movs	r3, r1
 8020a50:	0020      	movs	r0, r4
 8020a52:	0029      	movs	r1, r5
 8020a54:	f7e0 fe4a 	bl	80016ec <__aeabi_dadd>
 8020a58:	0004      	movs	r4, r0
 8020a5a:	000d      	movs	r5, r1
 8020a5c:	f7e2 fc74 	bl	8003348 <__aeabi_d2iz>
 8020a60:	2200      	movs	r2, #0
 8020a62:	9004      	str	r0, [sp, #16]
 8020a64:	2300      	movs	r3, #0
 8020a66:	0020      	movs	r0, r4
 8020a68:	0029      	movs	r1, r5
 8020a6a:	f7df fd27 	bl	80004bc <__aeabi_dcmplt>
 8020a6e:	2800      	cmp	r0, #0
 8020a70:	d00b      	beq.n	8020a8a <_dtoa_r+0x16a>
 8020a72:	9804      	ldr	r0, [sp, #16]
 8020a74:	f7e2 fca4 	bl	80033c0 <__aeabi_i2d>
 8020a78:	002b      	movs	r3, r5
 8020a7a:	0022      	movs	r2, r4
 8020a7c:	f7df fd18 	bl	80004b0 <__aeabi_dcmpeq>
 8020a80:	4243      	negs	r3, r0
 8020a82:	4158      	adcs	r0, r3
 8020a84:	9b04      	ldr	r3, [sp, #16]
 8020a86:	1a1b      	subs	r3, r3, r0
 8020a88:	9304      	str	r3, [sp, #16]
 8020a8a:	2301      	movs	r3, #1
 8020a8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8020a8e:	9b04      	ldr	r3, [sp, #16]
 8020a90:	2b16      	cmp	r3, #22
 8020a92:	d810      	bhi.n	8020ab6 <_dtoa_r+0x196>
 8020a94:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020a96:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020a98:	9a04      	ldr	r2, [sp, #16]
 8020a9a:	4b83      	ldr	r3, [pc, #524]	@ (8020ca8 <_dtoa_r+0x388>)
 8020a9c:	00d2      	lsls	r2, r2, #3
 8020a9e:	189b      	adds	r3, r3, r2
 8020aa0:	681a      	ldr	r2, [r3, #0]
 8020aa2:	685b      	ldr	r3, [r3, #4]
 8020aa4:	f7df fd0a 	bl	80004bc <__aeabi_dcmplt>
 8020aa8:	2800      	cmp	r0, #0
 8020aaa:	d047      	beq.n	8020b3c <_dtoa_r+0x21c>
 8020aac:	9b04      	ldr	r3, [sp, #16]
 8020aae:	3b01      	subs	r3, #1
 8020ab0:	9304      	str	r3, [sp, #16]
 8020ab2:	2300      	movs	r3, #0
 8020ab4:	9315      	str	r3, [sp, #84]	@ 0x54
 8020ab6:	2200      	movs	r2, #0
 8020ab8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020aba:	9206      	str	r2, [sp, #24]
 8020abc:	1bdb      	subs	r3, r3, r7
 8020abe:	1e5a      	subs	r2, r3, #1
 8020ac0:	d53e      	bpl.n	8020b40 <_dtoa_r+0x220>
 8020ac2:	2201      	movs	r2, #1
 8020ac4:	1ad3      	subs	r3, r2, r3
 8020ac6:	9306      	str	r3, [sp, #24]
 8020ac8:	2300      	movs	r3, #0
 8020aca:	930d      	str	r3, [sp, #52]	@ 0x34
 8020acc:	9b04      	ldr	r3, [sp, #16]
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	db38      	blt.n	8020b44 <_dtoa_r+0x224>
 8020ad2:	9a04      	ldr	r2, [sp, #16]
 8020ad4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ad6:	4694      	mov	ip, r2
 8020ad8:	4463      	add	r3, ip
 8020ada:	930d      	str	r3, [sp, #52]	@ 0x34
 8020adc:	2300      	movs	r3, #0
 8020ade:	9214      	str	r2, [sp, #80]	@ 0x50
 8020ae0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020ae2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020ae4:	2401      	movs	r4, #1
 8020ae6:	2b09      	cmp	r3, #9
 8020ae8:	d867      	bhi.n	8020bba <_dtoa_r+0x29a>
 8020aea:	2b05      	cmp	r3, #5
 8020aec:	dd02      	ble.n	8020af4 <_dtoa_r+0x1d4>
 8020aee:	2400      	movs	r4, #0
 8020af0:	3b04      	subs	r3, #4
 8020af2:	9322      	str	r3, [sp, #136]	@ 0x88
 8020af4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020af6:	1e98      	subs	r0, r3, #2
 8020af8:	2803      	cmp	r0, #3
 8020afa:	d867      	bhi.n	8020bcc <_dtoa_r+0x2ac>
 8020afc:	f7df fb3e 	bl	800017c <__gnu_thumb1_case_uqi>
 8020b00:	5b383a2b 	.word	0x5b383a2b
 8020b04:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020b06:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8020b08:	18f6      	adds	r6, r6, r3
 8020b0a:	4b68      	ldr	r3, [pc, #416]	@ (8020cac <_dtoa_r+0x38c>)
 8020b0c:	18f2      	adds	r2, r6, r3
 8020b0e:	2a20      	cmp	r2, #32
 8020b10:	dd0f      	ble.n	8020b32 <_dtoa_r+0x212>
 8020b12:	2340      	movs	r3, #64	@ 0x40
 8020b14:	1a9b      	subs	r3, r3, r2
 8020b16:	409f      	lsls	r7, r3
 8020b18:	4b65      	ldr	r3, [pc, #404]	@ (8020cb0 <_dtoa_r+0x390>)
 8020b1a:	0038      	movs	r0, r7
 8020b1c:	18f3      	adds	r3, r6, r3
 8020b1e:	40dc      	lsrs	r4, r3
 8020b20:	4320      	orrs	r0, r4
 8020b22:	f7e2 fc7b 	bl	800341c <__aeabi_ui2d>
 8020b26:	2201      	movs	r2, #1
 8020b28:	4b62      	ldr	r3, [pc, #392]	@ (8020cb4 <_dtoa_r+0x394>)
 8020b2a:	1e77      	subs	r7, r6, #1
 8020b2c:	18cb      	adds	r3, r1, r3
 8020b2e:	9218      	str	r2, [sp, #96]	@ 0x60
 8020b30:	e776      	b.n	8020a20 <_dtoa_r+0x100>
 8020b32:	2320      	movs	r3, #32
 8020b34:	0020      	movs	r0, r4
 8020b36:	1a9b      	subs	r3, r3, r2
 8020b38:	4098      	lsls	r0, r3
 8020b3a:	e7f2      	b.n	8020b22 <_dtoa_r+0x202>
 8020b3c:	9015      	str	r0, [sp, #84]	@ 0x54
 8020b3e:	e7ba      	b.n	8020ab6 <_dtoa_r+0x196>
 8020b40:	920d      	str	r2, [sp, #52]	@ 0x34
 8020b42:	e7c3      	b.n	8020acc <_dtoa_r+0x1ac>
 8020b44:	9b06      	ldr	r3, [sp, #24]
 8020b46:	9a04      	ldr	r2, [sp, #16]
 8020b48:	1a9b      	subs	r3, r3, r2
 8020b4a:	9306      	str	r3, [sp, #24]
 8020b4c:	4253      	negs	r3, r2
 8020b4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020b50:	2300      	movs	r3, #0
 8020b52:	9314      	str	r3, [sp, #80]	@ 0x50
 8020b54:	e7c5      	b.n	8020ae2 <_dtoa_r+0x1c2>
 8020b56:	2300      	movs	r3, #0
 8020b58:	9310      	str	r3, [sp, #64]	@ 0x40
 8020b5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020b5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8020b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b60:	2b00      	cmp	r3, #0
 8020b62:	dc13      	bgt.n	8020b8c <_dtoa_r+0x26c>
 8020b64:	2301      	movs	r3, #1
 8020b66:	001a      	movs	r2, r3
 8020b68:	930e      	str	r3, [sp, #56]	@ 0x38
 8020b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b6c:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020b6e:	e00d      	b.n	8020b8c <_dtoa_r+0x26c>
 8020b70:	2301      	movs	r3, #1
 8020b72:	e7f1      	b.n	8020b58 <_dtoa_r+0x238>
 8020b74:	2300      	movs	r3, #0
 8020b76:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8020b78:	9310      	str	r3, [sp, #64]	@ 0x40
 8020b7a:	4694      	mov	ip, r2
 8020b7c:	9b04      	ldr	r3, [sp, #16]
 8020b7e:	4463      	add	r3, ip
 8020b80:	930e      	str	r3, [sp, #56]	@ 0x38
 8020b82:	3301      	adds	r3, #1
 8020b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	dc00      	bgt.n	8020b8c <_dtoa_r+0x26c>
 8020b8a:	2301      	movs	r3, #1
 8020b8c:	9a03      	ldr	r2, [sp, #12]
 8020b8e:	2100      	movs	r1, #0
 8020b90:	69d0      	ldr	r0, [r2, #28]
 8020b92:	2204      	movs	r2, #4
 8020b94:	0015      	movs	r5, r2
 8020b96:	3514      	adds	r5, #20
 8020b98:	429d      	cmp	r5, r3
 8020b9a:	d91b      	bls.n	8020bd4 <_dtoa_r+0x2b4>
 8020b9c:	6041      	str	r1, [r0, #4]
 8020b9e:	9803      	ldr	r0, [sp, #12]
 8020ba0:	f001 f924 	bl	8021dec <_Balloc>
 8020ba4:	9008      	str	r0, [sp, #32]
 8020ba6:	2800      	cmp	r0, #0
 8020ba8:	d117      	bne.n	8020bda <_dtoa_r+0x2ba>
 8020baa:	21b0      	movs	r1, #176	@ 0xb0
 8020bac:	4b42      	ldr	r3, [pc, #264]	@ (8020cb8 <_dtoa_r+0x398>)
 8020bae:	482e      	ldr	r0, [pc, #184]	@ (8020c68 <_dtoa_r+0x348>)
 8020bb0:	9a08      	ldr	r2, [sp, #32]
 8020bb2:	31ff      	adds	r1, #255	@ 0xff
 8020bb4:	e6c9      	b.n	802094a <_dtoa_r+0x2a>
 8020bb6:	2301      	movs	r3, #1
 8020bb8:	e7dd      	b.n	8020b76 <_dtoa_r+0x256>
 8020bba:	2300      	movs	r3, #0
 8020bbc:	9410      	str	r4, [sp, #64]	@ 0x40
 8020bbe:	9322      	str	r3, [sp, #136]	@ 0x88
 8020bc0:	3b01      	subs	r3, #1
 8020bc2:	930e      	str	r3, [sp, #56]	@ 0x38
 8020bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	3313      	adds	r3, #19
 8020bca:	e7cf      	b.n	8020b6c <_dtoa_r+0x24c>
 8020bcc:	2301      	movs	r3, #1
 8020bce:	9310      	str	r3, [sp, #64]	@ 0x40
 8020bd0:	3b02      	subs	r3, #2
 8020bd2:	e7f6      	b.n	8020bc2 <_dtoa_r+0x2a2>
 8020bd4:	3101      	adds	r1, #1
 8020bd6:	0052      	lsls	r2, r2, #1
 8020bd8:	e7dc      	b.n	8020b94 <_dtoa_r+0x274>
 8020bda:	9b03      	ldr	r3, [sp, #12]
 8020bdc:	9a08      	ldr	r2, [sp, #32]
 8020bde:	69db      	ldr	r3, [r3, #28]
 8020be0:	601a      	str	r2, [r3, #0]
 8020be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020be4:	2b0e      	cmp	r3, #14
 8020be6:	d900      	bls.n	8020bea <_dtoa_r+0x2ca>
 8020be8:	e0d9      	b.n	8020d9e <_dtoa_r+0x47e>
 8020bea:	2c00      	cmp	r4, #0
 8020bec:	d100      	bne.n	8020bf0 <_dtoa_r+0x2d0>
 8020bee:	e0d6      	b.n	8020d9e <_dtoa_r+0x47e>
 8020bf0:	9b04      	ldr	r3, [sp, #16]
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	dd64      	ble.n	8020cc0 <_dtoa_r+0x3a0>
 8020bf6:	210f      	movs	r1, #15
 8020bf8:	9a04      	ldr	r2, [sp, #16]
 8020bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8020ca8 <_dtoa_r+0x388>)
 8020bfc:	400a      	ands	r2, r1
 8020bfe:	00d2      	lsls	r2, r2, #3
 8020c00:	189b      	adds	r3, r3, r2
 8020c02:	681e      	ldr	r6, [r3, #0]
 8020c04:	685f      	ldr	r7, [r3, #4]
 8020c06:	9b04      	ldr	r3, [sp, #16]
 8020c08:	2402      	movs	r4, #2
 8020c0a:	111d      	asrs	r5, r3, #4
 8020c0c:	05db      	lsls	r3, r3, #23
 8020c0e:	d50a      	bpl.n	8020c26 <_dtoa_r+0x306>
 8020c10:	4b2a      	ldr	r3, [pc, #168]	@ (8020cbc <_dtoa_r+0x39c>)
 8020c12:	400d      	ands	r5, r1
 8020c14:	6a1a      	ldr	r2, [r3, #32]
 8020c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020c18:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020c1a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020c1c:	f7e1 f8ca 	bl	8001db4 <__aeabi_ddiv>
 8020c20:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c22:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020c24:	3401      	adds	r4, #1
 8020c26:	4b25      	ldr	r3, [pc, #148]	@ (8020cbc <_dtoa_r+0x39c>)
 8020c28:	930c      	str	r3, [sp, #48]	@ 0x30
 8020c2a:	2d00      	cmp	r5, #0
 8020c2c:	d108      	bne.n	8020c40 <_dtoa_r+0x320>
 8020c2e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020c30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020c32:	0032      	movs	r2, r6
 8020c34:	003b      	movs	r3, r7
 8020c36:	f7e1 f8bd 	bl	8001db4 <__aeabi_ddiv>
 8020c3a:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020c3e:	e05a      	b.n	8020cf6 <_dtoa_r+0x3d6>
 8020c40:	2301      	movs	r3, #1
 8020c42:	421d      	tst	r5, r3
 8020c44:	d009      	beq.n	8020c5a <_dtoa_r+0x33a>
 8020c46:	18e4      	adds	r4, r4, r3
 8020c48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020c4a:	0030      	movs	r0, r6
 8020c4c:	681a      	ldr	r2, [r3, #0]
 8020c4e:	685b      	ldr	r3, [r3, #4]
 8020c50:	0039      	movs	r1, r7
 8020c52:	f7e1 fcf3 	bl	800263c <__aeabi_dmul>
 8020c56:	0006      	movs	r6, r0
 8020c58:	000f      	movs	r7, r1
 8020c5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020c5c:	106d      	asrs	r5, r5, #1
 8020c5e:	3308      	adds	r3, #8
 8020c60:	e7e2      	b.n	8020c28 <_dtoa_r+0x308>
 8020c62:	46c0      	nop			@ (mov r8, r8)
 8020c64:	08026412 	.word	0x08026412
 8020c68:	08026429 	.word	0x08026429
 8020c6c:	7ff00000 	.word	0x7ff00000
 8020c70:	0000270f 	.word	0x0000270f
 8020c74:	0802640e 	.word	0x0802640e
 8020c78:	08026411 	.word	0x08026411
 8020c7c:	080263da 	.word	0x080263da
 8020c80:	080263d9 	.word	0x080263d9
 8020c84:	3ff00000 	.word	0x3ff00000
 8020c88:	fffffc01 	.word	0xfffffc01
 8020c8c:	3ff80000 	.word	0x3ff80000
 8020c90:	636f4361 	.word	0x636f4361
 8020c94:	3fd287a7 	.word	0x3fd287a7
 8020c98:	8b60c8b3 	.word	0x8b60c8b3
 8020c9c:	3fc68a28 	.word	0x3fc68a28
 8020ca0:	509f79fb 	.word	0x509f79fb
 8020ca4:	3fd34413 	.word	0x3fd34413
 8020ca8:	08026580 	.word	0x08026580
 8020cac:	00000432 	.word	0x00000432
 8020cb0:	00000412 	.word	0x00000412
 8020cb4:	fe100000 	.word	0xfe100000
 8020cb8:	08026481 	.word	0x08026481
 8020cbc:	08026558 	.word	0x08026558
 8020cc0:	9b04      	ldr	r3, [sp, #16]
 8020cc2:	2402      	movs	r4, #2
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	d016      	beq.n	8020cf6 <_dtoa_r+0x3d6>
 8020cc8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020cca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020ccc:	220f      	movs	r2, #15
 8020cce:	425d      	negs	r5, r3
 8020cd0:	402a      	ands	r2, r5
 8020cd2:	4bd7      	ldr	r3, [pc, #860]	@ (8021030 <_dtoa_r+0x710>)
 8020cd4:	00d2      	lsls	r2, r2, #3
 8020cd6:	189b      	adds	r3, r3, r2
 8020cd8:	681a      	ldr	r2, [r3, #0]
 8020cda:	685b      	ldr	r3, [r3, #4]
 8020cdc:	f7e1 fcae 	bl	800263c <__aeabi_dmul>
 8020ce0:	2701      	movs	r7, #1
 8020ce2:	2300      	movs	r3, #0
 8020ce4:	900a      	str	r0, [sp, #40]	@ 0x28
 8020ce6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020ce8:	4ed2      	ldr	r6, [pc, #840]	@ (8021034 <_dtoa_r+0x714>)
 8020cea:	112d      	asrs	r5, r5, #4
 8020cec:	2d00      	cmp	r5, #0
 8020cee:	d000      	beq.n	8020cf2 <_dtoa_r+0x3d2>
 8020cf0:	e0ba      	b.n	8020e68 <_dtoa_r+0x548>
 8020cf2:	2b00      	cmp	r3, #0
 8020cf4:	d1a1      	bne.n	8020c3a <_dtoa_r+0x31a>
 8020cf6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020cf8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020cfa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020cfc:	2b00      	cmp	r3, #0
 8020cfe:	d100      	bne.n	8020d02 <_dtoa_r+0x3e2>
 8020d00:	e0bd      	b.n	8020e7e <_dtoa_r+0x55e>
 8020d02:	2200      	movs	r2, #0
 8020d04:	0030      	movs	r0, r6
 8020d06:	0039      	movs	r1, r7
 8020d08:	4bcb      	ldr	r3, [pc, #812]	@ (8021038 <_dtoa_r+0x718>)
 8020d0a:	f7df fbd7 	bl	80004bc <__aeabi_dcmplt>
 8020d0e:	2800      	cmp	r0, #0
 8020d10:	d100      	bne.n	8020d14 <_dtoa_r+0x3f4>
 8020d12:	e0b4      	b.n	8020e7e <_dtoa_r+0x55e>
 8020d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	d100      	bne.n	8020d1c <_dtoa_r+0x3fc>
 8020d1a:	e0b0      	b.n	8020e7e <_dtoa_r+0x55e>
 8020d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d1e:	2b00      	cmp	r3, #0
 8020d20:	dd39      	ble.n	8020d96 <_dtoa_r+0x476>
 8020d22:	9b04      	ldr	r3, [sp, #16]
 8020d24:	2200      	movs	r2, #0
 8020d26:	3b01      	subs	r3, #1
 8020d28:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d2a:	0030      	movs	r0, r6
 8020d2c:	4bc3      	ldr	r3, [pc, #780]	@ (802103c <_dtoa_r+0x71c>)
 8020d2e:	0039      	movs	r1, r7
 8020d30:	f7e1 fc84 	bl	800263c <__aeabi_dmul>
 8020d34:	900a      	str	r0, [sp, #40]	@ 0x28
 8020d36:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d3a:	3401      	adds	r4, #1
 8020d3c:	0020      	movs	r0, r4
 8020d3e:	9311      	str	r3, [sp, #68]	@ 0x44
 8020d40:	f7e2 fb3e 	bl	80033c0 <__aeabi_i2d>
 8020d44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020d48:	f7e1 fc78 	bl	800263c <__aeabi_dmul>
 8020d4c:	4bbc      	ldr	r3, [pc, #752]	@ (8021040 <_dtoa_r+0x720>)
 8020d4e:	2200      	movs	r2, #0
 8020d50:	f7e0 fccc 	bl	80016ec <__aeabi_dadd>
 8020d54:	4bbb      	ldr	r3, [pc, #748]	@ (8021044 <_dtoa_r+0x724>)
 8020d56:	0006      	movs	r6, r0
 8020d58:	18cf      	adds	r7, r1, r3
 8020d5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020d5c:	2b00      	cmp	r3, #0
 8020d5e:	d000      	beq.n	8020d62 <_dtoa_r+0x442>
 8020d60:	e091      	b.n	8020e86 <_dtoa_r+0x566>
 8020d62:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020d64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020d66:	2200      	movs	r2, #0
 8020d68:	4bb7      	ldr	r3, [pc, #732]	@ (8021048 <_dtoa_r+0x728>)
 8020d6a:	f7e1 ff2f 	bl	8002bcc <__aeabi_dsub>
 8020d6e:	0032      	movs	r2, r6
 8020d70:	003b      	movs	r3, r7
 8020d72:	0004      	movs	r4, r0
 8020d74:	000d      	movs	r5, r1
 8020d76:	f7df fbb5 	bl	80004e4 <__aeabi_dcmpgt>
 8020d7a:	2800      	cmp	r0, #0
 8020d7c:	d000      	beq.n	8020d80 <_dtoa_r+0x460>
 8020d7e:	e29d      	b.n	80212bc <_dtoa_r+0x99c>
 8020d80:	2180      	movs	r1, #128	@ 0x80
 8020d82:	0609      	lsls	r1, r1, #24
 8020d84:	187b      	adds	r3, r7, r1
 8020d86:	0032      	movs	r2, r6
 8020d88:	0020      	movs	r0, r4
 8020d8a:	0029      	movs	r1, r5
 8020d8c:	f7df fb96 	bl	80004bc <__aeabi_dcmplt>
 8020d90:	2800      	cmp	r0, #0
 8020d92:	d000      	beq.n	8020d96 <_dtoa_r+0x476>
 8020d94:	e130      	b.n	8020ff8 <_dtoa_r+0x6d8>
 8020d96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020d98:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020d9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8020d9c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020d9e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020da0:	2b00      	cmp	r3, #0
 8020da2:	da00      	bge.n	8020da6 <_dtoa_r+0x486>
 8020da4:	e177      	b.n	8021096 <_dtoa_r+0x776>
 8020da6:	9a04      	ldr	r2, [sp, #16]
 8020da8:	2a0e      	cmp	r2, #14
 8020daa:	dd00      	ble.n	8020dae <_dtoa_r+0x48e>
 8020dac:	e173      	b.n	8021096 <_dtoa_r+0x776>
 8020dae:	4ba0      	ldr	r3, [pc, #640]	@ (8021030 <_dtoa_r+0x710>)
 8020db0:	00d2      	lsls	r2, r2, #3
 8020db2:	189b      	adds	r3, r3, r2
 8020db4:	685c      	ldr	r4, [r3, #4]
 8020db6:	681b      	ldr	r3, [r3, #0]
 8020db8:	9306      	str	r3, [sp, #24]
 8020dba:	9407      	str	r4, [sp, #28]
 8020dbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020dbe:	2b00      	cmp	r3, #0
 8020dc0:	da03      	bge.n	8020dca <_dtoa_r+0x4aa>
 8020dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	dc00      	bgt.n	8020dca <_dtoa_r+0x4aa>
 8020dc8:	e106      	b.n	8020fd8 <_dtoa_r+0x6b8>
 8020dca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020dcc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020dd0:	9d08      	ldr	r5, [sp, #32]
 8020dd2:	3b01      	subs	r3, #1
 8020dd4:	195b      	adds	r3, r3, r5
 8020dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8020dd8:	9a06      	ldr	r2, [sp, #24]
 8020dda:	9b07      	ldr	r3, [sp, #28]
 8020ddc:	0030      	movs	r0, r6
 8020dde:	0039      	movs	r1, r7
 8020de0:	f7e0 ffe8 	bl	8001db4 <__aeabi_ddiv>
 8020de4:	f7e2 fab0 	bl	8003348 <__aeabi_d2iz>
 8020de8:	9009      	str	r0, [sp, #36]	@ 0x24
 8020dea:	f7e2 fae9 	bl	80033c0 <__aeabi_i2d>
 8020dee:	9a06      	ldr	r2, [sp, #24]
 8020df0:	9b07      	ldr	r3, [sp, #28]
 8020df2:	f7e1 fc23 	bl	800263c <__aeabi_dmul>
 8020df6:	0002      	movs	r2, r0
 8020df8:	000b      	movs	r3, r1
 8020dfa:	0030      	movs	r0, r6
 8020dfc:	0039      	movs	r1, r7
 8020dfe:	f7e1 fee5 	bl	8002bcc <__aeabi_dsub>
 8020e02:	002b      	movs	r3, r5
 8020e04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020e06:	3501      	adds	r5, #1
 8020e08:	3230      	adds	r2, #48	@ 0x30
 8020e0a:	701a      	strb	r2, [r3, #0]
 8020e0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020e0e:	002c      	movs	r4, r5
 8020e10:	429a      	cmp	r2, r3
 8020e12:	d000      	beq.n	8020e16 <_dtoa_r+0x4f6>
 8020e14:	e131      	b.n	802107a <_dtoa_r+0x75a>
 8020e16:	0002      	movs	r2, r0
 8020e18:	000b      	movs	r3, r1
 8020e1a:	f7e0 fc67 	bl	80016ec <__aeabi_dadd>
 8020e1e:	9a06      	ldr	r2, [sp, #24]
 8020e20:	9b07      	ldr	r3, [sp, #28]
 8020e22:	0006      	movs	r6, r0
 8020e24:	000f      	movs	r7, r1
 8020e26:	f7df fb5d 	bl	80004e4 <__aeabi_dcmpgt>
 8020e2a:	2800      	cmp	r0, #0
 8020e2c:	d000      	beq.n	8020e30 <_dtoa_r+0x510>
 8020e2e:	e10f      	b.n	8021050 <_dtoa_r+0x730>
 8020e30:	9a06      	ldr	r2, [sp, #24]
 8020e32:	9b07      	ldr	r3, [sp, #28]
 8020e34:	0030      	movs	r0, r6
 8020e36:	0039      	movs	r1, r7
 8020e38:	f7df fb3a 	bl	80004b0 <__aeabi_dcmpeq>
 8020e3c:	2800      	cmp	r0, #0
 8020e3e:	d003      	beq.n	8020e48 <_dtoa_r+0x528>
 8020e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e42:	07dd      	lsls	r5, r3, #31
 8020e44:	d500      	bpl.n	8020e48 <_dtoa_r+0x528>
 8020e46:	e103      	b.n	8021050 <_dtoa_r+0x730>
 8020e48:	9905      	ldr	r1, [sp, #20]
 8020e4a:	9803      	ldr	r0, [sp, #12]
 8020e4c:	f001 f812 	bl	8021e74 <_Bfree>
 8020e50:	2300      	movs	r3, #0
 8020e52:	7023      	strb	r3, [r4, #0]
 8020e54:	9b04      	ldr	r3, [sp, #16]
 8020e56:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020e58:	3301      	adds	r3, #1
 8020e5a:	6013      	str	r3, [r2, #0]
 8020e5c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	d100      	bne.n	8020e64 <_dtoa_r+0x544>
 8020e62:	e5a7      	b.n	80209b4 <_dtoa_r+0x94>
 8020e64:	601c      	str	r4, [r3, #0]
 8020e66:	e5a5      	b.n	80209b4 <_dtoa_r+0x94>
 8020e68:	423d      	tst	r5, r7
 8020e6a:	d005      	beq.n	8020e78 <_dtoa_r+0x558>
 8020e6c:	6832      	ldr	r2, [r6, #0]
 8020e6e:	6873      	ldr	r3, [r6, #4]
 8020e70:	f7e1 fbe4 	bl	800263c <__aeabi_dmul>
 8020e74:	003b      	movs	r3, r7
 8020e76:	3401      	adds	r4, #1
 8020e78:	106d      	asrs	r5, r5, #1
 8020e7a:	3608      	adds	r6, #8
 8020e7c:	e736      	b.n	8020cec <_dtoa_r+0x3cc>
 8020e7e:	9b04      	ldr	r3, [sp, #16]
 8020e80:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020e84:	e75a      	b.n	8020d3c <_dtoa_r+0x41c>
 8020e86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020e88:	4b69      	ldr	r3, [pc, #420]	@ (8021030 <_dtoa_r+0x710>)
 8020e8a:	3a01      	subs	r2, #1
 8020e8c:	00d2      	lsls	r2, r2, #3
 8020e8e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8020e90:	189b      	adds	r3, r3, r2
 8020e92:	681a      	ldr	r2, [r3, #0]
 8020e94:	685b      	ldr	r3, [r3, #4]
 8020e96:	2900      	cmp	r1, #0
 8020e98:	d04c      	beq.n	8020f34 <_dtoa_r+0x614>
 8020e9a:	2000      	movs	r0, #0
 8020e9c:	496b      	ldr	r1, [pc, #428]	@ (802104c <_dtoa_r+0x72c>)
 8020e9e:	f7e0 ff89 	bl	8001db4 <__aeabi_ddiv>
 8020ea2:	0032      	movs	r2, r6
 8020ea4:	003b      	movs	r3, r7
 8020ea6:	f7e1 fe91 	bl	8002bcc <__aeabi_dsub>
 8020eaa:	9a08      	ldr	r2, [sp, #32]
 8020eac:	0006      	movs	r6, r0
 8020eae:	4694      	mov	ip, r2
 8020eb0:	000f      	movs	r7, r1
 8020eb2:	9b08      	ldr	r3, [sp, #32]
 8020eb4:	9316      	str	r3, [sp, #88]	@ 0x58
 8020eb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020eb8:	4463      	add	r3, ip
 8020eba:	9311      	str	r3, [sp, #68]	@ 0x44
 8020ebc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020ebe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020ec0:	f7e2 fa42 	bl	8003348 <__aeabi_d2iz>
 8020ec4:	0005      	movs	r5, r0
 8020ec6:	f7e2 fa7b 	bl	80033c0 <__aeabi_i2d>
 8020eca:	0002      	movs	r2, r0
 8020ecc:	000b      	movs	r3, r1
 8020ece:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020ed0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020ed2:	f7e1 fe7b 	bl	8002bcc <__aeabi_dsub>
 8020ed6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020ed8:	3530      	adds	r5, #48	@ 0x30
 8020eda:	1c5c      	adds	r4, r3, #1
 8020edc:	701d      	strb	r5, [r3, #0]
 8020ede:	0032      	movs	r2, r6
 8020ee0:	003b      	movs	r3, r7
 8020ee2:	900a      	str	r0, [sp, #40]	@ 0x28
 8020ee4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020ee6:	f7df fae9 	bl	80004bc <__aeabi_dcmplt>
 8020eea:	2800      	cmp	r0, #0
 8020eec:	d16a      	bne.n	8020fc4 <_dtoa_r+0x6a4>
 8020eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020ef0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020ef2:	2000      	movs	r0, #0
 8020ef4:	4950      	ldr	r1, [pc, #320]	@ (8021038 <_dtoa_r+0x718>)
 8020ef6:	f7e1 fe69 	bl	8002bcc <__aeabi_dsub>
 8020efa:	0032      	movs	r2, r6
 8020efc:	003b      	movs	r3, r7
 8020efe:	f7df fadd 	bl	80004bc <__aeabi_dcmplt>
 8020f02:	2800      	cmp	r0, #0
 8020f04:	d000      	beq.n	8020f08 <_dtoa_r+0x5e8>
 8020f06:	e0a5      	b.n	8021054 <_dtoa_r+0x734>
 8020f08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020f0a:	42a3      	cmp	r3, r4
 8020f0c:	d100      	bne.n	8020f10 <_dtoa_r+0x5f0>
 8020f0e:	e742      	b.n	8020d96 <_dtoa_r+0x476>
 8020f10:	2200      	movs	r2, #0
 8020f12:	0030      	movs	r0, r6
 8020f14:	0039      	movs	r1, r7
 8020f16:	4b49      	ldr	r3, [pc, #292]	@ (802103c <_dtoa_r+0x71c>)
 8020f18:	f7e1 fb90 	bl	800263c <__aeabi_dmul>
 8020f1c:	2200      	movs	r2, #0
 8020f1e:	0006      	movs	r6, r0
 8020f20:	000f      	movs	r7, r1
 8020f22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020f24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f26:	4b45      	ldr	r3, [pc, #276]	@ (802103c <_dtoa_r+0x71c>)
 8020f28:	f7e1 fb88 	bl	800263c <__aeabi_dmul>
 8020f2c:	9416      	str	r4, [sp, #88]	@ 0x58
 8020f2e:	900a      	str	r0, [sp, #40]	@ 0x28
 8020f30:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020f32:	e7c3      	b.n	8020ebc <_dtoa_r+0x59c>
 8020f34:	0030      	movs	r0, r6
 8020f36:	0039      	movs	r1, r7
 8020f38:	f7e1 fb80 	bl	800263c <__aeabi_dmul>
 8020f3c:	9d08      	ldr	r5, [sp, #32]
 8020f3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020f40:	002b      	movs	r3, r5
 8020f42:	4694      	mov	ip, r2
 8020f44:	9016      	str	r0, [sp, #88]	@ 0x58
 8020f46:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020f48:	4463      	add	r3, ip
 8020f4a:	9319      	str	r3, [sp, #100]	@ 0x64
 8020f4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020f4e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f50:	f7e2 f9fa 	bl	8003348 <__aeabi_d2iz>
 8020f54:	0004      	movs	r4, r0
 8020f56:	f7e2 fa33 	bl	80033c0 <__aeabi_i2d>
 8020f5a:	000b      	movs	r3, r1
 8020f5c:	0002      	movs	r2, r0
 8020f5e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020f60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f62:	f7e1 fe33 	bl	8002bcc <__aeabi_dsub>
 8020f66:	3430      	adds	r4, #48	@ 0x30
 8020f68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020f6a:	702c      	strb	r4, [r5, #0]
 8020f6c:	3501      	adds	r5, #1
 8020f6e:	0006      	movs	r6, r0
 8020f70:	000f      	movs	r7, r1
 8020f72:	42ab      	cmp	r3, r5
 8020f74:	d129      	bne.n	8020fca <_dtoa_r+0x6aa>
 8020f76:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020f78:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020f7a:	9b08      	ldr	r3, [sp, #32]
 8020f7c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020f7e:	469c      	mov	ip, r3
 8020f80:	2200      	movs	r2, #0
 8020f82:	4b32      	ldr	r3, [pc, #200]	@ (802104c <_dtoa_r+0x72c>)
 8020f84:	4464      	add	r4, ip
 8020f86:	f7e0 fbb1 	bl	80016ec <__aeabi_dadd>
 8020f8a:	0002      	movs	r2, r0
 8020f8c:	000b      	movs	r3, r1
 8020f8e:	0030      	movs	r0, r6
 8020f90:	0039      	movs	r1, r7
 8020f92:	f7df faa7 	bl	80004e4 <__aeabi_dcmpgt>
 8020f96:	2800      	cmp	r0, #0
 8020f98:	d15c      	bne.n	8021054 <_dtoa_r+0x734>
 8020f9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020f9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020f9e:	2000      	movs	r0, #0
 8020fa0:	492a      	ldr	r1, [pc, #168]	@ (802104c <_dtoa_r+0x72c>)
 8020fa2:	f7e1 fe13 	bl	8002bcc <__aeabi_dsub>
 8020fa6:	0002      	movs	r2, r0
 8020fa8:	000b      	movs	r3, r1
 8020faa:	0030      	movs	r0, r6
 8020fac:	0039      	movs	r1, r7
 8020fae:	f7df fa85 	bl	80004bc <__aeabi_dcmplt>
 8020fb2:	2800      	cmp	r0, #0
 8020fb4:	d100      	bne.n	8020fb8 <_dtoa_r+0x698>
 8020fb6:	e6ee      	b.n	8020d96 <_dtoa_r+0x476>
 8020fb8:	0023      	movs	r3, r4
 8020fba:	3c01      	subs	r4, #1
 8020fbc:	7822      	ldrb	r2, [r4, #0]
 8020fbe:	2a30      	cmp	r2, #48	@ 0x30
 8020fc0:	d0fa      	beq.n	8020fb8 <_dtoa_r+0x698>
 8020fc2:	001c      	movs	r4, r3
 8020fc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020fc6:	9304      	str	r3, [sp, #16]
 8020fc8:	e73e      	b.n	8020e48 <_dtoa_r+0x528>
 8020fca:	2200      	movs	r2, #0
 8020fcc:	4b1b      	ldr	r3, [pc, #108]	@ (802103c <_dtoa_r+0x71c>)
 8020fce:	f7e1 fb35 	bl	800263c <__aeabi_dmul>
 8020fd2:	900a      	str	r0, [sp, #40]	@ 0x28
 8020fd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020fd6:	e7b9      	b.n	8020f4c <_dtoa_r+0x62c>
 8020fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fda:	2b00      	cmp	r3, #0
 8020fdc:	d10c      	bne.n	8020ff8 <_dtoa_r+0x6d8>
 8020fde:	9806      	ldr	r0, [sp, #24]
 8020fe0:	9907      	ldr	r1, [sp, #28]
 8020fe2:	2200      	movs	r2, #0
 8020fe4:	4b18      	ldr	r3, [pc, #96]	@ (8021048 <_dtoa_r+0x728>)
 8020fe6:	f7e1 fb29 	bl	800263c <__aeabi_dmul>
 8020fea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020fec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020fee:	f7df fa83 	bl	80004f8 <__aeabi_dcmpge>
 8020ff2:	2800      	cmp	r0, #0
 8020ff4:	d100      	bne.n	8020ff8 <_dtoa_r+0x6d8>
 8020ff6:	e164      	b.n	80212c2 <_dtoa_r+0x9a2>
 8020ff8:	2600      	movs	r6, #0
 8020ffa:	0037      	movs	r7, r6
 8020ffc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020ffe:	9c08      	ldr	r4, [sp, #32]
 8021000:	43db      	mvns	r3, r3
 8021002:	930c      	str	r3, [sp, #48]	@ 0x30
 8021004:	2300      	movs	r3, #0
 8021006:	9304      	str	r3, [sp, #16]
 8021008:	0031      	movs	r1, r6
 802100a:	9803      	ldr	r0, [sp, #12]
 802100c:	f000 ff32 	bl	8021e74 <_Bfree>
 8021010:	2f00      	cmp	r7, #0
 8021012:	d0d7      	beq.n	8020fc4 <_dtoa_r+0x6a4>
 8021014:	9b04      	ldr	r3, [sp, #16]
 8021016:	2b00      	cmp	r3, #0
 8021018:	d005      	beq.n	8021026 <_dtoa_r+0x706>
 802101a:	42bb      	cmp	r3, r7
 802101c:	d003      	beq.n	8021026 <_dtoa_r+0x706>
 802101e:	0019      	movs	r1, r3
 8021020:	9803      	ldr	r0, [sp, #12]
 8021022:	f000 ff27 	bl	8021e74 <_Bfree>
 8021026:	0039      	movs	r1, r7
 8021028:	9803      	ldr	r0, [sp, #12]
 802102a:	f000 ff23 	bl	8021e74 <_Bfree>
 802102e:	e7c9      	b.n	8020fc4 <_dtoa_r+0x6a4>
 8021030:	08026580 	.word	0x08026580
 8021034:	08026558 	.word	0x08026558
 8021038:	3ff00000 	.word	0x3ff00000
 802103c:	40240000 	.word	0x40240000
 8021040:	401c0000 	.word	0x401c0000
 8021044:	fcc00000 	.word	0xfcc00000
 8021048:	40140000 	.word	0x40140000
 802104c:	3fe00000 	.word	0x3fe00000
 8021050:	9b04      	ldr	r3, [sp, #16]
 8021052:	930c      	str	r3, [sp, #48]	@ 0x30
 8021054:	0023      	movs	r3, r4
 8021056:	001c      	movs	r4, r3
 8021058:	3b01      	subs	r3, #1
 802105a:	781a      	ldrb	r2, [r3, #0]
 802105c:	2a39      	cmp	r2, #57	@ 0x39
 802105e:	d108      	bne.n	8021072 <_dtoa_r+0x752>
 8021060:	9a08      	ldr	r2, [sp, #32]
 8021062:	429a      	cmp	r2, r3
 8021064:	d1f7      	bne.n	8021056 <_dtoa_r+0x736>
 8021066:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021068:	9908      	ldr	r1, [sp, #32]
 802106a:	3201      	adds	r2, #1
 802106c:	920c      	str	r2, [sp, #48]	@ 0x30
 802106e:	2230      	movs	r2, #48	@ 0x30
 8021070:	700a      	strb	r2, [r1, #0]
 8021072:	781a      	ldrb	r2, [r3, #0]
 8021074:	3201      	adds	r2, #1
 8021076:	701a      	strb	r2, [r3, #0]
 8021078:	e7a4      	b.n	8020fc4 <_dtoa_r+0x6a4>
 802107a:	2200      	movs	r2, #0
 802107c:	4bc6      	ldr	r3, [pc, #792]	@ (8021398 <_dtoa_r+0xa78>)
 802107e:	f7e1 fadd 	bl	800263c <__aeabi_dmul>
 8021082:	2200      	movs	r2, #0
 8021084:	2300      	movs	r3, #0
 8021086:	0006      	movs	r6, r0
 8021088:	000f      	movs	r7, r1
 802108a:	f7df fa11 	bl	80004b0 <__aeabi_dcmpeq>
 802108e:	2800      	cmp	r0, #0
 8021090:	d100      	bne.n	8021094 <_dtoa_r+0x774>
 8021092:	e6a1      	b.n	8020dd8 <_dtoa_r+0x4b8>
 8021094:	e6d8      	b.n	8020e48 <_dtoa_r+0x528>
 8021096:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021098:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802109a:	9c06      	ldr	r4, [sp, #24]
 802109c:	2f00      	cmp	r7, #0
 802109e:	d014      	beq.n	80210ca <_dtoa_r+0x7aa>
 80210a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80210a2:	2a01      	cmp	r2, #1
 80210a4:	dd00      	ble.n	80210a8 <_dtoa_r+0x788>
 80210a6:	e0c8      	b.n	802123a <_dtoa_r+0x91a>
 80210a8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80210aa:	2a00      	cmp	r2, #0
 80210ac:	d100      	bne.n	80210b0 <_dtoa_r+0x790>
 80210ae:	e0be      	b.n	802122e <_dtoa_r+0x90e>
 80210b0:	4aba      	ldr	r2, [pc, #744]	@ (802139c <_dtoa_r+0xa7c>)
 80210b2:	189b      	adds	r3, r3, r2
 80210b4:	9a06      	ldr	r2, [sp, #24]
 80210b6:	2101      	movs	r1, #1
 80210b8:	18d2      	adds	r2, r2, r3
 80210ba:	9206      	str	r2, [sp, #24]
 80210bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80210be:	9803      	ldr	r0, [sp, #12]
 80210c0:	18d3      	adds	r3, r2, r3
 80210c2:	930d      	str	r3, [sp, #52]	@ 0x34
 80210c4:	f000 ffda 	bl	802207c <__i2b>
 80210c8:	0007      	movs	r7, r0
 80210ca:	2c00      	cmp	r4, #0
 80210cc:	d00e      	beq.n	80210ec <_dtoa_r+0x7cc>
 80210ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	dd0b      	ble.n	80210ec <_dtoa_r+0x7cc>
 80210d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80210d6:	0023      	movs	r3, r4
 80210d8:	4294      	cmp	r4, r2
 80210da:	dd00      	ble.n	80210de <_dtoa_r+0x7be>
 80210dc:	0013      	movs	r3, r2
 80210de:	9a06      	ldr	r2, [sp, #24]
 80210e0:	1ae4      	subs	r4, r4, r3
 80210e2:	1ad2      	subs	r2, r2, r3
 80210e4:	9206      	str	r2, [sp, #24]
 80210e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80210e8:	1ad3      	subs	r3, r2, r3
 80210ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80210ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80210ee:	2b00      	cmp	r3, #0
 80210f0:	d01f      	beq.n	8021132 <_dtoa_r+0x812>
 80210f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80210f4:	2b00      	cmp	r3, #0
 80210f6:	d100      	bne.n	80210fa <_dtoa_r+0x7da>
 80210f8:	e0b5      	b.n	8021266 <_dtoa_r+0x946>
 80210fa:	2d00      	cmp	r5, #0
 80210fc:	d010      	beq.n	8021120 <_dtoa_r+0x800>
 80210fe:	0039      	movs	r1, r7
 8021100:	002a      	movs	r2, r5
 8021102:	9803      	ldr	r0, [sp, #12]
 8021104:	f001 f884 	bl	8022210 <__pow5mult>
 8021108:	9a05      	ldr	r2, [sp, #20]
 802110a:	0001      	movs	r1, r0
 802110c:	0007      	movs	r7, r0
 802110e:	9803      	ldr	r0, [sp, #12]
 8021110:	f000 ffcc 	bl	80220ac <__multiply>
 8021114:	0006      	movs	r6, r0
 8021116:	9905      	ldr	r1, [sp, #20]
 8021118:	9803      	ldr	r0, [sp, #12]
 802111a:	f000 feab 	bl	8021e74 <_Bfree>
 802111e:	9605      	str	r6, [sp, #20]
 8021120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021122:	1b5a      	subs	r2, r3, r5
 8021124:	42ab      	cmp	r3, r5
 8021126:	d004      	beq.n	8021132 <_dtoa_r+0x812>
 8021128:	9905      	ldr	r1, [sp, #20]
 802112a:	9803      	ldr	r0, [sp, #12]
 802112c:	f001 f870 	bl	8022210 <__pow5mult>
 8021130:	9005      	str	r0, [sp, #20]
 8021132:	2101      	movs	r1, #1
 8021134:	9803      	ldr	r0, [sp, #12]
 8021136:	f000 ffa1 	bl	802207c <__i2b>
 802113a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802113c:	0006      	movs	r6, r0
 802113e:	2b00      	cmp	r3, #0
 8021140:	d100      	bne.n	8021144 <_dtoa_r+0x824>
 8021142:	e1bc      	b.n	80214be <_dtoa_r+0xb9e>
 8021144:	001a      	movs	r2, r3
 8021146:	0001      	movs	r1, r0
 8021148:	9803      	ldr	r0, [sp, #12]
 802114a:	f001 f861 	bl	8022210 <__pow5mult>
 802114e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021150:	0006      	movs	r6, r0
 8021152:	2500      	movs	r5, #0
 8021154:	2b01      	cmp	r3, #1
 8021156:	dc16      	bgt.n	8021186 <_dtoa_r+0x866>
 8021158:	2500      	movs	r5, #0
 802115a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802115c:	42ab      	cmp	r3, r5
 802115e:	d10e      	bne.n	802117e <_dtoa_r+0x85e>
 8021160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021162:	031b      	lsls	r3, r3, #12
 8021164:	42ab      	cmp	r3, r5
 8021166:	d10a      	bne.n	802117e <_dtoa_r+0x85e>
 8021168:	4b8d      	ldr	r3, [pc, #564]	@ (80213a0 <_dtoa_r+0xa80>)
 802116a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802116c:	4213      	tst	r3, r2
 802116e:	d006      	beq.n	802117e <_dtoa_r+0x85e>
 8021170:	9b06      	ldr	r3, [sp, #24]
 8021172:	3501      	adds	r5, #1
 8021174:	3301      	adds	r3, #1
 8021176:	9306      	str	r3, [sp, #24]
 8021178:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802117a:	3301      	adds	r3, #1
 802117c:	930d      	str	r3, [sp, #52]	@ 0x34
 802117e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8021180:	2001      	movs	r0, #1
 8021182:	2b00      	cmp	r3, #0
 8021184:	d008      	beq.n	8021198 <_dtoa_r+0x878>
 8021186:	6933      	ldr	r3, [r6, #16]
 8021188:	3303      	adds	r3, #3
 802118a:	009b      	lsls	r3, r3, #2
 802118c:	18f3      	adds	r3, r6, r3
 802118e:	6858      	ldr	r0, [r3, #4]
 8021190:	f000 ff24 	bl	8021fdc <__hi0bits>
 8021194:	2320      	movs	r3, #32
 8021196:	1a18      	subs	r0, r3, r0
 8021198:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802119a:	1818      	adds	r0, r3, r0
 802119c:	0002      	movs	r2, r0
 802119e:	231f      	movs	r3, #31
 80211a0:	401a      	ands	r2, r3
 80211a2:	4218      	tst	r0, r3
 80211a4:	d065      	beq.n	8021272 <_dtoa_r+0x952>
 80211a6:	3301      	adds	r3, #1
 80211a8:	1a9b      	subs	r3, r3, r2
 80211aa:	2b04      	cmp	r3, #4
 80211ac:	dd5d      	ble.n	802126a <_dtoa_r+0x94a>
 80211ae:	231c      	movs	r3, #28
 80211b0:	1a9b      	subs	r3, r3, r2
 80211b2:	9a06      	ldr	r2, [sp, #24]
 80211b4:	18e4      	adds	r4, r4, r3
 80211b6:	18d2      	adds	r2, r2, r3
 80211b8:	9206      	str	r2, [sp, #24]
 80211ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80211bc:	18d3      	adds	r3, r2, r3
 80211be:	930d      	str	r3, [sp, #52]	@ 0x34
 80211c0:	9b06      	ldr	r3, [sp, #24]
 80211c2:	2b00      	cmp	r3, #0
 80211c4:	dd05      	ble.n	80211d2 <_dtoa_r+0x8b2>
 80211c6:	001a      	movs	r2, r3
 80211c8:	9905      	ldr	r1, [sp, #20]
 80211ca:	9803      	ldr	r0, [sp, #12]
 80211cc:	f001 f87c 	bl	80222c8 <__lshift>
 80211d0:	9005      	str	r0, [sp, #20]
 80211d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	dd05      	ble.n	80211e4 <_dtoa_r+0x8c4>
 80211d8:	0031      	movs	r1, r6
 80211da:	001a      	movs	r2, r3
 80211dc:	9803      	ldr	r0, [sp, #12]
 80211de:	f001 f873 	bl	80222c8 <__lshift>
 80211e2:	0006      	movs	r6, r0
 80211e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d045      	beq.n	8021276 <_dtoa_r+0x956>
 80211ea:	0031      	movs	r1, r6
 80211ec:	9805      	ldr	r0, [sp, #20]
 80211ee:	f001 f8d7 	bl	80223a0 <__mcmp>
 80211f2:	2800      	cmp	r0, #0
 80211f4:	da3f      	bge.n	8021276 <_dtoa_r+0x956>
 80211f6:	9b04      	ldr	r3, [sp, #16]
 80211f8:	220a      	movs	r2, #10
 80211fa:	3b01      	subs	r3, #1
 80211fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80211fe:	9905      	ldr	r1, [sp, #20]
 8021200:	2300      	movs	r3, #0
 8021202:	9803      	ldr	r0, [sp, #12]
 8021204:	f000 fe5a 	bl	8021ebc <__multadd>
 8021208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802120a:	9005      	str	r0, [sp, #20]
 802120c:	2b00      	cmp	r3, #0
 802120e:	d100      	bne.n	8021212 <_dtoa_r+0x8f2>
 8021210:	e15c      	b.n	80214cc <_dtoa_r+0xbac>
 8021212:	2300      	movs	r3, #0
 8021214:	0039      	movs	r1, r7
 8021216:	220a      	movs	r2, #10
 8021218:	9803      	ldr	r0, [sp, #12]
 802121a:	f000 fe4f 	bl	8021ebc <__multadd>
 802121e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021220:	0007      	movs	r7, r0
 8021222:	2b00      	cmp	r3, #0
 8021224:	dc55      	bgt.n	80212d2 <_dtoa_r+0x9b2>
 8021226:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021228:	2b02      	cmp	r3, #2
 802122a:	dc2d      	bgt.n	8021288 <_dtoa_r+0x968>
 802122c:	e051      	b.n	80212d2 <_dtoa_r+0x9b2>
 802122e:	2336      	movs	r3, #54	@ 0x36
 8021230:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8021232:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8021234:	9c06      	ldr	r4, [sp, #24]
 8021236:	1a9b      	subs	r3, r3, r2
 8021238:	e73c      	b.n	80210b4 <_dtoa_r+0x794>
 802123a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802123c:	1e5d      	subs	r5, r3, #1
 802123e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021240:	42ab      	cmp	r3, r5
 8021242:	db08      	blt.n	8021256 <_dtoa_r+0x936>
 8021244:	1b5d      	subs	r5, r3, r5
 8021246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021248:	9c06      	ldr	r4, [sp, #24]
 802124a:	2b00      	cmp	r3, #0
 802124c:	db00      	blt.n	8021250 <_dtoa_r+0x930>
 802124e:	e731      	b.n	80210b4 <_dtoa_r+0x794>
 8021250:	1ae4      	subs	r4, r4, r3
 8021252:	2300      	movs	r3, #0
 8021254:	e72e      	b.n	80210b4 <_dtoa_r+0x794>
 8021256:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021258:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802125a:	1aeb      	subs	r3, r5, r3
 802125c:	18d3      	adds	r3, r2, r3
 802125e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8021260:	9314      	str	r3, [sp, #80]	@ 0x50
 8021262:	2500      	movs	r5, #0
 8021264:	e7ef      	b.n	8021246 <_dtoa_r+0x926>
 8021266:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021268:	e75e      	b.n	8021128 <_dtoa_r+0x808>
 802126a:	2b04      	cmp	r3, #4
 802126c:	d0a8      	beq.n	80211c0 <_dtoa_r+0x8a0>
 802126e:	331c      	adds	r3, #28
 8021270:	e79f      	b.n	80211b2 <_dtoa_r+0x892>
 8021272:	0013      	movs	r3, r2
 8021274:	e7fb      	b.n	802126e <_dtoa_r+0x94e>
 8021276:	9b04      	ldr	r3, [sp, #16]
 8021278:	930c      	str	r3, [sp, #48]	@ 0x30
 802127a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802127c:	930e      	str	r3, [sp, #56]	@ 0x38
 802127e:	2b00      	cmp	r3, #0
 8021280:	dc23      	bgt.n	80212ca <_dtoa_r+0x9aa>
 8021282:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8021284:	2b02      	cmp	r3, #2
 8021286:	dd20      	ble.n	80212ca <_dtoa_r+0x9aa>
 8021288:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802128a:	2b00      	cmp	r3, #0
 802128c:	d000      	beq.n	8021290 <_dtoa_r+0x970>
 802128e:	e6b5      	b.n	8020ffc <_dtoa_r+0x6dc>
 8021290:	0031      	movs	r1, r6
 8021292:	2205      	movs	r2, #5
 8021294:	9803      	ldr	r0, [sp, #12]
 8021296:	f000 fe11 	bl	8021ebc <__multadd>
 802129a:	0006      	movs	r6, r0
 802129c:	0001      	movs	r1, r0
 802129e:	9805      	ldr	r0, [sp, #20]
 80212a0:	f001 f87e 	bl	80223a0 <__mcmp>
 80212a4:	2800      	cmp	r0, #0
 80212a6:	dc00      	bgt.n	80212aa <_dtoa_r+0x98a>
 80212a8:	e6a8      	b.n	8020ffc <_dtoa_r+0x6dc>
 80212aa:	9b08      	ldr	r3, [sp, #32]
 80212ac:	9a08      	ldr	r2, [sp, #32]
 80212ae:	1c5c      	adds	r4, r3, #1
 80212b0:	2331      	movs	r3, #49	@ 0x31
 80212b2:	7013      	strb	r3, [r2, #0]
 80212b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80212b6:	3301      	adds	r3, #1
 80212b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80212ba:	e6a3      	b.n	8021004 <_dtoa_r+0x6e4>
 80212bc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80212be:	0037      	movs	r7, r6
 80212c0:	e7f3      	b.n	80212aa <_dtoa_r+0x98a>
 80212c2:	9b04      	ldr	r3, [sp, #16]
 80212c4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80212c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80212c8:	e7f9      	b.n	80212be <_dtoa_r+0x99e>
 80212ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	d100      	bne.n	80212d2 <_dtoa_r+0x9b2>
 80212d0:	e100      	b.n	80214d4 <_dtoa_r+0xbb4>
 80212d2:	2c00      	cmp	r4, #0
 80212d4:	dd05      	ble.n	80212e2 <_dtoa_r+0x9c2>
 80212d6:	0039      	movs	r1, r7
 80212d8:	0022      	movs	r2, r4
 80212da:	9803      	ldr	r0, [sp, #12]
 80212dc:	f000 fff4 	bl	80222c8 <__lshift>
 80212e0:	0007      	movs	r7, r0
 80212e2:	0038      	movs	r0, r7
 80212e4:	2d00      	cmp	r5, #0
 80212e6:	d018      	beq.n	802131a <_dtoa_r+0x9fa>
 80212e8:	6879      	ldr	r1, [r7, #4]
 80212ea:	9803      	ldr	r0, [sp, #12]
 80212ec:	f000 fd7e 	bl	8021dec <_Balloc>
 80212f0:	1e04      	subs	r4, r0, #0
 80212f2:	d105      	bne.n	8021300 <_dtoa_r+0x9e0>
 80212f4:	0022      	movs	r2, r4
 80212f6:	4b2b      	ldr	r3, [pc, #172]	@ (80213a4 <_dtoa_r+0xa84>)
 80212f8:	482b      	ldr	r0, [pc, #172]	@ (80213a8 <_dtoa_r+0xa88>)
 80212fa:	492c      	ldr	r1, [pc, #176]	@ (80213ac <_dtoa_r+0xa8c>)
 80212fc:	f7ff fb25 	bl	802094a <_dtoa_r+0x2a>
 8021300:	0039      	movs	r1, r7
 8021302:	693a      	ldr	r2, [r7, #16]
 8021304:	310c      	adds	r1, #12
 8021306:	3202      	adds	r2, #2
 8021308:	0092      	lsls	r2, r2, #2
 802130a:	300c      	adds	r0, #12
 802130c:	f7ff fa6a 	bl	80207e4 <memcpy>
 8021310:	2201      	movs	r2, #1
 8021312:	0021      	movs	r1, r4
 8021314:	9803      	ldr	r0, [sp, #12]
 8021316:	f000 ffd7 	bl	80222c8 <__lshift>
 802131a:	9b08      	ldr	r3, [sp, #32]
 802131c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802131e:	9306      	str	r3, [sp, #24]
 8021320:	3b01      	subs	r3, #1
 8021322:	189b      	adds	r3, r3, r2
 8021324:	2201      	movs	r2, #1
 8021326:	9704      	str	r7, [sp, #16]
 8021328:	0007      	movs	r7, r0
 802132a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802132c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802132e:	4013      	ands	r3, r2
 8021330:	930e      	str	r3, [sp, #56]	@ 0x38
 8021332:	0031      	movs	r1, r6
 8021334:	9805      	ldr	r0, [sp, #20]
 8021336:	f7ff fa65 	bl	8020804 <quorem>
 802133a:	9904      	ldr	r1, [sp, #16]
 802133c:	0005      	movs	r5, r0
 802133e:	900a      	str	r0, [sp, #40]	@ 0x28
 8021340:	9805      	ldr	r0, [sp, #20]
 8021342:	f001 f82d 	bl	80223a0 <__mcmp>
 8021346:	003a      	movs	r2, r7
 8021348:	900d      	str	r0, [sp, #52]	@ 0x34
 802134a:	0031      	movs	r1, r6
 802134c:	9803      	ldr	r0, [sp, #12]
 802134e:	f001 f843 	bl	80223d8 <__mdiff>
 8021352:	2201      	movs	r2, #1
 8021354:	68c3      	ldr	r3, [r0, #12]
 8021356:	0004      	movs	r4, r0
 8021358:	3530      	adds	r5, #48	@ 0x30
 802135a:	9209      	str	r2, [sp, #36]	@ 0x24
 802135c:	2b00      	cmp	r3, #0
 802135e:	d104      	bne.n	802136a <_dtoa_r+0xa4a>
 8021360:	0001      	movs	r1, r0
 8021362:	9805      	ldr	r0, [sp, #20]
 8021364:	f001 f81c 	bl	80223a0 <__mcmp>
 8021368:	9009      	str	r0, [sp, #36]	@ 0x24
 802136a:	0021      	movs	r1, r4
 802136c:	9803      	ldr	r0, [sp, #12]
 802136e:	f000 fd81 	bl	8021e74 <_Bfree>
 8021372:	9b06      	ldr	r3, [sp, #24]
 8021374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021376:	1c5c      	adds	r4, r3, #1
 8021378:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802137a:	4313      	orrs	r3, r2
 802137c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802137e:	4313      	orrs	r3, r2
 8021380:	d116      	bne.n	80213b0 <_dtoa_r+0xa90>
 8021382:	2d39      	cmp	r5, #57	@ 0x39
 8021384:	d02f      	beq.n	80213e6 <_dtoa_r+0xac6>
 8021386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021388:	2b00      	cmp	r3, #0
 802138a:	dd01      	ble.n	8021390 <_dtoa_r+0xa70>
 802138c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802138e:	3531      	adds	r5, #49	@ 0x31
 8021390:	9b06      	ldr	r3, [sp, #24]
 8021392:	701d      	strb	r5, [r3, #0]
 8021394:	e638      	b.n	8021008 <_dtoa_r+0x6e8>
 8021396:	46c0      	nop			@ (mov r8, r8)
 8021398:	40240000 	.word	0x40240000
 802139c:	00000433 	.word	0x00000433
 80213a0:	7ff00000 	.word	0x7ff00000
 80213a4:	08026481 	.word	0x08026481
 80213a8:	08026429 	.word	0x08026429
 80213ac:	000002ef 	.word	0x000002ef
 80213b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	db04      	blt.n	80213c0 <_dtoa_r+0xaa0>
 80213b6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80213b8:	4313      	orrs	r3, r2
 80213ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80213bc:	4313      	orrs	r3, r2
 80213be:	d11e      	bne.n	80213fe <_dtoa_r+0xade>
 80213c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213c2:	2b00      	cmp	r3, #0
 80213c4:	dde4      	ble.n	8021390 <_dtoa_r+0xa70>
 80213c6:	9905      	ldr	r1, [sp, #20]
 80213c8:	2201      	movs	r2, #1
 80213ca:	9803      	ldr	r0, [sp, #12]
 80213cc:	f000 ff7c 	bl	80222c8 <__lshift>
 80213d0:	0031      	movs	r1, r6
 80213d2:	9005      	str	r0, [sp, #20]
 80213d4:	f000 ffe4 	bl	80223a0 <__mcmp>
 80213d8:	2800      	cmp	r0, #0
 80213da:	dc02      	bgt.n	80213e2 <_dtoa_r+0xac2>
 80213dc:	d1d8      	bne.n	8021390 <_dtoa_r+0xa70>
 80213de:	07eb      	lsls	r3, r5, #31
 80213e0:	d5d6      	bpl.n	8021390 <_dtoa_r+0xa70>
 80213e2:	2d39      	cmp	r5, #57	@ 0x39
 80213e4:	d1d2      	bne.n	802138c <_dtoa_r+0xa6c>
 80213e6:	2339      	movs	r3, #57	@ 0x39
 80213e8:	9a06      	ldr	r2, [sp, #24]
 80213ea:	7013      	strb	r3, [r2, #0]
 80213ec:	0023      	movs	r3, r4
 80213ee:	001c      	movs	r4, r3
 80213f0:	3b01      	subs	r3, #1
 80213f2:	781a      	ldrb	r2, [r3, #0]
 80213f4:	2a39      	cmp	r2, #57	@ 0x39
 80213f6:	d04f      	beq.n	8021498 <_dtoa_r+0xb78>
 80213f8:	3201      	adds	r2, #1
 80213fa:	701a      	strb	r2, [r3, #0]
 80213fc:	e604      	b.n	8021008 <_dtoa_r+0x6e8>
 80213fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021400:	2b00      	cmp	r3, #0
 8021402:	dd03      	ble.n	802140c <_dtoa_r+0xaec>
 8021404:	2d39      	cmp	r5, #57	@ 0x39
 8021406:	d0ee      	beq.n	80213e6 <_dtoa_r+0xac6>
 8021408:	3501      	adds	r5, #1
 802140a:	e7c1      	b.n	8021390 <_dtoa_r+0xa70>
 802140c:	9b06      	ldr	r3, [sp, #24]
 802140e:	9a06      	ldr	r2, [sp, #24]
 8021410:	701d      	strb	r5, [r3, #0]
 8021412:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021414:	4293      	cmp	r3, r2
 8021416:	d02a      	beq.n	802146e <_dtoa_r+0xb4e>
 8021418:	2300      	movs	r3, #0
 802141a:	220a      	movs	r2, #10
 802141c:	9905      	ldr	r1, [sp, #20]
 802141e:	9803      	ldr	r0, [sp, #12]
 8021420:	f000 fd4c 	bl	8021ebc <__multadd>
 8021424:	9b04      	ldr	r3, [sp, #16]
 8021426:	9005      	str	r0, [sp, #20]
 8021428:	42bb      	cmp	r3, r7
 802142a:	d109      	bne.n	8021440 <_dtoa_r+0xb20>
 802142c:	2300      	movs	r3, #0
 802142e:	220a      	movs	r2, #10
 8021430:	9904      	ldr	r1, [sp, #16]
 8021432:	9803      	ldr	r0, [sp, #12]
 8021434:	f000 fd42 	bl	8021ebc <__multadd>
 8021438:	9004      	str	r0, [sp, #16]
 802143a:	0007      	movs	r7, r0
 802143c:	9406      	str	r4, [sp, #24]
 802143e:	e778      	b.n	8021332 <_dtoa_r+0xa12>
 8021440:	9904      	ldr	r1, [sp, #16]
 8021442:	2300      	movs	r3, #0
 8021444:	220a      	movs	r2, #10
 8021446:	9803      	ldr	r0, [sp, #12]
 8021448:	f000 fd38 	bl	8021ebc <__multadd>
 802144c:	2300      	movs	r3, #0
 802144e:	9004      	str	r0, [sp, #16]
 8021450:	220a      	movs	r2, #10
 8021452:	0039      	movs	r1, r7
 8021454:	9803      	ldr	r0, [sp, #12]
 8021456:	f000 fd31 	bl	8021ebc <__multadd>
 802145a:	e7ee      	b.n	802143a <_dtoa_r+0xb1a>
 802145c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802145e:	2401      	movs	r4, #1
 8021460:	2b00      	cmp	r3, #0
 8021462:	dd00      	ble.n	8021466 <_dtoa_r+0xb46>
 8021464:	001c      	movs	r4, r3
 8021466:	9b08      	ldr	r3, [sp, #32]
 8021468:	191c      	adds	r4, r3, r4
 802146a:	2300      	movs	r3, #0
 802146c:	9304      	str	r3, [sp, #16]
 802146e:	9905      	ldr	r1, [sp, #20]
 8021470:	2201      	movs	r2, #1
 8021472:	9803      	ldr	r0, [sp, #12]
 8021474:	f000 ff28 	bl	80222c8 <__lshift>
 8021478:	0031      	movs	r1, r6
 802147a:	9005      	str	r0, [sp, #20]
 802147c:	f000 ff90 	bl	80223a0 <__mcmp>
 8021480:	2800      	cmp	r0, #0
 8021482:	dcb3      	bgt.n	80213ec <_dtoa_r+0xacc>
 8021484:	d101      	bne.n	802148a <_dtoa_r+0xb6a>
 8021486:	07ed      	lsls	r5, r5, #31
 8021488:	d4b0      	bmi.n	80213ec <_dtoa_r+0xacc>
 802148a:	0023      	movs	r3, r4
 802148c:	001c      	movs	r4, r3
 802148e:	3b01      	subs	r3, #1
 8021490:	781a      	ldrb	r2, [r3, #0]
 8021492:	2a30      	cmp	r2, #48	@ 0x30
 8021494:	d0fa      	beq.n	802148c <_dtoa_r+0xb6c>
 8021496:	e5b7      	b.n	8021008 <_dtoa_r+0x6e8>
 8021498:	9a08      	ldr	r2, [sp, #32]
 802149a:	429a      	cmp	r2, r3
 802149c:	d1a7      	bne.n	80213ee <_dtoa_r+0xace>
 802149e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80214a0:	3301      	adds	r3, #1
 80214a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80214a4:	2331      	movs	r3, #49	@ 0x31
 80214a6:	7013      	strb	r3, [r2, #0]
 80214a8:	e5ae      	b.n	8021008 <_dtoa_r+0x6e8>
 80214aa:	4b15      	ldr	r3, [pc, #84]	@ (8021500 <_dtoa_r+0xbe0>)
 80214ac:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80214ae:	9308      	str	r3, [sp, #32]
 80214b0:	4b14      	ldr	r3, [pc, #80]	@ (8021504 <_dtoa_r+0xbe4>)
 80214b2:	2a00      	cmp	r2, #0
 80214b4:	d001      	beq.n	80214ba <_dtoa_r+0xb9a>
 80214b6:	f7ff fa7b 	bl	80209b0 <_dtoa_r+0x90>
 80214ba:	f7ff fa7b 	bl	80209b4 <_dtoa_r+0x94>
 80214be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80214c0:	2b01      	cmp	r3, #1
 80214c2:	dc00      	bgt.n	80214c6 <_dtoa_r+0xba6>
 80214c4:	e648      	b.n	8021158 <_dtoa_r+0x838>
 80214c6:	2001      	movs	r0, #1
 80214c8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80214ca:	e665      	b.n	8021198 <_dtoa_r+0x878>
 80214cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	dc00      	bgt.n	80214d4 <_dtoa_r+0xbb4>
 80214d2:	e6d6      	b.n	8021282 <_dtoa_r+0x962>
 80214d4:	2400      	movs	r4, #0
 80214d6:	0031      	movs	r1, r6
 80214d8:	9805      	ldr	r0, [sp, #20]
 80214da:	f7ff f993 	bl	8020804 <quorem>
 80214de:	9b08      	ldr	r3, [sp, #32]
 80214e0:	3030      	adds	r0, #48	@ 0x30
 80214e2:	5518      	strb	r0, [r3, r4]
 80214e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214e6:	3401      	adds	r4, #1
 80214e8:	0005      	movs	r5, r0
 80214ea:	429c      	cmp	r4, r3
 80214ec:	dab6      	bge.n	802145c <_dtoa_r+0xb3c>
 80214ee:	2300      	movs	r3, #0
 80214f0:	220a      	movs	r2, #10
 80214f2:	9905      	ldr	r1, [sp, #20]
 80214f4:	9803      	ldr	r0, [sp, #12]
 80214f6:	f000 fce1 	bl	8021ebc <__multadd>
 80214fa:	9005      	str	r0, [sp, #20]
 80214fc:	e7eb      	b.n	80214d6 <_dtoa_r+0xbb6>
 80214fe:	46c0      	nop			@ (mov r8, r8)
 8021500:	08026405 	.word	0x08026405
 8021504:	0802640d 	.word	0x0802640d

08021508 <_free_r>:
 8021508:	b570      	push	{r4, r5, r6, lr}
 802150a:	0005      	movs	r5, r0
 802150c:	1e0c      	subs	r4, r1, #0
 802150e:	d010      	beq.n	8021532 <_free_r+0x2a>
 8021510:	3c04      	subs	r4, #4
 8021512:	6823      	ldr	r3, [r4, #0]
 8021514:	2b00      	cmp	r3, #0
 8021516:	da00      	bge.n	802151a <_free_r+0x12>
 8021518:	18e4      	adds	r4, r4, r3
 802151a:	0028      	movs	r0, r5
 802151c:	f000 fc56 	bl	8021dcc <__malloc_lock>
 8021520:	4a1d      	ldr	r2, [pc, #116]	@ (8021598 <_free_r+0x90>)
 8021522:	6813      	ldr	r3, [r2, #0]
 8021524:	2b00      	cmp	r3, #0
 8021526:	d105      	bne.n	8021534 <_free_r+0x2c>
 8021528:	6063      	str	r3, [r4, #4]
 802152a:	6014      	str	r4, [r2, #0]
 802152c:	0028      	movs	r0, r5
 802152e:	f000 fc55 	bl	8021ddc <__malloc_unlock>
 8021532:	bd70      	pop	{r4, r5, r6, pc}
 8021534:	42a3      	cmp	r3, r4
 8021536:	d908      	bls.n	802154a <_free_r+0x42>
 8021538:	6820      	ldr	r0, [r4, #0]
 802153a:	1821      	adds	r1, r4, r0
 802153c:	428b      	cmp	r3, r1
 802153e:	d1f3      	bne.n	8021528 <_free_r+0x20>
 8021540:	6819      	ldr	r1, [r3, #0]
 8021542:	685b      	ldr	r3, [r3, #4]
 8021544:	1809      	adds	r1, r1, r0
 8021546:	6021      	str	r1, [r4, #0]
 8021548:	e7ee      	b.n	8021528 <_free_r+0x20>
 802154a:	001a      	movs	r2, r3
 802154c:	685b      	ldr	r3, [r3, #4]
 802154e:	2b00      	cmp	r3, #0
 8021550:	d001      	beq.n	8021556 <_free_r+0x4e>
 8021552:	42a3      	cmp	r3, r4
 8021554:	d9f9      	bls.n	802154a <_free_r+0x42>
 8021556:	6811      	ldr	r1, [r2, #0]
 8021558:	1850      	adds	r0, r2, r1
 802155a:	42a0      	cmp	r0, r4
 802155c:	d10b      	bne.n	8021576 <_free_r+0x6e>
 802155e:	6820      	ldr	r0, [r4, #0]
 8021560:	1809      	adds	r1, r1, r0
 8021562:	1850      	adds	r0, r2, r1
 8021564:	6011      	str	r1, [r2, #0]
 8021566:	4283      	cmp	r3, r0
 8021568:	d1e0      	bne.n	802152c <_free_r+0x24>
 802156a:	6818      	ldr	r0, [r3, #0]
 802156c:	685b      	ldr	r3, [r3, #4]
 802156e:	1841      	adds	r1, r0, r1
 8021570:	6011      	str	r1, [r2, #0]
 8021572:	6053      	str	r3, [r2, #4]
 8021574:	e7da      	b.n	802152c <_free_r+0x24>
 8021576:	42a0      	cmp	r0, r4
 8021578:	d902      	bls.n	8021580 <_free_r+0x78>
 802157a:	230c      	movs	r3, #12
 802157c:	602b      	str	r3, [r5, #0]
 802157e:	e7d5      	b.n	802152c <_free_r+0x24>
 8021580:	6820      	ldr	r0, [r4, #0]
 8021582:	1821      	adds	r1, r4, r0
 8021584:	428b      	cmp	r3, r1
 8021586:	d103      	bne.n	8021590 <_free_r+0x88>
 8021588:	6819      	ldr	r1, [r3, #0]
 802158a:	685b      	ldr	r3, [r3, #4]
 802158c:	1809      	adds	r1, r1, r0
 802158e:	6021      	str	r1, [r4, #0]
 8021590:	6063      	str	r3, [r4, #4]
 8021592:	6054      	str	r4, [r2, #4]
 8021594:	e7ca      	b.n	802152c <_free_r+0x24>
 8021596:	46c0      	nop			@ (mov r8, r8)
 8021598:	200033d4 	.word	0x200033d4

0802159c <rshift>:
 802159c:	0002      	movs	r2, r0
 802159e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215a0:	6904      	ldr	r4, [r0, #16]
 80215a2:	b085      	sub	sp, #20
 80215a4:	3214      	adds	r2, #20
 80215a6:	114b      	asrs	r3, r1, #5
 80215a8:	0016      	movs	r6, r2
 80215aa:	9302      	str	r3, [sp, #8]
 80215ac:	429c      	cmp	r4, r3
 80215ae:	dd31      	ble.n	8021614 <rshift+0x78>
 80215b0:	261f      	movs	r6, #31
 80215b2:	000f      	movs	r7, r1
 80215b4:	009b      	lsls	r3, r3, #2
 80215b6:	00a5      	lsls	r5, r4, #2
 80215b8:	18d3      	adds	r3, r2, r3
 80215ba:	4037      	ands	r7, r6
 80215bc:	1955      	adds	r5, r2, r5
 80215be:	9300      	str	r3, [sp, #0]
 80215c0:	9701      	str	r7, [sp, #4]
 80215c2:	4231      	tst	r1, r6
 80215c4:	d10d      	bne.n	80215e2 <rshift+0x46>
 80215c6:	0016      	movs	r6, r2
 80215c8:	0019      	movs	r1, r3
 80215ca:	428d      	cmp	r5, r1
 80215cc:	d836      	bhi.n	802163c <rshift+0xa0>
 80215ce:	9b00      	ldr	r3, [sp, #0]
 80215d0:	2600      	movs	r6, #0
 80215d2:	3b03      	subs	r3, #3
 80215d4:	429d      	cmp	r5, r3
 80215d6:	d302      	bcc.n	80215de <rshift+0x42>
 80215d8:	9b02      	ldr	r3, [sp, #8]
 80215da:	1ae4      	subs	r4, r4, r3
 80215dc:	00a6      	lsls	r6, r4, #2
 80215de:	1996      	adds	r6, r2, r6
 80215e0:	e018      	b.n	8021614 <rshift+0x78>
 80215e2:	2120      	movs	r1, #32
 80215e4:	9e01      	ldr	r6, [sp, #4]
 80215e6:	9f01      	ldr	r7, [sp, #4]
 80215e8:	1b89      	subs	r1, r1, r6
 80215ea:	9e00      	ldr	r6, [sp, #0]
 80215ec:	9103      	str	r1, [sp, #12]
 80215ee:	ce02      	ldmia	r6!, {r1}
 80215f0:	4694      	mov	ip, r2
 80215f2:	40f9      	lsrs	r1, r7
 80215f4:	42b5      	cmp	r5, r6
 80215f6:	d816      	bhi.n	8021626 <rshift+0x8a>
 80215f8:	9b00      	ldr	r3, [sp, #0]
 80215fa:	2600      	movs	r6, #0
 80215fc:	3301      	adds	r3, #1
 80215fe:	429d      	cmp	r5, r3
 8021600:	d303      	bcc.n	802160a <rshift+0x6e>
 8021602:	9b02      	ldr	r3, [sp, #8]
 8021604:	1ae4      	subs	r4, r4, r3
 8021606:	00a6      	lsls	r6, r4, #2
 8021608:	3e04      	subs	r6, #4
 802160a:	1996      	adds	r6, r2, r6
 802160c:	6031      	str	r1, [r6, #0]
 802160e:	2900      	cmp	r1, #0
 8021610:	d000      	beq.n	8021614 <rshift+0x78>
 8021612:	3604      	adds	r6, #4
 8021614:	1ab1      	subs	r1, r6, r2
 8021616:	1089      	asrs	r1, r1, #2
 8021618:	6101      	str	r1, [r0, #16]
 802161a:	4296      	cmp	r6, r2
 802161c:	d101      	bne.n	8021622 <rshift+0x86>
 802161e:	2300      	movs	r3, #0
 8021620:	6143      	str	r3, [r0, #20]
 8021622:	b005      	add	sp, #20
 8021624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021626:	6837      	ldr	r7, [r6, #0]
 8021628:	9b03      	ldr	r3, [sp, #12]
 802162a:	409f      	lsls	r7, r3
 802162c:	430f      	orrs	r7, r1
 802162e:	4661      	mov	r1, ip
 8021630:	c180      	stmia	r1!, {r7}
 8021632:	468c      	mov	ip, r1
 8021634:	9b01      	ldr	r3, [sp, #4]
 8021636:	ce02      	ldmia	r6!, {r1}
 8021638:	40d9      	lsrs	r1, r3
 802163a:	e7db      	b.n	80215f4 <rshift+0x58>
 802163c:	c980      	ldmia	r1!, {r7}
 802163e:	c680      	stmia	r6!, {r7}
 8021640:	e7c3      	b.n	80215ca <rshift+0x2e>

08021642 <__hexdig_fun>:
 8021642:	0002      	movs	r2, r0
 8021644:	3a30      	subs	r2, #48	@ 0x30
 8021646:	0003      	movs	r3, r0
 8021648:	2a09      	cmp	r2, #9
 802164a:	d802      	bhi.n	8021652 <__hexdig_fun+0x10>
 802164c:	3b20      	subs	r3, #32
 802164e:	b2d8      	uxtb	r0, r3
 8021650:	4770      	bx	lr
 8021652:	0002      	movs	r2, r0
 8021654:	3a61      	subs	r2, #97	@ 0x61
 8021656:	2a05      	cmp	r2, #5
 8021658:	d801      	bhi.n	802165e <__hexdig_fun+0x1c>
 802165a:	3b47      	subs	r3, #71	@ 0x47
 802165c:	e7f7      	b.n	802164e <__hexdig_fun+0xc>
 802165e:	001a      	movs	r2, r3
 8021660:	3a41      	subs	r2, #65	@ 0x41
 8021662:	2000      	movs	r0, #0
 8021664:	2a05      	cmp	r2, #5
 8021666:	d8f3      	bhi.n	8021650 <__hexdig_fun+0xe>
 8021668:	3b27      	subs	r3, #39	@ 0x27
 802166a:	e7f0      	b.n	802164e <__hexdig_fun+0xc>

0802166c <__gethex>:
 802166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802166e:	b089      	sub	sp, #36	@ 0x24
 8021670:	9307      	str	r3, [sp, #28]
 8021672:	680b      	ldr	r3, [r1, #0]
 8021674:	9201      	str	r2, [sp, #4]
 8021676:	9003      	str	r0, [sp, #12]
 8021678:	9106      	str	r1, [sp, #24]
 802167a:	1c9a      	adds	r2, r3, #2
 802167c:	0011      	movs	r1, r2
 802167e:	3201      	adds	r2, #1
 8021680:	1e50      	subs	r0, r2, #1
 8021682:	7800      	ldrb	r0, [r0, #0]
 8021684:	2830      	cmp	r0, #48	@ 0x30
 8021686:	d0f9      	beq.n	802167c <__gethex+0x10>
 8021688:	1acb      	subs	r3, r1, r3
 802168a:	3b02      	subs	r3, #2
 802168c:	9305      	str	r3, [sp, #20]
 802168e:	9100      	str	r1, [sp, #0]
 8021690:	f7ff ffd7 	bl	8021642 <__hexdig_fun>
 8021694:	2300      	movs	r3, #0
 8021696:	001d      	movs	r5, r3
 8021698:	9302      	str	r3, [sp, #8]
 802169a:	4298      	cmp	r0, r3
 802169c:	d11e      	bne.n	80216dc <__gethex+0x70>
 802169e:	2201      	movs	r2, #1
 80216a0:	49a6      	ldr	r1, [pc, #664]	@ (802193c <__gethex+0x2d0>)
 80216a2:	9800      	ldr	r0, [sp, #0]
 80216a4:	f7fe ffd8 	bl	8020658 <strncmp>
 80216a8:	0007      	movs	r7, r0
 80216aa:	42a8      	cmp	r0, r5
 80216ac:	d000      	beq.n	80216b0 <__gethex+0x44>
 80216ae:	e06a      	b.n	8021786 <__gethex+0x11a>
 80216b0:	9b00      	ldr	r3, [sp, #0]
 80216b2:	7858      	ldrb	r0, [r3, #1]
 80216b4:	1c5c      	adds	r4, r3, #1
 80216b6:	f7ff ffc4 	bl	8021642 <__hexdig_fun>
 80216ba:	2301      	movs	r3, #1
 80216bc:	9302      	str	r3, [sp, #8]
 80216be:	42a8      	cmp	r0, r5
 80216c0:	d02f      	beq.n	8021722 <__gethex+0xb6>
 80216c2:	9400      	str	r4, [sp, #0]
 80216c4:	9b00      	ldr	r3, [sp, #0]
 80216c6:	7818      	ldrb	r0, [r3, #0]
 80216c8:	2830      	cmp	r0, #48	@ 0x30
 80216ca:	d009      	beq.n	80216e0 <__gethex+0x74>
 80216cc:	f7ff ffb9 	bl	8021642 <__hexdig_fun>
 80216d0:	4242      	negs	r2, r0
 80216d2:	4142      	adcs	r2, r0
 80216d4:	2301      	movs	r3, #1
 80216d6:	0025      	movs	r5, r4
 80216d8:	9202      	str	r2, [sp, #8]
 80216da:	9305      	str	r3, [sp, #20]
 80216dc:	9c00      	ldr	r4, [sp, #0]
 80216de:	e004      	b.n	80216ea <__gethex+0x7e>
 80216e0:	9b00      	ldr	r3, [sp, #0]
 80216e2:	3301      	adds	r3, #1
 80216e4:	9300      	str	r3, [sp, #0]
 80216e6:	e7ed      	b.n	80216c4 <__gethex+0x58>
 80216e8:	3401      	adds	r4, #1
 80216ea:	7820      	ldrb	r0, [r4, #0]
 80216ec:	f7ff ffa9 	bl	8021642 <__hexdig_fun>
 80216f0:	1e07      	subs	r7, r0, #0
 80216f2:	d1f9      	bne.n	80216e8 <__gethex+0x7c>
 80216f4:	2201      	movs	r2, #1
 80216f6:	0020      	movs	r0, r4
 80216f8:	4990      	ldr	r1, [pc, #576]	@ (802193c <__gethex+0x2d0>)
 80216fa:	f7fe ffad 	bl	8020658 <strncmp>
 80216fe:	2800      	cmp	r0, #0
 8021700:	d10d      	bne.n	802171e <__gethex+0xb2>
 8021702:	2d00      	cmp	r5, #0
 8021704:	d106      	bne.n	8021714 <__gethex+0xa8>
 8021706:	3401      	adds	r4, #1
 8021708:	0025      	movs	r5, r4
 802170a:	7820      	ldrb	r0, [r4, #0]
 802170c:	f7ff ff99 	bl	8021642 <__hexdig_fun>
 8021710:	2800      	cmp	r0, #0
 8021712:	d102      	bne.n	802171a <__gethex+0xae>
 8021714:	1b2d      	subs	r5, r5, r4
 8021716:	00af      	lsls	r7, r5, #2
 8021718:	e003      	b.n	8021722 <__gethex+0xb6>
 802171a:	3401      	adds	r4, #1
 802171c:	e7f5      	b.n	802170a <__gethex+0x9e>
 802171e:	2d00      	cmp	r5, #0
 8021720:	d1f8      	bne.n	8021714 <__gethex+0xa8>
 8021722:	2220      	movs	r2, #32
 8021724:	7823      	ldrb	r3, [r4, #0]
 8021726:	0026      	movs	r6, r4
 8021728:	4393      	bics	r3, r2
 802172a:	2b50      	cmp	r3, #80	@ 0x50
 802172c:	d11d      	bne.n	802176a <__gethex+0xfe>
 802172e:	7863      	ldrb	r3, [r4, #1]
 8021730:	2b2b      	cmp	r3, #43	@ 0x2b
 8021732:	d02d      	beq.n	8021790 <__gethex+0x124>
 8021734:	2b2d      	cmp	r3, #45	@ 0x2d
 8021736:	d02f      	beq.n	8021798 <__gethex+0x12c>
 8021738:	2300      	movs	r3, #0
 802173a:	1c66      	adds	r6, r4, #1
 802173c:	9304      	str	r3, [sp, #16]
 802173e:	7830      	ldrb	r0, [r6, #0]
 8021740:	f7ff ff7f 	bl	8021642 <__hexdig_fun>
 8021744:	1e43      	subs	r3, r0, #1
 8021746:	b2db      	uxtb	r3, r3
 8021748:	0005      	movs	r5, r0
 802174a:	2b18      	cmp	r3, #24
 802174c:	d82a      	bhi.n	80217a4 <__gethex+0x138>
 802174e:	7870      	ldrb	r0, [r6, #1]
 8021750:	f7ff ff77 	bl	8021642 <__hexdig_fun>
 8021754:	1e43      	subs	r3, r0, #1
 8021756:	b2db      	uxtb	r3, r3
 8021758:	3601      	adds	r6, #1
 802175a:	3d10      	subs	r5, #16
 802175c:	2b18      	cmp	r3, #24
 802175e:	d91d      	bls.n	802179c <__gethex+0x130>
 8021760:	9b04      	ldr	r3, [sp, #16]
 8021762:	2b00      	cmp	r3, #0
 8021764:	d000      	beq.n	8021768 <__gethex+0xfc>
 8021766:	426d      	negs	r5, r5
 8021768:	197f      	adds	r7, r7, r5
 802176a:	9b06      	ldr	r3, [sp, #24]
 802176c:	601e      	str	r6, [r3, #0]
 802176e:	9b02      	ldr	r3, [sp, #8]
 8021770:	2b00      	cmp	r3, #0
 8021772:	d019      	beq.n	80217a8 <__gethex+0x13c>
 8021774:	9b05      	ldr	r3, [sp, #20]
 8021776:	2606      	movs	r6, #6
 8021778:	425a      	negs	r2, r3
 802177a:	4153      	adcs	r3, r2
 802177c:	425b      	negs	r3, r3
 802177e:	401e      	ands	r6, r3
 8021780:	0030      	movs	r0, r6
 8021782:	b009      	add	sp, #36	@ 0x24
 8021784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021786:	2301      	movs	r3, #1
 8021788:	2700      	movs	r7, #0
 802178a:	9c00      	ldr	r4, [sp, #0]
 802178c:	9302      	str	r3, [sp, #8]
 802178e:	e7c8      	b.n	8021722 <__gethex+0xb6>
 8021790:	2300      	movs	r3, #0
 8021792:	9304      	str	r3, [sp, #16]
 8021794:	1ca6      	adds	r6, r4, #2
 8021796:	e7d2      	b.n	802173e <__gethex+0xd2>
 8021798:	2301      	movs	r3, #1
 802179a:	e7fa      	b.n	8021792 <__gethex+0x126>
 802179c:	230a      	movs	r3, #10
 802179e:	435d      	muls	r5, r3
 80217a0:	182d      	adds	r5, r5, r0
 80217a2:	e7d4      	b.n	802174e <__gethex+0xe2>
 80217a4:	0026      	movs	r6, r4
 80217a6:	e7e0      	b.n	802176a <__gethex+0xfe>
 80217a8:	9b00      	ldr	r3, [sp, #0]
 80217aa:	9902      	ldr	r1, [sp, #8]
 80217ac:	1ae3      	subs	r3, r4, r3
 80217ae:	3b01      	subs	r3, #1
 80217b0:	2b07      	cmp	r3, #7
 80217b2:	dc0a      	bgt.n	80217ca <__gethex+0x15e>
 80217b4:	9803      	ldr	r0, [sp, #12]
 80217b6:	f000 fb19 	bl	8021dec <_Balloc>
 80217ba:	1e05      	subs	r5, r0, #0
 80217bc:	d108      	bne.n	80217d0 <__gethex+0x164>
 80217be:	002a      	movs	r2, r5
 80217c0:	21e4      	movs	r1, #228	@ 0xe4
 80217c2:	4b5f      	ldr	r3, [pc, #380]	@ (8021940 <__gethex+0x2d4>)
 80217c4:	485f      	ldr	r0, [pc, #380]	@ (8021944 <__gethex+0x2d8>)
 80217c6:	f001 fbf1 	bl	8022fac <__assert_func>
 80217ca:	3101      	adds	r1, #1
 80217cc:	105b      	asrs	r3, r3, #1
 80217ce:	e7ef      	b.n	80217b0 <__gethex+0x144>
 80217d0:	0003      	movs	r3, r0
 80217d2:	3314      	adds	r3, #20
 80217d4:	9302      	str	r3, [sp, #8]
 80217d6:	9305      	str	r3, [sp, #20]
 80217d8:	2300      	movs	r3, #0
 80217da:	001e      	movs	r6, r3
 80217dc:	9304      	str	r3, [sp, #16]
 80217de:	9b00      	ldr	r3, [sp, #0]
 80217e0:	42a3      	cmp	r3, r4
 80217e2:	d338      	bcc.n	8021856 <__gethex+0x1ea>
 80217e4:	9c05      	ldr	r4, [sp, #20]
 80217e6:	9b02      	ldr	r3, [sp, #8]
 80217e8:	c440      	stmia	r4!, {r6}
 80217ea:	1ae4      	subs	r4, r4, r3
 80217ec:	10a4      	asrs	r4, r4, #2
 80217ee:	0030      	movs	r0, r6
 80217f0:	612c      	str	r4, [r5, #16]
 80217f2:	f000 fbf3 	bl	8021fdc <__hi0bits>
 80217f6:	9b01      	ldr	r3, [sp, #4]
 80217f8:	0164      	lsls	r4, r4, #5
 80217fa:	681b      	ldr	r3, [r3, #0]
 80217fc:	1a26      	subs	r6, r4, r0
 80217fe:	9300      	str	r3, [sp, #0]
 8021800:	429e      	cmp	r6, r3
 8021802:	dd52      	ble.n	80218aa <__gethex+0x23e>
 8021804:	1af6      	subs	r6, r6, r3
 8021806:	0031      	movs	r1, r6
 8021808:	0028      	movs	r0, r5
 802180a:	f000 ff96 	bl	802273a <__any_on>
 802180e:	1e04      	subs	r4, r0, #0
 8021810:	d00f      	beq.n	8021832 <__gethex+0x1c6>
 8021812:	2401      	movs	r4, #1
 8021814:	231f      	movs	r3, #31
 8021816:	0020      	movs	r0, r4
 8021818:	1e72      	subs	r2, r6, #1
 802181a:	4013      	ands	r3, r2
 802181c:	4098      	lsls	r0, r3
 802181e:	0003      	movs	r3, r0
 8021820:	1151      	asrs	r1, r2, #5
 8021822:	9802      	ldr	r0, [sp, #8]
 8021824:	0089      	lsls	r1, r1, #2
 8021826:	5809      	ldr	r1, [r1, r0]
 8021828:	4219      	tst	r1, r3
 802182a:	d002      	beq.n	8021832 <__gethex+0x1c6>
 802182c:	42a2      	cmp	r2, r4
 802182e:	dc34      	bgt.n	802189a <__gethex+0x22e>
 8021830:	2402      	movs	r4, #2
 8021832:	0031      	movs	r1, r6
 8021834:	0028      	movs	r0, r5
 8021836:	f7ff feb1 	bl	802159c <rshift>
 802183a:	19bf      	adds	r7, r7, r6
 802183c:	9b01      	ldr	r3, [sp, #4]
 802183e:	689b      	ldr	r3, [r3, #8]
 8021840:	42bb      	cmp	r3, r7
 8021842:	da42      	bge.n	80218ca <__gethex+0x25e>
 8021844:	0029      	movs	r1, r5
 8021846:	9803      	ldr	r0, [sp, #12]
 8021848:	f000 fb14 	bl	8021e74 <_Bfree>
 802184c:	2300      	movs	r3, #0
 802184e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021850:	26a3      	movs	r6, #163	@ 0xa3
 8021852:	6013      	str	r3, [r2, #0]
 8021854:	e794      	b.n	8021780 <__gethex+0x114>
 8021856:	3c01      	subs	r4, #1
 8021858:	7823      	ldrb	r3, [r4, #0]
 802185a:	2b2e      	cmp	r3, #46	@ 0x2e
 802185c:	d012      	beq.n	8021884 <__gethex+0x218>
 802185e:	9b04      	ldr	r3, [sp, #16]
 8021860:	2b20      	cmp	r3, #32
 8021862:	d104      	bne.n	802186e <__gethex+0x202>
 8021864:	9b05      	ldr	r3, [sp, #20]
 8021866:	c340      	stmia	r3!, {r6}
 8021868:	2600      	movs	r6, #0
 802186a:	9305      	str	r3, [sp, #20]
 802186c:	9604      	str	r6, [sp, #16]
 802186e:	7820      	ldrb	r0, [r4, #0]
 8021870:	f7ff fee7 	bl	8021642 <__hexdig_fun>
 8021874:	230f      	movs	r3, #15
 8021876:	4018      	ands	r0, r3
 8021878:	9b04      	ldr	r3, [sp, #16]
 802187a:	4098      	lsls	r0, r3
 802187c:	3304      	adds	r3, #4
 802187e:	4306      	orrs	r6, r0
 8021880:	9304      	str	r3, [sp, #16]
 8021882:	e7ac      	b.n	80217de <__gethex+0x172>
 8021884:	9b00      	ldr	r3, [sp, #0]
 8021886:	42a3      	cmp	r3, r4
 8021888:	d8e9      	bhi.n	802185e <__gethex+0x1f2>
 802188a:	2201      	movs	r2, #1
 802188c:	0020      	movs	r0, r4
 802188e:	492b      	ldr	r1, [pc, #172]	@ (802193c <__gethex+0x2d0>)
 8021890:	f7fe fee2 	bl	8020658 <strncmp>
 8021894:	2800      	cmp	r0, #0
 8021896:	d1e2      	bne.n	802185e <__gethex+0x1f2>
 8021898:	e7a1      	b.n	80217de <__gethex+0x172>
 802189a:	0028      	movs	r0, r5
 802189c:	1eb1      	subs	r1, r6, #2
 802189e:	f000 ff4c 	bl	802273a <__any_on>
 80218a2:	2800      	cmp	r0, #0
 80218a4:	d0c4      	beq.n	8021830 <__gethex+0x1c4>
 80218a6:	2403      	movs	r4, #3
 80218a8:	e7c3      	b.n	8021832 <__gethex+0x1c6>
 80218aa:	9b00      	ldr	r3, [sp, #0]
 80218ac:	2400      	movs	r4, #0
 80218ae:	429e      	cmp	r6, r3
 80218b0:	dac4      	bge.n	802183c <__gethex+0x1d0>
 80218b2:	1b9e      	subs	r6, r3, r6
 80218b4:	0029      	movs	r1, r5
 80218b6:	0032      	movs	r2, r6
 80218b8:	9803      	ldr	r0, [sp, #12]
 80218ba:	f000 fd05 	bl	80222c8 <__lshift>
 80218be:	0003      	movs	r3, r0
 80218c0:	3314      	adds	r3, #20
 80218c2:	0005      	movs	r5, r0
 80218c4:	1bbf      	subs	r7, r7, r6
 80218c6:	9302      	str	r3, [sp, #8]
 80218c8:	e7b8      	b.n	802183c <__gethex+0x1d0>
 80218ca:	9b01      	ldr	r3, [sp, #4]
 80218cc:	685e      	ldr	r6, [r3, #4]
 80218ce:	42be      	cmp	r6, r7
 80218d0:	dd6f      	ble.n	80219b2 <__gethex+0x346>
 80218d2:	9b00      	ldr	r3, [sp, #0]
 80218d4:	1bf6      	subs	r6, r6, r7
 80218d6:	42b3      	cmp	r3, r6
 80218d8:	dc36      	bgt.n	8021948 <__gethex+0x2dc>
 80218da:	9b01      	ldr	r3, [sp, #4]
 80218dc:	68db      	ldr	r3, [r3, #12]
 80218de:	2b02      	cmp	r3, #2
 80218e0:	d024      	beq.n	802192c <__gethex+0x2c0>
 80218e2:	2b03      	cmp	r3, #3
 80218e4:	d026      	beq.n	8021934 <__gethex+0x2c8>
 80218e6:	2b01      	cmp	r3, #1
 80218e8:	d117      	bne.n	802191a <__gethex+0x2ae>
 80218ea:	9b00      	ldr	r3, [sp, #0]
 80218ec:	42b3      	cmp	r3, r6
 80218ee:	d114      	bne.n	802191a <__gethex+0x2ae>
 80218f0:	2b01      	cmp	r3, #1
 80218f2:	d10b      	bne.n	802190c <__gethex+0x2a0>
 80218f4:	9b01      	ldr	r3, [sp, #4]
 80218f6:	9a07      	ldr	r2, [sp, #28]
 80218f8:	685b      	ldr	r3, [r3, #4]
 80218fa:	2662      	movs	r6, #98	@ 0x62
 80218fc:	6013      	str	r3, [r2, #0]
 80218fe:	2301      	movs	r3, #1
 8021900:	9a02      	ldr	r2, [sp, #8]
 8021902:	612b      	str	r3, [r5, #16]
 8021904:	6013      	str	r3, [r2, #0]
 8021906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021908:	601d      	str	r5, [r3, #0]
 802190a:	e739      	b.n	8021780 <__gethex+0x114>
 802190c:	9900      	ldr	r1, [sp, #0]
 802190e:	0028      	movs	r0, r5
 8021910:	3901      	subs	r1, #1
 8021912:	f000 ff12 	bl	802273a <__any_on>
 8021916:	2800      	cmp	r0, #0
 8021918:	d1ec      	bne.n	80218f4 <__gethex+0x288>
 802191a:	0029      	movs	r1, r5
 802191c:	9803      	ldr	r0, [sp, #12]
 802191e:	f000 faa9 	bl	8021e74 <_Bfree>
 8021922:	2300      	movs	r3, #0
 8021924:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021926:	2650      	movs	r6, #80	@ 0x50
 8021928:	6013      	str	r3, [r2, #0]
 802192a:	e729      	b.n	8021780 <__gethex+0x114>
 802192c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802192e:	2b00      	cmp	r3, #0
 8021930:	d1f3      	bne.n	802191a <__gethex+0x2ae>
 8021932:	e7df      	b.n	80218f4 <__gethex+0x288>
 8021934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021936:	2b00      	cmp	r3, #0
 8021938:	d1dc      	bne.n	80218f4 <__gethex+0x288>
 802193a:	e7ee      	b.n	802191a <__gethex+0x2ae>
 802193c:	08026270 	.word	0x08026270
 8021940:	08026481 	.word	0x08026481
 8021944:	08026492 	.word	0x08026492
 8021948:	1e77      	subs	r7, r6, #1
 802194a:	2c00      	cmp	r4, #0
 802194c:	d12f      	bne.n	80219ae <__gethex+0x342>
 802194e:	2f00      	cmp	r7, #0
 8021950:	d004      	beq.n	802195c <__gethex+0x2f0>
 8021952:	0039      	movs	r1, r7
 8021954:	0028      	movs	r0, r5
 8021956:	f000 fef0 	bl	802273a <__any_on>
 802195a:	0004      	movs	r4, r0
 802195c:	231f      	movs	r3, #31
 802195e:	117a      	asrs	r2, r7, #5
 8021960:	401f      	ands	r7, r3
 8021962:	3b1e      	subs	r3, #30
 8021964:	40bb      	lsls	r3, r7
 8021966:	9902      	ldr	r1, [sp, #8]
 8021968:	0092      	lsls	r2, r2, #2
 802196a:	5852      	ldr	r2, [r2, r1]
 802196c:	421a      	tst	r2, r3
 802196e:	d001      	beq.n	8021974 <__gethex+0x308>
 8021970:	2302      	movs	r3, #2
 8021972:	431c      	orrs	r4, r3
 8021974:	9b00      	ldr	r3, [sp, #0]
 8021976:	0031      	movs	r1, r6
 8021978:	1b9b      	subs	r3, r3, r6
 802197a:	2602      	movs	r6, #2
 802197c:	0028      	movs	r0, r5
 802197e:	9300      	str	r3, [sp, #0]
 8021980:	f7ff fe0c 	bl	802159c <rshift>
 8021984:	9b01      	ldr	r3, [sp, #4]
 8021986:	685f      	ldr	r7, [r3, #4]
 8021988:	2c00      	cmp	r4, #0
 802198a:	d03f      	beq.n	8021a0c <__gethex+0x3a0>
 802198c:	9b01      	ldr	r3, [sp, #4]
 802198e:	68db      	ldr	r3, [r3, #12]
 8021990:	2b02      	cmp	r3, #2
 8021992:	d010      	beq.n	80219b6 <__gethex+0x34a>
 8021994:	2b03      	cmp	r3, #3
 8021996:	d012      	beq.n	80219be <__gethex+0x352>
 8021998:	2b01      	cmp	r3, #1
 802199a:	d106      	bne.n	80219aa <__gethex+0x33e>
 802199c:	07a2      	lsls	r2, r4, #30
 802199e:	d504      	bpl.n	80219aa <__gethex+0x33e>
 80219a0:	9a02      	ldr	r2, [sp, #8]
 80219a2:	6812      	ldr	r2, [r2, #0]
 80219a4:	4314      	orrs	r4, r2
 80219a6:	421c      	tst	r4, r3
 80219a8:	d10c      	bne.n	80219c4 <__gethex+0x358>
 80219aa:	2310      	movs	r3, #16
 80219ac:	e02d      	b.n	8021a0a <__gethex+0x39e>
 80219ae:	2401      	movs	r4, #1
 80219b0:	e7d4      	b.n	802195c <__gethex+0x2f0>
 80219b2:	2601      	movs	r6, #1
 80219b4:	e7e8      	b.n	8021988 <__gethex+0x31c>
 80219b6:	2301      	movs	r3, #1
 80219b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80219ba:	1a9b      	subs	r3, r3, r2
 80219bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80219be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	d0f2      	beq.n	80219aa <__gethex+0x33e>
 80219c4:	692b      	ldr	r3, [r5, #16]
 80219c6:	2000      	movs	r0, #0
 80219c8:	9302      	str	r3, [sp, #8]
 80219ca:	009b      	lsls	r3, r3, #2
 80219cc:	9304      	str	r3, [sp, #16]
 80219ce:	002b      	movs	r3, r5
 80219d0:	9a04      	ldr	r2, [sp, #16]
 80219d2:	3314      	adds	r3, #20
 80219d4:	1899      	adds	r1, r3, r2
 80219d6:	681a      	ldr	r2, [r3, #0]
 80219d8:	1c54      	adds	r4, r2, #1
 80219da:	d01c      	beq.n	8021a16 <__gethex+0x3aa>
 80219dc:	3201      	adds	r2, #1
 80219de:	601a      	str	r2, [r3, #0]
 80219e0:	002b      	movs	r3, r5
 80219e2:	3314      	adds	r3, #20
 80219e4:	2e02      	cmp	r6, #2
 80219e6:	d13f      	bne.n	8021a68 <__gethex+0x3fc>
 80219e8:	9a01      	ldr	r2, [sp, #4]
 80219ea:	9900      	ldr	r1, [sp, #0]
 80219ec:	6812      	ldr	r2, [r2, #0]
 80219ee:	3a01      	subs	r2, #1
 80219f0:	428a      	cmp	r2, r1
 80219f2:	d109      	bne.n	8021a08 <__gethex+0x39c>
 80219f4:	000a      	movs	r2, r1
 80219f6:	201f      	movs	r0, #31
 80219f8:	4010      	ands	r0, r2
 80219fa:	2201      	movs	r2, #1
 80219fc:	4082      	lsls	r2, r0
 80219fe:	1149      	asrs	r1, r1, #5
 8021a00:	0089      	lsls	r1, r1, #2
 8021a02:	58cb      	ldr	r3, [r1, r3]
 8021a04:	4213      	tst	r3, r2
 8021a06:	d13d      	bne.n	8021a84 <__gethex+0x418>
 8021a08:	2320      	movs	r3, #32
 8021a0a:	431e      	orrs	r6, r3
 8021a0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021a0e:	601d      	str	r5, [r3, #0]
 8021a10:	9b07      	ldr	r3, [sp, #28]
 8021a12:	601f      	str	r7, [r3, #0]
 8021a14:	e6b4      	b.n	8021780 <__gethex+0x114>
 8021a16:	c301      	stmia	r3!, {r0}
 8021a18:	4299      	cmp	r1, r3
 8021a1a:	d8dc      	bhi.n	80219d6 <__gethex+0x36a>
 8021a1c:	68ab      	ldr	r3, [r5, #8]
 8021a1e:	9a02      	ldr	r2, [sp, #8]
 8021a20:	429a      	cmp	r2, r3
 8021a22:	db18      	blt.n	8021a56 <__gethex+0x3ea>
 8021a24:	6869      	ldr	r1, [r5, #4]
 8021a26:	9803      	ldr	r0, [sp, #12]
 8021a28:	3101      	adds	r1, #1
 8021a2a:	f000 f9df 	bl	8021dec <_Balloc>
 8021a2e:	1e04      	subs	r4, r0, #0
 8021a30:	d104      	bne.n	8021a3c <__gethex+0x3d0>
 8021a32:	0022      	movs	r2, r4
 8021a34:	2184      	movs	r1, #132	@ 0x84
 8021a36:	4b1d      	ldr	r3, [pc, #116]	@ (8021aac <__gethex+0x440>)
 8021a38:	481d      	ldr	r0, [pc, #116]	@ (8021ab0 <__gethex+0x444>)
 8021a3a:	e6c4      	b.n	80217c6 <__gethex+0x15a>
 8021a3c:	0029      	movs	r1, r5
 8021a3e:	692a      	ldr	r2, [r5, #16]
 8021a40:	310c      	adds	r1, #12
 8021a42:	3202      	adds	r2, #2
 8021a44:	0092      	lsls	r2, r2, #2
 8021a46:	300c      	adds	r0, #12
 8021a48:	f7fe fecc 	bl	80207e4 <memcpy>
 8021a4c:	0029      	movs	r1, r5
 8021a4e:	9803      	ldr	r0, [sp, #12]
 8021a50:	f000 fa10 	bl	8021e74 <_Bfree>
 8021a54:	0025      	movs	r5, r4
 8021a56:	692b      	ldr	r3, [r5, #16]
 8021a58:	1c5a      	adds	r2, r3, #1
 8021a5a:	612a      	str	r2, [r5, #16]
 8021a5c:	2201      	movs	r2, #1
 8021a5e:	3304      	adds	r3, #4
 8021a60:	009b      	lsls	r3, r3, #2
 8021a62:	18eb      	adds	r3, r5, r3
 8021a64:	605a      	str	r2, [r3, #4]
 8021a66:	e7bb      	b.n	80219e0 <__gethex+0x374>
 8021a68:	692a      	ldr	r2, [r5, #16]
 8021a6a:	9902      	ldr	r1, [sp, #8]
 8021a6c:	428a      	cmp	r2, r1
 8021a6e:	dd0b      	ble.n	8021a88 <__gethex+0x41c>
 8021a70:	2101      	movs	r1, #1
 8021a72:	0028      	movs	r0, r5
 8021a74:	f7ff fd92 	bl	802159c <rshift>
 8021a78:	9b01      	ldr	r3, [sp, #4]
 8021a7a:	3701      	adds	r7, #1
 8021a7c:	689b      	ldr	r3, [r3, #8]
 8021a7e:	42bb      	cmp	r3, r7
 8021a80:	da00      	bge.n	8021a84 <__gethex+0x418>
 8021a82:	e6df      	b.n	8021844 <__gethex+0x1d8>
 8021a84:	2601      	movs	r6, #1
 8021a86:	e7bf      	b.n	8021a08 <__gethex+0x39c>
 8021a88:	221f      	movs	r2, #31
 8021a8a:	9c00      	ldr	r4, [sp, #0]
 8021a8c:	9900      	ldr	r1, [sp, #0]
 8021a8e:	4014      	ands	r4, r2
 8021a90:	4211      	tst	r1, r2
 8021a92:	d0f7      	beq.n	8021a84 <__gethex+0x418>
 8021a94:	9a04      	ldr	r2, [sp, #16]
 8021a96:	189b      	adds	r3, r3, r2
 8021a98:	3b04      	subs	r3, #4
 8021a9a:	6818      	ldr	r0, [r3, #0]
 8021a9c:	f000 fa9e 	bl	8021fdc <__hi0bits>
 8021aa0:	2320      	movs	r3, #32
 8021aa2:	1b1b      	subs	r3, r3, r4
 8021aa4:	4298      	cmp	r0, r3
 8021aa6:	dbe3      	blt.n	8021a70 <__gethex+0x404>
 8021aa8:	e7ec      	b.n	8021a84 <__gethex+0x418>
 8021aaa:	46c0      	nop			@ (mov r8, r8)
 8021aac:	08026481 	.word	0x08026481
 8021ab0:	08026492 	.word	0x08026492

08021ab4 <L_shift>:
 8021ab4:	2308      	movs	r3, #8
 8021ab6:	b570      	push	{r4, r5, r6, lr}
 8021ab8:	2520      	movs	r5, #32
 8021aba:	1a9a      	subs	r2, r3, r2
 8021abc:	0092      	lsls	r2, r2, #2
 8021abe:	1aad      	subs	r5, r5, r2
 8021ac0:	6843      	ldr	r3, [r0, #4]
 8021ac2:	6804      	ldr	r4, [r0, #0]
 8021ac4:	001e      	movs	r6, r3
 8021ac6:	40ae      	lsls	r6, r5
 8021ac8:	40d3      	lsrs	r3, r2
 8021aca:	4334      	orrs	r4, r6
 8021acc:	6004      	str	r4, [r0, #0]
 8021ace:	6043      	str	r3, [r0, #4]
 8021ad0:	3004      	adds	r0, #4
 8021ad2:	4288      	cmp	r0, r1
 8021ad4:	d3f4      	bcc.n	8021ac0 <L_shift+0xc>
 8021ad6:	bd70      	pop	{r4, r5, r6, pc}

08021ad8 <__match>:
 8021ad8:	b530      	push	{r4, r5, lr}
 8021ada:	6803      	ldr	r3, [r0, #0]
 8021adc:	780c      	ldrb	r4, [r1, #0]
 8021ade:	3301      	adds	r3, #1
 8021ae0:	2c00      	cmp	r4, #0
 8021ae2:	d102      	bne.n	8021aea <__match+0x12>
 8021ae4:	6003      	str	r3, [r0, #0]
 8021ae6:	2001      	movs	r0, #1
 8021ae8:	bd30      	pop	{r4, r5, pc}
 8021aea:	781a      	ldrb	r2, [r3, #0]
 8021aec:	0015      	movs	r5, r2
 8021aee:	3d41      	subs	r5, #65	@ 0x41
 8021af0:	2d19      	cmp	r5, #25
 8021af2:	d800      	bhi.n	8021af6 <__match+0x1e>
 8021af4:	3220      	adds	r2, #32
 8021af6:	3101      	adds	r1, #1
 8021af8:	42a2      	cmp	r2, r4
 8021afa:	d0ef      	beq.n	8021adc <__match+0x4>
 8021afc:	2000      	movs	r0, #0
 8021afe:	e7f3      	b.n	8021ae8 <__match+0x10>

08021b00 <__hexnan>:
 8021b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b02:	680b      	ldr	r3, [r1, #0]
 8021b04:	b08b      	sub	sp, #44	@ 0x2c
 8021b06:	9201      	str	r2, [sp, #4]
 8021b08:	9901      	ldr	r1, [sp, #4]
 8021b0a:	115a      	asrs	r2, r3, #5
 8021b0c:	0092      	lsls	r2, r2, #2
 8021b0e:	188a      	adds	r2, r1, r2
 8021b10:	9202      	str	r2, [sp, #8]
 8021b12:	0019      	movs	r1, r3
 8021b14:	221f      	movs	r2, #31
 8021b16:	4011      	ands	r1, r2
 8021b18:	9008      	str	r0, [sp, #32]
 8021b1a:	9106      	str	r1, [sp, #24]
 8021b1c:	4213      	tst	r3, r2
 8021b1e:	d002      	beq.n	8021b26 <__hexnan+0x26>
 8021b20:	9b02      	ldr	r3, [sp, #8]
 8021b22:	3304      	adds	r3, #4
 8021b24:	9302      	str	r3, [sp, #8]
 8021b26:	9b02      	ldr	r3, [sp, #8]
 8021b28:	2500      	movs	r5, #0
 8021b2a:	1f1f      	subs	r7, r3, #4
 8021b2c:	003e      	movs	r6, r7
 8021b2e:	003c      	movs	r4, r7
 8021b30:	9b08      	ldr	r3, [sp, #32]
 8021b32:	603d      	str	r5, [r7, #0]
 8021b34:	681b      	ldr	r3, [r3, #0]
 8021b36:	9507      	str	r5, [sp, #28]
 8021b38:	9305      	str	r3, [sp, #20]
 8021b3a:	9503      	str	r5, [sp, #12]
 8021b3c:	9b05      	ldr	r3, [sp, #20]
 8021b3e:	3301      	adds	r3, #1
 8021b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b42:	9b05      	ldr	r3, [sp, #20]
 8021b44:	785b      	ldrb	r3, [r3, #1]
 8021b46:	9304      	str	r3, [sp, #16]
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	d028      	beq.n	8021b9e <__hexnan+0x9e>
 8021b4c:	9804      	ldr	r0, [sp, #16]
 8021b4e:	f7ff fd78 	bl	8021642 <__hexdig_fun>
 8021b52:	2800      	cmp	r0, #0
 8021b54:	d155      	bne.n	8021c02 <__hexnan+0x102>
 8021b56:	9b04      	ldr	r3, [sp, #16]
 8021b58:	2b20      	cmp	r3, #32
 8021b5a:	d819      	bhi.n	8021b90 <__hexnan+0x90>
 8021b5c:	9b03      	ldr	r3, [sp, #12]
 8021b5e:	9a07      	ldr	r2, [sp, #28]
 8021b60:	4293      	cmp	r3, r2
 8021b62:	dd12      	ble.n	8021b8a <__hexnan+0x8a>
 8021b64:	42b4      	cmp	r4, r6
 8021b66:	d206      	bcs.n	8021b76 <__hexnan+0x76>
 8021b68:	2d07      	cmp	r5, #7
 8021b6a:	dc04      	bgt.n	8021b76 <__hexnan+0x76>
 8021b6c:	002a      	movs	r2, r5
 8021b6e:	0031      	movs	r1, r6
 8021b70:	0020      	movs	r0, r4
 8021b72:	f7ff ff9f 	bl	8021ab4 <L_shift>
 8021b76:	9b01      	ldr	r3, [sp, #4]
 8021b78:	2508      	movs	r5, #8
 8021b7a:	429c      	cmp	r4, r3
 8021b7c:	d905      	bls.n	8021b8a <__hexnan+0x8a>
 8021b7e:	1f26      	subs	r6, r4, #4
 8021b80:	2500      	movs	r5, #0
 8021b82:	0034      	movs	r4, r6
 8021b84:	9b03      	ldr	r3, [sp, #12]
 8021b86:	6035      	str	r5, [r6, #0]
 8021b88:	9307      	str	r3, [sp, #28]
 8021b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b8c:	9305      	str	r3, [sp, #20]
 8021b8e:	e7d5      	b.n	8021b3c <__hexnan+0x3c>
 8021b90:	9b04      	ldr	r3, [sp, #16]
 8021b92:	2b29      	cmp	r3, #41	@ 0x29
 8021b94:	d15a      	bne.n	8021c4c <__hexnan+0x14c>
 8021b96:	9b05      	ldr	r3, [sp, #20]
 8021b98:	9a08      	ldr	r2, [sp, #32]
 8021b9a:	3302      	adds	r3, #2
 8021b9c:	6013      	str	r3, [r2, #0]
 8021b9e:	9b03      	ldr	r3, [sp, #12]
 8021ba0:	2b00      	cmp	r3, #0
 8021ba2:	d053      	beq.n	8021c4c <__hexnan+0x14c>
 8021ba4:	42b4      	cmp	r4, r6
 8021ba6:	d206      	bcs.n	8021bb6 <__hexnan+0xb6>
 8021ba8:	2d07      	cmp	r5, #7
 8021baa:	dc04      	bgt.n	8021bb6 <__hexnan+0xb6>
 8021bac:	002a      	movs	r2, r5
 8021bae:	0031      	movs	r1, r6
 8021bb0:	0020      	movs	r0, r4
 8021bb2:	f7ff ff7f 	bl	8021ab4 <L_shift>
 8021bb6:	9b01      	ldr	r3, [sp, #4]
 8021bb8:	429c      	cmp	r4, r3
 8021bba:	d936      	bls.n	8021c2a <__hexnan+0x12a>
 8021bbc:	001a      	movs	r2, r3
 8021bbe:	0023      	movs	r3, r4
 8021bc0:	cb02      	ldmia	r3!, {r1}
 8021bc2:	c202      	stmia	r2!, {r1}
 8021bc4:	429f      	cmp	r7, r3
 8021bc6:	d2fb      	bcs.n	8021bc0 <__hexnan+0xc0>
 8021bc8:	9b02      	ldr	r3, [sp, #8]
 8021bca:	1c61      	adds	r1, r4, #1
 8021bcc:	1eda      	subs	r2, r3, #3
 8021bce:	2304      	movs	r3, #4
 8021bd0:	4291      	cmp	r1, r2
 8021bd2:	d805      	bhi.n	8021be0 <__hexnan+0xe0>
 8021bd4:	9b02      	ldr	r3, [sp, #8]
 8021bd6:	3b04      	subs	r3, #4
 8021bd8:	1b1b      	subs	r3, r3, r4
 8021bda:	089b      	lsrs	r3, r3, #2
 8021bdc:	3301      	adds	r3, #1
 8021bde:	009b      	lsls	r3, r3, #2
 8021be0:	9a01      	ldr	r2, [sp, #4]
 8021be2:	18d3      	adds	r3, r2, r3
 8021be4:	2200      	movs	r2, #0
 8021be6:	c304      	stmia	r3!, {r2}
 8021be8:	429f      	cmp	r7, r3
 8021bea:	d2fc      	bcs.n	8021be6 <__hexnan+0xe6>
 8021bec:	683b      	ldr	r3, [r7, #0]
 8021bee:	2b00      	cmp	r3, #0
 8021bf0:	d104      	bne.n	8021bfc <__hexnan+0xfc>
 8021bf2:	9b01      	ldr	r3, [sp, #4]
 8021bf4:	429f      	cmp	r7, r3
 8021bf6:	d127      	bne.n	8021c48 <__hexnan+0x148>
 8021bf8:	2301      	movs	r3, #1
 8021bfa:	603b      	str	r3, [r7, #0]
 8021bfc:	2005      	movs	r0, #5
 8021bfe:	b00b      	add	sp, #44	@ 0x2c
 8021c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c02:	9b03      	ldr	r3, [sp, #12]
 8021c04:	3501      	adds	r5, #1
 8021c06:	3301      	adds	r3, #1
 8021c08:	9303      	str	r3, [sp, #12]
 8021c0a:	2d08      	cmp	r5, #8
 8021c0c:	dd06      	ble.n	8021c1c <__hexnan+0x11c>
 8021c0e:	9b01      	ldr	r3, [sp, #4]
 8021c10:	429c      	cmp	r4, r3
 8021c12:	d9ba      	bls.n	8021b8a <__hexnan+0x8a>
 8021c14:	2300      	movs	r3, #0
 8021c16:	2501      	movs	r5, #1
 8021c18:	3c04      	subs	r4, #4
 8021c1a:	6023      	str	r3, [r4, #0]
 8021c1c:	220f      	movs	r2, #15
 8021c1e:	6823      	ldr	r3, [r4, #0]
 8021c20:	4010      	ands	r0, r2
 8021c22:	011b      	lsls	r3, r3, #4
 8021c24:	4303      	orrs	r3, r0
 8021c26:	6023      	str	r3, [r4, #0]
 8021c28:	e7af      	b.n	8021b8a <__hexnan+0x8a>
 8021c2a:	9b06      	ldr	r3, [sp, #24]
 8021c2c:	2b00      	cmp	r3, #0
 8021c2e:	d0dd      	beq.n	8021bec <__hexnan+0xec>
 8021c30:	2320      	movs	r3, #32
 8021c32:	9a06      	ldr	r2, [sp, #24]
 8021c34:	9902      	ldr	r1, [sp, #8]
 8021c36:	1a9b      	subs	r3, r3, r2
 8021c38:	2201      	movs	r2, #1
 8021c3a:	4252      	negs	r2, r2
 8021c3c:	40da      	lsrs	r2, r3
 8021c3e:	3904      	subs	r1, #4
 8021c40:	680b      	ldr	r3, [r1, #0]
 8021c42:	4013      	ands	r3, r2
 8021c44:	600b      	str	r3, [r1, #0]
 8021c46:	e7d1      	b.n	8021bec <__hexnan+0xec>
 8021c48:	3f04      	subs	r7, #4
 8021c4a:	e7cf      	b.n	8021bec <__hexnan+0xec>
 8021c4c:	2004      	movs	r0, #4
 8021c4e:	e7d6      	b.n	8021bfe <__hexnan+0xfe>

08021c50 <malloc>:
 8021c50:	b510      	push	{r4, lr}
 8021c52:	4b03      	ldr	r3, [pc, #12]	@ (8021c60 <malloc+0x10>)
 8021c54:	0001      	movs	r1, r0
 8021c56:	6818      	ldr	r0, [r3, #0]
 8021c58:	f000 f826 	bl	8021ca8 <_malloc_r>
 8021c5c:	bd10      	pop	{r4, pc}
 8021c5e:	46c0      	nop			@ (mov r8, r8)
 8021c60:	200003d0 	.word	0x200003d0

08021c64 <sbrk_aligned>:
 8021c64:	b570      	push	{r4, r5, r6, lr}
 8021c66:	4e0f      	ldr	r6, [pc, #60]	@ (8021ca4 <sbrk_aligned+0x40>)
 8021c68:	000d      	movs	r5, r1
 8021c6a:	6831      	ldr	r1, [r6, #0]
 8021c6c:	0004      	movs	r4, r0
 8021c6e:	2900      	cmp	r1, #0
 8021c70:	d102      	bne.n	8021c78 <sbrk_aligned+0x14>
 8021c72:	f001 f989 	bl	8022f88 <_sbrk_r>
 8021c76:	6030      	str	r0, [r6, #0]
 8021c78:	0029      	movs	r1, r5
 8021c7a:	0020      	movs	r0, r4
 8021c7c:	f001 f984 	bl	8022f88 <_sbrk_r>
 8021c80:	1c43      	adds	r3, r0, #1
 8021c82:	d103      	bne.n	8021c8c <sbrk_aligned+0x28>
 8021c84:	2501      	movs	r5, #1
 8021c86:	426d      	negs	r5, r5
 8021c88:	0028      	movs	r0, r5
 8021c8a:	bd70      	pop	{r4, r5, r6, pc}
 8021c8c:	2303      	movs	r3, #3
 8021c8e:	1cc5      	adds	r5, r0, #3
 8021c90:	439d      	bics	r5, r3
 8021c92:	42a8      	cmp	r0, r5
 8021c94:	d0f8      	beq.n	8021c88 <sbrk_aligned+0x24>
 8021c96:	1a29      	subs	r1, r5, r0
 8021c98:	0020      	movs	r0, r4
 8021c9a:	f001 f975 	bl	8022f88 <_sbrk_r>
 8021c9e:	3001      	adds	r0, #1
 8021ca0:	d1f2      	bne.n	8021c88 <sbrk_aligned+0x24>
 8021ca2:	e7ef      	b.n	8021c84 <sbrk_aligned+0x20>
 8021ca4:	200033d0 	.word	0x200033d0

08021ca8 <_malloc_r>:
 8021ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021caa:	2203      	movs	r2, #3
 8021cac:	1ccb      	adds	r3, r1, #3
 8021cae:	4393      	bics	r3, r2
 8021cb0:	3308      	adds	r3, #8
 8021cb2:	0005      	movs	r5, r0
 8021cb4:	001f      	movs	r7, r3
 8021cb6:	2b0c      	cmp	r3, #12
 8021cb8:	d234      	bcs.n	8021d24 <_malloc_r+0x7c>
 8021cba:	270c      	movs	r7, #12
 8021cbc:	42b9      	cmp	r1, r7
 8021cbe:	d833      	bhi.n	8021d28 <_malloc_r+0x80>
 8021cc0:	0028      	movs	r0, r5
 8021cc2:	f000 f883 	bl	8021dcc <__malloc_lock>
 8021cc6:	4e37      	ldr	r6, [pc, #220]	@ (8021da4 <_malloc_r+0xfc>)
 8021cc8:	6833      	ldr	r3, [r6, #0]
 8021cca:	001c      	movs	r4, r3
 8021ccc:	2c00      	cmp	r4, #0
 8021cce:	d12f      	bne.n	8021d30 <_malloc_r+0x88>
 8021cd0:	0039      	movs	r1, r7
 8021cd2:	0028      	movs	r0, r5
 8021cd4:	f7ff ffc6 	bl	8021c64 <sbrk_aligned>
 8021cd8:	0004      	movs	r4, r0
 8021cda:	1c43      	adds	r3, r0, #1
 8021cdc:	d15f      	bne.n	8021d9e <_malloc_r+0xf6>
 8021cde:	6834      	ldr	r4, [r6, #0]
 8021ce0:	9400      	str	r4, [sp, #0]
 8021ce2:	9b00      	ldr	r3, [sp, #0]
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	d14a      	bne.n	8021d7e <_malloc_r+0xd6>
 8021ce8:	2c00      	cmp	r4, #0
 8021cea:	d052      	beq.n	8021d92 <_malloc_r+0xea>
 8021cec:	6823      	ldr	r3, [r4, #0]
 8021cee:	0028      	movs	r0, r5
 8021cf0:	18e3      	adds	r3, r4, r3
 8021cf2:	9900      	ldr	r1, [sp, #0]
 8021cf4:	9301      	str	r3, [sp, #4]
 8021cf6:	f001 f947 	bl	8022f88 <_sbrk_r>
 8021cfa:	9b01      	ldr	r3, [sp, #4]
 8021cfc:	4283      	cmp	r3, r0
 8021cfe:	d148      	bne.n	8021d92 <_malloc_r+0xea>
 8021d00:	6823      	ldr	r3, [r4, #0]
 8021d02:	0028      	movs	r0, r5
 8021d04:	1aff      	subs	r7, r7, r3
 8021d06:	0039      	movs	r1, r7
 8021d08:	f7ff ffac 	bl	8021c64 <sbrk_aligned>
 8021d0c:	3001      	adds	r0, #1
 8021d0e:	d040      	beq.n	8021d92 <_malloc_r+0xea>
 8021d10:	6823      	ldr	r3, [r4, #0]
 8021d12:	19db      	adds	r3, r3, r7
 8021d14:	6023      	str	r3, [r4, #0]
 8021d16:	6833      	ldr	r3, [r6, #0]
 8021d18:	685a      	ldr	r2, [r3, #4]
 8021d1a:	2a00      	cmp	r2, #0
 8021d1c:	d133      	bne.n	8021d86 <_malloc_r+0xde>
 8021d1e:	9b00      	ldr	r3, [sp, #0]
 8021d20:	6033      	str	r3, [r6, #0]
 8021d22:	e019      	b.n	8021d58 <_malloc_r+0xb0>
 8021d24:	2b00      	cmp	r3, #0
 8021d26:	dac9      	bge.n	8021cbc <_malloc_r+0x14>
 8021d28:	230c      	movs	r3, #12
 8021d2a:	602b      	str	r3, [r5, #0]
 8021d2c:	2000      	movs	r0, #0
 8021d2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021d30:	6821      	ldr	r1, [r4, #0]
 8021d32:	1bc9      	subs	r1, r1, r7
 8021d34:	d420      	bmi.n	8021d78 <_malloc_r+0xd0>
 8021d36:	290b      	cmp	r1, #11
 8021d38:	d90a      	bls.n	8021d50 <_malloc_r+0xa8>
 8021d3a:	19e2      	adds	r2, r4, r7
 8021d3c:	6027      	str	r7, [r4, #0]
 8021d3e:	42a3      	cmp	r3, r4
 8021d40:	d104      	bne.n	8021d4c <_malloc_r+0xa4>
 8021d42:	6032      	str	r2, [r6, #0]
 8021d44:	6863      	ldr	r3, [r4, #4]
 8021d46:	6011      	str	r1, [r2, #0]
 8021d48:	6053      	str	r3, [r2, #4]
 8021d4a:	e005      	b.n	8021d58 <_malloc_r+0xb0>
 8021d4c:	605a      	str	r2, [r3, #4]
 8021d4e:	e7f9      	b.n	8021d44 <_malloc_r+0x9c>
 8021d50:	6862      	ldr	r2, [r4, #4]
 8021d52:	42a3      	cmp	r3, r4
 8021d54:	d10e      	bne.n	8021d74 <_malloc_r+0xcc>
 8021d56:	6032      	str	r2, [r6, #0]
 8021d58:	0028      	movs	r0, r5
 8021d5a:	f000 f83f 	bl	8021ddc <__malloc_unlock>
 8021d5e:	0020      	movs	r0, r4
 8021d60:	2207      	movs	r2, #7
 8021d62:	300b      	adds	r0, #11
 8021d64:	1d23      	adds	r3, r4, #4
 8021d66:	4390      	bics	r0, r2
 8021d68:	1ac2      	subs	r2, r0, r3
 8021d6a:	4298      	cmp	r0, r3
 8021d6c:	d0df      	beq.n	8021d2e <_malloc_r+0x86>
 8021d6e:	1a1b      	subs	r3, r3, r0
 8021d70:	50a3      	str	r3, [r4, r2]
 8021d72:	e7dc      	b.n	8021d2e <_malloc_r+0x86>
 8021d74:	605a      	str	r2, [r3, #4]
 8021d76:	e7ef      	b.n	8021d58 <_malloc_r+0xb0>
 8021d78:	0023      	movs	r3, r4
 8021d7a:	6864      	ldr	r4, [r4, #4]
 8021d7c:	e7a6      	b.n	8021ccc <_malloc_r+0x24>
 8021d7e:	9c00      	ldr	r4, [sp, #0]
 8021d80:	6863      	ldr	r3, [r4, #4]
 8021d82:	9300      	str	r3, [sp, #0]
 8021d84:	e7ad      	b.n	8021ce2 <_malloc_r+0x3a>
 8021d86:	001a      	movs	r2, r3
 8021d88:	685b      	ldr	r3, [r3, #4]
 8021d8a:	42a3      	cmp	r3, r4
 8021d8c:	d1fb      	bne.n	8021d86 <_malloc_r+0xde>
 8021d8e:	2300      	movs	r3, #0
 8021d90:	e7da      	b.n	8021d48 <_malloc_r+0xa0>
 8021d92:	230c      	movs	r3, #12
 8021d94:	0028      	movs	r0, r5
 8021d96:	602b      	str	r3, [r5, #0]
 8021d98:	f000 f820 	bl	8021ddc <__malloc_unlock>
 8021d9c:	e7c6      	b.n	8021d2c <_malloc_r+0x84>
 8021d9e:	6007      	str	r7, [r0, #0]
 8021da0:	e7da      	b.n	8021d58 <_malloc_r+0xb0>
 8021da2:	46c0      	nop			@ (mov r8, r8)
 8021da4:	200033d4 	.word	0x200033d4

08021da8 <__ascii_mbtowc>:
 8021da8:	b082      	sub	sp, #8
 8021daa:	2900      	cmp	r1, #0
 8021dac:	d100      	bne.n	8021db0 <__ascii_mbtowc+0x8>
 8021dae:	a901      	add	r1, sp, #4
 8021db0:	1e10      	subs	r0, r2, #0
 8021db2:	d006      	beq.n	8021dc2 <__ascii_mbtowc+0x1a>
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	d006      	beq.n	8021dc6 <__ascii_mbtowc+0x1e>
 8021db8:	7813      	ldrb	r3, [r2, #0]
 8021dba:	600b      	str	r3, [r1, #0]
 8021dbc:	7810      	ldrb	r0, [r2, #0]
 8021dbe:	1e43      	subs	r3, r0, #1
 8021dc0:	4198      	sbcs	r0, r3
 8021dc2:	b002      	add	sp, #8
 8021dc4:	4770      	bx	lr
 8021dc6:	2002      	movs	r0, #2
 8021dc8:	4240      	negs	r0, r0
 8021dca:	e7fa      	b.n	8021dc2 <__ascii_mbtowc+0x1a>

08021dcc <__malloc_lock>:
 8021dcc:	b510      	push	{r4, lr}
 8021dce:	4802      	ldr	r0, [pc, #8]	@ (8021dd8 <__malloc_lock+0xc>)
 8021dd0:	f7fe fcfb 	bl	80207ca <__retarget_lock_acquire_recursive>
 8021dd4:	bd10      	pop	{r4, pc}
 8021dd6:	46c0      	nop			@ (mov r8, r8)
 8021dd8:	200033cc 	.word	0x200033cc

08021ddc <__malloc_unlock>:
 8021ddc:	b510      	push	{r4, lr}
 8021dde:	4802      	ldr	r0, [pc, #8]	@ (8021de8 <__malloc_unlock+0xc>)
 8021de0:	f7fe fcf4 	bl	80207cc <__retarget_lock_release_recursive>
 8021de4:	bd10      	pop	{r4, pc}
 8021de6:	46c0      	nop			@ (mov r8, r8)
 8021de8:	200033cc 	.word	0x200033cc

08021dec <_Balloc>:
 8021dec:	b570      	push	{r4, r5, r6, lr}
 8021dee:	69c5      	ldr	r5, [r0, #28]
 8021df0:	0006      	movs	r6, r0
 8021df2:	000c      	movs	r4, r1
 8021df4:	2d00      	cmp	r5, #0
 8021df6:	d10e      	bne.n	8021e16 <_Balloc+0x2a>
 8021df8:	2010      	movs	r0, #16
 8021dfa:	f7ff ff29 	bl	8021c50 <malloc>
 8021dfe:	1e02      	subs	r2, r0, #0
 8021e00:	61f0      	str	r0, [r6, #28]
 8021e02:	d104      	bne.n	8021e0e <_Balloc+0x22>
 8021e04:	216b      	movs	r1, #107	@ 0x6b
 8021e06:	4b19      	ldr	r3, [pc, #100]	@ (8021e6c <_Balloc+0x80>)
 8021e08:	4819      	ldr	r0, [pc, #100]	@ (8021e70 <_Balloc+0x84>)
 8021e0a:	f001 f8cf 	bl	8022fac <__assert_func>
 8021e0e:	6045      	str	r5, [r0, #4]
 8021e10:	6085      	str	r5, [r0, #8]
 8021e12:	6005      	str	r5, [r0, #0]
 8021e14:	60c5      	str	r5, [r0, #12]
 8021e16:	69f5      	ldr	r5, [r6, #28]
 8021e18:	68eb      	ldr	r3, [r5, #12]
 8021e1a:	2b00      	cmp	r3, #0
 8021e1c:	d013      	beq.n	8021e46 <_Balloc+0x5a>
 8021e1e:	69f3      	ldr	r3, [r6, #28]
 8021e20:	00a2      	lsls	r2, r4, #2
 8021e22:	68db      	ldr	r3, [r3, #12]
 8021e24:	189b      	adds	r3, r3, r2
 8021e26:	6818      	ldr	r0, [r3, #0]
 8021e28:	2800      	cmp	r0, #0
 8021e2a:	d118      	bne.n	8021e5e <_Balloc+0x72>
 8021e2c:	2101      	movs	r1, #1
 8021e2e:	000d      	movs	r5, r1
 8021e30:	40a5      	lsls	r5, r4
 8021e32:	1d6a      	adds	r2, r5, #5
 8021e34:	0030      	movs	r0, r6
 8021e36:	0092      	lsls	r2, r2, #2
 8021e38:	f001 f8d6 	bl	8022fe8 <_calloc_r>
 8021e3c:	2800      	cmp	r0, #0
 8021e3e:	d00c      	beq.n	8021e5a <_Balloc+0x6e>
 8021e40:	6044      	str	r4, [r0, #4]
 8021e42:	6085      	str	r5, [r0, #8]
 8021e44:	e00d      	b.n	8021e62 <_Balloc+0x76>
 8021e46:	2221      	movs	r2, #33	@ 0x21
 8021e48:	2104      	movs	r1, #4
 8021e4a:	0030      	movs	r0, r6
 8021e4c:	f001 f8cc 	bl	8022fe8 <_calloc_r>
 8021e50:	69f3      	ldr	r3, [r6, #28]
 8021e52:	60e8      	str	r0, [r5, #12]
 8021e54:	68db      	ldr	r3, [r3, #12]
 8021e56:	2b00      	cmp	r3, #0
 8021e58:	d1e1      	bne.n	8021e1e <_Balloc+0x32>
 8021e5a:	2000      	movs	r0, #0
 8021e5c:	bd70      	pop	{r4, r5, r6, pc}
 8021e5e:	6802      	ldr	r2, [r0, #0]
 8021e60:	601a      	str	r2, [r3, #0]
 8021e62:	2300      	movs	r3, #0
 8021e64:	6103      	str	r3, [r0, #16]
 8021e66:	60c3      	str	r3, [r0, #12]
 8021e68:	e7f8      	b.n	8021e5c <_Balloc+0x70>
 8021e6a:	46c0      	nop			@ (mov r8, r8)
 8021e6c:	08026412 	.word	0x08026412
 8021e70:	080264f2 	.word	0x080264f2

08021e74 <_Bfree>:
 8021e74:	b570      	push	{r4, r5, r6, lr}
 8021e76:	69c6      	ldr	r6, [r0, #28]
 8021e78:	0005      	movs	r5, r0
 8021e7a:	000c      	movs	r4, r1
 8021e7c:	2e00      	cmp	r6, #0
 8021e7e:	d10e      	bne.n	8021e9e <_Bfree+0x2a>
 8021e80:	2010      	movs	r0, #16
 8021e82:	f7ff fee5 	bl	8021c50 <malloc>
 8021e86:	1e02      	subs	r2, r0, #0
 8021e88:	61e8      	str	r0, [r5, #28]
 8021e8a:	d104      	bne.n	8021e96 <_Bfree+0x22>
 8021e8c:	218f      	movs	r1, #143	@ 0x8f
 8021e8e:	4b09      	ldr	r3, [pc, #36]	@ (8021eb4 <_Bfree+0x40>)
 8021e90:	4809      	ldr	r0, [pc, #36]	@ (8021eb8 <_Bfree+0x44>)
 8021e92:	f001 f88b 	bl	8022fac <__assert_func>
 8021e96:	6046      	str	r6, [r0, #4]
 8021e98:	6086      	str	r6, [r0, #8]
 8021e9a:	6006      	str	r6, [r0, #0]
 8021e9c:	60c6      	str	r6, [r0, #12]
 8021e9e:	2c00      	cmp	r4, #0
 8021ea0:	d007      	beq.n	8021eb2 <_Bfree+0x3e>
 8021ea2:	69eb      	ldr	r3, [r5, #28]
 8021ea4:	6862      	ldr	r2, [r4, #4]
 8021ea6:	68db      	ldr	r3, [r3, #12]
 8021ea8:	0092      	lsls	r2, r2, #2
 8021eaa:	189b      	adds	r3, r3, r2
 8021eac:	681a      	ldr	r2, [r3, #0]
 8021eae:	6022      	str	r2, [r4, #0]
 8021eb0:	601c      	str	r4, [r3, #0]
 8021eb2:	bd70      	pop	{r4, r5, r6, pc}
 8021eb4:	08026412 	.word	0x08026412
 8021eb8:	080264f2 	.word	0x080264f2

08021ebc <__multadd>:
 8021ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021ebe:	000f      	movs	r7, r1
 8021ec0:	9001      	str	r0, [sp, #4]
 8021ec2:	000c      	movs	r4, r1
 8021ec4:	001e      	movs	r6, r3
 8021ec6:	2000      	movs	r0, #0
 8021ec8:	690d      	ldr	r5, [r1, #16]
 8021eca:	3714      	adds	r7, #20
 8021ecc:	683b      	ldr	r3, [r7, #0]
 8021ece:	3001      	adds	r0, #1
 8021ed0:	b299      	uxth	r1, r3
 8021ed2:	4351      	muls	r1, r2
 8021ed4:	0c1b      	lsrs	r3, r3, #16
 8021ed6:	4353      	muls	r3, r2
 8021ed8:	1989      	adds	r1, r1, r6
 8021eda:	0c0e      	lsrs	r6, r1, #16
 8021edc:	199b      	adds	r3, r3, r6
 8021ede:	0c1e      	lsrs	r6, r3, #16
 8021ee0:	b289      	uxth	r1, r1
 8021ee2:	041b      	lsls	r3, r3, #16
 8021ee4:	185b      	adds	r3, r3, r1
 8021ee6:	c708      	stmia	r7!, {r3}
 8021ee8:	4285      	cmp	r5, r0
 8021eea:	dcef      	bgt.n	8021ecc <__multadd+0x10>
 8021eec:	2e00      	cmp	r6, #0
 8021eee:	d022      	beq.n	8021f36 <__multadd+0x7a>
 8021ef0:	68a3      	ldr	r3, [r4, #8]
 8021ef2:	42ab      	cmp	r3, r5
 8021ef4:	dc19      	bgt.n	8021f2a <__multadd+0x6e>
 8021ef6:	6861      	ldr	r1, [r4, #4]
 8021ef8:	9801      	ldr	r0, [sp, #4]
 8021efa:	3101      	adds	r1, #1
 8021efc:	f7ff ff76 	bl	8021dec <_Balloc>
 8021f00:	1e07      	subs	r7, r0, #0
 8021f02:	d105      	bne.n	8021f10 <__multadd+0x54>
 8021f04:	003a      	movs	r2, r7
 8021f06:	21ba      	movs	r1, #186	@ 0xba
 8021f08:	4b0c      	ldr	r3, [pc, #48]	@ (8021f3c <__multadd+0x80>)
 8021f0a:	480d      	ldr	r0, [pc, #52]	@ (8021f40 <__multadd+0x84>)
 8021f0c:	f001 f84e 	bl	8022fac <__assert_func>
 8021f10:	0021      	movs	r1, r4
 8021f12:	6922      	ldr	r2, [r4, #16]
 8021f14:	310c      	adds	r1, #12
 8021f16:	3202      	adds	r2, #2
 8021f18:	0092      	lsls	r2, r2, #2
 8021f1a:	300c      	adds	r0, #12
 8021f1c:	f7fe fc62 	bl	80207e4 <memcpy>
 8021f20:	0021      	movs	r1, r4
 8021f22:	9801      	ldr	r0, [sp, #4]
 8021f24:	f7ff ffa6 	bl	8021e74 <_Bfree>
 8021f28:	003c      	movs	r4, r7
 8021f2a:	1d2b      	adds	r3, r5, #4
 8021f2c:	009b      	lsls	r3, r3, #2
 8021f2e:	18e3      	adds	r3, r4, r3
 8021f30:	3501      	adds	r5, #1
 8021f32:	605e      	str	r6, [r3, #4]
 8021f34:	6125      	str	r5, [r4, #16]
 8021f36:	0020      	movs	r0, r4
 8021f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021f3a:	46c0      	nop			@ (mov r8, r8)
 8021f3c:	08026481 	.word	0x08026481
 8021f40:	080264f2 	.word	0x080264f2

08021f44 <__s2b>:
 8021f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021f46:	0007      	movs	r7, r0
 8021f48:	0018      	movs	r0, r3
 8021f4a:	000c      	movs	r4, r1
 8021f4c:	3008      	adds	r0, #8
 8021f4e:	2109      	movs	r1, #9
 8021f50:	9301      	str	r3, [sp, #4]
 8021f52:	0015      	movs	r5, r2
 8021f54:	f7de f9b0 	bl	80002b8 <__divsi3>
 8021f58:	2301      	movs	r3, #1
 8021f5a:	2100      	movs	r1, #0
 8021f5c:	4283      	cmp	r3, r0
 8021f5e:	db0a      	blt.n	8021f76 <__s2b+0x32>
 8021f60:	0038      	movs	r0, r7
 8021f62:	f7ff ff43 	bl	8021dec <_Balloc>
 8021f66:	1e01      	subs	r1, r0, #0
 8021f68:	d108      	bne.n	8021f7c <__s2b+0x38>
 8021f6a:	000a      	movs	r2, r1
 8021f6c:	4b19      	ldr	r3, [pc, #100]	@ (8021fd4 <__s2b+0x90>)
 8021f6e:	481a      	ldr	r0, [pc, #104]	@ (8021fd8 <__s2b+0x94>)
 8021f70:	31d3      	adds	r1, #211	@ 0xd3
 8021f72:	f001 f81b 	bl	8022fac <__assert_func>
 8021f76:	005b      	lsls	r3, r3, #1
 8021f78:	3101      	adds	r1, #1
 8021f7a:	e7ef      	b.n	8021f5c <__s2b+0x18>
 8021f7c:	9b08      	ldr	r3, [sp, #32]
 8021f7e:	6143      	str	r3, [r0, #20]
 8021f80:	2301      	movs	r3, #1
 8021f82:	6103      	str	r3, [r0, #16]
 8021f84:	2d09      	cmp	r5, #9
 8021f86:	dd18      	ble.n	8021fba <__s2b+0x76>
 8021f88:	0023      	movs	r3, r4
 8021f8a:	3309      	adds	r3, #9
 8021f8c:	001e      	movs	r6, r3
 8021f8e:	9300      	str	r3, [sp, #0]
 8021f90:	1964      	adds	r4, r4, r5
 8021f92:	7833      	ldrb	r3, [r6, #0]
 8021f94:	220a      	movs	r2, #10
 8021f96:	0038      	movs	r0, r7
 8021f98:	3b30      	subs	r3, #48	@ 0x30
 8021f9a:	f7ff ff8f 	bl	8021ebc <__multadd>
 8021f9e:	3601      	adds	r6, #1
 8021fa0:	0001      	movs	r1, r0
 8021fa2:	42a6      	cmp	r6, r4
 8021fa4:	d1f5      	bne.n	8021f92 <__s2b+0x4e>
 8021fa6:	002c      	movs	r4, r5
 8021fa8:	9b00      	ldr	r3, [sp, #0]
 8021faa:	3c08      	subs	r4, #8
 8021fac:	191c      	adds	r4, r3, r4
 8021fae:	002e      	movs	r6, r5
 8021fb0:	9b01      	ldr	r3, [sp, #4]
 8021fb2:	429e      	cmp	r6, r3
 8021fb4:	db04      	blt.n	8021fc0 <__s2b+0x7c>
 8021fb6:	0008      	movs	r0, r1
 8021fb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021fba:	2509      	movs	r5, #9
 8021fbc:	340a      	adds	r4, #10
 8021fbe:	e7f6      	b.n	8021fae <__s2b+0x6a>
 8021fc0:	1b63      	subs	r3, r4, r5
 8021fc2:	5d9b      	ldrb	r3, [r3, r6]
 8021fc4:	220a      	movs	r2, #10
 8021fc6:	0038      	movs	r0, r7
 8021fc8:	3b30      	subs	r3, #48	@ 0x30
 8021fca:	f7ff ff77 	bl	8021ebc <__multadd>
 8021fce:	3601      	adds	r6, #1
 8021fd0:	0001      	movs	r1, r0
 8021fd2:	e7ed      	b.n	8021fb0 <__s2b+0x6c>
 8021fd4:	08026481 	.word	0x08026481
 8021fd8:	080264f2 	.word	0x080264f2

08021fdc <__hi0bits>:
 8021fdc:	2280      	movs	r2, #128	@ 0x80
 8021fde:	0003      	movs	r3, r0
 8021fe0:	0252      	lsls	r2, r2, #9
 8021fe2:	2000      	movs	r0, #0
 8021fe4:	4293      	cmp	r3, r2
 8021fe6:	d201      	bcs.n	8021fec <__hi0bits+0x10>
 8021fe8:	041b      	lsls	r3, r3, #16
 8021fea:	3010      	adds	r0, #16
 8021fec:	2280      	movs	r2, #128	@ 0x80
 8021fee:	0452      	lsls	r2, r2, #17
 8021ff0:	4293      	cmp	r3, r2
 8021ff2:	d201      	bcs.n	8021ff8 <__hi0bits+0x1c>
 8021ff4:	3008      	adds	r0, #8
 8021ff6:	021b      	lsls	r3, r3, #8
 8021ff8:	2280      	movs	r2, #128	@ 0x80
 8021ffa:	0552      	lsls	r2, r2, #21
 8021ffc:	4293      	cmp	r3, r2
 8021ffe:	d201      	bcs.n	8022004 <__hi0bits+0x28>
 8022000:	3004      	adds	r0, #4
 8022002:	011b      	lsls	r3, r3, #4
 8022004:	2280      	movs	r2, #128	@ 0x80
 8022006:	05d2      	lsls	r2, r2, #23
 8022008:	4293      	cmp	r3, r2
 802200a:	d201      	bcs.n	8022010 <__hi0bits+0x34>
 802200c:	3002      	adds	r0, #2
 802200e:	009b      	lsls	r3, r3, #2
 8022010:	2b00      	cmp	r3, #0
 8022012:	db03      	blt.n	802201c <__hi0bits+0x40>
 8022014:	3001      	adds	r0, #1
 8022016:	4213      	tst	r3, r2
 8022018:	d100      	bne.n	802201c <__hi0bits+0x40>
 802201a:	2020      	movs	r0, #32
 802201c:	4770      	bx	lr

0802201e <__lo0bits>:
 802201e:	6803      	ldr	r3, [r0, #0]
 8022020:	0001      	movs	r1, r0
 8022022:	2207      	movs	r2, #7
 8022024:	0018      	movs	r0, r3
 8022026:	4010      	ands	r0, r2
 8022028:	4213      	tst	r3, r2
 802202a:	d00d      	beq.n	8022048 <__lo0bits+0x2a>
 802202c:	3a06      	subs	r2, #6
 802202e:	2000      	movs	r0, #0
 8022030:	4213      	tst	r3, r2
 8022032:	d105      	bne.n	8022040 <__lo0bits+0x22>
 8022034:	3002      	adds	r0, #2
 8022036:	4203      	tst	r3, r0
 8022038:	d003      	beq.n	8022042 <__lo0bits+0x24>
 802203a:	40d3      	lsrs	r3, r2
 802203c:	0010      	movs	r0, r2
 802203e:	600b      	str	r3, [r1, #0]
 8022040:	4770      	bx	lr
 8022042:	089b      	lsrs	r3, r3, #2
 8022044:	600b      	str	r3, [r1, #0]
 8022046:	e7fb      	b.n	8022040 <__lo0bits+0x22>
 8022048:	b29a      	uxth	r2, r3
 802204a:	2a00      	cmp	r2, #0
 802204c:	d101      	bne.n	8022052 <__lo0bits+0x34>
 802204e:	2010      	movs	r0, #16
 8022050:	0c1b      	lsrs	r3, r3, #16
 8022052:	b2da      	uxtb	r2, r3
 8022054:	2a00      	cmp	r2, #0
 8022056:	d101      	bne.n	802205c <__lo0bits+0x3e>
 8022058:	3008      	adds	r0, #8
 802205a:	0a1b      	lsrs	r3, r3, #8
 802205c:	071a      	lsls	r2, r3, #28
 802205e:	d101      	bne.n	8022064 <__lo0bits+0x46>
 8022060:	3004      	adds	r0, #4
 8022062:	091b      	lsrs	r3, r3, #4
 8022064:	079a      	lsls	r2, r3, #30
 8022066:	d101      	bne.n	802206c <__lo0bits+0x4e>
 8022068:	3002      	adds	r0, #2
 802206a:	089b      	lsrs	r3, r3, #2
 802206c:	07da      	lsls	r2, r3, #31
 802206e:	d4e9      	bmi.n	8022044 <__lo0bits+0x26>
 8022070:	3001      	adds	r0, #1
 8022072:	085b      	lsrs	r3, r3, #1
 8022074:	d1e6      	bne.n	8022044 <__lo0bits+0x26>
 8022076:	2020      	movs	r0, #32
 8022078:	e7e2      	b.n	8022040 <__lo0bits+0x22>
	...

0802207c <__i2b>:
 802207c:	b510      	push	{r4, lr}
 802207e:	000c      	movs	r4, r1
 8022080:	2101      	movs	r1, #1
 8022082:	f7ff feb3 	bl	8021dec <_Balloc>
 8022086:	2800      	cmp	r0, #0
 8022088:	d107      	bne.n	802209a <__i2b+0x1e>
 802208a:	2146      	movs	r1, #70	@ 0x46
 802208c:	4c05      	ldr	r4, [pc, #20]	@ (80220a4 <__i2b+0x28>)
 802208e:	0002      	movs	r2, r0
 8022090:	4b05      	ldr	r3, [pc, #20]	@ (80220a8 <__i2b+0x2c>)
 8022092:	0020      	movs	r0, r4
 8022094:	31ff      	adds	r1, #255	@ 0xff
 8022096:	f000 ff89 	bl	8022fac <__assert_func>
 802209a:	2301      	movs	r3, #1
 802209c:	6144      	str	r4, [r0, #20]
 802209e:	6103      	str	r3, [r0, #16]
 80220a0:	bd10      	pop	{r4, pc}
 80220a2:	46c0      	nop			@ (mov r8, r8)
 80220a4:	080264f2 	.word	0x080264f2
 80220a8:	08026481 	.word	0x08026481

080220ac <__multiply>:
 80220ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80220ae:	0014      	movs	r4, r2
 80220b0:	690a      	ldr	r2, [r1, #16]
 80220b2:	6923      	ldr	r3, [r4, #16]
 80220b4:	000d      	movs	r5, r1
 80220b6:	b08b      	sub	sp, #44	@ 0x2c
 80220b8:	429a      	cmp	r2, r3
 80220ba:	db02      	blt.n	80220c2 <__multiply+0x16>
 80220bc:	0023      	movs	r3, r4
 80220be:	000c      	movs	r4, r1
 80220c0:	001d      	movs	r5, r3
 80220c2:	6927      	ldr	r7, [r4, #16]
 80220c4:	692e      	ldr	r6, [r5, #16]
 80220c6:	6861      	ldr	r1, [r4, #4]
 80220c8:	19bb      	adds	r3, r7, r6
 80220ca:	9303      	str	r3, [sp, #12]
 80220cc:	68a3      	ldr	r3, [r4, #8]
 80220ce:	19ba      	adds	r2, r7, r6
 80220d0:	4293      	cmp	r3, r2
 80220d2:	da00      	bge.n	80220d6 <__multiply+0x2a>
 80220d4:	3101      	adds	r1, #1
 80220d6:	f7ff fe89 	bl	8021dec <_Balloc>
 80220da:	9002      	str	r0, [sp, #8]
 80220dc:	2800      	cmp	r0, #0
 80220de:	d106      	bne.n	80220ee <__multiply+0x42>
 80220e0:	21b1      	movs	r1, #177	@ 0xb1
 80220e2:	4b49      	ldr	r3, [pc, #292]	@ (8022208 <__multiply+0x15c>)
 80220e4:	4849      	ldr	r0, [pc, #292]	@ (802220c <__multiply+0x160>)
 80220e6:	9a02      	ldr	r2, [sp, #8]
 80220e8:	0049      	lsls	r1, r1, #1
 80220ea:	f000 ff5f 	bl	8022fac <__assert_func>
 80220ee:	9b02      	ldr	r3, [sp, #8]
 80220f0:	2200      	movs	r2, #0
 80220f2:	3314      	adds	r3, #20
 80220f4:	469c      	mov	ip, r3
 80220f6:	19bb      	adds	r3, r7, r6
 80220f8:	009b      	lsls	r3, r3, #2
 80220fa:	4463      	add	r3, ip
 80220fc:	9304      	str	r3, [sp, #16]
 80220fe:	4663      	mov	r3, ip
 8022100:	9904      	ldr	r1, [sp, #16]
 8022102:	428b      	cmp	r3, r1
 8022104:	d32a      	bcc.n	802215c <__multiply+0xb0>
 8022106:	0023      	movs	r3, r4
 8022108:	00bf      	lsls	r7, r7, #2
 802210a:	3314      	adds	r3, #20
 802210c:	3514      	adds	r5, #20
 802210e:	9308      	str	r3, [sp, #32]
 8022110:	00b6      	lsls	r6, r6, #2
 8022112:	19db      	adds	r3, r3, r7
 8022114:	9305      	str	r3, [sp, #20]
 8022116:	19ab      	adds	r3, r5, r6
 8022118:	9309      	str	r3, [sp, #36]	@ 0x24
 802211a:	2304      	movs	r3, #4
 802211c:	9306      	str	r3, [sp, #24]
 802211e:	0023      	movs	r3, r4
 8022120:	9a05      	ldr	r2, [sp, #20]
 8022122:	3315      	adds	r3, #21
 8022124:	9501      	str	r5, [sp, #4]
 8022126:	429a      	cmp	r2, r3
 8022128:	d305      	bcc.n	8022136 <__multiply+0x8a>
 802212a:	1b13      	subs	r3, r2, r4
 802212c:	3b15      	subs	r3, #21
 802212e:	089b      	lsrs	r3, r3, #2
 8022130:	3301      	adds	r3, #1
 8022132:	009b      	lsls	r3, r3, #2
 8022134:	9306      	str	r3, [sp, #24]
 8022136:	9b01      	ldr	r3, [sp, #4]
 8022138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802213a:	4293      	cmp	r3, r2
 802213c:	d310      	bcc.n	8022160 <__multiply+0xb4>
 802213e:	9b03      	ldr	r3, [sp, #12]
 8022140:	2b00      	cmp	r3, #0
 8022142:	dd05      	ble.n	8022150 <__multiply+0xa4>
 8022144:	9b04      	ldr	r3, [sp, #16]
 8022146:	3b04      	subs	r3, #4
 8022148:	9304      	str	r3, [sp, #16]
 802214a:	681b      	ldr	r3, [r3, #0]
 802214c:	2b00      	cmp	r3, #0
 802214e:	d056      	beq.n	80221fe <__multiply+0x152>
 8022150:	9b02      	ldr	r3, [sp, #8]
 8022152:	9a03      	ldr	r2, [sp, #12]
 8022154:	0018      	movs	r0, r3
 8022156:	611a      	str	r2, [r3, #16]
 8022158:	b00b      	add	sp, #44	@ 0x2c
 802215a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802215c:	c304      	stmia	r3!, {r2}
 802215e:	e7cf      	b.n	8022100 <__multiply+0x54>
 8022160:	9b01      	ldr	r3, [sp, #4]
 8022162:	6818      	ldr	r0, [r3, #0]
 8022164:	b280      	uxth	r0, r0
 8022166:	2800      	cmp	r0, #0
 8022168:	d01e      	beq.n	80221a8 <__multiply+0xfc>
 802216a:	4667      	mov	r7, ip
 802216c:	2500      	movs	r5, #0
 802216e:	9e08      	ldr	r6, [sp, #32]
 8022170:	ce02      	ldmia	r6!, {r1}
 8022172:	683b      	ldr	r3, [r7, #0]
 8022174:	9307      	str	r3, [sp, #28]
 8022176:	b28b      	uxth	r3, r1
 8022178:	4343      	muls	r3, r0
 802217a:	001a      	movs	r2, r3
 802217c:	466b      	mov	r3, sp
 802217e:	0c09      	lsrs	r1, r1, #16
 8022180:	8b9b      	ldrh	r3, [r3, #28]
 8022182:	4341      	muls	r1, r0
 8022184:	18d3      	adds	r3, r2, r3
 8022186:	9a07      	ldr	r2, [sp, #28]
 8022188:	195b      	adds	r3, r3, r5
 802218a:	0c12      	lsrs	r2, r2, #16
 802218c:	1889      	adds	r1, r1, r2
 802218e:	0c1a      	lsrs	r2, r3, #16
 8022190:	188a      	adds	r2, r1, r2
 8022192:	b29b      	uxth	r3, r3
 8022194:	0c15      	lsrs	r5, r2, #16
 8022196:	0412      	lsls	r2, r2, #16
 8022198:	431a      	orrs	r2, r3
 802219a:	9b05      	ldr	r3, [sp, #20]
 802219c:	c704      	stmia	r7!, {r2}
 802219e:	42b3      	cmp	r3, r6
 80221a0:	d8e6      	bhi.n	8022170 <__multiply+0xc4>
 80221a2:	4663      	mov	r3, ip
 80221a4:	9a06      	ldr	r2, [sp, #24]
 80221a6:	509d      	str	r5, [r3, r2]
 80221a8:	9b01      	ldr	r3, [sp, #4]
 80221aa:	6818      	ldr	r0, [r3, #0]
 80221ac:	0c00      	lsrs	r0, r0, #16
 80221ae:	d020      	beq.n	80221f2 <__multiply+0x146>
 80221b0:	4663      	mov	r3, ip
 80221b2:	0025      	movs	r5, r4
 80221b4:	4661      	mov	r1, ip
 80221b6:	2700      	movs	r7, #0
 80221b8:	681b      	ldr	r3, [r3, #0]
 80221ba:	3514      	adds	r5, #20
 80221bc:	682a      	ldr	r2, [r5, #0]
 80221be:	680e      	ldr	r6, [r1, #0]
 80221c0:	b292      	uxth	r2, r2
 80221c2:	4342      	muls	r2, r0
 80221c4:	0c36      	lsrs	r6, r6, #16
 80221c6:	1992      	adds	r2, r2, r6
 80221c8:	19d2      	adds	r2, r2, r7
 80221ca:	0416      	lsls	r6, r2, #16
 80221cc:	b29b      	uxth	r3, r3
 80221ce:	431e      	orrs	r6, r3
 80221d0:	600e      	str	r6, [r1, #0]
 80221d2:	cd40      	ldmia	r5!, {r6}
 80221d4:	684b      	ldr	r3, [r1, #4]
 80221d6:	0c36      	lsrs	r6, r6, #16
 80221d8:	4346      	muls	r6, r0
 80221da:	b29b      	uxth	r3, r3
 80221dc:	0c12      	lsrs	r2, r2, #16
 80221de:	18f3      	adds	r3, r6, r3
 80221e0:	189b      	adds	r3, r3, r2
 80221e2:	9a05      	ldr	r2, [sp, #20]
 80221e4:	0c1f      	lsrs	r7, r3, #16
 80221e6:	3104      	adds	r1, #4
 80221e8:	42aa      	cmp	r2, r5
 80221ea:	d8e7      	bhi.n	80221bc <__multiply+0x110>
 80221ec:	4662      	mov	r2, ip
 80221ee:	9906      	ldr	r1, [sp, #24]
 80221f0:	5053      	str	r3, [r2, r1]
 80221f2:	9b01      	ldr	r3, [sp, #4]
 80221f4:	3304      	adds	r3, #4
 80221f6:	9301      	str	r3, [sp, #4]
 80221f8:	2304      	movs	r3, #4
 80221fa:	449c      	add	ip, r3
 80221fc:	e79b      	b.n	8022136 <__multiply+0x8a>
 80221fe:	9b03      	ldr	r3, [sp, #12]
 8022200:	3b01      	subs	r3, #1
 8022202:	9303      	str	r3, [sp, #12]
 8022204:	e79b      	b.n	802213e <__multiply+0x92>
 8022206:	46c0      	nop			@ (mov r8, r8)
 8022208:	08026481 	.word	0x08026481
 802220c:	080264f2 	.word	0x080264f2

08022210 <__pow5mult>:
 8022210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022212:	2303      	movs	r3, #3
 8022214:	0015      	movs	r5, r2
 8022216:	0007      	movs	r7, r0
 8022218:	000e      	movs	r6, r1
 802221a:	401a      	ands	r2, r3
 802221c:	421d      	tst	r5, r3
 802221e:	d008      	beq.n	8022232 <__pow5mult+0x22>
 8022220:	4925      	ldr	r1, [pc, #148]	@ (80222b8 <__pow5mult+0xa8>)
 8022222:	3a01      	subs	r2, #1
 8022224:	0092      	lsls	r2, r2, #2
 8022226:	5852      	ldr	r2, [r2, r1]
 8022228:	2300      	movs	r3, #0
 802222a:	0031      	movs	r1, r6
 802222c:	f7ff fe46 	bl	8021ebc <__multadd>
 8022230:	0006      	movs	r6, r0
 8022232:	10ad      	asrs	r5, r5, #2
 8022234:	d03d      	beq.n	80222b2 <__pow5mult+0xa2>
 8022236:	69fc      	ldr	r4, [r7, #28]
 8022238:	2c00      	cmp	r4, #0
 802223a:	d10f      	bne.n	802225c <__pow5mult+0x4c>
 802223c:	2010      	movs	r0, #16
 802223e:	f7ff fd07 	bl	8021c50 <malloc>
 8022242:	1e02      	subs	r2, r0, #0
 8022244:	61f8      	str	r0, [r7, #28]
 8022246:	d105      	bne.n	8022254 <__pow5mult+0x44>
 8022248:	21b4      	movs	r1, #180	@ 0xb4
 802224a:	4b1c      	ldr	r3, [pc, #112]	@ (80222bc <__pow5mult+0xac>)
 802224c:	481c      	ldr	r0, [pc, #112]	@ (80222c0 <__pow5mult+0xb0>)
 802224e:	31ff      	adds	r1, #255	@ 0xff
 8022250:	f000 feac 	bl	8022fac <__assert_func>
 8022254:	6044      	str	r4, [r0, #4]
 8022256:	6084      	str	r4, [r0, #8]
 8022258:	6004      	str	r4, [r0, #0]
 802225a:	60c4      	str	r4, [r0, #12]
 802225c:	69fb      	ldr	r3, [r7, #28]
 802225e:	689c      	ldr	r4, [r3, #8]
 8022260:	9301      	str	r3, [sp, #4]
 8022262:	2c00      	cmp	r4, #0
 8022264:	d108      	bne.n	8022278 <__pow5mult+0x68>
 8022266:	0038      	movs	r0, r7
 8022268:	4916      	ldr	r1, [pc, #88]	@ (80222c4 <__pow5mult+0xb4>)
 802226a:	f7ff ff07 	bl	802207c <__i2b>
 802226e:	9b01      	ldr	r3, [sp, #4]
 8022270:	0004      	movs	r4, r0
 8022272:	6098      	str	r0, [r3, #8]
 8022274:	2300      	movs	r3, #0
 8022276:	6003      	str	r3, [r0, #0]
 8022278:	2301      	movs	r3, #1
 802227a:	421d      	tst	r5, r3
 802227c:	d00a      	beq.n	8022294 <__pow5mult+0x84>
 802227e:	0031      	movs	r1, r6
 8022280:	0022      	movs	r2, r4
 8022282:	0038      	movs	r0, r7
 8022284:	f7ff ff12 	bl	80220ac <__multiply>
 8022288:	0031      	movs	r1, r6
 802228a:	9001      	str	r0, [sp, #4]
 802228c:	0038      	movs	r0, r7
 802228e:	f7ff fdf1 	bl	8021e74 <_Bfree>
 8022292:	9e01      	ldr	r6, [sp, #4]
 8022294:	106d      	asrs	r5, r5, #1
 8022296:	d00c      	beq.n	80222b2 <__pow5mult+0xa2>
 8022298:	6820      	ldr	r0, [r4, #0]
 802229a:	2800      	cmp	r0, #0
 802229c:	d107      	bne.n	80222ae <__pow5mult+0x9e>
 802229e:	0022      	movs	r2, r4
 80222a0:	0021      	movs	r1, r4
 80222a2:	0038      	movs	r0, r7
 80222a4:	f7ff ff02 	bl	80220ac <__multiply>
 80222a8:	2300      	movs	r3, #0
 80222aa:	6020      	str	r0, [r4, #0]
 80222ac:	6003      	str	r3, [r0, #0]
 80222ae:	0004      	movs	r4, r0
 80222b0:	e7e2      	b.n	8022278 <__pow5mult+0x68>
 80222b2:	0030      	movs	r0, r6
 80222b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80222b6:	46c0      	nop			@ (mov r8, r8)
 80222b8:	0802654c 	.word	0x0802654c
 80222bc:	08026412 	.word	0x08026412
 80222c0:	080264f2 	.word	0x080264f2
 80222c4:	00000271 	.word	0x00000271

080222c8 <__lshift>:
 80222c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222ca:	000c      	movs	r4, r1
 80222cc:	0016      	movs	r6, r2
 80222ce:	6923      	ldr	r3, [r4, #16]
 80222d0:	1157      	asrs	r7, r2, #5
 80222d2:	b085      	sub	sp, #20
 80222d4:	18fb      	adds	r3, r7, r3
 80222d6:	9301      	str	r3, [sp, #4]
 80222d8:	3301      	adds	r3, #1
 80222da:	9300      	str	r3, [sp, #0]
 80222dc:	6849      	ldr	r1, [r1, #4]
 80222de:	68a3      	ldr	r3, [r4, #8]
 80222e0:	9002      	str	r0, [sp, #8]
 80222e2:	9a00      	ldr	r2, [sp, #0]
 80222e4:	4293      	cmp	r3, r2
 80222e6:	db10      	blt.n	802230a <__lshift+0x42>
 80222e8:	9802      	ldr	r0, [sp, #8]
 80222ea:	f7ff fd7f 	bl	8021dec <_Balloc>
 80222ee:	2300      	movs	r3, #0
 80222f0:	0001      	movs	r1, r0
 80222f2:	0005      	movs	r5, r0
 80222f4:	001a      	movs	r2, r3
 80222f6:	3114      	adds	r1, #20
 80222f8:	4298      	cmp	r0, r3
 80222fa:	d10c      	bne.n	8022316 <__lshift+0x4e>
 80222fc:	21ef      	movs	r1, #239	@ 0xef
 80222fe:	002a      	movs	r2, r5
 8022300:	4b25      	ldr	r3, [pc, #148]	@ (8022398 <__lshift+0xd0>)
 8022302:	4826      	ldr	r0, [pc, #152]	@ (802239c <__lshift+0xd4>)
 8022304:	0049      	lsls	r1, r1, #1
 8022306:	f000 fe51 	bl	8022fac <__assert_func>
 802230a:	3101      	adds	r1, #1
 802230c:	005b      	lsls	r3, r3, #1
 802230e:	e7e8      	b.n	80222e2 <__lshift+0x1a>
 8022310:	0098      	lsls	r0, r3, #2
 8022312:	500a      	str	r2, [r1, r0]
 8022314:	3301      	adds	r3, #1
 8022316:	42bb      	cmp	r3, r7
 8022318:	dbfa      	blt.n	8022310 <__lshift+0x48>
 802231a:	43fb      	mvns	r3, r7
 802231c:	17db      	asrs	r3, r3, #31
 802231e:	401f      	ands	r7, r3
 8022320:	00bf      	lsls	r7, r7, #2
 8022322:	0023      	movs	r3, r4
 8022324:	201f      	movs	r0, #31
 8022326:	19c9      	adds	r1, r1, r7
 8022328:	0037      	movs	r7, r6
 802232a:	6922      	ldr	r2, [r4, #16]
 802232c:	3314      	adds	r3, #20
 802232e:	0092      	lsls	r2, r2, #2
 8022330:	189a      	adds	r2, r3, r2
 8022332:	4007      	ands	r7, r0
 8022334:	4206      	tst	r6, r0
 8022336:	d029      	beq.n	802238c <__lshift+0xc4>
 8022338:	3001      	adds	r0, #1
 802233a:	1bc0      	subs	r0, r0, r7
 802233c:	9003      	str	r0, [sp, #12]
 802233e:	468c      	mov	ip, r1
 8022340:	2000      	movs	r0, #0
 8022342:	681e      	ldr	r6, [r3, #0]
 8022344:	40be      	lsls	r6, r7
 8022346:	4306      	orrs	r6, r0
 8022348:	4660      	mov	r0, ip
 802234a:	c040      	stmia	r0!, {r6}
 802234c:	4684      	mov	ip, r0
 802234e:	9e03      	ldr	r6, [sp, #12]
 8022350:	cb01      	ldmia	r3!, {r0}
 8022352:	40f0      	lsrs	r0, r6
 8022354:	429a      	cmp	r2, r3
 8022356:	d8f4      	bhi.n	8022342 <__lshift+0x7a>
 8022358:	0026      	movs	r6, r4
 802235a:	3615      	adds	r6, #21
 802235c:	2304      	movs	r3, #4
 802235e:	42b2      	cmp	r2, r6
 8022360:	d304      	bcc.n	802236c <__lshift+0xa4>
 8022362:	1b13      	subs	r3, r2, r4
 8022364:	3b15      	subs	r3, #21
 8022366:	089b      	lsrs	r3, r3, #2
 8022368:	3301      	adds	r3, #1
 802236a:	009b      	lsls	r3, r3, #2
 802236c:	50c8      	str	r0, [r1, r3]
 802236e:	2800      	cmp	r0, #0
 8022370:	d002      	beq.n	8022378 <__lshift+0xb0>
 8022372:	9b01      	ldr	r3, [sp, #4]
 8022374:	3302      	adds	r3, #2
 8022376:	9300      	str	r3, [sp, #0]
 8022378:	9b00      	ldr	r3, [sp, #0]
 802237a:	9802      	ldr	r0, [sp, #8]
 802237c:	3b01      	subs	r3, #1
 802237e:	0021      	movs	r1, r4
 8022380:	612b      	str	r3, [r5, #16]
 8022382:	f7ff fd77 	bl	8021e74 <_Bfree>
 8022386:	0028      	movs	r0, r5
 8022388:	b005      	add	sp, #20
 802238a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802238c:	cb01      	ldmia	r3!, {r0}
 802238e:	c101      	stmia	r1!, {r0}
 8022390:	429a      	cmp	r2, r3
 8022392:	d8fb      	bhi.n	802238c <__lshift+0xc4>
 8022394:	e7f0      	b.n	8022378 <__lshift+0xb0>
 8022396:	46c0      	nop			@ (mov r8, r8)
 8022398:	08026481 	.word	0x08026481
 802239c:	080264f2 	.word	0x080264f2

080223a0 <__mcmp>:
 80223a0:	b530      	push	{r4, r5, lr}
 80223a2:	690b      	ldr	r3, [r1, #16]
 80223a4:	6904      	ldr	r4, [r0, #16]
 80223a6:	0002      	movs	r2, r0
 80223a8:	1ae0      	subs	r0, r4, r3
 80223aa:	429c      	cmp	r4, r3
 80223ac:	d10f      	bne.n	80223ce <__mcmp+0x2e>
 80223ae:	3214      	adds	r2, #20
 80223b0:	009b      	lsls	r3, r3, #2
 80223b2:	3114      	adds	r1, #20
 80223b4:	0014      	movs	r4, r2
 80223b6:	18c9      	adds	r1, r1, r3
 80223b8:	18d2      	adds	r2, r2, r3
 80223ba:	3a04      	subs	r2, #4
 80223bc:	3904      	subs	r1, #4
 80223be:	6815      	ldr	r5, [r2, #0]
 80223c0:	680b      	ldr	r3, [r1, #0]
 80223c2:	429d      	cmp	r5, r3
 80223c4:	d004      	beq.n	80223d0 <__mcmp+0x30>
 80223c6:	2001      	movs	r0, #1
 80223c8:	429d      	cmp	r5, r3
 80223ca:	d200      	bcs.n	80223ce <__mcmp+0x2e>
 80223cc:	3802      	subs	r0, #2
 80223ce:	bd30      	pop	{r4, r5, pc}
 80223d0:	4294      	cmp	r4, r2
 80223d2:	d3f2      	bcc.n	80223ba <__mcmp+0x1a>
 80223d4:	e7fb      	b.n	80223ce <__mcmp+0x2e>
	...

080223d8 <__mdiff>:
 80223d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223da:	000c      	movs	r4, r1
 80223dc:	b087      	sub	sp, #28
 80223de:	9000      	str	r0, [sp, #0]
 80223e0:	0011      	movs	r1, r2
 80223e2:	0020      	movs	r0, r4
 80223e4:	0017      	movs	r7, r2
 80223e6:	f7ff ffdb 	bl	80223a0 <__mcmp>
 80223ea:	1e05      	subs	r5, r0, #0
 80223ec:	d110      	bne.n	8022410 <__mdiff+0x38>
 80223ee:	0001      	movs	r1, r0
 80223f0:	9800      	ldr	r0, [sp, #0]
 80223f2:	f7ff fcfb 	bl	8021dec <_Balloc>
 80223f6:	1e02      	subs	r2, r0, #0
 80223f8:	d104      	bne.n	8022404 <__mdiff+0x2c>
 80223fa:	4b40      	ldr	r3, [pc, #256]	@ (80224fc <__mdiff+0x124>)
 80223fc:	4840      	ldr	r0, [pc, #256]	@ (8022500 <__mdiff+0x128>)
 80223fe:	4941      	ldr	r1, [pc, #260]	@ (8022504 <__mdiff+0x12c>)
 8022400:	f000 fdd4 	bl	8022fac <__assert_func>
 8022404:	2301      	movs	r3, #1
 8022406:	6145      	str	r5, [r0, #20]
 8022408:	6103      	str	r3, [r0, #16]
 802240a:	0010      	movs	r0, r2
 802240c:	b007      	add	sp, #28
 802240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022410:	2600      	movs	r6, #0
 8022412:	42b0      	cmp	r0, r6
 8022414:	da03      	bge.n	802241e <__mdiff+0x46>
 8022416:	0023      	movs	r3, r4
 8022418:	003c      	movs	r4, r7
 802241a:	001f      	movs	r7, r3
 802241c:	3601      	adds	r6, #1
 802241e:	6861      	ldr	r1, [r4, #4]
 8022420:	9800      	ldr	r0, [sp, #0]
 8022422:	f7ff fce3 	bl	8021dec <_Balloc>
 8022426:	1e02      	subs	r2, r0, #0
 8022428:	d103      	bne.n	8022432 <__mdiff+0x5a>
 802242a:	4b34      	ldr	r3, [pc, #208]	@ (80224fc <__mdiff+0x124>)
 802242c:	4834      	ldr	r0, [pc, #208]	@ (8022500 <__mdiff+0x128>)
 802242e:	4936      	ldr	r1, [pc, #216]	@ (8022508 <__mdiff+0x130>)
 8022430:	e7e6      	b.n	8022400 <__mdiff+0x28>
 8022432:	6923      	ldr	r3, [r4, #16]
 8022434:	3414      	adds	r4, #20
 8022436:	9300      	str	r3, [sp, #0]
 8022438:	009b      	lsls	r3, r3, #2
 802243a:	18e3      	adds	r3, r4, r3
 802243c:	0021      	movs	r1, r4
 802243e:	9401      	str	r4, [sp, #4]
 8022440:	003c      	movs	r4, r7
 8022442:	9302      	str	r3, [sp, #8]
 8022444:	693b      	ldr	r3, [r7, #16]
 8022446:	3414      	adds	r4, #20
 8022448:	009b      	lsls	r3, r3, #2
 802244a:	18e3      	adds	r3, r4, r3
 802244c:	9303      	str	r3, [sp, #12]
 802244e:	0003      	movs	r3, r0
 8022450:	60c6      	str	r6, [r0, #12]
 8022452:	468c      	mov	ip, r1
 8022454:	2000      	movs	r0, #0
 8022456:	3314      	adds	r3, #20
 8022458:	9304      	str	r3, [sp, #16]
 802245a:	9305      	str	r3, [sp, #20]
 802245c:	4663      	mov	r3, ip
 802245e:	cb20      	ldmia	r3!, {r5}
 8022460:	b2a9      	uxth	r1, r5
 8022462:	000e      	movs	r6, r1
 8022464:	469c      	mov	ip, r3
 8022466:	cc08      	ldmia	r4!, {r3}
 8022468:	0c2d      	lsrs	r5, r5, #16
 802246a:	b299      	uxth	r1, r3
 802246c:	1a71      	subs	r1, r6, r1
 802246e:	1809      	adds	r1, r1, r0
 8022470:	0c1b      	lsrs	r3, r3, #16
 8022472:	1408      	asrs	r0, r1, #16
 8022474:	1aeb      	subs	r3, r5, r3
 8022476:	181b      	adds	r3, r3, r0
 8022478:	1418      	asrs	r0, r3, #16
 802247a:	b289      	uxth	r1, r1
 802247c:	041b      	lsls	r3, r3, #16
 802247e:	4319      	orrs	r1, r3
 8022480:	9b05      	ldr	r3, [sp, #20]
 8022482:	c302      	stmia	r3!, {r1}
 8022484:	9305      	str	r3, [sp, #20]
 8022486:	9b03      	ldr	r3, [sp, #12]
 8022488:	42a3      	cmp	r3, r4
 802248a:	d8e7      	bhi.n	802245c <__mdiff+0x84>
 802248c:	0039      	movs	r1, r7
 802248e:	9c03      	ldr	r4, [sp, #12]
 8022490:	3115      	adds	r1, #21
 8022492:	2304      	movs	r3, #4
 8022494:	428c      	cmp	r4, r1
 8022496:	d304      	bcc.n	80224a2 <__mdiff+0xca>
 8022498:	1be3      	subs	r3, r4, r7
 802249a:	3b15      	subs	r3, #21
 802249c:	089b      	lsrs	r3, r3, #2
 802249e:	3301      	adds	r3, #1
 80224a0:	009b      	lsls	r3, r3, #2
 80224a2:	9901      	ldr	r1, [sp, #4]
 80224a4:	18cd      	adds	r5, r1, r3
 80224a6:	9904      	ldr	r1, [sp, #16]
 80224a8:	002e      	movs	r6, r5
 80224aa:	18cb      	adds	r3, r1, r3
 80224ac:	001f      	movs	r7, r3
 80224ae:	9902      	ldr	r1, [sp, #8]
 80224b0:	428e      	cmp	r6, r1
 80224b2:	d311      	bcc.n	80224d8 <__mdiff+0x100>
 80224b4:	9c02      	ldr	r4, [sp, #8]
 80224b6:	1ee9      	subs	r1, r5, #3
 80224b8:	2000      	movs	r0, #0
 80224ba:	428c      	cmp	r4, r1
 80224bc:	d304      	bcc.n	80224c8 <__mdiff+0xf0>
 80224be:	0021      	movs	r1, r4
 80224c0:	3103      	adds	r1, #3
 80224c2:	1b49      	subs	r1, r1, r5
 80224c4:	0889      	lsrs	r1, r1, #2
 80224c6:	0088      	lsls	r0, r1, #2
 80224c8:	181b      	adds	r3, r3, r0
 80224ca:	3b04      	subs	r3, #4
 80224cc:	6819      	ldr	r1, [r3, #0]
 80224ce:	2900      	cmp	r1, #0
 80224d0:	d010      	beq.n	80224f4 <__mdiff+0x11c>
 80224d2:	9b00      	ldr	r3, [sp, #0]
 80224d4:	6113      	str	r3, [r2, #16]
 80224d6:	e798      	b.n	802240a <__mdiff+0x32>
 80224d8:	4684      	mov	ip, r0
 80224da:	ce02      	ldmia	r6!, {r1}
 80224dc:	b288      	uxth	r0, r1
 80224de:	4460      	add	r0, ip
 80224e0:	1400      	asrs	r0, r0, #16
 80224e2:	0c0c      	lsrs	r4, r1, #16
 80224e4:	1904      	adds	r4, r0, r4
 80224e6:	4461      	add	r1, ip
 80224e8:	1420      	asrs	r0, r4, #16
 80224ea:	b289      	uxth	r1, r1
 80224ec:	0424      	lsls	r4, r4, #16
 80224ee:	4321      	orrs	r1, r4
 80224f0:	c702      	stmia	r7!, {r1}
 80224f2:	e7dc      	b.n	80224ae <__mdiff+0xd6>
 80224f4:	9900      	ldr	r1, [sp, #0]
 80224f6:	3901      	subs	r1, #1
 80224f8:	9100      	str	r1, [sp, #0]
 80224fa:	e7e6      	b.n	80224ca <__mdiff+0xf2>
 80224fc:	08026481 	.word	0x08026481
 8022500:	080264f2 	.word	0x080264f2
 8022504:	00000237 	.word	0x00000237
 8022508:	00000245 	.word	0x00000245

0802250c <__ulp>:
 802250c:	b510      	push	{r4, lr}
 802250e:	2400      	movs	r4, #0
 8022510:	4b0c      	ldr	r3, [pc, #48]	@ (8022544 <__ulp+0x38>)
 8022512:	4a0d      	ldr	r2, [pc, #52]	@ (8022548 <__ulp+0x3c>)
 8022514:	400b      	ands	r3, r1
 8022516:	189b      	adds	r3, r3, r2
 8022518:	42a3      	cmp	r3, r4
 802251a:	dc06      	bgt.n	802252a <__ulp+0x1e>
 802251c:	425b      	negs	r3, r3
 802251e:	151a      	asrs	r2, r3, #20
 8022520:	2a13      	cmp	r2, #19
 8022522:	dc05      	bgt.n	8022530 <__ulp+0x24>
 8022524:	2380      	movs	r3, #128	@ 0x80
 8022526:	031b      	lsls	r3, r3, #12
 8022528:	4113      	asrs	r3, r2
 802252a:	0019      	movs	r1, r3
 802252c:	0020      	movs	r0, r4
 802252e:	bd10      	pop	{r4, pc}
 8022530:	3a14      	subs	r2, #20
 8022532:	2401      	movs	r4, #1
 8022534:	2a1e      	cmp	r2, #30
 8022536:	dc02      	bgt.n	802253e <__ulp+0x32>
 8022538:	2480      	movs	r4, #128	@ 0x80
 802253a:	0624      	lsls	r4, r4, #24
 802253c:	40d4      	lsrs	r4, r2
 802253e:	2300      	movs	r3, #0
 8022540:	e7f3      	b.n	802252a <__ulp+0x1e>
 8022542:	46c0      	nop			@ (mov r8, r8)
 8022544:	7ff00000 	.word	0x7ff00000
 8022548:	fcc00000 	.word	0xfcc00000

0802254c <__b2d>:
 802254c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802254e:	0006      	movs	r6, r0
 8022550:	6903      	ldr	r3, [r0, #16]
 8022552:	3614      	adds	r6, #20
 8022554:	009b      	lsls	r3, r3, #2
 8022556:	18f3      	adds	r3, r6, r3
 8022558:	1f1d      	subs	r5, r3, #4
 802255a:	682c      	ldr	r4, [r5, #0]
 802255c:	000f      	movs	r7, r1
 802255e:	0020      	movs	r0, r4
 8022560:	9301      	str	r3, [sp, #4]
 8022562:	f7ff fd3b 	bl	8021fdc <__hi0bits>
 8022566:	2220      	movs	r2, #32
 8022568:	1a12      	subs	r2, r2, r0
 802256a:	603a      	str	r2, [r7, #0]
 802256c:	0003      	movs	r3, r0
 802256e:	4a1c      	ldr	r2, [pc, #112]	@ (80225e0 <__b2d+0x94>)
 8022570:	280a      	cmp	r0, #10
 8022572:	dc15      	bgt.n	80225a0 <__b2d+0x54>
 8022574:	210b      	movs	r1, #11
 8022576:	0027      	movs	r7, r4
 8022578:	1a09      	subs	r1, r1, r0
 802257a:	40cf      	lsrs	r7, r1
 802257c:	433a      	orrs	r2, r7
 802257e:	468c      	mov	ip, r1
 8022580:	0011      	movs	r1, r2
 8022582:	2200      	movs	r2, #0
 8022584:	42ae      	cmp	r6, r5
 8022586:	d202      	bcs.n	802258e <__b2d+0x42>
 8022588:	9a01      	ldr	r2, [sp, #4]
 802258a:	3a08      	subs	r2, #8
 802258c:	6812      	ldr	r2, [r2, #0]
 802258e:	3315      	adds	r3, #21
 8022590:	409c      	lsls	r4, r3
 8022592:	4663      	mov	r3, ip
 8022594:	0027      	movs	r7, r4
 8022596:	40da      	lsrs	r2, r3
 8022598:	4317      	orrs	r7, r2
 802259a:	0038      	movs	r0, r7
 802259c:	b003      	add	sp, #12
 802259e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80225a0:	2700      	movs	r7, #0
 80225a2:	42ae      	cmp	r6, r5
 80225a4:	d202      	bcs.n	80225ac <__b2d+0x60>
 80225a6:	9d01      	ldr	r5, [sp, #4]
 80225a8:	3d08      	subs	r5, #8
 80225aa:	682f      	ldr	r7, [r5, #0]
 80225ac:	210b      	movs	r1, #11
 80225ae:	4249      	negs	r1, r1
 80225b0:	468c      	mov	ip, r1
 80225b2:	449c      	add	ip, r3
 80225b4:	2b0b      	cmp	r3, #11
 80225b6:	d010      	beq.n	80225da <__b2d+0x8e>
 80225b8:	4661      	mov	r1, ip
 80225ba:	2320      	movs	r3, #32
 80225bc:	408c      	lsls	r4, r1
 80225be:	1a5b      	subs	r3, r3, r1
 80225c0:	0039      	movs	r1, r7
 80225c2:	40d9      	lsrs	r1, r3
 80225c4:	430c      	orrs	r4, r1
 80225c6:	4322      	orrs	r2, r4
 80225c8:	0011      	movs	r1, r2
 80225ca:	2200      	movs	r2, #0
 80225cc:	42b5      	cmp	r5, r6
 80225ce:	d901      	bls.n	80225d4 <__b2d+0x88>
 80225d0:	3d04      	subs	r5, #4
 80225d2:	682a      	ldr	r2, [r5, #0]
 80225d4:	4664      	mov	r4, ip
 80225d6:	40a7      	lsls	r7, r4
 80225d8:	e7dd      	b.n	8022596 <__b2d+0x4a>
 80225da:	4322      	orrs	r2, r4
 80225dc:	0011      	movs	r1, r2
 80225de:	e7dc      	b.n	802259a <__b2d+0x4e>
 80225e0:	3ff00000 	.word	0x3ff00000

080225e4 <__d2b>:
 80225e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80225e6:	2101      	movs	r1, #1
 80225e8:	0016      	movs	r6, r2
 80225ea:	001f      	movs	r7, r3
 80225ec:	f7ff fbfe 	bl	8021dec <_Balloc>
 80225f0:	1e04      	subs	r4, r0, #0
 80225f2:	d105      	bne.n	8022600 <__d2b+0x1c>
 80225f4:	0022      	movs	r2, r4
 80225f6:	4b25      	ldr	r3, [pc, #148]	@ (802268c <__d2b+0xa8>)
 80225f8:	4825      	ldr	r0, [pc, #148]	@ (8022690 <__d2b+0xac>)
 80225fa:	4926      	ldr	r1, [pc, #152]	@ (8022694 <__d2b+0xb0>)
 80225fc:	f000 fcd6 	bl	8022fac <__assert_func>
 8022600:	033b      	lsls	r3, r7, #12
 8022602:	007d      	lsls	r5, r7, #1
 8022604:	0b1b      	lsrs	r3, r3, #12
 8022606:	0d6d      	lsrs	r5, r5, #21
 8022608:	d002      	beq.n	8022610 <__d2b+0x2c>
 802260a:	2280      	movs	r2, #128	@ 0x80
 802260c:	0352      	lsls	r2, r2, #13
 802260e:	4313      	orrs	r3, r2
 8022610:	9301      	str	r3, [sp, #4]
 8022612:	2e00      	cmp	r6, #0
 8022614:	d025      	beq.n	8022662 <__d2b+0x7e>
 8022616:	4668      	mov	r0, sp
 8022618:	9600      	str	r6, [sp, #0]
 802261a:	f7ff fd00 	bl	802201e <__lo0bits>
 802261e:	9b01      	ldr	r3, [sp, #4]
 8022620:	9900      	ldr	r1, [sp, #0]
 8022622:	2800      	cmp	r0, #0
 8022624:	d01b      	beq.n	802265e <__d2b+0x7a>
 8022626:	2220      	movs	r2, #32
 8022628:	001e      	movs	r6, r3
 802262a:	1a12      	subs	r2, r2, r0
 802262c:	4096      	lsls	r6, r2
 802262e:	0032      	movs	r2, r6
 8022630:	40c3      	lsrs	r3, r0
 8022632:	430a      	orrs	r2, r1
 8022634:	6162      	str	r2, [r4, #20]
 8022636:	9301      	str	r3, [sp, #4]
 8022638:	9e01      	ldr	r6, [sp, #4]
 802263a:	61a6      	str	r6, [r4, #24]
 802263c:	1e73      	subs	r3, r6, #1
 802263e:	419e      	sbcs	r6, r3
 8022640:	3601      	adds	r6, #1
 8022642:	6126      	str	r6, [r4, #16]
 8022644:	2d00      	cmp	r5, #0
 8022646:	d014      	beq.n	8022672 <__d2b+0x8e>
 8022648:	2635      	movs	r6, #53	@ 0x35
 802264a:	4b13      	ldr	r3, [pc, #76]	@ (8022698 <__d2b+0xb4>)
 802264c:	18ed      	adds	r5, r5, r3
 802264e:	9b08      	ldr	r3, [sp, #32]
 8022650:	182d      	adds	r5, r5, r0
 8022652:	601d      	str	r5, [r3, #0]
 8022654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022656:	1a36      	subs	r6, r6, r0
 8022658:	601e      	str	r6, [r3, #0]
 802265a:	0020      	movs	r0, r4
 802265c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802265e:	6161      	str	r1, [r4, #20]
 8022660:	e7ea      	b.n	8022638 <__d2b+0x54>
 8022662:	a801      	add	r0, sp, #4
 8022664:	f7ff fcdb 	bl	802201e <__lo0bits>
 8022668:	9b01      	ldr	r3, [sp, #4]
 802266a:	2601      	movs	r6, #1
 802266c:	6163      	str	r3, [r4, #20]
 802266e:	3020      	adds	r0, #32
 8022670:	e7e7      	b.n	8022642 <__d2b+0x5e>
 8022672:	4b0a      	ldr	r3, [pc, #40]	@ (802269c <__d2b+0xb8>)
 8022674:	18c0      	adds	r0, r0, r3
 8022676:	9b08      	ldr	r3, [sp, #32]
 8022678:	6018      	str	r0, [r3, #0]
 802267a:	4b09      	ldr	r3, [pc, #36]	@ (80226a0 <__d2b+0xbc>)
 802267c:	18f3      	adds	r3, r6, r3
 802267e:	009b      	lsls	r3, r3, #2
 8022680:	18e3      	adds	r3, r4, r3
 8022682:	6958      	ldr	r0, [r3, #20]
 8022684:	f7ff fcaa 	bl	8021fdc <__hi0bits>
 8022688:	0176      	lsls	r6, r6, #5
 802268a:	e7e3      	b.n	8022654 <__d2b+0x70>
 802268c:	08026481 	.word	0x08026481
 8022690:	080264f2 	.word	0x080264f2
 8022694:	0000030f 	.word	0x0000030f
 8022698:	fffffbcd 	.word	0xfffffbcd
 802269c:	fffffbce 	.word	0xfffffbce
 80226a0:	3fffffff 	.word	0x3fffffff

080226a4 <__ratio>:
 80226a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80226a6:	b087      	sub	sp, #28
 80226a8:	000f      	movs	r7, r1
 80226aa:	a904      	add	r1, sp, #16
 80226ac:	0006      	movs	r6, r0
 80226ae:	f7ff ff4d 	bl	802254c <__b2d>
 80226b2:	9000      	str	r0, [sp, #0]
 80226b4:	9101      	str	r1, [sp, #4]
 80226b6:	9b00      	ldr	r3, [sp, #0]
 80226b8:	9c01      	ldr	r4, [sp, #4]
 80226ba:	0038      	movs	r0, r7
 80226bc:	a905      	add	r1, sp, #20
 80226be:	9302      	str	r3, [sp, #8]
 80226c0:	9403      	str	r4, [sp, #12]
 80226c2:	f7ff ff43 	bl	802254c <__b2d>
 80226c6:	000d      	movs	r5, r1
 80226c8:	0002      	movs	r2, r0
 80226ca:	000b      	movs	r3, r1
 80226cc:	6930      	ldr	r0, [r6, #16]
 80226ce:	6939      	ldr	r1, [r7, #16]
 80226d0:	9e04      	ldr	r6, [sp, #16]
 80226d2:	1a40      	subs	r0, r0, r1
 80226d4:	9905      	ldr	r1, [sp, #20]
 80226d6:	0140      	lsls	r0, r0, #5
 80226d8:	1a71      	subs	r1, r6, r1
 80226da:	1841      	adds	r1, r0, r1
 80226dc:	0508      	lsls	r0, r1, #20
 80226de:	2900      	cmp	r1, #0
 80226e0:	dd08      	ble.n	80226f4 <__ratio+0x50>
 80226e2:	9901      	ldr	r1, [sp, #4]
 80226e4:	1841      	adds	r1, r0, r1
 80226e6:	9103      	str	r1, [sp, #12]
 80226e8:	9802      	ldr	r0, [sp, #8]
 80226ea:	9903      	ldr	r1, [sp, #12]
 80226ec:	f7df fb62 	bl	8001db4 <__aeabi_ddiv>
 80226f0:	b007      	add	sp, #28
 80226f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80226f4:	1a2b      	subs	r3, r5, r0
 80226f6:	e7f7      	b.n	80226e8 <__ratio+0x44>

080226f8 <__copybits>:
 80226f8:	b570      	push	{r4, r5, r6, lr}
 80226fa:	0014      	movs	r4, r2
 80226fc:	0005      	movs	r5, r0
 80226fe:	3901      	subs	r1, #1
 8022700:	6913      	ldr	r3, [r2, #16]
 8022702:	1149      	asrs	r1, r1, #5
 8022704:	3101      	adds	r1, #1
 8022706:	0089      	lsls	r1, r1, #2
 8022708:	3414      	adds	r4, #20
 802270a:	009b      	lsls	r3, r3, #2
 802270c:	1841      	adds	r1, r0, r1
 802270e:	18e3      	adds	r3, r4, r3
 8022710:	42a3      	cmp	r3, r4
 8022712:	d80d      	bhi.n	8022730 <__copybits+0x38>
 8022714:	0014      	movs	r4, r2
 8022716:	3411      	adds	r4, #17
 8022718:	2500      	movs	r5, #0
 802271a:	429c      	cmp	r4, r3
 802271c:	d803      	bhi.n	8022726 <__copybits+0x2e>
 802271e:	1a9b      	subs	r3, r3, r2
 8022720:	3b11      	subs	r3, #17
 8022722:	089b      	lsrs	r3, r3, #2
 8022724:	009d      	lsls	r5, r3, #2
 8022726:	2300      	movs	r3, #0
 8022728:	1940      	adds	r0, r0, r5
 802272a:	4281      	cmp	r1, r0
 802272c:	d803      	bhi.n	8022736 <__copybits+0x3e>
 802272e:	bd70      	pop	{r4, r5, r6, pc}
 8022730:	cc40      	ldmia	r4!, {r6}
 8022732:	c540      	stmia	r5!, {r6}
 8022734:	e7ec      	b.n	8022710 <__copybits+0x18>
 8022736:	c008      	stmia	r0!, {r3}
 8022738:	e7f7      	b.n	802272a <__copybits+0x32>

0802273a <__any_on>:
 802273a:	0002      	movs	r2, r0
 802273c:	6900      	ldr	r0, [r0, #16]
 802273e:	b510      	push	{r4, lr}
 8022740:	3214      	adds	r2, #20
 8022742:	114b      	asrs	r3, r1, #5
 8022744:	4298      	cmp	r0, r3
 8022746:	db13      	blt.n	8022770 <__any_on+0x36>
 8022748:	dd0c      	ble.n	8022764 <__any_on+0x2a>
 802274a:	241f      	movs	r4, #31
 802274c:	0008      	movs	r0, r1
 802274e:	4020      	ands	r0, r4
 8022750:	4221      	tst	r1, r4
 8022752:	d007      	beq.n	8022764 <__any_on+0x2a>
 8022754:	0099      	lsls	r1, r3, #2
 8022756:	588c      	ldr	r4, [r1, r2]
 8022758:	0021      	movs	r1, r4
 802275a:	40c1      	lsrs	r1, r0
 802275c:	4081      	lsls	r1, r0
 802275e:	2001      	movs	r0, #1
 8022760:	428c      	cmp	r4, r1
 8022762:	d104      	bne.n	802276e <__any_on+0x34>
 8022764:	009b      	lsls	r3, r3, #2
 8022766:	18d3      	adds	r3, r2, r3
 8022768:	4293      	cmp	r3, r2
 802276a:	d803      	bhi.n	8022774 <__any_on+0x3a>
 802276c:	2000      	movs	r0, #0
 802276e:	bd10      	pop	{r4, pc}
 8022770:	0003      	movs	r3, r0
 8022772:	e7f7      	b.n	8022764 <__any_on+0x2a>
 8022774:	3b04      	subs	r3, #4
 8022776:	6819      	ldr	r1, [r3, #0]
 8022778:	2900      	cmp	r1, #0
 802277a:	d0f5      	beq.n	8022768 <__any_on+0x2e>
 802277c:	2001      	movs	r0, #1
 802277e:	e7f6      	b.n	802276e <__any_on+0x34>

08022780 <__ascii_wctomb>:
 8022780:	0003      	movs	r3, r0
 8022782:	1e08      	subs	r0, r1, #0
 8022784:	d005      	beq.n	8022792 <__ascii_wctomb+0x12>
 8022786:	2aff      	cmp	r2, #255	@ 0xff
 8022788:	d904      	bls.n	8022794 <__ascii_wctomb+0x14>
 802278a:	228a      	movs	r2, #138	@ 0x8a
 802278c:	2001      	movs	r0, #1
 802278e:	601a      	str	r2, [r3, #0]
 8022790:	4240      	negs	r0, r0
 8022792:	4770      	bx	lr
 8022794:	2001      	movs	r0, #1
 8022796:	700a      	strb	r2, [r1, #0]
 8022798:	e7fb      	b.n	8022792 <__ascii_wctomb+0x12>
	...

0802279c <__ssputs_r>:
 802279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802279e:	688e      	ldr	r6, [r1, #8]
 80227a0:	b085      	sub	sp, #20
 80227a2:	001f      	movs	r7, r3
 80227a4:	000c      	movs	r4, r1
 80227a6:	680b      	ldr	r3, [r1, #0]
 80227a8:	9002      	str	r0, [sp, #8]
 80227aa:	9203      	str	r2, [sp, #12]
 80227ac:	42be      	cmp	r6, r7
 80227ae:	d830      	bhi.n	8022812 <__ssputs_r+0x76>
 80227b0:	210c      	movs	r1, #12
 80227b2:	5e62      	ldrsh	r2, [r4, r1]
 80227b4:	2190      	movs	r1, #144	@ 0x90
 80227b6:	00c9      	lsls	r1, r1, #3
 80227b8:	420a      	tst	r2, r1
 80227ba:	d028      	beq.n	802280e <__ssputs_r+0x72>
 80227bc:	2003      	movs	r0, #3
 80227be:	6921      	ldr	r1, [r4, #16]
 80227c0:	1a5b      	subs	r3, r3, r1
 80227c2:	9301      	str	r3, [sp, #4]
 80227c4:	6963      	ldr	r3, [r4, #20]
 80227c6:	4343      	muls	r3, r0
 80227c8:	9801      	ldr	r0, [sp, #4]
 80227ca:	0fdd      	lsrs	r5, r3, #31
 80227cc:	18ed      	adds	r5, r5, r3
 80227ce:	1c7b      	adds	r3, r7, #1
 80227d0:	181b      	adds	r3, r3, r0
 80227d2:	106d      	asrs	r5, r5, #1
 80227d4:	42ab      	cmp	r3, r5
 80227d6:	d900      	bls.n	80227da <__ssputs_r+0x3e>
 80227d8:	001d      	movs	r5, r3
 80227da:	0552      	lsls	r2, r2, #21
 80227dc:	d528      	bpl.n	8022830 <__ssputs_r+0x94>
 80227de:	0029      	movs	r1, r5
 80227e0:	9802      	ldr	r0, [sp, #8]
 80227e2:	f7ff fa61 	bl	8021ca8 <_malloc_r>
 80227e6:	1e06      	subs	r6, r0, #0
 80227e8:	d02c      	beq.n	8022844 <__ssputs_r+0xa8>
 80227ea:	9a01      	ldr	r2, [sp, #4]
 80227ec:	6921      	ldr	r1, [r4, #16]
 80227ee:	f7fd fff9 	bl	80207e4 <memcpy>
 80227f2:	89a2      	ldrh	r2, [r4, #12]
 80227f4:	4b18      	ldr	r3, [pc, #96]	@ (8022858 <__ssputs_r+0xbc>)
 80227f6:	401a      	ands	r2, r3
 80227f8:	2380      	movs	r3, #128	@ 0x80
 80227fa:	4313      	orrs	r3, r2
 80227fc:	81a3      	strh	r3, [r4, #12]
 80227fe:	9b01      	ldr	r3, [sp, #4]
 8022800:	6126      	str	r6, [r4, #16]
 8022802:	18f6      	adds	r6, r6, r3
 8022804:	6026      	str	r6, [r4, #0]
 8022806:	003e      	movs	r6, r7
 8022808:	6165      	str	r5, [r4, #20]
 802280a:	1aed      	subs	r5, r5, r3
 802280c:	60a5      	str	r5, [r4, #8]
 802280e:	42be      	cmp	r6, r7
 8022810:	d900      	bls.n	8022814 <__ssputs_r+0x78>
 8022812:	003e      	movs	r6, r7
 8022814:	0032      	movs	r2, r6
 8022816:	9903      	ldr	r1, [sp, #12]
 8022818:	6820      	ldr	r0, [r4, #0]
 802281a:	f000 fb7e 	bl	8022f1a <memmove>
 802281e:	2000      	movs	r0, #0
 8022820:	68a3      	ldr	r3, [r4, #8]
 8022822:	1b9b      	subs	r3, r3, r6
 8022824:	60a3      	str	r3, [r4, #8]
 8022826:	6823      	ldr	r3, [r4, #0]
 8022828:	199b      	adds	r3, r3, r6
 802282a:	6023      	str	r3, [r4, #0]
 802282c:	b005      	add	sp, #20
 802282e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022830:	002a      	movs	r2, r5
 8022832:	9802      	ldr	r0, [sp, #8]
 8022834:	f000 fc05 	bl	8023042 <_realloc_r>
 8022838:	1e06      	subs	r6, r0, #0
 802283a:	d1e0      	bne.n	80227fe <__ssputs_r+0x62>
 802283c:	6921      	ldr	r1, [r4, #16]
 802283e:	9802      	ldr	r0, [sp, #8]
 8022840:	f7fe fe62 	bl	8021508 <_free_r>
 8022844:	230c      	movs	r3, #12
 8022846:	2001      	movs	r0, #1
 8022848:	9a02      	ldr	r2, [sp, #8]
 802284a:	4240      	negs	r0, r0
 802284c:	6013      	str	r3, [r2, #0]
 802284e:	89a2      	ldrh	r2, [r4, #12]
 8022850:	3334      	adds	r3, #52	@ 0x34
 8022852:	4313      	orrs	r3, r2
 8022854:	81a3      	strh	r3, [r4, #12]
 8022856:	e7e9      	b.n	802282c <__ssputs_r+0x90>
 8022858:	fffffb7f 	.word	0xfffffb7f

0802285c <_svfiprintf_r>:
 802285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802285e:	b0a1      	sub	sp, #132	@ 0x84
 8022860:	9003      	str	r0, [sp, #12]
 8022862:	001d      	movs	r5, r3
 8022864:	898b      	ldrh	r3, [r1, #12]
 8022866:	000f      	movs	r7, r1
 8022868:	0016      	movs	r6, r2
 802286a:	061b      	lsls	r3, r3, #24
 802286c:	d511      	bpl.n	8022892 <_svfiprintf_r+0x36>
 802286e:	690b      	ldr	r3, [r1, #16]
 8022870:	2b00      	cmp	r3, #0
 8022872:	d10e      	bne.n	8022892 <_svfiprintf_r+0x36>
 8022874:	2140      	movs	r1, #64	@ 0x40
 8022876:	f7ff fa17 	bl	8021ca8 <_malloc_r>
 802287a:	6038      	str	r0, [r7, #0]
 802287c:	6138      	str	r0, [r7, #16]
 802287e:	2800      	cmp	r0, #0
 8022880:	d105      	bne.n	802288e <_svfiprintf_r+0x32>
 8022882:	230c      	movs	r3, #12
 8022884:	9a03      	ldr	r2, [sp, #12]
 8022886:	6013      	str	r3, [r2, #0]
 8022888:	2001      	movs	r0, #1
 802288a:	4240      	negs	r0, r0
 802288c:	e0cf      	b.n	8022a2e <_svfiprintf_r+0x1d2>
 802288e:	2340      	movs	r3, #64	@ 0x40
 8022890:	617b      	str	r3, [r7, #20]
 8022892:	2300      	movs	r3, #0
 8022894:	ac08      	add	r4, sp, #32
 8022896:	6163      	str	r3, [r4, #20]
 8022898:	3320      	adds	r3, #32
 802289a:	7663      	strb	r3, [r4, #25]
 802289c:	3310      	adds	r3, #16
 802289e:	76a3      	strb	r3, [r4, #26]
 80228a0:	9507      	str	r5, [sp, #28]
 80228a2:	0035      	movs	r5, r6
 80228a4:	782b      	ldrb	r3, [r5, #0]
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d001      	beq.n	80228ae <_svfiprintf_r+0x52>
 80228aa:	2b25      	cmp	r3, #37	@ 0x25
 80228ac:	d148      	bne.n	8022940 <_svfiprintf_r+0xe4>
 80228ae:	1bab      	subs	r3, r5, r6
 80228b0:	9305      	str	r3, [sp, #20]
 80228b2:	42b5      	cmp	r5, r6
 80228b4:	d00b      	beq.n	80228ce <_svfiprintf_r+0x72>
 80228b6:	0032      	movs	r2, r6
 80228b8:	0039      	movs	r1, r7
 80228ba:	9803      	ldr	r0, [sp, #12]
 80228bc:	f7ff ff6e 	bl	802279c <__ssputs_r>
 80228c0:	3001      	adds	r0, #1
 80228c2:	d100      	bne.n	80228c6 <_svfiprintf_r+0x6a>
 80228c4:	e0ae      	b.n	8022a24 <_svfiprintf_r+0x1c8>
 80228c6:	6963      	ldr	r3, [r4, #20]
 80228c8:	9a05      	ldr	r2, [sp, #20]
 80228ca:	189b      	adds	r3, r3, r2
 80228cc:	6163      	str	r3, [r4, #20]
 80228ce:	782b      	ldrb	r3, [r5, #0]
 80228d0:	2b00      	cmp	r3, #0
 80228d2:	d100      	bne.n	80228d6 <_svfiprintf_r+0x7a>
 80228d4:	e0a6      	b.n	8022a24 <_svfiprintf_r+0x1c8>
 80228d6:	2201      	movs	r2, #1
 80228d8:	2300      	movs	r3, #0
 80228da:	4252      	negs	r2, r2
 80228dc:	6062      	str	r2, [r4, #4]
 80228de:	a904      	add	r1, sp, #16
 80228e0:	3254      	adds	r2, #84	@ 0x54
 80228e2:	1852      	adds	r2, r2, r1
 80228e4:	1c6e      	adds	r6, r5, #1
 80228e6:	6023      	str	r3, [r4, #0]
 80228e8:	60e3      	str	r3, [r4, #12]
 80228ea:	60a3      	str	r3, [r4, #8]
 80228ec:	7013      	strb	r3, [r2, #0]
 80228ee:	65a3      	str	r3, [r4, #88]	@ 0x58
 80228f0:	4b54      	ldr	r3, [pc, #336]	@ (8022a44 <_svfiprintf_r+0x1e8>)
 80228f2:	2205      	movs	r2, #5
 80228f4:	0018      	movs	r0, r3
 80228f6:	7831      	ldrb	r1, [r6, #0]
 80228f8:	9305      	str	r3, [sp, #20]
 80228fa:	f7fd ff68 	bl	80207ce <memchr>
 80228fe:	1c75      	adds	r5, r6, #1
 8022900:	2800      	cmp	r0, #0
 8022902:	d11f      	bne.n	8022944 <_svfiprintf_r+0xe8>
 8022904:	6822      	ldr	r2, [r4, #0]
 8022906:	06d3      	lsls	r3, r2, #27
 8022908:	d504      	bpl.n	8022914 <_svfiprintf_r+0xb8>
 802290a:	2353      	movs	r3, #83	@ 0x53
 802290c:	a904      	add	r1, sp, #16
 802290e:	185b      	adds	r3, r3, r1
 8022910:	2120      	movs	r1, #32
 8022912:	7019      	strb	r1, [r3, #0]
 8022914:	0713      	lsls	r3, r2, #28
 8022916:	d504      	bpl.n	8022922 <_svfiprintf_r+0xc6>
 8022918:	2353      	movs	r3, #83	@ 0x53
 802291a:	a904      	add	r1, sp, #16
 802291c:	185b      	adds	r3, r3, r1
 802291e:	212b      	movs	r1, #43	@ 0x2b
 8022920:	7019      	strb	r1, [r3, #0]
 8022922:	7833      	ldrb	r3, [r6, #0]
 8022924:	2b2a      	cmp	r3, #42	@ 0x2a
 8022926:	d016      	beq.n	8022956 <_svfiprintf_r+0xfa>
 8022928:	0035      	movs	r5, r6
 802292a:	2100      	movs	r1, #0
 802292c:	200a      	movs	r0, #10
 802292e:	68e3      	ldr	r3, [r4, #12]
 8022930:	782a      	ldrb	r2, [r5, #0]
 8022932:	1c6e      	adds	r6, r5, #1
 8022934:	3a30      	subs	r2, #48	@ 0x30
 8022936:	2a09      	cmp	r2, #9
 8022938:	d950      	bls.n	80229dc <_svfiprintf_r+0x180>
 802293a:	2900      	cmp	r1, #0
 802293c:	d111      	bne.n	8022962 <_svfiprintf_r+0x106>
 802293e:	e017      	b.n	8022970 <_svfiprintf_r+0x114>
 8022940:	3501      	adds	r5, #1
 8022942:	e7af      	b.n	80228a4 <_svfiprintf_r+0x48>
 8022944:	9b05      	ldr	r3, [sp, #20]
 8022946:	6822      	ldr	r2, [r4, #0]
 8022948:	1ac0      	subs	r0, r0, r3
 802294a:	2301      	movs	r3, #1
 802294c:	4083      	lsls	r3, r0
 802294e:	4313      	orrs	r3, r2
 8022950:	002e      	movs	r6, r5
 8022952:	6023      	str	r3, [r4, #0]
 8022954:	e7cc      	b.n	80228f0 <_svfiprintf_r+0x94>
 8022956:	9b07      	ldr	r3, [sp, #28]
 8022958:	1d19      	adds	r1, r3, #4
 802295a:	681b      	ldr	r3, [r3, #0]
 802295c:	9107      	str	r1, [sp, #28]
 802295e:	2b00      	cmp	r3, #0
 8022960:	db01      	blt.n	8022966 <_svfiprintf_r+0x10a>
 8022962:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022964:	e004      	b.n	8022970 <_svfiprintf_r+0x114>
 8022966:	425b      	negs	r3, r3
 8022968:	60e3      	str	r3, [r4, #12]
 802296a:	2302      	movs	r3, #2
 802296c:	4313      	orrs	r3, r2
 802296e:	6023      	str	r3, [r4, #0]
 8022970:	782b      	ldrb	r3, [r5, #0]
 8022972:	2b2e      	cmp	r3, #46	@ 0x2e
 8022974:	d10c      	bne.n	8022990 <_svfiprintf_r+0x134>
 8022976:	786b      	ldrb	r3, [r5, #1]
 8022978:	2b2a      	cmp	r3, #42	@ 0x2a
 802297a:	d134      	bne.n	80229e6 <_svfiprintf_r+0x18a>
 802297c:	9b07      	ldr	r3, [sp, #28]
 802297e:	3502      	adds	r5, #2
 8022980:	1d1a      	adds	r2, r3, #4
 8022982:	681b      	ldr	r3, [r3, #0]
 8022984:	9207      	str	r2, [sp, #28]
 8022986:	2b00      	cmp	r3, #0
 8022988:	da01      	bge.n	802298e <_svfiprintf_r+0x132>
 802298a:	2301      	movs	r3, #1
 802298c:	425b      	negs	r3, r3
 802298e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022990:	4e2d      	ldr	r6, [pc, #180]	@ (8022a48 <_svfiprintf_r+0x1ec>)
 8022992:	2203      	movs	r2, #3
 8022994:	0030      	movs	r0, r6
 8022996:	7829      	ldrb	r1, [r5, #0]
 8022998:	f7fd ff19 	bl	80207ce <memchr>
 802299c:	2800      	cmp	r0, #0
 802299e:	d006      	beq.n	80229ae <_svfiprintf_r+0x152>
 80229a0:	2340      	movs	r3, #64	@ 0x40
 80229a2:	1b80      	subs	r0, r0, r6
 80229a4:	4083      	lsls	r3, r0
 80229a6:	6822      	ldr	r2, [r4, #0]
 80229a8:	3501      	adds	r5, #1
 80229aa:	4313      	orrs	r3, r2
 80229ac:	6023      	str	r3, [r4, #0]
 80229ae:	7829      	ldrb	r1, [r5, #0]
 80229b0:	2206      	movs	r2, #6
 80229b2:	4826      	ldr	r0, [pc, #152]	@ (8022a4c <_svfiprintf_r+0x1f0>)
 80229b4:	1c6e      	adds	r6, r5, #1
 80229b6:	7621      	strb	r1, [r4, #24]
 80229b8:	f7fd ff09 	bl	80207ce <memchr>
 80229bc:	2800      	cmp	r0, #0
 80229be:	d038      	beq.n	8022a32 <_svfiprintf_r+0x1d6>
 80229c0:	4b23      	ldr	r3, [pc, #140]	@ (8022a50 <_svfiprintf_r+0x1f4>)
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	d122      	bne.n	8022a0c <_svfiprintf_r+0x1b0>
 80229c6:	2207      	movs	r2, #7
 80229c8:	9b07      	ldr	r3, [sp, #28]
 80229ca:	3307      	adds	r3, #7
 80229cc:	4393      	bics	r3, r2
 80229ce:	3308      	adds	r3, #8
 80229d0:	9307      	str	r3, [sp, #28]
 80229d2:	6963      	ldr	r3, [r4, #20]
 80229d4:	9a04      	ldr	r2, [sp, #16]
 80229d6:	189b      	adds	r3, r3, r2
 80229d8:	6163      	str	r3, [r4, #20]
 80229da:	e762      	b.n	80228a2 <_svfiprintf_r+0x46>
 80229dc:	4343      	muls	r3, r0
 80229de:	0035      	movs	r5, r6
 80229e0:	2101      	movs	r1, #1
 80229e2:	189b      	adds	r3, r3, r2
 80229e4:	e7a4      	b.n	8022930 <_svfiprintf_r+0xd4>
 80229e6:	2300      	movs	r3, #0
 80229e8:	200a      	movs	r0, #10
 80229ea:	0019      	movs	r1, r3
 80229ec:	3501      	adds	r5, #1
 80229ee:	6063      	str	r3, [r4, #4]
 80229f0:	782a      	ldrb	r2, [r5, #0]
 80229f2:	1c6e      	adds	r6, r5, #1
 80229f4:	3a30      	subs	r2, #48	@ 0x30
 80229f6:	2a09      	cmp	r2, #9
 80229f8:	d903      	bls.n	8022a02 <_svfiprintf_r+0x1a6>
 80229fa:	2b00      	cmp	r3, #0
 80229fc:	d0c8      	beq.n	8022990 <_svfiprintf_r+0x134>
 80229fe:	9109      	str	r1, [sp, #36]	@ 0x24
 8022a00:	e7c6      	b.n	8022990 <_svfiprintf_r+0x134>
 8022a02:	4341      	muls	r1, r0
 8022a04:	0035      	movs	r5, r6
 8022a06:	2301      	movs	r3, #1
 8022a08:	1889      	adds	r1, r1, r2
 8022a0a:	e7f1      	b.n	80229f0 <_svfiprintf_r+0x194>
 8022a0c:	aa07      	add	r2, sp, #28
 8022a0e:	9200      	str	r2, [sp, #0]
 8022a10:	0021      	movs	r1, r4
 8022a12:	003a      	movs	r2, r7
 8022a14:	4b0f      	ldr	r3, [pc, #60]	@ (8022a54 <_svfiprintf_r+0x1f8>)
 8022a16:	9803      	ldr	r0, [sp, #12]
 8022a18:	f7fc ffd4 	bl	801f9c4 <_printf_float>
 8022a1c:	9004      	str	r0, [sp, #16]
 8022a1e:	9b04      	ldr	r3, [sp, #16]
 8022a20:	3301      	adds	r3, #1
 8022a22:	d1d6      	bne.n	80229d2 <_svfiprintf_r+0x176>
 8022a24:	89bb      	ldrh	r3, [r7, #12]
 8022a26:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022a28:	065b      	lsls	r3, r3, #25
 8022a2a:	d500      	bpl.n	8022a2e <_svfiprintf_r+0x1d2>
 8022a2c:	e72c      	b.n	8022888 <_svfiprintf_r+0x2c>
 8022a2e:	b021      	add	sp, #132	@ 0x84
 8022a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a32:	aa07      	add	r2, sp, #28
 8022a34:	9200      	str	r2, [sp, #0]
 8022a36:	0021      	movs	r1, r4
 8022a38:	003a      	movs	r2, r7
 8022a3a:	4b06      	ldr	r3, [pc, #24]	@ (8022a54 <_svfiprintf_r+0x1f8>)
 8022a3c:	9803      	ldr	r0, [sp, #12]
 8022a3e:	f7fd fa6f 	bl	801ff20 <_printf_i>
 8022a42:	e7eb      	b.n	8022a1c <_svfiprintf_r+0x1c0>
 8022a44:	08026648 	.word	0x08026648
 8022a48:	0802664e 	.word	0x0802664e
 8022a4c:	08026652 	.word	0x08026652
 8022a50:	0801f9c5 	.word	0x0801f9c5
 8022a54:	0802279d 	.word	0x0802279d

08022a58 <__sfputc_r>:
 8022a58:	6893      	ldr	r3, [r2, #8]
 8022a5a:	b510      	push	{r4, lr}
 8022a5c:	3b01      	subs	r3, #1
 8022a5e:	6093      	str	r3, [r2, #8]
 8022a60:	2b00      	cmp	r3, #0
 8022a62:	da04      	bge.n	8022a6e <__sfputc_r+0x16>
 8022a64:	6994      	ldr	r4, [r2, #24]
 8022a66:	42a3      	cmp	r3, r4
 8022a68:	db07      	blt.n	8022a7a <__sfputc_r+0x22>
 8022a6a:	290a      	cmp	r1, #10
 8022a6c:	d005      	beq.n	8022a7a <__sfputc_r+0x22>
 8022a6e:	6813      	ldr	r3, [r2, #0]
 8022a70:	1c58      	adds	r0, r3, #1
 8022a72:	6010      	str	r0, [r2, #0]
 8022a74:	7019      	strb	r1, [r3, #0]
 8022a76:	0008      	movs	r0, r1
 8022a78:	bd10      	pop	{r4, pc}
 8022a7a:	f7fd fd37 	bl	80204ec <__swbuf_r>
 8022a7e:	0001      	movs	r1, r0
 8022a80:	e7f9      	b.n	8022a76 <__sfputc_r+0x1e>

08022a82 <__sfputs_r>:
 8022a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a84:	0006      	movs	r6, r0
 8022a86:	000f      	movs	r7, r1
 8022a88:	0014      	movs	r4, r2
 8022a8a:	18d5      	adds	r5, r2, r3
 8022a8c:	42ac      	cmp	r4, r5
 8022a8e:	d101      	bne.n	8022a94 <__sfputs_r+0x12>
 8022a90:	2000      	movs	r0, #0
 8022a92:	e007      	b.n	8022aa4 <__sfputs_r+0x22>
 8022a94:	7821      	ldrb	r1, [r4, #0]
 8022a96:	003a      	movs	r2, r7
 8022a98:	0030      	movs	r0, r6
 8022a9a:	f7ff ffdd 	bl	8022a58 <__sfputc_r>
 8022a9e:	3401      	adds	r4, #1
 8022aa0:	1c43      	adds	r3, r0, #1
 8022aa2:	d1f3      	bne.n	8022a8c <__sfputs_r+0xa>
 8022aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022aa8 <_vfiprintf_r>:
 8022aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022aaa:	b0a1      	sub	sp, #132	@ 0x84
 8022aac:	000f      	movs	r7, r1
 8022aae:	0015      	movs	r5, r2
 8022ab0:	001e      	movs	r6, r3
 8022ab2:	9003      	str	r0, [sp, #12]
 8022ab4:	2800      	cmp	r0, #0
 8022ab6:	d004      	beq.n	8022ac2 <_vfiprintf_r+0x1a>
 8022ab8:	6a03      	ldr	r3, [r0, #32]
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d101      	bne.n	8022ac2 <_vfiprintf_r+0x1a>
 8022abe:	f7fd fbcd 	bl	802025c <__sinit>
 8022ac2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022ac4:	07db      	lsls	r3, r3, #31
 8022ac6:	d405      	bmi.n	8022ad4 <_vfiprintf_r+0x2c>
 8022ac8:	89bb      	ldrh	r3, [r7, #12]
 8022aca:	059b      	lsls	r3, r3, #22
 8022acc:	d402      	bmi.n	8022ad4 <_vfiprintf_r+0x2c>
 8022ace:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022ad0:	f7fd fe7b 	bl	80207ca <__retarget_lock_acquire_recursive>
 8022ad4:	89bb      	ldrh	r3, [r7, #12]
 8022ad6:	071b      	lsls	r3, r3, #28
 8022ad8:	d502      	bpl.n	8022ae0 <_vfiprintf_r+0x38>
 8022ada:	693b      	ldr	r3, [r7, #16]
 8022adc:	2b00      	cmp	r3, #0
 8022ade:	d113      	bne.n	8022b08 <_vfiprintf_r+0x60>
 8022ae0:	0039      	movs	r1, r7
 8022ae2:	9803      	ldr	r0, [sp, #12]
 8022ae4:	f7fd fd44 	bl	8020570 <__swsetup_r>
 8022ae8:	2800      	cmp	r0, #0
 8022aea:	d00d      	beq.n	8022b08 <_vfiprintf_r+0x60>
 8022aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022aee:	07db      	lsls	r3, r3, #31
 8022af0:	d503      	bpl.n	8022afa <_vfiprintf_r+0x52>
 8022af2:	2001      	movs	r0, #1
 8022af4:	4240      	negs	r0, r0
 8022af6:	b021      	add	sp, #132	@ 0x84
 8022af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022afa:	89bb      	ldrh	r3, [r7, #12]
 8022afc:	059b      	lsls	r3, r3, #22
 8022afe:	d4f8      	bmi.n	8022af2 <_vfiprintf_r+0x4a>
 8022b00:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022b02:	f7fd fe63 	bl	80207cc <__retarget_lock_release_recursive>
 8022b06:	e7f4      	b.n	8022af2 <_vfiprintf_r+0x4a>
 8022b08:	2300      	movs	r3, #0
 8022b0a:	ac08      	add	r4, sp, #32
 8022b0c:	6163      	str	r3, [r4, #20]
 8022b0e:	3320      	adds	r3, #32
 8022b10:	7663      	strb	r3, [r4, #25]
 8022b12:	3310      	adds	r3, #16
 8022b14:	76a3      	strb	r3, [r4, #26]
 8022b16:	9607      	str	r6, [sp, #28]
 8022b18:	002e      	movs	r6, r5
 8022b1a:	7833      	ldrb	r3, [r6, #0]
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d001      	beq.n	8022b24 <_vfiprintf_r+0x7c>
 8022b20:	2b25      	cmp	r3, #37	@ 0x25
 8022b22:	d148      	bne.n	8022bb6 <_vfiprintf_r+0x10e>
 8022b24:	1b73      	subs	r3, r6, r5
 8022b26:	9305      	str	r3, [sp, #20]
 8022b28:	42ae      	cmp	r6, r5
 8022b2a:	d00b      	beq.n	8022b44 <_vfiprintf_r+0x9c>
 8022b2c:	002a      	movs	r2, r5
 8022b2e:	0039      	movs	r1, r7
 8022b30:	9803      	ldr	r0, [sp, #12]
 8022b32:	f7ff ffa6 	bl	8022a82 <__sfputs_r>
 8022b36:	3001      	adds	r0, #1
 8022b38:	d100      	bne.n	8022b3c <_vfiprintf_r+0x94>
 8022b3a:	e0ae      	b.n	8022c9a <_vfiprintf_r+0x1f2>
 8022b3c:	6963      	ldr	r3, [r4, #20]
 8022b3e:	9a05      	ldr	r2, [sp, #20]
 8022b40:	189b      	adds	r3, r3, r2
 8022b42:	6163      	str	r3, [r4, #20]
 8022b44:	7833      	ldrb	r3, [r6, #0]
 8022b46:	2b00      	cmp	r3, #0
 8022b48:	d100      	bne.n	8022b4c <_vfiprintf_r+0xa4>
 8022b4a:	e0a6      	b.n	8022c9a <_vfiprintf_r+0x1f2>
 8022b4c:	2201      	movs	r2, #1
 8022b4e:	2300      	movs	r3, #0
 8022b50:	4252      	negs	r2, r2
 8022b52:	6062      	str	r2, [r4, #4]
 8022b54:	a904      	add	r1, sp, #16
 8022b56:	3254      	adds	r2, #84	@ 0x54
 8022b58:	1852      	adds	r2, r2, r1
 8022b5a:	1c75      	adds	r5, r6, #1
 8022b5c:	6023      	str	r3, [r4, #0]
 8022b5e:	60e3      	str	r3, [r4, #12]
 8022b60:	60a3      	str	r3, [r4, #8]
 8022b62:	7013      	strb	r3, [r2, #0]
 8022b64:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022b66:	4b59      	ldr	r3, [pc, #356]	@ (8022ccc <_vfiprintf_r+0x224>)
 8022b68:	2205      	movs	r2, #5
 8022b6a:	0018      	movs	r0, r3
 8022b6c:	7829      	ldrb	r1, [r5, #0]
 8022b6e:	9305      	str	r3, [sp, #20]
 8022b70:	f7fd fe2d 	bl	80207ce <memchr>
 8022b74:	1c6e      	adds	r6, r5, #1
 8022b76:	2800      	cmp	r0, #0
 8022b78:	d11f      	bne.n	8022bba <_vfiprintf_r+0x112>
 8022b7a:	6822      	ldr	r2, [r4, #0]
 8022b7c:	06d3      	lsls	r3, r2, #27
 8022b7e:	d504      	bpl.n	8022b8a <_vfiprintf_r+0xe2>
 8022b80:	2353      	movs	r3, #83	@ 0x53
 8022b82:	a904      	add	r1, sp, #16
 8022b84:	185b      	adds	r3, r3, r1
 8022b86:	2120      	movs	r1, #32
 8022b88:	7019      	strb	r1, [r3, #0]
 8022b8a:	0713      	lsls	r3, r2, #28
 8022b8c:	d504      	bpl.n	8022b98 <_vfiprintf_r+0xf0>
 8022b8e:	2353      	movs	r3, #83	@ 0x53
 8022b90:	a904      	add	r1, sp, #16
 8022b92:	185b      	adds	r3, r3, r1
 8022b94:	212b      	movs	r1, #43	@ 0x2b
 8022b96:	7019      	strb	r1, [r3, #0]
 8022b98:	782b      	ldrb	r3, [r5, #0]
 8022b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8022b9c:	d016      	beq.n	8022bcc <_vfiprintf_r+0x124>
 8022b9e:	002e      	movs	r6, r5
 8022ba0:	2100      	movs	r1, #0
 8022ba2:	200a      	movs	r0, #10
 8022ba4:	68e3      	ldr	r3, [r4, #12]
 8022ba6:	7832      	ldrb	r2, [r6, #0]
 8022ba8:	1c75      	adds	r5, r6, #1
 8022baa:	3a30      	subs	r2, #48	@ 0x30
 8022bac:	2a09      	cmp	r2, #9
 8022bae:	d950      	bls.n	8022c52 <_vfiprintf_r+0x1aa>
 8022bb0:	2900      	cmp	r1, #0
 8022bb2:	d111      	bne.n	8022bd8 <_vfiprintf_r+0x130>
 8022bb4:	e017      	b.n	8022be6 <_vfiprintf_r+0x13e>
 8022bb6:	3601      	adds	r6, #1
 8022bb8:	e7af      	b.n	8022b1a <_vfiprintf_r+0x72>
 8022bba:	9b05      	ldr	r3, [sp, #20]
 8022bbc:	6822      	ldr	r2, [r4, #0]
 8022bbe:	1ac0      	subs	r0, r0, r3
 8022bc0:	2301      	movs	r3, #1
 8022bc2:	4083      	lsls	r3, r0
 8022bc4:	4313      	orrs	r3, r2
 8022bc6:	0035      	movs	r5, r6
 8022bc8:	6023      	str	r3, [r4, #0]
 8022bca:	e7cc      	b.n	8022b66 <_vfiprintf_r+0xbe>
 8022bcc:	9b07      	ldr	r3, [sp, #28]
 8022bce:	1d19      	adds	r1, r3, #4
 8022bd0:	681b      	ldr	r3, [r3, #0]
 8022bd2:	9107      	str	r1, [sp, #28]
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	db01      	blt.n	8022bdc <_vfiprintf_r+0x134>
 8022bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022bda:	e004      	b.n	8022be6 <_vfiprintf_r+0x13e>
 8022bdc:	425b      	negs	r3, r3
 8022bde:	60e3      	str	r3, [r4, #12]
 8022be0:	2302      	movs	r3, #2
 8022be2:	4313      	orrs	r3, r2
 8022be4:	6023      	str	r3, [r4, #0]
 8022be6:	7833      	ldrb	r3, [r6, #0]
 8022be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8022bea:	d10c      	bne.n	8022c06 <_vfiprintf_r+0x15e>
 8022bec:	7873      	ldrb	r3, [r6, #1]
 8022bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8022bf0:	d134      	bne.n	8022c5c <_vfiprintf_r+0x1b4>
 8022bf2:	9b07      	ldr	r3, [sp, #28]
 8022bf4:	3602      	adds	r6, #2
 8022bf6:	1d1a      	adds	r2, r3, #4
 8022bf8:	681b      	ldr	r3, [r3, #0]
 8022bfa:	9207      	str	r2, [sp, #28]
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	da01      	bge.n	8022c04 <_vfiprintf_r+0x15c>
 8022c00:	2301      	movs	r3, #1
 8022c02:	425b      	negs	r3, r3
 8022c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c06:	4d32      	ldr	r5, [pc, #200]	@ (8022cd0 <_vfiprintf_r+0x228>)
 8022c08:	2203      	movs	r2, #3
 8022c0a:	0028      	movs	r0, r5
 8022c0c:	7831      	ldrb	r1, [r6, #0]
 8022c0e:	f7fd fdde 	bl	80207ce <memchr>
 8022c12:	2800      	cmp	r0, #0
 8022c14:	d006      	beq.n	8022c24 <_vfiprintf_r+0x17c>
 8022c16:	2340      	movs	r3, #64	@ 0x40
 8022c18:	1b40      	subs	r0, r0, r5
 8022c1a:	4083      	lsls	r3, r0
 8022c1c:	6822      	ldr	r2, [r4, #0]
 8022c1e:	3601      	adds	r6, #1
 8022c20:	4313      	orrs	r3, r2
 8022c22:	6023      	str	r3, [r4, #0]
 8022c24:	7831      	ldrb	r1, [r6, #0]
 8022c26:	2206      	movs	r2, #6
 8022c28:	482a      	ldr	r0, [pc, #168]	@ (8022cd4 <_vfiprintf_r+0x22c>)
 8022c2a:	1c75      	adds	r5, r6, #1
 8022c2c:	7621      	strb	r1, [r4, #24]
 8022c2e:	f7fd fdce 	bl	80207ce <memchr>
 8022c32:	2800      	cmp	r0, #0
 8022c34:	d040      	beq.n	8022cb8 <_vfiprintf_r+0x210>
 8022c36:	4b28      	ldr	r3, [pc, #160]	@ (8022cd8 <_vfiprintf_r+0x230>)
 8022c38:	2b00      	cmp	r3, #0
 8022c3a:	d122      	bne.n	8022c82 <_vfiprintf_r+0x1da>
 8022c3c:	2207      	movs	r2, #7
 8022c3e:	9b07      	ldr	r3, [sp, #28]
 8022c40:	3307      	adds	r3, #7
 8022c42:	4393      	bics	r3, r2
 8022c44:	3308      	adds	r3, #8
 8022c46:	9307      	str	r3, [sp, #28]
 8022c48:	6963      	ldr	r3, [r4, #20]
 8022c4a:	9a04      	ldr	r2, [sp, #16]
 8022c4c:	189b      	adds	r3, r3, r2
 8022c4e:	6163      	str	r3, [r4, #20]
 8022c50:	e762      	b.n	8022b18 <_vfiprintf_r+0x70>
 8022c52:	4343      	muls	r3, r0
 8022c54:	002e      	movs	r6, r5
 8022c56:	2101      	movs	r1, #1
 8022c58:	189b      	adds	r3, r3, r2
 8022c5a:	e7a4      	b.n	8022ba6 <_vfiprintf_r+0xfe>
 8022c5c:	2300      	movs	r3, #0
 8022c5e:	200a      	movs	r0, #10
 8022c60:	0019      	movs	r1, r3
 8022c62:	3601      	adds	r6, #1
 8022c64:	6063      	str	r3, [r4, #4]
 8022c66:	7832      	ldrb	r2, [r6, #0]
 8022c68:	1c75      	adds	r5, r6, #1
 8022c6a:	3a30      	subs	r2, #48	@ 0x30
 8022c6c:	2a09      	cmp	r2, #9
 8022c6e:	d903      	bls.n	8022c78 <_vfiprintf_r+0x1d0>
 8022c70:	2b00      	cmp	r3, #0
 8022c72:	d0c8      	beq.n	8022c06 <_vfiprintf_r+0x15e>
 8022c74:	9109      	str	r1, [sp, #36]	@ 0x24
 8022c76:	e7c6      	b.n	8022c06 <_vfiprintf_r+0x15e>
 8022c78:	4341      	muls	r1, r0
 8022c7a:	002e      	movs	r6, r5
 8022c7c:	2301      	movs	r3, #1
 8022c7e:	1889      	adds	r1, r1, r2
 8022c80:	e7f1      	b.n	8022c66 <_vfiprintf_r+0x1be>
 8022c82:	aa07      	add	r2, sp, #28
 8022c84:	9200      	str	r2, [sp, #0]
 8022c86:	0021      	movs	r1, r4
 8022c88:	003a      	movs	r2, r7
 8022c8a:	4b14      	ldr	r3, [pc, #80]	@ (8022cdc <_vfiprintf_r+0x234>)
 8022c8c:	9803      	ldr	r0, [sp, #12]
 8022c8e:	f7fc fe99 	bl	801f9c4 <_printf_float>
 8022c92:	9004      	str	r0, [sp, #16]
 8022c94:	9b04      	ldr	r3, [sp, #16]
 8022c96:	3301      	adds	r3, #1
 8022c98:	d1d6      	bne.n	8022c48 <_vfiprintf_r+0x1a0>
 8022c9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022c9c:	07db      	lsls	r3, r3, #31
 8022c9e:	d405      	bmi.n	8022cac <_vfiprintf_r+0x204>
 8022ca0:	89bb      	ldrh	r3, [r7, #12]
 8022ca2:	059b      	lsls	r3, r3, #22
 8022ca4:	d402      	bmi.n	8022cac <_vfiprintf_r+0x204>
 8022ca6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8022ca8:	f7fd fd90 	bl	80207cc <__retarget_lock_release_recursive>
 8022cac:	89bb      	ldrh	r3, [r7, #12]
 8022cae:	065b      	lsls	r3, r3, #25
 8022cb0:	d500      	bpl.n	8022cb4 <_vfiprintf_r+0x20c>
 8022cb2:	e71e      	b.n	8022af2 <_vfiprintf_r+0x4a>
 8022cb4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022cb6:	e71e      	b.n	8022af6 <_vfiprintf_r+0x4e>
 8022cb8:	aa07      	add	r2, sp, #28
 8022cba:	9200      	str	r2, [sp, #0]
 8022cbc:	0021      	movs	r1, r4
 8022cbe:	003a      	movs	r2, r7
 8022cc0:	4b06      	ldr	r3, [pc, #24]	@ (8022cdc <_vfiprintf_r+0x234>)
 8022cc2:	9803      	ldr	r0, [sp, #12]
 8022cc4:	f7fd f92c 	bl	801ff20 <_printf_i>
 8022cc8:	e7e3      	b.n	8022c92 <_vfiprintf_r+0x1ea>
 8022cca:	46c0      	nop			@ (mov r8, r8)
 8022ccc:	08026648 	.word	0x08026648
 8022cd0:	0802664e 	.word	0x0802664e
 8022cd4:	08026652 	.word	0x08026652
 8022cd8:	0801f9c5 	.word	0x0801f9c5
 8022cdc:	08022a83 	.word	0x08022a83

08022ce0 <__sflush_r>:
 8022ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022ce2:	220c      	movs	r2, #12
 8022ce4:	5e8b      	ldrsh	r3, [r1, r2]
 8022ce6:	0005      	movs	r5, r0
 8022ce8:	000c      	movs	r4, r1
 8022cea:	071a      	lsls	r2, r3, #28
 8022cec:	d456      	bmi.n	8022d9c <__sflush_r+0xbc>
 8022cee:	684a      	ldr	r2, [r1, #4]
 8022cf0:	2a00      	cmp	r2, #0
 8022cf2:	dc02      	bgt.n	8022cfa <__sflush_r+0x1a>
 8022cf4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8022cf6:	2a00      	cmp	r2, #0
 8022cf8:	dd4e      	ble.n	8022d98 <__sflush_r+0xb8>
 8022cfa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022cfc:	2f00      	cmp	r7, #0
 8022cfe:	d04b      	beq.n	8022d98 <__sflush_r+0xb8>
 8022d00:	2200      	movs	r2, #0
 8022d02:	2080      	movs	r0, #128	@ 0x80
 8022d04:	682e      	ldr	r6, [r5, #0]
 8022d06:	602a      	str	r2, [r5, #0]
 8022d08:	001a      	movs	r2, r3
 8022d0a:	0140      	lsls	r0, r0, #5
 8022d0c:	6a21      	ldr	r1, [r4, #32]
 8022d0e:	4002      	ands	r2, r0
 8022d10:	4203      	tst	r3, r0
 8022d12:	d033      	beq.n	8022d7c <__sflush_r+0x9c>
 8022d14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022d16:	89a3      	ldrh	r3, [r4, #12]
 8022d18:	075b      	lsls	r3, r3, #29
 8022d1a:	d506      	bpl.n	8022d2a <__sflush_r+0x4a>
 8022d1c:	6863      	ldr	r3, [r4, #4]
 8022d1e:	1ad2      	subs	r2, r2, r3
 8022d20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022d22:	2b00      	cmp	r3, #0
 8022d24:	d001      	beq.n	8022d2a <__sflush_r+0x4a>
 8022d26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022d28:	1ad2      	subs	r2, r2, r3
 8022d2a:	2300      	movs	r3, #0
 8022d2c:	0028      	movs	r0, r5
 8022d2e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022d30:	6a21      	ldr	r1, [r4, #32]
 8022d32:	47b8      	blx	r7
 8022d34:	89a2      	ldrh	r2, [r4, #12]
 8022d36:	1c43      	adds	r3, r0, #1
 8022d38:	d106      	bne.n	8022d48 <__sflush_r+0x68>
 8022d3a:	6829      	ldr	r1, [r5, #0]
 8022d3c:	291d      	cmp	r1, #29
 8022d3e:	d846      	bhi.n	8022dce <__sflush_r+0xee>
 8022d40:	4b29      	ldr	r3, [pc, #164]	@ (8022de8 <__sflush_r+0x108>)
 8022d42:	410b      	asrs	r3, r1
 8022d44:	07db      	lsls	r3, r3, #31
 8022d46:	d442      	bmi.n	8022dce <__sflush_r+0xee>
 8022d48:	2300      	movs	r3, #0
 8022d4a:	6063      	str	r3, [r4, #4]
 8022d4c:	6923      	ldr	r3, [r4, #16]
 8022d4e:	6023      	str	r3, [r4, #0]
 8022d50:	04d2      	lsls	r2, r2, #19
 8022d52:	d505      	bpl.n	8022d60 <__sflush_r+0x80>
 8022d54:	1c43      	adds	r3, r0, #1
 8022d56:	d102      	bne.n	8022d5e <__sflush_r+0x7e>
 8022d58:	682b      	ldr	r3, [r5, #0]
 8022d5a:	2b00      	cmp	r3, #0
 8022d5c:	d100      	bne.n	8022d60 <__sflush_r+0x80>
 8022d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8022d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022d62:	602e      	str	r6, [r5, #0]
 8022d64:	2900      	cmp	r1, #0
 8022d66:	d017      	beq.n	8022d98 <__sflush_r+0xb8>
 8022d68:	0023      	movs	r3, r4
 8022d6a:	3344      	adds	r3, #68	@ 0x44
 8022d6c:	4299      	cmp	r1, r3
 8022d6e:	d002      	beq.n	8022d76 <__sflush_r+0x96>
 8022d70:	0028      	movs	r0, r5
 8022d72:	f7fe fbc9 	bl	8021508 <_free_r>
 8022d76:	2300      	movs	r3, #0
 8022d78:	6363      	str	r3, [r4, #52]	@ 0x34
 8022d7a:	e00d      	b.n	8022d98 <__sflush_r+0xb8>
 8022d7c:	2301      	movs	r3, #1
 8022d7e:	0028      	movs	r0, r5
 8022d80:	47b8      	blx	r7
 8022d82:	0002      	movs	r2, r0
 8022d84:	1c43      	adds	r3, r0, #1
 8022d86:	d1c6      	bne.n	8022d16 <__sflush_r+0x36>
 8022d88:	682b      	ldr	r3, [r5, #0]
 8022d8a:	2b00      	cmp	r3, #0
 8022d8c:	d0c3      	beq.n	8022d16 <__sflush_r+0x36>
 8022d8e:	2b1d      	cmp	r3, #29
 8022d90:	d001      	beq.n	8022d96 <__sflush_r+0xb6>
 8022d92:	2b16      	cmp	r3, #22
 8022d94:	d11a      	bne.n	8022dcc <__sflush_r+0xec>
 8022d96:	602e      	str	r6, [r5, #0]
 8022d98:	2000      	movs	r0, #0
 8022d9a:	e01e      	b.n	8022dda <__sflush_r+0xfa>
 8022d9c:	690e      	ldr	r6, [r1, #16]
 8022d9e:	2e00      	cmp	r6, #0
 8022da0:	d0fa      	beq.n	8022d98 <__sflush_r+0xb8>
 8022da2:	680f      	ldr	r7, [r1, #0]
 8022da4:	600e      	str	r6, [r1, #0]
 8022da6:	1bba      	subs	r2, r7, r6
 8022da8:	9201      	str	r2, [sp, #4]
 8022daa:	2200      	movs	r2, #0
 8022dac:	079b      	lsls	r3, r3, #30
 8022dae:	d100      	bne.n	8022db2 <__sflush_r+0xd2>
 8022db0:	694a      	ldr	r2, [r1, #20]
 8022db2:	60a2      	str	r2, [r4, #8]
 8022db4:	9b01      	ldr	r3, [sp, #4]
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	ddee      	ble.n	8022d98 <__sflush_r+0xb8>
 8022dba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8022dbc:	0032      	movs	r2, r6
 8022dbe:	001f      	movs	r7, r3
 8022dc0:	0028      	movs	r0, r5
 8022dc2:	9b01      	ldr	r3, [sp, #4]
 8022dc4:	6a21      	ldr	r1, [r4, #32]
 8022dc6:	47b8      	blx	r7
 8022dc8:	2800      	cmp	r0, #0
 8022dca:	dc07      	bgt.n	8022ddc <__sflush_r+0xfc>
 8022dcc:	89a2      	ldrh	r2, [r4, #12]
 8022dce:	2340      	movs	r3, #64	@ 0x40
 8022dd0:	2001      	movs	r0, #1
 8022dd2:	4313      	orrs	r3, r2
 8022dd4:	b21b      	sxth	r3, r3
 8022dd6:	81a3      	strh	r3, [r4, #12]
 8022dd8:	4240      	negs	r0, r0
 8022dda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022ddc:	9b01      	ldr	r3, [sp, #4]
 8022dde:	1836      	adds	r6, r6, r0
 8022de0:	1a1b      	subs	r3, r3, r0
 8022de2:	9301      	str	r3, [sp, #4]
 8022de4:	e7e6      	b.n	8022db4 <__sflush_r+0xd4>
 8022de6:	46c0      	nop			@ (mov r8, r8)
 8022de8:	dfbffffe 	.word	0xdfbffffe

08022dec <_fflush_r>:
 8022dec:	690b      	ldr	r3, [r1, #16]
 8022dee:	b570      	push	{r4, r5, r6, lr}
 8022df0:	0005      	movs	r5, r0
 8022df2:	000c      	movs	r4, r1
 8022df4:	2b00      	cmp	r3, #0
 8022df6:	d102      	bne.n	8022dfe <_fflush_r+0x12>
 8022df8:	2500      	movs	r5, #0
 8022dfa:	0028      	movs	r0, r5
 8022dfc:	bd70      	pop	{r4, r5, r6, pc}
 8022dfe:	2800      	cmp	r0, #0
 8022e00:	d004      	beq.n	8022e0c <_fflush_r+0x20>
 8022e02:	6a03      	ldr	r3, [r0, #32]
 8022e04:	2b00      	cmp	r3, #0
 8022e06:	d101      	bne.n	8022e0c <_fflush_r+0x20>
 8022e08:	f7fd fa28 	bl	802025c <__sinit>
 8022e0c:	220c      	movs	r2, #12
 8022e0e:	5ea3      	ldrsh	r3, [r4, r2]
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	d0f1      	beq.n	8022df8 <_fflush_r+0xc>
 8022e14:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022e16:	07d2      	lsls	r2, r2, #31
 8022e18:	d404      	bmi.n	8022e24 <_fflush_r+0x38>
 8022e1a:	059b      	lsls	r3, r3, #22
 8022e1c:	d402      	bmi.n	8022e24 <_fflush_r+0x38>
 8022e1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022e20:	f7fd fcd3 	bl	80207ca <__retarget_lock_acquire_recursive>
 8022e24:	0028      	movs	r0, r5
 8022e26:	0021      	movs	r1, r4
 8022e28:	f7ff ff5a 	bl	8022ce0 <__sflush_r>
 8022e2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022e2e:	0005      	movs	r5, r0
 8022e30:	07db      	lsls	r3, r3, #31
 8022e32:	d4e2      	bmi.n	8022dfa <_fflush_r+0xe>
 8022e34:	89a3      	ldrh	r3, [r4, #12]
 8022e36:	059b      	lsls	r3, r3, #22
 8022e38:	d4df      	bmi.n	8022dfa <_fflush_r+0xe>
 8022e3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022e3c:	f7fd fcc6 	bl	80207cc <__retarget_lock_release_recursive>
 8022e40:	e7db      	b.n	8022dfa <_fflush_r+0xe>
	...

08022e44 <__swhatbuf_r>:
 8022e44:	b570      	push	{r4, r5, r6, lr}
 8022e46:	000e      	movs	r6, r1
 8022e48:	001d      	movs	r5, r3
 8022e4a:	230e      	movs	r3, #14
 8022e4c:	5ec9      	ldrsh	r1, [r1, r3]
 8022e4e:	0014      	movs	r4, r2
 8022e50:	b096      	sub	sp, #88	@ 0x58
 8022e52:	2900      	cmp	r1, #0
 8022e54:	da0c      	bge.n	8022e70 <__swhatbuf_r+0x2c>
 8022e56:	89b2      	ldrh	r2, [r6, #12]
 8022e58:	2380      	movs	r3, #128	@ 0x80
 8022e5a:	0011      	movs	r1, r2
 8022e5c:	4019      	ands	r1, r3
 8022e5e:	421a      	tst	r2, r3
 8022e60:	d114      	bne.n	8022e8c <__swhatbuf_r+0x48>
 8022e62:	2380      	movs	r3, #128	@ 0x80
 8022e64:	00db      	lsls	r3, r3, #3
 8022e66:	2000      	movs	r0, #0
 8022e68:	6029      	str	r1, [r5, #0]
 8022e6a:	6023      	str	r3, [r4, #0]
 8022e6c:	b016      	add	sp, #88	@ 0x58
 8022e6e:	bd70      	pop	{r4, r5, r6, pc}
 8022e70:	466a      	mov	r2, sp
 8022e72:	f000 f865 	bl	8022f40 <_fstat_r>
 8022e76:	2800      	cmp	r0, #0
 8022e78:	dbed      	blt.n	8022e56 <__swhatbuf_r+0x12>
 8022e7a:	23f0      	movs	r3, #240	@ 0xf0
 8022e7c:	9901      	ldr	r1, [sp, #4]
 8022e7e:	021b      	lsls	r3, r3, #8
 8022e80:	4019      	ands	r1, r3
 8022e82:	4b04      	ldr	r3, [pc, #16]	@ (8022e94 <__swhatbuf_r+0x50>)
 8022e84:	18c9      	adds	r1, r1, r3
 8022e86:	424b      	negs	r3, r1
 8022e88:	4159      	adcs	r1, r3
 8022e8a:	e7ea      	b.n	8022e62 <__swhatbuf_r+0x1e>
 8022e8c:	2100      	movs	r1, #0
 8022e8e:	2340      	movs	r3, #64	@ 0x40
 8022e90:	e7e9      	b.n	8022e66 <__swhatbuf_r+0x22>
 8022e92:	46c0      	nop			@ (mov r8, r8)
 8022e94:	ffffe000 	.word	0xffffe000

08022e98 <__smakebuf_r>:
 8022e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e9a:	2602      	movs	r6, #2
 8022e9c:	898b      	ldrh	r3, [r1, #12]
 8022e9e:	0005      	movs	r5, r0
 8022ea0:	000c      	movs	r4, r1
 8022ea2:	b085      	sub	sp, #20
 8022ea4:	4233      	tst	r3, r6
 8022ea6:	d007      	beq.n	8022eb8 <__smakebuf_r+0x20>
 8022ea8:	0023      	movs	r3, r4
 8022eaa:	3347      	adds	r3, #71	@ 0x47
 8022eac:	6023      	str	r3, [r4, #0]
 8022eae:	6123      	str	r3, [r4, #16]
 8022eb0:	2301      	movs	r3, #1
 8022eb2:	6163      	str	r3, [r4, #20]
 8022eb4:	b005      	add	sp, #20
 8022eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022eb8:	ab03      	add	r3, sp, #12
 8022eba:	aa02      	add	r2, sp, #8
 8022ebc:	f7ff ffc2 	bl	8022e44 <__swhatbuf_r>
 8022ec0:	9f02      	ldr	r7, [sp, #8]
 8022ec2:	9001      	str	r0, [sp, #4]
 8022ec4:	0039      	movs	r1, r7
 8022ec6:	0028      	movs	r0, r5
 8022ec8:	f7fe feee 	bl	8021ca8 <_malloc_r>
 8022ecc:	2800      	cmp	r0, #0
 8022ece:	d108      	bne.n	8022ee2 <__smakebuf_r+0x4a>
 8022ed0:	220c      	movs	r2, #12
 8022ed2:	5ea3      	ldrsh	r3, [r4, r2]
 8022ed4:	059a      	lsls	r2, r3, #22
 8022ed6:	d4ed      	bmi.n	8022eb4 <__smakebuf_r+0x1c>
 8022ed8:	2203      	movs	r2, #3
 8022eda:	4393      	bics	r3, r2
 8022edc:	431e      	orrs	r6, r3
 8022ede:	81a6      	strh	r6, [r4, #12]
 8022ee0:	e7e2      	b.n	8022ea8 <__smakebuf_r+0x10>
 8022ee2:	2380      	movs	r3, #128	@ 0x80
 8022ee4:	89a2      	ldrh	r2, [r4, #12]
 8022ee6:	6020      	str	r0, [r4, #0]
 8022ee8:	4313      	orrs	r3, r2
 8022eea:	81a3      	strh	r3, [r4, #12]
 8022eec:	9b03      	ldr	r3, [sp, #12]
 8022eee:	6120      	str	r0, [r4, #16]
 8022ef0:	6167      	str	r7, [r4, #20]
 8022ef2:	2b00      	cmp	r3, #0
 8022ef4:	d00c      	beq.n	8022f10 <__smakebuf_r+0x78>
 8022ef6:	0028      	movs	r0, r5
 8022ef8:	230e      	movs	r3, #14
 8022efa:	5ee1      	ldrsh	r1, [r4, r3]
 8022efc:	f000 f832 	bl	8022f64 <_isatty_r>
 8022f00:	2800      	cmp	r0, #0
 8022f02:	d005      	beq.n	8022f10 <__smakebuf_r+0x78>
 8022f04:	2303      	movs	r3, #3
 8022f06:	89a2      	ldrh	r2, [r4, #12]
 8022f08:	439a      	bics	r2, r3
 8022f0a:	3b02      	subs	r3, #2
 8022f0c:	4313      	orrs	r3, r2
 8022f0e:	81a3      	strh	r3, [r4, #12]
 8022f10:	89a3      	ldrh	r3, [r4, #12]
 8022f12:	9a01      	ldr	r2, [sp, #4]
 8022f14:	4313      	orrs	r3, r2
 8022f16:	81a3      	strh	r3, [r4, #12]
 8022f18:	e7cc      	b.n	8022eb4 <__smakebuf_r+0x1c>

08022f1a <memmove>:
 8022f1a:	b510      	push	{r4, lr}
 8022f1c:	4288      	cmp	r0, r1
 8022f1e:	d806      	bhi.n	8022f2e <memmove+0x14>
 8022f20:	2300      	movs	r3, #0
 8022f22:	429a      	cmp	r2, r3
 8022f24:	d008      	beq.n	8022f38 <memmove+0x1e>
 8022f26:	5ccc      	ldrb	r4, [r1, r3]
 8022f28:	54c4      	strb	r4, [r0, r3]
 8022f2a:	3301      	adds	r3, #1
 8022f2c:	e7f9      	b.n	8022f22 <memmove+0x8>
 8022f2e:	188b      	adds	r3, r1, r2
 8022f30:	4298      	cmp	r0, r3
 8022f32:	d2f5      	bcs.n	8022f20 <memmove+0x6>
 8022f34:	3a01      	subs	r2, #1
 8022f36:	d200      	bcs.n	8022f3a <memmove+0x20>
 8022f38:	bd10      	pop	{r4, pc}
 8022f3a:	5c8b      	ldrb	r3, [r1, r2]
 8022f3c:	5483      	strb	r3, [r0, r2]
 8022f3e:	e7f9      	b.n	8022f34 <memmove+0x1a>

08022f40 <_fstat_r>:
 8022f40:	2300      	movs	r3, #0
 8022f42:	b570      	push	{r4, r5, r6, lr}
 8022f44:	4d06      	ldr	r5, [pc, #24]	@ (8022f60 <_fstat_r+0x20>)
 8022f46:	0004      	movs	r4, r0
 8022f48:	0008      	movs	r0, r1
 8022f4a:	0011      	movs	r1, r2
 8022f4c:	602b      	str	r3, [r5, #0]
 8022f4e:	f7eb f879 	bl	800e044 <_fstat>
 8022f52:	1c43      	adds	r3, r0, #1
 8022f54:	d103      	bne.n	8022f5e <_fstat_r+0x1e>
 8022f56:	682b      	ldr	r3, [r5, #0]
 8022f58:	2b00      	cmp	r3, #0
 8022f5a:	d000      	beq.n	8022f5e <_fstat_r+0x1e>
 8022f5c:	6023      	str	r3, [r4, #0]
 8022f5e:	bd70      	pop	{r4, r5, r6, pc}
 8022f60:	200033c8 	.word	0x200033c8

08022f64 <_isatty_r>:
 8022f64:	2300      	movs	r3, #0
 8022f66:	b570      	push	{r4, r5, r6, lr}
 8022f68:	4d06      	ldr	r5, [pc, #24]	@ (8022f84 <_isatty_r+0x20>)
 8022f6a:	0004      	movs	r4, r0
 8022f6c:	0008      	movs	r0, r1
 8022f6e:	602b      	str	r3, [r5, #0]
 8022f70:	f7eb f876 	bl	800e060 <_isatty>
 8022f74:	1c43      	adds	r3, r0, #1
 8022f76:	d103      	bne.n	8022f80 <_isatty_r+0x1c>
 8022f78:	682b      	ldr	r3, [r5, #0]
 8022f7a:	2b00      	cmp	r3, #0
 8022f7c:	d000      	beq.n	8022f80 <_isatty_r+0x1c>
 8022f7e:	6023      	str	r3, [r4, #0]
 8022f80:	bd70      	pop	{r4, r5, r6, pc}
 8022f82:	46c0      	nop			@ (mov r8, r8)
 8022f84:	200033c8 	.word	0x200033c8

08022f88 <_sbrk_r>:
 8022f88:	2300      	movs	r3, #0
 8022f8a:	b570      	push	{r4, r5, r6, lr}
 8022f8c:	4d06      	ldr	r5, [pc, #24]	@ (8022fa8 <_sbrk_r+0x20>)
 8022f8e:	0004      	movs	r4, r0
 8022f90:	0008      	movs	r0, r1
 8022f92:	602b      	str	r3, [r5, #0]
 8022f94:	f7eb f878 	bl	800e088 <_sbrk>
 8022f98:	1c43      	adds	r3, r0, #1
 8022f9a:	d103      	bne.n	8022fa4 <_sbrk_r+0x1c>
 8022f9c:	682b      	ldr	r3, [r5, #0]
 8022f9e:	2b00      	cmp	r3, #0
 8022fa0:	d000      	beq.n	8022fa4 <_sbrk_r+0x1c>
 8022fa2:	6023      	str	r3, [r4, #0]
 8022fa4:	bd70      	pop	{r4, r5, r6, pc}
 8022fa6:	46c0      	nop			@ (mov r8, r8)
 8022fa8:	200033c8 	.word	0x200033c8

08022fac <__assert_func>:
 8022fac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022fae:	0014      	movs	r4, r2
 8022fb0:	001a      	movs	r2, r3
 8022fb2:	4b09      	ldr	r3, [pc, #36]	@ (8022fd8 <__assert_func+0x2c>)
 8022fb4:	0005      	movs	r5, r0
 8022fb6:	681b      	ldr	r3, [r3, #0]
 8022fb8:	000e      	movs	r6, r1
 8022fba:	68d8      	ldr	r0, [r3, #12]
 8022fbc:	4b07      	ldr	r3, [pc, #28]	@ (8022fdc <__assert_func+0x30>)
 8022fbe:	2c00      	cmp	r4, #0
 8022fc0:	d101      	bne.n	8022fc6 <__assert_func+0x1a>
 8022fc2:	4b07      	ldr	r3, [pc, #28]	@ (8022fe0 <__assert_func+0x34>)
 8022fc4:	001c      	movs	r4, r3
 8022fc6:	4907      	ldr	r1, [pc, #28]	@ (8022fe4 <__assert_func+0x38>)
 8022fc8:	9301      	str	r3, [sp, #4]
 8022fca:	9402      	str	r4, [sp, #8]
 8022fcc:	002b      	movs	r3, r5
 8022fce:	9600      	str	r6, [sp, #0]
 8022fd0:	f000 f866 	bl	80230a0 <fiprintf>
 8022fd4:	f000 f874 	bl	80230c0 <abort>
 8022fd8:	200003d0 	.word	0x200003d0
 8022fdc:	08026659 	.word	0x08026659
 8022fe0:	08026694 	.word	0x08026694
 8022fe4:	08026666 	.word	0x08026666

08022fe8 <_calloc_r>:
 8022fe8:	b570      	push	{r4, r5, r6, lr}
 8022fea:	0c0b      	lsrs	r3, r1, #16
 8022fec:	0c15      	lsrs	r5, r2, #16
 8022fee:	2b00      	cmp	r3, #0
 8022ff0:	d11e      	bne.n	8023030 <_calloc_r+0x48>
 8022ff2:	2d00      	cmp	r5, #0
 8022ff4:	d10c      	bne.n	8023010 <_calloc_r+0x28>
 8022ff6:	b289      	uxth	r1, r1
 8022ff8:	b294      	uxth	r4, r2
 8022ffa:	434c      	muls	r4, r1
 8022ffc:	0021      	movs	r1, r4
 8022ffe:	f7fe fe53 	bl	8021ca8 <_malloc_r>
 8023002:	1e05      	subs	r5, r0, #0
 8023004:	d01a      	beq.n	802303c <_calloc_r+0x54>
 8023006:	0022      	movs	r2, r4
 8023008:	2100      	movs	r1, #0
 802300a:	f7fd fb0f 	bl	802062c <memset>
 802300e:	e016      	b.n	802303e <_calloc_r+0x56>
 8023010:	1c2b      	adds	r3, r5, #0
 8023012:	1c0c      	adds	r4, r1, #0
 8023014:	b289      	uxth	r1, r1
 8023016:	b292      	uxth	r2, r2
 8023018:	434a      	muls	r2, r1
 802301a:	b29b      	uxth	r3, r3
 802301c:	b2a1      	uxth	r1, r4
 802301e:	4359      	muls	r1, r3
 8023020:	0c14      	lsrs	r4, r2, #16
 8023022:	190c      	adds	r4, r1, r4
 8023024:	0c23      	lsrs	r3, r4, #16
 8023026:	d107      	bne.n	8023038 <_calloc_r+0x50>
 8023028:	0424      	lsls	r4, r4, #16
 802302a:	b292      	uxth	r2, r2
 802302c:	4314      	orrs	r4, r2
 802302e:	e7e5      	b.n	8022ffc <_calloc_r+0x14>
 8023030:	2d00      	cmp	r5, #0
 8023032:	d101      	bne.n	8023038 <_calloc_r+0x50>
 8023034:	1c14      	adds	r4, r2, #0
 8023036:	e7ed      	b.n	8023014 <_calloc_r+0x2c>
 8023038:	230c      	movs	r3, #12
 802303a:	6003      	str	r3, [r0, #0]
 802303c:	2500      	movs	r5, #0
 802303e:	0028      	movs	r0, r5
 8023040:	bd70      	pop	{r4, r5, r6, pc}

08023042 <_realloc_r>:
 8023042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023044:	0006      	movs	r6, r0
 8023046:	000c      	movs	r4, r1
 8023048:	0015      	movs	r5, r2
 802304a:	2900      	cmp	r1, #0
 802304c:	d105      	bne.n	802305a <_realloc_r+0x18>
 802304e:	0011      	movs	r1, r2
 8023050:	f7fe fe2a 	bl	8021ca8 <_malloc_r>
 8023054:	0004      	movs	r4, r0
 8023056:	0020      	movs	r0, r4
 8023058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802305a:	2a00      	cmp	r2, #0
 802305c:	d103      	bne.n	8023066 <_realloc_r+0x24>
 802305e:	f7fe fa53 	bl	8021508 <_free_r>
 8023062:	2400      	movs	r4, #0
 8023064:	e7f7      	b.n	8023056 <_realloc_r+0x14>
 8023066:	f000 f832 	bl	80230ce <_malloc_usable_size_r>
 802306a:	0007      	movs	r7, r0
 802306c:	4285      	cmp	r5, r0
 802306e:	d802      	bhi.n	8023076 <_realloc_r+0x34>
 8023070:	0843      	lsrs	r3, r0, #1
 8023072:	42ab      	cmp	r3, r5
 8023074:	d3ef      	bcc.n	8023056 <_realloc_r+0x14>
 8023076:	0029      	movs	r1, r5
 8023078:	0030      	movs	r0, r6
 802307a:	f7fe fe15 	bl	8021ca8 <_malloc_r>
 802307e:	9001      	str	r0, [sp, #4]
 8023080:	2800      	cmp	r0, #0
 8023082:	d0ee      	beq.n	8023062 <_realloc_r+0x20>
 8023084:	002a      	movs	r2, r5
 8023086:	42bd      	cmp	r5, r7
 8023088:	d900      	bls.n	802308c <_realloc_r+0x4a>
 802308a:	003a      	movs	r2, r7
 802308c:	0021      	movs	r1, r4
 802308e:	9801      	ldr	r0, [sp, #4]
 8023090:	f7fd fba8 	bl	80207e4 <memcpy>
 8023094:	0021      	movs	r1, r4
 8023096:	0030      	movs	r0, r6
 8023098:	f7fe fa36 	bl	8021508 <_free_r>
 802309c:	9c01      	ldr	r4, [sp, #4]
 802309e:	e7da      	b.n	8023056 <_realloc_r+0x14>

080230a0 <fiprintf>:
 80230a0:	b40e      	push	{r1, r2, r3}
 80230a2:	b517      	push	{r0, r1, r2, r4, lr}
 80230a4:	4c05      	ldr	r4, [pc, #20]	@ (80230bc <fiprintf+0x1c>)
 80230a6:	ab05      	add	r3, sp, #20
 80230a8:	cb04      	ldmia	r3!, {r2}
 80230aa:	0001      	movs	r1, r0
 80230ac:	6820      	ldr	r0, [r4, #0]
 80230ae:	9301      	str	r3, [sp, #4]
 80230b0:	f7ff fcfa 	bl	8022aa8 <_vfiprintf_r>
 80230b4:	bc1e      	pop	{r1, r2, r3, r4}
 80230b6:	bc08      	pop	{r3}
 80230b8:	b003      	add	sp, #12
 80230ba:	4718      	bx	r3
 80230bc:	200003d0 	.word	0x200003d0

080230c0 <abort>:
 80230c0:	2006      	movs	r0, #6
 80230c2:	b510      	push	{r4, lr}
 80230c4:	f000 f834 	bl	8023130 <raise>
 80230c8:	2001      	movs	r0, #1
 80230ca:	f7ea ff87 	bl	800dfdc <_exit>

080230ce <_malloc_usable_size_r>:
 80230ce:	1f0b      	subs	r3, r1, #4
 80230d0:	681b      	ldr	r3, [r3, #0]
 80230d2:	1f18      	subs	r0, r3, #4
 80230d4:	2b00      	cmp	r3, #0
 80230d6:	da01      	bge.n	80230dc <_malloc_usable_size_r+0xe>
 80230d8:	580b      	ldr	r3, [r1, r0]
 80230da:	18c0      	adds	r0, r0, r3
 80230dc:	4770      	bx	lr

080230de <_raise_r>:
 80230de:	b570      	push	{r4, r5, r6, lr}
 80230e0:	0004      	movs	r4, r0
 80230e2:	000d      	movs	r5, r1
 80230e4:	291f      	cmp	r1, #31
 80230e6:	d904      	bls.n	80230f2 <_raise_r+0x14>
 80230e8:	2316      	movs	r3, #22
 80230ea:	6003      	str	r3, [r0, #0]
 80230ec:	2001      	movs	r0, #1
 80230ee:	4240      	negs	r0, r0
 80230f0:	bd70      	pop	{r4, r5, r6, pc}
 80230f2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80230f4:	2b00      	cmp	r3, #0
 80230f6:	d004      	beq.n	8023102 <_raise_r+0x24>
 80230f8:	008a      	lsls	r2, r1, #2
 80230fa:	189b      	adds	r3, r3, r2
 80230fc:	681a      	ldr	r2, [r3, #0]
 80230fe:	2a00      	cmp	r2, #0
 8023100:	d108      	bne.n	8023114 <_raise_r+0x36>
 8023102:	0020      	movs	r0, r4
 8023104:	f000 f830 	bl	8023168 <_getpid_r>
 8023108:	002a      	movs	r2, r5
 802310a:	0001      	movs	r1, r0
 802310c:	0020      	movs	r0, r4
 802310e:	f000 f819 	bl	8023144 <_kill_r>
 8023112:	e7ed      	b.n	80230f0 <_raise_r+0x12>
 8023114:	2a01      	cmp	r2, #1
 8023116:	d009      	beq.n	802312c <_raise_r+0x4e>
 8023118:	1c51      	adds	r1, r2, #1
 802311a:	d103      	bne.n	8023124 <_raise_r+0x46>
 802311c:	2316      	movs	r3, #22
 802311e:	6003      	str	r3, [r0, #0]
 8023120:	2001      	movs	r0, #1
 8023122:	e7e5      	b.n	80230f0 <_raise_r+0x12>
 8023124:	2100      	movs	r1, #0
 8023126:	0028      	movs	r0, r5
 8023128:	6019      	str	r1, [r3, #0]
 802312a:	4790      	blx	r2
 802312c:	2000      	movs	r0, #0
 802312e:	e7df      	b.n	80230f0 <_raise_r+0x12>

08023130 <raise>:
 8023130:	b510      	push	{r4, lr}
 8023132:	4b03      	ldr	r3, [pc, #12]	@ (8023140 <raise+0x10>)
 8023134:	0001      	movs	r1, r0
 8023136:	6818      	ldr	r0, [r3, #0]
 8023138:	f7ff ffd1 	bl	80230de <_raise_r>
 802313c:	bd10      	pop	{r4, pc}
 802313e:	46c0      	nop			@ (mov r8, r8)
 8023140:	200003d0 	.word	0x200003d0

08023144 <_kill_r>:
 8023144:	2300      	movs	r3, #0
 8023146:	b570      	push	{r4, r5, r6, lr}
 8023148:	4d06      	ldr	r5, [pc, #24]	@ (8023164 <_kill_r+0x20>)
 802314a:	0004      	movs	r4, r0
 802314c:	0008      	movs	r0, r1
 802314e:	0011      	movs	r1, r2
 8023150:	602b      	str	r3, [r5, #0]
 8023152:	f7ea ff33 	bl	800dfbc <_kill>
 8023156:	1c43      	adds	r3, r0, #1
 8023158:	d103      	bne.n	8023162 <_kill_r+0x1e>
 802315a:	682b      	ldr	r3, [r5, #0]
 802315c:	2b00      	cmp	r3, #0
 802315e:	d000      	beq.n	8023162 <_kill_r+0x1e>
 8023160:	6023      	str	r3, [r4, #0]
 8023162:	bd70      	pop	{r4, r5, r6, pc}
 8023164:	200033c8 	.word	0x200033c8

08023168 <_getpid_r>:
 8023168:	b510      	push	{r4, lr}
 802316a:	f7ea ff21 	bl	800dfb0 <_getpid>
 802316e:	bd10      	pop	{r4, pc}

08023170 <expf>:
 8023170:	b570      	push	{r4, r5, r6, lr}
 8023172:	1c04      	adds	r4, r0, #0
 8023174:	f000 f8e6 	bl	8023344 <__ieee754_expf>
 8023178:	1c05      	adds	r5, r0, #0
 802317a:	1c20      	adds	r0, r4, #0
 802317c:	f000 f83c 	bl	80231f8 <finitef>
 8023180:	2800      	cmp	r0, #0
 8023182:	d00b      	beq.n	802319c <expf+0x2c>
 8023184:	490c      	ldr	r1, [pc, #48]	@ (80231b8 <expf+0x48>)
 8023186:	1c20      	adds	r0, r4, #0
 8023188:	f7dd f9e6 	bl	8000558 <__aeabi_fcmpgt>
 802318c:	2800      	cmp	r0, #0
 802318e:	d007      	beq.n	80231a0 <expf+0x30>
 8023190:	f7fd faf0 	bl	8020774 <__errno>
 8023194:	25ff      	movs	r5, #255	@ 0xff
 8023196:	2322      	movs	r3, #34	@ 0x22
 8023198:	05ed      	lsls	r5, r5, #23
 802319a:	6003      	str	r3, [r0, #0]
 802319c:	1c28      	adds	r0, r5, #0
 802319e:	bd70      	pop	{r4, r5, r6, pc}
 80231a0:	4906      	ldr	r1, [pc, #24]	@ (80231bc <expf+0x4c>)
 80231a2:	1c20      	adds	r0, r4, #0
 80231a4:	f7dd f9c4 	bl	8000530 <__aeabi_fcmplt>
 80231a8:	2800      	cmp	r0, #0
 80231aa:	d0f7      	beq.n	802319c <expf+0x2c>
 80231ac:	f7fd fae2 	bl	8020774 <__errno>
 80231b0:	2322      	movs	r3, #34	@ 0x22
 80231b2:	2500      	movs	r5, #0
 80231b4:	6003      	str	r3, [r0, #0]
 80231b6:	e7f1      	b.n	802319c <expf+0x2c>
 80231b8:	42b17217 	.word	0x42b17217
 80231bc:	c2cff1b5 	.word	0xc2cff1b5

080231c0 <sqrtf>:
 80231c0:	b570      	push	{r4, r5, r6, lr}
 80231c2:	1c05      	adds	r5, r0, #0
 80231c4:	f000 f822 	bl	802320c <__ieee754_sqrtf>
 80231c8:	1c29      	adds	r1, r5, #0
 80231ca:	1c04      	adds	r4, r0, #0
 80231cc:	1c28      	adds	r0, r5, #0
 80231ce:	f7de f9c9 	bl	8001564 <__aeabi_fcmpun>
 80231d2:	2800      	cmp	r0, #0
 80231d4:	d10e      	bne.n	80231f4 <sqrtf+0x34>
 80231d6:	2100      	movs	r1, #0
 80231d8:	1c28      	adds	r0, r5, #0
 80231da:	f7dd f9a9 	bl	8000530 <__aeabi_fcmplt>
 80231de:	2800      	cmp	r0, #0
 80231e0:	d008      	beq.n	80231f4 <sqrtf+0x34>
 80231e2:	f7fd fac7 	bl	8020774 <__errno>
 80231e6:	2321      	movs	r3, #33	@ 0x21
 80231e8:	2100      	movs	r1, #0
 80231ea:	6003      	str	r3, [r0, #0]
 80231ec:	1c08      	adds	r0, r1, #0
 80231ee:	f7dd fcf1 	bl	8000bd4 <__aeabi_fdiv>
 80231f2:	1c04      	adds	r4, r0, #0
 80231f4:	1c20      	adds	r0, r4, #0
 80231f6:	bd70      	pop	{r4, r5, r6, pc}

080231f8 <finitef>:
 80231f8:	22ff      	movs	r2, #255	@ 0xff
 80231fa:	0043      	lsls	r3, r0, #1
 80231fc:	085b      	lsrs	r3, r3, #1
 80231fe:	2001      	movs	r0, #1
 8023200:	05d2      	lsls	r2, r2, #23
 8023202:	4293      	cmp	r3, r2
 8023204:	db00      	blt.n	8023208 <finitef+0x10>
 8023206:	2000      	movs	r0, #0
 8023208:	4770      	bx	lr
	...

0802320c <__ieee754_sqrtf>:
 802320c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802320e:	0003      	movs	r3, r0
 8023210:	0042      	lsls	r2, r0, #1
 8023212:	1c04      	adds	r4, r0, #0
 8023214:	20ff      	movs	r0, #255	@ 0xff
 8023216:	0852      	lsrs	r2, r2, #1
 8023218:	05c0      	lsls	r0, r0, #23
 802321a:	4282      	cmp	r2, r0
 802321c:	d30a      	bcc.n	8023234 <__ieee754_sqrtf+0x28>
 802321e:	1c21      	adds	r1, r4, #0
 8023220:	1c20      	adds	r0, r4, #0
 8023222:	f7dd febd 	bl	8000fa0 <__aeabi_fmul>
 8023226:	1c01      	adds	r1, r0, #0
 8023228:	1c20      	adds	r0, r4, #0
 802322a:	f7dd fb49 	bl	80008c0 <__aeabi_fadd>
 802322e:	1c04      	adds	r4, r0, #0
 8023230:	1c20      	adds	r0, r4, #0
 8023232:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023234:	2a00      	cmp	r2, #0
 8023236:	d0fb      	beq.n	8023230 <__ieee754_sqrtf+0x24>
 8023238:	2c00      	cmp	r4, #0
 802323a:	da07      	bge.n	802324c <__ieee754_sqrtf+0x40>
 802323c:	1c21      	adds	r1, r4, #0
 802323e:	1c20      	adds	r0, r4, #0
 8023240:	f7dd ffec 	bl	800121c <__aeabi_fsub>
 8023244:	1c01      	adds	r1, r0, #0
 8023246:	f7dd fcc5 	bl	8000bd4 <__aeabi_fdiv>
 802324a:	e7f0      	b.n	802322e <__ieee754_sqrtf+0x22>
 802324c:	0022      	movs	r2, r4
 802324e:	15e1      	asrs	r1, r4, #23
 8023250:	4002      	ands	r2, r0
 8023252:	4204      	tst	r4, r0
 8023254:	d046      	beq.n	80232e4 <__ieee754_sqrtf+0xd8>
 8023256:	2280      	movs	r2, #128	@ 0x80
 8023258:	000f      	movs	r7, r1
 802325a:	025b      	lsls	r3, r3, #9
 802325c:	0a5b      	lsrs	r3, r3, #9
 802325e:	0412      	lsls	r2, r2, #16
 8023260:	3f7f      	subs	r7, #127	@ 0x7f
 8023262:	4313      	orrs	r3, r2
 8023264:	07c9      	lsls	r1, r1, #31
 8023266:	d400      	bmi.n	802326a <__ieee754_sqrtf+0x5e>
 8023268:	005b      	lsls	r3, r3, #1
 802326a:	2400      	movs	r4, #0
 802326c:	2180      	movs	r1, #128	@ 0x80
 802326e:	2019      	movs	r0, #25
 8023270:	0026      	movs	r6, r4
 8023272:	107f      	asrs	r7, r7, #1
 8023274:	005b      	lsls	r3, r3, #1
 8023276:	0449      	lsls	r1, r1, #17
 8023278:	1875      	adds	r5, r6, r1
 802327a:	001a      	movs	r2, r3
 802327c:	429d      	cmp	r5, r3
 802327e:	dc02      	bgt.n	8023286 <__ieee754_sqrtf+0x7a>
 8023280:	186e      	adds	r6, r5, r1
 8023282:	1b5a      	subs	r2, r3, r5
 8023284:	1864      	adds	r4, r4, r1
 8023286:	3801      	subs	r0, #1
 8023288:	0053      	lsls	r3, r2, #1
 802328a:	0849      	lsrs	r1, r1, #1
 802328c:	2800      	cmp	r0, #0
 802328e:	d1f3      	bne.n	8023278 <__ieee754_sqrtf+0x6c>
 8023290:	2a00      	cmp	r2, #0
 8023292:	d019      	beq.n	80232c8 <__ieee754_sqrtf+0xbc>
 8023294:	4d17      	ldr	r5, [pc, #92]	@ (80232f4 <__ieee754_sqrtf+0xe8>)
 8023296:	4e18      	ldr	r6, [pc, #96]	@ (80232f8 <__ieee754_sqrtf+0xec>)
 8023298:	6828      	ldr	r0, [r5, #0]
 802329a:	6831      	ldr	r1, [r6, #0]
 802329c:	682b      	ldr	r3, [r5, #0]
 802329e:	9301      	str	r3, [sp, #4]
 80232a0:	f7dd ffbc 	bl	800121c <__aeabi_fsub>
 80232a4:	1c01      	adds	r1, r0, #0
 80232a6:	9801      	ldr	r0, [sp, #4]
 80232a8:	f7dd f94c 	bl	8000544 <__aeabi_fcmple>
 80232ac:	2800      	cmp	r0, #0
 80232ae:	d00b      	beq.n	80232c8 <__ieee754_sqrtf+0xbc>
 80232b0:	6828      	ldr	r0, [r5, #0]
 80232b2:	6831      	ldr	r1, [r6, #0]
 80232b4:	f7dd fb04 	bl	80008c0 <__aeabi_fadd>
 80232b8:	682d      	ldr	r5, [r5, #0]
 80232ba:	1c01      	adds	r1, r0, #0
 80232bc:	1c28      	adds	r0, r5, #0
 80232be:	f7dd f937 	bl	8000530 <__aeabi_fcmplt>
 80232c2:	2800      	cmp	r0, #0
 80232c4:	d011      	beq.n	80232ea <__ieee754_sqrtf+0xde>
 80232c6:	3402      	adds	r4, #2
 80232c8:	23fc      	movs	r3, #252	@ 0xfc
 80232ca:	1064      	asrs	r4, r4, #1
 80232cc:	059b      	lsls	r3, r3, #22
 80232ce:	18e3      	adds	r3, r4, r3
 80232d0:	05fc      	lsls	r4, r7, #23
 80232d2:	18e4      	adds	r4, r4, r3
 80232d4:	e7ac      	b.n	8023230 <__ieee754_sqrtf+0x24>
 80232d6:	005b      	lsls	r3, r3, #1
 80232d8:	3201      	adds	r2, #1
 80232da:	4203      	tst	r3, r0
 80232dc:	d0fb      	beq.n	80232d6 <__ieee754_sqrtf+0xca>
 80232de:	3a01      	subs	r2, #1
 80232e0:	1a89      	subs	r1, r1, r2
 80232e2:	e7b8      	b.n	8023256 <__ieee754_sqrtf+0x4a>
 80232e4:	2080      	movs	r0, #128	@ 0x80
 80232e6:	0400      	lsls	r0, r0, #16
 80232e8:	e7f7      	b.n	80232da <__ieee754_sqrtf+0xce>
 80232ea:	2301      	movs	r3, #1
 80232ec:	3401      	adds	r4, #1
 80232ee:	439c      	bics	r4, r3
 80232f0:	e7ea      	b.n	80232c8 <__ieee754_sqrtf+0xbc>
 80232f2:	46c0      	nop			@ (mov r8, r8)
 80232f4:	20000424 	.word	0x20000424
 80232f8:	20000420 	.word	0x20000420

080232fc <roundf>:
 80232fc:	0dc3      	lsrs	r3, r0, #23
 80232fe:	b2db      	uxtb	r3, r3
 8023300:	3b7f      	subs	r3, #127	@ 0x7f
 8023302:	0002      	movs	r2, r0
 8023304:	b510      	push	{r4, lr}
 8023306:	2b16      	cmp	r3, #22
 8023308:	dc13      	bgt.n	8023332 <roundf+0x36>
 802330a:	2b00      	cmp	r3, #0
 802330c:	da07      	bge.n	802331e <roundf+0x22>
 802330e:	0fc2      	lsrs	r2, r0, #31
 8023310:	07d0      	lsls	r0, r2, #31
 8023312:	3301      	adds	r3, #1
 8023314:	d102      	bne.n	802331c <roundf+0x20>
 8023316:	23fe      	movs	r3, #254	@ 0xfe
 8023318:	059b      	lsls	r3, r3, #22
 802331a:	4318      	orrs	r0, r3
 802331c:	bd10      	pop	{r4, pc}
 802331e:	4908      	ldr	r1, [pc, #32]	@ (8023340 <roundf+0x44>)
 8023320:	4119      	asrs	r1, r3
 8023322:	4208      	tst	r0, r1
 8023324:	d0fa      	beq.n	802331c <roundf+0x20>
 8023326:	2080      	movs	r0, #128	@ 0x80
 8023328:	03c0      	lsls	r0, r0, #15
 802332a:	4118      	asrs	r0, r3
 802332c:	1880      	adds	r0, r0, r2
 802332e:	4388      	bics	r0, r1
 8023330:	e7f4      	b.n	802331c <roundf+0x20>
 8023332:	2b80      	cmp	r3, #128	@ 0x80
 8023334:	d1f2      	bne.n	802331c <roundf+0x20>
 8023336:	1c01      	adds	r1, r0, #0
 8023338:	f7dd fac2 	bl	80008c0 <__aeabi_fadd>
 802333c:	e7ee      	b.n	802331c <roundf+0x20>
 802333e:	46c0      	nop			@ (mov r8, r8)
 8023340:	007fffff 	.word	0x007fffff

08023344 <__ieee754_expf>:
 8023344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023346:	21ff      	movs	r1, #255	@ 0xff
 8023348:	0043      	lsls	r3, r0, #1
 802334a:	1c04      	adds	r4, r0, #0
 802334c:	085b      	lsrs	r3, r3, #1
 802334e:	05c9      	lsls	r1, r1, #23
 8023350:	428b      	cmp	r3, r1
 8023352:	d904      	bls.n	802335e <__ieee754_expf+0x1a>
 8023354:	1c01      	adds	r1, r0, #0
 8023356:	1c20      	adds	r0, r4, #0
 8023358:	f7dd fab2 	bl	80008c0 <__aeabi_fadd>
 802335c:	e00d      	b.n	802337a <__ieee754_expf+0x36>
 802335e:	0fc6      	lsrs	r6, r0, #31
 8023360:	428b      	cmp	r3, r1
 8023362:	d104      	bne.n	802336e <__ieee754_expf+0x2a>
 8023364:	2e00      	cmp	r6, #0
 8023366:	d000      	beq.n	802336a <__ieee754_expf+0x26>
 8023368:	e0ba      	b.n	80234e0 <__ieee754_expf+0x19c>
 802336a:	1c20      	adds	r0, r4, #0
 802336c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802336e:	495d      	ldr	r1, [pc, #372]	@ (80234e4 <__ieee754_expf+0x1a0>)
 8023370:	4288      	cmp	r0, r1
 8023372:	dd04      	ble.n	802337e <__ieee754_expf+0x3a>
 8023374:	2000      	movs	r0, #0
 8023376:	f000 f8f1 	bl	802355c <__math_oflowf>
 802337a:	1c04      	adds	r4, r0, #0
 802337c:	e7f5      	b.n	802336a <__ieee754_expf+0x26>
 802337e:	2800      	cmp	r0, #0
 8023380:	da06      	bge.n	8023390 <__ieee754_expf+0x4c>
 8023382:	4a59      	ldr	r2, [pc, #356]	@ (80234e8 <__ieee754_expf+0x1a4>)
 8023384:	4293      	cmp	r3, r2
 8023386:	d903      	bls.n	8023390 <__ieee754_expf+0x4c>
 8023388:	2000      	movs	r0, #0
 802338a:	f000 f8e1 	bl	8023550 <__math_uflowf>
 802338e:	e7f4      	b.n	802337a <__ieee754_expf+0x36>
 8023390:	4a56      	ldr	r2, [pc, #344]	@ (80234ec <__ieee754_expf+0x1a8>)
 8023392:	4293      	cmp	r3, r2
 8023394:	d96e      	bls.n	8023474 <__ieee754_expf+0x130>
 8023396:	4a56      	ldr	r2, [pc, #344]	@ (80234f0 <__ieee754_expf+0x1ac>)
 8023398:	00b5      	lsls	r5, r6, #2
 802339a:	4293      	cmp	r3, r2
 802339c:	d84e      	bhi.n	802343c <__ieee754_expf+0xf8>
 802339e:	4b55      	ldr	r3, [pc, #340]	@ (80234f4 <__ieee754_expf+0x1b0>)
 80233a0:	1c20      	adds	r0, r4, #0
 80233a2:	5959      	ldr	r1, [r3, r5]
 80233a4:	f7dd ff3a 	bl	800121c <__aeabi_fsub>
 80233a8:	4b53      	ldr	r3, [pc, #332]	@ (80234f8 <__ieee754_expf+0x1b4>)
 80233aa:	1c07      	adds	r7, r0, #0
 80233ac:	595b      	ldr	r3, [r3, r5]
 80233ae:	2501      	movs	r5, #1
 80233b0:	1bad      	subs	r5, r5, r6
 80233b2:	9300      	str	r3, [sp, #0]
 80233b4:	1bad      	subs	r5, r5, r6
 80233b6:	9900      	ldr	r1, [sp, #0]
 80233b8:	1c38      	adds	r0, r7, #0
 80233ba:	f7dd ff2f 	bl	800121c <__aeabi_fsub>
 80233be:	1c04      	adds	r4, r0, #0
 80233c0:	1c21      	adds	r1, r4, #0
 80233c2:	1c20      	adds	r0, r4, #0
 80233c4:	f7dd fdec 	bl	8000fa0 <__aeabi_fmul>
 80233c8:	494c      	ldr	r1, [pc, #304]	@ (80234fc <__ieee754_expf+0x1b8>)
 80233ca:	1c06      	adds	r6, r0, #0
 80233cc:	f7dd fde8 	bl	8000fa0 <__aeabi_fmul>
 80233d0:	494b      	ldr	r1, [pc, #300]	@ (8023500 <__ieee754_expf+0x1bc>)
 80233d2:	f7dd ff23 	bl	800121c <__aeabi_fsub>
 80233d6:	1c31      	adds	r1, r6, #0
 80233d8:	f7dd fde2 	bl	8000fa0 <__aeabi_fmul>
 80233dc:	4949      	ldr	r1, [pc, #292]	@ (8023504 <__ieee754_expf+0x1c0>)
 80233de:	f7dd fa6f 	bl	80008c0 <__aeabi_fadd>
 80233e2:	1c31      	adds	r1, r6, #0
 80233e4:	f7dd fddc 	bl	8000fa0 <__aeabi_fmul>
 80233e8:	4947      	ldr	r1, [pc, #284]	@ (8023508 <__ieee754_expf+0x1c4>)
 80233ea:	f7dd ff17 	bl	800121c <__aeabi_fsub>
 80233ee:	1c31      	adds	r1, r6, #0
 80233f0:	f7dd fdd6 	bl	8000fa0 <__aeabi_fmul>
 80233f4:	4945      	ldr	r1, [pc, #276]	@ (802350c <__ieee754_expf+0x1c8>)
 80233f6:	f7dd fa63 	bl	80008c0 <__aeabi_fadd>
 80233fa:	1c31      	adds	r1, r6, #0
 80233fc:	f7dd fdd0 	bl	8000fa0 <__aeabi_fmul>
 8023400:	1c01      	adds	r1, r0, #0
 8023402:	1c20      	adds	r0, r4, #0
 8023404:	f7dd ff0a 	bl	800121c <__aeabi_fsub>
 8023408:	1c01      	adds	r1, r0, #0
 802340a:	1c06      	adds	r6, r0, #0
 802340c:	1c20      	adds	r0, r4, #0
 802340e:	f7dd fdc7 	bl	8000fa0 <__aeabi_fmul>
 8023412:	9001      	str	r0, [sp, #4]
 8023414:	2d00      	cmp	r5, #0
 8023416:	d140      	bne.n	802349a <__ieee754_expf+0x156>
 8023418:	2180      	movs	r1, #128	@ 0x80
 802341a:	1c30      	adds	r0, r6, #0
 802341c:	05c9      	lsls	r1, r1, #23
 802341e:	f7dd fefd 	bl	800121c <__aeabi_fsub>
 8023422:	1c01      	adds	r1, r0, #0
 8023424:	9801      	ldr	r0, [sp, #4]
 8023426:	f7dd fbd5 	bl	8000bd4 <__aeabi_fdiv>
 802342a:	1c21      	adds	r1, r4, #0
 802342c:	f7dd fef6 	bl	800121c <__aeabi_fsub>
 8023430:	1c01      	adds	r1, r0, #0
 8023432:	20fe      	movs	r0, #254	@ 0xfe
 8023434:	0580      	lsls	r0, r0, #22
 8023436:	f7dd fef1 	bl	800121c <__aeabi_fsub>
 802343a:	e79e      	b.n	802337a <__ieee754_expf+0x36>
 802343c:	4934      	ldr	r1, [pc, #208]	@ (8023510 <__ieee754_expf+0x1cc>)
 802343e:	1c20      	adds	r0, r4, #0
 8023440:	f7dd fdae 	bl	8000fa0 <__aeabi_fmul>
 8023444:	4b33      	ldr	r3, [pc, #204]	@ (8023514 <__ieee754_expf+0x1d0>)
 8023446:	5959      	ldr	r1, [r3, r5]
 8023448:	f7dd fa3a 	bl	80008c0 <__aeabi_fadd>
 802344c:	f7de f8a0 	bl	8001590 <__aeabi_f2iz>
 8023450:	0005      	movs	r5, r0
 8023452:	f7de f8bd 	bl	80015d0 <__aeabi_i2f>
 8023456:	4930      	ldr	r1, [pc, #192]	@ (8023518 <__ieee754_expf+0x1d4>)
 8023458:	1c06      	adds	r6, r0, #0
 802345a:	f7dd fda1 	bl	8000fa0 <__aeabi_fmul>
 802345e:	1c01      	adds	r1, r0, #0
 8023460:	1c20      	adds	r0, r4, #0
 8023462:	f7dd fedb 	bl	800121c <__aeabi_fsub>
 8023466:	492d      	ldr	r1, [pc, #180]	@ (802351c <__ieee754_expf+0x1d8>)
 8023468:	1c07      	adds	r7, r0, #0
 802346a:	1c30      	adds	r0, r6, #0
 802346c:	f7dd fd98 	bl	8000fa0 <__aeabi_fmul>
 8023470:	9000      	str	r0, [sp, #0]
 8023472:	e7a0      	b.n	80233b6 <__ieee754_expf+0x72>
 8023474:	22d0      	movs	r2, #208	@ 0xd0
 8023476:	0592      	lsls	r2, r2, #22
 8023478:	4293      	cmp	r3, r2
 802347a:	d20c      	bcs.n	8023496 <__ieee754_expf+0x152>
 802347c:	4928      	ldr	r1, [pc, #160]	@ (8023520 <__ieee754_expf+0x1dc>)
 802347e:	1c20      	adds	r0, r4, #0
 8023480:	f7dd fa1e 	bl	80008c0 <__aeabi_fadd>
 8023484:	21fe      	movs	r1, #254	@ 0xfe
 8023486:	0589      	lsls	r1, r1, #22
 8023488:	f7dd f866 	bl	8000558 <__aeabi_fcmpgt>
 802348c:	1e05      	subs	r5, r0, #0
 802348e:	d097      	beq.n	80233c0 <__ieee754_expf+0x7c>
 8023490:	21fe      	movs	r1, #254	@ 0xfe
 8023492:	0589      	lsls	r1, r1, #22
 8023494:	e75f      	b.n	8023356 <__ieee754_expf+0x12>
 8023496:	2500      	movs	r5, #0
 8023498:	e792      	b.n	80233c0 <__ieee754_expf+0x7c>
 802349a:	2080      	movs	r0, #128	@ 0x80
 802349c:	1c31      	adds	r1, r6, #0
 802349e:	05c0      	lsls	r0, r0, #23
 80234a0:	f7dd febc 	bl	800121c <__aeabi_fsub>
 80234a4:	1c01      	adds	r1, r0, #0
 80234a6:	9801      	ldr	r0, [sp, #4]
 80234a8:	f7dd fb94 	bl	8000bd4 <__aeabi_fdiv>
 80234ac:	1c01      	adds	r1, r0, #0
 80234ae:	9800      	ldr	r0, [sp, #0]
 80234b0:	f7dd feb4 	bl	800121c <__aeabi_fsub>
 80234b4:	1c39      	adds	r1, r7, #0
 80234b6:	f7dd feb1 	bl	800121c <__aeabi_fsub>
 80234ba:	1c01      	adds	r1, r0, #0
 80234bc:	20fe      	movs	r0, #254	@ 0xfe
 80234be:	0580      	lsls	r0, r0, #22
 80234c0:	f7dd feac 	bl	800121c <__aeabi_fsub>
 80234c4:	002b      	movs	r3, r5
 80234c6:	337d      	adds	r3, #125	@ 0x7d
 80234c8:	db02      	blt.n	80234d0 <__ieee754_expf+0x18c>
 80234ca:	05ec      	lsls	r4, r5, #23
 80234cc:	1824      	adds	r4, r4, r0
 80234ce:	e74c      	b.n	802336a <__ieee754_expf+0x26>
 80234d0:	21d8      	movs	r1, #216	@ 0xd8
 80234d2:	3564      	adds	r5, #100	@ 0x64
 80234d4:	05ed      	lsls	r5, r5, #23
 80234d6:	1828      	adds	r0, r5, r0
 80234d8:	0509      	lsls	r1, r1, #20
 80234da:	f7dd fd61 	bl	8000fa0 <__aeabi_fmul>
 80234de:	e74c      	b.n	802337a <__ieee754_expf+0x36>
 80234e0:	2400      	movs	r4, #0
 80234e2:	e742      	b.n	802336a <__ieee754_expf+0x26>
 80234e4:	42b17217 	.word	0x42b17217
 80234e8:	42cff1b5 	.word	0x42cff1b5
 80234ec:	3eb17218 	.word	0x3eb17218
 80234f0:	3f851591 	.word	0x3f851591
 80234f4:	080266a0 	.word	0x080266a0
 80234f8:	08026698 	.word	0x08026698
 80234fc:	3331bb4c 	.word	0x3331bb4c
 8023500:	35ddea0e 	.word	0x35ddea0e
 8023504:	388ab355 	.word	0x388ab355
 8023508:	3b360b61 	.word	0x3b360b61
 802350c:	3e2aaaab 	.word	0x3e2aaaab
 8023510:	3fb8aa3b 	.word	0x3fb8aa3b
 8023514:	080266a8 	.word	0x080266a8
 8023518:	3f317180 	.word	0x3f317180
 802351c:	3717f7d1 	.word	0x3717f7d1
 8023520:	7149f2ca 	.word	0x7149f2ca

08023524 <with_errnof>:
 8023524:	b570      	push	{r4, r5, r6, lr}
 8023526:	000d      	movs	r5, r1
 8023528:	1c04      	adds	r4, r0, #0
 802352a:	f7fd f923 	bl	8020774 <__errno>
 802352e:	6005      	str	r5, [r0, #0]
 8023530:	1c20      	adds	r0, r4, #0
 8023532:	bd70      	pop	{r4, r5, r6, pc}

08023534 <xflowf>:
 8023534:	b510      	push	{r4, lr}
 8023536:	1c0b      	adds	r3, r1, #0
 8023538:	2800      	cmp	r0, #0
 802353a:	d002      	beq.n	8023542 <xflowf+0xe>
 802353c:	2380      	movs	r3, #128	@ 0x80
 802353e:	061b      	lsls	r3, r3, #24
 8023540:	18cb      	adds	r3, r1, r3
 8023542:	1c18      	adds	r0, r3, #0
 8023544:	f7dd fd2c 	bl	8000fa0 <__aeabi_fmul>
 8023548:	2122      	movs	r1, #34	@ 0x22
 802354a:	f7ff ffeb 	bl	8023524 <with_errnof>
 802354e:	bd10      	pop	{r4, pc}

08023550 <__math_uflowf>:
 8023550:	2180      	movs	r1, #128	@ 0x80
 8023552:	b510      	push	{r4, lr}
 8023554:	0549      	lsls	r1, r1, #21
 8023556:	f7ff ffed 	bl	8023534 <xflowf>
 802355a:	bd10      	pop	{r4, pc}

0802355c <__math_oflowf>:
 802355c:	21e0      	movs	r1, #224	@ 0xe0
 802355e:	b510      	push	{r4, lr}
 8023560:	05c9      	lsls	r1, r1, #23
 8023562:	f7ff ffe7 	bl	8023534 <xflowf>
 8023566:	bd10      	pop	{r4, pc}

08023568 <_init>:
 8023568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802356a:	46c0      	nop			@ (mov r8, r8)
 802356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802356e:	bc08      	pop	{r3}
 8023570:	469e      	mov	lr, r3
 8023572:	4770      	bx	lr

08023574 <_fini>:
 8023574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023576:	46c0      	nop			@ (mov r8, r8)
 8023578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802357a:	bc08      	pop	{r3}
 802357c:	469e      	mov	lr, r3
 802357e:	4770      	bx	lr
