
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000296ac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ce8  08029770  08029770  0002a770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e458  0802e458  00030430  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802e458  0802e458  0002f458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e460  0802e460  00030430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e460  0802e460  0002f460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802e464  0802e464  0002f464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000430  20000000  0802e468  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031f8  20000430  0802e898  00030430  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003628  0802e898  00030628  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036a0e  00000000  00000000  00030458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009cf9  00000000  00000000  00066e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002da0  00000000  00000000  00070b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021fb  00000000  00000000  00073900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242dc  00000000  00000000  00075afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046291  00000000  00000000  00099dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3116  00000000  00000000  000e0068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0018317e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bba4  00000000  00000000  00183230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018edd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018ee41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  001913bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000430 	.word	0x20000430
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08029754 	.word	0x08029754

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000434 	.word	0x20000434
 8000104:	08029754 	.word	0x08029754

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802d55c 	.word	0x0802d55c
 8000ec8:	0802d59c 	.word	0x0802d59c
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802d5d8 	.word	0x0802d5d8
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	2000045c 	.word	0x2000045c
 8003ad8:	2000048c 	.word	0x2000048c

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000458 	.word	0x20000458
 8003b38:	2000048c 	.word	0x2000048c

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000454 	.word	0x20000454

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f00f ffe6 	bl	8013b28 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	20000450 	.word	0x20000450

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000458 	.word	0x20000458
 8003b98:	2000045c 	.word	0x2000045c

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f00f ffbd 	bl	8013b3c <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f00f fa35 	bl	80130a8 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	2000044c 	.word	0x2000044c
 8003c80:	08029770 	.word	0x08029770
 8003c84:	0802977c 	.word	0x0802977c
 8003c88:	08029780 	.word	0x08029780
 8003c8c:	0802978c 	.word	0x0802978c
 8003c90:	080297ac 	.word	0x080297ac
 8003c94:	2000048c 	.word	0x2000048c

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f00f ff42 	bl	8013b3c <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f00f ff2e 	bl	8013b3c <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f00f f9c1 	bl	80130a8 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f00f ff08 	bl	8013b3c <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000494 	.word	0x20000494
 8003d40:	20000495 	.word	0x20000495
 8003d44:	2000044c 	.word	0x2000044c
 8003d48:	080297b0 	.word	0x080297b0
 8003d4c:	0802977c 	.word	0x0802977c
 8003d50:	080297b4 	.word	0x080297b4
 8003d54:	080297ac 	.word	0x080297ac

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f00f feea 	bl	8013b3c <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f00f fede 	bl	8013b3c <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f00f f963 	bl	80130a8 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f00f feaa 	bl	8013b3c <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	2000048c 	.word	0x2000048c
 8003e00:	2000044c 	.word	0x2000044c
 8003e04:	080297e0 	.word	0x080297e0
 8003e08:	080297ac 	.word	0x080297ac

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f00f fe77 	bl	8013b3c <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	2000048c 	.word	0x2000048c

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f f8f0 	bl	80130a8 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f f8b1 	bl	80130a8 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	2000048c 	.word	0x2000048c
 8003f58:	080297fc 	.word	0x080297fc
 8003f5c:	0802981c 	.word	0x0802981c
 8003f60:	2000044c 	.word	0x2000044c
 8003f64:	08029820 	.word	0x08029820
 8003f68:	080297ac 	.word	0x080297ac

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f f88a 	bl	80130a8 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2000044c 	.word	0x2000044c
 8003fa4:	08029854 	.word	0x08029854
 8003fa8:	080297ac 	.word	0x080297ac

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f f86a 	bl	80130a8 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f00f fdad 	bl	8013b3c <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f00f fd9c 	bl	8013b3c <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	2000044c 	.word	0x2000044c
 8004094:	08029868 	.word	0x08029868
 8004098:	080297ac 	.word	0x080297ac
 800409c:	20000484 	.word	0x20000484
 80040a0:	2000048c 	.word	0x2000048c

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00e ffee 	bl	80130a8 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f00f fd31 	bl	8013b3c <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f024 f853 	bl	80281e0 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f024 f82f 	bl	80281e0 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f024 f80b 	bl	80281e0 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f023 ffe7 	bl	80281e0 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f023 ffbd 	bl	80281e0 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f023 ff99 	bl	80281e0 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f023 ff75 	bl	80281e0 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f023 ff51 	bl	80281e0 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	2000044c 	.word	0x2000044c
 8004378:	08029884 	.word	0x08029884
 800437c:	080297ac 	.word	0x080297ac
 8004380:	20000460 	.word	0x20000460

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bc8      	ldr	r3, [pc, #800]	@ (8004780 <ENS_Upkeep+0x328>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00e fdca 	bl	8012ffc <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc3      	ldr	r3, [pc, #780]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e21c      	b.n	80048b6 <ENS_Upkeep+0x45e>
  }
  switch(ENSState) {
 800447c:	4bc1      	ldr	r3, [pc, #772]	@ (8004784 <ENS_Upkeep+0x32c>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e200      	b.n	8004888 <ENS_Upkeep+0x430>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bbf      	ldr	r3, [pc, #764]	@ (8004788 <ENS_Upkeep+0x330>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4abe      	ldr	r2, [pc, #760]	@ (800478c <ENS_Upkeep+0x334>)
 8004492:	4bbf      	ldr	r3, [pc, #764]	@ (8004790 <ENS_Upkeep+0x338>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00e fe06 	bl	80130a8 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800449c:	f00f fb44 	bl	8013b28 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4abc      	ldr	r2, [pc, #752]	@ (8004794 <ENS_Upkeep+0x33c>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bb6      	ldr	r3, [pc, #728]	@ (8004780 <ENS_Upkeep+0x328>)
 80044a8:	601a      	str	r2, [r3, #0]
    break;
 80044aa:	e202      	b.n	80048b2 <ENS_Upkeep+0x45a>


  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044ac:	f008 feb2 	bl	800d214 <getSensorLock>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d000      	beq.n	80044b6 <ENS_Upkeep+0x5e>
 80044b4:	e1f4      	b.n	80048a0 <ENS_Upkeep+0x448>
      break;
    }
    setSensorLock(ENS160);
 80044b6:	2004      	movs	r0, #4
 80044b8:	f008 fe98 	bl	800d1ec <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044bc:	1d3c      	adds	r4, r7, #4
 80044be:	2002      	movs	r0, #2
 80044c0:	f7ff fca4 	bl	8003e0c <ENS160_setMode>
 80044c4:	0003      	movs	r3, r0
 80044c6:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <ENS_Upkeep+0x7c>
 80044d0:	4bb1      	ldr	r3, [pc, #708]	@ (8004798 <ENS_Upkeep+0x340>)
 80044d2:	e000      	b.n	80044d6 <ENS_Upkeep+0x7e>
 80044d4:	4bb1      	ldr	r3, [pc, #708]	@ (800479c <ENS_Upkeep+0x344>)
 80044d6:	4ab2      	ldr	r2, [pc, #712]	@ (80047a0 <ENS_Upkeep+0x348>)
 80044d8:	49ad      	ldr	r1, [pc, #692]	@ (8004790 <ENS_Upkeep+0x338>)
 80044da:	2003      	movs	r0, #3
 80044dc:	f00e fde4 	bl	80130a8 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044e0:	200a      	movs	r0, #10
 80044e2:	f00f fb2b 	bl	8013b3c <HAL_Delay>
    setSensorLock(FREE);
 80044e6:	2000      	movs	r0, #0
 80044e8:	f008 fe80 	bl	800d1ec <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 80044ec:	4ba5      	ldr	r3, [pc, #660]	@ (8004784 <ENS_Upkeep+0x32c>)
 80044ee:	2203      	movs	r2, #3
 80044f0:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80044f2:	f00f fb19 	bl	8013b28 <HAL_GetTick>
 80044f6:	0003      	movs	r3, r0
 80044f8:	22fa      	movs	r2, #250	@ 0xfa
 80044fa:	0092      	lsls	r2, r2, #2
 80044fc:	189a      	adds	r2, r3, r2
 80044fe:	4ba0      	ldr	r3, [pc, #640]	@ (8004780 <ENS_Upkeep+0x328>)
 8004500:	601a      	str	r2, [r3, #0]
    break;
 8004502:	e1d6      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004504:	f008 fe86 	bl	800d214 <getSensorLock>
 8004508:	1e03      	subs	r3, r0, #0
 800450a:	d000      	beq.n	800450e <ENS_Upkeep+0xb6>
 800450c:	e1ca      	b.n	80048a4 <ENS_Upkeep+0x44c>
      break;
    }
    setSensorLock(ENS160);
 800450e:	2004      	movs	r0, #4
 8004510:	f008 fe6c 	bl	800d1ec <setSensorLock>
    status = ENS160_readStatus();
 8004514:	1d7c      	adds	r4, r7, #5
 8004516:	f7ff fd29 	bl	8003f6c <ENS160_readStatus>
 800451a:	0003      	movs	r3, r0
 800451c:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 800451e:	200a      	movs	r0, #10
 8004520:	f00f fb0c 	bl	8013b3c <HAL_Delay>
    setSensorLock(FREE);
 8004524:	2000      	movs	r0, #0
 8004526:	f008 fe61 	bl	800d1ec <setSensorLock>
    if ((status & 0x0C) != 0) {
 800452a:	1d7b      	adds	r3, r7, #5
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	220c      	movs	r2, #12
 8004530:	4013      	ands	r3, r2
 8004532:	d02e      	beq.n	8004592 <ENS_Upkeep+0x13a>
      switch (status >> 2) {
 8004534:	1d7b      	adds	r3, r7, #5
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d013      	beq.n	8004568 <ENS_Upkeep+0x110>
 8004540:	dc19      	bgt.n	8004576 <ENS_Upkeep+0x11e>
 8004542:	2b01      	cmp	r3, #1
 8004544:	d002      	beq.n	800454c <ENS_Upkeep+0xf4>
 8004546:	2b02      	cmp	r3, #2
 8004548:	d007      	beq.n	800455a <ENS_Upkeep+0x102>
 800454a:	e014      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 1:
        Debug("ENS160 Warm-Up phase");
 800454c:	4a95      	ldr	r2, [pc, #596]	@ (80047a4 <ENS_Upkeep+0x34c>)
 800454e:	4b90      	ldr	r3, [pc, #576]	@ (8004790 <ENS_Upkeep+0x338>)
 8004550:	0019      	movs	r1, r3
 8004552:	2003      	movs	r0, #3
 8004554:	f00e fda8 	bl	80130a8 <CreateLine>
        break;
 8004558:	e00d      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800455a:	4a93      	ldr	r2, [pc, #588]	@ (80047a8 <ENS_Upkeep+0x350>)
 800455c:	4b8c      	ldr	r3, [pc, #560]	@ (8004790 <ENS_Upkeep+0x338>)
 800455e:	0019      	movs	r1, r3
 8004560:	2003      	movs	r0, #3
 8004562:	f00e fda1 	bl	80130a8 <CreateLine>
        break;
 8004566:	e006      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 3:
        Debug("ENS160 Invalid output");
 8004568:	4a90      	ldr	r2, [pc, #576]	@ (80047ac <ENS_Upkeep+0x354>)
 800456a:	4b89      	ldr	r3, [pc, #548]	@ (8004790 <ENS_Upkeep+0x338>)
 800456c:	0019      	movs	r1, r3
 800456e:	2003      	movs	r0, #3
 8004570:	f00e fd9a 	bl	80130a8 <CreateLine>
        break;
 8004574:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 8004576:	1d7b      	adds	r3, r7, #5
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2203      	movs	r2, #3
 800457c:	4013      	ands	r3, r2
 800457e:	d108      	bne.n	8004592 <ENS_Upkeep+0x13a>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004580:	f00f fad2 	bl	8013b28 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	22fa      	movs	r2, #250	@ 0xfa
 8004588:	0092      	lsls	r2, r2, #2
 800458a:	189a      	adds	r2, r3, r2
 800458c:	4b7c      	ldr	r3, [pc, #496]	@ (8004780 <ENS_Upkeep+0x328>)
 800458e:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 8004590:	e18f      	b.n	80048b2 <ENS_Upkeep+0x45a>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 8004592:	4b7c      	ldr	r3, [pc, #496]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004594:	2204      	movs	r2, #4
 8004596:	701a      	strb	r2, [r3, #0]
    break;
 8004598:	e18b      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 800459a:	f008 fe3b 	bl	800d214 <getSensorLock>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d036      	beq.n	8004610 <ENS_Upkeep+0x1b8>
 80045a2:	f008 fe37 	bl	800d214 <getSensorLock>
 80045a6:	0003      	movs	r3, r0
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d031      	beq.n	8004610 <ENS_Upkeep+0x1b8>
      uint8_t locktype = getSensorLock();
 80045ac:	1dbc      	adds	r4, r7, #6
 80045ae:	f008 fe31 	bl	800d214 <getSensorLock>
 80045b2:	0003      	movs	r3, r0
 80045b4:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045b6:	1dbb      	adds	r3, r7, #6
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d019      	beq.n	80045f2 <ENS_Upkeep+0x19a>
 80045be:	1dbb      	adds	r3, r7, #6
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d013      	beq.n	80045ee <ENS_Upkeep+0x196>
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d00d      	beq.n	80045ea <ENS_Upkeep+0x192>
 80045ce:	1dbb      	adds	r3, r7, #6
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d007      	beq.n	80045e6 <ENS_Upkeep+0x18e>
 80045d6:	1dbb      	adds	r3, r7, #6
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d101      	bne.n	80045e2 <ENS_Upkeep+0x18a>
 80045de:	4b74      	ldr	r3, [pc, #464]	@ (80047b0 <ENS_Upkeep+0x358>)
 80045e0:	e008      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045e2:	4b74      	ldr	r3, [pc, #464]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80045e4:	e006      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045e6:	4b74      	ldr	r3, [pc, #464]	@ (80047b8 <ENS_Upkeep+0x360>)
 80045e8:	e004      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045ea:	4b74      	ldr	r3, [pc, #464]	@ (80047bc <ENS_Upkeep+0x364>)
 80045ec:	e002      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045ee:	4b74      	ldr	r3, [pc, #464]	@ (80047c0 <ENS_Upkeep+0x368>)
 80045f0:	e000      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045f2:	4b74      	ldr	r3, [pc, #464]	@ (80047c4 <ENS_Upkeep+0x36c>)
 80045f4:	4a74      	ldr	r2, [pc, #464]	@ (80047c8 <ENS_Upkeep+0x370>)
 80045f6:	4966      	ldr	r1, [pc, #408]	@ (8004790 <ENS_Upkeep+0x338>)
 80045f8:	2003      	movs	r0, #3
 80045fa:	f00e fd55 	bl	80130a8 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 80045fe:	f00f fa93 	bl	8013b28 <HAL_GetTick>
 8004602:	0003      	movs	r3, r0
 8004604:	334e      	adds	r3, #78	@ 0x4e
 8004606:	33ff      	adds	r3, #255	@ 0xff
 8004608:	001a      	movs	r2, r3
 800460a:	4b5d      	ldr	r3, [pc, #372]	@ (8004780 <ENS_Upkeep+0x328>)
 800460c:	601a      	str	r2, [r3, #0]
      break;
 800460e:	e150      	b.n	80048b2 <ENS_Upkeep+0x45a>
    }
    setSensorLock(ENS160);
 8004610:	2004      	movs	r0, #4
 8004612:	f008 fdeb 	bl	800d1ec <setSensorLock>
    status = ENS160_readStatus();
 8004616:	1d7c      	adds	r4, r7, #5
 8004618:	f7ff fca8 	bl	8003f6c <ENS160_readStatus>
 800461c:	0003      	movs	r3, r0
 800461e:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004620:	1d7b      	adds	r3, r7, #5
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2202      	movs	r2, #2
 8004626:	4013      	ands	r3, r2
 8004628:	d10e      	bne.n	8004648 <ENS_Upkeep+0x1f0>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800462a:	f00f fa7d 	bl	8013b28 <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	33f5      	adds	r3, #245	@ 0xf5
 8004632:	33ff      	adds	r3, #255	@ 0xff
 8004634:	001a      	movs	r2, r3
 8004636:	4b52      	ldr	r3, [pc, #328]	@ (8004780 <ENS_Upkeep+0x328>)
 8004638:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800463a:	200a      	movs	r0, #10
 800463c:	f00f fa7e 	bl	8013b3c <HAL_Delay>
      setSensorLock(FREE);
 8004640:	2000      	movs	r0, #0
 8004642:	f008 fdd3 	bl	800d1ec <setSensorLock>
      break;
 8004646:	e134      	b.n	80048b2 <ENS_Upkeep+0x45a>
    }
    ENS160_measure(false);
 8004648:	2000      	movs	r0, #0
 800464a:	f7ff fcaf 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 800464e:	200a      	movs	r0, #10
 8004650:	f00f fa74 	bl	8013b3c <HAL_Delay>
    ENS160_measureRaw(false);
 8004654:	2000      	movs	r0, #0
 8004656:	f7ff fd25 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800465a:	200a      	movs	r0, #10
 800465c:	f00f fa6e 	bl	8013b3c <HAL_Delay>
    setSensorLock(FREE);
 8004660:	2000      	movs	r0, #0
 8004662:	f008 fdc3 	bl	800d1ec <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 8004666:	4b47      	ldr	r3, [pc, #284]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004668:	2206      	movs	r2, #6
 800466a:	701a      	strb	r2, [r3, #0]
    break;
 800466c:	e121      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 800466e:	4b57      	ldr	r3, [pc, #348]	@ (80047cc <ENS_Upkeep+0x374>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d13b      	bne.n	80046ee <ENS_Upkeep+0x296>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 8004676:	4b56      	ldr	r3, [pc, #344]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	001c      	movs	r4, r3
 800467c:	4b54      	ldr	r3, [pc, #336]	@ (80047d0 <ENS_Upkeep+0x378>)
 800467e:	885b      	ldrh	r3, [r3, #2]
 8004680:	0018      	movs	r0, r3
 8004682:	4b53      	ldr	r3, [pc, #332]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004684:	889b      	ldrh	r3, [r3, #4]
 8004686:	4a53      	ldr	r2, [pc, #332]	@ (80047d4 <ENS_Upkeep+0x37c>)
 8004688:	4953      	ldr	r1, [pc, #332]	@ (80047d8 <ENS_Upkeep+0x380>)
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	9000      	str	r0, [sp, #0]
 800468e:	0023      	movs	r3, r4
 8004690:	2002      	movs	r0, #2
 8004692:	f00e fd09 	bl	80130a8 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 8004696:	4b51      	ldr	r3, [pc, #324]	@ (80047dc <ENS_Upkeep+0x384>)
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	4b50      	ldr	r3, [pc, #320]	@ (80047dc <ENS_Upkeep+0x384>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4a50      	ldr	r2, [pc, #320]	@ (80047e0 <ENS_Upkeep+0x388>)
 80046a0:	494d      	ldr	r1, [pc, #308]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	0003      	movs	r3, r0
 80046a6:	2002      	movs	r0, #2
 80046a8:	f00e fcfe 	bl	80130a8 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 80046ac:	4b4b      	ldr	r3, [pc, #300]	@ (80047dc <ENS_Upkeep+0x384>)
 80046ae:	6898      	ldr	r0, [r3, #8]
 80046b0:	4b4a      	ldr	r3, [pc, #296]	@ (80047dc <ENS_Upkeep+0x384>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a4b      	ldr	r2, [pc, #300]	@ (80047e4 <ENS_Upkeep+0x38c>)
 80046b6:	4948      	ldr	r1, [pc, #288]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	0003      	movs	r3, r0
 80046bc:	2002      	movs	r0, #2
 80046be:	f00e fcf3 	bl	80130a8 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 80046c2:	4b46      	ldr	r3, [pc, #280]	@ (80047dc <ENS_Upkeep+0x384>)
 80046c4:	6918      	ldr	r0, [r3, #16]
 80046c6:	4b45      	ldr	r3, [pc, #276]	@ (80047dc <ENS_Upkeep+0x384>)
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	4a47      	ldr	r2, [pc, #284]	@ (80047e8 <ENS_Upkeep+0x390>)
 80046cc:	4942      	ldr	r1, [pc, #264]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	0003      	movs	r3, r0
 80046d2:	2002      	movs	r0, #2
 80046d4:	f00e fce8 	bl	80130a8 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 80046d8:	4b40      	ldr	r3, [pc, #256]	@ (80047dc <ENS_Upkeep+0x384>)
 80046da:	6998      	ldr	r0, [r3, #24]
 80046dc:	4b3f      	ldr	r3, [pc, #252]	@ (80047dc <ENS_Upkeep+0x384>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4a42      	ldr	r2, [pc, #264]	@ (80047ec <ENS_Upkeep+0x394>)
 80046e2:	493d      	ldr	r1, [pc, #244]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	0003      	movs	r3, r0
 80046e8:	2002      	movs	r0, #2
 80046ea:	f00e fcdd 	bl	80130a8 <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80046ee:	4b37      	ldr	r3, [pc, #220]	@ (80047cc <ENS_Upkeep+0x374>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d103      	bne.n	80046fe <ENS_Upkeep+0x2a6>
 80046f6:	4b35      	ldr	r3, [pc, #212]	@ (80047cc <ENS_Upkeep+0x374>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	e005      	b.n	800470a <ENS_Upkeep+0x2b2>
 80046fe:	4b33      	ldr	r3, [pc, #204]	@ (80047cc <ENS_Upkeep+0x374>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	4b31      	ldr	r3, [pc, #196]	@ (80047cc <ENS_Upkeep+0x374>)
 8004708:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800470a:	4b31      	ldr	r3, [pc, #196]	@ (80047d0 <ENS_Upkeep+0x378>)
 800470c:	7818      	ldrb	r0, [r3, #0]
 800470e:	4b30      	ldr	r3, [pc, #192]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004710:	8859      	ldrh	r1, [r3, #2]
 8004712:	4b2f      	ldr	r3, [pc, #188]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004714:	889b      	ldrh	r3, [r3, #4]
 8004716:	001a      	movs	r2, r3
 8004718:	f000 fa04 	bl	8004b24 <setENS160>
    ENSState = ENS_LOW_POWER;
 800471c:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <ENS_Upkeep+0x32c>)
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
    break;
 8004722:	e0c6      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004724:	f00f fa00 	bl	8013b28 <HAL_GetTick>
 8004728:	0003      	movs	r3, r0
 800472a:	22fa      	movs	r2, #250	@ 0xfa
 800472c:	0092      	lsls	r2, r2, #2
 800472e:	189a      	adds	r2, r3, r2
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <ENS_Upkeep+0x328>)
 8004732:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 8004734:	4b2e      	ldr	r3, [pc, #184]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	4053      	eors	r3, r2
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d071      	beq.n	8004826 <ENS_Upkeep+0x3ce>
 8004742:	4b2c      	ldr	r3, [pc, #176]	@ (80047f4 <ENS_Upkeep+0x39c>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2201      	movs	r2, #1
 8004748:	4053      	eors	r3, r2
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d06a      	beq.n	8004826 <ENS_Upkeep+0x3ce>
 8004750:	4b1e      	ldr	r3, [pc, #120]	@ (80047cc <ENS_Upkeep+0x374>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d966      	bls.n	8004826 <ENS_Upkeep+0x3ce>
      if (getSensorLock() != FREE) {
 8004758:	f008 fd5c 	bl	800d214 <getSensorLock>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d000      	beq.n	8004762 <ENS_Upkeep+0x30a>
 8004760:	e0a2      	b.n	80048a8 <ENS_Upkeep+0x450>
        break;
      }
      setSensorLock(ENS160);
 8004762:	2004      	movs	r0, #4
 8004764:	f008 fd42 	bl	800d1ec <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004768:	1cfc      	adds	r4, r7, #3
 800476a:	2000      	movs	r0, #0
 800476c:	f7ff fb4e 	bl	8003e0c <ENS160_setMode>
 8004770:	0003      	movs	r3, r0
 8004772:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004774:	1cfb      	adds	r3, r7, #3
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d03d      	beq.n	80047f8 <ENS_Upkeep+0x3a0>
 800477c:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <ENS_Upkeep+0x340>)
 800477e:	e03c      	b.n	80047fa <ENS_Upkeep+0x3a2>
 8004780:	20000450 	.word	0x20000450
 8004784:	20000000 	.word	0x20000000
 8004788:	0802d618 	.word	0x0802d618
 800478c:	080298a4 	.word	0x080298a4
 8004790:	080297ac 	.word	0x080297ac
 8004794:	002f9b80 	.word	0x002f9b80
 8004798:	080298d8 	.word	0x080298d8
 800479c:	080298e0 	.word	0x080298e0
 80047a0:	080298e8 	.word	0x080298e8
 80047a4:	0802990c 	.word	0x0802990c
 80047a8:	08029924 	.word	0x08029924
 80047ac:	08029944 	.word	0x08029944
 80047b0:	0802995c 	.word	0x0802995c
 80047b4:	08029964 	.word	0x08029964
 80047b8:	0802996c 	.word	0x0802996c
 80047bc:	08029974 	.word	0x08029974
 80047c0:	0802997c 	.word	0x0802997c
 80047c4:	08029984 	.word	0x08029984
 80047c8:	0802998c 	.word	0x0802998c
 80047cc:	20000454 	.word	0x20000454
 80047d0:	20000484 	.word	0x20000484
 80047d4:	080299b4 	.word	0x080299b4
 80047d8:	0802981c 	.word	0x0802981c
 80047dc:	20000460 	.word	0x20000460
 80047e0:	080299e0 	.word	0x080299e0
 80047e4:	080299fc 	.word	0x080299fc
 80047e8:	08029a18 	.word	0x08029a18
 80047ec:	08029a34 	.word	0x08029a34
 80047f0:	20001e5d 	.word	0x20001e5d
 80047f4:	20001e5e 	.word	0x20001e5e
 80047f8:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <ENS_Upkeep+0x468>)
 80047fa:	4a32      	ldr	r2, [pc, #200]	@ (80048c4 <ENS_Upkeep+0x46c>)
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	0010      	movs	r0, r2
 8004800:	4a31      	ldr	r2, [pc, #196]	@ (80048c8 <ENS_Upkeep+0x470>)
 8004802:	4932      	ldr	r1, [pc, #200]	@ (80048cc <ENS_Upkeep+0x474>)
 8004804:	9000      	str	r0, [sp, #0]
 8004806:	2003      	movs	r0, #3
 8004808:	f00e fc4e 	bl	80130a8 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 800480c:	200a      	movs	r0, #10
 800480e:	f00f f995 	bl	8013b3c <HAL_Delay>
      setSensorLock(FREE);
 8004812:	2000      	movs	r0, #0
 8004814:	f008 fcea 	bl	800d1ec <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004818:	f00f f986 	bl	8013b28 <HAL_GetTick>
 800481c:	0003      	movs	r3, r0
 800481e:	4a2c      	ldr	r2, [pc, #176]	@ (80048d0 <ENS_Upkeep+0x478>)
 8004820:	189a      	adds	r2, r3, r2
 8004822:	4b2c      	ldr	r3, [pc, #176]	@ (80048d4 <ENS_Upkeep+0x47c>)
 8004824:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004826:	4b2c      	ldr	r3, [pc, #176]	@ (80048d8 <ENS_Upkeep+0x480>)
 8004828:	2208      	movs	r2, #8
 800482a:	701a      	strb	r2, [r3, #0]
    break;
 800482c:	e041      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 800482e:	f008 fcf1 	bl	800d214 <getSensorLock>
 8004832:	1e03      	subs	r3, r0, #0
 8004834:	d13a      	bne.n	80048ac <ENS_Upkeep+0x454>
        break;
      }
      setSensorLock(ENS160);
 8004836:	2004      	movs	r0, #4
 8004838:	f008 fcd8 	bl	800d1ec <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800483c:	1cba      	adds	r2, r7, #2
 800483e:	2301      	movs	r3, #1
 8004840:	2101      	movs	r1, #1
 8004842:	2010      	movs	r0, #16
 8004844:	f7ff f94a 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004848:	1cbb      	adds	r3, r7, #2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d111      	bne.n	8004874 <ENS_Upkeep+0x41c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004850:	1dfc      	adds	r4, r7, #7
 8004852:	2002      	movs	r0, #2
 8004854:	f7ff fada 	bl	8003e0c <ENS160_setMode>
 8004858:	0003      	movs	r3, r0
 800485a:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800485c:	1dfb      	adds	r3, r7, #7
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <ENS_Upkeep+0x410>
 8004864:	4b1d      	ldr	r3, [pc, #116]	@ (80048dc <ENS_Upkeep+0x484>)
 8004866:	e000      	b.n	800486a <ENS_Upkeep+0x412>
 8004868:	4b15      	ldr	r3, [pc, #84]	@ (80048c0 <ENS_Upkeep+0x468>)
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <ENS_Upkeep+0x488>)
 800486c:	4917      	ldr	r1, [pc, #92]	@ (80048cc <ENS_Upkeep+0x474>)
 800486e:	2003      	movs	r0, #3
 8004870:	f00e fc1a 	bl	80130a8 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8004874:	200a      	movs	r0, #10
 8004876:	f00f f961 	bl	8013b3c <HAL_Delay>
      setSensorLock(FREE);
 800487a:	2000      	movs	r0, #0
 800487c:	f008 fcb6 	bl	800d1ec <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 8004880:	4b15      	ldr	r3, [pc, #84]	@ (80048d8 <ENS_Upkeep+0x480>)
 8004882:	2203      	movs	r2, #3
 8004884:	701a      	strb	r2, [r3, #0]
    break;
 8004886:	e014      	b.n	80048b2 <ENS_Upkeep+0x45a>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004888:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <ENS_Upkeep+0x480>)
 800488a:	2202      	movs	r2, #2
 800488c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 800488e:	f008 fcc1 	bl	800d214 <getSensorLock>
 8004892:	0003      	movs	r3, r0
 8004894:	2b04      	cmp	r3, #4
 8004896:	d00b      	beq.n	80048b0 <ENS_Upkeep+0x458>
      setSensorLock(FREE);
 8004898:	2000      	movs	r0, #0
 800489a:	f008 fca7 	bl	800d1ec <setSensorLock>
    }
    break;
 800489e:	e007      	b.n	80048b0 <ENS_Upkeep+0x458>
      break;
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	e006      	b.n	80048b2 <ENS_Upkeep+0x45a>
      break;
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	e004      	b.n	80048b2 <ENS_Upkeep+0x45a>
        break;
 80048a8:	46c0      	nop			@ (mov r8, r8)
 80048aa:	e002      	b.n	80048b2 <ENS_Upkeep+0x45a>
        break;
 80048ac:	46c0      	nop			@ (mov r8, r8)
 80048ae:	e000      	b.n	80048b2 <ENS_Upkeep+0x45a>
    break;
 80048b0:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 80048b2:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <ENS_Upkeep+0x480>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b003      	add	sp, #12
 80048bc:	bd90      	pop	{r4, r7, pc}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	080298e0 	.word	0x080298e0
 80048c4:	20000454 	.word	0x20000454
 80048c8:	08029a50 	.word	0x08029a50
 80048cc:	080297ac 	.word	0x080297ac
 80048d0:	0000afc8 	.word	0x0000afc8
 80048d4:	20000450 	.word	0x20000450
 80048d8:	20000000 	.word	0x20000000
 80048dc:	080298d8 	.word	0x080298d8
 80048e0:	08029a88 	.word	0x08029a88

080048e4 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80048e8:	4b02      	ldr	r3, [pc, #8]	@ (80048f4 <forceNTPupdate+0x10>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000670 	.word	0x20000670

080048f8 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004900:	f00f f912 	bl	8013b28 <HAL_GetTick>
 8004904:	0002      	movs	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	18d2      	adds	r2, r2, r3
 800490a:	4b03      	ldr	r3, [pc, #12]	@ (8004918 <setESPTimeStamp+0x20>)
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b002      	add	sp, #8
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	2000066c 	.word	0x2000066c

0800491c <setCharges>:
void setCharges(){
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004920:	f004 fc36 	bl	8009190 <ReadBatteryVoltage>
 8004924:	1c02      	adds	r2, r0, #0
 8004926:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <setCharges+0x3c>)
 8004928:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800492a:	f004 fc93 	bl	8009254 <ReadSolarVoltage>
 800492e:	0003      	movs	r3, r0
 8004930:	0018      	movs	r0, r3
 8004932:	f7fe ff5d 	bl	80037f0 <__aeabi_i2d>
 8004936:	2200      	movs	r2, #0
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <setCharges+0x40>)
 800493a:	f7fd fbd1 	bl	80020e0 <__aeabi_ddiv>
 800493e:	0002      	movs	r2, r0
 8004940:	000b      	movs	r3, r1
 8004942:	0010      	movs	r0, r2
 8004944:	0019      	movs	r1, r3
 8004946:	f7fe ffed 	bl	8003924 <__aeabi_d2f>
 800494a:	1c02      	adds	r2, r0, #0
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <setCharges+0x44>)
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	200005c4 	.word	0x200005c4
 800495c:	408f4000 	.word	0x408f4000
 8004960:	200005c8 	.word	0x200005c8

08004964 <checkEEprom>:
bool checkEEprom(){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <checkEEprom+0x5c>)
 800496c:	4815      	ldr	r0, [pc, #84]	@ (80049c4 <checkEEprom+0x60>)
 800496e:	220c      	movs	r2, #12
 8004970:	0019      	movs	r1, r3
 8004972:	f006 fead 	bl	800b6d0 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004976:	1dfb      	adds	r3, r7, #7
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e00e      	b.n	800499c <checkEEprom+0x38>
    configSum += tempConfig[i];
 800497e:	1dfb      	adds	r3, r7, #7
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	4a0f      	ldr	r2, [pc, #60]	@ (80049c0 <checkEEprom+0x5c>)
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	001a      	movs	r2, r3
 8004988:	4b0f      	ldr	r3, [pc, #60]	@ (80049c8 <checkEEprom+0x64>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	18d2      	adds	r2, r2, r3
 800498e:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <checkEEprom+0x64>)
 8004990:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004992:	1dfb      	adds	r3, r7, #7
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	3201      	adds	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	1dfb      	adds	r3, r7, #7
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b0b      	cmp	r3, #11
 80049a2:	d9ec      	bls.n	800497e <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 80049a4:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <checkEEprom+0x64>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	425a      	negs	r2, r3
 80049aa:	4153      	adcs	r3, r2
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <checkEEprom+0x68>)
 80049b0:	701a      	strb	r2, [r3, #0]
  return test;
 80049b2:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <checkEEprom+0x68>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	200006f8 	.word	0x200006f8
 80049c4:	0808000c 	.word	0x0808000c
 80049c8:	20000704 	.word	0x20000704
 80049cc:	20000708 	.word	0x20000708

080049d0 <checkName>:
bool checkName(){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80049d6:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <checkName+0x5c>)
 80049d8:	4815      	ldr	r0, [pc, #84]	@ (8004a30 <checkName+0x60>)
 80049da:	2220      	movs	r2, #32
 80049dc:	0019      	movs	r1, r3
 80049de:	f006 fe77 	bl	800b6d0 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e00e      	b.n	8004a08 <checkName+0x38>
    configSum += nameConfig[i];
 80049ea:	1dfb      	adds	r3, r7, #7
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	4a0f      	ldr	r2, [pc, #60]	@ (8004a2c <checkName+0x5c>)
 80049f0:	5cd3      	ldrb	r3, [r2, r3]
 80049f2:	001a      	movs	r2, r3
 80049f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a34 <checkName+0x64>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	18d2      	adds	r2, r2, r3
 80049fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <checkName+0x64>)
 80049fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049fe:	1dfb      	adds	r3, r7, #7
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	1dfb      	adds	r3, r7, #7
 8004a04:	3201      	adds	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	1dfb      	adds	r3, r7, #7
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b0b      	cmp	r3, #11
 8004a0e:	d9ec      	bls.n	80049ea <checkName+0x1a>
  }
  test = (configSum != 0);
 8004a10:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <checkName+0x64>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	4193      	sbcs	r3, r2
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b07      	ldr	r3, [pc, #28]	@ (8004a38 <checkName+0x68>)
 8004a1c:	701a      	strb	r2, [r3, #0]
  return test;
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <checkName+0x68>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b002      	add	sp, #8
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	2000070c 	.word	0x2000070c
 8004a30:	08080090 	.word	0x08080090
 8004a34:	2000072c 	.word	0x2000072c
 8004a38:	20000730 	.word	0x20000730

08004a3c <setHIDS>:


void setHIDS(float temp, float humid){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a46:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <setHIDS+0x20>)
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <setHIDS+0x20>)
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	2000067c 	.word	0x2000067c

08004a60 <setVOC>:

void setVOC(uint16_t voc) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	0002      	movs	r2, r0
 8004a68:	1dbb      	adds	r3, r7, #6
 8004a6a:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004a6c:	4b04      	ldr	r3, [pc, #16]	@ (8004a80 <setVOC+0x20>)
 8004a6e:	1dba      	adds	r2, r7, #6
 8004a70:	2158      	movs	r1, #88	@ 0x58
 8004a72:	8812      	ldrh	r2, [r2, #0]
 8004a74:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004a76:	46c0      	nop			@ (mov r8, r8)
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	2000067c 	.word	0x2000067c

08004a84 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004a8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ad0 <setAHT2x+0x4c>)
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	639a      	str	r2, [r3, #56]	@ 0x38
  if (airhum > MeasVal.AHT2x_humiditymax) {
 8004a94:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad0 <setAHT2x+0x4c>)
 8004a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a98:	1c19      	adds	r1, r3, #0
 8004a9a:	6838      	ldr	r0, [r7, #0]
 8004a9c:	f7fb fd5c 	bl	8000558 <__aeabi_fcmpgt>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d002      	beq.n	8004aaa <setAHT2x+0x26>
    MeasVal.AHT2x_humiditymax = airhum;
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <setAHT2x+0x4c>)
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  MeasVal.AHT2x_temperature = airtemp;
 8004aaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <setAHT2x+0x4c>)
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	641a      	str	r2, [r3, #64]	@ 0x40
  if (airtemp > MeasVal.AHT2x_temperaturemax) {
 8004ab0:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <setAHT2x+0x4c>)
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab4:	1c19      	adds	r1, r3, #0
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fb fd4e 	bl	8000558 <__aeabi_fcmpgt>
 8004abc:	1e03      	subs	r3, r0, #0
 8004abe:	d100      	bne.n	8004ac2 <setAHT2x+0x3e>
    MeasVal.AHT2x_temperaturemax = airtemp;
  }
}
 8004ac0:	e002      	b.n	8004ac8 <setAHT2x+0x44>
    MeasVal.AHT2x_temperaturemax = airtemp;
 8004ac2:	4b03      	ldr	r3, [pc, #12]	@ (8004ad0 <setAHT2x+0x4c>)
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004ac8:	46c0      	nop			@ (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b002      	add	sp, #8
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	2000067c 	.word	0x2000067c

08004ad4 <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004ade:	4b10      	ldr	r3, [pc, #64]	@ (8004b20 <setBMP280+0x4c>)
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (airtemp > MeasVal.BMP280_temperaturemax) {
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b20 <setBMP280+0x4c>)
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae8:	1c19      	adds	r1, r3, #0
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fb fd34 	bl	8000558 <__aeabi_fcmpgt>
 8004af0:	1e03      	subs	r3, r0, #0
 8004af2:	d002      	beq.n	8004afa <setBMP280+0x26>
    MeasVal.BMP280_temperaturemax = airtemp;
 8004af4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <setBMP280+0x4c>)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  MeasVal.BMP280_airpressure = airhpa;
 8004afa:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <setBMP280+0x4c>)
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	651a      	str	r2, [r3, #80]	@ 0x50
  if (airhpa > MeasVal.BMP280_airpressuremax) {
 8004b00:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <setBMP280+0x4c>)
 8004b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b04:	1c19      	adds	r1, r3, #0
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	f7fb fd26 	bl	8000558 <__aeabi_fcmpgt>
 8004b0c:	1e03      	subs	r3, r0, #0
 8004b0e:	d100      	bne.n	8004b12 <setBMP280+0x3e>
    MeasVal.BMP280_airpressuremax = airhpa;
  }
}
 8004b10:	e002      	b.n	8004b18 <setBMP280+0x44>
    MeasVal.BMP280_airpressuremax = airhpa;
 8004b12:	4b03      	ldr	r3, [pc, #12]	@ (8004b20 <setBMP280+0x4c>)
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8004b18:	46c0      	nop			@ (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b002      	add	sp, #8
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	2000067c 	.word	0x2000067c

08004b24 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	0004      	movs	r4, r0
 8004b2c:	0008      	movs	r0, r1
 8004b2e:	0011      	movs	r1, r2
 8004b30:	1dfb      	adds	r3, r7, #7
 8004b32:	1c22      	adds	r2, r4, #0
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	1c02      	adds	r2, r0, #0
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	1cbb      	adds	r3, r7, #2
 8004b3e:	1c0a      	adds	r2, r1, #0
 8004b40:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b42:	4b15      	ldr	r3, [pc, #84]	@ (8004b98 <setENS160+0x74>)
 8004b44:	1dfa      	adds	r2, r7, #7
 8004b46:	2164      	movs	r1, #100	@ 0x64
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b4c:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <setENS160+0x74>)
 8004b4e:	2265      	movs	r2, #101	@ 0x65
 8004b50:	5c9b      	ldrb	r3, [r3, r2]
 8004b52:	1dfa      	adds	r2, r7, #7
 8004b54:	7812      	ldrb	r2, [r2, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d904      	bls.n	8004b64 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b98 <setENS160+0x74>)
 8004b5c:	1dfa      	adds	r2, r7, #7
 8004b5e:	2165      	movs	r1, #101	@ 0x65
 8004b60:	7812      	ldrb	r2, [r2, #0]
 8004b62:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b64:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <setENS160+0x74>)
 8004b66:	1d3a      	adds	r2, r7, #4
 8004b68:	215a      	movs	r1, #90	@ 0x5a
 8004b6a:	8812      	ldrh	r2, [r2, #0]
 8004b6c:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <setENS160+0x74>)
 8004b70:	1cba      	adds	r2, r7, #2
 8004b72:	2160      	movs	r1, #96	@ 0x60
 8004b74:	8812      	ldrh	r2, [r2, #0]
 8004b76:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b78:	4b07      	ldr	r3, [pc, #28]	@ (8004b98 <setENS160+0x74>)
 8004b7a:	2262      	movs	r2, #98	@ 0x62
 8004b7c:	5a9b      	ldrh	r3, [r3, r2]
 8004b7e:	1cba      	adds	r2, r7, #2
 8004b80:	8812      	ldrh	r2, [r2, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d904      	bls.n	8004b90 <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b86:	4b04      	ldr	r3, [pc, #16]	@ (8004b98 <setENS160+0x74>)
 8004b88:	1cba      	adds	r2, r7, #2
 8004b8a:	2162      	movs	r1, #98	@ 0x62
 8004b8c:	8812      	ldrh	r2, [r2, #0]
 8004b8e:	525a      	strh	r2, [r3, r1]
  }
}
 8004b90:	46c0      	nop			@ (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b003      	add	sp, #12
 8004b96:	bd90      	pop	{r4, r7, pc}
 8004b98:	2000067c 	.word	0x2000067c

08004b9c <sethPa>:

void sethPa(float hPa) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 8004ba4:	4b09      	ldr	r3, [pc, #36]	@ (8004bcc <sethPa+0x30>)
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	675a      	str	r2, [r3, #116]	@ 0x74
  if (hPa > MeasVal.hPaValuemax) {
 8004baa:	4b08      	ldr	r3, [pc, #32]	@ (8004bcc <sethPa+0x30>)
 8004bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bae:	1c19      	adds	r1, r3, #0
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fb fcd1 	bl	8000558 <__aeabi_fcmpgt>
 8004bb6:	1e03      	subs	r3, r0, #0
 8004bb8:	d100      	bne.n	8004bbc <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004bba:	e002      	b.n	8004bc2 <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	@ (8004bcc <sethPa+0x30>)
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b002      	add	sp, #8
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			@ (mov r8, r8)
 8004bcc:	2000067c 	.word	0x2000067c

08004bd0 <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <setMic+0x28>)
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	669a      	str	r2, [r3, #104]	@ 0x68
  MeasVal.dBApeak = dBmax;
 8004be2:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <setMic+0x28>)
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	66da      	str	r2, [r3, #108]	@ 0x6c
  MeasVal.dBAaverage = dBAavg;
 8004be8:	4b03      	ldr	r3, [pc, #12]	@ (8004bf8 <setMic+0x28>)
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	671a      	str	r2, [r3, #112]	@ 0x70
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	2000067c 	.word	0x2000067c

08004bfc <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	0002      	movs	r2, r0
 8004c04:	1dbb      	adds	r3, r7, #6
 8004c06:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004c08:	1dbb      	adds	r3, r7, #6
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7fc fe0b 	bl	8001828 <__aeabi_i2f>
 8004c12:	1c03      	adds	r3, r0, #0
 8004c14:	490d      	ldr	r1, [pc, #52]	@ (8004c4c <setPM1p0+0x50>)
 8004c16:	1c18      	adds	r0, r3, #0
 8004c18:	f7fc f844 	bl	8000ca4 <__aeabi_fdiv>
 8004c1c:	1c03      	adds	r3, r0, #0
 8004c1e:	1c1a      	adds	r2, r3, #0
 8004c20:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <setPM1p0+0x54>)
 8004c22:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004c24:	4b0a      	ldr	r3, [pc, #40]	@ (8004c50 <setPM1p0+0x54>)
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <setPM1p0+0x54>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	1c19      	adds	r1, r3, #0
 8004c2e:	1c10      	adds	r0, r2, #0
 8004c30:	f7fb fc92 	bl	8000558 <__aeabi_fcmpgt>
 8004c34:	1e03      	subs	r3, r0, #0
 8004c36:	d100      	bne.n	8004c3a <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c38:	e003      	b.n	8004c42 <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c3a:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <setPM1p0+0x54>)
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	4b04      	ldr	r3, [pc, #16]	@ (8004c50 <setPM1p0+0x54>)
 8004c40:	60da      	str	r2, [r3, #12]
}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b002      	add	sp, #8
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	41200000 	.word	0x41200000
 8004c50:	2000067c 	.word	0x2000067c

08004c54 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	1dbb      	adds	r3, r7, #6
 8004c5e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004c60:	1dbb      	adds	r3, r7, #6
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fc fddf 	bl	8001828 <__aeabi_i2f>
 8004c6a:	1c03      	adds	r3, r0, #0
 8004c6c:	490d      	ldr	r1, [pc, #52]	@ (8004ca4 <setPM2p5+0x50>)
 8004c6e:	1c18      	adds	r0, r3, #0
 8004c70:	f7fc f818 	bl	8000ca4 <__aeabi_fdiv>
 8004c74:	1c03      	adds	r3, r0, #0
 8004c76:	1c1a      	adds	r2, r3, #0
 8004c78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <setPM2p5+0x54>)
 8004c7a:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <setPM2p5+0x54>)
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	4b09      	ldr	r3, [pc, #36]	@ (8004ca8 <setPM2p5+0x54>)
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	1c19      	adds	r1, r3, #0
 8004c86:	1c10      	adds	r0, r2, #0
 8004c88:	f7fb fc66 	bl	8000558 <__aeabi_fcmpgt>
 8004c8c:	1e03      	subs	r3, r0, #0
 8004c8e:	d100      	bne.n	8004c92 <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c90:	e003      	b.n	8004c9a <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c92:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <setPM2p5+0x54>)
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <setPM2p5+0x54>)
 8004c98:	615a      	str	r2, [r3, #20]
}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b002      	add	sp, #8
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	41200000 	.word	0x41200000
 8004ca8:	2000067c 	.word	0x2000067c

08004cac <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	1dbb      	adds	r3, r7, #6
 8004cb6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004cb8:	1dbb      	adds	r3, r7, #6
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7fc fdb3 	bl	8001828 <__aeabi_i2f>
 8004cc2:	1c03      	adds	r3, r0, #0
 8004cc4:	490d      	ldr	r1, [pc, #52]	@ (8004cfc <setPM4p0+0x50>)
 8004cc6:	1c18      	adds	r0, r3, #0
 8004cc8:	f7fb ffec 	bl	8000ca4 <__aeabi_fdiv>
 8004ccc:	1c03      	adds	r3, r0, #0
 8004cce:	1c1a      	adds	r2, r3, #0
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d00 <setPM4p0+0x54>)
 8004cd2:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d00 <setPM4p0+0x54>)
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <setPM4p0+0x54>)
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	1c19      	adds	r1, r3, #0
 8004cde:	1c10      	adds	r0, r2, #0
 8004ce0:	f7fb fc3a 	bl	8000558 <__aeabi_fcmpgt>
 8004ce4:	1e03      	subs	r3, r0, #0
 8004ce6:	d100      	bne.n	8004cea <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004ce8:	e003      	b.n	8004cf2 <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004cea:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <setPM4p0+0x54>)
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	4b04      	ldr	r3, [pc, #16]	@ (8004d00 <setPM4p0+0x54>)
 8004cf0:	61da      	str	r2, [r3, #28]
}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b002      	add	sp, #8
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	41200000 	.word	0x41200000
 8004d00:	2000067c 	.word	0x2000067c

08004d04 <setPM10>:

void setPM10(uint16_t PM10) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	0002      	movs	r2, r0
 8004d0c:	1dbb      	adds	r3, r7, #6
 8004d0e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004d10:	1dbb      	adds	r3, r7, #6
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7fc fd87 	bl	8001828 <__aeabi_i2f>
 8004d1a:	1c03      	adds	r3, r0, #0
 8004d1c:	490d      	ldr	r1, [pc, #52]	@ (8004d54 <setPM10+0x50>)
 8004d1e:	1c18      	adds	r0, r3, #0
 8004d20:	f7fb ffc0 	bl	8000ca4 <__aeabi_fdiv>
 8004d24:	1c03      	adds	r3, r0, #0
 8004d26:	1c1a      	adds	r2, r3, #0
 8004d28:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <setPM10+0x54>)
 8004d2a:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d58 <setPM10+0x54>)
 8004d2e:	6a1a      	ldr	r2, [r3, #32]
 8004d30:	4b09      	ldr	r3, [pc, #36]	@ (8004d58 <setPM10+0x54>)
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	1c19      	adds	r1, r3, #0
 8004d36:	1c10      	adds	r0, r2, #0
 8004d38:	f7fb fc0e 	bl	8000558 <__aeabi_fcmpgt>
 8004d3c:	1e03      	subs	r3, r0, #0
 8004d3e:	d100      	bne.n	8004d42 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d40:	e003      	b.n	8004d4a <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d42:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <setPM10+0x54>)
 8004d44:	6a1a      	ldr	r2, [r3, #32]
 8004d46:	4b04      	ldr	r3, [pc, #16]	@ (8004d58 <setPM10+0x54>)
 8004d48:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d4a:	46c0      	nop			@ (mov r8, r8)
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	41200000 	.word	0x41200000
 8004d58:	2000067c 	.word	0x2000067c

08004d5c <setNOx>:

void setNOx(uint16_t nox) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	0002      	movs	r2, r0
 8004d64:	1dbb      	adds	r3, r7, #6
 8004d66:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004d68:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <setNOx+0x38>)
 8004d6a:	1dba      	adds	r2, r7, #6
 8004d6c:	215c      	movs	r1, #92	@ 0x5c
 8004d6e:	8812      	ldrh	r2, [r2, #0]
 8004d70:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d72:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <setNOx+0x38>)
 8004d74:	225e      	movs	r2, #94	@ 0x5e
 8004d76:	5a9b      	ldrh	r3, [r3, r2]
 8004d78:	1dba      	adds	r2, r7, #6
 8004d7a:	8812      	ldrh	r2, [r2, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d904      	bls.n	8004d8a <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d80:	4b04      	ldr	r3, [pc, #16]	@ (8004d94 <setNOx+0x38>)
 8004d82:	1dba      	adds	r2, r7, #6
 8004d84:	215e      	movs	r1, #94	@ 0x5e
 8004d86:	8812      	ldrh	r2, [r2, #0]
 8004d88:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	2000067c 	.word	0x2000067c

08004d98 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004da2:	490a      	ldr	r1, [pc, #40]	@ (8004dcc <SetSEN545temphum+0x34>)
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fb ff7d 	bl	8000ca4 <__aeabi_fdiv>
 8004daa:	1c03      	adds	r3, r0, #0
 8004dac:	1c1a      	adds	r2, r3, #0
 8004dae:	4b08      	ldr	r3, [pc, #32]	@ (8004dd0 <SetSEN545temphum+0x38>)
 8004db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004db2:	4908      	ldr	r1, [pc, #32]	@ (8004dd4 <SetSEN545temphum+0x3c>)
 8004db4:	6838      	ldr	r0, [r7, #0]
 8004db6:	f7fb ff75 	bl	8000ca4 <__aeabi_fdiv>
 8004dba:	1c03      	adds	r3, r0, #0
 8004dbc:	1c1a      	adds	r2, r3, #0
 8004dbe:	4b04      	ldr	r3, [pc, #16]	@ (8004dd0 <SetSEN545temphum+0x38>)
 8004dc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b002      	add	sp, #8
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	43480000 	.word	0x43480000
 8004dd0:	2000067c 	.word	0x2000067c
 8004dd4:	42c80000 	.word	0x42c80000

08004dd8 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004ddc:	f008 fdd0 	bl	800d980 <sen5x_Get_sen5x_enable_state>
 8004de0:	1e03      	subs	r3, r0, #0
 8004de2:	d00f      	beq.n	8004e04 <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004de4:	4b14      	ldr	r3, [pc, #80]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004dea:	4b13      	ldr	r3, [pc, #76]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004df0:	4b11      	ldr	r3, [pc, #68]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004df6:	4b10      	ldr	r3, [pc, #64]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004dfe:	225e      	movs	r2, #94	@ 0x5e
 8004e00:	2100      	movs	r1, #0
 8004e02:	5299      	strh	r1, [r3, r2]
  }
  MeasVal.AHT2x_humiditymax = 0.0;
 8004e04:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	63da      	str	r2, [r3, #60]	@ 0x3c
  MeasVal.AHT2x_temperaturemax = 0.0;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  MeasVal.BMP280_temperaturemax = 0.0;
 8004e10:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	64da      	str	r2, [r3, #76]	@ 0x4c
  MeasVal.BMP280_airpressuremax = 0.0;
 8004e16:	4b08      	ldr	r3, [pc, #32]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54
  MeasVal.eCO2Indexmax = 0;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e1e:	2262      	movs	r2, #98	@ 0x62
 8004e20:	2100      	movs	r1, #0
 8004e22:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004e24:	4b04      	ldr	r3, [pc, #16]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e26:	2265      	movs	r2, #101	@ 0x65
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]
  MeasVal.hPaValuemax = 0.0;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	2000067c 	.word	0x2000067c

08004e3c <SetConfigMode>:

void SetConfigMode(){
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <SetConfigMode+0x30>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2201      	movs	r2, #1
 8004e46:	4053      	eors	r3, r2
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004e4e:	4a08      	ldr	r2, [pc, #32]	@ (8004e70 <SetConfigMode+0x34>)
 8004e50:	4b08      	ldr	r3, [pc, #32]	@ (8004e74 <SetConfigMode+0x38>)
 8004e52:	0019      	movs	r1, r3
 8004e54:	2003      	movs	r0, #3
 8004e56:	f00e f927 	bl	80130a8 <CreateLine>
  }
  ReconfigSet = true;
 8004e5a:	4b04      	ldr	r3, [pc, #16]	@ (8004e6c <SetConfigMode+0x30>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e60:	4b05      	ldr	r3, [pc, #20]	@ (8004e78 <SetConfigMode+0x3c>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
}
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	200005a3 	.word	0x200005a3
 8004e70:	08029ab8 	.word	0x08029ab8
 8004e74:	08029ad8 	.word	0x08029ad8
 8004e78:	20000207 	.word	0x20000207

08004e7c <GetReconfigMode>:

bool GetReconfigMode() {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e80:	4b02      	ldr	r3, [pc, #8]	@ (8004e8c <GetReconfigMode+0x10>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			@ (mov r8, r8)
 8004e8c:	200005a3 	.word	0x200005a3

08004e90 <ESP_GetUID>:

void ESP_GetUID(){
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004e94:	f00e fe92 	bl	8013bbc <HAL_GetUIDw0>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	4b07      	ldr	r3, [pc, #28]	@ (8004eb8 <ESP_GetUID+0x28>)
 8004e9c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004e9e:	f00e fe97 	bl	8013bd0 <HAL_GetUIDw1>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <ESP_GetUID+0x28>)
 8004ea6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004ea8:	f00e fe9c 	bl	8013be4 <HAL_GetUIDw2>
 8004eac:	0002      	movs	r2, r0
 8004eae:	4b02      	ldr	r3, [pc, #8]	@ (8004eb8 <ESP_GetUID+0x28>)
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	46c0      	nop			@ (mov r8, r8)
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	200005ac 	.word	0x200005ac

08004ebc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004ec4:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <ESP_Init+0x2c>)
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004eca:	4b08      	ldr	r3, [pc, #32]	@ (8004eec <ESP_Init+0x30>)
 8004ecc:	2202      	movs	r2, #2
 8004ece:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004ed0:	f7ff ffde 	bl	8004e90 <ESP_GetUID>
  beurs = checkEEprom();
 8004ed4:	f7ff fd46 	bl	8004964 <checkEEprom>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	001a      	movs	r2, r3
 8004edc:	4b04      	ldr	r3, [pc, #16]	@ (8004ef0 <ESP_Init+0x34>)
 8004ede:	701a      	strb	r2, [r3, #0]
}
 8004ee0:	46c0      	nop			@ (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000498 	.word	0x20000498
 8004eec:	2000002c 	.word	0x2000002c
 8004ef0:	200005a6 	.word	0x200005a6

08004ef4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004ef4:	b5b0      	push	{r4, r5, r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	000a      	movs	r2, r1
 8004efe:	1cbb      	adds	r3, r7, #2
 8004f00:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004f02:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <ESP_Send+0x54>)
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	250f      	movs	r5, #15
 8004f08:	197c      	adds	r4, r7, r5
 8004f0a:	1cbb      	adds	r3, r7, #2
 8004f0c:	881a      	ldrh	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0019      	movs	r1, r3
 8004f12:	f017 fc3f 	bl	801c794 <HAL_UART_Transmit_DMA>
 8004f16:	0003      	movs	r3, r0
 8004f18:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f1a:	197b      	adds	r3, r7, r5
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004f22:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <ESP_Send+0x58>)
 8004f24:	4b0a      	ldr	r3, [pc, #40]	@ (8004f50 <ESP_Send+0x5c>)
 8004f26:	0019      	movs	r1, r3
 8004f28:	2001      	movs	r0, #1
 8004f2a:	f00e f8bd 	bl	80130a8 <CreateLine>
    return false;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e006      	b.n	8004f40 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4b07      	ldr	r3, [pc, #28]	@ (8004f54 <ESP_Send+0x60>)
 8004f36:	0011      	movs	r1, r2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f020 f9b1 	bl	80252a0 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004f3e:	2301      	movs	r3, #1
}
 8004f40:	0018      	movs	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b004      	add	sp, #16
 8004f46:	bdb0      	pop	{r4, r5, r7, pc}
 8004f48:	20000498 	.word	0x20000498
 8004f4c:	08029adc 	.word	0x08029adc
 8004f50:	08029afc 	.word	0x08029afc
 8004f54:	08029b00 	.word	0x08029b00

08004f58 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	000a      	movs	r2, r1
 8004f62:	1cbb      	adds	r3, r7, #2
 8004f64:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004f66:	4b5d      	ldr	r3, [pc, #372]	@ (80050dc <ESP_Receive+0x184>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004f6c:	260f      	movs	r6, #15
 8004f6e:	19bb      	adds	r3, r7, r6
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004f74:	4b5a      	ldr	r3, [pc, #360]	@ (80050e0 <ESP_Receive+0x188>)
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	250d      	movs	r5, #13
 8004f7a:	197c      	adds	r4, r7, r5
 8004f7c:	1cbb      	adds	r3, r7, #2
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0019      	movs	r1, r3
 8004f84:	f017 fc96 	bl	801c8b4 <HAL_UART_Receive_DMA>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f8c:	002c      	movs	r4, r5
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d100      	bne.n	8004f98 <ESP_Receive+0x40>
 8004f96:	e09c      	b.n	80050d2 <ESP_Receive+0x17a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f98:	4b51      	ldr	r3, [pc, #324]	@ (80050e0 <ESP_Receive+0x188>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2284      	movs	r2, #132	@ 0x84
 8004f9e:	589b      	ldr	r3, [r3, r2]
 8004fa0:	4a50      	ldr	r2, [pc, #320]	@ (80050e4 <ESP_Receive+0x18c>)
 8004fa2:	4951      	ldr	r1, [pc, #324]	@ (80050e8 <ESP_Receive+0x190>)
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f00e f87f 	bl	80130a8 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004faa:	193b      	adds	r3, r7, r4
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d008      	beq.n	8004fc6 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80050ec <ESP_Receive+0x194>)
 8004fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80050e8 <ESP_Receive+0x190>)
 8004fb8:	0019      	movs	r1, r3
 8004fba:	2001      	movs	r0, #1
 8004fbc:	f00e f874 	bl	80130a8 <CreateLine>
      reset = true;
 8004fc0:	19bb      	adds	r3, r7, r6
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004fc6:	230d      	movs	r3, #13
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d005      	beq.n	8004fde <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004fd2:	4a47      	ldr	r2, [pc, #284]	@ (80050f0 <ESP_Receive+0x198>)
 8004fd4:	4b44      	ldr	r3, [pc, #272]	@ (80050e8 <ESP_Receive+0x190>)
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	2001      	movs	r0, #1
 8004fda:	f00e f865 	bl	80130a8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8004fde:	230d      	movs	r3, #13
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2204      	movs	r2, #4
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d005      	beq.n	8004ff6 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8004fea:	4a42      	ldr	r2, [pc, #264]	@ (80050f4 <ESP_Receive+0x19c>)
 8004fec:	4b3e      	ldr	r3, [pc, #248]	@ (80050e8 <ESP_Receive+0x190>)
 8004fee:	0019      	movs	r1, r3
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	f00e f859 	bl	80130a8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004ff6:	230d      	movs	r3, #13
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	4013      	ands	r3, r2
 8005000:	d005      	beq.n	800500e <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8005002:	4a3d      	ldr	r2, [pc, #244]	@ (80050f8 <ESP_Receive+0x1a0>)
 8005004:	4b38      	ldr	r3, [pc, #224]	@ (80050e8 <ESP_Receive+0x190>)
 8005006:	0019      	movs	r1, r3
 8005008:	2001      	movs	r0, #1
 800500a:	f00e f84d 	bl	80130a8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 800500e:	230d      	movs	r3, #13
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2210      	movs	r2, #16
 8005016:	4013      	ands	r3, r2
 8005018:	d005      	beq.n	8005026 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 800501a:	4a38      	ldr	r2, [pc, #224]	@ (80050fc <ESP_Receive+0x1a4>)
 800501c:	4b32      	ldr	r3, [pc, #200]	@ (80050e8 <ESP_Receive+0x190>)
 800501e:	0019      	movs	r1, r3
 8005020:	2001      	movs	r0, #1
 8005022:	f00e f841 	bl	80130a8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8005026:	230d      	movs	r3, #13
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2220      	movs	r2, #32
 800502e:	4013      	ands	r3, r2
 8005030:	d005      	beq.n	800503e <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8005032:	4a33      	ldr	r2, [pc, #204]	@ (8005100 <ESP_Receive+0x1a8>)
 8005034:	4b2c      	ldr	r3, [pc, #176]	@ (80050e8 <ESP_Receive+0x190>)
 8005036:	0019      	movs	r1, r3
 8005038:	2001      	movs	r0, #1
 800503a:	f00e f835 	bl	80130a8 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 800503e:	230d      	movs	r3, #13
 8005040:	18fb      	adds	r3, r7, r3
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2240      	movs	r2, #64	@ 0x40
 8005046:	4013      	ands	r3, r2
 8005048:	d005      	beq.n	8005056 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 800504a:	4a2e      	ldr	r2, [pc, #184]	@ (8005104 <ESP_Receive+0x1ac>)
 800504c:	4b26      	ldr	r3, [pc, #152]	@ (80050e8 <ESP_Receive+0x190>)
 800504e:	0019      	movs	r1, r3
 8005050:	2001      	movs	r0, #1
 8005052:	f00e f829 	bl	80130a8 <CreateLine>
    }
#endif
    if (reset) {
 8005056:	230f      	movs	r3, #15
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d033      	beq.n	80050c8 <ESP_Receive+0x170>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005060:	4b29      	ldr	r3, [pc, #164]	@ (8005108 <ESP_Receive+0x1b0>)
 8005062:	2200      	movs	r2, #0
 8005064:	2101      	movs	r1, #1
 8005066:	0018      	movs	r0, r3
 8005068:	f00f ffef 	bl	801504a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800506c:	2001      	movs	r0, #1
 800506e:	f00e fd65 	bl	8013b3c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005072:	2380      	movs	r3, #128	@ 0x80
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	4825      	ldr	r0, [pc, #148]	@ (800510c <ESP_Receive+0x1b4>)
 8005078:	2200      	movs	r2, #0
 800507a:	0019      	movs	r1, r3
 800507c:	f00f ffe5 	bl	801504a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005080:	2001      	movs	r0, #1
 8005082:	f00e fd5b 	bl	8013b3c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005086:	4b20      	ldr	r3, [pc, #128]	@ (8005108 <ESP_Receive+0x1b0>)
 8005088:	2200      	movs	r2, #0
 800508a:	2102      	movs	r1, #2
 800508c:	0018      	movs	r0, r3
 800508e:	f00f ffdc 	bl	801504a <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8005092:	230e      	movs	r3, #14
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e00e      	b.n	80050ba <ESP_Receive+0x162>
        SetAllREDLED();
 800509c:	f00c fefc 	bl	8011e98 <SetAllREDLED>
        SetLEDsOff();
 80050a0:	f00c fede 	bl	8011e60 <SetLEDsOff>
        HAL_Delay(500);
 80050a4:	23fa      	movs	r3, #250	@ 0xfa
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	0018      	movs	r0, r3
 80050aa:	f00e fd47 	bl	8013b3c <HAL_Delay>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 80050ae:	210e      	movs	r1, #14
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	187b      	adds	r3, r7, r1
 80050b6:	3201      	adds	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	230e      	movs	r3, #14
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d9eb      	bls.n	800509c <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 80050c4:	f00f f9f9 	bl	80144ba <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 80050c8:	4b04      	ldr	r3, [pc, #16]	@ (80050dc <ESP_Receive+0x184>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
    return false;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <ESP_Receive+0x17c>
  }
  return true;
 80050d2:	2301      	movs	r3, #1
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b005      	add	sp, #20
 80050da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050dc:	2000049c 	.word	0x2000049c
 80050e0:	20000498 	.word	0x20000498
 80050e4:	08029b10 	.word	0x08029b10
 80050e8:	08029afc 	.word	0x08029afc
 80050ec:	08029b40 	.word	0x08029b40
 80050f0:	08029b64 	.word	0x08029b64
 80050f4:	08029b88 	.word	0x08029b88
 80050f8:	08029bac 	.word	0x08029bac
 80050fc:	08029bd0 	.word	0x08029bd0
 8005100:	08029bfc 	.word	0x08029bfc
 8005104:	08029c2c 	.word	0x08029c2c
 8005108:	50001c00 	.word	0x50001c00
 800510c:	50000800 	.word	0x50000800

08005110 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8005118:	4b39      	ldr	r3, [pc, #228]	@ (8005200 <HAL_UART_ErrorCallback+0xf0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d16b      	bne.n	80051fa <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2284      	movs	r2, #132	@ 0x84
 8005126:	589b      	ldr	r3, [r3, r2]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d065      	beq.n	80051f8 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2284      	movs	r2, #132	@ 0x84
 8005130:	589b      	ldr	r3, [r3, r2]
 8005132:	4a34      	ldr	r2, [pc, #208]	@ (8005204 <HAL_UART_ErrorCallback+0xf4>)
 8005134:	4934      	ldr	r1, [pc, #208]	@ (8005208 <HAL_UART_ErrorCallback+0xf8>)
 8005136:	2003      	movs	r0, #3
 8005138:	f00d ffb6 	bl	80130a8 <CreateLine>
    switch (huart->ErrorCode) {
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2284      	movs	r2, #132	@ 0x84
 8005140:	589b      	ldr	r3, [r3, r2]
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d851      	bhi.n	80051ea <HAL_UART_ErrorCallback+0xda>
 8005146:	009a      	lsls	r2, r3, #2
 8005148:	4b30      	ldr	r3, [pc, #192]	@ (800520c <HAL_UART_ErrorCallback+0xfc>)
 800514a:	18d3      	adds	r3, r2, r3
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8005150:	4a2f      	ldr	r2, [pc, #188]	@ (8005210 <HAL_UART_ErrorCallback+0x100>)
 8005152:	4b30      	ldr	r3, [pc, #192]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 8005154:	0019      	movs	r1, r3
 8005156:	2001      	movs	r0, #1
 8005158:	f00d ffa6 	bl	80130a8 <CreateLine>
        break;
 800515c:	e04d      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 800515e:	4a2e      	ldr	r2, [pc, #184]	@ (8005218 <HAL_UART_ErrorCallback+0x108>)
 8005160:	4b2c      	ldr	r3, [pc, #176]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 8005162:	0019      	movs	r1, r3
 8005164:	2001      	movs	r0, #1
 8005166:	f00d ff9f 	bl	80130a8 <CreateLine>
        break;
 800516a:	e046      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 800516c:	4a2b      	ldr	r2, [pc, #172]	@ (800521c <HAL_UART_ErrorCallback+0x10c>)
 800516e:	4b29      	ldr	r3, [pc, #164]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 8005170:	0019      	movs	r1, r3
 8005172:	2001      	movs	r0, #1
 8005174:	f00d ff98 	bl	80130a8 <CreateLine>
        break;
 8005178:	e03f      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 800517a:	4a29      	ldr	r2, [pc, #164]	@ (8005220 <HAL_UART_ErrorCallback+0x110>)
 800517c:	4b25      	ldr	r3, [pc, #148]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 800517e:	0019      	movs	r1, r3
 8005180:	2001      	movs	r0, #1
 8005182:	f00d ff91 	bl	80130a8 <CreateLine>
        break;
 8005186:	e038      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8005188:	4a26      	ldr	r2, [pc, #152]	@ (8005224 <HAL_UART_ErrorCallback+0x114>)
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 800518c:	0019      	movs	r1, r3
 800518e:	2001      	movs	r0, #1
 8005190:	f00d ff8a 	bl	80130a8 <CreateLine>
        break;
 8005194:	e031      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8005196:	4a24      	ldr	r2, [pc, #144]	@ (8005228 <HAL_UART_ErrorCallback+0x118>)
 8005198:	4b1e      	ldr	r3, [pc, #120]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 800519a:	0019      	movs	r1, r3
 800519c:	2001      	movs	r0, #1
 800519e:	f00d ff83 	bl	80130a8 <CreateLine>
        break;
 80051a2:	e02a      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 80051a4:	4a21      	ldr	r2, [pc, #132]	@ (800522c <HAL_UART_ErrorCallback+0x11c>)
 80051a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051a8:	0019      	movs	r1, r3
 80051aa:	2001      	movs	r0, #1
 80051ac:	f00d ff7c 	bl	80130a8 <CreateLine>
        break;
 80051b0:	e023      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 80051b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005230 <HAL_UART_ErrorCallback+0x120>)
 80051b4:	4b17      	ldr	r3, [pc, #92]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051b6:	0019      	movs	r1, r3
 80051b8:	2001      	movs	r0, #1
 80051ba:	f00d ff75 	bl	80130a8 <CreateLine>
        break;
 80051be:	e01c      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 80051c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005234 <HAL_UART_ErrorCallback+0x124>)
 80051c2:	4b14      	ldr	r3, [pc, #80]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051c4:	0019      	movs	r1, r3
 80051c6:	2001      	movs	r0, #1
 80051c8:	f00d ff6e 	bl	80130a8 <CreateLine>
        break;
 80051cc:	e015      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 80051ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005238 <HAL_UART_ErrorCallback+0x128>)
 80051d0:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051d2:	0019      	movs	r1, r3
 80051d4:	2001      	movs	r0, #1
 80051d6:	f00d ff67 	bl	80130a8 <CreateLine>
        break;
 80051da:	e00e      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 80051dc:	4a17      	ldr	r2, [pc, #92]	@ (800523c <HAL_UART_ErrorCallback+0x12c>)
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051e0:	0019      	movs	r1, r3
 80051e2:	2001      	movs	r0, #1
 80051e4:	f00d ff60 	bl	80130a8 <CreateLine>
        break;
 80051e8:	e007      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 80051ea:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <HAL_UART_ErrorCallback+0x130>)
 80051ec:	4b09      	ldr	r3, [pc, #36]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051ee:	0019      	movs	r1, r3
 80051f0:	2001      	movs	r0, #1
 80051f2:	f00d ff59 	bl	80130a8 <CreateLine>
 80051f6:	e000      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      return;
 80051f8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b002      	add	sp, #8
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000498 	.word	0x20000498
 8005204:	08029c5c 	.word	0x08029c5c
 8005208:	08029ad8 	.word	0x08029ad8
 800520c:	0802d6c8 	.word	0x0802d6c8
 8005210:	08029c8c 	.word	0x08029c8c
 8005214:	08029afc 	.word	0x08029afc
 8005218:	08029cc0 	.word	0x08029cc0
 800521c:	08029cec 	.word	0x08029cec
 8005220:	08029d20 	.word	0x08029d20
 8005224:	08029d4c 	.word	0x08029d4c
 8005228:	08029d74 	.word	0x08029d74
 800522c:	08029da4 	.word	0x08029da4
 8005230:	08029ddc 	.word	0x08029ddc
 8005234:	08029e14 	.word	0x08029e14
 8005238:	08029e3c 	.word	0x08029e3c
 800523c:	08029e64 	.word	0x08029e64
 8005240:	08029e90 	.word	0x08029e90

08005244 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b42      	cmp	r3, #66	@ 0x42
 8005256:	d905      	bls.n	8005264 <isKeyValid+0x20>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2bff      	cmp	r3, #255	@ 0xff
 800525e:	d001      	beq.n	8005264 <isKeyValid+0x20>
    return true;
 8005260:	2301      	movs	r3, #1
 8005262:	e01d      	b.n	80052a0 <isKeyValid+0x5c>
  else {
    printf("Error sensor %s seems to have no stored key for %s: ", sensormodel, sensortype);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <isKeyValid+0x64>)
 800526a:	0018      	movs	r0, r3
 800526c:	f020 f818 	bl	80252a0 <iprintf>
    for (int i = 0; i < 12; i++) {
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e00c      	b.n	8005290 <isKeyValid+0x4c>
      printf("%02x", data[i]);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	18d3      	adds	r3, r2, r3
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	001a      	movs	r2, r3
 8005280:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <isKeyValid+0x68>)
 8005282:	0011      	movs	r1, r2
 8005284:	0018      	movs	r0, r3
 8005286:	f020 f80b 	bl	80252a0 <iprintf>
    for (int i = 0; i < 12; i++) {
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3301      	adds	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b0b      	cmp	r3, #11
 8005294:	ddef      	ble.n	8005276 <isKeyValid+0x32>
    }
    printf("\r\n");
 8005296:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <isKeyValid+0x6c>)
 8005298:	0018      	movs	r0, r3
 800529a:	f020 f867 	bl	802536c <puts>
    return false;
 800529e:	2300      	movs	r3, #0
  }
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b006      	add	sp, #24
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	08029eb4 	.word	0x08029eb4
 80052ac:	08029eec 	.word	0x08029eec
 80052b0:	08029ef4 	.word	0x08029ef4

080052b4 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e010      	b.n	80052e6 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	001a      	movs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	1898      	adds	r0, r3, r2
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	18d3      	adds	r3, r2, r3
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	001a      	movs	r2, r3
 80052d8:	4b07      	ldr	r3, [pc, #28]	@ (80052f8 <uint8ArrayToString+0x44>)
 80052da:	0019      	movs	r1, r3
 80052dc:	f020 f850 	bl	8025380 <siprintf>
  for (int i = 0; i < 12; i++) {
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b0b      	cmp	r3, #11
 80052ea:	ddeb      	ble.n	80052c4 <uint8ArrayToString+0x10>
  }
}
 80052ec:	46c0      	nop			@ (mov r8, r8)
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b004      	add	sp, #16
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	08029eec 	.word	0x08029eec

080052fc <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 80052fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052fe:	b089      	sub	sp, #36	@ 0x24
 8005300:	af04      	add	r7, sp, #16
 8005302:	6039      	str	r1, [r7, #0]
 8005304:	0011      	movs	r1, r2
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	1c02      	adds	r2, r0, #0
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	1dbb      	adds	r3, r7, #6
 800530e:	1c0a      	adds	r2, r1, #0
 8005310:	701a      	strb	r2, [r3, #0]
#endif
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 8005312:	f7ff fb5d 	bl	80049d0 <checkName>
 8005316:	1e03      	subs	r3, r0, #0
 8005318:	d00a      	beq.n	8005330 <CreateMessage+0x34>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800531a:	4b03      	ldr	r3, [pc, #12]	@ (8005328 <CreateMessage+0x2c>)
 800531c:	4803      	ldr	r0, [pc, #12]	@ (800532c <CreateMessage+0x30>)
 800531e:	2220      	movs	r2, #32
 8005320:	0019      	movs	r1, r3
 8005322:	f006 f9d5 	bl	800b6d0 <ReadUint8ArrayEEprom>
 8005326:	e009      	b.n	800533c <CreateMessage+0x40>
 8005328:	20000734 	.word	0x20000734
 800532c:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8005330:	4bed      	ldr	r3, [pc, #948]	@ (80056e8 <CreateMessage+0x3ec>)
 8005332:	4aee      	ldr	r2, [pc, #952]	@ (80056ec <CreateMessage+0x3f0>)
 8005334:	6811      	ldr	r1, [r2, #0]
 8005336:	6019      	str	r1, [r3, #0]
 8005338:	7912      	ldrb	r2, [r2, #4]
 800533a:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 800533c:	f7ff faee 	bl	800491c <setCharges>
  uint16_t index = 0;
 8005340:	260e      	movs	r6, #14
 8005342:	19bb      	adds	r3, r7, r6
 8005344:	2200      	movs	r2, #0
 8005346:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8005348:	19bb      	adds	r3, r7, r6
 800534a:	881a      	ldrh	r2, [r3, #0]
 800534c:	4be8      	ldr	r3, [pc, #928]	@ (80056f0 <CreateMessage+0x3f4>)
 800534e:	18d3      	adds	r3, r2, r3
 8005350:	4ae8      	ldr	r2, [pc, #928]	@ (80056f4 <CreateMessage+0x3f8>)
 8005352:	0011      	movs	r1, r2
 8005354:	0018      	movs	r0, r3
 8005356:	f020 f813 	bl	8025380 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 800535a:	4be7      	ldr	r3, [pc, #924]	@ (80056f8 <CreateMessage+0x3fc>)
 800535c:	48e7      	ldr	r0, [pc, #924]	@ (80056fc <CreateMessage+0x400>)
 800535e:	220c      	movs	r2, #12
 8005360:	0019      	movs	r1, r3
 8005362:	f006 f9b5 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005366:	4ae4      	ldr	r2, [pc, #912]	@ (80056f8 <CreateMessage+0x3fc>)
 8005368:	4be5      	ldr	r3, [pc, #916]	@ (8005700 <CreateMessage+0x404>)
 800536a:	0011      	movs	r1, r2
 800536c:	0018      	movs	r0, r3
 800536e:	f7ff ffa1 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8005372:	4be4      	ldr	r3, [pc, #912]	@ (8005704 <CreateMessage+0x408>)
 8005374:	689c      	ldr	r4, [r3, #8]
 8005376:	4be4      	ldr	r3, [pc, #912]	@ (8005708 <CreateMessage+0x40c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1c18      	adds	r0, r3, #0
 800537c:	f7fe fa8a 	bl	8003894 <__aeabi_f2d>
 8005380:	0002      	movs	r2, r0
 8005382:	000b      	movs	r3, r1
 8005384:	4dd8      	ldr	r5, [pc, #864]	@ (80056e8 <CreateMessage+0x3ec>)
 8005386:	49e1      	ldr	r1, [pc, #900]	@ (800570c <CreateMessage+0x410>)
 8005388:	48e1      	ldr	r0, [pc, #900]	@ (8005710 <CreateMessage+0x414>)
 800538a:	9202      	str	r2, [sp, #8]
 800538c:	9303      	str	r3, [sp, #12]
 800538e:	4bdc      	ldr	r3, [pc, #880]	@ (8005700 <CreateMessage+0x404>)
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	002b      	movs	r3, r5
 8005394:	0022      	movs	r2, r4
 8005396:	f01f fff3 	bl	8025380 <siprintf>
#endif
index = strlen(message);
 800539a:	4bd5      	ldr	r3, [pc, #852]	@ (80056f0 <CreateMessage+0x3f4>)
 800539c:	0018      	movs	r0, r3
 800539e:	f7fa fee5 	bl	800016c <strlen>
 80053a2:	0002      	movs	r2, r0
 80053a4:	19bb      	adds	r3, r7, r6
 80053a6:	801a      	strh	r2, [r3, #0]
  if (send) {
 80053a8:	1dbb      	adds	r3, r7, #6
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d019      	beq.n	80053e4 <CreateMessage+0xe8>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80053b0:	4bcf      	ldr	r3, [pc, #828]	@ (80056f0 <CreateMessage+0x3f4>)
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7fa feda 	bl	800016c <strlen>
 80053b8:	0003      	movs	r3, r0
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	4bcc      	ldr	r3, [pc, #816]	@ (80056f0 <CreateMessage+0x3f4>)
 80053be:	0011      	movs	r1, r2
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7ff fd97 	bl	8004ef4 <ESP_Send>
 80053c6:	0003      	movs	r3, r0
 80053c8:	001a      	movs	r2, r3
 80053ca:	4bd2      	ldr	r3, [pc, #840]	@ (8005714 <CreateMessage+0x418>)
 80053cc:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80053ce:	4bd2      	ldr	r3, [pc, #840]	@ (8005718 <CreateMessage+0x41c>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	001a      	movs	r2, r3
 80053d4:	4bcf      	ldr	r3, [pc, #828]	@ (8005714 <CreateMessage+0x418>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	4013      	ands	r3, r2
 80053da:	1e5a      	subs	r2, r3, #1
 80053dc:	4193      	sbcs	r3, r2
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	4bcd      	ldr	r3, [pc, #820]	@ (8005718 <CreateMessage+0x41c>)
 80053e2:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 80053e4:	4bc4      	ldr	r3, [pc, #784]	@ (80056f8 <CreateMessage+0x3fc>)
 80053e6:	48cd      	ldr	r0, [pc, #820]	@ (800571c <CreateMessage+0x420>)
 80053e8:	220c      	movs	r2, #12
 80053ea:	0019      	movs	r1, r3
 80053ec:	f006 f970 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80053f0:	4ac1      	ldr	r2, [pc, #772]	@ (80056f8 <CreateMessage+0x3fc>)
 80053f2:	4bc3      	ldr	r3, [pc, #780]	@ (8005700 <CreateMessage+0x404>)
 80053f4:	0011      	movs	r1, r2
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7ff ff5c 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 80053fc:	4bc1      	ldr	r3, [pc, #772]	@ (8005704 <CreateMessage+0x408>)
 80053fe:	689c      	ldr	r4, [r3, #8]
 8005400:	4bc1      	ldr	r3, [pc, #772]	@ (8005708 <CreateMessage+0x40c>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	1c18      	adds	r0, r3, #0
 8005406:	f7fe fa45 	bl	8003894 <__aeabi_f2d>
 800540a:	0002      	movs	r2, r0
 800540c:	000b      	movs	r3, r1
 800540e:	4db6      	ldr	r5, [pc, #728]	@ (80056e8 <CreateMessage+0x3ec>)
 8005410:	49c3      	ldr	r1, [pc, #780]	@ (8005720 <CreateMessage+0x424>)
 8005412:	48b7      	ldr	r0, [pc, #732]	@ (80056f0 <CreateMessage+0x3f4>)
 8005414:	9202      	str	r2, [sp, #8]
 8005416:	9303      	str	r3, [sp, #12]
 8005418:	4bb9      	ldr	r3, [pc, #740]	@ (8005700 <CreateMessage+0x404>)
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	002b      	movs	r3, r5
 800541e:	0022      	movs	r2, r4
 8005420:	f01f ffae 	bl	8025380 <siprintf>
#endif
  index += strlen(message);
 8005424:	4bb2      	ldr	r3, [pc, #712]	@ (80056f0 <CreateMessage+0x3f4>)
 8005426:	0018      	movs	r0, r3
 8005428:	f7fa fea0 	bl	800016c <strlen>
 800542c:	0003      	movs	r3, r0
 800542e:	b299      	uxth	r1, r3
 8005430:	220e      	movs	r2, #14
 8005432:	18bb      	adds	r3, r7, r2
 8005434:	18ba      	adds	r2, r7, r2
 8005436:	8812      	ldrh	r2, [r2, #0]
 8005438:	188a      	adds	r2, r1, r2
 800543a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800543c:	1dbb      	adds	r3, r7, #6
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d019      	beq.n	8005478 <CreateMessage+0x17c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005444:	4baa      	ldr	r3, [pc, #680]	@ (80056f0 <CreateMessage+0x3f4>)
 8005446:	0018      	movs	r0, r3
 8005448:	f7fa fe90 	bl	800016c <strlen>
 800544c:	0003      	movs	r3, r0
 800544e:	b29a      	uxth	r2, r3
 8005450:	4ba7      	ldr	r3, [pc, #668]	@ (80056f0 <CreateMessage+0x3f4>)
 8005452:	0011      	movs	r1, r2
 8005454:	0018      	movs	r0, r3
 8005456:	f7ff fd4d 	bl	8004ef4 <ESP_Send>
 800545a:	0003      	movs	r3, r0
 800545c:	001a      	movs	r2, r3
 800545e:	4bad      	ldr	r3, [pc, #692]	@ (8005714 <CreateMessage+0x418>)
 8005460:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005462:	4bad      	ldr	r3, [pc, #692]	@ (8005718 <CreateMessage+0x41c>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	001a      	movs	r2, r3
 8005468:	4baa      	ldr	r3, [pc, #680]	@ (8005714 <CreateMessage+0x418>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	4013      	ands	r3, r2
 800546e:	1e5a      	subs	r2, r3, #1
 8005470:	4193      	sbcs	r3, r2
 8005472:	b2da      	uxtb	r2, r3
 8005474:	4ba8      	ldr	r3, [pc, #672]	@ (8005718 <CreateMessage+0x41c>)
 8005476:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 8005478:	4b9f      	ldr	r3, [pc, #636]	@ (80056f8 <CreateMessage+0x3fc>)
 800547a:	48aa      	ldr	r0, [pc, #680]	@ (8005724 <CreateMessage+0x428>)
 800547c:	220c      	movs	r2, #12
 800547e:	0019      	movs	r1, r3
 8005480:	f006 f926 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005484:	4a9c      	ldr	r2, [pc, #624]	@ (80056f8 <CreateMessage+0x3fc>)
 8005486:	4b9e      	ldr	r3, [pc, #632]	@ (8005700 <CreateMessage+0x404>)
 8005488:	0011      	movs	r1, r2
 800548a:	0018      	movs	r0, r3
 800548c:	f7ff ff12 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 8005490:	4b9c      	ldr	r3, [pc, #624]	@ (8005704 <CreateMessage+0x408>)
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	4b9c      	ldr	r3, [pc, #624]	@ (8005708 <CreateMessage+0x40c>)
 8005496:	2158      	movs	r1, #88	@ 0x58
 8005498:	5a5b      	ldrh	r3, [r3, r1]
 800549a:	4c93      	ldr	r4, [pc, #588]	@ (80056e8 <CreateMessage+0x3ec>)
 800549c:	49a2      	ldr	r1, [pc, #648]	@ (8005728 <CreateMessage+0x42c>)
 800549e:	4894      	ldr	r0, [pc, #592]	@ (80056f0 <CreateMessage+0x3f4>)
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	4b97      	ldr	r3, [pc, #604]	@ (8005700 <CreateMessage+0x404>)
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	0023      	movs	r3, r4
 80054a8:	f01f ff6a 	bl	8025380 <siprintf>
#endif
  index += strlen(message);
 80054ac:	4b90      	ldr	r3, [pc, #576]	@ (80056f0 <CreateMessage+0x3f4>)
 80054ae:	0018      	movs	r0, r3
 80054b0:	f7fa fe5c 	bl	800016c <strlen>
 80054b4:	0003      	movs	r3, r0
 80054b6:	b299      	uxth	r1, r3
 80054b8:	220e      	movs	r2, #14
 80054ba:	18bb      	adds	r3, r7, r2
 80054bc:	18ba      	adds	r2, r7, r2
 80054be:	8812      	ldrh	r2, [r2, #0]
 80054c0:	188a      	adds	r2, r1, r2
 80054c2:	801a      	strh	r2, [r3, #0]
  if (send) {
 80054c4:	1dbb      	adds	r3, r7, #6
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d019      	beq.n	8005500 <CreateMessage+0x204>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80054cc:	4b88      	ldr	r3, [pc, #544]	@ (80056f0 <CreateMessage+0x3f4>)
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7fa fe4c 	bl	800016c <strlen>
 80054d4:	0003      	movs	r3, r0
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	4b85      	ldr	r3, [pc, #532]	@ (80056f0 <CreateMessage+0x3f4>)
 80054da:	0011      	movs	r1, r2
 80054dc:	0018      	movs	r0, r3
 80054de:	f7ff fd09 	bl	8004ef4 <ESP_Send>
 80054e2:	0003      	movs	r3, r0
 80054e4:	001a      	movs	r2, r3
 80054e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005714 <CreateMessage+0x418>)
 80054e8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80054ea:	4b8b      	ldr	r3, [pc, #556]	@ (8005718 <CreateMessage+0x41c>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	001a      	movs	r2, r3
 80054f0:	4b88      	ldr	r3, [pc, #544]	@ (8005714 <CreateMessage+0x418>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	4013      	ands	r3, r2
 80054f6:	1e5a      	subs	r2, r3, #1
 80054f8:	4193      	sbcs	r3, r2
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	4b86      	ldr	r3, [pc, #536]	@ (8005718 <CreateMessage+0x41c>)
 80054fe:	701a      	strb	r2, [r3, #0]
      retstat &= status;
    }
  }
#endif

  if (IsBMP280SensorPresent()) {
 8005500:	f007 fa1a 	bl	800c938 <IsBMP280SensorPresent>
 8005504:	1e03      	subs	r3, r0, #0
 8005506:	d100      	bne.n	800550a <CreateMessage+0x20e>
 8005508:	e0ab      	b.n	8005662 <CreateMessage+0x366>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 800550a:	4b7b      	ldr	r3, [pc, #492]	@ (80056f8 <CreateMessage+0x3fc>)
 800550c:	4887      	ldr	r0, [pc, #540]	@ (800572c <CreateMessage+0x430>)
 800550e:	220c      	movs	r2, #12
 8005510:	0019      	movs	r1, r3
 8005512:	f006 f8dd 	bl	800b6d0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && (MeasVal.hPaValuemax != 0.0)) {
 8005516:	4a86      	ldr	r2, [pc, #536]	@ (8005730 <CreateMessage+0x434>)
 8005518:	4986      	ldr	r1, [pc, #536]	@ (8005734 <CreateMessage+0x438>)
 800551a:	4b77      	ldr	r3, [pc, #476]	@ (80056f8 <CreateMessage+0x3fc>)
 800551c:	0018      	movs	r0, r3
 800551e:	f7ff fe91 	bl	8005244 <isKeyValid>
 8005522:	1e03      	subs	r3, r0, #0
 8005524:	d04b      	beq.n	80055be <CreateMessage+0x2c2>
 8005526:	4b78      	ldr	r3, [pc, #480]	@ (8005708 <CreateMessage+0x40c>)
 8005528:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800552a:	2100      	movs	r1, #0
 800552c:	1c18      	adds	r0, r3, #0
 800552e:	f7fa fff9 	bl	8000524 <__aeabi_fcmpeq>
 8005532:	1e03      	subs	r3, r0, #0
 8005534:	d143      	bne.n	80055be <CreateMessage+0x2c2>
      uint8ArrayToString(Buffer, keybuffer);
 8005536:	4a70      	ldr	r2, [pc, #448]	@ (80056f8 <CreateMessage+0x3fc>)
 8005538:	4b71      	ldr	r3, [pc, #452]	@ (8005700 <CreateMessage+0x404>)
 800553a:	0011      	movs	r1, r2
 800553c:	0018      	movs	r0, r3
 800553e:	f7ff feb9 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 8005542:	4b70      	ldr	r3, [pc, #448]	@ (8005704 <CreateMessage+0x408>)
 8005544:	689c      	ldr	r4, [r3, #8]
 8005546:	4b70      	ldr	r3, [pc, #448]	@ (8005708 <CreateMessage+0x40c>)
 8005548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800554a:	1c18      	adds	r0, r3, #0
 800554c:	f7fe f9a2 	bl	8003894 <__aeabi_f2d>
 8005550:	0002      	movs	r2, r0
 8005552:	000b      	movs	r3, r1
 8005554:	4d64      	ldr	r5, [pc, #400]	@ (80056e8 <CreateMessage+0x3ec>)
 8005556:	4978      	ldr	r1, [pc, #480]	@ (8005738 <CreateMessage+0x43c>)
 8005558:	4865      	ldr	r0, [pc, #404]	@ (80056f0 <CreateMessage+0x3f4>)
 800555a:	9202      	str	r2, [sp, #8]
 800555c:	9303      	str	r3, [sp, #12]
 800555e:	4b68      	ldr	r3, [pc, #416]	@ (8005700 <CreateMessage+0x404>)
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	002b      	movs	r3, r5
 8005564:	0022      	movs	r2, r4
 8005566:	f01f ff0b 	bl	8025380 <siprintf>
#endif
      index += strlen(message);
 800556a:	4b61      	ldr	r3, [pc, #388]	@ (80056f0 <CreateMessage+0x3f4>)
 800556c:	0018      	movs	r0, r3
 800556e:	f7fa fdfd 	bl	800016c <strlen>
 8005572:	0003      	movs	r3, r0
 8005574:	b299      	uxth	r1, r3
 8005576:	220e      	movs	r2, #14
 8005578:	18bb      	adds	r3, r7, r2
 800557a:	18ba      	adds	r2, r7, r2
 800557c:	8812      	ldrh	r2, [r2, #0]
 800557e:	188a      	adds	r2, r1, r2
 8005580:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005582:	1dbb      	adds	r3, r7, #6
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d019      	beq.n	80055be <CreateMessage+0x2c2>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800558a:	4b59      	ldr	r3, [pc, #356]	@ (80056f0 <CreateMessage+0x3f4>)
 800558c:	0018      	movs	r0, r3
 800558e:	f7fa fded 	bl	800016c <strlen>
 8005592:	0003      	movs	r3, r0
 8005594:	b29a      	uxth	r2, r3
 8005596:	4b56      	ldr	r3, [pc, #344]	@ (80056f0 <CreateMessage+0x3f4>)
 8005598:	0011      	movs	r1, r2
 800559a:	0018      	movs	r0, r3
 800559c:	f7ff fcaa 	bl	8004ef4 <ESP_Send>
 80055a0:	0003      	movs	r3, r0
 80055a2:	001a      	movs	r2, r3
 80055a4:	4b5b      	ldr	r3, [pc, #364]	@ (8005714 <CreateMessage+0x418>)
 80055a6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80055a8:	4b5b      	ldr	r3, [pc, #364]	@ (8005718 <CreateMessage+0x41c>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	001a      	movs	r2, r3
 80055ae:	4b59      	ldr	r3, [pc, #356]	@ (8005714 <CreateMessage+0x418>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	4013      	ands	r3, r2
 80055b4:	1e5a      	subs	r2, r3, #1
 80055b6:	4193      	sbcs	r3, r2
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	4b57      	ldr	r3, [pc, #348]	@ (8005718 <CreateMessage+0x41c>)
 80055bc:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 80055be:	4b4e      	ldr	r3, [pc, #312]	@ (80056f8 <CreateMessage+0x3fc>)
 80055c0:	485e      	ldr	r0, [pc, #376]	@ (800573c <CreateMessage+0x440>)
 80055c2:	220c      	movs	r2, #12
 80055c4:	0019      	movs	r1, r3
 80055c6:	f006 f883 	bl	800b6d0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 80055ca:	4a5d      	ldr	r2, [pc, #372]	@ (8005740 <CreateMessage+0x444>)
 80055cc:	4959      	ldr	r1, [pc, #356]	@ (8005734 <CreateMessage+0x438>)
 80055ce:	4b4a      	ldr	r3, [pc, #296]	@ (80056f8 <CreateMessage+0x3fc>)
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7ff fe37 	bl	8005244 <isKeyValid>
 80055d6:	1e03      	subs	r3, r0, #0
 80055d8:	d043      	beq.n	8005662 <CreateMessage+0x366>
      uint8ArrayToString(Buffer, keybuffer);
 80055da:	4a47      	ldr	r2, [pc, #284]	@ (80056f8 <CreateMessage+0x3fc>)
 80055dc:	4b48      	ldr	r3, [pc, #288]	@ (8005700 <CreateMessage+0x404>)
 80055de:	0011      	movs	r1, r2
 80055e0:	0018      	movs	r0, r3
 80055e2:	f7ff fe67 	bl	80052b4 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperaturemax);
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperaturemax);
 80055e6:	4b47      	ldr	r3, [pc, #284]	@ (8005704 <CreateMessage+0x408>)
 80055e8:	689c      	ldr	r4, [r3, #8]
 80055ea:	4b47      	ldr	r3, [pc, #284]	@ (8005708 <CreateMessage+0x40c>)
 80055ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ee:	1c18      	adds	r0, r3, #0
 80055f0:	f7fe f950 	bl	8003894 <__aeabi_f2d>
 80055f4:	0002      	movs	r2, r0
 80055f6:	000b      	movs	r3, r1
 80055f8:	4d3b      	ldr	r5, [pc, #236]	@ (80056e8 <CreateMessage+0x3ec>)
 80055fa:	4952      	ldr	r1, [pc, #328]	@ (8005744 <CreateMessage+0x448>)
 80055fc:	483c      	ldr	r0, [pc, #240]	@ (80056f0 <CreateMessage+0x3f4>)
 80055fe:	9202      	str	r2, [sp, #8]
 8005600:	9303      	str	r3, [sp, #12]
 8005602:	4b3f      	ldr	r3, [pc, #252]	@ (8005700 <CreateMessage+0x404>)
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	002b      	movs	r3, r5
 8005608:	0022      	movs	r2, r4
 800560a:	f01f feb9 	bl	8025380 <siprintf>
  #endif
      index += strlen(message);
 800560e:	4b38      	ldr	r3, [pc, #224]	@ (80056f0 <CreateMessage+0x3f4>)
 8005610:	0018      	movs	r0, r3
 8005612:	f7fa fdab 	bl	800016c <strlen>
 8005616:	0003      	movs	r3, r0
 8005618:	b299      	uxth	r1, r3
 800561a:	220e      	movs	r2, #14
 800561c:	18bb      	adds	r3, r7, r2
 800561e:	18ba      	adds	r2, r7, r2
 8005620:	8812      	ldrh	r2, [r2, #0]
 8005622:	188a      	adds	r2, r1, r2
 8005624:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005626:	1dbb      	adds	r3, r7, #6
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d019      	beq.n	8005662 <CreateMessage+0x366>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800562e:	4b30      	ldr	r3, [pc, #192]	@ (80056f0 <CreateMessage+0x3f4>)
 8005630:	0018      	movs	r0, r3
 8005632:	f7fa fd9b 	bl	800016c <strlen>
 8005636:	0003      	movs	r3, r0
 8005638:	b29a      	uxth	r2, r3
 800563a:	4b2d      	ldr	r3, [pc, #180]	@ (80056f0 <CreateMessage+0x3f4>)
 800563c:	0011      	movs	r1, r2
 800563e:	0018      	movs	r0, r3
 8005640:	f7ff fc58 	bl	8004ef4 <ESP_Send>
 8005644:	0003      	movs	r3, r0
 8005646:	001a      	movs	r2, r3
 8005648:	4b32      	ldr	r3, [pc, #200]	@ (8005714 <CreateMessage+0x418>)
 800564a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800564c:	4b32      	ldr	r3, [pc, #200]	@ (8005718 <CreateMessage+0x41c>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	001a      	movs	r2, r3
 8005652:	4b30      	ldr	r3, [pc, #192]	@ (8005714 <CreateMessage+0x418>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	4013      	ands	r3, r2
 8005658:	1e5a      	subs	r2, r3, #1
 800565a:	4193      	sbcs	r3, r2
 800565c:	b2da      	uxtb	r2, r3
 800565e:	4b2e      	ldr	r3, [pc, #184]	@ (8005718 <CreateMessage+0x41c>)
 8005660:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 8005662:	4b25      	ldr	r3, [pc, #148]	@ (80056f8 <CreateMessage+0x3fc>)
 8005664:	4838      	ldr	r0, [pc, #224]	@ (8005748 <CreateMessage+0x44c>)
 8005666:	220c      	movs	r2, #12
 8005668:	0019      	movs	r1, r3
 800566a:	f006 f831 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800566e:	4a22      	ldr	r2, [pc, #136]	@ (80056f8 <CreateMessage+0x3fc>)
 8005670:	4b23      	ldr	r3, [pc, #140]	@ (8005700 <CreateMessage+0x404>)
 8005672:	0011      	movs	r1, r2
 8005674:	0018      	movs	r0, r3
 8005676:	f7ff fe1d 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 800567a:	4b22      	ldr	r3, [pc, #136]	@ (8005704 <CreateMessage+0x408>)
 800567c:	689c      	ldr	r4, [r3, #8]
 800567e:	4b22      	ldr	r3, [pc, #136]	@ (8005708 <CreateMessage+0x40c>)
 8005680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005682:	1c18      	adds	r0, r3, #0
 8005684:	f7fe f906 	bl	8003894 <__aeabi_f2d>
 8005688:	0002      	movs	r2, r0
 800568a:	000b      	movs	r3, r1
 800568c:	4d16      	ldr	r5, [pc, #88]	@ (80056e8 <CreateMessage+0x3ec>)
 800568e:	492f      	ldr	r1, [pc, #188]	@ (800574c <CreateMessage+0x450>)
 8005690:	4817      	ldr	r0, [pc, #92]	@ (80056f0 <CreateMessage+0x3f4>)
 8005692:	9202      	str	r2, [sp, #8]
 8005694:	9303      	str	r3, [sp, #12]
 8005696:	4b1a      	ldr	r3, [pc, #104]	@ (8005700 <CreateMessage+0x404>)
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	002b      	movs	r3, r5
 800569c:	0022      	movs	r2, r4
 800569e:	f01f fe6f 	bl	8025380 <siprintf>
#endif
  index += strlen(message);
 80056a2:	4b13      	ldr	r3, [pc, #76]	@ (80056f0 <CreateMessage+0x3f4>)
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7fa fd61 	bl	800016c <strlen>
 80056aa:	0003      	movs	r3, r0
 80056ac:	b299      	uxth	r1, r3
 80056ae:	220e      	movs	r2, #14
 80056b0:	18bb      	adds	r3, r7, r2
 80056b2:	18ba      	adds	r2, r7, r2
 80056b4:	8812      	ldrh	r2, [r2, #0]
 80056b6:	188a      	adds	r2, r1, r2
 80056b8:	801a      	strh	r2, [r3, #0]
  if (send) {
 80056ba:	1dbb      	adds	r3, r7, #6
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d04e      	beq.n	8005760 <CreateMessage+0x464>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80056c2:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <CreateMessage+0x3f4>)
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7fa fd51 	bl	800016c <strlen>
 80056ca:	0003      	movs	r3, r0
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	4b08      	ldr	r3, [pc, #32]	@ (80056f0 <CreateMessage+0x3f4>)
 80056d0:	0011      	movs	r1, r2
 80056d2:	0018      	movs	r0, r3
 80056d4:	f7ff fc0e 	bl	8004ef4 <ESP_Send>
 80056d8:	0003      	movs	r3, r0
 80056da:	001a      	movs	r2, r3
 80056dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005714 <CreateMessage+0x418>)
 80056de:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80056e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <CreateMessage+0x41c>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	001a      	movs	r2, r3
 80056e6:	e033      	b.n	8005750 <CreateMessage+0x454>
 80056e8:	20000734 	.word	0x20000734
 80056ec:	0802d65c 	.word	0x0802d65c
 80056f0:	200005cc 	.word	0x200005cc
 80056f4:	08029ef8 	.word	0x08029ef8
 80056f8:	20000754 	.word	0x20000754
 80056fc:	0808000c 	.word	0x0808000c
 8005700:	20000760 	.word	0x20000760
 8005704:	200005ac 	.word	0x200005ac
 8005708:	2000067c 	.word	0x2000067c
 800570c:	08029efc 	.word	0x08029efc
 8005710:	200005cd 	.word	0x200005cd
 8005714:	20000779 	.word	0x20000779
 8005718:	2000002d 	.word	0x2000002d
 800571c:	08080018 	.word	0x08080018
 8005720:	08029f50 	.word	0x08029f50
 8005724:	08080030 	.word	0x08080030
 8005728:	08029fa8 	.word	0x08029fa8
 800572c:	0808003c 	.word	0x0808003c
 8005730:	08029ffc 	.word	0x08029ffc
 8005734:	0802a000 	.word	0x0802a000
 8005738:	0802a008 	.word	0x0802a008
 800573c:	080800e0 	.word	0x080800e0
 8005740:	0802a064 	.word	0x0802a064
 8005744:	0802a070 	.word	0x0802a070
 8005748:	08080048 	.word	0x08080048
 800574c:	0802a0cc 	.word	0x0802a0cc
 8005750:	4be8      	ldr	r3, [pc, #928]	@ (8005af4 <CreateMessage+0x7f8>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	4013      	ands	r3, r2
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	4193      	sbcs	r3, r2
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4be6      	ldr	r3, [pc, #920]	@ (8005af8 <CreateMessage+0x7fc>)
 800575e:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8005760:	1dfb      	adds	r3, r7, #7
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	4053      	eors	r3, r2
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d100      	bne.n	8005770 <CreateMessage+0x474>
 800576e:	e2bd      	b.n	8005cec <CreateMessage+0x9f0>
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 8005770:	4be2      	ldr	r3, [pc, #904]	@ (8005afc <CreateMessage+0x800>)
 8005772:	48e3      	ldr	r0, [pc, #908]	@ (8005b00 <CreateMessage+0x804>)
 8005774:	220c      	movs	r2, #12
 8005776:	0019      	movs	r1, r3
 8005778:	f005 ffaa 	bl	800b6d0 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 800577c:	4adf      	ldr	r2, [pc, #892]	@ (8005afc <CreateMessage+0x800>)
 800577e:	4be1      	ldr	r3, [pc, #900]	@ (8005b04 <CreateMessage+0x808>)
 8005780:	0011      	movs	r1, r2
 8005782:	0018      	movs	r0, r3
 8005784:	f7ff fd96 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8005788:	4bdf      	ldr	r3, [pc, #892]	@ (8005b08 <CreateMessage+0x80c>)
 800578a:	689c      	ldr	r4, [r3, #8]
 800578c:	4bdf      	ldr	r3, [pc, #892]	@ (8005b0c <CreateMessage+0x810>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	1c18      	adds	r0, r3, #0
 8005792:	f7fe f87f 	bl	8003894 <__aeabi_f2d>
 8005796:	0002      	movs	r2, r0
 8005798:	000b      	movs	r3, r1
 800579a:	4ddd      	ldr	r5, [pc, #884]	@ (8005b10 <CreateMessage+0x814>)
 800579c:	49dd      	ldr	r1, [pc, #884]	@ (8005b14 <CreateMessage+0x818>)
 800579e:	48de      	ldr	r0, [pc, #888]	@ (8005b18 <CreateMessage+0x81c>)
 80057a0:	9202      	str	r2, [sp, #8]
 80057a2:	9303      	str	r3, [sp, #12]
 80057a4:	4bd7      	ldr	r3, [pc, #860]	@ (8005b04 <CreateMessage+0x808>)
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	002b      	movs	r3, r5
 80057aa:	0022      	movs	r2, r4
 80057ac:	f01f fde8 	bl	8025380 <siprintf>
#endif
    index += strlen(message);
 80057b0:	4bd9      	ldr	r3, [pc, #868]	@ (8005b18 <CreateMessage+0x81c>)
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7fa fcda 	bl	800016c <strlen>
 80057b8:	0003      	movs	r3, r0
 80057ba:	b299      	uxth	r1, r3
 80057bc:	220e      	movs	r2, #14
 80057be:	18bb      	adds	r3, r7, r2
 80057c0:	18ba      	adds	r2, r7, r2
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	188a      	adds	r2, r1, r2
 80057c6:	801a      	strh	r2, [r3, #0]
    if (send) {
 80057c8:	1dbb      	adds	r3, r7, #6
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d019      	beq.n	8005804 <CreateMessage+0x508>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80057d0:	4bd1      	ldr	r3, [pc, #836]	@ (8005b18 <CreateMessage+0x81c>)
 80057d2:	0018      	movs	r0, r3
 80057d4:	f7fa fcca 	bl	800016c <strlen>
 80057d8:	0003      	movs	r3, r0
 80057da:	b29a      	uxth	r2, r3
 80057dc:	4bce      	ldr	r3, [pc, #824]	@ (8005b18 <CreateMessage+0x81c>)
 80057de:	0011      	movs	r1, r2
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7ff fb87 	bl	8004ef4 <ESP_Send>
 80057e6:	0003      	movs	r3, r0
 80057e8:	001a      	movs	r2, r3
 80057ea:	4bc2      	ldr	r3, [pc, #776]	@ (8005af4 <CreateMessage+0x7f8>)
 80057ec:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80057ee:	4bc2      	ldr	r3, [pc, #776]	@ (8005af8 <CreateMessage+0x7fc>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	001a      	movs	r2, r3
 80057f4:	4bbf      	ldr	r3, [pc, #764]	@ (8005af4 <CreateMessage+0x7f8>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	4013      	ands	r3, r2
 80057fa:	1e5a      	subs	r2, r3, #1
 80057fc:	4193      	sbcs	r3, r2
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4bbd      	ldr	r3, [pc, #756]	@ (8005af8 <CreateMessage+0x7fc>)
 8005802:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005804:	4bc5      	ldr	r3, [pc, #788]	@ (8005b1c <CreateMessage+0x820>)
 8005806:	791b      	ldrb	r3, [r3, #4]
 8005808:	2b35      	cmp	r3, #53	@ 0x35
 800580a:	d147      	bne.n	800589c <CreateMessage+0x5a0>
 800580c:	f003 fd76 	bl	80092fc <Check_USB_PowerOn>
 8005810:	1e03      	subs	r3, r0, #0
 8005812:	d043      	beq.n	800589c <CreateMessage+0x5a0>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005814:	4bb9      	ldr	r3, [pc, #740]	@ (8005afc <CreateMessage+0x800>)
 8005816:	48c2      	ldr	r0, [pc, #776]	@ (8005b20 <CreateMessage+0x824>)
 8005818:	220c      	movs	r2, #12
 800581a:	0019      	movs	r1, r3
 800581c:	f005 ff58 	bl	800b6d0 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005820:	4ab6      	ldr	r2, [pc, #728]	@ (8005afc <CreateMessage+0x800>)
 8005822:	4bb8      	ldr	r3, [pc, #736]	@ (8005b04 <CreateMessage+0x808>)
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fd44 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 800582c:	4bb6      	ldr	r3, [pc, #728]	@ (8005b08 <CreateMessage+0x80c>)
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	4bbc      	ldr	r3, [pc, #752]	@ (8005b24 <CreateMessage+0x828>)
 8005832:	215e      	movs	r1, #94	@ 0x5e
 8005834:	5a5b      	ldrh	r3, [r3, r1]
 8005836:	4cb6      	ldr	r4, [pc, #728]	@ (8005b10 <CreateMessage+0x814>)
 8005838:	49bb      	ldr	r1, [pc, #748]	@ (8005b28 <CreateMessage+0x82c>)
 800583a:	48b7      	ldr	r0, [pc, #732]	@ (8005b18 <CreateMessage+0x81c>)
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	4bb1      	ldr	r3, [pc, #708]	@ (8005b04 <CreateMessage+0x808>)
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	0023      	movs	r3, r4
 8005844:	f01f fd9c 	bl	8025380 <siprintf>
#endif
      index += strlen(message);
 8005848:	4bb3      	ldr	r3, [pc, #716]	@ (8005b18 <CreateMessage+0x81c>)
 800584a:	0018      	movs	r0, r3
 800584c:	f7fa fc8e 	bl	800016c <strlen>
 8005850:	0003      	movs	r3, r0
 8005852:	b299      	uxth	r1, r3
 8005854:	220e      	movs	r2, #14
 8005856:	18bb      	adds	r3, r7, r2
 8005858:	18ba      	adds	r2, r7, r2
 800585a:	8812      	ldrh	r2, [r2, #0]
 800585c:	188a      	adds	r2, r1, r2
 800585e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005860:	1dbb      	adds	r3, r7, #6
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d019      	beq.n	800589c <CreateMessage+0x5a0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005868:	4bab      	ldr	r3, [pc, #684]	@ (8005b18 <CreateMessage+0x81c>)
 800586a:	0018      	movs	r0, r3
 800586c:	f7fa fc7e 	bl	800016c <strlen>
 8005870:	0003      	movs	r3, r0
 8005872:	b29a      	uxth	r2, r3
 8005874:	4ba8      	ldr	r3, [pc, #672]	@ (8005b18 <CreateMessage+0x81c>)
 8005876:	0011      	movs	r1, r2
 8005878:	0018      	movs	r0, r3
 800587a:	f7ff fb3b 	bl	8004ef4 <ESP_Send>
 800587e:	0003      	movs	r3, r0
 8005880:	001a      	movs	r2, r3
 8005882:	4b9c      	ldr	r3, [pc, #624]	@ (8005af4 <CreateMessage+0x7f8>)
 8005884:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005886:	4b9c      	ldr	r3, [pc, #624]	@ (8005af8 <CreateMessage+0x7fc>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	001a      	movs	r2, r3
 800588c:	4b99      	ldr	r3, [pc, #612]	@ (8005af4 <CreateMessage+0x7f8>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	4013      	ands	r3, r2
 8005892:	1e5a      	subs	r2, r3, #1
 8005894:	4193      	sbcs	r3, r2
 8005896:	b2da      	uxtb	r2, r3
 8005898:	4b97      	ldr	r3, [pc, #604]	@ (8005af8 <CreateMessage+0x7fc>)
 800589a:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 800589c:	4b97      	ldr	r3, [pc, #604]	@ (8005afc <CreateMessage+0x800>)
 800589e:	48a3      	ldr	r0, [pc, #652]	@ (8005b2c <CreateMessage+0x830>)
 80058a0:	220c      	movs	r2, #12
 80058a2:	0019      	movs	r1, r3
 80058a4:	f005 ff14 	bl	800b6d0 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 80058a8:	4b9c      	ldr	r3, [pc, #624]	@ (8005b1c <CreateMessage+0x820>)
 80058aa:	791b      	ldrb	r3, [r3, #4]
 80058ac:	2b34      	cmp	r3, #52	@ 0x34
 80058ae:	d003      	beq.n	80058b8 <CreateMessage+0x5bc>
 80058b0:	4b9a      	ldr	r3, [pc, #616]	@ (8005b1c <CreateMessage+0x820>)
 80058b2:	791b      	ldrb	r3, [r3, #4]
 80058b4:	2b35      	cmp	r3, #53	@ 0x35
 80058b6:	d14b      	bne.n	8005950 <CreateMessage+0x654>
 80058b8:	4a9d      	ldr	r2, [pc, #628]	@ (8005b30 <CreateMessage+0x834>)
 80058ba:	499e      	ldr	r1, [pc, #632]	@ (8005b34 <CreateMessage+0x838>)
 80058bc:	4b8f      	ldr	r3, [pc, #572]	@ (8005afc <CreateMessage+0x800>)
 80058be:	0018      	movs	r0, r3
 80058c0:	f7ff fcc0 	bl	8005244 <isKeyValid>
 80058c4:	1e03      	subs	r3, r0, #0
 80058c6:	d043      	beq.n	8005950 <CreateMessage+0x654>
      uint8ArrayToString(Buffer, keybuffer);
 80058c8:	4a8c      	ldr	r2, [pc, #560]	@ (8005afc <CreateMessage+0x800>)
 80058ca:	4b8e      	ldr	r3, [pc, #568]	@ (8005b04 <CreateMessage+0x808>)
 80058cc:	0011      	movs	r1, r2
 80058ce:	0018      	movs	r0, r3
 80058d0:	f7ff fcf0 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_temperature);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
 80058d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005b08 <CreateMessage+0x80c>)
 80058d6:	689c      	ldr	r4, [r3, #8]
 80058d8:	4b92      	ldr	r3, [pc, #584]	@ (8005b24 <CreateMessage+0x828>)
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	1c18      	adds	r0, r3, #0
 80058de:	f7fd ffd9 	bl	8003894 <__aeabi_f2d>
 80058e2:	0002      	movs	r2, r0
 80058e4:	000b      	movs	r3, r1
 80058e6:	4d8a      	ldr	r5, [pc, #552]	@ (8005b10 <CreateMessage+0x814>)
 80058e8:	4993      	ldr	r1, [pc, #588]	@ (8005b38 <CreateMessage+0x83c>)
 80058ea:	488b      	ldr	r0, [pc, #556]	@ (8005b18 <CreateMessage+0x81c>)
 80058ec:	9202      	str	r2, [sp, #8]
 80058ee:	9303      	str	r3, [sp, #12]
 80058f0:	4b84      	ldr	r3, [pc, #528]	@ (8005b04 <CreateMessage+0x808>)
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	002b      	movs	r3, r5
 80058f6:	0022      	movs	r2, r4
 80058f8:	f01f fd42 	bl	8025380 <siprintf>
#endif
      index += strlen(message);
 80058fc:	4b86      	ldr	r3, [pc, #536]	@ (8005b18 <CreateMessage+0x81c>)
 80058fe:	0018      	movs	r0, r3
 8005900:	f7fa fc34 	bl	800016c <strlen>
 8005904:	0003      	movs	r3, r0
 8005906:	b299      	uxth	r1, r3
 8005908:	220e      	movs	r2, #14
 800590a:	18bb      	adds	r3, r7, r2
 800590c:	18ba      	adds	r2, r7, r2
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	188a      	adds	r2, r1, r2
 8005912:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005914:	1dbb      	adds	r3, r7, #6
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d019      	beq.n	8005950 <CreateMessage+0x654>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800591c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b18 <CreateMessage+0x81c>)
 800591e:	0018      	movs	r0, r3
 8005920:	f7fa fc24 	bl	800016c <strlen>
 8005924:	0003      	movs	r3, r0
 8005926:	b29a      	uxth	r2, r3
 8005928:	4b7b      	ldr	r3, [pc, #492]	@ (8005b18 <CreateMessage+0x81c>)
 800592a:	0011      	movs	r1, r2
 800592c:	0018      	movs	r0, r3
 800592e:	f7ff fae1 	bl	8004ef4 <ESP_Send>
 8005932:	0003      	movs	r3, r0
 8005934:	001a      	movs	r2, r3
 8005936:	4b6f      	ldr	r3, [pc, #444]	@ (8005af4 <CreateMessage+0x7f8>)
 8005938:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800593a:	4b6f      	ldr	r3, [pc, #444]	@ (8005af8 <CreateMessage+0x7fc>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	001a      	movs	r2, r3
 8005940:	4b6c      	ldr	r3, [pc, #432]	@ (8005af4 <CreateMessage+0x7f8>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	4013      	ands	r3, r2
 8005946:	1e5a      	subs	r2, r3, #1
 8005948:	4193      	sbcs	r3, r2
 800594a:	b2da      	uxtb	r2, r3
 800594c:	4b6a      	ldr	r3, [pc, #424]	@ (8005af8 <CreateMessage+0x7fc>)
 800594e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005950:	4b6a      	ldr	r3, [pc, #424]	@ (8005afc <CreateMessage+0x800>)
 8005952:	487a      	ldr	r0, [pc, #488]	@ (8005b3c <CreateMessage+0x840>)
 8005954:	220c      	movs	r2, #12
 8005956:	0019      	movs	r1, r3
 8005958:	f005 feba 	bl	800b6d0 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 800595c:	4b6f      	ldr	r3, [pc, #444]	@ (8005b1c <CreateMessage+0x820>)
 800595e:	791b      	ldrb	r3, [r3, #4]
 8005960:	2b34      	cmp	r3, #52	@ 0x34
 8005962:	d003      	beq.n	800596c <CreateMessage+0x670>
 8005964:	4b6d      	ldr	r3, [pc, #436]	@ (8005b1c <CreateMessage+0x820>)
 8005966:	791b      	ldrb	r3, [r3, #4]
 8005968:	2b35      	cmp	r3, #53	@ 0x35
 800596a:	d14b      	bne.n	8005a04 <CreateMessage+0x708>
 800596c:	4a74      	ldr	r2, [pc, #464]	@ (8005b40 <CreateMessage+0x844>)
 800596e:	4971      	ldr	r1, [pc, #452]	@ (8005b34 <CreateMessage+0x838>)
 8005970:	4b62      	ldr	r3, [pc, #392]	@ (8005afc <CreateMessage+0x800>)
 8005972:	0018      	movs	r0, r3
 8005974:	f7ff fc66 	bl	8005244 <isKeyValid>
 8005978:	1e03      	subs	r3, r0, #0
 800597a:	d043      	beq.n	8005a04 <CreateMessage+0x708>
      uint8ArrayToString(Buffer, keybuffer);
 800597c:	4a5f      	ldr	r2, [pc, #380]	@ (8005afc <CreateMessage+0x800>)
 800597e:	4b61      	ldr	r3, [pc, #388]	@ (8005b04 <CreateMessage+0x808>)
 8005980:	0011      	movs	r1, r2
 8005982:	0018      	movs	r0, r3
 8005984:	f7ff fc96 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_humidity);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
 8005988:	4b5f      	ldr	r3, [pc, #380]	@ (8005b08 <CreateMessage+0x80c>)
 800598a:	689c      	ldr	r4, [r3, #8]
 800598c:	4b65      	ldr	r3, [pc, #404]	@ (8005b24 <CreateMessage+0x828>)
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	1c18      	adds	r0, r3, #0
 8005992:	f7fd ff7f 	bl	8003894 <__aeabi_f2d>
 8005996:	0002      	movs	r2, r0
 8005998:	000b      	movs	r3, r1
 800599a:	4d5d      	ldr	r5, [pc, #372]	@ (8005b10 <CreateMessage+0x814>)
 800599c:	4969      	ldr	r1, [pc, #420]	@ (8005b44 <CreateMessage+0x848>)
 800599e:	485e      	ldr	r0, [pc, #376]	@ (8005b18 <CreateMessage+0x81c>)
 80059a0:	9202      	str	r2, [sp, #8]
 80059a2:	9303      	str	r3, [sp, #12]
 80059a4:	4b57      	ldr	r3, [pc, #348]	@ (8005b04 <CreateMessage+0x808>)
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	002b      	movs	r3, r5
 80059aa:	0022      	movs	r2, r4
 80059ac:	f01f fce8 	bl	8025380 <siprintf>
#endif
      index += strlen(message);
 80059b0:	4b59      	ldr	r3, [pc, #356]	@ (8005b18 <CreateMessage+0x81c>)
 80059b2:	0018      	movs	r0, r3
 80059b4:	f7fa fbda 	bl	800016c <strlen>
 80059b8:	0003      	movs	r3, r0
 80059ba:	b299      	uxth	r1, r3
 80059bc:	220e      	movs	r2, #14
 80059be:	18bb      	adds	r3, r7, r2
 80059c0:	18ba      	adds	r2, r7, r2
 80059c2:	8812      	ldrh	r2, [r2, #0]
 80059c4:	188a      	adds	r2, r1, r2
 80059c6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80059c8:	1dbb      	adds	r3, r7, #6
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d019      	beq.n	8005a04 <CreateMessage+0x708>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80059d0:	4b51      	ldr	r3, [pc, #324]	@ (8005b18 <CreateMessage+0x81c>)
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7fa fbca 	bl	800016c <strlen>
 80059d8:	0003      	movs	r3, r0
 80059da:	b29a      	uxth	r2, r3
 80059dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005b18 <CreateMessage+0x81c>)
 80059de:	0011      	movs	r1, r2
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff fa87 	bl	8004ef4 <ESP_Send>
 80059e6:	0003      	movs	r3, r0
 80059e8:	001a      	movs	r2, r3
 80059ea:	4b42      	ldr	r3, [pc, #264]	@ (8005af4 <CreateMessage+0x7f8>)
 80059ec:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80059ee:	4b42      	ldr	r3, [pc, #264]	@ (8005af8 <CreateMessage+0x7fc>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	001a      	movs	r2, r3
 80059f4:	4b3f      	ldr	r3, [pc, #252]	@ (8005af4 <CreateMessage+0x7f8>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	4013      	ands	r3, r2
 80059fa:	1e5a      	subs	r2, r3, #1
 80059fc:	4193      	sbcs	r3, r2
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	4b3d      	ldr	r3, [pc, #244]	@ (8005af8 <CreateMessage+0x7fc>)
 8005a02:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 8005a04:	f007 ffbc 	bl	800d980 <sen5x_Get_sen5x_enable_state>
 8005a08:	1e03      	subs	r3, r0, #0
 8005a0a:	d100      	bne.n	8005a0e <CreateMessage+0x712>
 8005a0c:	e16e      	b.n	8005cec <CreateMessage+0x9f0>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8005afc <CreateMessage+0x800>)
 8005a10:	484d      	ldr	r0, [pc, #308]	@ (8005b48 <CreateMessage+0x84c>)
 8005a12:	220c      	movs	r2, #12
 8005a14:	0019      	movs	r1, r3
 8005a16:	f005 fe5b 	bl	800b6d0 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005a1a:	4a4c      	ldr	r2, [pc, #304]	@ (8005b4c <CreateMessage+0x850>)
 8005a1c:	494c      	ldr	r1, [pc, #304]	@ (8005b50 <CreateMessage+0x854>)
 8005a1e:	4b37      	ldr	r3, [pc, #220]	@ (8005afc <CreateMessage+0x800>)
 8005a20:	0018      	movs	r0, r3
 8005a22:	f7ff fc0f 	bl	8005244 <isKeyValid>
 8005a26:	1e03      	subs	r3, r0, #0
 8005a28:	d043      	beq.n	8005ab2 <CreateMessage+0x7b6>
        uint8ArrayToString(Buffer, keybuffer);
 8005a2a:	4a34      	ldr	r2, [pc, #208]	@ (8005afc <CreateMessage+0x800>)
 8005a2c:	4b35      	ldr	r3, [pc, #212]	@ (8005b04 <CreateMessage+0x808>)
 8005a2e:	0011      	movs	r1, r2
 8005a30:	0018      	movs	r0, r3
 8005a32:	f7ff fc3f 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
 8005a36:	4b34      	ldr	r3, [pc, #208]	@ (8005b08 <CreateMessage+0x80c>)
 8005a38:	689c      	ldr	r4, [r3, #8]
 8005a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b24 <CreateMessage+0x828>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	1c18      	adds	r0, r3, #0
 8005a40:	f7fd ff28 	bl	8003894 <__aeabi_f2d>
 8005a44:	0002      	movs	r2, r0
 8005a46:	000b      	movs	r3, r1
 8005a48:	4d31      	ldr	r5, [pc, #196]	@ (8005b10 <CreateMessage+0x814>)
 8005a4a:	4942      	ldr	r1, [pc, #264]	@ (8005b54 <CreateMessage+0x858>)
 8005a4c:	4832      	ldr	r0, [pc, #200]	@ (8005b18 <CreateMessage+0x81c>)
 8005a4e:	9202      	str	r2, [sp, #8]
 8005a50:	9303      	str	r3, [sp, #12]
 8005a52:	4b2c      	ldr	r3, [pc, #176]	@ (8005b04 <CreateMessage+0x808>)
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	002b      	movs	r3, r5
 8005a58:	0022      	movs	r2, r4
 8005a5a:	f01f fc91 	bl	8025380 <siprintf>
#endif
        index += strlen(message);
 8005a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005b18 <CreateMessage+0x81c>)
 8005a60:	0018      	movs	r0, r3
 8005a62:	f7fa fb83 	bl	800016c <strlen>
 8005a66:	0003      	movs	r3, r0
 8005a68:	b299      	uxth	r1, r3
 8005a6a:	220e      	movs	r2, #14
 8005a6c:	18bb      	adds	r3, r7, r2
 8005a6e:	18ba      	adds	r2, r7, r2
 8005a70:	8812      	ldrh	r2, [r2, #0]
 8005a72:	188a      	adds	r2, r1, r2
 8005a74:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005a76:	1dbb      	adds	r3, r7, #6
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d019      	beq.n	8005ab2 <CreateMessage+0x7b6>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005a7e:	4b26      	ldr	r3, [pc, #152]	@ (8005b18 <CreateMessage+0x81c>)
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7fa fb73 	bl	800016c <strlen>
 8005a86:	0003      	movs	r3, r0
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	4b23      	ldr	r3, [pc, #140]	@ (8005b18 <CreateMessage+0x81c>)
 8005a8c:	0011      	movs	r1, r2
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f7ff fa30 	bl	8004ef4 <ESP_Send>
 8005a94:	0003      	movs	r3, r0
 8005a96:	001a      	movs	r2, r3
 8005a98:	4b16      	ldr	r3, [pc, #88]	@ (8005af4 <CreateMessage+0x7f8>)
 8005a9a:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005a9c:	4b16      	ldr	r3, [pc, #88]	@ (8005af8 <CreateMessage+0x7fc>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	001a      	movs	r2, r3
 8005aa2:	4b14      	ldr	r3, [pc, #80]	@ (8005af4 <CreateMessage+0x7f8>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	1e5a      	subs	r2, r3, #1
 8005aaa:	4193      	sbcs	r3, r2
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	4b12      	ldr	r3, [pc, #72]	@ (8005af8 <CreateMessage+0x7fc>)
 8005ab0:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005ab2:	4b12      	ldr	r3, [pc, #72]	@ (8005afc <CreateMessage+0x800>)
 8005ab4:	4828      	ldr	r0, [pc, #160]	@ (8005b58 <CreateMessage+0x85c>)
 8005ab6:	220c      	movs	r2, #12
 8005ab8:	0019      	movs	r1, r3
 8005aba:	f005 fe09 	bl	800b6d0 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005abe:	4a0f      	ldr	r2, [pc, #60]	@ (8005afc <CreateMessage+0x800>)
 8005ac0:	4b10      	ldr	r3, [pc, #64]	@ (8005b04 <CreateMessage+0x808>)
 8005ac2:	0011      	movs	r1, r2
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7ff fbf5 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 8005aca:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <CreateMessage+0x80c>)
 8005acc:	689c      	ldr	r4, [r3, #8]
 8005ace:	4b15      	ldr	r3, [pc, #84]	@ (8005b24 <CreateMessage+0x828>)
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	1c18      	adds	r0, r3, #0
 8005ad4:	f7fd fede 	bl	8003894 <__aeabi_f2d>
 8005ad8:	0002      	movs	r2, r0
 8005ada:	000b      	movs	r3, r1
 8005adc:	4d0c      	ldr	r5, [pc, #48]	@ (8005b10 <CreateMessage+0x814>)
 8005ade:	491f      	ldr	r1, [pc, #124]	@ (8005b5c <CreateMessage+0x860>)
 8005ae0:	480d      	ldr	r0, [pc, #52]	@ (8005b18 <CreateMessage+0x81c>)
 8005ae2:	9202      	str	r2, [sp, #8]
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	4b07      	ldr	r3, [pc, #28]	@ (8005b04 <CreateMessage+0x808>)
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	002b      	movs	r3, r5
 8005aec:	0022      	movs	r2, r4
 8005aee:	f01f fc47 	bl	8025380 <siprintf>
 8005af2:	e035      	b.n	8005b60 <CreateMessage+0x864>
 8005af4:	20000779 	.word	0x20000779
 8005af8:	2000002d 	.word	0x2000002d
 8005afc:	20000754 	.word	0x20000754
 8005b00:	08080078 	.word	0x08080078
 8005b04:	20000760 	.word	0x20000760
 8005b08:	200005ac 	.word	0x200005ac
 8005b0c:	200005c8 	.word	0x200005c8
 8005b10:	20000734 	.word	0x20000734
 8005b14:	0802a128 	.word	0x0802a128
 8005b18:	200005cc 	.word	0x200005cc
 8005b1c:	20000ed0 	.word	0x20000ed0
 8005b20:	08080024 	.word	0x08080024
 8005b24:	2000067c 	.word	0x2000067c
 8005b28:	0802a188 	.word	0x0802a188
 8005b2c:	08080170 	.word	0x08080170
 8005b30:	0802a1dc 	.word	0x0802a1dc
 8005b34:	0802a1e8 	.word	0x0802a1e8
 8005b38:	0802a1f0 	.word	0x0802a1f0
 8005b3c:	0808017c 	.word	0x0808017c
 8005b40:	0802a24c 	.word	0x0802a24c
 8005b44:	0802a258 	.word	0x0802a258
 8005b48:	080800b0 	.word	0x080800b0
 8005b4c:	0802a2b8 	.word	0x0802a2b8
 8005b50:	0802a2c4 	.word	0x0802a2c4
 8005b54:	0802a2c8 	.word	0x0802a2c8
 8005b58:	08080054 	.word	0x08080054
 8005b5c:	0802a320 	.word	0x0802a320
#endif
      index += strlen(message);
 8005b60:	4beb      	ldr	r3, [pc, #940]	@ (8005f10 <CreateMessage+0xc14>)
 8005b62:	0018      	movs	r0, r3
 8005b64:	f7fa fb02 	bl	800016c <strlen>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	b299      	uxth	r1, r3
 8005b6c:	220e      	movs	r2, #14
 8005b6e:	18bb      	adds	r3, r7, r2
 8005b70:	18ba      	adds	r2, r7, r2
 8005b72:	8812      	ldrh	r2, [r2, #0]
 8005b74:	188a      	adds	r2, r1, r2
 8005b76:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b78:	1dbb      	adds	r3, r7, #6
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d019      	beq.n	8005bb4 <CreateMessage+0x8b8>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b80:	4be3      	ldr	r3, [pc, #908]	@ (8005f10 <CreateMessage+0xc14>)
 8005b82:	0018      	movs	r0, r3
 8005b84:	f7fa faf2 	bl	800016c <strlen>
 8005b88:	0003      	movs	r3, r0
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	4be0      	ldr	r3, [pc, #896]	@ (8005f10 <CreateMessage+0xc14>)
 8005b8e:	0011      	movs	r1, r2
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7ff f9af 	bl	8004ef4 <ESP_Send>
 8005b96:	0003      	movs	r3, r0
 8005b98:	001a      	movs	r2, r3
 8005b9a:	4bde      	ldr	r3, [pc, #888]	@ (8005f14 <CreateMessage+0xc18>)
 8005b9c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005b9e:	4bde      	ldr	r3, [pc, #888]	@ (8005f18 <CreateMessage+0xc1c>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	001a      	movs	r2, r3
 8005ba4:	4bdb      	ldr	r3, [pc, #876]	@ (8005f14 <CreateMessage+0xc18>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	1e5a      	subs	r2, r3, #1
 8005bac:	4193      	sbcs	r3, r2
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	4bd9      	ldr	r3, [pc, #868]	@ (8005f18 <CreateMessage+0xc1c>)
 8005bb2:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005bb4:	4bd9      	ldr	r3, [pc, #868]	@ (8005f1c <CreateMessage+0xc20>)
 8005bb6:	48da      	ldr	r0, [pc, #872]	@ (8005f20 <CreateMessage+0xc24>)
 8005bb8:	220c      	movs	r2, #12
 8005bba:	0019      	movs	r1, r3
 8005bbc:	f005 fd88 	bl	800b6d0 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005bc0:	4ad8      	ldr	r2, [pc, #864]	@ (8005f24 <CreateMessage+0xc28>)
 8005bc2:	49d9      	ldr	r1, [pc, #868]	@ (8005f28 <CreateMessage+0xc2c>)
 8005bc4:	4bd5      	ldr	r3, [pc, #852]	@ (8005f1c <CreateMessage+0xc20>)
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f7ff fb3c 	bl	8005244 <isKeyValid>
 8005bcc:	1e03      	subs	r3, r0, #0
 8005bce:	d043      	beq.n	8005c58 <CreateMessage+0x95c>
        uint8ArrayToString(Buffer, keybuffer);
 8005bd0:	4ad2      	ldr	r2, [pc, #840]	@ (8005f1c <CreateMessage+0xc20>)
 8005bd2:	4bd6      	ldr	r3, [pc, #856]	@ (8005f2c <CreateMessage+0xc30>)
 8005bd4:	0011      	movs	r1, r2
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f7ff fb6c 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
 8005bdc:	4bd4      	ldr	r3, [pc, #848]	@ (8005f30 <CreateMessage+0xc34>)
 8005bde:	689c      	ldr	r4, [r3, #8]
 8005be0:	4bd4      	ldr	r3, [pc, #848]	@ (8005f34 <CreateMessage+0xc38>)
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	1c18      	adds	r0, r3, #0
 8005be6:	f7fd fe55 	bl	8003894 <__aeabi_f2d>
 8005bea:	0002      	movs	r2, r0
 8005bec:	000b      	movs	r3, r1
 8005bee:	4dd2      	ldr	r5, [pc, #840]	@ (8005f38 <CreateMessage+0xc3c>)
 8005bf0:	49d2      	ldr	r1, [pc, #840]	@ (8005f3c <CreateMessage+0xc40>)
 8005bf2:	48c7      	ldr	r0, [pc, #796]	@ (8005f10 <CreateMessage+0xc14>)
 8005bf4:	9202      	str	r2, [sp, #8]
 8005bf6:	9303      	str	r3, [sp, #12]
 8005bf8:	4bcc      	ldr	r3, [pc, #816]	@ (8005f2c <CreateMessage+0xc30>)
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	002b      	movs	r3, r5
 8005bfe:	0022      	movs	r2, r4
 8005c00:	f01f fbbe 	bl	8025380 <siprintf>
#endif
        index += strlen(message);
 8005c04:	4bc2      	ldr	r3, [pc, #776]	@ (8005f10 <CreateMessage+0xc14>)
 8005c06:	0018      	movs	r0, r3
 8005c08:	f7fa fab0 	bl	800016c <strlen>
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	b299      	uxth	r1, r3
 8005c10:	220e      	movs	r2, #14
 8005c12:	18bb      	adds	r3, r7, r2
 8005c14:	18ba      	adds	r2, r7, r2
 8005c16:	8812      	ldrh	r2, [r2, #0]
 8005c18:	188a      	adds	r2, r1, r2
 8005c1a:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005c1c:	1dbb      	adds	r3, r7, #6
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d019      	beq.n	8005c58 <CreateMessage+0x95c>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005c24:	4bba      	ldr	r3, [pc, #744]	@ (8005f10 <CreateMessage+0xc14>)
 8005c26:	0018      	movs	r0, r3
 8005c28:	f7fa faa0 	bl	800016c <strlen>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	4bb7      	ldr	r3, [pc, #732]	@ (8005f10 <CreateMessage+0xc14>)
 8005c32:	0011      	movs	r1, r2
 8005c34:	0018      	movs	r0, r3
 8005c36:	f7ff f95d 	bl	8004ef4 <ESP_Send>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	001a      	movs	r2, r3
 8005c3e:	4bb5      	ldr	r3, [pc, #724]	@ (8005f14 <CreateMessage+0xc18>)
 8005c40:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005c42:	4bb5      	ldr	r3, [pc, #724]	@ (8005f18 <CreateMessage+0xc1c>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	001a      	movs	r2, r3
 8005c48:	4bb2      	ldr	r3, [pc, #712]	@ (8005f14 <CreateMessage+0xc18>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	1e5a      	subs	r2, r3, #1
 8005c50:	4193      	sbcs	r3, r2
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	4bb0      	ldr	r3, [pc, #704]	@ (8005f18 <CreateMessage+0xc1c>)
 8005c56:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005c58:	4bb0      	ldr	r3, [pc, #704]	@ (8005f1c <CreateMessage+0xc20>)
 8005c5a:	48b9      	ldr	r0, [pc, #740]	@ (8005f40 <CreateMessage+0xc44>)
 8005c5c:	220c      	movs	r2, #12
 8005c5e:	0019      	movs	r1, r3
 8005c60:	f005 fd36 	bl	800b6d0 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005c64:	4aad      	ldr	r2, [pc, #692]	@ (8005f1c <CreateMessage+0xc20>)
 8005c66:	4bb1      	ldr	r3, [pc, #708]	@ (8005f2c <CreateMessage+0xc30>)
 8005c68:	0011      	movs	r1, r2
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f7ff fb22 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 8005c70:	4baf      	ldr	r3, [pc, #700]	@ (8005f30 <CreateMessage+0xc34>)
 8005c72:	689c      	ldr	r4, [r3, #8]
 8005c74:	4baf      	ldr	r3, [pc, #700]	@ (8005f34 <CreateMessage+0xc38>)
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	1c18      	adds	r0, r3, #0
 8005c7a:	f7fd fe0b 	bl	8003894 <__aeabi_f2d>
 8005c7e:	0002      	movs	r2, r0
 8005c80:	000b      	movs	r3, r1
 8005c82:	4dad      	ldr	r5, [pc, #692]	@ (8005f38 <CreateMessage+0xc3c>)
 8005c84:	49af      	ldr	r1, [pc, #700]	@ (8005f44 <CreateMessage+0xc48>)
 8005c86:	48a2      	ldr	r0, [pc, #648]	@ (8005f10 <CreateMessage+0xc14>)
 8005c88:	9202      	str	r2, [sp, #8]
 8005c8a:	9303      	str	r3, [sp, #12]
 8005c8c:	4ba7      	ldr	r3, [pc, #668]	@ (8005f2c <CreateMessage+0xc30>)
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	002b      	movs	r3, r5
 8005c92:	0022      	movs	r2, r4
 8005c94:	f01f fb74 	bl	8025380 <siprintf>
#endif
      index += strlen(message);
 8005c98:	4b9d      	ldr	r3, [pc, #628]	@ (8005f10 <CreateMessage+0xc14>)
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f7fa fa66 	bl	800016c <strlen>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	b299      	uxth	r1, r3
 8005ca4:	220e      	movs	r2, #14
 8005ca6:	18bb      	adds	r3, r7, r2
 8005ca8:	18ba      	adds	r2, r7, r2
 8005caa:	8812      	ldrh	r2, [r2, #0]
 8005cac:	188a      	adds	r2, r1, r2
 8005cae:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005cb0:	1dbb      	adds	r3, r7, #6
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d019      	beq.n	8005cec <CreateMessage+0x9f0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005cb8:	4b95      	ldr	r3, [pc, #596]	@ (8005f10 <CreateMessage+0xc14>)
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7fa fa56 	bl	800016c <strlen>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	4b92      	ldr	r3, [pc, #584]	@ (8005f10 <CreateMessage+0xc14>)
 8005cc6:	0011      	movs	r1, r2
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f7ff f913 	bl	8004ef4 <ESP_Send>
 8005cce:	0003      	movs	r3, r0
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	4b90      	ldr	r3, [pc, #576]	@ (8005f14 <CreateMessage+0xc18>)
 8005cd4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005cd6:	4b90      	ldr	r3, [pc, #576]	@ (8005f18 <CreateMessage+0xc1c>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	001a      	movs	r2, r3
 8005cdc:	4b8d      	ldr	r3, [pc, #564]	@ (8005f14 <CreateMessage+0xc18>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	1e5a      	subs	r2, r3, #1
 8005ce4:	4193      	sbcs	r3, r2
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	4b8b      	ldr	r3, [pc, #556]	@ (8005f18 <CreateMessage+0xc1c>)
 8005cea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 8005cec:	f006 fe1a 	bl	800c924 <IsAHT20SensorPresent>
 8005cf0:	1e03      	subs	r3, r0, #0
 8005cf2:	d100      	bne.n	8005cf6 <CreateMessage+0x9fa>
 8005cf4:	e0a3      	b.n	8005e3e <CreateMessage+0xb42>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005cf6:	4b89      	ldr	r3, [pc, #548]	@ (8005f1c <CreateMessage+0xc20>)
 8005cf8:	4893      	ldr	r0, [pc, #588]	@ (8005f48 <CreateMessage+0xc4c>)
 8005cfa:	220c      	movs	r2, #12
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	f005 fce7 	bl	800b6d0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005d02:	4a92      	ldr	r2, [pc, #584]	@ (8005f4c <CreateMessage+0xc50>)
 8005d04:	4992      	ldr	r1, [pc, #584]	@ (8005f50 <CreateMessage+0xc54>)
 8005d06:	4b85      	ldr	r3, [pc, #532]	@ (8005f1c <CreateMessage+0xc20>)
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7ff fa9b 	bl	8005244 <isKeyValid>
 8005d0e:	1e03      	subs	r3, r0, #0
 8005d10:	d043      	beq.n	8005d9a <CreateMessage+0xa9e>
      uint8ArrayToString(Buffer, keybuffer);
 8005d12:	4a82      	ldr	r2, [pc, #520]	@ (8005f1c <CreateMessage+0xc20>)
 8005d14:	4b85      	ldr	r3, [pc, #532]	@ (8005f2c <CreateMessage+0xc30>)
 8005d16:	0011      	movs	r1, r2
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7ff facb 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperaturemax);
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperaturemax);
 8005d1e:	4b84      	ldr	r3, [pc, #528]	@ (8005f30 <CreateMessage+0xc34>)
 8005d20:	689c      	ldr	r4, [r3, #8]
 8005d22:	4b84      	ldr	r3, [pc, #528]	@ (8005f34 <CreateMessage+0xc38>)
 8005d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d26:	1c18      	adds	r0, r3, #0
 8005d28:	f7fd fdb4 	bl	8003894 <__aeabi_f2d>
 8005d2c:	0002      	movs	r2, r0
 8005d2e:	000b      	movs	r3, r1
 8005d30:	4d81      	ldr	r5, [pc, #516]	@ (8005f38 <CreateMessage+0xc3c>)
 8005d32:	4988      	ldr	r1, [pc, #544]	@ (8005f54 <CreateMessage+0xc58>)
 8005d34:	4876      	ldr	r0, [pc, #472]	@ (8005f10 <CreateMessage+0xc14>)
 8005d36:	9202      	str	r2, [sp, #8]
 8005d38:	9303      	str	r3, [sp, #12]
 8005d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8005f2c <CreateMessage+0xc30>)
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	002b      	movs	r3, r5
 8005d40:	0022      	movs	r2, r4
 8005d42:	f01f fb1d 	bl	8025380 <siprintf>
#endif
      index += strlen(message);
 8005d46:	4b72      	ldr	r3, [pc, #456]	@ (8005f10 <CreateMessage+0xc14>)
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f7fa fa0f 	bl	800016c <strlen>
 8005d4e:	0003      	movs	r3, r0
 8005d50:	b299      	uxth	r1, r3
 8005d52:	220e      	movs	r2, #14
 8005d54:	18bb      	adds	r3, r7, r2
 8005d56:	18ba      	adds	r2, r7, r2
 8005d58:	8812      	ldrh	r2, [r2, #0]
 8005d5a:	188a      	adds	r2, r1, r2
 8005d5c:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005d5e:	1dbb      	adds	r3, r7, #6
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d019      	beq.n	8005d9a <CreateMessage+0xa9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005d66:	4b6a      	ldr	r3, [pc, #424]	@ (8005f10 <CreateMessage+0xc14>)
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f7fa f9ff 	bl	800016c <strlen>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	4b67      	ldr	r3, [pc, #412]	@ (8005f10 <CreateMessage+0xc14>)
 8005d74:	0011      	movs	r1, r2
 8005d76:	0018      	movs	r0, r3
 8005d78:	f7ff f8bc 	bl	8004ef4 <ESP_Send>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	001a      	movs	r2, r3
 8005d80:	4b64      	ldr	r3, [pc, #400]	@ (8005f14 <CreateMessage+0xc18>)
 8005d82:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d84:	4b64      	ldr	r3, [pc, #400]	@ (8005f18 <CreateMessage+0xc1c>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	001a      	movs	r2, r3
 8005d8a:	4b62      	ldr	r3, [pc, #392]	@ (8005f14 <CreateMessage+0xc18>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	1e5a      	subs	r2, r3, #1
 8005d92:	4193      	sbcs	r3, r2
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	4b60      	ldr	r3, [pc, #384]	@ (8005f18 <CreateMessage+0xc1c>)
 8005d98:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005d9a:	4b60      	ldr	r3, [pc, #384]	@ (8005f1c <CreateMessage+0xc20>)
 8005d9c:	486e      	ldr	r0, [pc, #440]	@ (8005f58 <CreateMessage+0xc5c>)
 8005d9e:	220c      	movs	r2, #12
 8005da0:	0019      	movs	r1, r3
 8005da2:	f005 fc95 	bl	800b6d0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8005da6:	4a6d      	ldr	r2, [pc, #436]	@ (8005f5c <CreateMessage+0xc60>)
 8005da8:	4969      	ldr	r1, [pc, #420]	@ (8005f50 <CreateMessage+0xc54>)
 8005daa:	4b5c      	ldr	r3, [pc, #368]	@ (8005f1c <CreateMessage+0xc20>)
 8005dac:	0018      	movs	r0, r3
 8005dae:	f7ff fa49 	bl	8005244 <isKeyValid>
 8005db2:	1e03      	subs	r3, r0, #0
 8005db4:	d043      	beq.n	8005e3e <CreateMessage+0xb42>
      uint8ArrayToString(Buffer, keybuffer);
 8005db6:	4a59      	ldr	r2, [pc, #356]	@ (8005f1c <CreateMessage+0xc20>)
 8005db8:	4b5c      	ldr	r3, [pc, #368]	@ (8005f2c <CreateMessage+0xc30>)
 8005dba:	0011      	movs	r1, r2
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7ff fa79 	bl	80052b4 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humiditymax);
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humiditymax);
 8005dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f30 <CreateMessage+0xc34>)
 8005dc4:	689c      	ldr	r4, [r3, #8]
 8005dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8005f34 <CreateMessage+0xc38>)
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dca:	1c18      	adds	r0, r3, #0
 8005dcc:	f7fd fd62 	bl	8003894 <__aeabi_f2d>
 8005dd0:	0002      	movs	r2, r0
 8005dd2:	000b      	movs	r3, r1
 8005dd4:	4d58      	ldr	r5, [pc, #352]	@ (8005f38 <CreateMessage+0xc3c>)
 8005dd6:	4962      	ldr	r1, [pc, #392]	@ (8005f60 <CreateMessage+0xc64>)
 8005dd8:	484d      	ldr	r0, [pc, #308]	@ (8005f10 <CreateMessage+0xc14>)
 8005dda:	9202      	str	r2, [sp, #8]
 8005ddc:	9303      	str	r3, [sp, #12]
 8005dde:	4b53      	ldr	r3, [pc, #332]	@ (8005f2c <CreateMessage+0xc30>)
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	002b      	movs	r3, r5
 8005de4:	0022      	movs	r2, r4
 8005de6:	f01f facb 	bl	8025380 <siprintf>
  #endif
      index += strlen(message);
 8005dea:	4b49      	ldr	r3, [pc, #292]	@ (8005f10 <CreateMessage+0xc14>)
 8005dec:	0018      	movs	r0, r3
 8005dee:	f7fa f9bd 	bl	800016c <strlen>
 8005df2:	0003      	movs	r3, r0
 8005df4:	b299      	uxth	r1, r3
 8005df6:	220e      	movs	r2, #14
 8005df8:	18bb      	adds	r3, r7, r2
 8005dfa:	18ba      	adds	r2, r7, r2
 8005dfc:	8812      	ldrh	r2, [r2, #0]
 8005dfe:	188a      	adds	r2, r1, r2
 8005e00:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e02:	1dbb      	adds	r3, r7, #6
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d019      	beq.n	8005e3e <CreateMessage+0xb42>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e0a:	4b41      	ldr	r3, [pc, #260]	@ (8005f10 <CreateMessage+0xc14>)
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f7fa f9ad 	bl	800016c <strlen>
 8005e12:	0003      	movs	r3, r0
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	4b3e      	ldr	r3, [pc, #248]	@ (8005f10 <CreateMessage+0xc14>)
 8005e18:	0011      	movs	r1, r2
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f7ff f86a 	bl	8004ef4 <ESP_Send>
 8005e20:	0003      	movs	r3, r0
 8005e22:	001a      	movs	r2, r3
 8005e24:	4b3b      	ldr	r3, [pc, #236]	@ (8005f14 <CreateMessage+0xc18>)
 8005e26:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e28:	4b3b      	ldr	r3, [pc, #236]	@ (8005f18 <CreateMessage+0xc1c>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	001a      	movs	r2, r3
 8005e2e:	4b39      	ldr	r3, [pc, #228]	@ (8005f14 <CreateMessage+0xc18>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	4013      	ands	r3, r2
 8005e34:	1e5a      	subs	r2, r3, #1
 8005e36:	4193      	sbcs	r3, r2
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	4b37      	ldr	r3, [pc, #220]	@ (8005f18 <CreateMessage+0xc1c>)
 8005e3c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8005e3e:	f006 fd85 	bl	800c94c <IsENS160SensorPresent>
 8005e42:	1e03      	subs	r3, r0, #0
 8005e44:	d100      	bne.n	8005e48 <CreateMessage+0xb4c>
 8005e46:	e11b      	b.n	8006080 <CreateMessage+0xd84>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8005e48:	4b34      	ldr	r3, [pc, #208]	@ (8005f1c <CreateMessage+0xc20>)
 8005e4a:	4846      	ldr	r0, [pc, #280]	@ (8005f64 <CreateMessage+0xc68>)
 8005e4c:	220c      	movs	r2, #12
 8005e4e:	0019      	movs	r1, r3
 8005e50:	f005 fc3e 	bl	800b6d0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 8005e54:	4a44      	ldr	r2, [pc, #272]	@ (8005f68 <CreateMessage+0xc6c>)
 8005e56:	4945      	ldr	r1, [pc, #276]	@ (8005f6c <CreateMessage+0xc70>)
 8005e58:	4b30      	ldr	r3, [pc, #192]	@ (8005f1c <CreateMessage+0xc20>)
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f7ff f9f2 	bl	8005244 <isKeyValid>
 8005e60:	1e03      	subs	r3, r0, #0
 8005e62:	d03d      	beq.n	8005ee0 <CreateMessage+0xbe4>
      uint8ArrayToString(Buffer, keybuffer);
 8005e64:	4a2d      	ldr	r2, [pc, #180]	@ (8005f1c <CreateMessage+0xc20>)
 8005e66:	4b31      	ldr	r3, [pc, #196]	@ (8005f2c <CreateMessage+0xc30>)
 8005e68:	0011      	movs	r1, r2
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f7ff fa22 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
 8005e70:	4b2f      	ldr	r3, [pc, #188]	@ (8005f30 <CreateMessage+0xc34>)
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	4b2f      	ldr	r3, [pc, #188]	@ (8005f34 <CreateMessage+0xc38>)
 8005e76:	2165      	movs	r1, #101	@ 0x65
 8005e78:	5c5b      	ldrb	r3, [r3, r1]
 8005e7a:	4c2f      	ldr	r4, [pc, #188]	@ (8005f38 <CreateMessage+0xc3c>)
 8005e7c:	493c      	ldr	r1, [pc, #240]	@ (8005f70 <CreateMessage+0xc74>)
 8005e7e:	4824      	ldr	r0, [pc, #144]	@ (8005f10 <CreateMessage+0xc14>)
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	4b2a      	ldr	r3, [pc, #168]	@ (8005f2c <CreateMessage+0xc30>)
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	0023      	movs	r3, r4
 8005e88:	f01f fa7a 	bl	8025380 <siprintf>
#endif
      index += strlen(message);
 8005e8c:	4b20      	ldr	r3, [pc, #128]	@ (8005f10 <CreateMessage+0xc14>)
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f7fa f96c 	bl	800016c <strlen>
 8005e94:	0003      	movs	r3, r0
 8005e96:	b299      	uxth	r1, r3
 8005e98:	220e      	movs	r2, #14
 8005e9a:	18bb      	adds	r3, r7, r2
 8005e9c:	18ba      	adds	r2, r7, r2
 8005e9e:	8812      	ldrh	r2, [r2, #0]
 8005ea0:	188a      	adds	r2, r1, r2
 8005ea2:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ea4:	1dbb      	adds	r3, r7, #6
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d019      	beq.n	8005ee0 <CreateMessage+0xbe4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005eac:	4b18      	ldr	r3, [pc, #96]	@ (8005f10 <CreateMessage+0xc14>)
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f7fa f95c 	bl	800016c <strlen>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	4b15      	ldr	r3, [pc, #84]	@ (8005f10 <CreateMessage+0xc14>)
 8005eba:	0011      	movs	r1, r2
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7ff f819 	bl	8004ef4 <ESP_Send>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	001a      	movs	r2, r3
 8005ec6:	4b13      	ldr	r3, [pc, #76]	@ (8005f14 <CreateMessage+0xc18>)
 8005ec8:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005eca:	4b13      	ldr	r3, [pc, #76]	@ (8005f18 <CreateMessage+0xc1c>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	001a      	movs	r2, r3
 8005ed0:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <CreateMessage+0xc18>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	1e5a      	subs	r2, r3, #1
 8005ed8:	4193      	sbcs	r3, r2
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	4b0e      	ldr	r3, [pc, #56]	@ (8005f18 <CreateMessage+0xc1c>)
 8005ede:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8005f1c <CreateMessage+0xc20>)
 8005ee2:	4824      	ldr	r0, [pc, #144]	@ (8005f74 <CreateMessage+0xc78>)
 8005ee4:	220c      	movs	r2, #12
 8005ee6:	0019      	movs	r1, r3
 8005ee8:	f005 fbf2 	bl	800b6d0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8005eec:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <CreateMessage+0xc7c>)
 8005eee:	491f      	ldr	r1, [pc, #124]	@ (8005f6c <CreateMessage+0xc70>)
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <CreateMessage+0xc20>)
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7ff f9a6 	bl	8005244 <isKeyValid>
 8005ef8:	1e03      	subs	r3, r0, #0
 8005efa:	d075      	beq.n	8005fe8 <CreateMessage+0xcec>
      uint8ArrayToString(Buffer, keybuffer);
 8005efc:	4a07      	ldr	r2, [pc, #28]	@ (8005f1c <CreateMessage+0xc20>)
 8005efe:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <CreateMessage+0xc30>)
 8005f00:	0011      	movs	r1, r2
 8005f02:	0018      	movs	r0, r3
 8005f04:	f7ff f9d6 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
 8005f08:	4b09      	ldr	r3, [pc, #36]	@ (8005f30 <CreateMessage+0xc34>)
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	e036      	b.n	8005f7c <CreateMessage+0xc80>
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	200005cc 	.word	0x200005cc
 8005f14:	20000779 	.word	0x20000779
 8005f18:	2000002d 	.word	0x2000002d
 8005f1c:	20000754 	.word	0x20000754
 8005f20:	080800bc 	.word	0x080800bc
 8005f24:	0802a2b8 	.word	0x0802a2b8
 8005f28:	0802a37c 	.word	0x0802a37c
 8005f2c:	20000760 	.word	0x20000760
 8005f30:	200005ac 	.word	0x200005ac
 8005f34:	2000067c 	.word	0x2000067c
 8005f38:	20000734 	.word	0x20000734
 8005f3c:	0802a380 	.word	0x0802a380
 8005f40:	08080060 	.word	0x08080060
 8005f44:	0802a3d8 	.word	0x0802a3d8
 8005f48:	080800c8 	.word	0x080800c8
 8005f4c:	0802a1dc 	.word	0x0802a1dc
 8005f50:	0802a434 	.word	0x0802a434
 8005f54:	0802a43c 	.word	0x0802a43c
 8005f58:	080800d4 	.word	0x080800d4
 8005f5c:	0802a24c 	.word	0x0802a24c
 8005f60:	0802a498 	.word	0x0802a498
 8005f64:	080800ec 	.word	0x080800ec
 8005f68:	0802a4f4 	.word	0x0802a4f4
 8005f6c:	0802a508 	.word	0x0802a508
 8005f70:	0802a510 	.word	0x0802a510
 8005f74:	080800f8 	.word	0x080800f8
 8005f78:	0802a568 	.word	0x0802a568
 8005f7c:	4b71      	ldr	r3, [pc, #452]	@ (8006144 <CreateMessage+0xe48>)
 8005f7e:	215a      	movs	r1, #90	@ 0x5a
 8005f80:	5a5b      	ldrh	r3, [r3, r1]
 8005f82:	4c71      	ldr	r4, [pc, #452]	@ (8006148 <CreateMessage+0xe4c>)
 8005f84:	4971      	ldr	r1, [pc, #452]	@ (800614c <CreateMessage+0xe50>)
 8005f86:	4872      	ldr	r0, [pc, #456]	@ (8006150 <CreateMessage+0xe54>)
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	4b72      	ldr	r3, [pc, #456]	@ (8006154 <CreateMessage+0xe58>)
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	0023      	movs	r3, r4
 8005f90:	f01f f9f6 	bl	8025380 <siprintf>
#endif
      index += strlen(message);
 8005f94:	4b6e      	ldr	r3, [pc, #440]	@ (8006150 <CreateMessage+0xe54>)
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7fa f8e8 	bl	800016c <strlen>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	b299      	uxth	r1, r3
 8005fa0:	220e      	movs	r2, #14
 8005fa2:	18bb      	adds	r3, r7, r2
 8005fa4:	18ba      	adds	r2, r7, r2
 8005fa6:	8812      	ldrh	r2, [r2, #0]
 8005fa8:	188a      	adds	r2, r1, r2
 8005faa:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fac:	1dbb      	adds	r3, r7, #6
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d019      	beq.n	8005fe8 <CreateMessage+0xcec>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fb4:	4b66      	ldr	r3, [pc, #408]	@ (8006150 <CreateMessage+0xe54>)
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f7fa f8d8 	bl	800016c <strlen>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	4b63      	ldr	r3, [pc, #396]	@ (8006150 <CreateMessage+0xe54>)
 8005fc2:	0011      	movs	r1, r2
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f7fe ff95 	bl	8004ef4 <ESP_Send>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	001a      	movs	r2, r3
 8005fce:	4b62      	ldr	r3, [pc, #392]	@ (8006158 <CreateMessage+0xe5c>)
 8005fd0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005fd2:	4b62      	ldr	r3, [pc, #392]	@ (800615c <CreateMessage+0xe60>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	001a      	movs	r2, r3
 8005fd8:	4b5f      	ldr	r3, [pc, #380]	@ (8006158 <CreateMessage+0xe5c>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	1e5a      	subs	r2, r3, #1
 8005fe0:	4193      	sbcs	r3, r2
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	4b5d      	ldr	r3, [pc, #372]	@ (800615c <CreateMessage+0xe60>)
 8005fe6:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8005fe8:	4b5d      	ldr	r3, [pc, #372]	@ (8006160 <CreateMessage+0xe64>)
 8005fea:	485e      	ldr	r0, [pc, #376]	@ (8006164 <CreateMessage+0xe68>)
 8005fec:	220c      	movs	r2, #12
 8005fee:	0019      	movs	r1, r3
 8005ff0:	f005 fb6e 	bl	800b6d0 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8005ff4:	4a5c      	ldr	r2, [pc, #368]	@ (8006168 <CreateMessage+0xe6c>)
 8005ff6:	495d      	ldr	r1, [pc, #372]	@ (800616c <CreateMessage+0xe70>)
 8005ff8:	4b59      	ldr	r3, [pc, #356]	@ (8006160 <CreateMessage+0xe64>)
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f7ff f922 	bl	8005244 <isKeyValid>
 8006000:	1e03      	subs	r3, r0, #0
 8006002:	d03d      	beq.n	8006080 <CreateMessage+0xd84>
      uint8ArrayToString(Buffer, keybuffer);
 8006004:	4a56      	ldr	r2, [pc, #344]	@ (8006160 <CreateMessage+0xe64>)
 8006006:	4b53      	ldr	r3, [pc, #332]	@ (8006154 <CreateMessage+0xe58>)
 8006008:	0011      	movs	r1, r2
 800600a:	0018      	movs	r0, r3
 800600c:	f7ff f952 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
 8006010:	4b57      	ldr	r3, [pc, #348]	@ (8006170 <CreateMessage+0xe74>)
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	4b4b      	ldr	r3, [pc, #300]	@ (8006144 <CreateMessage+0xe48>)
 8006016:	2162      	movs	r1, #98	@ 0x62
 8006018:	5a5b      	ldrh	r3, [r3, r1]
 800601a:	4c4b      	ldr	r4, [pc, #300]	@ (8006148 <CreateMessage+0xe4c>)
 800601c:	4955      	ldr	r1, [pc, #340]	@ (8006174 <CreateMessage+0xe78>)
 800601e:	484c      	ldr	r0, [pc, #304]	@ (8006150 <CreateMessage+0xe54>)
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	4b4c      	ldr	r3, [pc, #304]	@ (8006154 <CreateMessage+0xe58>)
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	0023      	movs	r3, r4
 8006028:	f01f f9aa 	bl	8025380 <siprintf>
#endif
      index += strlen(message);
 800602c:	4b48      	ldr	r3, [pc, #288]	@ (8006150 <CreateMessage+0xe54>)
 800602e:	0018      	movs	r0, r3
 8006030:	f7fa f89c 	bl	800016c <strlen>
 8006034:	0003      	movs	r3, r0
 8006036:	b299      	uxth	r1, r3
 8006038:	220e      	movs	r2, #14
 800603a:	18bb      	adds	r3, r7, r2
 800603c:	18ba      	adds	r2, r7, r2
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	188a      	adds	r2, r1, r2
 8006042:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006044:	1dbb      	adds	r3, r7, #6
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d019      	beq.n	8006080 <CreateMessage+0xd84>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800604c:	4b40      	ldr	r3, [pc, #256]	@ (8006150 <CreateMessage+0xe54>)
 800604e:	0018      	movs	r0, r3
 8006050:	f7fa f88c 	bl	800016c <strlen>
 8006054:	0003      	movs	r3, r0
 8006056:	b29a      	uxth	r2, r3
 8006058:	4b3d      	ldr	r3, [pc, #244]	@ (8006150 <CreateMessage+0xe54>)
 800605a:	0011      	movs	r1, r2
 800605c:	0018      	movs	r0, r3
 800605e:	f7fe ff49 	bl	8004ef4 <ESP_Send>
 8006062:	0003      	movs	r3, r0
 8006064:	001a      	movs	r2, r3
 8006066:	4b3c      	ldr	r3, [pc, #240]	@ (8006158 <CreateMessage+0xe5c>)
 8006068:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800606a:	4b3c      	ldr	r3, [pc, #240]	@ (800615c <CreateMessage+0xe60>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	001a      	movs	r2, r3
 8006070:	4b39      	ldr	r3, [pc, #228]	@ (8006158 <CreateMessage+0xe5c>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	4013      	ands	r3, r2
 8006076:	1e5a      	subs	r2, r3, #1
 8006078:	4193      	sbcs	r3, r2
 800607a:	b2da      	uxtb	r2, r3
 800607c:	4b37      	ldr	r3, [pc, #220]	@ (800615c <CreateMessage+0xe60>)
 800607e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 8006080:	4b37      	ldr	r3, [pc, #220]	@ (8006160 <CreateMessage+0xe64>)
 8006082:	483d      	ldr	r0, [pc, #244]	@ (8006178 <CreateMessage+0xe7c>)
 8006084:	220c      	movs	r2, #12
 8006086:	0019      	movs	r1, r3
 8006088:	f005 fb22 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800608c:	4a34      	ldr	r2, [pc, #208]	@ (8006160 <CreateMessage+0xe64>)
 800608e:	4b31      	ldr	r3, [pc, #196]	@ (8006154 <CreateMessage+0xe58>)
 8006090:	0011      	movs	r1, r2
 8006092:	0018      	movs	r0, r3
 8006094:	f7ff f90e 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8006098:	4b35      	ldr	r3, [pc, #212]	@ (8006170 <CreateMessage+0xe74>)
 800609a:	689c      	ldr	r4, [r3, #8]
 800609c:	4b37      	ldr	r3, [pc, #220]	@ (800617c <CreateMessage+0xe80>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	1c18      	adds	r0, r3, #0
 80060a2:	f7fd fbf7 	bl	8003894 <__aeabi_f2d>
 80060a6:	0002      	movs	r2, r0
 80060a8:	000b      	movs	r3, r1
 80060aa:	4d27      	ldr	r5, [pc, #156]	@ (8006148 <CreateMessage+0xe4c>)
 80060ac:	4934      	ldr	r1, [pc, #208]	@ (8006180 <CreateMessage+0xe84>)
 80060ae:	4828      	ldr	r0, [pc, #160]	@ (8006150 <CreateMessage+0xe54>)
 80060b0:	9202      	str	r2, [sp, #8]
 80060b2:	9303      	str	r3, [sp, #12]
 80060b4:	4b27      	ldr	r3, [pc, #156]	@ (8006154 <CreateMessage+0xe58>)
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	002b      	movs	r3, r5
 80060ba:	0022      	movs	r2, r4
 80060bc:	f01f f960 	bl	8025380 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 80060c0:	4b23      	ldr	r3, [pc, #140]	@ (8006150 <CreateMessage+0xe54>)
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7fa f852 	bl	800016c <strlen>
 80060c8:	0002      	movs	r2, r0
 80060ca:	4b21      	ldr	r3, [pc, #132]	@ (8006150 <CreateMessage+0xe54>)
 80060cc:	18d3      	adds	r3, r2, r3
 80060ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006184 <CreateMessage+0xe88>)
 80060d0:	0011      	movs	r1, r2
 80060d2:	0018      	movs	r0, r3
 80060d4:	f01f f954 	bl	8025380 <siprintf>
  index += strlen(message);
 80060d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006150 <CreateMessage+0xe54>)
 80060da:	0018      	movs	r0, r3
 80060dc:	f7fa f846 	bl	800016c <strlen>
 80060e0:	0003      	movs	r3, r0
 80060e2:	b299      	uxth	r1, r3
 80060e4:	220e      	movs	r2, #14
 80060e6:	18bb      	adds	r3, r7, r2
 80060e8:	18ba      	adds	r2, r7, r2
 80060ea:	8812      	ldrh	r2, [r2, #0]
 80060ec:	188a      	adds	r2, r1, r2
 80060ee:	801a      	strh	r2, [r3, #0]
  if (send) {
 80060f0:	1dbb      	adds	r3, r7, #6
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d019      	beq.n	800612c <CreateMessage+0xe30>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80060f8:	4b15      	ldr	r3, [pc, #84]	@ (8006150 <CreateMessage+0xe54>)
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7fa f836 	bl	800016c <strlen>
 8006100:	0003      	movs	r3, r0
 8006102:	b29a      	uxth	r2, r3
 8006104:	4b12      	ldr	r3, [pc, #72]	@ (8006150 <CreateMessage+0xe54>)
 8006106:	0011      	movs	r1, r2
 8006108:	0018      	movs	r0, r3
 800610a:	f7fe fef3 	bl	8004ef4 <ESP_Send>
 800610e:	0003      	movs	r3, r0
 8006110:	001a      	movs	r2, r3
 8006112:	4b11      	ldr	r3, [pc, #68]	@ (8006158 <CreateMessage+0xe5c>)
 8006114:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8006116:	4b11      	ldr	r3, [pc, #68]	@ (800615c <CreateMessage+0xe60>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	001a      	movs	r2, r3
 800611c:	4b0e      	ldr	r3, [pc, #56]	@ (8006158 <CreateMessage+0xe5c>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	4013      	ands	r3, r2
 8006122:	1e5a      	subs	r2, r3, #1
 8006124:	4193      	sbcs	r3, r2
 8006126:	b2da      	uxtb	r2, r3
 8006128:	4b0c      	ldr	r3, [pc, #48]	@ (800615c <CreateMessage+0xe60>)
 800612a:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800612c:	4b0b      	ldr	r3, [pc, #44]	@ (800615c <CreateMessage+0xe60>)
 800612e:	781a      	ldrb	r2, [r3, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	701a      	strb	r2, [r3, #0]
  return index;
 8006134:	230e      	movs	r3, #14
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	881b      	ldrh	r3, [r3, #0]
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b005      	add	sp, #20
 8006140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006142:	46c0      	nop			@ (mov r8, r8)
 8006144:	2000067c 	.word	0x2000067c
 8006148:	20000734 	.word	0x20000734
 800614c:	0802a570 	.word	0x0802a570
 8006150:	200005cc 	.word	0x200005cc
 8006154:	20000760 	.word	0x20000760
 8006158:	20000779 	.word	0x20000779
 800615c:	2000002d 	.word	0x2000002d
 8006160:	20000754 	.word	0x20000754
 8006164:	08080104 	.word	0x08080104
 8006168:	0802a5cc 	.word	0x0802a5cc
 800616c:	0802a508 	.word	0x0802a508
 8006170:	200005ac 	.word	0x200005ac
 8006174:	0802a5d4 	.word	0x0802a5d4
 8006178:	0808006c 	.word	0x0808006c
 800617c:	200005c4 	.word	0x200005c4
 8006180:	0802a630 	.word	0x0802a630
 8006184:	0802a688 	.word	0x0802a688

08006188 <StartProg>:

void StartProg(){
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 800618c:	2064      	movs	r0, #100	@ 0x64
 800618e:	f00d fcd5 	bl	8013b3c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006192:	4b15      	ldr	r3, [pc, #84]	@ (80061e8 <StartProg+0x60>)
 8006194:	2200      	movs	r2, #0
 8006196:	2101      	movs	r1, #1
 8006198:	0018      	movs	r0, r3
 800619a:	f00e ff56 	bl	801504a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800619e:	2064      	movs	r0, #100	@ 0x64
 80061a0:	f00d fccc 	bl	8013b3c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80061a4:	4b10      	ldr	r3, [pc, #64]	@ (80061e8 <StartProg+0x60>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	2102      	movs	r1, #2
 80061aa:	0018      	movs	r0, r3
 80061ac:	f00e ff4d 	bl	801504a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80061b0:	23fa      	movs	r3, #250	@ 0xfa
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	0018      	movs	r0, r3
 80061b6:	f00d fcc1 	bl	8013b3c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80061ba:	4b0b      	ldr	r3, [pc, #44]	@ (80061e8 <StartProg+0x60>)
 80061bc:	2201      	movs	r2, #1
 80061be:	2101      	movs	r1, #1
 80061c0:	0018      	movs	r0, r3
 80061c2:	f00e ff42 	bl	801504a <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80061c6:	23fa      	movs	r3, #250	@ 0xfa
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	0018      	movs	r0, r3
 80061cc:	f00d fcb6 	bl	8013b3c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80061d0:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <StartProg+0x60>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	2102      	movs	r1, #2
 80061d6:	0018      	movs	r0, r3
 80061d8:	f00e ff37 	bl	801504a <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80061dc:	2028      	movs	r0, #40	@ 0x28
 80061de:	f00d fcad 	bl	8013b3c <HAL_Delay>
}
 80061e2:	46c0      	nop			@ (mov r8, r8)
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	50001c00 	.word	0x50001c00

080061ec <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80061ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ee:	b0d9      	sub	sp, #356	@ 0x164
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	0008      	movs	r0, r1
 80061f6:	0011      	movs	r1, r2
 80061f8:	4ba3      	ldr	r3, [pc, #652]	@ (8006488 <ParseBuffer+0x29c>)
 80061fa:	24b0      	movs	r4, #176	@ 0xb0
 80061fc:	0064      	lsls	r4, r4, #1
 80061fe:	191b      	adds	r3, r3, r4
 8006200:	19db      	adds	r3, r3, r7
 8006202:	1c02      	adds	r2, r0, #0
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	4ba1      	ldr	r3, [pc, #644]	@ (800648c <ParseBuffer+0x2a0>)
 8006208:	191b      	adds	r3, r3, r4
 800620a:	19db      	adds	r3, r3, r7
 800620c:	1c0a      	adds	r2, r1, #0
 800620e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8006210:	2380      	movs	r3, #128	@ 0x80
 8006212:	005a      	lsls	r2, r3, #1
 8006214:	2348      	movs	r3, #72	@ 0x48
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	2100      	movs	r1, #0
 800621a:	0018      	movs	r0, r3
 800621c:	f01f fa1a 	bl	8025654 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8006220:	2360      	movs	r3, #96	@ 0x60
 8006222:	33ff      	adds	r3, #255	@ 0xff
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	2203      	movs	r2, #3
 8006228:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800622a:	23ae      	movs	r3, #174	@ 0xae
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	2200      	movs	r2, #0
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	e013      	b.n	800625e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8006236:	20ae      	movs	r0, #174	@ 0xae
 8006238:	0040      	lsls	r0, r0, #1
 800623a:	183b      	adds	r3, r7, r0
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	18d2      	adds	r2, r2, r3
 8006242:	183b      	adds	r3, r7, r0
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	7811      	ldrb	r1, [r2, #0]
 8006248:	4a91      	ldr	r2, [pc, #580]	@ (8006490 <ParseBuffer+0x2a4>)
 800624a:	24b0      	movs	r4, #176	@ 0xb0
 800624c:	0064      	lsls	r4, r4, #1
 800624e:	1912      	adds	r2, r2, r4
 8006250:	19d2      	adds	r2, r2, r7
 8006252:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8006254:	183b      	adds	r3, r7, r0
 8006256:	881a      	ldrh	r2, [r3, #0]
 8006258:	183b      	adds	r3, r7, r0
 800625a:	3201      	adds	r2, #1
 800625c:	801a      	strh	r2, [r3, #0]
 800625e:	23ae      	movs	r3, #174	@ 0xae
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	18fa      	adds	r2, r7, r3
 8006264:	4b88      	ldr	r3, [pc, #544]	@ (8006488 <ParseBuffer+0x29c>)
 8006266:	21b0      	movs	r1, #176	@ 0xb0
 8006268:	0049      	lsls	r1, r1, #1
 800626a:	185b      	adds	r3, r3, r1
 800626c:	19db      	adds	r3, r3, r7
 800626e:	8812      	ldrh	r2, [r2, #0]
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d3df      	bcc.n	8006236 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8006276:	4b84      	ldr	r3, [pc, #528]	@ (8006488 <ParseBuffer+0x29c>)
 8006278:	185b      	adds	r3, r3, r1
 800627a:	19db      	adds	r3, r3, r7
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	4a84      	ldr	r2, [pc, #528]	@ (8006490 <ParseBuffer+0x2a4>)
 8006280:	1852      	adds	r2, r2, r1
 8006282:	19d2      	adds	r2, r2, r7
 8006284:	2100      	movs	r1, #0
 8006286:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8006288:	f00c ff88 	bl	801319c <GetVerboseLevel>
 800628c:	0003      	movs	r3, r0
 800628e:	2b03      	cmp	r3, #3
 8006290:	d106      	bne.n	80062a0 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 8006292:	2348      	movs	r3, #72	@ 0x48
 8006294:	18fa      	adds	r2, r7, r3
 8006296:	4b7f      	ldr	r3, [pc, #508]	@ (8006494 <ParseBuffer+0x2a8>)
 8006298:	0011      	movs	r1, r2
 800629a:	0018      	movs	r0, r3
 800629c:	f01f f800 	bl	80252a0 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	26ac      	movs	r6, #172	@ 0xac
 80062a4:	0076      	lsls	r6, r6, #1
 80062a6:	19ba      	adds	r2, r7, r6
 80062a8:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80062aa:	4b7b      	ldr	r3, [pc, #492]	@ (8006498 <ParseBuffer+0x2ac>)
 80062ac:	25b0      	movs	r5, #176	@ 0xb0
 80062ae:	006d      	lsls	r5, r5, #1
 80062b0:	195b      	adds	r3, r3, r5
 80062b2:	19db      	adds	r3, r3, r7
 80062b4:	4a79      	ldr	r2, [pc, #484]	@ (800649c <ParseBuffer+0x2b0>)
 80062b6:	8811      	ldrh	r1, [r2, #0]
 80062b8:	8019      	strh	r1, [r3, #0]
 80062ba:	7892      	ldrb	r2, [r2, #2]
 80062bc:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80062be:	4b78      	ldr	r3, [pc, #480]	@ (80064a0 <ParseBuffer+0x2b4>)
 80062c0:	195b      	adds	r3, r3, r5
 80062c2:	19db      	adds	r3, r3, r7
 80062c4:	4a77      	ldr	r2, [pc, #476]	@ (80064a4 <ParseBuffer+0x2b8>)
 80062c6:	6811      	ldr	r1, [r2, #0]
 80062c8:	6019      	str	r1, [r3, #0]
 80062ca:	8892      	ldrh	r2, [r2, #4]
 80062cc:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80062ce:	4b76      	ldr	r3, [pc, #472]	@ (80064a8 <ParseBuffer+0x2bc>)
 80062d0:	195b      	adds	r3, r3, r5
 80062d2:	19db      	adds	r3, r3, r7
 80062d4:	4a75      	ldr	r2, [pc, #468]	@ (80064ac <ParseBuffer+0x2c0>)
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	2200      	movs	r2, #0
 80062da:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80062dc:	4b74      	ldr	r3, [pc, #464]	@ (80064b0 <ParseBuffer+0x2c4>)
 80062de:	195b      	adds	r3, r3, r5
 80062e0:	19db      	adds	r3, r3, r7
 80062e2:	4a74      	ldr	r2, [pc, #464]	@ (80064b4 <ParseBuffer+0x2c8>)
 80062e4:	6811      	ldr	r1, [r2, #0]
 80062e6:	6019      	str	r1, [r3, #0]
 80062e8:	8892      	ldrh	r2, [r2, #4]
 80062ea:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80062ec:	4b72      	ldr	r3, [pc, #456]	@ (80064b8 <ParseBuffer+0x2cc>)
 80062ee:	195b      	adds	r3, r3, r5
 80062f0:	19db      	adds	r3, r3, r7
 80062f2:	223e      	movs	r2, #62	@ 0x3e
 80062f4:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80062f6:	4b71      	ldr	r3, [pc, #452]	@ (80064bc <ParseBuffer+0x2d0>)
 80062f8:	195b      	adds	r3, r3, r5
 80062fa:	19db      	adds	r3, r3, r7
 80062fc:	4a70      	ldr	r2, [pc, #448]	@ (80064c0 <ParseBuffer+0x2d4>)
 80062fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006300:	c313      	stmia	r3!, {r0, r1, r4}
 8006302:	8811      	ldrh	r1, [r2, #0]
 8006304:	8019      	strh	r1, [r3, #0]
 8006306:	7892      	ldrb	r2, [r2, #2]
 8006308:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 800630a:	4b6e      	ldr	r3, [pc, #440]	@ (80064c4 <ParseBuffer+0x2d8>)
 800630c:	195b      	adds	r3, r3, r5
 800630e:	19db      	adds	r3, r3, r7
 8006310:	4a6d      	ldr	r2, [pc, #436]	@ (80064c8 <ParseBuffer+0x2dc>)
 8006312:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006314:	c313      	stmia	r3!, {r0, r1, r4}
 8006316:	8812      	ldrh	r2, [r2, #0]
 8006318:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800631a:	4b5c      	ldr	r3, [pc, #368]	@ (800648c <ParseBuffer+0x2a0>)
 800631c:	195b      	adds	r3, r3, r5
 800631e:	19db      	adds	r3, r3, r7
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8006326:	2344      	movs	r3, #68	@ 0x44
 8006328:	18fa      	adds	r2, r7, r3
 800632a:	2348      	movs	r3, #72	@ 0x48
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	0011      	movs	r1, r2
 8006330:	0018      	movs	r0, r3
 8006332:	f01f f9ca 	bl	80256ca <strstr>
 8006336:	0003      	movs	r3, r0
 8006338:	19ba      	adds	r2, r7, r6
 800633a:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 800633c:	4b53      	ldr	r3, [pc, #332]	@ (800648c <ParseBuffer+0x2a0>)
 800633e:	22b0      	movs	r2, #176	@ 0xb0
 8006340:	0052      	lsls	r2, r2, #1
 8006342:	189b      	adds	r3, r3, r2
 8006344:	19db      	adds	r3, r3, r7
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d10c      	bne.n	8006366 <ParseBuffer+0x17a>
    ParsePoint = strstr(tempBuf, ready);
 800634c:	232c      	movs	r3, #44	@ 0x2c
 800634e:	18fa      	adds	r2, r7, r3
 8006350:	2348      	movs	r3, #72	@ 0x48
 8006352:	18fb      	adds	r3, r7, r3
 8006354:	0011      	movs	r1, r2
 8006356:	0018      	movs	r0, r3
 8006358:	f01f f9b7 	bl	80256ca <strstr>
 800635c:	0003      	movs	r3, r0
 800635e:	22ac      	movs	r2, #172	@ 0xac
 8006360:	0052      	lsls	r2, r2, #1
 8006362:	18ba      	adds	r2, r7, r2
 8006364:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8006366:	4b49      	ldr	r3, [pc, #292]	@ (800648c <ParseBuffer+0x2a0>)
 8006368:	22b0      	movs	r2, #176	@ 0xb0
 800636a:	0052      	lsls	r2, r2, #1
 800636c:	189b      	adds	r3, r3, r2
 800636e:	19db      	adds	r3, r3, r7
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d10c      	bne.n	8006390 <ParseBuffer+0x1a4>
    ParsePoint = strstr(tempBuf, start);
 8006376:	2328      	movs	r3, #40	@ 0x28
 8006378:	18fa      	adds	r2, r7, r3
 800637a:	2348      	movs	r3, #72	@ 0x48
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	0011      	movs	r1, r2
 8006380:	0018      	movs	r0, r3
 8006382:	f01f f9a2 	bl	80256ca <strstr>
 8006386:	0003      	movs	r3, r0
 8006388:	22ac      	movs	r2, #172	@ 0xac
 800638a:	0052      	lsls	r2, r2, #1
 800638c:	18ba      	adds	r2, r7, r2
 800638e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8006390:	4b3e      	ldr	r3, [pc, #248]	@ (800648c <ParseBuffer+0x2a0>)
 8006392:	22b0      	movs	r2, #176	@ 0xb0
 8006394:	0052      	lsls	r2, r2, #1
 8006396:	189b      	adds	r3, r3, r2
 8006398:	19db      	adds	r3, r3, r7
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b05      	cmp	r3, #5
 800639e:	d10c      	bne.n	80063ba <ParseBuffer+0x1ce>
    ParsePoint = strstr(tempBuf, TIME);
 80063a0:	2308      	movs	r3, #8
 80063a2:	18fa      	adds	r2, r7, r3
 80063a4:	2348      	movs	r3, #72	@ 0x48
 80063a6:	18fb      	adds	r3, r7, r3
 80063a8:	0011      	movs	r1, r2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f01f f98d 	bl	80256ca <strstr>
 80063b0:	0003      	movs	r3, r0
 80063b2:	22ac      	movs	r2, #172	@ 0xac
 80063b4:	0052      	lsls	r2, r2, #1
 80063b6:	18ba      	adds	r2, r7, r2
 80063b8:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80063ba:	233c      	movs	r3, #60	@ 0x3c
 80063bc:	18fa      	adds	r2, r7, r3
 80063be:	2448      	movs	r4, #72	@ 0x48
 80063c0:	193b      	adds	r3, r7, r4
 80063c2:	0011      	movs	r1, r2
 80063c4:	0018      	movs	r0, r3
 80063c6:	f01f f980 	bl	80256ca <strstr>
 80063ca:	0003      	movs	r3, r0
 80063cc:	22aa      	movs	r2, #170	@ 0xaa
 80063ce:	0052      	lsls	r2, r2, #1
 80063d0:	18ba      	adds	r2, r7, r2
 80063d2:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80063d4:	2318      	movs	r3, #24
 80063d6:	18fa      	adds	r2, r7, r3
 80063d8:	193b      	adds	r3, r7, r4
 80063da:	0011      	movs	r1, r2
 80063dc:	0018      	movs	r0, r3
 80063de:	f01f f974 	bl	80256ca <strstr>
 80063e2:	0003      	movs	r3, r0
 80063e4:	22a8      	movs	r2, #168	@ 0xa8
 80063e6:	0052      	lsls	r2, r2, #1
 80063e8:	18ba      	adds	r2, r7, r2
 80063ea:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80063ec:	4a37      	ldr	r2, [pc, #220]	@ (80064cc <ParseBuffer+0x2e0>)
 80063ee:	193b      	adds	r3, r7, r4
 80063f0:	0011      	movs	r1, r2
 80063f2:	0018      	movs	r0, r3
 80063f4:	f01f f969 	bl	80256ca <strstr>
 80063f8:	0003      	movs	r3, r0
 80063fa:	22a6      	movs	r2, #166	@ 0xa6
 80063fc:	0052      	lsls	r2, r2, #1
 80063fe:	18ba      	adds	r2, r7, r2
 8006400:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8006402:	2334      	movs	r3, #52	@ 0x34
 8006404:	18fa      	adds	r2, r7, r3
 8006406:	193b      	adds	r3, r7, r4
 8006408:	0011      	movs	r1, r2
 800640a:	0018      	movs	r0, r3
 800640c:	f01f f95d 	bl	80256ca <strstr>
 8006410:	0003      	movs	r3, r0
 8006412:	22a4      	movs	r2, #164	@ 0xa4
 8006414:	0052      	lsls	r2, r2, #1
 8006416:	18ba      	adds	r2, r7, r2
 8006418:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 800641a:	4b1b      	ldr	r3, [pc, #108]	@ (8006488 <ParseBuffer+0x29c>)
 800641c:	21b0      	movs	r1, #176	@ 0xb0
 800641e:	0049      	lsls	r1, r1, #1
 8006420:	185b      	adds	r3, r3, r1
 8006422:	19db      	adds	r3, r3, r7
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d800      	bhi.n	800642c <ParseBuffer+0x240>
 800642a:	e0be      	b.n	80065aa <ParseBuffer+0x3be>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 800642c:	22ac      	movs	r2, #172	@ 0xac
 800642e:	0052      	lsls	r2, r2, #1
 8006430:	18bb      	adds	r3, r7, r2
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d051      	beq.n	80064dc <ParseBuffer+0x2f0>
 8006438:	18bb      	adds	r3, r7, r2
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006440:	d14c      	bne.n	80064dc <ParseBuffer+0x2f0>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8006442:	2360      	movs	r3, #96	@ 0x60
 8006444:	33ff      	adds	r3, #255	@ 0xff
 8006446:	18fb      	adds	r3, r7, r3
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 800644c:	4b20      	ldr	r3, [pc, #128]	@ (80064d0 <ParseBuffer+0x2e4>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b12      	cmp	r3, #18
 8006452:	d143      	bne.n	80064dc <ParseBuffer+0x2f0>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8006454:	4b0c      	ldr	r3, [pc, #48]	@ (8006488 <ParseBuffer+0x29c>)
 8006456:	185b      	adds	r3, r3, r1
 8006458:	19db      	adds	r3, r3, r7
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	2b2b      	cmp	r3, #43	@ 0x2b
 800645e:	d10b      	bne.n	8006478 <ParseBuffer+0x28c>
 8006460:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <ParseBuffer+0x2a4>)
 8006462:	185b      	adds	r3, r3, r1
 8006464:	19db      	adds	r3, r3, r7
 8006466:	2221      	movs	r2, #33	@ 0x21
 8006468:	5c9b      	ldrb	r3, [r3, r2]
 800646a:	2b32      	cmp	r3, #50	@ 0x32
 800646c:	d104      	bne.n	8006478 <ParseBuffer+0x28c>
          ParseTime(tempBuf);
 800646e:	193b      	adds	r3, r7, r4
 8006470:	0018      	movs	r0, r3
 8006472:	f003 f8c3 	bl	80095fc <ParseTime>
 8006476:	e031      	b.n	80064dc <ParseBuffer+0x2f0>
        }
        else {
          Error("Error getting time");
 8006478:	4a16      	ldr	r2, [pc, #88]	@ (80064d4 <ParseBuffer+0x2e8>)
 800647a:	4b17      	ldr	r3, [pc, #92]	@ (80064d8 <ParseBuffer+0x2ec>)
 800647c:	0019      	movs	r1, r3
 800647e:	2001      	movs	r0, #1
 8006480:	f00c fe12 	bl	80130a8 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8006484:	2306      	movs	r3, #6
 8006486:	e094      	b.n	80065b2 <ParseBuffer+0x3c6>
 8006488:	fffffea2 	.word	0xfffffea2
 800648c:	fffffea1 	.word	0xfffffea1
 8006490:	fffffee8 	.word	0xfffffee8
 8006494:	0802a68c 	.word	0x0802a68c
 8006498:	fffffee4 	.word	0xfffffee4
 800649c:	0802a6b8 	.word	0x0802a6b8
 80064a0:	fffffedc 	.word	0xfffffedc
 80064a4:	0802a6bc 	.word	0x0802a6bc
 80064a8:	fffffed4 	.word	0xfffffed4
 80064ac:	4c494146 	.word	0x4c494146
 80064b0:	fffffecc 	.word	0xfffffecc
 80064b4:	0802a6c4 	.word	0x0802a6c4
 80064b8:	fffffec8 	.word	0xfffffec8
 80064bc:	fffffeb8 	.word	0xfffffeb8
 80064c0:	0802a6cc 	.word	0x0802a6cc
 80064c4:	fffffea8 	.word	0xfffffea8
 80064c8:	0802a6dc 	.word	0x0802a6dc
 80064cc:	0802d63c 	.word	0x0802d63c
 80064d0:	20000676 	.word	0x20000676
 80064d4:	0802a6a4 	.word	0x0802a6a4
 80064d8:	08029afc 	.word	0x08029afc
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80064dc:	22ac      	movs	r2, #172	@ 0xac
 80064de:	0052      	lsls	r2, r2, #1
 80064e0:	18bb      	adds	r3, r7, r2
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <ParseBuffer+0x310>
 80064e8:	18bb      	adds	r3, r7, r2
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b72      	cmp	r3, #114	@ 0x72
 80064f0:	d104      	bne.n	80064fc <ParseBuffer+0x310>
      status = RECEIVE_STATUS_READY;
 80064f2:	2360      	movs	r3, #96	@ 0x60
 80064f4:	33ff      	adds	r3, #255	@ 0xff
 80064f6:	18fb      	adds	r3, r7, r3
 80064f8:	2202      	movs	r2, #2
 80064fa:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80064fc:	22ac      	movs	r2, #172	@ 0xac
 80064fe:	0052      	lsls	r2, r2, #1
 8006500:	18bb      	adds	r3, r7, r2
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d009      	beq.n	800651c <ParseBuffer+0x330>
 8006508:	18bb      	adds	r3, r7, r2
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006510:	d104      	bne.n	800651c <ParseBuffer+0x330>
      status = RECEIVE_STATUS_START;
 8006512:	2360      	movs	r3, #96	@ 0x60
 8006514:	33ff      	adds	r3, #255	@ 0xff
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	2205      	movs	r2, #5
 800651a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 800651c:	22ac      	movs	r2, #172	@ 0xac
 800651e:	0052      	lsls	r2, r2, #1
 8006520:	18bb      	adds	r3, r7, r2
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d009      	beq.n	800653c <ParseBuffer+0x350>
 8006528:	18bb      	adds	r3, r7, r2
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b2b      	cmp	r3, #43	@ 0x2b
 8006530:	d104      	bne.n	800653c <ParseBuffer+0x350>
      status = RECEIVE_STATUS_TIME;
 8006532:	2360      	movs	r3, #96	@ 0x60
 8006534:	33ff      	adds	r3, #255	@ 0xff
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	220b      	movs	r2, #11
 800653a:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 800653c:	22aa      	movs	r2, #170	@ 0xaa
 800653e:	0052      	lsls	r2, r2, #1
 8006540:	18bb      	adds	r3, r7, r2
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <ParseBuffer+0x366>
 8006548:	18bb      	adds	r3, r7, r2
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b45      	cmp	r3, #69	@ 0x45
 8006550:	d00a      	beq.n	8006568 <ParseBuffer+0x37c>
 8006552:	22a4      	movs	r2, #164	@ 0xa4
 8006554:	0052      	lsls	r2, r2, #1
 8006556:	18bb      	adds	r3, r7, r2
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <ParseBuffer+0x386>
 800655e:	18bb      	adds	r3, r7, r2
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b46      	cmp	r3, #70	@ 0x46
 8006566:	d104      	bne.n	8006572 <ParseBuffer+0x386>
      status = RECEIVE_STATUS_ERROR;
 8006568:	2360      	movs	r3, #96	@ 0x60
 800656a:	33ff      	adds	r3, #255	@ 0xff
 800656c:	18fb      	adds	r3, r7, r3
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8006572:	22a8      	movs	r2, #168	@ 0xa8
 8006574:	0052      	lsls	r2, r2, #1
 8006576:	18bb      	adds	r3, r7, r2
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <ParseBuffer+0x3a2>
 800657e:	18bb      	adds	r3, r7, r2
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b57      	cmp	r3, #87	@ 0x57
 8006586:	d102      	bne.n	800658e <ParseBuffer+0x3a2>
      ConnectionMade = true;
 8006588:	4b0c      	ldr	r3, [pc, #48]	@ (80065bc <ParseBuffer+0x3d0>)
 800658a:	2201      	movs	r2, #1
 800658c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800658e:	22a6      	movs	r2, #166	@ 0xa6
 8006590:	0052      	lsls	r2, r2, #1
 8006592:	18bb      	adds	r3, r7, r2
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <ParseBuffer+0x3be>
 800659a:	18bb      	adds	r3, r7, r2
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b32      	cmp	r3, #50	@ 0x32
 80065a2:	d102      	bne.n	80065aa <ParseBuffer+0x3be>
      beurs = true;
 80065a4:	4b06      	ldr	r3, [pc, #24]	@ (80065c0 <ParseBuffer+0x3d4>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80065aa:	2360      	movs	r3, #96	@ 0x60
 80065ac:	33ff      	adds	r3, #255	@ 0xff
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	781b      	ldrb	r3, [r3, #0]

}
 80065b2:	0018      	movs	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b059      	add	sp, #356	@ 0x164
 80065b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	200005a4 	.word	0x200005a4
 80065c0:	200005a6 	.word	0x200005a6

080065c4 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80065ca:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <PollAwake+0x34>)
 80065cc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7f9 fdcb 	bl	800016c <strlen>
 80065d6:	0003      	movs	r3, r0
 80065d8:	b29a      	uxth	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	0011      	movs	r1, r2
 80065de:	0018      	movs	r0, r3
 80065e0:	f7fe fc88 	bl	8004ef4 <ESP_Send>
 80065e4:	1e03      	subs	r3, r0, #0
 80065e6:	d001      	beq.n	80065ec <PollAwake+0x28>
    return true;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <PollAwake+0x2a>
  }
  else{
    return false;
 80065ec:	2300      	movs	r3, #0
  }
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	0802a6ec 	.word	0x0802a6ec

080065fc <RFPower>:

bool RFPower(){
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8006602:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <RFPower+0x34>)
 8006604:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0018      	movs	r0, r3
 800660a:	f7f9 fdaf 	bl	800016c <strlen>
 800660e:	0003      	movs	r3, r0
 8006610:	b29a      	uxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	0011      	movs	r1, r2
 8006616:	0018      	movs	r0, r3
 8006618:	f7fe fc6c 	bl	8004ef4 <ESP_Send>
 800661c:	1e03      	subs	r3, r0, #0
 800661e:	d001      	beq.n	8006624 <RFPower+0x28>
    return true;
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <RFPower+0x2a>
  }
  else{
    return false;
 8006624:	2300      	movs	r3, #0
  }
}
 8006626:	0018      	movs	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	b002      	add	sp, #8
 800662c:	bd80      	pop	{r7, pc}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	0802a6f4 	.word	0x0802a6f4

08006634 <CheckRFPower>:

bool CheckRFPower(){
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800663a:	4b0b      	ldr	r3, [pc, #44]	@ (8006668 <CheckRFPower+0x34>)
 800663c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f7f9 fd93 	bl	800016c <strlen>
 8006646:	0003      	movs	r3, r0
 8006648:	b29a      	uxth	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	0011      	movs	r1, r2
 800664e:	0018      	movs	r0, r3
 8006650:	f7fe fc50 	bl	8004ef4 <ESP_Send>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d001      	beq.n	800665c <CheckRFPower+0x28>
    return true;
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <CheckRFPower+0x2a>
  }
  else{
    return false;
 800665c:	2300      	movs	r3, #0
  }
}
 800665e:	0018      	movs	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	b002      	add	sp, #8
 8006664:	bd80      	pop	{r7, pc}
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	0802a704 	.word	0x0802a704

0800666c <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8006672:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <ATRestore+0x34>)
 8006674:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	0018      	movs	r0, r3
 800667a:	f7f9 fd77 	bl	800016c <strlen>
 800667e:	0003      	movs	r3, r0
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0011      	movs	r1, r2
 8006686:	0018      	movs	r0, r3
 8006688:	f7fe fc34 	bl	8004ef4 <ESP_Send>
 800668c:	1e03      	subs	r3, r0, #0
 800668e:	d001      	beq.n	8006694 <ATRestore+0x28>
    return true;
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <ATRestore+0x2a>
  }
  else{
    return false;
 8006694:	2300      	movs	r3, #0
  }
}
 8006696:	0018      	movs	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	b002      	add	sp, #8
 800669c:	bd80      	pop	{r7, pc}
 800669e:	46c0      	nop			@ (mov r8, r8)
 80066a0:	0802a714 	.word	0x0802a714

080066a4 <CWINIT>:

bool CWINIT(){
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80066aa:	4b0b      	ldr	r3, [pc, #44]	@ (80066d8 <CWINIT+0x34>)
 80066ac:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0018      	movs	r0, r3
 80066b2:	f7f9 fd5b 	bl	800016c <strlen>
 80066b6:	0003      	movs	r3, r0
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	0011      	movs	r1, r2
 80066be:	0018      	movs	r0, r3
 80066c0:	f7fe fc18 	bl	8004ef4 <ESP_Send>
 80066c4:	1e03      	subs	r3, r0, #0
 80066c6:	d001      	beq.n	80066cc <CWINIT+0x28>
    return true;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e000      	b.n	80066ce <CWINIT+0x2a>
  }
  else{
    return false;
 80066cc:	2300      	movs	r3, #0
  }
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b002      	add	sp, #8
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	0802a724 	.word	0x0802a724

080066dc <CWMODE1>:

bool CWMODE1(){
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80066e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006710 <CWMODE1+0x34>)
 80066e4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	0018      	movs	r0, r3
 80066ea:	f7f9 fd3f 	bl	800016c <strlen>
 80066ee:	0003      	movs	r3, r0
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0011      	movs	r1, r2
 80066f6:	0018      	movs	r0, r3
 80066f8:	f7fe fbfc 	bl	8004ef4 <ESP_Send>
 80066fc:	1e03      	subs	r3, r0, #0
 80066fe:	d001      	beq.n	8006704 <CWMODE1+0x28>
    return true;
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <CWMODE1+0x2a>
  }
  else{
    return false;
 8006704:	2300      	movs	r3, #0
  }
}
 8006706:	0018      	movs	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	b002      	add	sp, #8
 800670c:	bd80      	pop	{r7, pc}
 800670e:	46c0      	nop			@ (mov r8, r8)
 8006710:	0802a734 	.word	0x0802a734

08006714 <CWMODE2>:

bool CWMODE2(){
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800671a:	4b0b      	ldr	r3, [pc, #44]	@ (8006748 <CWMODE2+0x34>)
 800671c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	0018      	movs	r0, r3
 8006722:	f7f9 fd23 	bl	800016c <strlen>
 8006726:	0003      	movs	r3, r0
 8006728:	b29a      	uxth	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	0011      	movs	r1, r2
 800672e:	0018      	movs	r0, r3
 8006730:	f7fe fbe0 	bl	8004ef4 <ESP_Send>
 8006734:	1e03      	subs	r3, r0, #0
 8006736:	d001      	beq.n	800673c <CWMODE2+0x28>
    return true;
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <CWMODE2+0x2a>
  }
  else{
    return false;
 800673c:	2300      	movs	r3, #0
  }
}
 800673e:	0018      	movs	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	b002      	add	sp, #8
 8006744:	bd80      	pop	{r7, pc}
 8006746:	46c0      	nop			@ (mov r8, r8)
 8006748:	0802a744 	.word	0x0802a744

0800674c <CWAUTOCONN>:

bool CWAUTOCONN(){
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8006752:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <CWAUTOCONN+0x34>)
 8006754:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	0018      	movs	r0, r3
 800675a:	f7f9 fd07 	bl	800016c <strlen>
 800675e:	0003      	movs	r3, r0
 8006760:	b29a      	uxth	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	0011      	movs	r1, r2
 8006766:	0018      	movs	r0, r3
 8006768:	f7fe fbc4 	bl	8004ef4 <ESP_Send>
 800676c:	1e03      	subs	r3, r0, #0
 800676e:	d001      	beq.n	8006774 <CWAUTOCONN+0x28>
    return true;
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8006774:	2300      	movs	r3, #0
  }
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b002      	add	sp, #8
 800677c:	bd80      	pop	{r7, pc}
 800677e:	46c0      	nop			@ (mov r8, r8)
 8006780:	0802a754 	.word	0x0802a754

08006784 <CWJAP>:

bool CWJAP(){
 8006784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006786:	46c6      	mov	lr, r8
 8006788:	b500      	push	{lr}
 800678a:	b0a2      	sub	sp, #136	@ 0x88
 800678c:	af00      	add	r7, sp, #0
 800678e:	466b      	mov	r3, sp
 8006790:	4698      	mov	r8, r3
  beursTest = true;
 8006792:	4b39      	ldr	r3, [pc, #228]	@ (8006878 <CWJAP+0xf4>)
 8006794:	2201      	movs	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8006798:	2618      	movs	r6, #24
 800679a:	19bb      	adds	r3, r7, r6
 800679c:	2264      	movs	r2, #100	@ 0x64
 800679e:	2100      	movs	r1, #0
 80067a0:	0018      	movs	r0, r3
 80067a2:	f01e ff57 	bl	8025654 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80067a6:	4b35      	ldr	r3, [pc, #212]	@ (800687c <CWJAP+0xf8>)
 80067a8:	4a35      	ldr	r2, [pc, #212]	@ (8006880 <CWJAP+0xfc>)
 80067aa:	4936      	ldr	r1, [pc, #216]	@ (8006884 <CWJAP+0x100>)
 80067ac:	19b8      	adds	r0, r7, r6
 80067ae:	f01e fde7 	bl	8025380 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80067b2:	19bb      	adds	r3, r7, r6
 80067b4:	0018      	movs	r0, r3
 80067b6:	f7f9 fcd9 	bl	800016c <strlen>
 80067ba:	0002      	movs	r2, r0
 80067bc:	216f      	movs	r1, #111	@ 0x6f
 80067be:	0030      	movs	r0, r6
 80067c0:	180b      	adds	r3, r1, r0
 80067c2:	19db      	adds	r3, r3, r7
 80067c4:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80067c6:	180b      	adds	r3, r1, r0
 80067c8:	19db      	adds	r3, r3, r7
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	3301      	adds	r3, #1
 80067ce:	1e5a      	subs	r2, r3, #1
 80067d0:	2180      	movs	r1, #128	@ 0x80
 80067d2:	1879      	adds	r1, r7, r1
 80067d4:	600a      	str	r2, [r1, #0]
 80067d6:	001a      	movs	r2, r3
 80067d8:	60ba      	str	r2, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	60fa      	str	r2, [r7, #12]
 80067de:	68b8      	ldr	r0, [r7, #8]
 80067e0:	68f9      	ldr	r1, [r7, #12]
 80067e2:	0002      	movs	r2, r0
 80067e4:	0f52      	lsrs	r2, r2, #29
 80067e6:	000e      	movs	r6, r1
 80067e8:	00f6      	lsls	r6, r6, #3
 80067ea:	617e      	str	r6, [r7, #20]
 80067ec:	697e      	ldr	r6, [r7, #20]
 80067ee:	4316      	orrs	r6, r2
 80067f0:	617e      	str	r6, [r7, #20]
 80067f2:	0002      	movs	r2, r0
 80067f4:	00d2      	lsls	r2, r2, #3
 80067f6:	613a      	str	r2, [r7, #16]
 80067f8:	001a      	movs	r2, r3
 80067fa:	603a      	str	r2, [r7, #0]
 80067fc:	2200      	movs	r2, #0
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	6838      	ldr	r0, [r7, #0]
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	0002      	movs	r2, r0
 8006806:	0f52      	lsrs	r2, r2, #29
 8006808:	000e      	movs	r6, r1
 800680a:	00f5      	lsls	r5, r6, #3
 800680c:	4315      	orrs	r5, r2
 800680e:	0002      	movs	r2, r0
 8006810:	00d4      	lsls	r4, r2, #3
 8006812:	3307      	adds	r3, #7
 8006814:	08db      	lsrs	r3, r3, #3
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	466a      	mov	r2, sp
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	469d      	mov	sp, r3
 800681e:	466b      	mov	r3, sp
 8006820:	3300      	adds	r3, #0
 8006822:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8006824:	246f      	movs	r4, #111	@ 0x6f
 8006826:	2518      	movs	r5, #24
 8006828:	1963      	adds	r3, r4, r5
 800682a:	19db      	adds	r3, r3, r7
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	3301      	adds	r3, #1
 8006830:	001a      	movs	r2, r3
 8006832:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006834:	2100      	movs	r1, #0
 8006836:	0018      	movs	r0, r3
 8006838:	f01e ff0c 	bl	8025654 <memset>
  strncpy(atCommand, atCommandBuff, len);
 800683c:	1963      	adds	r3, r4, r5
 800683e:	19db      	adds	r3, r3, r7
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	1979      	adds	r1, r7, r5
 8006844:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006846:	0018      	movs	r0, r3
 8006848:	f01e ff2b 	bl	80256a2 <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800684c:	1963      	adds	r3, r4, r5
 800684e:	19db      	adds	r3, r3, r7
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b29a      	uxth	r2, r3
 8006854:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006856:	0011      	movs	r1, r2
 8006858:	0018      	movs	r0, r3
 800685a:	f7fe fb4b 	bl	8004ef4 <ESP_Send>
 800685e:	1e03      	subs	r3, r0, #0
 8006860:	d001      	beq.n	8006866 <CWJAP+0xe2>
    return true;
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <CWJAP+0xe4>
  }
  else{
    return false;
 8006866:	2300      	movs	r3, #0
 8006868:	46c5      	mov	sp, r8
  }
}
 800686a:	0018      	movs	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	b022      	add	sp, #136	@ 0x88
 8006870:	bc80      	pop	{r7}
 8006872:	46b8      	mov	r8, r7
 8006874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006876:	46c0      	nop			@ (mov r8, r8)
 8006878:	200005a5 	.word	0x200005a5
 800687c:	0802d648 	.word	0x0802d648
 8006880:	0802d63c 	.word	0x0802d63c
 8006884:	0802a768 	.word	0x0802a768

08006888 <CWMODE3>:

bool CWMODE3(){
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800688e:	4b0b      	ldr	r3, [pc, #44]	@ (80068bc <CWMODE3+0x34>)
 8006890:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	0018      	movs	r0, r3
 8006896:	f7f9 fc69 	bl	800016c <strlen>
 800689a:	0003      	movs	r3, r0
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	0011      	movs	r1, r2
 80068a2:	0018      	movs	r0, r3
 80068a4:	f7fe fb26 	bl	8004ef4 <ESP_Send>
 80068a8:	1e03      	subs	r3, r0, #0
 80068aa:	d001      	beq.n	80068b0 <CWMODE3+0x28>
    return true;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <CWMODE3+0x2a>
  }
  else{
    return false;
 80068b0:	2300      	movs	r3, #0
  }
}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b002      	add	sp, #8
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	46c0      	nop			@ (mov r8, r8)
 80068bc:	0802a780 	.word	0x0802a780

080068c0 <CWSTATE>:

bool CWSTATE(){
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80068c6:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <CWSTATE+0x34>)
 80068c8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	0018      	movs	r0, r3
 80068ce:	f7f9 fc4d 	bl	800016c <strlen>
 80068d2:	0003      	movs	r3, r0
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	0011      	movs	r1, r2
 80068da:	0018      	movs	r0, r3
 80068dc:	f7fe fb0a 	bl	8004ef4 <ESP_Send>
 80068e0:	1e03      	subs	r3, r0, #0
 80068e2:	d001      	beq.n	80068e8 <CWSTATE+0x28>
    return true;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <CWSTATE+0x2a>
  }
  else{
    return false;
 80068e8:	2300      	movs	r3, #0
  }
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b002      	add	sp, #8
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	0802a790 	.word	0x0802a790

080068f8 <CWSAP>:

bool CWSAP(){
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80068fe:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <CWSAP+0x34>)
 8006900:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	0018      	movs	r0, r3
 8006906:	f7f9 fc31 	bl	800016c <strlen>
 800690a:	0003      	movs	r3, r0
 800690c:	b29a      	uxth	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	0011      	movs	r1, r2
 8006912:	0018      	movs	r0, r3
 8006914:	f7fe faee 	bl	8004ef4 <ESP_Send>
 8006918:	1e03      	subs	r3, r0, #0
 800691a:	d001      	beq.n	8006920 <CWSAP+0x28>
    return true;
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <CWSAP+0x2a>
  }
  else{
    return false;
 8006920:	2300      	movs	r3, #0
  }
}
 8006922:	0018      	movs	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	b002      	add	sp, #8
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	0802a7a0 	.word	0x0802a7a0

08006930 <CIPMUX>:

bool CIPMUX(){
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006936:	4b0b      	ldr	r3, [pc, #44]	@ (8006964 <CIPMUX+0x34>)
 8006938:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	0018      	movs	r0, r3
 800693e:	f7f9 fc15 	bl	800016c <strlen>
 8006942:	0003      	movs	r3, r0
 8006944:	b29a      	uxth	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	0011      	movs	r1, r2
 800694a:	0018      	movs	r0, r3
 800694c:	f7fe fad2 	bl	8004ef4 <ESP_Send>
 8006950:	1e03      	subs	r3, r0, #0
 8006952:	d001      	beq.n	8006958 <CIPMUX+0x28>
    return true;
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <CIPMUX+0x2a>
  }
  else{
    return false;
 8006958:	2300      	movs	r3, #0
  }
}
 800695a:	0018      	movs	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	b002      	add	sp, #8
 8006960:	bd80      	pop	{r7, pc}
 8006962:	46c0      	nop			@ (mov r8, r8)
 8006964:	0802a7c4 	.word	0x0802a7c4

08006968 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800696e:	4b0b      	ldr	r3, [pc, #44]	@ (800699c <WEBSERVER+0x34>)
 8006970:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	0018      	movs	r0, r3
 8006976:	f7f9 fbf9 	bl	800016c <strlen>
 800697a:	0003      	movs	r3, r0
 800697c:	b29a      	uxth	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	0011      	movs	r1, r2
 8006982:	0018      	movs	r0, r3
 8006984:	f7fe fab6 	bl	8004ef4 <ESP_Send>
 8006988:	1e03      	subs	r3, r0, #0
 800698a:	d001      	beq.n	8006990 <WEBSERVER+0x28>
    return true;
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006990:	2300      	movs	r3, #0
  }
}
 8006992:	0018      	movs	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	b002      	add	sp, #8
 8006998:	bd80      	pop	{r7, pc}
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	0802a7d4 	.word	0x0802a7d4

080069a0 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 80069a6:	1cfb      	adds	r3, r7, #3
 80069a8:	2200      	movs	r2, #0
 80069aa:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 80069ac:	4b26      	ldr	r3, [pc, #152]	@ (8006a48 <HTTPCPOST+0xa8>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	1dbc      	adds	r4, r7, #6
 80069b2:	1cf9      	adds	r1, r7, #3
 80069b4:	2200      	movs	r2, #0
 80069b6:	0018      	movs	r0, r3
 80069b8:	f7fe fca0 	bl	80052fc <CreateMessage>
 80069bc:	0003      	movs	r3, r0
 80069be:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80069c0:	4b21      	ldr	r3, [pc, #132]	@ (8006a48 <HTTPCPOST+0xa8>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80069c8:	1dbb      	adds	r3, r7, #6
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <HTTPCPOST+0xac>)
 80069ce:	4920      	ldr	r1, [pc, #128]	@ (8006a50 <HTTPCPOST+0xb0>)
 80069d0:	4820      	ldr	r0, [pc, #128]	@ (8006a54 <HTTPCPOST+0xb4>)
 80069d2:	f01e fcd5 	bl	8025380 <siprintf>
 80069d6:	e015      	b.n	8006a04 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80069d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006a58 <HTTPCPOST+0xb8>)
 80069da:	4820      	ldr	r0, [pc, #128]	@ (8006a5c <HTTPCPOST+0xbc>)
 80069dc:	220c      	movs	r2, #12
 80069de:	0019      	movs	r1, r3
 80069e0:	f004 fe76 	bl	800b6d0 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 80069e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a58 <HTTPCPOST+0xb8>)
 80069e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006a60 <HTTPCPOST+0xc0>)
 80069e8:	0011      	movs	r1, r2
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7fe fc62 	bl	80052b4 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80069f0:	1dbb      	adds	r3, r7, #6
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	4c1a      	ldr	r4, [pc, #104]	@ (8006a60 <HTTPCPOST+0xc0>)
 80069f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a64 <HTTPCPOST+0xc4>)
 80069f8:	491b      	ldr	r1, [pc, #108]	@ (8006a68 <HTTPCPOST+0xc8>)
 80069fa:	4816      	ldr	r0, [pc, #88]	@ (8006a54 <HTTPCPOST+0xb4>)
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	0023      	movs	r3, r4
 8006a00:	f01e fcbe 	bl	8025380 <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8006a04:	4b13      	ldr	r3, [pc, #76]	@ (8006a54 <HTTPCPOST+0xb4>)
 8006a06:	0018      	movs	r0, r3
 8006a08:	f7f9 fbb0 	bl	800016c <strlen>
 8006a0c:	0002      	movs	r2, r0
 8006a0e:	1d3b      	adds	r3, r7, #4
 8006a10:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	8818      	ldrh	r0, [r3, #0]
 8006a16:	1cfb      	adds	r3, r7, #3
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	4a14      	ldr	r2, [pc, #80]	@ (8006a6c <HTTPCPOST+0xcc>)
 8006a1c:	4914      	ldr	r1, [pc, #80]	@ (8006a70 <HTTPCPOST+0xd0>)
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	0003      	movs	r3, r0
 8006a22:	2003      	movs	r0, #3
 8006a24:	f00c fb40 	bl	80130a8 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8006a28:	1d3b      	adds	r3, r7, #4
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	4b09      	ldr	r3, [pc, #36]	@ (8006a54 <HTTPCPOST+0xb4>)
 8006a2e:	0011      	movs	r1, r2
 8006a30:	0018      	movs	r0, r3
 8006a32:	f7fe fa5f 	bl	8004ef4 <ESP_Send>
 8006a36:	1e03      	subs	r3, r0, #0
 8006a38:	d001      	beq.n	8006a3e <HTTPCPOST+0x9e>
    return true;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006a3e:	2300      	movs	r3, #0
  }
}
 8006a40:	0018      	movs	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b003      	add	sp, #12
 8006a46:	bd90      	pop	{r4, r7, pc}
 8006a48:	200005a6 	.word	0x200005a6
 8006a4c:	0802d664 	.word	0x0802d664
 8006a50:	0802a7ec 	.word	0x0802a7ec
 8006a54:	200005cc 	.word	0x200005cc
 8006a58:	2000077c 	.word	0x2000077c
 8006a5c:	08080000 	.word	0x08080000
 8006a60:	20000788 	.word	0x20000788
 8006a64:	0802d6a0 	.word	0x0802d6a0
 8006a68:	0802a824 	.word	0x0802a824
 8006a6c:	0802a864 	.word	0x0802a864
 8006a70:	08029ad8 	.word	0x08029ad8

08006a74 <SENDDATA>:

bool SENDDATA(){
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af02      	add	r7, sp, #8
  bool result = false;
 8006a7a:	1dfb      	adds	r3, r7, #7
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8006a80:	4b0e      	ldr	r3, [pc, #56]	@ (8006abc <SENDDATA+0x48>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	1df9      	adds	r1, r7, #7
 8006a86:	2201      	movs	r2, #1
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f7fe fc37 	bl	80052fc <CreateMessage>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	001a      	movs	r2, r3
 8006a92:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <SENDDATA+0x4c>)
 8006a94:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8006a96:	1dfb      	adds	r3, r7, #7
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	4b08      	ldr	r3, [pc, #32]	@ (8006ac0 <SENDDATA+0x4c>)
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	4a08      	ldr	r2, [pc, #32]	@ (8006ac4 <SENDDATA+0x50>)
 8006aa2:	4909      	ldr	r1, [pc, #36]	@ (8006ac8 <SENDDATA+0x54>)
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	0003      	movs	r3, r0
 8006aa8:	2003      	movs	r0, #3
 8006aaa:	f00c fafd 	bl	80130a8 <CreateLine>
  return result;
 8006aae:	1dfb      	adds	r3, r7, #7
 8006ab0:	781b      	ldrb	r3, [r3, #0]
}
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	b002      	add	sp, #8
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	46c0      	nop			@ (mov r8, r8)
 8006abc:	200005a6 	.word	0x200005a6
 8006ac0:	200005c0 	.word	0x200005c0
 8006ac4:	0802a8c0 	.word	0x0802a8c0
 8006ac8:	08029ad8 	.word	0x08029ad8

08006acc <SLEEP>:

bool SLEEP(){
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b00 <SLEEP+0x34>)
 8006ad4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7f9 fb47 	bl	800016c <strlen>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	0011      	movs	r1, r2
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	f7fe fa04 	bl	8004ef4 <ESP_Send>
 8006aec:	1e03      	subs	r3, r0, #0
 8006aee:	d001      	beq.n	8006af4 <SLEEP+0x28>
    return true;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <SLEEP+0x2a>
  }
  else{
    return false;
 8006af4:	2300      	movs	r3, #0
  }
}
 8006af6:	0018      	movs	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	b002      	add	sp, #8
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	46c0      	nop			@ (mov r8, r8)
 8006b00:	0802a8fc 	.word	0x0802a8fc

08006b04 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <CIPSNTPCFG+0x3c>)
 8006b0c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7f9 fb2b 	bl	800016c <strlen>
 8006b16:	0003      	movs	r3, r0
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	0011      	movs	r1, r2
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7fe f9e8 	bl	8004ef4 <ESP_Send>
 8006b24:	1e03      	subs	r3, r0, #0
 8006b26:	d006      	beq.n	8006b36 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006b28:	23fa      	movs	r3, #250	@ 0xfa
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f00d f805 	bl	8013b3c <HAL_Delay>
    return true;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006b36:	2300      	movs	r3, #0
  }
}
 8006b38:	0018      	movs	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	b002      	add	sp, #8
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	0802a90c 	.word	0x0802a90c

08006b44 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b78 <CIPSNTPTIME+0x34>)
 8006b4c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f7f9 fb0b 	bl	800016c <strlen>
 8006b56:	0003      	movs	r3, r0
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	0011      	movs	r1, r2
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f7fe f9c8 	bl	8004ef4 <ESP_Send>
 8006b64:	1e03      	subs	r3, r0, #0
 8006b66:	d001      	beq.n	8006b6c <CIPSNTPTIME+0x28>
    return true;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e000      	b.n	8006b6e <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006b6c:	2300      	movs	r3, #0
  }
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	b002      	add	sp, #8
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	46c0      	nop			@ (mov r8, r8)
 8006b78:	0802a95c 	.word	0x0802a95c

08006b7c <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006b82:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <CIPSNTPINTV+0x34>)
 8006b84:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7f9 faef 	bl	800016c <strlen>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	0011      	movs	r1, r2
 8006b96:	0018      	movs	r0, r3
 8006b98:	f7fe f9ac 	bl	8004ef4 <ESP_Send>
 8006b9c:	1e03      	subs	r3, r0, #0
 8006b9e:	d001      	beq.n	8006ba4 <CIPSNTPINTV+0x28>
    return true;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006ba4:	2300      	movs	r3, #0
  }
}
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b002      	add	sp, #8
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	46c0      	nop			@ (mov r8, r8)
 8006bb0:	0802a970 	.word	0x0802a970

08006bb4 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006bb4:	b5b0      	push	{r4, r5, r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	0002      	movs	r2, r0
 8006bbc:	1dfb      	adds	r3, r7, #7
 8006bbe:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d74 <DMA_ProcessBuffer+0x1c0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	200e      	movs	r0, #14
 8006bca:	183b      	adds	r3, r7, r0
 8006bcc:	2180      	movs	r1, #128	@ 0x80
 8006bce:	0049      	lsls	r1, r1, #1
 8006bd0:	1a8a      	subs	r2, r1, r2
 8006bd2:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006bd4:	230d      	movs	r3, #13
 8006bd6:	18fb      	adds	r3, r7, r3
 8006bd8:	2203      	movs	r2, #3
 8006bda:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006bdc:	183b      	adds	r3, r7, r0
 8006bde:	881a      	ldrh	r2, [r3, #0]
 8006be0:	2380      	movs	r3, #128	@ 0x80
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d903      	bls.n	8006bf0 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006be8:	183b      	adds	r3, r7, r0
 8006bea:	2280      	movs	r2, #128	@ 0x80
 8006bec:	0052      	lsls	r2, r2, #1
 8006bee:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006bf0:	4b61      	ldr	r3, [pc, #388]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	001a      	movs	r2, r3
 8006bf8:	230e      	movs	r3, #14
 8006bfa:	18fb      	adds	r3, r7, r3
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d131      	bne.n	8006c66 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006c02:	4b5e      	ldr	r3, [pc, #376]	@ (8006d7c <DMA_ProcessBuffer+0x1c8>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b14      	cmp	r3, #20
 8006c08:	d91b      	bls.n	8006c42 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8006d7c <DMA_ProcessBuffer+0x1c8>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006c10:	4b5b      	ldr	r3, [pc, #364]	@ (8006d80 <DMA_ProcessBuffer+0x1cc>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <DMA_ProcessBuffer+0x74>
 8006c18:	4b5a      	ldr	r3, [pc, #360]	@ (8006d84 <DMA_ProcessBuffer+0x1d0>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006c20:	230d      	movs	r3, #13
 8006c22:	18fb      	adds	r3, r7, r3
 8006c24:	2207      	movs	r2, #7
 8006c26:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006c28:	4b55      	ldr	r3, [pc, #340]	@ (8006d80 <DMA_ProcessBuffer+0x1cc>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d103      	bne.n	8006c38 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006c30:	4b55      	ldr	r3, [pc, #340]	@ (8006d88 <DMA_ProcessBuffer+0x1d4>)
 8006c32:	220b      	movs	r2, #11
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e016      	b.n	8006c66 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006c38:	230d      	movs	r3, #13
 8006c3a:	18fb      	adds	r3, r7, r3
 8006c3c:	2206      	movs	r2, #6
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	e011      	b.n	8006c66 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006c42:	4b4e      	ldr	r3, [pc, #312]	@ (8006d7c <DMA_ProcessBuffer+0x1c8>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8006d7c <DMA_ProcessBuffer+0x1c8>)
 8006c4c:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006c4e:	f00c ff6b 	bl	8013b28 <HAL_GetTick>
 8006c52:	0003      	movs	r3, r0
 8006c54:	33f5      	adds	r3, #245	@ 0xf5
 8006c56:	33ff      	adds	r3, #255	@ 0xff
 8006c58:	001a      	movs	r2, r3
 8006c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8006d8c <DMA_ProcessBuffer+0x1d8>)
 8006c5c:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006c5e:	230d      	movs	r3, #13
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	2204      	movs	r2, #4
 8006c64:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006c66:	4b44      	ldr	r3, [pc, #272]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	001a      	movs	r2, r3
 8006c6e:	210e      	movs	r1, #14
 8006c70:	187b      	adds	r3, r7, r1
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d100      	bne.n	8006c7a <DMA_ProcessBuffer+0xc6>
 8006c78:	e075      	b.n	8006d66 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006c7a:	4b40      	ldr	r3, [pc, #256]	@ (8006d7c <DMA_ProcessBuffer+0x1c8>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006c80:	4b43      	ldr	r3, [pc, #268]	@ (8006d90 <DMA_ProcessBuffer+0x1dc>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	4b3c      	ldr	r3, [pc, #240]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d109      	bne.n	8006ca4 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006c90:	187b      	adds	r3, r7, r1
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	4b3e      	ldr	r3, [pc, #248]	@ (8006d90 <DMA_ProcessBuffer+0x1dc>)
 8006c98:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006c9a:	230d      	movs	r3, #13
 8006c9c:	18fb      	adds	r3, r7, r3
 8006c9e:	220a      	movs	r2, #10
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	e060      	b.n	8006d66 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8006d90 <DMA_ProcessBuffer+0x1dc>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	001a      	movs	r2, r3
 8006cac:	210e      	movs	r1, #14
 8006cae:	187b      	adds	r3, r7, r1
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006cb6:	187b      	adds	r3, r7, r1
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	4b34      	ldr	r3, [pc, #208]	@ (8006d90 <DMA_ProcessBuffer+0x1dc>)
 8006cbe:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006cc0:	230d      	movs	r3, #13
 8006cc2:	18fb      	adds	r3, r7, r3
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	e04d      	b.n	8006d66 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006cca:	4b2b      	ldr	r3, [pc, #172]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	001a      	movs	r2, r3
 8006cd2:	210e      	movs	r1, #14
 8006cd4:	187b      	adds	r3, r7, r1
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d917      	bls.n	8006d0c <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006cdc:	4b26      	ldr	r3, [pc, #152]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	001a      	movs	r2, r3
 8006ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d94 <DMA_ProcessBuffer+0x1e0>)
 8006ce6:	18d0      	adds	r0, r2, r3
 8006ce8:	4b23      	ldr	r3, [pc, #140]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	001a      	movs	r2, r3
 8006cf0:	187b      	adds	r3, r7, r1
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	b299      	uxth	r1, r3
 8006cf8:	230d      	movs	r3, #13
 8006cfa:	18fc      	adds	r4, r7, r3
 8006cfc:	1dfb      	adds	r3, r7, #7
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	001a      	movs	r2, r3
 8006d02:	f7ff fa73 	bl	80061ec <ParseBuffer>
 8006d06:	0003      	movs	r3, r0
 8006d08:	7023      	strb	r3, [r4, #0]
 8006d0a:	e026      	b.n	8006d5a <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	001a      	movs	r2, r3
 8006d14:	4b1f      	ldr	r3, [pc, #124]	@ (8006d94 <DMA_ProcessBuffer+0x1e0>)
 8006d16:	18d0      	adds	r0, r2, r3
 8006d18:	4b17      	ldr	r3, [pc, #92]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	001a      	movs	r2, r3
 8006d20:	2380      	movs	r3, #128	@ 0x80
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	b299      	uxth	r1, r3
 8006d28:	250d      	movs	r5, #13
 8006d2a:	197c      	adds	r4, r7, r5
 8006d2c:	1dfb      	adds	r3, r7, #7
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	001a      	movs	r2, r3
 8006d32:	f7ff fa5b 	bl	80061ec <ParseBuffer>
 8006d36:	0003      	movs	r3, r0
 8006d38:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006d3a:	210e      	movs	r1, #14
 8006d3c:	187b      	adds	r3, r7, r1
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006d44:	197c      	adds	r4, r7, r5
 8006d46:	1dfb      	adds	r3, r7, #7
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	187b      	adds	r3, r7, r1
 8006d4c:	8819      	ldrh	r1, [r3, #0]
 8006d4e:	4b11      	ldr	r3, [pc, #68]	@ (8006d94 <DMA_ProcessBuffer+0x1e0>)
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7ff fa4b 	bl	80061ec <ParseBuffer>
 8006d56:	0003      	movs	r3, r0
 8006d58:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8006d5a:	230e      	movs	r3, #14
 8006d5c:	18fb      	adds	r3, r7, r3
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006d64:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8006d66:	230d      	movs	r3, #13
 8006d68:	18fb      	adds	r3, r7, r3
 8006d6a:	781b      	ldrb	r3, [r3, #0]
}
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b004      	add	sp, #16
 8006d72:	bdb0      	pop	{r4, r5, r7, pc}
 8006d74:	20002164 	.word	0x20002164
 8006d78:	200007a1 	.word	0x200007a1
 8006d7c:	20000674 	.word	0x20000674
 8006d80:	20000676 	.word	0x20000676
 8006d84:	20000001 	.word	0x20000001
 8006d88:	2000002c 	.word	0x2000002c
 8006d8c:	2000066c 	.word	0x2000066c
 8006d90:	200007a2 	.word	0x200007a2
 8006d94:	200004a0 	.word	0x200004a0

08006d98 <clearDMABuffer>:

void clearDMABuffer(){
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8006d9c:	2380      	movs	r3, #128	@ 0x80
 8006d9e:	005a      	lsls	r2, r3, #1
 8006da0:	4b03      	ldr	r3, [pc, #12]	@ (8006db0 <clearDMABuffer+0x18>)
 8006da2:	2100      	movs	r1, #0
 8006da4:	0018      	movs	r0, r3
 8006da6:	f01e fc55 	bl	8025654 <memset>
}
 8006daa:	46c0      	nop			@ (mov r8, r8)
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	200004a0 	.word	0x200004a0

08006db4 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	0002      	movs	r2, r0
 8006dbc:	1dfb      	adds	r3, r7, #7
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	1dbb      	adds	r3, r7, #6
 8006dc2:	1c0a      	adds	r2, r1, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8006dc6:	210f      	movs	r1, #15
 8006dc8:	187b      	adds	r3, r7, r1
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8006dce:	1dbb      	adds	r3, r7, #6
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d105      	bne.n	8006de2 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8006dd6:	187b      	adds	r3, r7, r1
 8006dd8:	1dfa      	adds	r2, r7, #7
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	4251      	negs	r1, r2
 8006dde:	414a      	adcs	r2, r1
 8006de0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8006de2:	1dbb      	adds	r3, r7, #6
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d107      	bne.n	8006dfa <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8006dea:	230f      	movs	r3, #15
 8006dec:	18fb      	adds	r3, r7, r3
 8006dee:	1dfa      	adds	r2, r7, #7
 8006df0:	7812      	ldrb	r2, [r2, #0]
 8006df2:	3a02      	subs	r2, #2
 8006df4:	4251      	negs	r1, r2
 8006df6:	414a      	adcs	r2, r1
 8006df8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8006dfa:	1dbb      	adds	r3, r7, #6
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d107      	bne.n	8006e12 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8006e02:	230f      	movs	r3, #15
 8006e04:	18fb      	adds	r3, r7, r3
 8006e06:	1dfa      	adds	r2, r7, #7
 8006e08:	7812      	ldrb	r2, [r2, #0]
 8006e0a:	3a05      	subs	r2, #5
 8006e0c:	4251      	negs	r1, r2
 8006e0e:	414a      	adcs	r2, r1
 8006e10:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8006e12:	1dbb      	adds	r3, r7, #6
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b05      	cmp	r3, #5
 8006e18:	d107      	bne.n	8006e2a <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8006e1a:	230f      	movs	r3, #15
 8006e1c:	18fb      	adds	r3, r7, r3
 8006e1e:	1dfa      	adds	r2, r7, #7
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	3a0b      	subs	r2, #11
 8006e24:	4251      	negs	r1, r2
 8006e26:	414a      	adcs	r2, r1
 8006e28:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8006e2a:	230f      	movs	r3, #15
 8006e2c:	18fb      	adds	r3, r7, r3
 8006e2e:	781b      	ldrb	r3, [r3, #0]
}
 8006e30:	0018      	movs	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b004      	add	sp, #16
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <AT_Send>:

bool AT_Send(AT_Commands state){
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	0002      	movs	r2, r0
 8006e40:	1dfb      	adds	r3, r7, #7
 8006e42:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8006e44:	230f      	movs	r3, #15
 8006e46:	18fb      	adds	r3, r7, r3
 8006e48:	2200      	movs	r2, #0
 8006e4a:	701a      	strb	r2, [r3, #0]
  switch (state){
 8006e4c:	1dfb      	adds	r3, r7, #7
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b14      	cmp	r3, #20
 8006e52:	d900      	bls.n	8006e56 <AT_Send+0x1e>
 8006e54:	e19e      	b.n	8007194 <AT_Send+0x35c>
 8006e56:	009a      	lsls	r2, r3, #2
 8006e58:	4bd2      	ldr	r3, [pc, #840]	@ (80071a4 <AT_Send+0x36c>)
 8006e5a:	18d3      	adds	r3, r2, r3
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8006e60:	4bd1      	ldr	r3, [pc, #836]	@ (80071a8 <AT_Send+0x370>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	0018      	movs	r0, r3
 8006e66:	f00c f8c9 	bl	8012ffc <TimestampIsReached>
 8006e6a:	1e03      	subs	r3, r0, #0
 8006e6c:	d100      	bne.n	8006e70 <AT_Send+0x38>
 8006e6e:	e190      	b.n	8007192 <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8006e70:	4ace      	ldr	r2, [pc, #824]	@ (80071ac <AT_Send+0x374>)
 8006e72:	4bcf      	ldr	r3, [pc, #828]	@ (80071b0 <AT_Send+0x378>)
 8006e74:	0019      	movs	r1, r3
 8006e76:	2003      	movs	r0, #3
 8006e78:	f00c f916 	bl	80130a8 <CreateLine>
    ATCommandSend = PollAwake();
 8006e7c:	230f      	movs	r3, #15
 8006e7e:	18fc      	adds	r4, r7, r3
 8006e80:	f7ff fba0 	bl	80065c4 <PollAwake>
 8006e84:	0003      	movs	r3, r0
 8006e86:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006e88:	f00c fe4e 	bl	8013b28 <HAL_GetTick>
 8006e8c:	0003      	movs	r3, r0
 8006e8e:	3332      	adds	r3, #50	@ 0x32
 8006e90:	001a      	movs	r2, r3
 8006e92:	4bc5      	ldr	r3, [pc, #788]	@ (80071a8 <AT_Send+0x370>)
 8006e94:	601a      	str	r2, [r3, #0]
  }
  break;
 8006e96:	e17c      	b.n	8007192 <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8006e98:	4ac6      	ldr	r2, [pc, #792]	@ (80071b4 <AT_Send+0x37c>)
 8006e9a:	4bc5      	ldr	r3, [pc, #788]	@ (80071b0 <AT_Send+0x378>)
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	2003      	movs	r0, #3
 8006ea0:	f00c f902 	bl	80130a8 <CreateLine>
    ATCommandSend = RFPower();
 8006ea4:	230f      	movs	r3, #15
 8006ea6:	18fc      	adds	r4, r7, r3
 8006ea8:	f7ff fba8 	bl	80065fc <RFPower>
 8006eac:	0003      	movs	r3, r0
 8006eae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006eb0:	f00c fe3a 	bl	8013b28 <HAL_GetTick>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	330a      	adds	r3, #10
 8006eb8:	001a      	movs	r2, r3
 8006eba:	4bbb      	ldr	r3, [pc, #748]	@ (80071a8 <AT_Send+0x370>)
 8006ebc:	601a      	str	r2, [r3, #0]
    break;
 8006ebe:	e169      	b.n	8007194 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006ec0:	4abd      	ldr	r2, [pc, #756]	@ (80071b8 <AT_Send+0x380>)
 8006ec2:	4bbb      	ldr	r3, [pc, #748]	@ (80071b0 <AT_Send+0x378>)
 8006ec4:	0019      	movs	r1, r3
 8006ec6:	2003      	movs	r0, #3
 8006ec8:	f00c f8ee 	bl	80130a8 <CreateLine>
    ATCommandSend = CheckRFPower();
 8006ecc:	230f      	movs	r3, #15
 8006ece:	18fc      	adds	r4, r7, r3
 8006ed0:	f7ff fbb0 	bl	8006634 <CheckRFPower>
 8006ed4:	0003      	movs	r3, r0
 8006ed6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006ed8:	f00c fe26 	bl	8013b28 <HAL_GetTick>
 8006edc:	0003      	movs	r3, r0
 8006ede:	330a      	adds	r3, #10
 8006ee0:	001a      	movs	r2, r3
 8006ee2:	4bb1      	ldr	r3, [pc, #708]	@ (80071a8 <AT_Send+0x370>)
 8006ee4:	601a      	str	r2, [r3, #0]
    break;
 8006ee6:	e155      	b.n	8007194 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8006ee8:	4ab4      	ldr	r2, [pc, #720]	@ (80071bc <AT_Send+0x384>)
 8006eea:	4bb1      	ldr	r3, [pc, #708]	@ (80071b0 <AT_Send+0x378>)
 8006eec:	0019      	movs	r1, r3
 8006eee:	2003      	movs	r0, #3
 8006ef0:	f00c f8da 	bl	80130a8 <CreateLine>
    ATCommandSend = ATRestore();
 8006ef4:	230f      	movs	r3, #15
 8006ef6:	18fc      	adds	r4, r7, r3
 8006ef8:	f7ff fbb8 	bl	800666c <ATRestore>
 8006efc:	0003      	movs	r3, r0
 8006efe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006f00:	f00c fe12 	bl	8013b28 <HAL_GetTick>
 8006f04:	0003      	movs	r3, r0
 8006f06:	3332      	adds	r3, #50	@ 0x32
 8006f08:	001a      	movs	r2, r3
 8006f0a:	4ba7      	ldr	r3, [pc, #668]	@ (80071a8 <AT_Send+0x370>)
 8006f0c:	601a      	str	r2, [r3, #0]
    break;
 8006f0e:	e141      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006f10:	4aab      	ldr	r2, [pc, #684]	@ (80071c0 <AT_Send+0x388>)
 8006f12:	4ba7      	ldr	r3, [pc, #668]	@ (80071b0 <AT_Send+0x378>)
 8006f14:	0019      	movs	r1, r3
 8006f16:	2003      	movs	r0, #3
 8006f18:	f00c f8c6 	bl	80130a8 <CreateLine>
    ATCommandSend = CWINIT();
 8006f1c:	230f      	movs	r3, #15
 8006f1e:	18fc      	adds	r4, r7, r3
 8006f20:	f7ff fbc0 	bl	80066a4 <CWINIT>
 8006f24:	0003      	movs	r3, r0
 8006f26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006f28:	f00c fdfe 	bl	8013b28 <HAL_GetTick>
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	33f5      	adds	r3, #245	@ 0xf5
 8006f30:	33ff      	adds	r3, #255	@ 0xff
 8006f32:	001a      	movs	r2, r3
 8006f34:	4b9c      	ldr	r3, [pc, #624]	@ (80071a8 <AT_Send+0x370>)
 8006f36:	601a      	str	r2, [r3, #0]
    break;
 8006f38:	e12c      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8006f3a:	4aa2      	ldr	r2, [pc, #648]	@ (80071c4 <AT_Send+0x38c>)
 8006f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80071b0 <AT_Send+0x378>)
 8006f3e:	0019      	movs	r1, r3
 8006f40:	2003      	movs	r0, #3
 8006f42:	f00c f8b1 	bl	80130a8 <CreateLine>
    ATCommandSend = CWSTATE();
 8006f46:	230f      	movs	r3, #15
 8006f48:	18fc      	adds	r4, r7, r3
 8006f4a:	f7ff fcb9 	bl	80068c0 <CWSTATE>
 8006f4e:	0003      	movs	r3, r0
 8006f50:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006f52:	f00c fde9 	bl	8013b28 <HAL_GetTick>
 8006f56:	0003      	movs	r3, r0
 8006f58:	33f5      	adds	r3, #245	@ 0xf5
 8006f5a:	33ff      	adds	r3, #255	@ 0xff
 8006f5c:	001a      	movs	r2, r3
 8006f5e:	4b92      	ldr	r3, [pc, #584]	@ (80071a8 <AT_Send+0x370>)
 8006f60:	601a      	str	r2, [r3, #0]
    break;
 8006f62:	e117      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8006f64:	4a98      	ldr	r2, [pc, #608]	@ (80071c8 <AT_Send+0x390>)
 8006f66:	4b92      	ldr	r3, [pc, #584]	@ (80071b0 <AT_Send+0x378>)
 8006f68:	0019      	movs	r1, r3
 8006f6a:	2003      	movs	r0, #3
 8006f6c:	f00c f89c 	bl	80130a8 <CreateLine>
    ATCommandSend = CWMODE1();
 8006f70:	230f      	movs	r3, #15
 8006f72:	18fc      	adds	r4, r7, r3
 8006f74:	f7ff fbb2 	bl	80066dc <CWMODE1>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f7c:	f00c fdd4 	bl	8013b28 <HAL_GetTick>
 8006f80:	0003      	movs	r3, r0
 8006f82:	330a      	adds	r3, #10
 8006f84:	001a      	movs	r2, r3
 8006f86:	4b88      	ldr	r3, [pc, #544]	@ (80071a8 <AT_Send+0x370>)
 8006f88:	601a      	str	r2, [r3, #0]
    break;
 8006f8a:	e103      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8006f8c:	4a8e      	ldr	r2, [pc, #568]	@ (80071c8 <AT_Send+0x390>)
 8006f8e:	4b88      	ldr	r3, [pc, #544]	@ (80071b0 <AT_Send+0x378>)
 8006f90:	0019      	movs	r1, r3
 8006f92:	2003      	movs	r0, #3
 8006f94:	f00c f888 	bl	80130a8 <CreateLine>
    ATCommandSend = CWMODE2();
 8006f98:	230f      	movs	r3, #15
 8006f9a:	18fc      	adds	r4, r7, r3
 8006f9c:	f7ff fbba 	bl	8006714 <CWMODE2>
 8006fa0:	0003      	movs	r3, r0
 8006fa2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006fa4:	f00c fdc0 	bl	8013b28 <HAL_GetTick>
 8006fa8:	0003      	movs	r3, r0
 8006faa:	330a      	adds	r3, #10
 8006fac:	001a      	movs	r2, r3
 8006fae:	4b7e      	ldr	r3, [pc, #504]	@ (80071a8 <AT_Send+0x370>)
 8006fb0:	601a      	str	r2, [r3, #0]
    break;
 8006fb2:	e0ef      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8006fb4:	4a85      	ldr	r2, [pc, #532]	@ (80071cc <AT_Send+0x394>)
 8006fb6:	4b7e      	ldr	r3, [pc, #504]	@ (80071b0 <AT_Send+0x378>)
 8006fb8:	0019      	movs	r1, r3
 8006fba:	2003      	movs	r0, #3
 8006fbc:	f00c f874 	bl	80130a8 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8006fc0:	230f      	movs	r3, #15
 8006fc2:	18fc      	adds	r4, r7, r3
 8006fc4:	f7ff fbc2 	bl	800674c <CWAUTOCONN>
 8006fc8:	0003      	movs	r3, r0
 8006fca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006fcc:	f00c fdac 	bl	8013b28 <HAL_GetTick>
 8006fd0:	0003      	movs	r3, r0
 8006fd2:	330a      	adds	r3, #10
 8006fd4:	001a      	movs	r2, r3
 8006fd6:	4b74      	ldr	r3, [pc, #464]	@ (80071a8 <AT_Send+0x370>)
 8006fd8:	601a      	str	r2, [r3, #0]
    break;
 8006fda:	e0db      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8006fdc:	4a7c      	ldr	r2, [pc, #496]	@ (80071d0 <AT_Send+0x398>)
 8006fde:	4b74      	ldr	r3, [pc, #464]	@ (80071b0 <AT_Send+0x378>)
 8006fe0:	0019      	movs	r1, r3
 8006fe2:	2003      	movs	r0, #3
 8006fe4:	f00c f860 	bl	80130a8 <CreateLine>
    ATCommandSend = CWJAP();
 8006fe8:	230f      	movs	r3, #15
 8006fea:	18fc      	adds	r4, r7, r3
 8006fec:	f7ff fbca 	bl	8006784 <CWJAP>
 8006ff0:	0003      	movs	r3, r0
 8006ff2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006ff4:	f00c fd98 	bl	8013b28 <HAL_GetTick>
 8006ff8:	0003      	movs	r3, r0
 8006ffa:	3332      	adds	r3, #50	@ 0x32
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80071a8 <AT_Send+0x370>)
 8007000:	601a      	str	r2, [r3, #0]
    break;
 8007002:	e0c7      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8007004:	4a73      	ldr	r2, [pc, #460]	@ (80071d4 <AT_Send+0x39c>)
 8007006:	4b6a      	ldr	r3, [pc, #424]	@ (80071b0 <AT_Send+0x378>)
 8007008:	0019      	movs	r1, r3
 800700a:	2003      	movs	r0, #3
 800700c:	f00c f84c 	bl	80130a8 <CreateLine>
    ATCommandSend = CWMODE3();
 8007010:	230f      	movs	r3, #15
 8007012:	18fc      	adds	r4, r7, r3
 8007014:	f7ff fc38 	bl	8006888 <CWMODE3>
 8007018:	0003      	movs	r3, r0
 800701a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800701c:	f00c fd84 	bl	8013b28 <HAL_GetTick>
 8007020:	0003      	movs	r3, r0
 8007022:	330a      	adds	r3, #10
 8007024:	001a      	movs	r2, r3
 8007026:	4b60      	ldr	r3, [pc, #384]	@ (80071a8 <AT_Send+0x370>)
 8007028:	601a      	str	r2, [r3, #0]
    break;
 800702a:	e0b3      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800702c:	4a6a      	ldr	r2, [pc, #424]	@ (80071d8 <AT_Send+0x3a0>)
 800702e:	4b60      	ldr	r3, [pc, #384]	@ (80071b0 <AT_Send+0x378>)
 8007030:	0019      	movs	r1, r3
 8007032:	2003      	movs	r0, #3
 8007034:	f00c f838 	bl	80130a8 <CreateLine>
    ATCommandSend = CWSAP();
 8007038:	230f      	movs	r3, #15
 800703a:	18fc      	adds	r4, r7, r3
 800703c:	f7ff fc5c 	bl	80068f8 <CWSAP>
 8007040:	0003      	movs	r3, r0
 8007042:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007044:	f00c fd70 	bl	8013b28 <HAL_GetTick>
 8007048:	0003      	movs	r3, r0
 800704a:	330a      	adds	r3, #10
 800704c:	001a      	movs	r2, r3
 800704e:	4b56      	ldr	r3, [pc, #344]	@ (80071a8 <AT_Send+0x370>)
 8007050:	601a      	str	r2, [r3, #0]
    break;
 8007052:	e09f      	b.n	8007194 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 8007054:	4a61      	ldr	r2, [pc, #388]	@ (80071dc <AT_Send+0x3a4>)
 8007056:	4b56      	ldr	r3, [pc, #344]	@ (80071b0 <AT_Send+0x378>)
 8007058:	0019      	movs	r1, r3
 800705a:	2003      	movs	r0, #3
 800705c:	f00c f824 	bl	80130a8 <CreateLine>
    ATCommandSend = CIPMUX();
 8007060:	230f      	movs	r3, #15
 8007062:	18fc      	adds	r4, r7, r3
 8007064:	f7ff fc64 	bl	8006930 <CIPMUX>
 8007068:	0003      	movs	r3, r0
 800706a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800706c:	f00c fd5c 	bl	8013b28 <HAL_GetTick>
 8007070:	0003      	movs	r3, r0
 8007072:	330a      	adds	r3, #10
 8007074:	001a      	movs	r2, r3
 8007076:	4b4c      	ldr	r3, [pc, #304]	@ (80071a8 <AT_Send+0x370>)
 8007078:	601a      	str	r2, [r3, #0]
    break;
 800707a:	e08b      	b.n	8007194 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 800707c:	4a58      	ldr	r2, [pc, #352]	@ (80071e0 <AT_Send+0x3a8>)
 800707e:	4b4c      	ldr	r3, [pc, #304]	@ (80071b0 <AT_Send+0x378>)
 8007080:	0019      	movs	r1, r3
 8007082:	2003      	movs	r0, #3
 8007084:	f00c f810 	bl	80130a8 <CreateLine>
    ATCommandSend = WEBSERVER();
 8007088:	230f      	movs	r3, #15
 800708a:	18fc      	adds	r4, r7, r3
 800708c:	f7ff fc6c 	bl	8006968 <WEBSERVER>
 8007090:	0003      	movs	r3, r0
 8007092:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007094:	f00c fd48 	bl	8013b28 <HAL_GetTick>
 8007098:	0003      	movs	r3, r0
 800709a:	330a      	adds	r3, #10
 800709c:	001a      	movs	r2, r3
 800709e:	4b42      	ldr	r3, [pc, #264]	@ (80071a8 <AT_Send+0x370>)
 80070a0:	601a      	str	r2, [r3, #0]
    break;
 80070a2:	e077      	b.n	8007194 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80070a4:	230f      	movs	r3, #15
 80070a6:	18fc      	adds	r4, r7, r3
 80070a8:	f7ff fc7a 	bl	80069a0 <HTTPCPOST>
 80070ac:	0003      	movs	r3, r0
 80070ae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80070b0:	f00c fd3a 	bl	8013b28 <HAL_GetTick>
 80070b4:	0003      	movs	r3, r0
 80070b6:	33f5      	adds	r3, #245	@ 0xf5
 80070b8:	33ff      	adds	r3, #255	@ 0xff
 80070ba:	001a      	movs	r2, r3
 80070bc:	4b3a      	ldr	r3, [pc, #232]	@ (80071a8 <AT_Send+0x370>)
 80070be:	601a      	str	r2, [r3, #0]
    break;
 80070c0:	e068      	b.n	8007194 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 80070c2:	4a48      	ldr	r2, [pc, #288]	@ (80071e4 <AT_Send+0x3ac>)
 80070c4:	4b3a      	ldr	r3, [pc, #232]	@ (80071b0 <AT_Send+0x378>)
 80070c6:	0019      	movs	r1, r3
 80070c8:	2003      	movs	r0, #3
 80070ca:	f00b ffed 	bl	80130a8 <CreateLine>
    ATCommandSend = SENDDATA();
 80070ce:	230f      	movs	r3, #15
 80070d0:	18fc      	adds	r4, r7, r3
 80070d2:	f7ff fccf 	bl	8006a74 <SENDDATA>
 80070d6:	0003      	movs	r3, r0
 80070d8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80070da:	f00c fd25 	bl	8013b28 <HAL_GetTick>
 80070de:	0003      	movs	r3, r0
 80070e0:	33f5      	adds	r3, #245	@ 0xf5
 80070e2:	33ff      	adds	r3, #255	@ 0xff
 80070e4:	001a      	movs	r2, r3
 80070e6:	4b30      	ldr	r3, [pc, #192]	@ (80071a8 <AT_Send+0x370>)
 80070e8:	601a      	str	r2, [r3, #0]
    break;
 80070ea:	e053      	b.n	8007194 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80070ec:	4a3e      	ldr	r2, [pc, #248]	@ (80071e8 <AT_Send+0x3b0>)
 80070ee:	4b30      	ldr	r3, [pc, #192]	@ (80071b0 <AT_Send+0x378>)
 80070f0:	0019      	movs	r1, r3
 80070f2:	2003      	movs	r0, #3
 80070f4:	f00b ffd8 	bl	80130a8 <CreateLine>
    ATCommandSend = SLEEP();
 80070f8:	230f      	movs	r3, #15
 80070fa:	18fc      	adds	r4, r7, r3
 80070fc:	f7ff fce6 	bl	8006acc <SLEEP>
 8007100:	0003      	movs	r3, r0
 8007102:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007104:	f00c fd10 	bl	8013b28 <HAL_GetTick>
 8007108:	0003      	movs	r3, r0
 800710a:	330a      	adds	r3, #10
 800710c:	001a      	movs	r2, r3
 800710e:	4b26      	ldr	r3, [pc, #152]	@ (80071a8 <AT_Send+0x370>)
 8007110:	601a      	str	r2, [r3, #0]
    break;
 8007112:	e03f      	b.n	8007194 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8007114:	4a35      	ldr	r2, [pc, #212]	@ (80071ec <AT_Send+0x3b4>)
 8007116:	4b26      	ldr	r3, [pc, #152]	@ (80071b0 <AT_Send+0x378>)
 8007118:	0019      	movs	r1, r3
 800711a:	2003      	movs	r0, #3
 800711c:	f00b ffc4 	bl	80130a8 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8007120:	230f      	movs	r3, #15
 8007122:	18fc      	adds	r4, r7, r3
 8007124:	f7ff fcee 	bl	8006b04 <CIPSNTPCFG>
 8007128:	0003      	movs	r3, r0
 800712a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800712c:	f00c fcfc 	bl	8013b28 <HAL_GetTick>
 8007130:	0003      	movs	r3, r0
 8007132:	330a      	adds	r3, #10
 8007134:	001a      	movs	r2, r3
 8007136:	4b1c      	ldr	r3, [pc, #112]	@ (80071a8 <AT_Send+0x370>)
 8007138:	601a      	str	r2, [r3, #0]
    break;
 800713a:	e02b      	b.n	8007194 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 800713c:	4a2c      	ldr	r2, [pc, #176]	@ (80071f0 <AT_Send+0x3b8>)
 800713e:	4b1c      	ldr	r3, [pc, #112]	@ (80071b0 <AT_Send+0x378>)
 8007140:	0019      	movs	r1, r3
 8007142:	2003      	movs	r0, #3
 8007144:	f00b ffb0 	bl	80130a8 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8007148:	230f      	movs	r3, #15
 800714a:	18fc      	adds	r4, r7, r3
 800714c:	f7ff fcfa 	bl	8006b44 <CIPSNTPTIME>
 8007150:	0003      	movs	r3, r0
 8007152:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007154:	f00c fce8 	bl	8013b28 <HAL_GetTick>
 8007158:	0003      	movs	r3, r0
 800715a:	33f5      	adds	r3, #245	@ 0xf5
 800715c:	33ff      	adds	r3, #255	@ 0xff
 800715e:	001a      	movs	r2, r3
 8007160:	4b11      	ldr	r3, [pc, #68]	@ (80071a8 <AT_Send+0x370>)
 8007162:	601a      	str	r2, [r3, #0]
    break;
 8007164:	e016      	b.n	8007194 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8007166:	4a23      	ldr	r2, [pc, #140]	@ (80071f4 <AT_Send+0x3bc>)
 8007168:	4b11      	ldr	r3, [pc, #68]	@ (80071b0 <AT_Send+0x378>)
 800716a:	0019      	movs	r1, r3
 800716c:	2003      	movs	r0, #3
 800716e:	f00b ff9b 	bl	80130a8 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8007172:	230f      	movs	r3, #15
 8007174:	18fc      	adds	r4, r7, r3
 8007176:	f7ff fd01 	bl	8006b7c <CIPSNTPINTV>
 800717a:	0003      	movs	r3, r0
 800717c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800717e:	f00c fcd3 	bl	8013b28 <HAL_GetTick>
 8007182:	0003      	movs	r3, r0
 8007184:	330a      	adds	r3, #10
 8007186:	001a      	movs	r2, r3
 8007188:	4b07      	ldr	r3, [pc, #28]	@ (80071a8 <AT_Send+0x370>)
 800718a:	601a      	str	r2, [r3, #0]
    break;
 800718c:	e002      	b.n	8007194 <AT_Send+0x35c>

  case AT_END:
    break;
 800718e:	46c0      	nop			@ (mov r8, r8)
 8007190:	e000      	b.n	8007194 <AT_Send+0x35c>
  break;
 8007192:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8007194:	230f      	movs	r3, #15
 8007196:	18fb      	adds	r3, r7, r3
 8007198:	781b      	ldrb	r3, [r3, #0]
}
 800719a:	0018      	movs	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	b005      	add	sp, #20
 80071a0:	bd90      	pop	{r4, r7, pc}
 80071a2:	46c0      	nop			@ (mov r8, r8)
 80071a4:	0802d6fc 	.word	0x0802d6fc
 80071a8:	2000066c 	.word	0x2000066c
 80071ac:	0802a988 	.word	0x0802a988
 80071b0:	08029ad8 	.word	0x08029ad8
 80071b4:	0802a994 	.word	0x0802a994
 80071b8:	0802a9a8 	.word	0x0802a9a8
 80071bc:	0802a9bc 	.word	0x0802a9bc
 80071c0:	0802a9cc 	.word	0x0802a9cc
 80071c4:	0802a9e0 	.word	0x0802a9e0
 80071c8:	0802a9f8 	.word	0x0802a9f8
 80071cc:	0802aa10 	.word	0x0802aa10
 80071d0:	0802aa28 	.word	0x0802aa28
 80071d4:	0802aa3c 	.word	0x0802aa3c
 80071d8:	0802aa58 	.word	0x0802aa58
 80071dc:	0802aa74 	.word	0x0802aa74
 80071e0:	0802aa90 	.word	0x0802aa90
 80071e4:	0802aaac 	.word	0x0802aaac
 80071e8:	0802aabc 	.word	0x0802aabc
 80071ec:	0802aae0 	.word	0x0802aae0
 80071f0:	0802aaf4 	.word	0x0802aaf4
 80071f4:	0802ab0c 	.word	0x0802ab0c

080071f8 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80071f8:	b590      	push	{r4, r7, lr}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80071fe:	1dfb      	adds	r3, r7, #7
 8007200:	2200      	movs	r2, #0
 8007202:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8007204:	4b7d      	ldr	r3, [pc, #500]	@ (80073fc <ESP_WakeTest+0x204>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b05      	cmp	r3, #5
 800720a:	d900      	bls.n	800720e <ESP_WakeTest+0x16>
 800720c:	e0d9      	b.n	80073c2 <ESP_WakeTest+0x1ca>
 800720e:	009a      	lsls	r2, r3, #2
 8007210:	4b7b      	ldr	r3, [pc, #492]	@ (8007400 <ESP_WakeTest+0x208>)
 8007212:	18d3      	adds	r3, r2, r3
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007218:	4b7a      	ldr	r3, [pc, #488]	@ (8007404 <ESP_WakeTest+0x20c>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2201      	movs	r2, #1
 800721e:	4053      	eors	r3, r2
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d036      	beq.n	8007294 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007226:	2380      	movs	r3, #128	@ 0x80
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	4877      	ldr	r0, [pc, #476]	@ (8007408 <ESP_WakeTest+0x210>)
 800722c:	2200      	movs	r2, #0
 800722e:	0019      	movs	r1, r3
 8007230:	f00d ff0b 	bl	801504a <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8007234:	2032      	movs	r0, #50	@ 0x32
 8007236:	f00c fc81 	bl	8013b3c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800723a:	2380      	movs	r3, #128	@ 0x80
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	4872      	ldr	r0, [pc, #456]	@ (8007408 <ESP_WakeTest+0x210>)
 8007240:	2201      	movs	r2, #1
 8007242:	0019      	movs	r1, r3
 8007244:	f00d ff01 	bl	801504a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8007248:	200a      	movs	r0, #10
 800724a:	f00c fc77 	bl	8013b3c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800724e:	4b6f      	ldr	r3, [pc, #444]	@ (800740c <ESP_WakeTest+0x214>)
 8007250:	2200      	movs	r2, #0
 8007252:	2101      	movs	r1, #1
 8007254:	0018      	movs	r0, r3
 8007256:	f00d fef8 	bl	801504a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800725a:	200a      	movs	r0, #10
 800725c:	f00c fc6e 	bl	8013b3c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8007260:	4b6a      	ldr	r3, [pc, #424]	@ (800740c <ESP_WakeTest+0x214>)
 8007262:	2201      	movs	r2, #1
 8007264:	2102      	movs	r1, #2
 8007266:	0018      	movs	r0, r3
 8007268:	f00d feef 	bl	801504a <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800726c:	200a      	movs	r0, #10
 800726e:	f00c fc65 	bl	8013b3c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007272:	4b66      	ldr	r3, [pc, #408]	@ (800740c <ESP_WakeTest+0x214>)
 8007274:	2201      	movs	r2, #1
 8007276:	2101      	movs	r1, #1
 8007278:	0018      	movs	r0, r3
 800727a:	f00d fee6 	bl	801504a <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800727e:	f00c fc53 	bl	8013b28 <HAL_GetTick>
 8007282:	0003      	movs	r3, r0
 8007284:	22af      	movs	r2, #175	@ 0xaf
 8007286:	0092      	lsls	r2, r2, #2
 8007288:	189a      	adds	r2, r3, r2
 800728a:	4b61      	ldr	r3, [pc, #388]	@ (8007410 <ESP_WakeTest+0x218>)
 800728c:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800728e:	4b5d      	ldr	r3, [pc, #372]	@ (8007404 <ESP_WakeTest+0x20c>)
 8007290:	2201      	movs	r2, #1
 8007292:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8007294:	2380      	movs	r3, #128	@ 0x80
 8007296:	005a      	lsls	r2, r3, #1
 8007298:	4b5e      	ldr	r3, [pc, #376]	@ (8007414 <ESP_WakeTest+0x21c>)
 800729a:	0011      	movs	r1, r2
 800729c:	0018      	movs	r0, r3
 800729e:	f7fd fe5b 	bl	8004f58 <ESP_Receive>
 80072a2:	1e03      	subs	r3, r0, #0
 80072a4:	d100      	bne.n	80072a8 <ESP_WakeTest+0xb0>
 80072a6:	e09f      	b.n	80073e8 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 80072a8:	4b54      	ldr	r3, [pc, #336]	@ (80073fc <ESP_WakeTest+0x204>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 80072ae:	e09b      	b.n	80073e8 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80072b0:	4b57      	ldr	r3, [pc, #348]	@ (8007410 <ESP_WakeTest+0x218>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	0018      	movs	r0, r3
 80072b6:	f00b fea1 	bl	8012ffc <TimestampIsReached>
 80072ba:	1e03      	subs	r3, r0, #0
 80072bc:	d100      	bne.n	80072c0 <ESP_WakeTest+0xc8>
 80072be:	e095      	b.n	80073ec <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 80072c0:	4b55      	ldr	r3, [pc, #340]	@ (8007418 <ESP_WakeTest+0x220>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	1dfc      	adds	r4, r7, #7
 80072c6:	0018      	movs	r0, r3
 80072c8:	f7ff fdb6 	bl	8006e38 <AT_Send>
 80072cc:	0003      	movs	r3, r0
 80072ce:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80072d0:	1dfb      	adds	r3, r7, #7
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d100      	bne.n	80072da <ESP_WakeTest+0xe2>
 80072d8:	e088      	b.n	80073ec <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 80072da:	4b48      	ldr	r3, [pc, #288]	@ (80073fc <ESP_WakeTest+0x204>)
 80072dc:	2202      	movs	r2, #2
 80072de:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80072e0:	e084      	b.n	80073ec <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80072e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007410 <ESP_WakeTest+0x218>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f00b fe88 	bl	8012ffc <TimestampIsReached>
 80072ec:	1e03      	subs	r3, r0, #0
 80072ee:	d100      	bne.n	80072f2 <ESP_WakeTest+0xfa>
 80072f0:	e07e      	b.n	80073f0 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80072f2:	4b4a      	ldr	r3, [pc, #296]	@ (800741c <ESP_WakeTest+0x224>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	0018      	movs	r0, r3
 80072f8:	f7ff fc5c 	bl	8006bb4 <DMA_ProcessBuffer>
 80072fc:	0003      	movs	r3, r0
 80072fe:	001a      	movs	r2, r3
 8007300:	4b47      	ldr	r3, [pc, #284]	@ (8007420 <ESP_WakeTest+0x228>)
 8007302:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007304:	4b46      	ldr	r3, [pc, #280]	@ (8007420 <ESP_WakeTest+0x228>)
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	4b44      	ldr	r3, [pc, #272]	@ (800741c <ESP_WakeTest+0x224>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	1dbc      	adds	r4, r7, #6
 800730e:	0019      	movs	r1, r3
 8007310:	0010      	movs	r0, r2
 8007312:	f7ff fd4f 	bl	8006db4 <ATCompare>
 8007316:	0003      	movs	r3, r0
 8007318:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800731a:	4b41      	ldr	r3, [pc, #260]	@ (8007420 <ESP_WakeTest+0x228>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d102      	bne.n	8007328 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8007322:	4b36      	ldr	r3, [pc, #216]	@ (80073fc <ESP_WakeTest+0x204>)
 8007324:	2201      	movs	r2, #1
 8007326:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8007328:	4b3d      	ldr	r3, [pc, #244]	@ (8007420 <ESP_WakeTest+0x228>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b07      	cmp	r3, #7
 800732e:	d104      	bne.n	800733a <ESP_WakeTest+0x142>
          StartProg();
 8007330:	f7fe ff2a 	bl	8006188 <StartProg>
          TestState = ESP_TEST_BOOT;
 8007334:	4b31      	ldr	r3, [pc, #196]	@ (80073fc <ESP_WakeTest+0x204>)
 8007336:	2205      	movs	r2, #5
 8007338:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800733a:	4b39      	ldr	r3, [pc, #228]	@ (8007420 <ESP_WakeTest+0x228>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d109      	bne.n	8007356 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8007342:	f00c fbf1 	bl	8013b28 <HAL_GetTick>
 8007346:	0003      	movs	r3, r0
 8007348:	3332      	adds	r3, #50	@ 0x32
 800734a:	001a      	movs	r2, r3
 800734c:	4b30      	ldr	r3, [pc, #192]	@ (8007410 <ESP_WakeTest+0x218>)
 800734e:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8007350:	4b2a      	ldr	r3, [pc, #168]	@ (80073fc <ESP_WakeTest+0x204>)
 8007352:	2201      	movs	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8007356:	1dbb      	adds	r3, r7, #6
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d048      	beq.n	80073f0 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 800735e:	4b27      	ldr	r3, [pc, #156]	@ (80073fc <ESP_WakeTest+0x204>)
 8007360:	2203      	movs	r2, #3
 8007362:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007364:	e044      	b.n	80073f0 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8007366:	4b2f      	ldr	r3, [pc, #188]	@ (8007424 <ESP_WakeTest+0x22c>)
 8007368:	22fa      	movs	r2, #250	@ 0xfa
 800736a:	0112      	lsls	r2, r2, #4
 800736c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 800736e:	f00a fb71 	bl	8011a54 <Calculate_LED_ON>
 8007372:	0003      	movs	r3, r0
 8007374:	001a      	movs	r2, r3
 8007376:	4b2b      	ldr	r3, [pc, #172]	@ (8007424 <ESP_WakeTest+0x22c>)
 8007378:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 800737a:	4b2a      	ldr	r3, [pc, #168]	@ (8007424 <ESP_WakeTest+0x22c>)
 800737c:	22fa      	movs	r2, #250	@ 0xfa
 800737e:	0112      	lsls	r2, r2, #4
 8007380:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8007382:	4b1e      	ldr	r3, [pc, #120]	@ (80073fc <ESP_WakeTest+0x204>)
 8007384:	2204      	movs	r2, #4
 8007386:	701a      	strb	r2, [r3, #0]

      break;
 8007388:	e033      	b.n	80073f2 <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 800738a:	4b27      	ldr	r3, [pc, #156]	@ (8007428 <ESP_WakeTest+0x230>)
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8007390:	4b1c      	ldr	r3, [pc, #112]	@ (8007404 <ESP_WakeTest+0x20c>)
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007396:	4b1d      	ldr	r3, [pc, #116]	@ (800740c <ESP_WakeTest+0x214>)
 8007398:	2200      	movs	r2, #0
 800739a:	2101      	movs	r1, #1
 800739c:	0018      	movs	r0, r3
 800739e:	f00d fe54 	bl	801504a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80073a2:	2380      	movs	r3, #128	@ 0x80
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	4818      	ldr	r0, [pc, #96]	@ (8007408 <ESP_WakeTest+0x210>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	0019      	movs	r1, r3
 80073ac:	f00d fe4d 	bl	801504a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80073b0:	4b16      	ldr	r3, [pc, #88]	@ (800740c <ESP_WakeTest+0x214>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	2102      	movs	r1, #2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f00d fe47 	bl	801504a <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 80073bc:	f005 fb34 	bl	800ca28 <SetESPMeasurementDone>
      break;
 80073c0:	e017      	b.n	80073f2 <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 80073c2:	4b0e      	ldr	r3, [pc, #56]	@ (80073fc <ESP_WakeTest+0x204>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]
      break;
 80073c8:	e013      	b.n	80073f2 <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 80073ca:	4b16      	ldr	r3, [pc, #88]	@ (8007424 <ESP_WakeTest+0x22c>)
 80073cc:	22fa      	movs	r2, #250	@ 0xfa
 80073ce:	0112      	lsls	r2, r2, #4
 80073d0:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 80073d2:	4b14      	ldr	r3, [pc, #80]	@ (8007424 <ESP_WakeTest+0x22c>)
 80073d4:	22fa      	movs	r2, #250	@ 0xfa
 80073d6:	0112      	lsls	r2, r2, #4
 80073d8:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 80073da:	f00a fb3b 	bl	8011a54 <Calculate_LED_ON>
 80073de:	0003      	movs	r3, r0
 80073e0:	001a      	movs	r2, r3
 80073e2:	4b10      	ldr	r3, [pc, #64]	@ (8007424 <ESP_WakeTest+0x22c>)
 80073e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 80073e6:	e004      	b.n	80073f2 <ESP_WakeTest+0x1fa>
      break;
 80073e8:	46c0      	nop			@ (mov r8, r8)
 80073ea:	e002      	b.n	80073f2 <ESP_WakeTest+0x1fa>
      break;
 80073ec:	46c0      	nop			@ (mov r8, r8)
 80073ee:	e000      	b.n	80073f2 <ESP_WakeTest+0x1fa>
      break;
 80073f0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80073f2:	46c0      	nop			@ (mov r8, r8)
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b003      	add	sp, #12
 80073f8:	bd90      	pop	{r4, r7, pc}
 80073fa:	46c0      	nop			@ (mov r8, r8)
 80073fc:	20000678 	.word	0x20000678
 8007400:	0802d750 	.word	0x0802d750
 8007404:	200005a0 	.word	0x200005a0
 8007408:	50000800 	.word	0x50000800
 800740c:	50001c00 	.word	0x50001c00
 8007410:	2000066c 	.word	0x2000066c
 8007414:	200004a0 	.word	0x200004a0
 8007418:	20000676 	.word	0x20000676
 800741c:	20000675 	.word	0x20000675
 8007420:	2000002e 	.word	0x2000002e
 8007424:	40000400 	.word	0x40000400
 8007428:	20000001 	.word	0x20000001

0800742c <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 800742c:	b5b0      	push	{r4, r5, r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8007432:	1dfb      	adds	r3, r7, #7
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8007438:	4bdf      	ldr	r3, [pc, #892]	@ (80077b8 <ESP_Upkeep+0x38c>)
 800743a:	781a      	ldrb	r2, [r3, #0]
 800743c:	4bdf      	ldr	r3, [pc, #892]	@ (80077bc <ESP_Upkeep+0x390>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d024      	beq.n	800748e <ESP_Upkeep+0x62>
 8007444:	f00b feaa 	bl	801319c <GetVerboseLevel>
 8007448:	0003      	movs	r3, r0
 800744a:	2b03      	cmp	r3, #3
 800744c:	d11f      	bne.n	800748e <ESP_Upkeep+0x62>
    oldEspState = EspState;
 800744e:	4bda      	ldr	r3, [pc, #872]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	4bda      	ldr	r3, [pc, #872]	@ (80077bc <ESP_Upkeep+0x390>)
 8007454:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8007456:	4bd9      	ldr	r3, [pc, #868]	@ (80077bc <ESP_Upkeep+0x390>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b03      	cmp	r3, #3
 800745c:	d103      	bne.n	8007466 <ESP_Upkeep+0x3a>
 800745e:	4bd8      	ldr	r3, [pc, #864]	@ (80077c0 <ESP_Upkeep+0x394>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b0e      	cmp	r3, #14
 8007464:	d013      	beq.n	800748e <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8007466:	4bd5      	ldr	r3, [pc, #852]	@ (80077bc <ESP_Upkeep+0x390>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	001d      	movs	r5, r3
 800746c:	4bd4      	ldr	r3, [pc, #848]	@ (80077c0 <ESP_Upkeep+0x394>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	0018      	movs	r0, r3
 8007472:	4bd4      	ldr	r3, [pc, #848]	@ (80077c4 <ESP_Upkeep+0x398>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	001c      	movs	r4, r3
 8007478:	4bd3      	ldr	r3, [pc, #844]	@ (80077c8 <ESP_Upkeep+0x39c>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	4ad3      	ldr	r2, [pc, #844]	@ (80077cc <ESP_Upkeep+0x3a0>)
 800747e:	49d4      	ldr	r1, [pc, #848]	@ (80077d0 <ESP_Upkeep+0x3a4>)
 8007480:	9302      	str	r3, [sp, #8]
 8007482:	9401      	str	r4, [sp, #4]
 8007484:	9000      	str	r0, [sp, #0]
 8007486:	002b      	movs	r3, r5
 8007488:	2003      	movs	r0, #3
 800748a:	f00b fe0d 	bl	80130a8 <CreateLine>
    }
  }
  switch (EspState) {
 800748e:	4bca      	ldr	r3, [pc, #808]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b0f      	cmp	r3, #15
 8007494:	d901      	bls.n	800749a <ESP_Upkeep+0x6e>
 8007496:	f000 fc5e 	bl	8007d56 <ESP_Upkeep+0x92a>
 800749a:	009a      	lsls	r2, r3, #2
 800749c:	4bcd      	ldr	r3, [pc, #820]	@ (80077d4 <ESP_Upkeep+0x3a8>)
 800749e:	18d3      	adds	r3, r2, r3
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80074a4:	4bc4      	ldr	r3, [pc, #784]	@ (80077b8 <ESP_Upkeep+0x38c>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	701a      	strb	r2, [r3, #0]
      break;
 80074aa:	f000 fc6f 	bl	8007d8c <ESP_Upkeep+0x960>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 80074ae:	4bca      	ldr	r3, [pc, #808]	@ (80077d8 <ESP_Upkeep+0x3ac>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 80074b4:	f005 fd18 	bl	800cee8 <AllDevicesReady>
 80074b8:	0003      	movs	r3, r0
 80074ba:	001a      	movs	r2, r3
 80074bc:	2301      	movs	r3, #1
 80074be:	4053      	eors	r3, r2
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <ESP_Upkeep+0x9e>
 80074c6:	f000 fc52 	bl	8007d6e <ESP_Upkeep+0x942>
        break;
      }
      SetESPIndicator();
 80074ca:	f00a fc55 	bl	8011d78 <SetESPIndicator>
      if(!EspTurnedOn){
 80074ce:	4bc3      	ldr	r3, [pc, #780]	@ (80077dc <ESP_Upkeep+0x3b0>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2201      	movs	r2, #1
 80074d4:	4053      	eors	r3, r2
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d036      	beq.n	800754a <ESP_Upkeep+0x11e>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80074dc:	2380      	movs	r3, #128	@ 0x80
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	48bf      	ldr	r0, [pc, #764]	@ (80077e0 <ESP_Upkeep+0x3b4>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	0019      	movs	r1, r3
 80074e6:	f00d fdb0 	bl	801504a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80074ea:	2001      	movs	r0, #1
 80074ec:	f00c fb26 	bl	8013b3c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80074f0:	2380      	movs	r3, #128	@ 0x80
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	48ba      	ldr	r0, [pc, #744]	@ (80077e0 <ESP_Upkeep+0x3b4>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	0019      	movs	r1, r3
 80074fa:	f00d fda6 	bl	801504a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80074fe:	2001      	movs	r0, #1
 8007500:	f00c fb1c 	bl	8013b3c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007504:	4bb7      	ldr	r3, [pc, #732]	@ (80077e4 <ESP_Upkeep+0x3b8>)
 8007506:	2200      	movs	r2, #0
 8007508:	2101      	movs	r1, #1
 800750a:	0018      	movs	r0, r3
 800750c:	f00d fd9d 	bl	801504a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007510:	2001      	movs	r0, #1
 8007512:	f00c fb13 	bl	8013b3c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8007516:	4bb3      	ldr	r3, [pc, #716]	@ (80077e4 <ESP_Upkeep+0x3b8>)
 8007518:	2201      	movs	r2, #1
 800751a:	2102      	movs	r1, #2
 800751c:	0018      	movs	r0, r3
 800751e:	f00d fd94 	bl	801504a <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007522:	2001      	movs	r0, #1
 8007524:	f00c fb0a 	bl	8013b3c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007528:	4bae      	ldr	r3, [pc, #696]	@ (80077e4 <ESP_Upkeep+0x3b8>)
 800752a:	2201      	movs	r2, #1
 800752c:	2101      	movs	r1, #1
 800752e:	0018      	movs	r0, r3
 8007530:	f00d fd8b 	bl	801504a <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007534:	f00c faf8 	bl	8013b28 <HAL_GetTick>
 8007538:	0003      	movs	r3, r0
 800753a:	22af      	movs	r2, #175	@ 0xaf
 800753c:	0092      	lsls	r2, r2, #2
 800753e:	189a      	adds	r2, r3, r2
 8007540:	4ba9      	ldr	r3, [pc, #676]	@ (80077e8 <ESP_Upkeep+0x3bc>)
 8007542:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007544:	4ba5      	ldr	r3, [pc, #660]	@ (80077dc <ESP_Upkeep+0x3b0>)
 8007546:	2201      	movs	r2, #1
 8007548:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800754a:	2380      	movs	r3, #128	@ 0x80
 800754c:	005a      	lsls	r2, r3, #1
 800754e:	4ba7      	ldr	r3, [pc, #668]	@ (80077ec <ESP_Upkeep+0x3c0>)
 8007550:	0011      	movs	r1, r2
 8007552:	0018      	movs	r0, r3
 8007554:	f7fd fd00 	bl	8004f58 <ESP_Receive>
 8007558:	1e03      	subs	r3, r0, #0
 800755a:	d101      	bne.n	8007560 <ESP_Upkeep+0x134>
 800755c:	f000 fc09 	bl	8007d72 <ESP_Upkeep+0x946>
        EspState = ESP_STATE_WAIT_AWAKE;
 8007560:	4b95      	ldr	r3, [pc, #596]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007562:	220f      	movs	r2, #15
 8007564:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8007566:	f00c fadf 	bl	8013b28 <HAL_GetTick>
 800756a:	0003      	movs	r3, r0
 800756c:	22fa      	movs	r2, #250	@ 0xfa
 800756e:	00d2      	lsls	r2, r2, #3
 8007570:	189a      	adds	r2, r3, r2
 8007572:	4b9f      	ldr	r3, [pc, #636]	@ (80077f0 <ESP_Upkeep+0x3c4>)
 8007574:	601a      	str	r2, [r3, #0]
      }
      break;
 8007576:	f000 fbfc 	bl	8007d72 <ESP_Upkeep+0x946>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800757a:	2001      	movs	r0, #1
 800757c:	f7ff fb1a 	bl	8006bb4 <DMA_ProcessBuffer>
 8007580:	0003      	movs	r3, r0
 8007582:	001a      	movs	r2, r3
 8007584:	4b9b      	ldr	r3, [pc, #620]	@ (80077f4 <ESP_Upkeep+0x3c8>)
 8007586:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007588:	4b9a      	ldr	r3, [pc, #616]	@ (80077f4 <ESP_Upkeep+0x3c8>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	1dbc      	adds	r4, r7, #6
 800758e:	2101      	movs	r1, #1
 8007590:	0018      	movs	r0, r3
 8007592:	f7ff fc0f 	bl	8006db4 <ATCompare>
 8007596:	0003      	movs	r3, r0
 8007598:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800759a:	1dbb      	adds	r3, r7, #6
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d108      	bne.n	80075b4 <ESP_Upkeep+0x188>
 80075a2:	4b93      	ldr	r3, [pc, #588]	@ (80077f0 <ESP_Upkeep+0x3c4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	0018      	movs	r0, r3
 80075a8:	f00b fd28 	bl	8012ffc <TimestampIsReached>
 80075ac:	1e03      	subs	r3, r0, #0
 80075ae:	d101      	bne.n	80075b4 <ESP_Upkeep+0x188>
 80075b0:	f000 fbe1 	bl	8007d76 <ESP_Upkeep+0x94a>
          EspState = ESP_STATE_MODE_SELECT;
 80075b4:	4b80      	ldr	r3, [pc, #512]	@ (80077b8 <ESP_Upkeep+0x38c>)
 80075b6:	220b      	movs	r2, #11
 80075b8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80075ba:	f000 fbdc 	bl	8007d76 <ESP_Upkeep+0x94a>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80075be:	4b8e      	ldr	r3, [pc, #568]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 80075c0:	2209      	movs	r2, #9
 80075c2:	2114      	movs	r1, #20
 80075c4:	0018      	movs	r0, r3
 80075c6:	f01e f845 	bl	8025654 <memset>
      if(!InitIsDone || WifiReset){
 80075ca:	4b8c      	ldr	r3, [pc, #560]	@ (80077fc <ESP_Upkeep+0x3d0>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2201      	movs	r2, #1
 80075d0:	4053      	eors	r3, r2
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d103      	bne.n	80075e0 <ESP_Upkeep+0x1b4>
 80075d8:	4b89      	ldr	r3, [pc, #548]	@ (8007800 <ESP_Upkeep+0x3d4>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01a      	beq.n	8007616 <ESP_Upkeep+0x1ea>
        memcpy(ATCommandArray, AT_INIT, 7);
 80075e0:	4b85      	ldr	r3, [pc, #532]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 80075e2:	4a88      	ldr	r2, [pc, #544]	@ (8007804 <ESP_Upkeep+0x3d8>)
 80075e4:	6811      	ldr	r1, [r2, #0]
 80075e6:	6019      	str	r1, [r3, #0]
 80075e8:	8891      	ldrh	r1, [r2, #4]
 80075ea:	8099      	strh	r1, [r3, #4]
 80075ec:	7992      	ldrb	r2, [r2, #6]
 80075ee:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80075f0:	4b71      	ldr	r3, [pc, #452]	@ (80077b8 <ESP_Upkeep+0x38c>)
 80075f2:	2204      	movs	r2, #4
 80075f4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80075f6:	4b84      	ldr	r3, [pc, #528]	@ (8007808 <ESP_Upkeep+0x3dc>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80075fc:	4b71      	ldr	r3, [pc, #452]	@ (80077c4 <ESP_Upkeep+0x398>)
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007602:	4b81      	ldr	r3, [pc, #516]	@ (8007808 <ESP_Upkeep+0x3dc>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	001a      	movs	r2, r3
 8007608:	4b7b      	ldr	r3, [pc, #492]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 800760a:	5c9a      	ldrb	r2, [r3, r2]
 800760c:	4b6c      	ldr	r3, [pc, #432]	@ (80077c0 <ESP_Upkeep+0x394>)
 800760e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007610:	4b6d      	ldr	r3, [pc, #436]	@ (80077c8 <ESP_Upkeep+0x39c>)
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8007616:	4b79      	ldr	r3, [pc, #484]	@ (80077fc <ESP_Upkeep+0x3d0>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01f      	beq.n	800765e <ESP_Upkeep+0x232>
 800761e:	4b7b      	ldr	r3, [pc, #492]	@ (800780c <ESP_Upkeep+0x3e0>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2201      	movs	r2, #1
 8007624:	4053      	eors	r3, r2
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d018      	beq.n	800765e <ESP_Upkeep+0x232>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 800762c:	4b72      	ldr	r3, [pc, #456]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 800762e:	4a78      	ldr	r2, [pc, #480]	@ (8007810 <ESP_Upkeep+0x3e4>)
 8007630:	6811      	ldr	r1, [r2, #0]
 8007632:	6019      	str	r1, [r3, #0]
 8007634:	8892      	ldrh	r2, [r2, #4]
 8007636:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8007638:	4b5f      	ldr	r3, [pc, #380]	@ (80077b8 <ESP_Upkeep+0x38c>)
 800763a:	2204      	movs	r2, #4
 800763c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800763e:	4b72      	ldr	r3, [pc, #456]	@ (8007808 <ESP_Upkeep+0x3dc>)
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8007644:	4b5f      	ldr	r3, [pc, #380]	@ (80077c4 <ESP_Upkeep+0x398>)
 8007646:	2201      	movs	r2, #1
 8007648:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800764a:	4b6f      	ldr	r3, [pc, #444]	@ (8007808 <ESP_Upkeep+0x3dc>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	001a      	movs	r2, r3
 8007650:	4b69      	ldr	r3, [pc, #420]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007652:	5c9a      	ldrb	r2, [r3, r2]
 8007654:	4b5a      	ldr	r3, [pc, #360]	@ (80077c0 <ESP_Upkeep+0x394>)
 8007656:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007658:	4b5b      	ldr	r3, [pc, #364]	@ (80077c8 <ESP_Upkeep+0x39c>)
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800765e:	4b67      	ldr	r3, [pc, #412]	@ (80077fc <ESP_Upkeep+0x3d0>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d021      	beq.n	80076aa <ESP_Upkeep+0x27e>
 8007666:	4b69      	ldr	r3, [pc, #420]	@ (800780c <ESP_Upkeep+0x3e0>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01d      	beq.n	80076aa <ESP_Upkeep+0x27e>
 800766e:	4b69      	ldr	r3, [pc, #420]	@ (8007814 <ESP_Upkeep+0x3e8>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2201      	movs	r2, #1
 8007674:	4053      	eors	r3, r2
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d016      	beq.n	80076aa <ESP_Upkeep+0x27e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 800767c:	4b66      	ldr	r3, [pc, #408]	@ (8007818 <ESP_Upkeep+0x3ec>)
 800767e:	881a      	ldrh	r2, [r3, #0]
 8007680:	4b5d      	ldr	r3, [pc, #372]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007682:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007684:	4b4c      	ldr	r3, [pc, #304]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007686:	2204      	movs	r2, #4
 8007688:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800768a:	4b5f      	ldr	r3, [pc, #380]	@ (8007808 <ESP_Upkeep+0x3dc>)
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8007690:	4b4c      	ldr	r3, [pc, #304]	@ (80077c4 <ESP_Upkeep+0x398>)
 8007692:	2204      	movs	r2, #4
 8007694:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007696:	4b5c      	ldr	r3, [pc, #368]	@ (8007808 <ESP_Upkeep+0x3dc>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	001a      	movs	r2, r3
 800769c:	4b56      	ldr	r3, [pc, #344]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 800769e:	5c9a      	ldrb	r2, [r3, r2]
 80076a0:	4b47      	ldr	r3, [pc, #284]	@ (80077c0 <ESP_Upkeep+0x394>)
 80076a2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80076a4:	4b48      	ldr	r3, [pc, #288]	@ (80077c8 <ESP_Upkeep+0x39c>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80076aa:	4b54      	ldr	r3, [pc, #336]	@ (80077fc <ESP_Upkeep+0x3d0>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d02c      	beq.n	800770c <ESP_Upkeep+0x2e0>
 80076b2:	4b56      	ldr	r3, [pc, #344]	@ (800780c <ESP_Upkeep+0x3e0>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d028      	beq.n	800770c <ESP_Upkeep+0x2e0>
 80076ba:	4b56      	ldr	r3, [pc, #344]	@ (8007814 <ESP_Upkeep+0x3e8>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d024      	beq.n	800770c <ESP_Upkeep+0x2e0>
 80076c2:	4b56      	ldr	r3, [pc, #344]	@ (800781c <ESP_Upkeep+0x3f0>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2201      	movs	r2, #1
 80076c8:	4053      	eors	r3, r2
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01d      	beq.n	800770c <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_SEND, 3);
 80076d0:	4b49      	ldr	r3, [pc, #292]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 80076d2:	4a53      	ldr	r2, [pc, #332]	@ (8007820 <ESP_Upkeep+0x3f4>)
 80076d4:	8811      	ldrh	r1, [r2, #0]
 80076d6:	8019      	strh	r1, [r3, #0]
 80076d8:	7892      	ldrb	r2, [r2, #2]
 80076da:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80076dc:	4b36      	ldr	r3, [pc, #216]	@ (80077b8 <ESP_Upkeep+0x38c>)
 80076de:	2204      	movs	r2, #4
 80076e0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80076e2:	4b49      	ldr	r3, [pc, #292]	@ (8007808 <ESP_Upkeep+0x3dc>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80076e8:	4b36      	ldr	r3, [pc, #216]	@ (80077c4 <ESP_Upkeep+0x398>)
 80076ea:	2202      	movs	r2, #2
 80076ec:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80076ee:	f00c fa1b 	bl	8013b28 <HAL_GetTick>
 80076f2:	0002      	movs	r2, r0
 80076f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007824 <ESP_Upkeep+0x3f8>)
 80076f6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80076f8:	4b43      	ldr	r3, [pc, #268]	@ (8007808 <ESP_Upkeep+0x3dc>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	001a      	movs	r2, r3
 80076fe:	4b3e      	ldr	r3, [pc, #248]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007700:	5c9a      	ldrb	r2, [r3, r2]
 8007702:	4b2f      	ldr	r3, [pc, #188]	@ (80077c0 <ESP_Upkeep+0x394>)
 8007704:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007706:	4b30      	ldr	r3, [pc, #192]	@ (80077c8 <ESP_Upkeep+0x39c>)
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 800770c:	4b3b      	ldr	r3, [pc, #236]	@ (80077fc <ESP_Upkeep+0x3d0>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d027      	beq.n	8007764 <ESP_Upkeep+0x338>
 8007714:	4b3d      	ldr	r3, [pc, #244]	@ (800780c <ESP_Upkeep+0x3e0>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d023      	beq.n	8007764 <ESP_Upkeep+0x338>
 800771c:	4b3d      	ldr	r3, [pc, #244]	@ (8007814 <ESP_Upkeep+0x3e8>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01f      	beq.n	8007764 <ESP_Upkeep+0x338>
 8007724:	4b3d      	ldr	r3, [pc, #244]	@ (800781c <ESP_Upkeep+0x3f0>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01b      	beq.n	8007764 <ESP_Upkeep+0x338>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800772c:	4b3e      	ldr	r3, [pc, #248]	@ (8007828 <ESP_Upkeep+0x3fc>)
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	4b31      	ldr	r3, [pc, #196]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007732:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007734:	4b20      	ldr	r3, [pc, #128]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007736:	2204      	movs	r2, #4
 8007738:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800773a:	4b33      	ldr	r3, [pc, #204]	@ (8007808 <ESP_Upkeep+0x3dc>)
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007740:	4b20      	ldr	r3, [pc, #128]	@ (80077c4 <ESP_Upkeep+0x398>)
 8007742:	2205      	movs	r2, #5
 8007744:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007746:	f00c f9ef 	bl	8013b28 <HAL_GetTick>
 800774a:	0002      	movs	r2, r0
 800774c:	4b35      	ldr	r3, [pc, #212]	@ (8007824 <ESP_Upkeep+0x3f8>)
 800774e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007750:	4b2d      	ldr	r3, [pc, #180]	@ (8007808 <ESP_Upkeep+0x3dc>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	001a      	movs	r2, r3
 8007756:	4b28      	ldr	r3, [pc, #160]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007758:	5c9a      	ldrb	r2, [r3, r2]
 800775a:	4b19      	ldr	r3, [pc, #100]	@ (80077c0 <ESP_Upkeep+0x394>)
 800775c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800775e:	4b1a      	ldr	r3, [pc, #104]	@ (80077c8 <ESP_Upkeep+0x39c>)
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007764:	4b31      	ldr	r3, [pc, #196]	@ (800782c <ESP_Upkeep+0x400>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d100      	bne.n	800776e <ESP_Upkeep+0x342>
 800776c:	e305      	b.n	8007d7a <ESP_Upkeep+0x94e>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800776e:	4b22      	ldr	r3, [pc, #136]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007770:	4a2f      	ldr	r2, [pc, #188]	@ (8007830 <ESP_Upkeep+0x404>)
 8007772:	6811      	ldr	r1, [r2, #0]
 8007774:	6019      	str	r1, [r3, #0]
 8007776:	7912      	ldrb	r2, [r2, #4]
 8007778:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 800777a:	4a2e      	ldr	r2, [pc, #184]	@ (8007834 <ESP_Upkeep+0x408>)
 800777c:	4b14      	ldr	r3, [pc, #80]	@ (80077d0 <ESP_Upkeep+0x3a4>)
 800777e:	0019      	movs	r1, r3
 8007780:	2003      	movs	r0, #3
 8007782:	f00b fc91 	bl	80130a8 <CreateLine>
        DisableConnectedDevices();
 8007786:	f005 fd0b 	bl	800d1a0 <DisableConnectedDevices>
        usblog = false;
 800778a:	4b2b      	ldr	r3, [pc, #172]	@ (8007838 <ESP_Upkeep+0x40c>)
 800778c:	2200      	movs	r2, #0
 800778e:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007790:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007792:	2204      	movs	r2, #4
 8007794:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007796:	4b1c      	ldr	r3, [pc, #112]	@ (8007808 <ESP_Upkeep+0x3dc>)
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 800779c:	4b09      	ldr	r3, [pc, #36]	@ (80077c4 <ESP_Upkeep+0x398>)
 800779e:	2203      	movs	r2, #3
 80077a0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80077a2:	4b19      	ldr	r3, [pc, #100]	@ (8007808 <ESP_Upkeep+0x3dc>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	001a      	movs	r2, r3
 80077a8:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 80077aa:	5c9a      	ldrb	r2, [r3, r2]
 80077ac:	4b04      	ldr	r3, [pc, #16]	@ (80077c0 <ESP_Upkeep+0x394>)
 80077ae:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80077b0:	4b05      	ldr	r3, [pc, #20]	@ (80077c8 <ESP_Upkeep+0x39c>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
      }
    break;
 80077b6:	e2e0      	b.n	8007d7a <ESP_Upkeep+0x94e>
 80077b8:	2000002c 	.word	0x2000002c
 80077bc:	20000003 	.word	0x20000003
 80077c0:	20000676 	.word	0x20000676
 80077c4:	20000677 	.word	0x20000677
 80077c8:	20000675 	.word	0x20000675
 80077cc:	0802ab2c 	.word	0x0802ab2c
 80077d0:	08029ad8 	.word	0x08029ad8
 80077d4:	0802d768 	.word	0x0802d768
 80077d8:	20000e24 	.word	0x20000e24
 80077dc:	200005a0 	.word	0x200005a0
 80077e0:	50000800 	.word	0x50000800
 80077e4:	50001c00 	.word	0x50001c00
 80077e8:	2000066c 	.word	0x2000066c
 80077ec:	200004a0 	.word	0x200004a0
 80077f0:	200007a4 	.word	0x200007a4
 80077f4:	2000002f 	.word	0x2000002f
 80077f8:	2000065c 	.word	0x2000065c
 80077fc:	200005a1 	.word	0x200005a1
 8007800:	200005a2 	.word	0x200005a2
 8007804:	20000004 	.word	0x20000004
 8007808:	20000666 	.word	0x20000666
 800780c:	200005a4 	.word	0x200005a4
 8007810:	20000014 	.word	0x20000014
 8007814:	200005a5 	.word	0x200005a5
 8007818:	20000010 	.word	0x20000010
 800781c:	20000002 	.word	0x20000002
 8007820:	2000000c 	.word	0x2000000c
 8007824:	200005b8 	.word	0x200005b8
 8007828:	20000024 	.word	0x20000024
 800782c:	200005a3 	.word	0x200005a3
 8007830:	2000001c 	.word	0x2000001c
 8007834:	0802ab58 	.word	0x0802ab58
 8007838:	20000207 	.word	0x20000207

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 800783c:	4bdd      	ldr	r3, [pc, #884]	@ (8007bb4 <ESP_Upkeep+0x788>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	1dfc      	adds	r4, r7, #7
 8007842:	0018      	movs	r0, r3
 8007844:	f7ff faf8 	bl	8006e38 <AT_Send>
 8007848:	0003      	movs	r3, r0
 800784a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800784c:	1dfb      	adds	r3, r7, #7
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d100      	bne.n	8007856 <ESP_Upkeep+0x42a>
 8007854:	e293      	b.n	8007d7e <ESP_Upkeep+0x952>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007856:	4bd8      	ldr	r3, [pc, #864]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007858:	2203      	movs	r2, #3
 800785a:	701a      	strb	r2, [r3, #0]
        }
    break;
 800785c:	e28f      	b.n	8007d7e <ESP_Upkeep+0x952>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800785e:	4bd7      	ldr	r3, [pc, #860]	@ (8007bbc <ESP_Upkeep+0x790>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <ESP_Upkeep+0x44a>
 8007866:	4bd6      	ldr	r3, [pc, #856]	@ (8007bc0 <ESP_Upkeep+0x794>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b03      	cmp	r3, #3
 800786c:	d003      	beq.n	8007876 <ESP_Upkeep+0x44a>
        EspState = ESP_STATE_MODE_SELECT;
 800786e:	4bd2      	ldr	r3, [pc, #840]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007870:	220b      	movs	r2, #11
 8007872:	701a      	strb	r2, [r3, #0]
        break;
 8007874:	e28a      	b.n	8007d8c <ESP_Upkeep+0x960>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007876:	4bd3      	ldr	r3, [pc, #844]	@ (8007bc4 <ESP_Upkeep+0x798>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	0018      	movs	r0, r3
 800787c:	f00b fbbe 	bl	8012ffc <TimestampIsReached>
 8007880:	1e03      	subs	r3, r0, #0
 8007882:	d100      	bne.n	8007886 <ESP_Upkeep+0x45a>
 8007884:	e27d      	b.n	8007d82 <ESP_Upkeep+0x956>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007886:	4bd0      	ldr	r3, [pc, #832]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	0018      	movs	r0, r3
 800788c:	f7ff f992 	bl	8006bb4 <DMA_ProcessBuffer>
 8007890:	0003      	movs	r3, r0
 8007892:	001a      	movs	r2, r3
 8007894:	4bcd      	ldr	r3, [pc, #820]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 8007896:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007898:	4bcc      	ldr	r3, [pc, #816]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 800789a:	781a      	ldrb	r2, [r3, #0]
 800789c:	4bca      	ldr	r3, [pc, #808]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	1d7c      	adds	r4, r7, #5
 80078a2:	0019      	movs	r1, r3
 80078a4:	0010      	movs	r0, r2
 80078a6:	f7ff fa85 	bl	8006db4 <ATCompare>
 80078aa:	0003      	movs	r3, r0
 80078ac:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80078ae:	4bc7      	ldr	r3, [pc, #796]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d138      	bne.n	8007928 <ESP_Upkeep+0x4fc>
          if(ATCommand == AT_SENDDATA){
 80078b6:	4bbf      	ldr	r3, [pc, #764]	@ (8007bb4 <ESP_Upkeep+0x788>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b0f      	cmp	r3, #15
 80078bc:	d108      	bne.n	80078d0 <ESP_Upkeep+0x4a4>
            ATCommand = AT_HTTPCPOST;
 80078be:	4bbd      	ldr	r3, [pc, #756]	@ (8007bb4 <ESP_Upkeep+0x788>)
 80078c0:	220e      	movs	r2, #14
 80078c2:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80078c4:	4bc0      	ldr	r3, [pc, #768]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 80078c6:	2202      	movs	r2, #2
 80078c8:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 80078ca:	4bc1      	ldr	r3, [pc, #772]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 80078cc:	2201      	movs	r2, #1
 80078ce:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 80078d0:	4bb9      	ldr	r3, [pc, #740]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 80078d2:	2204      	movs	r2, #4
 80078d4:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 80078d6:	4bbf      	ldr	r3, [pc, #764]	@ (8007bd4 <ESP_Upkeep+0x7a8>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	3301      	adds	r3, #1
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	4bbd      	ldr	r3, [pc, #756]	@ (8007bd4 <ESP_Upkeep+0x7a8>)
 80078e0:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 80078e2:	4bbc      	ldr	r3, [pc, #752]	@ (8007bd4 <ESP_Upkeep+0x7a8>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d91e      	bls.n	8007928 <ESP_Upkeep+0x4fc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80078ea:	f00c f91d 	bl	8013b28 <HAL_GetTick>
 80078ee:	0003      	movs	r3, r0
 80078f0:	4ab9      	ldr	r2, [pc, #740]	@ (8007bd8 <ESP_Upkeep+0x7ac>)
 80078f2:	189a      	adds	r2, r3, r2
 80078f4:	4bb3      	ldr	r3, [pc, #716]	@ (8007bc4 <ESP_Upkeep+0x798>)
 80078f6:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80078f8:	4bb8      	ldr	r3, [pc, #736]	@ (8007bdc <ESP_Upkeep+0x7b0>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80078fe:	f7ff fa4b 	bl	8006d98 <clearDMABuffer>
            stop = HAL_GetTick();
 8007902:	f00c f911 	bl	8013b28 <HAL_GetTick>
 8007906:	0002      	movs	r2, r0
 8007908:	4bb5      	ldr	r3, [pc, #724]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 800790a:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 800790c:	4bb4      	ldr	r3, [pc, #720]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	4bb4      	ldr	r3, [pc, #720]	@ (8007be4 <ESP_Upkeep+0x7b8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	4ab4      	ldr	r2, [pc, #720]	@ (8007be8 <ESP_Upkeep+0x7bc>)
 8007918:	49b4      	ldr	r1, [pc, #720]	@ (8007bec <ESP_Upkeep+0x7c0>)
 800791a:	2001      	movs	r0, #1
 800791c:	f00b fbc4 	bl	80130a8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007920:	4ba5      	ldr	r3, [pc, #660]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007922:	220d      	movs	r2, #13
 8007924:	701a      	strb	r2, [r3, #0]
            break;
 8007926:	e231      	b.n	8007d8c <ESP_Upkeep+0x960>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007928:	4ba8      	ldr	r3, [pc, #672]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b03      	cmp	r3, #3
 800792e:	d106      	bne.n	800793e <ESP_Upkeep+0x512>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007930:	f00c f8fa 	bl	8013b28 <HAL_GetTick>
 8007934:	0003      	movs	r3, r0
 8007936:	330a      	adds	r3, #10
 8007938:	001a      	movs	r2, r3
 800793a:	4ba2      	ldr	r3, [pc, #648]	@ (8007bc4 <ESP_Upkeep+0x798>)
 800793c:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 800793e:	4ba3      	ldr	r3, [pc, #652]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b0a      	cmp	r3, #10
 8007944:	d106      	bne.n	8007954 <ESP_Upkeep+0x528>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007946:	f00c f8ef 	bl	8013b28 <HAL_GetTick>
 800794a:	0003      	movs	r3, r0
 800794c:	330a      	adds	r3, #10
 800794e:	001a      	movs	r2, r3
 8007950:	4b9c      	ldr	r3, [pc, #624]	@ (8007bc4 <ESP_Upkeep+0x798>)
 8007952:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007954:	4b9d      	ldr	r3, [pc, #628]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b06      	cmp	r3, #6
 800795a:	d14b      	bne.n	80079f4 <ESP_Upkeep+0x5c8>
          timeoutcntr++;
 800795c:	4ba4      	ldr	r3, [pc, #656]	@ (8007bf0 <ESP_Upkeep+0x7c4>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	3301      	adds	r3, #1
 8007962:	b2da      	uxtb	r2, r3
 8007964:	4ba2      	ldr	r3, [pc, #648]	@ (8007bf0 <ESP_Upkeep+0x7c4>)
 8007966:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007968:	4aa2      	ldr	r2, [pc, #648]	@ (8007bf4 <ESP_Upkeep+0x7c8>)
 800796a:	4ba0      	ldr	r3, [pc, #640]	@ (8007bec <ESP_Upkeep+0x7c0>)
 800796c:	0019      	movs	r1, r3
 800796e:	2001      	movs	r0, #1
 8007970:	f00b fb9a 	bl	80130a8 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007974:	4b9e      	ldr	r3, [pc, #632]	@ (8007bf0 <ESP_Upkeep+0x7c4>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d924      	bls.n	80079c6 <ESP_Upkeep+0x59a>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 800797c:	f00c f8d4 	bl	8013b28 <HAL_GetTick>
 8007980:	0003      	movs	r3, r0
 8007982:	4a9d      	ldr	r2, [pc, #628]	@ (8007bf8 <ESP_Upkeep+0x7cc>)
 8007984:	189a      	adds	r2, r3, r2
 8007986:	4b8f      	ldr	r3, [pc, #572]	@ (8007bc4 <ESP_Upkeep+0x798>)
 8007988:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800798a:	4b94      	ldr	r3, [pc, #592]	@ (8007bdc <ESP_Upkeep+0x7b0>)
 800798c:	2201      	movs	r2, #1
 800798e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007990:	f7ff fa02 	bl	8006d98 <clearDMABuffer>
            stop = HAL_GetTick();
 8007994:	f00c f8c8 	bl	8013b28 <HAL_GetTick>
 8007998:	0002      	movs	r2, r0
 800799a:	4b91      	ldr	r3, [pc, #580]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 800799c:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 800799e:	4b90      	ldr	r3, [pc, #576]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b90      	ldr	r3, [pc, #576]	@ (8007be4 <ESP_Upkeep+0x7b8>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	4a94      	ldr	r2, [pc, #592]	@ (8007bfc <ESP_Upkeep+0x7d0>)
 80079aa:	4990      	ldr	r1, [pc, #576]	@ (8007bec <ESP_Upkeep+0x7c0>)
 80079ac:	2001      	movs	r0, #1
 80079ae:	f00b fb7b 	bl	80130a8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80079b2:	4b81      	ldr	r3, [pc, #516]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 80079b4:	220d      	movs	r2, #13
 80079b6:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 80079b8:	4b7e      	ldr	r3, [pc, #504]	@ (8007bb4 <ESP_Upkeep+0x788>)
 80079ba:	2214      	movs	r2, #20
 80079bc:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 80079be:	4b82      	ldr	r3, [pc, #520]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
            break;
 80079c4:	e1e2      	b.n	8007d8c <ESP_Upkeep+0x960>
          }
          if(ATCommand != AT_SENDDATA){
 80079c6:	4b7b      	ldr	r3, [pc, #492]	@ (8007bb4 <ESP_Upkeep+0x788>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b0f      	cmp	r3, #15
 80079cc:	d003      	beq.n	80079d6 <ESP_Upkeep+0x5aa>
            EspState = ESP_STATE_SEND;
 80079ce:	4b7a      	ldr	r3, [pc, #488]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 80079d0:	2204      	movs	r2, #4
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	e00e      	b.n	80079f4 <ESP_Upkeep+0x5c8>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 80079d6:	4b77      	ldr	r3, [pc, #476]	@ (8007bb4 <ESP_Upkeep+0x788>)
 80079d8:	220e      	movs	r2, #14
 80079da:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 80079dc:	4b7c      	ldr	r3, [pc, #496]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	4b7a      	ldr	r3, [pc, #488]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 80079e6:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80079e8:	4b77      	ldr	r3, [pc, #476]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 80079ea:	2202      	movs	r2, #2
 80079ec:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 80079ee:	4b72      	ldr	r3, [pc, #456]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 80079f0:	2204      	movs	r2, #4
 80079f2:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 80079f4:	1d7b      	adds	r3, r7, #5
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d100      	bne.n	80079fe <ESP_Upkeep+0x5d2>
 80079fc:	e1c1      	b.n	8007d82 <ESP_Upkeep+0x956>
          EspState = ESP_STATE_NEXT_AT;
 80079fe:	4b6e      	ldr	r3, [pc, #440]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007a00:	2205      	movs	r2, #5
 8007a02:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007a04:	e1bd      	b.n	8007d82 <ESP_Upkeep+0x956>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007a06:	4b72      	ldr	r3, [pc, #456]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	4b70      	ldr	r3, [pc, #448]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 8007a10:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007a12:	4b6f      	ldr	r3, [pc, #444]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	001a      	movs	r2, r3
 8007a18:	4b79      	ldr	r3, [pc, #484]	@ (8007c00 <ESP_Upkeep+0x7d4>)
 8007a1a:	5c9a      	ldrb	r2, [r3, r2]
 8007a1c:	4b65      	ldr	r3, [pc, #404]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a1e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007a20:	4b64      	ldr	r3, [pc, #400]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d102      	bne.n	8007a2e <ESP_Upkeep+0x602>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007a28:	4b67      	ldr	r3, [pc, #412]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007a2e:	4b61      	ldr	r3, [pc, #388]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b0e      	cmp	r3, #14
 8007a34:	d102      	bne.n	8007a3c <ESP_Upkeep+0x610>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007a36:	4b64      	ldr	r3, [pc, #400]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 8007a38:	2202      	movs	r2, #2
 8007a3a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b0e      	cmp	r3, #14
 8007a42:	d006      	beq.n	8007a52 <ESP_Upkeep+0x626>
 8007a44:	4b5b      	ldr	r3, [pc, #364]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d002      	beq.n	8007a52 <ESP_Upkeep+0x626>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a4c:	4b5e      	ldr	r3, [pc, #376]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007a52:	4b58      	ldr	r3, [pc, #352]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b11      	cmp	r3, #17
 8007a58:	d102      	bne.n	8007a60 <ESP_Upkeep+0x634>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 8007a5c:	2205      	movs	r2, #5
 8007a5e:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8007a60:	4b55      	ldr	r3, [pc, #340]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007a62:	2204      	movs	r2, #4
 8007a64:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007a66:	4b53      	ldr	r3, [pc, #332]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b14      	cmp	r3, #20
 8007a6c:	d000      	beq.n	8007a70 <ESP_Upkeep+0x644>
 8007a6e:	e18a      	b.n	8007d86 <ESP_Upkeep+0x95a>
        if(Mode == AT_MODE_SEND){
 8007a70:	4b53      	ldr	r3, [pc, #332]	@ (8007bc0 <ESP_Upkeep+0x794>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d124      	bne.n	8007ac2 <ESP_Upkeep+0x696>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007a78:	f00c f856 	bl	8013b28 <HAL_GetTick>
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	4a56      	ldr	r2, [pc, #344]	@ (8007bd8 <ESP_Upkeep+0x7ac>)
 8007a80:	189a      	adds	r2, r3, r2
 8007a82:	4b50      	ldr	r3, [pc, #320]	@ (8007bc4 <ESP_Upkeep+0x798>)
 8007a84:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007a86:	f7ff f987 	bl	8006d98 <clearDMABuffer>
          stop = HAL_GetTick();
 8007a8a:	f00c f84d 	bl	8013b28 <HAL_GetTick>
 8007a8e:	0002      	movs	r2, r0
 8007a90:	4b53      	ldr	r3, [pc, #332]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 8007a92:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007a94:	4b52      	ldr	r3, [pc, #328]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	4b52      	ldr	r3, [pc, #328]	@ (8007be4 <ESP_Upkeep+0x7b8>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	4a59      	ldr	r2, [pc, #356]	@ (8007c04 <ESP_Upkeep+0x7d8>)
 8007aa0:	4959      	ldr	r1, [pc, #356]	@ (8007c08 <ESP_Upkeep+0x7dc>)
 8007aa2:	2002      	movs	r0, #2
 8007aa4:	f00b fb00 	bl	80130a8 <CreateLine>
          ResetdBAmax();
 8007aa8:	f005 fc02 	bl	800d2b0 <ResetdBAmax>
          resetMaxMeasurementValues();
 8007aac:	f7fd f994 	bl	8004dd8 <resetMaxMeasurementValues>
          showTime();
 8007ab0:	f001 fc54 	bl	800935c <showTime>
          ESPTransmitDone = true;
 8007ab4:	4b49      	ldr	r3, [pc, #292]	@ (8007bdc <ESP_Upkeep+0x7b0>)
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007aba:	4b3f      	ldr	r3, [pc, #252]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007abc:	220d      	movs	r2, #13
 8007abe:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007ac0:	e161      	b.n	8007d86 <ESP_Upkeep+0x95a>
        else if (Mode == AT_MODE_GETTIME) {
 8007ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8007bc0 <ESP_Upkeep+0x794>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b05      	cmp	r3, #5
 8007ac8:	d13a      	bne.n	8007b40 <ESP_Upkeep+0x714>
            setTime = false;
 8007aca:	4b50      	ldr	r3, [pc, #320]	@ (8007c0c <ESP_Upkeep+0x7e0>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007ad0:	f001 fc96 	bl	8009400 <calculateNextNTPTime>
 8007ad4:	0002      	movs	r2, r0
 8007ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8007c10 <ESP_Upkeep+0x7e4>)
 8007ad8:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007ada:	4b4d      	ldr	r3, [pc, #308]	@ (8007c10 <ESP_Upkeep+0x7e4>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a4d      	ldr	r2, [pc, #308]	@ (8007c14 <ESP_Upkeep+0x7e8>)
 8007ae0:	189a      	adds	r2, r3, r2
 8007ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8007c10 <ESP_Upkeep+0x7e4>)
 8007ae4:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8007c14 <ESP_Upkeep+0x7e8>)
 8007ae8:	4a4b      	ldr	r2, [pc, #300]	@ (8007c18 <ESP_Upkeep+0x7ec>)
 8007aea:	4947      	ldr	r1, [pc, #284]	@ (8007c08 <ESP_Upkeep+0x7dc>)
 8007aec:	2002      	movs	r0, #2
 8007aee:	f00b fadb 	bl	80130a8 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007af2:	4b4a      	ldr	r3, [pc, #296]	@ (8007c1c <ESP_Upkeep+0x7f0>)
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b33      	ldr	r3, [pc, #204]	@ (8007bc4 <ESP_Upkeep+0x798>)
 8007af8:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007afa:	f7ff f94d 	bl	8006d98 <clearDMABuffer>
            stop = HAL_GetTick();
 8007afe:	f00c f813 	bl	8013b28 <HAL_GetTick>
 8007b02:	0002      	movs	r2, r0
 8007b04:	4b36      	ldr	r3, [pc, #216]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 8007b06:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007b08:	4b35      	ldr	r3, [pc, #212]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	4b35      	ldr	r3, [pc, #212]	@ (8007be4 <ESP_Upkeep+0x7b8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	4a43      	ldr	r2, [pc, #268]	@ (8007c20 <ESP_Upkeep+0x7f4>)
 8007b14:	493c      	ldr	r1, [pc, #240]	@ (8007c08 <ESP_Upkeep+0x7dc>)
 8007b16:	2002      	movs	r0, #2
 8007b18:	f00b fac6 	bl	80130a8 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007b1c:	f00c f804 	bl	8013b28 <HAL_GetTick>
 8007b20:	0003      	movs	r3, r0
 8007b22:	4a40      	ldr	r2, [pc, #256]	@ (8007c24 <ESP_Upkeep+0x7f8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d804      	bhi.n	8007b32 <ESP_Upkeep+0x706>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007b28:	4b3f      	ldr	r3, [pc, #252]	@ (8007c28 <ESP_Upkeep+0x7fc>)
 8007b2a:	4a40      	ldr	r2, [pc, #256]	@ (8007c2c <ESP_Upkeep+0x800>)
 8007b2c:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007b2e:	f005 fadf 	bl	800d0f0 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007b32:	4b21      	ldr	r3, [pc, #132]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007b34:	220d      	movs	r2, #13
 8007b36:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007b38:	4b21      	ldr	r3, [pc, #132]	@ (8007bc0 <ESP_Upkeep+0x794>)
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	701a      	strb	r2, [r3, #0]
    break;
 8007b3e:	e122      	b.n	8007d86 <ESP_Upkeep+0x95a>
          EspState = ESP_STATE_RESET;
 8007b40:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007b42:	2209      	movs	r2, #9
 8007b44:	701a      	strb	r2, [r3, #0]
    break;
 8007b46:	e11e      	b.n	8007d86 <ESP_Upkeep+0x95a>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007b48:	4b39      	ldr	r3, [pc, #228]	@ (8007c30 <ESP_Upkeep+0x804>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007b4e:	4b39      	ldr	r3, [pc, #228]	@ (8007c34 <ESP_Upkeep+0x808>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	2101      	movs	r1, #1
 8007b54:	0018      	movs	r0, r3
 8007b56:	f00d fa78 	bl	801504a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	f00b ffee 	bl	8013b3c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007b60:	2380      	movs	r3, #128	@ 0x80
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	4834      	ldr	r0, [pc, #208]	@ (8007c38 <ESP_Upkeep+0x80c>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	0019      	movs	r1, r3
 8007b6a:	f00d fa6e 	bl	801504a <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007b6e:	2001      	movs	r0, #1
 8007b70:	f00b ffe4 	bl	8013b3c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007b74:	4b2f      	ldr	r3, [pc, #188]	@ (8007c34 <ESP_Upkeep+0x808>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	2102      	movs	r1, #2
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f00d fa65 	bl	801504a <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007b80:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007b82:	2209      	movs	r2, #9
 8007b84:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007b86:	2001      	movs	r0, #1
 8007b88:	f00b ffd8 	bl	8013b3c <HAL_Delay>
      ResetESPIndicator();
 8007b8c:	f00a f90c 	bl	8011da8 <ResetESPIndicator>
      if (Check_USB_PowerOn() || userToggle) {
 8007b90:	f001 fbb4 	bl	80092fc <Check_USB_PowerOn>
 8007b94:	1e03      	subs	r3, r0, #0
 8007b96:	d103      	bne.n	8007ba0 <ESP_Upkeep+0x774>
 8007b98:	4b28      	ldr	r3, [pc, #160]	@ (8007c3c <ESP_Upkeep+0x810>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <ESP_Upkeep+0x778>
        EnabledConnectedDevices();
 8007ba0:	f005 faa6 	bl	800d0f0 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd4 <ESP_Upkeep+0x7a8>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007baa:	4b11      	ldr	r3, [pc, #68]	@ (8007bf0 <ESP_Upkeep+0x7c4>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	701a      	strb	r2, [r3, #0]
      break;
 8007bb0:	e0ec      	b.n	8007d8c <ESP_Upkeep+0x960>
 8007bb2:	46c0      	nop			@ (mov r8, r8)
 8007bb4:	20000676 	.word	0x20000676
 8007bb8:	2000002c 	.word	0x2000002c
 8007bbc:	200005a3 	.word	0x200005a3
 8007bc0:	20000677 	.word	0x20000677
 8007bc4:	2000066c 	.word	0x2000066c
 8007bc8:	20000675 	.word	0x20000675
 8007bcc:	2000002f 	.word	0x2000002f
 8007bd0:	20000666 	.word	0x20000666
 8007bd4:	20000667 	.word	0x20000667
 8007bd8:	0003a980 	.word	0x0003a980
 8007bdc:	200005a8 	.word	0x200005a8
 8007be0:	200005bc 	.word	0x200005bc
 8007be4:	200005b8 	.word	0x200005b8
 8007be8:	0802ab88 	.word	0x0802ab88
 8007bec:	08029afc 	.word	0x08029afc
 8007bf0:	20000668 	.word	0x20000668
 8007bf4:	0802abbc 	.word	0x0802abbc
 8007bf8:	0000c350 	.word	0x0000c350
 8007bfc:	0802abf8 	.word	0x0802abf8
 8007c00:	2000065c 	.word	0x2000065c
 8007c04:	0802ac28 	.word	0x0802ac28
 8007c08:	0802ac40 	.word	0x0802ac40
 8007c0c:	20000002 	.word	0x20000002
 8007c10:	20000670 	.word	0x20000670
 8007c14:	00012686 	.word	0x00012686
 8007c18:	0802ac44 	.word	0x0802ac44
 8007c1c:	20000028 	.word	0x20000028
 8007c20:	0802ac88 	.word	0x0802ac88
 8007c24:	000061a7 	.word	0x000061a7
 8007c28:	20000e24 	.word	0x20000e24
 8007c2c:	000061a8 	.word	0x000061a8
 8007c30:	200005a0 	.word	0x200005a0
 8007c34:	50001c00 	.word	0x50001c00
 8007c38:	50000800 	.word	0x50000800
 8007c3c:	20001e5e 	.word	0x20001e5e

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007c40:	4b55      	ldr	r3, [pc, #340]	@ (8007d98 <ESP_Upkeep+0x96c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	0018      	movs	r0, r3
 8007c46:	f00b f9d9 	bl	8012ffc <TimestampIsReached>
 8007c4a:	1e03      	subs	r3, r0, #0
 8007c4c:	d103      	bne.n	8007c56 <ESP_Upkeep+0x82a>
 8007c4e:	4b53      	ldr	r3, [pc, #332]	@ (8007d9c <ESP_Upkeep+0x970>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d043      	beq.n	8007cde <ESP_Upkeep+0x8b2>
        ESPTransmitDone = false;
 8007c56:	4b52      	ldr	r3, [pc, #328]	@ (8007da0 <ESP_Upkeep+0x974>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8007c5c:	4b51      	ldr	r3, [pc, #324]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d105      	bne.n	8007c70 <ESP_Upkeep+0x844>
          InitIsDone = true;
 8007c64:	4b50      	ldr	r3, [pc, #320]	@ (8007da8 <ESP_Upkeep+0x97c>)
 8007c66:	2201      	movs	r2, #1
 8007c68:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007c6a:	4b50      	ldr	r3, [pc, #320]	@ (8007dac <ESP_Upkeep+0x980>)
 8007c6c:	220b      	movs	r2, #11
 8007c6e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8007c70:	4b4c      	ldr	r3, [pc, #304]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d108      	bne.n	8007c8a <ESP_Upkeep+0x85e>
          ConnectionMade = true;
 8007c78:	4b4d      	ldr	r3, [pc, #308]	@ (8007db0 <ESP_Upkeep+0x984>)
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8007c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8007db4 <ESP_Upkeep+0x988>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007c84:	4b49      	ldr	r3, [pc, #292]	@ (8007dac <ESP_Upkeep+0x980>)
 8007c86:	220b      	movs	r2, #11
 8007c88:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8007c8a:	4b46      	ldr	r3, [pc, #280]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d102      	bne.n	8007c98 <ESP_Upkeep+0x86c>
          EspState = ESP_STATE_INIT;
 8007c92:	4b46      	ldr	r3, [pc, #280]	@ (8007dac <ESP_Upkeep+0x980>)
 8007c94:	2202      	movs	r2, #2
 8007c96:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8007c98:	4b42      	ldr	r3, [pc, #264]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d108      	bne.n	8007cb2 <ESP_Upkeep+0x886>
          EspState = ESP_STATE_CONFIG;
 8007ca0:	4b42      	ldr	r3, [pc, #264]	@ (8007dac <ESP_Upkeep+0x980>)
 8007ca2:	220e      	movs	r2, #14
 8007ca4:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8007ca6:	4a44      	ldr	r2, [pc, #272]	@ (8007db8 <ESP_Upkeep+0x98c>)
 8007ca8:	4b44      	ldr	r3, [pc, #272]	@ (8007dbc <ESP_Upkeep+0x990>)
 8007caa:	0019      	movs	r1, r3
 8007cac:	2002      	movs	r0, #2
 8007cae:	f00b f9fb 	bl	80130a8 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8007cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d105      	bne.n	8007cc6 <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_MODE_SELECT;
 8007cba:	4b3c      	ldr	r3, [pc, #240]	@ (8007dac <ESP_Upkeep+0x980>)
 8007cbc:	220b      	movs	r2, #11
 8007cbe:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8007cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8007dc0 <ESP_Upkeep+0x994>)
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007cc6:	4b35      	ldr	r3, [pc, #212]	@ (8007d9c <ESP_Upkeep+0x970>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d020      	beq.n	8007d10 <ESP_Upkeep+0x8e4>
 8007cce:	4b35      	ldr	r3, [pc, #212]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d01c      	beq.n	8007d10 <ESP_Upkeep+0x8e4>
          EspState = ESP_STATE_INIT;
 8007cd6:	4b35      	ldr	r3, [pc, #212]	@ (8007dac <ESP_Upkeep+0x980>)
 8007cd8:	2202      	movs	r2, #2
 8007cda:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007cdc:	e018      	b.n	8007d10 <ESP_Upkeep+0x8e4>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8007cde:	f001 fb8f 	bl	8009400 <calculateNextNTPTime>
 8007ce2:	0002      	movs	r2, r0
 8007ce4:	4b37      	ldr	r3, [pc, #220]	@ (8007dc4 <ESP_Upkeep+0x998>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d94e      	bls.n	8007d8a <ESP_Upkeep+0x95e>
        if(Mode == AT_MODE_SEND ) {
 8007cec:	4b2d      	ldr	r3, [pc, #180]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d14a      	bne.n	8007d8a <ESP_Upkeep+0x95e>
           Mode = AT_MODE_GETTIME;
 8007cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007cf6:	2205      	movs	r2, #5
 8007cf8:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8007cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8007dac <ESP_Upkeep+0x980>)
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8007d00:	4b25      	ldr	r3, [pc, #148]	@ (8007d98 <ESP_Upkeep+0x96c>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4b30      	ldr	r3, [pc, #192]	@ (8007dc8 <ESP_Upkeep+0x99c>)
 8007d06:	601a      	str	r2, [r3, #0]
           setTime = true;
 8007d08:	4b30      	ldr	r3, [pc, #192]	@ (8007dcc <ESP_Upkeep+0x9a0>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007d0e:	e03c      	b.n	8007d8a <ESP_Upkeep+0x95e>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007d10:	46c0      	nop			@ (mov r8, r8)
      break;
 8007d12:	e03a      	b.n	8007d8a <ESP_Upkeep+0x95e>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8007d14:	4b2e      	ldr	r3, [pc, #184]	@ (8007dd0 <ESP_Upkeep+0x9a4>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4053      	eors	r3, r2
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <ESP_Upkeep+0x908>
        Info("Do nothing until reset");
 8007d22:	4a25      	ldr	r2, [pc, #148]	@ (8007db8 <ESP_Upkeep+0x98c>)
 8007d24:	4b25      	ldr	r3, [pc, #148]	@ (8007dbc <ESP_Upkeep+0x990>)
 8007d26:	0019      	movs	r1, r3
 8007d28:	2002      	movs	r0, #2
 8007d2a:	f00b f9bd 	bl	80130a8 <CreateLine>
        msgdone = true;
 8007d2e:	4b28      	ldr	r3, [pc, #160]	@ (8007dd0 <ESP_Upkeep+0x9a4>)
 8007d30:	2201      	movs	r2, #1
 8007d32:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8007d34:	f01a fa46 	bl	80221c4 <GetUsbRxPointer>
 8007d38:	0003      	movs	r3, r0
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f000 f980 	bl	8008040 <Process_PC_Config>
      break;
 8007d40:	e024      	b.n	8007d8c <ESP_Upkeep+0x960>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8007d42:	4a24      	ldr	r2, [pc, #144]	@ (8007dd4 <ESP_Upkeep+0x9a8>)
 8007d44:	4b24      	ldr	r3, [pc, #144]	@ (8007dd8 <ESP_Upkeep+0x9ac>)
 8007d46:	0019      	movs	r1, r3
 8007d48:	2001      	movs	r0, #1
 8007d4a:	f00b f9ad 	bl	80130a8 <CreateLine>
      EspState = ESP_STATE_INIT;
 8007d4e:	4b17      	ldr	r3, [pc, #92]	@ (8007dac <ESP_Upkeep+0x980>)
 8007d50:	2202      	movs	r2, #2
 8007d52:	701a      	strb	r2, [r3, #0]
      break;
 8007d54:	e01a      	b.n	8007d8c <ESP_Upkeep+0x960>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8007d56:	4a21      	ldr	r2, [pc, #132]	@ (8007ddc <ESP_Upkeep+0x9b0>)
 8007d58:	4b1f      	ldr	r3, [pc, #124]	@ (8007dd8 <ESP_Upkeep+0x9ac>)
 8007d5a:	0019      	movs	r1, r3
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	f00b f9a3 	bl	80130a8 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8007d62:	4b12      	ldr	r3, [pc, #72]	@ (8007dac <ESP_Upkeep+0x980>)
 8007d64:	2207      	movs	r2, #7
 8007d66:	701a      	strb	r2, [r3, #0]
      break;
 8007d68:	e010      	b.n	8007d8c <ESP_Upkeep+0x960>
      break;
 8007d6a:	46c0      	nop			@ (mov r8, r8)
 8007d6c:	e00e      	b.n	8007d8c <ESP_Upkeep+0x960>
        break;
 8007d6e:	46c0      	nop			@ (mov r8, r8)
 8007d70:	e00c      	b.n	8007d8c <ESP_Upkeep+0x960>
      break;
 8007d72:	46c0      	nop			@ (mov r8, r8)
 8007d74:	e00a      	b.n	8007d8c <ESP_Upkeep+0x960>
        break;
 8007d76:	46c0      	nop			@ (mov r8, r8)
 8007d78:	e008      	b.n	8007d8c <ESP_Upkeep+0x960>
    break;
 8007d7a:	46c0      	nop			@ (mov r8, r8)
 8007d7c:	e006      	b.n	8007d8c <ESP_Upkeep+0x960>
    break;
 8007d7e:	46c0      	nop			@ (mov r8, r8)
 8007d80:	e004      	b.n	8007d8c <ESP_Upkeep+0x960>
      break;
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	e002      	b.n	8007d8c <ESP_Upkeep+0x960>
    break;
 8007d86:	46c0      	nop			@ (mov r8, r8)
 8007d88:	e000      	b.n	8007d8c <ESP_Upkeep+0x960>
      break;
 8007d8a:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8007d8c:	4b07      	ldr	r3, [pc, #28]	@ (8007dac <ESP_Upkeep+0x980>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
}
 8007d90:	0018      	movs	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b002      	add	sp, #8
 8007d96:	bdb0      	pop	{r4, r5, r7, pc}
 8007d98:	2000066c 	.word	0x2000066c
 8007d9c:	200005a3 	.word	0x200005a3
 8007da0:	200005a8 	.word	0x200005a8
 8007da4:	20000677 	.word	0x20000677
 8007da8:	200005a1 	.word	0x200005a1
 8007dac:	2000002c 	.word	0x2000002c
 8007db0:	200005a4 	.word	0x200005a4
 8007db4:	200005a6 	.word	0x200005a6
 8007db8:	0802aca8 	.word	0x0802aca8
 8007dbc:	0802ac40 	.word	0x0802ac40
 8007dc0:	200005a5 	.word	0x200005a5
 8007dc4:	20000670 	.word	0x20000670
 8007dc8:	20000028 	.word	0x20000028
 8007dcc:	20000002 	.word	0x20000002
 8007dd0:	200005a7 	.word	0x200005a7
 8007dd4:	0802acc0 	.word	0x0802acc0
 8007dd8:	08029afc 	.word	0x08029afc
 8007ddc:	0802acd4 	.word	0x0802acd4

08007de0 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8007de8:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <I2CSensors_Init+0x54>)
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8007dee:	4a12      	ldr	r2, [pc, #72]	@ (8007e38 <I2CSensors_Init+0x58>)
 8007df0:	4b12      	ldr	r3, [pc, #72]	@ (8007e3c <I2CSensors_Init+0x5c>)
 8007df2:	0011      	movs	r1, r2
 8007df4:	0018      	movs	r0, r3
 8007df6:	f00b fb55 	bl	80134a4 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 8007dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8007e38 <I2CSensors_Init+0x58>)
 8007dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8007e3c <I2CSensors_Init+0x5c>)
 8007dfe:	0011      	movs	r1, r2
 8007e00:	0018      	movs	r0, r3
 8007e02:	f008 f993 	bl	801012c <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8007e06:	4a0e      	ldr	r2, [pc, #56]	@ (8007e40 <I2CSensors_Init+0x60>)
 8007e08:	490b      	ldr	r1, [pc, #44]	@ (8007e38 <I2CSensors_Init+0x58>)
 8007e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e3c <I2CSensors_Init+0x5c>)
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f002 fa3b 	bl	800a288 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8007e12:	4a0c      	ldr	r2, [pc, #48]	@ (8007e44 <I2CSensors_Init+0x64>)
 8007e14:	4b0c      	ldr	r3, [pc, #48]	@ (8007e48 <I2CSensors_Init+0x68>)
 8007e16:	0011      	movs	r1, r2
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f002 ffff 	bl	800ae1c <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 8007e1e:	4a09      	ldr	r2, [pc, #36]	@ (8007e44 <I2CSensors_Init+0x64>)
 8007e20:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <I2CSensors_Init+0x68>)
 8007e22:	0011      	movs	r1, r2
 8007e24:	0018      	movs	r0, r3
 8007e26:	f7fb fea5 	bl	8003b74 <ENS_Init>
}
 8007e2a:	46c0      	nop			@ (mov r8, r8)
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	b002      	add	sp, #8
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	46c0      	nop			@ (mov r8, r8)
 8007e34:	200007a8 	.word	0x200007a8
 8007e38:	08007ef9 	.word	0x08007ef9
 8007e3c:	08007ea5 	.word	0x08007ea5
 8007e40:	08007e4d 	.word	0x08007e4d
 8007e44:	08007fc9 	.word	0x08007fc9
 8007e48:	08007f4d 	.word	0x08007f4d

08007e4c <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af02      	add	r7, sp, #8
 8007e52:	6039      	str	r1, [r7, #0]
 8007e54:	0011      	movs	r1, r2
 8007e56:	1dfb      	adds	r3, r7, #7
 8007e58:	1c02      	adds	r2, r0, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	1dbb      	adds	r3, r7, #6
 8007e5e:	1c0a      	adds	r2, r1, #0
 8007e60:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 8007e62:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea0 <ReadI2CDirect+0x54>)
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	1dfb      	adds	r3, r7, #7
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	18db      	adds	r3, r3, r3
 8007e6e:	b299      	uxth	r1, r3
 8007e70:	1dbb      	adds	r3, r7, #6
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	260f      	movs	r6, #15
 8007e78:	19bc      	adds	r4, r7, r6
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	25fa      	movs	r5, #250	@ 0xfa
 8007e7e:	9500      	str	r5, [sp, #0]
 8007e80:	f00d faba 	bl	80153f8 <HAL_I2C_Master_Receive>
 8007e84:	0003      	movs	r3, r0
 8007e86:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007e88:	19bb      	adds	r3, r7, r6
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <ReadI2CDirect+0x48>
        return false;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e000      	b.n	8007e96 <ReadI2CDirect+0x4a>
    }
    return true;
 8007e94:	2301      	movs	r3, #1
}
 8007e96:	0018      	movs	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b005      	add	sp, #20
 8007e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9e:	46c0      	nop			@ (mov r8, r8)
 8007ea0:	200007a8 	.word	0x200007a8

08007ea4 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007ea4:	b5b0      	push	{r4, r5, r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6039      	str	r1, [r7, #0]
 8007eac:	0011      	movs	r1, r2
 8007eae:	1dfb      	adds	r3, r7, #7
 8007eb0:	1c02      	adds	r2, r0, #0
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	1dbb      	adds	r3, r7, #6
 8007eb6:	1c0a      	adds	r2, r1, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007eba:	4b0e      	ldr	r3, [pc, #56]	@ (8007ef4 <ReadI2C+0x50>)
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	1dfb      	adds	r3, r7, #7
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	18db      	adds	r3, r3, r3
 8007ec6:	b299      	uxth	r1, r3
 8007ec8:	1dbb      	adds	r3, r7, #6
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	250f      	movs	r5, #15
 8007ed0:	197c      	adds	r4, r7, r5
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	f00d fc9e 	bl	8015814 <HAL_I2C_Master_Receive_DMA>
 8007ed8:	0003      	movs	r3, r0
 8007eda:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007edc:	197b      	adds	r3, r7, r5
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <ReadI2C+0x44>
        return false;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	e000      	b.n	8007eea <ReadI2C+0x46>
    }
    return true;
 8007ee8:	2301      	movs	r3, #1
}
 8007eea:	0018      	movs	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b004      	add	sp, #16
 8007ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef2:	46c0      	nop			@ (mov r8, r8)
 8007ef4:	200007a8 	.word	0x200007a8

08007ef8 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007ef8:	b5b0      	push	{r4, r5, r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6039      	str	r1, [r7, #0]
 8007f00:	0011      	movs	r1, r2
 8007f02:	1dfb      	adds	r3, r7, #7
 8007f04:	1c02      	adds	r2, r0, #0
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	1dbb      	adds	r3, r7, #6
 8007f0a:	1c0a      	adds	r2, r1, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f48 <WriteI2C+0x50>)
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	1dfb      	adds	r3, r7, #7
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	18db      	adds	r3, r3, r3
 8007f1a:	b299      	uxth	r1, r3
 8007f1c:	1dbb      	adds	r3, r7, #6
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	250f      	movs	r5, #15
 8007f24:	197c      	adds	r4, r7, r5
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	f00d fb6e 	bl	8015608 <HAL_I2C_Master_Transmit_DMA>
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007f30:	197b      	adds	r3, r7, r5
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <WriteI2C+0x44>
        return false;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e000      	b.n	8007f3e <WriteI2C+0x46>
    }
    return true;
 8007f3c:	2301      	movs	r3, #1
}
 8007f3e:	0018      	movs	r0, r3
 8007f40:	46bd      	mov	sp, r7
 8007f42:	b004      	add	sp, #16
 8007f44:	bdb0      	pop	{r4, r5, r7, pc}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	200007a8 	.word	0x200007a8

08007f4c <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f4e:	b08b      	sub	sp, #44	@ 0x2c
 8007f50:	af04      	add	r7, sp, #16
 8007f52:	0004      	movs	r4, r0
 8007f54:	0008      	movs	r0, r1
 8007f56:	0011      	movs	r1, r2
 8007f58:	607b      	str	r3, [r7, #4]
 8007f5a:	250f      	movs	r5, #15
 8007f5c:	197b      	adds	r3, r7, r5
 8007f5e:	1c22      	adds	r2, r4, #0
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	260c      	movs	r6, #12
 8007f64:	19bb      	adds	r3, r7, r6
 8007f66:	1c02      	adds	r2, r0, #0
 8007f68:	801a      	strh	r2, [r3, #0]
 8007f6a:	230a      	movs	r3, #10
 8007f6c:	18fb      	adds	r3, r7, r3
 8007f6e:	1c0a      	adds	r2, r1, #0
 8007f70:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8007f72:	4b14      	ldr	r3, [pc, #80]	@ (8007fc4 <ReadI2CMem+0x78>)
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	197b      	adds	r3, r7, r5
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	18db      	adds	r3, r3, r3
 8007f7e:	b299      	uxth	r1, r3
 8007f80:	2217      	movs	r2, #23
 8007f82:	18bc      	adds	r4, r7, r2
 8007f84:	230a      	movs	r3, #10
 8007f86:	18fb      	adds	r3, r7, r3
 8007f88:	881d      	ldrh	r5, [r3, #0]
 8007f8a:	19bb      	adds	r3, r7, r6
 8007f8c:	881a      	ldrh	r2, [r3, #0]
 8007f8e:	2364      	movs	r3, #100	@ 0x64
 8007f90:	9302      	str	r3, [sp, #8]
 8007f92:	2328      	movs	r3, #40	@ 0x28
 8007f94:	2608      	movs	r6, #8
 8007f96:	199b      	adds	r3, r3, r6
 8007f98:	19db      	adds	r3, r3, r7
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	002b      	movs	r3, r5
 8007fa4:	f00d fd3c 	bl	8015a20 <HAL_I2C_Mem_Read>
 8007fa8:	0003      	movs	r3, r0
 8007faa:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007fac:	2217      	movs	r2, #23
 8007fae:	18bb      	adds	r3, r7, r2
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <ReadI2CMem+0x6e>
     return false;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e000      	b.n	8007fbc <ReadI2CMem+0x70>
   }
   return true;
 8007fba:	2301      	movs	r3, #1
}
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	b007      	add	sp, #28
 8007fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc4:	200007a8 	.word	0x200007a8

08007fc8 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fca:	b089      	sub	sp, #36	@ 0x24
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	0004      	movs	r4, r0
 8007fd0:	0008      	movs	r0, r1
 8007fd2:	0011      	movs	r1, r2
 8007fd4:	607b      	str	r3, [r7, #4]
 8007fd6:	250f      	movs	r5, #15
 8007fd8:	197b      	adds	r3, r7, r5
 8007fda:	1c22      	adds	r2, r4, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	260c      	movs	r6, #12
 8007fe0:	19bb      	adds	r3, r7, r6
 8007fe2:	1c02      	adds	r2, r0, #0
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	230a      	movs	r3, #10
 8007fe8:	18fb      	adds	r3, r7, r3
 8007fea:	1c0a      	adds	r2, r1, #0
 8007fec:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 8007fee:	4b13      	ldr	r3, [pc, #76]	@ (800803c <WriteI2CMem+0x74>)
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	197b      	adds	r3, r7, r5
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	18db      	adds	r3, r3, r3
 8007ffa:	b299      	uxth	r1, r3
 8007ffc:	2217      	movs	r2, #23
 8007ffe:	18bc      	adds	r4, r7, r2
 8008000:	230a      	movs	r3, #10
 8008002:	18fb      	adds	r3, r7, r3
 8008004:	881d      	ldrh	r5, [r3, #0]
 8008006:	19bb      	adds	r3, r7, r6
 8008008:	881a      	ldrh	r2, [r3, #0]
 800800a:	2328      	movs	r3, #40	@ 0x28
 800800c:	2608      	movs	r6, #8
 800800e:	199b      	adds	r3, r3, r6
 8008010:	19db      	adds	r3, r3, r7
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	002b      	movs	r3, r5
 800801c:	f00d fe34 	bl	8015c88 <HAL_I2C_Mem_Write_DMA>
 8008020:	0003      	movs	r3, r0
 8008022:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008024:	2217      	movs	r2, #23
 8008026:	18bb      	adds	r3, r7, r2
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <WriteI2CMem+0x6a>
     return false;
 800802e:	2300      	movs	r3, #0
 8008030:	e000      	b.n	8008034 <WriteI2CMem+0x6c>
   }
   return true;
 8008032:	2301      	movs	r3, #1
}
 8008034:	0018      	movs	r0, r3
 8008036:	46bd      	mov	sp, r7
 8008038:	b007      	add	sp, #28
 800803a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800803c:	200007a8 	.word	0x200007a8

08008040 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8008040:	b590      	push	{r4, r7, lr}
 8008042:	b0c3      	sub	sp, #268	@ 0x10c
 8008044:	af3e      	add	r7, sp, #248	@ 0xf8
 8008046:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8008048:	f01a f8dc 	bl	8022204 <GetUsbRxDataSize>
 800804c:	0003      	movs	r3, r0
 800804e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b05      	cmp	r3, #5
 8008054:	d972      	bls.n	800813c <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2123      	movs	r1, #35	@ 0x23
 800805a:	0018      	movs	r0, r3
 800805c:	f01d fb02 	bl	8025664 <strchr>
 8008060:	0003      	movs	r3, r0
 8008062:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d066      	beq.n	8008138 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	785a      	ldrb	r2, [r3, #1]
 800806e:	4b35      	ldr	r3, [pc, #212]	@ (8008144 <Process_PC_Config+0x104>)
 8008070:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	789a      	ldrb	r2, [r3, #2]
 8008076:	4b33      	ldr	r3, [pc, #204]	@ (8008144 <Process_PC_Config+0x104>)
 8008078:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800807a:	4b32      	ldr	r3, [pc, #200]	@ (8008144 <Process_PC_Config+0x104>)
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	3305      	adds	r3, #5
 8008080:	001a      	movs	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4293      	cmp	r3, r2
 8008086:	d352      	bcc.n	800812e <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	1cd9      	adds	r1, r3, #3
 800808c:	4b2d      	ldr	r3, [pc, #180]	@ (8008144 <Process_PC_Config+0x104>)
 800808e:	785b      	ldrb	r3, [r3, #1]
 8008090:	001a      	movs	r2, r3
 8008092:	4b2d      	ldr	r3, [pc, #180]	@ (8008148 <Process_PC_Config+0x108>)
 8008094:	0018      	movs	r0, r3
 8008096:	f01d fbb9 	bl	802580c <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800809a:	4b2a      	ldr	r3, [pc, #168]	@ (8008144 <Process_PC_Config+0x104>)
 800809c:	785b      	ldrb	r3, [r3, #1]
 800809e:	3303      	adds	r3, #3
 80080a0:	001a      	movs	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	189b      	adds	r3, r3, r2
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	b21b      	sxth	r3, r3
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	b21a      	sxth	r2, r3
 80080ae:	4b25      	ldr	r3, [pc, #148]	@ (8008144 <Process_PC_Config+0x104>)
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	3304      	adds	r3, #4
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	18cb      	adds	r3, r1, r3
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	b21b      	sxth	r3, r3
 80080bc:	4313      	orrs	r3, r2
 80080be:	b21b      	sxth	r3, r3
 80080c0:	b299      	uxth	r1, r3
 80080c2:	4a20      	ldr	r2, [pc, #128]	@ (8008144 <Process_PC_Config+0x104>)
 80080c4:	2381      	movs	r3, #129	@ 0x81
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80080ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008144 <Process_PC_Config+0x104>)
 80080cc:	2381      	movs	r3, #129	@ 0x81
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	5ad4      	ldrh	r4, [r2, r3]
 80080d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008144 <Process_PC_Config+0x104>)
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	3303      	adds	r3, #3
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	0011      	movs	r1, r2
 80080de:	0018      	movs	r0, r3
 80080e0:	f000 fa14 	bl	800850c <CRC16_ARC>
 80080e4:	0003      	movs	r3, r0
 80080e6:	429c      	cmp	r4, r3
 80080e8:	d007      	beq.n	80080fa <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80080ea:	4b16      	ldr	r3, [pc, #88]	@ (8008144 <Process_PC_Config+0x104>)
 80080ec:	785a      	ldrb	r2, [r3, #1]
 80080ee:	4b16      	ldr	r3, [pc, #88]	@ (8008148 <Process_PC_Config+0x108>)
 80080f0:	0019      	movs	r1, r3
 80080f2:	2001      	movs	r0, #1
 80080f4:	f000 f9b8 	bl	8008468 <Create_Message>
 80080f8:	e016      	b.n	8008128 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80080fa:	4c12      	ldr	r4, [pc, #72]	@ (8008144 <Process_PC_Config+0x104>)
 80080fc:	466b      	mov	r3, sp
 80080fe:	0018      	movs	r0, r3
 8008100:	0023      	movs	r3, r4
 8008102:	3310      	adds	r3, #16
 8008104:	22f4      	movs	r2, #244	@ 0xf4
 8008106:	0019      	movs	r1, r3
 8008108:	f01d fb80 	bl	802580c <memcpy>
 800810c:	6820      	ldr	r0, [r4, #0]
 800810e:	6861      	ldr	r1, [r4, #4]
 8008110:	68a2      	ldr	r2, [r4, #8]
 8008112:	68e3      	ldr	r3, [r4, #12]
 8008114:	f000 f81a 	bl	800814c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8008118:	4b0a      	ldr	r3, [pc, #40]	@ (8008144 <Process_PC_Config+0x104>)
 800811a:	7818      	ldrb	r0, [r3, #0]
 800811c:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <Process_PC_Config+0x104>)
 800811e:	785a      	ldrb	r2, [r3, #1]
 8008120:	4b09      	ldr	r3, [pc, #36]	@ (8008148 <Process_PC_Config+0x108>)
 8008122:	0019      	movs	r1, r3
 8008124:	f000 f9a0 	bl	8008468 <Create_Message>
                }
                ResetUsbRxDataSize();
 8008128:	f01a f854 	bl	80221d4 <ResetUsbRxDataSize>
                return;
 800812c:	e006      	b.n	800813c <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	0018      	movs	r0, r3
 8008132:	f01a f871 	bl	8022218 <GetUsbRxNextChunk>
 8008136:	e001      	b.n	800813c <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 8008138:	f01a f84c 	bl	80221d4 <ResetUsbRxDataSize>
        }
    }
}
 800813c:	46bd      	mov	sp, r7
 800813e:	b005      	add	sp, #20
 8008140:	bd90      	pop	{r4, r7, pc}
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	200007ac 	.word	0x200007ac
 8008148:	200007ae 	.word	0x200007ae

0800814c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 800814c:	b084      	sub	sp, #16
 800814e:	b5b0      	push	{r4, r5, r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	2518      	movs	r5, #24
 8008156:	197c      	adds	r4, r7, r5
 8008158:	6020      	str	r0, [r4, #0]
 800815a:	6061      	str	r1, [r4, #4]
 800815c:	60a2      	str	r2, [r4, #8]
 800815e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8008160:	197b      	adds	r3, r7, r5
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2bfe      	cmp	r3, #254	@ 0xfe
 8008166:	d100      	bne.n	800816a <ProcessCmd+0x1e>
 8008168:	e122      	b.n	80083b0 <ProcessCmd+0x264>
 800816a:	dd00      	ble.n	800816e <ProcessCmd+0x22>
 800816c:	e143      	b.n	80083f6 <ProcessCmd+0x2aa>
 800816e:	2b18      	cmp	r3, #24
 8008170:	dc0a      	bgt.n	8008188 <ProcessCmd+0x3c>
 8008172:	2b00      	cmp	r3, #0
 8008174:	da00      	bge.n	8008178 <ProcessCmd+0x2c>
 8008176:	e13e      	b.n	80083f6 <ProcessCmd+0x2aa>
 8008178:	2b18      	cmp	r3, #24
 800817a:	d900      	bls.n	800817e <ProcessCmd+0x32>
 800817c:	e13b      	b.n	80083f6 <ProcessCmd+0x2aa>
 800817e:	009a      	lsls	r2, r3, #2
 8008180:	4ba0      	ldr	r3, [pc, #640]	@ (8008404 <ProcessCmd+0x2b8>)
 8008182:	18d3      	adds	r3, r2, r3
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	469f      	mov	pc, r3
 8008188:	2bfd      	cmp	r3, #253	@ 0xfd
 800818a:	d100      	bne.n	800818e <ProcessCmd+0x42>
 800818c:	e108      	b.n	80083a0 <ProcessCmd+0x254>
            }
            break;
        }
    }

}
 800818e:	e132      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008190:	2118      	movs	r1, #24
 8008192:	187b      	adds	r3, r7, r1
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	001a      	movs	r2, r3
 8008198:	187b      	adds	r3, r7, r1
 800819a:	1c99      	adds	r1, r3, #2
 800819c:	489a      	ldr	r0, [pc, #616]	@ (8008408 <ProcessCmd+0x2bc>)
 800819e:	230c      	movs	r3, #12
 80081a0:	f003 fa7a 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 80081a4:	e127      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081a6:	2118      	movs	r1, #24
 80081a8:	187b      	adds	r3, r7, r1
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	001a      	movs	r2, r3
 80081ae:	187b      	adds	r3, r7, r1
 80081b0:	1c99      	adds	r1, r3, #2
 80081b2:	4896      	ldr	r0, [pc, #600]	@ (800840c <ProcessCmd+0x2c0>)
 80081b4:	230c      	movs	r3, #12
 80081b6:	f003 fa6f 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 80081ba:	e11c      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081bc:	2118      	movs	r1, #24
 80081be:	187b      	adds	r3, r7, r1
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	001a      	movs	r2, r3
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	1c99      	adds	r1, r3, #2
 80081c8:	4891      	ldr	r0, [pc, #580]	@ (8008410 <ProcessCmd+0x2c4>)
 80081ca:	230c      	movs	r3, #12
 80081cc:	f003 fa64 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 80081d0:	e111      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081d2:	2118      	movs	r1, #24
 80081d4:	187b      	adds	r3, r7, r1
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	001a      	movs	r2, r3
 80081da:	187b      	adds	r3, r7, r1
 80081dc:	1c99      	adds	r1, r3, #2
 80081de:	488d      	ldr	r0, [pc, #564]	@ (8008414 <ProcessCmd+0x2c8>)
 80081e0:	230c      	movs	r3, #12
 80081e2:	f003 fa59 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 80081e6:	e106      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081e8:	2118      	movs	r1, #24
 80081ea:	187b      	adds	r3, r7, r1
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	001a      	movs	r2, r3
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	1c99      	adds	r1, r3, #2
 80081f4:	4888      	ldr	r0, [pc, #544]	@ (8008418 <ProcessCmd+0x2cc>)
 80081f6:	230c      	movs	r3, #12
 80081f8:	f003 fa4e 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 80081fc:	e0fb      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081fe:	2118      	movs	r1, #24
 8008200:	187b      	adds	r3, r7, r1
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	001a      	movs	r2, r3
 8008206:	187b      	adds	r3, r7, r1
 8008208:	1c99      	adds	r1, r3, #2
 800820a:	4884      	ldr	r0, [pc, #528]	@ (800841c <ProcessCmd+0x2d0>)
 800820c:	230c      	movs	r3, #12
 800820e:	f003 fa43 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 8008212:	e0f0      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008214:	2118      	movs	r1, #24
 8008216:	187b      	adds	r3, r7, r1
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	001a      	movs	r2, r3
 800821c:	187b      	adds	r3, r7, r1
 800821e:	1c99      	adds	r1, r3, #2
 8008220:	487f      	ldr	r0, [pc, #508]	@ (8008420 <ProcessCmd+0x2d4>)
 8008222:	230c      	movs	r3, #12
 8008224:	f003 fa38 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 8008228:	e0e5      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800822a:	2118      	movs	r1, #24
 800822c:	187b      	adds	r3, r7, r1
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	001a      	movs	r2, r3
 8008232:	187b      	adds	r3, r7, r1
 8008234:	1c99      	adds	r1, r3, #2
 8008236:	487b      	ldr	r0, [pc, #492]	@ (8008424 <ProcessCmd+0x2d8>)
 8008238:	230c      	movs	r3, #12
 800823a:	f003 fa2d 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 800823e:	e0da      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008240:	2118      	movs	r1, #24
 8008242:	187b      	adds	r3, r7, r1
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	001a      	movs	r2, r3
 8008248:	187b      	adds	r3, r7, r1
 800824a:	1c99      	adds	r1, r3, #2
 800824c:	4876      	ldr	r0, [pc, #472]	@ (8008428 <ProcessCmd+0x2dc>)
 800824e:	230c      	movs	r3, #12
 8008250:	f003 fa22 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 8008254:	e0cf      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008256:	2118      	movs	r1, #24
 8008258:	187b      	adds	r3, r7, r1
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	001a      	movs	r2, r3
 800825e:	187b      	adds	r3, r7, r1
 8008260:	1c99      	adds	r1, r3, #2
 8008262:	4872      	ldr	r0, [pc, #456]	@ (800842c <ProcessCmd+0x2e0>)
 8008264:	230c      	movs	r3, #12
 8008266:	f003 fa17 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 800826a:	e0c4      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800826c:	2118      	movs	r1, #24
 800826e:	187b      	adds	r3, r7, r1
 8008270:	785b      	ldrb	r3, [r3, #1]
 8008272:	001a      	movs	r2, r3
 8008274:	187b      	adds	r3, r7, r1
 8008276:	1c99      	adds	r1, r3, #2
 8008278:	486d      	ldr	r0, [pc, #436]	@ (8008430 <ProcessCmd+0x2e4>)
 800827a:	230c      	movs	r3, #12
 800827c:	f003 fa0c 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 8008280:	e0b9      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8008282:	2118      	movs	r1, #24
 8008284:	187b      	adds	r3, r7, r1
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	001a      	movs	r2, r3
 800828a:	187b      	adds	r3, r7, r1
 800828c:	1c99      	adds	r1, r3, #2
 800828e:	4869      	ldr	r0, [pc, #420]	@ (8008434 <ProcessCmd+0x2e8>)
 8008290:	2320      	movs	r3, #32
 8008292:	f003 fa01 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 8008296:	e0ae      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008298:	2118      	movs	r1, #24
 800829a:	187b      	adds	r3, r7, r1
 800829c:	785b      	ldrb	r3, [r3, #1]
 800829e:	001a      	movs	r2, r3
 80082a0:	187b      	adds	r3, r7, r1
 80082a2:	1c99      	adds	r1, r3, #2
 80082a4:	4864      	ldr	r0, [pc, #400]	@ (8008438 <ProcessCmd+0x2ec>)
 80082a6:	230c      	movs	r3, #12
 80082a8:	f003 f9f6 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 80082ac:	e0a3      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082ae:	2118      	movs	r1, #24
 80082b0:	187b      	adds	r3, r7, r1
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	001a      	movs	r2, r3
 80082b6:	187b      	adds	r3, r7, r1
 80082b8:	1c99      	adds	r1, r3, #2
 80082ba:	4860      	ldr	r0, [pc, #384]	@ (800843c <ProcessCmd+0x2f0>)
 80082bc:	230c      	movs	r3, #12
 80082be:	f003 f9eb 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 80082c2:	e098      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082c4:	2118      	movs	r1, #24
 80082c6:	187b      	adds	r3, r7, r1
 80082c8:	785b      	ldrb	r3, [r3, #1]
 80082ca:	001a      	movs	r2, r3
 80082cc:	187b      	adds	r3, r7, r1
 80082ce:	1c99      	adds	r1, r3, #2
 80082d0:	485b      	ldr	r0, [pc, #364]	@ (8008440 <ProcessCmd+0x2f4>)
 80082d2:	230c      	movs	r3, #12
 80082d4:	f003 f9e0 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 80082d8:	e08d      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082da:	2118      	movs	r1, #24
 80082dc:	187b      	adds	r3, r7, r1
 80082de:	785b      	ldrb	r3, [r3, #1]
 80082e0:	001a      	movs	r2, r3
 80082e2:	187b      	adds	r3, r7, r1
 80082e4:	1c99      	adds	r1, r3, #2
 80082e6:	4857      	ldr	r0, [pc, #348]	@ (8008444 <ProcessCmd+0x2f8>)
 80082e8:	230c      	movs	r3, #12
 80082ea:	f003 f9d5 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 80082ee:	e082      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082f0:	2118      	movs	r1, #24
 80082f2:	187b      	adds	r3, r7, r1
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	001a      	movs	r2, r3
 80082f8:	187b      	adds	r3, r7, r1
 80082fa:	1c99      	adds	r1, r3, #2
 80082fc:	4852      	ldr	r0, [pc, #328]	@ (8008448 <ProcessCmd+0x2fc>)
 80082fe:	230c      	movs	r3, #12
 8008300:	f003 f9ca 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 8008304:	e077      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008306:	2118      	movs	r1, #24
 8008308:	187b      	adds	r3, r7, r1
 800830a:	785b      	ldrb	r3, [r3, #1]
 800830c:	001a      	movs	r2, r3
 800830e:	187b      	adds	r3, r7, r1
 8008310:	1c99      	adds	r1, r3, #2
 8008312:	484e      	ldr	r0, [pc, #312]	@ (800844c <ProcessCmd+0x300>)
 8008314:	230c      	movs	r3, #12
 8008316:	f003 f9bf 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 800831a:	e06c      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800831c:	2118      	movs	r1, #24
 800831e:	187b      	adds	r3, r7, r1
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	001a      	movs	r2, r3
 8008324:	187b      	adds	r3, r7, r1
 8008326:	1c99      	adds	r1, r3, #2
 8008328:	4849      	ldr	r0, [pc, #292]	@ (8008450 <ProcessCmd+0x304>)
 800832a:	230c      	movs	r3, #12
 800832c:	f003 f9b4 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 8008330:	e061      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008332:	2118      	movs	r1, #24
 8008334:	187b      	adds	r3, r7, r1
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	001a      	movs	r2, r3
 800833a:	187b      	adds	r3, r7, r1
 800833c:	1c99      	adds	r1, r3, #2
 800833e:	4845      	ldr	r0, [pc, #276]	@ (8008454 <ProcessCmd+0x308>)
 8008340:	230c      	movs	r3, #12
 8008342:	f003 f9a9 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 8008346:	e056      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008348:	2118      	movs	r1, #24
 800834a:	187b      	adds	r3, r7, r1
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	001a      	movs	r2, r3
 8008350:	187b      	adds	r3, r7, r1
 8008352:	1c99      	adds	r1, r3, #2
 8008354:	4840      	ldr	r0, [pc, #256]	@ (8008458 <ProcessCmd+0x30c>)
 8008356:	230c      	movs	r3, #12
 8008358:	f003 f99e 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 800835c:	e04b      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800835e:	2118      	movs	r1, #24
 8008360:	187b      	adds	r3, r7, r1
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	001a      	movs	r2, r3
 8008366:	187b      	adds	r3, r7, r1
 8008368:	1c99      	adds	r1, r3, #2
 800836a:	483c      	ldr	r0, [pc, #240]	@ (800845c <ProcessCmd+0x310>)
 800836c:	230c      	movs	r3, #12
 800836e:	f003 f993 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 8008372:	e040      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008374:	2118      	movs	r1, #24
 8008376:	187b      	adds	r3, r7, r1
 8008378:	785b      	ldrb	r3, [r3, #1]
 800837a:	001a      	movs	r2, r3
 800837c:	187b      	adds	r3, r7, r1
 800837e:	1c99      	adds	r1, r3, #2
 8008380:	4837      	ldr	r0, [pc, #220]	@ (8008460 <ProcessCmd+0x314>)
 8008382:	230c      	movs	r3, #12
 8008384:	f003 f988 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 8008388:	e035      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800838a:	2118      	movs	r1, #24
 800838c:	187b      	adds	r3, r7, r1
 800838e:	785b      	ldrb	r3, [r3, #1]
 8008390:	001a      	movs	r2, r3
 8008392:	187b      	adds	r3, r7, r1
 8008394:	1c99      	adds	r1, r3, #2
 8008396:	4833      	ldr	r0, [pc, #204]	@ (8008464 <ProcessCmd+0x318>)
 8008398:	230c      	movs	r3, #12
 800839a:	f003 f97d 	bl	800b698 <WriteUint8ArrayEepromSafe>
        break;
 800839e:	e02a      	b.n	80083f6 <ProcessCmd+0x2aa>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80083a0:	23ca      	movs	r3, #202	@ 0xca
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	4a18      	ldr	r2, [pc, #96]	@ (8008408 <ProcessCmd+0x2bc>)
 80083a6:	0019      	movs	r1, r3
 80083a8:	0010      	movs	r0, r2
 80083aa:	f003 f9ba 	bl	800b722 <ClearEEprom>
        break;
 80083ae:	e022      	b.n	80083f6 <ProcessCmd+0x2aa>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80083b0:	2118      	movs	r1, #24
 80083b2:	187b      	adds	r3, r7, r1
 80083b4:	789b      	ldrb	r3, [r3, #2]
 80083b6:	b21b      	sxth	r3, r3
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	b21a      	sxth	r2, r3
 80083bc:	187b      	adds	r3, r7, r1
 80083be:	78db      	ldrb	r3, [r3, #3]
 80083c0:	b21b      	sxth	r3, r3
 80083c2:	4313      	orrs	r3, r2
 80083c4:	b21a      	sxth	r2, r3
 80083c6:	1dbb      	adds	r3, r7, #6
 80083c8:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80083ca:	1dbb      	adds	r3, r7, #6
 80083cc:	881a      	ldrh	r2, [r3, #0]
 80083ce:	23c0      	movs	r3, #192	@ 0xc0
 80083d0:	015b      	lsls	r3, r3, #5
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d207      	bcs.n	80083e6 <ProcessCmd+0x29a>
                ClearEEprom(EEPromStartAddr, size);
 80083d6:	1dbb      	adds	r3, r7, #6
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	4a0b      	ldr	r2, [pc, #44]	@ (8008408 <ProcessCmd+0x2bc>)
 80083dc:	0019      	movs	r1, r3
 80083de:	0010      	movs	r0, r2
 80083e0:	f003 f99f 	bl	800b722 <ClearEEprom>
            break;
 80083e4:	e006      	b.n	80083f4 <ProcessCmd+0x2a8>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80083e6:	23c0      	movs	r3, #192	@ 0xc0
 80083e8:	015b      	lsls	r3, r3, #5
 80083ea:	4a07      	ldr	r2, [pc, #28]	@ (8008408 <ProcessCmd+0x2bc>)
 80083ec:	0019      	movs	r1, r3
 80083ee:	0010      	movs	r0, r2
 80083f0:	f003 f997 	bl	800b722 <ClearEEprom>
            break;
 80083f4:	46c0      	nop			@ (mov r8, r8)
}
 80083f6:	46c0      	nop			@ (mov r8, r8)
 80083f8:	46bd      	mov	sp, r7
 80083fa:	b002      	add	sp, #8
 80083fc:	bcb0      	pop	{r4, r5, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	b004      	add	sp, #16
 8008402:	4718      	bx	r3
 8008404:	0802d7a8 	.word	0x0802d7a8
 8008408:	08080000 	.word	0x08080000
 800840c:	0808000c 	.word	0x0808000c
 8008410:	08080018 	.word	0x08080018
 8008414:	08080024 	.word	0x08080024
 8008418:	08080030 	.word	0x08080030
 800841c:	0808003c 	.word	0x0808003c
 8008420:	08080048 	.word	0x08080048
 8008424:	08080054 	.word	0x08080054
 8008428:	08080060 	.word	0x08080060
 800842c:	0808006c 	.word	0x0808006c
 8008430:	08080078 	.word	0x08080078
 8008434:	08080090 	.word	0x08080090
 8008438:	080800b0 	.word	0x080800b0
 800843c:	080800bc 	.word	0x080800bc
 8008440:	080800c8 	.word	0x080800c8
 8008444:	080800d4 	.word	0x080800d4
 8008448:	080800e0 	.word	0x080800e0
 800844c:	080800ec 	.word	0x080800ec
 8008450:	080800f8 	.word	0x080800f8
 8008454:	08080104 	.word	0x08080104
 8008458:	08080110 	.word	0x08080110
 800845c:	08080130 	.word	0x08080130
 8008460:	08080170 	.word	0x08080170
 8008464:	0808017c 	.word	0x0808017c

08008468 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8008468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6039      	str	r1, [r7, #0]
 8008470:	0011      	movs	r1, r2
 8008472:	1dfb      	adds	r3, r7, #7
 8008474:	1c02      	adds	r2, r0, #0
 8008476:	701a      	strb	r2, [r3, #0]
 8008478:	1dbb      	adds	r3, r7, #6
 800847a:	1c0a      	adds	r2, r1, #0
 800847c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 800847e:	2223      	movs	r2, #35	@ 0x23
 8008480:	4b20      	ldr	r3, [pc, #128]	@ (8008504 <Create_Message+0x9c>)
 8008482:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8008484:	4b1f      	ldr	r3, [pc, #124]	@ (8008504 <Create_Message+0x9c>)
 8008486:	1dfa      	adds	r2, r7, #7
 8008488:	7812      	ldrb	r2, [r2, #0]
 800848a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 800848c:	4b1d      	ldr	r3, [pc, #116]	@ (8008504 <Create_Message+0x9c>)
 800848e:	1dba      	adds	r2, r7, #6
 8008490:	7812      	ldrb	r2, [r2, #0]
 8008492:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8008494:	1dbb      	adds	r3, r7, #6
 8008496:	781a      	ldrb	r2, [r3, #0]
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	4b1b      	ldr	r3, [pc, #108]	@ (8008508 <Create_Message+0xa0>)
 800849c:	0018      	movs	r0, r3
 800849e:	f01d f9b5 	bl	802580c <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80084a2:	1dbb      	adds	r3, r7, #6
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	250e      	movs	r5, #14
 80084aa:	197b      	adds	r3, r7, r5
 80084ac:	3203      	adds	r2, #3
 80084ae:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80084b0:	260c      	movs	r6, #12
 80084b2:	19bc      	adds	r4, r7, r6
 80084b4:	197b      	adds	r3, r7, r5
 80084b6:	881a      	ldrh	r2, [r3, #0]
 80084b8:	4b12      	ldr	r3, [pc, #72]	@ (8008504 <Create_Message+0x9c>)
 80084ba:	0011      	movs	r1, r2
 80084bc:	0018      	movs	r0, r3
 80084be:	f000 f825 	bl	800850c <CRC16_ARC>
 80084c2:	0003      	movs	r3, r0
 80084c4:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 80084c6:	0030      	movs	r0, r6
 80084c8:	183b      	adds	r3, r7, r0
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	0a1b      	lsrs	r3, r3, #8
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	197b      	adds	r3, r7, r5
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b2d1      	uxtb	r1, r2
 80084d6:	4a0b      	ldr	r2, [pc, #44]	@ (8008504 <Create_Message+0x9c>)
 80084d8:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80084da:	197b      	adds	r3, r7, r5
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	3301      	adds	r3, #1
 80084e0:	183a      	adds	r2, r7, r0
 80084e2:	8812      	ldrh	r2, [r2, #0]
 80084e4:	b2d1      	uxtb	r1, r2
 80084e6:	4a07      	ldr	r2, [pc, #28]	@ (8008504 <Create_Message+0x9c>)
 80084e8:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80084ea:	197b      	adds	r3, r7, r5
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	3302      	adds	r3, #2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	4b04      	ldr	r3, [pc, #16]	@ (8008504 <Create_Message+0x9c>)
 80084f4:	0011      	movs	r1, r2
 80084f6:	0018      	movs	r0, r3
 80084f8:	f019 fe2a 	bl	8022150 <CDC_Transmit_FS>
}
 80084fc:	46c0      	nop			@ (mov r8, r8)
 80084fe:	46bd      	mov	sp, r7
 8008500:	b005      	add	sp, #20
 8008502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008504:	200008b8 	.word	0x200008b8
 8008508:	200008bb 	.word	0x200008bb

0800850c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	000a      	movs	r2, r1
 8008516:	1cbb      	adds	r3, r7, #2
 8008518:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800851a:	2316      	movs	r3, #22
 800851c:	18fb      	adds	r3, r7, r3
 800851e:	2200      	movs	r2, #0
 8008520:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8008522:	2300      	movs	r3, #0
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	e02e      	b.n	8008586 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	18d3      	adds	r3, r2, r3
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	0019      	movs	r1, r3
 8008532:	2216      	movs	r2, #22
 8008534:	18bb      	adds	r3, r7, r2
 8008536:	18ba      	adds	r2, r7, r2
 8008538:	8812      	ldrh	r2, [r2, #0]
 800853a:	404a      	eors	r2, r1
 800853c:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	e01a      	b.n	800857a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008544:	2116      	movs	r1, #22
 8008546:	187b      	adds	r3, r7, r1
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	2201      	movs	r2, #1
 800854c:	4013      	ands	r3, r2
 800854e:	d00b      	beq.n	8008568 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008550:	187b      	adds	r3, r7, r1
 8008552:	187a      	adds	r2, r7, r1
 8008554:	8812      	ldrh	r2, [r2, #0]
 8008556:	0852      	lsrs	r2, r2, #1
 8008558:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800855a:	187b      	adds	r3, r7, r1
 800855c:	187a      	adds	r2, r7, r1
 800855e:	8812      	ldrh	r2, [r2, #0]
 8008560:	490f      	ldr	r1, [pc, #60]	@ (80085a0 <CRC16_ARC+0x94>)
 8008562:	404a      	eors	r2, r1
 8008564:	801a      	strh	r2, [r3, #0]
 8008566:	e005      	b.n	8008574 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008568:	2216      	movs	r2, #22
 800856a:	18bb      	adds	r3, r7, r2
 800856c:	18ba      	adds	r2, r7, r2
 800856e:	8812      	ldrh	r2, [r2, #0]
 8008570:	0852      	lsrs	r2, r2, #1
 8008572:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3301      	adds	r3, #1
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b07      	cmp	r3, #7
 800857e:	dde1      	ble.n	8008544 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	3301      	adds	r3, #1
 8008584:	613b      	str	r3, [r7, #16]
 8008586:	1cbb      	adds	r3, r7, #2
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	429a      	cmp	r2, r3
 800858e:	dbcb      	blt.n	8008528 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008590:	2316      	movs	r3, #22
 8008592:	18fb      	adds	r3, r7, r3
 8008594:	881b      	ldrh	r3, [r3, #0]
}
 8008596:	0018      	movs	r0, r3
 8008598:	46bd      	mov	sp, r7
 800859a:	b006      	add	sp, #24
 800859c:	bd80      	pop	{r7, pc}
 800859e:	46c0      	nop			@ (mov r8, r8)
 80085a0:	ffffa001 	.word	0xffffa001

080085a4 <printf_USB>:

void printf_USB(const char* message, ...)
{
 80085a4:	b40f      	push	{r0, r1, r2, r3}
 80085a6:	b590      	push	{r4, r7, lr}
 80085a8:	b0a9      	sub	sp, #164	@ 0xa4
 80085aa:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 80085ac:	23ac      	movs	r3, #172	@ 0xac
 80085ae:	2108      	movs	r1, #8
 80085b0:	185b      	adds	r3, r3, r1
 80085b2:	19db      	adds	r3, r3, r7
 80085b4:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	23a8      	movs	r3, #168	@ 0xa8
 80085ba:	185b      	adds	r3, r3, r1
 80085bc:	19db      	adds	r3, r3, r7
 80085be:	6819      	ldr	r1, [r3, #0]
 80085c0:	2408      	movs	r4, #8
 80085c2:	193b      	adds	r3, r7, r4
 80085c4:	0018      	movs	r0, r3
 80085c6:	f01c ff99 	bl	80254fc <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 80085ca:	193b      	adds	r3, r7, r4
 80085cc:	0018      	movs	r0, r3
 80085ce:	f7f7 fdcd 	bl	800016c <strlen>
 80085d2:	0003      	movs	r3, r0
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	193b      	adds	r3, r7, r4
 80085d8:	0011      	movs	r1, r2
 80085da:	0018      	movs	r0, r3
 80085dc:	f019 fdb8 	bl	8022150 <CDC_Transmit_FS>
}
 80085e0:	46c0      	nop			@ (mov r8, r8)
 80085e2:	46bd      	mov	sp, r7
 80085e4:	b029      	add	sp, #164	@ 0xa4
 80085e6:	bc90      	pop	{r4, r7}
 80085e8:	bc08      	pop	{r3}
 80085ea:	b004      	add	sp, #16
 80085ec:	4718      	bx	r3

080085ee <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	000a      	movs	r2, r1
 80085f8:	1cfb      	adds	r3, r7, #3
 80085fa:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 80085fc:	1cfb      	adds	r3, r7, #3
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <PC_selectout+0x1e>
    printf_USB(msg);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	0018      	movs	r0, r3
 8008608:	f7ff ffcc 	bl	80085a4 <printf_USB>
  }
//  else {
    printf(msg);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	0018      	movs	r0, r3
 8008610:	f01c fe46 	bl	80252a0 <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 8008614:	200a      	movs	r0, #10
 8008616:	f00b fa91 	bl	8013b3c <HAL_Delay>
}
 800861a:	46c0      	nop			@ (mov r8, r8)
 800861c:	46bd      	mov	sp, r7
 800861e:	b002      	add	sp, #8
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <PC_show_Keys>:

void PC_show_Keys() {
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  static uint8_t UptimeConfig[IdSize];            // 25
#endif

  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008628:	f000 fe68 	bl	80092fc <Check_USB_PowerOn>
 800862c:	1e03      	subs	r3, r0, #0
 800862e:	d005      	beq.n	800863c <PC_show_Keys+0x18>
    usb_out = true;
 8008630:	4b01      	ldr	r3, [pc, #4]	@ (8008638 <PC_show_Keys+0x14>)
 8008632:	2201      	movs	r2, #1
 8008634:	701a      	strb	r2, [r3, #0]
 8008636:	e004      	b.n	8008642 <PC_show_Keys+0x1e>
 8008638:	200009bd 	.word	0x200009bd
  }
  else {
    usb_out = false;
 800863c:	4bfd      	ldr	r3, [pc, #1012]	@ (8008a34 <PC_show_Keys+0x410>)
 800863e:	2200      	movs	r2, #0
 8008640:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 8008642:	4afd      	ldr	r2, [pc, #1012]	@ (8008a38 <PC_show_Keys+0x414>)
 8008644:	4bfd      	ldr	r3, [pc, #1012]	@ (8008a3c <PC_show_Keys+0x418>)
 8008646:	0011      	movs	r1, r2
 8008648:	0018      	movs	r0, r3
 800864a:	f01c fe99 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800864e:	4bf9      	ldr	r3, [pc, #996]	@ (8008a34 <PC_show_Keys+0x410>)
 8008650:	781a      	ldrb	r2, [r3, #0]
 8008652:	4bfa      	ldr	r3, [pc, #1000]	@ (8008a3c <PC_show_Keys+0x418>)
 8008654:	0011      	movs	r1, r2
 8008656:	0018      	movs	r0, r3
 8008658:	f7ff ffc9 	bl	80085ee <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 800865c:	4bf8      	ldr	r3, [pc, #992]	@ (8008a40 <PC_show_Keys+0x41c>)
 800865e:	48f9      	ldr	r0, [pc, #996]	@ (8008a44 <PC_show_Keys+0x420>)
 8008660:	220c      	movs	r2, #12
 8008662:	0019      	movs	r1, r3
 8008664:	f003 f834 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008668:	4af5      	ldr	r2, [pc, #980]	@ (8008a40 <PC_show_Keys+0x41c>)
 800866a:	4bf7      	ldr	r3, [pc, #988]	@ (8008a48 <PC_show_Keys+0x424>)
 800866c:	0011      	movs	r1, r2
 800866e:	0018      	movs	r0, r3
 8008670:	f7fc fe20 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "Box id -----------------------------: %s\r\n", Buffer);
 8008674:	4af4      	ldr	r2, [pc, #976]	@ (8008a48 <PC_show_Keys+0x424>)
 8008676:	49f5      	ldr	r1, [pc, #980]	@ (8008a4c <PC_show_Keys+0x428>)
 8008678:	4bf0      	ldr	r3, [pc, #960]	@ (8008a3c <PC_show_Keys+0x418>)
 800867a:	0018      	movs	r0, r3
 800867c:	f01c fe80 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008680:	4bec      	ldr	r3, [pc, #944]	@ (8008a34 <PC_show_Keys+0x410>)
 8008682:	781a      	ldrb	r2, [r3, #0]
 8008684:	4bed      	ldr	r3, [pc, #948]	@ (8008a3c <PC_show_Keys+0x418>)
 8008686:	0011      	movs	r1, r2
 8008688:	0018      	movs	r0, r3
 800868a:	f7ff ffb0 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800868e:	4bf0      	ldr	r3, [pc, #960]	@ (8008a50 <PC_show_Keys+0x42c>)
 8008690:	48f0      	ldr	r0, [pc, #960]	@ (8008a54 <PC_show_Keys+0x430>)
 8008692:	220c      	movs	r2, #12
 8008694:	0019      	movs	r1, r3
 8008696:	f003 f81b 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 800869a:	4aed      	ldr	r2, [pc, #948]	@ (8008a50 <PC_show_Keys+0x42c>)
 800869c:	4bea      	ldr	r3, [pc, #936]	@ (8008a48 <PC_show_Keys+0x424>)
 800869e:	0011      	movs	r1, r2
 80086a0:	0018      	movs	r0, r3
 80086a2:	f7fc fe07 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "01 - Temperature sensor id: --------: %s\r\n", Buffer);
 80086a6:	4ae8      	ldr	r2, [pc, #928]	@ (8008a48 <PC_show_Keys+0x424>)
 80086a8:	49eb      	ldr	r1, [pc, #940]	@ (8008a58 <PC_show_Keys+0x434>)
 80086aa:	4be4      	ldr	r3, [pc, #912]	@ (8008a3c <PC_show_Keys+0x418>)
 80086ac:	0018      	movs	r0, r3
 80086ae:	f01c fe67 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086b2:	4be0      	ldr	r3, [pc, #896]	@ (8008a34 <PC_show_Keys+0x410>)
 80086b4:	781a      	ldrb	r2, [r3, #0]
 80086b6:	4be1      	ldr	r3, [pc, #900]	@ (8008a3c <PC_show_Keys+0x418>)
 80086b8:	0011      	movs	r1, r2
 80086ba:	0018      	movs	r0, r3
 80086bc:	f7ff ff97 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 80086c0:	4be6      	ldr	r3, [pc, #920]	@ (8008a5c <PC_show_Keys+0x438>)
 80086c2:	48e7      	ldr	r0, [pc, #924]	@ (8008a60 <PC_show_Keys+0x43c>)
 80086c4:	220c      	movs	r2, #12
 80086c6:	0019      	movs	r1, r3
 80086c8:	f003 f802 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 80086cc:	4ae3      	ldr	r2, [pc, #908]	@ (8008a5c <PC_show_Keys+0x438>)
 80086ce:	4bde      	ldr	r3, [pc, #888]	@ (8008a48 <PC_show_Keys+0x424>)
 80086d0:	0011      	movs	r1, r2
 80086d2:	0018      	movs	r0, r3
 80086d4:	f7fc fdee 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "02 - Humidity sensor id ------------: %s\r\n", Buffer);
 80086d8:	4adb      	ldr	r2, [pc, #876]	@ (8008a48 <PC_show_Keys+0x424>)
 80086da:	49e2      	ldr	r1, [pc, #904]	@ (8008a64 <PC_show_Keys+0x440>)
 80086dc:	4bd7      	ldr	r3, [pc, #860]	@ (8008a3c <PC_show_Keys+0x418>)
 80086de:	0018      	movs	r0, r3
 80086e0:	f01c fe4e 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086e4:	4bd3      	ldr	r3, [pc, #844]	@ (8008a34 <PC_show_Keys+0x410>)
 80086e6:	781a      	ldrb	r2, [r3, #0]
 80086e8:	4bd4      	ldr	r3, [pc, #848]	@ (8008a3c <PC_show_Keys+0x418>)
 80086ea:	0011      	movs	r1, r2
 80086ec:	0018      	movs	r0, r3
 80086ee:	f7ff ff7e 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 80086f2:	4bdd      	ldr	r3, [pc, #884]	@ (8008a68 <PC_show_Keys+0x444>)
 80086f4:	48dd      	ldr	r0, [pc, #884]	@ (8008a6c <PC_show_Keys+0x448>)
 80086f6:	220c      	movs	r2, #12
 80086f8:	0019      	movs	r1, r3
 80086fa:	f002 ffe9 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 80086fe:	4ada      	ldr	r2, [pc, #872]	@ (8008a68 <PC_show_Keys+0x444>)
 8008700:	4bd1      	ldr	r3, [pc, #836]	@ (8008a48 <PC_show_Keys+0x424>)
 8008702:	0011      	movs	r1, r2
 8008704:	0018      	movs	r0, r3
 8008706:	f7fc fdd5 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "03 - NOx sensor id -----------------: %s\r\n", Buffer);
 800870a:	4acf      	ldr	r2, [pc, #828]	@ (8008a48 <PC_show_Keys+0x424>)
 800870c:	49d8      	ldr	r1, [pc, #864]	@ (8008a70 <PC_show_Keys+0x44c>)
 800870e:	4bcb      	ldr	r3, [pc, #812]	@ (8008a3c <PC_show_Keys+0x418>)
 8008710:	0018      	movs	r0, r3
 8008712:	f01c fe35 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008716:	4bc7      	ldr	r3, [pc, #796]	@ (8008a34 <PC_show_Keys+0x410>)
 8008718:	781a      	ldrb	r2, [r3, #0]
 800871a:	4bc8      	ldr	r3, [pc, #800]	@ (8008a3c <PC_show_Keys+0x418>)
 800871c:	0011      	movs	r1, r2
 800871e:	0018      	movs	r0, r3
 8008720:	f7ff ff65 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008724:	4bd3      	ldr	r3, [pc, #844]	@ (8008a74 <PC_show_Keys+0x450>)
 8008726:	48d4      	ldr	r0, [pc, #848]	@ (8008a78 <PC_show_Keys+0x454>)
 8008728:	220c      	movs	r2, #12
 800872a:	0019      	movs	r1, r3
 800872c:	f002 ffd0 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008730:	4ad0      	ldr	r2, [pc, #832]	@ (8008a74 <PC_show_Keys+0x450>)
 8008732:	4bc5      	ldr	r3, [pc, #788]	@ (8008a48 <PC_show_Keys+0x424>)
 8008734:	0011      	movs	r1, r2
 8008736:	0018      	movs	r0, r3
 8008738:	f7fc fdbc 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "04 - VOC sensor id -----------------: %s\r\n", Buffer);
 800873c:	4ac2      	ldr	r2, [pc, #776]	@ (8008a48 <PC_show_Keys+0x424>)
 800873e:	49cf      	ldr	r1, [pc, #828]	@ (8008a7c <PC_show_Keys+0x458>)
 8008740:	4bbe      	ldr	r3, [pc, #760]	@ (8008a3c <PC_show_Keys+0x418>)
 8008742:	0018      	movs	r0, r3
 8008744:	f01c fe1c 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008748:	4bba      	ldr	r3, [pc, #744]	@ (8008a34 <PC_show_Keys+0x410>)
 800874a:	781a      	ldrb	r2, [r3, #0]
 800874c:	4bbb      	ldr	r3, [pc, #748]	@ (8008a3c <PC_show_Keys+0x418>)
 800874e:	0011      	movs	r1, r2
 8008750:	0018      	movs	r0, r3
 8008752:	f7ff ff4c 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8008756:	4bca      	ldr	r3, [pc, #808]	@ (8008a80 <PC_show_Keys+0x45c>)
 8008758:	48ca      	ldr	r0, [pc, #808]	@ (8008a84 <PC_show_Keys+0x460>)
 800875a:	220c      	movs	r2, #12
 800875c:	0019      	movs	r1, r3
 800875e:	f002 ffb7 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 8008762:	4ac7      	ldr	r2, [pc, #796]	@ (8008a80 <PC_show_Keys+0x45c>)
 8008764:	4bb8      	ldr	r3, [pc, #736]	@ (8008a48 <PC_show_Keys+0x424>)
 8008766:	0011      	movs	r1, r2
 8008768:	0018      	movs	r0, r3
 800876a:	f7fc fda3 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "05 is former dBa unused\r\n");
 800876e:	4ac6      	ldr	r2, [pc, #792]	@ (8008a88 <PC_show_Keys+0x464>)
 8008770:	4bb2      	ldr	r3, [pc, #712]	@ (8008a3c <PC_show_Keys+0x418>)
 8008772:	0011      	movs	r1, r2
 8008774:	0018      	movs	r0, r3
 8008776:	f01c fe03 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800877a:	4bae      	ldr	r3, [pc, #696]	@ (8008a34 <PC_show_Keys+0x410>)
 800877c:	781a      	ldrb	r2, [r3, #0]
 800877e:	4baf      	ldr	r3, [pc, #700]	@ (8008a3c <PC_show_Keys+0x418>)
 8008780:	0011      	movs	r1, r2
 8008782:	0018      	movs	r0, r3
 8008784:	f7ff ff33 	bl	80085ee <PC_selectout>
  sprintf(msg, "05 - Air pressure sensor id --------: %s\r\n", Buffer);
 8008788:	4aaf      	ldr	r2, [pc, #700]	@ (8008a48 <PC_show_Keys+0x424>)
 800878a:	49c0      	ldr	r1, [pc, #768]	@ (8008a8c <PC_show_Keys+0x468>)
 800878c:	4bab      	ldr	r3, [pc, #684]	@ (8008a3c <PC_show_Keys+0x418>)
 800878e:	0018      	movs	r0, r3
 8008790:	f01c fdf6 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008794:	4ba7      	ldr	r3, [pc, #668]	@ (8008a34 <PC_show_Keys+0x410>)
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	4ba8      	ldr	r3, [pc, #672]	@ (8008a3c <PC_show_Keys+0x418>)
 800879a:	0011      	movs	r1, r2
 800879c:	0018      	movs	r0, r3
 800879e:	f7ff ff26 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 80087a2:	4bbb      	ldr	r3, [pc, #748]	@ (8008a90 <PC_show_Keys+0x46c>)
 80087a4:	48bb      	ldr	r0, [pc, #748]	@ (8008a94 <PC_show_Keys+0x470>)
 80087a6:	220c      	movs	r2, #12
 80087a8:	0019      	movs	r1, r3
 80087aa:	f002 ff91 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 80087ae:	4ab8      	ldr	r2, [pc, #736]	@ (8008a90 <PC_show_Keys+0x46c>)
 80087b0:	4ba5      	ldr	r3, [pc, #660]	@ (8008a48 <PC_show_Keys+0x424>)
 80087b2:	0011      	movs	r1, r2
 80087b4:	0018      	movs	r0, r3
 80087b6:	f7fc fd7d 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "06 is former dBc\r\n");
 80087ba:	4ab7      	ldr	r2, [pc, #732]	@ (8008a98 <PC_show_Keys+0x474>)
 80087bc:	4b9f      	ldr	r3, [pc, #636]	@ (8008a3c <PC_show_Keys+0x418>)
 80087be:	0011      	movs	r1, r2
 80087c0:	0018      	movs	r0, r3
 80087c2:	f01c fddd 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087c6:	4b9b      	ldr	r3, [pc, #620]	@ (8008a34 <PC_show_Keys+0x410>)
 80087c8:	781a      	ldrb	r2, [r3, #0]
 80087ca:	4b9c      	ldr	r3, [pc, #624]	@ (8008a3c <PC_show_Keys+0x418>)
 80087cc:	0011      	movs	r1, r2
 80087ce:	0018      	movs	r0, r3
 80087d0:	f7ff ff0d 	bl	80085ee <PC_selectout>
  sprintf(msg, "06 - Sound dBA sensor id -----------: %s\r\n", Buffer);
 80087d4:	4a9c      	ldr	r2, [pc, #624]	@ (8008a48 <PC_show_Keys+0x424>)
 80087d6:	49b1      	ldr	r1, [pc, #708]	@ (8008a9c <PC_show_Keys+0x478>)
 80087d8:	4b98      	ldr	r3, [pc, #608]	@ (8008a3c <PC_show_Keys+0x418>)
 80087da:	0018      	movs	r0, r3
 80087dc:	f01c fdd0 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087e0:	4b94      	ldr	r3, [pc, #592]	@ (8008a34 <PC_show_Keys+0x410>)
 80087e2:	781a      	ldrb	r2, [r3, #0]
 80087e4:	4b95      	ldr	r3, [pc, #596]	@ (8008a3c <PC_show_Keys+0x418>)
 80087e6:	0011      	movs	r1, r2
 80087e8:	0018      	movs	r0, r3
 80087ea:	f7ff ff00 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 80087ee:	4bac      	ldr	r3, [pc, #688]	@ (8008aa0 <PC_show_Keys+0x47c>)
 80087f0:	48ac      	ldr	r0, [pc, #688]	@ (8008aa4 <PC_show_Keys+0x480>)
 80087f2:	220c      	movs	r2, #12
 80087f4:	0019      	movs	r1, r3
 80087f6:	f002 ff6b 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 80087fa:	4aa9      	ldr	r2, [pc, #676]	@ (8008aa0 <PC_show_Keys+0x47c>)
 80087fc:	4b92      	ldr	r3, [pc, #584]	@ (8008a48 <PC_show_Keys+0x424>)
 80087fe:	0011      	movs	r1, r2
 8008800:	0018      	movs	r0, r3
 8008802:	f7fc fd57 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "07 - PM2p5 sensor id ---------------: %s\r\n", Buffer);
 8008806:	4a90      	ldr	r2, [pc, #576]	@ (8008a48 <PC_show_Keys+0x424>)
 8008808:	49a7      	ldr	r1, [pc, #668]	@ (8008aa8 <PC_show_Keys+0x484>)
 800880a:	4b8c      	ldr	r3, [pc, #560]	@ (8008a3c <PC_show_Keys+0x418>)
 800880c:	0018      	movs	r0, r3
 800880e:	f01c fdb7 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008812:	4b88      	ldr	r3, [pc, #544]	@ (8008a34 <PC_show_Keys+0x410>)
 8008814:	781a      	ldrb	r2, [r3, #0]
 8008816:	4b89      	ldr	r3, [pc, #548]	@ (8008a3c <PC_show_Keys+0x418>)
 8008818:	0011      	movs	r1, r2
 800881a:	0018      	movs	r0, r3
 800881c:	f7ff fee7 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008820:	4ba2      	ldr	r3, [pc, #648]	@ (8008aac <PC_show_Keys+0x488>)
 8008822:	48a3      	ldr	r0, [pc, #652]	@ (8008ab0 <PC_show_Keys+0x48c>)
 8008824:	220c      	movs	r2, #12
 8008826:	0019      	movs	r1, r3
 8008828:	f002 ff52 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 800882c:	4a9f      	ldr	r2, [pc, #636]	@ (8008aac <PC_show_Keys+0x488>)
 800882e:	4b86      	ldr	r3, [pc, #536]	@ (8008a48 <PC_show_Keys+0x424>)
 8008830:	0011      	movs	r1, r2
 8008832:	0018      	movs	r0, r3
 8008834:	f7fc fd3e 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "08 - PM10 sensor id ----------------: %s\r\n", Buffer);
 8008838:	4a83      	ldr	r2, [pc, #524]	@ (8008a48 <PC_show_Keys+0x424>)
 800883a:	499e      	ldr	r1, [pc, #632]	@ (8008ab4 <PC_show_Keys+0x490>)
 800883c:	4b7f      	ldr	r3, [pc, #508]	@ (8008a3c <PC_show_Keys+0x418>)
 800883e:	0018      	movs	r0, r3
 8008840:	f01c fd9e 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008844:	4b7b      	ldr	r3, [pc, #492]	@ (8008a34 <PC_show_Keys+0x410>)
 8008846:	781a      	ldrb	r2, [r3, #0]
 8008848:	4b7c      	ldr	r3, [pc, #496]	@ (8008a3c <PC_show_Keys+0x418>)
 800884a:	0011      	movs	r1, r2
 800884c:	0018      	movs	r0, r3
 800884e:	f7ff fece 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008852:	4b99      	ldr	r3, [pc, #612]	@ (8008ab8 <PC_show_Keys+0x494>)
 8008854:	4899      	ldr	r0, [pc, #612]	@ (8008abc <PC_show_Keys+0x498>)
 8008856:	220c      	movs	r2, #12
 8008858:	0019      	movs	r1, r3
 800885a:	f002 ff39 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 800885e:	4a96      	ldr	r2, [pc, #600]	@ (8008ab8 <PC_show_Keys+0x494>)
 8008860:	4b79      	ldr	r3, [pc, #484]	@ (8008a48 <PC_show_Keys+0x424>)
 8008862:	0011      	movs	r1, r2
 8008864:	0018      	movs	r0, r3
 8008866:	f7fc fd25 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "09 - Battery voltage sensor id -----: %s\r\n", Buffer);
 800886a:	4a77      	ldr	r2, [pc, #476]	@ (8008a48 <PC_show_Keys+0x424>)
 800886c:	4994      	ldr	r1, [pc, #592]	@ (8008ac0 <PC_show_Keys+0x49c>)
 800886e:	4b73      	ldr	r3, [pc, #460]	@ (8008a3c <PC_show_Keys+0x418>)
 8008870:	0018      	movs	r0, r3
 8008872:	f01c fd85 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008876:	4b6f      	ldr	r3, [pc, #444]	@ (8008a34 <PC_show_Keys+0x410>)
 8008878:	781a      	ldrb	r2, [r3, #0]
 800887a:	4b70      	ldr	r3, [pc, #448]	@ (8008a3c <PC_show_Keys+0x418>)
 800887c:	0011      	movs	r1, r2
 800887e:	0018      	movs	r0, r3
 8008880:	f7ff feb5 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008884:	4b8f      	ldr	r3, [pc, #572]	@ (8008ac4 <PC_show_Keys+0x4a0>)
 8008886:	4890      	ldr	r0, [pc, #576]	@ (8008ac8 <PC_show_Keys+0x4a4>)
 8008888:	220c      	movs	r2, #12
 800888a:	0019      	movs	r1, r3
 800888c:	f002 ff20 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008890:	4a8c      	ldr	r2, [pc, #560]	@ (8008ac4 <PC_show_Keys+0x4a0>)
 8008892:	4b6d      	ldr	r3, [pc, #436]	@ (8008a48 <PC_show_Keys+0x424>)
 8008894:	0011      	movs	r1, r2
 8008896:	0018      	movs	r0, r3
 8008898:	f7fc fd0c 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "10 - Solar voltage sensor id -------: %s\r\n", Buffer);
 800889c:	4a6a      	ldr	r2, [pc, #424]	@ (8008a48 <PC_show_Keys+0x424>)
 800889e:	498b      	ldr	r1, [pc, #556]	@ (8008acc <PC_show_Keys+0x4a8>)
 80088a0:	4b66      	ldr	r3, [pc, #408]	@ (8008a3c <PC_show_Keys+0x418>)
 80088a2:	0018      	movs	r0, r3
 80088a4:	f01c fd6c 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088a8:	4b62      	ldr	r3, [pc, #392]	@ (8008a34 <PC_show_Keys+0x410>)
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	4b63      	ldr	r3, [pc, #396]	@ (8008a3c <PC_show_Keys+0x418>)
 80088ae:	0011      	movs	r1, r2
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7ff fe9c 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 80088b6:	4b86      	ldr	r3, [pc, #536]	@ (8008ad0 <PC_show_Keys+0x4ac>)
 80088b8:	4886      	ldr	r0, [pc, #536]	@ (8008ad4 <PC_show_Keys+0x4b0>)
 80088ba:	220c      	movs	r2, #12
 80088bc:	0019      	movs	r1, r3
 80088be:	f002 ff07 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 80088c2:	4a83      	ldr	r2, [pc, #524]	@ (8008ad0 <PC_show_Keys+0x4ac>)
 80088c4:	4b60      	ldr	r3, [pc, #384]	@ (8008a48 <PC_show_Keys+0x424>)
 80088c6:	0011      	movs	r1, r2
 80088c8:	0018      	movs	r0, r3
 80088ca:	f7fc fcf3 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "11 - Charger status (not used) -----: %s\r\n", Buffer);
 80088ce:	4a5e      	ldr	r2, [pc, #376]	@ (8008a48 <PC_show_Keys+0x424>)
 80088d0:	4981      	ldr	r1, [pc, #516]	@ (8008ad8 <PC_show_Keys+0x4b4>)
 80088d2:	4b5a      	ldr	r3, [pc, #360]	@ (8008a3c <PC_show_Keys+0x418>)
 80088d4:	0018      	movs	r0, r3
 80088d6:	f01c fd53 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088da:	4b56      	ldr	r3, [pc, #344]	@ (8008a34 <PC_show_Keys+0x410>)
 80088dc:	781a      	ldrb	r2, [r3, #0]
 80088de:	4b57      	ldr	r3, [pc, #348]	@ (8008a3c <PC_show_Keys+0x418>)
 80088e0:	0011      	movs	r1, r2
 80088e2:	0018      	movs	r0, r3
 80088e4:	f7ff fe83 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80088e8:	4b7c      	ldr	r3, [pc, #496]	@ (8008adc <PC_show_Keys+0x4b8>)
 80088ea:	487d      	ldr	r0, [pc, #500]	@ (8008ae0 <PC_show_Keys+0x4bc>)
 80088ec:	2220      	movs	r2, #32
 80088ee:	0019      	movs	r1, r3
 80088f0:	f002 feee 	bl	800b6d0 <ReadUint8ArrayEEprom>
  sprintf(msg, "12 - Stored name -------------------: ");
 80088f4:	4a7b      	ldr	r2, [pc, #492]	@ (8008ae4 <PC_show_Keys+0x4c0>)
 80088f6:	4b51      	ldr	r3, [pc, #324]	@ (8008a3c <PC_show_Keys+0x418>)
 80088f8:	0011      	movs	r1, r2
 80088fa:	0018      	movs	r0, r3
 80088fc:	f01c fd40 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008900:	4b4c      	ldr	r3, [pc, #304]	@ (8008a34 <PC_show_Keys+0x410>)
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	4b4d      	ldr	r3, [pc, #308]	@ (8008a3c <PC_show_Keys+0x418>)
 8008906:	0011      	movs	r1, r2
 8008908:	0018      	movs	r0, r3
 800890a:	f7ff fe70 	bl	80085ee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 800890e:	4a73      	ldr	r2, [pc, #460]	@ (8008adc <PC_show_Keys+0x4b8>)
 8008910:	4975      	ldr	r1, [pc, #468]	@ (8008ae8 <PC_show_Keys+0x4c4>)
 8008912:	4b4a      	ldr	r3, [pc, #296]	@ (8008a3c <PC_show_Keys+0x418>)
 8008914:	0018      	movs	r0, r3
 8008916:	f01c fd33 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800891a:	4b46      	ldr	r3, [pc, #280]	@ (8008a34 <PC_show_Keys+0x410>)
 800891c:	781a      	ldrb	r2, [r3, #0]
 800891e:	4b47      	ldr	r3, [pc, #284]	@ (8008a3c <PC_show_Keys+0x418>)
 8008920:	0011      	movs	r1, r2
 8008922:	0018      	movs	r0, r3
 8008924:	f7ff fe63 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 8008928:	4b70      	ldr	r3, [pc, #448]	@ (8008aec <PC_show_Keys+0x4c8>)
 800892a:	4871      	ldr	r0, [pc, #452]	@ (8008af0 <PC_show_Keys+0x4cc>)
 800892c:	220c      	movs	r2, #12
 800892e:	0019      	movs	r1, r3
 8008930:	f002 fece 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 8008934:	4a6d      	ldr	r2, [pc, #436]	@ (8008aec <PC_show_Keys+0x4c8>)
 8008936:	4b44      	ldr	r3, [pc, #272]	@ (8008a48 <PC_show_Keys+0x424>)
 8008938:	0011      	movs	r1, r2
 800893a:	0018      	movs	r0, r3
 800893c:	f7fc fcba 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "13 - PM1p0 sensor id ---------------: %s\r\n", Buffer);
 8008940:	4a41      	ldr	r2, [pc, #260]	@ (8008a48 <PC_show_Keys+0x424>)
 8008942:	496c      	ldr	r1, [pc, #432]	@ (8008af4 <PC_show_Keys+0x4d0>)
 8008944:	4b3d      	ldr	r3, [pc, #244]	@ (8008a3c <PC_show_Keys+0x418>)
 8008946:	0018      	movs	r0, r3
 8008948:	f01c fd1a 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800894c:	4b39      	ldr	r3, [pc, #228]	@ (8008a34 <PC_show_Keys+0x410>)
 800894e:	781a      	ldrb	r2, [r3, #0]
 8008950:	4b3a      	ldr	r3, [pc, #232]	@ (8008a3c <PC_show_Keys+0x418>)
 8008952:	0011      	movs	r1, r2
 8008954:	0018      	movs	r0, r3
 8008956:	f7ff fe4a 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 800895a:	4b67      	ldr	r3, [pc, #412]	@ (8008af8 <PC_show_Keys+0x4d4>)
 800895c:	4867      	ldr	r0, [pc, #412]	@ (8008afc <PC_show_Keys+0x4d8>)
 800895e:	220c      	movs	r2, #12
 8008960:	0019      	movs	r1, r3
 8008962:	f002 feb5 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 8008966:	4a64      	ldr	r2, [pc, #400]	@ (8008af8 <PC_show_Keys+0x4d4>)
 8008968:	4b37      	ldr	r3, [pc, #220]	@ (8008a48 <PC_show_Keys+0x424>)
 800896a:	0011      	movs	r1, r2
 800896c:	0018      	movs	r0, r3
 800896e:	f7fc fca1 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "14 - PM4p0 sensor id ---------------: %s\r\n", Buffer);
 8008972:	4a35      	ldr	r2, [pc, #212]	@ (8008a48 <PC_show_Keys+0x424>)
 8008974:	4962      	ldr	r1, [pc, #392]	@ (8008b00 <PC_show_Keys+0x4dc>)
 8008976:	4b31      	ldr	r3, [pc, #196]	@ (8008a3c <PC_show_Keys+0x418>)
 8008978:	0018      	movs	r0, r3
 800897a:	f01c fd01 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800897e:	4b2d      	ldr	r3, [pc, #180]	@ (8008a34 <PC_show_Keys+0x410>)
 8008980:	781a      	ldrb	r2, [r3, #0]
 8008982:	4b2e      	ldr	r3, [pc, #184]	@ (8008a3c <PC_show_Keys+0x418>)
 8008984:	0011      	movs	r1, r2
 8008986:	0018      	movs	r0, r3
 8008988:	f7ff fe31 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 800898c:	4b5d      	ldr	r3, [pc, #372]	@ (8008b04 <PC_show_Keys+0x4e0>)
 800898e:	485e      	ldr	r0, [pc, #376]	@ (8008b08 <PC_show_Keys+0x4e4>)
 8008990:	220c      	movs	r2, #12
 8008992:	0019      	movs	r1, r3
 8008994:	f002 fe9c 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008998:	4a5a      	ldr	r2, [pc, #360]	@ (8008b04 <PC_show_Keys+0x4e0>)
 800899a:	4b2b      	ldr	r3, [pc, #172]	@ (8008a48 <PC_show_Keys+0x424>)
 800899c:	0011      	movs	r1, r2
 800899e:	0018      	movs	r0, r3
 80089a0:	f7fc fc88 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "15 - AHT2x Temperature sensor id ---: %s\r\n", Buffer);
 80089a4:	4a28      	ldr	r2, [pc, #160]	@ (8008a48 <PC_show_Keys+0x424>)
 80089a6:	4959      	ldr	r1, [pc, #356]	@ (8008b0c <PC_show_Keys+0x4e8>)
 80089a8:	4b24      	ldr	r3, [pc, #144]	@ (8008a3c <PC_show_Keys+0x418>)
 80089aa:	0018      	movs	r0, r3
 80089ac:	f01c fce8 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80089b0:	4b20      	ldr	r3, [pc, #128]	@ (8008a34 <PC_show_Keys+0x410>)
 80089b2:	781a      	ldrb	r2, [r3, #0]
 80089b4:	4b21      	ldr	r3, [pc, #132]	@ (8008a3c <PC_show_Keys+0x418>)
 80089b6:	0011      	movs	r1, r2
 80089b8:	0018      	movs	r0, r3
 80089ba:	f7ff fe18 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 80089be:	4b54      	ldr	r3, [pc, #336]	@ (8008b10 <PC_show_Keys+0x4ec>)
 80089c0:	4854      	ldr	r0, [pc, #336]	@ (8008b14 <PC_show_Keys+0x4f0>)
 80089c2:	220c      	movs	r2, #12
 80089c4:	0019      	movs	r1, r3
 80089c6:	f002 fe83 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 80089ca:	4a51      	ldr	r2, [pc, #324]	@ (8008b10 <PC_show_Keys+0x4ec>)
 80089cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008a48 <PC_show_Keys+0x424>)
 80089ce:	0011      	movs	r1, r2
 80089d0:	0018      	movs	r0, r3
 80089d2:	f7fc fc6f 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "16 - AHT2x Humidity sensor id ------: %s\r\n", Buffer);
 80089d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a48 <PC_show_Keys+0x424>)
 80089d8:	494f      	ldr	r1, [pc, #316]	@ (8008b18 <PC_show_Keys+0x4f4>)
 80089da:	4b18      	ldr	r3, [pc, #96]	@ (8008a3c <PC_show_Keys+0x418>)
 80089dc:	0018      	movs	r0, r3
 80089de:	f01c fccf 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80089e2:	4b14      	ldr	r3, [pc, #80]	@ (8008a34 <PC_show_Keys+0x410>)
 80089e4:	781a      	ldrb	r2, [r3, #0]
 80089e6:	4b15      	ldr	r3, [pc, #84]	@ (8008a3c <PC_show_Keys+0x418>)
 80089e8:	0011      	movs	r1, r2
 80089ea:	0018      	movs	r0, r3
 80089ec:	f7ff fdff 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 80089f0:	4b4a      	ldr	r3, [pc, #296]	@ (8008b1c <PC_show_Keys+0x4f8>)
 80089f2:	484b      	ldr	r0, [pc, #300]	@ (8008b20 <PC_show_Keys+0x4fc>)
 80089f4:	220c      	movs	r2, #12
 80089f6:	0019      	movs	r1, r3
 80089f8:	f002 fe6a 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 80089fc:	4a47      	ldr	r2, [pc, #284]	@ (8008b1c <PC_show_Keys+0x4f8>)
 80089fe:	4b12      	ldr	r3, [pc, #72]	@ (8008a48 <PC_show_Keys+0x424>)
 8008a00:	0011      	movs	r1, r2
 8008a02:	0018      	movs	r0, r3
 8008a04:	f7fc fc56 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "17 - BMP280 Temperature sensor id --: %s\r\n", Buffer);
 8008a08:	4a0f      	ldr	r2, [pc, #60]	@ (8008a48 <PC_show_Keys+0x424>)
 8008a0a:	4946      	ldr	r1, [pc, #280]	@ (8008b24 <PC_show_Keys+0x500>)
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a3c <PC_show_Keys+0x418>)
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f01c fcb6 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008a14:	4b07      	ldr	r3, [pc, #28]	@ (8008a34 <PC_show_Keys+0x410>)
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	4b08      	ldr	r3, [pc, #32]	@ (8008a3c <PC_show_Keys+0x418>)
 8008a1a:	0011      	movs	r1, r2
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f7ff fde6 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008a22:	4b41      	ldr	r3, [pc, #260]	@ (8008b28 <PC_show_Keys+0x504>)
 8008a24:	4841      	ldr	r0, [pc, #260]	@ (8008b2c <PC_show_Keys+0x508>)
 8008a26:	220c      	movs	r2, #12
 8008a28:	0019      	movs	r1, r3
 8008a2a:	f002 fe51 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8008b28 <PC_show_Keys+0x504>)
 8008a30:	e07e      	b.n	8008b30 <PC_show_Keys+0x50c>
 8008a32:	46c0      	nop			@ (mov r8, r8)
 8008a34:	200009bd 	.word	0x200009bd
 8008a38:	0802ad04 	.word	0x0802ad04
 8008a3c:	200009c0 	.word	0x200009c0
 8008a40:	20000a08 	.word	0x20000a08
 8008a44:	08080000 	.word	0x08080000
 8008a48:	20000a14 	.word	0x20000a14
 8008a4c:	0802ad20 	.word	0x0802ad20
 8008a50:	20000a30 	.word	0x20000a30
 8008a54:	0808000c 	.word	0x0808000c
 8008a58:	0802ad4c 	.word	0x0802ad4c
 8008a5c:	20000a3c 	.word	0x20000a3c
 8008a60:	08080018 	.word	0x08080018
 8008a64:	0802ad78 	.word	0x0802ad78
 8008a68:	20000a48 	.word	0x20000a48
 8008a6c:	08080024 	.word	0x08080024
 8008a70:	0802ada4 	.word	0x0802ada4
 8008a74:	20000a54 	.word	0x20000a54
 8008a78:	08080030 	.word	0x08080030
 8008a7c:	0802add0 	.word	0x0802add0
 8008a80:	20000a60 	.word	0x20000a60
 8008a84:	0808003c 	.word	0x0808003c
 8008a88:	0802adfc 	.word	0x0802adfc
 8008a8c:	0802ae18 	.word	0x0802ae18
 8008a90:	20000a6c 	.word	0x20000a6c
 8008a94:	08080048 	.word	0x08080048
 8008a98:	0802ae44 	.word	0x0802ae44
 8008a9c:	0802ae58 	.word	0x0802ae58
 8008aa0:	20000a78 	.word	0x20000a78
 8008aa4:	08080054 	.word	0x08080054
 8008aa8:	0802ae84 	.word	0x0802ae84
 8008aac:	20000a84 	.word	0x20000a84
 8008ab0:	08080060 	.word	0x08080060
 8008ab4:	0802aeb0 	.word	0x0802aeb0
 8008ab8:	20000a90 	.word	0x20000a90
 8008abc:	0808006c 	.word	0x0808006c
 8008ac0:	0802aedc 	.word	0x0802aedc
 8008ac4:	20000a9c 	.word	0x20000a9c
 8008ac8:	08080078 	.word	0x08080078
 8008acc:	0802af08 	.word	0x0802af08
 8008ad0:	20000aa8 	.word	0x20000aa8
 8008ad4:	08080084 	.word	0x08080084
 8008ad8:	0802af34 	.word	0x0802af34
 8008adc:	20000ab4 	.word	0x20000ab4
 8008ae0:	08080090 	.word	0x08080090
 8008ae4:	0802af60 	.word	0x0802af60
 8008ae8:	0802af88 	.word	0x0802af88
 8008aec:	20000ad4 	.word	0x20000ad4
 8008af0:	080800b0 	.word	0x080800b0
 8008af4:	0802af90 	.word	0x0802af90
 8008af8:	20000ae0 	.word	0x20000ae0
 8008afc:	080800bc 	.word	0x080800bc
 8008b00:	0802afbc 	.word	0x0802afbc
 8008b04:	20000aec 	.word	0x20000aec
 8008b08:	080800c8 	.word	0x080800c8
 8008b0c:	0802afe8 	.word	0x0802afe8
 8008b10:	20000af8 	.word	0x20000af8
 8008b14:	080800d4 	.word	0x080800d4
 8008b18:	0802b014 	.word	0x0802b014
 8008b1c:	20000b04 	.word	0x20000b04
 8008b20:	080800e0 	.word	0x080800e0
 8008b24:	0802b040 	.word	0x0802b040
 8008b28:	20000b10 	.word	0x20000b10
 8008b2c:	080800ec 	.word	0x080800ec
 8008b30:	4b5d      	ldr	r3, [pc, #372]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008b32:	0011      	movs	r1, r2
 8008b34:	0018      	movs	r0, r3
 8008b36:	f7fc fbbd 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "18 - ENS160 AQI sensor id ----------: %s\r\n", Buffer);
 8008b3a:	4a5b      	ldr	r2, [pc, #364]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008b3c:	495b      	ldr	r1, [pc, #364]	@ (8008cac <PC_show_Keys+0x688>)
 8008b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008b40:	0018      	movs	r0, r3
 8008b42:	f01c fc1d 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b46:	4b5b      	ldr	r3, [pc, #364]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008b48:	781a      	ldrb	r2, [r3, #0]
 8008b4a:	4b59      	ldr	r3, [pc, #356]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008b4c:	0011      	movs	r1, r2
 8008b4e:	0018      	movs	r0, r3
 8008b50:	f7ff fd4d 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8008b54:	4b58      	ldr	r3, [pc, #352]	@ (8008cb8 <PC_show_Keys+0x694>)
 8008b56:	4859      	ldr	r0, [pc, #356]	@ (8008cbc <PC_show_Keys+0x698>)
 8008b58:	220c      	movs	r2, #12
 8008b5a:	0019      	movs	r1, r3
 8008b5c:	f002 fdb8 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8008b60:	4a55      	ldr	r2, [pc, #340]	@ (8008cb8 <PC_show_Keys+0x694>)
 8008b62:	4b51      	ldr	r3, [pc, #324]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008b64:	0011      	movs	r1, r2
 8008b66:	0018      	movs	r0, r3
 8008b68:	f7fc fba4 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "19 - ENS160 TVOC sensor id ---------: %s\r\n", Buffer);
 8008b6c:	4a4e      	ldr	r2, [pc, #312]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008b6e:	4954      	ldr	r1, [pc, #336]	@ (8008cc0 <PC_show_Keys+0x69c>)
 8008b70:	4b4f      	ldr	r3, [pc, #316]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008b72:	0018      	movs	r0, r3
 8008b74:	f01c fc04 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b78:	4b4e      	ldr	r3, [pc, #312]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008b7a:	781a      	ldrb	r2, [r3, #0]
 8008b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008b7e:	0011      	movs	r1, r2
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7ff fd34 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8008b86:	4b4f      	ldr	r3, [pc, #316]	@ (8008cc4 <PC_show_Keys+0x6a0>)
 8008b88:	484f      	ldr	r0, [pc, #316]	@ (8008cc8 <PC_show_Keys+0x6a4>)
 8008b8a:	220c      	movs	r2, #12
 8008b8c:	0019      	movs	r1, r3
 8008b8e:	f002 fd9f 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8008b92:	4a4c      	ldr	r2, [pc, #304]	@ (8008cc4 <PC_show_Keys+0x6a0>)
 8008b94:	4b44      	ldr	r3, [pc, #272]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008b96:	0011      	movs	r1, r2
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f7fc fb8b 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "20 - ENS160 eCO2 sensor id ---------: %s\r\n", Buffer);
 8008b9e:	4a42      	ldr	r2, [pc, #264]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008ba0:	494a      	ldr	r1, [pc, #296]	@ (8008ccc <PC_show_Keys+0x6a8>)
 8008ba2:	4b43      	ldr	r3, [pc, #268]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f01c fbeb 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008baa:	4b42      	ldr	r3, [pc, #264]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008bac:	781a      	ldrb	r2, [r3, #0]
 8008bae:	4b40      	ldr	r3, [pc, #256]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008bb0:	0011      	movs	r1, r2
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	f7ff fd1b 	bl	80085ee <PC_selectout>

  sprintf(msg, "21 & 22 - Are interactive not supported\r\n");
 8008bb8:	4a45      	ldr	r2, [pc, #276]	@ (8008cd0 <PC_show_Keys+0x6ac>)
 8008bba:	4b3d      	ldr	r3, [pc, #244]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008bbc:	0011      	movs	r1, r2
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f01c fbde 	bl	8025380 <siprintf>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8008bc4:	4b43      	ldr	r3, [pc, #268]	@ (8008cd4 <PC_show_Keys+0x6b0>)
 8008bc6:	4844      	ldr	r0, [pc, #272]	@ (8008cd8 <PC_show_Keys+0x6b4>)
 8008bc8:	220c      	movs	r2, #12
 8008bca:	0019      	movs	r1, r3
 8008bcc:	f002 fd80 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 8008bd0:	4a40      	ldr	r2, [pc, #256]	@ (8008cd4 <PC_show_Keys+0x6b0>)
 8008bd2:	4b35      	ldr	r3, [pc, #212]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008bd4:	0011      	movs	r1, r2
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	f7fc fb6c 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "23 - SEN54/55 Temperature sensor id : %s\r\n", Buffer);
 8008bdc:	4a32      	ldr	r2, [pc, #200]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008bde:	493f      	ldr	r1, [pc, #252]	@ (8008cdc <PC_show_Keys+0x6b8>)
 8008be0:	4b33      	ldr	r3, [pc, #204]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008be2:	0018      	movs	r0, r3
 8008be4:	f01c fbcc 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008be8:	4b32      	ldr	r3, [pc, #200]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008bea:	781a      	ldrb	r2, [r3, #0]
 8008bec:	4b30      	ldr	r3, [pc, #192]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008bee:	0011      	movs	r1, r2
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f7ff fcfc 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8008bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8008ce0 <PC_show_Keys+0x6bc>)
 8008bf8:	483a      	ldr	r0, [pc, #232]	@ (8008ce4 <PC_show_Keys+0x6c0>)
 8008bfa:	220c      	movs	r2, #12
 8008bfc:	0019      	movs	r1, r3
 8008bfe:	f002 fd67 	bl	800b6d0 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 8008c02:	4a37      	ldr	r2, [pc, #220]	@ (8008ce0 <PC_show_Keys+0x6bc>)
 8008c04:	4b28      	ldr	r3, [pc, #160]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008c06:	0011      	movs	r1, r2
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f7fc fb53 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "24 - SEN54/55 Humidity sensor id ---: %s\r\n", Buffer);
 8008c0e:	4a26      	ldr	r2, [pc, #152]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008c10:	4935      	ldr	r1, [pc, #212]	@ (8008ce8 <PC_show_Keys+0x6c4>)
 8008c12:	4b27      	ldr	r3, [pc, #156]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008c14:	0018      	movs	r0, r3
 8008c16:	f01c fbb3 	bl	8025380 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c1a:	4b26      	ldr	r3, [pc, #152]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008c1c:	781a      	ldrb	r2, [r3, #0]
 8008c1e:	4b24      	ldr	r3, [pc, #144]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008c20:	0011      	movs	r1, r2
 8008c22:	0018      	movs	r0, r3
 8008c24:	f7ff fce3 	bl	80085ee <PC_selectout>
  uint8ArrayToString(Buffer, UptimeConfig);
  sprintf(msg, "25 - Uptime sensor id --------------: %s\r\n", Buffer);
  PC_selectout(&msg[0], usb_out);
#endif

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8008c28:	4b30      	ldr	r3, [pc, #192]	@ (8008cec <PC_show_Keys+0x6c8>)
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f7ff fcba 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c30:	200a      	movs	r0, #10
 8008c32:	f00a ff83 	bl	8013b3c <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 8008c36:	4b2e      	ldr	r3, [pc, #184]	@ (8008cf0 <PC_show_Keys+0x6cc>)
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f7ff fcb3 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c3e:	200a      	movs	r0, #10
 8008c40:	f00a ff7c 	bl	8013b3c <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 8008c44:	4b2b      	ldr	r3, [pc, #172]	@ (8008cf4 <PC_show_Keys+0x6d0>)
 8008c46:	0018      	movs	r0, r3
 8008c48:	f7ff fcac 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c4c:	200a      	movs	r0, #10
 8008c4e:	f00a ff75 	bl	8013b3c <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8008c52:	4b29      	ldr	r3, [pc, #164]	@ (8008cf8 <PC_show_Keys+0x6d4>)
 8008c54:	0018      	movs	r0, r3
 8008c56:	f7ff fca5 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c5a:	200a      	movs	r0, #10
 8008c5c:	f00a ff6e 	bl	8013b3c <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 8008c60:	4b26      	ldr	r3, [pc, #152]	@ (8008cfc <PC_show_Keys+0x6d8>)
 8008c62:	0018      	movs	r0, r3
 8008c64:	f7ff fc9e 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c68:	200a      	movs	r0, #10
 8008c6a:	f00a ff67 	bl	8013b3c <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 8008c6e:	4b24      	ldr	r3, [pc, #144]	@ (8008d00 <PC_show_Keys+0x6dc>)
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7ff fc97 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c76:	200a      	movs	r0, #10
 8008c78:	f00a ff60 	bl	8013b3c <HAL_Delay>
  printf_USB(" $05,67af09374cdef30007b35055\r\n");
 8008c7c:	4b21      	ldr	r3, [pc, #132]	@ (8008d04 <PC_show_Keys+0x6e0>)
 8008c7e:	0018      	movs	r0, r3
 8008c80:	f7ff fc90 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c84:	200a      	movs	r0, #10
 8008c86:	f00a ff59 	bl	8013b3c <HAL_Delay>
  if (!usb_out) {
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	4053      	eors	r3, r2
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <PC_show_Keys+0x67c>
    printf("A key can only be changed by USB input or the by configuration programm.\r\n");
 8008c98:	4b1b      	ldr	r3, [pc, #108]	@ (8008d08 <PC_show_Keys+0x6e4>)
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f01c fb66 	bl	802536c <puts>
  }
}
 8008ca0:	46c0      	nop			@ (mov r8, r8)
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	46c0      	nop			@ (mov r8, r8)
 8008ca8:	20000a14 	.word	0x20000a14
 8008cac:	0802b06c 	.word	0x0802b06c
 8008cb0:	200009c0 	.word	0x200009c0
 8008cb4:	200009bd 	.word	0x200009bd
 8008cb8:	20000b1c 	.word	0x20000b1c
 8008cbc:	080800f8 	.word	0x080800f8
 8008cc0:	0802b098 	.word	0x0802b098
 8008cc4:	20000b28 	.word	0x20000b28
 8008cc8:	08080104 	.word	0x08080104
 8008ccc:	0802b0c4 	.word	0x0802b0c4
 8008cd0:	0802b0f0 	.word	0x0802b0f0
 8008cd4:	20000b34 	.word	0x20000b34
 8008cd8:	08080170 	.word	0x08080170
 8008cdc:	0802b11c 	.word	0x0802b11c
 8008ce0:	20000b40 	.word	0x20000b40
 8008ce4:	0808017c 	.word	0x0808017c
 8008ce8:	0802b148 	.word	0x0802b148
 8008cec:	0802b174 	.word	0x0802b174
 8008cf0:	0802b18c 	.word	0x0802b18c
 8008cf4:	0802b1b8 	.word	0x0802b1b8
 8008cf8:	0802b1e8 	.word	0x0802b1e8
 8008cfc:	0802b224 	.word	0x0802b224
 8008d00:	0802b25c 	.word	0x0802b25c
 8008d04:	0802b290 	.word	0x0802b290
 8008d08:	0802b2b0 	.word	0x0802b2b0

08008d0c <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	4b20      	ldr	r3, [pc, #128]	@ (8008d9c <ascii_to_uint8+0x90>)
 8008d1c:	18d3      	adds	r3, r2, r3
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	001a      	movs	r2, r3
 8008d22:	2304      	movs	r3, #4
 8008d24:	4013      	ands	r3, r2
 8008d26:	d00a      	beq.n	8008d3e <ascii_to_uint8+0x32>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	4b1a      	ldr	r3, [pc, #104]	@ (8008d9c <ascii_to_uint8+0x90>)
 8008d32:	18d3      	adds	r3, r2, r3
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	001a      	movs	r2, r3
 8008d38:	2304      	movs	r3, #4
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	d105      	bne.n	8008d4a <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 8008d3e:	4b18      	ldr	r3, [pc, #96]	@ (8008da0 <ascii_to_uint8+0x94>)
 8008d40:	0018      	movs	r0, r3
 8008d42:	f7ff fc2f 	bl	80085a4 <printf_USB>
    return 100;
 8008d46:	2364      	movs	r3, #100	@ 0x64
 8008d48:	e024      	b.n	8008d94 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	1c1a      	adds	r2, r3, #0
 8008d50:	0092      	lsls	r2, r2, #2
 8008d52:	18d3      	adds	r3, r2, r3
 8008d54:	18db      	adds	r3, r3, r3
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	18d3      	adds	r3, r2, r3
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	210f      	movs	r1, #15
 8008d64:	187b      	adds	r3, r7, r1
 8008d66:	3a10      	subs	r2, #16
 8008d68:	701a      	strb	r2, [r3, #0]
#ifndef PUBLIC
  if (value > 25 || value == 21 || value == 22) {
#else
  if (value > 24 || value == 21 || value == 22) {
 8008d6a:	187b      	adds	r3, r7, r1
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b18      	cmp	r3, #24
 8008d70:	d807      	bhi.n	8008d82 <ascii_to_uint8+0x76>
 8008d72:	187b      	adds	r3, r7, r1
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b15      	cmp	r3, #21
 8008d78:	d003      	beq.n	8008d82 <ascii_to_uint8+0x76>
 8008d7a:	187b      	adds	r3, r7, r1
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b16      	cmp	r3, #22
 8008d80:	d105      	bne.n	8008d8e <ascii_to_uint8+0x82>
#endif
    printf_USB("Error: value out of range\r\n");
 8008d82:	4b08      	ldr	r3, [pc, #32]	@ (8008da4 <ascii_to_uint8+0x98>)
 8008d84:	0018      	movs	r0, r3
 8008d86:	f7ff fc0d 	bl	80085a4 <printf_USB>
    return 100;
 8008d8a:	2364      	movs	r3, #100	@ 0x64
 8008d8c:	e002      	b.n	8008d94 <ascii_to_uint8+0x88>
  }
  return (uint8_t)value;
 8008d8e:	230f      	movs	r3, #15
 8008d90:	18fb      	adds	r3, r7, r3
 8008d92:	781b      	ldrb	r3, [r3, #0]
}
 8008d94:	0018      	movs	r0, r3
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b004      	add	sp, #16
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	0802e1f8 	.word	0x0802e1f8
 8008da0:	0802b2fc 	.word	0x0802b2fc
 8008da4:	0802b324 	.word	0x0802b324

08008da8 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8008da8:	b590      	push	{r4, r7, lr}
 8008daa:	b0d1      	sub	sp, #324	@ 0x144
 8008dac:	af3e      	add	r7, sp, #248	@ 0xf8
 8008dae:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8008db0:	f019 fa28 	bl	8022204 <GetUsbRxDataSize>
 8008db4:	0003      	movs	r3, r0
 8008db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t r = 0;
 8008db8:	2347      	movs	r3, #71	@ 0x47
 8008dba:	18fb      	adds	r3, r7, r3
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	701a      	strb	r2, [r3, #0]
  char Buffer[25];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2124      	movs	r1, #36	@ 0x24
 8008dc4:	0018      	movs	r0, r3
 8008dc6:	f01c fc4d 	bl	8025664 <strchr>
 8008dca:	0003      	movs	r3, r0
 8008dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((length == 1) && (message != NULL) && (len != 28)){
 8008dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d10f      	bne.n	8008df4 <Process_USB_input+0x4c>
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00c      	beq.n	8008df4 <Process_USB_input+0x4c>
 8008dda:	4bdb      	ldr	r3, [pc, #876]	@ (8009148 <Process_USB_input+0x3a0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b1c      	cmp	r3, #28
 8008de0:	d008      	beq.n	8008df4 <Process_USB_input+0x4c>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 8008de2:	4ada      	ldr	r2, [pc, #872]	@ (800914c <Process_USB_input+0x3a4>)
 8008de4:	4bda      	ldr	r3, [pc, #872]	@ (8009150 <Process_USB_input+0x3a8>)
 8008de6:	0019      	movs	r1, r3
 8008de8:	2003      	movs	r0, #3
 8008dea:	f00a f95d 	bl	80130a8 <CreateLine>
      len = 28;
 8008dee:	4bd6      	ldr	r3, [pc, #856]	@ (8009148 <Process_USB_input+0x3a0>)
 8008df0:	221c      	movs	r2, #28
 8008df2:	601a      	str	r2, [r3, #0]
  }
  if (length >= len) {
 8008df4:	4bd4      	ldr	r3, [pc, #848]	@ (8009148 <Process_USB_input+0x3a0>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d200      	bcs.n	8008e00 <Process_USB_input+0x58>
 8008dfe:	e18c      	b.n	800911a <Process_USB_input+0x372>
//    HAL_Delay(20);
    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	4bd4      	ldr	r3, [pc, #848]	@ (8009154 <Process_USB_input+0x3ac>)
 8008e04:	0011      	movs	r1, r2
 8008e06:	0018      	movs	r0, r3
 8008e08:	f7ff fbcc 	bl	80085a4 <printf_USB>
    printf_USB("USB input: %s\r\n", (const char*)data);
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	4bd2      	ldr	r3, [pc, #840]	@ (8009158 <Process_USB_input+0x3b0>)
 8008e10:	0011      	movs	r1, r2
 8008e12:	0018      	movs	r0, r3
 8008e14:	f7ff fbc6 	bl	80085a4 <printf_USB>
//    message = (unsigned char*)data;
//    message = data;
    if (data[0] == '$') {
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	2b24      	cmp	r3, #36	@ 0x24
 8008e1e:	d102      	bne.n	8008e26 <Process_USB_input+0x7e>
      len = 28;
 8008e20:	4bc9      	ldr	r3, [pc, #804]	@ (8009148 <Process_USB_input+0x3a0>)
 8008e22:	221c      	movs	r2, #28
 8008e24:	601a      	str	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$')) {
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b23      	cmp	r3, #35	@ 0x23
 8008e2c:	d004      	beq.n	8008e38 <Process_USB_input+0x90>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	2b24      	cmp	r3, #36	@ 0x24
 8008e34:	d000      	beq.n	8008e38 <Process_USB_input+0x90>
 8008e36:	e153      	b.n	80090e0 <Process_USB_input+0x338>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f7ff ff65 	bl	8008d0c <ascii_to_uint8>
 8008e42:	0003      	movs	r3, r0
 8008e44:	001a      	movs	r2, r3
 8008e46:	4bc5      	ldr	r3, [pc, #788]	@ (800915c <Process_USB_input+0x3b4>)
 8008e48:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100) {
 8008e4a:	4bc4      	ldr	r3, [pc, #784]	@ (800915c <Process_USB_input+0x3b4>)
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b64      	cmp	r3, #100	@ 0x64
 8008e50:	d101      	bne.n	8008e56 <Process_USB_input+0xae>
        return false; // value out of range
 8008e52:	2300      	movs	r3, #0
 8008e54:	e174      	b.n	8009140 <Process_USB_input+0x398>
      }
      if (data[3] == ',') {
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3303      	adds	r3, #3
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b2c      	cmp	r3, #44	@ 0x2c
 8008e5e:	d000      	beq.n	8008e62 <Process_USB_input+0xba>
 8008e60:	e122      	b.n	80090a8 <Process_USB_input+0x300>
        for (uint8_t i=4; i < len; i++) {
 8008e62:	2346      	movs	r3, #70	@ 0x46
 8008e64:	18fb      	adds	r3, r7, r3
 8008e66:	2204      	movs	r2, #4
 8008e68:	701a      	strb	r2, [r3, #0]
 8008e6a:	e0aa      	b.n	8008fc2 <Process_USB_input+0x21a>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", data[i], i, r);
          HAL_Delay(10);
 8008e6c:	200a      	movs	r0, #10
 8008e6e:	f00a fe65 	bl	8013b3c <HAL_Delay>
          if (isxdigit(data[i])) {
 8008e72:	2146      	movs	r1, #70	@ 0x46
 8008e74:	187b      	adds	r3, r7, r1
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	18d3      	adds	r3, r2, r3
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	4bb7      	ldr	r3, [pc, #732]	@ (8009160 <Process_USB_input+0x3b8>)
 8008e82:	18d3      	adds	r3, r2, r3
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	001a      	movs	r2, r3
 8008e88:	2344      	movs	r3, #68	@ 0x44
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	d06a      	beq.n	8008f64 <Process_USB_input+0x1bc>
            result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8008e8e:	4bb5      	ldr	r3, [pc, #724]	@ (8009164 <Process_USB_input+0x3bc>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	b25b      	sxtb	r3, r3
 8008e94:	011b      	lsls	r3, r3, #4
 8008e96:	b25a      	sxtb	r2, r3
 8008e98:	0008      	movs	r0, r1
 8008e9a:	187b      	adds	r3, r7, r1
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	18cb      	adds	r3, r1, r3
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	1c59      	adds	r1, r3, #1
 8008ea6:	4bae      	ldr	r3, [pc, #696]	@ (8009160 <Process_USB_input+0x3b8>)
 8008ea8:	18cb      	adds	r3, r1, r3
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	0019      	movs	r1, r3
 8008eae:	2304      	movs	r3, #4
 8008eb0:	400b      	ands	r3, r1
 8008eb2:	d008      	beq.n	8008ec6 <Process_USB_input+0x11e>
 8008eb4:	183b      	adds	r3, r7, r0
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	18cb      	adds	r3, r1, r3
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	3b30      	subs	r3, #48	@ 0x30
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	b25b      	sxtb	r3, r3
 8008ec4:	e01e      	b.n	8008f04 <Process_USB_input+0x15c>
 8008ec6:	2346      	movs	r3, #70	@ 0x46
 8008ec8:	18fb      	adds	r3, r7, r3
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	18c9      	adds	r1, r1, r3
 8008ed0:	2037      	movs	r0, #55	@ 0x37
 8008ed2:	183b      	adds	r3, r7, r0
 8008ed4:	7809      	ldrb	r1, [r1, #0]
 8008ed6:	7019      	strb	r1, [r3, #0]
 8008ed8:	183b      	adds	r3, r7, r0
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	1c59      	adds	r1, r3, #1
 8008ede:	4ba0      	ldr	r3, [pc, #640]	@ (8009160 <Process_USB_input+0x3b8>)
 8008ee0:	18cb      	adds	r3, r1, r3
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	0019      	movs	r1, r3
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	400b      	ands	r3, r1
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d103      	bne.n	8008ef6 <Process_USB_input+0x14e>
 8008eee:	183b      	adds	r3, r7, r0
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	3b20      	subs	r3, #32
 8008ef4:	e002      	b.n	8008efc <Process_USB_input+0x154>
 8008ef6:	2337      	movs	r3, #55	@ 0x37
 8008ef8:	18fb      	adds	r3, r7, r3
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	3b37      	subs	r3, #55	@ 0x37
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	4313      	orrs	r3, r2
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	4b96      	ldr	r3, [pc, #600]	@ (8009164 <Process_USB_input+0x3bc>)
 8008f0c:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%02X\r\n", result);
            HAL_Delay(10);
 8008f0e:	200a      	movs	r0, #10
 8008f10:	f00a fe14 	bl	8013b3c <HAL_Delay>
            if (len == 28) {
 8008f14:	4b8c      	ldr	r3, [pc, #560]	@ (8009148 <Process_USB_input+0x3a0>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b1c      	cmp	r3, #28
 8008f1a:	d14c      	bne.n	8008fb6 <Process_USB_input+0x20e>
              if ((i % 2) == 1) {
 8008f1c:	2346      	movs	r3, #70	@ 0x46
 8008f1e:	18fb      	adds	r3, r7, r3
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2201      	movs	r2, #1
 8008f24:	4013      	ands	r3, r2
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d044      	beq.n	8008fb6 <Process_USB_input+0x20e>
                data[r] = result;
 8008f2c:	2447      	movs	r4, #71	@ 0x47
 8008f2e:	193b      	adds	r3, r7, r4
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	18d3      	adds	r3, r2, r3
 8008f36:	4a8b      	ldr	r2, [pc, #556]	@ (8009164 <Process_USB_input+0x3bc>)
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	701a      	strb	r2, [r3, #0]
                Debug("data[%d] = 0x%02X",r, data[r]);
 8008f3c:	193b      	adds	r3, r7, r4
 8008f3e:	7818      	ldrb	r0, [r3, #0]
 8008f40:	193b      	adds	r3, r7, r4
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	18d3      	adds	r3, r2, r3
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	4a87      	ldr	r2, [pc, #540]	@ (8009168 <Process_USB_input+0x3c0>)
 8008f4c:	4980      	ldr	r1, [pc, #512]	@ (8009150 <Process_USB_input+0x3a8>)
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	0003      	movs	r3, r0
 8008f52:	2003      	movs	r0, #3
 8008f54:	f00a f8a8 	bl	80130a8 <CreateLine>
                r++;
 8008f58:	193b      	adds	r3, r7, r4
 8008f5a:	781a      	ldrb	r2, [r3, #0]
 8008f5c:	193b      	adds	r3, r7, r4
 8008f5e:	3201      	adds	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e028      	b.n	8008fb6 <Process_USB_input+0x20e>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", data[i], i);
 8008f64:	2046      	movs	r0, #70	@ 0x46
 8008f66:	183b      	adds	r3, r7, r0
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	18d3      	adds	r3, r2, r3
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	0019      	movs	r1, r3
 8008f72:	183b      	adds	r3, r7, r0
 8008f74:	781a      	ldrb	r2, [r3, #0]
 8008f76:	4b7d      	ldr	r3, [pc, #500]	@ (800916c <Process_USB_input+0x3c4>)
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f7ff fb13 	bl	80085a4 <printf_USB>
            ResetUsbRxDataSize();
 8008f7e:	f019 f929 	bl	80221d4 <ResetUsbRxDataSize>
            PC_show_Keys();
 8008f82:	f7ff fb4f 	bl	8008624 <PC_show_Keys>
            for (uint8_t i=0; i < 32; i++) {
 8008f86:	2345      	movs	r3, #69	@ 0x45
 8008f88:	18fb      	adds	r3, r7, r3
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	701a      	strb	r2, [r3, #0]
 8008f8e:	e00b      	b.n	8008fa8 <Process_USB_input+0x200>
              data[i] = '\0';
 8008f90:	2145      	movs	r1, #69	@ 0x45
 8008f92:	187b      	adds	r3, r7, r1
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	18d3      	adds	r3, r2, r3
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	701a      	strb	r2, [r3, #0]
            for (uint8_t i=0; i < 32; i++) {
 8008f9e:	187b      	adds	r3, r7, r1
 8008fa0:	781a      	ldrb	r2, [r3, #0]
 8008fa2:	187b      	adds	r3, r7, r1
 8008fa4:	3201      	adds	r2, #1
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	2345      	movs	r3, #69	@ 0x45
 8008faa:	18fb      	adds	r3, r7, r3
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	2b1f      	cmp	r3, #31
 8008fb0:	d9ee      	bls.n	8008f90 <Process_USB_input+0x1e8>
            }
            return false; // Of een andere foutwaarde
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e0c4      	b.n	8009140 <Process_USB_input+0x398>
        for (uint8_t i=4; i < len; i++) {
 8008fb6:	2146      	movs	r1, #70	@ 0x46
 8008fb8:	187b      	adds	r3, r7, r1
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	187b      	adds	r3, r7, r1
 8008fbe:	3201      	adds	r2, #1
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	2346      	movs	r3, #70	@ 0x46
 8008fc4:	18fb      	adds	r3, r7, r3
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8009148 <Process_USB_input+0x3a0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d200      	bcs.n	8008fd2 <Process_USB_input+0x22a>
 8008fd0:	e74c      	b.n	8008e6c <Process_USB_input+0xc4>
          }
        }
        if (len == 6) {
 8008fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8009148 <Process_USB_input+0x3a0>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b06      	cmp	r3, #6
 8008fd8:	d114      	bne.n	8009004 <Process_USB_input+0x25c>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008fda:	2428      	movs	r4, #40	@ 0x28
 8008fdc:	193b      	adds	r3, r7, r4
 8008fde:	4864      	ldr	r0, [pc, #400]	@ (8009170 <Process_USB_input+0x3c8>)
 8008fe0:	220c      	movs	r2, #12
 8008fe2:	0019      	movs	r1, r3
 8008fe4:	f002 fb74 	bl	800b6d0 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte of the key
 8008fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8009164 <Process_USB_input+0x3bc>)
 8008fea:	781a      	ldrb	r2, [r3, #0]
 8008fec:	0021      	movs	r1, r4
 8008fee:	187b      	adds	r3, r7, r1
 8008ff0:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8008ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800915c <Process_USB_input+0x3b4>)
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	1879      	adds	r1, r7, r1
 8008ff8:	189b      	adds	r3, r3, r2
 8008ffa:	220c      	movs	r2, #12
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f01c fc05 	bl	802580c <memcpy>
 8009002:	e005      	b.n	8009010 <Process_USB_input+0x268>
        }
        else {
          memcpy(received.Payload, data, IdSize);
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4b5b      	ldr	r3, [pc, #364]	@ (8009174 <Process_USB_input+0x3cc>)
 8009008:	220c      	movs	r2, #12
 800900a:	0018      	movs	r0, r3
 800900c:	f01c fbfe 	bl	802580c <memcpy>
        }
        received.Payload[12] = '\0';
 8009010:	4b52      	ldr	r3, [pc, #328]	@ (800915c <Process_USB_input+0x3b4>)
 8009012:	2200      	movs	r2, #0
 8009014:	739a      	strb	r2, [r3, #14]
        received.PayloadLength = IdSize;
 8009016:	4b51      	ldr	r3, [pc, #324]	@ (800915c <Process_USB_input+0x3b4>)
 8009018:	220c      	movs	r2, #12
 800901a:	705a      	strb	r2, [r3, #1]
        Debug("first char of payload before conversion: %c", received.Payload[0]);
 800901c:	4b4f      	ldr	r3, [pc, #316]	@ (800915c <Process_USB_input+0x3b4>)
 800901e:	789b      	ldrb	r3, [r3, #2]
 8009020:	4a55      	ldr	r2, [pc, #340]	@ (8009178 <Process_USB_input+0x3d0>)
 8009022:	494b      	ldr	r1, [pc, #300]	@ (8009150 <Process_USB_input+0x3a8>)
 8009024:	2003      	movs	r0, #3
 8009026:	f00a f83f 	bl	80130a8 <CreateLine>
        uint8ArrayToString(Buffer, received.Payload);
 800902a:	4a52      	ldr	r2, [pc, #328]	@ (8009174 <Process_USB_input+0x3cc>)
 800902c:	240c      	movs	r4, #12
 800902e:	193b      	adds	r3, r7, r4
 8009030:	0011      	movs	r1, r2
 8009032:	0018      	movs	r0, r3
 8009034:	f7fc f93e 	bl	80052b4 <uint8ArrayToString>
        Debug("received Payload to write key %s", Buffer);
 8009038:	193b      	adds	r3, r7, r4
 800903a:	4a50      	ldr	r2, [pc, #320]	@ (800917c <Process_USB_input+0x3d4>)
 800903c:	4944      	ldr	r1, [pc, #272]	@ (8009150 <Process_USB_input+0x3a8>)
 800903e:	2003      	movs	r0, #3
 8009040:	f00a f832 	bl	80130a8 <CreateLine>
        Debug("first char of payload after conversion: %c", received.Payload[0]);
 8009044:	4b45      	ldr	r3, [pc, #276]	@ (800915c <Process_USB_input+0x3b4>)
 8009046:	789b      	ldrb	r3, [r3, #2]
 8009048:	4a4d      	ldr	r2, [pc, #308]	@ (8009180 <Process_USB_input+0x3d8>)
 800904a:	4941      	ldr	r1, [pc, #260]	@ (8009150 <Process_USB_input+0x3a8>)
 800904c:	2003      	movs	r0, #3
 800904e:	f00a f82b 	bl	80130a8 <CreateLine>
        ProcessCmd(received);
 8009052:	4c42      	ldr	r4, [pc, #264]	@ (800915c <Process_USB_input+0x3b4>)
 8009054:	466b      	mov	r3, sp
 8009056:	0018      	movs	r0, r3
 8009058:	0023      	movs	r3, r4
 800905a:	3310      	adds	r3, #16
 800905c:	22f4      	movs	r2, #244	@ 0xf4
 800905e:	0019      	movs	r1, r3
 8009060:	f01c fbd4 	bl	802580c <memcpy>
 8009064:	6820      	ldr	r0, [r4, #0]
 8009066:	6861      	ldr	r1, [r4, #4]
 8009068:	68a2      	ldr	r2, [r4, #8]
 800906a:	68e3      	ldr	r3, [r4, #12]
 800906c:	f7ff f86e 	bl	800814c <ProcessCmd>
        ResetUsbRxDataSize();
 8009070:	f019 f8b0 	bl	80221d4 <ResetUsbRxDataSize>
        PC_show_Keys();
 8009074:	f7ff fad6 	bl	8008624 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8009078:	2344      	movs	r3, #68	@ 0x44
 800907a:	18fb      	adds	r3, r7, r3
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
 8009080:	e00b      	b.n	800909a <Process_USB_input+0x2f2>
          data[i] = '\0';
 8009082:	2144      	movs	r1, #68	@ 0x44
 8009084:	187b      	adds	r3, r7, r1
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	18d3      	adds	r3, r2, r3
 800908c:	2200      	movs	r2, #0
 800908e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009090:	187b      	adds	r3, r7, r1
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	187b      	adds	r3, r7, r1
 8009096:	3201      	adds	r2, #1
 8009098:	701a      	strb	r2, [r3, #0]
 800909a:	2344      	movs	r3, #68	@ 0x44
 800909c:	18fb      	adds	r3, r7, r3
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b1f      	cmp	r3, #31
 80090a2:	d9ee      	bls.n	8009082 <Process_USB_input+0x2da>
        }
        return true;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e04b      	b.n	8009140 <Process_USB_input+0x398>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 80090a8:	4b36      	ldr	r3, [pc, #216]	@ (8009184 <Process_USB_input+0x3dc>)
 80090aa:	0018      	movs	r0, r3
 80090ac:	f7ff fa7a 	bl	80085a4 <printf_USB>
        ResetUsbRxDataSize();
 80090b0:	f019 f890 	bl	80221d4 <ResetUsbRxDataSize>
        for (uint8_t i=0; i < 32; i++) {
 80090b4:	2343      	movs	r3, #67	@ 0x43
 80090b6:	18fb      	adds	r3, r7, r3
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]
 80090bc:	e00b      	b.n	80090d6 <Process_USB_input+0x32e>
          data[i] = '\0';
 80090be:	2143      	movs	r1, #67	@ 0x43
 80090c0:	187b      	adds	r3, r7, r1
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	18d3      	adds	r3, r2, r3
 80090c8:	2200      	movs	r2, #0
 80090ca:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 80090cc:	187b      	adds	r3, r7, r1
 80090ce:	781a      	ldrb	r2, [r3, #0]
 80090d0:	187b      	adds	r3, r7, r1
 80090d2:	3201      	adds	r2, #1
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	2343      	movs	r3, #67	@ 0x43
 80090d8:	18fb      	adds	r3, r7, r3
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	2b1f      	cmp	r3, #31
 80090de:	d9ee      	bls.n	80090be <Process_USB_input+0x316>
        }
      }
    }
//    else {
    len = 6;
 80090e0:	4b19      	ldr	r3, [pc, #100]	@ (8009148 <Process_USB_input+0x3a0>)
 80090e2:	2206      	movs	r2, #6
 80090e4:	601a      	str	r2, [r3, #0]
    PC_show_Keys();
 80090e6:	f7ff fa9d 	bl	8008624 <PC_show_Keys>
    ResetUsbRxDataSize();
 80090ea:	f019 f873 	bl	80221d4 <ResetUsbRxDataSize>
//    }
    for (uint8_t i=0; i < 32; i++) {
 80090ee:	2342      	movs	r3, #66	@ 0x42
 80090f0:	18fb      	adds	r3, r7, r3
 80090f2:	2200      	movs	r2, #0
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e00b      	b.n	8009110 <Process_USB_input+0x368>
      data[i] = '\0';
 80090f8:	2142      	movs	r1, #66	@ 0x42
 80090fa:	187b      	adds	r3, r7, r1
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	18d3      	adds	r3, r2, r3
 8009102:	2200      	movs	r2, #0
 8009104:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 8009106:	187b      	adds	r3, r7, r1
 8009108:	781a      	ldrb	r2, [r3, #0]
 800910a:	187b      	adds	r3, r7, r1
 800910c:	3201      	adds	r2, #1
 800910e:	701a      	strb	r2, [r3, #0]
 8009110:	2342      	movs	r3, #66	@ 0x42
 8009112:	18fb      	adds	r3, r7, r3
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2b1f      	cmp	r3, #31
 8009118:	d9ee      	bls.n	80090f8 <Process_USB_input+0x350>
    }
  }
  if (formerlength != length) {
 800911a:	4b1b      	ldr	r3, [pc, #108]	@ (8009188 <Process_USB_input+0x3e0>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009120:	429a      	cmp	r2, r3
 8009122:	d008      	beq.n	8009136 <Process_USB_input+0x38e>
    printf_USB("USB input: %s\r", (const char*)data);
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	4b19      	ldr	r3, [pc, #100]	@ (800918c <Process_USB_input+0x3e4>)
 8009128:	0011      	movs	r1, r2
 800912a:	0018      	movs	r0, r3
 800912c:	f7ff fa3a 	bl	80085a4 <printf_USB>
    formerlength = length;
 8009130:	4b15      	ldr	r3, [pc, #84]	@ (8009188 <Process_USB_input+0x3e0>)
 8009132:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009134:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8009136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009138:	0018      	movs	r0, r3
 800913a:	f019 f86d 	bl	8022218 <GetUsbRxNextChunk>

  return false;
 800913e:	2300      	movs	r3, #0
}
 8009140:	0018      	movs	r0, r3
 8009142:	46bd      	mov	sp, r7
 8009144:	b013      	add	sp, #76	@ 0x4c
 8009146:	bd90      	pop	{r4, r7, pc}
 8009148:	20000030 	.word	0x20000030
 800914c:	0802b340 	.word	0x0802b340
 8009150:	0802b380 	.word	0x0802b380
 8009154:	0802b384 	.word	0x0802b384
 8009158:	0802b3b0 	.word	0x0802b3b0
 800915c:	200007ac 	.word	0x200007ac
 8009160:	0802e1f8 	.word	0x0802e1f8
 8009164:	200008b0 	.word	0x200008b0
 8009168:	0802b3c0 	.word	0x0802b3c0
 800916c:	0802b3d4 	.word	0x0802b3d4
 8009170:	08080000 	.word	0x08080000
 8009174:	200007ae 	.word	0x200007ae
 8009178:	0802b40c 	.word	0x0802b40c
 800917c:	0802b438 	.word	0x0802b438
 8009180:	0802b45c 	.word	0x0802b45c
 8009184:	0802b488 	.word	0x0802b488
 8009188:	200008b4 	.word	0x200008b4
 800918c:	0802b4b4 	.word	0x0802b4b4

08009190 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8009194:	4b26      	ldr	r3, [pc, #152]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 8009196:	4a27      	ldr	r2, [pc, #156]	@ (8009234 <ReadBatteryVoltage+0xa4>)
 8009198:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800919a:	4b25      	ldr	r3, [pc, #148]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 800919c:	2280      	movs	r2, #128	@ 0x80
 800919e:	0152      	lsls	r2, r2, #5
 80091a0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80091a2:	4a23      	ldr	r2, [pc, #140]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 80091a4:	4b24      	ldr	r3, [pc, #144]	@ (8009238 <ReadBatteryVoltage+0xa8>)
 80091a6:	0011      	movs	r1, r2
 80091a8:	0018      	movs	r0, r3
 80091aa:	f00a ff95 	bl	80140d8 <HAL_ADC_ConfigChannel>
 80091ae:	1e03      	subs	r3, r0, #0
 80091b0:	d001      	beq.n	80091b6 <ReadBatteryVoltage+0x26>
    Error_Handler();
 80091b2:	f003 fb51 	bl	800c858 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80091b6:	4b20      	ldr	r3, [pc, #128]	@ (8009238 <ReadBatteryVoltage+0xa8>)
 80091b8:	0018      	movs	r0, r3
 80091ba:	f00a fe91 	bl	8013ee0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80091be:	4b1e      	ldr	r3, [pc, #120]	@ (8009238 <ReadBatteryVoltage+0xa8>)
 80091c0:	2101      	movs	r1, #1
 80091c2:	0018      	movs	r0, r3
 80091c4:	f00a fee0 	bl	8013f88 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 80091c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009238 <ReadBatteryVoltage+0xa8>)
 80091ca:	0018      	movs	r0, r3
 80091cc:	f00a ff78 	bl	80140c0 <HAL_ADC_GetValue>
 80091d0:	0002      	movs	r2, r0
 80091d2:	4b1a      	ldr	r3, [pc, #104]	@ (800923c <ReadBatteryVoltage+0xac>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4353      	muls	r3, r2
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	4919      	ldr	r1, [pc, #100]	@ (8009240 <ReadBatteryVoltage+0xb0>)
 80091dc:	0018      	movs	r0, r3
 80091de:	f7f6 ffe1 	bl	80001a4 <__udivsi3>
 80091e2:	0003      	movs	r3, r0
 80091e4:	001a      	movs	r2, r3
 80091e6:	4b17      	ldr	r3, [pc, #92]	@ (8009244 <ReadBatteryVoltage+0xb4>)
 80091e8:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 80091ea:	4b16      	ldr	r3, [pc, #88]	@ (8009244 <ReadBatteryVoltage+0xb4>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	0018      	movs	r0, r3
 80091f0:	f7f8 fb6a 	bl	80018c8 <__aeabi_ui2f>
 80091f4:	1c03      	adds	r3, r0, #0
 80091f6:	4914      	ldr	r1, [pc, #80]	@ (8009248 <ReadBatteryVoltage+0xb8>)
 80091f8:	1c18      	adds	r0, r3, #0
 80091fa:	f7f7 fd53 	bl	8000ca4 <__aeabi_fdiv>
 80091fe:	1c03      	adds	r3, r0, #0
 8009200:	1c1a      	adds	r2, r3, #0
 8009202:	4b12      	ldr	r3, [pc, #72]	@ (800924c <ReadBatteryVoltage+0xbc>)
 8009204:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009206:	4b0a      	ldr	r3, [pc, #40]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 8009208:	4a0a      	ldr	r2, [pc, #40]	@ (8009234 <ReadBatteryVoltage+0xa4>)
 800920a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800920c:	4b08      	ldr	r3, [pc, #32]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 800920e:	4a10      	ldr	r2, [pc, #64]	@ (8009250 <ReadBatteryVoltage+0xc0>)
 8009210:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009212:	4a07      	ldr	r2, [pc, #28]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 8009214:	4b08      	ldr	r3, [pc, #32]	@ (8009238 <ReadBatteryVoltage+0xa8>)
 8009216:	0011      	movs	r1, r2
 8009218:	0018      	movs	r0, r3
 800921a:	f00a ff5d 	bl	80140d8 <HAL_ADC_ConfigChannel>
 800921e:	1e03      	subs	r3, r0, #0
 8009220:	d001      	beq.n	8009226 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009222:	f003 fb19 	bl	800c858 <Error_Handler>
  }
  return trueValue;
 8009226:	4b09      	ldr	r3, [pc, #36]	@ (800924c <ReadBatteryVoltage+0xbc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 }
 800922a:	1c18      	adds	r0, r3, #0
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20000b4c 	.word	0x20000b4c
 8009234:	38004000 	.word	0x38004000
 8009238:	20000b88 	.word	0x20000b88
 800923c:	20000034 	.word	0x20000034
 8009240:	00000fff 	.word	0x00000fff
 8009244:	20000b54 	.word	0x20000b54
 8009248:	447a0000 	.word	0x447a0000
 800924c:	20000b58 	.word	0x20000b58
 8009250:	00001001 	.word	0x00001001

08009254 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009258:	4b21      	ldr	r3, [pc, #132]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 800925a:	4a22      	ldr	r2, [pc, #136]	@ (80092e4 <ReadSolarVoltage+0x90>)
 800925c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800925e:	4b20      	ldr	r3, [pc, #128]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 8009260:	2280      	movs	r2, #128	@ 0x80
 8009262:	0152      	lsls	r2, r2, #5
 8009264:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009266:	4a1e      	ldr	r2, [pc, #120]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 8009268:	4b1f      	ldr	r3, [pc, #124]	@ (80092e8 <ReadSolarVoltage+0x94>)
 800926a:	0011      	movs	r1, r2
 800926c:	0018      	movs	r0, r3
 800926e:	f00a ff33 	bl	80140d8 <HAL_ADC_ConfigChannel>
 8009272:	1e03      	subs	r3, r0, #0
 8009274:	d001      	beq.n	800927a <ReadSolarVoltage+0x26>
    Error_Handler();
 8009276:	f003 faef 	bl	800c858 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800927a:	4b1b      	ldr	r3, [pc, #108]	@ (80092e8 <ReadSolarVoltage+0x94>)
 800927c:	0018      	movs	r0, r3
 800927e:	f00a fe2f 	bl	8013ee0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009282:	4b19      	ldr	r3, [pc, #100]	@ (80092e8 <ReadSolarVoltage+0x94>)
 8009284:	2101      	movs	r1, #1
 8009286:	0018      	movs	r0, r3
 8009288:	f00a fe7e 	bl	8013f88 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 800928c:	4b16      	ldr	r3, [pc, #88]	@ (80092e8 <ReadSolarVoltage+0x94>)
 800928e:	0018      	movs	r0, r3
 8009290:	f00a ff16 	bl	80140c0 <HAL_ADC_GetValue>
 8009294:	0002      	movs	r2, r0
 8009296:	4b15      	ldr	r3, [pc, #84]	@ (80092ec <ReadSolarVoltage+0x98>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	435a      	muls	r2, r3
 800929c:	0013      	movs	r3, r2
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	189b      	adds	r3, r3, r2
 80092a2:	4913      	ldr	r1, [pc, #76]	@ (80092f0 <ReadSolarVoltage+0x9c>)
 80092a4:	0018      	movs	r0, r3
 80092a6:	f7f6 ff7d 	bl	80001a4 <__udivsi3>
 80092aa:	0003      	movs	r3, r0
 80092ac:	001a      	movs	r2, r3
 80092ae:	4b11      	ldr	r3, [pc, #68]	@ (80092f4 <ReadSolarVoltage+0xa0>)
 80092b0:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 80092b2:	4b0b      	ldr	r3, [pc, #44]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 80092b4:	4a0b      	ldr	r2, [pc, #44]	@ (80092e4 <ReadSolarVoltage+0x90>)
 80092b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80092b8:	4b09      	ldr	r3, [pc, #36]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 80092ba:	4a0f      	ldr	r2, [pc, #60]	@ (80092f8 <ReadSolarVoltage+0xa4>)
 80092bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80092be:	4a08      	ldr	r2, [pc, #32]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 80092c0:	4b09      	ldr	r3, [pc, #36]	@ (80092e8 <ReadSolarVoltage+0x94>)
 80092c2:	0011      	movs	r1, r2
 80092c4:	0018      	movs	r0, r3
 80092c6:	f00a ff07 	bl	80140d8 <HAL_ADC_ConfigChannel>
 80092ca:	1e03      	subs	r3, r0, #0
 80092cc:	d001      	beq.n	80092d2 <ReadSolarVoltage+0x7e>
    Error_Handler();
 80092ce:	f003 fac3 	bl	800c858 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 80092d2:	4b08      	ldr	r3, [pc, #32]	@ (80092f4 <ReadSolarVoltage+0xa0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 }
 80092d8:	0018      	movs	r0, r3
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	46c0      	nop			@ (mov r8, r8)
 80092e0:	20000b4c 	.word	0x20000b4c
 80092e4:	3c008000 	.word	0x3c008000
 80092e8:	20000b88 	.word	0x20000b88
 80092ec:	20000034 	.word	0x20000034
 80092f0:	00000fff 	.word	0x00000fff
 80092f4:	20000b5c 	.word	0x20000b5c
 80092f8:	00001001 	.word	0x00001001

080092fc <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8009300:	23a0      	movs	r3, #160	@ 0xa0
 8009302:	05db      	lsls	r3, r3, #23
 8009304:	2180      	movs	r1, #128	@ 0x80
 8009306:	0018      	movs	r0, r3
 8009308:	f00b fe82 	bl	8015010 <HAL_GPIO_ReadPin>
 800930c:	0003      	movs	r3, r0
 800930e:	1e5a      	subs	r2, r3, #1
 8009310:	4193      	sbcs	r3, r2
 8009312:	b2db      	uxtb	r3, r3
}
 8009314:	0018      	movs	r0, r3
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800931a:	b580      	push	{r7, lr}
 800931c:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800931e:	2380      	movs	r3, #128	@ 0x80
 8009320:	021a      	lsls	r2, r3, #8
 8009322:	23a0      	movs	r3, #160	@ 0xa0
 8009324:	05db      	lsls	r3, r3, #23
 8009326:	0011      	movs	r1, r2
 8009328:	0018      	movs	r0, r3
 800932a:	f00b fe71 	bl	8015010 <HAL_GPIO_ReadPin>
 800932e:	0003      	movs	r3, r0
 8009330:	1e5a      	subs	r2, r3, #1
 8009332:	4193      	sbcs	r3, r2
 8009334:	b2db      	uxtb	r3, r3
}
 8009336:	0018      	movs	r0, r3
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 800933c:	b580      	push	{r7, lr}
 800933e:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009340:	4b05      	ldr	r3, [pc, #20]	@ (8009358 <UserButton_Pressed+0x1c>)
 8009342:	2104      	movs	r1, #4
 8009344:	0018      	movs	r0, r3
 8009346:	f00b fe63 	bl	8015010 <HAL_GPIO_ReadPin>
 800934a:	0003      	movs	r3, r0
 800934c:	425a      	negs	r2, r3
 800934e:	4153      	adcs	r3, r2
 8009350:	b2db      	uxtb	r3, r3
}
 8009352:	0018      	movs	r0, r3
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	50000c00 	.word	0x50000c00

0800935c <showTime>:
void getUptime(char* uptbuffer) {
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
}
#endif

void showTime() {
 800935c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800935e:	46d6      	mov	lr, sl
 8009360:	464f      	mov	r7, r9
 8009362:	4646      	mov	r6, r8
 8009364:	b5c0      	push	{r6, r7, lr}
 8009366:	b08e      	sub	sp, #56	@ 0x38
 8009368:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 800936a:	4b21      	ldr	r3, [pc, #132]	@ (80093f0 <showTime+0x94>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d036      	beq.n	80093e0 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009372:	003a      	movs	r2, r7
 8009374:	1d3b      	adds	r3, r7, #4
 8009376:	0011      	movs	r1, r2
 8009378:	0018      	movs	r0, r3
 800937a:	f000 fa3f 	bl	80097fc <RTC_GetTime>
  UpdateSystemUptime();
 800937e:	f000 f853 	bl	8009428 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009382:	003b      	movs	r3, r7
 8009384:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009386:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009388:	003b      	movs	r3, r7
 800938a:	785b      	ldrb	r3, [r3, #1]
 800938c:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800938e:	4b19      	ldr	r3, [pc, #100]	@ (80093f4 <showTime+0x98>)
 8009390:	0092      	lsls	r2, r2, #2
 8009392:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009394:	003b      	movs	r3, r7
 8009396:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009398:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800939e:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093a0:	1d3b      	adds	r3, r7, #4
 80093a2:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093a4:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093a6:	1d3b      	adds	r3, r7, #4
 80093a8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093aa:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093ac:	4b12      	ldr	r3, [pc, #72]	@ (80093f8 <showTime+0x9c>)
 80093ae:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093b0:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093b2:	4b11      	ldr	r3, [pc, #68]	@ (80093f8 <showTime+0x9c>)
 80093b4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093b6:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093b8:	4b0f      	ldr	r3, [pc, #60]	@ (80093f8 <showTime+0x9c>)
 80093ba:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093bc:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093be:	4b0e      	ldr	r3, [pc, #56]	@ (80093f8 <showTime+0x9c>)
 80093c0:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093c2:	480e      	ldr	r0, [pc, #56]	@ (80093fc <showTime+0xa0>)
 80093c4:	9306      	str	r3, [sp, #24]
 80093c6:	4643      	mov	r3, r8
 80093c8:	9305      	str	r3, [sp, #20]
 80093ca:	4663      	mov	r3, ip
 80093cc:	9304      	str	r3, [sp, #16]
 80093ce:	9603      	str	r6, [sp, #12]
 80093d0:	9502      	str	r5, [sp, #8]
 80093d2:	9401      	str	r4, [sp, #4]
 80093d4:	9100      	str	r1, [sp, #0]
 80093d6:	4653      	mov	r3, sl
 80093d8:	4649      	mov	r1, r9
 80093da:	f01b ff61 	bl	80252a0 <iprintf>
 80093de:	e000      	b.n	80093e2 <showTime+0x86>
    return;
 80093e0:	46c0      	nop			@ (mov r8, r8)
}
 80093e2:	46bd      	mov	sp, r7
 80093e4:	b006      	add	sp, #24
 80093e6:	bce0      	pop	{r5, r6, r7}
 80093e8:	46ba      	mov	sl, r7
 80093ea:	46b1      	mov	r9, r6
 80093ec:	46a8      	mov	r8, r5
 80093ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f0:	20000b6c 	.word	0x20000b6c
 80093f4:	20000054 	.word	0x20000054
 80093f8:	20000b60 	.word	0x20000b60
 80093fc:	0802b510 	.word	0x0802b510

08009400 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009406:	003a      	movs	r2, r7
 8009408:	1d3b      	adds	r3, r7, #4
 800940a:	0011      	movs	r1, r2
 800940c:	0018      	movs	r0, r3
 800940e:	f000 f9f5 	bl	80097fc <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009412:	1d3a      	adds	r2, r7, #4
 8009414:	003b      	movs	r3, r7
 8009416:	0011      	movs	r1, r2
 8009418:	0018      	movs	r0, r3
 800941a:	f000 fbc7 	bl	8009bac <makeTime>
 800941e:	0003      	movs	r3, r0
}
 8009420:	0018      	movs	r0, r3
 8009422:	46bd      	mov	sp, r7
 8009424:	b006      	add	sp, #24
 8009426:	bd80      	pop	{r7, pc}

08009428 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800942e:	003a      	movs	r2, r7
 8009430:	1d3b      	adds	r3, r7, #4
 8009432:	0011      	movs	r1, r2
 8009434:	0018      	movs	r0, r3
 8009436:	f000 f9e1 	bl	80097fc <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800943a:	1d3a      	adds	r2, r7, #4
 800943c:	003b      	movs	r3, r7
 800943e:	0011      	movs	r1, r2
 8009440:	0018      	movs	r0, r3
 8009442:	f000 fbb3 	bl	8009bac <makeTime>
 8009446:	0002      	movs	r2, r0
 8009448:	4b1e      	ldr	r3, [pc, #120]	@ (80094c4 <UpdateSystemUptime+0x9c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	213c      	movs	r1, #60	@ 0x3c
 8009458:	0018      	movs	r0, r3
 800945a:	f7f6 ff29 	bl	80002b0 <__aeabi_uidivmod>
 800945e:	000b      	movs	r3, r1
 8009460:	b2da      	uxtb	r2, r3
 8009462:	4b19      	ldr	r3, [pc, #100]	@ (80094c8 <UpdateSystemUptime+0xa0>)
 8009464:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	213c      	movs	r1, #60	@ 0x3c
 800946a:	0018      	movs	r0, r3
 800946c:	f7f6 fe9a 	bl	80001a4 <__udivsi3>
 8009470:	0003      	movs	r3, r0
 8009472:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	213c      	movs	r1, #60	@ 0x3c
 8009478:	0018      	movs	r0, r3
 800947a:	f7f6 ff19 	bl	80002b0 <__aeabi_uidivmod>
 800947e:	000b      	movs	r3, r1
 8009480:	b2da      	uxtb	r2, r3
 8009482:	4b11      	ldr	r3, [pc, #68]	@ (80094c8 <UpdateSystemUptime+0xa0>)
 8009484:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	213c      	movs	r1, #60	@ 0x3c
 800948a:	0018      	movs	r0, r3
 800948c:	f7f6 fe8a 	bl	80001a4 <__udivsi3>
 8009490:	0003      	movs	r3, r0
 8009492:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	2118      	movs	r1, #24
 8009498:	0018      	movs	r0, r3
 800949a:	f7f6 ff09 	bl	80002b0 <__aeabi_uidivmod>
 800949e:	000b      	movs	r3, r1
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	4b09      	ldr	r3, [pc, #36]	@ (80094c8 <UpdateSystemUptime+0xa0>)
 80094a4:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	2118      	movs	r1, #24
 80094aa:	0018      	movs	r0, r3
 80094ac:	f7f6 fe7a 	bl	80001a4 <__udivsi3>
 80094b0:	0003      	movs	r3, r0
 80094b2:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	4b03      	ldr	r3, [pc, #12]	@ (80094c8 <UpdateSystemUptime+0xa0>)
 80094ba:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80094bc:	46c0      	nop			@ (mov r8, r8)
 80094be:	46bd      	mov	sp, r7
 80094c0:	b008      	add	sp, #32
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20000b6c 	.word	0x20000b6c
 80094c8:	20000b60 	.word	0x20000b60

080094cc <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80094cc:	b590      	push	{r4, r7, lr}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	0008      	movs	r0, r1
 80094d6:	0011      	movs	r1, r2
 80094d8:	1cfb      	adds	r3, r7, #3
 80094da:	1c02      	adds	r2, r0, #0
 80094dc:	701a      	strb	r2, [r3, #0]
 80094de:	1cbb      	adds	r3, r7, #2
 80094e0:	1c0a      	adds	r2, r1, #0
 80094e2:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80094e4:	230e      	movs	r3, #14
 80094e6:	18fb      	adds	r3, r7, r3
 80094e8:	2200      	movs	r2, #0
 80094ea:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80094ec:	230f      	movs	r3, #15
 80094ee:	18fb      	adds	r3, r7, r3
 80094f0:	1cfa      	adds	r2, r7, #3
 80094f2:	7812      	ldrb	r2, [r2, #0]
 80094f4:	701a      	strb	r2, [r3, #0]
 80094f6:	e015      	b.n	8009524 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 80094f8:	200f      	movs	r0, #15
 80094fa:	183b      	adds	r3, r7, r0
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	18d2      	adds	r2, r2, r3
 8009502:	240e      	movs	r4, #14
 8009504:	193b      	adds	r3, r7, r4
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	7811      	ldrb	r1, [r2, #0]
 800950a:	2208      	movs	r2, #8
 800950c:	18ba      	adds	r2, r7, r2
 800950e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8009510:	193b      	adds	r3, r7, r4
 8009512:	781a      	ldrb	r2, [r3, #0]
 8009514:	193b      	adds	r3, r7, r4
 8009516:	3201      	adds	r2, #1
 8009518:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800951a:	183b      	adds	r3, r7, r0
 800951c:	781a      	ldrb	r2, [r3, #0]
 800951e:	183b      	adds	r3, r7, r0
 8009520:	3201      	adds	r2, #1
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	200f      	movs	r0, #15
 8009526:	183a      	adds	r2, r7, r0
 8009528:	1cbb      	adds	r3, r7, #2
 800952a:	7812      	ldrb	r2, [r2, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d9e2      	bls.n	80094f8 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8009532:	230e      	movs	r3, #14
 8009534:	18fb      	adds	r3, r7, r3
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2208      	movs	r2, #8
 800953a:	18ba      	adds	r2, r7, r2
 800953c:	2100      	movs	r1, #0
 800953e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8009540:	1cfb      	adds	r3, r7, #3
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b13      	cmp	r3, #19
 8009546:	d849      	bhi.n	80095dc <aBuff2int+0x110>
    if (start == 17) { //month
 8009548:	1cfb      	adds	r3, r7, #3
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2b11      	cmp	r3, #17
 800954e:	d122      	bne.n	8009596 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8009550:	183b      	adds	r3, r7, r0
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]
 8009556:	e018      	b.n	800958a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8009558:	240f      	movs	r4, #15
 800955a:	193b      	adds	r3, r7, r4
 800955c:	781a      	ldrb	r2, [r3, #0]
 800955e:	4b25      	ldr	r3, [pc, #148]	@ (80095f4 <aBuff2int+0x128>)
 8009560:	0092      	lsls	r2, r2, #2
 8009562:	58d2      	ldr	r2, [r2, r3]
 8009564:	2308      	movs	r3, #8
 8009566:	18fb      	adds	r3, r7, r3
 8009568:	0011      	movs	r1, r2
 800956a:	0018      	movs	r0, r3
 800956c:	f7f6 fdf4 	bl	8000158 <strcmp>
 8009570:	1e03      	subs	r3, r0, #0
 8009572:	d104      	bne.n	800957e <aBuff2int+0xb2>
          return i+1;
 8009574:	193b      	adds	r3, r7, r4
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	3301      	adds	r3, #1
 800957a:	b2db      	uxtb	r3, r3
 800957c:	e035      	b.n	80095ea <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800957e:	210f      	movs	r1, #15
 8009580:	187b      	adds	r3, r7, r1
 8009582:	781a      	ldrb	r2, [r3, #0]
 8009584:	187b      	adds	r3, r7, r1
 8009586:	3201      	adds	r2, #1
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	230f      	movs	r3, #15
 800958c:	18fb      	adds	r3, r7, r3
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	2b0b      	cmp	r3, #11
 8009592:	d9e1      	bls.n	8009558 <aBuff2int+0x8c>
 8009594:	e022      	b.n	80095dc <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8009596:	230f      	movs	r3, #15
 8009598:	18fb      	adds	r3, r7, r3
 800959a:	2200      	movs	r2, #0
 800959c:	701a      	strb	r2, [r3, #0]
 800959e:	e018      	b.n	80095d2 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80095a0:	240f      	movs	r4, #15
 80095a2:	193b      	adds	r3, r7, r4
 80095a4:	781a      	ldrb	r2, [r3, #0]
 80095a6:	4b14      	ldr	r3, [pc, #80]	@ (80095f8 <aBuff2int+0x12c>)
 80095a8:	0092      	lsls	r2, r2, #2
 80095aa:	58d2      	ldr	r2, [r2, r3]
 80095ac:	2308      	movs	r3, #8
 80095ae:	18fb      	adds	r3, r7, r3
 80095b0:	0011      	movs	r1, r2
 80095b2:	0018      	movs	r0, r3
 80095b4:	f7f6 fdd0 	bl	8000158 <strcmp>
 80095b8:	1e03      	subs	r3, r0, #0
 80095ba:	d104      	bne.n	80095c6 <aBuff2int+0xfa>
          return i+1;
 80095bc:	193b      	adds	r3, r7, r4
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	3301      	adds	r3, #1
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	e011      	b.n	80095ea <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80095c6:	210f      	movs	r1, #15
 80095c8:	187b      	adds	r3, r7, r1
 80095ca:	781a      	ldrb	r2, [r3, #0]
 80095cc:	187b      	adds	r3, r7, r1
 80095ce:	3201      	adds	r2, #1
 80095d0:	701a      	strb	r2, [r3, #0]
 80095d2:	230f      	movs	r3, #15
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b06      	cmp	r3, #6
 80095da:	d9e1      	bls.n	80095a0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80095dc:	2308      	movs	r3, #8
 80095de:	18fb      	adds	r3, r7, r3
 80095e0:	0018      	movs	r0, r3
 80095e2:	f01a fa78 	bl	8023ad6 <atoi>
 80095e6:	0003      	movs	r3, r0
 80095e8:	b2db      	uxtb	r3, r3
}
 80095ea:	0018      	movs	r0, r3
 80095ec:	46bd      	mov	sp, r7
 80095ee:	b005      	add	sp, #20
 80095f0:	bd90      	pop	{r4, r7, pc}
 80095f2:	46c0      	nop			@ (mov r8, r8)
 80095f4:	20000054 	.word	0x20000054
 80095f8:	20000038 	.word	0x20000038

080095fc <ParseTime>:

void ParseTime(char* buffer) {
 80095fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095fe:	b08b      	sub	sp, #44	@ 0x2c
 8009600:	af02      	add	r7, sp, #8
 8009602:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009604:	2408      	movs	r4, #8
 8009606:	193a      	adds	r2, r7, r4
 8009608:	260c      	movs	r6, #12
 800960a:	19bb      	adds	r3, r7, r6
 800960c:	0011      	movs	r1, r2
 800960e:	0018      	movs	r0, r3
 8009610:	f000 f8f4 	bl	80097fc <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2219      	movs	r2, #25
 8009618:	2118      	movs	r1, #24
 800961a:	0018      	movs	r0, r3
 800961c:	f7ff ff56 	bl	80094cc <aBuff2int>
 8009620:	0003      	movs	r3, r0
 8009622:	001a      	movs	r2, r3
 8009624:	19bb      	adds	r3, r7, r6
 8009626:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	221c      	movs	r2, #28
 800962c:	211b      	movs	r1, #27
 800962e:	0018      	movs	r0, r3
 8009630:	f7ff ff4c 	bl	80094cc <aBuff2int>
 8009634:	0003      	movs	r3, r0
 8009636:	001a      	movs	r2, r3
 8009638:	19bb      	adds	r3, r7, r6
 800963a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	221f      	movs	r2, #31
 8009640:	211e      	movs	r1, #30
 8009642:	0018      	movs	r0, r3
 8009644:	f7ff ff42 	bl	80094cc <aBuff2int>
 8009648:	0003      	movs	r3, r0
 800964a:	001a      	movs	r2, r3
 800964c:	19bb      	adds	r3, r7, r6
 800964e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2224      	movs	r2, #36	@ 0x24
 8009654:	2123      	movs	r1, #35	@ 0x23
 8009656:	0018      	movs	r0, r3
 8009658:	f7ff ff38 	bl	80094cc <aBuff2int>
 800965c:	0003      	movs	r3, r0
 800965e:	001a      	movs	r2, r3
 8009660:	0025      	movs	r5, r4
 8009662:	197b      	adds	r3, r7, r5
 8009664:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2213      	movs	r2, #19
 800966a:	2111      	movs	r1, #17
 800966c:	0018      	movs	r0, r3
 800966e:	f7ff ff2d 	bl	80094cc <aBuff2int>
 8009672:	0003      	movs	r3, r0
 8009674:	001a      	movs	r2, r3
 8009676:	197b      	adds	r3, r7, r5
 8009678:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2216      	movs	r2, #22
 800967e:	2115      	movs	r1, #21
 8009680:	0018      	movs	r0, r3
 8009682:	f7ff ff23 	bl	80094cc <aBuff2int>
 8009686:	0003      	movs	r3, r0
 8009688:	001a      	movs	r2, r3
 800968a:	197b      	adds	r3, r7, r5
 800968c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	220f      	movs	r2, #15
 8009692:	210d      	movs	r1, #13
 8009694:	0018      	movs	r0, r3
 8009696:	f7ff ff19 	bl	80094cc <aBuff2int>
 800969a:	0003      	movs	r3, r0
 800969c:	001a      	movs	r2, r3
 800969e:	197b      	adds	r3, r7, r5
 80096a0:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80096a2:	19bb      	adds	r3, r7, r6
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	001c      	movs	r4, r3
 80096a8:	19bb      	adds	r3, r7, r6
 80096aa:	785b      	ldrb	r3, [r3, #1]
 80096ac:	0018      	movs	r0, r3
 80096ae:	19bb      	adds	r3, r7, r6
 80096b0:	789b      	ldrb	r3, [r3, #2]
 80096b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009724 <ParseTime+0x128>)
 80096b4:	491c      	ldr	r1, [pc, #112]	@ (8009728 <ParseTime+0x12c>)
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	9000      	str	r0, [sp, #0]
 80096ba:	0023      	movs	r3, r4
 80096bc:	2003      	movs	r0, #3
 80096be:	f009 fcf3 	bl	80130a8 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80096c2:	197b      	adds	r3, r7, r5
 80096c4:	789b      	ldrb	r3, [r3, #2]
 80096c6:	001c      	movs	r4, r3
 80096c8:	197b      	adds	r3, r7, r5
 80096ca:	785b      	ldrb	r3, [r3, #1]
 80096cc:	0018      	movs	r0, r3
 80096ce:	197b      	adds	r3, r7, r5
 80096d0:	78db      	ldrb	r3, [r3, #3]
 80096d2:	4a16      	ldr	r2, [pc, #88]	@ (800972c <ParseTime+0x130>)
 80096d4:	4914      	ldr	r1, [pc, #80]	@ (8009728 <ParseTime+0x12c>)
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	9000      	str	r0, [sp, #0]
 80096da:	0023      	movs	r3, r4
 80096dc:	2003      	movs	r0, #3
 80096de:	f009 fce3 	bl	80130a8 <CreateLine>
  RTC_SetTime(&currentTime);
 80096e2:	19bb      	adds	r3, r7, r6
 80096e4:	0018      	movs	r0, r3
 80096e6:	f000 f825 	bl	8009734 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80096ea:	197b      	adds	r3, r7, r5
 80096ec:	0018      	movs	r0, r3
 80096ee:	f000 f847 	bl	8009780 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80096f2:	197b      	adds	r3, r7, r5
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d101      	bne.n	80096fe <ParseTime+0x102>
    reset_fanCleaningDone();
 80096fa:	f004 fa35 	bl	800db68 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 80096fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009730 <ParseTime+0x134>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10a      	bne.n	800971c <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8009706:	230c      	movs	r3, #12
 8009708:	18fa      	adds	r2, r7, r3
 800970a:	2308      	movs	r3, #8
 800970c:	18fb      	adds	r3, r7, r3
 800970e:	0011      	movs	r1, r2
 8009710:	0018      	movs	r0, r3
 8009712:	f000 fa4b 	bl	8009bac <makeTime>
 8009716:	0002      	movs	r2, r0
 8009718:	4b05      	ldr	r3, [pc, #20]	@ (8009730 <ParseTime+0x134>)
 800971a:	601a      	str	r2, [r3, #0]
  }
}
 800971c:	46c0      	nop			@ (mov r8, r8)
 800971e:	46bd      	mov	sp, r7
 8009720:	b009      	add	sp, #36	@ 0x24
 8009722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009724:	0802b568 	.word	0x0802b568
 8009728:	0802b5a0 	.word	0x0802b5a0
 800972c:	0802b5a4 	.word	0x0802b5a4
 8009730:	20000b6c 	.word	0x20000b6c

08009734 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800974e:	4b09      	ldr	r3, [pc, #36]	@ (8009774 <RTC_SetTime+0x40>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6879      	ldr	r1, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	0018      	movs	r0, r3
 8009758:	f011 fe12 	bl	801b380 <HAL_RTC_SetTime>
 800975c:	1e03      	subs	r3, r0, #0
 800975e:	d005      	beq.n	800976c <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8009760:	4a05      	ldr	r2, [pc, #20]	@ (8009778 <RTC_SetTime+0x44>)
 8009762:	4b06      	ldr	r3, [pc, #24]	@ (800977c <RTC_SetTime+0x48>)
 8009764:	0019      	movs	r1, r3
 8009766:	2001      	movs	r0, #1
 8009768:	f009 fc9e 	bl	80130a8 <CreateLine>
    }
}
 800976c:	46c0      	nop			@ (mov r8, r8)
 800976e:	46bd      	mov	sp, r7
 8009770:	b002      	add	sp, #8
 8009772:	bd80      	pop	{r7, pc}
 8009774:	20000b68 	.word	0x20000b68
 8009778:	0802b5d8 	.word	0x0802b5d8
 800977c:	0802b5f4 	.word	0x0802b5f4

08009780 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8009788:	4b16      	ldr	r3, [pc, #88]	@ (80097e4 <RTC_SetDate+0x64>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	0018      	movs	r0, r3
 8009792:	f011 fefd 	bl	801b590 <HAL_RTC_SetDate>
 8009796:	1e03      	subs	r3, r0, #0
 8009798:	d005      	beq.n	80097a6 <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800979a:	4a13      	ldr	r2, [pc, #76]	@ (80097e8 <RTC_SetDate+0x68>)
 800979c:	4b13      	ldr	r3, [pc, #76]	@ (80097ec <RTC_SetDate+0x6c>)
 800979e:	0019      	movs	r1, r3
 80097a0:	2001      	movs	r0, #1
 80097a2:	f009 fc81 	bl	80130a8 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80097a6:	4b0f      	ldr	r3, [pc, #60]	@ (80097e4 <RTC_SetDate+0x64>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2101      	movs	r1, #1
 80097ac:	0018      	movs	r0, r3
 80097ae:	f012 fa35 	bl	801bc1c <HAL_RTCEx_BKUPRead>
 80097b2:	0003      	movs	r3, r0
 80097b4:	4a0e      	ldr	r2, [pc, #56]	@ (80097f0 <RTC_SetDate+0x70>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d010      	beq.n	80097dc <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80097ba:	4a0e      	ldr	r2, [pc, #56]	@ (80097f4 <RTC_SetDate+0x74>)
 80097bc:	4b0e      	ldr	r3, [pc, #56]	@ (80097f8 <RTC_SetDate+0x78>)
 80097be:	0019      	movs	r1, r3
 80097c0:	2003      	movs	r0, #3
 80097c2:	f009 fc71 	bl	80130a8 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80097c6:	f010 fd5b 	bl	801a280 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80097ca:	4b06      	ldr	r3, [pc, #24]	@ (80097e4 <RTC_SetDate+0x64>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a08      	ldr	r2, [pc, #32]	@ (80097f0 <RTC_SetDate+0x70>)
 80097d0:	2101      	movs	r1, #1
 80097d2:	0018      	movs	r0, r3
 80097d4:	f012 fa0a 	bl	801bbec <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80097d8:	f010 fd60 	bl	801a29c <HAL_PWR_DisableBkUpAccess>
    }
}
 80097dc:	46c0      	nop			@ (mov r8, r8)
 80097de:	46bd      	mov	sp, r7
 80097e0:	b002      	add	sp, #8
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000b68 	.word	0x20000b68
 80097e8:	0802b5f8 	.word	0x0802b5f8
 80097ec:	0802b5f4 	.word	0x0802b5f4
 80097f0:	0000bebe 	.word	0x0000bebe
 80097f4:	0802b614 	.word	0x0802b614
 80097f8:	0802b5a0 	.word	0x0802b5a0

080097fc <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80097fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8009806:	250f      	movs	r5, #15
 8009808:	197b      	adds	r3, r7, r5
 800980a:	2201      	movs	r2, #1
 800980c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800980e:	230e      	movs	r3, #14
 8009810:	18fb      	adds	r3, r7, r3
 8009812:	2200      	movs	r2, #0
 8009814:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8009816:	260c      	movs	r6, #12
 8009818:	19bc      	adds	r4, r7, r6
 800981a:	f008 fcbf 	bl	801219c <powerCheck>
 800981e:	0003      	movs	r3, r0
 8009820:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8009822:	19bb      	adds	r3, r7, r6
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d104      	bne.n	8009834 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800982a:	197b      	adds	r3, r7, r5
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	197b      	adds	r3, r7, r5
 8009830:	3201      	adds	r2, #1
 8009832:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8009834:	230d      	movs	r3, #13
 8009836:	18fb      	adds	r3, r7, r3
 8009838:	2200      	movs	r2, #0
 800983a:	701a      	strb	r2, [r3, #0]
 800983c:	e039      	b.n	80098b2 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800983e:	4b23      	ldr	r3, [pc, #140]	@ (80098cc <RTC_GetTime+0xd0>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6879      	ldr	r1, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	0018      	movs	r0, r3
 8009848:	f011 fe44 	bl	801b4d4 <HAL_RTC_GetTime>
 800984c:	1e03      	subs	r3, r0, #0
 800984e:	d005      	beq.n	800985c <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8009850:	4a1f      	ldr	r2, [pc, #124]	@ (80098d0 <RTC_GetTime+0xd4>)
 8009852:	4b20      	ldr	r3, [pc, #128]	@ (80098d4 <RTC_GetTime+0xd8>)
 8009854:	0019      	movs	r1, r3
 8009856:	2001      	movs	r0, #1
 8009858:	f009 fc26 	bl	80130a8 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800985c:	4b1b      	ldr	r3, [pc, #108]	@ (80098cc <RTC_GetTime+0xd0>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	2200      	movs	r2, #0
 8009864:	0018      	movs	r0, r3
 8009866:	f011 ff27 	bl	801b6b8 <HAL_RTC_GetDate>
 800986a:	1e03      	subs	r3, r0, #0
 800986c:	d005      	beq.n	800987a <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 800986e:	4a1a      	ldr	r2, [pc, #104]	@ (80098d8 <RTC_GetTime+0xdc>)
 8009870:	4b18      	ldr	r3, [pc, #96]	@ (80098d4 <RTC_GetTime+0xd8>)
 8009872:	0019      	movs	r1, r3
 8009874:	2001      	movs	r0, #1
 8009876:	f009 fc17 	bl	80130a8 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800987a:	230c      	movs	r3, #12
 800987c:	18fb      	adds	r3, r7, r3
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d110      	bne.n	80098a6 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	210e      	movs	r1, #14
 800988a:	187a      	adds	r2, r7, r1
 800988c:	7812      	ldrb	r2, [r2, #0]
 800988e:	429a      	cmp	r2, r3
 8009890:	d018      	beq.n	80098c4 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 8009892:	187b      	adds	r3, r7, r1
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	7812      	ldrb	r2, [r2, #0]
 8009898:	701a      	strb	r2, [r3, #0]
        t++;
 800989a:	210f      	movs	r1, #15
 800989c:	187b      	adds	r3, r7, r1
 800989e:	781a      	ldrb	r2, [r3, #0]
 80098a0:	187b      	adds	r3, r7, r1
 80098a2:	3201      	adds	r2, #1
 80098a4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80098a6:	210d      	movs	r1, #13
 80098a8:	187b      	adds	r3, r7, r1
 80098aa:	781a      	ldrb	r2, [r3, #0]
 80098ac:	187b      	adds	r3, r7, r1
 80098ae:	3201      	adds	r2, #1
 80098b0:	701a      	strb	r2, [r3, #0]
 80098b2:	230d      	movs	r3, #13
 80098b4:	18fa      	adds	r2, r7, r3
 80098b6:	230f      	movs	r3, #15
 80098b8:	18fb      	adds	r3, r7, r3
 80098ba:	7812      	ldrb	r2, [r2, #0]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d3bd      	bcc.n	800983e <RTC_GetTime+0x42>
 80098c2:	e000      	b.n	80098c6 <RTC_GetTime+0xca>
      }
      else {
        return;
 80098c4:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80098c6:	46bd      	mov	sp, r7
 80098c8:	b005      	add	sp, #20
 80098ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098cc:	20000b68 	.word	0x20000b68
 80098d0:	0802b62c 	.word	0x0802b62c
 80098d4:	0802b5f4 	.word	0x0802b5f4
 80098d8:	0802b648 	.word	0x0802b648

080098dc <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80098e2:	003a      	movs	r2, r7
 80098e4:	1d3b      	adds	r3, r7, #4
 80098e6:	0011      	movs	r1, r2
 80098e8:	0018      	movs	r0, r3
 80098ea:	f7ff ff87 	bl	80097fc <RTC_GetTime>
  return currentDate.WeekDay;
 80098ee:	003b      	movs	r3, r7
 80098f0:	781b      	ldrb	r3, [r3, #0]
}
 80098f2:	0018      	movs	r0, r3
 80098f4:	46bd      	mov	sp, r7
 80098f6:	b006      	add	sp, #24
 80098f8:	bd80      	pop	{r7, pc}

080098fa <getPosixTime>:

uint32_t getPosixTime(void) {
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b086      	sub	sp, #24
 80098fe:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009900:	003a      	movs	r2, r7
 8009902:	1d3b      	adds	r3, r7, #4
 8009904:	0011      	movs	r1, r2
 8009906:	0018      	movs	r0, r3
 8009908:	f7ff ff78 	bl	80097fc <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800990c:	1d3a      	adds	r2, r7, #4
 800990e:	003b      	movs	r3, r7
 8009910:	0011      	movs	r1, r2
 8009912:	0018      	movs	r0, r3
 8009914:	f000 f94a 	bl	8009bac <makeTime>
 8009918:	0003      	movs	r3, r0
}
 800991a:	0018      	movs	r0, r3
 800991c:	46bd      	mov	sp, r7
 800991e:	b006      	add	sp, #24
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8009924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009926:	b08d      	sub	sp, #52	@ 0x34
 8009928:	af04      	add	r7, sp, #16
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800992e:	240c      	movs	r4, #12
 8009930:	193a      	adds	r2, r7, r4
 8009932:	2508      	movs	r5, #8
 8009934:	1979      	adds	r1, r7, r5
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	0018      	movs	r0, r3
 800993a:	f000 fa01 	bl	8009d40 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800993e:	002a      	movs	r2, r5
 8009940:	18bb      	adds	r3, r7, r2
 8009942:	789b      	ldrb	r3, [r3, #2]
 8009944:	001e      	movs	r6, r3
 8009946:	18bb      	adds	r3, r7, r2
 8009948:	785b      	ldrb	r3, [r3, #1]
 800994a:	469c      	mov	ip, r3
 800994c:	18bb      	adds	r3, r7, r2
 800994e:	78db      	ldrb	r3, [r3, #3]
 8009950:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009952:	0021      	movs	r1, r4
 8009954:	187b      	adds	r3, r7, r1
 8009956:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009958:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800995a:	187b      	adds	r3, r7, r1
 800995c:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800995e:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009960:	187b      	adds	r3, r7, r1
 8009962:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009964:	4906      	ldr	r1, [pc, #24]	@ (8009980 <getUTCfromPosixTime+0x5c>)
 8009966:	6838      	ldr	r0, [r7, #0]
 8009968:	9303      	str	r3, [sp, #12]
 800996a:	9502      	str	r5, [sp, #8]
 800996c:	9401      	str	r4, [sp, #4]
 800996e:	9200      	str	r2, [sp, #0]
 8009970:	4663      	mov	r3, ip
 8009972:	0032      	movs	r2, r6
 8009974:	f01b fd04 	bl	8025380 <siprintf>
}
 8009978:	46c0      	nop			@ (mov r8, r8)
 800997a:	46bd      	mov	sp, r7
 800997c:	b009      	add	sp, #36	@ 0x24
 800997e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009980:	0802b664 	.word	0x0802b664

08009984 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800998c:	4b10      	ldr	r3, [pc, #64]	@ (80099d0 <RTC_SetWakeUpTimer+0x4c>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	0018      	movs	r0, r3
 8009992:	f012 f88f 	bl	801bab4 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8009996:	4b0e      	ldr	r3, [pc, #56]	@ (80099d0 <RTC_SetWakeUpTimer+0x4c>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	22ff      	movs	r2, #255	@ 0xff
 80099a0:	401a      	ands	r2, r3
 80099a2:	4b0b      	ldr	r3, [pc, #44]	@ (80099d0 <RTC_SetWakeUpTimer+0x4c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	490a      	ldr	r1, [pc, #40]	@ (80099d4 <RTC_SetWakeUpTimer+0x50>)
 80099aa:	430a      	orrs	r2, r1
 80099ac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80099ae:	4b0a      	ldr	r3, [pc, #40]	@ (80099d8 <RTC_SetWakeUpTimer+0x54>)
 80099b0:	2280      	movs	r2, #128	@ 0x80
 80099b2:	0352      	lsls	r2, r2, #13
 80099b4:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 80099b6:	4b06      	ldr	r3, [pc, #24]	@ (80099d0 <RTC_SetWakeUpTimer+0x4c>)
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3b01      	subs	r3, #1
 80099be:	2204      	movs	r2, #4
 80099c0:	0019      	movs	r1, r3
 80099c2:	f011 ff9f 	bl	801b904 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 80099c6:	46c0      	nop			@ (mov r8, r8)
 80099c8:	46bd      	mov	sp, r7
 80099ca:	b002      	add	sp, #8
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	46c0      	nop			@ (mov r8, r8)
 80099d0:	20000b68 	.word	0x20000b68
 80099d4:	fffffb7f 	.word	0xfffffb7f
 80099d8:	40010400 	.word	0x40010400

080099dc <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 80099e0:	4a0b      	ldr	r2, [pc, #44]	@ (8009a10 <Enter_Standby_Mode+0x34>)
 80099e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009a14 <Enter_Standby_Mode+0x38>)
 80099e4:	0019      	movs	r1, r3
 80099e6:	2003      	movs	r0, #3
 80099e8:	f009 fb5e 	bl	80130a8 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 80099ec:	2064      	movs	r0, #100	@ 0x64
 80099ee:	f00a f8a5 	bl	8013b3c <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80099f2:	4b09      	ldr	r3, [pc, #36]	@ (8009a18 <Enter_Standby_Mode+0x3c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	0018      	movs	r0, r3
 80099f8:	f012 f85c 	bl	801bab4 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 80099fc:	f002 f942 	bl	800bc84 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 8009a00:	f00a f8c0 	bl	8013b84 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 8009a04:	f010 fcb6 	bl	801a374 <HAL_PWR_EnterSTANDBYMode>
}
 8009a08:	46c0      	nop			@ (mov r8, r8)
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	46c0      	nop			@ (mov r8, r8)
 8009a10:	0802b6b8 	.word	0x0802b6b8
 8009a14:	0802b5a0 	.word	0x0802b5a0
 8009a18:	20000b68 	.word	0x20000b68

08009a1c <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af02      	add	r7, sp, #8
 8009a22:	0002      	movs	r2, r0
 8009a24:	1dbb      	adds	r3, r7, #6
 8009a26:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8009a28:	4b4e      	ldr	r3, [pc, #312]	@ (8009b64 <Enter_Stop_Mode+0x148>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8009a30:	f004 f86e 	bl	800db10 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8009a34:	f7ff fbac 	bl	8009190 <ReadBatteryVoltage>
 8009a38:	1c03      	adds	r3, r0, #0
 8009a3a:	1c18      	adds	r0, r3, #0
 8009a3c:	f7f9 ff2a 	bl	8003894 <__aeabi_f2d>
 8009a40:	0002      	movs	r2, r0
 8009a42:	000b      	movs	r3, r1
 8009a44:	4848      	ldr	r0, [pc, #288]	@ (8009b68 <Enter_Stop_Mode+0x14c>)
 8009a46:	4949      	ldr	r1, [pc, #292]	@ (8009b6c <Enter_Stop_Mode+0x150>)
 8009a48:	9200      	str	r2, [sp, #0]
 8009a4a:	9301      	str	r3, [sp, #4]
 8009a4c:	0002      	movs	r2, r0
 8009a4e:	2002      	movs	r0, #2
 8009a50:	f009 fb2a 	bl	80130a8 <CreateLine>
  powerDisplay(powerCheck());
 8009a54:	f008 fba2 	bl	801219c <powerCheck>
 8009a58:	0003      	movs	r3, r0
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f008 fbba 	bl	80121d4 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8009a60:	1dbb      	adds	r3, r7, #6
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	4a42      	ldr	r2, [pc, #264]	@ (8009b70 <Enter_Stop_Mode+0x154>)
 8009a66:	4943      	ldr	r1, [pc, #268]	@ (8009b74 <Enter_Stop_Mode+0x158>)
 8009a68:	2003      	movs	r0, #3
 8009a6a:	f009 fb1d 	bl	80130a8 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8009a6e:	f7ff ff44 	bl	80098fa <getPosixTime>
 8009a72:	0002      	movs	r2, r0
 8009a74:	1dbb      	adds	r3, r7, #6
 8009a76:	881b      	ldrh	r3, [r3, #0]
 8009a78:	18d3      	adds	r3, r2, r3
 8009a7a:	4a3f      	ldr	r2, [pc, #252]	@ (8009b78 <Enter_Stop_Mode+0x15c>)
 8009a7c:	0011      	movs	r1, r2
 8009a7e:	0018      	movs	r0, r3
 8009a80:	f7ff ff50 	bl	8009924 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8009a84:	4b3c      	ldr	r3, [pc, #240]	@ (8009b78 <Enter_Stop_Mode+0x15c>)
 8009a86:	4a3d      	ldr	r2, [pc, #244]	@ (8009b7c <Enter_Stop_Mode+0x160>)
 8009a88:	4938      	ldr	r1, [pc, #224]	@ (8009b6c <Enter_Stop_Mode+0x150>)
 8009a8a:	2002      	movs	r0, #2
 8009a8c:	f009 fb0c 	bl	80130a8 <CreateLine>
  HAL_Delay(100);
 8009a90:	2064      	movs	r0, #100	@ 0x64
 8009a92:	f00a f853 	bl	8013b3c <HAL_Delay>
  HAL_SuspendTick();
 8009a96:	f00a f875 	bl	8013b84 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8009a9a:	1dbb      	adds	r3, r7, #6
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	f7ff ff70 	bl	8009984 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	2001      	movs	r0, #1
 8009aa8:	f010 fc08 	bl	801a2bc <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8009aac:	f002 fd84 	bl	800c5b8 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8009ab0:	f00a f876 	bl	8013ba0 <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8009ab4:	1dbb      	adds	r3, r7, #6
 8009ab6:	881b      	ldrh	r3, [r3, #0]
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f003 ff9d 	bl	800d9f8 <sen5x_enable>
 8009abe:	1e03      	subs	r3, r0, #0
 8009ac0:	d01e      	beq.n	8009b00 <Enter_Stop_Mode+0xe4>
    showTime();
 8009ac2:	f7ff fc4b 	bl	800935c <showTime>
    set_light_on_state();
 8009ac6:	f004 fccb 	bl	800e460 <set_light_on_state>
    if (!userToggle) {
 8009aca:	4b2d      	ldr	r3, [pc, #180]	@ (8009b80 <Enter_Stop_Mode+0x164>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	4053      	eors	r3, r2
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d013      	beq.n	8009b00 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 8009ad8:	201c      	movs	r0, #28
 8009ada:	f7ff ff53 	bl	8009984 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8009ade:	4a24      	ldr	r2, [pc, #144]	@ (8009b70 <Enter_Stop_Mode+0x154>)
 8009ae0:	4924      	ldr	r1, [pc, #144]	@ (8009b74 <Enter_Stop_Mode+0x158>)
 8009ae2:	231c      	movs	r3, #28
 8009ae4:	2003      	movs	r0, #3
 8009ae6:	f009 fadf 	bl	80130a8 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009aea:	2101      	movs	r1, #1
 8009aec:	2001      	movs	r0, #1
 8009aee:	f010 fbe5 	bl	801a2bc <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8009af2:	f002 fd61 	bl	800c5b8 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8009af6:	f00a f853 	bl	8013ba0 <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 8009afa:	2000      	movs	r0, #0
 8009afc:	f003 ff5a 	bl	800d9b4 <setsen5xReadTimer>
    }
  }
  showTime();
 8009b00:	f7ff fc2c 	bl	800935c <showTime>
  EnabledConnectedDevices();
 8009b04:	f003 faf4 	bl	800d0f0 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 8009b08:	f003 fbee 	bl	800d2e8 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8009b0c:	f006 fb04 	bl	8010118 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 8009b10:	f7fa f814 	bl	8003b3c <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 8009b14:	2000      	movs	r0, #0
 8009b16:	f003 ff5f 	bl	800d9d8 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8009b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009b84 <Enter_Stop_Mode+0x168>)
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	f7fa feeb 	bl	80048f8 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 8009b22:	201e      	movs	r0, #30
 8009b24:	f006 fae6 	bl	80100f4 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 8009b28:	205a      	movs	r0, #90	@ 0x5a
 8009b2a:	f009 fd1b 	bl	8013564 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 8009b2e:	203c      	movs	r0, #60	@ 0x3c
 8009b30:	f000 fb98 	bl	800a264 <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 8009b34:	205a      	movs	r0, #90	@ 0x5a
 8009b36:	f000 ff3f 	bl	800a9b8 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	f7fa f808 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 8009b40:	2000      	movs	r0, #0
 8009b42:	f003 fbbf 	bl	800d2c4 <setMICTimeStamp>
  ESPTransmitDone = false;
 8009b46:	4b10      	ldr	r3, [pc, #64]	@ (8009b88 <Enter_Stop_Mode+0x16c>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 8009b4c:	f009 ffec 	bl	8013b28 <HAL_GetTick>
 8009b50:	0003      	movs	r3, r0
 8009b52:	4a0c      	ldr	r2, [pc, #48]	@ (8009b84 <Enter_Stop_Mode+0x168>)
 8009b54:	189a      	adds	r2, r3, r2
 8009b56:	4b0d      	ldr	r3, [pc, #52]	@ (8009b8c <Enter_Stop_Mode+0x170>)
 8009b58:	601a      	str	r2, [r3, #0]
}
 8009b5a:	46c0      	nop			@ (mov r8, r8)
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	b002      	add	sp, #8
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	46c0      	nop			@ (mov r8, r8)
 8009b64:	20000ecd 	.word	0x20000ecd
 8009b68:	0802b6dc 	.word	0x0802b6dc
 8009b6c:	0802b6f4 	.word	0x0802b6f4
 8009b70:	0802b6f8 	.word	0x0802b6f8
 8009b74:	0802b5a0 	.word	0x0802b5a0
 8009b78:	20000b70 	.word	0x20000b70
 8009b7c:	0802b71c 	.word	0x0802b71c
 8009b80:	20001e5e 	.word	0x20001e5e
 8009b84:	00001194 	.word	0x00001194
 8009b88:	200005a8 	.word	0x200005a8
 8009b8c:	20000e24 	.word	0x20000e24

08009b90 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8009b98:	4b03      	ldr	r3, [pc, #12]	@ (8009ba8 <InitClock+0x18>)
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	601a      	str	r2, [r3, #0]
}
 8009b9e:	46c0      	nop			@ (mov r8, r8)
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	b002      	add	sp, #8
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	46c0      	nop			@ (mov r8, r8)
 8009ba8:	20000b68 	.word	0x20000b68

08009bac <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	78db      	ldrb	r3, [r3, #3]
 8009bba:	001a      	movs	r2, r3
 8009bbc:	0013      	movs	r3, r2
 8009bbe:	025b      	lsls	r3, r3, #9
 8009bc0:	189b      	adds	r3, r3, r2
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	189b      	adds	r3, r3, r2
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	189b      	adds	r3, r3, r2
 8009bca:	011a      	lsls	r2, r3, #4
 8009bcc:	1ad2      	subs	r2, r2, r3
 8009bce:	01d3      	lsls	r3, r2, #7
 8009bd0:	001a      	movs	r2, r3
 8009bd2:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	e028      	b.n	8009c2c <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4a53      	ldr	r2, [pc, #332]	@ (8009d2c <makeTime+0x180>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	db21      	blt.n	8009c26 <makeTime+0x7a>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4a52      	ldr	r2, [pc, #328]	@ (8009d30 <makeTime+0x184>)
 8009be6:	4694      	mov	ip, r2
 8009be8:	4463      	add	r3, ip
 8009bea:	001a      	movs	r2, r3
 8009bec:	2303      	movs	r3, #3
 8009bee:	4013      	ands	r3, r2
 8009bf0:	d119      	bne.n	8009c26 <makeTime+0x7a>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8009d30 <makeTime+0x184>)
 8009bf6:	4694      	mov	ip, r2
 8009bf8:	4463      	add	r3, ip
 8009bfa:	2164      	movs	r1, #100	@ 0x64
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f7f6 fc41 	bl	8000484 <__aeabi_idivmod>
 8009c02:	1e0b      	subs	r3, r1, #0
 8009c04:	d10a      	bne.n	8009c1c <makeTime+0x70>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	4a49      	ldr	r2, [pc, #292]	@ (8009d30 <makeTime+0x184>)
 8009c0a:	4694      	mov	ip, r2
 8009c0c:	4463      	add	r3, ip
 8009c0e:	22c8      	movs	r2, #200	@ 0xc8
 8009c10:	0051      	lsls	r1, r2, #1
 8009c12:	0018      	movs	r0, r3
 8009c14:	f7f6 fc36 	bl	8000484 <__aeabi_idivmod>
 8009c18:	1e0b      	subs	r3, r1, #0
 8009c1a:	d104      	bne.n	8009c26 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	4a45      	ldr	r2, [pc, #276]	@ (8009d34 <makeTime+0x188>)
 8009c20:	4694      	mov	ip, r2
 8009c22:	4463      	add	r3, ip
 8009c24:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	78db      	ldrb	r3, [r3, #3]
 8009c30:	001a      	movs	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4293      	cmp	r3, r2
 8009c36:	dbd0      	blt.n	8009bda <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8009c38:	2301      	movs	r3, #1
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	e03c      	b.n	8009cb8 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d125      	bne.n	8009c90 <makeTime+0xe4>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	78db      	ldrb	r3, [r3, #3]
 8009c48:	4a39      	ldr	r2, [pc, #228]	@ (8009d30 <makeTime+0x184>)
 8009c4a:	4694      	mov	ip, r2
 8009c4c:	4463      	add	r3, ip
 8009c4e:	001a      	movs	r2, r3
 8009c50:	2303      	movs	r3, #3
 8009c52:	4013      	ands	r3, r2
 8009c54:	d11c      	bne.n	8009c90 <makeTime+0xe4>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	78db      	ldrb	r3, [r3, #3]
 8009c5a:	4a35      	ldr	r2, [pc, #212]	@ (8009d30 <makeTime+0x184>)
 8009c5c:	4694      	mov	ip, r2
 8009c5e:	4463      	add	r3, ip
 8009c60:	2164      	movs	r1, #100	@ 0x64
 8009c62:	0018      	movs	r0, r3
 8009c64:	f7f6 fc0e 	bl	8000484 <__aeabi_idivmod>
 8009c68:	1e0b      	subs	r3, r1, #0
 8009c6a:	d10b      	bne.n	8009c84 <makeTime+0xd8>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	78db      	ldrb	r3, [r3, #3]
 8009c70:	4a2f      	ldr	r2, [pc, #188]	@ (8009d30 <makeTime+0x184>)
 8009c72:	4694      	mov	ip, r2
 8009c74:	4463      	add	r3, ip
 8009c76:	22c8      	movs	r2, #200	@ 0xc8
 8009c78:	0051      	lsls	r1, r2, #1
 8009c7a:	0018      	movs	r0, r3
 8009c7c:	f7f6 fc02 	bl	8000484 <__aeabi_idivmod>
 8009c80:	1e0b      	subs	r3, r1, #0
 8009c82:	d105      	bne.n	8009c90 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	4a2c      	ldr	r2, [pc, #176]	@ (8009d38 <makeTime+0x18c>)
 8009c88:	4694      	mov	ip, r2
 8009c8a:	4463      	add	r3, ip
 8009c8c:	60bb      	str	r3, [r7, #8]
 8009c8e:	e010      	b.n	8009cb2 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	4a29      	ldr	r2, [pc, #164]	@ (8009d3c <makeTime+0x190>)
 8009c96:	5cd3      	ldrb	r3, [r2, r3]
 8009c98:	001a      	movs	r2, r3
 8009c9a:	0013      	movs	r3, r2
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	189b      	adds	r3, r3, r2
 8009ca0:	011a      	lsls	r2, r3, #4
 8009ca2:	1ad2      	subs	r2, r2, r3
 8009ca4:	0113      	lsls	r3, r2, #4
 8009ca6:	1a9b      	subs	r3, r3, r2
 8009ca8:	01db      	lsls	r3, r3, #7
 8009caa:	001a      	movs	r2, r3
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	189b      	adds	r3, r3, r2
 8009cb0:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	785b      	ldrb	r3, [r3, #1]
 8009cbc:	001a      	movs	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	dbbc      	blt.n	8009c3e <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	789b      	ldrb	r3, [r3, #2]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	001a      	movs	r2, r3
 8009ccc:	0013      	movs	r3, r2
 8009cce:	005b      	lsls	r3, r3, #1
 8009cd0:	189b      	adds	r3, r3, r2
 8009cd2:	011a      	lsls	r2, r3, #4
 8009cd4:	1ad2      	subs	r2, r2, r3
 8009cd6:	0113      	lsls	r3, r2, #4
 8009cd8:	1a9b      	subs	r3, r3, r2
 8009cda:	01db      	lsls	r3, r3, #7
 8009cdc:	001a      	movs	r2, r3
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	189b      	adds	r3, r3, r2
 8009ce2:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	001a      	movs	r2, r3
 8009cea:	0013      	movs	r3, r2
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	1a9b      	subs	r3, r3, r2
 8009cf0:	011a      	lsls	r2, r3, #4
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	0113      	lsls	r3, r2, #4
 8009cf6:	001a      	movs	r2, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	189b      	adds	r3, r3, r2
 8009cfc:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	785b      	ldrb	r3, [r3, #1]
 8009d02:	001a      	movs	r2, r3
 8009d04:	0013      	movs	r3, r2
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	001a      	movs	r2, r3
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	189b      	adds	r3, r3, r2
 8009d12:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	789b      	ldrb	r3, [r3, #2]
 8009d18:	001a      	movs	r2, r3
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	189b      	adds	r3, r3, r2
 8009d1e:	60bb      	str	r3, [r7, #8]
  return seconds;
 8009d20:	68bb      	ldr	r3, [r7, #8]
}
 8009d22:	0018      	movs	r0, r3
 8009d24:	46bd      	mov	sp, r7
 8009d26:	b004      	add	sp, #16
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	46c0      	nop			@ (mov r8, r8)
 8009d2c:	fffff84f 	.word	0xfffff84f
 8009d30:	000007b2 	.word	0x000007b2
 8009d34:	00015180 	.word	0x00015180
 8009d38:	00263b80 	.word	0x00263b80
 8009d3c:	0802d80c 	.word	0x0802d80c

08009d40 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009d40:	b590      	push	{r4, r7, lr}
 8009d42:	b089      	sub	sp, #36	@ 0x24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	213c      	movs	r1, #60	@ 0x3c
 8009d54:	0018      	movs	r0, r3
 8009d56:	f7f6 faab 	bl	80002b0 <__aeabi_uidivmod>
 8009d5a:	000b      	movs	r3, r1
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	213c      	movs	r1, #60	@ 0x3c
 8009d66:	0018      	movs	r0, r3
 8009d68:	f7f6 fa1c 	bl	80001a4 <__udivsi3>
 8009d6c:	0003      	movs	r3, r0
 8009d6e:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	213c      	movs	r1, #60	@ 0x3c
 8009d74:	0018      	movs	r0, r3
 8009d76:	f7f6 fa9b 	bl	80002b0 <__aeabi_uidivmod>
 8009d7a:	000b      	movs	r3, r1
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	213c      	movs	r1, #60	@ 0x3c
 8009d86:	0018      	movs	r0, r3
 8009d88:	f7f6 fa0c 	bl	80001a4 <__udivsi3>
 8009d8c:	0003      	movs	r3, r0
 8009d8e:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	2118      	movs	r1, #24
 8009d94:	0018      	movs	r0, r3
 8009d96:	f7f6 fa8b 	bl	80002b0 <__aeabi_uidivmod>
 8009d9a:	000b      	movs	r3, r1
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	2118      	movs	r1, #24
 8009da6:	0018      	movs	r0, r3
 8009da8:	f7f6 f9fc 	bl	80001a4 <__udivsi3>
 8009dac:	0003      	movs	r3, r0
 8009dae:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	3b01      	subs	r3, #1
 8009db4:	2107      	movs	r1, #7
 8009db6:	0018      	movs	r0, r3
 8009db8:	f7f6 fa7a 	bl	80002b0 <__aeabi_uidivmod>
 8009dbc:	000b      	movs	r3, r1
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	701a      	strb	r2, [r3, #0]
  year = 0;
 8009dc8:	231f      	movs	r3, #31
 8009dca:	18fb      	adds	r3, r7, r3
 8009dcc:	2200      	movs	r2, #0
 8009dce:	701a      	strb	r2, [r3, #0]
  days = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009dd4:	e005      	b.n	8009de2 <breakPosixTime+0xa2>
    year++;
 8009dd6:	211f      	movs	r1, #31
 8009dd8:	187b      	adds	r3, r7, r1
 8009dda:	781a      	ldrb	r2, [r3, #0]
 8009ddc:	187b      	adds	r3, r7, r1
 8009dde:	3201      	adds	r2, #1
 8009de0:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009de2:	241f      	movs	r4, #31
 8009de4:	193b      	adds	r3, r7, r4
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	4a64      	ldr	r2, [pc, #400]	@ (8009f7c <breakPosixTime+0x23c>)
 8009dea:	4694      	mov	ip, r2
 8009dec:	4463      	add	r3, ip
 8009dee:	001a      	movs	r2, r3
 8009df0:	2303      	movs	r3, #3
 8009df2:	4013      	ands	r3, r2
 8009df4:	d119      	bne.n	8009e2a <breakPosixTime+0xea>
 8009df6:	193b      	adds	r3, r7, r4
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	4a60      	ldr	r2, [pc, #384]	@ (8009f7c <breakPosixTime+0x23c>)
 8009dfc:	4694      	mov	ip, r2
 8009dfe:	4463      	add	r3, ip
 8009e00:	2164      	movs	r1, #100	@ 0x64
 8009e02:	0018      	movs	r0, r3
 8009e04:	f7f6 fb3e 	bl	8000484 <__aeabi_idivmod>
 8009e08:	1e0b      	subs	r3, r1, #0
 8009e0a:	d10b      	bne.n	8009e24 <breakPosixTime+0xe4>
 8009e0c:	193b      	adds	r3, r7, r4
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	4a5a      	ldr	r2, [pc, #360]	@ (8009f7c <breakPosixTime+0x23c>)
 8009e12:	4694      	mov	ip, r2
 8009e14:	4463      	add	r3, ip
 8009e16:	22c8      	movs	r2, #200	@ 0xc8
 8009e18:	0051      	lsls	r1, r2, #1
 8009e1a:	0018      	movs	r0, r3
 8009e1c:	f7f6 fb32 	bl	8000484 <__aeabi_idivmod>
 8009e20:	1e0b      	subs	r3, r1, #0
 8009e22:	d102      	bne.n	8009e2a <breakPosixTime+0xea>
 8009e24:	23b7      	movs	r3, #183	@ 0xb7
 8009e26:	005b      	lsls	r3, r3, #1
 8009e28:	e001      	b.n	8009e2e <breakPosixTime+0xee>
 8009e2a:	236e      	movs	r3, #110	@ 0x6e
 8009e2c:	33ff      	adds	r3, #255	@ 0xff
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	18d3      	adds	r3, r2, r3
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d9cc      	bls.n	8009dd6 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	241f      	movs	r4, #31
 8009e40:	193a      	adds	r2, r7, r4
 8009e42:	7812      	ldrb	r2, [r2, #0]
 8009e44:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8009e46:	193b      	adds	r3, r7, r4
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8009f7c <breakPosixTime+0x23c>)
 8009e4c:	4694      	mov	ip, r2
 8009e4e:	4463      	add	r3, ip
 8009e50:	001a      	movs	r2, r3
 8009e52:	2303      	movs	r3, #3
 8009e54:	4013      	ands	r3, r2
 8009e56:	d119      	bne.n	8009e8c <breakPosixTime+0x14c>
 8009e58:	193b      	adds	r3, r7, r4
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	4a47      	ldr	r2, [pc, #284]	@ (8009f7c <breakPosixTime+0x23c>)
 8009e5e:	4694      	mov	ip, r2
 8009e60:	4463      	add	r3, ip
 8009e62:	2164      	movs	r1, #100	@ 0x64
 8009e64:	0018      	movs	r0, r3
 8009e66:	f7f6 fb0d 	bl	8000484 <__aeabi_idivmod>
 8009e6a:	1e0b      	subs	r3, r1, #0
 8009e6c:	d10b      	bne.n	8009e86 <breakPosixTime+0x146>
 8009e6e:	193b      	adds	r3, r7, r4
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	4a42      	ldr	r2, [pc, #264]	@ (8009f7c <breakPosixTime+0x23c>)
 8009e74:	4694      	mov	ip, r2
 8009e76:	4463      	add	r3, ip
 8009e78:	22c8      	movs	r2, #200	@ 0xc8
 8009e7a:	0051      	lsls	r1, r2, #1
 8009e7c:	0018      	movs	r0, r3
 8009e7e:	f7f6 fb01 	bl	8000484 <__aeabi_idivmod>
 8009e82:	1e0b      	subs	r3, r1, #0
 8009e84:	d102      	bne.n	8009e8c <breakPosixTime+0x14c>
 8009e86:	23b7      	movs	r3, #183	@ 0xb7
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	e001      	b.n	8009e90 <breakPosixTime+0x150>
 8009e8c:	236e      	movs	r3, #110	@ 0x6e
 8009e8e:	33ff      	adds	r3, #255	@ 0xff
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	61bb      	str	r3, [r7, #24]

  days=0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	617b      	str	r3, [r7, #20]
  month=0;
 8009ea2:	211e      	movs	r1, #30
 8009ea4:	187b      	adds	r3, r7, r1
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8009eaa:	231d      	movs	r3, #29
 8009eac:	18fb      	adds	r3, r7, r3
 8009eae:	2200      	movs	r2, #0
 8009eb0:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8009eb2:	187b      	adds	r3, r7, r1
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	701a      	strb	r2, [r3, #0]
 8009eb8:	e048      	b.n	8009f4c <breakPosixTime+0x20c>
    if (month==1) { // february
 8009eba:	231e      	movs	r3, #30
 8009ebc:	18fb      	adds	r3, r7, r3
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d12a      	bne.n	8009f1a <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8009ec4:	241f      	movs	r4, #31
 8009ec6:	193b      	adds	r3, r7, r4
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	4a2c      	ldr	r2, [pc, #176]	@ (8009f7c <breakPosixTime+0x23c>)
 8009ecc:	4694      	mov	ip, r2
 8009ece:	4463      	add	r3, ip
 8009ed0:	001a      	movs	r2, r3
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	d11b      	bne.n	8009f10 <breakPosixTime+0x1d0>
 8009ed8:	193b      	adds	r3, r7, r4
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	4a27      	ldr	r2, [pc, #156]	@ (8009f7c <breakPosixTime+0x23c>)
 8009ede:	4694      	mov	ip, r2
 8009ee0:	4463      	add	r3, ip
 8009ee2:	2164      	movs	r1, #100	@ 0x64
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f7f6 facd 	bl	8000484 <__aeabi_idivmod>
 8009eea:	1e0b      	subs	r3, r1, #0
 8009eec:	d10b      	bne.n	8009f06 <breakPosixTime+0x1c6>
 8009eee:	193b      	adds	r3, r7, r4
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	4a22      	ldr	r2, [pc, #136]	@ (8009f7c <breakPosixTime+0x23c>)
 8009ef4:	4694      	mov	ip, r2
 8009ef6:	4463      	add	r3, ip
 8009ef8:	22c8      	movs	r2, #200	@ 0xc8
 8009efa:	0051      	lsls	r1, r2, #1
 8009efc:	0018      	movs	r0, r3
 8009efe:	f7f6 fac1 	bl	8000484 <__aeabi_idivmod>
 8009f02:	1e0b      	subs	r3, r1, #0
 8009f04:	d104      	bne.n	8009f10 <breakPosixTime+0x1d0>
        monthLength=29;
 8009f06:	231d      	movs	r3, #29
 8009f08:	18fb      	adds	r3, r7, r3
 8009f0a:	221d      	movs	r2, #29
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	e00c      	b.n	8009f2a <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8009f10:	231d      	movs	r3, #29
 8009f12:	18fb      	adds	r3, r7, r3
 8009f14:	221c      	movs	r2, #28
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	e007      	b.n	8009f2a <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8009f1a:	231e      	movs	r3, #30
 8009f1c:	18fb      	adds	r3, r7, r3
 8009f1e:	781a      	ldrb	r2, [r3, #0]
 8009f20:	231d      	movs	r3, #29
 8009f22:	18fb      	adds	r3, r7, r3
 8009f24:	4916      	ldr	r1, [pc, #88]	@ (8009f80 <breakPosixTime+0x240>)
 8009f26:	5c8a      	ldrb	r2, [r1, r2]
 8009f28:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8009f2a:	211d      	movs	r1, #29
 8009f2c:	187b      	adds	r3, r7, r1
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d310      	bcc.n	8009f58 <breakPosixTime+0x218>
      time -= monthLength;
 8009f36:	187b      	adds	r3, r7, r1
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8009f40:	211e      	movs	r1, #30
 8009f42:	187b      	adds	r3, r7, r1
 8009f44:	781a      	ldrb	r2, [r3, #0]
 8009f46:	187b      	adds	r3, r7, r1
 8009f48:	3201      	adds	r2, #1
 8009f4a:	701a      	strb	r2, [r3, #0]
 8009f4c:	231e      	movs	r3, #30
 8009f4e:	18fb      	adds	r3, r7, r3
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	2b0b      	cmp	r3, #11
 8009f54:	d9b1      	bls.n	8009eba <breakPosixTime+0x17a>
 8009f56:	e000      	b.n	8009f5a <breakPosixTime+0x21a>
    } else {
        break;
 8009f58:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8009f5a:	231e      	movs	r3, #30
 8009f5c:	18fb      	adds	r3, r7, r3
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	3301      	adds	r3, #1
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	709a      	strb	r2, [r3, #2]
}
 8009f74:	46c0      	nop			@ (mov r8, r8)
 8009f76:	46bd      	mov	sp, r7
 8009f78:	b009      	add	sp, #36	@ 0x24
 8009f7a:	bd90      	pop	{r4, r7, pc}
 8009f7c:	000007b2 	.word	0x000007b2
 8009f80:	0802d80c 	.word	0x0802d80c

08009f84 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009f8a:	003b      	movs	r3, r7
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	2308      	movs	r3, #8
 8009f90:	001a      	movs	r2, r3
 8009f92:	2100      	movs	r1, #0
 8009f94:	f01b fb5e 	bl	8025654 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8009f98:	4b30      	ldr	r3, [pc, #192]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009f9a:	4a31      	ldr	r2, [pc, #196]	@ (800a060 <MX_ADC_Init+0xdc>)
 8009f9c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8009f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8009fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fa6:	22c0      	movs	r2, #192	@ 0xc0
 8009fa8:	0612      	lsls	r2, r2, #24
 8009faa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8009fac:	4b2b      	ldr	r3, [pc, #172]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8009fb8:	4b28      	ldr	r3, [pc, #160]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fba:	2201      	movs	r2, #1
 8009fbc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009fbe:	4b27      	ldr	r3, [pc, #156]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8009fc4:	4b25      	ldr	r3, [pc, #148]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	2100      	movs	r1, #0
 8009fca:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8009fcc:	4b23      	ldr	r3, [pc, #140]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fce:	2221      	movs	r2, #33	@ 0x21
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009fd4:	4b21      	ldr	r3, [pc, #132]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009fda:	4b20      	ldr	r3, [pc, #128]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fdc:	22c2      	movs	r2, #194	@ 0xc2
 8009fde:	32ff      	adds	r2, #255	@ 0xff
 8009fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8009fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fe4:	222c      	movs	r2, #44	@ 0x2c
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009fea:	4b1c      	ldr	r3, [pc, #112]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009fec:	2204      	movs	r2, #4
 8009fee:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8009ff6:	4b19      	ldr	r3, [pc, #100]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8009ffc:	4b17      	ldr	r3, [pc, #92]	@ (800a05c <MX_ADC_Init+0xd8>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800a002:	4b16      	ldr	r3, [pc, #88]	@ (800a05c <MX_ADC_Init+0xd8>)
 800a004:	2200      	movs	r2, #0
 800a006:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800a008:	4b14      	ldr	r3, [pc, #80]	@ (800a05c <MX_ADC_Init+0xd8>)
 800a00a:	0018      	movs	r0, r3
 800a00c:	f009 fdf4 	bl	8013bf8 <HAL_ADC_Init>
 800a010:	1e03      	subs	r3, r0, #0
 800a012:	d001      	beq.n	800a018 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800a014:	f002 fc20 	bl	800c858 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800a018:	003b      	movs	r3, r7
 800a01a:	4a12      	ldr	r2, [pc, #72]	@ (800a064 <MX_ADC_Init+0xe0>)
 800a01c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a01e:	003b      	movs	r3, r7
 800a020:	2280      	movs	r2, #128	@ 0x80
 800a022:	0152      	lsls	r2, r2, #5
 800a024:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a026:	003a      	movs	r2, r7
 800a028:	4b0c      	ldr	r3, [pc, #48]	@ (800a05c <MX_ADC_Init+0xd8>)
 800a02a:	0011      	movs	r1, r2
 800a02c:	0018      	movs	r0, r3
 800a02e:	f00a f853 	bl	80140d8 <HAL_ADC_ConfigChannel>
 800a032:	1e03      	subs	r3, r0, #0
 800a034:	d001      	beq.n	800a03a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800a036:	f002 fc0f 	bl	800c858 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a03a:	003b      	movs	r3, r7
 800a03c:	4a0a      	ldr	r2, [pc, #40]	@ (800a068 <MX_ADC_Init+0xe4>)
 800a03e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a040:	003a      	movs	r2, r7
 800a042:	4b06      	ldr	r3, [pc, #24]	@ (800a05c <MX_ADC_Init+0xd8>)
 800a044:	0011      	movs	r1, r2
 800a046:	0018      	movs	r0, r3
 800a048:	f00a f846 	bl	80140d8 <HAL_ADC_ConfigChannel>
 800a04c:	1e03      	subs	r3, r0, #0
 800a04e:	d001      	beq.n	800a054 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800a050:	f002 fc02 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800a054:	46c0      	nop			@ (mov r8, r8)
 800a056:	46bd      	mov	sp, r7
 800a058:	b002      	add	sp, #8
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	20000b88 	.word	0x20000b88
 800a060:	40012400 	.word	0x40012400
 800a064:	38004000 	.word	0x38004000
 800a068:	3c008000 	.word	0x3c008000

0800a06c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b089      	sub	sp, #36	@ 0x24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a074:	240c      	movs	r4, #12
 800a076:	193b      	adds	r3, r7, r4
 800a078:	0018      	movs	r0, r3
 800a07a:	2314      	movs	r3, #20
 800a07c:	001a      	movs	r2, r3
 800a07e:	2100      	movs	r1, #0
 800a080:	f01b fae8 	bl	8025654 <memset>
  if(adcHandle->Instance==ADC1)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a14      	ldr	r2, [pc, #80]	@ (800a0dc <HAL_ADC_MspInit+0x70>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d121      	bne.n	800a0d2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a08e:	4b14      	ldr	r3, [pc, #80]	@ (800a0e0 <HAL_ADC_MspInit+0x74>)
 800a090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a092:	4b13      	ldr	r3, [pc, #76]	@ (800a0e0 <HAL_ADC_MspInit+0x74>)
 800a094:	2180      	movs	r1, #128	@ 0x80
 800a096:	0089      	lsls	r1, r1, #2
 800a098:	430a      	orrs	r2, r1
 800a09a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a09c:	4b10      	ldr	r3, [pc, #64]	@ (800a0e0 <HAL_ADC_MspInit+0x74>)
 800a09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e0 <HAL_ADC_MspInit+0x74>)
 800a0a2:	2104      	movs	r1, #4
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a0a8:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e0 <HAL_ADC_MspInit+0x74>)
 800a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ac:	2204      	movs	r2, #4
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	60bb      	str	r3, [r7, #8]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800a0b4:	193b      	adds	r3, r7, r4
 800a0b6:	2230      	movs	r2, #48	@ 0x30
 800a0b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a0ba:	193b      	adds	r3, r7, r4
 800a0bc:	2203      	movs	r2, #3
 800a0be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c0:	193b      	adds	r3, r7, r4
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0c6:	193b      	adds	r3, r7, r4
 800a0c8:	4a06      	ldr	r2, [pc, #24]	@ (800a0e4 <HAL_ADC_MspInit+0x78>)
 800a0ca:	0019      	movs	r1, r3
 800a0cc:	0010      	movs	r0, r2
 800a0ce:	f00a fe21 	bl	8014d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a0d2:	46c0      	nop			@ (mov r8, r8)
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	b009      	add	sp, #36	@ 0x24
 800a0d8:	bd90      	pop	{r4, r7, pc}
 800a0da:	46c0      	nop			@ (mov r8, r8)
 800a0dc:	40012400 	.word	0x40012400
 800a0e0:	40021000 	.word	0x40021000
 800a0e4:	50000800 	.word	0x50000800

0800a0e8 <ReadDirRegister>:
static uint8_t AHTerrors = 0;
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a0e8:	b590      	push	{r4, r7, lr}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6039      	str	r1, [r7, #0]
 800a0f0:	0011      	movs	r1, r2
 800a0f2:	1dfb      	adds	r3, r7, #7
 800a0f4:	1c02      	adds	r2, r0, #0
 800a0f6:	701a      	strb	r2, [r3, #0]
 800a0f8:	1dbb      	adds	r3, r7, #6
 800a0fa:	1c0a      	adds	r2, r1, #0
 800a0fc:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a128 <ReadDirRegister+0x40>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d00a      	beq.n	800a11c <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800a106:	4b08      	ldr	r3, [pc, #32]	@ (800a128 <ReadDirRegister+0x40>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	1dba      	adds	r2, r7, #6
 800a10c:	7814      	ldrb	r4, [r2, #0]
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	1dfa      	adds	r2, r7, #7
 800a112:	7810      	ldrb	r0, [r2, #0]
 800a114:	0022      	movs	r2, r4
 800a116:	4798      	blx	r3
 800a118:	0003      	movs	r3, r0
 800a11a:	e000      	b.n	800a11e <ReadDirRegister+0x36>
  }
  return false;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	0018      	movs	r0, r3
 800a120:	46bd      	mov	sp, r7
 800a122:	b003      	add	sp, #12
 800a124:	bd90      	pop	{r4, r7, pc}
 800a126:	46c0      	nop			@ (mov r8, r8)
 800a128:	20000bf0 	.word	0x20000bf0

0800a12c <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a12c:	b590      	push	{r4, r7, lr}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6039      	str	r1, [r7, #0]
 800a134:	0011      	movs	r1, r2
 800a136:	1dfb      	adds	r3, r7, #7
 800a138:	1c02      	adds	r2, r0, #0
 800a13a:	701a      	strb	r2, [r3, #0]
 800a13c:	1dbb      	adds	r3, r7, #6
 800a13e:	1c0a      	adds	r2, r1, #0
 800a140:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800a142:	4b0a      	ldr	r3, [pc, #40]	@ (800a16c <ReadRegister+0x40>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800a14a:	4b08      	ldr	r3, [pc, #32]	@ (800a16c <ReadRegister+0x40>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	1dba      	adds	r2, r7, #6
 800a150:	7814      	ldrb	r4, [r2, #0]
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	1dfa      	adds	r2, r7, #7
 800a156:	7810      	ldrb	r0, [r2, #0]
 800a158:	0022      	movs	r2, r4
 800a15a:	4798      	blx	r3
 800a15c:	0003      	movs	r3, r0
 800a15e:	e000      	b.n	800a162 <ReadRegister+0x36>
  }
  return false;
 800a160:	2300      	movs	r3, #0
}
 800a162:	0018      	movs	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	b003      	add	sp, #12
 800a168:	bd90      	pop	{r4, r7, pc}
 800a16a:	46c0      	nop			@ (mov r8, r8)
 800a16c:	20000be8 	.word	0x20000be8

0800a170 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a170:	b590      	push	{r4, r7, lr}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6039      	str	r1, [r7, #0]
 800a178:	0011      	movs	r1, r2
 800a17a:	1dfb      	adds	r3, r7, #7
 800a17c:	1c02      	adds	r2, r0, #0
 800a17e:	701a      	strb	r2, [r3, #0]
 800a180:	1dbb      	adds	r3, r7, #6
 800a182:	1c0a      	adds	r2, r1, #0
 800a184:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800a186:	4b0a      	ldr	r3, [pc, #40]	@ (800a1b0 <WriteRegister+0x40>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800a18e:	4b08      	ldr	r3, [pc, #32]	@ (800a1b0 <WriteRegister+0x40>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	1dba      	adds	r2, r7, #6
 800a194:	7814      	ldrb	r4, [r2, #0]
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	1dfa      	adds	r2, r7, #7
 800a19a:	7810      	ldrb	r0, [r2, #0]
 800a19c:	0022      	movs	r2, r4
 800a19e:	4798      	blx	r3
 800a1a0:	0003      	movs	r3, r0
 800a1a2:	e000      	b.n	800a1a6 <WriteRegister+0x36>
  }
  return false;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	b003      	add	sp, #12
 800a1ac:	bd90      	pop	{r4, r7, pc}
 800a1ae:	46c0      	nop			@ (mov r8, r8)
 800a1b0:	20000bec 	.word	0x20000bec

0800a1b4 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	000a      	movs	r2, r1
 800a1be:	1cfb      	adds	r3, r7, #3
 800a1c0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800a1c2:	230f      	movs	r3, #15
 800a1c4:	18fb      	adds	r3, r7, r3
 800a1c6:	22ff      	movs	r2, #255	@ 0xff
 800a1c8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800a1ca:	230e      	movs	r3, #14
 800a1cc:	18fb      	adds	r3, r7, r3
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]
 800a1d2:	e038      	b.n	800a246 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800a1d4:	230e      	movs	r3, #14
 800a1d6:	18fb      	adds	r3, r7, r3
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	18d3      	adds	r3, r2, r3
 800a1de:	7819      	ldrb	r1, [r3, #0]
 800a1e0:	220f      	movs	r2, #15
 800a1e2:	18bb      	adds	r3, r7, r2
 800a1e4:	18ba      	adds	r2, r7, r2
 800a1e6:	7812      	ldrb	r2, [r2, #0]
 800a1e8:	404a      	eors	r2, r1
 800a1ea:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800a1ec:	230d      	movs	r3, #13
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	701a      	strb	r2, [r3, #0]
 800a1f4:	e01c      	b.n	800a230 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800a1f6:	210f      	movs	r1, #15
 800a1f8:	187b      	adds	r3, r7, r1
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	b25b      	sxtb	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	da0a      	bge.n	800a218 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800a202:	187b      	adds	r3, r7, r1
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	b25b      	sxtb	r3, r3
 800a208:	18db      	adds	r3, r3, r3
 800a20a:	b25b      	sxtb	r3, r3
 800a20c:	2231      	movs	r2, #49	@ 0x31
 800a20e:	4053      	eors	r3, r2
 800a210:	b25a      	sxtb	r2, r3
 800a212:	187b      	adds	r3, r7, r1
 800a214:	701a      	strb	r2, [r3, #0]
 800a216:	e005      	b.n	800a224 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800a218:	230f      	movs	r3, #15
 800a21a:	18fa      	adds	r2, r7, r3
 800a21c:	18fb      	adds	r3, r7, r3
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	18db      	adds	r3, r3, r3
 800a222:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800a224:	210d      	movs	r1, #13
 800a226:	187b      	adds	r3, r7, r1
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	187b      	adds	r3, r7, r1
 800a22c:	3201      	adds	r2, #1
 800a22e:	701a      	strb	r2, [r3, #0]
 800a230:	230d      	movs	r3, #13
 800a232:	18fb      	adds	r3, r7, r3
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	2b07      	cmp	r3, #7
 800a238:	d9dd      	bls.n	800a1f6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800a23a:	210e      	movs	r1, #14
 800a23c:	187b      	adds	r3, r7, r1
 800a23e:	781a      	ldrb	r2, [r3, #0]
 800a240:	187b      	adds	r3, r7, r1
 800a242:	3201      	adds	r2, #1
 800a244:	701a      	strb	r2, [r3, #0]
 800a246:	230e      	movs	r3, #14
 800a248:	18fa      	adds	r2, r7, r3
 800a24a:	1cfb      	adds	r3, r7, #3
 800a24c:	7812      	ldrb	r2, [r2, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	d3bf      	bcc.n	800a1d4 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800a254:	230f      	movs	r3, #15
 800a256:	18fb      	adds	r3, r7, r3
 800a258:	781b      	ldrb	r3, [r3, #0]
}
 800a25a:	0018      	movs	r0, r3
 800a25c:	46bd      	mov	sp, r7
 800a25e:	b004      	add	sp, #16
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800a26c:	f009 fc5c 	bl	8013b28 <HAL_GetTick>
 800a270:	0002      	movs	r2, r0
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	18d2      	adds	r2, r2, r3
 800a276:	4b03      	ldr	r3, [pc, #12]	@ (800a284 <setAHT20TimeStamp+0x20>)
 800a278:	601a      	str	r2, [r3, #0]
}
 800a27a:	46c0      	nop			@ (mov r8, r8)
 800a27c:	46bd      	mov	sp, r7
 800a27e:	b002      	add	sp, #8
 800a280:	bd80      	pop	{r7, pc}
 800a282:	46c0      	nop			@ (mov r8, r8)
 800a284:	20000be4 	.word	0x20000be4

0800a288 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800a294:	4b06      	ldr	r3, [pc, #24]	@ (800a2b0 <AHT_Init+0x28>)
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800a29a:	4b06      	ldr	r3, [pc, #24]	@ (800a2b4 <AHT_Init+0x2c>)
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800a2a0:	4b05      	ldr	r3, [pc, #20]	@ (800a2b8 <AHT_Init+0x30>)
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	601a      	str	r2, [r3, #0]
}
 800a2a6:	46c0      	nop			@ (mov r8, r8)
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	b004      	add	sp, #16
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	46c0      	nop			@ (mov r8, r8)
 800a2b0:	20000bf0 	.word	0x20000bf0
 800a2b4:	20000be8 	.word	0x20000be8
 800a2b8:	20000bec 	.word	0x20000bec

0800a2bc <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af02      	add	r7, sp, #8
 800a2c2:	0002      	movs	r2, r0
 800a2c4:	1dfb      	adds	r3, r7, #7
 800a2c6:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800a2c8:	4b18      	ldr	r3, [pc, #96]	@ (800a32c <AHT20_register_reset+0x70>)
 800a2ca:	1dfa      	adds	r2, r7, #7
 800a2cc:	7812      	ldrb	r2, [r2, #0]
 800a2ce:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800a2d0:	4b16      	ldr	r3, [pc, #88]	@ (800a32c <AHT20_register_reset+0x70>)
 800a2d2:	2203      	movs	r2, #3
 800a2d4:	0019      	movs	r1, r3
 800a2d6:	2038      	movs	r0, #56	@ 0x38
 800a2d8:	f7ff ff4a 	bl	800a170 <WriteRegister>
  HAL_Delay(15);
 800a2dc:	200f      	movs	r0, #15
 800a2de:	f009 fc2d 	bl	8013b3c <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a2e2:	4b13      	ldr	r3, [pc, #76]	@ (800a330 <AHT20_register_reset+0x74>)
 800a2e4:	2203      	movs	r2, #3
 800a2e6:	0019      	movs	r1, r3
 800a2e8:	2038      	movs	r0, #56	@ 0x38
 800a2ea:	f7ff ff1f 	bl	800a12c <ReadRegister>
  HAL_Delay(15);
 800a2ee:	200f      	movs	r0, #15
 800a2f0:	f009 fc24 	bl	8013b3c <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800a2f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a330 <AHT20_register_reset+0x74>)
 800a2f6:	22b0      	movs	r2, #176	@ 0xb0
 800a2f8:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800a2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a330 <AHT20_register_reset+0x74>)
 800a2fc:	789b      	ldrb	r3, [r3, #2]
 800a2fe:	0018      	movs	r0, r3
 800a300:	4b0b      	ldr	r3, [pc, #44]	@ (800a330 <AHT20_register_reset+0x74>)
 800a302:	78db      	ldrb	r3, [r3, #3]
 800a304:	4a0b      	ldr	r2, [pc, #44]	@ (800a334 <AHT20_register_reset+0x78>)
 800a306:	490c      	ldr	r1, [pc, #48]	@ (800a338 <AHT20_register_reset+0x7c>)
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	0003      	movs	r3, r0
 800a30c:	2003      	movs	r0, #3
 800a30e:	f008 fecb 	bl	80130a8 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a312:	4b07      	ldr	r3, [pc, #28]	@ (800a330 <AHT20_register_reset+0x74>)
 800a314:	2203      	movs	r2, #3
 800a316:	0019      	movs	r1, r3
 800a318:	2038      	movs	r0, #56	@ 0x38
 800a31a:	f7ff ff29 	bl	800a170 <WriteRegister>
  HAL_Delay(15);
 800a31e:	200f      	movs	r0, #15
 800a320:	f009 fc0c 	bl	8013b3c <HAL_Delay>
}
 800a324:	46c0      	nop			@ (mov r8, r8)
 800a326:	46bd      	mov	sp, r7
 800a328:	b002      	add	sp, #8
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	20000090 	.word	0x20000090
 800a330:	20000bf4 	.word	0x20000bf4
 800a334:	0802b73c 	.word	0x0802b73c
 800a338:	0802b78c 	.word	0x0802b78c

0800a33c <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800a340:	201b      	movs	r0, #27
 800a342:	f7ff ffbb 	bl	800a2bc <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800a346:	201c      	movs	r0, #28
 800a348:	f7ff ffb8 	bl	800a2bc <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800a34c:	201e      	movs	r0, #30
 800a34e:	f7ff ffb5 	bl	800a2bc <AHT20_register_reset>
}
 800a352:	46c0      	nop			@ (mov r8, r8)
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800a35c:	4b0c      	ldr	r3, [pc, #48]	@ (800a390 <AHT20_read_status+0x38>)
 800a35e:	2201      	movs	r2, #1
 800a360:	0019      	movs	r1, r3
 800a362:	2038      	movs	r0, #56	@ 0x38
 800a364:	f7ff ff04 	bl	800a170 <WriteRegister>
  HAL_Delay(10);
 800a368:	200a      	movs	r0, #10
 800a36a:	f009 fbe7 	bl	8013b3c <HAL_Delay>
  airtemphumraw[0] = 0;
 800a36e:	4b09      	ldr	r3, [pc, #36]	@ (800a394 <AHT20_read_status+0x3c>)
 800a370:	2200      	movs	r2, #0
 800a372:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800a374:	4b07      	ldr	r3, [pc, #28]	@ (800a394 <AHT20_read_status+0x3c>)
 800a376:	2201      	movs	r2, #1
 800a378:	0019      	movs	r1, r3
 800a37a:	2038      	movs	r0, #56	@ 0x38
 800a37c:	f7ff fed6 	bl	800a12c <ReadRegister>
  HAL_Delay(10);
 800a380:	200a      	movs	r0, #10
 800a382:	f009 fbdb 	bl	8013b3c <HAL_Delay>
  return airtemphumraw[0];
 800a386:	4b03      	ldr	r3, [pc, #12]	@ (800a394 <AHT20_read_status+0x3c>)
 800a388:	781b      	ldrb	r3, [r3, #0]
}
 800a38a:	0018      	movs	r0, r3
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	2000008c 	.word	0x2000008c
 800a394:	20000bf4 	.word	0x20000bf4

0800a398 <AHT20_init>:

bool AHT20_init(void) {
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800a39e:	f009 fbc3 	bl	8013b28 <HAL_GetTick>
 800a3a2:	0003      	movs	r3, r0
 800a3a4:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b77      	cmp	r3, #119	@ 0x77
 800a3aa:	d805      	bhi.n	800a3b8 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2278      	movs	r2, #120	@ 0x78
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	f009 fbc2 	bl	8013b3c <HAL_Delay>
  }
  AHT20_read_status();
 800a3b8:	f7ff ffce 	bl	800a358 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800a3bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a3f8 <AHT20_init+0x60>)
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	4a0e      	ldr	r2, [pc, #56]	@ (800a3fc <AHT20_init+0x64>)
 800a3c2:	490f      	ldr	r1, [pc, #60]	@ (800a400 <AHT20_init+0x68>)
 800a3c4:	2003      	movs	r0, #3
 800a3c6:	f008 fe6f 	bl	80130a8 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800a3ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a3f8 <AHT20_init+0x60>)
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	001a      	movs	r2, r3
 800a3d0:	2318      	movs	r3, #24
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	2b18      	cmp	r3, #24
 800a3d6:	d00a      	beq.n	800a3ee <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800a3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a404 <AHT20_init+0x6c>)
 800a3da:	2203      	movs	r2, #3
 800a3dc:	0019      	movs	r1, r3
 800a3de:	2038      	movs	r0, #56	@ 0x38
 800a3e0:	f7ff fec6 	bl	800a170 <WriteRegister>
    HAL_Delay(10);
 800a3e4:	200a      	movs	r0, #10
 800a3e6:	f009 fba9 	bl	8013b3c <HAL_Delay>
    AHT20_Start_Init();
 800a3ea:	f7ff ffa7 	bl	800a33c <AHT20_Start_Init>
  }
  return true;
 800a3ee:	2301      	movs	r3, #1
}
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	b002      	add	sp, #8
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	20000bf4 	.word	0x20000bf4
 800a3fc:	0802b790 	.word	0x0802b790
 800a400:	0802b78c 	.word	0x0802b78c
 800a404:	20000084 	.word	0x20000084

0800a408 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800a40e:	1dfc      	adds	r4, r7, #7
 800a410:	4b10      	ldr	r3, [pc, #64]	@ (800a454 <AHT20_calibrate+0x4c>)
 800a412:	2201      	movs	r2, #1
 800a414:	0019      	movs	r1, r3
 800a416:	2038      	movs	r0, #56	@ 0x38
 800a418:	f7ff feaa 	bl	800a170 <WriteRegister>
 800a41c:	0003      	movs	r3, r0
 800a41e:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800a420:	1dfb      	adds	r3, r7, #7
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2201      	movs	r2, #1
 800a426:	4053      	eors	r3, r2
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d005      	beq.n	800a43a <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800a42e:	4a0a      	ldr	r2, [pc, #40]	@ (800a458 <AHT20_calibrate+0x50>)
 800a430:	4b0a      	ldr	r3, [pc, #40]	@ (800a45c <AHT20_calibrate+0x54>)
 800a432:	0019      	movs	r1, r3
 800a434:	2001      	movs	r0, #1
 800a436:	f008 fe37 	bl	80130a8 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800a43a:	f009 fb75 	bl	8013b28 <HAL_GetTick>
 800a43e:	0003      	movs	r3, r0
 800a440:	3332      	adds	r3, #50	@ 0x32
 800a442:	001a      	movs	r2, r3
 800a444:	4b06      	ldr	r3, [pc, #24]	@ (800a460 <AHT20_calibrate+0x58>)
 800a446:	601a      	str	r2, [r3, #0]
  return response;
 800a448:	1dfb      	adds	r3, r7, #7
 800a44a:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800a44c:	0018      	movs	r0, r3
 800a44e:	46bd      	mov	sp, r7
 800a450:	b003      	add	sp, #12
 800a452:	bd90      	pop	{r4, r7, pc}
 800a454:	2000008c 	.word	0x2000008c
 800a458:	0802b7b8 	.word	0x0802b7b8
 800a45c:	0802b7f0 	.word	0x0802b7f0
 800a460:	20000be4 	.word	0x20000be4

0800a464 <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800a464:	b580      	push	{r7, lr}
 800a466:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800a468:	4a0a      	ldr	r2, [pc, #40]	@ (800a494 <AHT20_DeviceConnected+0x30>)
 800a46a:	4b0b      	ldr	r3, [pc, #44]	@ (800a498 <AHT20_DeviceConnected+0x34>)
 800a46c:	0019      	movs	r1, r3
 800a46e:	2003      	movs	r0, #3
 800a470:	f008 fe1a 	bl	80130a8 <CreateLine>
   AHT20_init();
 800a474:	f7ff ff90 	bl	800a398 <AHT20_init>
   HAL_Delay(10);
 800a478:	200a      	movs	r0, #10
 800a47a:	f009 fb5f 	bl	8013b3c <HAL_Delay>
   AHT20_calibrate();
 800a47e:	f7ff ffc3 	bl	800a408 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800a482:	f7ff ff69 	bl	800a358 <AHT20_read_status>
 800a486:	0003      	movs	r3, r0
 800a488:	1e5a      	subs	r2, r3, #1
 800a48a:	4193      	sbcs	r3, r2
 800a48c:	b2db      	uxtb	r3, r3
 }
 800a48e:	0018      	movs	r0, r3
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	0802b7f4 	.word	0x0802b7f4
 800a498:	0802b78c 	.word	0x0802b78c

0800a49c <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800a49c:	b590      	push	{r4, r7, lr}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800a4a2:	1dfc      	adds	r4, r7, #7
 800a4a4:	4b10      	ldr	r3, [pc, #64]	@ (800a4e8 <AHT20_StartMeasurement+0x4c>)
 800a4a6:	2203      	movs	r2, #3
 800a4a8:	0019      	movs	r1, r3
 800a4aa:	2038      	movs	r0, #56	@ 0x38
 800a4ac:	f7ff fe60 	bl	800a170 <WriteRegister>
 800a4b0:	0003      	movs	r3, r0
 800a4b2:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800a4b4:	1dfb      	adds	r3, r7, #7
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	4053      	eors	r3, r2
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d005      	beq.n	800a4ce <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800a4c2:	4a0a      	ldr	r2, [pc, #40]	@ (800a4ec <AHT20_StartMeasurement+0x50>)
 800a4c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f0 <AHT20_StartMeasurement+0x54>)
 800a4c6:	0019      	movs	r1, r3
 800a4c8:	2001      	movs	r0, #1
 800a4ca:	f008 fded 	bl	80130a8 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800a4ce:	f009 fb2b 	bl	8013b28 <HAL_GetTick>
 800a4d2:	0003      	movs	r3, r0
 800a4d4:	33fa      	adds	r3, #250	@ 0xfa
 800a4d6:	001a      	movs	r2, r3
 800a4d8:	4b06      	ldr	r3, [pc, #24]	@ (800a4f4 <AHT20_StartMeasurement+0x58>)
 800a4da:	601a      	str	r2, [r3, #0]
  return response;
 800a4dc:	1dfb      	adds	r3, r7, #7
 800a4de:	781b      	ldrb	r3, [r3, #0]
}
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	b003      	add	sp, #12
 800a4e6:	bd90      	pop	{r4, r7, pc}
 800a4e8:	20000088 	.word	0x20000088
 800a4ec:	0802b80c 	.word	0x0802b80c
 800a4f0:	0802b7f0 	.word	0x0802b7f0
 800a4f4:	20000be4 	.word	0x20000be4

0800a4f8 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800a4f8:	b590      	push	{r4, r7, lr}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800a4fe:	f009 fb13 	bl	8013b28 <HAL_GetTick>
 800a502:	0003      	movs	r3, r0
 800a504:	22fa      	movs	r2, #250	@ 0xfa
 800a506:	0092      	lsls	r2, r2, #2
 800a508:	189a      	adds	r2, r3, r2
 800a50a:	4b2c      	ldr	r3, [pc, #176]	@ (800a5bc <AHT20_GetMeasurementValues+0xc4>)
 800a50c:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a50e:	e01f      	b.n	800a550 <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800a510:	4a2b      	ldr	r2, [pc, #172]	@ (800a5c0 <AHT20_GetMeasurementValues+0xc8>)
 800a512:	4b2c      	ldr	r3, [pc, #176]	@ (800a5c4 <AHT20_GetMeasurementValues+0xcc>)
 800a514:	0019      	movs	r1, r3
 800a516:	2002      	movs	r0, #2
 800a518:	f008 fdc6 	bl	80130a8 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800a51c:	4b27      	ldr	r3, [pc, #156]	@ (800a5bc <AHT20_GetMeasurementValues+0xc4>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	0018      	movs	r0, r3
 800a522:	f008 fd6b 	bl	8012ffc <TimestampIsReached>
 800a526:	1e03      	subs	r3, r0, #0
 800a528:	d00f      	beq.n	800a54a <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800a52a:	4a27      	ldr	r2, [pc, #156]	@ (800a5c8 <AHT20_GetMeasurementValues+0xd0>)
 800a52c:	4b27      	ldr	r3, [pc, #156]	@ (800a5cc <AHT20_GetMeasurementValues+0xd4>)
 800a52e:	0019      	movs	r1, r3
 800a530:	2001      	movs	r0, #1
 800a532:	f008 fdb9 	bl	80130a8 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800a536:	f009 faf7 	bl	8013b28 <HAL_GetTick>
 800a53a:	0003      	movs	r3, r0
 800a53c:	22fa      	movs	r2, #250	@ 0xfa
 800a53e:	00d2      	lsls	r2, r2, #3
 800a540:	189a      	adds	r2, r3, r2
 800a542:	4b1e      	ldr	r3, [pc, #120]	@ (800a5bc <AHT20_GetMeasurementValues+0xc4>)
 800a544:	601a      	str	r2, [r3, #0]
      return false;
 800a546:	2300      	movs	r3, #0
 800a548:	e034      	b.n	800a5b4 <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800a54a:	200a      	movs	r0, #10
 800a54c:	f009 faf6 	bl	8013b3c <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a550:	f7ff ff02 	bl	800a358 <AHT20_read_status>
 800a554:	0003      	movs	r3, r0
 800a556:	001a      	movs	r2, r3
 800a558:	2380      	movs	r3, #128	@ 0x80
 800a55a:	4013      	ands	r3, r2
 800a55c:	2b80      	cmp	r3, #128	@ 0x80
 800a55e:	d0d7      	beq.n	800a510 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800a560:	200a      	movs	r0, #10
 800a562:	f009 faeb 	bl	8013b3c <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800a566:	1dfb      	adds	r3, r7, #7
 800a568:	2200      	movs	r2, #0
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	e009      	b.n	800a582 <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800a56e:	1dfb      	adds	r3, r7, #7
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	4a17      	ldr	r2, [pc, #92]	@ (800a5d0 <AHT20_GetMeasurementValues+0xd8>)
 800a574:	2100      	movs	r1, #0
 800a576:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800a578:	1dfb      	adds	r3, r7, #7
 800a57a:	781a      	ldrb	r2, [r3, #0]
 800a57c:	1dfb      	adds	r3, r7, #7
 800a57e:	3201      	adds	r2, #1
 800a580:	701a      	strb	r2, [r3, #0]
 800a582:	1dfb      	adds	r3, r7, #7
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b06      	cmp	r3, #6
 800a588:	d9f1      	bls.n	800a56e <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800a58a:	1dbc      	adds	r4, r7, #6
 800a58c:	4b10      	ldr	r3, [pc, #64]	@ (800a5d0 <AHT20_GetMeasurementValues+0xd8>)
 800a58e:	2207      	movs	r2, #7
 800a590:	0019      	movs	r1, r3
 800a592:	2038      	movs	r0, #56	@ 0x38
 800a594:	f7ff fda8 	bl	800a0e8 <ReadDirRegister>
 800a598:	0003      	movs	r3, r0
 800a59a:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800a59c:	200a      	movs	r0, #10
 800a59e:	f009 facd 	bl	8013b3c <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800a5a2:	f009 fac1 	bl	8013b28 <HAL_GetTick>
 800a5a6:	0003      	movs	r3, r0
 800a5a8:	3364      	adds	r3, #100	@ 0x64
 800a5aa:	001a      	movs	r2, r3
 800a5ac:	4b03      	ldr	r3, [pc, #12]	@ (800a5bc <AHT20_GetMeasurementValues+0xc4>)
 800a5ae:	601a      	str	r2, [r3, #0]
  return response;
 800a5b0:	1dbb      	adds	r3, r7, #6
 800a5b2:	781b      	ldrb	r3, [r3, #0]
}
 800a5b4:	0018      	movs	r0, r3
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	b003      	add	sp, #12
 800a5ba:	bd90      	pop	{r4, r7, pc}
 800a5bc:	20000be4 	.word	0x20000be4
 800a5c0:	0802b838 	.word	0x0802b838
 800a5c4:	0802b860 	.word	0x0802b860
 800a5c8:	0802b864 	.word	0x0802b864
 800a5cc:	0802b7f0 	.word	0x0802b7f0
 800a5d0:	20000bf4 	.word	0x20000bf4

0800a5d4 <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800a5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5d6:	46c6      	mov	lr, r8
 800a5d8:	b500      	push	{lr}
 800a5da:	b08a      	sub	sp, #40	@ 0x28
 800a5dc:	af06      	add	r7, sp, #24
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800a5e2:	4b5a      	ldr	r3, [pc, #360]	@ (800a74c <AHT20_Calculate+0x178>)
 800a5e4:	799c      	ldrb	r4, [r3, #6]
 800a5e6:	4b59      	ldr	r3, [pc, #356]	@ (800a74c <AHT20_Calculate+0x178>)
 800a5e8:	2106      	movs	r1, #6
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	f7ff fde2 	bl	800a1b4 <CalculateCRC>
 800a5f0:	0003      	movs	r3, r0
 800a5f2:	429c      	cmp	r4, r3
 800a5f4:	d044      	beq.n	800a680 <AHT20_Calculate+0xac>
 800a5f6:	4b55      	ldr	r3, [pc, #340]	@ (800a74c <AHT20_Calculate+0x178>)
 800a5f8:	799b      	ldrb	r3, [r3, #6]
 800a5fa:	2bff      	cmp	r3, #255	@ 0xff
 800a5fc:	d040      	beq.n	800a680 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800a5fe:	4b53      	ldr	r3, [pc, #332]	@ (800a74c <AHT20_Calculate+0x178>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	4698      	mov	r8, r3
 800a604:	4b51      	ldr	r3, [pc, #324]	@ (800a74c <AHT20_Calculate+0x178>)
 800a606:	785b      	ldrb	r3, [r3, #1]
 800a608:	0018      	movs	r0, r3
 800a60a:	4b50      	ldr	r3, [pc, #320]	@ (800a74c <AHT20_Calculate+0x178>)
 800a60c:	789b      	ldrb	r3, [r3, #2]
 800a60e:	001c      	movs	r4, r3
 800a610:	4b4e      	ldr	r3, [pc, #312]	@ (800a74c <AHT20_Calculate+0x178>)
 800a612:	78db      	ldrb	r3, [r3, #3]
 800a614:	001d      	movs	r5, r3
 800a616:	4b4d      	ldr	r3, [pc, #308]	@ (800a74c <AHT20_Calculate+0x178>)
 800a618:	791b      	ldrb	r3, [r3, #4]
 800a61a:	001e      	movs	r6, r3
 800a61c:	4b4b      	ldr	r3, [pc, #300]	@ (800a74c <AHT20_Calculate+0x178>)
 800a61e:	795b      	ldrb	r3, [r3, #5]
 800a620:	469c      	mov	ip, r3
 800a622:	4b4a      	ldr	r3, [pc, #296]	@ (800a74c <AHT20_Calculate+0x178>)
 800a624:	799b      	ldrb	r3, [r3, #6]
 800a626:	4a4a      	ldr	r2, [pc, #296]	@ (800a750 <AHT20_Calculate+0x17c>)
 800a628:	494a      	ldr	r1, [pc, #296]	@ (800a754 <AHT20_Calculate+0x180>)
 800a62a:	9305      	str	r3, [sp, #20]
 800a62c:	4663      	mov	r3, ip
 800a62e:	9304      	str	r3, [sp, #16]
 800a630:	9603      	str	r6, [sp, #12]
 800a632:	9502      	str	r5, [sp, #8]
 800a634:	9401      	str	r4, [sp, #4]
 800a636:	9000      	str	r0, [sp, #0]
 800a638:	4643      	mov	r3, r8
 800a63a:	2003      	movs	r0, #3
 800a63c:	f008 fd34 	bl	80130a8 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800a640:	4b42      	ldr	r3, [pc, #264]	@ (800a74c <AHT20_Calculate+0x178>)
 800a642:	799b      	ldrb	r3, [r3, #6]
 800a644:	001c      	movs	r4, r3
 800a646:	4b41      	ldr	r3, [pc, #260]	@ (800a74c <AHT20_Calculate+0x178>)
 800a648:	2106      	movs	r1, #6
 800a64a:	0018      	movs	r0, r3
 800a64c:	f7ff fdb2 	bl	800a1b4 <CalculateCRC>
 800a650:	0003      	movs	r3, r0
 800a652:	4a41      	ldr	r2, [pc, #260]	@ (800a758 <AHT20_Calculate+0x184>)
 800a654:	4941      	ldr	r1, [pc, #260]	@ (800a75c <AHT20_Calculate+0x188>)
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	0023      	movs	r3, r4
 800a65a:	2001      	movs	r0, #1
 800a65c:	f008 fd24 	bl	80130a8 <CreateLine>
    *airtemp = 0.0;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800a66c:	f009 fa5c 	bl	8013b28 <HAL_GetTick>
 800a670:	0003      	movs	r3, r0
 800a672:	22fa      	movs	r2, #250	@ 0xfa
 800a674:	00d2      	lsls	r2, r2, #3
 800a676:	189a      	adds	r2, r3, r2
 800a678:	4b39      	ldr	r3, [pc, #228]	@ (800a760 <AHT20_Calculate+0x18c>)
 800a67a:	601a      	str	r2, [r3, #0]
    return false;
 800a67c:	2300      	movs	r3, #0
 800a67e:	e05f      	b.n	800a740 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800a680:	4b38      	ldr	r3, [pc, #224]	@ (800a764 <AHT20_Calculate+0x190>)
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800a686:	4b31      	ldr	r3, [pc, #196]	@ (800a74c <AHT20_Calculate+0x178>)
 800a688:	78db      	ldrb	r3, [r3, #3]
 800a68a:	041a      	lsls	r2, r3, #16
 800a68c:	23f0      	movs	r3, #240	@ 0xf0
 800a68e:	031b      	lsls	r3, r3, #12
 800a690:	401a      	ands	r2, r3
 800a692:	4b2e      	ldr	r3, [pc, #184]	@ (800a74c <AHT20_Calculate+0x178>)
 800a694:	791b      	ldrb	r3, [r3, #4]
 800a696:	021b      	lsls	r3, r3, #8
 800a698:	18d3      	adds	r3, r2, r3
 800a69a:	4a2c      	ldr	r2, [pc, #176]	@ (800a74c <AHT20_Calculate+0x178>)
 800a69c:	7952      	ldrb	r2, [r2, #5]
 800a69e:	189b      	adds	r3, r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7f7 f910 	bl	80018c8 <__aeabi_ui2f>
 800a6a8:	1c03      	adds	r3, r0, #0
 800a6aa:	2193      	movs	r1, #147	@ 0x93
 800a6ac:	05c9      	lsls	r1, r1, #23
 800a6ae:	1c18      	adds	r0, r3, #0
 800a6b0:	f7f6 faf8 	bl	8000ca4 <__aeabi_fdiv>
 800a6b4:	1c03      	adds	r3, r0, #0
 800a6b6:	492c      	ldr	r1, [pc, #176]	@ (800a768 <AHT20_Calculate+0x194>)
 800a6b8:	1c18      	adds	r0, r3, #0
 800a6ba:	f7f6 fcc1 	bl	8001040 <__aeabi_fmul>
 800a6be:	1c03      	adds	r3, r0, #0
 800a6c0:	492a      	ldr	r1, [pc, #168]	@ (800a76c <AHT20_Calculate+0x198>)
 800a6c2:	1c18      	adds	r0, r3, #0
 800a6c4:	f7f6 fe16 	bl	80012f4 <__aeabi_fsub>
 800a6c8:	1c03      	adds	r3, r0, #0
 800a6ca:	1c1a      	adds	r2, r3, #0
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800a6d0:	4b1e      	ldr	r3, [pc, #120]	@ (800a74c <AHT20_Calculate+0x178>)
 800a6d2:	785b      	ldrb	r3, [r3, #1]
 800a6d4:	031a      	lsls	r2, r3, #12
 800a6d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a74c <AHT20_Calculate+0x178>)
 800a6d8:	789b      	ldrb	r3, [r3, #2]
 800a6da:	011b      	lsls	r3, r3, #4
 800a6dc:	18d3      	adds	r3, r2, r3
 800a6de:	4a1b      	ldr	r2, [pc, #108]	@ (800a74c <AHT20_Calculate+0x178>)
 800a6e0:	78d2      	ldrb	r2, [r2, #3]
 800a6e2:	0912      	lsrs	r2, r2, #4
 800a6e4:	b2d2      	uxtb	r2, r2
 800a6e6:	189b      	adds	r3, r3, r2
 800a6e8:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800a6ea:	68b8      	ldr	r0, [r7, #8]
 800a6ec:	f7f7 f8ec 	bl	80018c8 <__aeabi_ui2f>
 800a6f0:	1c03      	adds	r3, r0, #0
 800a6f2:	2193      	movs	r1, #147	@ 0x93
 800a6f4:	05c9      	lsls	r1, r1, #23
 800a6f6:	1c18      	adds	r0, r3, #0
 800a6f8:	f7f6 fad4 	bl	8000ca4 <__aeabi_fdiv>
 800a6fc:	1c03      	adds	r3, r0, #0
 800a6fe:	491c      	ldr	r1, [pc, #112]	@ (800a770 <AHT20_Calculate+0x19c>)
 800a700:	1c18      	adds	r0, r3, #0
 800a702:	f7f6 fc9d 	bl	8001040 <__aeabi_fmul>
 800a706:	1c03      	adds	r3, r0, #0
 800a708:	1c1a      	adds	r2, r3, #0
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	1c18      	adds	r0, r3, #0
 800a714:	f7f9 f8be 	bl	8003894 <__aeabi_f2d>
 800a718:	0004      	movs	r4, r0
 800a71a:	000d      	movs	r5, r1
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	1c18      	adds	r0, r3, #0
 800a722:	f7f9 f8b7 	bl	8003894 <__aeabi_f2d>
 800a726:	0002      	movs	r2, r0
 800a728:	000b      	movs	r3, r1
 800a72a:	4812      	ldr	r0, [pc, #72]	@ (800a774 <AHT20_Calculate+0x1a0>)
 800a72c:	4909      	ldr	r1, [pc, #36]	@ (800a754 <AHT20_Calculate+0x180>)
 800a72e:	9202      	str	r2, [sp, #8]
 800a730:	9303      	str	r3, [sp, #12]
 800a732:	9400      	str	r4, [sp, #0]
 800a734:	9501      	str	r5, [sp, #4]
 800a736:	0002      	movs	r2, r0
 800a738:	2003      	movs	r0, #3
 800a73a:	f008 fcb5 	bl	80130a8 <CreateLine>
  return true;
 800a73e:	2301      	movs	r3, #1
}
 800a740:	0018      	movs	r0, r3
 800a742:	46bd      	mov	sp, r7
 800a744:	b004      	add	sp, #16
 800a746:	bc80      	pop	{r7}
 800a748:	46b8      	mov	r8, r7
 800a74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a74c:	20000bf4 	.word	0x20000bf4
 800a750:	0802b888 	.word	0x0802b888
 800a754:	0802b78c 	.word	0x0802b78c
 800a758:	0802b908 	.word	0x0802b908
 800a75c:	0802b7f0 	.word	0x0802b7f0
 800a760:	20000be4 	.word	0x20000be4
 800a764:	20000bfb 	.word	0x20000bfb
 800a768:	43480000 	.word	0x43480000
 800a76c:	42480000 	.word	0x42480000
 800a770:	42c80000 	.word	0x42c80000
 800a774:	0802b930 	.word	0x0802b930

0800a778 <AHT_Upkeep>:
  AHT20TimeStamp = HAL_GetTick() + 50;
  calibrated = false;
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
}

AHT20State AHT_Upkeep(void) {
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800a77e:	4b54      	ldr	r3, [pc, #336]	@ (800a8d0 <AHT_Upkeep+0x158>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	0018      	movs	r0, r3
 800a784:	f008 fc3a 	bl	8012ffc <TimestampIsReached>
 800a788:	0003      	movs	r3, r0
 800a78a:	001a      	movs	r2, r3
 800a78c:	2301      	movs	r3, #1
 800a78e:	4053      	eors	r3, r2
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	d002      	beq.n	800a79c <AHT_Upkeep+0x24>
    return AHTState;
 800a796:	4b4f      	ldr	r3, [pc, #316]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	e094      	b.n	800a8c6 <AHT_Upkeep+0x14e>
  }
  switch(AHTState) {
 800a79c:	4b4d      	ldr	r3, [pc, #308]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b05      	cmp	r3, #5
 800a7a2:	d86a      	bhi.n	800a87a <AHT_Upkeep+0x102>
 800a7a4:	009a      	lsls	r2, r3, #2
 800a7a6:	4b4c      	ldr	r3, [pc, #304]	@ (800a8d8 <AHT_Upkeep+0x160>)
 800a7a8:	18d3      	adds	r3, r2, r3
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800a7ae:	4a4b      	ldr	r2, [pc, #300]	@ (800a8dc <AHT_Upkeep+0x164>)
 800a7b0:	4b4b      	ldr	r3, [pc, #300]	@ (800a8e0 <AHT_Upkeep+0x168>)
 800a7b2:	0019      	movs	r1, r3
 800a7b4:	2003      	movs	r0, #3
 800a7b6:	f008 fc77 	bl	80130a8 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800a7ba:	f009 f9b5 	bl	8013b28 <HAL_GetTick>
 800a7be:	0003      	movs	r3, r0
 800a7c0:	4a48      	ldr	r2, [pc, #288]	@ (800a8e4 <AHT_Upkeep+0x16c>)
 800a7c2:	189a      	adds	r2, r3, r2
 800a7c4:	4b42      	ldr	r3, [pc, #264]	@ (800a8d0 <AHT_Upkeep+0x158>)
 800a7c6:	601a      	str	r2, [r3, #0]
    break;
 800a7c8:	e07b      	b.n	800a8c2 <AHT_Upkeep+0x14a>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800a7ca:	f002 fd23 	bl	800d214 <getSensorLock>
 800a7ce:	1e03      	subs	r3, r0, #0
 800a7d0:	d000      	beq.n	800a7d4 <AHT_Upkeep+0x5c>
 800a7d2:	e071      	b.n	800a8b8 <AHT_Upkeep+0x140>
      break;
    }
    setSensorLock(AHT20);
 800a7d4:	2002      	movs	r0, #2
 800a7d6:	f002 fd09 	bl	800d1ec <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800a7da:	f7ff fe5f 	bl	800a49c <AHT20_StartMeasurement>
 800a7de:	0003      	movs	r3, r0
 800a7e0:	001a      	movs	r2, r3
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	4053      	eors	r3, r2
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <AHT_Upkeep+0x7c>
      AHTState = AHT20_ERROR;
 800a7ec:	4b39      	ldr	r3, [pc, #228]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a7ee:	22ff      	movs	r2, #255	@ 0xff
 800a7f0:	701a      	strb	r2, [r3, #0]
 800a7f2:	e002      	b.n	800a7fa <AHT_Upkeep+0x82>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800a7f4:	4b37      	ldr	r3, [pc, #220]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800a7fa:	200a      	movs	r0, #10
 800a7fc:	f009 f99e 	bl	8013b3c <HAL_Delay>
    break;
 800a800:	e05f      	b.n	800a8c2 <AHT_Upkeep+0x14a>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800a802:	f7ff fe79 	bl	800a4f8 <AHT20_GetMeasurementValues>
 800a806:	1e03      	subs	r3, r0, #0
 800a808:	d058      	beq.n	800a8bc <AHT_Upkeep+0x144>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800a80a:	200a      	movs	r0, #10
 800a80c:	f009 f996 	bl	8013b3c <HAL_Delay>
      setSensorLock(FREE);
 800a810:	2000      	movs	r0, #0
 800a812:	f002 fceb 	bl	800d1ec <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800a816:	4b2f      	ldr	r3, [pc, #188]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a818:	2203      	movs	r2, #3
 800a81a:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800a81c:	e04e      	b.n	800a8bc <AHT_Upkeep+0x144>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800a81e:	003a      	movs	r2, r7
 800a820:	1d3b      	adds	r3, r7, #4
 800a822:	0011      	movs	r1, r2
 800a824:	0018      	movs	r0, r3
 800a826:	f7ff fed5 	bl	800a5d4 <AHT20_Calculate>
 800a82a:	0003      	movs	r3, r0
 800a82c:	001a      	movs	r2, r3
 800a82e:	2301      	movs	r3, #1
 800a830:	4053      	eors	r3, r2
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	d005      	beq.n	800a844 <AHT_Upkeep+0xcc>
      AHTState = AHT20_ERROR;
 800a838:	4b26      	ldr	r3, [pc, #152]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a83a:	22ff      	movs	r2, #255	@ 0xff
 800a83c:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800a83e:	4b25      	ldr	r3, [pc, #148]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	e040      	b.n	800a8c6 <AHT_Upkeep+0x14e>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	1c11      	adds	r1, r2, #0
 800a84a:	1c18      	adds	r0, r3, #0
 800a84c:	f7fa f91a 	bl	8004a84 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	1c11      	adds	r1, r2, #0
 800a856:	1c18      	adds	r0, r3, #0
 800a858:	f7f9 fdca 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800a85c:	4b1d      	ldr	r3, [pc, #116]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a85e:	2205      	movs	r2, #5
 800a860:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800a862:	f009 f961 	bl	8013b28 <HAL_GetTick>
 800a866:	0003      	movs	r3, r0
 800a868:	4a1f      	ldr	r2, [pc, #124]	@ (800a8e8 <AHT_Upkeep+0x170>)
 800a86a:	189a      	adds	r2, r3, r2
 800a86c:	4b18      	ldr	r3, [pc, #96]	@ (800a8d0 <AHT_Upkeep+0x158>)
 800a86e:	601a      	str	r2, [r3, #0]
    break;
 800a870:	e027      	b.n	800a8c2 <AHT_Upkeep+0x14a>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a872:	4b18      	ldr	r3, [pc, #96]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a874:	2201      	movs	r2, #1
 800a876:	701a      	strb	r2, [r3, #0]
  break;
 800a878:	e023      	b.n	800a8c2 <AHT_Upkeep+0x14a>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a87a:	4b16      	ldr	r3, [pc, #88]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a87c:	2201      	movs	r2, #1
 800a87e:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800a880:	f002 fcc8 	bl	800d214 <getSensorLock>
 800a884:	0003      	movs	r3, r0
 800a886:	2b02      	cmp	r3, #2
 800a888:	d102      	bne.n	800a890 <AHT_Upkeep+0x118>
      setSensorLock(FREE);
 800a88a:	2000      	movs	r0, #0
 800a88c:	f002 fcae 	bl	800d1ec <setSensorLock>
    }
    AHTerrors++;
 800a890:	4b16      	ldr	r3, [pc, #88]	@ (800a8ec <AHT_Upkeep+0x174>)
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	3301      	adds	r3, #1
 800a896:	b2da      	uxtb	r2, r3
 800a898:	4b14      	ldr	r3, [pc, #80]	@ (800a8ec <AHT_Upkeep+0x174>)
 800a89a:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800a89c:	4b13      	ldr	r3, [pc, #76]	@ (800a8ec <AHT_Upkeep+0x174>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b19      	cmp	r3, #25
 800a8a2:	d90d      	bls.n	800a8c0 <AHT_Upkeep+0x148>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800a8a4:	4a12      	ldr	r2, [pc, #72]	@ (800a8f0 <AHT_Upkeep+0x178>)
 800a8a6:	4b13      	ldr	r3, [pc, #76]	@ (800a8f4 <AHT_Upkeep+0x17c>)
 800a8a8:	0019      	movs	r1, r3
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	f008 fbfc 	bl	80130a8 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800a8b0:	4b08      	ldr	r3, [pc, #32]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a8b6:	e003      	b.n	800a8c0 <AHT_Upkeep+0x148>
      break;
 800a8b8:	46c0      	nop			@ (mov r8, r8)
 800a8ba:	e002      	b.n	800a8c2 <AHT_Upkeep+0x14a>
    break;
 800a8bc:	46c0      	nop			@ (mov r8, r8)
 800a8be:	e000      	b.n	800a8c2 <AHT_Upkeep+0x14a>
    break;
 800a8c0:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800a8c2:	4b04      	ldr	r3, [pc, #16]	@ (800a8d4 <AHT_Upkeep+0x15c>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
}
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	b002      	add	sp, #8
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	46c0      	nop			@ (mov r8, r8)
 800a8d0:	20000be4 	.word	0x20000be4
 800a8d4:	20000093 	.word	0x20000093
 800a8d8:	0802d818 	.word	0x0802d818
 800a8dc:	0802b964 	.word	0x0802b964
 800a8e0:	0802b78c 	.word	0x0802b78c
 800a8e4:	000dbba0 	.word	0x000dbba0
 800a8e8:	0000ea60 	.word	0x0000ea60
 800a8ec:	20000bfb 	.word	0x20000bfb
 800a8f0:	0802b98c 	.word	0x0802b98c
 800a8f4:	0802b7f0 	.word	0x0802b7f0

0800a8f8 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	af02      	add	r7, sp, #8
 800a8fe:	0004      	movs	r4, r0
 800a900:	0008      	movs	r0, r1
 800a902:	60ba      	str	r2, [r7, #8]
 800a904:	0019      	movs	r1, r3
 800a906:	260e      	movs	r6, #14
 800a908:	19bb      	adds	r3, r7, r6
 800a90a:	1c22      	adds	r2, r4, #0
 800a90c:	801a      	strh	r2, [r3, #0]
 800a90e:	230c      	movs	r3, #12
 800a910:	18fb      	adds	r3, r7, r3
 800a912:	1c02      	adds	r2, r0, #0
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	1dbb      	adds	r3, r7, #6
 800a918:	1c0a      	adds	r2, r1, #0
 800a91a:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800a91c:	4b0c      	ldr	r3, [pc, #48]	@ (800a950 <WriteMemRegister+0x58>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d010      	beq.n	800a946 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a924:	4b0a      	ldr	r3, [pc, #40]	@ (800a950 <WriteMemRegister+0x58>)
 800a926:	681c      	ldr	r4, [r3, #0]
 800a928:	4b0a      	ldr	r3, [pc, #40]	@ (800a954 <WriteMemRegister+0x5c>)
 800a92a:	7818      	ldrb	r0, [r3, #0]
 800a92c:	68bd      	ldr	r5, [r7, #8]
 800a92e:	230c      	movs	r3, #12
 800a930:	18fb      	adds	r3, r7, r3
 800a932:	881a      	ldrh	r2, [r3, #0]
 800a934:	19bb      	adds	r3, r7, r6
 800a936:	8819      	ldrh	r1, [r3, #0]
 800a938:	1dbb      	adds	r3, r7, #6
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	002b      	movs	r3, r5
 800a940:	47a0      	blx	r4
 800a942:	0003      	movs	r3, r0
 800a944:	e000      	b.n	800a948 <WriteMemRegister+0x50>
  }
  return false;
 800a946:	2300      	movs	r3, #0
}
 800a948:	0018      	movs	r0, r3
 800a94a:	46bd      	mov	sp, r7
 800a94c:	b005      	add	sp, #20
 800a94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a950:	20000bfc 	.word	0x20000bfc
 800a954:	20000094 	.word	0x20000094

0800a958 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a95a:	b087      	sub	sp, #28
 800a95c:	af02      	add	r7, sp, #8
 800a95e:	0004      	movs	r4, r0
 800a960:	0008      	movs	r0, r1
 800a962:	60ba      	str	r2, [r7, #8]
 800a964:	0019      	movs	r1, r3
 800a966:	260e      	movs	r6, #14
 800a968:	19bb      	adds	r3, r7, r6
 800a96a:	1c22      	adds	r2, r4, #0
 800a96c:	801a      	strh	r2, [r3, #0]
 800a96e:	230c      	movs	r3, #12
 800a970:	18fb      	adds	r3, r7, r3
 800a972:	1c02      	adds	r2, r0, #0
 800a974:	801a      	strh	r2, [r3, #0]
 800a976:	1dbb      	adds	r3, r7, #6
 800a978:	1c0a      	adds	r2, r1, #0
 800a97a:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800a97c:	4b0c      	ldr	r3, [pc, #48]	@ (800a9b0 <ReadMemRegister+0x58>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d010      	beq.n	800a9a6 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a984:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b0 <ReadMemRegister+0x58>)
 800a986:	681c      	ldr	r4, [r3, #0]
 800a988:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b4 <ReadMemRegister+0x5c>)
 800a98a:	7818      	ldrb	r0, [r3, #0]
 800a98c:	68bd      	ldr	r5, [r7, #8]
 800a98e:	230c      	movs	r3, #12
 800a990:	18fb      	adds	r3, r7, r3
 800a992:	881a      	ldrh	r2, [r3, #0]
 800a994:	19bb      	adds	r3, r7, r6
 800a996:	8819      	ldrh	r1, [r3, #0]
 800a998:	1dbb      	adds	r3, r7, #6
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	002b      	movs	r3, r5
 800a9a0:	47a0      	blx	r4
 800a9a2:	0003      	movs	r3, r0
 800a9a4:	e000      	b.n	800a9a8 <ReadMemRegister+0x50>
  }
  return false;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	0018      	movs	r0, r3
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	b005      	add	sp, #20
 800a9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b0:	20000c00 	.word	0x20000c00
 800a9b4:	20000094 	.word	0x20000094

0800a9b8 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800a9c0:	f009 f8b2 	bl	8013b28 <HAL_GetTick>
 800a9c4:	0002      	movs	r2, r0
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	18d2      	adds	r2, r2, r3
 800a9ca:	4b03      	ldr	r3, [pc, #12]	@ (800a9d8 <setBMP280TimeStamp+0x20>)
 800a9cc:	601a      	str	r2, [r3, #0]
}
 800a9ce:	46c0      	nop			@ (mov r8, r8)
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	b002      	add	sp, #8
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	46c0      	nop			@ (mov r8, r8)
 800a9d8:	20000c28 	.word	0x20000c28

0800a9dc <BMP280_reset>:

static void BMP280_reset() {
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800a9e2:	1dfb      	adds	r3, r7, #7
 800a9e4:	22b6      	movs	r2, #182	@ 0xb6
 800a9e6:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800a9e8:	1dfa      	adds	r2, r7, #7
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	20e0      	movs	r0, #224	@ 0xe0
 800a9f0:	f7ff ff82 	bl	800a8f8 <WriteMemRegister>
  Info("BMP280 has been reset");
 800a9f4:	4a06      	ldr	r2, [pc, #24]	@ (800aa10 <BMP280_reset+0x34>)
 800a9f6:	4b07      	ldr	r3, [pc, #28]	@ (800aa14 <BMP280_reset+0x38>)
 800a9f8:	0019      	movs	r1, r3
 800a9fa:	2002      	movs	r0, #2
 800a9fc:	f008 fb54 	bl	80130a8 <CreateLine>
  HAL_Delay(100);
 800aa00:	2064      	movs	r0, #100	@ 0x64
 800aa02:	f009 f89b 	bl	8013b3c <HAL_Delay>
}
 800aa06:	46c0      	nop			@ (mov r8, r8)
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	b002      	add	sp, #8
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	46c0      	nop			@ (mov r8, r8)
 800aa10:	0802b9d0 	.word	0x0802b9d0
 800aa14:	0802b9e8 	.word	0x0802b9e8

0800aa18 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800aa18:	b590      	push	{r4, r7, lr}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800aa1e:	4aae      	ldr	r2, [pc, #696]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa20:	231a      	movs	r3, #26
 800aa22:	2101      	movs	r1, #1
 800aa24:	2088      	movs	r0, #136	@ 0x88
 800aa26:	f7ff ff97 	bl	800a958 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800aa2a:	4bab      	ldr	r3, [pc, #684]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa2c:	785b      	ldrb	r3, [r3, #1]
 800aa2e:	021b      	lsls	r3, r3, #8
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	4aa9      	ldr	r2, [pc, #676]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa34:	7812      	ldrb	r2, [r2, #0]
 800aa36:	189b      	adds	r3, r3, r2
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	4ba8      	ldr	r3, [pc, #672]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800aa3c:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800aa3e:	4ba6      	ldr	r3, [pc, #664]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa40:	78db      	ldrb	r3, [r3, #3]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	4aa4      	ldr	r2, [pc, #656]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa48:	7892      	ldrb	r2, [r2, #2]
 800aa4a:	189b      	adds	r3, r3, r2
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	b21a      	sxth	r2, r3
 800aa50:	4ba2      	ldr	r3, [pc, #648]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800aa52:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800aa54:	4ba0      	ldr	r3, [pc, #640]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa56:	795b      	ldrb	r3, [r3, #5]
 800aa58:	021b      	lsls	r3, r3, #8
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	4a9e      	ldr	r2, [pc, #632]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa5e:	7912      	ldrb	r2, [r2, #4]
 800aa60:	189b      	adds	r3, r3, r2
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	b21a      	sxth	r2, r3
 800aa66:	4b9d      	ldr	r3, [pc, #628]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800aa68:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800aa6a:	4b9b      	ldr	r3, [pc, #620]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa6c:	79db      	ldrb	r3, [r3, #7]
 800aa6e:	021b      	lsls	r3, r3, #8
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	4a99      	ldr	r2, [pc, #612]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa74:	7992      	ldrb	r2, [r2, #6]
 800aa76:	189b      	adds	r3, r3, r2
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	4b98      	ldr	r3, [pc, #608]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800aa7c:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800aa7e:	4b96      	ldr	r3, [pc, #600]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa80:	7a5b      	ldrb	r3, [r3, #9]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	4a94      	ldr	r2, [pc, #592]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa88:	7a12      	ldrb	r2, [r2, #8]
 800aa8a:	189b      	adds	r3, r3, r2
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	b21a      	sxth	r2, r3
 800aa90:	4b92      	ldr	r3, [pc, #584]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800aa92:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800aa94:	4b90      	ldr	r3, [pc, #576]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa96:	7adb      	ldrb	r3, [r3, #11]
 800aa98:	021b      	lsls	r3, r3, #8
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	4a8e      	ldr	r2, [pc, #568]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aa9e:	7a92      	ldrb	r2, [r2, #10]
 800aaa0:	189b      	adds	r3, r3, r2
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	b21a      	sxth	r2, r3
 800aaa6:	4b8d      	ldr	r3, [pc, #564]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800aaa8:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800aaaa:	4b8b      	ldr	r3, [pc, #556]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aaac:	7b5b      	ldrb	r3, [r3, #13]
 800aaae:	021b      	lsls	r3, r3, #8
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	4a89      	ldr	r2, [pc, #548]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aab4:	7b12      	ldrb	r2, [r2, #12]
 800aab6:	189b      	adds	r3, r3, r2
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	b21a      	sxth	r2, r3
 800aabc:	4b87      	ldr	r3, [pc, #540]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800aabe:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800aac0:	4b85      	ldr	r3, [pc, #532]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aac2:	7bdb      	ldrb	r3, [r3, #15]
 800aac4:	021b      	lsls	r3, r3, #8
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	4a83      	ldr	r2, [pc, #524]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aaca:	7b92      	ldrb	r2, [r2, #14]
 800aacc:	189b      	adds	r3, r3, r2
 800aace:	b29b      	uxth	r3, r3
 800aad0:	b21a      	sxth	r2, r3
 800aad2:	4b82      	ldr	r3, [pc, #520]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800aad4:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800aad6:	4b80      	ldr	r3, [pc, #512]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aad8:	7c5b      	ldrb	r3, [r3, #17]
 800aada:	021b      	lsls	r3, r3, #8
 800aadc:	b29b      	uxth	r3, r3
 800aade:	4a7e      	ldr	r2, [pc, #504]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aae0:	7c12      	ldrb	r2, [r2, #16]
 800aae2:	189b      	adds	r3, r3, r2
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	b21a      	sxth	r2, r3
 800aae8:	4b7c      	ldr	r3, [pc, #496]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800aaea:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800aaec:	4b7a      	ldr	r3, [pc, #488]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aaee:	7cdb      	ldrb	r3, [r3, #19]
 800aaf0:	021b      	lsls	r3, r3, #8
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	4a78      	ldr	r2, [pc, #480]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aaf6:	7c92      	ldrb	r2, [r2, #18]
 800aaf8:	189b      	adds	r3, r3, r2
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	b21a      	sxth	r2, r3
 800aafe:	4b77      	ldr	r3, [pc, #476]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ab00:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800ab02:	4b75      	ldr	r3, [pc, #468]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ab04:	7d5b      	ldrb	r3, [r3, #21]
 800ab06:	021b      	lsls	r3, r3, #8
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	4a73      	ldr	r2, [pc, #460]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ab0c:	7d12      	ldrb	r2, [r2, #20]
 800ab0e:	189b      	adds	r3, r3, r2
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	b21a      	sxth	r2, r3
 800ab14:	4b71      	ldr	r3, [pc, #452]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ab16:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800ab18:	4b6f      	ldr	r3, [pc, #444]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ab1a:	7ddb      	ldrb	r3, [r3, #23]
 800ab1c:	021b      	lsls	r3, r3, #8
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	4a6d      	ldr	r2, [pc, #436]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ab22:	7d92      	ldrb	r2, [r2, #22]
 800ab24:	189b      	adds	r3, r3, r2
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	b21a      	sxth	r2, r3
 800ab2a:	4b6c      	ldr	r3, [pc, #432]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ab2c:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800ab2e:	4a6c      	ldr	r2, [pc, #432]	@ (800ace0 <BMP280_get_calibration+0x2c8>)
 800ab30:	4b6c      	ldr	r3, [pc, #432]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800ab32:	0019      	movs	r1, r3
 800ab34:	2003      	movs	r0, #3
 800ab36:	f008 fab7 	bl	80130a8 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800ab3a:	4b67      	ldr	r3, [pc, #412]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ab3c:	785b      	ldrb	r3, [r3, #1]
 800ab3e:	001c      	movs	r4, r3
 800ab40:	4b65      	ldr	r3, [pc, #404]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	0018      	movs	r0, r3
 800ab46:	4b65      	ldr	r3, [pc, #404]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	4a67      	ldr	r2, [pc, #412]	@ (800ace8 <BMP280_get_calibration+0x2d0>)
 800ab4c:	4965      	ldr	r1, [pc, #404]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800ab4e:	9301      	str	r3, [sp, #4]
 800ab50:	9000      	str	r0, [sp, #0]
 800ab52:	0023      	movs	r3, r4
 800ab54:	2003      	movs	r0, #3
 800ab56:	f008 faa7 	bl	80130a8 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800ab5a:	4b5f      	ldr	r3, [pc, #380]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ab5c:	78db      	ldrb	r3, [r3, #3]
 800ab5e:	001c      	movs	r4, r3
 800ab60:	4b5d      	ldr	r3, [pc, #372]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ab62:	789b      	ldrb	r3, [r3, #2]
 800ab64:	0018      	movs	r0, r3
 800ab66:	4b5d      	ldr	r3, [pc, #372]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ab68:	2202      	movs	r2, #2
 800ab6a:	5e9b      	ldrsh	r3, [r3, r2]
 800ab6c:	4a5f      	ldr	r2, [pc, #380]	@ (800acec <BMP280_get_calibration+0x2d4>)
 800ab6e:	495d      	ldr	r1, [pc, #372]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	9000      	str	r0, [sp, #0]
 800ab74:	0023      	movs	r3, r4
 800ab76:	2003      	movs	r0, #3
 800ab78:	f008 fa96 	bl	80130a8 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800ab7c:	4b56      	ldr	r3, [pc, #344]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ab7e:	795b      	ldrb	r3, [r3, #5]
 800ab80:	001c      	movs	r4, r3
 800ab82:	4b55      	ldr	r3, [pc, #340]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ab84:	791b      	ldrb	r3, [r3, #4]
 800ab86:	0018      	movs	r0, r3
 800ab88:	4b54      	ldr	r3, [pc, #336]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ab8a:	2204      	movs	r2, #4
 800ab8c:	5e9b      	ldrsh	r3, [r3, r2]
 800ab8e:	4a58      	ldr	r2, [pc, #352]	@ (800acf0 <BMP280_get_calibration+0x2d8>)
 800ab90:	4954      	ldr	r1, [pc, #336]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800ab92:	9301      	str	r3, [sp, #4]
 800ab94:	9000      	str	r0, [sp, #0]
 800ab96:	0023      	movs	r3, r4
 800ab98:	2003      	movs	r0, #3
 800ab9a:	f008 fa85 	bl	80130a8 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800ab9e:	4b4e      	ldr	r3, [pc, #312]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aba0:	79db      	ldrb	r3, [r3, #7]
 800aba2:	001c      	movs	r4, r3
 800aba4:	4b4c      	ldr	r3, [pc, #304]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800aba6:	799b      	ldrb	r3, [r3, #6]
 800aba8:	0018      	movs	r0, r3
 800abaa:	4b4c      	ldr	r3, [pc, #304]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800abac:	88db      	ldrh	r3, [r3, #6]
 800abae:	4a51      	ldr	r2, [pc, #324]	@ (800acf4 <BMP280_get_calibration+0x2dc>)
 800abb0:	494c      	ldr	r1, [pc, #304]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	9000      	str	r0, [sp, #0]
 800abb6:	0023      	movs	r3, r4
 800abb8:	2003      	movs	r0, #3
 800abba:	f008 fa75 	bl	80130a8 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800abbe:	4b46      	ldr	r3, [pc, #280]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800abc0:	7a5b      	ldrb	r3, [r3, #9]
 800abc2:	001c      	movs	r4, r3
 800abc4:	4b44      	ldr	r3, [pc, #272]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800abc6:	7a1b      	ldrb	r3, [r3, #8]
 800abc8:	0018      	movs	r0, r3
 800abca:	4b44      	ldr	r3, [pc, #272]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800abcc:	2208      	movs	r2, #8
 800abce:	5e9b      	ldrsh	r3, [r3, r2]
 800abd0:	4a49      	ldr	r2, [pc, #292]	@ (800acf8 <BMP280_get_calibration+0x2e0>)
 800abd2:	4944      	ldr	r1, [pc, #272]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	9000      	str	r0, [sp, #0]
 800abd8:	0023      	movs	r3, r4
 800abda:	2003      	movs	r0, #3
 800abdc:	f008 fa64 	bl	80130a8 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800abe0:	4b3d      	ldr	r3, [pc, #244]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800abe2:	7adb      	ldrb	r3, [r3, #11]
 800abe4:	001c      	movs	r4, r3
 800abe6:	4b3c      	ldr	r3, [pc, #240]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800abe8:	7a9b      	ldrb	r3, [r3, #10]
 800abea:	0018      	movs	r0, r3
 800abec:	4b3b      	ldr	r3, [pc, #236]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800abee:	220a      	movs	r2, #10
 800abf0:	5e9b      	ldrsh	r3, [r3, r2]
 800abf2:	4a42      	ldr	r2, [pc, #264]	@ (800acfc <BMP280_get_calibration+0x2e4>)
 800abf4:	493b      	ldr	r1, [pc, #236]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	9000      	str	r0, [sp, #0]
 800abfa:	0023      	movs	r3, r4
 800abfc:	2003      	movs	r0, #3
 800abfe:	f008 fa53 	bl	80130a8 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800ac02:	4b35      	ldr	r3, [pc, #212]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ac04:	7b5b      	ldrb	r3, [r3, #13]
 800ac06:	001c      	movs	r4, r3
 800ac08:	4b33      	ldr	r3, [pc, #204]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ac0a:	7b1b      	ldrb	r3, [r3, #12]
 800ac0c:	0018      	movs	r0, r3
 800ac0e:	4b33      	ldr	r3, [pc, #204]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ac10:	220c      	movs	r2, #12
 800ac12:	5e9b      	ldrsh	r3, [r3, r2]
 800ac14:	4a3a      	ldr	r2, [pc, #232]	@ (800ad00 <BMP280_get_calibration+0x2e8>)
 800ac16:	4933      	ldr	r1, [pc, #204]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	9000      	str	r0, [sp, #0]
 800ac1c:	0023      	movs	r3, r4
 800ac1e:	2003      	movs	r0, #3
 800ac20:	f008 fa42 	bl	80130a8 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800ac24:	4b2c      	ldr	r3, [pc, #176]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ac26:	7bdb      	ldrb	r3, [r3, #15]
 800ac28:	001c      	movs	r4, r3
 800ac2a:	4b2b      	ldr	r3, [pc, #172]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ac2c:	7b9b      	ldrb	r3, [r3, #14]
 800ac2e:	0018      	movs	r0, r3
 800ac30:	4b2a      	ldr	r3, [pc, #168]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ac32:	220e      	movs	r2, #14
 800ac34:	5e9b      	ldrsh	r3, [r3, r2]
 800ac36:	4a33      	ldr	r2, [pc, #204]	@ (800ad04 <BMP280_get_calibration+0x2ec>)
 800ac38:	492a      	ldr	r1, [pc, #168]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	9000      	str	r0, [sp, #0]
 800ac3e:	0023      	movs	r3, r4
 800ac40:	2003      	movs	r0, #3
 800ac42:	f008 fa31 	bl	80130a8 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800ac46:	4b24      	ldr	r3, [pc, #144]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ac48:	7c5b      	ldrb	r3, [r3, #17]
 800ac4a:	001c      	movs	r4, r3
 800ac4c:	4b22      	ldr	r3, [pc, #136]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ac4e:	7c1b      	ldrb	r3, [r3, #16]
 800ac50:	0018      	movs	r0, r3
 800ac52:	4b22      	ldr	r3, [pc, #136]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ac54:	2210      	movs	r2, #16
 800ac56:	5e9b      	ldrsh	r3, [r3, r2]
 800ac58:	4a2b      	ldr	r2, [pc, #172]	@ (800ad08 <BMP280_get_calibration+0x2f0>)
 800ac5a:	4922      	ldr	r1, [pc, #136]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	9000      	str	r0, [sp, #0]
 800ac60:	0023      	movs	r3, r4
 800ac62:	2003      	movs	r0, #3
 800ac64:	f008 fa20 	bl	80130a8 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800ac68:	4b1b      	ldr	r3, [pc, #108]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ac6a:	7cdb      	ldrb	r3, [r3, #19]
 800ac6c:	001c      	movs	r4, r3
 800ac6e:	4b1a      	ldr	r3, [pc, #104]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ac70:	7c9b      	ldrb	r3, [r3, #18]
 800ac72:	0018      	movs	r0, r3
 800ac74:	4b19      	ldr	r3, [pc, #100]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ac76:	2212      	movs	r2, #18
 800ac78:	5e9b      	ldrsh	r3, [r3, r2]
 800ac7a:	4a24      	ldr	r2, [pc, #144]	@ (800ad0c <BMP280_get_calibration+0x2f4>)
 800ac7c:	4919      	ldr	r1, [pc, #100]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800ac7e:	9301      	str	r3, [sp, #4]
 800ac80:	9000      	str	r0, [sp, #0]
 800ac82:	0023      	movs	r3, r4
 800ac84:	2003      	movs	r0, #3
 800ac86:	f008 fa0f 	bl	80130a8 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800ac8a:	4b13      	ldr	r3, [pc, #76]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ac8c:	7d5b      	ldrb	r3, [r3, #21]
 800ac8e:	001c      	movs	r4, r3
 800ac90:	4b11      	ldr	r3, [pc, #68]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800ac92:	7d1b      	ldrb	r3, [r3, #20]
 800ac94:	0018      	movs	r0, r3
 800ac96:	4b11      	ldr	r3, [pc, #68]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800ac98:	2214      	movs	r2, #20
 800ac9a:	5e9b      	ldrsh	r3, [r3, r2]
 800ac9c:	4a1c      	ldr	r2, [pc, #112]	@ (800ad10 <BMP280_get_calibration+0x2f8>)
 800ac9e:	4911      	ldr	r1, [pc, #68]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	9000      	str	r0, [sp, #0]
 800aca4:	0023      	movs	r3, r4
 800aca6:	2003      	movs	r0, #3
 800aca8:	f008 f9fe 	bl	80130a8 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800acac:	4b0a      	ldr	r3, [pc, #40]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800acae:	7ddb      	ldrb	r3, [r3, #23]
 800acb0:	001c      	movs	r4, r3
 800acb2:	4b09      	ldr	r3, [pc, #36]	@ (800acd8 <BMP280_get_calibration+0x2c0>)
 800acb4:	7d9b      	ldrb	r3, [r3, #22]
 800acb6:	0018      	movs	r0, r3
 800acb8:	4b08      	ldr	r3, [pc, #32]	@ (800acdc <BMP280_get_calibration+0x2c4>)
 800acba:	2216      	movs	r2, #22
 800acbc:	5e9b      	ldrsh	r3, [r3, r2]
 800acbe:	4a15      	ldr	r2, [pc, #84]	@ (800ad14 <BMP280_get_calibration+0x2fc>)
 800acc0:	4908      	ldr	r1, [pc, #32]	@ (800ace4 <BMP280_get_calibration+0x2cc>)
 800acc2:	9301      	str	r3, [sp, #4]
 800acc4:	9000      	str	r0, [sp, #0]
 800acc6:	0023      	movs	r3, r4
 800acc8:	2003      	movs	r0, #3
 800acca:	f008 f9ed 	bl	80130a8 <CreateLine>
}
 800acce:	46c0      	nop			@ (mov r8, r8)
 800acd0:	46bd      	mov	sp, r7
 800acd2:	b001      	add	sp, #4
 800acd4:	bd90      	pop	{r4, r7, pc}
 800acd6:	46c0      	nop			@ (mov r8, r8)
 800acd8:	20000c2c 	.word	0x20000c2c
 800acdc:	20000c04 	.word	0x20000c04
 800ace0:	0802b9ec 	.word	0x0802b9ec
 800ace4:	0802ba08 	.word	0x0802ba08
 800ace8:	0802ba0c 	.word	0x0802ba0c
 800acec:	0802ba40 	.word	0x0802ba40
 800acf0:	0802ba74 	.word	0x0802ba74
 800acf4:	0802baa8 	.word	0x0802baa8
 800acf8:	0802badc 	.word	0x0802badc
 800acfc:	0802bb10 	.word	0x0802bb10
 800ad00:	0802bb44 	.word	0x0802bb44
 800ad04:	0802bb78 	.word	0x0802bb78
 800ad08:	0802bbac 	.word	0x0802bbac
 800ad0c:	0802bbe0 	.word	0x0802bbe0
 800ad10:	0802bc14 	.word	0x0802bc14
 800ad14:	0802bc48 	.word	0x0802bc48

0800ad18 <BMP280_probe>:

static bool BMP280_probe() {
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800ad1e:	4b34      	ldr	r3, [pc, #208]	@ (800adf0 <BMP280_probe+0xd8>)
 800ad20:	2276      	movs	r2, #118	@ 0x76
 800ad22:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800ad24:	1dba      	adds	r2, r7, #6
 800ad26:	2301      	movs	r3, #1
 800ad28:	2101      	movs	r1, #1
 800ad2a:	20d0      	movs	r0, #208	@ 0xd0
 800ad2c:	f7ff fe14 	bl	800a958 <ReadMemRegister>
 800ad30:	0003      	movs	r3, r0
 800ad32:	001a      	movs	r2, r3
 800ad34:	1dfb      	adds	r3, r7, #7
 800ad36:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800ad38:	1dfb      	adds	r3, r7, #7
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	b25b      	sxtb	r3, r3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00a      	beq.n	800ad58 <BMP280_probe+0x40>
 800ad42:	1dbb      	adds	r3, r7, #6
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d006      	beq.n	800ad58 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800ad4a:	1dbb      	adds	r3, r7, #6
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	4a29      	ldr	r2, [pc, #164]	@ (800adf4 <BMP280_probe+0xdc>)
 800ad50:	4929      	ldr	r1, [pc, #164]	@ (800adf8 <BMP280_probe+0xe0>)
 800ad52:	2003      	movs	r0, #3
 800ad54:	f008 f9a8 	bl	80130a8 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800ad58:	1dbb      	adds	r3, r7, #6
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b58      	cmp	r3, #88	@ 0x58
 800ad5e:	d01f      	beq.n	800ada0 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800ad60:	4b23      	ldr	r3, [pc, #140]	@ (800adf0 <BMP280_probe+0xd8>)
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	3301      	adds	r3, #1
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	4b21      	ldr	r3, [pc, #132]	@ (800adf0 <BMP280_probe+0xd8>)
 800ad6a:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800ad6c:	1dba      	adds	r2, r7, #6
 800ad6e:	2301      	movs	r3, #1
 800ad70:	2101      	movs	r1, #1
 800ad72:	20d0      	movs	r0, #208	@ 0xd0
 800ad74:	f7ff fdf0 	bl	800a958 <ReadMemRegister>
 800ad78:	0003      	movs	r3, r0
 800ad7a:	001a      	movs	r2, r3
 800ad7c:	1dfb      	adds	r3, r7, #7
 800ad7e:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800ad80:	1dfb      	adds	r3, r7, #7
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	b25b      	sxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00a      	beq.n	800ada0 <BMP280_probe+0x88>
 800ad8a:	1dbb      	adds	r3, r7, #6
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d006      	beq.n	800ada0 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800ad92:	1dbb      	adds	r3, r7, #6
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	4a17      	ldr	r2, [pc, #92]	@ (800adf4 <BMP280_probe+0xdc>)
 800ad98:	4917      	ldr	r1, [pc, #92]	@ (800adf8 <BMP280_probe+0xe0>)
 800ad9a:	2003      	movs	r0, #3
 800ad9c:	f008 f984 	bl	80130a8 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800ada0:	1dbb      	adds	r3, r7, #6
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b58      	cmp	r3, #88	@ 0x58
 800ada6:	d110      	bne.n	800adca <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800ada8:	1dbb      	adds	r3, r7, #6
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	0018      	movs	r0, r3
 800adae:	4b10      	ldr	r3, [pc, #64]	@ (800adf0 <BMP280_probe+0xd8>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	4a12      	ldr	r2, [pc, #72]	@ (800adfc <BMP280_probe+0xe4>)
 800adb4:	4912      	ldr	r1, [pc, #72]	@ (800ae00 <BMP280_probe+0xe8>)
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	0003      	movs	r3, r0
 800adba:	2002      	movs	r0, #2
 800adbc:	f008 f974 	bl	80130a8 <CreateLine>
      BMP280_reset(); // get an initial state
 800adc0:	f7ff fe0c 	bl	800a9dc <BMP280_reset>
      BMP280_get_calibration();
 800adc4:	f7ff fe28 	bl	800aa18 <BMP280_get_calibration>
 800adc8:	e008      	b.n	800addc <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800adca:	4b09      	ldr	r3, [pc, #36]	@ (800adf0 <BMP280_probe+0xd8>)
 800adcc:	2200      	movs	r2, #0
 800adce:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800add0:	4a0c      	ldr	r2, [pc, #48]	@ (800ae04 <BMP280_probe+0xec>)
 800add2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae08 <BMP280_probe+0xf0>)
 800add4:	0019      	movs	r1, r3
 800add6:	2001      	movs	r0, #1
 800add8:	f008 f966 	bl	80130a8 <CreateLine>
    }
    return bmp280I2Caddr;
 800addc:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <BMP280_probe+0xd8>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	1e5a      	subs	r2, r3, #1
 800ade2:	4193      	sbcs	r3, r2
 800ade4:	b2db      	uxtb	r3, r3
}
 800ade6:	0018      	movs	r0, r3
 800ade8:	46bd      	mov	sp, r7
 800adea:	b002      	add	sp, #8
 800adec:	bd80      	pop	{r7, pc}
 800adee:	46c0      	nop			@ (mov r8, r8)
 800adf0:	20000094 	.word	0x20000094
 800adf4:	0802bc7c 	.word	0x0802bc7c
 800adf8:	0802ba08 	.word	0x0802ba08
 800adfc:	0802bcac 	.word	0x0802bcac
 800ae00:	0802b9e8 	.word	0x0802b9e8
 800ae04:	0802bce4 	.word	0x0802bce4
 800ae08:	0802bcf8 	.word	0x0802bcf8

0800ae0c <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800ae10:	f7ff ff82 	bl	800ad18 <BMP280_probe>
 800ae14:	0003      	movs	r3, r0
}
 800ae16:	0018      	movs	r0, r3
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800ae26:	4b05      	ldr	r3, [pc, #20]	@ (800ae3c <BMP_Init+0x20>)
 800ae28:	687a      	ldr	r2, [r7, #4]
 800ae2a:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800ae2c:	4b04      	ldr	r3, [pc, #16]	@ (800ae40 <BMP_Init+0x24>)
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	601a      	str	r2, [r3, #0]
}
 800ae32:	46c0      	nop			@ (mov r8, r8)
 800ae34:	46bd      	mov	sp, r7
 800ae36:	b002      	add	sp, #8
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	46c0      	nop			@ (mov r8, r8)
 800ae3c:	20000c00 	.word	0x20000c00
 800ae40:	20000bfc 	.word	0x20000bfc

0800ae44 <BMP280_set_config>:


static bool BMP280_set_config() {
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800ae4a:	1dbb      	adds	r3, r7, #6
 800ae4c:	228c      	movs	r2, #140	@ 0x8c
 800ae4e:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800ae50:	1dba      	adds	r2, r7, #6
 800ae52:	2301      	movs	r3, #1
 800ae54:	2101      	movs	r1, #1
 800ae56:	20f5      	movs	r0, #245	@ 0xf5
 800ae58:	f7ff fd4e 	bl	800a8f8 <WriteMemRegister>
 800ae5c:	0003      	movs	r3, r0
 800ae5e:	001a      	movs	r2, r3
 800ae60:	1dfb      	adds	r3, r7, #7
 800ae62:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800ae64:	f008 fe60 	bl	8013b28 <HAL_GetTick>
 800ae68:	0003      	movs	r3, r0
 800ae6a:	330a      	adds	r3, #10
 800ae6c:	001a      	movs	r2, r3
 800ae6e:	4b06      	ldr	r3, [pc, #24]	@ (800ae88 <BMP280_set_config+0x44>)
 800ae70:	601a      	str	r2, [r3, #0]
  return rslt;
 800ae72:	1dfb      	adds	r3, r7, #7
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	b25b      	sxtb	r3, r3
 800ae78:	1e5a      	subs	r2, r3, #1
 800ae7a:	4193      	sbcs	r3, r2
 800ae7c:	b2db      	uxtb	r3, r3
}
 800ae7e:	0018      	movs	r0, r3
 800ae80:	46bd      	mov	sp, r7
 800ae82:	b002      	add	sp, #8
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	46c0      	nop			@ (mov r8, r8)
 800ae88:	20000c28 	.word	0x20000c28

0800ae8c <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800ae92:	1dbb      	adds	r3, r7, #6
 800ae94:	2208      	movs	r2, #8
 800ae96:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800ae98:	4b22      	ldr	r3, [pc, #136]	@ (800af24 <BMP280_set_mode+0x98>)
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	224c      	movs	r2, #76	@ 0x4c
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	1d7b      	adds	r3, r7, #5
 800aea4:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800aea6:	1d7a      	adds	r2, r7, #5
 800aea8:	2301      	movs	r3, #1
 800aeaa:	2101      	movs	r1, #1
 800aeac:	20f4      	movs	r0, #244	@ 0xf4
 800aeae:	f7ff fd23 	bl	800a8f8 <WriteMemRegister>
 800aeb2:	0003      	movs	r3, r0
 800aeb4:	001a      	movs	r2, r3
 800aeb6:	1dfb      	adds	r3, r7, #7
 800aeb8:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800aeba:	f008 fe35 	bl	8013b28 <HAL_GetTick>
 800aebe:	0003      	movs	r3, r0
 800aec0:	22fa      	movs	r2, #250	@ 0xfa
 800aec2:	0092      	lsls	r2, r2, #2
 800aec4:	189a      	adds	r2, r3, r2
 800aec6:	4b18      	ldr	r3, [pc, #96]	@ (800af28 <BMP280_set_mode+0x9c>)
 800aec8:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800aeca:	e016      	b.n	800aefa <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800aecc:	1dba      	adds	r2, r7, #6
 800aece:	2301      	movs	r3, #1
 800aed0:	2101      	movs	r1, #1
 800aed2:	20f3      	movs	r0, #243	@ 0xf3
 800aed4:	f7ff fd40 	bl	800a958 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800aed8:	4b13      	ldr	r3, [pc, #76]	@ (800af28 <BMP280_set_mode+0x9c>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	0018      	movs	r0, r3
 800aede:	f008 f88d 	bl	8012ffc <TimestampIsReached>
 800aee2:	1e03      	subs	r3, r0, #0
 800aee4:	d006      	beq.n	800aef4 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800aee6:	4a11      	ldr	r2, [pc, #68]	@ (800af2c <BMP280_set_mode+0xa0>)
 800aee8:	4b11      	ldr	r3, [pc, #68]	@ (800af30 <BMP280_set_mode+0xa4>)
 800aeea:	0019      	movs	r1, r3
 800aeec:	2001      	movs	r0, #1
 800aeee:	f008 f8db 	bl	80130a8 <CreateLine>
      break;
 800aef2:	e008      	b.n	800af06 <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800aef4:	2001      	movs	r0, #1
 800aef6:	f008 fe21 	bl	8013b3c <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800aefa:	1dbb      	adds	r3, r7, #6
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	001a      	movs	r2, r3
 800af00:	2308      	movs	r3, #8
 800af02:	4013      	ands	r3, r2
 800af04:	d1e2      	bne.n	800aecc <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800af06:	f008 fe0f 	bl	8013b28 <HAL_GetTick>
 800af0a:	0002      	movs	r2, r0
 800af0c:	4b06      	ldr	r3, [pc, #24]	@ (800af28 <BMP280_set_mode+0x9c>)
 800af0e:	601a      	str	r2, [r3, #0]
  return rslt;
 800af10:	1dfb      	adds	r3, r7, #7
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	b25b      	sxtb	r3, r3
 800af16:	1e5a      	subs	r2, r3, #1
 800af18:	4193      	sbcs	r3, r2
 800af1a:	b2db      	uxtb	r3, r3
}
 800af1c:	0018      	movs	r0, r3
 800af1e:	46bd      	mov	sp, r7
 800af20:	b002      	add	sp, #8
 800af22:	bd80      	pop	{r7, pc}
 800af24:	20000095 	.word	0x20000095
 800af28:	20000c28 	.word	0x20000c28
 800af2c:	0802bcfc 	.word	0x0802bcfc
 800af30:	0802bcf8 	.word	0x0802bcf8

0800af34 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800af3a:	1dba      	adds	r2, r7, #6
 800af3c:	2301      	movs	r3, #1
 800af3e:	2101      	movs	r1, #1
 800af40:	20f4      	movs	r0, #244	@ 0xf4
 800af42:	f7ff fd09 	bl	800a958 <ReadMemRegister>
 800af46:	0003      	movs	r3, r0
 800af48:	001a      	movs	r2, r3
 800af4a:	1dfb      	adds	r3, r7, #7
 800af4c:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800af4e:	1dbb      	adds	r3, r7, #6
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	2203      	movs	r2, #3
 800af54:	4013      	ands	r3, r2
 800af56:	b2da      	uxtb	r2, r3
 800af58:	1dbb      	adds	r3, r7, #6
 800af5a:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800af5c:	f008 fde4 	bl	8013b28 <HAL_GetTick>
 800af60:	0003      	movs	r3, r0
 800af62:	330a      	adds	r3, #10
 800af64:	001a      	movs	r2, r3
 800af66:	4b08      	ldr	r3, [pc, #32]	@ (800af88 <BMP280_get_mode+0x54>)
 800af68:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800af6a:	1dfb      	adds	r3, r7, #7
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	b25b      	sxtb	r3, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	d102      	bne.n	800af7a <BMP280_get_mode+0x46>
    bmpData = 255;
 800af74:	1dbb      	adds	r3, r7, #6
 800af76:	22ff      	movs	r2, #255	@ 0xff
 800af78:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800af7a:	1dbb      	adds	r3, r7, #6
 800af7c:	781b      	ldrb	r3, [r3, #0]
}
 800af7e:	0018      	movs	r0, r3
 800af80:	46bd      	mov	sp, r7
 800af82:	b002      	add	sp, #8
 800af84:	bd80      	pop	{r7, pc}
 800af86:	46c0      	nop			@ (mov r8, r8)
 800af88:	20000c28 	.word	0x20000c28

0800af8c <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800af8c:	b5b0      	push	{r4, r5, r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800af92:	1d3a      	adds	r2, r7, #4
 800af94:	2306      	movs	r3, #6
 800af96:	2101      	movs	r1, #1
 800af98:	20f7      	movs	r0, #247	@ 0xf7
 800af9a:	f7ff fcdd 	bl	800a958 <ReadMemRegister>
 800af9e:	0003      	movs	r3, r0
 800afa0:	001a      	movs	r2, r3
 800afa2:	230f      	movs	r3, #15
 800afa4:	18fb      	adds	r3, r7, r3
 800afa6:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800afa8:	1d3b      	adds	r3, r7, #4
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b80      	cmp	r3, #128	@ 0x80
 800afae:	d013      	beq.n	800afd8 <BMP280_get_measurement_values+0x4c>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800afb0:	1d3b      	adds	r3, r7, #4
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	031a      	lsls	r2, r3, #12
 800afb6:	1d3b      	adds	r3, r7, #4
 800afb8:	785b      	ldrb	r3, [r3, #1]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	18d3      	adds	r3, r2, r3
 800afbe:	1d3a      	adds	r2, r7, #4
 800afc0:	7892      	ldrb	r2, [r2, #2]
 800afc2:	0912      	lsrs	r2, r2, #4
 800afc4:	b2d2      	uxtb	r2, r2
 800afc6:	189b      	adds	r3, r3, r2
 800afc8:	001a      	movs	r2, r3
 800afca:	4b2e      	ldr	r3, [pc, #184]	@ (800b084 <BMP280_get_measurement_values+0xf8>)
 800afcc:	601a      	str	r2, [r3, #0]
    Error("BMP280 Invalid read of barometric pressure.");
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
    SetAllBlueLED();
    return false;
  }
  if (bmpData[3] != 0x80) {
 800afce:	1d3b      	adds	r3, r7, #4
 800afd0:	78db      	ldrb	r3, [r3, #3]
 800afd2:	2b80      	cmp	r3, #128	@ 0x80
 800afd4:	d035      	beq.n	800b042 <BMP280_get_measurement_values+0xb6>
 800afd6:	e01d      	b.n	800b014 <BMP280_get_measurement_values+0x88>
    Error("BMP280 Invalid read of barometric pressure.");
 800afd8:	4a2b      	ldr	r2, [pc, #172]	@ (800b088 <BMP280_get_measurement_values+0xfc>)
 800afda:	4b2c      	ldr	r3, [pc, #176]	@ (800b08c <BMP280_get_measurement_values+0x100>)
 800afdc:	0019      	movs	r1, r3
 800afde:	2001      	movs	r0, #1
 800afe0:	f008 f862 	bl	80130a8 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800afe4:	1d3b      	adds	r3, r7, #4
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	001d      	movs	r5, r3
 800afea:	1d3b      	adds	r3, r7, #4
 800afec:	785b      	ldrb	r3, [r3, #1]
 800afee:	0018      	movs	r0, r3
 800aff0:	1d3b      	adds	r3, r7, #4
 800aff2:	789b      	ldrb	r3, [r3, #2]
 800aff4:	001c      	movs	r4, r3
 800aff6:	4b23      	ldr	r3, [pc, #140]	@ (800b084 <BMP280_get_measurement_values+0xf8>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a25      	ldr	r2, [pc, #148]	@ (800b090 <BMP280_get_measurement_values+0x104>)
 800affc:	4925      	ldr	r1, [pc, #148]	@ (800b094 <BMP280_get_measurement_values+0x108>)
 800affe:	9302      	str	r3, [sp, #8]
 800b000:	9401      	str	r4, [sp, #4]
 800b002:	9000      	str	r0, [sp, #0]
 800b004:	002b      	movs	r3, r5
 800b006:	2003      	movs	r0, #3
 800b008:	f008 f84e 	bl	80130a8 <CreateLine>
    SetAllBlueLED();
 800b00c:	f006 ff82 	bl	8011f14 <SetAllBlueLED>
    return false;
 800b010:	2300      	movs	r3, #0
 800b012:	e033      	b.n	800b07c <BMP280_get_measurement_values+0xf0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800b014:	1d3b      	adds	r3, r7, #4
 800b016:	78db      	ldrb	r3, [r3, #3]
 800b018:	031a      	lsls	r2, r3, #12
 800b01a:	1d3b      	adds	r3, r7, #4
 800b01c:	791b      	ldrb	r3, [r3, #4]
 800b01e:	011b      	lsls	r3, r3, #4
 800b020:	18d3      	adds	r3, r2, r3
 800b022:	1d3a      	adds	r2, r7, #4
 800b024:	7952      	ldrb	r2, [r2, #5]
 800b026:	0912      	lsrs	r2, r2, #4
 800b028:	b2d2      	uxtb	r2, r2
 800b02a:	189b      	adds	r3, r3, r2
 800b02c:	001a      	movs	r2, r3
 800b02e:	4b1a      	ldr	r3, [pc, #104]	@ (800b098 <BMP280_get_measurement_values+0x10c>)
 800b030:	601a      	str	r2, [r3, #0]
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
    SetAllBlueLED();
    return false;
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800b032:	230f      	movs	r3, #15
 800b034:	18fb      	adds	r3, r7, r3
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	b25b      	sxtb	r3, r3
 800b03a:	1e5a      	subs	r2, r3, #1
 800b03c:	4193      	sbcs	r3, r2
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	e01c      	b.n	800b07c <BMP280_get_measurement_values+0xf0>
    Error("BMP280 Invalid read of temperature.");
 800b042:	4a16      	ldr	r2, [pc, #88]	@ (800b09c <BMP280_get_measurement_values+0x110>)
 800b044:	4b11      	ldr	r3, [pc, #68]	@ (800b08c <BMP280_get_measurement_values+0x100>)
 800b046:	0019      	movs	r1, r3
 800b048:	2001      	movs	r0, #1
 800b04a:	f008 f82d 	bl	80130a8 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800b04e:	1d3b      	adds	r3, r7, #4
 800b050:	78db      	ldrb	r3, [r3, #3]
 800b052:	001d      	movs	r5, r3
 800b054:	1d3b      	adds	r3, r7, #4
 800b056:	791b      	ldrb	r3, [r3, #4]
 800b058:	0018      	movs	r0, r3
 800b05a:	1d3b      	adds	r3, r7, #4
 800b05c:	795b      	ldrb	r3, [r3, #5]
 800b05e:	001c      	movs	r4, r3
 800b060:	4b0d      	ldr	r3, [pc, #52]	@ (800b098 <BMP280_get_measurement_values+0x10c>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a0e      	ldr	r2, [pc, #56]	@ (800b0a0 <BMP280_get_measurement_values+0x114>)
 800b066:	490b      	ldr	r1, [pc, #44]	@ (800b094 <BMP280_get_measurement_values+0x108>)
 800b068:	9302      	str	r3, [sp, #8]
 800b06a:	9401      	str	r4, [sp, #4]
 800b06c:	9000      	str	r0, [sp, #0]
 800b06e:	002b      	movs	r3, r5
 800b070:	2003      	movs	r0, #3
 800b072:	f008 f819 	bl	80130a8 <CreateLine>
    SetAllBlueLED();
 800b076:	f006 ff4d 	bl	8011f14 <SetAllBlueLED>
    return false;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	0018      	movs	r0, r3
 800b07e:	46bd      	mov	sp, r7
 800b080:	b004      	add	sp, #16
 800b082:	bdb0      	pop	{r4, r5, r7, pc}
 800b084:	20000c24 	.word	0x20000c24
 800b088:	0802bd28 	.word	0x0802bd28
 800b08c:	0802bcf8 	.word	0x0802bcf8
 800b090:	0802bd54 	.word	0x0802bd54
 800b094:	0802ba08 	.word	0x0802ba08
 800b098:	20000c20 	.word	0x20000c20
 800b09c:	0802bd9c 	.word	0x0802bd9c
 800b0a0:	0802bdc0 	.word	0x0802bdc0

0800b0a4 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800b0aa:	4b1e      	ldr	r3, [pc, #120]	@ (800b124 <BMP280_calc_temperature+0x80>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	10da      	asrs	r2, r3, #3
 800b0b4:	4b1c      	ldr	r3, [pc, #112]	@ (800b128 <BMP280_calc_temperature+0x84>)
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	4a1a      	ldr	r2, [pc, #104]	@ (800b128 <BMP280_calc_temperature+0x84>)
 800b0be:	2102      	movs	r1, #2
 800b0c0:	5e52      	ldrsh	r2, [r2, r1]
 800b0c2:	4353      	muls	r3, r2
 800b0c4:	12db      	asrs	r3, r3, #11
 800b0c6:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	111b      	asrs	r3, r3, #4
 800b0cc:	4a16      	ldr	r2, [pc, #88]	@ (800b128 <BMP280_calc_temperature+0x84>)
 800b0ce:	8812      	ldrh	r2, [r2, #0]
 800b0d0:	1a9b      	subs	r3, r3, r2
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	1112      	asrs	r2, r2, #4
 800b0d6:	4914      	ldr	r1, [pc, #80]	@ (800b128 <BMP280_calc_temperature+0x84>)
 800b0d8:	8809      	ldrh	r1, [r1, #0]
 800b0da:	1a52      	subs	r2, r2, r1
 800b0dc:	4353      	muls	r3, r2
 800b0de:	131b      	asrs	r3, r3, #12
 800b0e0:	4a11      	ldr	r2, [pc, #68]	@ (800b128 <BMP280_calc_temperature+0x84>)
 800b0e2:	2104      	movs	r1, #4
 800b0e4:	5e52      	ldrsh	r2, [r2, r1]
 800b0e6:	4353      	muls	r3, r2
 800b0e8:	139b      	asrs	r3, r3, #14
 800b0ea:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	18d2      	adds	r2, r2, r3
 800b0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800b12c <BMP280_calc_temperature+0x88>)
 800b0f4:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800b0f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b12c <BMP280_calc_temperature+0x88>)
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	0013      	movs	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	189b      	adds	r3, r3, r2
 800b100:	3380      	adds	r3, #128	@ 0x80
 800b102:	121b      	asrs	r3, r3, #8
 800b104:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800b106:	68b8      	ldr	r0, [r7, #8]
 800b108:	f7f6 fb8e 	bl	8001828 <__aeabi_i2f>
 800b10c:	1c03      	adds	r3, r0, #0
 800b10e:	4908      	ldr	r1, [pc, #32]	@ (800b130 <BMP280_calc_temperature+0x8c>)
 800b110:	1c18      	adds	r0, r3, #0
 800b112:	f7f5 fdc7 	bl	8000ca4 <__aeabi_fdiv>
 800b116:	1c03      	adds	r3, r0, #0
 800b118:	607b      	str	r3, [r7, #4]
  return airTemp;
 800b11a:	687b      	ldr	r3, [r7, #4]
}
 800b11c:	1c18      	adds	r0, r3, #0
 800b11e:	46bd      	mov	sp, r7
 800b120:	b006      	add	sp, #24
 800b122:	bd80      	pop	{r7, pc}
 800b124:	20000c20 	.word	0x20000c20
 800b128:	20000c04 	.word	0x20000c04
 800b12c:	20000c1c 	.word	0x20000c1c
 800b130:	42c80000 	.word	0x42c80000

0800b134 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800b13a:	4b4e      	ldr	r3, [pc, #312]	@ (800b274 <BMP280_calc_pressure+0x140>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800b140:	4b4d      	ldr	r3, [pc, #308]	@ (800b278 <BMP280_calc_pressure+0x144>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	105b      	asrs	r3, r3, #1
 800b146:	4a4d      	ldr	r2, [pc, #308]	@ (800b27c <BMP280_calc_pressure+0x148>)
 800b148:	4694      	mov	ip, r2
 800b14a:	4463      	add	r3, ip
 800b14c:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	109b      	asrs	r3, r3, #2
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	1092      	asrs	r2, r2, #2
 800b156:	4353      	muls	r3, r2
 800b158:	12db      	asrs	r3, r3, #11
 800b15a:	4a49      	ldr	r2, [pc, #292]	@ (800b280 <BMP280_calc_pressure+0x14c>)
 800b15c:	2110      	movs	r1, #16
 800b15e:	5e52      	ldrsh	r2, [r2, r1]
 800b160:	4353      	muls	r3, r2
 800b162:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800b164:	4b46      	ldr	r3, [pc, #280]	@ (800b280 <BMP280_calc_pressure+0x14c>)
 800b166:	220e      	movs	r2, #14
 800b168:	5e9b      	ldrsh	r3, [r3, r2]
 800b16a:	001a      	movs	r2, r3
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	4353      	muls	r3, r2
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	18d3      	adds	r3, r2, r3
 800b176:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	109a      	asrs	r2, r3, #2
 800b17c:	4b40      	ldr	r3, [pc, #256]	@ (800b280 <BMP280_calc_pressure+0x14c>)
 800b17e:	210c      	movs	r1, #12
 800b180:	5e5b      	ldrsh	r3, [r3, r1]
 800b182:	041b      	lsls	r3, r3, #16
 800b184:	18d3      	adds	r3, r2, r3
 800b186:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800b188:	4b3d      	ldr	r3, [pc, #244]	@ (800b280 <BMP280_calc_pressure+0x14c>)
 800b18a:	220a      	movs	r2, #10
 800b18c:	5e9b      	ldrsh	r3, [r3, r2]
 800b18e:	0019      	movs	r1, r3
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	109b      	asrs	r3, r3, #2
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	1092      	asrs	r2, r2, #2
 800b198:	4353      	muls	r3, r2
 800b19a:	135b      	asrs	r3, r3, #13
 800b19c:	434b      	muls	r3, r1
 800b19e:	10da      	asrs	r2, r3, #3
 800b1a0:	4b37      	ldr	r3, [pc, #220]	@ (800b280 <BMP280_calc_pressure+0x14c>)
 800b1a2:	2108      	movs	r1, #8
 800b1a4:	5e5b      	ldrsh	r3, [r3, r1]
 800b1a6:	0019      	movs	r1, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	434b      	muls	r3, r1
 800b1ac:	105b      	asrs	r3, r3, #1
 800b1ae:	18d3      	adds	r3, r2, r3
 800b1b0:	149b      	asrs	r3, r3, #18
 800b1b2:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2280      	movs	r2, #128	@ 0x80
 800b1b8:	0212      	lsls	r2, r2, #8
 800b1ba:	4694      	mov	ip, r2
 800b1bc:	4463      	add	r3, ip
 800b1be:	4a30      	ldr	r2, [pc, #192]	@ (800b280 <BMP280_calc_pressure+0x14c>)
 800b1c0:	88d2      	ldrh	r2, [r2, #6]
 800b1c2:	4353      	muls	r3, r2
 800b1c4:	13db      	asrs	r3, r3, #15
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <BMP280_calc_pressure+0x9e>
    return 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	e04b      	b.n	800b26a <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2280      	movs	r2, #128	@ 0x80
 800b1d6:	0352      	lsls	r2, r2, #13
 800b1d8:	1ad2      	subs	r2, r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	131b      	asrs	r3, r3, #12
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	001a      	movs	r2, r3
 800b1e2:	4b28      	ldr	r3, [pc, #160]	@ (800b284 <BMP280_calc_pressure+0x150>)
 800b1e4:	4353      	muls	r3, r2
 800b1e6:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	db09      	blt.n	800b202 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	005b      	lsls	r3, r3, #1
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	0011      	movs	r1, r2
 800b1f6:	0018      	movs	r0, r3
 800b1f8:	f7f4 ffd4 	bl	80001a4 <__udivsi3>
 800b1fc:	0003      	movs	r3, r0
 800b1fe:	617b      	str	r3, [r7, #20]
 800b200:	e007      	b.n	800b212 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	0019      	movs	r1, r3
 800b206:	6978      	ldr	r0, [r7, #20]
 800b208:	f7f4 ffcc 	bl	80001a4 <__udivsi3>
 800b20c:	0003      	movs	r3, r0
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800b212:	4b1b      	ldr	r3, [pc, #108]	@ (800b280 <BMP280_calc_pressure+0x14c>)
 800b214:	2216      	movs	r2, #22
 800b216:	5e9b      	ldrsh	r3, [r3, r2]
 800b218:	0019      	movs	r1, r3
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	08db      	lsrs	r3, r3, #3
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	08d2      	lsrs	r2, r2, #3
 800b222:	4353      	muls	r3, r2
 800b224:	0b5b      	lsrs	r3, r3, #13
 800b226:	434b      	muls	r3, r1
 800b228:	131b      	asrs	r3, r3, #12
 800b22a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	089b      	lsrs	r3, r3, #2
 800b230:	001a      	movs	r2, r3
 800b232:	4b13      	ldr	r3, [pc, #76]	@ (800b280 <BMP280_calc_pressure+0x14c>)
 800b234:	2114      	movs	r1, #20
 800b236:	5e5b      	ldrsh	r3, [r3, r1]
 800b238:	4353      	muls	r3, r2
 800b23a:	135b      	asrs	r3, r3, #13
 800b23c:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	18d3      	adds	r3, r2, r3
 800b244:	4a0e      	ldr	r2, [pc, #56]	@ (800b280 <BMP280_calc_pressure+0x14c>)
 800b246:	2112      	movs	r1, #18
 800b248:	5e52      	ldrsh	r2, [r2, r1]
 800b24a:	189b      	adds	r3, r3, r2
 800b24c:	111a      	asrs	r2, r3, #4
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	18d3      	adds	r3, r2, r3
 800b252:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800b254:	6978      	ldr	r0, [r7, #20]
 800b256:	f7f6 fb37 	bl	80018c8 <__aeabi_ui2f>
 800b25a:	1c03      	adds	r3, r0, #0
 800b25c:	490a      	ldr	r1, [pc, #40]	@ (800b288 <BMP280_calc_pressure+0x154>)
 800b25e:	1c18      	adds	r0, r3, #0
 800b260:	f7f5 fd20 	bl	8000ca4 <__aeabi_fdiv>
 800b264:	1c03      	adds	r3, r0, #0
 800b266:	607b      	str	r3, [r7, #4]
  return airhPa;
 800b268:	687b      	ldr	r3, [r7, #4]
}
 800b26a:	1c18      	adds	r0, r3, #0
 800b26c:	46bd      	mov	sp, r7
 800b26e:	b006      	add	sp, #24
 800b270:	bd80      	pop	{r7, pc}
 800b272:	46c0      	nop			@ (mov r8, r8)
 800b274:	20000c24 	.word	0x20000c24
 800b278:	20000c1c 	.word	0x20000c1c
 800b27c:	ffff0600 	.word	0xffff0600
 800b280:	20000c04 	.word	0x20000c04
 800b284:	00000c35 	.word	0x00000c35
 800b288:	42c80000 	.word	0x42c80000

0800b28c <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800b28c:	b5b0      	push	{r4, r5, r7, lr}
 800b28e:	b088      	sub	sp, #32
 800b290:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800b292:	4bba      	ldr	r3, [pc, #744]	@ (800b57c <BMP_Upkeep+0x2f0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	0018      	movs	r0, r3
 800b298:	f007 feb0 	bl	8012ffc <TimestampIsReached>
 800b29c:	0003      	movs	r3, r0
 800b29e:	001a      	movs	r2, r3
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	4053      	eors	r3, r2
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <BMP_Upkeep+0x24>
    return BMPState;
 800b2aa:	4bb5      	ldr	r3, [pc, #724]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	e161      	b.n	800b574 <BMP_Upkeep+0x2e8>
  }
  switch(BMPState) {
 800b2b0:	4bb3      	ldr	r3, [pc, #716]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	2b09      	cmp	r3, #9
 800b2b6:	d900      	bls.n	800b2ba <BMP_Upkeep+0x2e>
 800b2b8:	e145      	b.n	800b546 <BMP_Upkeep+0x2ba>
 800b2ba:	009a      	lsls	r2, r3, #2
 800b2bc:	4bb1      	ldr	r3, [pc, #708]	@ (800b584 <BMP_Upkeep+0x2f8>)
 800b2be:	18d3      	adds	r3, r2, r3
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800b2c4:	4ab0      	ldr	r2, [pc, #704]	@ (800b588 <BMP_Upkeep+0x2fc>)
 800b2c6:	4bb1      	ldr	r3, [pc, #708]	@ (800b58c <BMP_Upkeep+0x300>)
 800b2c8:	0019      	movs	r1, r3
 800b2ca:	2003      	movs	r0, #3
 800b2cc:	f007 feec 	bl	80130a8 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800b2d0:	f008 fc2a 	bl	8013b28 <HAL_GetTick>
 800b2d4:	0003      	movs	r3, r0
 800b2d6:	4aae      	ldr	r2, [pc, #696]	@ (800b590 <BMP_Upkeep+0x304>)
 800b2d8:	189a      	adds	r2, r3, r2
 800b2da:	4ba8      	ldr	r3, [pc, #672]	@ (800b57c <BMP_Upkeep+0x2f0>)
 800b2dc:	601a      	str	r2, [r3, #0]
    break;
 800b2de:	e147      	b.n	800b570 <BMP_Upkeep+0x2e4>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800b2e0:	f001 ff98 	bl	800d214 <getSensorLock>
 800b2e4:	1e03      	subs	r3, r0, #0
 800b2e6:	d000      	beq.n	800b2ea <BMP_Upkeep+0x5e>
 800b2e8:	e139      	b.n	800b55e <BMP_Upkeep+0x2d2>
      break;
    }
    setSensorLock(BMP280);
 800b2ea:	2003      	movs	r0, #3
 800b2ec:	f001 ff7e 	bl	800d1ec <setSensorLock>
    BMP280_reset();
 800b2f0:	f7ff fb74 	bl	800a9dc <BMP280_reset>
    HAL_Delay(10); // wait for deferred DMA transfers
 800b2f4:	200a      	movs	r0, #10
 800b2f6:	f008 fc21 	bl	8013b3c <HAL_Delay>
    setSensorLock(FREE);
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	f001 ff76 	bl	800d1ec <setSensorLock>
    BMPState = BMP_SET_CONFIG;
 800b300:	4b9f      	ldr	r3, [pc, #636]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b302:	2201      	movs	r2, #1
 800b304:	701a      	strb	r2, [r3, #0]
    break;
 800b306:	e133      	b.n	800b570 <BMP_Upkeep+0x2e4>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800b308:	f001 ff84 	bl	800d214 <getSensorLock>
 800b30c:	1e03      	subs	r3, r0, #0
 800b30e:	d000      	beq.n	800b312 <BMP_Upkeep+0x86>
 800b310:	e127      	b.n	800b562 <BMP_Upkeep+0x2d6>
      break;
    }
    setSensorLock(BMP280);
 800b312:	2003      	movs	r0, #3
 800b314:	f001 ff6a 	bl	800d1ec <setSensorLock>
    if (BMP280_set_config()) {
 800b318:	f7ff fd94 	bl	800ae44 <BMP280_set_config>
 800b31c:	1e03      	subs	r3, r0, #0
 800b31e:	d003      	beq.n	800b328 <BMP_Upkeep+0x9c>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b320:	4b97      	ldr	r3, [pc, #604]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b322:	2202      	movs	r2, #2
 800b324:	701a      	strb	r2, [r3, #0]
 800b326:	e00f      	b.n	800b348 <BMP_Upkeep+0xbc>
    }
    else {
      Error("Error while configuring BMP280");
 800b328:	4a9a      	ldr	r2, [pc, #616]	@ (800b594 <BMP_Upkeep+0x308>)
 800b32a:	4b9b      	ldr	r3, [pc, #620]	@ (800b598 <BMP_Upkeep+0x30c>)
 800b32c:	0019      	movs	r1, r3
 800b32e:	2001      	movs	r0, #1
 800b330:	f007 feba 	bl	80130a8 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b334:	f008 fbf8 	bl	8013b28 <HAL_GetTick>
 800b338:	0003      	movs	r3, r0
 800b33a:	4a98      	ldr	r2, [pc, #608]	@ (800b59c <BMP_Upkeep+0x310>)
 800b33c:	189a      	adds	r2, r3, r2
 800b33e:	4b8f      	ldr	r3, [pc, #572]	@ (800b57c <BMP_Upkeep+0x2f0>)
 800b340:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b342:	4b8f      	ldr	r3, [pc, #572]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b344:	2208      	movs	r2, #8
 800b346:	701a      	strb	r2, [r3, #0]
     }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b348:	200a      	movs	r0, #10
 800b34a:	f008 fbf7 	bl	8013b3c <HAL_Delay>
    setSensorLock(FREE);
 800b34e:	2000      	movs	r0, #0
 800b350:	f001 ff4c 	bl	800d1ec <setSensorLock>
  break;
 800b354:	e10c      	b.n	800b570 <BMP_Upkeep+0x2e4>

  case BMP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b356:	f001 ff5d 	bl	800d214 <getSensorLock>
 800b35a:	1e03      	subs	r3, r0, #0
 800b35c:	d030      	beq.n	800b3c0 <BMP_Upkeep+0x134>
      uint8_t locktype = getSensorLock();
 800b35e:	1dfc      	adds	r4, r7, #7
 800b360:	f001 ff58 	bl	800d214 <getSensorLock>
 800b364:	0003      	movs	r3, r0
 800b366:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800b368:	1dfb      	adds	r3, r7, #7
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d019      	beq.n	800b3a4 <BMP_Upkeep+0x118>
 800b370:	1dfb      	adds	r3, r7, #7
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d013      	beq.n	800b3a0 <BMP_Upkeep+0x114>
 800b378:	1dfb      	adds	r3, r7, #7
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b05      	cmp	r3, #5
 800b37e:	d00d      	beq.n	800b39c <BMP_Upkeep+0x110>
 800b380:	1dfb      	adds	r3, r7, #7
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	2b02      	cmp	r3, #2
 800b386:	d007      	beq.n	800b398 <BMP_Upkeep+0x10c>
 800b388:	1dfb      	adds	r3, r7, #7
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	2b03      	cmp	r3, #3
 800b38e:	d101      	bne.n	800b394 <BMP_Upkeep+0x108>
 800b390:	4b83      	ldr	r3, [pc, #524]	@ (800b5a0 <BMP_Upkeep+0x314>)
 800b392:	e008      	b.n	800b3a6 <BMP_Upkeep+0x11a>
 800b394:	4b83      	ldr	r3, [pc, #524]	@ (800b5a4 <BMP_Upkeep+0x318>)
 800b396:	e006      	b.n	800b3a6 <BMP_Upkeep+0x11a>
 800b398:	4b83      	ldr	r3, [pc, #524]	@ (800b5a8 <BMP_Upkeep+0x31c>)
 800b39a:	e004      	b.n	800b3a6 <BMP_Upkeep+0x11a>
 800b39c:	4b83      	ldr	r3, [pc, #524]	@ (800b5ac <BMP_Upkeep+0x320>)
 800b39e:	e002      	b.n	800b3a6 <BMP_Upkeep+0x11a>
 800b3a0:	4b83      	ldr	r3, [pc, #524]	@ (800b5b0 <BMP_Upkeep+0x324>)
 800b3a2:	e000      	b.n	800b3a6 <BMP_Upkeep+0x11a>
 800b3a4:	4b83      	ldr	r3, [pc, #524]	@ (800b5b4 <BMP_Upkeep+0x328>)
 800b3a6:	4a84      	ldr	r2, [pc, #528]	@ (800b5b8 <BMP_Upkeep+0x32c>)
 800b3a8:	4978      	ldr	r1, [pc, #480]	@ (800b58c <BMP_Upkeep+0x300>)
 800b3aa:	2003      	movs	r0, #3
 800b3ac:	f007 fe7c 	bl	80130a8 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800b3b0:	f008 fbba 	bl	8013b28 <HAL_GetTick>
 800b3b4:	0003      	movs	r3, r0
 800b3b6:	3361      	adds	r3, #97	@ 0x61
 800b3b8:	001a      	movs	r2, r3
 800b3ba:	4b70      	ldr	r3, [pc, #448]	@ (800b57c <BMP_Upkeep+0x2f0>)
 800b3bc:	601a      	str	r2, [r3, #0]
      break;
 800b3be:	e0d7      	b.n	800b570 <BMP_Upkeep+0x2e4>
    }
    if (getSensorLock() == FREE) {
 800b3c0:	f001 ff28 	bl	800d214 <getSensorLock>
 800b3c4:	1e03      	subs	r3, r0, #0
 800b3c6:	d105      	bne.n	800b3d4 <BMP_Upkeep+0x148>
      HAL_Delay(10);
 800b3c8:	200a      	movs	r0, #10
 800b3ca:	f008 fbb7 	bl	8013b3c <HAL_Delay>
      setSensorLock(BMP280);
 800b3ce:	2003      	movs	r0, #3
 800b3d0:	f001 ff0c 	bl	800d1ec <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800b3d4:	f7ff fd5a 	bl	800ae8c <BMP280_set_mode>
 800b3d8:	1e03      	subs	r3, r0, #0
 800b3da:	d003      	beq.n	800b3e4 <BMP_Upkeep+0x158>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b3dc:	4b68      	ldr	r3, [pc, #416]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b3de:	2205      	movs	r2, #5
 800b3e0:	701a      	strb	r2, [r3, #0]
 800b3e2:	e00f      	b.n	800b404 <BMP_Upkeep+0x178>
    }
    else {
      Error("Error while setting BMP280 to forced mode");
 800b3e4:	4a75      	ldr	r2, [pc, #468]	@ (800b5bc <BMP_Upkeep+0x330>)
 800b3e6:	4b6c      	ldr	r3, [pc, #432]	@ (800b598 <BMP_Upkeep+0x30c>)
 800b3e8:	0019      	movs	r1, r3
 800b3ea:	2001      	movs	r0, #1
 800b3ec:	f007 fe5c 	bl	80130a8 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b3f0:	f008 fb9a 	bl	8013b28 <HAL_GetTick>
 800b3f4:	0003      	movs	r3, r0
 800b3f6:	4a69      	ldr	r2, [pc, #420]	@ (800b59c <BMP_Upkeep+0x310>)
 800b3f8:	189a      	adds	r2, r3, r2
 800b3fa:	4b60      	ldr	r3, [pc, #384]	@ (800b57c <BMP_Upkeep+0x2f0>)
 800b3fc:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b3fe:	4b60      	ldr	r3, [pc, #384]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b400:	2208      	movs	r2, #8
 800b402:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b404:	200a      	movs	r0, #10
 800b406:	f008 fb99 	bl	8013b3c <HAL_Delay>
    setSensorLock(FREE);
 800b40a:	2000      	movs	r0, #0
 800b40c:	f001 feee 	bl	800d1ec <setSensorLock>
    break;
 800b410:	e0ae      	b.n	800b570 <BMP_Upkeep+0x2e4>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (getSensorLock() != FREE) {
 800b412:	f001 feff 	bl	800d214 <getSensorLock>
 800b416:	1e03      	subs	r3, r0, #0
 800b418:	d000      	beq.n	800b41c <BMP_Upkeep+0x190>
 800b41a:	e0a4      	b.n	800b566 <BMP_Upkeep+0x2da>
      break;
    }
    HAL_Delay(10);
 800b41c:	200a      	movs	r0, #10
 800b41e:	f008 fb8d 	bl	8013b3c <HAL_Delay>
    setSensorLock(BMP280);
 800b422:	2003      	movs	r0, #3
 800b424:	f001 fee2 	bl	800d1ec <setSensorLock>
    if (BMP280_get_measurement_values()) {
 800b428:	f7ff fdb0 	bl	800af8c <BMP280_get_measurement_values>
 800b42c:	1e03      	subs	r3, r0, #0
 800b42e:	d003      	beq.n	800b438 <BMP_Upkeep+0x1ac>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800b430:	4b53      	ldr	r3, [pc, #332]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b432:	2203      	movs	r2, #3
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	e00f      	b.n	800b458 <BMP_Upkeep+0x1cc>
    }
    else {
      Error("BMP280 Error during reading measurement results array");
 800b438:	4a61      	ldr	r2, [pc, #388]	@ (800b5c0 <BMP_Upkeep+0x334>)
 800b43a:	4b57      	ldr	r3, [pc, #348]	@ (800b598 <BMP_Upkeep+0x30c>)
 800b43c:	0019      	movs	r1, r3
 800b43e:	2001      	movs	r0, #1
 800b440:	f007 fe32 	bl	80130a8 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b444:	f008 fb70 	bl	8013b28 <HAL_GetTick>
 800b448:	0003      	movs	r3, r0
 800b44a:	4a54      	ldr	r2, [pc, #336]	@ (800b59c <BMP_Upkeep+0x310>)
 800b44c:	189a      	adds	r2, r3, r2
 800b44e:	4b4b      	ldr	r3, [pc, #300]	@ (800b57c <BMP_Upkeep+0x2f0>)
 800b450:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b452:	4b4b      	ldr	r3, [pc, #300]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b454:	2208      	movs	r2, #8
 800b456:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b458:	200a      	movs	r0, #10
 800b45a:	f008 fb6f 	bl	8013b3c <HAL_Delay>
    setSensorLock(FREE);
 800b45e:	2000      	movs	r0, #0
 800b460:	f001 fec4 	bl	800d1ec <setSensorLock>
  break;
 800b464:	e084      	b.n	800b570 <BMP_Upkeep+0x2e4>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800b466:	f7ff fe1d 	bl	800b0a4 <BMP280_calc_temperature>
 800b46a:	1c03      	adds	r3, r0, #0
 800b46c:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800b46e:	f7ff fe61 	bl	800b134 <BMP280_calc_pressure>
 800b472:	1c03      	adds	r3, r0, #0
 800b474:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800b476:	4953      	ldr	r1, [pc, #332]	@ (800b5c4 <BMP_Upkeep+0x338>)
 800b478:	68b8      	ldr	r0, [r7, #8]
 800b47a:	f7f5 f86d 	bl	8000558 <__aeabi_fcmpgt>
 800b47e:	1e03      	subs	r3, r0, #0
 800b480:	d02b      	beq.n	800b4da <BMP_Upkeep+0x24e>
 800b482:	4951      	ldr	r1, [pc, #324]	@ (800b5c8 <BMP_Upkeep+0x33c>)
 800b484:	68b8      	ldr	r0, [r7, #8]
 800b486:	f7f5 f853 	bl	8000530 <__aeabi_fcmplt>
 800b48a:	1e03      	subs	r3, r0, #0
 800b48c:	d025      	beq.n	800b4da <BMP_Upkeep+0x24e>
      sethPa(airhpa);
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	1c18      	adds	r0, r3, #0
 800b492:	f7f9 fb83 	bl	8004b9c <sethPa>
      Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f7f8 f9fc 	bl	8003894 <__aeabi_f2d>
 800b49c:	0004      	movs	r4, r0
 800b49e:	000d      	movs	r5, r1
 800b4a0:	68b8      	ldr	r0, [r7, #8]
 800b4a2:	f7f8 f9f7 	bl	8003894 <__aeabi_f2d>
 800b4a6:	0002      	movs	r2, r0
 800b4a8:	000b      	movs	r3, r1
 800b4aa:	4848      	ldr	r0, [pc, #288]	@ (800b5cc <BMP_Upkeep+0x340>)
 800b4ac:	4948      	ldr	r1, [pc, #288]	@ (800b5d0 <BMP_Upkeep+0x344>)
 800b4ae:	9202      	str	r2, [sp, #8]
 800b4b0:	9303      	str	r3, [sp, #12]
 800b4b2:	9400      	str	r4, [sp, #0]
 800b4b4:	9501      	str	r5, [sp, #4]
 800b4b6:	0002      	movs	r2, r0
 800b4b8:	2002      	movs	r0, #2
 800b4ba:	f007 fdf5 	bl	80130a8 <CreateLine>
      setBMP280(airtemp, airhpa);
 800b4be:	68ba      	ldr	r2, [r7, #8]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	1c11      	adds	r1, r2, #0
 800b4c4:	1c18      	adds	r0, r3, #0
 800b4c6:	f7f9 fb05 	bl	8004ad4 <setBMP280>
      BMP280TimeStamp = HAL_GetTick() + 60000;
 800b4ca:	f008 fb2d 	bl	8013b28 <HAL_GetTick>
 800b4ce:	0003      	movs	r3, r0
 800b4d0:	4a40      	ldr	r2, [pc, #256]	@ (800b5d4 <BMP_Upkeep+0x348>)
 800b4d2:	189a      	adds	r2, r3, r2
 800b4d4:	4b29      	ldr	r3, [pc, #164]	@ (800b57c <BMP_Upkeep+0x2f0>)
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	e00c      	b.n	800b4f4 <BMP_Upkeep+0x268>
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800b4da:	4a3f      	ldr	r2, [pc, #252]	@ (800b5d8 <BMP_Upkeep+0x34c>)
 800b4dc:	4b2e      	ldr	r3, [pc, #184]	@ (800b598 <BMP_Upkeep+0x30c>)
 800b4de:	0019      	movs	r1, r3
 800b4e0:	2001      	movs	r0, #1
 800b4e2:	f007 fde1 	bl	80130a8 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b4e6:	f008 fb1f 	bl	8013b28 <HAL_GetTick>
 800b4ea:	0003      	movs	r3, r0
 800b4ec:	4a2b      	ldr	r2, [pc, #172]	@ (800b59c <BMP_Upkeep+0x310>)
 800b4ee:	189a      	adds	r2, r3, r2
 800b4f0:	4b22      	ldr	r3, [pc, #136]	@ (800b57c <BMP_Upkeep+0x2f0>)
 800b4f2:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800b4f4:	4b22      	ldr	r3, [pc, #136]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b4f6:	2208      	movs	r2, #8
 800b4f8:	701a      	strb	r2, [r3, #0]
    break;
 800b4fa:	e039      	b.n	800b570 <BMP_Upkeep+0x2e4>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800b4fc:	4b20      	ldr	r3, [pc, #128]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b4fe:	2209      	movs	r2, #9
 800b500:	701a      	strb	r2, [r3, #0]
    break;
 800b502:	e035      	b.n	800b570 <BMP_Upkeep+0x2e4>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800b504:	f001 fe86 	bl	800d214 <getSensorLock>
 800b508:	1e03      	subs	r3, r0, #0
 800b50a:	d12e      	bne.n	800b56a <BMP_Upkeep+0x2de>
      break;
    }
    setSensorLock(BMP280);
 800b50c:	2003      	movs	r0, #3
 800b50e:	f001 fe6d 	bl	800d1ec <setSensorLock>
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800b512:	f7ff fd0f 	bl	800af34 <BMP280_get_mode>
 800b516:	0003      	movs	r3, r0
 800b518:	2b03      	cmp	r3, #3
 800b51a:	d103      	bne.n	800b524 <BMP_Upkeep+0x298>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b51c:	4b18      	ldr	r3, [pc, #96]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b51e:	2205      	movs	r2, #5
 800b520:	701a      	strb	r2, [r3, #0]
 800b522:	e002      	b.n	800b52a <BMP_Upkeep+0x29e>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b524:	4b16      	ldr	r3, [pc, #88]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b526:	2202      	movs	r2, #2
 800b528:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b52a:	200a      	movs	r0, #10
 800b52c:	f008 fb06 	bl	8013b3c <HAL_Delay>
    setSensorLock(FREE);
 800b530:	2000      	movs	r0, #0
 800b532:	f001 fe5b 	bl	800d1ec <setSensorLock>
    BMP280TimeStamp = HAL_GetTick() + 23;
 800b536:	f008 faf7 	bl	8013b28 <HAL_GetTick>
 800b53a:	0003      	movs	r3, r0
 800b53c:	3317      	adds	r3, #23
 800b53e:	001a      	movs	r2, r3
 800b540:	4b0e      	ldr	r3, [pc, #56]	@ (800b57c <BMP_Upkeep+0x2f0>)
 800b542:	601a      	str	r2, [r3, #0]
    break;
 800b544:	e014      	b.n	800b570 <BMP_Upkeep+0x2e4>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800b546:	4b0e      	ldr	r3, [pc, #56]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b548:	2200      	movs	r2, #0
 800b54a:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800b54c:	f001 fe62 	bl	800d214 <getSensorLock>
 800b550:	0003      	movs	r3, r0
 800b552:	2b03      	cmp	r3, #3
 800b554:	d10b      	bne.n	800b56e <BMP_Upkeep+0x2e2>
      setSensorLock(FREE);
 800b556:	2000      	movs	r0, #0
 800b558:	f001 fe48 	bl	800d1ec <setSensorLock>
    }
    break;
 800b55c:	e007      	b.n	800b56e <BMP_Upkeep+0x2e2>
      break;
 800b55e:	46c0      	nop			@ (mov r8, r8)
 800b560:	e006      	b.n	800b570 <BMP_Upkeep+0x2e4>
      break;
 800b562:	46c0      	nop			@ (mov r8, r8)
 800b564:	e004      	b.n	800b570 <BMP_Upkeep+0x2e4>
      break;
 800b566:	46c0      	nop			@ (mov r8, r8)
 800b568:	e002      	b.n	800b570 <BMP_Upkeep+0x2e4>
      break;
 800b56a:	46c0      	nop			@ (mov r8, r8)
 800b56c:	e000      	b.n	800b570 <BMP_Upkeep+0x2e4>
    break;
 800b56e:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800b570:	4b03      	ldr	r3, [pc, #12]	@ (800b580 <BMP_Upkeep+0x2f4>)
 800b572:	781b      	ldrb	r3, [r3, #0]
}
 800b574:	0018      	movs	r0, r3
 800b576:	46bd      	mov	sp, r7
 800b578:	b004      	add	sp, #16
 800b57a:	bdb0      	pop	{r4, r5, r7, pc}
 800b57c:	20000c28 	.word	0x20000c28
 800b580:	20000096 	.word	0x20000096
 800b584:	0802d830 	.word	0x0802d830
 800b588:	0802be08 	.word	0x0802be08
 800b58c:	0802ba08 	.word	0x0802ba08
 800b590:	002f9b80 	.word	0x002f9b80
 800b594:	0802be44 	.word	0x0802be44
 800b598:	0802bcf8 	.word	0x0802bcf8
 800b59c:	00002710 	.word	0x00002710
 800b5a0:	0802be64 	.word	0x0802be64
 800b5a4:	0802be6c 	.word	0x0802be6c
 800b5a8:	0802be74 	.word	0x0802be74
 800b5ac:	0802be7c 	.word	0x0802be7c
 800b5b0:	0802be84 	.word	0x0802be84
 800b5b4:	0802be8c 	.word	0x0802be8c
 800b5b8:	0802be94 	.word	0x0802be94
 800b5bc:	0802bebc 	.word	0x0802bebc
 800b5c0:	0802bee8 	.word	0x0802bee8
 800b5c4:	44548000 	.word	0x44548000
 800b5c8:	44898000 	.word	0x44898000
 800b5cc:	0802bf20 	.word	0x0802bf20
 800b5d0:	0802b9e8 	.word	0x0802b9e8
 800b5d4:	0000ea60 	.word	0x0000ea60
 800b5d8:	0802bf58 	.word	0x0802bf58

0800b5dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b5e2:	4b10      	ldr	r3, [pc, #64]	@ (800b624 <MX_DMA_Init+0x48>)
 800b5e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b624 <MX_DMA_Init+0x48>)
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b624 <MX_DMA_Init+0x48>)
 800b5f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	607b      	str	r3, [r7, #4]
 800b5f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	200a      	movs	r0, #10
 800b600:	f008 ff36 	bl	8014470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800b604:	200a      	movs	r0, #10
 800b606:	f008 ff48 	bl	801449a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800b60a:	2200      	movs	r2, #0
 800b60c:	2103      	movs	r1, #3
 800b60e:	200b      	movs	r0, #11
 800b610:	f008 ff2e 	bl	8014470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800b614:	200b      	movs	r0, #11
 800b616:	f008 ff40 	bl	801449a <HAL_NVIC_EnableIRQ>

}
 800b61a:	46c0      	nop			@ (mov r8, r8)
 800b61c:	46bd      	mov	sp, r7
 800b61e:	b002      	add	sp, #8
 800b620:	bd80      	pop	{r7, pc}
 800b622:	46c0      	nop			@ (mov r8, r8)
 800b624:	40021000 	.word	0x40021000

0800b628 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b628:	b590      	push	{r4, r7, lr}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	1dbb      	adds	r3, r7, #6
 800b634:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800b636:	4b17      	ldr	r3, [pc, #92]	@ (800b694 <WriteUint8ArrayEeprom+0x6c>)
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b63c:	f009 faaa 	bl	8014b94 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800b640:	2316      	movs	r3, #22
 800b642:	18fb      	adds	r3, r7, r3
 800b644:	2200      	movs	r2, #0
 800b646:	801a      	strh	r2, [r3, #0]
 800b648:	e015      	b.n	800b676 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800b64a:	4b12      	ldr	r3, [pc, #72]	@ (800b694 <WriteUint8ArrayEeprom+0x6c>)
 800b64c:	6819      	ldr	r1, [r3, #0]
 800b64e:	2416      	movs	r4, #22
 800b650:	193b      	adds	r3, r7, r4
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	18d3      	adds	r3, r2, r3
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	001a      	movs	r2, r3
 800b65c:	2000      	movs	r0, #0
 800b65e:	f009 fb01 	bl	8014c64 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800b662:	4b0c      	ldr	r3, [pc, #48]	@ (800b694 <WriteUint8ArrayEeprom+0x6c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	4b0a      	ldr	r3, [pc, #40]	@ (800b694 <WriteUint8ArrayEeprom+0x6c>)
 800b66a:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b66c:	193b      	adds	r3, r7, r4
 800b66e:	881a      	ldrh	r2, [r3, #0]
 800b670:	193b      	adds	r3, r7, r4
 800b672:	3201      	adds	r2, #1
 800b674:	801a      	strh	r2, [r3, #0]
 800b676:	2316      	movs	r3, #22
 800b678:	18fa      	adds	r2, r7, r3
 800b67a:	1dbb      	adds	r3, r7, #6
 800b67c:	8812      	ldrh	r2, [r2, #0]
 800b67e:	881b      	ldrh	r3, [r3, #0]
 800b680:	429a      	cmp	r2, r3
 800b682:	d3e2      	bcc.n	800b64a <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b684:	f009 fab4 	bl	8014bf0 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800b688:	4b02      	ldr	r3, [pc, #8]	@ (800b694 <WriteUint8ArrayEeprom+0x6c>)
 800b68a:	681b      	ldr	r3, [r3, #0]
}
 800b68c:	0018      	movs	r0, r3
 800b68e:	46bd      	mov	sp, r7
 800b690:	b007      	add	sp, #28
 800b692:	bd90      	pop	{r4, r7, pc}
 800b694:	20000c4c 	.word	0x20000c4c

0800b698 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	0019      	movs	r1, r3
 800b6a4:	1dbb      	adds	r3, r7, #6
 800b6a6:	801a      	strh	r2, [r3, #0]
 800b6a8:	1d3b      	adds	r3, r7, #4
 800b6aa:	1c0a      	adds	r2, r1, #0
 800b6ac:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800b6ae:	1dba      	adds	r2, r7, #6
 800b6b0:	1d3b      	adds	r3, r7, #4
 800b6b2:	8812      	ldrh	r2, [r2, #0]
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d806      	bhi.n	800b6c8 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800b6ba:	1dbb      	adds	r3, r7, #6
 800b6bc:	881a      	ldrh	r2, [r3, #0]
 800b6be:	68b9      	ldr	r1, [r7, #8]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	0018      	movs	r0, r3
 800b6c4:	f7ff ffb0 	bl	800b628 <WriteUint8ArrayEeprom>
    }
}
 800b6c8:	46c0      	nop			@ (mov r8, r8)
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	b004      	add	sp, #16
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	1dbb      	adds	r3, r7, #6
 800b6dc:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b6de:	2316      	movs	r3, #22
 800b6e0:	18fb      	adds	r3, r7, r3
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	801a      	strh	r2, [r3, #0]
 800b6e6:	e010      	b.n	800b70a <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800b6e8:	2016      	movs	r0, #22
 800b6ea:	183b      	adds	r3, r7, r0
 800b6ec:	881a      	ldrh	r2, [r3, #0]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	18d3      	adds	r3, r2, r3
 800b6f2:	0019      	movs	r1, r3
 800b6f4:	183b      	adds	r3, r7, r0
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	18d3      	adds	r3, r2, r3
 800b6fc:	780a      	ldrb	r2, [r1, #0]
 800b6fe:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b700:	183b      	adds	r3, r7, r0
 800b702:	881a      	ldrh	r2, [r3, #0]
 800b704:	183b      	adds	r3, r7, r0
 800b706:	3201      	adds	r2, #1
 800b708:	801a      	strh	r2, [r3, #0]
 800b70a:	2316      	movs	r3, #22
 800b70c:	18fa      	adds	r2, r7, r3
 800b70e:	1dbb      	adds	r3, r7, #6
 800b710:	8812      	ldrh	r2, [r2, #0]
 800b712:	881b      	ldrh	r3, [r3, #0]
 800b714:	429a      	cmp	r2, r3
 800b716:	d3e7      	bcc.n	800b6e8 <ReadUint8ArrayEEprom+0x18>
    }
}
 800b718:	46c0      	nop			@ (mov r8, r8)
 800b71a:	46c0      	nop			@ (mov r8, r8)
 800b71c:	46bd      	mov	sp, r7
 800b71e:	b006      	add	sp, #24
 800b720:	bd80      	pop	{r7, pc}

0800b722 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800b722:	b590      	push	{r4, r7, lr}
 800b724:	b085      	sub	sp, #20
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	000a      	movs	r2, r1
 800b72c:	1cbb      	adds	r3, r7, #2
 800b72e:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b730:	f009 fa30 	bl	8014b94 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800b734:	230e      	movs	r3, #14
 800b736:	18fb      	adds	r3, r7, r3
 800b738:	2200      	movs	r2, #0
 800b73a:	801a      	strh	r2, [r3, #0]
 800b73c:	e00c      	b.n	800b758 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800b73e:	240e      	movs	r4, #14
 800b740:	193b      	adds	r3, r7, r4
 800b742:	881a      	ldrh	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	18d3      	adds	r3, r2, r3
 800b748:	0018      	movs	r0, r3
 800b74a:	f009 fa5f 	bl	8014c0c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800b74e:	193b      	adds	r3, r7, r4
 800b750:	193a      	adds	r2, r7, r4
 800b752:	8812      	ldrh	r2, [r2, #0]
 800b754:	3204      	adds	r2, #4
 800b756:	801a      	strh	r2, [r3, #0]
 800b758:	230e      	movs	r3, #14
 800b75a:	18fa      	adds	r2, r7, r3
 800b75c:	1cbb      	adds	r3, r7, #2
 800b75e:	8812      	ldrh	r2, [r2, #0]
 800b760:	881b      	ldrh	r3, [r3, #0]
 800b762:	429a      	cmp	r2, r3
 800b764:	d3eb      	bcc.n	800b73e <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b766:	f009 fa43 	bl	8014bf0 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800b76a:	46c0      	nop			@ (mov r8, r8)
 800b76c:	46bd      	mov	sp, r7
 800b76e:	b005      	add	sp, #20
 800b770:	bd90      	pop	{r4, r7, pc}
	...

0800b774 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2b7f      	cmp	r3, #127	@ 0x7f
 800b784:	d901      	bls.n	800b78a <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800b786:	237f      	movs	r3, #127	@ 0x7f
 800b788:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800b78a:	2017      	movs	r0, #23
 800b78c:	183b      	adds	r3, r7, r0
 800b78e:	490d      	ldr	r1, [pc, #52]	@ (800b7c4 <accessLUT10log10+0x50>)
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	188a      	adds	r2, r1, r2
 800b794:	7812      	ldrb	r2, [r2, #0]
 800b796:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800b798:	0001      	movs	r1, r0
 800b79a:	187b      	adds	r3, r7, r1
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	2206      	movs	r2, #6
 800b7a0:	4113      	asrs	r3, r2
 800b7a2:	001a      	movs	r2, r3
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800b7a8:	187b      	adds	r3, r7, r1
 800b7aa:	781a      	ldrb	r2, [r3, #0]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2106      	movs	r1, #6
 800b7b2:	408b      	lsls	r3, r1
 800b7b4:	1ad2      	subs	r2, r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	601a      	str	r2, [r3, #0]
}
 800b7ba:	46c0      	nop			@ (mov r8, r8)
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	b006      	add	sp, #24
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	46c0      	nop			@ (mov r8, r8)
 800b7c4:	0802d858 	.word	0x0802d858

0800b7c8 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800b7c8:	b5b0      	push	{r4, r5, r7, lr}
 800b7ca:	b090      	sub	sp, #64	@ 0x40
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6138      	str	r0, [r7, #16]
 800b7d0:	6179      	str	r1, [r7, #20]
 800b7d2:	60fa      	str	r2, [r7, #12]
 800b7d4:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800b7d6:	2308      	movs	r3, #8
 800b7d8:	001a      	movs	r2, r3
 800b7da:	3a20      	subs	r2, #32
 800b7dc:	2a00      	cmp	r2, #0
 800b7de:	db03      	blt.n	800b7e8 <efficient10log10+0x20>
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	4091      	lsls	r1, r2
 800b7e4:	000d      	movs	r5, r1
 800b7e6:	e008      	b.n	800b7fa <efficient10log10+0x32>
 800b7e8:	2220      	movs	r2, #32
 800b7ea:	1ad2      	subs	r2, r2, r3
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	40d1      	lsrs	r1, r2
 800b7f0:	000a      	movs	r2, r1
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4099      	lsls	r1, r3
 800b7f6:	000d      	movs	r5, r1
 800b7f8:	4315      	orrs	r5, r2
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	409a      	lsls	r2, r3
 800b7fe:	0014      	movs	r4, r2
 800b800:	2201      	movs	r2, #1
 800b802:	4252      	negs	r2, r2
 800b804:	17d3      	asrs	r3, r2, #31
 800b806:	1912      	adds	r2, r2, r4
 800b808:	416b      	adcs	r3, r5
 800b80a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b80c:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800b80e:	2336      	movs	r3, #54	@ 0x36
 800b810:	2208      	movs	r2, #8
 800b812:	189b      	adds	r3, r3, r2
 800b814:	19db      	adds	r3, r3, r7
 800b816:	2200      	movs	r2, #0
 800b818:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b81a:	e017      	b.n	800b84c <efficient10log10+0x84>
    {
        P = P >> 1;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	07db      	lsls	r3, r3, #31
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	0852      	lsrs	r2, r2, #1
 800b824:	603a      	str	r2, [r7, #0]
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	431a      	orrs	r2, r3
 800b82a:	603a      	str	r2, [r7, #0]
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	085b      	lsrs	r3, r3, #1
 800b830:	607b      	str	r3, [r7, #4]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	687c      	ldr	r4, [r7, #4]
 800b836:	613b      	str	r3, [r7, #16]
 800b838:	617c      	str	r4, [r7, #20]
        bShift++;
 800b83a:	2136      	movs	r1, #54	@ 0x36
 800b83c:	2008      	movs	r0, #8
 800b83e:	180b      	adds	r3, r1, r0
 800b840:	19db      	adds	r3, r3, r7
 800b842:	881a      	ldrh	r2, [r3, #0]
 800b844:	180b      	adds	r3, r1, r0
 800b846:	19db      	adds	r3, r3, r7
 800b848:	3201      	adds	r2, #1
 800b84a:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b850:	429a      	cmp	r2, r3
 800b852:	d8e3      	bhi.n	800b81c <efficient10log10+0x54>
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b858:	429a      	cmp	r2, r3
 800b85a:	d103      	bne.n	800b864 <efficient10log10+0x9c>
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b860:	429a      	cmp	r2, r3
 800b862:	d8db      	bhi.n	800b81c <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	2308      	movs	r3, #8
 800b868:	3b01      	subs	r3, #1
 800b86a:	2101      	movs	r1, #1
 800b86c:	4099      	lsls	r1, r3
 800b86e:	000b      	movs	r3, r1
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800b87c:	231c      	movs	r3, #28
 800b87e:	2408      	movs	r4, #8
 800b880:	191b      	adds	r3, r3, r4
 800b882:	19da      	adds	r2, r3, r7
 800b884:	2320      	movs	r3, #32
 800b886:	191b      	adds	r3, r3, r4
 800b888:	19d9      	adds	r1, r3, r7
 800b88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b88c:	0018      	movs	r0, r3
 800b88e:	f7ff ff71 	bl	800b774 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800b892:	2215      	movs	r2, #21
 800b894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b896:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800b898:	2036      	movs	r0, #54	@ 0x36
 800b89a:	1902      	adds	r2, r0, r4
 800b89c:	19d2      	adds	r2, r2, r7
 800b89e:	8812      	ldrh	r2, [r2, #0]
 800b8a0:	2103      	movs	r1, #3
 800b8a2:	434a      	muls	r2, r1
 800b8a4:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800b8a6:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800b8a8:	0021      	movs	r1, r4
 800b8aa:	1843      	adds	r3, r0, r1
 800b8ac:	19db      	adds	r3, r3, r7
 800b8ae:	881b      	ldrh	r3, [r3, #0]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	4353      	muls	r3, r2
 800b8b4:	2203      	movs	r2, #3
 800b8b6:	4113      	asrs	r3, r2
 800b8b8:	001a      	movs	r2, r3
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8bc:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800b8be:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800b8c0:	2314      	movs	r3, #20
 800b8c2:	185b      	adds	r3, r3, r1
 800b8c4:	19da      	adds	r2, r3, r7
 800b8c6:	2318      	movs	r3, #24
 800b8c8:	185b      	adds	r3, r3, r1
 800b8ca:	19db      	adds	r3, r3, r7
 800b8cc:	0011      	movs	r1, r2
 800b8ce:	0018      	movs	r0, r3
 800b8d0:	f000 f80a 	bl	800b8e8 <correctIntFracNumber>
    integerPart[0] = intPart;
 800b8d4:	6a3a      	ldr	r2, [r7, #32]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800b8da:	69fa      	ldr	r2, [r7, #28]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	601a      	str	r2, [r3, #0]
}
 800b8e0:	46c0      	nop			@ (mov r8, r8)
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	b010      	add	sp, #64	@ 0x40
 800b8e6:	bdb0      	pop	{r4, r5, r7, pc}

0800b8e8 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800b8f2:	e00a      	b.n	800b90a <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	1c5a      	adds	r2, r3, #1
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3b0a      	subs	r3, #10
 800b904:	001a      	movs	r2, r3
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b09      	cmp	r3, #9
 800b910:	dcf0      	bgt.n	800b8f4 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800b912:	e00a      	b.n	800b92a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	1e5a      	subs	r2, r3, #1
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	330a      	adds	r3, #10
 800b924:	001a      	movs	r2, r3
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	3309      	adds	r3, #9
 800b930:	dbf0      	blt.n	800b914 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	da0f      	bge.n	800b95a <correctIntFracNumber+0x72>
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	dd0b      	ble.n	800b95a <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	1c5a      	adds	r2, r3, #1
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	3b0a      	subs	r3, #10
 800b952:	001a      	movs	r2, r3
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800b958:	e012      	b.n	800b980 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	dd0e      	ble.n	800b980 <correctIntFracNumber+0x98>
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	da0a      	bge.n	800b980 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	1e5a      	subs	r2, r3, #1
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	330a      	adds	r3, #10
 800b97a:	001a      	movs	r2, r3
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	601a      	str	r2, [r3, #0]
}
 800b980:	46c0      	nop			@ (mov r8, r8)
 800b982:	46bd      	mov	sp, r7
 800b984:	b002      	add	sp, #8
 800b986:	bd80      	pop	{r7, pc}

0800b988 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800b988:	b590      	push	{r4, r7, lr}
 800b98a:	b08b      	sub	sp, #44	@ 0x2c
 800b98c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b98e:	2414      	movs	r4, #20
 800b990:	193b      	adds	r3, r7, r4
 800b992:	0018      	movs	r0, r3
 800b994:	2314      	movs	r3, #20
 800b996:	001a      	movs	r2, r3
 800b998:	2100      	movs	r1, #0
 800b99a:	f019 fe5b 	bl	8025654 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b99e:	4b8a      	ldr	r3, [pc, #552]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a2:	4b89      	ldr	r3, [pc, #548]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9a4:	2104      	movs	r1, #4
 800b9a6:	430a      	orrs	r2, r1
 800b9a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b9aa:	4b87      	ldr	r3, [pc, #540]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ae:	2204      	movs	r2, #4
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	613b      	str	r3, [r7, #16]
 800b9b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b9b6:	4b84      	ldr	r3, [pc, #528]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ba:	4b83      	ldr	r3, [pc, #524]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9bc:	2180      	movs	r1, #128	@ 0x80
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b9c2:	4b81      	ldr	r3, [pc, #516]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c6:	2280      	movs	r2, #128	@ 0x80
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9ce:	4b7e      	ldr	r3, [pc, #504]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d2:	4b7d      	ldr	r3, [pc, #500]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b9da:	4b7b      	ldr	r3, [pc, #492]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9de:	2201      	movs	r2, #1
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	60bb      	str	r3, [r7, #8]
 800b9e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b9e6:	4b78      	ldr	r3, [pc, #480]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ea:	4b77      	ldr	r3, [pc, #476]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9ec:	2102      	movs	r1, #2
 800b9ee:	430a      	orrs	r2, r1
 800b9f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b9f2:	4b75      	ldr	r3, [pc, #468]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800b9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	607b      	str	r3, [r7, #4]
 800b9fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b9fe:	4b72      	ldr	r3, [pc, #456]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800ba00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba02:	4b71      	ldr	r3, [pc, #452]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800ba04:	2108      	movs	r1, #8
 800ba06:	430a      	orrs	r2, r1
 800ba08:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ba0a:	4b6f      	ldr	r3, [pc, #444]	@ (800bbc8 <MX_GPIO_Init+0x240>)
 800ba0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0e:	2208      	movs	r2, #8
 800ba10:	4013      	ands	r3, r2
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800ba16:	4b6d      	ldr	r3, [pc, #436]	@ (800bbcc <MX_GPIO_Init+0x244>)
 800ba18:	2201      	movs	r2, #1
 800ba1a:	2101      	movs	r1, #1
 800ba1c:	0018      	movs	r0, r3
 800ba1e:	f009 fb14 	bl	801504a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800ba22:	4b6a      	ldr	r3, [pc, #424]	@ (800bbcc <MX_GPIO_Init+0x244>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	2102      	movs	r1, #2
 800ba28:	0018      	movs	r0, r3
 800ba2a:	f009 fb0e 	bl	801504a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800ba2e:	4968      	ldr	r1, [pc, #416]	@ (800bbd0 <MX_GPIO_Init+0x248>)
 800ba30:	4b68      	ldr	r3, [pc, #416]	@ (800bbd4 <MX_GPIO_Init+0x24c>)
 800ba32:	2201      	movs	r2, #1
 800ba34:	0018      	movs	r0, r3
 800ba36:	f009 fb08 	bl	801504a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800ba3a:	2380      	movs	r3, #128	@ 0x80
 800ba3c:	011b      	lsls	r3, r3, #4
 800ba3e:	4866      	ldr	r0, [pc, #408]	@ (800bbd8 <MX_GPIO_Init+0x250>)
 800ba40:	2201      	movs	r2, #1
 800ba42:	0019      	movs	r1, r3
 800ba44:	f009 fb01 	bl	801504a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800ba48:	2380      	movs	r3, #128	@ 0x80
 800ba4a:	015b      	lsls	r3, r3, #5
 800ba4c:	4862      	ldr	r0, [pc, #392]	@ (800bbd8 <MX_GPIO_Init+0x250>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	0019      	movs	r1, r3
 800ba52:	f009 fafa 	bl	801504a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800ba56:	193b      	adds	r3, r7, r4
 800ba58:	4a60      	ldr	r2, [pc, #384]	@ (800bbdc <MX_GPIO_Init+0x254>)
 800ba5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ba5c:	193b      	adds	r3, r7, r4
 800ba5e:	2203      	movs	r2, #3
 800ba60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba62:	193b      	adds	r3, r7, r4
 800ba64:	2200      	movs	r2, #0
 800ba66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba68:	193b      	adds	r3, r7, r4
 800ba6a:	4a5b      	ldr	r2, [pc, #364]	@ (800bbd8 <MX_GPIO_Init+0x250>)
 800ba6c:	0019      	movs	r1, r3
 800ba6e:	0010      	movs	r0, r2
 800ba70:	f009 f950 	bl	8014d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800ba74:	193b      	adds	r3, r7, r4
 800ba76:	2203      	movs	r2, #3
 800ba78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ba7a:	193b      	adds	r3, r7, r4
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba80:	193b      	adds	r3, r7, r4
 800ba82:	2200      	movs	r2, #0
 800ba84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba86:	193b      	adds	r3, r7, r4
 800ba88:	2200      	movs	r2, #0
 800ba8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ba8c:	193b      	adds	r3, r7, r4
 800ba8e:	4a4f      	ldr	r2, [pc, #316]	@ (800bbcc <MX_GPIO_Init+0x244>)
 800ba90:	0019      	movs	r1, r3
 800ba92:	0010      	movs	r0, r2
 800ba94:	f009 f93e 	bl	8014d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800ba98:	193b      	adds	r3, r7, r4
 800ba9a:	2270      	movs	r2, #112	@ 0x70
 800ba9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ba9e:	193b      	adds	r3, r7, r4
 800baa0:	2203      	movs	r2, #3
 800baa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baa4:	193b      	adds	r3, r7, r4
 800baa6:	2200      	movs	r2, #0
 800baa8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baaa:	193a      	adds	r2, r7, r4
 800baac:	23a0      	movs	r3, #160	@ 0xa0
 800baae:	05db      	lsls	r3, r3, #23
 800bab0:	0011      	movs	r1, r2
 800bab2:	0018      	movs	r0, r3
 800bab4:	f009 f92e 	bl	8014d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800bab8:	193b      	adds	r3, r7, r4
 800baba:	22c0      	movs	r2, #192	@ 0xc0
 800babc:	0052      	lsls	r2, r2, #1
 800babe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bac0:	193b      	adds	r3, r7, r4
 800bac2:	2200      	movs	r2, #0
 800bac4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bac6:	193b      	adds	r3, r7, r4
 800bac8:	2200      	movs	r2, #0
 800baca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bacc:	193a      	adds	r2, r7, r4
 800bace:	23a0      	movs	r3, #160	@ 0xa0
 800bad0:	05db      	lsls	r3, r3, #23
 800bad2:	0011      	movs	r1, r2
 800bad4:	0018      	movs	r0, r3
 800bad6:	f009 f91d 	bl	8014d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800bada:	193b      	adds	r3, r7, r4
 800badc:	4a3c      	ldr	r2, [pc, #240]	@ (800bbd0 <MX_GPIO_Init+0x248>)
 800bade:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bae0:	193b      	adds	r3, r7, r4
 800bae2:	2201      	movs	r2, #1
 800bae4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bae6:	193b      	adds	r3, r7, r4
 800bae8:	2200      	movs	r2, #0
 800baea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800baec:	193b      	adds	r3, r7, r4
 800baee:	2200      	movs	r2, #0
 800baf0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800baf2:	193b      	adds	r3, r7, r4
 800baf4:	4a37      	ldr	r2, [pc, #220]	@ (800bbd4 <MX_GPIO_Init+0x24c>)
 800baf6:	0019      	movs	r1, r3
 800baf8:	0010      	movs	r0, r2
 800bafa:	f009 f90b 	bl	8014d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800bafe:	193b      	adds	r3, r7, r4
 800bb00:	4a37      	ldr	r2, [pc, #220]	@ (800bbe0 <MX_GPIO_Init+0x258>)
 800bb02:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bb04:	193b      	adds	r3, r7, r4
 800bb06:	2203      	movs	r2, #3
 800bb08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb0a:	193b      	adds	r3, r7, r4
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb10:	193b      	adds	r3, r7, r4
 800bb12:	4a30      	ldr	r2, [pc, #192]	@ (800bbd4 <MX_GPIO_Init+0x24c>)
 800bb14:	0019      	movs	r1, r3
 800bb16:	0010      	movs	r0, r2
 800bb18:	f009 f8fc 	bl	8014d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800bb1c:	0021      	movs	r1, r4
 800bb1e:	187b      	adds	r3, r7, r1
 800bb20:	2280      	movs	r2, #128	@ 0x80
 800bb22:	0092      	lsls	r2, r2, #2
 800bb24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb26:	000c      	movs	r4, r1
 800bb28:	193b      	adds	r3, r7, r4
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb2e:	193b      	adds	r3, r7, r4
 800bb30:	2200      	movs	r2, #0
 800bb32:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800bb34:	193b      	adds	r3, r7, r4
 800bb36:	4a28      	ldr	r2, [pc, #160]	@ (800bbd8 <MX_GPIO_Init+0x250>)
 800bb38:	0019      	movs	r1, r3
 800bb3a:	0010      	movs	r0, r2
 800bb3c:	f009 f8ea 	bl	8014d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800bb40:	193b      	adds	r3, r7, r4
 800bb42:	2280      	movs	r2, #128	@ 0x80
 800bb44:	0212      	lsls	r2, r2, #8
 800bb46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bb48:	193b      	adds	r3, r7, r4
 800bb4a:	2288      	movs	r2, #136	@ 0x88
 800bb4c:	0352      	lsls	r2, r2, #13
 800bb4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb50:	193b      	adds	r3, r7, r4
 800bb52:	2200      	movs	r2, #0
 800bb54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800bb56:	193a      	adds	r2, r7, r4
 800bb58:	23a0      	movs	r3, #160	@ 0xa0
 800bb5a:	05db      	lsls	r3, r3, #23
 800bb5c:	0011      	movs	r1, r2
 800bb5e:	0018      	movs	r0, r3
 800bb60:	f009 f8d8 	bl	8014d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800bb64:	0021      	movs	r1, r4
 800bb66:	187b      	adds	r3, r7, r1
 800bb68:	22c0      	movs	r2, #192	@ 0xc0
 800bb6a:	0152      	lsls	r2, r2, #5
 800bb6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb6e:	000c      	movs	r4, r1
 800bb70:	193b      	adds	r3, r7, r4
 800bb72:	2201      	movs	r2, #1
 800bb74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb76:	193b      	adds	r3, r7, r4
 800bb78:	2200      	movs	r2, #0
 800bb7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb7c:	193b      	adds	r3, r7, r4
 800bb7e:	2200      	movs	r2, #0
 800bb80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bb82:	193b      	adds	r3, r7, r4
 800bb84:	4a14      	ldr	r2, [pc, #80]	@ (800bbd8 <MX_GPIO_Init+0x250>)
 800bb86:	0019      	movs	r1, r3
 800bb88:	0010      	movs	r0, r2
 800bb8a:	f009 f8c3 	bl	8014d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800bb8e:	0021      	movs	r1, r4
 800bb90:	187b      	adds	r3, r7, r1
 800bb92:	2204      	movs	r2, #4
 800bb94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb96:	187b      	adds	r3, r7, r1
 800bb98:	2200      	movs	r2, #0
 800bb9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb9c:	187b      	adds	r3, r7, r1
 800bb9e:	2201      	movs	r2, #1
 800bba0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800bba2:	187b      	adds	r3, r7, r1
 800bba4:	4a0f      	ldr	r2, [pc, #60]	@ (800bbe4 <MX_GPIO_Init+0x25c>)
 800bba6:	0019      	movs	r1, r3
 800bba8:	0010      	movs	r0, r2
 800bbaa:	f009 f8b3 	bl	8014d14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2100      	movs	r1, #0
 800bbb2:	2007      	movs	r0, #7
 800bbb4:	f008 fc5c 	bl	8014470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800bbb8:	2007      	movs	r0, #7
 800bbba:	f008 fc6e 	bl	801449a <HAL_NVIC_EnableIRQ>

}
 800bbbe:	46c0      	nop			@ (mov r8, r8)
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	b00b      	add	sp, #44	@ 0x2c
 800bbc4:	bd90      	pop	{r4, r7, pc}
 800bbc6:	46c0      	nop			@ (mov r8, r8)
 800bbc8:	40021000 	.word	0x40021000
 800bbcc:	50001c00 	.word	0x50001c00
 800bbd0:	00000301 	.word	0x00000301
 800bbd4:	50000400 	.word	0x50000400
 800bbd8:	50000800 	.word	0x50000800
 800bbdc:	0000200c 	.word	0x0000200c
 800bbe0:	0000403e 	.word	0x0000403e
 800bbe4:	50000c00 	.word	0x50000c00

0800bbe8 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	0018      	movs	r0, r3
 800bbf8:	f010 f90e 	bl	801be18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2108      	movs	r1, #8
 800bc00:	0018      	movs	r0, r3
 800bc02:	f010 f909 	bl	801be18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	210c      	movs	r1, #12
 800bc0a:	0018      	movs	r0, r3
 800bc0c:	f010 f904 	bl	801be18 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800bc10:	2380      	movs	r3, #128	@ 0x80
 800bc12:	05db      	lsls	r3, r3, #23
 800bc14:	22fa      	movs	r2, #250	@ 0xfa
 800bc16:	0112      	lsls	r2, r2, #4
 800bc18:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800bc1a:	2380      	movs	r3, #128	@ 0x80
 800bc1c:	05db      	lsls	r3, r3, #23
 800bc1e:	22fa      	movs	r2, #250	@ 0xfa
 800bc20:	0112      	lsls	r2, r2, #4
 800bc22:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800bc24:	2380      	movs	r3, #128	@ 0x80
 800bc26:	05db      	lsls	r3, r3, #23
 800bc28:	22fa      	movs	r2, #250	@ 0xfa
 800bc2a:	0112      	lsls	r2, r2, #4
 800bc2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800bc2e:	2380      	movs	r3, #128	@ 0x80
 800bc30:	05db      	lsls	r3, r3, #23
 800bc32:	22fa      	movs	r2, #250	@ 0xfa
 800bc34:	0112      	lsls	r2, r2, #4
 800bc36:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	f010 f8eb 	bl	801be18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2104      	movs	r1, #4
 800bc46:	0018      	movs	r0, r3
 800bc48:	f010 f8e6 	bl	801be18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	2108      	movs	r1, #8
 800bc50:	0018      	movs	r0, r3
 800bc52:	f010 f8e1 	bl	801be18 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800bc56:	4b0a      	ldr	r3, [pc, #40]	@ (800bc80 <GPIO_InitPWMLEDs+0x98>)
 800bc58:	22fa      	movs	r2, #250	@ 0xfa
 800bc5a:	0112      	lsls	r2, r2, #4
 800bc5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800bc5e:	4b08      	ldr	r3, [pc, #32]	@ (800bc80 <GPIO_InitPWMLEDs+0x98>)
 800bc60:	22fa      	movs	r2, #250	@ 0xfa
 800bc62:	0112      	lsls	r2, r2, #4
 800bc64:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800bc66:	4b06      	ldr	r3, [pc, #24]	@ (800bc80 <GPIO_InitPWMLEDs+0x98>)
 800bc68:	22fa      	movs	r2, #250	@ 0xfa
 800bc6a:	0112      	lsls	r2, r2, #4
 800bc6c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800bc6e:	4b04      	ldr	r3, [pc, #16]	@ (800bc80 <GPIO_InitPWMLEDs+0x98>)
 800bc70:	22fa      	movs	r2, #250	@ 0xfa
 800bc72:	0112      	lsls	r2, r2, #4
 800bc74:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800bc76:	46c0      	nop			@ (mov r8, r8)
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	b002      	add	sp, #8
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	46c0      	nop			@ (mov r8, r8)
 800bc80:	40000400 	.word	0x40000400

0800bc84 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc8a:	1d3b      	adds	r3, r7, #4
 800bc8c:	0018      	movs	r0, r3
 800bc8e:	2314      	movs	r3, #20
 800bc90:	001a      	movs	r2, r3
 800bc92:	2100      	movs	r1, #0
 800bc94:	f019 fcde 	bl	8025654 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800bc98:	1d3b      	adds	r3, r7, #4
 800bc9a:	2205      	movs	r2, #5
 800bc9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bc9e:	1d3b      	adds	r3, r7, #4
 800bca0:	2203      	movs	r2, #3
 800bca2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bca4:	1d3b      	adds	r3, r7, #4
 800bca6:	2200      	movs	r2, #0
 800bca8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bcaa:	1d3a      	adds	r2, r7, #4
 800bcac:	23a0      	movs	r3, #160	@ 0xa0
 800bcae:	05db      	lsls	r3, r3, #23
 800bcb0:	0011      	movs	r1, r2
 800bcb2:	0018      	movs	r0, r3
 800bcb4:	f009 f82e 	bl	8014d14 <HAL_GPIO_Init>
}
 800bcb8:	46c0      	nop			@ (mov r8, r8)
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	b006      	add	sp, #24
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bcc4:	4b1b      	ldr	r3, [pc, #108]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bcc6:	4a1c      	ldr	r2, [pc, #112]	@ (800bd38 <MX_I2C1_Init+0x78>)
 800bcc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800bcca:	4b1a      	ldr	r3, [pc, #104]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bccc:	4a1b      	ldr	r2, [pc, #108]	@ (800bd3c <MX_I2C1_Init+0x7c>)
 800bcce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800bcd0:	4b18      	ldr	r3, [pc, #96]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bcd6:	4b17      	ldr	r3, [pc, #92]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bcd8:	2201      	movs	r2, #1
 800bcda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bcdc:	4b15      	ldr	r3, [pc, #84]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800bce2:	4b14      	ldr	r3, [pc, #80]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bce8:	4b12      	ldr	r3, [pc, #72]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bcee:	4b11      	ldr	r3, [pc, #68]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bcf4:	4b0f      	ldr	r3, [pc, #60]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bcfa:	4b0e      	ldr	r3, [pc, #56]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bcfc:	0018      	movs	r0, r3
 800bcfe:	f009 f9dd 	bl	80150bc <HAL_I2C_Init>
 800bd02:	1e03      	subs	r3, r0, #0
 800bd04:	d001      	beq.n	800bd0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800bd06:	f000 fda7 	bl	800c858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bd0a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	0018      	movs	r0, r3
 800bd10:	f00c f8ba 	bl	8017e88 <HAL_I2CEx_ConfigAnalogFilter>
 800bd14:	1e03      	subs	r3, r0, #0
 800bd16:	d001      	beq.n	800bd1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800bd18:	f000 fd9e 	bl	800c858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bd1c:	4b05      	ldr	r3, [pc, #20]	@ (800bd34 <MX_I2C1_Init+0x74>)
 800bd1e:	2100      	movs	r1, #0
 800bd20:	0018      	movs	r0, r3
 800bd22:	f00c f8fd 	bl	8017f20 <HAL_I2CEx_ConfigDigitalFilter>
 800bd26:	1e03      	subs	r3, r0, #0
 800bd28:	d001      	beq.n	800bd2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800bd2a:	f000 fd95 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bd2e:	46c0      	nop			@ (mov r8, r8)
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	20000c50 	.word	0x20000c50
 800bd38:	40005400 	.word	0x40005400
 800bd3c:	00503d58 	.word	0x00503d58

0800bd40 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800bd44:	4b1b      	ldr	r3, [pc, #108]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd46:	4a1c      	ldr	r2, [pc, #112]	@ (800bdb8 <MX_I2C2_Init+0x78>)
 800bd48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800bd4a:	4b1a      	ldr	r3, [pc, #104]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd4c:	4a1b      	ldr	r2, [pc, #108]	@ (800bdbc <MX_I2C2_Init+0x7c>)
 800bd4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800bd50:	4b18      	ldr	r3, [pc, #96]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bd56:	4b17      	ldr	r3, [pc, #92]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd58:	2201      	movs	r2, #1
 800bd5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bd5c:	4b15      	ldr	r3, [pc, #84]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800bd62:	4b14      	ldr	r3, [pc, #80]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bd68:	4b12      	ldr	r3, [pc, #72]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bd6e:	4b11      	ldr	r3, [pc, #68]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bd74:	4b0f      	ldr	r3, [pc, #60]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800bd7a:	4b0e      	ldr	r3, [pc, #56]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f009 f99d 	bl	80150bc <HAL_I2C_Init>
 800bd82:	1e03      	subs	r3, r0, #0
 800bd84:	d001      	beq.n	800bd8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800bd86:	f000 fd67 	bl	800c858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bd8a:	4b0a      	ldr	r3, [pc, #40]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	0018      	movs	r0, r3
 800bd90:	f00c f87a 	bl	8017e88 <HAL_I2CEx_ConfigAnalogFilter>
 800bd94:	1e03      	subs	r3, r0, #0
 800bd96:	d001      	beq.n	800bd9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800bd98:	f000 fd5e 	bl	800c858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800bd9c:	4b05      	ldr	r3, [pc, #20]	@ (800bdb4 <MX_I2C2_Init+0x74>)
 800bd9e:	2100      	movs	r1, #0
 800bda0:	0018      	movs	r0, r3
 800bda2:	f00c f8bd 	bl	8017f20 <HAL_I2CEx_ConfigDigitalFilter>
 800bda6:	1e03      	subs	r3, r0, #0
 800bda8:	d001      	beq.n	800bdae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800bdaa:	f000 fd55 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800bdae:	46c0      	nop			@ (mov r8, r8)
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	20000ca4 	.word	0x20000ca4
 800bdb8:	40005800 	.word	0x40005800
 800bdbc:	00503d58 	.word	0x00503d58

0800bdc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800bdc0:	b590      	push	{r4, r7, lr}
 800bdc2:	b08b      	sub	sp, #44	@ 0x2c
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdc8:	2414      	movs	r4, #20
 800bdca:	193b      	adds	r3, r7, r4
 800bdcc:	0018      	movs	r0, r3
 800bdce:	2314      	movs	r3, #20
 800bdd0:	001a      	movs	r2, r3
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	f019 fc3e 	bl	8025654 <memset>
  if(i2cHandle->Instance==I2C1)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a5d      	ldr	r2, [pc, #372]	@ (800bf54 <HAL_I2C_MspInit+0x194>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d000      	beq.n	800bde4 <HAL_I2C_MspInit+0x24>
 800bde2:	e083      	b.n	800beec <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bde4:	4b5c      	ldr	r3, [pc, #368]	@ (800bf58 <HAL_I2C_MspInit+0x198>)
 800bde6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde8:	4b5b      	ldr	r3, [pc, #364]	@ (800bf58 <HAL_I2C_MspInit+0x198>)
 800bdea:	2102      	movs	r1, #2
 800bdec:	430a      	orrs	r2, r1
 800bdee:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bdf0:	4b59      	ldr	r3, [pc, #356]	@ (800bf58 <HAL_I2C_MspInit+0x198>)
 800bdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf4:	2202      	movs	r2, #2
 800bdf6:	4013      	ands	r3, r2
 800bdf8:	613b      	str	r3, [r7, #16]
 800bdfa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bdfc:	0021      	movs	r1, r4
 800bdfe:	187b      	adds	r3, r7, r1
 800be00:	22c0      	movs	r2, #192	@ 0xc0
 800be02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800be04:	187b      	adds	r3, r7, r1
 800be06:	2212      	movs	r2, #18
 800be08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be0a:	187b      	adds	r3, r7, r1
 800be0c:	2200      	movs	r2, #0
 800be0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be10:	187b      	adds	r3, r7, r1
 800be12:	2203      	movs	r2, #3
 800be14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800be16:	187b      	adds	r3, r7, r1
 800be18:	2201      	movs	r2, #1
 800be1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be1c:	187b      	adds	r3, r7, r1
 800be1e:	4a4f      	ldr	r2, [pc, #316]	@ (800bf5c <HAL_I2C_MspInit+0x19c>)
 800be20:	0019      	movs	r1, r3
 800be22:	0010      	movs	r0, r2
 800be24:	f008 ff76 	bl	8014d14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800be28:	4b4b      	ldr	r3, [pc, #300]	@ (800bf58 <HAL_I2C_MspInit+0x198>)
 800be2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be2c:	4b4a      	ldr	r3, [pc, #296]	@ (800bf58 <HAL_I2C_MspInit+0x198>)
 800be2e:	2180      	movs	r1, #128	@ 0x80
 800be30:	0389      	lsls	r1, r1, #14
 800be32:	430a      	orrs	r2, r1
 800be34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800be36:	4b4a      	ldr	r3, [pc, #296]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be38:	4a4a      	ldr	r2, [pc, #296]	@ (800bf64 <HAL_I2C_MspInit+0x1a4>)
 800be3a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800be3c:	4b48      	ldr	r3, [pc, #288]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be3e:	2206      	movs	r2, #6
 800be40:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800be42:	4b47      	ldr	r3, [pc, #284]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be44:	2200      	movs	r2, #0
 800be46:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800be48:	4b45      	ldr	r3, [pc, #276]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800be4e:	4b44      	ldr	r3, [pc, #272]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be50:	2280      	movs	r2, #128	@ 0x80
 800be52:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800be54:	4b42      	ldr	r3, [pc, #264]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be56:	2200      	movs	r2, #0
 800be58:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800be5a:	4b41      	ldr	r3, [pc, #260]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be5c:	2200      	movs	r2, #0
 800be5e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800be60:	4b3f      	ldr	r3, [pc, #252]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be62:	2200      	movs	r2, #0
 800be64:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800be66:	4b3e      	ldr	r3, [pc, #248]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be68:	2200      	movs	r2, #0
 800be6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800be6c:	4b3c      	ldr	r3, [pc, #240]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be6e:	0018      	movs	r0, r3
 800be70:	f008 fb34 	bl	80144dc <HAL_DMA_Init>
 800be74:	1e03      	subs	r3, r0, #0
 800be76:	d001      	beq.n	800be7c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800be78:	f000 fcee 	bl	800c858 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a38      	ldr	r2, [pc, #224]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be80:	63da      	str	r2, [r3, #60]	@ 0x3c
 800be82:	4b37      	ldr	r3, [pc, #220]	@ (800bf60 <HAL_I2C_MspInit+0x1a0>)
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800be88:	4b37      	ldr	r3, [pc, #220]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800be8a:	4a38      	ldr	r2, [pc, #224]	@ (800bf6c <HAL_I2C_MspInit+0x1ac>)
 800be8c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800be8e:	4b36      	ldr	r3, [pc, #216]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800be90:	2206      	movs	r2, #6
 800be92:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800be94:	4b34      	ldr	r3, [pc, #208]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800be96:	2210      	movs	r2, #16
 800be98:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800be9a:	4b33      	ldr	r3, [pc, #204]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800bea0:	4b31      	ldr	r3, [pc, #196]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800bea2:	2280      	movs	r2, #128	@ 0x80
 800bea4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bea6:	4b30      	ldr	r3, [pc, #192]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800beac:	4b2e      	ldr	r3, [pc, #184]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800beae:	2200      	movs	r2, #0
 800beb0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800beb2:	4b2d      	ldr	r3, [pc, #180]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800beb8:	4b2b      	ldr	r3, [pc, #172]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800beba:	2200      	movs	r2, #0
 800bebc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800bebe:	4b2a      	ldr	r3, [pc, #168]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800bec0:	0018      	movs	r0, r3
 800bec2:	f008 fb0b 	bl	80144dc <HAL_DMA_Init>
 800bec6:	1e03      	subs	r3, r0, #0
 800bec8:	d001      	beq.n	800bece <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800beca:	f000 fcc5 	bl	800c858 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a25      	ldr	r2, [pc, #148]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800bed2:	639a      	str	r2, [r3, #56]	@ 0x38
 800bed4:	4b24      	ldr	r3, [pc, #144]	@ (800bf68 <HAL_I2C_MspInit+0x1a8>)
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800beda:	2200      	movs	r2, #0
 800bedc:	2100      	movs	r1, #0
 800bede:	2017      	movs	r0, #23
 800bee0:	f008 fac6 	bl	8014470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800bee4:	2017      	movs	r0, #23
 800bee6:	f008 fad8 	bl	801449a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800beea:	e02e      	b.n	800bf4a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a1f      	ldr	r2, [pc, #124]	@ (800bf70 <HAL_I2C_MspInit+0x1b0>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d129      	bne.n	800bf4a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bef6:	4b18      	ldr	r3, [pc, #96]	@ (800bf58 <HAL_I2C_MspInit+0x198>)
 800bef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800befa:	4b17      	ldr	r3, [pc, #92]	@ (800bf58 <HAL_I2C_MspInit+0x198>)
 800befc:	2102      	movs	r1, #2
 800befe:	430a      	orrs	r2, r1
 800bf00:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bf02:	4b15      	ldr	r3, [pc, #84]	@ (800bf58 <HAL_I2C_MspInit+0x198>)
 800bf04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf06:	2202      	movs	r2, #2
 800bf08:	4013      	ands	r3, r2
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800bf0e:	2114      	movs	r1, #20
 800bf10:	187b      	adds	r3, r7, r1
 800bf12:	22c0      	movs	r2, #192	@ 0xc0
 800bf14:	0112      	lsls	r2, r2, #4
 800bf16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bf18:	187b      	adds	r3, r7, r1
 800bf1a:	2212      	movs	r2, #18
 800bf1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf1e:	187b      	adds	r3, r7, r1
 800bf20:	2200      	movs	r2, #0
 800bf22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf24:	187b      	adds	r3, r7, r1
 800bf26:	2203      	movs	r2, #3
 800bf28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800bf2a:	187b      	adds	r3, r7, r1
 800bf2c:	2206      	movs	r2, #6
 800bf2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf30:	187b      	adds	r3, r7, r1
 800bf32:	4a0a      	ldr	r2, [pc, #40]	@ (800bf5c <HAL_I2C_MspInit+0x19c>)
 800bf34:	0019      	movs	r1, r3
 800bf36:	0010      	movs	r0, r2
 800bf38:	f008 feec 	bl	8014d14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800bf3c:	4b06      	ldr	r3, [pc, #24]	@ (800bf58 <HAL_I2C_MspInit+0x198>)
 800bf3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf40:	4b05      	ldr	r3, [pc, #20]	@ (800bf58 <HAL_I2C_MspInit+0x198>)
 800bf42:	2180      	movs	r1, #128	@ 0x80
 800bf44:	03c9      	lsls	r1, r1, #15
 800bf46:	430a      	orrs	r2, r1
 800bf48:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bf4a:	46c0      	nop			@ (mov r8, r8)
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	b00b      	add	sp, #44	@ 0x2c
 800bf50:	bd90      	pop	{r4, r7, pc}
 800bf52:	46c0      	nop			@ (mov r8, r8)
 800bf54:	40005400 	.word	0x40005400
 800bf58:	40021000 	.word	0x40021000
 800bf5c:	50000400 	.word	0x50000400
 800bf60:	20000cf8 	.word	0x20000cf8
 800bf64:	40020030 	.word	0x40020030
 800bf68:	20000d40 	.word	0x20000d40
 800bf6c:	4002001c 	.word	0x4002001c
 800bf70:	40005800 	.word	0x40005800

0800bf74 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800bf78:	4b10      	ldr	r3, [pc, #64]	@ (800bfbc <MX_I2S2_Init+0x48>)
 800bf7a:	4a11      	ldr	r2, [pc, #68]	@ (800bfc0 <MX_I2S2_Init+0x4c>)
 800bf7c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800bf7e:	4b0f      	ldr	r3, [pc, #60]	@ (800bfbc <MX_I2S2_Init+0x48>)
 800bf80:	22c0      	movs	r2, #192	@ 0xc0
 800bf82:	0092      	lsls	r2, r2, #2
 800bf84:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800bf86:	4b0d      	ldr	r3, [pc, #52]	@ (800bfbc <MX_I2S2_Init+0x48>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800bf8c:	4b0b      	ldr	r3, [pc, #44]	@ (800bfbc <MX_I2S2_Init+0x48>)
 800bf8e:	2203      	movs	r2, #3
 800bf90:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800bf92:	4b0a      	ldr	r3, [pc, #40]	@ (800bfbc <MX_I2S2_Init+0x48>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800bf98:	4b08      	ldr	r3, [pc, #32]	@ (800bfbc <MX_I2S2_Init+0x48>)
 800bf9a:	22fa      	movs	r2, #250	@ 0xfa
 800bf9c:	0192      	lsls	r2, r2, #6
 800bf9e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800bfa0:	4b06      	ldr	r3, [pc, #24]	@ (800bfbc <MX_I2S2_Init+0x48>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800bfa6:	4b05      	ldr	r3, [pc, #20]	@ (800bfbc <MX_I2S2_Init+0x48>)
 800bfa8:	0018      	movs	r0, r3
 800bfaa:	f00c f805 	bl	8017fb8 <HAL_I2S_Init>
 800bfae:	1e03      	subs	r3, r0, #0
 800bfb0:	d001      	beq.n	800bfb6 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800bfb2:	f000 fc51 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800bfb6:	46c0      	nop			@ (mov r8, r8)
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	20000d88 	.word	0x20000d88
 800bfc0:	40003800 	.word	0x40003800

0800bfc4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800bfc4:	b590      	push	{r4, r7, lr}
 800bfc6:	b089      	sub	sp, #36	@ 0x24
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfcc:	240c      	movs	r4, #12
 800bfce:	193b      	adds	r3, r7, r4
 800bfd0:	0018      	movs	r0, r3
 800bfd2:	2314      	movs	r3, #20
 800bfd4:	001a      	movs	r2, r3
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	f019 fb3c 	bl	8025654 <memset>
  if(i2sHandle->Instance==SPI2)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a2d      	ldr	r2, [pc, #180]	@ (800c098 <HAL_I2S_MspInit+0xd4>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d154      	bne.n	800c090 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800bfe6:	4b2d      	ldr	r3, [pc, #180]	@ (800c09c <HAL_I2S_MspInit+0xd8>)
 800bfe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfea:	4b2c      	ldr	r3, [pc, #176]	@ (800c09c <HAL_I2S_MspInit+0xd8>)
 800bfec:	2180      	movs	r1, #128	@ 0x80
 800bfee:	01c9      	lsls	r1, r1, #7
 800bff0:	430a      	orrs	r2, r1
 800bff2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bff4:	4b29      	ldr	r3, [pc, #164]	@ (800c09c <HAL_I2S_MspInit+0xd8>)
 800bff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bff8:	4b28      	ldr	r3, [pc, #160]	@ (800c09c <HAL_I2S_MspInit+0xd8>)
 800bffa:	2102      	movs	r1, #2
 800bffc:	430a      	orrs	r2, r1
 800bffe:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c000:	4b26      	ldr	r3, [pc, #152]	@ (800c09c <HAL_I2S_MspInit+0xd8>)
 800c002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c004:	2202      	movs	r2, #2
 800c006:	4013      	ands	r3, r2
 800c008:	60bb      	str	r3, [r7, #8]
 800c00a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c00c:	193b      	adds	r3, r7, r4
 800c00e:	22b0      	movs	r2, #176	@ 0xb0
 800c010:	0212      	lsls	r2, r2, #8
 800c012:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c014:	0021      	movs	r1, r4
 800c016:	187b      	adds	r3, r7, r1
 800c018:	2202      	movs	r2, #2
 800c01a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c01c:	187b      	adds	r3, r7, r1
 800c01e:	2200      	movs	r2, #0
 800c020:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c022:	187b      	adds	r3, r7, r1
 800c024:	2200      	movs	r2, #0
 800c026:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800c028:	187b      	adds	r3, r7, r1
 800c02a:	2200      	movs	r2, #0
 800c02c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c02e:	187b      	adds	r3, r7, r1
 800c030:	4a1b      	ldr	r2, [pc, #108]	@ (800c0a0 <HAL_I2S_MspInit+0xdc>)
 800c032:	0019      	movs	r1, r3
 800c034:	0010      	movs	r0, r2
 800c036:	f008 fe6d 	bl	8014d14 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800c03a:	4b1a      	ldr	r3, [pc, #104]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c03c:	4a1a      	ldr	r2, [pc, #104]	@ (800c0a8 <HAL_I2S_MspInit+0xe4>)
 800c03e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800c040:	4b18      	ldr	r3, [pc, #96]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c042:	2202      	movs	r2, #2
 800c044:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c046:	4b17      	ldr	r3, [pc, #92]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c048:	2200      	movs	r2, #0
 800c04a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c04c:	4b15      	ldr	r3, [pc, #84]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c04e:	2200      	movs	r2, #0
 800c050:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c052:	4b14      	ldr	r3, [pc, #80]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c054:	2280      	movs	r2, #128	@ 0x80
 800c056:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c058:	4b12      	ldr	r3, [pc, #72]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c05a:	2280      	movs	r2, #128	@ 0x80
 800c05c:	0052      	lsls	r2, r2, #1
 800c05e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c060:	4b10      	ldr	r3, [pc, #64]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c062:	2280      	movs	r2, #128	@ 0x80
 800c064:	00d2      	lsls	r2, r2, #3
 800c066:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800c068:	4b0e      	ldr	r3, [pc, #56]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c06a:	2220      	movs	r2, #32
 800c06c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c06e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c070:	2200      	movs	r2, #0
 800c072:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800c074:	4b0b      	ldr	r3, [pc, #44]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c076:	0018      	movs	r0, r3
 800c078:	f008 fa30 	bl	80144dc <HAL_DMA_Init>
 800c07c:	1e03      	subs	r3, r0, #0
 800c07e:	d001      	beq.n	800c084 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800c080:	f000 fbea 	bl	800c858 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4a07      	ldr	r2, [pc, #28]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c088:	631a      	str	r2, [r3, #48]	@ 0x30
 800c08a:	4b06      	ldr	r3, [pc, #24]	@ (800c0a4 <HAL_I2S_MspInit+0xe0>)
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800c090:	46c0      	nop			@ (mov r8, r8)
 800c092:	46bd      	mov	sp, r7
 800c094:	b009      	add	sp, #36	@ 0x24
 800c096:	bd90      	pop	{r4, r7, pc}
 800c098:	40003800 	.word	0x40003800
 800c09c:	40021000 	.word	0x40021000
 800c0a0:	50000400 	.word	0x50000400
 800c0a4:	20000dc4 	.word	0x20000dc4
 800c0a8:	40020044 	.word	0x40020044

0800c0ac <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	af00      	add	r7, sp, #0
  testDone = true;
 800c0b0:	4b14      	ldr	r3, [pc, #80]	@ (800c104 <SetTestDone+0x58>)
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800c0b6:	23fa      	movs	r3, #250	@ 0xfa
 800c0b8:	005b      	lsls	r3, r3, #1
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	f007 fd3e 	bl	8013b3c <HAL_Delay>
  SetDBLED(false, false, true);
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	f005 fd41 	bl	8011b4c <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c0ca:	4a0f      	ldr	r2, [pc, #60]	@ (800c108 <SetTestDone+0x5c>)
 800c0cc:	23fa      	movs	r3, #250	@ 0xfa
 800c0ce:	0119      	lsls	r1, r3, #4
 800c0d0:	23fa      	movs	r3, #250	@ 0xfa
 800c0d2:	011b      	lsls	r3, r3, #4
 800c0d4:	0018      	movs	r0, r3
 800c0d6:	f005 fd05 	bl	8011ae4 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c0da:	4a0b      	ldr	r2, [pc, #44]	@ (800c108 <SetTestDone+0x5c>)
 800c0dc:	23fa      	movs	r3, #250	@ 0xfa
 800c0de:	0119      	lsls	r1, r3, #4
 800c0e0:	23fa      	movs	r3, #250	@ 0xfa
 800c0e2:	011b      	lsls	r3, r3, #4
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	f005 fd7b 	bl	8011be0 <SetVocLED>
  HAL_Delay(500);
 800c0ea:	23fa      	movs	r3, #250	@ 0xfa
 800c0ec:	005b      	lsls	r3, r3, #1
 800c0ee:	0018      	movs	r0, r3
 800c0f0:	f007 fd24 	bl	8013b3c <HAL_Delay>
  SetLEDsOff();
 800c0f4:	f005 feb4 	bl	8011e60 <SetLEDsOff>
  InitDone();
 800c0f8:	f005 fc48 	bl	801198c <InitDone>
}
 800c0fc:	46c0      	nop			@ (mov r8, r8)
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	46c0      	nop			@ (mov r8, r8)
 800c104:	20000e0c 	.word	0x20000e0c
 800c108:	00000bb8 	.word	0x00000bb8

0800c10c <FlashLEDs>:

void FlashLEDs(){
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800c112:	1dfb      	adds	r3, r7, #7
 800c114:	2200      	movs	r2, #0
 800c116:	701a      	strb	r2, [r3, #0]
 800c118:	e021      	b.n	800c15e <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800c11a:	2201      	movs	r2, #1
 800c11c:	2101      	movs	r1, #1
 800c11e:	2001      	movs	r0, #1
 800c120:	f005 fd14 	bl	8011b4c <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c124:	4a12      	ldr	r2, [pc, #72]	@ (800c170 <FlashLEDs+0x64>)
 800c126:	23fa      	movs	r3, #250	@ 0xfa
 800c128:	0119      	lsls	r1, r3, #4
 800c12a:	23fa      	movs	r3, #250	@ 0xfa
 800c12c:	011b      	lsls	r3, r3, #4
 800c12e:	0018      	movs	r0, r3
 800c130:	f005 fcd8 	bl	8011ae4 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c134:	4a0e      	ldr	r2, [pc, #56]	@ (800c170 <FlashLEDs+0x64>)
 800c136:	23fa      	movs	r3, #250	@ 0xfa
 800c138:	0119      	lsls	r1, r3, #4
 800c13a:	23fa      	movs	r3, #250	@ 0xfa
 800c13c:	011b      	lsls	r3, r3, #4
 800c13e:	0018      	movs	r0, r3
 800c140:	f005 fd4e 	bl	8011be0 <SetVocLED>
    HAL_Delay(250);
 800c144:	20fa      	movs	r0, #250	@ 0xfa
 800c146:	f007 fcf9 	bl	8013b3c <HAL_Delay>
    SetLEDsOff();
 800c14a:	f005 fe89 	bl	8011e60 <SetLEDsOff>
    HAL_Delay(250);
 800c14e:	20fa      	movs	r0, #250	@ 0xfa
 800c150:	f007 fcf4 	bl	8013b3c <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800c154:	1dfb      	adds	r3, r7, #7
 800c156:	781a      	ldrb	r2, [r3, #0]
 800c158:	1dfb      	adds	r3, r7, #7
 800c15a:	3201      	adds	r2, #1
 800c15c:	701a      	strb	r2, [r3, #0]
 800c15e:	1dfb      	adds	r3, r7, #7
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	2b04      	cmp	r3, #4
 800c164:	d9d9      	bls.n	800c11a <FlashLEDs+0xe>
  }
}
 800c166:	46c0      	nop			@ (mov r8, r8)
 800c168:	46c0      	nop			@ (mov r8, r8)
 800c16a:	46bd      	mov	sp, r7
 800c16c:	b002      	add	sp, #8
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	00000bb8 	.word	0x00000bb8

0800c174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c17a:	f007 fc6f 	bl	8013a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c17e:	f000 fa1b 	bl	800c5b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c182:	f7ff fc01 	bl	800b988 <MX_GPIO_Init>
  MX_DMA_Init();
 800c186:	f7ff fa29 	bl	800b5dc <MX_DMA_Init>
  MX_I2C1_Init();
 800c18a:	f7ff fd99 	bl	800bcc0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800c18e:	f7ff fef1 	bl	800bf74 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800c192:	f006 fd9b 	bl	8012ccc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800c196:	f7ff fdd3 	bl	800bd40 <MX_I2C2_Init>
  MX_TIM2_Init();
 800c19a:	f006 fb8f 	bl	80128bc <MX_TIM2_Init>
  MX_TIM3_Init();
 800c19e:	f006 fc01 	bl	80129a4 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800c1a2:	f006 fdc3 	bl	8012d2c <MX_USART4_UART_Init>
  MX_ADC_Init();
 800c1a6:	f7fd feed 	bl	8009f84 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800c1aa:	f015 ff31 	bl	8022010 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800c1ae:	f001 fb59 	bl	800d864 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800c1b2:	f006 fd55 	bl	8012c60 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800c1b6:	f006 fc73 	bl	8012aa0 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800c1ba:	4ac5      	ldr	r2, [pc, #788]	@ (800c4d0 <main+0x35c>)
 800c1bc:	4bc5      	ldr	r3, [pc, #788]	@ (800c4d4 <main+0x360>)
 800c1be:	0011      	movs	r1, r2
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	f7ff fd11 	bl	800bbe8 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800c1c6:	f006 fff3 	bl	80131b0 <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800c1ca:	f006 f9ff 	bl	80125cc <Battery_Upkeep>
 800c1ce:	0003      	movs	r3, r0
 800c1d0:	001a      	movs	r2, r3
 800c1d2:	4bc1      	ldr	r3, [pc, #772]	@ (800c4d8 <main+0x364>)
 800c1d4:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800c1d6:	4bc0      	ldr	r3, [pc, #768]	@ (800c4d8 <main+0x364>)
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d113      	bne.n	800c206 <main+0x92>
    SetAllREDLED();
 800c1de:	f005 fe5b 	bl	8011e98 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800c1e2:	f7fc ffd5 	bl	8009190 <ReadBatteryVoltage>
 800c1e6:	1c03      	adds	r3, r0, #0
 800c1e8:	1c18      	adds	r0, r3, #0
 800c1ea:	f7f7 fb53 	bl	8003894 <__aeabi_f2d>
 800c1ee:	0002      	movs	r2, r0
 800c1f0:	000b      	movs	r3, r1
 800c1f2:	48ba      	ldr	r0, [pc, #744]	@ (800c4dc <main+0x368>)
 800c1f4:	49ba      	ldr	r1, [pc, #744]	@ (800c4e0 <main+0x36c>)
 800c1f6:	9200      	str	r2, [sp, #0]
 800c1f8:	9301      	str	r3, [sp, #4]
 800c1fa:	0002      	movs	r2, r0
 800c1fc:	2002      	movs	r0, #2
 800c1fe:	f006 ff53 	bl	80130a8 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800c202:	f7fd fbeb 	bl	80099dc <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800c206:	f7fd f899 	bl	800933c <UserButton_Pressed>
 800c20a:	1e03      	subs	r3, r0, #0
 800c20c:	d004      	beq.n	800c218 <main+0xa4>
    EnableESPProg();
 800c20e:	f015 ffcf 	bl	80221b0 <EnableESPProg>
    ESP_Programming = true;
 800c212:	4bb4      	ldr	r3, [pc, #720]	@ (800c4e4 <main+0x370>)
 800c214:	2201      	movs	r2, #1
 800c216:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800c218:	2003      	movs	r0, #3
 800c21a:	f006 ffaf 	bl	801317c <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c21e:	49b2      	ldr	r1, [pc, #712]	@ (800c4e8 <main+0x374>)
 800c220:	4bb2      	ldr	r3, [pc, #712]	@ (800c4ec <main+0x378>)
 800c222:	2201      	movs	r2, #1
 800c224:	0018      	movs	r0, r3
 800c226:	f010 fa57 	bl	801c6d8 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800c22a:	4bb1      	ldr	r3, [pc, #708]	@ (800c4f0 <main+0x37c>)
 800c22c:	0018      	movs	r0, r3
 800c22e:	f7fd fcaf 	bl	8009b90 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800c232:	4ab0      	ldr	r2, [pc, #704]	@ (800c4f4 <main+0x380>)
 800c234:	49b0      	ldr	r1, [pc, #704]	@ (800c4f8 <main+0x384>)
 800c236:	48b1      	ldr	r0, [pc, #708]	@ (800c4fc <main+0x388>)
 800c238:	230b      	movs	r3, #11
 800c23a:	f004 fd1d 	bl	8010c78 <soundInit>
 800c23e:	0003      	movs	r3, r0
 800c240:	001a      	movs	r2, r3
 800c242:	2301      	movs	r3, #1
 800c244:	4053      	eors	r3, r2
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d005      	beq.n	800c258 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800c24c:	4aac      	ldr	r2, [pc, #688]	@ (800c500 <main+0x38c>)
 800c24e:	4bad      	ldr	r3, [pc, #692]	@ (800c504 <main+0x390>)
 800c250:	21f9      	movs	r1, #249	@ 0xf9
 800c252:	0018      	movs	r0, r3
 800c254:	f006 ffe0 	bl	8013218 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800c258:	4bab      	ldr	r3, [pc, #684]	@ (800c508 <main+0x394>)
 800c25a:	4aac      	ldr	r2, [pc, #688]	@ (800c50c <main+0x398>)
 800c25c:	49a6      	ldr	r1, [pc, #664]	@ (800c4f8 <main+0x384>)
 800c25e:	48ac      	ldr	r0, [pc, #688]	@ (800c510 <main+0x39c>)
 800c260:	f000 fbec 	bl	800ca3c <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800c264:	f007 fc60 	bl	8013b28 <HAL_GetTick>
 800c268:	0003      	movs	r3, r0
 800c26a:	4aaa      	ldr	r2, [pc, #680]	@ (800c514 <main+0x3a0>)
 800c26c:	189a      	adds	r2, r3, r2
 800c26e:	4baa      	ldr	r3, [pc, #680]	@ (800c518 <main+0x3a4>)
 800c270:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800c272:	f7fd f843 	bl	80092fc <Check_USB_PowerOn>
 800c276:	0003      	movs	r3, r0
 800c278:	1e5a      	subs	r2, r3, #1
 800c27a:	4193      	sbcs	r3, r2
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	2201      	movs	r2, #1
 800c280:	4053      	eors	r3, r2
 800c282:	b2db      	uxtb	r3, r3
 800c284:	1c1a      	adds	r2, r3, #0
 800c286:	2301      	movs	r3, #1
 800c288:	4013      	ands	r3, r2
 800c28a:	b2da      	uxtb	r2, r3
 800c28c:	4ba3      	ldr	r3, [pc, #652]	@ (800c51c <main+0x3a8>)
 800c28e:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800c290:	f7fd f834 	bl	80092fc <Check_USB_PowerOn>
 800c294:	1e03      	subs	r3, r0, #0
 800c296:	d003      	beq.n	800c2a0 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800c298:	4ba1      	ldr	r3, [pc, #644]	@ (800c520 <main+0x3ac>)
 800c29a:	0018      	movs	r0, r3
 800c29c:	f7fc f982 	bl	80085a4 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800c2a0:	4ba0      	ldr	r3, [pc, #640]	@ (800c524 <main+0x3b0>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	0018      	movs	r0, r3
 800c2a6:	f006 fea9 	bl	8012ffc <TimestampIsReached>
 800c2aa:	1e03      	subs	r3, r0, #0
 800c2ac:	d00e      	beq.n	800c2cc <main+0x158>
      charge = Battery_Upkeep();
 800c2ae:	f006 f98d 	bl	80125cc <Battery_Upkeep>
 800c2b2:	0003      	movs	r3, r0
 800c2b4:	001a      	movs	r2, r3
 800c2b6:	4b88      	ldr	r3, [pc, #544]	@ (800c4d8 <main+0x364>)
 800c2b8:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800c2ba:	f007 fc35 	bl	8013b28 <HAL_GetTick>
 800c2be:	0003      	movs	r3, r0
 800c2c0:	4a99      	ldr	r2, [pc, #612]	@ (800c528 <main+0x3b4>)
 800c2c2:	189a      	adds	r2, r3, r2
 800c2c4:	4b97      	ldr	r3, [pc, #604]	@ (800c524 <main+0x3b0>)
 800c2c6:	601a      	str	r2, [r3, #0]
      showTime();
 800c2c8:	f7fd f848 	bl	800935c <showTime>

    }
    configCheck();
 800c2cc:	f005 ffda 	bl	8012284 <configCheck>
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800c2d0:	4b96      	ldr	r3, [pc, #600]	@ (800c52c <main+0x3b8>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800c2d6:	4b80      	ldr	r3, [pc, #512]	@ (800c4d8 <main+0x364>)
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d003      	beq.n	800c2e6 <main+0x172>
 800c2de:	4b7e      	ldr	r3, [pc, #504]	@ (800c4d8 <main+0x364>)
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d104      	bne.n	800c2f0 <main+0x17c>
      FlashLEDs();
 800c2e6:	f7ff ff11 	bl	800c10c <FlashLEDs>
      Sensor.PM_measurementEnabled = false;
 800c2ea:	4b91      	ldr	r3, [pc, #580]	@ (800c530 <main+0x3bc>)
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	709a      	strb	r2, [r3, #2]
    }
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800c2f0:	4b79      	ldr	r3, [pc, #484]	@ (800c4d8 <main+0x364>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d109      	bne.n	800c30c <main+0x198>
 800c2f8:	4b8e      	ldr	r3, [pc, #568]	@ (800c534 <main+0x3c0>)
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2b09      	cmp	r3, #9
 800c2fe:	d105      	bne.n	800c30c <main+0x198>
       batteryEmpty = true;
 800c300:	4b8d      	ldr	r3, [pc, #564]	@ (800c538 <main+0x3c4>)
 800c302:	2201      	movs	r2, #1
 800c304:	701a      	strb	r2, [r3, #0]
       Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800c306:	f7fd fb69 	bl	80099dc <Enter_Standby_Mode>
 800c30a:	e002      	b.n	800c312 <main+0x19e>
    }
    else{
      batteryEmpty = false;
 800c30c:	4b8a      	ldr	r3, [pc, #552]	@ (800c538 <main+0x3c4>)
 800c30e:	2200      	movs	r2, #0
 800c310:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800c312:	4b8a      	ldr	r3, [pc, #552]	@ (800c53c <main+0x3c8>)
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d100      	bne.n	800c31c <main+0x1a8>
 800c31a:	e0a2      	b.n	800c462 <main+0x2ee>
 800c31c:	4b71      	ldr	r3, [pc, #452]	@ (800c4e4 <main+0x370>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2201      	movs	r2, #1
 800c322:	4053      	eors	r3, r2
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d100      	bne.n	800c32c <main+0x1b8>
 800c32a:	e09a      	b.n	800c462 <main+0x2ee>
 800c32c:	4b82      	ldr	r3, [pc, #520]	@ (800c538 <main+0x3c4>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2201      	movs	r2, #1
 800c332:	4053      	eors	r3, r2
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d100      	bne.n	800c33c <main+0x1c8>
 800c33a:	e092      	b.n	800c462 <main+0x2ee>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800c33c:	4b77      	ldr	r3, [pc, #476]	@ (800c51c <main+0x3a8>)
 800c33e:	781a      	ldrb	r2, [r3, #0]
 800c340:	4b7f      	ldr	r3, [pc, #508]	@ (800c540 <main+0x3cc>)
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	429a      	cmp	r2, r3
 800c346:	d03a      	beq.n	800c3be <main+0x24a>
        if (IsSGPPresent() && !usbPluggedIn) {
 800c348:	f000 fb0a 	bl	800c960 <IsSGPPresent>
 800c34c:	1e03      	subs	r3, r0, #0
 800c34e:	d009      	beq.n	800c364 <main+0x1f0>
 800c350:	4b7b      	ldr	r3, [pc, #492]	@ (800c540 <main+0x3cc>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2201      	movs	r2, #1
 800c356:	4053      	eors	r3, r2
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d002      	beq.n	800c364 <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800c35e:	2001      	movs	r0, #1
 800c360:	f000 fb08 	bl	800c974 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800c364:	4b77      	ldr	r3, [pc, #476]	@ (800c544 <main+0x3d0>)
 800c366:	791b      	ldrb	r3, [r3, #4]
 800c368:	2b34      	cmp	r3, #52	@ 0x34
 800c36a:	d003      	beq.n	800c374 <main+0x200>
 800c36c:	4b75      	ldr	r3, [pc, #468]	@ (800c544 <main+0x3d0>)
 800c36e:	791b      	ldrb	r3, [r3, #4]
 800c370:	2b35      	cmp	r3, #53	@ 0x35
 800c372:	d106      	bne.n	800c382 <main+0x20e>
 800c374:	4b72      	ldr	r3, [pc, #456]	@ (800c540 <main+0x3cc>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800c37c:	2000      	movs	r0, #0
 800c37e:	f000 faf9 	bl	800c974 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800c382:	4b6f      	ldr	r3, [pc, #444]	@ (800c540 <main+0x3cc>)
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	2201      	movs	r2, #1
 800c388:	4053      	eors	r3, r2
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d012      	beq.n	800c3b6 <main+0x242>
 800c390:	f007 fbca 	bl	8013b28 <HAL_GetTick>
 800c394:	0003      	movs	r3, r0
 800c396:	4a5f      	ldr	r2, [pc, #380]	@ (800c514 <main+0x3a0>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d90c      	bls.n	800c3b6 <main+0x242>
          Debug("Device time out set in main due to powerstatus shift");
 800c39c:	4a6a      	ldr	r2, [pc, #424]	@ (800c548 <main+0x3d4>)
 800c39e:	4b6b      	ldr	r3, [pc, #428]	@ (800c54c <main+0x3d8>)
 800c3a0:	0019      	movs	r1, r3
 800c3a2:	2003      	movs	r0, #3
 800c3a4:	f006 fe80 	bl	80130a8 <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800c3a8:	f007 fbbe 	bl	8013b28 <HAL_GetTick>
 800c3ac:	0003      	movs	r3, r0
 800c3ae:	4a68      	ldr	r2, [pc, #416]	@ (800c550 <main+0x3dc>)
 800c3b0:	189a      	adds	r2, r3, r2
 800c3b2:	4b59      	ldr	r3, [pc, #356]	@ (800c518 <main+0x3a4>)
 800c3b4:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800c3b6:	4b62      	ldr	r3, [pc, #392]	@ (800c540 <main+0x3cc>)
 800c3b8:	781a      	ldrb	r2, [r3, #0]
 800c3ba:	4b58      	ldr	r3, [pc, #352]	@ (800c51c <main+0x3a8>)
 800c3bc:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800c3be:	f000 ff33 	bl	800d228 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800c3c2:	4b5b      	ldr	r3, [pc, #364]	@ (800c530 <main+0x3bc>)
 800c3c4:	78db      	ldrb	r3, [r3, #3]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d005      	beq.n	800c3d6 <main+0x262>
        MICstate = Mic_Upkeep();
 800c3ca:	f001 f937 	bl	800d63c <Mic_Upkeep>
 800c3ce:	0003      	movs	r3, r0
 800c3d0:	001a      	movs	r2, r3
 800c3d2:	4b60      	ldr	r3, [pc, #384]	@ (800c554 <main+0x3e0>)
 800c3d4:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800c3d6:	4b40      	ldr	r3, [pc, #256]	@ (800c4d8 <main+0x364>)
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d803      	bhi.n	800c3e6 <main+0x272>
 800c3de:	4b53      	ldr	r3, [pc, #332]	@ (800c52c <main+0x3b8>)
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d016      	beq.n	800c414 <main+0x2a0>
 800c3e6:	4b52      	ldr	r3, [pc, #328]	@ (800c530 <main+0x3bc>)
 800c3e8:	789b      	ldrb	r3, [r3, #2]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d012      	beq.n	800c414 <main+0x2a0>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800c3ee:	f001 fac7 	bl	800d980 <sen5x_Get_sen5x_enable_state>
 800c3f2:	0003      	movs	r3, r0
 800c3f4:	001a      	movs	r2, r3
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	4053      	eors	r3, r2
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d006      	beq.n	800c40e <main+0x29a>
 800c400:	4b4f      	ldr	r3, [pc, #316]	@ (800c540 <main+0x3cc>)
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <main+0x29a>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800c408:	2000      	movs	r0, #0
 800c40a:	f001 faf5 	bl	800d9f8 <sen5x_enable>
        }
        sen5x_statemachine();
 800c40e:	f002 f865 	bl	800e4dc <sen5x_statemachine>
 800c412:	e020      	b.n	800c456 <main+0x2e2>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800c414:	4b30      	ldr	r3, [pc, #192]	@ (800c4d8 <main+0x364>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d81c      	bhi.n	800c456 <main+0x2e2>
 800c41c:	4b43      	ldr	r3, [pc, #268]	@ (800c52c <main+0x3b8>)
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	2201      	movs	r2, #1
 800c422:	4053      	eors	r3, r2
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b00      	cmp	r3, #0
 800c428:	d015      	beq.n	800c456 <main+0x2e2>
 800c42a:	4b41      	ldr	r3, [pc, #260]	@ (800c530 <main+0x3bc>)
 800c42c:	789b      	ldrb	r3, [r3, #2]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d011      	beq.n	800c456 <main+0x2e2>
        Info("Battery level insufficient for sen5x operation");
 800c432:	4a49      	ldr	r2, [pc, #292]	@ (800c558 <main+0x3e4>)
 800c434:	4b2a      	ldr	r3, [pc, #168]	@ (800c4e0 <main+0x36c>)
 800c436:	0019      	movs	r1, r3
 800c438:	2002      	movs	r0, #2
 800c43a:	f006 fe35 	bl	80130a8 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800c43e:	4b3c      	ldr	r3, [pc, #240]	@ (800c530 <main+0x3bc>)
 800c440:	2200      	movs	r2, #0
 800c442:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800c444:	4b45      	ldr	r3, [pc, #276]	@ (800c55c <main+0x3e8>)
 800c446:	2200      	movs	r2, #0
 800c448:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800c44a:	4b45      	ldr	r3, [pc, #276]	@ (800c560 <main+0x3ec>)
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d001      	beq.n	800c456 <main+0x2e2>
          sen5x_Power_Off();
 800c452:	f001 fb5d 	bl	800db10 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800c456:	f7fa ffe9 	bl	800742c <ESP_Upkeep>
 800c45a:	0003      	movs	r3, r0
 800c45c:	001a      	movs	r2, r3
 800c45e:	4b35      	ldr	r3, [pc, #212]	@ (800c534 <main+0x3c0>)
 800c460:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800c462:	4b36      	ldr	r3, [pc, #216]	@ (800c53c <main+0x3c8>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	2201      	movs	r2, #1
 800c468:	4053      	eors	r3, r2
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d00f      	beq.n	800c490 <main+0x31c>
 800c470:	4b1c      	ldr	r3, [pc, #112]	@ (800c4e4 <main+0x370>)
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	2201      	movs	r2, #1
 800c476:	4053      	eors	r3, r2
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d008      	beq.n	800c490 <main+0x31c>
 800c47e:	4b2e      	ldr	r3, [pc, #184]	@ (800c538 <main+0x3c4>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	2201      	movs	r2, #1
 800c484:	4053      	eors	r3, r2
 800c486:	b2db      	uxtb	r3, r3
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d001      	beq.n	800c490 <main+0x31c>
      Device_Test();  // for device with startup time
 800c48c:	f000 fcae 	bl	800cdec <Device_Test>
    }
    if (!usbPluggedIn) {
 800c490:	4b2b      	ldr	r3, [pc, #172]	@ (800c540 <main+0x3cc>)
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2201      	movs	r2, #1
 800c496:	4053      	eors	r3, r2
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d06d      	beq.n	800c57a <main+0x406>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800c49e:	4b31      	ldr	r3, [pc, #196]	@ (800c564 <main+0x3f0>)
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	4053      	eors	r3, r2
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d066      	beq.n	800c57a <main+0x406>
 800c4ac:	f000 fd1c 	bl	800cee8 <AllDevicesReady>
 800c4b0:	1e03      	subs	r3, r0, #0
 800c4b2:	d062      	beq.n	800c57a <main+0x406>
 800c4b4:	4b2c      	ldr	r3, [pc, #176]	@ (800c568 <main+0x3f4>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d05e      	beq.n	800c57a <main+0x406>
        EnabledConnectedDevices();
 800c4bc:	f000 fe18 	bl	800d0f0 <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800c4c0:	4b2a      	ldr	r3, [pc, #168]	@ (800c56c <main+0x3f8>)
 800c4c2:	795b      	ldrb	r3, [r3, #5]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d053      	beq.n	800c570 <main+0x3fc>
 800c4c8:	23d7      	movs	r3, #215	@ 0xd7
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	e052      	b.n	800c574 <main+0x400>
 800c4ce:	46c0      	nop			@ (mov r8, r8)
 800c4d0:	20001ebc 	.word	0x20001ebc
 800c4d4:	20001e7c 	.word	0x20001e7c
 800c4d8:	20000e28 	.word	0x20000e28
 800c4dc:	0802bf8c 	.word	0x0802bf8c
 800c4e0:	0802bfb0 	.word	0x0802bfb0
 800c4e4:	20000e0d 	.word	0x20000e0d
 800c4e8:	20000e14 	.word	0x20000e14
 800c4ec:	20001ff4 	.word	0x20001ff4
 800c4f0:	20000ea8 	.word	0x20000ea8
 800c4f4:	20001efc 	.word	0x20001efc
 800c4f8:	20000d88 	.word	0x20000d88
 800c4fc:	20000dc4 	.word	0x20000dc4
 800c500:	0802bfb4 	.word	0x0802bfb4
 800c504:	0802d928 	.word	0x0802d928
 800c508:	200020ac 	.word	0x200020ac
 800c50c:	20000b88 	.word	0x20000b88
 800c510:	20000c50 	.word	0x20000c50
 800c514:	000061a8 	.word	0x000061a8
 800c518:	20000e24 	.word	0x20000e24
 800c51c:	20000e0f 	.word	0x20000e0f
 800c520:	0802bfc8 	.word	0x0802bfc8
 800c524:	20000098 	.word	0x20000098
 800c528:	0000c350 	.word	0x0000c350
 800c52c:	20000097 	.word	0x20000097
 800c530:	20000e2c 	.word	0x20000e2c
 800c534:	20000e11 	.word	0x20000e11
 800c538:	20000e0e 	.word	0x20000e0e
 800c53c:	20000e0c 	.word	0x20000e0c
 800c540:	20001e5d 	.word	0x20001e5d
 800c544:	20000ed0 	.word	0x20000ed0
 800c548:	0802bffc 	.word	0x0802bffc
 800c54c:	0802c034 	.word	0x0802c034
 800c550:	00001194 	.word	0x00001194
 800c554:	20000e10 	.word	0x20000e10
 800c558:	0802c038 	.word	0x0802c038
 800c55c:	20000ece 	.word	0x20000ece
 800c560:	20000ecd 	.word	0x20000ecd
 800c564:	20001e5e 	.word	0x20001e5e
 800c568:	200005a8 	.word	0x200005a8
 800c56c:	20000e34 	.word	0x20000e34
 800c570:	23dc      	movs	r3, #220	@ 0xdc
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	0018      	movs	r0, r3
 800c576:	f7fd fa51 	bl	8009a1c <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800c57a:	4b0d      	ldr	r3, [pc, #52]	@ (800c5b0 <main+0x43c>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d001      	beq.n	800c586 <main+0x412>
      check_cli_command();
 800c582:	f000 f8a3 	bl	800c6cc <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800c586:	f7fc feb9 	bl	80092fc <Check_USB_PowerOn>
 800c58a:	1e03      	subs	r3, r0, #0
 800c58c:	d100      	bne.n	800c590 <main+0x41c>
 800c58e:	e687      	b.n	800c2a0 <main+0x12c>
 800c590:	4b08      	ldr	r3, [pc, #32]	@ (800c5b4 <main+0x440>)
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2201      	movs	r2, #1
 800c596:	4053      	eors	r3, r2
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d100      	bne.n	800c5a0 <main+0x42c>
 800c59e:	e67f      	b.n	800c2a0 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800c5a0:	f015 fe10 	bl	80221c4 <GetUsbRxPointer>
 800c5a4:	0003      	movs	r3, r0
 800c5a6:	0018      	movs	r0, r3
 800c5a8:	f7fc fbfe 	bl	8008da8 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800c5ac:	e678      	b.n	800c2a0 <main+0x12c>
 800c5ae:	46c0      	nop			@ (mov r8, r8)
 800c5b0:	20000e14 	.word	0x20000e14
 800c5b4:	200005a3 	.word	0x200005a3

0800c5b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c5b8:	b590      	push	{r4, r7, lr}
 800c5ba:	b09d      	sub	sp, #116	@ 0x74
 800c5bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c5be:	2438      	movs	r4, #56	@ 0x38
 800c5c0:	193b      	adds	r3, r7, r4
 800c5c2:	0018      	movs	r0, r3
 800c5c4:	2338      	movs	r3, #56	@ 0x38
 800c5c6:	001a      	movs	r2, r3
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	f019 f843 	bl	8025654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c5ce:	2324      	movs	r3, #36	@ 0x24
 800c5d0:	18fb      	adds	r3, r7, r3
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	2314      	movs	r3, #20
 800c5d6:	001a      	movs	r2, r3
 800c5d8:	2100      	movs	r1, #0
 800c5da:	f019 f83b 	bl	8025654 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c5de:	003b      	movs	r3, r7
 800c5e0:	0018      	movs	r0, r3
 800c5e2:	2324      	movs	r3, #36	@ 0x24
 800c5e4:	001a      	movs	r2, r3
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	f019 f834 	bl	8025654 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c5ec:	4b34      	ldr	r3, [pc, #208]	@ (800c6c0 <SystemClock_Config+0x108>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a34      	ldr	r2, [pc, #208]	@ (800c6c4 <SystemClock_Config+0x10c>)
 800c5f2:	401a      	ands	r2, r3
 800c5f4:	4b32      	ldr	r3, [pc, #200]	@ (800c6c0 <SystemClock_Config+0x108>)
 800c5f6:	2180      	movs	r1, #128	@ 0x80
 800c5f8:	0109      	lsls	r1, r1, #4
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800c5fe:	f00d fe3f 	bl	801a280 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800c602:	4b31      	ldr	r3, [pc, #196]	@ (800c6c8 <SystemClock_Config+0x110>)
 800c604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c606:	4a2f      	ldr	r2, [pc, #188]	@ (800c6c4 <SystemClock_Config+0x10c>)
 800c608:	401a      	ands	r2, r3
 800c60a:	4b2f      	ldr	r3, [pc, #188]	@ (800c6c8 <SystemClock_Config+0x110>)
 800c60c:	2180      	movs	r1, #128	@ 0x80
 800c60e:	0149      	lsls	r1, r1, #5
 800c610:	430a      	orrs	r2, r1
 800c612:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800c614:	193b      	adds	r3, r7, r4
 800c616:	2226      	movs	r2, #38	@ 0x26
 800c618:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c61a:	193b      	adds	r3, r7, r4
 800c61c:	2280      	movs	r2, #128	@ 0x80
 800c61e:	0052      	lsls	r2, r2, #1
 800c620:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c622:	0021      	movs	r1, r4
 800c624:	187b      	adds	r3, r7, r1
 800c626:	2201      	movs	r2, #1
 800c628:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c62a:	187b      	adds	r3, r7, r1
 800c62c:	2210      	movs	r2, #16
 800c62e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c630:	187b      	adds	r3, r7, r1
 800c632:	2201      	movs	r2, #1
 800c634:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c636:	187b      	adds	r3, r7, r1
 800c638:	2200      	movs	r2, #0
 800c63a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c63c:	187b      	adds	r3, r7, r1
 800c63e:	0018      	movs	r0, r3
 800c640:	f00d feae 	bl	801a3a0 <HAL_RCC_OscConfig>
 800c644:	1e03      	subs	r3, r0, #0
 800c646:	d001      	beq.n	800c64c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c648:	f000 f906 	bl	800c858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c64c:	2124      	movs	r1, #36	@ 0x24
 800c64e:	187b      	adds	r3, r7, r1
 800c650:	220f      	movs	r2, #15
 800c652:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c654:	187b      	adds	r3, r7, r1
 800c656:	2201      	movs	r2, #1
 800c658:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c65a:	187b      	adds	r3, r7, r1
 800c65c:	2200      	movs	r2, #0
 800c65e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c660:	187b      	adds	r3, r7, r1
 800c662:	2200      	movs	r2, #0
 800c664:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c666:	187b      	adds	r3, r7, r1
 800c668:	2200      	movs	r2, #0
 800c66a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c66c:	187b      	adds	r3, r7, r1
 800c66e:	2100      	movs	r1, #0
 800c670:	0018      	movs	r0, r3
 800c672:	f00e fa69 	bl	801ab48 <HAL_RCC_ClockConfig>
 800c676:	1e03      	subs	r3, r0, #0
 800c678:	d001      	beq.n	800c67e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800c67a:	f000 f8ed 	bl	800c858 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800c67e:	003b      	movs	r3, r7
 800c680:	226d      	movs	r2, #109	@ 0x6d
 800c682:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c684:	003b      	movs	r3, r7
 800c686:	2200      	movs	r2, #0
 800c688:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800c68a:	003b      	movs	r3, r7
 800c68c:	2200      	movs	r2, #0
 800c68e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c690:	003b      	movs	r3, r7
 800c692:	2200      	movs	r2, #0
 800c694:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c696:	003b      	movs	r3, r7
 800c698:	2280      	movs	r2, #128	@ 0x80
 800c69a:	0252      	lsls	r2, r2, #9
 800c69c:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c69e:	003b      	movs	r3, r7
 800c6a0:	2280      	movs	r2, #128	@ 0x80
 800c6a2:	04d2      	lsls	r2, r2, #19
 800c6a4:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c6a6:	003b      	movs	r3, r7
 800c6a8:	0018      	movs	r0, r3
 800c6aa:	f00e fc71 	bl	801af90 <HAL_RCCEx_PeriphCLKConfig>
 800c6ae:	1e03      	subs	r3, r0, #0
 800c6b0:	d001      	beq.n	800c6b6 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800c6b2:	f000 f8d1 	bl	800c858 <Error_Handler>
  }
}
 800c6b6:	46c0      	nop			@ (mov r8, r8)
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	b01d      	add	sp, #116	@ 0x74
 800c6bc:	bd90      	pop	{r4, r7, pc}
 800c6be:	46c0      	nop			@ (mov r8, r8)
 800c6c0:	40007000 	.word	0x40007000
 800c6c4:	ffffe7ff 	.word	0xffffe7ff
 800c6c8:	40021000 	.word	0x40021000

0800c6cc <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800c6d0:	4b34      	ldr	r3, [pc, #208]	@ (800c7a4 <check_cli_command+0xd8>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	3b61      	subs	r3, #97	@ 0x61
 800c6d6:	2b13      	cmp	r3, #19
 800c6d8:	d833      	bhi.n	800c742 <check_cli_command+0x76>
 800c6da:	009a      	lsls	r2, r3, #2
 800c6dc:	4b32      	ldr	r3, [pc, #200]	@ (800c7a8 <check_cli_command+0xdc>)
 800c6de:	18d3      	adds	r3, r2, r3
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800c6e4:	4b31      	ldr	r3, [pc, #196]	@ (800c7ac <check_cli_command+0xe0>)
 800c6e6:	0018      	movs	r0, r3
 800c6e8:	f018 fe40 	bl	802536c <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800c6ec:	2003      	movs	r0, #3
 800c6ee:	f006 fd45 	bl	801317c <SetVerboseLevel>
      break;
 800c6f2:	e051      	b.n	800c798 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800c6f4:	f7fb ff96 	bl	8008624 <PC_show_Keys>
    break;
 800c6f8:	e04e      	b.n	800c798 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800c6fa:	f7f8 f8f3 	bl	80048e4 <forceNTPupdate>
    break;
 800c6fe:	e04b      	b.n	800c798 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800c700:	4b2b      	ldr	r3, [pc, #172]	@ (800c7b0 <check_cli_command+0xe4>)
 800c702:	0018      	movs	r0, r3
 800c704:	f018 fe32 	bl	802536c <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800c708:	2002      	movs	r0, #2
 800c70a:	f006 fd37 	bl	801317c <SetVerboseLevel>
      break;
 800c70e:	e043      	b.n	800c798 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800c710:	4b28      	ldr	r3, [pc, #160]	@ (800c7b4 <check_cli_command+0xe8>)
 800c712:	0018      	movs	r0, r3
 800c714:	f018 fe2a 	bl	802536c <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800c718:	2001      	movs	r0, #1
 800c71a:	f006 fd2f 	bl	801317c <SetVerboseLevel>
      break;
 800c71e:	e03b      	b.n	800c798 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800c720:	4b25      	ldr	r3, [pc, #148]	@ (800c7b8 <check_cli_command+0xec>)
 800c722:	0018      	movs	r0, r3
 800c724:	f018 fe22 	bl	802536c <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800c728:	2000      	movs	r0, #0
 800c72a:	f006 fd27 	bl	801317c <SetVerboseLevel>
      break;
 800c72e:	e033      	b.n	800c798 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800c730:	f007 f9fa 	bl	8013b28 <HAL_GetTick>
 800c734:	0002      	movs	r2, r0
 800c736:	4b21      	ldr	r3, [pc, #132]	@ (800c7bc <check_cli_command+0xf0>)
 800c738:	601a      	str	r2, [r3, #0]
      break;
 800c73a:	e02d      	b.n	800c798 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800c73c:	f7fc fe0e 	bl	800935c <showTime>
      break;
 800c740:	e02a      	b.n	800c798 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800c742:	4a1f      	ldr	r2, [pc, #124]	@ (800c7c0 <check_cli_command+0xf4>)
 800c744:	4b1f      	ldr	r3, [pc, #124]	@ (800c7c4 <check_cli_command+0xf8>)
 800c746:	0019      	movs	r1, r3
 800c748:	2001      	movs	r0, #1
 800c74a:	f006 fcad 	bl	80130a8 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800c74e:	4b1e      	ldr	r3, [pc, #120]	@ (800c7c8 <check_cli_command+0xfc>)
 800c750:	0018      	movs	r0, r3
 800c752:	f018 fe0b 	bl	802536c <puts>
      printf("a - VerboseLevel set to all\r\n");
 800c756:	4b1d      	ldr	r3, [pc, #116]	@ (800c7cc <check_cli_command+0x100>)
 800c758:	0018      	movs	r0, r3
 800c75a:	f018 fe07 	bl	802536c <puts>
      printf("e - show EEPROM\r\n");
 800c75e:	4b1c      	ldr	r3, [pc, #112]	@ (800c7d0 <check_cli_command+0x104>)
 800c760:	0018      	movs	r0, r3
 800c762:	f018 fe03 	bl	802536c <puts>
      printf("f - Force NTP time synchronization\r\n");
 800c766:	4b1b      	ldr	r3, [pc, #108]	@ (800c7d4 <check_cli_command+0x108>)
 800c768:	0018      	movs	r0, r3
 800c76a:	f018 fdff 	bl	802536c <puts>
      printf("i - VerboseLevel set to info\r\n");
 800c76e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d8 <check_cli_command+0x10c>)
 800c770:	0018      	movs	r0, r3
 800c772:	f018 fdfb 	bl	802536c <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800c776:	4b19      	ldr	r3, [pc, #100]	@ (800c7dc <check_cli_command+0x110>)
 800c778:	0018      	movs	r0, r3
 800c77a:	f018 fdf7 	bl	802536c <puts>
      printf("n - VerboseLevel set to none\r\n");
 800c77e:	4b18      	ldr	r3, [pc, #96]	@ (800c7e0 <check_cli_command+0x114>)
 800c780:	0018      	movs	r0, r3
 800c782:	f018 fdf3 	bl	802536c <puts>
      printf("s - Start particle measurement\r\n");
 800c786:	4b17      	ldr	r3, [pc, #92]	@ (800c7e4 <check_cli_command+0x118>)
 800c788:	0018      	movs	r0, r3
 800c78a:	f018 fdef 	bl	802536c <puts>
      printf("t - Show actual systemtime\r\n");
 800c78e:	4b16      	ldr	r3, [pc, #88]	@ (800c7e8 <check_cli_command+0x11c>)
 800c790:	0018      	movs	r0, r3
 800c792:	f018 fdeb 	bl	802536c <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800c796:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800c798:	4b02      	ldr	r3, [pc, #8]	@ (800c7a4 <check_cli_command+0xd8>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	701a      	strb	r2, [r3, #0]
}
 800c79e:	46c0      	nop			@ (mov r8, r8)
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	20000e14 	.word	0x20000e14
 800c7a8:	0802d8d8 	.word	0x0802d8d8
 800c7ac:	0802c068 	.word	0x0802c068
 800c7b0:	0802c084 	.word	0x0802c084
 800c7b4:	0802c0a0 	.word	0x0802c0a0
 800c7b8:	0802c0c0 	.word	0x0802c0c0
 800c7bc:	20000edc 	.word	0x20000edc
 800c7c0:	0802c0dc 	.word	0x0802c0dc
 800c7c4:	0802c10c 	.word	0x0802c10c
 800c7c8:	0802c110 	.word	0x0802c110
 800c7cc:	0802c128 	.word	0x0802c128
 800c7d0:	0802c148 	.word	0x0802c148
 800c7d4:	0802c15c 	.word	0x0802c15c
 800c7d8:	0802c180 	.word	0x0802c180
 800c7dc:	0802c1a0 	.word	0x0802c1a0
 800c7e0:	0802c1c4 	.word	0x0802c1c4
 800c7e4:	0802c1e4 	.word	0x0802c1e4
 800c7e8:	0802c204 	.word	0x0802c204

0800c7ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c7f4:	4907      	ldr	r1, [pc, #28]	@ (800c814 <HAL_UART_RxCpltCallback+0x28>)
 800c7f6:	4b08      	ldr	r3, [pc, #32]	@ (800c818 <HAL_UART_RxCpltCallback+0x2c>)
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	0018      	movs	r0, r3
 800c7fc:	f00f ff6c 	bl	801c6d8 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800c800:	4904      	ldr	r1, [pc, #16]	@ (800c814 <HAL_UART_RxCpltCallback+0x28>)
 800c802:	4b05      	ldr	r3, [pc, #20]	@ (800c818 <HAL_UART_RxCpltCallback+0x2c>)
 800c804:	2201      	movs	r2, #1
 800c806:	0018      	movs	r0, r3
 800c808:	f00f ff66 	bl	801c6d8 <HAL_UART_Receive_IT>
}
 800c80c:	46c0      	nop			@ (mov r8, r8)
 800c80e:	46bd      	mov	sp, r7
 800c810:	b002      	add	sp, #8
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20000e14 	.word	0x20000e14
 800c818:	20001ff4 	.word	0x20001ff4

0800c81c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	0002      	movs	r2, r0
 800c824:	1dbb      	adds	r3, r7, #6
 800c826:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800c828:	1dbb      	adds	r3, r7, #6
 800c82a:	881a      	ldrh	r2, [r3, #0]
 800c82c:	2380      	movs	r3, #128	@ 0x80
 800c82e:	021b      	lsls	r3, r3, #8
 800c830:	429a      	cmp	r2, r3
 800c832:	d10b      	bne.n	800c84c <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800c834:	f005 fede 	bl	80125f4 <setuserToggle>
    if (GetPMSensorPresence()) {
 800c838:	f000 f860 	bl	800c8fc <GetPMSensorPresence>
 800c83c:	1e03      	subs	r3, r0, #0
 800c83e:	d005      	beq.n	800c84c <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800c840:	4b04      	ldr	r3, [pc, #16]	@ (800c854 <HAL_GPIO_EXTI_Callback+0x38>)
 800c842:	2201      	movs	r2, #1
 800c844:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800c846:	2000      	movs	r0, #0
 800c848:	f001 f8a4 	bl	800d994 <sen5x_Set_sen5x_state>
    }
  }
}
 800c84c:	46c0      	nop			@ (mov r8, r8)
 800c84e:	46bd      	mov	sp, r7
 800c850:	b002      	add	sp, #8
 800c852:	bd80      	pop	{r7, pc}
 800c854:	20000e2c 	.word	0x20000e2c

0800c858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800c85c:	f005 fb1c 	bl	8011e98 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c860:	b672      	cpsid	i
}
 800c862:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800c864:	4a05      	ldr	r2, [pc, #20]	@ (800c87c <Error_Handler+0x24>)
 800c866:	4b06      	ldr	r3, [pc, #24]	@ (800c880 <Error_Handler+0x28>)
 800c868:	0019      	movs	r1, r3
 800c86a:	2001      	movs	r0, #1
 800c86c:	f006 fc1c 	bl	80130a8 <CreateLine>

    HAL_Delay(2500);
 800c870:	4b04      	ldr	r3, [pc, #16]	@ (800c884 <Error_Handler+0x2c>)
 800c872:	0018      	movs	r0, r3
 800c874:	f007 f962 	bl	8013b3c <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800c878:	46c0      	nop			@ (mov r8, r8)
 800c87a:	e7f3      	b.n	800c864 <Error_Handler+0xc>
 800c87c:	0802c220 	.word	0x0802c220
 800c880:	0802c10c 	.word	0x0802c10c
 800c884:	000009c4 	.word	0x000009c4

0800c888 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800c888:	b580      	push	{r7, lr}
 800c88a:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800c88c:	4b19      	ldr	r3, [pc, #100]	@ (800c8f4 <testInit+0x6c>)
 800c88e:	2200      	movs	r2, #0
 800c890:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800c892:	4b18      	ldr	r3, [pc, #96]	@ (800c8f4 <testInit+0x6c>)
 800c894:	2200      	movs	r2, #0
 800c896:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800c898:	4b16      	ldr	r3, [pc, #88]	@ (800c8f4 <testInit+0x6c>)
 800c89a:	2200      	movs	r2, #0
 800c89c:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800c89e:	4b15      	ldr	r3, [pc, #84]	@ (800c8f4 <testInit+0x6c>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800c8a4:	4b13      	ldr	r3, [pc, #76]	@ (800c8f4 <testInit+0x6c>)
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800c8aa:	4b12      	ldr	r3, [pc, #72]	@ (800c8f4 <testInit+0x6c>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800c8b0:	4b10      	ldr	r3, [pc, #64]	@ (800c8f4 <testInit+0x6c>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800c8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c8f4 <testInit+0x6c>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800c8bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f4 <testInit+0x6c>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800c8c2:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f8 <testInit+0x70>)
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800c8c8:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f8 <testInit+0x70>)
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f8 <testInit+0x70>)
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800c8d4:	4b08      	ldr	r3, [pc, #32]	@ (800c8f8 <testInit+0x70>)
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800c8da:	4b07      	ldr	r3, [pc, #28]	@ (800c8f8 <testInit+0x70>)
 800c8dc:	2201      	movs	r2, #1
 800c8de:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800c8e0:	4b05      	ldr	r3, [pc, #20]	@ (800c8f8 <testInit+0x70>)
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800c8e6:	4b04      	ldr	r3, [pc, #16]	@ (800c8f8 <testInit+0x70>)
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	719a      	strb	r2, [r3, #6]
}
 800c8ec:	46c0      	nop			@ (mov r8, r8)
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	46c0      	nop			@ (mov r8, r8)
 800c8f4:	20000e34 	.word	0x20000e34
 800c8f8:	20000e2c 	.word	0x20000e2c

0800c8fc <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800c900:	4b02      	ldr	r3, [pc, #8]	@ (800c90c <GetPMSensorPresence+0x10>)
 800c902:	795b      	ldrb	r3, [r3, #5]
}
 800c904:	0018      	movs	r0, r3
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	46c0      	nop			@ (mov r8, r8)
 800c90c:	20000e34 	.word	0x20000e34

0800c910 <DisablePMSensor>:

void DisablePMSensor() {
 800c910:	b580      	push	{r7, lr}
 800c912:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800c914:	4b02      	ldr	r3, [pc, #8]	@ (800c920 <DisablePMSensor+0x10>)
 800c916:	2200      	movs	r2, #0
 800c918:	715a      	strb	r2, [r3, #5]
}
 800c91a:	46c0      	nop			@ (mov r8, r8)
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	20000e34 	.word	0x20000e34

0800c924 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800c924:	b580      	push	{r7, lr}
 800c926:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800c928:	4b02      	ldr	r3, [pc, #8]	@ (800c934 <IsAHT20SensorPresent+0x10>)
 800c92a:	789b      	ldrb	r3, [r3, #2]
}
 800c92c:	0018      	movs	r0, r3
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	46c0      	nop			@ (mov r8, r8)
 800c934:	20000e34 	.word	0x20000e34

0800c938 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800c938:	b580      	push	{r7, lr}
 800c93a:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800c93c:	4b02      	ldr	r3, [pc, #8]	@ (800c948 <IsBMP280SensorPresent+0x10>)
 800c93e:	791b      	ldrb	r3, [r3, #4]
}
 800c940:	0018      	movs	r0, r3
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	46c0      	nop			@ (mov r8, r8)
 800c948:	20000e34 	.word	0x20000e34

0800c94c <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800c94c:	b580      	push	{r7, lr}
 800c94e:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800c950:	4b02      	ldr	r3, [pc, #8]	@ (800c95c <IsENS160SensorPresent+0x10>)
 800c952:	78db      	ldrb	r3, [r3, #3]
}
 800c954:	0018      	movs	r0, r3
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	46c0      	nop			@ (mov r8, r8)
 800c95c:	20000e34 	.word	0x20000e34

0800c960 <IsSGPPresent>:

bool IsSGPPresent() {
 800c960:	b580      	push	{r7, lr}
 800c962:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800c964:	4b02      	ldr	r3, [pc, #8]	@ (800c970 <IsSGPPresent+0x10>)
 800c966:	785b      	ldrb	r3, [r3, #1]
}
 800c968:	0018      	movs	r0, r3
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	46c0      	nop			@ (mov r8, r8)
 800c970:	20000e34 	.word	0x20000e34

0800c974 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	0002      	movs	r2, r0
 800c97c:	1dfb      	adds	r3, r7, #7
 800c97e:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800c980:	4b0b      	ldr	r3, [pc, #44]	@ (800c9b0 <SetVOCSensorDIS_ENA+0x3c>)
 800c982:	1dfa      	adds	r2, r7, #7
 800c984:	7812      	ldrb	r2, [r2, #0]
 800c986:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800c988:	4b0a      	ldr	r3, [pc, #40]	@ (800c9b4 <SetVOCSensorDIS_ENA+0x40>)
 800c98a:	1dfa      	adds	r2, r7, #7
 800c98c:	7812      	ldrb	r2, [r2, #0]
 800c98e:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800c990:	1dfb      	adds	r3, r7, #7
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <SetVOCSensorDIS_ENA+0x28>
 800c998:	4b07      	ldr	r3, [pc, #28]	@ (800c9b8 <SetVOCSensorDIS_ENA+0x44>)
 800c99a:	e000      	b.n	800c99e <SetVOCSensorDIS_ENA+0x2a>
 800c99c:	4b07      	ldr	r3, [pc, #28]	@ (800c9bc <SetVOCSensorDIS_ENA+0x48>)
 800c99e:	4a08      	ldr	r2, [pc, #32]	@ (800c9c0 <SetVOCSensorDIS_ENA+0x4c>)
 800c9a0:	4908      	ldr	r1, [pc, #32]	@ (800c9c4 <SetVOCSensorDIS_ENA+0x50>)
 800c9a2:	2003      	movs	r0, #3
 800c9a4:	f006 fb80 	bl	80130a8 <CreateLine>
}
 800c9a8:	46c0      	nop			@ (mov r8, r8)
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	b002      	add	sp, #8
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	20000e34 	.word	0x20000e34
 800c9b4:	20000e2c 	.word	0x20000e2c
 800c9b8:	0802c24c 	.word	0x0802c24c
 800c9bc:	0802c254 	.word	0x0802c254
 800c9c0:	0802c260 	.word	0x0802c260
 800c9c4:	0802c274 	.word	0x0802c274

0800c9c8 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800c9cc:	4b02      	ldr	r3, [pc, #8]	@ (800c9d8 <IsPMSensorEnabled+0x10>)
 800c9ce:	789b      	ldrb	r3, [r3, #2]
}
 800c9d0:	0018      	movs	r0, r3
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	46c0      	nop			@ (mov r8, r8)
 800c9d8:	20000e2c 	.word	0x20000e2c

0800c9dc <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	0002      	movs	r2, r0
 800c9e4:	1dfb      	adds	r3, r7, #7
 800c9e6:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800c9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ca00 <SetVOCSensorStatus+0x24>)
 800c9ea:	7a1b      	ldrb	r3, [r3, #8]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800c9f0:	4b04      	ldr	r3, [pc, #16]	@ (800ca04 <SetVOCSensorStatus+0x28>)
 800c9f2:	1dfa      	adds	r2, r7, #7
 800c9f4:	7812      	ldrb	r2, [r2, #0]
 800c9f6:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800c9f8:	46c0      	nop			@ (mov r8, r8)
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	b002      	add	sp, #8
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20000e34 	.word	0x20000e34
 800ca04:	20000e2c 	.word	0x20000e2c

0800ca08 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	0002      	movs	r2, r0
 800ca10:	1dfb      	adds	r3, r7, #7
 800ca12:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800ca14:	4b03      	ldr	r3, [pc, #12]	@ (800ca24 <SetPMSensorStatus+0x1c>)
 800ca16:	1dfa      	adds	r2, r7, #7
 800ca18:	7812      	ldrb	r2, [r2, #0]
 800ca1a:	709a      	strb	r2, [r3, #2]
}
 800ca1c:	46c0      	nop			@ (mov r8, r8)
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	b002      	add	sp, #8
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	20000e2c 	.word	0x20000e2c

0800ca28 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800ca2c:	4b02      	ldr	r3, [pc, #8]	@ (800ca38 <SetESPMeasurementDone+0x10>)
 800ca2e:	2201      	movs	r2, #1
 800ca30:	71da      	strb	r2, [r3, #7]
}
 800ca32:	46c0      	nop			@ (mov r8, r8)
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	20000e34 	.word	0x20000e34

0800ca3c <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
 800ca48:	603b      	str	r3, [r7, #0]
  testInit();
 800ca4a:	f7ff ff1d 	bl	800c888 <testInit>
  I2CSensors_Init(sensorI2C);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	0018      	movs	r0, r3
 800ca52:	f7fb f9c5 	bl	8007de0 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800ca56:	f006 fdf3 	bl	8013640 <HIDS_DeviceConnected>
 800ca5a:	0003      	movs	r3, r0
 800ca5c:	001a      	movs	r2, r3
 800ca5e:	2301      	movs	r3, #1
 800ca60:	4053      	eors	r3, r2
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00c      	beq.n	800ca82 <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800ca68:	4abf      	ldr	r2, [pc, #764]	@ (800cd68 <Device_Init+0x32c>)
 800ca6a:	4bc0      	ldr	r3, [pc, #768]	@ (800cd6c <Device_Init+0x330>)
 800ca6c:	0019      	movs	r1, r3
 800ca6e:	2001      	movs	r0, #1
 800ca70:	f006 fb1a 	bl	80130a8 <CreateLine>
     SensorProbe.HT_Present = false;
 800ca74:	4bbe      	ldr	r3, [pc, #760]	@ (800cd70 <Device_Init+0x334>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800ca7a:	4bbe      	ldr	r3, [pc, #760]	@ (800cd74 <Device_Init+0x338>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	701a      	strb	r2, [r3, #0]
 800ca80:	e008      	b.n	800ca94 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800ca82:	4bbb      	ldr	r3, [pc, #748]	@ (800cd70 <Device_Init+0x334>)
 800ca84:	2201      	movs	r2, #1
 800ca86:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800ca88:	4abb      	ldr	r2, [pc, #748]	@ (800cd78 <Device_Init+0x33c>)
 800ca8a:	4bbc      	ldr	r3, [pc, #752]	@ (800cd7c <Device_Init+0x340>)
 800ca8c:	0019      	movs	r1, r3
 800ca8e:	2003      	movs	r0, #3
 800ca90:	f006 fb0a 	bl	80130a8 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800ca94:	f7fe f9ba 	bl	800ae0c <BMP280_DeviceConnected>
 800ca98:	0003      	movs	r3, r0
 800ca9a:	001a      	movs	r2, r3
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	4053      	eors	r3, r2
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00c      	beq.n	800cac0 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800caa6:	4ab6      	ldr	r2, [pc, #728]	@ (800cd80 <Device_Init+0x344>)
 800caa8:	4bb0      	ldr	r3, [pc, #704]	@ (800cd6c <Device_Init+0x330>)
 800caaa:	0019      	movs	r1, r3
 800caac:	2001      	movs	r0, #1
 800caae:	f006 fafb 	bl	80130a8 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800cab2:	4baf      	ldr	r3, [pc, #700]	@ (800cd70 <Device_Init+0x334>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800cab8:	4bae      	ldr	r3, [pc, #696]	@ (800cd74 <Device_Init+0x338>)
 800caba:	2200      	movs	r2, #0
 800cabc:	715a      	strb	r2, [r3, #5]
 800cabe:	e008      	b.n	800cad2 <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800cac0:	4bab      	ldr	r3, [pc, #684]	@ (800cd70 <Device_Init+0x334>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800cac6:	4aaf      	ldr	r2, [pc, #700]	@ (800cd84 <Device_Init+0x348>)
 800cac8:	4bac      	ldr	r3, [pc, #688]	@ (800cd7c <Device_Init+0x340>)
 800caca:	0019      	movs	r1, r3
 800cacc:	2003      	movs	r0, #3
 800cace:	f006 faeb 	bl	80130a8 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800cad2:	f003 fd03 	bl	80104dc <SGP_DeviceConnected>
 800cad6:	0003      	movs	r3, r0
 800cad8:	001a      	movs	r2, r3
 800cada:	2301      	movs	r3, #1
 800cadc:	4053      	eors	r3, r2
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00c      	beq.n	800cafe <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800cae4:	4ba2      	ldr	r3, [pc, #648]	@ (800cd70 <Device_Init+0x334>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800caea:	4aa7      	ldr	r2, [pc, #668]	@ (800cd88 <Device_Init+0x34c>)
 800caec:	4b9f      	ldr	r3, [pc, #636]	@ (800cd6c <Device_Init+0x330>)
 800caee:	0019      	movs	r1, r3
 800caf0:	2001      	movs	r0, #1
 800caf2:	f006 fad9 	bl	80130a8 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800caf6:	4b9f      	ldr	r3, [pc, #636]	@ (800cd74 <Device_Init+0x338>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	705a      	strb	r2, [r3, #1]
 800cafc:	e00b      	b.n	800cb16 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800cafe:	4b9c      	ldr	r3, [pc, #624]	@ (800cd70 <Device_Init+0x334>)
 800cb00:	2201      	movs	r2, #1
 800cb02:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800cb04:	4b9a      	ldr	r3, [pc, #616]	@ (800cd70 <Device_Init+0x334>)
 800cb06:	2201      	movs	r2, #1
 800cb08:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800cb0a:	4aa0      	ldr	r2, [pc, #640]	@ (800cd8c <Device_Init+0x350>)
 800cb0c:	4b9b      	ldr	r3, [pc, #620]	@ (800cd7c <Device_Init+0x340>)
 800cb0e:	0019      	movs	r1, r3
 800cb10:	2003      	movs	r0, #3
 800cb12:	f006 fac9 	bl	80130a8 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800cb16:	f7f7 f9a7 	bl	8003e68 <ENS_DeviceConnected>
 800cb1a:	0003      	movs	r3, r0
 800cb1c:	001a      	movs	r2, r3
 800cb1e:	2301      	movs	r3, #1
 800cb20:	4053      	eors	r3, r2
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00c      	beq.n	800cb42 <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800cb28:	4b91      	ldr	r3, [pc, #580]	@ (800cd70 <Device_Init+0x334>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800cb2e:	4a98      	ldr	r2, [pc, #608]	@ (800cd90 <Device_Init+0x354>)
 800cb30:	4b8e      	ldr	r3, [pc, #568]	@ (800cd6c <Device_Init+0x330>)
 800cb32:	0019      	movs	r1, r3
 800cb34:	2001      	movs	r0, #1
 800cb36:	f006 fab7 	bl	80130a8 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800cb3a:	4b8e      	ldr	r3, [pc, #568]	@ (800cd74 <Device_Init+0x338>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	719a      	strb	r2, [r3, #6]
 800cb40:	e008      	b.n	800cb54 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800cb42:	4b8b      	ldr	r3, [pc, #556]	@ (800cd70 <Device_Init+0x334>)
 800cb44:	2201      	movs	r2, #1
 800cb46:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800cb48:	4a92      	ldr	r2, [pc, #584]	@ (800cd94 <Device_Init+0x358>)
 800cb4a:	4b8c      	ldr	r3, [pc, #560]	@ (800cd7c <Device_Init+0x340>)
 800cb4c:	0019      	movs	r1, r3
 800cb4e:	2003      	movs	r0, #3
 800cb50:	f006 faaa 	bl	80130a8 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800cb54:	f7fd fc86 	bl	800a464 <AHT20_DeviceConnected>
 800cb58:	0003      	movs	r3, r0
 800cb5a:	001a      	movs	r2, r3
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	4053      	eors	r3, r2
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00c      	beq.n	800cb80 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800cb66:	4a8c      	ldr	r2, [pc, #560]	@ (800cd98 <Device_Init+0x35c>)
 800cb68:	4b80      	ldr	r3, [pc, #512]	@ (800cd6c <Device_Init+0x330>)
 800cb6a:	0019      	movs	r1, r3
 800cb6c:	2001      	movs	r0, #1
 800cb6e:	f006 fa9b 	bl	80130a8 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800cb72:	4b7f      	ldr	r3, [pc, #508]	@ (800cd70 <Device_Init+0x334>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800cb78:	4b7e      	ldr	r3, [pc, #504]	@ (800cd74 <Device_Init+0x338>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	711a      	strb	r2, [r3, #4]
 800cb7e:	e008      	b.n	800cb92 <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800cb80:	4b7b      	ldr	r3, [pc, #492]	@ (800cd70 <Device_Init+0x334>)
 800cb82:	2201      	movs	r2, #1
 800cb84:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800cb86:	4a85      	ldr	r2, [pc, #532]	@ (800cd9c <Device_Init+0x360>)
 800cb88:	4b7c      	ldr	r3, [pc, #496]	@ (800cd7c <Device_Init+0x340>)
 800cb8a:	0019      	movs	r1, r3
 800cb8c:	2003      	movs	r0, #3
 800cb8e:	f006 fa8b 	bl	80130a8 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800cb92:	4b77      	ldr	r3, [pc, #476]	@ (800cd70 <Device_Init+0x334>)
 800cb94:	785b      	ldrb	r3, [r3, #1]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d009      	beq.n	800cbae <Device_Init+0x172>
 800cb9a:	4b75      	ldr	r3, [pc, #468]	@ (800cd70 <Device_Init+0x334>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d005      	beq.n	800cbae <Device_Init+0x172>
    SetDBLED(false, true, false);
 800cba2:	2200      	movs	r2, #0
 800cba4:	2101      	movs	r1, #1
 800cba6:	2000      	movs	r0, #0
 800cba8:	f004 ffd0 	bl	8011b4c <SetDBLED>
 800cbac:	e018      	b.n	800cbe0 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800cbae:	2200      	movs	r2, #0
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	2001      	movs	r0, #1
 800cbb4:	f004 ffca 	bl	8011b4c <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800cbb8:	4b79      	ldr	r3, [pc, #484]	@ (800cda0 <Device_Init+0x364>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	0018      	movs	r0, r3
 800cbc0:	f008 fa43 	bl	801504a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800cbc4:	2380      	movs	r3, #128	@ 0x80
 800cbc6:	005b      	lsls	r3, r3, #1
 800cbc8:	4875      	ldr	r0, [pc, #468]	@ (800cda0 <Device_Init+0x364>)
 800cbca:	2201      	movs	r2, #1
 800cbcc:	0019      	movs	r1, r3
 800cbce:	f008 fa3c 	bl	801504a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800cbd2:	2380      	movs	r3, #128	@ 0x80
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4872      	ldr	r0, [pc, #456]	@ (800cda0 <Device_Init+0x364>)
 800cbd8:	2201      	movs	r2, #1
 800cbda:	0019      	movs	r1, r3
 800cbdc:	f008 fa35 	bl	801504a <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800cbe0:	4b64      	ldr	r3, [pc, #400]	@ (800cd74 <Device_Init+0x338>)
 800cbe2:	78db      	ldrb	r3, [r3, #3]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d028      	beq.n	800cc3a <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800cbe8:	4a6e      	ldr	r2, [pc, #440]	@ (800cda4 <Device_Init+0x368>)
 800cbea:	4b6f      	ldr	r3, [pc, #444]	@ (800cda8 <Device_Init+0x36c>)
 800cbec:	0019      	movs	r1, r3
 800cbee:	2002      	movs	r0, #2
 800cbf0:	f006 fa5a 	bl	80130a8 <CreateLine>
    if (!enableMicrophone(true)) {
 800cbf4:	2001      	movs	r0, #1
 800cbf6:	f004 f8a7 	bl	8010d48 <enableMicrophone>
 800cbfa:	0003      	movs	r3, r0
 800cbfc:	001a      	movs	r2, r3
 800cbfe:	2301      	movs	r3, #1
 800cc00:	4053      	eors	r3, r2
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00c      	beq.n	800cc22 <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800cc08:	4a68      	ldr	r2, [pc, #416]	@ (800cdac <Device_Init+0x370>)
 800cc0a:	4b58      	ldr	r3, [pc, #352]	@ (800cd6c <Device_Init+0x330>)
 800cc0c:	0019      	movs	r1, r3
 800cc0e:	2001      	movs	r0, #1
 800cc10:	f006 fa4a 	bl	80130a8 <CreateLine>
      SensorProbe.MIC_Present = false;
 800cc14:	4b56      	ldr	r3, [pc, #344]	@ (800cd70 <Device_Init+0x334>)
 800cc16:	2200      	movs	r2, #0
 800cc18:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800cc1a:	4b56      	ldr	r3, [pc, #344]	@ (800cd74 <Device_Init+0x338>)
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	70da      	strb	r2, [r3, #3]
 800cc20:	e00b      	b.n	800cc3a <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800cc22:	4b53      	ldr	r3, [pc, #332]	@ (800cd70 <Device_Init+0x334>)
 800cc24:	2201      	movs	r2, #1
 800cc26:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800cc28:	4b52      	ldr	r3, [pc, #328]	@ (800cd74 <Device_Init+0x338>)
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800cc2e:	4a60      	ldr	r2, [pc, #384]	@ (800cdb0 <Device_Init+0x374>)
 800cc30:	4b52      	ldr	r3, [pc, #328]	@ (800cd7c <Device_Init+0x340>)
 800cc32:	0019      	movs	r1, r3
 800cc34:	2003      	movs	r0, #3
 800cc36:	f006 fa37 	bl	80130a8 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800cc3a:	f000 ff9f 	bl	800db7c <probe_sen5x>
 800cc3e:	1e03      	subs	r3, r0, #0
 800cc40:	d122      	bne.n	800cc88 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800cc42:	4a5c      	ldr	r2, [pc, #368]	@ (800cdb4 <Device_Init+0x378>)
 800cc44:	4b4d      	ldr	r3, [pc, #308]	@ (800cd7c <Device_Init+0x340>)
 800cc46:	0019      	movs	r1, r3
 800cc48:	2003      	movs	r0, #3
 800cc4a:	f006 fa2d 	bl	80130a8 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800cc4e:	4b48      	ldr	r3, [pc, #288]	@ (800cd70 <Device_Init+0x334>)
 800cc50:	2201      	movs	r2, #1
 800cc52:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800cc54:	4b47      	ldr	r3, [pc, #284]	@ (800cd74 <Device_Init+0x338>)
 800cc56:	2201      	movs	r2, #1
 800cc58:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800cc5a:	4b57      	ldr	r3, [pc, #348]	@ (800cdb8 <Device_Init+0x37c>)
 800cc5c:	791b      	ldrb	r3, [r3, #4]
 800cc5e:	2b34      	cmp	r3, #52	@ 0x34
 800cc60:	d003      	beq.n	800cc6a <Device_Init+0x22e>
 800cc62:	4b55      	ldr	r3, [pc, #340]	@ (800cdb8 <Device_Init+0x37c>)
 800cc64:	791b      	ldrb	r3, [r3, #4]
 800cc66:	2b35      	cmp	r3, #53	@ 0x35
 800cc68:	d11c      	bne.n	800cca4 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800cc6a:	4a54      	ldr	r2, [pc, #336]	@ (800cdbc <Device_Init+0x380>)
 800cc6c:	4b4e      	ldr	r3, [pc, #312]	@ (800cda8 <Device_Init+0x36c>)
 800cc6e:	0019      	movs	r1, r3
 800cc70:	2002      	movs	r0, #2
 800cc72:	f006 fa19 	bl	80130a8 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800cc76:	4b3f      	ldr	r3, [pc, #252]	@ (800cd74 <Device_Init+0x338>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800cc7c:	4b3c      	ldr	r3, [pc, #240]	@ (800cd70 <Device_Init+0x334>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800cc82:	f003 fe11 	bl	80108a8 <SGP_SoftReset>
 800cc86:	e00d      	b.n	800cca4 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800cc88:	f000 ff42 	bl	800db10 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800cc8c:	4a4c      	ldr	r2, [pc, #304]	@ (800cdc0 <Device_Init+0x384>)
 800cc8e:	4b3b      	ldr	r3, [pc, #236]	@ (800cd7c <Device_Init+0x340>)
 800cc90:	0019      	movs	r1, r3
 800cc92:	2003      	movs	r0, #3
 800cc94:	f006 fa08 	bl	80130a8 <CreateLine>
    SensorProbe.PM_Present = false;
 800cc98:	4b35      	ldr	r3, [pc, #212]	@ (800cd70 <Device_Init+0x334>)
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800cc9e:	4b35      	ldr	r3, [pc, #212]	@ (800cd74 <Device_Init+0x338>)
 800cca0:	2200      	movs	r2, #0
 800cca2:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800cca4:	4b32      	ldr	r3, [pc, #200]	@ (800cd70 <Device_Init+0x334>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d001      	beq.n	800ccb0 <Device_Init+0x274>
 800ccac:	4b45      	ldr	r3, [pc, #276]	@ (800cdc4 <Device_Init+0x388>)
 800ccae:	e000      	b.n	800ccb2 <Device_Init+0x276>
 800ccb0:	4b45      	ldr	r3, [pc, #276]	@ (800cdc8 <Device_Init+0x38c>)
 800ccb2:	4a46      	ldr	r2, [pc, #280]	@ (800cdcc <Device_Init+0x390>)
 800ccb4:	493c      	ldr	r1, [pc, #240]	@ (800cda8 <Device_Init+0x36c>)
 800ccb6:	2002      	movs	r0, #2
 800ccb8:	f006 f9f6 	bl	80130a8 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800ccbc:	4b2c      	ldr	r3, [pc, #176]	@ (800cd70 <Device_Init+0x334>)
 800ccbe:	785b      	ldrb	r3, [r3, #1]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d001      	beq.n	800ccc8 <Device_Init+0x28c>
 800ccc4:	4b3f      	ldr	r3, [pc, #252]	@ (800cdc4 <Device_Init+0x388>)
 800ccc6:	e000      	b.n	800ccca <Device_Init+0x28e>
 800ccc8:	4b3f      	ldr	r3, [pc, #252]	@ (800cdc8 <Device_Init+0x38c>)
 800ccca:	4a41      	ldr	r2, [pc, #260]	@ (800cdd0 <Device_Init+0x394>)
 800cccc:	4936      	ldr	r1, [pc, #216]	@ (800cda8 <Device_Init+0x36c>)
 800ccce:	2002      	movs	r0, #2
 800ccd0:	f006 f9ea 	bl	80130a8 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800ccd4:	4b26      	ldr	r3, [pc, #152]	@ (800cd70 <Device_Init+0x334>)
 800ccd6:	789b      	ldrb	r3, [r3, #2]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d001      	beq.n	800cce0 <Device_Init+0x2a4>
 800ccdc:	4b39      	ldr	r3, [pc, #228]	@ (800cdc4 <Device_Init+0x388>)
 800ccde:	e000      	b.n	800cce2 <Device_Init+0x2a6>
 800cce0:	4b39      	ldr	r3, [pc, #228]	@ (800cdc8 <Device_Init+0x38c>)
 800cce2:	4a3c      	ldr	r2, [pc, #240]	@ (800cdd4 <Device_Init+0x398>)
 800cce4:	4930      	ldr	r1, [pc, #192]	@ (800cda8 <Device_Init+0x36c>)
 800cce6:	2002      	movs	r0, #2
 800cce8:	f006 f9de 	bl	80130a8 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800ccec:	4b20      	ldr	r3, [pc, #128]	@ (800cd70 <Device_Init+0x334>)
 800ccee:	791b      	ldrb	r3, [r3, #4]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <Device_Init+0x2bc>
 800ccf4:	4b33      	ldr	r3, [pc, #204]	@ (800cdc4 <Device_Init+0x388>)
 800ccf6:	e000      	b.n	800ccfa <Device_Init+0x2be>
 800ccf8:	4b33      	ldr	r3, [pc, #204]	@ (800cdc8 <Device_Init+0x38c>)
 800ccfa:	4a37      	ldr	r2, [pc, #220]	@ (800cdd8 <Device_Init+0x39c>)
 800ccfc:	492a      	ldr	r1, [pc, #168]	@ (800cda8 <Device_Init+0x36c>)
 800ccfe:	2002      	movs	r0, #2
 800cd00:	f006 f9d2 	bl	80130a8 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800cd04:	4b1a      	ldr	r3, [pc, #104]	@ (800cd70 <Device_Init+0x334>)
 800cd06:	78db      	ldrb	r3, [r3, #3]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <Device_Init+0x2d4>
 800cd0c:	4b2d      	ldr	r3, [pc, #180]	@ (800cdc4 <Device_Init+0x388>)
 800cd0e:	e000      	b.n	800cd12 <Device_Init+0x2d6>
 800cd10:	4b2d      	ldr	r3, [pc, #180]	@ (800cdc8 <Device_Init+0x38c>)
 800cd12:	4a32      	ldr	r2, [pc, #200]	@ (800cddc <Device_Init+0x3a0>)
 800cd14:	4924      	ldr	r1, [pc, #144]	@ (800cda8 <Device_Init+0x36c>)
 800cd16:	2002      	movs	r0, #2
 800cd18:	f006 f9c6 	bl	80130a8 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800cd1c:	4b14      	ldr	r3, [pc, #80]	@ (800cd70 <Device_Init+0x334>)
 800cd1e:	795b      	ldrb	r3, [r3, #5]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <Device_Init+0x2ec>
 800cd24:	4b27      	ldr	r3, [pc, #156]	@ (800cdc4 <Device_Init+0x388>)
 800cd26:	e000      	b.n	800cd2a <Device_Init+0x2ee>
 800cd28:	4b27      	ldr	r3, [pc, #156]	@ (800cdc8 <Device_Init+0x38c>)
 800cd2a:	4a2d      	ldr	r2, [pc, #180]	@ (800cde0 <Device_Init+0x3a4>)
 800cd2c:	491e      	ldr	r1, [pc, #120]	@ (800cda8 <Device_Init+0x36c>)
 800cd2e:	2002      	movs	r0, #2
 800cd30:	f006 f9ba 	bl	80130a8 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800cd34:	4b0e      	ldr	r3, [pc, #56]	@ (800cd70 <Device_Init+0x334>)
 800cd36:	799b      	ldrb	r3, [r3, #6]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <Device_Init+0x304>
 800cd3c:	4b21      	ldr	r3, [pc, #132]	@ (800cdc4 <Device_Init+0x388>)
 800cd3e:	e000      	b.n	800cd42 <Device_Init+0x306>
 800cd40:	4b21      	ldr	r3, [pc, #132]	@ (800cdc8 <Device_Init+0x38c>)
 800cd42:	4a28      	ldr	r2, [pc, #160]	@ (800cde4 <Device_Init+0x3a8>)
 800cd44:	4918      	ldr	r1, [pc, #96]	@ (800cda8 <Device_Init+0x36c>)
 800cd46:	2002      	movs	r0, #2
 800cd48:	f006 f9ae 	bl	80130a8 <CreateLine>
  ESP_Init(espUart);
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	0018      	movs	r0, r3
 800cd50:	f7f8 f8b4 	bl	8004ebc <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800cd54:	4a24      	ldr	r2, [pc, #144]	@ (800cde8 <Device_Init+0x3ac>)
 800cd56:	4b09      	ldr	r3, [pc, #36]	@ (800cd7c <Device_Init+0x340>)
 800cd58:	0019      	movs	r1, r3
 800cd5a:	2003      	movs	r0, #3
 800cd5c:	f006 f9a4 	bl	80130a8 <CreateLine>
}
 800cd60:	46c0      	nop			@ (mov r8, r8)
 800cd62:	46bd      	mov	sp, r7
 800cd64:	b004      	add	sp, #16
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	0802c278 	.word	0x0802c278
 800cd6c:	0802c2a8 	.word	0x0802c2a8
 800cd70:	20000e34 	.word	0x20000e34
 800cd74:	20000e2c 	.word	0x20000e2c
 800cd78:	0802c2ac 	.word	0x0802c2ac
 800cd7c:	0802c274 	.word	0x0802c274
 800cd80:	0802c2d8 	.word	0x0802c2d8
 800cd84:	0802c30c 	.word	0x0802c30c
 800cd88:	0802c33c 	.word	0x0802c33c
 800cd8c:	0802c358 	.word	0x0802c358
 800cd90:	0802c370 	.word	0x0802c370
 800cd94:	0802c38c 	.word	0x0802c38c
 800cd98:	0802c3a4 	.word	0x0802c3a4
 800cd9c:	0802c3d8 	.word	0x0802c3d8
 800cda0:	50000400 	.word	0x50000400
 800cda4:	0802c40c 	.word	0x0802c40c
 800cda8:	0802c430 	.word	0x0802c430
 800cdac:	0802c434 	.word	0x0802c434
 800cdb0:	0802c460 	.word	0x0802c460
 800cdb4:	0802c48c 	.word	0x0802c48c
 800cdb8:	20000ed0 	.word	0x20000ed0
 800cdbc:	0802c4a4 	.word	0x0802c4a4
 800cdc0:	0802c4f4 	.word	0x0802c4f4
 800cdc4:	0802c518 	.word	0x0802c518
 800cdc8:	0802c51c 	.word	0x0802c51c
 800cdcc:	0802c520 	.word	0x0802c520
 800cdd0:	0802c53c 	.word	0x0802c53c
 800cdd4:	0802c558 	.word	0x0802c558
 800cdd8:	0802c578 	.word	0x0802c578
 800cddc:	0802c598 	.word	0x0802c598
 800cde0:	0802c5b8 	.word	0x0802c5b8
 800cde4:	0802c5d4 	.word	0x0802c5d4
 800cde8:	0802c5f0 	.word	0x0802c5f0

0800cdec <Device_Test>:

void Device_Test(){
 800cdec:	b580      	push	{r7, lr}
 800cdee:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800cdf0:	4b34      	ldr	r3, [pc, #208]	@ (800cec4 <Device_Test+0xd8>)
 800cdf2:	799b      	ldrb	r3, [r3, #6]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	4053      	eors	r3, r2
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d027      	beq.n	800ce4e <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800cdfe:	f000 fbed 	bl	800d5dc <MIC_TestMeasurementDone>
 800ce02:	1e03      	subs	r3, r0, #0
 800ce04:	d011      	beq.n	800ce2a <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800ce06:	4b2f      	ldr	r3, [pc, #188]	@ (800cec4 <Device_Test+0xd8>)
 800ce08:	2201      	movs	r2, #1
 800ce0a:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800ce0c:	4b2e      	ldr	r3, [pc, #184]	@ (800cec8 <Device_Test+0xdc>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800ce12:	f004 fe1f 	bl	8011a54 <Calculate_LED_ON>
 800ce16:	0003      	movs	r3, r0
 800ce18:	0019      	movs	r1, r3
 800ce1a:	23fa      	movs	r3, #250	@ 0xfa
 800ce1c:	011a      	lsls	r2, r3, #4
 800ce1e:	23fa      	movs	r3, #250	@ 0xfa
 800ce20:	011b      	lsls	r3, r3, #4
 800ce22:	0018      	movs	r0, r3
 800ce24:	f004 fe5e 	bl	8011ae4 <SetStatusLED>
 800ce28:	e011      	b.n	800ce4e <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800ce2a:	f003 ff69 	bl	8010d00 <micSettlingComplete>
 800ce2e:	1e03      	subs	r3, r0, #0
 800ce30:	d00d      	beq.n	800ce4e <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800ce32:	4b25      	ldr	r3, [pc, #148]	@ (800cec8 <Device_Test+0xdc>)
 800ce34:	2201      	movs	r2, #1
 800ce36:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800ce38:	f004 fe0c 	bl	8011a54 <Calculate_LED_ON>
 800ce3c:	0003      	movs	r3, r0
 800ce3e:	0018      	movs	r0, r3
 800ce40:	23fa      	movs	r3, #250	@ 0xfa
 800ce42:	011a      	lsls	r2, r3, #4
 800ce44:	23fa      	movs	r3, #250	@ 0xfa
 800ce46:	011b      	lsls	r3, r3, #4
 800ce48:	0019      	movs	r1, r3
 800ce4a:	f004 fe4b 	bl	8011ae4 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800ce4e:	4b1d      	ldr	r3, [pc, #116]	@ (800cec4 <Device_Test+0xd8>)
 800ce50:	79db      	ldrb	r3, [r3, #7]
 800ce52:	2201      	movs	r2, #1
 800ce54:	4053      	eors	r3, r2
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d001      	beq.n	800ce60 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800ce5c:	f7fa f9cc 	bl	80071f8 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800ce60:	4b18      	ldr	r3, [pc, #96]	@ (800cec4 <Device_Test+0xd8>)
 800ce62:	79db      	ldrb	r3, [r3, #7]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d003      	beq.n	800ce70 <Device_Test+0x84>
 800ce68:	4b16      	ldr	r3, [pc, #88]	@ (800cec4 <Device_Test+0xd8>)
 800ce6a:	799b      	ldrb	r3, [r3, #6]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d106      	bne.n	800ce7e <Device_Test+0x92>
 800ce70:	4b16      	ldr	r3, [pc, #88]	@ (800cecc <Device_Test+0xe0>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	0018      	movs	r0, r3
 800ce76:	f006 f8c1 	bl	8012ffc <TimestampIsReached>
 800ce7a:	1e03      	subs	r3, r0, #0
 800ce7c:	d01f      	beq.n	800cebe <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800ce7e:	4b11      	ldr	r3, [pc, #68]	@ (800cec4 <Device_Test+0xd8>)
 800ce80:	79db      	ldrb	r3, [r3, #7]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <Device_Test+0x9e>
 800ce86:	4b12      	ldr	r3, [pc, #72]	@ (800ced0 <Device_Test+0xe4>)
 800ce88:	e000      	b.n	800ce8c <Device_Test+0xa0>
 800ce8a:	4b12      	ldr	r3, [pc, #72]	@ (800ced4 <Device_Test+0xe8>)
 800ce8c:	4a12      	ldr	r2, [pc, #72]	@ (800ced8 <Device_Test+0xec>)
 800ce8e:	4913      	ldr	r1, [pc, #76]	@ (800cedc <Device_Test+0xf0>)
 800ce90:	2002      	movs	r0, #2
 800ce92:	f006 f909 	bl	80130a8 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800ce96:	4b0b      	ldr	r3, [pc, #44]	@ (800cec4 <Device_Test+0xd8>)
 800ce98:	799b      	ldrb	r3, [r3, #6]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <Device_Test+0xb6>
 800ce9e:	4b0c      	ldr	r3, [pc, #48]	@ (800ced0 <Device_Test+0xe4>)
 800cea0:	e000      	b.n	800cea4 <Device_Test+0xb8>
 800cea2:	4b0c      	ldr	r3, [pc, #48]	@ (800ced4 <Device_Test+0xe8>)
 800cea4:	4a0e      	ldr	r2, [pc, #56]	@ (800cee0 <Device_Test+0xf4>)
 800cea6:	490d      	ldr	r1, [pc, #52]	@ (800cedc <Device_Test+0xf0>)
 800cea8:	2002      	movs	r0, #2
 800ceaa:	f006 f8fd 	bl	80130a8 <CreateLine>
    Info("Test completed");
 800ceae:	4a0d      	ldr	r2, [pc, #52]	@ (800cee4 <Device_Test+0xf8>)
 800ceb0:	4b0a      	ldr	r3, [pc, #40]	@ (800cedc <Device_Test+0xf0>)
 800ceb2:	0019      	movs	r1, r3
 800ceb4:	2002      	movs	r0, #2
 800ceb6:	f006 f8f7 	bl	80130a8 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800ceba:	f7ff f8f7 	bl	800c0ac <SetTestDone>
  }
}
 800cebe:	46c0      	nop			@ (mov r8, r8)
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	20000e34 	.word	0x20000e34
 800cec8:	20000e2c 	.word	0x20000e2c
 800cecc:	20000e24 	.word	0x20000e24
 800ced0:	0802c614 	.word	0x0802c614
 800ced4:	0802c61c 	.word	0x0802c61c
 800ced8:	0802c624 	.word	0x0802c624
 800cedc:	0802c430 	.word	0x0802c430
 800cee0:	0802c638 	.word	0x0802c638
 800cee4:	0802c64c 	.word	0x0802c64c

0800cee8 <AllDevicesReady>:

bool AllDevicesReady() {
 800cee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceea:	46de      	mov	lr, fp
 800ceec:	4657      	mov	r7, sl
 800ceee:	464e      	mov	r6, r9
 800cef0:	4645      	mov	r5, r8
 800cef2:	b5e0      	push	{r5, r6, r7, lr}
 800cef4:	b08b      	sub	sp, #44	@ 0x2c
 800cef6:	af08      	add	r7, sp, #32
  if (TimestampIsReached(deviceTimeOut)) {
 800cef8:	4b6d      	ldr	r3, [pc, #436]	@ (800d0b0 <AllDevicesReady+0x1c8>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	0018      	movs	r0, r3
 800cefe:	f006 f87d 	bl	8012ffc <TimestampIsReached>
 800cf02:	1e03      	subs	r3, r0, #0
 800cf04:	d100      	bne.n	800cf08 <AllDevicesReady+0x20>
 800cf06:	e0c8      	b.n	800d09a <AllDevicesReady+0x1b2>
    if (!sensorsdisablereq) {
 800cf08:	4b6a      	ldr	r3, [pc, #424]	@ (800d0b4 <AllDevicesReady+0x1cc>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	4053      	eors	r3, r2
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d008      	beq.n	800cf28 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800cf16:	4a68      	ldr	r2, [pc, #416]	@ (800d0b8 <AllDevicesReady+0x1d0>)
 800cf18:	4b68      	ldr	r3, [pc, #416]	@ (800d0bc <AllDevicesReady+0x1d4>)
 800cf1a:	0019      	movs	r1, r3
 800cf1c:	2003      	movs	r0, #3
 800cf1e:	f006 f8c3 	bl	80130a8 <CreateLine>
      sensorsdisablereq = true;
 800cf22:	4b64      	ldr	r3, [pc, #400]	@ (800d0b4 <AllDevicesReady+0x1cc>)
 800cf24:	2201      	movs	r2, #1
 800cf26:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800cf28:	4b65      	ldr	r3, [pc, #404]	@ (800d0c0 <AllDevicesReady+0x1d8>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2b06      	cmp	r3, #6
 800cf2e:	d102      	bne.n	800cf36 <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800cf30:	4b64      	ldr	r3, [pc, #400]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cf32:	2200      	movs	r2, #0
 800cf34:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800cf36:	4b64      	ldr	r3, [pc, #400]	@ (800d0c8 <AllDevicesReady+0x1e0>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b05      	cmp	r3, #5
 800cf3c:	d006      	beq.n	800cf4c <AllDevicesReady+0x64>
 800cf3e:	4b63      	ldr	r3, [pc, #396]	@ (800d0cc <AllDevicesReady+0x1e4>)
 800cf40:	789b      	ldrb	r3, [r3, #2]
 800cf42:	2201      	movs	r2, #1
 800cf44:	4053      	eors	r3, r2
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d002      	beq.n	800cf52 <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800cf4c:	4b5d      	ldr	r3, [pc, #372]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800cf52:	4b5f      	ldr	r3, [pc, #380]	@ (800d0d0 <AllDevicesReady+0x1e8>)
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	2b08      	cmp	r3, #8
 800cf58:	d006      	beq.n	800cf68 <AllDevicesReady+0x80>
 800cf5a:	4b5c      	ldr	r3, [pc, #368]	@ (800d0cc <AllDevicesReady+0x1e4>)
 800cf5c:	791b      	ldrb	r3, [r3, #4]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	4053      	eors	r3, r2
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800cf68:	4b56      	ldr	r3, [pc, #344]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800cf6e:	4b59      	ldr	r3, [pc, #356]	@ (800d0d4 <AllDevicesReady+0x1ec>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2b08      	cmp	r3, #8
 800cf74:	d006      	beq.n	800cf84 <AllDevicesReady+0x9c>
 800cf76:	4b55      	ldr	r3, [pc, #340]	@ (800d0cc <AllDevicesReady+0x1e4>)
 800cf78:	78db      	ldrb	r3, [r3, #3]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	4053      	eors	r3, r2
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800cf84:	4b4f      	ldr	r3, [pc, #316]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cf86:	2200      	movs	r2, #0
 800cf88:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800cf8a:	4b53      	ldr	r3, [pc, #332]	@ (800d0d8 <AllDevicesReady+0x1f0>)
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b07      	cmp	r3, #7
 800cf90:	d006      	beq.n	800cfa0 <AllDevicesReady+0xb8>
 800cf92:	4b4e      	ldr	r3, [pc, #312]	@ (800d0cc <AllDevicesReady+0x1e4>)
 800cf94:	7a1b      	ldrb	r3, [r3, #8]
 800cf96:	2201      	movs	r2, #1
 800cf98:	4053      	eors	r3, r2
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d002      	beq.n	800cfa6 <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800cfa0:	4b48      	ldr	r3, [pc, #288]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800cfa6:	4b4d      	ldr	r3, [pc, #308]	@ (800d0dc <AllDevicesReady+0x1f4>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d003      	beq.n	800cfb6 <AllDevicesReady+0xce>
 800cfae:	4b4b      	ldr	r3, [pc, #300]	@ (800d0dc <AllDevicesReady+0x1f4>)
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	d102      	bne.n	800cfbc <AllDevicesReady+0xd4>
      Sensor.PM_measurementEnabled = false;
 800cfb6:	4b43      	ldr	r3, [pc, #268]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800cfbc:	4b48      	ldr	r3, [pc, #288]	@ (800d0e0 <AllDevicesReady+0x1f8>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	2b03      	cmp	r3, #3
 800cfc2:	d102      	bne.n	800cfca <AllDevicesReady+0xe2>
      Sensor.MIC_measurementEnabled = false;
 800cfc4:	4b3f      	ldr	r3, [pc, #252]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800cfca:	4b46      	ldr	r3, [pc, #280]	@ (800d0e4 <AllDevicesReady+0x1fc>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2b09      	cmp	r3, #9
 800cfd0:	d003      	beq.n	800cfda <AllDevicesReady+0xf2>
 800cfd2:	4b44      	ldr	r3, [pc, #272]	@ (800d0e4 <AllDevicesReady+0x1fc>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	d15f      	bne.n	800d09a <AllDevicesReady+0x1b2>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800cfda:	4b3a      	ldr	r3, [pc, #232]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cfdc:	781a      	ldrb	r2, [r3, #0]
 800cfde:	4b39      	ldr	r3, [pc, #228]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cfe0:	785b      	ldrb	r3, [r3, #1]
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	4b37      	ldr	r3, [pc, #220]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cfe8:	791b      	ldrb	r3, [r3, #4]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	4b35      	ldr	r3, [pc, #212]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cff0:	795b      	ldrb	r3, [r3, #5]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800cff6:	4b33      	ldr	r3, [pc, #204]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800cff8:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800cffa:	4313      	orrs	r3, r2
 800cffc:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800cffe:	4b31      	ldr	r3, [pc, #196]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800d000:	789b      	ldrb	r3, [r3, #2]
 800d002:	4313      	orrs	r3, r2
 800d004:	b2da      	uxtb	r2, r3
 800d006:	4b2f      	ldr	r3, [pc, #188]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800d008:	78db      	ldrb	r3, [r3, #3]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	1e5a      	subs	r2, r3, #1
 800d010:	4193      	sbcs	r3, r2
 800d012:	b2db      	uxtb	r3, r3
 800d014:	2201      	movs	r2, #1
 800d016:	4053      	eors	r3, r2
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d01c:	1dfb      	adds	r3, r7, #7
 800d01e:	701a      	strb	r2, [r3, #0]
 800d020:	781a      	ldrb	r2, [r3, #0]
 800d022:	2101      	movs	r1, #1
 800d024:	400a      	ands	r2, r1
 800d026:	701a      	strb	r2, [r3, #0]
      if (!status) {
 800d028:	1dfb      	adds	r3, r7, #7
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	2201      	movs	r2, #1
 800d02e:	4053      	eors	r3, r2
 800d030:	b2db      	uxtb	r3, r3
 800d032:	2b00      	cmp	r3, #0
 800d034:	d028      	beq.n	800d088 <AllDevicesReady+0x1a0>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800d036:	4b23      	ldr	r3, [pc, #140]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	469b      	mov	fp, r3
 800d03c:	4b21      	ldr	r3, [pc, #132]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800d03e:	791b      	ldrb	r3, [r3, #4]
 800d040:	001c      	movs	r4, r3
 800d042:	4b20      	ldr	r3, [pc, #128]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800d044:	795b      	ldrb	r3, [r3, #5]
 800d046:	001d      	movs	r5, r3
 800d048:	4b1e      	ldr	r3, [pc, #120]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800d04a:	799b      	ldrb	r3, [r3, #6]
 800d04c:	001e      	movs	r6, r3
 800d04e:	4b1d      	ldr	r3, [pc, #116]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800d050:	785b      	ldrb	r3, [r3, #1]
 800d052:	4698      	mov	r8, r3
 800d054:	4b1b      	ldr	r3, [pc, #108]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800d056:	789b      	ldrb	r3, [r3, #2]
 800d058:	4699      	mov	r9, r3
 800d05a:	4b1a      	ldr	r3, [pc, #104]	@ (800d0c4 <AllDevicesReady+0x1dc>)
 800d05c:	78db      	ldrb	r3, [r3, #3]
 800d05e:	469a      	mov	sl, r3
 800d060:	f000 f8d8 	bl	800d214 <getSensorLock>
 800d064:	0003      	movs	r3, r0
 800d066:	4a20      	ldr	r2, [pc, #128]	@ (800d0e8 <AllDevicesReady+0x200>)
 800d068:	4914      	ldr	r1, [pc, #80]	@ (800d0bc <AllDevicesReady+0x1d4>)
 800d06a:	9306      	str	r3, [sp, #24]
 800d06c:	4653      	mov	r3, sl
 800d06e:	9305      	str	r3, [sp, #20]
 800d070:	464b      	mov	r3, r9
 800d072:	9304      	str	r3, [sp, #16]
 800d074:	4643      	mov	r3, r8
 800d076:	9303      	str	r3, [sp, #12]
 800d078:	9602      	str	r6, [sp, #8]
 800d07a:	9501      	str	r5, [sp, #4]
 800d07c:	9400      	str	r4, [sp, #0]
 800d07e:	465b      	mov	r3, fp
 800d080:	2003      	movs	r0, #3
 800d082:	f006 f811 	bl	80130a8 <CreateLine>
 800d086:	e005      	b.n	800d094 <AllDevicesReady+0x1ac>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
      }
      else {
        Debug("All sensors in wait");
 800d088:	4a18      	ldr	r2, [pc, #96]	@ (800d0ec <AllDevicesReady+0x204>)
 800d08a:	4b0c      	ldr	r3, [pc, #48]	@ (800d0bc <AllDevicesReady+0x1d4>)
 800d08c:	0019      	movs	r1, r3
 800d08e:	2003      	movs	r0, #3
 800d090:	f006 f80a 	bl	80130a8 <CreateLine>
      }
      return status;
 800d094:	1dfb      	adds	r3, r7, #7
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	e000      	b.n	800d09c <AllDevicesReady+0x1b4>
    }
  }
  return false;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	0018      	movs	r0, r3
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	b003      	add	sp, #12
 800d0a2:	bcf0      	pop	{r4, r5, r6, r7}
 800d0a4:	46bb      	mov	fp, r7
 800d0a6:	46b2      	mov	sl, r6
 800d0a8:	46a9      	mov	r9, r5
 800d0aa:	46a0      	mov	r8, r4
 800d0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ae:	46c0      	nop			@ (mov r8, r8)
 800d0b0:	20000e24 	.word	0x20000e24
 800d0b4:	20000e43 	.word	0x20000e43
 800d0b8:	0802c65c 	.word	0x0802c65c
 800d0bc:	0802c274 	.word	0x0802c274
 800d0c0:	20000e3f 	.word	0x20000e3f
 800d0c4:	20000e2c 	.word	0x20000e2c
 800d0c8:	20000e40 	.word	0x20000e40
 800d0cc:	20000e34 	.word	0x20000e34
 800d0d0:	20000e41 	.word	0x20000e41
 800d0d4:	20000e42 	.word	0x20000e42
 800d0d8:	20000e3e 	.word	0x20000e3e
 800d0dc:	2000009d 	.word	0x2000009d
 800d0e0:	20000e10 	.word	0x20000e10
 800d0e4:	20000e11 	.word	0x20000e11
 800d0e8:	0802c67c 	.word	0x0802c67c
 800d0ec:	0802c6e0 	.word	0x0802c6e0

0800d0f0 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800d0f4:	4b23      	ldr	r3, [pc, #140]	@ (800d184 <EnabledConnectedDevices+0x94>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800d0fc:	4b22      	ldr	r3, [pc, #136]	@ (800d188 <EnabledConnectedDevices+0x98>)
 800d0fe:	2201      	movs	r2, #1
 800d100:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800d102:	4b20      	ldr	r3, [pc, #128]	@ (800d184 <EnabledConnectedDevices+0x94>)
 800d104:	789b      	ldrb	r3, [r3, #2]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d002      	beq.n	800d110 <EnabledConnectedDevices+0x20>
    Sensor.AHT_measurementEnabled = true;
 800d10a:	4b1f      	ldr	r3, [pc, #124]	@ (800d188 <EnabledConnectedDevices+0x98>)
 800d10c:	2201      	movs	r2, #1
 800d10e:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800d110:	4b1c      	ldr	r3, [pc, #112]	@ (800d184 <EnabledConnectedDevices+0x94>)
 800d112:	791b      	ldrb	r3, [r3, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <EnabledConnectedDevices+0x2e>
    Sensor.BMP_measurementEnabled = true;
 800d118:	4b1b      	ldr	r3, [pc, #108]	@ (800d188 <EnabledConnectedDevices+0x98>)
 800d11a:	2201      	movs	r2, #1
 800d11c:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800d11e:	4b19      	ldr	r3, [pc, #100]	@ (800d184 <EnabledConnectedDevices+0x94>)
 800d120:	78db      	ldrb	r3, [r3, #3]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d002      	beq.n	800d12c <EnabledConnectedDevices+0x3c>
    Sensor.ENS_measurementEnabled = true;
 800d126:	4b18      	ldr	r3, [pc, #96]	@ (800d188 <EnabledConnectedDevices+0x98>)
 800d128:	2201      	movs	r2, #1
 800d12a:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800d12c:	4b15      	ldr	r3, [pc, #84]	@ (800d184 <EnabledConnectedDevices+0x94>)
 800d12e:	785b      	ldrb	r3, [r3, #1]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d006      	beq.n	800d142 <EnabledConnectedDevices+0x52>
 800d134:	4b13      	ldr	r3, [pc, #76]	@ (800d184 <EnabledConnectedDevices+0x94>)
 800d136:	7a1b      	ldrb	r3, [r3, #8]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d002      	beq.n	800d142 <EnabledConnectedDevices+0x52>
    Sensor.VOC_measurementEnabled = true;
 800d13c:	4b12      	ldr	r3, [pc, #72]	@ (800d188 <EnabledConnectedDevices+0x98>)
 800d13e:	2201      	movs	r2, #1
 800d140:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800d142:	4b10      	ldr	r3, [pc, #64]	@ (800d184 <EnabledConnectedDevices+0x94>)
 800d144:	795b      	ldrb	r3, [r3, #5]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d002      	beq.n	800d150 <EnabledConnectedDevices+0x60>
    Sensor.PM_measurementEnabled = true;
 800d14a:	4b0f      	ldr	r3, [pc, #60]	@ (800d188 <EnabledConnectedDevices+0x98>)
 800d14c:	2201      	movs	r2, #1
 800d14e:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800d150:	4b0c      	ldr	r3, [pc, #48]	@ (800d184 <EnabledConnectedDevices+0x94>)
 800d152:	799b      	ldrb	r3, [r3, #6]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <EnabledConnectedDevices+0x6e>
    Sensor.MIC_measurementEnabled = true;
 800d158:	4b0b      	ldr	r3, [pc, #44]	@ (800d188 <EnabledConnectedDevices+0x98>)
 800d15a:	2201      	movs	r2, #1
 800d15c:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800d15e:	f006 fce3 	bl	8013b28 <HAL_GetTick>
 800d162:	0003      	movs	r3, r0
 800d164:	4a09      	ldr	r2, [pc, #36]	@ (800d18c <EnabledConnectedDevices+0x9c>)
 800d166:	189a      	adds	r2, r3, r2
 800d168:	4b09      	ldr	r3, [pc, #36]	@ (800d190 <EnabledConnectedDevices+0xa0>)
 800d16a:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800d16c:	4b09      	ldr	r3, [pc, #36]	@ (800d194 <EnabledConnectedDevices+0xa4>)
 800d16e:	2200      	movs	r2, #0
 800d170:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800d172:	4a09      	ldr	r2, [pc, #36]	@ (800d198 <EnabledConnectedDevices+0xa8>)
 800d174:	4b09      	ldr	r3, [pc, #36]	@ (800d19c <EnabledConnectedDevices+0xac>)
 800d176:	0019      	movs	r1, r3
 800d178:	2003      	movs	r0, #3
 800d17a:	f005 ff95 	bl	80130a8 <CreateLine>
}
 800d17e:	46c0      	nop			@ (mov r8, r8)
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	20000e34 	.word	0x20000e34
 800d188:	20000e2c 	.word	0x20000e2c
 800d18c:	00124f80 	.word	0x00124f80
 800d190:	20000e24 	.word	0x20000e24
 800d194:	20000e43 	.word	0x20000e43
 800d198:	0802c6f4 	.word	0x0802c6f4
 800d19c:	0802c274 	.word	0x0802c274

0800d1a0 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800d1a4:	4b0e      	ldr	r3, [pc, #56]	@ (800d1e0 <DisableConnectedDevices+0x40>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800d1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800d1e0 <DisableConnectedDevices+0x40>)
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800d1b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d1e0 <DisableConnectedDevices+0x40>)
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800d1b6:	4b0a      	ldr	r3, [pc, #40]	@ (800d1e0 <DisableConnectedDevices+0x40>)
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800d1bc:	4b08      	ldr	r3, [pc, #32]	@ (800d1e0 <DisableConnectedDevices+0x40>)
 800d1be:	2200      	movs	r2, #0
 800d1c0:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800d1c2:	4b07      	ldr	r3, [pc, #28]	@ (800d1e0 <DisableConnectedDevices+0x40>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800d1c8:	4b05      	ldr	r3, [pc, #20]	@ (800d1e0 <DisableConnectedDevices+0x40>)
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800d1ce:	4a05      	ldr	r2, [pc, #20]	@ (800d1e4 <DisableConnectedDevices+0x44>)
 800d1d0:	4b05      	ldr	r3, [pc, #20]	@ (800d1e8 <DisableConnectedDevices+0x48>)
 800d1d2:	0019      	movs	r1, r3
 800d1d4:	2003      	movs	r0, #3
 800d1d6:	f005 ff67 	bl	80130a8 <CreateLine>
}
 800d1da:	46c0      	nop			@ (mov r8, r8)
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	20000e2c 	.word	0x20000e2c
 800d1e4:	0802c704 	.word	0x0802c704
 800d1e8:	0802c274 	.word	0x0802c274

0800d1ec <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	0002      	movs	r2, r0
 800d1f4:	1dfb      	adds	r3, r7, #7
 800d1f6:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800d1f8:	4b05      	ldr	r3, [pc, #20]	@ (800d210 <setSensorLock+0x24>)
 800d1fa:	1dfa      	adds	r2, r7, #7
 800d1fc:	7812      	ldrb	r2, [r2, #0]
 800d1fe:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800d200:	200a      	movs	r0, #10
 800d202:	f006 fc9b 	bl	8013b3c <HAL_Delay>
}
 800d206:	46c0      	nop			@ (mov r8, r8)
 800d208:	46bd      	mov	sp, r7
 800d20a:	b002      	add	sp, #8
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	46c0      	nop			@ (mov r8, r8)
 800d210:	20000e3d 	.word	0x20000e3d

0800d214 <getSensorLock>:

uint8_t getSensorLock() {
 800d214:	b580      	push	{r7, lr}
 800d216:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800d218:	4b02      	ldr	r3, [pc, #8]	@ (800d224 <getSensorLock+0x10>)
 800d21a:	781b      	ldrb	r3, [r3, #0]
}
 800d21c:	0018      	movs	r0, r3
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	46c0      	nop			@ (mov r8, r8)
 800d224:	20000e3d 	.word	0x20000e3d

0800d228 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800d228:	b580      	push	{r7, lr}
 800d22a:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800d22c:	4b1a      	ldr	r3, [pc, #104]	@ (800d298 <UpkeepI2Csensors+0x70>)
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d005      	beq.n	800d240 <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800d234:	f006 faf6 	bl	8013824 <HIDS_Upkeep>
 800d238:	0003      	movs	r3, r0
 800d23a:	001a      	movs	r2, r3
 800d23c:	4b17      	ldr	r3, [pc, #92]	@ (800d29c <UpkeepI2Csensors+0x74>)
 800d23e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800d240:	4b15      	ldr	r3, [pc, #84]	@ (800d298 <UpkeepI2Csensors+0x70>)
 800d242:	785b      	ldrb	r3, [r3, #1]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d005      	beq.n	800d254 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800d248:	f003 fb54 	bl	80108f4 <SGP_Upkeep>
 800d24c:	0003      	movs	r3, r0
 800d24e:	001a      	movs	r2, r3
 800d250:	4b13      	ldr	r3, [pc, #76]	@ (800d2a0 <UpkeepI2Csensors+0x78>)
 800d252:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800d254:	4b10      	ldr	r3, [pc, #64]	@ (800d298 <UpkeepI2Csensors+0x70>)
 800d256:	791b      	ldrb	r3, [r3, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d005      	beq.n	800d268 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800d25c:	f7fd fa8c 	bl	800a778 <AHT_Upkeep>
 800d260:	0003      	movs	r3, r0
 800d262:	001a      	movs	r2, r3
 800d264:	4b0f      	ldr	r3, [pc, #60]	@ (800d2a4 <UpkeepI2Csensors+0x7c>)
 800d266:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800d268:	4b0b      	ldr	r3, [pc, #44]	@ (800d298 <UpkeepI2Csensors+0x70>)
 800d26a:	795b      	ldrb	r3, [r3, #5]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d005      	beq.n	800d27c <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800d270:	f7fe f80c 	bl	800b28c <BMP_Upkeep>
 800d274:	0003      	movs	r3, r0
 800d276:	001a      	movs	r2, r3
 800d278:	4b0b      	ldr	r3, [pc, #44]	@ (800d2a8 <UpkeepI2Csensors+0x80>)
 800d27a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800d27c:	4b06      	ldr	r3, [pc, #24]	@ (800d298 <UpkeepI2Csensors+0x70>)
 800d27e:	799b      	ldrb	r3, [r3, #6]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d005      	beq.n	800d290 <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800d284:	f7f7 f8e8 	bl	8004458 <ENS_Upkeep>
 800d288:	0003      	movs	r3, r0
 800d28a:	001a      	movs	r2, r3
 800d28c:	4b07      	ldr	r3, [pc, #28]	@ (800d2ac <UpkeepI2Csensors+0x84>)
 800d28e:	701a      	strb	r2, [r3, #0]
  }
}
 800d290:	46c0      	nop			@ (mov r8, r8)
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	46c0      	nop			@ (mov r8, r8)
 800d298:	20000e2c 	.word	0x20000e2c
 800d29c:	20000e3f 	.word	0x20000e3f
 800d2a0:	20000e3e 	.word	0x20000e3e
 800d2a4:	20000e40 	.word	0x20000e40
 800d2a8:	20000e41 	.word	0x20000e41
 800d2ac:	20000e42 	.word	0x20000e42

0800d2b0 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800d2b4:	4b02      	ldr	r3, [pc, #8]	@ (800d2c0 <ResetdBAmax+0x10>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	601a      	str	r2, [r3, #0]
}
 800d2ba:	46c0      	nop			@ (mov r8, r8)
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	20000e88 	.word	0x20000e88

0800d2c4 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800d2cc:	f006 fc2c 	bl	8013b28 <HAL_GetTick>
 800d2d0:	0002      	movs	r2, r0
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	18d2      	adds	r2, r2, r3
 800d2d6:	4b03      	ldr	r3, [pc, #12]	@ (800d2e4 <setMICTimeStamp+0x20>)
 800d2d8:	601a      	str	r2, [r3, #0]
}
 800d2da:	46c0      	nop			@ (mov r8, r8)
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	b002      	add	sp, #8
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	46c0      	nop			@ (mov r8, r8)
 800d2e4:	20000e90 	.word	0x20000e90

0800d2e8 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	af00      	add	r7, sp, #0
  counter = 0;
 800d2ec:	4b05      	ldr	r3, [pc, #20]	@ (800d304 <ResetDBACalculator+0x1c>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800d2f2:	4b05      	ldr	r3, [pc, #20]	@ (800d308 <ResetDBACalculator+0x20>)
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800d2f8:	4b04      	ldr	r3, [pc, #16]	@ (800d30c <ResetDBACalculator+0x24>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	701a      	strb	r2, [r3, #0]
}
 800d2fe:	46c0      	nop			@ (mov r8, r8)
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	20000e8c 	.word	0x20000e8c
 800d308:	2000009c 	.word	0x2000009c
 800d30c:	20000e8d 	.word	0x20000e8d

0800d310 <MIC_Print>:

void MIC_Print(void) {
 800d310:	b5b0      	push	{r4, r5, r7, lr}
 800d312:	b08a      	sub	sp, #40	@ 0x28
 800d314:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800d316:	4b9f      	ldr	r3, [pc, #636]	@ (800d594 <MIC_Print+0x284>)
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	4b9f      	ldr	r3, [pc, #636]	@ (800d598 <MIC_Print+0x288>)
 800d31c:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800d31e:	4b9f      	ldr	r3, [pc, #636]	@ (800d59c <MIC_Print+0x28c>)
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	001a      	movs	r2, r3
 800d324:	4b9c      	ldr	r3, [pc, #624]	@ (800d598 <MIC_Print+0x288>)
 800d326:	6819      	ldr	r1, [r3, #0]
 800d328:	4b9d      	ldr	r3, [pc, #628]	@ (800d5a0 <MIC_Print+0x290>)
 800d32a:	0092      	lsls	r2, r2, #2
 800d32c:	50d1      	str	r1, [r2, r3]
  counter++;
 800d32e:	4b9b      	ldr	r3, [pc, #620]	@ (800d59c <MIC_Print+0x28c>)
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	3301      	adds	r3, #1
 800d334:	b2da      	uxtb	r2, r3
 800d336:	4b99      	ldr	r3, [pc, #612]	@ (800d59c <MIC_Print+0x28c>)
 800d338:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800d33a:	4b98      	ldr	r3, [pc, #608]	@ (800d59c <MIC_Print+0x28c>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	2b09      	cmp	r3, #9
 800d340:	d80b      	bhi.n	800d35a <MIC_Print+0x4a>
 800d342:	4b98      	ldr	r3, [pc, #608]	@ (800d5a4 <MIC_Print+0x294>)
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	2201      	movs	r2, #1
 800d348:	4053      	eors	r3, r2
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d004      	beq.n	800d35a <MIC_Print+0x4a>
    denominator = counter;
 800d350:	4b92      	ldr	r3, [pc, #584]	@ (800d59c <MIC_Print+0x28c>)
 800d352:	781a      	ldrb	r2, [r3, #0]
 800d354:	4b94      	ldr	r3, [pc, #592]	@ (800d5a8 <MIC_Print+0x298>)
 800d356:	701a      	strb	r2, [r3, #0]
 800d358:	e005      	b.n	800d366 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800d35a:	4b93      	ldr	r3, [pc, #588]	@ (800d5a8 <MIC_Print+0x298>)
 800d35c:	220a      	movs	r2, #10
 800d35e:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800d360:	4b90      	ldr	r3, [pc, #576]	@ (800d5a4 <MIC_Print+0x294>)
 800d362:	2201      	movs	r2, #1
 800d364:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800d366:	4b91      	ldr	r3, [pc, #580]	@ (800d5ac <MIC_Print+0x29c>)
 800d368:	2200      	movs	r2, #0
 800d36a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800d36c:	230f      	movs	r3, #15
 800d36e:	18fb      	adds	r3, r7, r3
 800d370:	2200      	movs	r2, #0
 800d372:	701a      	strb	r2, [r3, #0]
 800d374:	e042      	b.n	800d3fc <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800d376:	240f      	movs	r4, #15
 800d378:	193b      	adds	r3, r7, r4
 800d37a:	781a      	ldrb	r2, [r3, #0]
 800d37c:	4b88      	ldr	r3, [pc, #544]	@ (800d5a0 <MIC_Print+0x290>)
 800d37e:	0092      	lsls	r2, r2, #2
 800d380:	58d2      	ldr	r2, [r2, r3]
 800d382:	4b8a      	ldr	r3, [pc, #552]	@ (800d5ac <MIC_Print+0x29c>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	1c19      	adds	r1, r3, #0
 800d388:	1c10      	adds	r0, r2, #0
 800d38a:	f7f3 fa99 	bl	80008c0 <__aeabi_fadd>
 800d38e:	1c03      	adds	r3, r0, #0
 800d390:	1c1a      	adds	r2, r3, #0
 800d392:	4b86      	ldr	r3, [pc, #536]	@ (800d5ac <MIC_Print+0x29c>)
 800d394:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800d396:	193b      	adds	r3, r7, r4
 800d398:	781a      	ldrb	r2, [r3, #0]
 800d39a:	4b81      	ldr	r3, [pc, #516]	@ (800d5a0 <MIC_Print+0x290>)
 800d39c:	0092      	lsls	r2, r2, #2
 800d39e:	58d2      	ldr	r2, [r2, r3]
 800d3a0:	4b83      	ldr	r3, [pc, #524]	@ (800d5b0 <MIC_Print+0x2a0>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	1c19      	adds	r1, r3, #0
 800d3a6:	1c10      	adds	r0, r2, #0
 800d3a8:	f7f3 f8d6 	bl	8000558 <__aeabi_fcmpgt>
 800d3ac:	1e03      	subs	r3, r0, #0
 800d3ae:	d006      	beq.n	800d3be <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800d3b0:	193b      	adds	r3, r7, r4
 800d3b2:	781a      	ldrb	r2, [r3, #0]
 800d3b4:	4b7a      	ldr	r3, [pc, #488]	@ (800d5a0 <MIC_Print+0x290>)
 800d3b6:	0092      	lsls	r2, r2, #2
 800d3b8:	58d2      	ldr	r2, [r2, r3]
 800d3ba:	4b7d      	ldr	r3, [pc, #500]	@ (800d5b0 <MIC_Print+0x2a0>)
 800d3bc:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800d3be:	4b7b      	ldr	r3, [pc, #492]	@ (800d5ac <MIC_Print+0x29c>)
 800d3c0:	681c      	ldr	r4, [r3, #0]
 800d3c2:	4b79      	ldr	r3, [pc, #484]	@ (800d5a8 <MIC_Print+0x298>)
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	0018      	movs	r0, r3
 800d3c8:	f7f4 fa7e 	bl	80018c8 <__aeabi_ui2f>
 800d3cc:	1c03      	adds	r3, r0, #0
 800d3ce:	1c19      	adds	r1, r3, #0
 800d3d0:	1c20      	adds	r0, r4, #0
 800d3d2:	f7f3 fc67 	bl	8000ca4 <__aeabi_fdiv>
 800d3d6:	1c03      	adds	r3, r0, #0
 800d3d8:	1c1a      	adds	r2, r3, #0
 800d3da:	4b76      	ldr	r3, [pc, #472]	@ (800d5b4 <MIC_Print+0x2a4>)
 800d3dc:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800d3de:	4b6e      	ldr	r3, [pc, #440]	@ (800d598 <MIC_Print+0x288>)
 800d3e0:	6818      	ldr	r0, [r3, #0]
 800d3e2:	4b73      	ldr	r3, [pc, #460]	@ (800d5b0 <MIC_Print+0x2a0>)
 800d3e4:	6819      	ldr	r1, [r3, #0]
 800d3e6:	4b73      	ldr	r3, [pc, #460]	@ (800d5b4 <MIC_Print+0x2a4>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	1c1a      	adds	r2, r3, #0
 800d3ec:	f7f7 fbf0 	bl	8004bd0 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800d3f0:	210f      	movs	r1, #15
 800d3f2:	187b      	adds	r3, r7, r1
 800d3f4:	781a      	ldrb	r2, [r3, #0]
 800d3f6:	187b      	adds	r3, r7, r1
 800d3f8:	3201      	adds	r2, #1
 800d3fa:	701a      	strb	r2, [r3, #0]
 800d3fc:	4b6a      	ldr	r3, [pc, #424]	@ (800d5a8 <MIC_Print+0x298>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	220f      	movs	r2, #15
 800d402:	18ba      	adds	r2, r7, r2
 800d404:	7812      	ldrb	r2, [r2, #0]
 800d406:	429a      	cmp	r2, r3
 800d408:	d3b5      	bcc.n	800d376 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800d40a:	4b63      	ldr	r3, [pc, #396]	@ (800d598 <MIC_Print+0x288>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	1c18      	adds	r0, r3, #0
 800d410:	f7f6 fa40 	bl	8003894 <__aeabi_f2d>
 800d414:	6038      	str	r0, [r7, #0]
 800d416:	6079      	str	r1, [r7, #4]
 800d418:	4b65      	ldr	r3, [pc, #404]	@ (800d5b0 <MIC_Print+0x2a0>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	1c18      	adds	r0, r3, #0
 800d41e:	f7f6 fa39 	bl	8003894 <__aeabi_f2d>
 800d422:	0004      	movs	r4, r0
 800d424:	000d      	movs	r5, r1
 800d426:	4b63      	ldr	r3, [pc, #396]	@ (800d5b4 <MIC_Print+0x2a4>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	1c18      	adds	r0, r3, #0
 800d42c:	f7f6 fa32 	bl	8003894 <__aeabi_f2d>
 800d430:	0002      	movs	r2, r0
 800d432:	000b      	movs	r3, r1
 800d434:	4960      	ldr	r1, [pc, #384]	@ (800d5b8 <MIC_Print+0x2a8>)
 800d436:	9204      	str	r2, [sp, #16]
 800d438:	9305      	str	r3, [sp, #20]
 800d43a:	9402      	str	r4, [sp, #8]
 800d43c:	9503      	str	r5, [sp, #12]
 800d43e:	4b5f      	ldr	r3, [pc, #380]	@ (800d5bc <MIC_Print+0x2ac>)
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	683a      	ldr	r2, [r7, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	0008      	movs	r0, r1
 800d448:	f017 ff2a 	bl	80252a0 <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800d44c:	4b53      	ldr	r3, [pc, #332]	@ (800d59c <MIC_Print+0x28c>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	2b0a      	cmp	r3, #10
 800d452:	d902      	bls.n	800d45a <MIC_Print+0x14a>
    counter = 0;
 800d454:	4b51      	ldr	r3, [pc, #324]	@ (800d59c <MIC_Print+0x28c>)
 800d456:	2200      	movs	r2, #0
 800d458:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800d45a:	4b4f      	ldr	r3, [pc, #316]	@ (800d598 <MIC_Print+0x288>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4958      	ldr	r1, [pc, #352]	@ (800d5c0 <MIC_Print+0x2b0>)
 800d460:	1c18      	adds	r0, r3, #0
 800d462:	f7f3 f883 	bl	800056c <__aeabi_fcmpge>
 800d466:	1e03      	subs	r3, r0, #0
 800d468:	d004      	beq.n	800d474 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800d46a:	2201      	movs	r2, #1
 800d46c:	2101      	movs	r1, #1
 800d46e:	2001      	movs	r0, #1
 800d470:	f004 fb6c 	bl	8011b4c <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800d474:	4b48      	ldr	r3, [pc, #288]	@ (800d598 <MIC_Print+0x288>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4952      	ldr	r1, [pc, #328]	@ (800d5c4 <MIC_Print+0x2b4>)
 800d47a:	1c18      	adds	r0, r3, #0
 800d47c:	f7f3 f876 	bl	800056c <__aeabi_fcmpge>
 800d480:	1e03      	subs	r3, r0, #0
 800d482:	d00c      	beq.n	800d49e <MIC_Print+0x18e>
 800d484:	4b44      	ldr	r3, [pc, #272]	@ (800d598 <MIC_Print+0x288>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	494d      	ldr	r1, [pc, #308]	@ (800d5c0 <MIC_Print+0x2b0>)
 800d48a:	1c18      	adds	r0, r3, #0
 800d48c:	f7f3 f850 	bl	8000530 <__aeabi_fcmplt>
 800d490:	1e03      	subs	r3, r0, #0
 800d492:	d004      	beq.n	800d49e <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800d494:	2200      	movs	r2, #0
 800d496:	2100      	movs	r1, #0
 800d498:	2001      	movs	r0, #1
 800d49a:	f004 fb57 	bl	8011b4c <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800d49e:	4b3e      	ldr	r3, [pc, #248]	@ (800d598 <MIC_Print+0x288>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4949      	ldr	r1, [pc, #292]	@ (800d5c8 <MIC_Print+0x2b8>)
 800d4a4:	1c18      	adds	r0, r3, #0
 800d4a6:	f7f3 f861 	bl	800056c <__aeabi_fcmpge>
 800d4aa:	1e03      	subs	r3, r0, #0
 800d4ac:	d00c      	beq.n	800d4c8 <MIC_Print+0x1b8>
 800d4ae:	4b3a      	ldr	r3, [pc, #232]	@ (800d598 <MIC_Print+0x288>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4944      	ldr	r1, [pc, #272]	@ (800d5c4 <MIC_Print+0x2b4>)
 800d4b4:	1c18      	adds	r0, r3, #0
 800d4b6:	f7f3 f83b 	bl	8000530 <__aeabi_fcmplt>
 800d4ba:	1e03      	subs	r3, r0, #0
 800d4bc:	d004      	beq.n	800d4c8 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2101      	movs	r1, #1
 800d4c2:	2001      	movs	r0, #1
 800d4c4:	f004 fb42 	bl	8011b4c <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800d4c8:	4b33      	ldr	r3, [pc, #204]	@ (800d598 <MIC_Print+0x288>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	493f      	ldr	r1, [pc, #252]	@ (800d5cc <MIC_Print+0x2bc>)
 800d4ce:	1c18      	adds	r0, r3, #0
 800d4d0:	f7f3 f84c 	bl	800056c <__aeabi_fcmpge>
 800d4d4:	1e03      	subs	r3, r0, #0
 800d4d6:	d00c      	beq.n	800d4f2 <MIC_Print+0x1e2>
 800d4d8:	4b2f      	ldr	r3, [pc, #188]	@ (800d598 <MIC_Print+0x288>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	493a      	ldr	r1, [pc, #232]	@ (800d5c8 <MIC_Print+0x2b8>)
 800d4de:	1c18      	adds	r0, r3, #0
 800d4e0:	f7f3 f826 	bl	8000530 <__aeabi_fcmplt>
 800d4e4:	1e03      	subs	r3, r0, #0
 800d4e6:	d004      	beq.n	800d4f2 <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	2101      	movs	r1, #1
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	f004 fb2d 	bl	8011b4c <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800d4f2:	4b29      	ldr	r3, [pc, #164]	@ (800d598 <MIC_Print+0x288>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4936      	ldr	r1, [pc, #216]	@ (800d5d0 <MIC_Print+0x2c0>)
 800d4f8:	1c18      	adds	r0, r3, #0
 800d4fa:	f7f3 f837 	bl	800056c <__aeabi_fcmpge>
 800d4fe:	1e03      	subs	r3, r0, #0
 800d500:	d00c      	beq.n	800d51c <MIC_Print+0x20c>
 800d502:	4b25      	ldr	r3, [pc, #148]	@ (800d598 <MIC_Print+0x288>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4931      	ldr	r1, [pc, #196]	@ (800d5cc <MIC_Print+0x2bc>)
 800d508:	1c18      	adds	r0, r3, #0
 800d50a:	f7f3 f811 	bl	8000530 <__aeabi_fcmplt>
 800d50e:	1e03      	subs	r3, r0, #0
 800d510:	d004      	beq.n	800d51c <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800d512:	2201      	movs	r2, #1
 800d514:	2101      	movs	r1, #1
 800d516:	2000      	movs	r0, #0
 800d518:	f004 fb18 	bl	8011b4c <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800d51c:	4b1e      	ldr	r3, [pc, #120]	@ (800d598 <MIC_Print+0x288>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	492c      	ldr	r1, [pc, #176]	@ (800d5d4 <MIC_Print+0x2c4>)
 800d522:	1c18      	adds	r0, r3, #0
 800d524:	f7f3 f822 	bl	800056c <__aeabi_fcmpge>
 800d528:	1e03      	subs	r3, r0, #0
 800d52a:	d00c      	beq.n	800d546 <MIC_Print+0x236>
 800d52c:	4b1a      	ldr	r3, [pc, #104]	@ (800d598 <MIC_Print+0x288>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4927      	ldr	r1, [pc, #156]	@ (800d5d0 <MIC_Print+0x2c0>)
 800d532:	1c18      	adds	r0, r3, #0
 800d534:	f7f2 fffc 	bl	8000530 <__aeabi_fcmplt>
 800d538:	1e03      	subs	r3, r0, #0
 800d53a:	d004      	beq.n	800d546 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800d53c:	2201      	movs	r2, #1
 800d53e:	2100      	movs	r1, #0
 800d540:	2000      	movs	r0, #0
 800d542:	f004 fb03 	bl	8011b4c <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800d546:	4b14      	ldr	r3, [pc, #80]	@ (800d598 <MIC_Print+0x288>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4923      	ldr	r1, [pc, #140]	@ (800d5d8 <MIC_Print+0x2c8>)
 800d54c:	1c18      	adds	r0, r3, #0
 800d54e:	f7f3 f80d 	bl	800056c <__aeabi_fcmpge>
 800d552:	1e03      	subs	r3, r0, #0
 800d554:	d00c      	beq.n	800d570 <MIC_Print+0x260>
 800d556:	4b10      	ldr	r3, [pc, #64]	@ (800d598 <MIC_Print+0x288>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	491e      	ldr	r1, [pc, #120]	@ (800d5d4 <MIC_Print+0x2c4>)
 800d55c:	1c18      	adds	r0, r3, #0
 800d55e:	f7f2 ffe7 	bl	8000530 <__aeabi_fcmplt>
 800d562:	1e03      	subs	r3, r0, #0
 800d564:	d004      	beq.n	800d570 <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800d566:	2201      	movs	r2, #1
 800d568:	2100      	movs	r1, #0
 800d56a:	2001      	movs	r0, #1
 800d56c:	f004 faee 	bl	8011b4c <SetDBLED>
  }
  if(dBA < 35){//off
 800d570:	4b09      	ldr	r3, [pc, #36]	@ (800d598 <MIC_Print+0x288>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4918      	ldr	r1, [pc, #96]	@ (800d5d8 <MIC_Print+0x2c8>)
 800d576:	1c18      	adds	r0, r3, #0
 800d578:	f7f2 ffda 	bl	8000530 <__aeabi_fcmplt>
 800d57c:	1e03      	subs	r3, r0, #0
 800d57e:	d100      	bne.n	800d582 <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800d580:	e004      	b.n	800d58c <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800d582:	2200      	movs	r2, #0
 800d584:	2100      	movs	r1, #0
 800d586:	2000      	movs	r0, #0
 800d588:	f004 fae0 	bl	8011b4c <SetDBLED>
}
 800d58c:	46c0      	nop			@ (mov r8, r8)
 800d58e:	46bd      	mov	sp, r7
 800d590:	b004      	add	sp, #16
 800d592:	bdb0      	pop	{r4, r5, r7, pc}
 800d594:	20000e84 	.word	0x20000e84
 800d598:	20000e50 	.word	0x20000e50
 800d59c:	20000e8c 	.word	0x20000e8c
 800d5a0:	20000e54 	.word	0x20000e54
 800d5a4:	20000e8d 	.word	0x20000e8d
 800d5a8:	2000009c 	.word	0x2000009c
 800d5ac:	20000e80 	.word	0x20000e80
 800d5b0:	20000e88 	.word	0x20000e88
 800d5b4:	20000e7c 	.word	0x20000e7c
 800d5b8:	0802c718 	.word	0x0802c718
 800d5bc:	20000e44 	.word	0x20000e44
 800d5c0:	42b40000 	.word	0x42b40000
 800d5c4:	42a00000 	.word	0x42a00000
 800d5c8:	428c0000 	.word	0x428c0000
 800d5cc:	42700000 	.word	0x42700000
 800d5d0:	42480000 	.word	0x42480000
 800d5d4:	42200000 	.word	0x42200000
 800d5d8:	420c0000 	.word	0x420c0000

0800d5dc <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800d5e2:	4b11      	ldr	r3, [pc, #68]	@ (800d628 <MIC_TestMeasurementDone+0x4c>)
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	4a10      	ldr	r2, [pc, #64]	@ (800d62c <MIC_TestMeasurementDone+0x50>)
 800d5ea:	4911      	ldr	r1, [pc, #68]	@ (800d630 <MIC_TestMeasurementDone+0x54>)
 800d5ec:	2002      	movs	r0, #2
 800d5ee:	f005 fd5b 	bl	80130a8 <CreateLine>
  if(DataReady) {
 800d5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d628 <MIC_TestMeasurementDone+0x4c>)
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d010      	beq.n	800d61e <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800d5fc:	1dfb      	adds	r3, r7, #7
 800d5fe:	4a0d      	ldr	r2, [pc, #52]	@ (800d634 <MIC_TestMeasurementDone+0x58>)
 800d600:	7812      	ldrb	r2, [r2, #0]
 800d602:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800d604:	4b0b      	ldr	r3, [pc, #44]	@ (800d634 <MIC_TestMeasurementDone+0x58>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	4a0b      	ldr	r2, [pc, #44]	@ (800d638 <MIC_TestMeasurementDone+0x5c>)
 800d60c:	4908      	ldr	r1, [pc, #32]	@ (800d630 <MIC_TestMeasurementDone+0x54>)
 800d60e:	2002      	movs	r0, #2
 800d610:	f005 fd4a 	bl	80130a8 <CreateLine>
    ResetMICIndicator();
 800d614:	f004 fb88 	bl	8011d28 <ResetMICIndicator>
    return Check;
 800d618:	1dfb      	adds	r3, r7, #7
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	e000      	b.n	800d620 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800d61e:	2300      	movs	r3, #0
}
 800d620:	0018      	movs	r0, r3
 800d622:	46bd      	mov	sp, r7
 800d624:	b002      	add	sp, #8
 800d626:	bd80      	pop	{r7, pc}
 800d628:	20000fc1 	.word	0x20000fc1
 800d62c:	0802c760 	.word	0x0802c760
 800d630:	0802c78c 	.word	0x0802c78c
 800d634:	20000fc2 	.word	0x20000fc2
 800d638:	0802c790 	.word	0x0802c790

0800d63c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800d642:	4b78      	ldr	r3, [pc, #480]	@ (800d824 <Mic_Upkeep+0x1e8>)
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	2b03      	cmp	r3, #3
 800d648:	d100      	bne.n	800d64c <Mic_Upkeep+0x10>
 800d64a:	e0b8      	b.n	800d7be <Mic_Upkeep+0x182>
 800d64c:	dd00      	ble.n	800d650 <Mic_Upkeep+0x14>
 800d64e:	e0d3      	b.n	800d7f8 <Mic_Upkeep+0x1bc>
 800d650:	2b02      	cmp	r3, #2
 800d652:	d037      	beq.n	800d6c4 <Mic_Upkeep+0x88>
 800d654:	dd00      	ble.n	800d658 <Mic_Upkeep+0x1c>
 800d656:	e0cf      	b.n	800d7f8 <Mic_Upkeep+0x1bc>
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <Mic_Upkeep+0x26>
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d014      	beq.n	800d68a <Mic_Upkeep+0x4e>
 800d660:	e0ca      	b.n	800d7f8 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800d662:	2001      	movs	r0, #1
 800d664:	f003 fb70 	bl	8010d48 <enableMicrophone>
 800d668:	0003      	movs	r3, r0
 800d66a:	001a      	movs	r2, r3
 800d66c:	2301      	movs	r3, #1
 800d66e:	4053      	eors	r3, r2
 800d670:	b2db      	uxtb	r3, r3
 800d672:	2b00      	cmp	r3, #0
 800d674:	d005      	beq.n	800d682 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800d676:	4a6c      	ldr	r2, [pc, #432]	@ (800d828 <Mic_Upkeep+0x1ec>)
 800d678:	4b6c      	ldr	r3, [pc, #432]	@ (800d82c <Mic_Upkeep+0x1f0>)
 800d67a:	217f      	movs	r1, #127	@ 0x7f
 800d67c:	0018      	movs	r0, r3
 800d67e:	f005 fdcb 	bl	8013218 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800d682:	4b68      	ldr	r3, [pc, #416]	@ (800d824 <Mic_Upkeep+0x1e8>)
 800d684:	2201      	movs	r2, #1
 800d686:	701a      	strb	r2, [r3, #0]
    break;
 800d688:	e0c5      	b.n	800d816 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800d68a:	f003 fb39 	bl	8010d00 <micSettlingComplete>
 800d68e:	1e03      	subs	r3, r0, #0
 800d690:	d105      	bne.n	800d69e <Mic_Upkeep+0x62>
 800d692:	4b67      	ldr	r3, [pc, #412]	@ (800d830 <Mic_Upkeep+0x1f4>)
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	b2db      	uxtb	r3, r3
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d100      	bne.n	800d69e <Mic_Upkeep+0x62>
 800d69c:	e0b6      	b.n	800d80c <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800d69e:	f003 fbbd 	bl	8010e1c <startSPLcalculation>
 800d6a2:	0003      	movs	r3, r0
 800d6a4:	001a      	movs	r2, r3
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	4053      	eors	r3, r2
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d005      	beq.n	800d6bc <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800d6b0:	4a5d      	ldr	r2, [pc, #372]	@ (800d828 <Mic_Upkeep+0x1ec>)
 800d6b2:	4b5e      	ldr	r3, [pc, #376]	@ (800d82c <Mic_Upkeep+0x1f0>)
 800d6b4:	2188      	movs	r1, #136	@ 0x88
 800d6b6:	0018      	movs	r0, r3
 800d6b8:	f005 fdae 	bl	8013218 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800d6bc:	4b59      	ldr	r3, [pc, #356]	@ (800d824 <Mic_Upkeep+0x1e8>)
 800d6be:	2202      	movs	r2, #2
 800d6c0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d6c2:	e0a3      	b.n	800d80c <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800d6c4:	4b5b      	ldr	r3, [pc, #364]	@ (800d834 <Mic_Upkeep+0x1f8>)
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	2101      	movs	r1, #1
 800d6ca:	0018      	movs	r0, r3
 800d6cc:	f003 f9fa 	bl	8010ac4 <getSoundData>
 800d6d0:	1e03      	subs	r3, r0, #0
 800d6d2:	d100      	bne.n	800d6d6 <Mic_Upkeep+0x9a>
 800d6d4:	e09c      	b.n	800d810 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800d6d6:	f003 faf3 	bl	8010cc0 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800d6da:	4b56      	ldr	r3, [pc, #344]	@ (800d834 <Mic_Upkeep+0x1f8>)
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	001a      	movs	r2, r3
 800d6e0:	4b54      	ldr	r3, [pc, #336]	@ (800d834 <Mic_Upkeep+0x1f8>)
 800d6e2:	785b      	ldrb	r3, [r3, #1]
 800d6e4:	4954      	ldr	r1, [pc, #336]	@ (800d838 <Mic_Upkeep+0x1fc>)
 800d6e6:	0038      	movs	r0, r7
 800d6e8:	f017 fe4a 	bl	8025380 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800d6ec:	4b51      	ldr	r3, [pc, #324]	@ (800d834 <Mic_Upkeep+0x1f8>)
 800d6ee:	89db      	ldrh	r3, [r3, #14]
 800d6f0:	001a      	movs	r2, r3
 800d6f2:	4b50      	ldr	r3, [pc, #320]	@ (800d834 <Mic_Upkeep+0x1f8>)
 800d6f4:	7c1b      	ldrb	r3, [r3, #16]
 800d6f6:	4951      	ldr	r1, [pc, #324]	@ (800d83c <Mic_Upkeep+0x200>)
 800d6f8:	4851      	ldr	r0, [pc, #324]	@ (800d840 <Mic_Upkeep+0x204>)
 800d6fa:	f017 fe41 	bl	8025380 <siprintf>
      dBValue = atof(dBbuffer);
 800d6fe:	003b      	movs	r3, r7
 800d700:	0018      	movs	r0, r3
 800d702:	f016 f9e3 	bl	8023acc <atof>
 800d706:	0002      	movs	r2, r0
 800d708:	000b      	movs	r3, r1
 800d70a:	0010      	movs	r0, r2
 800d70c:	0019      	movs	r1, r3
 800d70e:	f7f6 f909 	bl	8003924 <__aeabi_d2f>
 800d712:	1c02      	adds	r2, r0, #0
 800d714:	4b4b      	ldr	r3, [pc, #300]	@ (800d844 <Mic_Upkeep+0x208>)
 800d716:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800d718:	4b4a      	ldr	r3, [pc, #296]	@ (800d844 <Mic_Upkeep+0x208>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	494a      	ldr	r1, [pc, #296]	@ (800d848 <Mic_Upkeep+0x20c>)
 800d71e:	1c18      	adds	r0, r3, #0
 800d720:	f7f3 fc8e 	bl	8001040 <__aeabi_fmul>
 800d724:	1c03      	adds	r3, r0, #0
 800d726:	1c18      	adds	r0, r3, #0
 800d728:	f7f6 f8b4 	bl	8003894 <__aeabi_f2d>
 800d72c:	2200      	movs	r2, #0
 800d72e:	4b47      	ldr	r3, [pc, #284]	@ (800d84c <Mic_Upkeep+0x210>)
 800d730:	f7f4 f910 	bl	8001954 <__aeabi_dadd>
 800d734:	0002      	movs	r2, r0
 800d736:	000b      	movs	r3, r1
 800d738:	0010      	movs	r0, r2
 800d73a:	0019      	movs	r1, r3
 800d73c:	f7f6 f81c 	bl	8003778 <__aeabi_d2iz>
 800d740:	0003      	movs	r3, r0
 800d742:	0018      	movs	r0, r3
 800d744:	f7f6 f854 	bl	80037f0 <__aeabi_i2d>
 800d748:	2200      	movs	r2, #0
 800d74a:	4b41      	ldr	r3, [pc, #260]	@ (800d850 <Mic_Upkeep+0x214>)
 800d74c:	f7f4 fcc8 	bl	80020e0 <__aeabi_ddiv>
 800d750:	0002      	movs	r2, r0
 800d752:	000b      	movs	r3, r1
 800d754:	0010      	movs	r0, r2
 800d756:	0019      	movs	r1, r3
 800d758:	f7f6 f8e4 	bl	8003924 <__aeabi_d2f>
 800d75c:	1c02      	adds	r2, r0, #0
 800d75e:	4b39      	ldr	r3, [pc, #228]	@ (800d844 <Mic_Upkeep+0x208>)
 800d760:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800d762:	f7ff fdd5 	bl	800d310 <MIC_Print>
      if (!startSPLcalculation()) {
 800d766:	f003 fb59 	bl	8010e1c <startSPLcalculation>
 800d76a:	0003      	movs	r3, r0
 800d76c:	001a      	movs	r2, r3
 800d76e:	2301      	movs	r3, #1
 800d770:	4053      	eors	r3, r2
 800d772:	b2db      	uxtb	r3, r3
 800d774:	2b00      	cmp	r3, #0
 800d776:	d005      	beq.n	800d784 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800d778:	4a2b      	ldr	r2, [pc, #172]	@ (800d828 <Mic_Upkeep+0x1ec>)
 800d77a:	4b2c      	ldr	r3, [pc, #176]	@ (800d82c <Mic_Upkeep+0x1f0>)
 800d77c:	2198      	movs	r1, #152	@ 0x98
 800d77e:	0018      	movs	r0, r3
 800d780:	f005 fd4a 	bl	8013218 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800d784:	2000      	movs	r0, #0
 800d786:	f003 fadf 	bl	8010d48 <enableMicrophone>
 800d78a:	0003      	movs	r3, r0
 800d78c:	001a      	movs	r2, r3
 800d78e:	2301      	movs	r3, #1
 800d790:	4053      	eors	r3, r2
 800d792:	b2db      	uxtb	r3, r3
 800d794:	2b00      	cmp	r3, #0
 800d796:	d005      	beq.n	800d7a4 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800d798:	4a23      	ldr	r2, [pc, #140]	@ (800d828 <Mic_Upkeep+0x1ec>)
 800d79a:	4b24      	ldr	r3, [pc, #144]	@ (800d82c <Mic_Upkeep+0x1f0>)
 800d79c:	219b      	movs	r1, #155	@ 0x9b
 800d79e:	0018      	movs	r0, r3
 800d7a0:	f005 fd3a 	bl	8013218 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800d7a4:	f006 f9c0 	bl	8013b28 <HAL_GetTick>
 800d7a8:	0003      	movs	r3, r0
 800d7aa:	4a2a      	ldr	r2, [pc, #168]	@ (800d854 <Mic_Upkeep+0x218>)
 800d7ac:	189a      	adds	r2, r3, r2
 800d7ae:	4b2a      	ldr	r3, [pc, #168]	@ (800d858 <Mic_Upkeep+0x21c>)
 800d7b0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800d7b2:	4b1c      	ldr	r3, [pc, #112]	@ (800d824 <Mic_Upkeep+0x1e8>)
 800d7b4:	2203      	movs	r2, #3
 800d7b6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800d7b8:	f004 fab6 	bl	8011d28 <ResetMICIndicator>
    }
    break;
 800d7bc:	e028      	b.n	800d810 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800d7be:	4b26      	ldr	r3, [pc, #152]	@ (800d858 <Mic_Upkeep+0x21c>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	0018      	movs	r0, r3
 800d7c4:	f005 fc1a 	bl	8012ffc <TimestampIsReached>
 800d7c8:	1e03      	subs	r3, r0, #0
 800d7ca:	d023      	beq.n	800d814 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800d7cc:	2001      	movs	r0, #1
 800d7ce:	f003 fabb 	bl	8010d48 <enableMicrophone>
 800d7d2:	0003      	movs	r3, r0
 800d7d4:	001a      	movs	r2, r3
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	4053      	eors	r3, r2
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d005      	beq.n	800d7ec <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800d7e0:	4a11      	ldr	r2, [pc, #68]	@ (800d828 <Mic_Upkeep+0x1ec>)
 800d7e2:	4b12      	ldr	r3, [pc, #72]	@ (800d82c <Mic_Upkeep+0x1f0>)
 800d7e4:	21a6      	movs	r1, #166	@ 0xa6
 800d7e6:	0018      	movs	r0, r3
 800d7e8:	f005 fd16 	bl	8013218 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800d7ec:	4b0d      	ldr	r3, [pc, #52]	@ (800d824 <Mic_Upkeep+0x1e8>)
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800d7f2:	f004 fa57 	bl	8011ca4 <SetMICIndicator>
    }
    break;
 800d7f6:	e00d      	b.n	800d814 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800d7f8:	4a18      	ldr	r2, [pc, #96]	@ (800d85c <Mic_Upkeep+0x220>)
 800d7fa:	4b19      	ldr	r3, [pc, #100]	@ (800d860 <Mic_Upkeep+0x224>)
 800d7fc:	0019      	movs	r1, r3
 800d7fe:	2003      	movs	r0, #3
 800d800:	f005 fc52 	bl	80130a8 <CreateLine>
    MicState = MIC_STATE_INIT;
 800d804:	4b07      	ldr	r3, [pc, #28]	@ (800d824 <Mic_Upkeep+0x1e8>)
 800d806:	2200      	movs	r2, #0
 800d808:	701a      	strb	r2, [r3, #0]
    break;
 800d80a:	e004      	b.n	800d816 <Mic_Upkeep+0x1da>
    break;
 800d80c:	46c0      	nop			@ (mov r8, r8)
 800d80e:	e002      	b.n	800d816 <Mic_Upkeep+0x1da>
    break;
 800d810:	46c0      	nop			@ (mov r8, r8)
 800d812:	e000      	b.n	800d816 <Mic_Upkeep+0x1da>
    break;
 800d814:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800d816:	4b03      	ldr	r3, [pc, #12]	@ (800d824 <Mic_Upkeep+0x1e8>)
 800d818:	781b      	ldrb	r3, [r3, #0]
}
 800d81a:	0018      	movs	r0, r3
 800d81c:	46bd      	mov	sp, r7
 800d81e:	b002      	add	sp, #8
 800d820:	bd80      	pop	{r7, pc}
 800d822:	46c0      	nop			@ (mov r8, r8)
 800d824:	20000ea6 	.word	0x20000ea6
 800d828:	0802c7a8 	.word	0x0802c7a8
 800d82c:	0802d930 	.word	0x0802d930
 800d830:	20000fc1 	.word	0x20000fc1
 800d834:	20000e94 	.word	0x20000e94
 800d838:	0802c7c4 	.word	0x0802c7c4
 800d83c:	0802c7cc 	.word	0x0802c7cc
 800d840:	20000e44 	.word	0x20000e44
 800d844:	20000e84 	.word	0x20000e84
 800d848:	42c80000 	.word	0x42c80000
 800d84c:	3fe00000 	.word	0x3fe00000
 800d850:	40590000 	.word	0x40590000
 800d854:	000002f3 	.word	0x000002f3
 800d858:	20000e90 	.word	0x20000e90
 800d85c:	0802c7d4 	.word	0x0802c7d4
 800d860:	0802c7f4 	.word	0x0802c7f4

0800d864 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b086      	sub	sp, #24
 800d868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800d86a:	1d3b      	adds	r3, r7, #4
 800d86c:	0018      	movs	r0, r3
 800d86e:	2314      	movs	r3, #20
 800d870:	001a      	movs	r2, r3
 800d872:	2100      	movs	r1, #0
 800d874:	f017 feee 	bl	8025654 <memset>
  RTC_DateTypeDef sDate = {0};
 800d878:	003b      	movs	r3, r7
 800d87a:	2200      	movs	r2, #0
 800d87c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800d87e:	4b2e      	ldr	r3, [pc, #184]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d880:	4a2e      	ldr	r2, [pc, #184]	@ (800d93c <MX_RTC_Init+0xd8>)
 800d882:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d884:	4b2c      	ldr	r3, [pc, #176]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d886:	2200      	movs	r2, #0
 800d888:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800d88a:	4b2b      	ldr	r3, [pc, #172]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d88c:	227f      	movs	r2, #127	@ 0x7f
 800d88e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800d890:	4b29      	ldr	r3, [pc, #164]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d892:	22ff      	movs	r2, #255	@ 0xff
 800d894:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d896:	4b28      	ldr	r3, [pc, #160]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d898:	2200      	movs	r2, #0
 800d89a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800d89c:	4b26      	ldr	r3, [pc, #152]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d89e:	2200      	movs	r2, #0
 800d8a0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d8a2:	4b25      	ldr	r3, [pc, #148]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d8a8:	4b23      	ldr	r3, [pc, #140]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d8ae:	4b22      	ldr	r3, [pc, #136]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d8b0:	0018      	movs	r0, r3
 800d8b2:	f00d fcc9 	bl	801b248 <HAL_RTC_Init>
 800d8b6:	1e03      	subs	r3, r0, #0
 800d8b8:	d001      	beq.n	800d8be <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800d8ba:	f7fe ffcd 	bl	800c858 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800d8be:	1d3b      	adds	r3, r7, #4
 800d8c0:	220d      	movs	r2, #13
 800d8c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800d8c4:	1d3b      	adds	r3, r7, #4
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800d8ca:	1d3b      	adds	r3, r7, #4
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d8d0:	1d3b      	adds	r3, r7, #4
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d8d6:	1d3b      	adds	r3, r7, #4
 800d8d8:	2200      	movs	r2, #0
 800d8da:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800d8dc:	1d39      	adds	r1, r7, #4
 800d8de:	4b16      	ldr	r3, [pc, #88]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	0018      	movs	r0, r3
 800d8e4:	f00d fd4c 	bl	801b380 <HAL_RTC_SetTime>
 800d8e8:	1e03      	subs	r3, r0, #0
 800d8ea:	d001      	beq.n	800d8f0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800d8ec:	f7fe ffb4 	bl	800c858 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800d8f0:	003b      	movs	r3, r7
 800d8f2:	2206      	movs	r2, #6
 800d8f4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800d8f6:	003b      	movs	r3, r7
 800d8f8:	2211      	movs	r2, #17
 800d8fa:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800d8fc:	003b      	movs	r3, r7
 800d8fe:	2217      	movs	r2, #23
 800d900:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800d902:	003b      	movs	r3, r7
 800d904:	2218      	movs	r2, #24
 800d906:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800d908:	0039      	movs	r1, r7
 800d90a:	4b0b      	ldr	r3, [pc, #44]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d90c:	2200      	movs	r2, #0
 800d90e:	0018      	movs	r0, r3
 800d910:	f00d fe3e 	bl	801b590 <HAL_RTC_SetDate>
 800d914:	1e03      	subs	r3, r0, #0
 800d916:	d001      	beq.n	800d91c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800d918:	f7fe ff9e 	bl	800c858 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800d91c:	4b06      	ldr	r3, [pc, #24]	@ (800d938 <MX_RTC_Init+0xd4>)
 800d91e:	2200      	movs	r2, #0
 800d920:	2100      	movs	r1, #0
 800d922:	0018      	movs	r0, r3
 800d924:	f00d ffee 	bl	801b904 <HAL_RTCEx_SetWakeUpTimer_IT>
 800d928:	1e03      	subs	r3, r0, #0
 800d92a:	d001      	beq.n	800d930 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800d92c:	f7fe ff94 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d930:	46c0      	nop			@ (mov r8, r8)
 800d932:	46bd      	mov	sp, r7
 800d934:	b006      	add	sp, #24
 800d936:	bd80      	pop	{r7, pc}
 800d938:	20000ea8 	.word	0x20000ea8
 800d93c:	40002800 	.word	0x40002800

0800d940 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a0a      	ldr	r2, [pc, #40]	@ (800d978 <HAL_RTC_MspInit+0x38>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d10e      	bne.n	800d970 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d952:	4b0a      	ldr	r3, [pc, #40]	@ (800d97c <HAL_RTC_MspInit+0x3c>)
 800d954:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d956:	4b09      	ldr	r3, [pc, #36]	@ (800d97c <HAL_RTC_MspInit+0x3c>)
 800d958:	2180      	movs	r1, #128	@ 0x80
 800d95a:	02c9      	lsls	r1, r1, #11
 800d95c:	430a      	orrs	r2, r1
 800d95e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800d960:	2200      	movs	r2, #0
 800d962:	2100      	movs	r1, #0
 800d964:	2002      	movs	r0, #2
 800d966:	f006 fd83 	bl	8014470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800d96a:	2002      	movs	r0, #2
 800d96c:	f006 fd95 	bl	801449a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800d970:	46c0      	nop			@ (mov r8, r8)
 800d972:	46bd      	mov	sp, r7
 800d974:	b002      	add	sp, #8
 800d976:	bd80      	pop	{r7, pc}
 800d978:	40002800 	.word	0x40002800
 800d97c:	40021000 	.word	0x40021000

0800d980 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800d980:	b580      	push	{r7, lr}
 800d982:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800d984:	4b02      	ldr	r3, [pc, #8]	@ (800d990 <sen5x_Get_sen5x_enable_state+0x10>)
 800d986:	781b      	ldrb	r3, [r3, #0]
}
 800d988:	0018      	movs	r0, r3
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	46c0      	nop			@ (mov r8, r8)
 800d990:	20000ecf 	.word	0x20000ecf

0800d994 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800d994:	b580      	push	{r7, lr}
 800d996:	b082      	sub	sp, #8
 800d998:	af00      	add	r7, sp, #0
 800d99a:	0002      	movs	r2, r0
 800d99c:	1dfb      	adds	r3, r7, #7
 800d99e:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800d9a0:	4b03      	ldr	r3, [pc, #12]	@ (800d9b0 <sen5x_Set_sen5x_state+0x1c>)
 800d9a2:	1dfa      	adds	r2, r7, #7
 800d9a4:	7812      	ldrb	r2, [r2, #0]
 800d9a6:	701a      	strb	r2, [r3, #0]
}
 800d9a8:	46c0      	nop			@ (mov r8, r8)
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	b002      	add	sp, #8
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	20000ecf 	.word	0x20000ecf

0800d9b4 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800d9bc:	f006 f8b4 	bl	8013b28 <HAL_GetTick>
 800d9c0:	0002      	movs	r2, r0
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	18d2      	adds	r2, r2, r3
 800d9c6:	4b03      	ldr	r3, [pc, #12]	@ (800d9d4 <setsen5xReadTimer+0x20>)
 800d9c8:	601a      	str	r2, [r3, #0]
}
 800d9ca:	46c0      	nop			@ (mov r8, r8)
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	b002      	add	sp, #8
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	46c0      	nop			@ (mov r8, r8)
 800d9d4:	20000edc 	.word	0x20000edc

0800d9d8 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	0002      	movs	r2, r0
 800d9e0:	1dfb      	adds	r3, r7, #7
 800d9e2:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800d9e4:	4b03      	ldr	r3, [pc, #12]	@ (800d9f4 <setsen5xSamplecounter+0x1c>)
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	701a      	strb	r2, [r3, #0]
}
 800d9ea:	46c0      	nop			@ (mov r8, r8)
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	b002      	add	sp, #8
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	46c0      	nop			@ (mov r8, r8)
 800d9f4:	20000ed8 	.word	0x20000ed8

0800d9f8 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800da00:	f7fe ffe2 	bl	800c9c8 <IsPMSensorEnabled>
 800da04:	1e03      	subs	r3, r0, #0
 800da06:	d035      	beq.n	800da74 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800da08:	f003 ffca 	bl	80119a0 <batteryChargeCheck>
 800da0c:	0003      	movs	r3, r0
 800da0e:	2b03      	cmp	r3, #3
 800da10:	d103      	bne.n	800da1a <sen5x_enable+0x22>
      sen5x_Enable = true;
 800da12:	4b20      	ldr	r3, [pc, #128]	@ (800da94 <sen5x_enable+0x9c>)
 800da14:	2201      	movs	r2, #1
 800da16:	701a      	strb	r2, [r3, #0]
 800da18:	e00d      	b.n	800da36 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800da1a:	4b1e      	ldr	r3, [pc, #120]	@ (800da94 <sen5x_enable+0x9c>)
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	1e5a      	subs	r2, r3, #1
 800da20:	4193      	sbcs	r3, r2
 800da22:	b2db      	uxtb	r3, r3
 800da24:	2201      	movs	r2, #1
 800da26:	4053      	eors	r3, r2
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	1c1a      	adds	r2, r3, #0
 800da2c:	2301      	movs	r3, #1
 800da2e:	4013      	ands	r3, r2
 800da30:	b2da      	uxtb	r2, r3
 800da32:	4b18      	ldr	r3, [pc, #96]	@ (800da94 <sen5x_enable+0x9c>)
 800da34:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800da36:	4b17      	ldr	r3, [pc, #92]	@ (800da94 <sen5x_enable+0x9c>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d003      	beq.n	800da46 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800da3e:	2000      	movs	r0, #0
 800da40:	f7ff ffb8 	bl	800d9b4 <setsen5xReadTimer>
 800da44:	e009      	b.n	800da5a <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800da46:	f006 f86f 	bl	8013b28 <HAL_GetTick>
 800da4a:	0002      	movs	r2, r0
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2164      	movs	r1, #100	@ 0x64
 800da50:	434b      	muls	r3, r1
 800da52:	18d3      	adds	r3, r2, r3
 800da54:	0018      	movs	r0, r3
 800da56:	f7ff ffad 	bl	800d9b4 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800da5a:	4b0e      	ldr	r3, [pc, #56]	@ (800da94 <sen5x_enable+0x9c>)
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <sen5x_enable+0x6e>
 800da62:	4b0d      	ldr	r3, [pc, #52]	@ (800da98 <sen5x_enable+0xa0>)
 800da64:	e000      	b.n	800da68 <sen5x_enable+0x70>
 800da66:	4b0d      	ldr	r3, [pc, #52]	@ (800da9c <sen5x_enable+0xa4>)
 800da68:	4a0d      	ldr	r2, [pc, #52]	@ (800daa0 <sen5x_enable+0xa8>)
 800da6a:	490e      	ldr	r1, [pc, #56]	@ (800daa4 <sen5x_enable+0xac>)
 800da6c:	2002      	movs	r0, #2
 800da6e:	f005 fb1b 	bl	80130a8 <CreateLine>
 800da72:	e005      	b.n	800da80 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800da74:	4a0c      	ldr	r2, [pc, #48]	@ (800daa8 <sen5x_enable+0xb0>)
 800da76:	4b0b      	ldr	r3, [pc, #44]	@ (800daa4 <sen5x_enable+0xac>)
 800da78:	0019      	movs	r1, r3
 800da7a:	2002      	movs	r0, #2
 800da7c:	f005 fb14 	bl	80130a8 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800da80:	4b0a      	ldr	r3, [pc, #40]	@ (800daac <sen5x_enable+0xb4>)
 800da82:	2201      	movs	r2, #1
 800da84:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800da86:	4b03      	ldr	r3, [pc, #12]	@ (800da94 <sen5x_enable+0x9c>)
 800da88:	781b      	ldrb	r3, [r3, #0]
}
 800da8a:	0018      	movs	r0, r3
 800da8c:	46bd      	mov	sp, r7
 800da8e:	b002      	add	sp, #8
 800da90:	bd80      	pop	{r7, pc}
 800da92:	46c0      	nop			@ (mov r8, r8)
 800da94:	20000ecf 	.word	0x20000ecf
 800da98:	0802c7f8 	.word	0x0802c7f8
 800da9c:	0802c800 	.word	0x0802c800
 800daa0:	0802c80c 	.word	0x0802c80c
 800daa4:	0802c828 	.word	0x0802c828
 800daa8:	0802c82c 	.word	0x0802c82c
 800daac:	2000009d 	.word	0x2000009d

0800dab0 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800dab0:	b580      	push	{r7, lr}
 800dab2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800dab4:	2380      	movs	r3, #128	@ 0x80
 800dab6:	015b      	lsls	r3, r3, #5
 800dab8:	480f      	ldr	r0, [pc, #60]	@ (800daf8 <sen5x_Power_On+0x48>)
 800daba:	2201      	movs	r2, #1
 800dabc:	0019      	movs	r1, r3
 800dabe:	f007 fac4 	bl	801504a <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800dac2:	4a0e      	ldr	r2, [pc, #56]	@ (800dafc <sen5x_Power_On+0x4c>)
 800dac4:	4b0e      	ldr	r3, [pc, #56]	@ (800db00 <sen5x_Power_On+0x50>)
 800dac6:	0019      	movs	r1, r3
 800dac8:	2003      	movs	r0, #3
 800daca:	f005 faed 	bl	80130a8 <CreateLine>
  HAL_Delay(150);
 800dace:	2096      	movs	r0, #150	@ 0x96
 800dad0:	f006 f834 	bl	8013b3c <HAL_Delay>
  if (sen5x_device_reset()) {
 800dad4:	f001 f9b2 	bl	800ee3c <sen5x_device_reset>
 800dad8:	1e03      	subs	r3, r0, #0
 800dada:	d006      	beq.n	800daea <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800dadc:	4a09      	ldr	r2, [pc, #36]	@ (800db04 <sen5x_Power_On+0x54>)
 800dade:	4b0a      	ldr	r3, [pc, #40]	@ (800db08 <sen5x_Power_On+0x58>)
 800dae0:	0019      	movs	r1, r3
 800dae2:	2001      	movs	r0, #1
 800dae4:	f005 fae0 	bl	80130a8 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800dae8:	e002      	b.n	800daf0 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800daea:	4b08      	ldr	r3, [pc, #32]	@ (800db0c <sen5x_Power_On+0x5c>)
 800daec:	2201      	movs	r2, #1
 800daee:	701a      	strb	r2, [r3, #0]
}
 800daf0:	46c0      	nop			@ (mov r8, r8)
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	46c0      	nop			@ (mov r8, r8)
 800daf8:	50000800 	.word	0x50000800
 800dafc:	0802c84c 	.word	0x0802c84c
 800db00:	0802c868 	.word	0x0802c868
 800db04:	0802c86c 	.word	0x0802c86c
 800db08:	0802c894 	.word	0x0802c894
 800db0c:	20000ecd 	.word	0x20000ecd

0800db10 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800db10:	b580      	push	{r7, lr}
 800db12:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800db14:	4b0e      	ldr	r3, [pc, #56]	@ (800db50 <sen5x_Power_Off+0x40>)
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d006      	beq.n	800db2a <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800db1c:	4a0d      	ldr	r2, [pc, #52]	@ (800db54 <sen5x_Power_Off+0x44>)
 800db1e:	4b0e      	ldr	r3, [pc, #56]	@ (800db58 <sen5x_Power_Off+0x48>)
 800db20:	0019      	movs	r1, r3
 800db22:	2003      	movs	r0, #3
 800db24:	f005 fac0 	bl	80130a8 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800db28:	e00f      	b.n	800db4a <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800db2a:	4a0c      	ldr	r2, [pc, #48]	@ (800db5c <sen5x_Power_Off+0x4c>)
 800db2c:	4b0a      	ldr	r3, [pc, #40]	@ (800db58 <sen5x_Power_Off+0x48>)
 800db2e:	0019      	movs	r1, r3
 800db30:	2003      	movs	r0, #3
 800db32:	f005 fab9 	bl	80130a8 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800db36:	2380      	movs	r3, #128	@ 0x80
 800db38:	015b      	lsls	r3, r3, #5
 800db3a:	4809      	ldr	r0, [pc, #36]	@ (800db60 <sen5x_Power_Off+0x50>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	0019      	movs	r1, r3
 800db40:	f007 fa83 	bl	801504a <HAL_GPIO_WritePin>
      sen5x_On = false;
 800db44:	4b07      	ldr	r3, [pc, #28]	@ (800db64 <sen5x_Power_Off+0x54>)
 800db46:	2200      	movs	r2, #0
 800db48:	701a      	strb	r2, [r3, #0]
}
 800db4a:	46c0      	nop			@ (mov r8, r8)
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	20000ece 	.word	0x20000ece
 800db54:	0802c898 	.word	0x0802c898
 800db58:	0802c868 	.word	0x0802c868
 800db5c:	0802c8c8 	.word	0x0802c8c8
 800db60:	50000800 	.word	0x50000800
 800db64:	20000ecd 	.word	0x20000ecd

0800db68 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800db68:	b580      	push	{r7, lr}
 800db6a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800db6c:	4b02      	ldr	r3, [pc, #8]	@ (800db78 <reset_fanCleaningDone+0x10>)
 800db6e:	2200      	movs	r2, #0
 800db70:	701a      	strb	r2, [r3, #0]
}
 800db72:	46c0      	nop			@ (mov r8, r8)
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	20000ecc 	.word	0x20000ecc

0800db7c <probe_sen5x>:

int16_t probe_sen5x(void) {
 800db7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db7e:	b093      	sub	sp, #76	@ 0x4c
 800db80:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800db82:	2436      	movs	r4, #54	@ 0x36
 800db84:	193b      	adds	r3, r7, r4
 800db86:	2200      	movs	r2, #0
 800db88:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800db8a:	2335      	movs	r3, #53	@ 0x35
 800db8c:	18fb      	adds	r3, r7, r3
 800db8e:	2220      	movs	r2, #32
 800db90:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800db92:	2334      	movs	r3, #52	@ 0x34
 800db94:	18fb      	adds	r3, r7, r3
 800db96:	2220      	movs	r2, #32
 800db98:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800db9a:	f7ff ff89 	bl	800dab0 <sen5x_Power_On>
  error = sen5x_device_reset();
 800db9e:	0025      	movs	r5, r4
 800dba0:	193c      	adds	r4, r7, r4
 800dba2:	f001 f94b 	bl	800ee3c <sen5x_device_reset>
 800dba6:	0003      	movs	r3, r0
 800dba8:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dbaa:	002c      	movs	r4, r5
 800dbac:	193b      	adds	r3, r7, r4
 800dbae:	2200      	movs	r2, #0
 800dbb0:	5e9b      	ldrsh	r3, [r3, r2]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00b      	beq.n	800dbce <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800dbb6:	193b      	adds	r3, r7, r4
 800dbb8:	2200      	movs	r2, #0
 800dbba:	5e9b      	ldrsh	r3, [r3, r2]
 800dbbc:	4a75      	ldr	r2, [pc, #468]	@ (800dd94 <probe_sen5x+0x218>)
 800dbbe:	4976      	ldr	r1, [pc, #472]	@ (800dd98 <probe_sen5x+0x21c>)
 800dbc0:	2001      	movs	r0, #1
 800dbc2:	f005 fa71 	bl	80130a8 <CreateLine>
      return error;
 800dbc6:	193b      	adds	r3, r7, r4
 800dbc8:	2200      	movs	r2, #0
 800dbca:	5e9b      	ldrsh	r3, [r3, r2]
 800dbcc:	e0de      	b.n	800dd8c <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800dbce:	2536      	movs	r5, #54	@ 0x36
 800dbd0:	197c      	adds	r4, r7, r5
 800dbd2:	2335      	movs	r3, #53	@ 0x35
 800dbd4:	18fb      	adds	r3, r7, r3
 800dbd6:	781a      	ldrb	r2, [r3, #0]
 800dbd8:	230c      	movs	r3, #12
 800dbda:	18fb      	adds	r3, r7, r3
 800dbdc:	0011      	movs	r1, r2
 800dbde:	0018      	movs	r0, r3
 800dbe0:	f001 f818 	bl	800ec14 <sen5x_get_serial_number>
 800dbe4:	0003      	movs	r3, r0
 800dbe6:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dbe8:	197b      	adds	r3, r7, r5
 800dbea:	2200      	movs	r2, #0
 800dbec:	5e9b      	ldrsh	r3, [r3, r2]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00b      	beq.n	800dc0a <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800dbf2:	197b      	adds	r3, r7, r5
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	5e9a      	ldrsh	r2, [r3, r2]
 800dbf8:	4b68      	ldr	r3, [pc, #416]	@ (800dd9c <probe_sen5x+0x220>)
 800dbfa:	0011      	movs	r1, r2
 800dbfc:	0018      	movs	r0, r3
 800dbfe:	f017 fb4f 	bl	80252a0 <iprintf>
      return error;
 800dc02:	197b      	adds	r3, r7, r5
 800dc04:	2200      	movs	r2, #0
 800dc06:	5e9b      	ldrsh	r3, [r3, r2]
 800dc08:	e0c0      	b.n	800dd8c <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800dc0a:	230c      	movs	r3, #12
 800dc0c:	18fa      	adds	r2, r7, r3
 800dc0e:	4b64      	ldr	r3, [pc, #400]	@ (800dda0 <probe_sen5x+0x224>)
 800dc10:	0011      	movs	r1, r2
 800dc12:	0018      	movs	r0, r3
 800dc14:	f017 fb44 	bl	80252a0 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800dc18:	2536      	movs	r5, #54	@ 0x36
 800dc1a:	197c      	adds	r4, r7, r5
 800dc1c:	2334      	movs	r3, #52	@ 0x34
 800dc1e:	18fb      	adds	r3, r7, r3
 800dc20:	781a      	ldrb	r2, [r3, #0]
 800dc22:	4b60      	ldr	r3, [pc, #384]	@ (800dda4 <probe_sen5x+0x228>)
 800dc24:	0011      	movs	r1, r2
 800dc26:	0018      	movs	r0, r3
 800dc28:	f000 ff9e 	bl	800eb68 <sen5x_get_product_name>
 800dc2c:	0003      	movs	r3, r0
 800dc2e:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dc30:	197b      	adds	r3, r7, r5
 800dc32:	2200      	movs	r2, #0
 800dc34:	5e9b      	ldrsh	r3, [r3, r2]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00b      	beq.n	800dc52 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800dc3a:	197b      	adds	r3, r7, r5
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	5e9a      	ldrsh	r2, [r3, r2]
 800dc40:	4b59      	ldr	r3, [pc, #356]	@ (800dda8 <probe_sen5x+0x22c>)
 800dc42:	0011      	movs	r1, r2
 800dc44:	0018      	movs	r0, r3
 800dc46:	f017 fb2b 	bl	80252a0 <iprintf>
      return error;
 800dc4a:	197b      	adds	r3, r7, r5
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	5e9b      	ldrsh	r3, [r3, r2]
 800dc50:	e09c      	b.n	800dd8c <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800dc52:	4a54      	ldr	r2, [pc, #336]	@ (800dda4 <probe_sen5x+0x228>)
 800dc54:	4b55      	ldr	r3, [pc, #340]	@ (800ddac <probe_sen5x+0x230>)
 800dc56:	0011      	movs	r1, r2
 800dc58:	0018      	movs	r0, r3
 800dc5a:	f017 fb21 	bl	80252a0 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800dc5e:	2636      	movs	r6, #54	@ 0x36
 800dc60:	19bc      	adds	r4, r7, r6
 800dc62:	2308      	movs	r3, #8
 800dc64:	18fd      	adds	r5, r7, r3
 800dc66:	2309      	movs	r3, #9
 800dc68:	18fa      	adds	r2, r7, r3
 800dc6a:	230a      	movs	r3, #10
 800dc6c:	18f9      	adds	r1, r7, r3
 800dc6e:	230b      	movs	r3, #11
 800dc70:	18f8      	adds	r0, r7, r3
 800dc72:	1d7b      	adds	r3, r7, #5
 800dc74:	9302      	str	r3, [sp, #8]
 800dc76:	1dbb      	adds	r3, r7, #6
 800dc78:	9301      	str	r3, [sp, #4]
 800dc7a:	1dfb      	adds	r3, r7, #7
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	002b      	movs	r3, r5
 800dc80:	f001 f81e 	bl	800ecc0 <sen5x_get_version>
 800dc84:	0003      	movs	r3, r0
 800dc86:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800dc88:	19bb      	adds	r3, r7, r6
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	5e9b      	ldrsh	r3, [r3, r2]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00b      	beq.n	800dcaa <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800dc92:	19bb      	adds	r3, r7, r6
 800dc94:	2200      	movs	r2, #0
 800dc96:	5e9a      	ldrsh	r2, [r3, r2]
 800dc98:	4b45      	ldr	r3, [pc, #276]	@ (800ddb0 <probe_sen5x+0x234>)
 800dc9a:	0011      	movs	r1, r2
 800dc9c:	0018      	movs	r0, r3
 800dc9e:	f017 faff 	bl	80252a0 <iprintf>
      return error;
 800dca2:	19bb      	adds	r3, r7, r6
 800dca4:	2200      	movs	r2, #0
 800dca6:	5e9b      	ldrsh	r3, [r3, r2]
 800dca8:	e070      	b.n	800dd8c <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800dcaa:	230b      	movs	r3, #11
 800dcac:	18fb      	adds	r3, r7, r3
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	0019      	movs	r1, r3
 800dcb2:	230a      	movs	r3, #10
 800dcb4:	18fb      	adds	r3, r7, r3
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	001a      	movs	r2, r3
 800dcba:	2308      	movs	r3, #8
 800dcbc:	18fb      	adds	r3, r7, r3
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	001c      	movs	r4, r3
 800dcc2:	1dfb      	adds	r3, r7, #7
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	483b      	ldr	r0, [pc, #236]	@ (800ddb4 <probe_sen5x+0x238>)
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	0023      	movs	r3, r4
 800dccc:	f017 fae8 	bl	80252a0 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800dcd4:	262e      	movs	r6, #46	@ 0x2e
 800dcd6:	19bb      	adds	r3, r7, r6
 800dcd8:	2200      	movs	r2, #0
 800dcda:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800dcdc:	232c      	movs	r3, #44	@ 0x2c
 800dcde:	18fb      	adds	r3, r7, r3
 800dce0:	2200      	movs	r2, #0
 800dce2:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800dce4:	4934      	ldr	r1, [pc, #208]	@ (800ddb8 <probe_sen5x+0x23c>)
 800dce6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dce8:	f7f3 f9aa 	bl	8001040 <__aeabi_fmul>
 800dcec:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800dcee:	1c18      	adds	r0, r3, #0
 800dcf0:	f7f3 fd7a 	bl	80017e8 <__aeabi_f2iz>
 800dcf4:	0003      	movs	r3, r0
 800dcf6:	b218      	sxth	r0, r3
 800dcf8:	2536      	movs	r5, #54	@ 0x36
 800dcfa:	197c      	adds	r4, r7, r5
 800dcfc:	232c      	movs	r3, #44	@ 0x2c
 800dcfe:	18fb      	adds	r3, r7, r3
 800dd00:	881a      	ldrh	r2, [r3, #0]
 800dd02:	19bb      	adds	r3, r7, r6
 800dd04:	2100      	movs	r1, #0
 800dd06:	5e5b      	ldrsh	r3, [r3, r1]
 800dd08:	0019      	movs	r1, r3
 800dd0a:	f000 fec9 	bl	800eaa0 <sen5x_set_temperature_offset_parameters>
 800dd0e:	0003      	movs	r3, r0
 800dd10:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dd12:	197b      	adds	r3, r7, r5
 800dd14:	2200      	movs	r2, #0
 800dd16:	5e9b      	ldrsh	r3, [r3, r2]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d00b      	beq.n	800dd34 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800dd1c:	197b      	adds	r3, r7, r5
 800dd1e:	2200      	movs	r2, #0
 800dd20:	5e9b      	ldrsh	r3, [r3, r2]
 800dd22:	4a26      	ldr	r2, [pc, #152]	@ (800ddbc <probe_sen5x+0x240>)
 800dd24:	491c      	ldr	r1, [pc, #112]	@ (800dd98 <probe_sen5x+0x21c>)
 800dd26:	2001      	movs	r0, #1
 800dd28:	f005 f9be 	bl	80130a8 <CreateLine>
      return error;
 800dd2c:	197b      	adds	r3, r7, r5
 800dd2e:	2200      	movs	r2, #0
 800dd30:	5e9b      	ldrsh	r3, [r3, r2]
 800dd32:	e02b      	b.n	800dd8c <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800dd34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd36:	f7f5 fdad 	bl	8003894 <__aeabi_f2d>
 800dd3a:	0002      	movs	r2, r0
 800dd3c:	000b      	movs	r3, r1
 800dd3e:	4820      	ldr	r0, [pc, #128]	@ (800ddc0 <probe_sen5x+0x244>)
 800dd40:	4920      	ldr	r1, [pc, #128]	@ (800ddc4 <probe_sen5x+0x248>)
 800dd42:	9200      	str	r2, [sp, #0]
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	0002      	movs	r2, r0
 800dd48:	2002      	movs	r0, #2
 800dd4a:	f005 f9ad 	bl	80130a8 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800dd4e:	f7fb fad5 	bl	80092fc <Check_USB_PowerOn>
 800dd52:	0003      	movs	r3, r0
 800dd54:	001a      	movs	r2, r3
 800dd56:	2301      	movs	r3, #1
 800dd58:	4053      	eors	r3, r2
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00a      	beq.n	800dd76 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800dd60:	f7ff fed6 	bl	800db10 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800dd64:	f005 fee0 	bl	8013b28 <HAL_GetTick>
 800dd68:	0003      	movs	r3, r0
 800dd6a:	22fa      	movs	r2, #250	@ 0xfa
 800dd6c:	00d2      	lsls	r2, r2, #3
 800dd6e:	189a      	adds	r2, r3, r2
 800dd70:	4b15      	ldr	r3, [pc, #84]	@ (800ddc8 <probe_sen5x+0x24c>)
 800dd72:	601a      	str	r2, [r3, #0]
 800dd74:	e006      	b.n	800dd84 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800dd76:	f005 fed7 	bl	8013b28 <HAL_GetTick>
 800dd7a:	0003      	movs	r3, r0
 800dd7c:	4a13      	ldr	r2, [pc, #76]	@ (800ddcc <probe_sen5x+0x250>)
 800dd7e:	189a      	adds	r2, r3, r2
 800dd80:	4b11      	ldr	r3, [pc, #68]	@ (800ddc8 <probe_sen5x+0x24c>)
 800dd82:	601a      	str	r2, [r3, #0]
  }
  return error;
 800dd84:	2336      	movs	r3, #54	@ 0x36
 800dd86:	18fb      	adds	r3, r7, r3
 800dd88:	2200      	movs	r2, #0
 800dd8a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800dd8c:	0018      	movs	r0, r3
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	b00f      	add	sp, #60	@ 0x3c
 800dd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd94:	0802c8e4 	.word	0x0802c8e4
 800dd98:	0802c894 	.word	0x0802c894
 800dd9c:	0802c910 	.word	0x0802c910
 800dda0:	0802c940 	.word	0x0802c940
 800dda4:	20000ed0 	.word	0x20000ed0
 800dda8:	0802c954 	.word	0x0802c954
 800ddac:	0802c984 	.word	0x0802c984
 800ddb0:	0802c998 	.word	0x0802c998
 800ddb4:	0802c9c4 	.word	0x0802c9c4
 800ddb8:	43480000 	.word	0x43480000
 800ddbc:	0802c9e8 	.word	0x0802c9e8
 800ddc0:	0802ca28 	.word	0x0802ca28
 800ddc4:	0802c828 	.word	0x0802c828
 800ddc8:	20000edc 	.word	0x20000edc
 800ddcc:	00006d60 	.word	0x00006d60

0800ddd0 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800ddd0:	b590      	push	{r4, r7, lr}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800ddd6:	1dbb      	adds	r3, r7, #6
 800ddd8:	2200      	movs	r2, #0
 800ddda:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800dddc:	4b1b      	ldr	r3, [pc, #108]	@ (800de4c <sen5x_lightup_measurement+0x7c>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00b      	beq.n	800ddfc <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800dde4:	4a1a      	ldr	r2, [pc, #104]	@ (800de50 <sen5x_lightup_measurement+0x80>)
 800dde6:	4b1b      	ldr	r3, [pc, #108]	@ (800de54 <sen5x_lightup_measurement+0x84>)
 800dde8:	0019      	movs	r1, r3
 800ddea:	2002      	movs	r0, #2
 800ddec:	f005 f95c 	bl	80130a8 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800ddf0:	1dbc      	adds	r4, r7, #6
 800ddf2:	f000 fce1 	bl	800e7b8 <sen5x_start_measurement_without_pm>
 800ddf6:	0003      	movs	r3, r0
 800ddf8:	8023      	strh	r3, [r4, #0]
 800ddfa:	e00a      	b.n	800de12 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800ddfc:	4a16      	ldr	r2, [pc, #88]	@ (800de58 <sen5x_lightup_measurement+0x88>)
 800ddfe:	4b15      	ldr	r3, [pc, #84]	@ (800de54 <sen5x_lightup_measurement+0x84>)
 800de00:	0019      	movs	r1, r3
 800de02:	2002      	movs	r0, #2
 800de04:	f005 f950 	bl	80130a8 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800de08:	1dbc      	adds	r4, r7, #6
 800de0a:	f000 fca7 	bl	800e75c <sen5x_start_measurement>
 800de0e:	0003      	movs	r3, r0
 800de10:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800de12:	1dbb      	adds	r3, r7, #6
 800de14:	2200      	movs	r2, #0
 800de16:	5e9b      	ldrsh	r3, [r3, r2]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d008      	beq.n	800de2e <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800de1c:	1dbb      	adds	r3, r7, #6
 800de1e:	2200      	movs	r2, #0
 800de20:	5e9b      	ldrsh	r3, [r3, r2]
 800de22:	4a0e      	ldr	r2, [pc, #56]	@ (800de5c <sen5x_lightup_measurement+0x8c>)
 800de24:	490e      	ldr	r1, [pc, #56]	@ (800de60 <sen5x_lightup_measurement+0x90>)
 800de26:	2001      	movs	r0, #1
 800de28:	f005 f93e 	bl	80130a8 <CreateLine>
 800de2c:	e007      	b.n	800de3e <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800de2e:	f7fb fa95 	bl	800935c <showTime>
    Info("sen5x_start_measurement executed");
 800de32:	4a0c      	ldr	r2, [pc, #48]	@ (800de64 <sen5x_lightup_measurement+0x94>)
 800de34:	4b07      	ldr	r3, [pc, #28]	@ (800de54 <sen5x_lightup_measurement+0x84>)
 800de36:	0019      	movs	r1, r3
 800de38:	2002      	movs	r0, #2
 800de3a:	f005 f935 	bl	80130a8 <CreateLine>
  }
  return error;
 800de3e:	1dbb      	adds	r3, r7, #6
 800de40:	2200      	movs	r2, #0
 800de42:	5e9b      	ldrsh	r3, [r3, r2]
}
 800de44:	0018      	movs	r0, r3
 800de46:	46bd      	mov	sp, r7
 800de48:	b003      	add	sp, #12
 800de4a:	bd90      	pop	{r4, r7, pc}
 800de4c:	20000ece 	.word	0x20000ece
 800de50:	0802ca60 	.word	0x0802ca60
 800de54:	0802c828 	.word	0x0802c828
 800de58:	0802ca8c 	.word	0x0802ca8c
 800de5c:	0802caac 	.word	0x0802caac
 800de60:	0802c894 	.word	0x0802c894
 800de64:	0802cadc 	.word	0x0802cadc

0800de68 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800de68:	b590      	push	{r4, r7, lr}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800de6e:	1dbb      	adds	r3, r7, #6
 800de70:	2200      	movs	r2, #0
 800de72:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800de74:	4b21      	ldr	r3, [pc, #132]	@ (800defc <sen5x_extinguish_measurement+0x94>)
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d01e      	beq.n	800deba <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800de7c:	4a20      	ldr	r2, [pc, #128]	@ (800df00 <sen5x_extinguish_measurement+0x98>)
 800de7e:	4b21      	ldr	r3, [pc, #132]	@ (800df04 <sen5x_extinguish_measurement+0x9c>)
 800de80:	0019      	movs	r1, r3
 800de82:	2002      	movs	r0, #2
 800de84:	f005 f910 	bl	80130a8 <CreateLine>
    Info("PM measurement is disabled");
 800de88:	4a1f      	ldr	r2, [pc, #124]	@ (800df08 <sen5x_extinguish_measurement+0xa0>)
 800de8a:	4b1e      	ldr	r3, [pc, #120]	@ (800df04 <sen5x_extinguish_measurement+0x9c>)
 800de8c:	0019      	movs	r1, r3
 800de8e:	2002      	movs	r0, #2
 800de90:	f005 f90a 	bl	80130a8 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800de94:	1dbc      	adds	r4, r7, #6
 800de96:	f000 fc8f 	bl	800e7b8 <sen5x_start_measurement_without_pm>
 800de9a:	0003      	movs	r3, r0
 800de9c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800de9e:	1dbb      	adds	r3, r7, #6
 800dea0:	2200      	movs	r2, #0
 800dea2:	5e9b      	ldrsh	r3, [r3, r2]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d022      	beq.n	800deee <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800dea8:	1dbb      	adds	r3, r7, #6
 800deaa:	2200      	movs	r2, #0
 800deac:	5e9b      	ldrsh	r3, [r3, r2]
 800deae:	4a17      	ldr	r2, [pc, #92]	@ (800df0c <sen5x_extinguish_measurement+0xa4>)
 800deb0:	4917      	ldr	r1, [pc, #92]	@ (800df10 <sen5x_extinguish_measurement+0xa8>)
 800deb2:	2001      	movs	r0, #1
 800deb4:	f005 f8f8 	bl	80130a8 <CreateLine>
 800deb8:	e019      	b.n	800deee <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800deba:	1dbc      	adds	r4, r7, #6
 800debc:	f000 fcaa 	bl	800e814 <sen5x_stop_measurement>
 800dec0:	0003      	movs	r3, r0
 800dec2:	8023      	strh	r3, [r4, #0]
    showTime();
 800dec4:	f7fb fa4a 	bl	800935c <showTime>
    Info("sen5x_stop_measurement executed");
 800dec8:	4a12      	ldr	r2, [pc, #72]	@ (800df14 <sen5x_extinguish_measurement+0xac>)
 800deca:	4b0e      	ldr	r3, [pc, #56]	@ (800df04 <sen5x_extinguish_measurement+0x9c>)
 800decc:	0019      	movs	r1, r3
 800dece:	2002      	movs	r0, #2
 800ded0:	f005 f8ea 	bl	80130a8 <CreateLine>
    if (error) {
 800ded4:	1dbb      	adds	r3, r7, #6
 800ded6:	2200      	movs	r2, #0
 800ded8:	5e9b      	ldrsh	r3, [r3, r2]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d007      	beq.n	800deee <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800dede:	1dbb      	adds	r3, r7, #6
 800dee0:	2200      	movs	r2, #0
 800dee2:	5e9b      	ldrsh	r3, [r3, r2]
 800dee4:	4a0c      	ldr	r2, [pc, #48]	@ (800df18 <sen5x_extinguish_measurement+0xb0>)
 800dee6:	490a      	ldr	r1, [pc, #40]	@ (800df10 <sen5x_extinguish_measurement+0xa8>)
 800dee8:	2001      	movs	r0, #1
 800deea:	f005 f8dd 	bl	80130a8 <CreateLine>
    }
  }
  return error;
 800deee:	1dbb      	adds	r3, r7, #6
 800def0:	2200      	movs	r2, #0
 800def2:	5e9b      	ldrsh	r3, [r3, r2]
}
 800def4:	0018      	movs	r0, r3
 800def6:	46bd      	mov	sp, r7
 800def8:	b003      	add	sp, #12
 800defa:	bd90      	pop	{r4, r7, pc}
 800defc:	20000ece 	.word	0x20000ece
 800df00:	0802cb00 	.word	0x0802cb00
 800df04:	0802c828 	.word	0x0802c828
 800df08:	0802cb38 	.word	0x0802cb38
 800df0c:	0802cb54 	.word	0x0802cb54
 800df10:	0802c894 	.word	0x0802c894
 800df14:	0802cb94 	.word	0x0802cb94
 800df18:	0802cbb4 	.word	0x0802cbb4

0800df1c <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800df1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df1e:	b08d      	sub	sp, #52	@ 0x34
 800df20:	af04      	add	r7, sp, #16
 800df22:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800df24:	261e      	movs	r6, #30
 800df26:	19bb      	adds	r3, r7, r6
 800df28:	2200      	movs	r2, #0
 800df2a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800df2c:	19bc      	adds	r4, r7, r6
 800df2e:	2316      	movs	r3, #22
 800df30:	18fd      	adds	r5, r7, r3
 800df32:	2318      	movs	r3, #24
 800df34:	18fa      	adds	r2, r7, r3
 800df36:	231a      	movs	r3, #26
 800df38:	18f9      	adds	r1, r7, r3
 800df3a:	231c      	movs	r3, #28
 800df3c:	18f8      	adds	r0, r7, r3
 800df3e:	230e      	movs	r3, #14
 800df40:	18fb      	adds	r3, r7, r3
 800df42:	9303      	str	r3, [sp, #12]
 800df44:	2310      	movs	r3, #16
 800df46:	18fb      	adds	r3, r7, r3
 800df48:	9302      	str	r3, [sp, #8]
 800df4a:	2312      	movs	r3, #18
 800df4c:	18fb      	adds	r3, r7, r3
 800df4e:	9301      	str	r3, [sp, #4]
 800df50:	2314      	movs	r3, #20
 800df52:	18fb      	adds	r3, r7, r3
 800df54:	9300      	str	r3, [sp, #0]
 800df56:	002b      	movs	r3, r5
 800df58:	f000 fcde 	bl	800e918 <sen5x_read_measured_values>
 800df5c:	0003      	movs	r3, r0
 800df5e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800df60:	19bb      	adds	r3, r7, r6
 800df62:	2200      	movs	r2, #0
 800df64:	5e9b      	ldrsh	r3, [r3, r2]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d003      	beq.n	800df72 <sen5x_read_measurement+0x56>
    return error;
 800df6a:	19bb      	adds	r3, r7, r6
 800df6c:	2200      	movs	r2, #0
 800df6e:	5e9b      	ldrsh	r3, [r3, r2]
 800df70:	e02c      	b.n	800dfcc <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800df72:	231c      	movs	r3, #28
 800df74:	18fb      	adds	r3, r7, r3
 800df76:	881a      	ldrh	r2, [r3, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800df7c:	231a      	movs	r3, #26
 800df7e:	18fb      	adds	r3, r7, r3
 800df80:	881a      	ldrh	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800df86:	2318      	movs	r3, #24
 800df88:	18fb      	adds	r3, r7, r3
 800df8a:	881a      	ldrh	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800df90:	2316      	movs	r3, #22
 800df92:	18fb      	adds	r3, r7, r3
 800df94:	881a      	ldrh	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800df9a:	2314      	movs	r3, #20
 800df9c:	18fb      	adds	r3, r7, r3
 800df9e:	2200      	movs	r2, #0
 800dfa0:	5e9a      	ldrsh	r2, [r3, r2]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800dfa6:	2312      	movs	r3, #18
 800dfa8:	18fb      	adds	r3, r7, r3
 800dfaa:	2200      	movs	r2, #0
 800dfac:	5e9a      	ldrsh	r2, [r3, r2]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800dfb2:	2310      	movs	r3, #16
 800dfb4:	18fb      	adds	r3, r7, r3
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	5e9a      	ldrsh	r2, [r3, r2]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800dfbe:	230e      	movs	r3, #14
 800dfc0:	18fb      	adds	r3, r7, r3
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	5e9a      	ldrsh	r2, [r3, r2]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	81da      	strh	r2, [r3, #14]
  return 0;
 800dfca:	2300      	movs	r3, #0
}
 800dfcc:	0018      	movs	r0, r3
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	b009      	add	sp, #36	@ 0x24
 800dfd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dfd4 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800dfd8:	4b63      	ldr	r3, [pc, #396]	@ (800e168 <sen5x_printvalues+0x194>)
 800dfda:	881b      	ldrh	r3, [r3, #0]
 800dfdc:	4a63      	ldr	r2, [pc, #396]	@ (800e16c <sen5x_printvalues+0x198>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d013      	beq.n	800e00a <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800dfe2:	4b61      	ldr	r3, [pc, #388]	@ (800e168 <sen5x_printvalues+0x194>)
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	0018      	movs	r0, r3
 800dfe8:	f7f3 fc1e 	bl	8001828 <__aeabi_i2f>
 800dfec:	1c03      	adds	r3, r0, #0
 800dfee:	4960      	ldr	r1, [pc, #384]	@ (800e170 <sen5x_printvalues+0x19c>)
 800dff0:	1c18      	adds	r0, r3, #0
 800dff2:	f7f2 fe57 	bl	8000ca4 <__aeabi_fdiv>
 800dff6:	1c03      	adds	r3, r0, #0
 800dff8:	1c18      	adds	r0, r3, #0
 800dffa:	f7f5 fc4b 	bl	8003894 <__aeabi_f2d>
 800dffe:	0002      	movs	r2, r0
 800e000:	000b      	movs	r3, r1
 800e002:	495c      	ldr	r1, [pc, #368]	@ (800e174 <sen5x_printvalues+0x1a0>)
 800e004:	0008      	movs	r0, r1
 800e006:	f017 f94b 	bl	80252a0 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e00a:	4b57      	ldr	r3, [pc, #348]	@ (800e168 <sen5x_printvalues+0x194>)
 800e00c:	885b      	ldrh	r3, [r3, #2]
 800e00e:	4a57      	ldr	r2, [pc, #348]	@ (800e16c <sen5x_printvalues+0x198>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d013      	beq.n	800e03c <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800e014:	4b54      	ldr	r3, [pc, #336]	@ (800e168 <sen5x_printvalues+0x194>)
 800e016:	885b      	ldrh	r3, [r3, #2]
 800e018:	0018      	movs	r0, r3
 800e01a:	f7f3 fc05 	bl	8001828 <__aeabi_i2f>
 800e01e:	1c03      	adds	r3, r0, #0
 800e020:	4953      	ldr	r1, [pc, #332]	@ (800e170 <sen5x_printvalues+0x19c>)
 800e022:	1c18      	adds	r0, r3, #0
 800e024:	f7f2 fe3e 	bl	8000ca4 <__aeabi_fdiv>
 800e028:	1c03      	adds	r3, r0, #0
 800e02a:	1c18      	adds	r0, r3, #0
 800e02c:	f7f5 fc32 	bl	8003894 <__aeabi_f2d>
 800e030:	0002      	movs	r2, r0
 800e032:	000b      	movs	r3, r1
 800e034:	4950      	ldr	r1, [pc, #320]	@ (800e178 <sen5x_printvalues+0x1a4>)
 800e036:	0008      	movs	r0, r1
 800e038:	f017 f932 	bl	80252a0 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e03c:	4b4a      	ldr	r3, [pc, #296]	@ (800e168 <sen5x_printvalues+0x194>)
 800e03e:	889b      	ldrh	r3, [r3, #4]
 800e040:	4a4a      	ldr	r2, [pc, #296]	@ (800e16c <sen5x_printvalues+0x198>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d013      	beq.n	800e06e <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800e046:	4b48      	ldr	r3, [pc, #288]	@ (800e168 <sen5x_printvalues+0x194>)
 800e048:	889b      	ldrh	r3, [r3, #4]
 800e04a:	0018      	movs	r0, r3
 800e04c:	f7f3 fbec 	bl	8001828 <__aeabi_i2f>
 800e050:	1c03      	adds	r3, r0, #0
 800e052:	4947      	ldr	r1, [pc, #284]	@ (800e170 <sen5x_printvalues+0x19c>)
 800e054:	1c18      	adds	r0, r3, #0
 800e056:	f7f2 fe25 	bl	8000ca4 <__aeabi_fdiv>
 800e05a:	1c03      	adds	r3, r0, #0
 800e05c:	1c18      	adds	r0, r3, #0
 800e05e:	f7f5 fc19 	bl	8003894 <__aeabi_f2d>
 800e062:	0002      	movs	r2, r0
 800e064:	000b      	movs	r3, r1
 800e066:	4945      	ldr	r1, [pc, #276]	@ (800e17c <sen5x_printvalues+0x1a8>)
 800e068:	0008      	movs	r0, r1
 800e06a:	f017 f919 	bl	80252a0 <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e06e:	4b3e      	ldr	r3, [pc, #248]	@ (800e168 <sen5x_printvalues+0x194>)
 800e070:	88db      	ldrh	r3, [r3, #6]
 800e072:	4a3e      	ldr	r2, [pc, #248]	@ (800e16c <sen5x_printvalues+0x198>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d013      	beq.n	800e0a0 <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800e078:	4b3b      	ldr	r3, [pc, #236]	@ (800e168 <sen5x_printvalues+0x194>)
 800e07a:	88db      	ldrh	r3, [r3, #6]
 800e07c:	0018      	movs	r0, r3
 800e07e:	f7f3 fbd3 	bl	8001828 <__aeabi_i2f>
 800e082:	1c03      	adds	r3, r0, #0
 800e084:	493a      	ldr	r1, [pc, #232]	@ (800e170 <sen5x_printvalues+0x19c>)
 800e086:	1c18      	adds	r0, r3, #0
 800e088:	f7f2 fe0c 	bl	8000ca4 <__aeabi_fdiv>
 800e08c:	1c03      	adds	r3, r0, #0
 800e08e:	1c18      	adds	r0, r3, #0
 800e090:	f7f5 fc00 	bl	8003894 <__aeabi_f2d>
 800e094:	0002      	movs	r2, r0
 800e096:	000b      	movs	r3, r1
 800e098:	4939      	ldr	r1, [pc, #228]	@ (800e180 <sen5x_printvalues+0x1ac>)
 800e09a:	0008      	movs	r0, r1
 800e09c:	f017 f900 	bl	80252a0 <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800e0a0:	4b31      	ldr	r3, [pc, #196]	@ (800e168 <sen5x_printvalues+0x194>)
 800e0a2:	2208      	movs	r2, #8
 800e0a4:	5e9b      	ldrsh	r3, [r3, r2]
 800e0a6:	4a37      	ldr	r2, [pc, #220]	@ (800e184 <sen5x_printvalues+0x1b0>)
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d014      	beq.n	800e0d6 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800e0ac:	4b2e      	ldr	r3, [pc, #184]	@ (800e168 <sen5x_printvalues+0x194>)
 800e0ae:	2208      	movs	r2, #8
 800e0b0:	5e9b      	ldrsh	r3, [r3, r2]
 800e0b2:	0018      	movs	r0, r3
 800e0b4:	f7f3 fbb8 	bl	8001828 <__aeabi_i2f>
 800e0b8:	1c03      	adds	r3, r0, #0
 800e0ba:	4933      	ldr	r1, [pc, #204]	@ (800e188 <sen5x_printvalues+0x1b4>)
 800e0bc:	1c18      	adds	r0, r3, #0
 800e0be:	f7f2 fdf1 	bl	8000ca4 <__aeabi_fdiv>
 800e0c2:	1c03      	adds	r3, r0, #0
 800e0c4:	1c18      	adds	r0, r3, #0
 800e0c6:	f7f5 fbe5 	bl	8003894 <__aeabi_f2d>
 800e0ca:	0002      	movs	r2, r0
 800e0cc:	000b      	movs	r3, r1
 800e0ce:	492f      	ldr	r1, [pc, #188]	@ (800e18c <sen5x_printvalues+0x1b8>)
 800e0d0:	0008      	movs	r0, r1
 800e0d2:	f017 f8e5 	bl	80252a0 <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800e0d6:	4b24      	ldr	r3, [pc, #144]	@ (800e168 <sen5x_printvalues+0x194>)
 800e0d8:	220a      	movs	r2, #10
 800e0da:	5e9b      	ldrsh	r3, [r3, r2]
 800e0dc:	4a29      	ldr	r2, [pc, #164]	@ (800e184 <sen5x_printvalues+0x1b0>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d014      	beq.n	800e10c <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800e0e2:	4b21      	ldr	r3, [pc, #132]	@ (800e168 <sen5x_printvalues+0x194>)
 800e0e4:	220a      	movs	r2, #10
 800e0e6:	5e9b      	ldrsh	r3, [r3, r2]
 800e0e8:	0018      	movs	r0, r3
 800e0ea:	f7f3 fb9d 	bl	8001828 <__aeabi_i2f>
 800e0ee:	1c03      	adds	r3, r0, #0
 800e0f0:	4927      	ldr	r1, [pc, #156]	@ (800e190 <sen5x_printvalues+0x1bc>)
 800e0f2:	1c18      	adds	r0, r3, #0
 800e0f4:	f7f2 fdd6 	bl	8000ca4 <__aeabi_fdiv>
 800e0f8:	1c03      	adds	r3, r0, #0
 800e0fa:	1c18      	adds	r0, r3, #0
 800e0fc:	f7f5 fbca 	bl	8003894 <__aeabi_f2d>
 800e100:	0002      	movs	r2, r0
 800e102:	000b      	movs	r3, r1
 800e104:	4923      	ldr	r1, [pc, #140]	@ (800e194 <sen5x_printvalues+0x1c0>)
 800e106:	0008      	movs	r0, r1
 800e108:	f017 f8ca 	bl	80252a0 <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800e10c:	4b16      	ldr	r3, [pc, #88]	@ (800e168 <sen5x_printvalues+0x194>)
 800e10e:	220c      	movs	r2, #12
 800e110:	5e9b      	ldrsh	r3, [r3, r2]
 800e112:	4a1c      	ldr	r2, [pc, #112]	@ (800e184 <sen5x_printvalues+0x1b0>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d00e      	beq.n	800e136 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800e118:	4b13      	ldr	r3, [pc, #76]	@ (800e168 <sen5x_printvalues+0x194>)
 800e11a:	220c      	movs	r2, #12
 800e11c:	5e9b      	ldrsh	r3, [r3, r2]
 800e11e:	210a      	movs	r1, #10
 800e120:	0018      	movs	r0, r3
 800e122:	f7f2 f8c9 	bl	80002b8 <__divsi3>
 800e126:	0003      	movs	r3, r0
 800e128:	b21b      	sxth	r3, r3
 800e12a:	001a      	movs	r2, r3
 800e12c:	4b1a      	ldr	r3, [pc, #104]	@ (800e198 <sen5x_printvalues+0x1c4>)
 800e12e:	0011      	movs	r1, r2
 800e130:	0018      	movs	r0, r3
 800e132:	f017 f8b5 	bl	80252a0 <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800e136:	4b0c      	ldr	r3, [pc, #48]	@ (800e168 <sen5x_printvalues+0x194>)
 800e138:	220e      	movs	r2, #14
 800e13a:	5e9b      	ldrsh	r3, [r3, r2]
 800e13c:	4a11      	ldr	r2, [pc, #68]	@ (800e184 <sen5x_printvalues+0x1b0>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d00e      	beq.n	800e160 <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800e142:	4b09      	ldr	r3, [pc, #36]	@ (800e168 <sen5x_printvalues+0x194>)
 800e144:	220e      	movs	r2, #14
 800e146:	5e9b      	ldrsh	r3, [r3, r2]
 800e148:	210a      	movs	r1, #10
 800e14a:	0018      	movs	r0, r3
 800e14c:	f7f2 f8b4 	bl	80002b8 <__divsi3>
 800e150:	0003      	movs	r3, r0
 800e152:	b21b      	sxth	r3, r3
 800e154:	001a      	movs	r2, r3
 800e156:	4b11      	ldr	r3, [pc, #68]	@ (800e19c <sen5x_printvalues+0x1c8>)
 800e158:	0011      	movs	r1, r2
 800e15a:	0018      	movs	r0, r3
 800e15c:	f017 f8a0 	bl	80252a0 <iprintf>
  }
}
 800e160:	46c0      	nop			@ (mov r8, r8)
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	46c0      	nop			@ (mov r8, r8)
 800e168:	20000ee0 	.word	0x20000ee0
 800e16c:	0000ffff 	.word	0x0000ffff
 800e170:	41200000 	.word	0x41200000
 800e174:	0802cbe4 	.word	0x0802cbe4
 800e178:	0802cc10 	.word	0x0802cc10
 800e17c:	0802cc3c 	.word	0x0802cc3c
 800e180:	0802cc68 	.word	0x0802cc68
 800e184:	00007fff 	.word	0x00007fff
 800e188:	42c80000 	.word	0x42c80000
 800e18c:	0802cc94 	.word	0x0802cc94
 800e190:	43480000 	.word	0x43480000
 800e194:	0802ccb8 	.word	0x0802ccb8
 800e198:	0802cce0 	.word	0x0802cce0
 800e19c:	0802ccf8 	.word	0x0802ccf8

0800e1a0 <sen5xStore>:

void sen5xStore() {
 800e1a0:	b5b0      	push	{r4, r5, r7, lr}
 800e1a2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800e1a4:	4b41      	ldr	r3, [pc, #260]	@ (800e2ac <sen5xStore+0x10c>)
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	4a41      	ldr	r2, [pc, #260]	@ (800e2b0 <sen5xStore+0x110>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d004      	beq.n	800e1b8 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800e1ae:	4b3f      	ldr	r3, [pc, #252]	@ (800e2ac <sen5xStore+0x10c>)
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	0018      	movs	r0, r3
 800e1b4:	f7f6 fd22 	bl	8004bfc <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e1b8:	4b3c      	ldr	r3, [pc, #240]	@ (800e2ac <sen5xStore+0x10c>)
 800e1ba:	885b      	ldrh	r3, [r3, #2]
 800e1bc:	4a3c      	ldr	r2, [pc, #240]	@ (800e2b0 <sen5xStore+0x110>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d004      	beq.n	800e1cc <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800e1c2:	4b3a      	ldr	r3, [pc, #232]	@ (800e2ac <sen5xStore+0x10c>)
 800e1c4:	885b      	ldrh	r3, [r3, #2]
 800e1c6:	0018      	movs	r0, r3
 800e1c8:	f7f6 fd44 	bl	8004c54 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e1cc:	4b37      	ldr	r3, [pc, #220]	@ (800e2ac <sen5xStore+0x10c>)
 800e1ce:	889b      	ldrh	r3, [r3, #4]
 800e1d0:	4a37      	ldr	r2, [pc, #220]	@ (800e2b0 <sen5xStore+0x110>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d004      	beq.n	800e1e0 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800e1d6:	4b35      	ldr	r3, [pc, #212]	@ (800e2ac <sen5xStore+0x10c>)
 800e1d8:	889b      	ldrh	r3, [r3, #4]
 800e1da:	0018      	movs	r0, r3
 800e1dc:	f7f6 fd66 	bl	8004cac <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e1e0:	4b32      	ldr	r3, [pc, #200]	@ (800e2ac <sen5xStore+0x10c>)
 800e1e2:	88db      	ldrh	r3, [r3, #6]
 800e1e4:	4a32      	ldr	r2, [pc, #200]	@ (800e2b0 <sen5xStore+0x110>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d004      	beq.n	800e1f4 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800e1ea:	4b30      	ldr	r3, [pc, #192]	@ (800e2ac <sen5xStore+0x10c>)
 800e1ec:	88db      	ldrh	r3, [r3, #6]
 800e1ee:	0018      	movs	r0, r3
 800e1f0:	f7f6 fd88 	bl	8004d04 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e1f4:	4b2f      	ldr	r3, [pc, #188]	@ (800e2b4 <sen5xStore+0x114>)
 800e1f6:	791b      	ldrb	r3, [r3, #4]
 800e1f8:	2b34      	cmp	r3, #52	@ 0x34
 800e1fa:	d003      	beq.n	800e204 <sen5xStore+0x64>
 800e1fc:	4b2d      	ldr	r3, [pc, #180]	@ (800e2b4 <sen5xStore+0x114>)
 800e1fe:	791b      	ldrb	r3, [r3, #4]
 800e200:	2b35      	cmp	r3, #53	@ 0x35
 800e202:	d14f      	bne.n	800e2a4 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800e204:	4b29      	ldr	r3, [pc, #164]	@ (800e2ac <sen5xStore+0x10c>)
 800e206:	220a      	movs	r2, #10
 800e208:	5e9b      	ldrsh	r3, [r3, r2]
 800e20a:	0018      	movs	r0, r3
 800e20c:	f7f3 fb0c 	bl	8001828 <__aeabi_i2f>
 800e210:	1c04      	adds	r4, r0, #0
 800e212:	4b26      	ldr	r3, [pc, #152]	@ (800e2ac <sen5xStore+0x10c>)
 800e214:	2208      	movs	r2, #8
 800e216:	5e9b      	ldrsh	r3, [r3, r2]
 800e218:	0018      	movs	r0, r3
 800e21a:	f7f3 fb05 	bl	8001828 <__aeabi_i2f>
 800e21e:	1c03      	adds	r3, r0, #0
 800e220:	1c19      	adds	r1, r3, #0
 800e222:	1c20      	adds	r0, r4, #0
 800e224:	f7f6 fdb8 	bl	8004d98 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800e228:	4b23      	ldr	r3, [pc, #140]	@ (800e2b8 <sen5xStore+0x118>)
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2201      	movs	r2, #1
 800e22e:	4053      	eors	r3, r2
 800e230:	b2db      	uxtb	r3, r3
 800e232:	2b00      	cmp	r3, #0
 800e234:	d103      	bne.n	800e23e <sen5xStore+0x9e>
 800e236:	4b21      	ldr	r3, [pc, #132]	@ (800e2bc <sen5xStore+0x11c>)
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d032      	beq.n	800e2a4 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800e23e:	4b1b      	ldr	r3, [pc, #108]	@ (800e2ac <sen5xStore+0x10c>)
 800e240:	220c      	movs	r2, #12
 800e242:	5e9b      	ldrsh	r3, [r3, r2]
 800e244:	4a1e      	ldr	r2, [pc, #120]	@ (800e2c0 <sen5xStore+0x120>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d019      	beq.n	800e27e <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800e24a:	4b18      	ldr	r3, [pc, #96]	@ (800e2ac <sen5xStore+0x10c>)
 800e24c:	220c      	movs	r2, #12
 800e24e:	5e9b      	ldrsh	r3, [r3, r2]
 800e250:	210a      	movs	r1, #10
 800e252:	0018      	movs	r0, r3
 800e254:	f7f2 f830 	bl	80002b8 <__divsi3>
 800e258:	0003      	movs	r3, r0
 800e25a:	b21b      	sxth	r3, r3
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	0018      	movs	r0, r3
 800e260:	f003 feba 	bl	8011fd8 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800e264:	4b11      	ldr	r3, [pc, #68]	@ (800e2ac <sen5xStore+0x10c>)
 800e266:	220c      	movs	r2, #12
 800e268:	5e9b      	ldrsh	r3, [r3, r2]
 800e26a:	210a      	movs	r1, #10
 800e26c:	0018      	movs	r0, r3
 800e26e:	f7f2 f823 	bl	80002b8 <__divsi3>
 800e272:	0003      	movs	r3, r0
 800e274:	b21b      	sxth	r3, r3
 800e276:	b29b      	uxth	r3, r3
 800e278:	0018      	movs	r0, r3
 800e27a:	f7f6 fbf1 	bl	8004a60 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800e27e:	4b0b      	ldr	r3, [pc, #44]	@ (800e2ac <sen5xStore+0x10c>)
 800e280:	220e      	movs	r2, #14
 800e282:	5e9b      	ldrsh	r3, [r3, r2]
 800e284:	4a0e      	ldr	r2, [pc, #56]	@ (800e2c0 <sen5xStore+0x120>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d00c      	beq.n	800e2a4 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800e28a:	4b08      	ldr	r3, [pc, #32]	@ (800e2ac <sen5xStore+0x10c>)
 800e28c:	220e      	movs	r2, #14
 800e28e:	5e9b      	ldrsh	r3, [r3, r2]
 800e290:	210a      	movs	r1, #10
 800e292:	0018      	movs	r0, r3
 800e294:	f7f2 f810 	bl	80002b8 <__divsi3>
 800e298:	0003      	movs	r3, r0
 800e29a:	b21b      	sxth	r3, r3
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	0018      	movs	r0, r3
 800e2a0:	f7f6 fd5c 	bl	8004d5c <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800e2a4:	46c0      	nop			@ (mov r8, r8)
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bdb0      	pop	{r4, r5, r7, pc}
 800e2aa:	46c0      	nop			@ (mov r8, r8)
 800e2ac:	20000ee0 	.word	0x20000ee0
 800e2b0:	0000ffff 	.word	0x0000ffff
 800e2b4:	20000ed0 	.word	0x20000ed0
 800e2b8:	20000ece 	.word	0x20000ece
 800e2bc:	20001e5d 	.word	0x20001e5d
 800e2c0:	00007fff 	.word	0x00007fff

0800e2c4 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800e2c4:	b590      	push	{r4, r7, lr}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af02      	add	r7, sp, #8
 800e2ca:	6039      	str	r1, [r7, #0]
 800e2cc:	0011      	movs	r1, r2
 800e2ce:	1dfb      	adds	r3, r7, #7
 800e2d0:	1c02      	adds	r2, r0, #0
 800e2d2:	701a      	strb	r2, [r3, #0]
 800e2d4:	1d3b      	adds	r3, r7, #4
 800e2d6:	1c0a      	adds	r2, r1, #0
 800e2d8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800e2da:	1dfb      	adds	r3, r7, #7
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	18db      	adds	r3, r3, r3
 800e2e2:	b299      	uxth	r1, r3
 800e2e4:	1d3b      	adds	r3, r7, #4
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	683a      	ldr	r2, [r7, #0]
 800e2ea:	4805      	ldr	r0, [pc, #20]	@ (800e300 <sensirion_i2c_hal_read+0x3c>)
 800e2ec:	2464      	movs	r4, #100	@ 0x64
 800e2ee:	9400      	str	r4, [sp, #0]
 800e2f0:	f007 f882 	bl	80153f8 <HAL_I2C_Master_Receive>
 800e2f4:	0003      	movs	r3, r0
 800e2f6:	b25b      	sxtb	r3, r3
}
 800e2f8:	0018      	movs	r0, r3
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	b003      	add	sp, #12
 800e2fe:	bd90      	pop	{r4, r7, pc}
 800e300:	20000ca4 	.word	0x20000ca4

0800e304 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800e304:	b590      	push	{r4, r7, lr}
 800e306:	b085      	sub	sp, #20
 800e308:	af02      	add	r7, sp, #8
 800e30a:	6039      	str	r1, [r7, #0]
 800e30c:	0011      	movs	r1, r2
 800e30e:	1dfb      	adds	r3, r7, #7
 800e310:	1c02      	adds	r2, r0, #0
 800e312:	701a      	strb	r2, [r3, #0]
 800e314:	1d3b      	adds	r3, r7, #4
 800e316:	1c0a      	adds	r2, r1, #0
 800e318:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800e31a:	1dfb      	adds	r3, r7, #7
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	b29b      	uxth	r3, r3
 800e320:	18db      	adds	r3, r3, r3
 800e322:	b299      	uxth	r1, r3
 800e324:	1d3b      	adds	r3, r7, #4
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	683a      	ldr	r2, [r7, #0]
 800e32a:	4805      	ldr	r0, [pc, #20]	@ (800e340 <sensirion_i2c_hal_write+0x3c>)
 800e32c:	2464      	movs	r4, #100	@ 0x64
 800e32e:	9400      	str	r4, [sp, #0]
 800e330:	f006 ff5a 	bl	80151e8 <HAL_I2C_Master_Transmit>
 800e334:	0003      	movs	r3, r0
 800e336:	b25b      	sxtb	r3, r3
}
 800e338:	0018      	movs	r0, r3
 800e33a:	46bd      	mov	sp, r7
 800e33c:	b003      	add	sp, #12
 800e33e:	bd90      	pop	{r4, r7, pc}
 800e340:	20000ca4 	.word	0x20000ca4

0800e344 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	22fa      	movs	r2, #250	@ 0xfa
 800e350:	0091      	lsls	r1, r2, #2
 800e352:	0018      	movs	r0, r3
 800e354:	f7f1 ff26 	bl	80001a4 <__udivsi3>
 800e358:	0003      	movs	r3, r0
 800e35a:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	22fa      	movs	r2, #250	@ 0xfa
 800e360:	0091      	lsls	r1, r2, #2
 800e362:	0018      	movs	r0, r3
 800e364:	f7f1 ffa4 	bl	80002b0 <__aeabi_uidivmod>
 800e368:	1e0b      	subs	r3, r1, #0
 800e36a:	d002      	beq.n	800e372 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	3301      	adds	r3, #1
 800e370:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	0018      	movs	r0, r3
 800e376:	f005 fbe1 	bl	8013b3c <HAL_Delay>
}
 800e37a:	46c0      	nop			@ (mov r8, r8)
 800e37c:	46bd      	mov	sp, r7
 800e37e:	b004      	add	sp, #16
 800e380:	bd80      	pop	{r7, pc}
	...

0800e384 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800e38a:	2300      	movs	r3, #0
 800e38c:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800e38e:	1d3b      	adds	r3, r7, #4
 800e390:	0018      	movs	r0, r3
 800e392:	f000 fd01 	bl	800ed98 <sen5x_read_device_status>
 800e396:	1e03      	subs	r3, r0, #0
 800e398:	d007      	beq.n	800e3aa <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800e39a:	4a28      	ldr	r2, [pc, #160]	@ (800e43c <sen5x_check_for_errors+0xb8>)
 800e39c:	4b28      	ldr	r3, [pc, #160]	@ (800e440 <sen5x_check_for_errors+0xbc>)
 800e39e:	0019      	movs	r1, r3
 800e3a0:	2001      	movs	r0, #1
 800e3a2:	f004 fe81 	bl	80130a8 <CreateLine>
    return true;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e043      	b.n	800e432 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d101      	bne.n	800e3b4 <sen5x_check_for_errors+0x30>
    return false;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	e03e      	b.n	800e432 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	2380      	movs	r3, #128	@ 0x80
 800e3b8:	039b      	lsls	r3, r3, #14
 800e3ba:	4013      	ands	r3, r2
 800e3bc:	d005      	beq.n	800e3ca <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800e3be:	4a21      	ldr	r2, [pc, #132]	@ (800e444 <sen5x_check_for_errors+0xc0>)
 800e3c0:	4b21      	ldr	r3, [pc, #132]	@ (800e448 <sen5x_check_for_errors+0xc4>)
 800e3c2:	0019      	movs	r1, r3
 800e3c4:	2003      	movs	r0, #3
 800e3c6:	f004 fe6f 	bl	80130a8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	2380      	movs	r3, #128	@ 0x80
 800e3ce:	031b      	lsls	r3, r3, #12
 800e3d0:	4013      	ands	r3, r2
 800e3d2:	d005      	beq.n	800e3e0 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 800e3d4:	4a1d      	ldr	r2, [pc, #116]	@ (800e44c <sen5x_check_for_errors+0xc8>)
 800e3d6:	4b1c      	ldr	r3, [pc, #112]	@ (800e448 <sen5x_check_for_errors+0xc4>)
 800e3d8:	0019      	movs	r1, r3
 800e3da:	2003      	movs	r0, #3
 800e3dc:	f004 fe64 	bl	80130a8 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2280      	movs	r2, #128	@ 0x80
 800e3e4:	4013      	ands	r3, r2
 800e3e6:	d005      	beq.n	800e3f4 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800e3e8:	4a19      	ldr	r2, [pc, #100]	@ (800e450 <sen5x_check_for_errors+0xcc>)
 800e3ea:	4b17      	ldr	r3, [pc, #92]	@ (800e448 <sen5x_check_for_errors+0xc4>)
 800e3ec:	0019      	movs	r1, r3
 800e3ee:	2003      	movs	r0, #3
 800e3f0:	f004 fe5a 	bl	80130a8 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2240      	movs	r2, #64	@ 0x40
 800e3f8:	4013      	ands	r3, r2
 800e3fa:	d005      	beq.n	800e408 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 800e3fc:	4a15      	ldr	r2, [pc, #84]	@ (800e454 <sen5x_check_for_errors+0xd0>)
 800e3fe:	4b12      	ldr	r3, [pc, #72]	@ (800e448 <sen5x_check_for_errors+0xc4>)
 800e400:	0019      	movs	r1, r3
 800e402:	2003      	movs	r0, #3
 800e404:	f004 fe50 	bl	80130a8 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2220      	movs	r2, #32
 800e40c:	4013      	ands	r3, r2
 800e40e:	d005      	beq.n	800e41c <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 800e410:	4a11      	ldr	r2, [pc, #68]	@ (800e458 <sen5x_check_for_errors+0xd4>)
 800e412:	4b0d      	ldr	r3, [pc, #52]	@ (800e448 <sen5x_check_for_errors+0xc4>)
 800e414:	0019      	movs	r1, r3
 800e416:	2003      	movs	r0, #3
 800e418:	f004 fe46 	bl	80130a8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2210      	movs	r2, #16
 800e420:	4013      	ands	r3, r2
 800e422:	d005      	beq.n	800e430 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800e424:	4a0d      	ldr	r2, [pc, #52]	@ (800e45c <sen5x_check_for_errors+0xd8>)
 800e426:	4b08      	ldr	r3, [pc, #32]	@ (800e448 <sen5x_check_for_errors+0xc4>)
 800e428:	0019      	movs	r1, r3
 800e42a:	2003      	movs	r0, #3
 800e42c:	f004 fe3c 	bl	80130a8 <CreateLine>
  }
  return 1;
 800e430:	2301      	movs	r3, #1
}
 800e432:	0018      	movs	r0, r3
 800e434:	46bd      	mov	sp, r7
 800e436:	b002      	add	sp, #8
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	46c0      	nop			@ (mov r8, r8)
 800e43c:	0802cd10 	.word	0x0802cd10
 800e440:	0802c894 	.word	0x0802c894
 800e444:	0802cd3c 	.word	0x0802cd3c
 800e448:	0802c868 	.word	0x0802c868
 800e44c:	0802cd5c 	.word	0x0802cd5c
 800e450:	0802cd78 	.word	0x0802cd78
 800e454:	0802cd9c 	.word	0x0802cd9c
 800e458:	0802cdbc 	.word	0x0802cdbc
 800e45c:	0802cdd0 	.word	0x0802cdd0

0800e460 <set_light_on_state>:

void set_light_on_state(void) {
 800e460:	b580      	push	{r7, lr}
 800e462:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800e464:	4b15      	ldr	r3, [pc, #84]	@ (800e4bc <set_light_on_state+0x5c>)
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	2201      	movs	r2, #1
 800e46a:	4053      	eors	r3, r2
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d008      	beq.n	800e484 <set_light_on_state+0x24>
    sen5x_Power_On();
 800e472:	f7ff fb1d 	bl	800dab0 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800e476:	4a12      	ldr	r2, [pc, #72]	@ (800e4c0 <set_light_on_state+0x60>)
 800e478:	4b12      	ldr	r3, [pc, #72]	@ (800e4c4 <set_light_on_state+0x64>)
 800e47a:	0019      	movs	r1, r3
 800e47c:	2003      	movs	r0, #3
 800e47e:	f004 fe13 	bl	80130a8 <CreateLine>
 800e482:	e00a      	b.n	800e49a <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800e484:	f005 fb50 	bl	8013b28 <HAL_GetTick>
 800e488:	0002      	movs	r2, r0
 800e48a:	4b0f      	ldr	r3, [pc, #60]	@ (800e4c8 <set_light_on_state+0x68>)
 800e48c:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800e48e:	4a0f      	ldr	r2, [pc, #60]	@ (800e4cc <set_light_on_state+0x6c>)
 800e490:	4b0c      	ldr	r3, [pc, #48]	@ (800e4c4 <set_light_on_state+0x64>)
 800e492:	0019      	movs	r1, r3
 800e494:	2003      	movs	r0, #3
 800e496:	f004 fe07 	bl	80130a8 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800e49a:	f7ff fc99 	bl	800ddd0 <sen5x_lightup_measurement>
 800e49e:	1e03      	subs	r3, r0, #0
 800e4a0:	d005      	beq.n	800e4ae <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800e4a2:	4a0b      	ldr	r2, [pc, #44]	@ (800e4d0 <set_light_on_state+0x70>)
 800e4a4:	4b0b      	ldr	r3, [pc, #44]	@ (800e4d4 <set_light_on_state+0x74>)
 800e4a6:	0019      	movs	r1, r3
 800e4a8:	2001      	movs	r0, #1
 800e4aa:	f004 fdfd 	bl	80130a8 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800e4ae:	4b0a      	ldr	r3, [pc, #40]	@ (800e4d8 <set_light_on_state+0x78>)
 800e4b0:	2203      	movs	r2, #3
 800e4b2:	701a      	strb	r2, [r3, #0]
}
 800e4b4:	46c0      	nop			@ (mov r8, r8)
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	46c0      	nop			@ (mov r8, r8)
 800e4bc:	20000ecd 	.word	0x20000ecd
 800e4c0:	0802ce0c 	.word	0x0802ce0c
 800e4c4:	0802c868 	.word	0x0802c868
 800e4c8:	20000edc 	.word	0x20000edc
 800e4cc:	0802ce2c 	.word	0x0802ce2c
 800e4d0:	0802ce44 	.word	0x0802ce44
 800e4d4:	0802c894 	.word	0x0802c894
 800e4d8:	2000009d 	.word	0x2000009d

0800e4dc <sen5x_statemachine>:

void sen5x_statemachine() {
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800e4e2:	1dfb      	adds	r3, r7, #7
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800e4e8:	4b86      	ldr	r3, [pc, #536]	@ (800e704 <sen5x_statemachine+0x228>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	0018      	movs	r0, r3
 800e4ee:	f004 fd85 	bl	8012ffc <TimestampIsReached>
 800e4f2:	1e03      	subs	r3, r0, #0
 800e4f4:	d100      	bne.n	800e4f8 <sen5x_statemachine+0x1c>
 800e4f6:	e100      	b.n	800e6fa <sen5x_statemachine+0x21e>
    switch (PMsamplesState) {
 800e4f8:	4b83      	ldr	r3, [pc, #524]	@ (800e708 <sen5x_statemachine+0x22c>)
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	2b05      	cmp	r3, #5
 800e4fe:	d900      	bls.n	800e502 <sen5x_statemachine+0x26>
 800e500:	e0fb      	b.n	800e6fa <sen5x_statemachine+0x21e>
 800e502:	009a      	lsls	r2, r3, #2
 800e504:	4b81      	ldr	r3, [pc, #516]	@ (800e70c <sen5x_statemachine+0x230>)
 800e506:	18d3      	adds	r3, r2, r3
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800e50c:	4a80      	ldr	r2, [pc, #512]	@ (800e710 <sen5x_statemachine+0x234>)
 800e50e:	4b81      	ldr	r3, [pc, #516]	@ (800e714 <sen5x_statemachine+0x238>)
 800e510:	0019      	movs	r1, r3
 800e512:	2001      	movs	r0, #1
 800e514:	f004 fdc8 	bl	80130a8 <CreateLine>
      SetPMSensorStatus(false);
 800e518:	2000      	movs	r0, #0
 800e51a:	f7fe fa75 	bl	800ca08 <SetPMSensorStatus>
      DisablePMSensor();
 800e51e:	f7fe f9f7 	bl	800c910 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800e522:	f005 fb01 	bl	8013b28 <HAL_GetTick>
 800e526:	0003      	movs	r3, r0
 800e528:	4a7b      	ldr	r2, [pc, #492]	@ (800e718 <sen5x_statemachine+0x23c>)
 800e52a:	189a      	adds	r2, r3, r2
 800e52c:	4b75      	ldr	r3, [pc, #468]	@ (800e704 <sen5x_statemachine+0x228>)
 800e52e:	601a      	str	r2, [r3, #0]
      break;
 800e530:	e0e3      	b.n	800e6fa <sen5x_statemachine+0x21e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e532:	f005 faf9 	bl	8013b28 <HAL_GetTick>
 800e536:	0003      	movs	r3, r0
 800e538:	4a78      	ldr	r2, [pc, #480]	@ (800e71c <sen5x_statemachine+0x240>)
 800e53a:	189a      	adds	r2, r3, r2
 800e53c:	4b71      	ldr	r3, [pc, #452]	@ (800e704 <sen5x_statemachine+0x228>)
 800e53e:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800e540:	f7ff ff8e 	bl	800e460 <set_light_on_state>
      break;
 800e544:	e0d9      	b.n	800e6fa <sen5x_statemachine+0x21e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800e546:	4b70      	ldr	r3, [pc, #448]	@ (800e708 <sen5x_statemachine+0x22c>)
 800e548:	2202      	movs	r2, #2
 800e54a:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800e54c:	4b74      	ldr	r3, [pc, #464]	@ (800e720 <sen5x_statemachine+0x244>)
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	2b05      	cmp	r3, #5
 800e552:	d905      	bls.n	800e560 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800e554:	4b6c      	ldr	r3, [pc, #432]	@ (800e708 <sen5x_statemachine+0x22c>)
 800e556:	2200      	movs	r2, #0
 800e558:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e55a:	f7ff fad9 	bl	800db10 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800e55e:	e0c9      	b.n	800e6f4 <sen5x_statemachine+0x218>
        if (sen5x_check_for_errors()) {
 800e560:	f7ff ff10 	bl	800e384 <sen5x_check_for_errors>
 800e564:	1e03      	subs	r3, r0, #0
 800e566:	d01f      	beq.n	800e5a8 <sen5x_statemachine+0xcc>
          if (sen5x_device_reset()) {
 800e568:	f000 fc68 	bl	800ee3c <sen5x_device_reset>
 800e56c:	1e03      	subs	r3, r0, #0
 800e56e:	d00f      	beq.n	800e590 <sen5x_statemachine+0xb4>
            Error("Error resetting sen5x");
 800e570:	4a6c      	ldr	r2, [pc, #432]	@ (800e724 <sen5x_statemachine+0x248>)
 800e572:	4b68      	ldr	r3, [pc, #416]	@ (800e714 <sen5x_statemachine+0x238>)
 800e574:	0019      	movs	r1, r3
 800e576:	2001      	movs	r0, #1
 800e578:	f004 fd96 	bl	80130a8 <CreateLine>
            sen5xErrors++;
 800e57c:	4b68      	ldr	r3, [pc, #416]	@ (800e720 <sen5x_statemachine+0x244>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	3301      	adds	r3, #1
 800e582:	b2da      	uxtb	r2, r3
 800e584:	4b66      	ldr	r3, [pc, #408]	@ (800e720 <sen5x_statemachine+0x244>)
 800e586:	701a      	strb	r2, [r3, #0]
            PMsamplesState = CHECK_SEN5X;
 800e588:	4b5f      	ldr	r3, [pc, #380]	@ (800e708 <sen5x_statemachine+0x22c>)
 800e58a:	2203      	movs	r2, #3
 800e58c:	701a      	strb	r2, [r3, #0]
 800e58e:	e005      	b.n	800e59c <sen5x_statemachine+0xc0>
            Info("sen5x reset executed");
 800e590:	4a65      	ldr	r2, [pc, #404]	@ (800e728 <sen5x_statemachine+0x24c>)
 800e592:	4b66      	ldr	r3, [pc, #408]	@ (800e72c <sen5x_statemachine+0x250>)
 800e594:	0019      	movs	r1, r3
 800e596:	2002      	movs	r0, #2
 800e598:	f004 fd86 	bl	80130a8 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800e59c:	f005 fac4 	bl	8013b28 <HAL_GetTick>
 800e5a0:	0002      	movs	r2, r0
 800e5a2:	4b58      	ldr	r3, [pc, #352]	@ (800e704 <sen5x_statemachine+0x228>)
 800e5a4:	601a      	str	r2, [r3, #0]
      break;
 800e5a6:	e0a5      	b.n	800e6f4 <sen5x_statemachine+0x218>
          if (sen5xErrors != 0) {
 800e5a8:	4b5d      	ldr	r3, [pc, #372]	@ (800e720 <sen5x_statemachine+0x244>)
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d100      	bne.n	800e5b2 <sen5x_statemachine+0xd6>
 800e5b0:	e0a0      	b.n	800e6f4 <sen5x_statemachine+0x218>
            sen5xErrors = 0;
 800e5b2:	4b5b      	ldr	r3, [pc, #364]	@ (800e720 <sen5x_statemachine+0x244>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800e5b8:	4a5d      	ldr	r2, [pc, #372]	@ (800e730 <sen5x_statemachine+0x254>)
 800e5ba:	4b5e      	ldr	r3, [pc, #376]	@ (800e734 <sen5x_statemachine+0x258>)
 800e5bc:	0019      	movs	r1, r3
 800e5be:	2003      	movs	r0, #3
 800e5c0:	f004 fd72 	bl	80130a8 <CreateLine>
      break;
 800e5c4:	e096      	b.n	800e6f4 <sen5x_statemachine+0x218>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800e5c6:	1dfb      	adds	r3, r7, #7
 800e5c8:	0018      	movs	r0, r3
 800e5ca:	f000 f953 	bl	800e874 <sen5x_read_data_ready>
      if (data_ready) {
 800e5ce:	1dfb      	adds	r3, r7, #7
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d02c      	beq.n	800e630 <sen5x_statemachine+0x154>
        SetPMIndicator();
 800e5d6:	f003 fbfd 	bl	8011dd4 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800e5da:	4b57      	ldr	r3, [pc, #348]	@ (800e738 <sen5x_statemachine+0x25c>)
 800e5dc:	0018      	movs	r0, r3
 800e5de:	f7ff fc9d 	bl	800df1c <sen5x_read_measurement>
 800e5e2:	1e03      	subs	r3, r0, #0
 800e5e4:	d00b      	beq.n	800e5fe <sen5x_statemachine+0x122>
          Error("Error executing sen5x_read_measured_values()");
 800e5e6:	4a55      	ldr	r2, [pc, #340]	@ (800e73c <sen5x_statemachine+0x260>)
 800e5e8:	4b4a      	ldr	r3, [pc, #296]	@ (800e714 <sen5x_statemachine+0x238>)
 800e5ea:	0019      	movs	r1, r3
 800e5ec:	2001      	movs	r0, #1
 800e5ee:	f004 fd5b 	bl	80130a8 <CreateLine>
          sen5xErrors++;
 800e5f2:	4b4b      	ldr	r3, [pc, #300]	@ (800e720 <sen5x_statemachine+0x244>)
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	4b49      	ldr	r3, [pc, #292]	@ (800e720 <sen5x_statemachine+0x244>)
 800e5fc:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800e5fe:	4b50      	ldr	r3, [pc, #320]	@ (800e740 <sen5x_statemachine+0x264>)
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	b2da      	uxtb	r2, r3
 800e606:	4b4e      	ldr	r3, [pc, #312]	@ (800e740 <sen5x_statemachine+0x264>)
 800e608:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800e60a:	4b4d      	ldr	r3, [pc, #308]	@ (800e740 <sen5x_statemachine+0x264>)
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	2b1f      	cmp	r3, #31
 800e610:	d102      	bne.n	800e618 <sen5x_statemachine+0x13c>
          sen5xSamples = 0;  // enable display on serial
 800e612:	4b4b      	ldr	r3, [pc, #300]	@ (800e740 <sen5x_statemachine+0x264>)
 800e614:	2200      	movs	r2, #0
 800e616:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800e618:	4b49      	ldr	r3, [pc, #292]	@ (800e740 <sen5x_statemachine+0x264>)
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d901      	bls.n	800e624 <sen5x_statemachine+0x148>
          sen5xStore();
 800e620:	f7ff fdbe 	bl	800e1a0 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800e624:	4b46      	ldr	r3, [pc, #280]	@ (800e740 <sen5x_statemachine+0x264>)
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2b02      	cmp	r3, #2
 800e62a:	d101      	bne.n	800e630 <sen5x_statemachine+0x154>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800e62c:	f7ff fcd2 	bl	800dfd4 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800e630:	4b44      	ldr	r3, [pc, #272]	@ (800e744 <sen5x_statemachine+0x268>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d103      	bne.n	800e640 <sen5x_statemachine+0x164>
 800e638:	4b41      	ldr	r3, [pc, #260]	@ (800e740 <sen5x_statemachine+0x264>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d95b      	bls.n	800e6f8 <sen5x_statemachine+0x21c>
        PMsamplesState = CLEAN_FAN;
 800e640:	4b31      	ldr	r3, [pc, #196]	@ (800e708 <sen5x_statemachine+0x22c>)
 800e642:	2204      	movs	r2, #4
 800e644:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e646:	e057      	b.n	800e6f8 <sen5x_statemachine+0x21c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((RTC_GetWeekday() == MONDAY ) && !fanCleaningDone) {
 800e648:	f7fb f948 	bl	80098dc <RTC_GetWeekday>
 800e64c:	0003      	movs	r3, r0
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d11a      	bne.n	800e688 <sen5x_statemachine+0x1ac>
 800e652:	4b3d      	ldr	r3, [pc, #244]	@ (800e748 <sen5x_statemachine+0x26c>)
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	2201      	movs	r2, #1
 800e658:	4053      	eors	r3, r2
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d013      	beq.n	800e688 <sen5x_statemachine+0x1ac>
        sen5x_start_fan_cleaning();
 800e660:	f000 f9ee 	bl	800ea40 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800e664:	4a39      	ldr	r2, [pc, #228]	@ (800e74c <sen5x_statemachine+0x270>)
 800e666:	4b31      	ldr	r3, [pc, #196]	@ (800e72c <sen5x_statemachine+0x250>)
 800e668:	0019      	movs	r1, r3
 800e66a:	2002      	movs	r0, #2
 800e66c:	f004 fd1c 	bl	80130a8 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800e670:	f005 fa5a 	bl	8013b28 <HAL_GetTick>
 800e674:	0003      	movs	r3, r0
 800e676:	4a36      	ldr	r2, [pc, #216]	@ (800e750 <sen5x_statemachine+0x274>)
 800e678:	189a      	adds	r2, r3, r2
 800e67a:	4b22      	ldr	r3, [pc, #136]	@ (800e704 <sen5x_statemachine+0x228>)
 800e67c:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800e67e:	4b32      	ldr	r3, [pc, #200]	@ (800e748 <sen5x_statemachine+0x26c>)
 800e680:	2201      	movs	r2, #1
 800e682:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800e684:	f7ff fba4 	bl	800ddd0 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800e688:	4b1f      	ldr	r3, [pc, #124]	@ (800e708 <sen5x_statemachine+0x22c>)
 800e68a:	2205      	movs	r2, #5
 800e68c:	701a      	strb	r2, [r3, #0]
      break;
 800e68e:	e034      	b.n	800e6fa <sen5x_statemachine+0x21e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800e690:	4b2c      	ldr	r3, [pc, #176]	@ (800e744 <sen5x_statemachine+0x268>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	2201      	movs	r2, #1
 800e696:	4053      	eors	r3, r2
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d01c      	beq.n	800e6d8 <sen5x_statemachine+0x1fc>
 800e69e:	4b2d      	ldr	r3, [pc, #180]	@ (800e754 <sen5x_statemachine+0x278>)
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	4053      	eors	r3, r2
 800e6a6:	b2db      	uxtb	r3, r3
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d015      	beq.n	800e6d8 <sen5x_statemachine+0x1fc>
        if (sen5x_extinguish_measurement()) {
 800e6ac:	f7ff fbdc 	bl	800de68 <sen5x_extinguish_measurement>
 800e6b0:	1e03      	subs	r3, r0, #0
 800e6b2:	d005      	beq.n	800e6c0 <sen5x_statemachine+0x1e4>
          Error("Error executing sen5x_extinguish_measurement()");
 800e6b4:	4a28      	ldr	r2, [pc, #160]	@ (800e758 <sen5x_statemachine+0x27c>)
 800e6b6:	4b17      	ldr	r3, [pc, #92]	@ (800e714 <sen5x_statemachine+0x238>)
 800e6b8:	0019      	movs	r1, r3
 800e6ba:	2001      	movs	r0, #1
 800e6bc:	f004 fcf4 	bl	80130a8 <CreateLine>
        }
        sen5xSamples = 0;
 800e6c0:	4b1f      	ldr	r3, [pc, #124]	@ (800e740 <sen5x_statemachine+0x264>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e6c6:	f7ff fa23 	bl	800db10 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	f7fe f99c 	bl	800ca08 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800e6d0:	4b0d      	ldr	r3, [pc, #52]	@ (800e708 <sen5x_statemachine+0x22c>)
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	701a      	strb	r2, [r3, #0]
 800e6d6:	e002      	b.n	800e6de <sen5x_statemachine+0x202>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800e6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e708 <sen5x_statemachine+0x22c>)
 800e6da:	2203      	movs	r2, #3
 800e6dc:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800e6de:	f003 fb9f 	bl	8011e20 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800e6e2:	f005 fa21 	bl	8013b28 <HAL_GetTick>
 800e6e6:	0003      	movs	r3, r0
 800e6e8:	22fa      	movs	r2, #250	@ 0xfa
 800e6ea:	0092      	lsls	r2, r2, #2
 800e6ec:	189a      	adds	r2, r3, r2
 800e6ee:	4b05      	ldr	r3, [pc, #20]	@ (800e704 <sen5x_statemachine+0x228>)
 800e6f0:	601a      	str	r2, [r3, #0]
    }
  }
}
 800e6f2:	e002      	b.n	800e6fa <sen5x_statemachine+0x21e>
      break;
 800e6f4:	46c0      	nop			@ (mov r8, r8)
 800e6f6:	e000      	b.n	800e6fa <sen5x_statemachine+0x21e>
      break;
 800e6f8:	46c0      	nop			@ (mov r8, r8)
}
 800e6fa:	46c0      	nop			@ (mov r8, r8)
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	b002      	add	sp, #8
 800e700:	bd80      	pop	{r7, pc}
 800e702:	46c0      	nop			@ (mov r8, r8)
 800e704:	20000edc 	.word	0x20000edc
 800e708:	2000009d 	.word	0x2000009d
 800e70c:	0802d93c 	.word	0x0802d93c
 800e710:	0802ce70 	.word	0x0802ce70
 800e714:	0802c894 	.word	0x0802c894
 800e718:	002fefd8 	.word	0x002fefd8
 800e71c:	00005910 	.word	0x00005910
 800e720:	20000ed9 	.word	0x20000ed9
 800e724:	0802cea0 	.word	0x0802cea0
 800e728:	0802ceb8 	.word	0x0802ceb8
 800e72c:	0802c828 	.word	0x0802c828
 800e730:	0802ced0 	.word	0x0802ced0
 800e734:	0802c868 	.word	0x0802c868
 800e738:	20000ee0 	.word	0x20000ee0
 800e73c:	0802cee4 	.word	0x0802cee4
 800e740:	20000ed8 	.word	0x20000ed8
 800e744:	20001e5d 	.word	0x20001e5d
 800e748:	20000ecc 	.word	0x20000ecc
 800e74c:	0802cf14 	.word	0x0802cf14
 800e750:	00002710 	.word	0x00002710
 800e754:	20001e5e 	.word	0x20001e5e
 800e758:	0802cf2c 	.word	0x0802cf2c

0800e75c <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800e75c:	b590      	push	{r4, r7, lr}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e762:	1dbb      	adds	r3, r7, #6
 800e764:	2200      	movs	r2, #0
 800e766:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800e768:	1dbc      	adds	r4, r7, #6
 800e76a:	1dbb      	adds	r3, r7, #6
 800e76c:	8819      	ldrh	r1, [r3, #0]
 800e76e:	003b      	movs	r3, r7
 800e770:	2221      	movs	r2, #33	@ 0x21
 800e772:	0018      	movs	r0, r3
 800e774:	f001 fb57 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800e778:	0003      	movs	r3, r0
 800e77a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e77c:	1d3c      	adds	r4, r7, #4
 800e77e:	1dbb      	adds	r3, r7, #6
 800e780:	881a      	ldrh	r2, [r3, #0]
 800e782:	003b      	movs	r3, r7
 800e784:	0019      	movs	r1, r3
 800e786:	2069      	movs	r0, #105	@ 0x69
 800e788:	f001 fbd1 	bl	800ff2e <sensirion_i2c_write_data>
 800e78c:	0003      	movs	r3, r0
 800e78e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e790:	1d3b      	adds	r3, r7, #4
 800e792:	2200      	movs	r2, #0
 800e794:	5e9b      	ldrsh	r3, [r3, r2]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d003      	beq.n	800e7a2 <sen5x_start_measurement+0x46>
        return error;
 800e79a:	1d3b      	adds	r3, r7, #4
 800e79c:	2200      	movs	r2, #0
 800e79e:	5e9b      	ldrsh	r3, [r3, r2]
 800e7a0:	e004      	b.n	800e7ac <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e7a2:	4b04      	ldr	r3, [pc, #16]	@ (800e7b4 <sen5x_start_measurement+0x58>)
 800e7a4:	0018      	movs	r0, r3
 800e7a6:	f7ff fdcd 	bl	800e344 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	0018      	movs	r0, r3
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	b003      	add	sp, #12
 800e7b2:	bd90      	pop	{r4, r7, pc}
 800e7b4:	0000c350 	.word	0x0000c350

0800e7b8 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800e7b8:	b590      	push	{r4, r7, lr}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e7be:	1dbb      	adds	r3, r7, #6
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800e7c4:	1dbc      	adds	r4, r7, #6
 800e7c6:	1dbb      	adds	r3, r7, #6
 800e7c8:	8819      	ldrh	r1, [r3, #0]
 800e7ca:	003b      	movs	r3, r7
 800e7cc:	2237      	movs	r2, #55	@ 0x37
 800e7ce:	0018      	movs	r0, r3
 800e7d0:	f001 fb29 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800e7d4:	0003      	movs	r3, r0
 800e7d6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e7d8:	1d3c      	adds	r4, r7, #4
 800e7da:	1dbb      	adds	r3, r7, #6
 800e7dc:	881a      	ldrh	r2, [r3, #0]
 800e7de:	003b      	movs	r3, r7
 800e7e0:	0019      	movs	r1, r3
 800e7e2:	2069      	movs	r0, #105	@ 0x69
 800e7e4:	f001 fba3 	bl	800ff2e <sensirion_i2c_write_data>
 800e7e8:	0003      	movs	r3, r0
 800e7ea:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e7ec:	1d3b      	adds	r3, r7, #4
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	5e9b      	ldrsh	r3, [r3, r2]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d003      	beq.n	800e7fe <sen5x_start_measurement_without_pm+0x46>
        return error;
 800e7f6:	1d3b      	adds	r3, r7, #4
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	5e9b      	ldrsh	r3, [r3, r2]
 800e7fc:	e004      	b.n	800e808 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e7fe:	4b04      	ldr	r3, [pc, #16]	@ (800e810 <sen5x_start_measurement_without_pm+0x58>)
 800e800:	0018      	movs	r0, r3
 800e802:	f7ff fd9f 	bl	800e344 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e806:	2300      	movs	r3, #0
}
 800e808:	0018      	movs	r0, r3
 800e80a:	46bd      	mov	sp, r7
 800e80c:	b003      	add	sp, #12
 800e80e:	bd90      	pop	{r4, r7, pc}
 800e810:	0000c350 	.word	0x0000c350

0800e814 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800e814:	b590      	push	{r4, r7, lr}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e81a:	1dbb      	adds	r3, r7, #6
 800e81c:	2200      	movs	r2, #0
 800e81e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800e820:	1dbc      	adds	r4, r7, #6
 800e822:	2382      	movs	r3, #130	@ 0x82
 800e824:	005a      	lsls	r2, r3, #1
 800e826:	1dbb      	adds	r3, r7, #6
 800e828:	8819      	ldrh	r1, [r3, #0]
 800e82a:	003b      	movs	r3, r7
 800e82c:	0018      	movs	r0, r3
 800e82e:	f001 fafa 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800e832:	0003      	movs	r3, r0
 800e834:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e836:	1d3c      	adds	r4, r7, #4
 800e838:	1dbb      	adds	r3, r7, #6
 800e83a:	881a      	ldrh	r2, [r3, #0]
 800e83c:	003b      	movs	r3, r7
 800e83e:	0019      	movs	r1, r3
 800e840:	2069      	movs	r0, #105	@ 0x69
 800e842:	f001 fb74 	bl	800ff2e <sensirion_i2c_write_data>
 800e846:	0003      	movs	r3, r0
 800e848:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e84a:	1d3b      	adds	r3, r7, #4
 800e84c:	2200      	movs	r2, #0
 800e84e:	5e9b      	ldrsh	r3, [r3, r2]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d003      	beq.n	800e85c <sen5x_stop_measurement+0x48>
        return error;
 800e854:	1d3b      	adds	r3, r7, #4
 800e856:	2200      	movs	r2, #0
 800e858:	5e9b      	ldrsh	r3, [r3, r2]
 800e85a:	e004      	b.n	800e866 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800e85c:	4b04      	ldr	r3, [pc, #16]	@ (800e870 <sen5x_stop_measurement+0x5c>)
 800e85e:	0018      	movs	r0, r3
 800e860:	f7ff fd70 	bl	800e344 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e864:	2300      	movs	r3, #0
}
 800e866:	0018      	movs	r0, r3
 800e868:	46bd      	mov	sp, r7
 800e86a:	b003      	add	sp, #12
 800e86c:	bd90      	pop	{r4, r7, pc}
 800e86e:	46c0      	nop			@ (mov r8, r8)
 800e870:	00030d40 	.word	0x00030d40

0800e874 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800e874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800e87c:	250e      	movs	r5, #14
 800e87e:	197b      	adds	r3, r7, r5
 800e880:	2200      	movs	r2, #0
 800e882:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800e884:	197c      	adds	r4, r7, r5
 800e886:	4a22      	ldr	r2, [pc, #136]	@ (800e910 <sen5x_read_data_ready+0x9c>)
 800e888:	197b      	adds	r3, r7, r5
 800e88a:	8819      	ldrh	r1, [r3, #0]
 800e88c:	2308      	movs	r3, #8
 800e88e:	18fb      	adds	r3, r7, r3
 800e890:	0018      	movs	r0, r3
 800e892:	f001 fac8 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800e896:	0003      	movs	r3, r0
 800e898:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e89a:	260c      	movs	r6, #12
 800e89c:	19bc      	adds	r4, r7, r6
 800e89e:	197b      	adds	r3, r7, r5
 800e8a0:	881a      	ldrh	r2, [r3, #0]
 800e8a2:	2308      	movs	r3, #8
 800e8a4:	18fb      	adds	r3, r7, r3
 800e8a6:	0019      	movs	r1, r3
 800e8a8:	2069      	movs	r0, #105	@ 0x69
 800e8aa:	f001 fb40 	bl	800ff2e <sensirion_i2c_write_data>
 800e8ae:	0003      	movs	r3, r0
 800e8b0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e8b2:	19bb      	adds	r3, r7, r6
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	5e9b      	ldrsh	r3, [r3, r2]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d003      	beq.n	800e8c4 <sen5x_read_data_ready+0x50>
        return error;
 800e8bc:	19bb      	adds	r3, r7, r6
 800e8be:	2200      	movs	r2, #0
 800e8c0:	5e9b      	ldrsh	r3, [r3, r2]
 800e8c2:	e020      	b.n	800e906 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e8c4:	4b13      	ldr	r3, [pc, #76]	@ (800e914 <sen5x_read_data_ready+0xa0>)
 800e8c6:	0018      	movs	r0, r3
 800e8c8:	f7ff fd3c 	bl	800e344 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800e8cc:	250c      	movs	r5, #12
 800e8ce:	197c      	adds	r4, r7, r5
 800e8d0:	2308      	movs	r3, #8
 800e8d2:	18fb      	adds	r3, r7, r3
 800e8d4:	2202      	movs	r2, #2
 800e8d6:	0019      	movs	r1, r3
 800e8d8:	2069      	movs	r0, #105	@ 0x69
 800e8da:	f001 fb40 	bl	800ff5e <sensirion_i2c_read_data_inplace>
 800e8de:	0003      	movs	r3, r0
 800e8e0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e8e2:	197b      	adds	r3, r7, r5
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	5e9b      	ldrsh	r3, [r3, r2]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d003      	beq.n	800e8f4 <sen5x_read_data_ready+0x80>
        return error;
 800e8ec:	197b      	adds	r3, r7, r5
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	5e9b      	ldrsh	r3, [r3, r2]
 800e8f2:	e008      	b.n	800e906 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800e8f4:	2308      	movs	r3, #8
 800e8f6:	18fb      	adds	r3, r7, r3
 800e8f8:	785b      	ldrb	r3, [r3, #1]
 800e8fa:	1e5a      	subs	r2, r3, #1
 800e8fc:	4193      	sbcs	r3, r2
 800e8fe:	b2da      	uxtb	r2, r3
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800e904:	2300      	movs	r3, #0
}
 800e906:	0018      	movs	r0, r3
 800e908:	46bd      	mov	sp, r7
 800e90a:	b005      	add	sp, #20
 800e90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e90e:	46c0      	nop			@ (mov r8, r8)
 800e910:	00000202 	.word	0x00000202
 800e914:	00004e20 	.word	0x00004e20

0800e918 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800e918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e91a:	b08d      	sub	sp, #52	@ 0x34
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
 800e924:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800e926:	252e      	movs	r5, #46	@ 0x2e
 800e928:	197b      	adds	r3, r7, r5
 800e92a:	2200      	movs	r2, #0
 800e92c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800e92e:	197c      	adds	r4, r7, r5
 800e930:	23f1      	movs	r3, #241	@ 0xf1
 800e932:	009a      	lsls	r2, r3, #2
 800e934:	197b      	adds	r3, r7, r5
 800e936:	8819      	ldrh	r1, [r3, #0]
 800e938:	2314      	movs	r3, #20
 800e93a:	18fb      	adds	r3, r7, r3
 800e93c:	0018      	movs	r0, r3
 800e93e:	f001 fa72 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800e942:	0003      	movs	r3, r0
 800e944:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e946:	262c      	movs	r6, #44	@ 0x2c
 800e948:	19bc      	adds	r4, r7, r6
 800e94a:	197b      	adds	r3, r7, r5
 800e94c:	881a      	ldrh	r2, [r3, #0]
 800e94e:	2314      	movs	r3, #20
 800e950:	18fb      	adds	r3, r7, r3
 800e952:	0019      	movs	r1, r3
 800e954:	2069      	movs	r0, #105	@ 0x69
 800e956:	f001 faea 	bl	800ff2e <sensirion_i2c_write_data>
 800e95a:	0003      	movs	r3, r0
 800e95c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e95e:	19bb      	adds	r3, r7, r6
 800e960:	2200      	movs	r2, #0
 800e962:	5e9b      	ldrsh	r3, [r3, r2]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d003      	beq.n	800e970 <sen5x_read_measured_values+0x58>
        return error;
 800e968:	19bb      	adds	r3, r7, r6
 800e96a:	2200      	movs	r2, #0
 800e96c:	5e9b      	ldrsh	r3, [r3, r2]
 800e96e:	e060      	b.n	800ea32 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e970:	4b32      	ldr	r3, [pc, #200]	@ (800ea3c <sen5x_read_measured_values+0x124>)
 800e972:	0018      	movs	r0, r3
 800e974:	f7ff fce6 	bl	800e344 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800e978:	252c      	movs	r5, #44	@ 0x2c
 800e97a:	197c      	adds	r4, r7, r5
 800e97c:	2314      	movs	r3, #20
 800e97e:	18fb      	adds	r3, r7, r3
 800e980:	2210      	movs	r2, #16
 800e982:	0019      	movs	r1, r3
 800e984:	2069      	movs	r0, #105	@ 0x69
 800e986:	f001 faea 	bl	800ff5e <sensirion_i2c_read_data_inplace>
 800e98a:	0003      	movs	r3, r0
 800e98c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e98e:	197b      	adds	r3, r7, r5
 800e990:	2200      	movs	r2, #0
 800e992:	5e9b      	ldrsh	r3, [r3, r2]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d003      	beq.n	800e9a0 <sen5x_read_measured_values+0x88>
        return error;
 800e998:	197b      	adds	r3, r7, r5
 800e99a:	2200      	movs	r2, #0
 800e99c:	5e9b      	ldrsh	r3, [r3, r2]
 800e99e:	e048      	b.n	800ea32 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800e9a0:	2414      	movs	r4, #20
 800e9a2:	193b      	adds	r3, r7, r4
 800e9a4:	0018      	movs	r0, r3
 800e9a6:	f000 fa79 	bl	800ee9c <sensirion_common_bytes_to_uint16_t>
 800e9aa:	0003      	movs	r3, r0
 800e9ac:	001a      	movs	r2, r3
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800e9b2:	193b      	adds	r3, r7, r4
 800e9b4:	3302      	adds	r3, #2
 800e9b6:	0018      	movs	r0, r3
 800e9b8:	f000 fa70 	bl	800ee9c <sensirion_common_bytes_to_uint16_t>
 800e9bc:	0003      	movs	r3, r0
 800e9be:	001a      	movs	r2, r3
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800e9c4:	193b      	adds	r3, r7, r4
 800e9c6:	3304      	adds	r3, #4
 800e9c8:	0018      	movs	r0, r3
 800e9ca:	f000 fa67 	bl	800ee9c <sensirion_common_bytes_to_uint16_t>
 800e9ce:	0003      	movs	r3, r0
 800e9d0:	001a      	movs	r2, r3
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800e9d6:	193b      	adds	r3, r7, r4
 800e9d8:	3306      	adds	r3, #6
 800e9da:	0018      	movs	r0, r3
 800e9dc:	f000 fa5e 	bl	800ee9c <sensirion_common_bytes_to_uint16_t>
 800e9e0:	0003      	movs	r3, r0
 800e9e2:	001a      	movs	r2, r3
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800e9e8:	193b      	adds	r3, r7, r4
 800e9ea:	3308      	adds	r3, #8
 800e9ec:	0018      	movs	r0, r3
 800e9ee:	f000 fa82 	bl	800eef6 <sensirion_common_bytes_to_int16_t>
 800e9f2:	0003      	movs	r3, r0
 800e9f4:	001a      	movs	r2, r3
 800e9f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9f8:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800e9fa:	193b      	adds	r3, r7, r4
 800e9fc:	330a      	adds	r3, #10
 800e9fe:	0018      	movs	r0, r3
 800ea00:	f000 fa79 	bl	800eef6 <sensirion_common_bytes_to_int16_t>
 800ea04:	0003      	movs	r3, r0
 800ea06:	001a      	movs	r2, r3
 800ea08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea0a:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800ea0c:	193b      	adds	r3, r7, r4
 800ea0e:	330c      	adds	r3, #12
 800ea10:	0018      	movs	r0, r3
 800ea12:	f000 fa70 	bl	800eef6 <sensirion_common_bytes_to_int16_t>
 800ea16:	0003      	movs	r3, r0
 800ea18:	001a      	movs	r2, r3
 800ea1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea1c:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800ea1e:	193b      	adds	r3, r7, r4
 800ea20:	330e      	adds	r3, #14
 800ea22:	0018      	movs	r0, r3
 800ea24:	f000 fa67 	bl	800eef6 <sensirion_common_bytes_to_int16_t>
 800ea28:	0003      	movs	r3, r0
 800ea2a:	001a      	movs	r2, r3
 800ea2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea2e:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800ea30:	2300      	movs	r3, #0
}
 800ea32:	0018      	movs	r0, r3
 800ea34:	46bd      	mov	sp, r7
 800ea36:	b00d      	add	sp, #52	@ 0x34
 800ea38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea3a:	46c0      	nop			@ (mov r8, r8)
 800ea3c:	00004e20 	.word	0x00004e20

0800ea40 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800ea40:	b590      	push	{r4, r7, lr}
 800ea42:	b083      	sub	sp, #12
 800ea44:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800ea46:	1dbb      	adds	r3, r7, #6
 800ea48:	2200      	movs	r2, #0
 800ea4a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800ea4c:	1dbc      	adds	r4, r7, #6
 800ea4e:	4a12      	ldr	r2, [pc, #72]	@ (800ea98 <sen5x_start_fan_cleaning+0x58>)
 800ea50:	1dbb      	adds	r3, r7, #6
 800ea52:	8819      	ldrh	r1, [r3, #0]
 800ea54:	003b      	movs	r3, r7
 800ea56:	0018      	movs	r0, r3
 800ea58:	f001 f9e5 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800ea5c:	0003      	movs	r3, r0
 800ea5e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ea60:	1d3c      	adds	r4, r7, #4
 800ea62:	1dbb      	adds	r3, r7, #6
 800ea64:	881a      	ldrh	r2, [r3, #0]
 800ea66:	003b      	movs	r3, r7
 800ea68:	0019      	movs	r1, r3
 800ea6a:	2069      	movs	r0, #105	@ 0x69
 800ea6c:	f001 fa5f 	bl	800ff2e <sensirion_i2c_write_data>
 800ea70:	0003      	movs	r3, r0
 800ea72:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ea74:	1d3b      	adds	r3, r7, #4
 800ea76:	2200      	movs	r2, #0
 800ea78:	5e9b      	ldrsh	r3, [r3, r2]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d003      	beq.n	800ea86 <sen5x_start_fan_cleaning+0x46>
        return error;
 800ea7e:	1d3b      	adds	r3, r7, #4
 800ea80:	2200      	movs	r2, #0
 800ea82:	5e9b      	ldrsh	r3, [r3, r2]
 800ea84:	e004      	b.n	800ea90 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800ea86:	4b05      	ldr	r3, [pc, #20]	@ (800ea9c <sen5x_start_fan_cleaning+0x5c>)
 800ea88:	0018      	movs	r0, r3
 800ea8a:	f7ff fc5b 	bl	800e344 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	0018      	movs	r0, r3
 800ea92:	46bd      	mov	sp, r7
 800ea94:	b003      	add	sp, #12
 800ea96:	bd90      	pop	{r4, r7, pc}
 800ea98:	00005607 	.word	0x00005607
 800ea9c:	00004e20 	.word	0x00004e20

0800eaa0 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800eaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaa2:	b087      	sub	sp, #28
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	0004      	movs	r4, r0
 800eaa8:	0008      	movs	r0, r1
 800eaaa:	0011      	movs	r1, r2
 800eaac:	1dbb      	adds	r3, r7, #6
 800eaae:	1c22      	adds	r2, r4, #0
 800eab0:	801a      	strh	r2, [r3, #0]
 800eab2:	1d3b      	adds	r3, r7, #4
 800eab4:	1c02      	adds	r2, r0, #0
 800eab6:	801a      	strh	r2, [r3, #0]
 800eab8:	1cbb      	adds	r3, r7, #2
 800eaba:	1c0a      	adds	r2, r1, #0
 800eabc:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800eabe:	2516      	movs	r5, #22
 800eac0:	197b      	adds	r3, r7, r5
 800eac2:	2200      	movs	r2, #0
 800eac4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800eac6:	197c      	adds	r4, r7, r5
 800eac8:	4a25      	ldr	r2, [pc, #148]	@ (800eb60 <sen5x_set_temperature_offset_parameters+0xc0>)
 800eaca:	197b      	adds	r3, r7, r5
 800eacc:	8819      	ldrh	r1, [r3, #0]
 800eace:	2608      	movs	r6, #8
 800ead0:	19bb      	adds	r3, r7, r6
 800ead2:	0018      	movs	r0, r3
 800ead4:	f001 f9a7 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800ead8:	0003      	movs	r3, r0
 800eada:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800eadc:	197c      	adds	r4, r7, r5
 800eade:	1dbb      	adds	r3, r7, #6
 800eae0:	2200      	movs	r2, #0
 800eae2:	5e9a      	ldrsh	r2, [r3, r2]
 800eae4:	197b      	adds	r3, r7, r5
 800eae6:	8819      	ldrh	r1, [r3, #0]
 800eae8:	19bb      	adds	r3, r7, r6
 800eaea:	0018      	movs	r0, r3
 800eaec:	f001 fa06 	bl	800fefc <sensirion_i2c_add_int16_t_to_buffer>
 800eaf0:	0003      	movs	r3, r0
 800eaf2:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800eaf4:	197c      	adds	r4, r7, r5
 800eaf6:	1d3b      	adds	r3, r7, #4
 800eaf8:	2200      	movs	r2, #0
 800eafa:	5e9a      	ldrsh	r2, [r3, r2]
 800eafc:	197b      	adds	r3, r7, r5
 800eafe:	8819      	ldrh	r1, [r3, #0]
 800eb00:	19bb      	adds	r3, r7, r6
 800eb02:	0018      	movs	r0, r3
 800eb04:	f001 f9fa 	bl	800fefc <sensirion_i2c_add_int16_t_to_buffer>
 800eb08:	0003      	movs	r3, r0
 800eb0a:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800eb0c:	197c      	adds	r4, r7, r5
 800eb0e:	1cbb      	adds	r3, r7, #2
 800eb10:	881a      	ldrh	r2, [r3, #0]
 800eb12:	197b      	adds	r3, r7, r5
 800eb14:	8819      	ldrh	r1, [r3, #0]
 800eb16:	19bb      	adds	r3, r7, r6
 800eb18:	0018      	movs	r0, r3
 800eb1a:	f001 f9b0 	bl	800fe7e <sensirion_i2c_add_uint16_t_to_buffer>
 800eb1e:	0003      	movs	r3, r0
 800eb20:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eb22:	2214      	movs	r2, #20
 800eb24:	18bc      	adds	r4, r7, r2
 800eb26:	197b      	adds	r3, r7, r5
 800eb28:	881a      	ldrh	r2, [r3, #0]
 800eb2a:	19bb      	adds	r3, r7, r6
 800eb2c:	0019      	movs	r1, r3
 800eb2e:	2069      	movs	r0, #105	@ 0x69
 800eb30:	f001 f9fd 	bl	800ff2e <sensirion_i2c_write_data>
 800eb34:	0003      	movs	r3, r0
 800eb36:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eb38:	2214      	movs	r2, #20
 800eb3a:	18bb      	adds	r3, r7, r2
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	5e5b      	ldrsh	r3, [r3, r1]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d003      	beq.n	800eb4c <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800eb44:	18bb      	adds	r3, r7, r2
 800eb46:	2200      	movs	r2, #0
 800eb48:	5e9b      	ldrsh	r3, [r3, r2]
 800eb4a:	e004      	b.n	800eb56 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800eb4c:	4b05      	ldr	r3, [pc, #20]	@ (800eb64 <sen5x_set_temperature_offset_parameters+0xc4>)
 800eb4e:	0018      	movs	r0, r3
 800eb50:	f7ff fbf8 	bl	800e344 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	0018      	movs	r0, r3
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	b007      	add	sp, #28
 800eb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb5e:	46c0      	nop			@ (mov r8, r8)
 800eb60:	000060b2 	.word	0x000060b2
 800eb64:	00004e20 	.word	0x00004e20

0800eb68 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800eb68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb6a:	b091      	sub	sp, #68	@ 0x44
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	000a      	movs	r2, r1
 800eb72:	1cfb      	adds	r3, r7, #3
 800eb74:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800eb76:	253e      	movs	r5, #62	@ 0x3e
 800eb78:	197b      	adds	r3, r7, r5
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800eb7e:	197c      	adds	r4, r7, r5
 800eb80:	4a22      	ldr	r2, [pc, #136]	@ (800ec0c <sen5x_get_product_name+0xa4>)
 800eb82:	197b      	adds	r3, r7, r5
 800eb84:	8819      	ldrh	r1, [r3, #0]
 800eb86:	230c      	movs	r3, #12
 800eb88:	18fb      	adds	r3, r7, r3
 800eb8a:	0018      	movs	r0, r3
 800eb8c:	f001 f94b 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800eb90:	0003      	movs	r3, r0
 800eb92:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eb94:	263c      	movs	r6, #60	@ 0x3c
 800eb96:	19bc      	adds	r4, r7, r6
 800eb98:	197b      	adds	r3, r7, r5
 800eb9a:	881a      	ldrh	r2, [r3, #0]
 800eb9c:	230c      	movs	r3, #12
 800eb9e:	18fb      	adds	r3, r7, r3
 800eba0:	0019      	movs	r1, r3
 800eba2:	2069      	movs	r0, #105	@ 0x69
 800eba4:	f001 f9c3 	bl	800ff2e <sensirion_i2c_write_data>
 800eba8:	0003      	movs	r3, r0
 800ebaa:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ebac:	19bb      	adds	r3, r7, r6
 800ebae:	2200      	movs	r2, #0
 800ebb0:	5e9b      	ldrsh	r3, [r3, r2]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d003      	beq.n	800ebbe <sen5x_get_product_name+0x56>
        return error;
 800ebb6:	19bb      	adds	r3, r7, r6
 800ebb8:	2200      	movs	r2, #0
 800ebba:	5e9b      	ldrsh	r3, [r3, r2]
 800ebbc:	e021      	b.n	800ec02 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ebbe:	4b14      	ldr	r3, [pc, #80]	@ (800ec10 <sen5x_get_product_name+0xa8>)
 800ebc0:	0018      	movs	r0, r3
 800ebc2:	f7ff fbbf 	bl	800e344 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ebc6:	253c      	movs	r5, #60	@ 0x3c
 800ebc8:	197c      	adds	r4, r7, r5
 800ebca:	230c      	movs	r3, #12
 800ebcc:	18fb      	adds	r3, r7, r3
 800ebce:	2220      	movs	r2, #32
 800ebd0:	0019      	movs	r1, r3
 800ebd2:	2069      	movs	r0, #105	@ 0x69
 800ebd4:	f001 f9c3 	bl	800ff5e <sensirion_i2c_read_data_inplace>
 800ebd8:	0003      	movs	r3, r0
 800ebda:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ebdc:	197b      	adds	r3, r7, r5
 800ebde:	2200      	movs	r2, #0
 800ebe0:	5e9b      	ldrsh	r3, [r3, r2]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d003      	beq.n	800ebee <sen5x_get_product_name+0x86>
        return error;
 800ebe6:	197b      	adds	r3, r7, r5
 800ebe8:	2200      	movs	r2, #0
 800ebea:	5e9b      	ldrsh	r3, [r3, r2]
 800ebec:	e009      	b.n	800ec02 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800ebee:	1cfb      	adds	r3, r7, #3
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	230c      	movs	r3, #12
 800ebf8:	18fb      	adds	r3, r7, r3
 800ebfa:	0018      	movs	r0, r3
 800ebfc:	f000 f989 	bl	800ef12 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	0018      	movs	r0, r3
 800ec04:	46bd      	mov	sp, r7
 800ec06:	b011      	add	sp, #68	@ 0x44
 800ec08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec0a:	46c0      	nop			@ (mov r8, r8)
 800ec0c:	0000d014 	.word	0x0000d014
 800ec10:	0000c350 	.word	0x0000c350

0800ec14 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800ec14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec16:	b091      	sub	sp, #68	@ 0x44
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	000a      	movs	r2, r1
 800ec1e:	1cfb      	adds	r3, r7, #3
 800ec20:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800ec22:	253e      	movs	r5, #62	@ 0x3e
 800ec24:	197b      	adds	r3, r7, r5
 800ec26:	2200      	movs	r2, #0
 800ec28:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800ec2a:	197c      	adds	r4, r7, r5
 800ec2c:	4a22      	ldr	r2, [pc, #136]	@ (800ecb8 <sen5x_get_serial_number+0xa4>)
 800ec2e:	197b      	adds	r3, r7, r5
 800ec30:	8819      	ldrh	r1, [r3, #0]
 800ec32:	230c      	movs	r3, #12
 800ec34:	18fb      	adds	r3, r7, r3
 800ec36:	0018      	movs	r0, r3
 800ec38:	f001 f8f5 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800ec3c:	0003      	movs	r3, r0
 800ec3e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ec40:	263c      	movs	r6, #60	@ 0x3c
 800ec42:	19bc      	adds	r4, r7, r6
 800ec44:	197b      	adds	r3, r7, r5
 800ec46:	881a      	ldrh	r2, [r3, #0]
 800ec48:	230c      	movs	r3, #12
 800ec4a:	18fb      	adds	r3, r7, r3
 800ec4c:	0019      	movs	r1, r3
 800ec4e:	2069      	movs	r0, #105	@ 0x69
 800ec50:	f001 f96d 	bl	800ff2e <sensirion_i2c_write_data>
 800ec54:	0003      	movs	r3, r0
 800ec56:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ec58:	19bb      	adds	r3, r7, r6
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	5e9b      	ldrsh	r3, [r3, r2]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d003      	beq.n	800ec6a <sen5x_get_serial_number+0x56>
        return error;
 800ec62:	19bb      	adds	r3, r7, r6
 800ec64:	2200      	movs	r2, #0
 800ec66:	5e9b      	ldrsh	r3, [r3, r2]
 800ec68:	e021      	b.n	800ecae <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ec6a:	4b14      	ldr	r3, [pc, #80]	@ (800ecbc <sen5x_get_serial_number+0xa8>)
 800ec6c:	0018      	movs	r0, r3
 800ec6e:	f7ff fb69 	bl	800e344 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ec72:	253c      	movs	r5, #60	@ 0x3c
 800ec74:	197c      	adds	r4, r7, r5
 800ec76:	230c      	movs	r3, #12
 800ec78:	18fb      	adds	r3, r7, r3
 800ec7a:	2220      	movs	r2, #32
 800ec7c:	0019      	movs	r1, r3
 800ec7e:	2069      	movs	r0, #105	@ 0x69
 800ec80:	f001 f96d 	bl	800ff5e <sensirion_i2c_read_data_inplace>
 800ec84:	0003      	movs	r3, r0
 800ec86:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ec88:	197b      	adds	r3, r7, r5
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	5e9b      	ldrsh	r3, [r3, r2]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d003      	beq.n	800ec9a <sen5x_get_serial_number+0x86>
        return error;
 800ec92:	197b      	adds	r3, r7, r5
 800ec94:	2200      	movs	r2, #0
 800ec96:	5e9b      	ldrsh	r3, [r3, r2]
 800ec98:	e009      	b.n	800ecae <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800ec9a:	1cfb      	adds	r3, r7, #3
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	6879      	ldr	r1, [r7, #4]
 800eca2:	230c      	movs	r3, #12
 800eca4:	18fb      	adds	r3, r7, r3
 800eca6:	0018      	movs	r0, r3
 800eca8:	f000 f933 	bl	800ef12 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ecac:	2300      	movs	r3, #0
}
 800ecae:	0018      	movs	r0, r3
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	b011      	add	sp, #68	@ 0x44
 800ecb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecb6:	46c0      	nop			@ (mov r8, r8)
 800ecb8:	0000d033 	.word	0x0000d033
 800ecbc:	0000c350 	.word	0x0000c350

0800ecc0 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800ecc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecc2:	b089      	sub	sp, #36	@ 0x24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	607a      	str	r2, [r7, #4]
 800eccc:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800ecce:	251e      	movs	r5, #30
 800ecd0:	197b      	adds	r3, r7, r5
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800ecd6:	197c      	adds	r4, r7, r5
 800ecd8:	23d1      	movs	r3, #209	@ 0xd1
 800ecda:	021a      	lsls	r2, r3, #8
 800ecdc:	197b      	adds	r3, r7, r5
 800ecde:	8819      	ldrh	r1, [r3, #0]
 800ece0:	2310      	movs	r3, #16
 800ece2:	18fb      	adds	r3, r7, r3
 800ece4:	0018      	movs	r0, r3
 800ece6:	f001 f89e 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800ecea:	0003      	movs	r3, r0
 800ecec:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ecee:	261c      	movs	r6, #28
 800ecf0:	19bc      	adds	r4, r7, r6
 800ecf2:	197b      	adds	r3, r7, r5
 800ecf4:	881a      	ldrh	r2, [r3, #0]
 800ecf6:	2310      	movs	r3, #16
 800ecf8:	18fb      	adds	r3, r7, r3
 800ecfa:	0019      	movs	r1, r3
 800ecfc:	2069      	movs	r0, #105	@ 0x69
 800ecfe:	f001 f916 	bl	800ff2e <sensirion_i2c_write_data>
 800ed02:	0003      	movs	r3, r0
 800ed04:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ed06:	19bb      	adds	r3, r7, r6
 800ed08:	2200      	movs	r2, #0
 800ed0a:	5e9b      	ldrsh	r3, [r3, r2]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d003      	beq.n	800ed18 <sen5x_get_version+0x58>
        return error;
 800ed10:	19bb      	adds	r3, r7, r6
 800ed12:	2200      	movs	r2, #0
 800ed14:	5e9b      	ldrsh	r3, [r3, r2]
 800ed16:	e038      	b.n	800ed8a <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ed18:	4b1e      	ldr	r3, [pc, #120]	@ (800ed94 <sen5x_get_version+0xd4>)
 800ed1a:	0018      	movs	r0, r3
 800ed1c:	f7ff fb12 	bl	800e344 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800ed20:	251c      	movs	r5, #28
 800ed22:	197c      	adds	r4, r7, r5
 800ed24:	2310      	movs	r3, #16
 800ed26:	18fb      	adds	r3, r7, r3
 800ed28:	2208      	movs	r2, #8
 800ed2a:	0019      	movs	r1, r3
 800ed2c:	2069      	movs	r0, #105	@ 0x69
 800ed2e:	f001 f916 	bl	800ff5e <sensirion_i2c_read_data_inplace>
 800ed32:	0003      	movs	r3, r0
 800ed34:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ed36:	197b      	adds	r3, r7, r5
 800ed38:	2200      	movs	r2, #0
 800ed3a:	5e9b      	ldrsh	r3, [r3, r2]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d003      	beq.n	800ed48 <sen5x_get_version+0x88>
        return error;
 800ed40:	197b      	adds	r3, r7, r5
 800ed42:	2200      	movs	r2, #0
 800ed44:	5e9b      	ldrsh	r3, [r3, r2]
 800ed46:	e020      	b.n	800ed8a <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800ed48:	2110      	movs	r1, #16
 800ed4a:	187b      	adds	r3, r7, r1
 800ed4c:	781a      	ldrb	r2, [r3, #0]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800ed52:	187b      	adds	r3, r7, r1
 800ed54:	785a      	ldrb	r2, [r3, #1]
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800ed5a:	187b      	adds	r3, r7, r1
 800ed5c:	789b      	ldrb	r3, [r3, #2]
 800ed5e:	1e5a      	subs	r2, r3, #1
 800ed60:	4193      	sbcs	r3, r2
 800ed62:	b2da      	uxtb	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800ed68:	187b      	adds	r3, r7, r1
 800ed6a:	78da      	ldrb	r2, [r3, #3]
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800ed70:	187b      	adds	r3, r7, r1
 800ed72:	791a      	ldrb	r2, [r3, #4]
 800ed74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed76:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800ed78:	187b      	adds	r3, r7, r1
 800ed7a:	795a      	ldrb	r2, [r3, #5]
 800ed7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed7e:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800ed80:	187b      	adds	r3, r7, r1
 800ed82:	799a      	ldrb	r2, [r3, #6]
 800ed84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed86:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800ed88:	2300      	movs	r3, #0
}
 800ed8a:	0018      	movs	r0, r3
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	b009      	add	sp, #36	@ 0x24
 800ed90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed92:	46c0      	nop			@ (mov r8, r8)
 800ed94:	00004e20 	.word	0x00004e20

0800ed98 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800ed98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed9a:	b087      	sub	sp, #28
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800eda0:	2516      	movs	r5, #22
 800eda2:	197b      	adds	r3, r7, r5
 800eda4:	2200      	movs	r2, #0
 800eda6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800eda8:	197c      	adds	r4, r7, r5
 800edaa:	4a22      	ldr	r2, [pc, #136]	@ (800ee34 <sen5x_read_device_status+0x9c>)
 800edac:	197b      	adds	r3, r7, r5
 800edae:	8819      	ldrh	r1, [r3, #0]
 800edb0:	230c      	movs	r3, #12
 800edb2:	18fb      	adds	r3, r7, r3
 800edb4:	0018      	movs	r0, r3
 800edb6:	f001 f836 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800edba:	0003      	movs	r3, r0
 800edbc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800edbe:	2614      	movs	r6, #20
 800edc0:	19bc      	adds	r4, r7, r6
 800edc2:	197b      	adds	r3, r7, r5
 800edc4:	881a      	ldrh	r2, [r3, #0]
 800edc6:	230c      	movs	r3, #12
 800edc8:	18fb      	adds	r3, r7, r3
 800edca:	0019      	movs	r1, r3
 800edcc:	2069      	movs	r0, #105	@ 0x69
 800edce:	f001 f8ae 	bl	800ff2e <sensirion_i2c_write_data>
 800edd2:	0003      	movs	r3, r0
 800edd4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800edd6:	19bb      	adds	r3, r7, r6
 800edd8:	2200      	movs	r2, #0
 800edda:	5e9b      	ldrsh	r3, [r3, r2]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d003      	beq.n	800ede8 <sen5x_read_device_status+0x50>
        return error;
 800ede0:	19bb      	adds	r3, r7, r6
 800ede2:	2200      	movs	r2, #0
 800ede4:	5e9b      	ldrsh	r3, [r3, r2]
 800ede6:	e020      	b.n	800ee2a <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ede8:	4b13      	ldr	r3, [pc, #76]	@ (800ee38 <sen5x_read_device_status+0xa0>)
 800edea:	0018      	movs	r0, r3
 800edec:	f7ff faaa 	bl	800e344 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800edf0:	2514      	movs	r5, #20
 800edf2:	197c      	adds	r4, r7, r5
 800edf4:	230c      	movs	r3, #12
 800edf6:	18fb      	adds	r3, r7, r3
 800edf8:	2204      	movs	r2, #4
 800edfa:	0019      	movs	r1, r3
 800edfc:	2069      	movs	r0, #105	@ 0x69
 800edfe:	f001 f8ae 	bl	800ff5e <sensirion_i2c_read_data_inplace>
 800ee02:	0003      	movs	r3, r0
 800ee04:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ee06:	197b      	adds	r3, r7, r5
 800ee08:	2200      	movs	r2, #0
 800ee0a:	5e9b      	ldrsh	r3, [r3, r2]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d003      	beq.n	800ee18 <sen5x_read_device_status+0x80>
        return error;
 800ee10:	197b      	adds	r3, r7, r5
 800ee12:	2200      	movs	r2, #0
 800ee14:	5e9b      	ldrsh	r3, [r3, r2]
 800ee16:	e008      	b.n	800ee2a <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800ee18:	230c      	movs	r3, #12
 800ee1a:	18fb      	adds	r3, r7, r3
 800ee1c:	0018      	movs	r0, r3
 800ee1e:	f000 f851 	bl	800eec4 <sensirion_common_bytes_to_uint32_t>
 800ee22:	0002      	movs	r2, r0
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800ee28:	2300      	movs	r3, #0
}
 800ee2a:	0018      	movs	r0, r3
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	b007      	add	sp, #28
 800ee30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee32:	46c0      	nop			@ (mov r8, r8)
 800ee34:	0000d206 	.word	0x0000d206
 800ee38:	00004e20 	.word	0x00004e20

0800ee3c <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800ee3c:	b590      	push	{r4, r7, lr}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800ee42:	1dbb      	adds	r3, r7, #6
 800ee44:	2200      	movs	r2, #0
 800ee46:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800ee48:	1dbc      	adds	r4, r7, #6
 800ee4a:	4a12      	ldr	r2, [pc, #72]	@ (800ee94 <sen5x_device_reset+0x58>)
 800ee4c:	1dbb      	adds	r3, r7, #6
 800ee4e:	8819      	ldrh	r1, [r3, #0]
 800ee50:	003b      	movs	r3, r7
 800ee52:	0018      	movs	r0, r3
 800ee54:	f000 ffe7 	bl	800fe26 <sensirion_i2c_add_command_to_buffer>
 800ee58:	0003      	movs	r3, r0
 800ee5a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ee5c:	1d3c      	adds	r4, r7, #4
 800ee5e:	1dbb      	adds	r3, r7, #6
 800ee60:	881a      	ldrh	r2, [r3, #0]
 800ee62:	003b      	movs	r3, r7
 800ee64:	0019      	movs	r1, r3
 800ee66:	2069      	movs	r0, #105	@ 0x69
 800ee68:	f001 f861 	bl	800ff2e <sensirion_i2c_write_data>
 800ee6c:	0003      	movs	r3, r0
 800ee6e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ee70:	1d3b      	adds	r3, r7, #4
 800ee72:	2200      	movs	r2, #0
 800ee74:	5e9b      	ldrsh	r3, [r3, r2]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d003      	beq.n	800ee82 <sen5x_device_reset+0x46>
        return error;
 800ee7a:	1d3b      	adds	r3, r7, #4
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	5e9b      	ldrsh	r3, [r3, r2]
 800ee80:	e004      	b.n	800ee8c <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800ee82:	4b05      	ldr	r3, [pc, #20]	@ (800ee98 <sen5x_device_reset+0x5c>)
 800ee84:	0018      	movs	r0, r3
 800ee86:	f7ff fa5d 	bl	800e344 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ee8a:	2300      	movs	r3, #0
}
 800ee8c:	0018      	movs	r0, r3
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	b003      	add	sp, #12
 800ee92:	bd90      	pop	{r4, r7, pc}
 800ee94:	0000d304 	.word	0x0000d304
 800ee98:	00030d40 	.word	0x00030d40

0800ee9c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	b21b      	sxth	r3, r3
 800eeaa:	021b      	lsls	r3, r3, #8
 800eeac:	b21a      	sxth	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	b21b      	sxth	r3, r3
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	b21b      	sxth	r3, r3
 800eeba:	b29b      	uxth	r3, r3
}
 800eebc:	0018      	movs	r0, r3
 800eebe:	46bd      	mov	sp, r7
 800eec0:	b002      	add	sp, #8
 800eec2:	bd80      	pop	{r7, pc}

0800eec4 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	061a      	lsls	r2, r3, #24
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	3301      	adds	r3, #1
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	041b      	lsls	r3, r3, #16
 800eeda:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	3302      	adds	r3, #2
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800eee4:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	3203      	adds	r2, #3
 800eeea:	7812      	ldrb	r2, [r2, #0]
 800eeec:	4313      	orrs	r3, r2
}
 800eeee:	0018      	movs	r0, r3
 800eef0:	46bd      	mov	sp, r7
 800eef2:	b002      	add	sp, #8
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b082      	sub	sp, #8
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	0018      	movs	r0, r3
 800ef02:	f7ff ffcb 	bl	800ee9c <sensirion_common_bytes_to_uint16_t>
 800ef06:	0003      	movs	r3, r0
 800ef08:	b21b      	sxth	r3, r3
}
 800ef0a:	0018      	movs	r0, r3
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	b002      	add	sp, #8
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b086      	sub	sp, #24
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	60f8      	str	r0, [r7, #12]
 800ef1a:	60b9      	str	r1, [r7, #8]
 800ef1c:	1dbb      	adds	r3, r7, #6
 800ef1e:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800ef20:	2316      	movs	r3, #22
 800ef22:	18fb      	adds	r3, r7, r3
 800ef24:	2200      	movs	r2, #0
 800ef26:	801a      	strh	r2, [r3, #0]
 800ef28:	e00f      	b.n	800ef4a <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800ef2a:	2016      	movs	r0, #22
 800ef2c:	183b      	adds	r3, r7, r0
 800ef2e:	881b      	ldrh	r3, [r3, #0]
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	18d2      	adds	r2, r2, r3
 800ef34:	183b      	adds	r3, r7, r0
 800ef36:	881b      	ldrh	r3, [r3, #0]
 800ef38:	68b9      	ldr	r1, [r7, #8]
 800ef3a:	18cb      	adds	r3, r1, r3
 800ef3c:	7812      	ldrb	r2, [r2, #0]
 800ef3e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800ef40:	183b      	adds	r3, r7, r0
 800ef42:	881a      	ldrh	r2, [r3, #0]
 800ef44:	183b      	adds	r3, r7, r0
 800ef46:	3201      	adds	r2, #1
 800ef48:	801a      	strh	r2, [r3, #0]
 800ef4a:	2316      	movs	r3, #22
 800ef4c:	18fa      	adds	r2, r7, r3
 800ef4e:	1dbb      	adds	r3, r7, #6
 800ef50:	8812      	ldrh	r2, [r2, #0]
 800ef52:	881b      	ldrh	r3, [r3, #0]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d3e8      	bcc.n	800ef2a <sensirion_common_copy_bytes+0x18>
    }
}
 800ef58:	46c0      	nop			@ (mov r8, r8)
 800ef5a:	46c0      	nop			@ (mov r8, r8)
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	b006      	add	sp, #24
 800ef60:	bd80      	pop	{r7, pc}
	...

0800ef64 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	60f8      	str	r0, [r7, #12]
 800ef6c:	60b9      	str	r1, [r7, #8]
 800ef6e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	68ba      	ldr	r2, [r7, #8]
 800ef74:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	d113      	bne.n	800efaa <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	22fe      	movs	r2, #254	@ 0xfe
 800ef86:	0592      	lsls	r2, r2, #22
 800ef88:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	4a1a      	ldr	r2, [pc, #104]	@ (800eff8 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800ef8e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	4a1a      	ldr	r2, [pc, #104]	@ (800effc <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800ef94:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	4a19      	ldr	r2, [pc, #100]	@ (800f000 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800ef9a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	4a19      	ldr	r2, [pc, #100]	@ (800f004 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800efa0:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	4a18      	ldr	r2, [pc, #96]	@ (800f008 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800efa6:	61da      	str	r2, [r3, #28]
 800efa8:	e011      	b.n	800efce <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	4a17      	ldr	r2, [pc, #92]	@ (800f00c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800efae:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	4a17      	ldr	r2, [pc, #92]	@ (800f010 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800efb4:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	4a16      	ldr	r2, [pc, #88]	@ (800f014 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800efba:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	4a16      	ldr	r2, [pc, #88]	@ (800f018 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800efc0:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	4a15      	ldr	r2, [pc, #84]	@ (800f01c <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800efc6:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	4a15      	ldr	r2, [pc, #84]	@ (800f020 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800efcc:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	4a14      	ldr	r2, [pc, #80]	@ (800f024 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800efd2:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	4a14      	ldr	r2, [pc, #80]	@ (800f028 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800efd8:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	4a12      	ldr	r2, [pc, #72]	@ (800f028 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800efde:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	4a12      	ldr	r2, [pc, #72]	@ (800f02c <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800efe4:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	0018      	movs	r0, r3
 800efea:	f000 f831 	bl	800f050 <GasIndexAlgorithm_reset>
}
 800efee:	46c0      	nop			@ (mov r8, r8)
 800eff0:	46bd      	mov	sp, r7
 800eff2:	b004      	add	sp, #16
 800eff4:	bd80      	pop	{r7, pc}
 800eff6:	46c0      	nop			@ (mov r8, r8)
 800eff8:	00002710 	.word	0x00002710
 800effc:	44340000 	.word	0x44340000
 800f000:	46859800 	.word	0x46859800
 800f004:	46a05000 	.word	0x46a05000
 800f008:	41f00000 	.word	0x41f00000
 800f00c:	42c80000 	.word	0x42c80000
 800f010:	00004e20 	.word	0x00004e20
 800f014:	43340000 	.word	0x43340000
 800f018:	4528c000 	.word	0x4528c000
 800f01c:	45a32000 	.word	0x45a32000
 800f020:	43aa0000 	.word	0x43aa0000
 800f024:	43660000 	.word	0x43660000
 800f028:	41400000 	.word	0x41400000
 800f02c:	42480000 	.word	0x42480000

0800f030 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800f03a:	22fe      	movs	r2, #254	@ 0xfe
 800f03c:	0592      	lsls	r2, r2, #22
 800f03e:	6839      	ldr	r1, [r7, #0]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	0018      	movs	r0, r3
 800f044:	f7ff ff8e 	bl	800ef64 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800f048:	46c0      	nop			@ (mov r8, r8)
 800f04a:	46bd      	mov	sp, r7
 800f04c:	b002      	add	sp, #8
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2200      	movs	r2, #0
 800f062:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2200      	movs	r2, #0
 800f068:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	0018      	movs	r0, r3
 800f06e:	f000 f805 	bl	800f07c <GasIndexAlgorithm__init_instances>
}
 800f072:	46c0      	nop			@ (mov r8, r8)
 800f074:	46bd      	mov	sp, r7
 800f076:	b002      	add	sp, #8
 800f078:	bd80      	pop	{r7, pc}
	...

0800f07c <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800f07c:	b590      	push	{r4, r7, lr}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	0018      	movs	r0, r3
 800f088:	f000 f8e8 	bl	800f25c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	0018      	movs	r0, r3
 800f090:	f000 f9a6 	bl	800f3e0 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f094:	1c04      	adds	r4, r0, #0
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	0018      	movs	r0, r3
 800f09a:	f000 f9ab 	bl	800f3f4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f09e:	1c02      	adds	r2, r0, #0
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	1c21      	adds	r1, r4, #0
 800f0a4:	0018      	movs	r0, r3
 800f0a6:	f000 fc3b 	bl	800f920 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d107      	bne.n	800f0c2 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f0b2:	23fe      	movs	r3, #254	@ 0xfe
 800f0b4:	059b      	lsls	r3, r3, #22
 800f0b6:	4a0a      	ldr	r2, [pc, #40]	@ (800f0e0 <GasIndexAlgorithm__init_instances+0x64>)
 800f0b8:	490a      	ldr	r1, [pc, #40]	@ (800f0e4 <GasIndexAlgorithm__init_instances+0x68>)
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 fc86 	bl	800f9cc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800f0c0:	e005      	b.n	800f0ce <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f0c2:	4b09      	ldr	r3, [pc, #36]	@ (800f0e8 <GasIndexAlgorithm__init_instances+0x6c>)
 800f0c4:	4a09      	ldr	r2, [pc, #36]	@ (800f0ec <GasIndexAlgorithm__init_instances+0x70>)
 800f0c6:	490a      	ldr	r1, [pc, #40]	@ (800f0f0 <GasIndexAlgorithm__init_instances+0x74>)
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fc7f 	bl	800f9cc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	0018      	movs	r0, r3
 800f0d2:	f000 fd35 	bl	800fb40 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800f0d6:	46c0      	nop			@ (mov r8, r8)
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	b003      	add	sp, #12
 800f0dc:	bd90      	pop	{r4, r7, pc}
 800f0de:	46c0      	nop			@ (mov r8, r8)
 800f0e0:	bc257a78 	.word	0xbc257a78
 800f0e4:	44198000 	.word	0x44198000
 800f0e8:	42c80000 	.word	0x42c80000
 800f0ec:	bbd4fdf4 	.word	0xbbd4fdf4
 800f0f0:	43550000 	.word	0x43550000

0800f0f4 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800f0f4:	b590      	push	{r4, r7, lr}
 800f0f6:	b085      	sub	sp, #20
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f104:	4952      	ldr	r1, [pc, #328]	@ (800f250 <GasIndexAlgorithm_process+0x15c>)
 800f106:	1c18      	adds	r0, r3, #0
 800f108:	f7f1 fa1c 	bl	8000544 <__aeabi_fcmple>
 800f10c:	1e03      	subs	r3, r0, #0
 800f10e:	d00c      	beq.n	800f12a <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	1c19      	adds	r1, r3, #0
 800f11a:	1c10      	adds	r0, r2, #0
 800f11c:	f7f1 fbd0 	bl	80008c0 <__aeabi_fadd>
 800f120:	1c03      	adds	r3, r0, #0
 800f122:	1c1a      	adds	r2, r3, #0
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	631a      	str	r2, [r3, #48]	@ 0x30
 800f128:	e080      	b.n	800f22c <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	dd25      	ble.n	800f17c <GasIndexAlgorithm_process+0x88>
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	4a48      	ldr	r2, [pc, #288]	@ (800f254 <GasIndexAlgorithm_process+0x160>)
 800f134:	4293      	cmp	r3, r2
 800f136:	dc21      	bgt.n	800f17c <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	68ba      	ldr	r2, [r7, #8]
 800f13e:	429a      	cmp	r2, r3
 800f140:	dc04      	bgt.n	800f14c <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	3301      	adds	r3, #1
 800f148:	60bb      	str	r3, [r7, #8]
 800f14a:	e00d      	b.n	800f168 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	4a41      	ldr	r2, [pc, #260]	@ (800f258 <GasIndexAlgorithm_process+0x164>)
 800f152:	4694      	mov	ip, r2
 800f154:	4463      	add	r3, ip
 800f156:	68ba      	ldr	r2, [r7, #8]
 800f158:	429a      	cmp	r2, r3
 800f15a:	dd05      	ble.n	800f168 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	4a3d      	ldr	r2, [pc, #244]	@ (800f258 <GasIndexAlgorithm_process+0x164>)
 800f162:	4694      	mov	ip, r2
 800f164:	4463      	add	r3, ip
 800f166:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	68ba      	ldr	r2, [r7, #8]
 800f16e:	1ad3      	subs	r3, r2, r3
 800f170:	0018      	movs	r0, r3
 800f172:	f7f2 fb59 	bl	8001828 <__aeabi_i2f>
 800f176:	1c02      	adds	r2, r0, #0
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d005      	beq.n	800f190 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	0018      	movs	r0, r3
 800f188:	f000 f945 	bl	800f416 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800f18c:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800f18e:	d014      	beq.n	800f1ba <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	1c11      	adds	r1, r2, #0
 800f198:	0018      	movs	r0, r3
 800f19a:	f000 fbd1 	bl	800f940 <GasIndexAlgorithm__mox_model__process>
 800f19e:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	1c11      	adds	r1, r2, #0
 800f1ac:	0018      	movs	r0, r3
 800f1ae:	f000 fc25 	bl	800f9fc <GasIndexAlgorithm__sigmoid_scaled__process>
 800f1b2:	1c02      	adds	r2, r0, #0
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	639a      	str	r2, [r3, #56]	@ 0x38
 800f1b8:	e003      	b.n	800f1c2 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	689a      	ldr	r2, [r3, #8]
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	1c11      	adds	r1, r2, #0
 800f1ca:	0018      	movs	r0, r3
 800f1cc:	f000 fcec 	bl	800fba8 <GasIndexAlgorithm__adaptive_lowpass__process>
 800f1d0:	1c02      	adds	r2, r0, #0
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1da:	21fc      	movs	r1, #252	@ 0xfc
 800f1dc:	0589      	lsls	r1, r1, #22
 800f1de:	1c18      	adds	r0, r3, #0
 800f1e0:	f7f1 f9a6 	bl	8000530 <__aeabi_fcmplt>
 800f1e4:	1e03      	subs	r3, r0, #0
 800f1e6:	d003      	beq.n	800f1f0 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	22fc      	movs	r2, #252	@ 0xfc
 800f1ec:	0592      	lsls	r2, r2, #22
 800f1ee:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1f4:	2100      	movs	r1, #0
 800f1f6:	1c18      	adds	r0, r3, #0
 800f1f8:	f7f1 f9ae 	bl	8000558 <__aeabi_fcmpgt>
 800f1fc:	1e03      	subs	r3, r0, #0
 800f1fe:	d015      	beq.n	800f22c <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	1c11      	adds	r1, r2, #0
 800f208:	0018      	movs	r0, r3
 800f20a:	f000 fa4f 	bl	800f6ac <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	0018      	movs	r0, r3
 800f212:	f000 f8e5 	bl	800f3e0 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f216:	1c04      	adds	r4, r0, #0
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	0018      	movs	r0, r3
 800f21c:	f000 f8ea 	bl	800f3f4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f220:	1c02      	adds	r2, r0, #0
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	1c21      	adds	r1, r4, #0
 800f226:	0018      	movs	r0, r3
 800f228:	f000 fb7a 	bl	800f920 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f230:	21fc      	movs	r1, #252	@ 0xfc
 800f232:	0589      	lsls	r1, r1, #22
 800f234:	1c18      	adds	r0, r3, #0
 800f236:	f7f1 fb43 	bl	80008c0 <__aeabi_fadd>
 800f23a:	1c03      	adds	r3, r0, #0
 800f23c:	1c18      	adds	r0, r3, #0
 800f23e:	f7f2 fad3 	bl	80017e8 <__aeabi_f2iz>
 800f242:	0002      	movs	r2, r0
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	601a      	str	r2, [r3, #0]
    return;
 800f248:	46c0      	nop			@ (mov r8, r8)
}
 800f24a:	46bd      	mov	sp, r7
 800f24c:	b005      	add	sp, #20
 800f24e:	bd90      	pop	{r4, r7, pc}
 800f250:	42340000 	.word	0x42340000
 800f254:	0000fde7 	.word	0x0000fde7
 800f258:	00007fff 	.word	0x00007fff

0800f25c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800f25c:	b5b0      	push	{r4, r5, r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	223c      	movs	r2, #60	@ 0x3c
 800f268:	2100      	movs	r1, #0
 800f26a:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	4952      	ldr	r1, [pc, #328]	@ (800f3d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f286:	1c18      	adds	r0, r3, #0
 800f288:	f7f1 fd0c 	bl	8000ca4 <__aeabi_fdiv>
 800f28c:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f28e:	2188      	movs	r1, #136	@ 0x88
 800f290:	05c9      	lsls	r1, r1, #23
 800f292:	1c18      	adds	r0, r3, #0
 800f294:	f7f1 fed4 	bl	8001040 <__aeabi_fmul>
 800f298:	1c03      	adds	r3, r0, #0
 800f29a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	494a      	ldr	r1, [pc, #296]	@ (800f3d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f2a6:	1c18      	adds	r0, r3, #0
 800f2a8:	f7f1 fcfc 	bl	8000ca4 <__aeabi_fdiv>
 800f2ac:	1c03      	adds	r3, r0, #0
 800f2ae:	1c19      	adds	r1, r3, #0
 800f2b0:	1c20      	adds	r0, r4, #0
 800f2b2:	f7f1 fb05 	bl	80008c0 <__aeabi_fadd>
 800f2b6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800f2b8:	1c19      	adds	r1, r3, #0
 800f2ba:	1c28      	adds	r0, r5, #0
 800f2bc:	f7f1 fcf2 	bl	8000ca4 <__aeabi_fdiv>
 800f2c0:	1c03      	adds	r3, r0, #0
 800f2c2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	4940      	ldr	r1, [pc, #256]	@ (800f3d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f2ce:	1c18      	adds	r0, r3, #0
 800f2d0:	f7f1 fce8 	bl	8000ca4 <__aeabi_fdiv>
 800f2d4:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f2d6:	2185      	movs	r1, #133	@ 0x85
 800f2d8:	05c9      	lsls	r1, r1, #23
 800f2da:	1c18      	adds	r0, r3, #0
 800f2dc:	f7f1 feb0 	bl	8001040 <__aeabi_fmul>
 800f2e0:	1c03      	adds	r3, r0, #0
 800f2e2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	4938      	ldr	r1, [pc, #224]	@ (800f3d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f2ee:	1c18      	adds	r0, r3, #0
 800f2f0:	f7f1 fcd8 	bl	8000ca4 <__aeabi_fdiv>
 800f2f4:	1c03      	adds	r3, r0, #0
 800f2f6:	1c19      	adds	r1, r3, #0
 800f2f8:	1c20      	adds	r0, r4, #0
 800f2fa:	f7f1 fae1 	bl	80008c0 <__aeabi_fadd>
 800f2fe:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800f300:	1c19      	adds	r1, r3, #0
 800f302:	1c28      	adds	r0, r5, #0
 800f304:	f7f1 fcce 	bl	8000ca4 <__aeabi_fdiv>
 800f308:	1c03      	adds	r3, r0, #0
 800f30a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2b01      	cmp	r3, #1
 800f316:	d118      	bne.n	800f34a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f31c:	2188      	movs	r1, #136	@ 0x88
 800f31e:	05c9      	lsls	r1, r1, #23
 800f320:	1c18      	adds	r0, r3, #0
 800f322:	f7f1 fe8d 	bl	8001040 <__aeabi_fmul>
 800f326:	1c03      	adds	r3, r0, #0
 800f328:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800f32e:	4929      	ldr	r1, [pc, #164]	@ (800f3d4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800f330:	1c18      	adds	r0, r3, #0
 800f332:	f7f1 fac5 	bl	80008c0 <__aeabi_fadd>
 800f336:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800f338:	1c19      	adds	r1, r3, #0
 800f33a:	1c20      	adds	r0, r4, #0
 800f33c:	f7f1 fcb2 	bl	8000ca4 <__aeabi_fdiv>
 800f340:	1c03      	adds	r3, r0, #0
 800f342:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	655a      	str	r2, [r3, #84]	@ 0x54
 800f348:	e017      	b.n	800f37a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f34e:	2188      	movs	r1, #136	@ 0x88
 800f350:	05c9      	lsls	r1, r1, #23
 800f352:	1c18      	adds	r0, r3, #0
 800f354:	f7f1 fe74 	bl	8001040 <__aeabi_fmul>
 800f358:	1c03      	adds	r3, r0, #0
 800f35a:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800f360:	491d      	ldr	r1, [pc, #116]	@ (800f3d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800f362:	1c18      	adds	r0, r3, #0
 800f364:	f7f1 faac 	bl	80008c0 <__aeabi_fadd>
 800f368:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800f36a:	1c19      	adds	r1, r3, #0
 800f36c:	1c20      	adds	r0, r4, #0
 800f36e:	f7f1 fc99 	bl	8000ca4 <__aeabi_fdiv>
 800f372:	1c03      	adds	r3, r0, #0
 800f374:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f37e:	2185      	movs	r1, #133	@ 0x85
 800f380:	05c9      	lsls	r1, r1, #23
 800f382:	1c18      	adds	r0, r3, #0
 800f384:	f7f1 fe5c 	bl	8001040 <__aeabi_fmul>
 800f388:	1c03      	adds	r3, r0, #0
 800f38a:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	4912      	ldr	r1, [pc, #72]	@ (800f3dc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800f392:	1c18      	adds	r0, r3, #0
 800f394:	f7f1 fa94 	bl	80008c0 <__aeabi_fadd>
 800f398:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800f39a:	1c19      	adds	r1, r3, #0
 800f39c:	1c20      	adds	r0, r4, #0
 800f39e:	f7f1 fc81 	bl	8000ca4 <__aeabi_fdiv>
 800f3a2:	1c03      	adds	r3, r0, #0
 800f3a4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800f3c8:	46c0      	nop			@ (mov r8, r8)
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	b002      	add	sp, #8
 800f3ce:	bdb0      	pop	{r4, r5, r7, pc}
 800f3d0:	45610000 	.word	0x45610000
 800f3d4:	44960000 	.word	0x44960000
 800f3d8:	41a00000 	.word	0x41a00000
 800f3dc:	451c4000 	.word	0x451c4000

0800f3e0 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800f3ec:	1c18      	adds	r0, r3, #0
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	b002      	add	sp, #8
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800f404:	1c19      	adds	r1, r3, #0
 800f406:	1c10      	adds	r0, r2, #0
 800f408:	f7f1 fa5a 	bl	80008c0 <__aeabi_fadd>
 800f40c:	1c03      	adds	r3, r0, #0
}
 800f40e:	1c18      	adds	r0, r3, #0
 800f410:	46bd      	mov	sp, r7
 800f412:	b002      	add	sp, #8
 800f414:	bd80      	pop	{r7, pc}

0800f416 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800f416:	b580      	push	{r7, lr}
 800f418:	b082      	sub	sp, #8
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	223c      	movs	r2, #60	@ 0x3c
 800f422:	5c9b      	ldrb	r3, [r3, r2]
}
 800f424:	0018      	movs	r0, r3
 800f426:	46bd      	mov	sp, r7
 800f428:	b002      	add	sp, #8
 800f42a:	bd80      	pop	{r7, pc}

0800f42c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800f42c:	b5b0      	push	{r4, r5, r7, lr}
 800f42e:	b08c      	sub	sp, #48	@ 0x30
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800f438:	1c19      	adds	r1, r3, #0
 800f43a:	4895      	ldr	r0, [pc, #596]	@ (800f690 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800f43c:	f7f1 ff5a 	bl	80012f4 <__aeabi_fsub>
 800f440:	1c03      	adds	r3, r0, #0
 800f442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f448:	1c19      	adds	r1, r3, #0
 800f44a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f44c:	f7f1 f884 	bl	8000558 <__aeabi_fcmpgt>
 800f450:	1e03      	subs	r3, r0, #0
 800f452:	d00b      	beq.n	800f46c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f45c:	1c19      	adds	r1, r3, #0
 800f45e:	1c10      	adds	r0, r2, #0
 800f460:	f7f1 fa2e 	bl	80008c0 <__aeabi_fadd>
 800f464:	1c03      	adds	r3, r0, #0
 800f466:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f470:	1c19      	adds	r1, r3, #0
 800f472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f474:	f7f1 f870 	bl	8000558 <__aeabi_fcmpgt>
 800f478:	1e03      	subs	r3, r0, #0
 800f47a:	d00b      	beq.n	800f494 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f484:	1c19      	adds	r1, r3, #0
 800f486:	1c10      	adds	r0, r2, #0
 800f488:	f7f1 fa1a 	bl	80008c0 <__aeabi_fadd>
 800f48c:	1c03      	adds	r3, r0, #0
 800f48e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	6959      	ldr	r1, [r3, #20]
 800f498:	4a7e      	ldr	r2, [pc, #504]	@ (800f694 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	0018      	movs	r0, r3
 800f49e:	f000 f9f1 	bl	800f884 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	1c11      	adds	r1, r2, #0
 800f4aa:	0018      	movs	r0, r3
 800f4ac:	f000 f9fa 	bl	800f8a4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f4b0:	1c03      	adds	r3, r0, #0
 800f4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f4c0:	1c19      	adds	r1, r3, #0
 800f4c2:	1c10      	adds	r0, r2, #0
 800f4c4:	f7f1 ff16 	bl	80012f4 <__aeabi_fsub>
 800f4c8:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f4ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f4cc:	1c18      	adds	r0, r3, #0
 800f4ce:	f7f1 fdb7 	bl	8001040 <__aeabi_fmul>
 800f4d2:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f4d4:	1c19      	adds	r1, r3, #0
 800f4d6:	1c20      	adds	r0, r4, #0
 800f4d8:	f7f1 f9f2 	bl	80008c0 <__aeabi_fadd>
 800f4dc:	1c03      	adds	r3, r0, #0
 800f4de:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f4e8:	1c19      	adds	r1, r3, #0
 800f4ea:	486b      	ldr	r0, [pc, #428]	@ (800f698 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f4ec:	f7f1 ff02 	bl	80012f4 <__aeabi_fsub>
 800f4f0:	1c03      	adds	r3, r0, #0
 800f4f2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	1c11      	adds	r1, r2, #0
 800f4fc:	0018      	movs	r0, r3
 800f4fe:	f000 f9d1 	bl	800f8a4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f502:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f504:	1c19      	adds	r1, r3, #0
 800f506:	1c28      	adds	r0, r5, #0
 800f508:	f7f1 fd9a 	bl	8001040 <__aeabi_fmul>
 800f50c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800f50e:	1c19      	adds	r1, r3, #0
 800f510:	1c20      	adds	r0, r4, #0
 800f512:	f7f1 f9d5 	bl	80008c0 <__aeabi_fadd>
 800f516:	1c03      	adds	r3, r0, #0
 800f518:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f51a:	4a60      	ldr	r2, [pc, #384]	@ (800f69c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f51c:	6a39      	ldr	r1, [r7, #32]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	0018      	movs	r0, r3
 800f522:	f000 f9af 	bl	800f884 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	1c11      	adds	r1, r2, #0
 800f52e:	0018      	movs	r0, r3
 800f530:	f000 f9b8 	bl	800f8a4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f534:	1c03      	adds	r3, r0, #0
 800f536:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800f538:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f53a:	69f8      	ldr	r0, [r7, #28]
 800f53c:	f7f1 fd80 	bl	8001040 <__aeabi_fmul>
 800f540:	1c03      	adds	r3, r0, #0
 800f542:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6999      	ldr	r1, [r3, #24]
 800f54c:	4a51      	ldr	r2, [pc, #324]	@ (800f694 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	0018      	movs	r0, r3
 800f552:	f000 f997 	bl	800f884 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	1c11      	adds	r1, r2, #0
 800f55e:	0018      	movs	r0, r3
 800f560:	f000 f9a0 	bl	800f8a4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f564:	1c03      	adds	r3, r0, #0
 800f566:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f574:	1c19      	adds	r1, r3, #0
 800f576:	1c10      	adds	r0, r2, #0
 800f578:	f7f1 febc 	bl	80012f4 <__aeabi_fsub>
 800f57c:	1c03      	adds	r3, r0, #0
 800f57e:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800f580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f582:	69b8      	ldr	r0, [r7, #24]
 800f584:	f7f1 feb6 	bl	80012f4 <__aeabi_fsub>
 800f588:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f58a:	1c19      	adds	r1, r3, #0
 800f58c:	1c28      	adds	r0, r5, #0
 800f58e:	f7f1 fd57 	bl	8001040 <__aeabi_fmul>
 800f592:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800f594:	1c19      	adds	r1, r3, #0
 800f596:	1c20      	adds	r0, r4, #0
 800f598:	f7f1 f992 	bl	80008c0 <__aeabi_fadd>
 800f59c:	1c03      	adds	r3, r0, #0
 800f59e:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f5a8:	1c19      	adds	r1, r3, #0
 800f5aa:	483b      	ldr	r0, [pc, #236]	@ (800f698 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f5ac:	f7f1 fea2 	bl	80012f4 <__aeabi_fsub>
 800f5b0:	1c03      	adds	r3, r0, #0
 800f5b2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	1c11      	adds	r1, r2, #0
 800f5bc:	0018      	movs	r0, r3
 800f5be:	f000 f971 	bl	800f8a4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f5c2:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f5c4:	1c19      	adds	r1, r3, #0
 800f5c6:	1c28      	adds	r0, r5, #0
 800f5c8:	f7f1 fd3a 	bl	8001040 <__aeabi_fmul>
 800f5cc:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800f5ce:	1c19      	adds	r1, r3, #0
 800f5d0:	1c20      	adds	r0, r4, #0
 800f5d2:	f7f1 f975 	bl	80008c0 <__aeabi_fadd>
 800f5d6:	1c03      	adds	r3, r0, #0
 800f5d8:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f5da:	4a30      	ldr	r2, [pc, #192]	@ (800f69c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f5dc:	6939      	ldr	r1, [r7, #16]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	0018      	movs	r0, r3
 800f5e2:	f000 f94f 	bl	800f884 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	1c11      	adds	r1, r2, #0
 800f5ee:	0018      	movs	r0, r3
 800f5f0:	f000 f958 	bl	800f8a4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f5f4:	1c03      	adds	r3, r0, #0
 800f5f6:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800f5f8:	6979      	ldr	r1, [r7, #20]
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f7f1 fd20 	bl	8001040 <__aeabi_fmul>
 800f600:	1c03      	adds	r3, r0, #0
 800f602:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	4923      	ldr	r1, [pc, #140]	@ (800f6a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800f612:	1c18      	adds	r0, r3, #0
 800f614:	f7f1 fb46 	bl	8000ca4 <__aeabi_fdiv>
 800f618:	1c03      	adds	r3, r0, #0
 800f61a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800f61c:	69f9      	ldr	r1, [r7, #28]
 800f61e:	20fe      	movs	r0, #254	@ 0xfe
 800f620:	0580      	lsls	r0, r0, #22
 800f622:	f7f1 fe67 	bl	80012f4 <__aeabi_fsub>
 800f626:	1c03      	adds	r3, r0, #0
 800f628:	491e      	ldr	r1, [pc, #120]	@ (800f6a4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800f62a:	1c18      	adds	r0, r3, #0
 800f62c:	f7f1 fd08 	bl	8001040 <__aeabi_fmul>
 800f630:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800f632:	491d      	ldr	r1, [pc, #116]	@ (800f6a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800f634:	1c18      	adds	r0, r3, #0
 800f636:	f7f1 fe5d 	bl	80012f4 <__aeabi_fsub>
 800f63a:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800f63c:	1c19      	adds	r1, r3, #0
 800f63e:	1c28      	adds	r0, r5, #0
 800f640:	f7f1 fcfe 	bl	8001040 <__aeabi_fmul>
 800f644:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f646:	1c19      	adds	r1, r3, #0
 800f648:	1c20      	adds	r0, r4, #0
 800f64a:	f7f1 f939 	bl	80008c0 <__aeabi_fadd>
 800f64e:	1c03      	adds	r3, r0, #0
 800f650:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f65a:	2100      	movs	r1, #0
 800f65c:	1c18      	adds	r0, r3, #0
 800f65e:	f7f0 ff67 	bl	8000530 <__aeabi_fcmplt>
 800f662:	1e03      	subs	r3, r0, #0
 800f664:	d002      	beq.n	800f66c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2200      	movs	r2, #0
 800f66a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f674:	1c19      	adds	r1, r3, #0
 800f676:	1c10      	adds	r0, r2, #0
 800f678:	f7f0 ff6e 	bl	8000558 <__aeabi_fcmpgt>
 800f67c:	1e03      	subs	r3, r0, #0
 800f67e:	d100      	bne.n	800f682 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800f680:	e002      	b.n	800f688 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f688:	46c0      	nop			@ (mov r8, r8)
 800f68a:	46bd      	mov	sp, r7
 800f68c:	b00c      	add	sp, #48	@ 0x30
 800f68e:	bdb0      	pop	{r4, r5, r7, pc}
 800f690:	46fffe00 	.word	0x46fffe00
 800f694:	3c23d70a 	.word	0x3c23d70a
 800f698:	43ff0000 	.word	0x43ff0000
 800f69c:	3db851ec 	.word	0x3db851ec
 800f6a0:	42700000 	.word	0x42700000
 800f6a4:	3fa66666 	.word	0x3fa66666
 800f6a8:	3e99999a 	.word	0x3e99999a

0800f6ac <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800f6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6ae:	b087      	sub	sp, #28
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	223c      	movs	r2, #60	@ 0x3c
 800f6ba:	5c9b      	ldrb	r3, [r3, r2]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	4053      	eors	r3, r2
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00a      	beq.n	800f6dc <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	223c      	movs	r2, #60	@ 0x3c
 800f6ca:	2101      	movs	r1, #1
 800f6cc:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	683a      	ldr	r2, [r7, #0]
 800f6d2:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800f6da:	e0c8      	b.n	800f86e <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6e0:	4965      	ldr	r1, [pc, #404]	@ (800f878 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800f6e2:	1c18      	adds	r0, r3, #0
 800f6e4:	f7f0 ff42 	bl	800056c <__aeabi_fcmpge>
 800f6e8:	1e03      	subs	r3, r0, #0
 800f6ea:	d107      	bne.n	800f6fc <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f6f0:	4962      	ldr	r1, [pc, #392]	@ (800f87c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800f6f2:	1c18      	adds	r0, r3, #0
 800f6f4:	f7f0 ff26 	bl	8000544 <__aeabi_fcmple>
 800f6f8:	1e03      	subs	r3, r0, #0
 800f6fa:	d00e      	beq.n	800f71a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f704:	1c19      	adds	r1, r3, #0
 800f706:	1c10      	adds	r0, r2, #0
 800f708:	f7f1 f8da 	bl	80008c0 <__aeabi_fadd>
 800f70c:	1c03      	adds	r3, r0, #0
 800f70e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f71e:	1c19      	adds	r1, r3, #0
 800f720:	6838      	ldr	r0, [r7, #0]
 800f722:	f7f1 fde7 	bl	80012f4 <__aeabi_fsub>
 800f726:	1c03      	adds	r3, r0, #0
 800f728:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	0018      	movs	r0, r3
 800f72e:	f7ff fe7d 	bl	800f42c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f736:	1c19      	adds	r1, r3, #0
 800f738:	6838      	ldr	r0, [r7, #0]
 800f73a:	f7f1 fddb 	bl	80012f4 <__aeabi_fsub>
 800f73e:	1c03      	adds	r3, r0, #0
 800f740:	2185      	movs	r1, #133	@ 0x85
 800f742:	05c9      	lsls	r1, r1, #23
 800f744:	1c18      	adds	r0, r3, #0
 800f746:	f7f1 faad 	bl	8000ca4 <__aeabi_fdiv>
 800f74a:	1c03      	adds	r3, r0, #0
 800f74c:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800f74e:	2100      	movs	r1, #0
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f7f0 feed 	bl	8000530 <__aeabi_fcmplt>
 800f756:	1e03      	subs	r3, r0, #0
 800f758:	d008      	beq.n	800f76c <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f75e:	68f9      	ldr	r1, [r7, #12]
 800f760:	1c18      	adds	r0, r3, #0
 800f762:	f7f1 fdc7 	bl	80012f4 <__aeabi_fsub>
 800f766:	1c03      	adds	r3, r0, #0
 800f768:	617b      	str	r3, [r7, #20]
 800f76a:	e007      	b.n	800f77c <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f770:	1c19      	adds	r1, r3, #0
 800f772:	68f8      	ldr	r0, [r7, #12]
 800f774:	f7f1 f8a4 	bl	80008c0 <__aeabi_fadd>
 800f778:	1c03      	adds	r3, r0, #0
 800f77a:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800f77c:	23fe      	movs	r3, #254	@ 0xfe
 800f77e:	059b      	lsls	r3, r3, #22
 800f780:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800f782:	493f      	ldr	r1, [pc, #252]	@ (800f880 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f784:	6978      	ldr	r0, [r7, #20]
 800f786:	f7f0 fee7 	bl	8000558 <__aeabi_fcmpgt>
 800f78a:	1e03      	subs	r3, r0, #0
 800f78c:	d010      	beq.n	800f7b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800f78e:	493c      	ldr	r1, [pc, #240]	@ (800f880 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f790:	6978      	ldr	r0, [r7, #20]
 800f792:	f7f1 fa87 	bl	8000ca4 <__aeabi_fdiv>
 800f796:	1c03      	adds	r3, r0, #0
 800f798:	1c1c      	adds	r4, r3, #0
 800f79a:	4939      	ldr	r1, [pc, #228]	@ (800f880 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f79c:	6978      	ldr	r0, [r7, #20]
 800f79e:	f7f1 fa81 	bl	8000ca4 <__aeabi_fdiv>
 800f7a2:	1c03      	adds	r3, r0, #0
 800f7a4:	1c19      	adds	r1, r3, #0
 800f7a6:	1c20      	adds	r0, r4, #0
 800f7a8:	f7f1 fc4a 	bl	8001040 <__aeabi_fmul>
 800f7ac:	1c03      	adds	r3, r0, #0
 800f7ae:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800f7b4:	1c19      	adds	r1, r3, #0
 800f7b6:	2085      	movs	r0, #133	@ 0x85
 800f7b8:	05c0      	lsls	r0, r0, #23
 800f7ba:	f7f1 fd9b 	bl	80012f4 <__aeabi_fsub>
 800f7be:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800f7c0:	6939      	ldr	r1, [r7, #16]
 800f7c2:	1c18      	adds	r0, r3, #0
 800f7c4:	f7f1 fc3c 	bl	8001040 <__aeabi_fmul>
 800f7c8:	1c03      	adds	r3, r0, #0
 800f7ca:	1c18      	adds	r0, r3, #0
 800f7cc:	f018 fd9e 	bl	802830c <sqrtf>
 800f7d0:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f7da:	2185      	movs	r1, #133	@ 0x85
 800f7dc:	05c9      	lsls	r1, r1, #23
 800f7de:	6938      	ldr	r0, [r7, #16]
 800f7e0:	f7f1 fc2e 	bl	8001040 <__aeabi_fmul>
 800f7e4:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800f7e6:	1c19      	adds	r1, r3, #0
 800f7e8:	1c28      	adds	r0, r5, #0
 800f7ea:	f7f1 fa5b 	bl	8000ca4 <__aeabi_fdiv>
 800f7ee:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800f7f0:	1c19      	adds	r1, r3, #0
 800f7f2:	1c20      	adds	r0, r4, #0
 800f7f4:	f7f1 fc24 	bl	8001040 <__aeabi_fmul>
 800f7f8:	1c03      	adds	r3, r0, #0
 800f7fa:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f800:	68f9      	ldr	r1, [r7, #12]
 800f802:	1c18      	adds	r0, r3, #0
 800f804:	f7f1 fc1c 	bl	8001040 <__aeabi_fmul>
 800f808:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800f80a:	6939      	ldr	r1, [r7, #16]
 800f80c:	1c18      	adds	r0, r3, #0
 800f80e:	f7f1 fa49 	bl	8000ca4 <__aeabi_fdiv>
 800f812:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800f814:	68f9      	ldr	r1, [r7, #12]
 800f816:	1c18      	adds	r0, r3, #0
 800f818:	f7f1 fc12 	bl	8001040 <__aeabi_fmul>
 800f81c:	1c03      	adds	r3, r0, #0
             sqrtf(
 800f81e:	1c19      	adds	r1, r3, #0
 800f820:	1c20      	adds	r0, r4, #0
 800f822:	f7f1 f84d 	bl	80008c0 <__aeabi_fadd>
 800f826:	1c03      	adds	r3, r0, #0
 800f828:	1c18      	adds	r0, r3, #0
 800f82a:	f018 fd6f 	bl	802830c <sqrtf>
 800f82e:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800f830:	1c19      	adds	r1, r3, #0
 800f832:	1c30      	adds	r0, r6, #0
 800f834:	f7f1 fc04 	bl	8001040 <__aeabi_fmul>
 800f838:	1c03      	adds	r3, r0, #0
 800f83a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f848:	68f9      	ldr	r1, [r7, #12]
 800f84a:	1c18      	adds	r0, r3, #0
 800f84c:	f7f1 fbf8 	bl	8001040 <__aeabi_fmul>
 800f850:	1c03      	adds	r3, r0, #0
 800f852:	2182      	movs	r1, #130	@ 0x82
 800f854:	05c9      	lsls	r1, r1, #23
 800f856:	1c18      	adds	r0, r3, #0
 800f858:	f7f1 fa24 	bl	8000ca4 <__aeabi_fdiv>
 800f85c:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800f85e:	1c19      	adds	r1, r3, #0
 800f860:	1c20      	adds	r0, r4, #0
 800f862:	f7f1 f82d 	bl	80008c0 <__aeabi_fadd>
 800f866:	1c03      	adds	r3, r0, #0
 800f868:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f86e:	46c0      	nop			@ (mov r8, r8)
 800f870:	46bd      	mov	sp, r7
 800f872:	b007      	add	sp, #28
 800f874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f876:	46c0      	nop			@ (mov r8, r8)
 800f878:	42c80000 	.word	0x42c80000
 800f87c:	c2c80000 	.word	0xc2c80000
 800f880:	44b40000 	.word	0x44b40000

0800f884 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	687a      	ldr	r2, [r7, #4]
 800f894:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f89c:	46c0      	nop			@ (mov r8, r8)
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	b004      	add	sp, #16
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800f8a4:	b590      	push	{r4, r7, lr}
 800f8a6:	b085      	sub	sp, #20
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f8b6:	1c19      	adds	r1, r3, #0
 800f8b8:	6838      	ldr	r0, [r7, #0]
 800f8ba:	f7f1 fd1b 	bl	80012f4 <__aeabi_fsub>
 800f8be:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800f8c0:	1c19      	adds	r1, r3, #0
 800f8c2:	1c20      	adds	r0, r4, #0
 800f8c4:	f7f1 fbbc 	bl	8001040 <__aeabi_fmul>
 800f8c8:	1c03      	adds	r3, r0, #0
 800f8ca:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800f8cc:	4912      	ldr	r1, [pc, #72]	@ (800f918 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800f8ce:	68f8      	ldr	r0, [r7, #12]
 800f8d0:	f7f0 fe2e 	bl	8000530 <__aeabi_fcmplt>
 800f8d4:	1e03      	subs	r3, r0, #0
 800f8d6:	d002      	beq.n	800f8de <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800f8d8:	23fe      	movs	r3, #254	@ 0xfe
 800f8da:	059b      	lsls	r3, r3, #22
 800f8dc:	e018      	b.n	800f910 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800f8de:	490f      	ldr	r1, [pc, #60]	@ (800f91c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800f8e0:	68f8      	ldr	r0, [r7, #12]
 800f8e2:	f7f0 fe39 	bl	8000558 <__aeabi_fcmpgt>
 800f8e6:	1e03      	subs	r3, r0, #0
 800f8e8:	d001      	beq.n	800f8ee <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	e010      	b.n	800f910 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	1c18      	adds	r0, r3, #0
 800f8f2:	f018 fce3 	bl	80282bc <expf>
 800f8f6:	1c03      	adds	r3, r0, #0
 800f8f8:	21fe      	movs	r1, #254	@ 0xfe
 800f8fa:	0589      	lsls	r1, r1, #22
 800f8fc:	1c18      	adds	r0, r3, #0
 800f8fe:	f7f0 ffdf 	bl	80008c0 <__aeabi_fadd>
 800f902:	1c03      	adds	r3, r0, #0
 800f904:	1c19      	adds	r1, r3, #0
 800f906:	20fe      	movs	r0, #254	@ 0xfe
 800f908:	0580      	lsls	r0, r0, #22
 800f90a:	f7f1 f9cb 	bl	8000ca4 <__aeabi_fdiv>
 800f90e:	1c03      	adds	r3, r0, #0
    }
}
 800f910:	1c18      	adds	r0, r3, #0
 800f912:	46bd      	mov	sp, r7
 800f914:	b005      	add	sp, #20
 800f916:	bd90      	pop	{r4, r7, pc}
 800f918:	c2480000 	.word	0xc2480000
 800f91c:	42480000 	.word	0x42480000

0800f920 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	60f8      	str	r0, [r7, #12]
 800f928:	60b9      	str	r1, [r7, #8]
 800f92a:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	68ba      	ldr	r2, [r7, #8]
 800f930:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f938:	46c0      	nop			@ (mov r8, r8)
 800f93a:	46bd      	mov	sp, r7
 800f93c:	b004      	add	sp, #16
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800f940:	b590      	push	{r4, r7, lr}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d114      	bne.n	800f97c <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f956:	1c19      	adds	r1, r3, #0
 800f958:	6838      	ldr	r0, [r7, #0]
 800f95a:	f7f1 fccb 	bl	80012f4 <__aeabi_fsub>
 800f95e:	1c03      	adds	r3, r0, #0
 800f960:	4918      	ldr	r1, [pc, #96]	@ (800f9c4 <GasIndexAlgorithm__mox_model__process+0x84>)
 800f962:	1c18      	adds	r0, r3, #0
 800f964:	f7f1 f99e 	bl	8000ca4 <__aeabi_fdiv>
 800f968:	1c03      	adds	r3, r0, #0
 800f96a:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800f970:	1c19      	adds	r1, r3, #0
 800f972:	1c10      	adds	r0, r2, #0
 800f974:	f7f1 fb64 	bl	8001040 <__aeabi_fmul>
 800f978:	1c03      	adds	r3, r0, #0
 800f97a:	e01f      	b.n	800f9bc <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f980:	1c19      	adds	r1, r3, #0
 800f982:	6838      	ldr	r0, [r7, #0]
 800f984:	f7f1 fcb6 	bl	80012f4 <__aeabi_fsub>
 800f988:	1c03      	adds	r3, r0, #0
 800f98a:	1c1a      	adds	r2, r3, #0
 800f98c:	2380      	movs	r3, #128	@ 0x80
 800f98e:	061b      	lsls	r3, r3, #24
 800f990:	4053      	eors	r3, r2
 800f992:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f998:	490b      	ldr	r1, [pc, #44]	@ (800f9c8 <GasIndexAlgorithm__mox_model__process+0x88>)
 800f99a:	1c18      	adds	r0, r3, #0
 800f99c:	f7f0 ff90 	bl	80008c0 <__aeabi_fadd>
 800f9a0:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f9a2:	1c19      	adds	r1, r3, #0
 800f9a4:	1c20      	adds	r0, r4, #0
 800f9a6:	f7f1 f97d 	bl	8000ca4 <__aeabi_fdiv>
 800f9aa:	1c03      	adds	r3, r0, #0
 800f9ac:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800f9b2:	1c19      	adds	r1, r3, #0
 800f9b4:	1c10      	adds	r0, r2, #0
 800f9b6:	f7f1 fb43 	bl	8001040 <__aeabi_fmul>
 800f9ba:	1c03      	adds	r3, r0, #0
    }
}
 800f9bc:	1c18      	adds	r0, r3, #0
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	b003      	add	sp, #12
 800f9c2:	bd90      	pop	{r4, r7, pc}
 800f9c4:	44fa0000 	.word	0x44fa0000
 800f9c8:	435c0000 	.word	0x435c0000

0800f9cc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
 800f9d8:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2180      	movs	r1, #128	@ 0x80
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2184      	movs	r1, #132	@ 0x84
 800f9e6:	68ba      	ldr	r2, [r7, #8]
 800f9e8:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2188      	movs	r1, #136	@ 0x88
 800f9ee:	683a      	ldr	r2, [r7, #0]
 800f9f0:	505a      	str	r2, [r3, r1]
}
 800f9f2:	46c0      	nop			@ (mov r8, r8)
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	b004      	add	sp, #16
 800f9f8:	bd80      	pop	{r7, pc}
	...

0800f9fc <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800f9fc:	b590      	push	{r4, r7, lr}
 800f9fe:	b085      	sub	sp, #20
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2280      	movs	r2, #128	@ 0x80
 800fa0a:	589c      	ldr	r4, [r3, r2]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2284      	movs	r2, #132	@ 0x84
 800fa10:	589b      	ldr	r3, [r3, r2]
 800fa12:	1c19      	adds	r1, r3, #0
 800fa14:	6838      	ldr	r0, [r7, #0]
 800fa16:	f7f1 fc6d 	bl	80012f4 <__aeabi_fsub>
 800fa1a:	1c03      	adds	r3, r0, #0
 800fa1c:	1c19      	adds	r1, r3, #0
 800fa1e:	1c20      	adds	r0, r4, #0
 800fa20:	f7f1 fb0e 	bl	8001040 <__aeabi_fmul>
 800fa24:	1c03      	adds	r3, r0, #0
 800fa26:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800fa28:	4940      	ldr	r1, [pc, #256]	@ (800fb2c <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800fa2a:	68b8      	ldr	r0, [r7, #8]
 800fa2c:	f7f0 fd80 	bl	8000530 <__aeabi_fcmplt>
 800fa30:	1e03      	subs	r3, r0, #0
 800fa32:	d001      	beq.n	800fa38 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800fa34:	4b3e      	ldr	r3, [pc, #248]	@ (800fb30 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fa36:	e075      	b.n	800fb24 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800fa38:	493e      	ldr	r1, [pc, #248]	@ (800fb34 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800fa3a:	68b8      	ldr	r0, [r7, #8]
 800fa3c:	f7f0 fd8c 	bl	8000558 <__aeabi_fcmpgt>
 800fa40:	1e03      	subs	r3, r0, #0
 800fa42:	d001      	beq.n	800fa48 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800fa44:	2300      	movs	r3, #0
 800fa46:	e06d      	b.n	800fb24 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800fa48:	2100      	movs	r1, #0
 800fa4a:	6838      	ldr	r0, [r7, #0]
 800fa4c:	f7f0 fd8e 	bl	800056c <__aeabi_fcmpge>
 800fa50:	1e03      	subs	r3, r0, #0
 800fa52:	d047      	beq.n	800fae4 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2288      	movs	r2, #136	@ 0x88
 800fa58:	589b      	ldr	r3, [r3, r2]
 800fa5a:	21fe      	movs	r1, #254	@ 0xfe
 800fa5c:	0589      	lsls	r1, r1, #22
 800fa5e:	1c18      	adds	r0, r3, #0
 800fa60:	f7f0 fd60 	bl	8000524 <__aeabi_fcmpeq>
 800fa64:	1e03      	subs	r3, r0, #0
 800fa66:	d00e      	beq.n	800fa86 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	689b      	ldr	r3, [r3, #8]
 800fa6c:	1c19      	adds	r1, r3, #0
 800fa6e:	20fe      	movs	r0, #254	@ 0xfe
 800fa70:	0580      	lsls	r0, r0, #22
 800fa72:	f7f1 fc3f 	bl	80012f4 <__aeabi_fsub>
 800fa76:	1c03      	adds	r3, r0, #0
 800fa78:	492f      	ldr	r1, [pc, #188]	@ (800fb38 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800fa7a:	1c18      	adds	r0, r3, #0
 800fa7c:	f7f1 fae0 	bl	8001040 <__aeabi_fmul>
 800fa80:	1c03      	adds	r3, r0, #0
 800fa82:	60fb      	str	r3, [r7, #12]
 800fa84:	e012      	b.n	800faac <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	689b      	ldr	r3, [r3, #8]
 800fa8a:	492c      	ldr	r1, [pc, #176]	@ (800fb3c <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800fa8c:	1c18      	adds	r0, r3, #0
 800fa8e:	f7f1 fad7 	bl	8001040 <__aeabi_fmul>
 800fa92:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800fa94:	1c19      	adds	r1, r3, #0
 800fa96:	4826      	ldr	r0, [pc, #152]	@ (800fb30 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fa98:	f7f1 fc2c 	bl	80012f4 <__aeabi_fsub>
 800fa9c:	1c03      	adds	r3, r0, #0
 800fa9e:	2181      	movs	r1, #129	@ 0x81
 800faa0:	05c9      	lsls	r1, r1, #23
 800faa2:	1c18      	adds	r0, r3, #0
 800faa4:	f7f1 f8fe 	bl	8000ca4 <__aeabi_fdiv>
 800faa8:	1c03      	adds	r3, r0, #0
 800faaa:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800faac:	4920      	ldr	r1, [pc, #128]	@ (800fb30 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800faae:	68f8      	ldr	r0, [r7, #12]
 800fab0:	f7f0 ff06 	bl	80008c0 <__aeabi_fadd>
 800fab4:	1c03      	adds	r3, r0, #0
 800fab6:	1c1c      	adds	r4, r3, #0
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	1c18      	adds	r0, r3, #0
 800fabc:	f018 fbfe 	bl	80282bc <expf>
 800fac0:	1c03      	adds	r3, r0, #0
 800fac2:	21fe      	movs	r1, #254	@ 0xfe
 800fac4:	0589      	lsls	r1, r1, #22
 800fac6:	1c18      	adds	r0, r3, #0
 800fac8:	f7f0 fefa 	bl	80008c0 <__aeabi_fadd>
 800facc:	1c03      	adds	r3, r0, #0
 800face:	1c19      	adds	r1, r3, #0
 800fad0:	1c20      	adds	r0, r4, #0
 800fad2:	f7f1 f8e7 	bl	8000ca4 <__aeabi_fdiv>
 800fad6:	1c03      	adds	r3, r0, #0
 800fad8:	68f9      	ldr	r1, [r7, #12]
 800fada:	1c18      	adds	r0, r3, #0
 800fadc:	f7f1 fc0a 	bl	80012f4 <__aeabi_fsub>
 800fae0:	1c03      	adds	r3, r0, #0
 800fae2:	e01f      	b.n	800fb24 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2188      	movs	r1, #136	@ 0x88
 800faec:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800faee:	1c19      	adds	r1, r3, #0
 800faf0:	1c10      	adds	r0, r2, #0
 800faf2:	f7f1 f8d7 	bl	8000ca4 <__aeabi_fdiv>
 800faf6:	1c03      	adds	r3, r0, #0
 800faf8:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	1c18      	adds	r0, r3, #0
 800fafe:	f018 fbdd 	bl	80282bc <expf>
 800fb02:	1c03      	adds	r3, r0, #0
 800fb04:	21fe      	movs	r1, #254	@ 0xfe
 800fb06:	0589      	lsls	r1, r1, #22
 800fb08:	1c18      	adds	r0, r3, #0
 800fb0a:	f7f0 fed9 	bl	80008c0 <__aeabi_fadd>
 800fb0e:	1c03      	adds	r3, r0, #0
 800fb10:	1c19      	adds	r1, r3, #0
 800fb12:	4807      	ldr	r0, [pc, #28]	@ (800fb30 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fb14:	f7f1 f8c6 	bl	8000ca4 <__aeabi_fdiv>
 800fb18:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800fb1a:	1c19      	adds	r1, r3, #0
 800fb1c:	1c20      	adds	r0, r4, #0
 800fb1e:	f7f1 fa8f 	bl	8001040 <__aeabi_fmul>
 800fb22:	1c03      	adds	r3, r0, #0
        }
    }
}
 800fb24:	1c18      	adds	r0, r3, #0
 800fb26:	46bd      	mov	sp, r7
 800fb28:	b005      	add	sp, #20
 800fb2a:	bd90      	pop	{r4, r7, pc}
 800fb2c:	c2480000 	.word	0xc2480000
 800fb30:	43fa0000 	.word	0x43fa0000
 800fb34:	42480000 	.word	0x42480000
 800fb38:	3f8041ab 	.word	0x3f8041ab
 800fb3c:	40a00000 	.word	0x40a00000

0800fb40 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800fb40:	b590      	push	{r4, r7, lr}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	4913      	ldr	r1, [pc, #76]	@ (800fba0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800fb52:	1c18      	adds	r0, r3, #0
 800fb54:	f7f0 feb4 	bl	80008c0 <__aeabi_fadd>
 800fb58:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800fb5a:	1c19      	adds	r1, r3, #0
 800fb5c:	1c20      	adds	r0, r4, #0
 800fb5e:	f7f1 f8a1 	bl	8000ca4 <__aeabi_fdiv>
 800fb62:	1c03      	adds	r3, r0, #0
 800fb64:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	228c      	movs	r2, #140	@ 0x8c
 800fb6a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	490b      	ldr	r1, [pc, #44]	@ (800fba4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800fb76:	1c18      	adds	r0, r3, #0
 800fb78:	f7f0 fea2 	bl	80008c0 <__aeabi_fadd>
 800fb7c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800fb7e:	1c19      	adds	r1, r3, #0
 800fb80:	1c20      	adds	r0, r4, #0
 800fb82:	f7f1 f88f 	bl	8000ca4 <__aeabi_fdiv>
 800fb86:	1c03      	adds	r3, r0, #0
 800fb88:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2290      	movs	r2, #144	@ 0x90
 800fb8e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2294      	movs	r2, #148	@ 0x94
 800fb94:	2100      	movs	r1, #0
 800fb96:	5499      	strb	r1, [r3, r2]
}
 800fb98:	46c0      	nop			@ (mov r8, r8)
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	b003      	add	sp, #12
 800fb9e:	bd90      	pop	{r4, r7, pc}
 800fba0:	41a00000 	.word	0x41a00000
 800fba4:	43fa0000 	.word	0x43fa0000

0800fba8 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800fba8:	b590      	push	{r4, r7, lr}
 800fbaa:	b087      	sub	sp, #28
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2294      	movs	r2, #148	@ 0x94
 800fbb6:	5c9b      	ldrb	r3, [r3, r2]
 800fbb8:	2201      	movs	r2, #1
 800fbba:	4053      	eors	r3, r2
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d00f      	beq.n	800fbe2 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2198      	movs	r1, #152	@ 0x98
 800fbc6:	683a      	ldr	r2, [r7, #0]
 800fbc8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	219c      	movs	r1, #156	@ 0x9c
 800fbce:	683a      	ldr	r2, [r7, #0]
 800fbd0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	21a0      	movs	r1, #160	@ 0xa0
 800fbd6:	683a      	ldr	r2, [r7, #0]
 800fbd8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2294      	movs	r2, #148	@ 0x94
 800fbde:	2101      	movs	r1, #1
 800fbe0:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	228c      	movs	r2, #140	@ 0x8c
 800fbe6:	589b      	ldr	r3, [r3, r2]
 800fbe8:	1c19      	adds	r1, r3, #0
 800fbea:	20fe      	movs	r0, #254	@ 0xfe
 800fbec:	0580      	lsls	r0, r0, #22
 800fbee:	f7f1 fb81 	bl	80012f4 <__aeabi_fsub>
 800fbf2:	1c03      	adds	r3, r0, #0
 800fbf4:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2298      	movs	r2, #152	@ 0x98
 800fbfa:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800fbfc:	1c19      	adds	r1, r3, #0
 800fbfe:	f7f1 fa1f 	bl	8001040 <__aeabi_fmul>
 800fc02:	1c03      	adds	r3, r0, #0
 800fc04:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	228c      	movs	r2, #140	@ 0x8c
 800fc0a:	589b      	ldr	r3, [r3, r2]
 800fc0c:	6839      	ldr	r1, [r7, #0]
 800fc0e:	1c18      	adds	r0, r3, #0
 800fc10:	f7f1 fa16 	bl	8001040 <__aeabi_fmul>
 800fc14:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800fc16:	1c19      	adds	r1, r3, #0
 800fc18:	1c20      	adds	r0, r4, #0
 800fc1a:	f7f0 fe51 	bl	80008c0 <__aeabi_fadd>
 800fc1e:	1c03      	adds	r3, r0, #0
 800fc20:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2298      	movs	r2, #152	@ 0x98
 800fc26:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2290      	movs	r2, #144	@ 0x90
 800fc2c:	589b      	ldr	r3, [r3, r2]
 800fc2e:	1c19      	adds	r1, r3, #0
 800fc30:	20fe      	movs	r0, #254	@ 0xfe
 800fc32:	0580      	lsls	r0, r0, #22
 800fc34:	f7f1 fb5e 	bl	80012f4 <__aeabi_fsub>
 800fc38:	1c03      	adds	r3, r0, #0
 800fc3a:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	229c      	movs	r2, #156	@ 0x9c
 800fc40:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800fc42:	1c19      	adds	r1, r3, #0
 800fc44:	f7f1 f9fc 	bl	8001040 <__aeabi_fmul>
 800fc48:	1c03      	adds	r3, r0, #0
 800fc4a:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2290      	movs	r2, #144	@ 0x90
 800fc50:	589b      	ldr	r3, [r3, r2]
 800fc52:	6839      	ldr	r1, [r7, #0]
 800fc54:	1c18      	adds	r0, r3, #0
 800fc56:	f7f1 f9f3 	bl	8001040 <__aeabi_fmul>
 800fc5a:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800fc5c:	1c19      	adds	r1, r3, #0
 800fc5e:	1c20      	adds	r0, r4, #0
 800fc60:	f7f0 fe2e 	bl	80008c0 <__aeabi_fadd>
 800fc64:	1c03      	adds	r3, r0, #0
 800fc66:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	229c      	movs	r2, #156	@ 0x9c
 800fc6c:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2298      	movs	r2, #152	@ 0x98
 800fc72:	589a      	ldr	r2, [r3, r2]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	219c      	movs	r1, #156	@ 0x9c
 800fc78:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800fc7a:	1c19      	adds	r1, r3, #0
 800fc7c:	1c10      	adds	r0, r2, #0
 800fc7e:	f7f1 fb39 	bl	80012f4 <__aeabi_fsub>
 800fc82:	1c03      	adds	r3, r0, #0
 800fc84:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800fc86:	2100      	movs	r1, #0
 800fc88:	6978      	ldr	r0, [r7, #20]
 800fc8a:	f7f0 fc51 	bl	8000530 <__aeabi_fcmplt>
 800fc8e:	1e03      	subs	r3, r0, #0
 800fc90:	d004      	beq.n	800fc9c <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	2280      	movs	r2, #128	@ 0x80
 800fc96:	0612      	lsls	r2, r2, #24
 800fc98:	4053      	eors	r3, r2
 800fc9a:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800fc9c:	4923      	ldr	r1, [pc, #140]	@ (800fd2c <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800fc9e:	6978      	ldr	r0, [r7, #20]
 800fca0:	f7f1 f9ce 	bl	8001040 <__aeabi_fmul>
 800fca4:	1c03      	adds	r3, r0, #0
 800fca6:	1c18      	adds	r0, r3, #0
 800fca8:	f018 fb08 	bl	80282bc <expf>
 800fcac:	1c03      	adds	r3, r0, #0
 800fcae:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800fcb0:	491f      	ldr	r1, [pc, #124]	@ (800fd30 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800fcb2:	6938      	ldr	r0, [r7, #16]
 800fcb4:	f7f1 f9c4 	bl	8001040 <__aeabi_fmul>
 800fcb8:	1c03      	adds	r3, r0, #0
 800fcba:	491e      	ldr	r1, [pc, #120]	@ (800fd34 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800fcbc:	1c18      	adds	r0, r3, #0
 800fcbe:	f7f0 fdff 	bl	80008c0 <__aeabi_fadd>
 800fcc2:	1c03      	adds	r3, r0, #0
 800fcc4:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	685c      	ldr	r4, [r3, #4]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	68f9      	ldr	r1, [r7, #12]
 800fcd0:	1c18      	adds	r0, r3, #0
 800fcd2:	f7f0 fdf5 	bl	80008c0 <__aeabi_fadd>
 800fcd6:	1c03      	adds	r3, r0, #0
 800fcd8:	1c19      	adds	r1, r3, #0
 800fcda:	1c20      	adds	r0, r4, #0
 800fcdc:	f7f0 ffe2 	bl	8000ca4 <__aeabi_fdiv>
 800fce0:	1c03      	adds	r3, r0, #0
 800fce2:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800fce4:	68b9      	ldr	r1, [r7, #8]
 800fce6:	20fe      	movs	r0, #254	@ 0xfe
 800fce8:	0580      	lsls	r0, r0, #22
 800fcea:	f7f1 fb03 	bl	80012f4 <__aeabi_fsub>
 800fcee:	1c03      	adds	r3, r0, #0
 800fcf0:	1c18      	adds	r0, r3, #0
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	22a0      	movs	r2, #160	@ 0xa0
 800fcf6:	589b      	ldr	r3, [r3, r2]
 800fcf8:	1c19      	adds	r1, r3, #0
 800fcfa:	f7f1 f9a1 	bl	8001040 <__aeabi_fmul>
 800fcfe:	1c03      	adds	r3, r0, #0
 800fd00:	1c1c      	adds	r4, r3, #0
 800fd02:	6839      	ldr	r1, [r7, #0]
 800fd04:	68b8      	ldr	r0, [r7, #8]
 800fd06:	f7f1 f99b 	bl	8001040 <__aeabi_fmul>
 800fd0a:	1c03      	adds	r3, r0, #0
 800fd0c:	1c19      	adds	r1, r3, #0
 800fd0e:	1c20      	adds	r0, r4, #0
 800fd10:	f7f0 fdd6 	bl	80008c0 <__aeabi_fadd>
 800fd14:	1c03      	adds	r3, r0, #0
 800fd16:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	22a0      	movs	r2, #160	@ 0xa0
 800fd1c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	22a0      	movs	r2, #160	@ 0xa0
 800fd22:	589b      	ldr	r3, [r3, r2]
}
 800fd24:	1c18      	adds	r0, r3, #0
 800fd26:	46bd      	mov	sp, r7
 800fd28:	b007      	add	sp, #28
 800fd2a:	bd90      	pop	{r4, r7, pc}
 800fd2c:	be4ccccd 	.word	0xbe4ccccd
 800fd30:	43f00000 	.word	0x43f00000
 800fd34:	41a00000 	.word	0x41a00000

0800fd38 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b084      	sub	sp, #16
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	000a      	movs	r2, r1
 800fd42:	1cbb      	adds	r3, r7, #2
 800fd44:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800fd46:	230d      	movs	r3, #13
 800fd48:	18fb      	adds	r3, r7, r3
 800fd4a:	22ff      	movs	r2, #255	@ 0xff
 800fd4c:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800fd4e:	230e      	movs	r3, #14
 800fd50:	18fb      	adds	r3, r7, r3
 800fd52:	2200      	movs	r2, #0
 800fd54:	801a      	strh	r2, [r3, #0]
 800fd56:	e038      	b.n	800fdca <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 800fd58:	230e      	movs	r3, #14
 800fd5a:	18fb      	adds	r3, r7, r3
 800fd5c:	881b      	ldrh	r3, [r3, #0]
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	18d3      	adds	r3, r2, r3
 800fd62:	7819      	ldrb	r1, [r3, #0]
 800fd64:	220d      	movs	r2, #13
 800fd66:	18bb      	adds	r3, r7, r2
 800fd68:	18ba      	adds	r2, r7, r2
 800fd6a:	7812      	ldrb	r2, [r2, #0]
 800fd6c:	404a      	eors	r2, r1
 800fd6e:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800fd70:	230c      	movs	r3, #12
 800fd72:	18fb      	adds	r3, r7, r3
 800fd74:	2208      	movs	r2, #8
 800fd76:	701a      	strb	r2, [r3, #0]
 800fd78:	e01c      	b.n	800fdb4 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 800fd7a:	210d      	movs	r1, #13
 800fd7c:	187b      	adds	r3, r7, r1
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	b25b      	sxtb	r3, r3
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	da0a      	bge.n	800fd9c <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800fd86:	187b      	adds	r3, r7, r1
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	b25b      	sxtb	r3, r3
 800fd8c:	18db      	adds	r3, r3, r3
 800fd8e:	b25b      	sxtb	r3, r3
 800fd90:	2231      	movs	r2, #49	@ 0x31
 800fd92:	4053      	eors	r3, r2
 800fd94:	b25a      	sxtb	r2, r3
 800fd96:	187b      	adds	r3, r7, r1
 800fd98:	701a      	strb	r2, [r3, #0]
 800fd9a:	e005      	b.n	800fda8 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 800fd9c:	230d      	movs	r3, #13
 800fd9e:	18fa      	adds	r2, r7, r3
 800fda0:	18fb      	adds	r3, r7, r3
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	18db      	adds	r3, r3, r3
 800fda6:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800fda8:	220c      	movs	r2, #12
 800fdaa:	18bb      	adds	r3, r7, r2
 800fdac:	18ba      	adds	r2, r7, r2
 800fdae:	7812      	ldrb	r2, [r2, #0]
 800fdb0:	3a01      	subs	r2, #1
 800fdb2:	701a      	strb	r2, [r3, #0]
 800fdb4:	230c      	movs	r3, #12
 800fdb6:	18fb      	adds	r3, r7, r3
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d1dd      	bne.n	800fd7a <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800fdbe:	220e      	movs	r2, #14
 800fdc0:	18bb      	adds	r3, r7, r2
 800fdc2:	18ba      	adds	r2, r7, r2
 800fdc4:	8812      	ldrh	r2, [r2, #0]
 800fdc6:	3201      	adds	r2, #1
 800fdc8:	801a      	strh	r2, [r3, #0]
 800fdca:	230e      	movs	r3, #14
 800fdcc:	18fa      	adds	r2, r7, r3
 800fdce:	1cbb      	adds	r3, r7, #2
 800fdd0:	8812      	ldrh	r2, [r2, #0]
 800fdd2:	881b      	ldrh	r3, [r3, #0]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d3bf      	bcc.n	800fd58 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800fdd8:	230d      	movs	r3, #13
 800fdda:	18fb      	adds	r3, r7, r3
 800fddc:	781b      	ldrb	r3, [r3, #0]
}
 800fdde:	0018      	movs	r0, r3
 800fde0:	46bd      	mov	sp, r7
 800fde2:	b004      	add	sp, #16
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b082      	sub	sp, #8
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
 800fdee:	0008      	movs	r0, r1
 800fdf0:	0011      	movs	r1, r2
 800fdf2:	1cbb      	adds	r3, r7, #2
 800fdf4:	1c02      	adds	r2, r0, #0
 800fdf6:	801a      	strh	r2, [r3, #0]
 800fdf8:	1c7b      	adds	r3, r7, #1
 800fdfa:	1c0a      	adds	r2, r1, #0
 800fdfc:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800fdfe:	1cbb      	adds	r3, r7, #2
 800fe00:	881a      	ldrh	r2, [r3, #0]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	0011      	movs	r1, r2
 800fe06:	0018      	movs	r0, r3
 800fe08:	f7ff ff96 	bl	800fd38 <sensirion_i2c_generate_crc>
 800fe0c:	0003      	movs	r3, r0
 800fe0e:	001a      	movs	r2, r3
 800fe10:	1c7b      	adds	r3, r7, #1
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d001      	beq.n	800fe1c <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e000      	b.n	800fe1e <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	0018      	movs	r0, r3
 800fe20:	46bd      	mov	sp, r7
 800fe22:	b002      	add	sp, #8
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800fe26:	b580      	push	{r7, lr}
 800fe28:	b082      	sub	sp, #8
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	6078      	str	r0, [r7, #4]
 800fe2e:	0008      	movs	r0, r1
 800fe30:	0011      	movs	r1, r2
 800fe32:	1cbb      	adds	r3, r7, #2
 800fe34:	1c02      	adds	r2, r0, #0
 800fe36:	801a      	strh	r2, [r3, #0]
 800fe38:	003b      	movs	r3, r7
 800fe3a:	1c0a      	adds	r2, r1, #0
 800fe3c:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800fe3e:	003b      	movs	r3, r7
 800fe40:	881b      	ldrh	r3, [r3, #0]
 800fe42:	0a1b      	lsrs	r3, r3, #8
 800fe44:	b299      	uxth	r1, r3
 800fe46:	1cbb      	adds	r3, r7, #2
 800fe48:	881b      	ldrh	r3, [r3, #0]
 800fe4a:	1cba      	adds	r2, r7, #2
 800fe4c:	1c58      	adds	r0, r3, #1
 800fe4e:	8010      	strh	r0, [r2, #0]
 800fe50:	001a      	movs	r2, r3
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	189b      	adds	r3, r3, r2
 800fe56:	b2ca      	uxtb	r2, r1
 800fe58:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800fe5a:	1cbb      	adds	r3, r7, #2
 800fe5c:	881b      	ldrh	r3, [r3, #0]
 800fe5e:	1cba      	adds	r2, r7, #2
 800fe60:	1c59      	adds	r1, r3, #1
 800fe62:	8011      	strh	r1, [r2, #0]
 800fe64:	001a      	movs	r2, r3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	189b      	adds	r3, r3, r2
 800fe6a:	003a      	movs	r2, r7
 800fe6c:	8812      	ldrh	r2, [r2, #0]
 800fe6e:	b2d2      	uxtb	r2, r2
 800fe70:	701a      	strb	r2, [r3, #0]
    return offset;
 800fe72:	1cbb      	adds	r3, r7, #2
 800fe74:	881b      	ldrh	r3, [r3, #0]
}
 800fe76:	0018      	movs	r0, r3
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	b002      	add	sp, #8
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800fe7e:	b590      	push	{r4, r7, lr}
 800fe80:	b083      	sub	sp, #12
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	6078      	str	r0, [r7, #4]
 800fe86:	0008      	movs	r0, r1
 800fe88:	0011      	movs	r1, r2
 800fe8a:	1cbb      	adds	r3, r7, #2
 800fe8c:	1c02      	adds	r2, r0, #0
 800fe8e:	801a      	strh	r2, [r3, #0]
 800fe90:	003b      	movs	r3, r7
 800fe92:	1c0a      	adds	r2, r1, #0
 800fe94:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800fe96:	003b      	movs	r3, r7
 800fe98:	881b      	ldrh	r3, [r3, #0]
 800fe9a:	0a1b      	lsrs	r3, r3, #8
 800fe9c:	b299      	uxth	r1, r3
 800fe9e:	1cbb      	adds	r3, r7, #2
 800fea0:	881b      	ldrh	r3, [r3, #0]
 800fea2:	1cba      	adds	r2, r7, #2
 800fea4:	1c58      	adds	r0, r3, #1
 800fea6:	8010      	strh	r0, [r2, #0]
 800fea8:	001a      	movs	r2, r3
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	189b      	adds	r3, r3, r2
 800feae:	b2ca      	uxtb	r2, r1
 800feb0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800feb2:	1cbb      	adds	r3, r7, #2
 800feb4:	881b      	ldrh	r3, [r3, #0]
 800feb6:	1cba      	adds	r2, r7, #2
 800feb8:	1c59      	adds	r1, r3, #1
 800feba:	8011      	strh	r1, [r2, #0]
 800febc:	001a      	movs	r2, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	189b      	adds	r3, r3, r2
 800fec2:	003a      	movs	r2, r7
 800fec4:	8812      	ldrh	r2, [r2, #0]
 800fec6:	b2d2      	uxtb	r2, r2
 800fec8:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800feca:	1cbb      	adds	r3, r7, #2
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	3b02      	subs	r3, #2
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800fed4:	1cbb      	adds	r3, r7, #2
 800fed6:	881b      	ldrh	r3, [r3, #0]
 800fed8:	687a      	ldr	r2, [r7, #4]
 800feda:	18d4      	adds	r4, r2, r3
 800fedc:	2102      	movs	r1, #2
 800fede:	f7ff ff2b 	bl	800fd38 <sensirion_i2c_generate_crc>
 800fee2:	0003      	movs	r3, r0
 800fee4:	7023      	strb	r3, [r4, #0]
    offset++;
 800fee6:	1cbb      	adds	r3, r7, #2
 800fee8:	881a      	ldrh	r2, [r3, #0]
 800feea:	1cbb      	adds	r3, r7, #2
 800feec:	3201      	adds	r2, #1
 800feee:	801a      	strh	r2, [r3, #0]

    return offset;
 800fef0:	1cbb      	adds	r3, r7, #2
 800fef2:	881b      	ldrh	r3, [r3, #0]
}
 800fef4:	0018      	movs	r0, r3
 800fef6:	46bd      	mov	sp, r7
 800fef8:	b003      	add	sp, #12
 800fefa:	bd90      	pop	{r4, r7, pc}

0800fefc <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b082      	sub	sp, #8
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	0008      	movs	r0, r1
 800ff06:	0011      	movs	r1, r2
 800ff08:	1cbb      	adds	r3, r7, #2
 800ff0a:	1c02      	adds	r2, r0, #0
 800ff0c:	801a      	strh	r2, [r3, #0]
 800ff0e:	003b      	movs	r3, r7
 800ff10:	1c0a      	adds	r2, r1, #0
 800ff12:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800ff14:	003b      	movs	r3, r7
 800ff16:	881a      	ldrh	r2, [r3, #0]
 800ff18:	1cbb      	adds	r3, r7, #2
 800ff1a:	8819      	ldrh	r1, [r3, #0]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	0018      	movs	r0, r3
 800ff20:	f7ff ffad 	bl	800fe7e <sensirion_i2c_add_uint16_t_to_buffer>
 800ff24:	0003      	movs	r3, r0
}
 800ff26:	0018      	movs	r0, r3
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	b002      	add	sp, #8
 800ff2c:	bd80      	pop	{r7, pc}

0800ff2e <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800ff2e:	b580      	push	{r7, lr}
 800ff30:	b082      	sub	sp, #8
 800ff32:	af00      	add	r7, sp, #0
 800ff34:	6039      	str	r1, [r7, #0]
 800ff36:	0011      	movs	r1, r2
 800ff38:	1dfb      	adds	r3, r7, #7
 800ff3a:	1c02      	adds	r2, r0, #0
 800ff3c:	701a      	strb	r2, [r3, #0]
 800ff3e:	1d3b      	adds	r3, r7, #4
 800ff40:	1c0a      	adds	r2, r1, #0
 800ff42:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800ff44:	1d3b      	adds	r3, r7, #4
 800ff46:	881a      	ldrh	r2, [r3, #0]
 800ff48:	6839      	ldr	r1, [r7, #0]
 800ff4a:	1dfb      	adds	r3, r7, #7
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	0018      	movs	r0, r3
 800ff50:	f7fe f9d8 	bl	800e304 <sensirion_i2c_hal_write>
 800ff54:	0003      	movs	r3, r0
}
 800ff56:	0018      	movs	r0, r3
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	b002      	add	sp, #8
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800ff5e:	b5b0      	push	{r4, r5, r7, lr}
 800ff60:	b084      	sub	sp, #16
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6039      	str	r1, [r7, #0]
 800ff66:	0011      	movs	r1, r2
 800ff68:	1dfb      	adds	r3, r7, #7
 800ff6a:	1c02      	adds	r2, r0, #0
 800ff6c:	701a      	strb	r2, [r3, #0]
 800ff6e:	1d3b      	adds	r3, r7, #4
 800ff70:	1c0a      	adds	r2, r1, #0
 800ff72:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800ff74:	1d3b      	adds	r3, r7, #4
 800ff76:	881b      	ldrh	r3, [r3, #0]
 800ff78:	085b      	lsrs	r3, r3, #1
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	220a      	movs	r2, #10
 800ff7e:	18ba      	adds	r2, r7, r2
 800ff80:	1c19      	adds	r1, r3, #0
 800ff82:	1c0b      	adds	r3, r1, #0
 800ff84:	18db      	adds	r3, r3, r3
 800ff86:	185b      	adds	r3, r3, r1
 800ff88:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800ff8a:	1d3b      	adds	r3, r7, #4
 800ff8c:	881b      	ldrh	r3, [r3, #0]
 800ff8e:	2201      	movs	r2, #1
 800ff90:	4013      	ands	r3, r2
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d001      	beq.n	800ff9c <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800ff98:	2304      	movs	r3, #4
 800ff9a:	e06b      	b.n	8010074 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800ff9c:	230a      	movs	r3, #10
 800ff9e:	18fb      	adds	r3, r7, r3
 800ffa0:	881a      	ldrh	r2, [r3, #0]
 800ffa2:	6839      	ldr	r1, [r7, #0]
 800ffa4:	1dfb      	adds	r3, r7, #7
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	0018      	movs	r0, r3
 800ffaa:	f7fe f98b 	bl	800e2c4 <sensirion_i2c_hal_read>
 800ffae:	0003      	movs	r3, r0
 800ffb0:	001a      	movs	r2, r3
 800ffb2:	2108      	movs	r1, #8
 800ffb4:	187b      	adds	r3, r7, r1
 800ffb6:	801a      	strh	r2, [r3, #0]
    if (error) {
 800ffb8:	000a      	movs	r2, r1
 800ffba:	18bb      	adds	r3, r7, r2
 800ffbc:	2100      	movs	r1, #0
 800ffbe:	5e5b      	ldrsh	r3, [r3, r1]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d003      	beq.n	800ffcc <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800ffc4:	18bb      	adds	r3, r7, r2
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	5e9b      	ldrsh	r3, [r3, r2]
 800ffca:	e053      	b.n	8010074 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800ffcc:	230e      	movs	r3, #14
 800ffce:	18fb      	adds	r3, r7, r3
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	801a      	strh	r2, [r3, #0]
 800ffd4:	230c      	movs	r3, #12
 800ffd6:	18fb      	adds	r3, r7, r3
 800ffd8:	2200      	movs	r2, #0
 800ffda:	801a      	strh	r2, [r3, #0]
 800ffdc:	e041      	b.n	8010062 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800ffde:	210e      	movs	r1, #14
 800ffe0:	187b      	adds	r3, r7, r1
 800ffe2:	881b      	ldrh	r3, [r3, #0]
 800ffe4:	683a      	ldr	r2, [r7, #0]
 800ffe6:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800ffe8:	187b      	adds	r3, r7, r1
 800ffea:	881b      	ldrh	r3, [r3, #0]
 800ffec:	3302      	adds	r3, #2
 800ffee:	683a      	ldr	r2, [r7, #0]
 800fff0:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	001a      	movs	r2, r3
 800fff6:	2102      	movs	r1, #2
 800fff8:	f7ff fef5 	bl	800fde6 <sensirion_i2c_check_crc>
 800fffc:	0003      	movs	r3, r0
 800fffe:	001a      	movs	r2, r3
 8010000:	2108      	movs	r1, #8
 8010002:	187b      	adds	r3, r7, r1
 8010004:	801a      	strh	r2, [r3, #0]
        if (error) {
 8010006:	000a      	movs	r2, r1
 8010008:	18bb      	adds	r3, r7, r2
 801000a:	2100      	movs	r1, #0
 801000c:	5e5b      	ldrsh	r3, [r3, r1]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d003      	beq.n	801001a <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8010012:	18bb      	adds	r3, r7, r2
 8010014:	2200      	movs	r2, #0
 8010016:	5e9b      	ldrsh	r3, [r3, r2]
 8010018:	e02c      	b.n	8010074 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 801001a:	240e      	movs	r4, #14
 801001c:	193b      	adds	r3, r7, r4
 801001e:	881b      	ldrh	r3, [r3, #0]
 8010020:	683a      	ldr	r2, [r7, #0]
 8010022:	18d2      	adds	r2, r2, r3
 8010024:	250c      	movs	r5, #12
 8010026:	197b      	adds	r3, r7, r5
 8010028:	881b      	ldrh	r3, [r3, #0]
 801002a:	1979      	adds	r1, r7, r5
 801002c:	1c58      	adds	r0, r3, #1
 801002e:	8008      	strh	r0, [r1, #0]
 8010030:	0019      	movs	r1, r3
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	185b      	adds	r3, r3, r1
 8010036:	7812      	ldrb	r2, [r2, #0]
 8010038:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 801003a:	193b      	adds	r3, r7, r4
 801003c:	881b      	ldrh	r3, [r3, #0]
 801003e:	3301      	adds	r3, #1
 8010040:	683a      	ldr	r2, [r7, #0]
 8010042:	18d2      	adds	r2, r2, r3
 8010044:	197b      	adds	r3, r7, r5
 8010046:	881b      	ldrh	r3, [r3, #0]
 8010048:	1979      	adds	r1, r7, r5
 801004a:	1c58      	adds	r0, r3, #1
 801004c:	8008      	strh	r0, [r1, #0]
 801004e:	0019      	movs	r1, r3
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	185b      	adds	r3, r3, r1
 8010054:	7812      	ldrb	r2, [r2, #0]
 8010056:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010058:	193b      	adds	r3, r7, r4
 801005a:	193a      	adds	r2, r7, r4
 801005c:	8812      	ldrh	r2, [r2, #0]
 801005e:	3203      	adds	r2, #3
 8010060:	801a      	strh	r2, [r3, #0]
 8010062:	230e      	movs	r3, #14
 8010064:	18fa      	adds	r2, r7, r3
 8010066:	230a      	movs	r3, #10
 8010068:	18fb      	adds	r3, r7, r3
 801006a:	8812      	ldrh	r2, [r2, #0]
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	429a      	cmp	r2, r3
 8010070:	d3b5      	bcc.n	800ffde <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 8010072:	2300      	movs	r3, #0
}
 8010074:	0018      	movs	r0, r3
 8010076:	46bd      	mov	sp, r7
 8010078:	b004      	add	sp, #16
 801007a:	bdb0      	pop	{r4, r5, r7, pc}

0801007c <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 801007c:	b590      	push	{r4, r7, lr}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6039      	str	r1, [r7, #0]
 8010084:	0011      	movs	r1, r2
 8010086:	1dfb      	adds	r3, r7, #7
 8010088:	1c02      	adds	r2, r0, #0
 801008a:	701a      	strb	r2, [r3, #0]
 801008c:	1dbb      	adds	r3, r7, #6
 801008e:	1c0a      	adds	r2, r1, #0
 8010090:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8010092:	4b08      	ldr	r3, [pc, #32]	@ (80100b4 <ReadRegister+0x38>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d008      	beq.n	80100ac <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 801009a:	4b06      	ldr	r3, [pc, #24]	@ (80100b4 <ReadRegister+0x38>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	1dba      	adds	r2, r7, #6
 80100a0:	7814      	ldrb	r4, [r2, #0]
 80100a2:	6839      	ldr	r1, [r7, #0]
 80100a4:	1dfa      	adds	r2, r7, #7
 80100a6:	7810      	ldrb	r0, [r2, #0]
 80100a8:	0022      	movs	r2, r4
 80100aa:	4798      	blx	r3
  }
}
 80100ac:	46c0      	nop			@ (mov r8, r8)
 80100ae:	46bd      	mov	sp, r7
 80100b0:	b003      	add	sp, #12
 80100b2:	bd90      	pop	{r4, r7, pc}
 80100b4:	20000ef4 	.word	0x20000ef4

080100b8 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80100b8:	b590      	push	{r4, r7, lr}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6039      	str	r1, [r7, #0]
 80100c0:	0011      	movs	r1, r2
 80100c2:	1dfb      	adds	r3, r7, #7
 80100c4:	1c02      	adds	r2, r0, #0
 80100c6:	701a      	strb	r2, [r3, #0]
 80100c8:	1dbb      	adds	r3, r7, #6
 80100ca:	1c0a      	adds	r2, r1, #0
 80100cc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80100ce:	4b08      	ldr	r3, [pc, #32]	@ (80100f0 <WriteRegister+0x38>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d008      	beq.n	80100e8 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80100d6:	4b06      	ldr	r3, [pc, #24]	@ (80100f0 <WriteRegister+0x38>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	1dba      	adds	r2, r7, #6
 80100dc:	7814      	ldrb	r4, [r2, #0]
 80100de:	6839      	ldr	r1, [r7, #0]
 80100e0:	1dfa      	adds	r2, r7, #7
 80100e2:	7810      	ldrb	r0, [r2, #0]
 80100e4:	0022      	movs	r2, r4
 80100e6:	4798      	blx	r3
  }
}
 80100e8:	46c0      	nop			@ (mov r8, r8)
 80100ea:	46bd      	mov	sp, r7
 80100ec:	b003      	add	sp, #12
 80100ee:	bd90      	pop	{r4, r7, pc}
 80100f0:	20000ef8 	.word	0x20000ef8

080100f4 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 80100fc:	f003 fd14 	bl	8013b28 <HAL_GetTick>
 8010100:	0002      	movs	r2, r0
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	18d2      	adds	r2, r2, r3
 8010106:	4b03      	ldr	r3, [pc, #12]	@ (8010114 <setSGP40TimeStamp+0x20>)
 8010108:	601a      	str	r2, [r3, #0]
}
 801010a:	46c0      	nop			@ (mov r8, r8)
 801010c:	46bd      	mov	sp, r7
 801010e:	b002      	add	sp, #8
 8010110:	bd80      	pop	{r7, pc}
 8010112:	46c0      	nop			@ (mov r8, r8)
 8010114:	20000f08 	.word	0x20000f08

08010118 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010118:	b580      	push	{r7, lr}
 801011a:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 801011c:	4b02      	ldr	r3, [pc, #8]	@ (8010128 <ResetSGP40samplecounter+0x10>)
 801011e:	2200      	movs	r2, #0
 8010120:	701a      	strb	r2, [r3, #0]
}
 8010122:	46c0      	nop			@ (mov r8, r8)
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	20000f06 	.word	0x20000f06

0801012c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010136:	4b07      	ldr	r3, [pc, #28]	@ (8010154 <SGP_Init+0x28>)
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 801013c:	4b06      	ldr	r3, [pc, #24]	@ (8010158 <SGP_Init+0x2c>)
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8010142:	4b06      	ldr	r3, [pc, #24]	@ (801015c <SGP_Init+0x30>)
 8010144:	2100      	movs	r1, #0
 8010146:	0018      	movs	r0, r3
 8010148:	f7fe ff72 	bl	800f030 <GasIndexAlgorithm_init>
}
 801014c:	46c0      	nop			@ (mov r8, r8)
 801014e:	46bd      	mov	sp, r7
 8010150:	b002      	add	sp, #8
 8010152:	bd80      	pop	{r7, pc}
 8010154:	20000ef4 	.word	0x20000ef4
 8010158:	20000ef8 	.word	0x20000ef8
 801015c:	20000f10 	.word	0x20000f10

08010160 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8010160:	b580      	push	{r7, lr}
 8010162:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8010164:	4b07      	ldr	r3, [pc, #28]	@ (8010184 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d004      	beq.n	8010176 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 801016c:	4b06      	ldr	r3, [pc, #24]	@ (8010188 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 801016e:	22fe      	movs	r2, #254	@ 0xfe
 8010170:	0592      	lsls	r2, r2, #22
 8010172:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8010174:	e002      	b.n	801017c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8010176:	4b04      	ldr	r3, [pc, #16]	@ (8010188 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8010178:	4a04      	ldr	r2, [pc, #16]	@ (801018c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 801017a:	605a      	str	r2, [r3, #4]
}
 801017c:	46c0      	nop			@ (mov r8, r8)
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	46c0      	nop			@ (mov r8, r8)
 8010184:	20001e5d 	.word	0x20001e5d
 8010188:	20000f10 	.word	0x20000f10
 801018c:	44610000 	.word	0x44610000

08010190 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8010190:	b580      	push	{r7, lr}
 8010192:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010194:	4b13      	ldr	r3, [pc, #76]	@ (80101e4 <SGP_StartMeasurement+0x54>)
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d00d      	beq.n	80101b8 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 801019c:	4b12      	ldr	r3, [pc, #72]	@ (80101e8 <SGP_StartMeasurement+0x58>)
 801019e:	2208      	movs	r2, #8
 80101a0:	0019      	movs	r1, r3
 80101a2:	2059      	movs	r0, #89	@ 0x59
 80101a4:	f7ff ff88 	bl	80100b8 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 80101a8:	f003 fcbe 	bl	8013b28 <HAL_GetTick>
 80101ac:	0003      	movs	r3, r0
 80101ae:	331e      	adds	r3, #30
 80101b0:	001a      	movs	r2, r3
 80101b2:	4b0e      	ldr	r3, [pc, #56]	@ (80101ec <SGP_StartMeasurement+0x5c>)
 80101b4:	601a      	str	r2, [r3, #0]
 80101b6:	e00c      	b.n	80101d2 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80101b8:	4b0d      	ldr	r3, [pc, #52]	@ (80101f0 <SGP_StartMeasurement+0x60>)
 80101ba:	2208      	movs	r2, #8
 80101bc:	0019      	movs	r1, r3
 80101be:	2059      	movs	r0, #89	@ 0x59
 80101c0:	f7ff ff7a 	bl	80100b8 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 80101c4:	f003 fcb0 	bl	8013b28 <HAL_GetTick>
 80101c8:	0003      	movs	r3, r0
 80101ca:	33aa      	adds	r3, #170	@ 0xaa
 80101cc:	001a      	movs	r2, r3
 80101ce:	4b09      	ldr	r3, [pc, #36]	@ (80101f4 <SGP_StartMeasurement+0x64>)
 80101d0:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 80101d2:	4b09      	ldr	r3, [pc, #36]	@ (80101f8 <SGP_StartMeasurement+0x68>)
 80101d4:	2200      	movs	r2, #0
 80101d6:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 80101d8:	4b08      	ldr	r3, [pc, #32]	@ (80101fc <SGP_StartMeasurement+0x6c>)
 80101da:	2200      	movs	r2, #0
 80101dc:	701a      	strb	r2, [r3, #0]
}
 80101de:	46c0      	nop			@ (mov r8, r8)
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}
 80101e4:	20000fb8 	.word	0x20000fb8
 80101e8:	200000b0 	.word	0x200000b0
 80101ec:	200000c4 	.word	0x200000c4
 80101f0:	200000a8 	.word	0x200000a8
 80101f4:	200000bc 	.word	0x200000bc
 80101f8:	20000f0c 	.word	0x20000f0c
 80101fc:	20000f0d 	.word	0x20000f0d

08010200 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 8010200:	b580      	push	{r7, lr}
 8010202:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010204:	4b04      	ldr	r3, [pc, #16]	@ (8010218 <SGP_HeatedUp+0x18>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	0018      	movs	r0, r3
 801020a:	f002 fef7 	bl	8012ffc <TimestampIsReached>
 801020e:	0003      	movs	r3, r0
}
 8010210:	0018      	movs	r0, r3
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	46c0      	nop			@ (mov r8, r8)
 8010218:	200000bc 	.word	0x200000bc

0801021c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 801021c:	b580      	push	{r7, lr}
 801021e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8010220:	4b04      	ldr	r3, [pc, #16]	@ (8010234 <SGP_MeasurementReady+0x18>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	0018      	movs	r0, r3
 8010226:	f002 fee9 	bl	8012ffc <TimestampIsReached>
 801022a:	0003      	movs	r3, r0
}
 801022c:	0018      	movs	r0, r3
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	46c0      	nop			@ (mov r8, r8)
 8010234:	200000c4 	.word	0x200000c4

08010238 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8010238:	b580      	push	{r7, lr}
 801023a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 801023c:	4b04      	ldr	r3, [pc, #16]	@ (8010250 <SGP_MeasurementDone+0x18>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	0018      	movs	r0, r3
 8010242:	f002 fedb 	bl	8012ffc <TimestampIsReached>
 8010246:	0003      	movs	r3, r0
}
 8010248:	0018      	movs	r0, r3
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	46c0      	nop			@ (mov r8, r8)
 8010250:	200000c0 	.word	0x200000c0

08010254 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8010254:	b580      	push	{r7, lr}
 8010256:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8010258:	4b04      	ldr	r3, [pc, #16]	@ (801026c <SGP_TurnHeaterOff+0x18>)
 801025a:	2202      	movs	r2, #2
 801025c:	0019      	movs	r1, r3
 801025e:	2059      	movs	r0, #89	@ 0x59
 8010260:	f7ff ff2a 	bl	80100b8 <WriteRegister>
}
 8010264:	46c0      	nop			@ (mov r8, r8)
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	46c0      	nop			@ (mov r8, r8)
 801026c:	200000a0 	.word	0x200000a0

08010270 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8010270:	b590      	push	{r4, r7, lr}
 8010272:	b087      	sub	sp, #28
 8010274:	af02      	add	r7, sp, #8
 8010276:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8010278:	f7ff ffc2 	bl	8010200 <SGP_HeatedUp>
 801027c:	1e03      	subs	r3, r0, #0
 801027e:	d032      	beq.n	80102e6 <SGP_GetMeasurementValues+0x76>
 8010280:	4b80      	ldr	r3, [pc, #512]	@ (8010484 <SGP_GetMeasurementValues+0x214>)
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	2201      	movs	r2, #1
 8010286:	4053      	eors	r3, r2
 8010288:	b2db      	uxtb	r3, r3
 801028a:	2b00      	cmp	r3, #0
 801028c:	d02b      	beq.n	80102e6 <SGP_GetMeasurementValues+0x76>
 801028e:	4b7e      	ldr	r3, [pc, #504]	@ (8010488 <SGP_GetMeasurementValues+0x218>)
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	2201      	movs	r2, #1
 8010294:	4053      	eors	r3, r2
 8010296:	b2db      	uxtb	r3, r3
 8010298:	2b00      	cmp	r3, #0
 801029a:	d024      	beq.n	80102e6 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 801029c:	4b79      	ldr	r3, [pc, #484]	@ (8010484 <SGP_GetMeasurementValues+0x214>)
 801029e:	2201      	movs	r2, #1
 80102a0:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80102a2:	4b7a      	ldr	r3, [pc, #488]	@ (801048c <SGP_GetMeasurementValues+0x21c>)
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00d      	beq.n	80102c6 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80102aa:	4b79      	ldr	r3, [pc, #484]	@ (8010490 <SGP_GetMeasurementValues+0x220>)
 80102ac:	2208      	movs	r2, #8
 80102ae:	0019      	movs	r1, r3
 80102b0:	2059      	movs	r0, #89	@ 0x59
 80102b2:	f7ff ff01 	bl	80100b8 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 80102b6:	f003 fc37 	bl	8013b28 <HAL_GetTick>
 80102ba:	0003      	movs	r3, r0
 80102bc:	331e      	adds	r3, #30
 80102be:	001a      	movs	r2, r3
 80102c0:	4b74      	ldr	r3, [pc, #464]	@ (8010494 <SGP_GetMeasurementValues+0x224>)
 80102c2:	601a      	str	r2, [r3, #0]
 80102c4:	e00c      	b.n	80102e0 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80102c6:	4b74      	ldr	r3, [pc, #464]	@ (8010498 <SGP_GetMeasurementValues+0x228>)
 80102c8:	2208      	movs	r2, #8
 80102ca:	0019      	movs	r1, r3
 80102cc:	2059      	movs	r0, #89	@ 0x59
 80102ce:	f7ff fef3 	bl	80100b8 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 80102d2:	f003 fc29 	bl	8013b28 <HAL_GetTick>
 80102d6:	0003      	movs	r3, r0
 80102d8:	331e      	adds	r3, #30
 80102da:	001a      	movs	r2, r3
 80102dc:	4b6d      	ldr	r3, [pc, #436]	@ (8010494 <SGP_GetMeasurementValues+0x224>)
 80102de:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 80102e0:	4b69      	ldr	r3, [pc, #420]	@ (8010488 <SGP_GetMeasurementValues+0x218>)
 80102e2:	2201      	movs	r2, #1
 80102e4:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 80102e6:	4b67      	ldr	r3, [pc, #412]	@ (8010484 <SGP_GetMeasurementValues+0x214>)
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d100      	bne.n	80102f0 <SGP_GetMeasurementValues+0x80>
 80102ee:	e0ac      	b.n	801044a <SGP_GetMeasurementValues+0x1da>
 80102f0:	f7ff ff94 	bl	801021c <SGP_MeasurementReady>
 80102f4:	1e03      	subs	r3, r0, #0
 80102f6:	d100      	bne.n	80102fa <SGP_GetMeasurementValues+0x8a>
 80102f8:	e0a7      	b.n	801044a <SGP_GetMeasurementValues+0x1da>
 80102fa:	4b68      	ldr	r3, [pc, #416]	@ (801049c <SGP_GetMeasurementValues+0x22c>)
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	2201      	movs	r2, #1
 8010300:	4053      	eors	r3, r2
 8010302:	b2db      	uxtb	r3, r3
 8010304:	2b00      	cmp	r3, #0
 8010306:	d100      	bne.n	801030a <SGP_GetMeasurementValues+0x9a>
 8010308:	e09f      	b.n	801044a <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 801030a:	4b64      	ldr	r3, [pc, #400]	@ (801049c <SGP_GetMeasurementValues+0x22c>)
 801030c:	2201      	movs	r2, #1
 801030e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8010310:	4b63      	ldr	r3, [pc, #396]	@ (80104a0 <SGP_GetMeasurementValues+0x230>)
 8010312:	2203      	movs	r2, #3
 8010314:	0019      	movs	r1, r3
 8010316:	2059      	movs	r0, #89	@ 0x59
 8010318:	f7ff feb0 	bl	801007c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 801031c:	4b60      	ldr	r3, [pc, #384]	@ (80104a0 <SGP_GetMeasurementValues+0x230>)
 801031e:	2203      	movs	r2, #3
 8010320:	2103      	movs	r1, #3
 8010322:	0018      	movs	r0, r3
 8010324:	f000 f91a 	bl	801055c <CheckCRC>
 8010328:	0003      	movs	r3, r0
 801032a:	001a      	movs	r2, r3
 801032c:	2301      	movs	r3, #1
 801032e:	4053      	eors	r3, r2
 8010330:	b2db      	uxtb	r3, r3
 8010332:	2b00      	cmp	r3, #0
 8010334:	d02a      	beq.n	801038c <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 8010336:	4a5b      	ldr	r2, [pc, #364]	@ (80104a4 <SGP_GetMeasurementValues+0x234>)
 8010338:	4b5b      	ldr	r3, [pc, #364]	@ (80104a8 <SGP_GetMeasurementValues+0x238>)
 801033a:	0019      	movs	r1, r3
 801033c:	2001      	movs	r0, #1
 801033e:	f002 feb3 	bl	80130a8 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8010342:	4a5a      	ldr	r2, [pc, #360]	@ (80104ac <SGP_GetMeasurementValues+0x23c>)
 8010344:	4b5a      	ldr	r3, [pc, #360]	@ (80104b0 <SGP_GetMeasurementValues+0x240>)
 8010346:	0019      	movs	r1, r3
 8010348:	2002      	movs	r0, #2
 801034a:	f002 fead 	bl	80130a8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 801034e:	230f      	movs	r3, #15
 8010350:	18fb      	adds	r3, r7, r3
 8010352:	2200      	movs	r2, #0
 8010354:	701a      	strb	r2, [r3, #0]
 8010356:	e012      	b.n	801037e <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8010358:	240f      	movs	r4, #15
 801035a:	193b      	adds	r3, r7, r4
 801035c:	7818      	ldrb	r0, [r3, #0]
 801035e:	193b      	adds	r3, r7, r4
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	4a4f      	ldr	r2, [pc, #316]	@ (80104a0 <SGP_GetMeasurementValues+0x230>)
 8010364:	5cd3      	ldrb	r3, [r2, r3]
 8010366:	4a53      	ldr	r2, [pc, #332]	@ (80104b4 <SGP_GetMeasurementValues+0x244>)
 8010368:	4953      	ldr	r1, [pc, #332]	@ (80104b8 <SGP_GetMeasurementValues+0x248>)
 801036a:	9300      	str	r3, [sp, #0]
 801036c:	0003      	movs	r3, r0
 801036e:	2003      	movs	r0, #3
 8010370:	f002 fe9a 	bl	80130a8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8010374:	193b      	adds	r3, r7, r4
 8010376:	781a      	ldrb	r2, [r3, #0]
 8010378:	193b      	adds	r3, r7, r4
 801037a:	3201      	adds	r2, #1
 801037c:	701a      	strb	r2, [r3, #0]
 801037e:	230f      	movs	r3, #15
 8010380:	18fb      	adds	r3, r7, r3
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	2b02      	cmp	r3, #2
 8010386:	d9e7      	bls.n	8010358 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 8010388:	2300      	movs	r3, #0
 801038a:	e076      	b.n	801047a <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 801038c:	f003 fbcc 	bl	8013b28 <HAL_GetTick>
 8010390:	0003      	movs	r3, r0
 8010392:	22fa      	movs	r2, #250	@ 0xfa
 8010394:	0092      	lsls	r2, r2, #2
 8010396:	189a      	adds	r2, r3, r2
 8010398:	4b48      	ldr	r3, [pc, #288]	@ (80104bc <SGP_GetMeasurementValues+0x24c>)
 801039a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 801039c:	f7ff ff5a 	bl	8010254 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 80103a0:	4b47      	ldr	r3, [pc, #284]	@ (80104c0 <SGP_GetMeasurementValues+0x250>)
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	3301      	adds	r3, #1
 80103a6:	b2da      	uxtb	r2, r3
 80103a8:	4b45      	ldr	r3, [pc, #276]	@ (80104c0 <SGP_GetMeasurementValues+0x250>)
 80103aa:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80103ac:	4b44      	ldr	r3, [pc, #272]	@ (80104c0 <SGP_GetMeasurementValues+0x250>)
 80103ae:	781a      	ldrb	r2, [r3, #0]
 80103b0:	4b44      	ldr	r3, [pc, #272]	@ (80104c4 <SGP_GetMeasurementValues+0x254>)
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d348      	bcc.n	801044a <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80103b8:	4b39      	ldr	r3, [pc, #228]	@ (80104a0 <SGP_GetMeasurementValues+0x230>)
 80103ba:	785b      	ldrb	r3, [r3, #1]
 80103bc:	b21b      	sxth	r3, r3
 80103be:	021b      	lsls	r3, r3, #8
 80103c0:	b21a      	sxth	r2, r3
 80103c2:	4b37      	ldr	r3, [pc, #220]	@ (80104a0 <SGP_GetMeasurementValues+0x230>)
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	b21b      	sxth	r3, r3
 80103c8:	4313      	orrs	r3, r2
 80103ca:	b21a      	sxth	r2, r3
 80103cc:	240c      	movs	r4, #12
 80103ce:	193b      	adds	r3, r7, r4
 80103d0:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 80103d2:	2300      	movs	r3, #0
 80103d4:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80103d6:	193b      	adds	r3, r7, r4
 80103d8:	8819      	ldrh	r1, [r3, #0]
 80103da:	2308      	movs	r3, #8
 80103dc:	18fa      	adds	r2, r7, r3
 80103de:	4b3a      	ldr	r3, [pc, #232]	@ (80104c8 <SGP_GetMeasurementValues+0x258>)
 80103e0:	0018      	movs	r0, r3
 80103e2:	f7fe fe87 	bl	800f0f4 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 80103e6:	68ba      	ldr	r2, [r7, #8]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 80103ec:	4b37      	ldr	r3, [pc, #220]	@ (80104cc <SGP_GetMeasurementValues+0x25c>)
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	3301      	adds	r3, #1
 80103f2:	b2da      	uxtb	r2, r3
 80103f4:	4b35      	ldr	r3, [pc, #212]	@ (80104cc <SGP_GetMeasurementValues+0x25c>)
 80103f6:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 80103f8:	4b34      	ldr	r3, [pc, #208]	@ (80104cc <SGP_GetMeasurementValues+0x25c>)
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d10d      	bne.n	801041c <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 8010400:	193b      	adds	r3, r7, r4
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	4a32      	ldr	r2, [pc, #200]	@ (80104d0 <SGP_GetMeasurementValues+0x260>)
 8010406:	492c      	ldr	r1, [pc, #176]	@ (80104b8 <SGP_GetMeasurementValues+0x248>)
 8010408:	2003      	movs	r0, #3
 801040a:	f002 fe4d 	bl	80130a8 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	4a30      	ldr	r2, [pc, #192]	@ (80104d4 <SGP_GetMeasurementValues+0x264>)
 8010412:	4929      	ldr	r1, [pc, #164]	@ (80104b8 <SGP_GetMeasurementValues+0x248>)
 8010414:	2003      	movs	r0, #3
 8010416:	f002 fe47 	bl	80130a8 <CreateLine>
 801041a:	e006      	b.n	801042a <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 801041c:	4b2b      	ldr	r3, [pc, #172]	@ (80104cc <SGP_GetMeasurementValues+0x25c>)
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	2b0b      	cmp	r3, #11
 8010422:	d102      	bne.n	801042a <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 8010424:	4b29      	ldr	r3, [pc, #164]	@ (80104cc <SGP_GetMeasurementValues+0x25c>)
 8010426:	2200      	movs	r2, #0
 8010428:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	b29b      	uxth	r3, r3
 801042e:	0018      	movs	r0, r3
 8010430:	f001 fdd2 	bl	8011fd8 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 8010434:	4b22      	ldr	r3, [pc, #136]	@ (80104c0 <SGP_GetMeasurementValues+0x250>)
 8010436:	2200      	movs	r2, #0
 8010438:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 801043a:	4b14      	ldr	r3, [pc, #80]	@ (801048c <SGP_GetMeasurementValues+0x21c>)
 801043c:	2200      	movs	r2, #0
 801043e:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8010440:	4b11      	ldr	r3, [pc, #68]	@ (8010488 <SGP_GetMeasurementValues+0x218>)
 8010442:	2200      	movs	r2, #0
 8010444:	701a      	strb	r2, [r3, #0]
      return true;
 8010446:	2301      	movs	r3, #1
 8010448:	e017      	b.n	801047a <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 801044a:	f7ff fef5 	bl	8010238 <SGP_MeasurementDone>
 801044e:	1e03      	subs	r3, r0, #0
 8010450:	d012      	beq.n	8010478 <SGP_GetMeasurementValues+0x208>
 8010452:	4b0c      	ldr	r3, [pc, #48]	@ (8010484 <SGP_GetMeasurementValues+0x214>)
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d00e      	beq.n	8010478 <SGP_GetMeasurementValues+0x208>
 801045a:	4b10      	ldr	r3, [pc, #64]	@ (801049c <SGP_GetMeasurementValues+0x22c>)
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d00a      	beq.n	8010478 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8010462:	4a1d      	ldr	r2, [pc, #116]	@ (80104d8 <SGP_GetMeasurementValues+0x268>)
 8010464:	4b14      	ldr	r3, [pc, #80]	@ (80104b8 <SGP_GetMeasurementValues+0x248>)
 8010466:	0019      	movs	r1, r3
 8010468:	2003      	movs	r0, #3
 801046a:	f002 fe1d 	bl	80130a8 <CreateLine>
    SGP_StartMeasurement();
 801046e:	f7ff fe8f 	bl	8010190 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8010472:	4b05      	ldr	r3, [pc, #20]	@ (8010488 <SGP_GetMeasurementValues+0x218>)
 8010474:	2200      	movs	r2, #0
 8010476:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8010478:	2300      	movs	r3, #0
}
 801047a:	0018      	movs	r0, r3
 801047c:	46bd      	mov	sp, r7
 801047e:	b005      	add	sp, #20
 8010480:	bd90      	pop	{r4, r7, pc}
 8010482:	46c0      	nop			@ (mov r8, r8)
 8010484:	20000f0c 	.word	0x20000f0c
 8010488:	20000fb9 	.word	0x20000fb9
 801048c:	20000fb8 	.word	0x20000fb8
 8010490:	200000b0 	.word	0x200000b0
 8010494:	200000c4 	.word	0x200000c4
 8010498:	200000a8 	.word	0x200000a8
 801049c:	20000f0d 	.word	0x20000f0d
 80104a0:	20000efc 	.word	0x20000efc
 80104a4:	0802cf5c 	.word	0x0802cf5c
 80104a8:	0802cf84 	.word	0x0802cf84
 80104ac:	0802cf88 	.word	0x0802cf88
 80104b0:	0802cfa8 	.word	0x0802cfa8
 80104b4:	0802cfac 	.word	0x0802cfac
 80104b8:	0802cfcc 	.word	0x0802cfcc
 80104bc:	200000c0 	.word	0x200000c0
 80104c0:	20000f05 	.word	0x20000f05
 80104c4:	200000ba 	.word	0x200000ba
 80104c8:	20000f10 	.word	0x20000f10
 80104cc:	20000f06 	.word	0x20000f06
 80104d0:	0802cfd0 	.word	0x0802cfd0
 80104d4:	0802cfec 	.word	0x0802cfec
 80104d8:	0802d008 	.word	0x0802d008

080104dc <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80104e2:	4b1a      	ldr	r3, [pc, #104]	@ (801054c <SGP_DeviceConnected+0x70>)
 80104e4:	2202      	movs	r2, #2
 80104e6:	0019      	movs	r1, r3
 80104e8:	2059      	movs	r0, #89	@ 0x59
 80104ea:	f7ff fde5 	bl	80100b8 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80104ee:	2001      	movs	r0, #1
 80104f0:	f003 fb24 	bl	8013b3c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80104f4:	4b16      	ldr	r3, [pc, #88]	@ (8010550 <SGP_DeviceConnected+0x74>)
 80104f6:	2209      	movs	r2, #9
 80104f8:	0019      	movs	r1, r3
 80104fa:	2059      	movs	r0, #89	@ 0x59
 80104fc:	f7ff fdbe 	bl	801007c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8010500:	1dfb      	adds	r3, r7, #7
 8010502:	2200      	movs	r2, #0
 8010504:	701a      	strb	r2, [r3, #0]
 8010506:	e011      	b.n	801052c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8010508:	1dfb      	adds	r3, r7, #7
 801050a:	7818      	ldrb	r0, [r3, #0]
 801050c:	1dfb      	adds	r3, r7, #7
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	4a0f      	ldr	r2, [pc, #60]	@ (8010550 <SGP_DeviceConnected+0x74>)
 8010512:	5cd3      	ldrb	r3, [r2, r3]
 8010514:	4a0f      	ldr	r2, [pc, #60]	@ (8010554 <SGP_DeviceConnected+0x78>)
 8010516:	4910      	ldr	r1, [pc, #64]	@ (8010558 <SGP_DeviceConnected+0x7c>)
 8010518:	9300      	str	r3, [sp, #0]
 801051a:	0003      	movs	r3, r0
 801051c:	2002      	movs	r0, #2
 801051e:	f002 fdc3 	bl	80130a8 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8010522:	1dfb      	adds	r3, r7, #7
 8010524:	781a      	ldrb	r2, [r3, #0]
 8010526:	1dfb      	adds	r3, r7, #7
 8010528:	3201      	adds	r2, #1
 801052a:	701a      	strb	r2, [r3, #0]
 801052c:	1dfb      	adds	r3, r7, #7
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	2b08      	cmp	r3, #8
 8010532:	d9e9      	bls.n	8010508 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8010534:	4b06      	ldr	r3, [pc, #24]	@ (8010550 <SGP_DeviceConnected+0x74>)
 8010536:	2203      	movs	r2, #3
 8010538:	2109      	movs	r1, #9
 801053a:	0018      	movs	r0, r3
 801053c:	f000 f80e 	bl	801055c <CheckCRC>
 8010540:	0003      	movs	r3, r0
}
 8010542:	0018      	movs	r0, r3
 8010544:	46bd      	mov	sp, r7
 8010546:	b002      	add	sp, #8
 8010548:	bd80      	pop	{r7, pc}
 801054a:	46c0      	nop			@ (mov r8, r8)
 801054c:	200000a4 	.word	0x200000a4
 8010550:	20000efc 	.word	0x20000efc
 8010554:	0802d028 	.word	0x0802d028
 8010558:	0802cfa8 	.word	0x0802cfa8

0801055c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 801055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801055e:	b08f      	sub	sp, #60	@ 0x3c
 8010560:	af00      	add	r7, sp, #0
 8010562:	6278      	str	r0, [r7, #36]	@ 0x24
 8010564:	0008      	movs	r0, r1
 8010566:	0011      	movs	r1, r2
 8010568:	2323      	movs	r3, #35	@ 0x23
 801056a:	18fb      	adds	r3, r7, r3
 801056c:	1c02      	adds	r2, r0, #0
 801056e:	701a      	strb	r2, [r3, #0]
 8010570:	2322      	movs	r3, #34	@ 0x22
 8010572:	18fb      	adds	r3, r7, r3
 8010574:	1c0a      	adds	r2, r1, #0
 8010576:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8010578:	2317      	movs	r3, #23
 801057a:	2220      	movs	r2, #32
 801057c:	189b      	adds	r3, r3, r2
 801057e:	19db      	adds	r3, r3, r7
 8010580:	2200      	movs	r2, #0
 8010582:	701a      	strb	r2, [r3, #0]
 8010584:	e09f      	b.n	80106c6 <CheckCRC+0x16a>
 8010586:	466b      	mov	r3, sp
 8010588:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 801058a:	2322      	movs	r3, #34	@ 0x22
 801058c:	18fb      	adds	r3, r7, r3
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	001a      	movs	r2, r3
 8010592:	3a01      	subs	r2, #1
 8010594:	633a      	str	r2, [r7, #48]	@ 0x30
 8010596:	60bb      	str	r3, [r7, #8]
 8010598:	2200      	movs	r2, #0
 801059a:	60fa      	str	r2, [r7, #12]
 801059c:	68b8      	ldr	r0, [r7, #8]
 801059e:	68f9      	ldr	r1, [r7, #12]
 80105a0:	0002      	movs	r2, r0
 80105a2:	0f52      	lsrs	r2, r2, #29
 80105a4:	000c      	movs	r4, r1
 80105a6:	00e4      	lsls	r4, r4, #3
 80105a8:	61fc      	str	r4, [r7, #28]
 80105aa:	69fc      	ldr	r4, [r7, #28]
 80105ac:	4314      	orrs	r4, r2
 80105ae:	61fc      	str	r4, [r7, #28]
 80105b0:	0002      	movs	r2, r0
 80105b2:	00d2      	lsls	r2, r2, #3
 80105b4:	61ba      	str	r2, [r7, #24]
 80105b6:	603b      	str	r3, [r7, #0]
 80105b8:	2200      	movs	r2, #0
 80105ba:	607a      	str	r2, [r7, #4]
 80105bc:	6838      	ldr	r0, [r7, #0]
 80105be:	6879      	ldr	r1, [r7, #4]
 80105c0:	0002      	movs	r2, r0
 80105c2:	0f52      	lsrs	r2, r2, #29
 80105c4:	000c      	movs	r4, r1
 80105c6:	00e4      	lsls	r4, r4, #3
 80105c8:	617c      	str	r4, [r7, #20]
 80105ca:	697c      	ldr	r4, [r7, #20]
 80105cc:	4314      	orrs	r4, r2
 80105ce:	617c      	str	r4, [r7, #20]
 80105d0:	0002      	movs	r2, r0
 80105d2:	00d2      	lsls	r2, r2, #3
 80105d4:	613a      	str	r2, [r7, #16]
 80105d6:	3307      	adds	r3, #7
 80105d8:	08db      	lsrs	r3, r3, #3
 80105da:	00db      	lsls	r3, r3, #3
 80105dc:	466a      	mov	r2, sp
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	469d      	mov	sp, r3
 80105e2:	466b      	mov	r3, sp
 80105e4:	3300      	adds	r3, #0
 80105e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80105e8:	2316      	movs	r3, #22
 80105ea:	2220      	movs	r2, #32
 80105ec:	189b      	adds	r3, r3, r2
 80105ee:	19db      	adds	r3, r3, r7
 80105f0:	2200      	movs	r2, #0
 80105f2:	701a      	strb	r2, [r3, #0]
 80105f4:	e01e      	b.n	8010634 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80105f6:	2317      	movs	r3, #23
 80105f8:	2220      	movs	r2, #32
 80105fa:	189b      	adds	r3, r3, r2
 80105fc:	19db      	adds	r3, r3, r7
 80105fe:	781a      	ldrb	r2, [r3, #0]
 8010600:	2116      	movs	r1, #22
 8010602:	2320      	movs	r3, #32
 8010604:	18cb      	adds	r3, r1, r3
 8010606:	19db      	adds	r3, r3, r7
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	18d3      	adds	r3, r2, r3
 801060c:	001a      	movs	r2, r3
 801060e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010610:	189a      	adds	r2, r3, r2
 8010612:	0008      	movs	r0, r1
 8010614:	2320      	movs	r3, #32
 8010616:	18cb      	adds	r3, r1, r3
 8010618:	19db      	adds	r3, r3, r7
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	7811      	ldrb	r1, [r2, #0]
 801061e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010620:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8010622:	2320      	movs	r3, #32
 8010624:	18c3      	adds	r3, r0, r3
 8010626:	19db      	adds	r3, r3, r7
 8010628:	781a      	ldrb	r2, [r3, #0]
 801062a:	2320      	movs	r3, #32
 801062c:	18c3      	adds	r3, r0, r3
 801062e:	19db      	adds	r3, r3, r7
 8010630:	3201      	adds	r2, #1
 8010632:	701a      	strb	r2, [r3, #0]
 8010634:	2316      	movs	r3, #22
 8010636:	2220      	movs	r2, #32
 8010638:	189b      	adds	r3, r3, r2
 801063a:	19da      	adds	r2, r3, r7
 801063c:	2322      	movs	r3, #34	@ 0x22
 801063e:	18fb      	adds	r3, r7, r3
 8010640:	7812      	ldrb	r2, [r2, #0]
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	429a      	cmp	r2, r3
 8010646:	d3d6      	bcc.n	80105f6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8010648:	2417      	movs	r4, #23
 801064a:	2320      	movs	r3, #32
 801064c:	18e3      	adds	r3, r4, r3
 801064e:	19db      	adds	r3, r3, r7
 8010650:	781a      	ldrb	r2, [r3, #0]
 8010652:	2322      	movs	r3, #34	@ 0x22
 8010654:	18fb      	adds	r3, r7, r3
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	18d3      	adds	r3, r2, r3
 801065a:	3b01      	subs	r3, #1
 801065c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801065e:	18d2      	adds	r2, r2, r3
 8010660:	250b      	movs	r5, #11
 8010662:	2320      	movs	r3, #32
 8010664:	18eb      	adds	r3, r5, r3
 8010666:	19db      	adds	r3, r3, r7
 8010668:	7812      	ldrb	r2, [r2, #0]
 801066a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 801066c:	2322      	movs	r3, #34	@ 0x22
 801066e:	18fb      	adds	r3, r7, r3
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	3b01      	subs	r3, #1
 8010674:	b2da      	uxtb	r2, r3
 8010676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010678:	0011      	movs	r1, r2
 801067a:	0018      	movs	r0, r3
 801067c:	f000 f838 	bl	80106f0 <CalculateCRC>
 8010680:	0003      	movs	r3, r0
 8010682:	001a      	movs	r2, r3
 8010684:	2320      	movs	r3, #32
 8010686:	18eb      	adds	r3, r5, r3
 8010688:	19db      	adds	r3, r3, r7
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	4293      	cmp	r3, r2
 801068e:	d00c      	beq.n	80106aa <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8010690:	2320      	movs	r3, #32
 8010692:	18e3      	adds	r3, r4, r3
 8010694:	19db      	adds	r3, r3, r7
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	3301      	adds	r3, #1
 801069a:	4a13      	ldr	r2, [pc, #76]	@ (80106e8 <CheckCRC+0x18c>)
 801069c:	4913      	ldr	r1, [pc, #76]	@ (80106ec <CheckCRC+0x190>)
 801069e:	2001      	movs	r0, #1
 80106a0:	f002 fd02 	bl	80130a8 <CreateLine>
      return false;
 80106a4:	2300      	movs	r3, #0
 80106a6:	46b5      	mov	sp, r6
 80106a8:	e019      	b.n	80106de <CheckCRC+0x182>
 80106aa:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80106ac:	2217      	movs	r2, #23
 80106ae:	2320      	movs	r3, #32
 80106b0:	18d3      	adds	r3, r2, r3
 80106b2:	19db      	adds	r3, r3, r7
 80106b4:	2120      	movs	r1, #32
 80106b6:	1852      	adds	r2, r2, r1
 80106b8:	19d1      	adds	r1, r2, r7
 80106ba:	2222      	movs	r2, #34	@ 0x22
 80106bc:	18ba      	adds	r2, r7, r2
 80106be:	7809      	ldrb	r1, [r1, #0]
 80106c0:	7812      	ldrb	r2, [r2, #0]
 80106c2:	188a      	adds	r2, r1, r2
 80106c4:	701a      	strb	r2, [r3, #0]
 80106c6:	2317      	movs	r3, #23
 80106c8:	2220      	movs	r2, #32
 80106ca:	189b      	adds	r3, r3, r2
 80106cc:	19da      	adds	r2, r3, r7
 80106ce:	2323      	movs	r3, #35	@ 0x23
 80106d0:	18fb      	adds	r3, r7, r3
 80106d2:	7812      	ldrb	r2, [r2, #0]
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d200      	bcs.n	80106dc <CheckCRC+0x180>
 80106da:	e754      	b.n	8010586 <CheckCRC+0x2a>
    }
  }
  return true;
 80106dc:	2301      	movs	r3, #1
}
 80106de:	0018      	movs	r0, r3
 80106e0:	46bd      	mov	sp, r7
 80106e2:	b00f      	add	sp, #60	@ 0x3c
 80106e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106e6:	46c0      	nop			@ (mov r8, r8)
 80106e8:	0802d048 	.word	0x0802d048
 80106ec:	0802cf84 	.word	0x0802cf84

080106f0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	000a      	movs	r2, r1
 80106fa:	1cfb      	adds	r3, r7, #3
 80106fc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 80106fe:	230f      	movs	r3, #15
 8010700:	18fb      	adds	r3, r7, r3
 8010702:	22ff      	movs	r2, #255	@ 0xff
 8010704:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8010706:	230e      	movs	r3, #14
 8010708:	18fb      	adds	r3, r7, r3
 801070a:	2200      	movs	r2, #0
 801070c:	701a      	strb	r2, [r3, #0]
 801070e:	e038      	b.n	8010782 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8010710:	230e      	movs	r3, #14
 8010712:	18fb      	adds	r3, r7, r3
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	18d3      	adds	r3, r2, r3
 801071a:	7819      	ldrb	r1, [r3, #0]
 801071c:	220f      	movs	r2, #15
 801071e:	18bb      	adds	r3, r7, r2
 8010720:	18ba      	adds	r2, r7, r2
 8010722:	7812      	ldrb	r2, [r2, #0]
 8010724:	404a      	eors	r2, r1
 8010726:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8010728:	230d      	movs	r3, #13
 801072a:	18fb      	adds	r3, r7, r3
 801072c:	2200      	movs	r2, #0
 801072e:	701a      	strb	r2, [r3, #0]
 8010730:	e01c      	b.n	801076c <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8010732:	210f      	movs	r1, #15
 8010734:	187b      	adds	r3, r7, r1
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	b25b      	sxtb	r3, r3
 801073a:	2b00      	cmp	r3, #0
 801073c:	da0a      	bge.n	8010754 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 801073e:	187b      	adds	r3, r7, r1
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	b25b      	sxtb	r3, r3
 8010744:	18db      	adds	r3, r3, r3
 8010746:	b25b      	sxtb	r3, r3
 8010748:	2231      	movs	r2, #49	@ 0x31
 801074a:	4053      	eors	r3, r2
 801074c:	b25a      	sxtb	r2, r3
 801074e:	187b      	adds	r3, r7, r1
 8010750:	701a      	strb	r2, [r3, #0]
 8010752:	e005      	b.n	8010760 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 8010754:	230f      	movs	r3, #15
 8010756:	18fa      	adds	r2, r7, r3
 8010758:	18fb      	adds	r3, r7, r3
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	18db      	adds	r3, r3, r3
 801075e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8010760:	210d      	movs	r1, #13
 8010762:	187b      	adds	r3, r7, r1
 8010764:	781a      	ldrb	r2, [r3, #0]
 8010766:	187b      	adds	r3, r7, r1
 8010768:	3201      	adds	r2, #1
 801076a:	701a      	strb	r2, [r3, #0]
 801076c:	230d      	movs	r3, #13
 801076e:	18fb      	adds	r3, r7, r3
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	2b07      	cmp	r3, #7
 8010774:	d9dd      	bls.n	8010732 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8010776:	210e      	movs	r1, #14
 8010778:	187b      	adds	r3, r7, r1
 801077a:	781a      	ldrb	r2, [r3, #0]
 801077c:	187b      	adds	r3, r7, r1
 801077e:	3201      	adds	r2, #1
 8010780:	701a      	strb	r2, [r3, #0]
 8010782:	230e      	movs	r3, #14
 8010784:	18fa      	adds	r2, r7, r3
 8010786:	1cfb      	adds	r3, r7, #3
 8010788:	7812      	ldrb	r2, [r2, #0]
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	429a      	cmp	r2, r3
 801078e:	d3bf      	bcc.n	8010710 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8010790:	230f      	movs	r3, #15
 8010792:	18fb      	adds	r3, r7, r3
 8010794:	781b      	ldrb	r3, [r3, #0]
}
 8010796:	0018      	movs	r0, r3
 8010798:	46bd      	mov	sp, r7
 801079a:	b004      	add	sp, #16
 801079c:	bd80      	pop	{r7, pc}
	...

080107a0 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	4936      	ldr	r1, [pc, #216]	@ (8010888 <SGP_SetHT+0xe8>)
 80107b0:	1c18      	adds	r0, r3, #0
 80107b2:	f7f0 f885 	bl	80008c0 <__aeabi_fadd>
 80107b6:	1c03      	adds	r3, r0, #0
 80107b8:	4934      	ldr	r1, [pc, #208]	@ (801088c <SGP_SetHT+0xec>)
 80107ba:	1c18      	adds	r0, r3, #0
 80107bc:	f7f0 fa72 	bl	8000ca4 <__aeabi_fdiv>
 80107c0:	1c03      	adds	r3, r0, #0
 80107c2:	4933      	ldr	r1, [pc, #204]	@ (8010890 <SGP_SetHT+0xf0>)
 80107c4:	1c18      	adds	r0, r3, #0
 80107c6:	f7f0 fc3b 	bl	8001040 <__aeabi_fmul>
 80107ca:	1c03      	adds	r3, r0, #0
 80107cc:	1c18      	adds	r0, r3, #0
 80107ce:	f7ef ff25 	bl	800061c <__aeabi_f2uiz>
 80107d2:	0003      	movs	r3, r0
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	4b2f      	ldr	r3, [pc, #188]	@ (8010894 <SGP_SetHT+0xf4>)
 80107d8:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	492e      	ldr	r1, [pc, #184]	@ (8010898 <SGP_SetHT+0xf8>)
 80107e0:	1c18      	adds	r0, r3, #0
 80107e2:	f7f0 fa5f 	bl	8000ca4 <__aeabi_fdiv>
 80107e6:	1c03      	adds	r3, r0, #0
 80107e8:	4929      	ldr	r1, [pc, #164]	@ (8010890 <SGP_SetHT+0xf0>)
 80107ea:	1c18      	adds	r0, r3, #0
 80107ec:	f7f0 fc28 	bl	8001040 <__aeabi_fmul>
 80107f0:	1c03      	adds	r3, r0, #0
 80107f2:	1c18      	adds	r0, r3, #0
 80107f4:	f7ef ff12 	bl	800061c <__aeabi_f2uiz>
 80107f8:	0003      	movs	r3, r0
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	4b27      	ldr	r3, [pc, #156]	@ (801089c <SGP_SetHT+0xfc>)
 80107fe:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8010800:	4b26      	ldr	r3, [pc, #152]	@ (801089c <SGP_SetHT+0xfc>)
 8010802:	881b      	ldrh	r3, [r3, #0]
 8010804:	0a1b      	lsrs	r3, r3, #8
 8010806:	b29b      	uxth	r3, r3
 8010808:	b2da      	uxtb	r2, r3
 801080a:	4b25      	ldr	r3, [pc, #148]	@ (80108a0 <SGP_SetHT+0x100>)
 801080c:	709a      	strb	r2, [r3, #2]
 801080e:	4b24      	ldr	r3, [pc, #144]	@ (80108a0 <SGP_SetHT+0x100>)
 8010810:	789a      	ldrb	r2, [r3, #2]
 8010812:	210c      	movs	r1, #12
 8010814:	187b      	adds	r3, r7, r1
 8010816:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8010818:	4b20      	ldr	r3, [pc, #128]	@ (801089c <SGP_SetHT+0xfc>)
 801081a:	881b      	ldrh	r3, [r3, #0]
 801081c:	b2da      	uxtb	r2, r3
 801081e:	4b20      	ldr	r3, [pc, #128]	@ (80108a0 <SGP_SetHT+0x100>)
 8010820:	70da      	strb	r2, [r3, #3]
 8010822:	4b1f      	ldr	r3, [pc, #124]	@ (80108a0 <SGP_SetHT+0x100>)
 8010824:	78da      	ldrb	r2, [r3, #3]
 8010826:	187b      	adds	r3, r7, r1
 8010828:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 801082a:	187b      	adds	r3, r7, r1
 801082c:	2102      	movs	r1, #2
 801082e:	0018      	movs	r0, r3
 8010830:	f7ff ff5e 	bl	80106f0 <CalculateCRC>
 8010834:	0003      	movs	r3, r0
 8010836:	001a      	movs	r2, r3
 8010838:	4b19      	ldr	r3, [pc, #100]	@ (80108a0 <SGP_SetHT+0x100>)
 801083a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 801083c:	4b15      	ldr	r3, [pc, #84]	@ (8010894 <SGP_SetHT+0xf4>)
 801083e:	881b      	ldrh	r3, [r3, #0]
 8010840:	0a1b      	lsrs	r3, r3, #8
 8010842:	b29b      	uxth	r3, r3
 8010844:	b2da      	uxtb	r2, r3
 8010846:	4b16      	ldr	r3, [pc, #88]	@ (80108a0 <SGP_SetHT+0x100>)
 8010848:	715a      	strb	r2, [r3, #5]
 801084a:	4b15      	ldr	r3, [pc, #84]	@ (80108a0 <SGP_SetHT+0x100>)
 801084c:	795a      	ldrb	r2, [r3, #5]
 801084e:	2108      	movs	r1, #8
 8010850:	187b      	adds	r3, r7, r1
 8010852:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8010854:	4b0f      	ldr	r3, [pc, #60]	@ (8010894 <SGP_SetHT+0xf4>)
 8010856:	881b      	ldrh	r3, [r3, #0]
 8010858:	b2da      	uxtb	r2, r3
 801085a:	4b11      	ldr	r3, [pc, #68]	@ (80108a0 <SGP_SetHT+0x100>)
 801085c:	719a      	strb	r2, [r3, #6]
 801085e:	4b10      	ldr	r3, [pc, #64]	@ (80108a0 <SGP_SetHT+0x100>)
 8010860:	799a      	ldrb	r2, [r3, #6]
 8010862:	187b      	adds	r3, r7, r1
 8010864:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8010866:	187b      	adds	r3, r7, r1
 8010868:	2102      	movs	r1, #2
 801086a:	0018      	movs	r0, r3
 801086c:	f7ff ff40 	bl	80106f0 <CalculateCRC>
 8010870:	0003      	movs	r3, r0
 8010872:	001a      	movs	r2, r3
 8010874:	4b0a      	ldr	r3, [pc, #40]	@ (80108a0 <SGP_SetHT+0x100>)
 8010876:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8010878:	4b0a      	ldr	r3, [pc, #40]	@ (80108a4 <SGP_SetHT+0x104>)
 801087a:	2201      	movs	r2, #1
 801087c:	701a      	strb	r2, [r3, #0]
}
 801087e:	46c0      	nop			@ (mov r8, r8)
 8010880:	46bd      	mov	sp, r7
 8010882:	b004      	add	sp, #16
 8010884:	bd80      	pop	{r7, pc}
 8010886:	46c0      	nop			@ (mov r8, r8)
 8010888:	42340000 	.word	0x42340000
 801088c:	432f0000 	.word	0x432f0000
 8010890:	477fff00 	.word	0x477fff00
 8010894:	20000fb6 	.word	0x20000fb6
 8010898:	42c80000 	.word	0x42c80000
 801089c:	20000fb4 	.word	0x20000fb4
 80108a0:	200000b0 	.word	0x200000b0
 80108a4:	20000fb8 	.word	0x20000fb8

080108a8 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 80108a8:	b580      	push	{r7, lr}
 80108aa:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 80108ac:	4a09      	ldr	r2, [pc, #36]	@ (80108d4 <SGP_SoftReset+0x2c>)
 80108ae:	4b0a      	ldr	r3, [pc, #40]	@ (80108d8 <SGP_SoftReset+0x30>)
 80108b0:	0019      	movs	r1, r3
 80108b2:	2003      	movs	r0, #3
 80108b4:	f002 fbf8 	bl	80130a8 <CreateLine>
  SGP_TurnHeaterOff();
 80108b8:	f7ff fccc 	bl	8010254 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 80108bc:	200a      	movs	r0, #10
 80108be:	f003 f93d 	bl	8013b3c <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80108c2:	4b06      	ldr	r3, [pc, #24]	@ (80108dc <SGP_SoftReset+0x34>)
 80108c4:	2202      	movs	r2, #2
 80108c6:	0019      	movs	r1, r3
 80108c8:	2059      	movs	r0, #89	@ 0x59
 80108ca:	f7ff fbf5 	bl	80100b8 <WriteRegister>
}
 80108ce:	46c0      	nop			@ (mov r8, r8)
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	0802d0f0 	.word	0x0802d0f0
 80108d8:	0802cfcc 	.word	0x0802cfcc
 80108dc:	200000b8 	.word	0x200000b8

080108e0 <ResetVOCresult>:

void ResetVOCresult(void) {
 80108e0:	b580      	push	{r7, lr}
 80108e2:	af00      	add	r7, sp, #0
  vocIndex = 0;
 80108e4:	4b02      	ldr	r3, [pc, #8]	@ (80108f0 <ResetVOCresult+0x10>)
 80108e6:	2200      	movs	r2, #0
 80108e8:	601a      	str	r2, [r3, #0]
}
 80108ea:	46c0      	nop			@ (mov r8, r8)
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}
 80108f0:	20000fbc 	.word	0x20000fbc

080108f4 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 80108f4:	b580      	push	{r7, lr}
 80108f6:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 80108f8:	4b4b      	ldr	r3, [pc, #300]	@ (8010a28 <SGP_Upkeep+0x134>)
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	2b07      	cmp	r3, #7
 80108fe:	d900      	bls.n	8010902 <SGP_Upkeep+0xe>
 8010900:	e07a      	b.n	80109f8 <SGP_Upkeep+0x104>
 8010902:	009a      	lsls	r2, r3, #2
 8010904:	4b49      	ldr	r3, [pc, #292]	@ (8010a2c <SGP_Upkeep+0x138>)
 8010906:	18d3      	adds	r3, r2, r3
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 801090c:	4a48      	ldr	r2, [pc, #288]	@ (8010a30 <SGP_Upkeep+0x13c>)
 801090e:	4b49      	ldr	r3, [pc, #292]	@ (8010a34 <SGP_Upkeep+0x140>)
 8010910:	0019      	movs	r1, r3
 8010912:	2003      	movs	r0, #3
 8010914:	f002 fbc8 	bl	80130a8 <CreateLine>
    break;
 8010918:	e081      	b.n	8010a1e <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 801091a:	f7ff ffe1 	bl	80108e0 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 801091e:	4b42      	ldr	r3, [pc, #264]	@ (8010a28 <SGP_Upkeep+0x134>)
 8010920:	2201      	movs	r2, #1
 8010922:	701a      	strb	r2, [r3, #0]
    break;
 8010924:	e07b      	b.n	8010a1e <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8010926:	f7fc fc75 	bl	800d214 <getSensorLock>
 801092a:	1e03      	subs	r3, r0, #0
 801092c:	d000      	beq.n	8010930 <SGP_Upkeep+0x3c>
 801092e:	e06f      	b.n	8010a10 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 8010930:	2005      	movs	r0, #5
 8010932:	f7fc fc5b 	bl	800d1ec <setSensorLock>
    SetMeasurementIndicator();
 8010936:	f001 f987 	bl	8011c48 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 801093a:	f7ff fc29 	bl	8010190 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 801093e:	200a      	movs	r0, #10
 8010940:	f003 f8fc 	bl	8013b3c <HAL_Delay>
    setSensorLock(FREE);
 8010944:	2000      	movs	r0, #0
 8010946:	f7fc fc51 	bl	800d1ec <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 801094a:	4b37      	ldr	r3, [pc, #220]	@ (8010a28 <SGP_Upkeep+0x134>)
 801094c:	2202      	movs	r2, #2
 801094e:	701a      	strb	r2, [r3, #0]
    break;
 8010950:	e065      	b.n	8010a1e <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 8010952:	f7fc fc5f 	bl	800d214 <getSensorLock>
 8010956:	1e03      	subs	r3, r0, #0
 8010958:	d15c      	bne.n	8010a14 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 801095a:	2005      	movs	r0, #5
 801095c:	f7fc fc46 	bl	800d1ec <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 8010960:	4b35      	ldr	r3, [pc, #212]	@ (8010a38 <SGP_Upkeep+0x144>)
 8010962:	0018      	movs	r0, r3
 8010964:	f7ff fc84 	bl	8010270 <SGP_GetMeasurementValues>
 8010968:	1e03      	subs	r3, r0, #0
 801096a:	d002      	beq.n	8010972 <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 801096c:	4b2e      	ldr	r3, [pc, #184]	@ (8010a28 <SGP_Upkeep+0x134>)
 801096e:	2203      	movs	r2, #3
 8010970:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 8010972:	200a      	movs	r0, #10
 8010974:	f003 f8e2 	bl	8013b3c <HAL_Delay>
    setSensorLock(FREE);
 8010978:	2000      	movs	r0, #0
 801097a:	f7fc fc37 	bl	800d1ec <setSensorLock>
    break;
 801097e:	e04e      	b.n	8010a1e <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 8010980:	4b2d      	ldr	r3, [pc, #180]	@ (8010a38 <SGP_Upkeep+0x144>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	b29b      	uxth	r3, r3
 8010986:	0018      	movs	r0, r3
 8010988:	f7f4 f86a 	bl	8004a60 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 801098c:	4b26      	ldr	r3, [pc, #152]	@ (8010a28 <SGP_Upkeep+0x134>)
 801098e:	2206      	movs	r2, #6
 8010990:	701a      	strb	r2, [r3, #0]
    break;
 8010992:	e044      	b.n	8010a1e <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 8010994:	4b24      	ldr	r3, [pc, #144]	@ (8010a28 <SGP_Upkeep+0x134>)
 8010996:	2207      	movs	r2, #7
 8010998:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 801099a:	4b28      	ldr	r3, [pc, #160]	@ (8010a3c <SGP_Upkeep+0x148>)
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	2b03      	cmp	r3, #3
 80109a0:	d912      	bls.n	80109c8 <SGP_Upkeep+0xd4>
 80109a2:	4b27      	ldr	r3, [pc, #156]	@ (8010a40 <SGP_Upkeep+0x14c>)
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	2201      	movs	r2, #1
 80109a8:	4053      	eors	r3, r2
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d00b      	beq.n	80109c8 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 80109b0:	4b24      	ldr	r3, [pc, #144]	@ (8010a44 <SGP_Upkeep+0x150>)
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d004      	beq.n	80109c2 <SGP_Upkeep+0xce>
        SGP_SoftReset();
 80109b8:	f7ff ff76 	bl	80108a8 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 80109bc:	2000      	movs	r0, #0
 80109be:	f7fc f80d 	bl	800c9dc <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 80109c2:	4b20      	ldr	r3, [pc, #128]	@ (8010a44 <SGP_Upkeep+0x150>)
 80109c4:	2201      	movs	r2, #1
 80109c6:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 80109c8:	f003 f8ae 	bl	8013b28 <HAL_GetTick>
 80109cc:	0003      	movs	r3, r0
 80109ce:	22c8      	movs	r2, #200	@ 0xc8
 80109d0:	0092      	lsls	r2, r2, #2
 80109d2:	189a      	adds	r2, r3, r2
 80109d4:	4b1c      	ldr	r3, [pc, #112]	@ (8010a48 <SGP_Upkeep+0x154>)
 80109d6:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 80109d8:	f001 f94e 	bl	8011c78 <ResetMeasurementIndicator>
  break;
 80109dc:	e01f      	b.n	8010a1e <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 80109de:	4b1a      	ldr	r3, [pc, #104]	@ (8010a48 <SGP_Upkeep+0x154>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	0018      	movs	r0, r3
 80109e4:	f002 fb0a 	bl	8012ffc <TimestampIsReached>
 80109e8:	1e03      	subs	r3, r0, #0
 80109ea:	d015      	beq.n	8010a18 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 80109ec:	f7ff fbb8 	bl	8010160 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 80109f0:	4b0d      	ldr	r3, [pc, #52]	@ (8010a28 <SGP_Upkeep+0x134>)
 80109f2:	2200      	movs	r2, #0
 80109f4:	701a      	strb	r2, [r3, #0]
    }
    break;
 80109f6:	e00f      	b.n	8010a18 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 80109f8:	4b0b      	ldr	r3, [pc, #44]	@ (8010a28 <SGP_Upkeep+0x134>)
 80109fa:	2200      	movs	r2, #0
 80109fc:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 80109fe:	f7fc fc09 	bl	800d214 <getSensorLock>
 8010a02:	0003      	movs	r3, r0
 8010a04:	2b05      	cmp	r3, #5
 8010a06:	d109      	bne.n	8010a1c <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8010a08:	2000      	movs	r0, #0
 8010a0a:	f7fc fbef 	bl	800d1ec <setSensorLock>
    }
    break;
 8010a0e:	e005      	b.n	8010a1c <SGP_Upkeep+0x128>
      break;
 8010a10:	46c0      	nop			@ (mov r8, r8)
 8010a12:	e004      	b.n	8010a1e <SGP_Upkeep+0x12a>
      break;
 8010a14:	46c0      	nop			@ (mov r8, r8)
 8010a16:	e002      	b.n	8010a1e <SGP_Upkeep+0x12a>
    break;
 8010a18:	46c0      	nop			@ (mov r8, r8)
 8010a1a:	e000      	b.n	8010a1e <SGP_Upkeep+0x12a>
    break;
 8010a1c:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8010a1e:	4b02      	ldr	r3, [pc, #8]	@ (8010a28 <SGP_Upkeep+0x134>)
 8010a20:	781b      	ldrb	r3, [r3, #0]
}
 8010a22:	0018      	movs	r0, r3
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	20000fc0 	.word	0x20000fc0
 8010a2c:	0802d954 	.word	0x0802d954
 8010a30:	0802d108 	.word	0x0802d108
 8010a34:	0802cfcc 	.word	0x0802cfcc
 8010a38:	20000fbc 	.word	0x20000fbc
 8010a3c:	20000f06 	.word	0x20000f06
 8010a40:	20001e5d 	.word	0x20001e5d
 8010a44:	20000ef0 	.word	0x20000ef0
 8010a48:	20000f08 	.word	0x20000f08

08010a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	0002      	movs	r2, r0
 8010a54:	1dfb      	adds	r3, r7, #7
 8010a56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010a58:	1dfb      	adds	r3, r7, #7
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8010a5e:	d809      	bhi.n	8010a74 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010a60:	1dfb      	adds	r3, r7, #7
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	001a      	movs	r2, r3
 8010a66:	231f      	movs	r3, #31
 8010a68:	401a      	ands	r2, r3
 8010a6a:	4b04      	ldr	r3, [pc, #16]	@ (8010a7c <__NVIC_EnableIRQ+0x30>)
 8010a6c:	2101      	movs	r1, #1
 8010a6e:	4091      	lsls	r1, r2
 8010a70:	000a      	movs	r2, r1
 8010a72:	601a      	str	r2, [r3, #0]
  }
}
 8010a74:	46c0      	nop			@ (mov r8, r8)
 8010a76:	46bd      	mov	sp, r7
 8010a78:	b002      	add	sp, #8
 8010a7a:	bd80      	pop	{r7, pc}
 8010a7c:	e000e100 	.word	0xe000e100

08010a80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	0002      	movs	r2, r0
 8010a88:	1dfb      	adds	r3, r7, #7
 8010a8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010a8c:	1dfb      	adds	r3, r7, #7
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	2b7f      	cmp	r3, #127	@ 0x7f
 8010a92:	d810      	bhi.n	8010ab6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010a94:	1dfb      	adds	r3, r7, #7
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	001a      	movs	r2, r3
 8010a9a:	231f      	movs	r3, #31
 8010a9c:	4013      	ands	r3, r2
 8010a9e:	4908      	ldr	r1, [pc, #32]	@ (8010ac0 <__NVIC_DisableIRQ+0x40>)
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	409a      	lsls	r2, r3
 8010aa4:	0013      	movs	r3, r2
 8010aa6:	2280      	movs	r2, #128	@ 0x80
 8010aa8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010aaa:	f3bf 8f4f 	dsb	sy
}
 8010aae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010ab0:	f3bf 8f6f 	isb	sy
}
 8010ab4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8010ab6:	46c0      	nop			@ (mov r8, r8)
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	b002      	add	sp, #8
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	46c0      	nop			@ (mov r8, r8)
 8010ac0:	e000e100 	.word	0xe000e100

08010ac4 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8010ac4:	b5b0      	push	{r4, r5, r7, lr}
 8010ac6:	b088      	sub	sp, #32
 8010ac8:	af02      	add	r7, sp, #8
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	0008      	movs	r0, r1
 8010ace:	0011      	movs	r1, r2
 8010ad0:	1cfb      	adds	r3, r7, #3
 8010ad2:	1c02      	adds	r2, r0, #0
 8010ad4:	701a      	strb	r2, [r3, #0]
 8010ad6:	1cbb      	adds	r3, r7, #2
 8010ad8:	1c0a      	adds	r2, r1, #0
 8010ada:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8010adc:	4b5b      	ldr	r3, [pc, #364]	@ (8010c4c <getSoundData+0x188>)
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	4053      	eors	r3, r2
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d107      	bne.n	8010afc <getSoundData+0x38>
 8010aec:	4b58      	ldr	r3, [pc, #352]	@ (8010c50 <getSoundData+0x18c>)
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	b2db      	uxtb	r3, r3
 8010af2:	2201      	movs	r2, #1
 8010af4:	4053      	eors	r3, r2
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d001      	beq.n	8010b00 <getSoundData+0x3c>
    {
        return false;
 8010afc:	2300      	movs	r3, #0
 8010afe:	e0a0      	b.n	8010c42 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8010b00:	4b54      	ldr	r3, [pc, #336]	@ (8010c54 <getSoundData+0x190>)
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d005      	beq.n	8010b16 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8010b0a:	4b53      	ldr	r3, [pc, #332]	@ (8010c58 <getSoundData+0x194>)
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	b25b      	sxtb	r3, r3
 8010b10:	0018      	movs	r0, r3
 8010b12:	f7ff ffb5 	bl	8010a80 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8010b16:	f3bf 8f4f 	dsb	sy
}
 8010b1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010b1c:	f3bf 8f6f 	isb	sy
}
 8010b20:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8010b22:	1cfb      	adds	r3, r7, #3
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d04c      	beq.n	8010bc4 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8010b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8010c5c <getSoundData+0x198>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d11b      	bne.n	8010b6a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2200      	movs	r2, #0
 8010b36:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010b3e:	2300      	movs	r3, #0
 8010b40:	617b      	str	r3, [r7, #20]
 8010b42:	e00e      	b.n	8010b62 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8010b44:	687a      	ldr	r2, [r7, #4]
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	18d3      	adds	r3, r2, r3
 8010b4a:	3302      	adds	r3, #2
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	18d3      	adds	r3, r2, r3
 8010b56:	3308      	adds	r3, #8
 8010b58:	2200      	movs	r2, #0
 8010b5a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	3301      	adds	r3, #1
 8010b60:	617b      	str	r3, [r7, #20]
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	2b05      	cmp	r3, #5
 8010b66:	d9ed      	bls.n	8010b44 <getSoundData+0x80>
 8010b68:	e02c      	b.n	8010bc4 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	1c59      	adds	r1, r3, #1
 8010b70:	4b3b      	ldr	r3, [pc, #236]	@ (8010c60 <getSoundData+0x19c>)
 8010b72:	681a      	ldr	r2, [r3, #0]
 8010b74:	4b3b      	ldr	r3, [pc, #236]	@ (8010c64 <getSoundData+0x1a0>)
 8010b76:	681c      	ldr	r4, [r3, #0]
 8010b78:	4b38      	ldr	r3, [pc, #224]	@ (8010c5c <getSoundData+0x198>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	0023      	movs	r3, r4
 8010b80:	f000 fde8 	bl	8011754 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010b84:	2300      	movs	r3, #0
 8010b86:	613b      	str	r3, [r7, #16]
 8010b88:	e019      	b.n	8010bbe <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	18d3      	adds	r3, r2, r3
 8010b90:	1c98      	adds	r0, r3, #2
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	3308      	adds	r3, #8
 8010b96:	687a      	ldr	r2, [r7, #4]
 8010b98:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8010b9a:	4b33      	ldr	r3, [pc, #204]	@ (8010c68 <getSoundData+0x1a4>)
 8010b9c:	693a      	ldr	r2, [r7, #16]
 8010b9e:	0092      	lsls	r2, r2, #2
 8010ba0:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8010ba2:	4b32      	ldr	r3, [pc, #200]	@ (8010c6c <getSoundData+0x1a8>)
 8010ba4:	693a      	ldr	r2, [r7, #16]
 8010ba6:	0092      	lsls	r2, r2, #2
 8010ba8:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010baa:	4b2c      	ldr	r3, [pc, #176]	@ (8010c5c <getSoundData+0x198>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	0013      	movs	r3, r2
 8010bb2:	0022      	movs	r2, r4
 8010bb4:	f000 fdce 	bl	8011754 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	3301      	adds	r3, #1
 8010bbc:	613b      	str	r3, [r7, #16]
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	2b05      	cmp	r3, #5
 8010bc2:	d9e2      	bls.n	8010b8a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8010bc4:	1cbb      	adds	r3, r7, #2
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d028      	beq.n	8010c1e <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8010bcc:	240e      	movs	r4, #14
 8010bce:	193b      	adds	r3, r7, r4
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8010bd4:	250d      	movs	r5, #13
 8010bd6:	197b      	adds	r3, r7, r5
 8010bd8:	2200      	movs	r2, #0
 8010bda:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8010bdc:	4b24      	ldr	r3, [pc, #144]	@ (8010c70 <getSoundData+0x1ac>)
 8010bde:	6818      	ldr	r0, [r3, #0]
 8010be0:	4924      	ldr	r1, [pc, #144]	@ (8010c74 <getSoundData+0x1b0>)
 8010be2:	197b      	adds	r3, r7, r5
 8010be4:	193a      	adds	r2, r7, r4
 8010be6:	f000 fe59 	bl	801189c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8010bea:	193b      	adds	r3, r7, r4
 8010bec:	881a      	ldrh	r2, [r3, #0]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	21ff      	movs	r1, #255	@ 0xff
 8010bf2:	4011      	ands	r1, r2
 8010bf4:	000c      	movs	r4, r1
 8010bf6:	7b99      	ldrb	r1, [r3, #14]
 8010bf8:	2000      	movs	r0, #0
 8010bfa:	4001      	ands	r1, r0
 8010bfc:	1c08      	adds	r0, r1, #0
 8010bfe:	1c21      	adds	r1, r4, #0
 8010c00:	4301      	orrs	r1, r0
 8010c02:	7399      	strb	r1, [r3, #14]
 8010c04:	0a12      	lsrs	r2, r2, #8
 8010c06:	b290      	uxth	r0, r2
 8010c08:	7bda      	ldrb	r2, [r3, #15]
 8010c0a:	2100      	movs	r1, #0
 8010c0c:	400a      	ands	r2, r1
 8010c0e:	1c11      	adds	r1, r2, #0
 8010c10:	1c02      	adds	r2, r0, #0
 8010c12:	430a      	orrs	r2, r1
 8010c14:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8010c16:	197b      	adds	r3, r7, r5
 8010c18:	781a      	ldrb	r2, [r3, #0]
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8010c1e:	f000 f86f 	bl	8010d00 <micSettlingComplete>
 8010c22:	0003      	movs	r3, r0
 8010c24:	001a      	movs	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8010c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8010c54 <getSoundData+0x190>)
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d005      	beq.n	8010c40 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010c34:	4b08      	ldr	r3, [pc, #32]	@ (8010c58 <getSoundData+0x194>)
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	b25b      	sxtb	r3, r3
 8010c3a:	0018      	movs	r0, r3
 8010c3c:	f7ff ff06 	bl	8010a4c <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8010c40:	2301      	movs	r3, #1
}
 8010c42:	0018      	movs	r0, r3
 8010c44:	46bd      	mov	sp, r7
 8010c46:	b006      	add	sp, #24
 8010c48:	bdb0      	pop	{r4, r5, r7, pc}
 8010c4a:	46c0      	nop			@ (mov r8, r8)
 8010c4c:	20000fc2 	.word	0x20000fc2
 8010c50:	20000fc5 	.word	0x20000fc5
 8010c54:	20000fc4 	.word	0x20000fc4
 8010c58:	20001a14 	.word	0x20001a14
 8010c5c:	20001a50 	.word	0x20001a50
 8010c60:	20001a18 	.word	0x20001a18
 8010c64:	20001a1c 	.word	0x20001a1c
 8010c68:	20001a20 	.word	0x20001a20
 8010c6c:	20001a38 	.word	0x20001a38
 8010c70:	20000fcc 	.word	0x20000fcc
 8010c74:	3b5c7333 	.word	0x3b5c7333

08010c78 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	607a      	str	r2, [r7, #4]
 8010c84:	001a      	movs	r2, r3
 8010c86:	1cfb      	adds	r3, r7, #3
 8010c88:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8010c8a:	4b09      	ldr	r3, [pc, #36]	@ (8010cb0 <soundInit+0x38>)
 8010c8c:	68ba      	ldr	r2, [r7, #8]
 8010c8e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8010c90:	4b08      	ldr	r3, [pc, #32]	@ (8010cb4 <soundInit+0x3c>)
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8010c96:	4b08      	ldr	r3, [pc, #32]	@ (8010cb8 <soundInit+0x40>)
 8010c98:	68fa      	ldr	r2, [r7, #12]
 8010c9a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8010c9c:	4b07      	ldr	r3, [pc, #28]	@ (8010cbc <soundInit+0x44>)
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	569a      	ldrsb	r2, [r3, r2]
 8010ca2:	4b06      	ldr	r3, [pc, #24]	@ (8010cbc <soundInit+0x44>)
 8010ca4:	701a      	strb	r2, [r3, #0]

    return true;
 8010ca6:	2301      	movs	r3, #1
}
 8010ca8:	0018      	movs	r0, r3
 8010caa:	46bd      	mov	sp, r7
 8010cac:	b004      	add	sp, #16
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	20001a0c 	.word	0x20001a0c
 8010cb4:	20001a08 	.word	0x20001a08
 8010cb8:	20001a10 	.word	0x20001a10
 8010cbc:	20001a14 	.word	0x20001a14

08010cc0 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8010cc4:	4b02      	ldr	r3, [pc, #8]	@ (8010cd0 <clearMaximumAmplitude+0x10>)
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	601a      	str	r2, [r3, #0]
}
 8010cca:	46c0      	nop			@ (mov r8, r8)
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	20000fcc 	.word	0x20000fcc

08010cd4 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8010cd8:	4b08      	ldr	r3, [pc, #32]	@ (8010cfc <startMicSettlingPeriod+0x28>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8010ce2:	4b06      	ldr	r3, [pc, #24]	@ (8010cfc <startMicSettlingPeriod+0x28>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	0018      	movs	r0, r3
 8010ce8:	f00a ffee 	bl	801bcc8 <HAL_TIM_Base_Start>
 8010cec:	1e03      	subs	r3, r0, #0
 8010cee:	d001      	beq.n	8010cf4 <startMicSettlingPeriod+0x20>
    {
        return false;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	e000      	b.n	8010cf6 <startMicSettlingPeriod+0x22>
    }
    return true;
 8010cf4:	2301      	movs	r3, #1
}
 8010cf6:	0018      	movs	r0, r3
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	20001a08 	.word	0x20001a08

08010d00 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8010d06:	4b0e      	ldr	r3, [pc, #56]	@ (8010d40 <micSettlingComplete+0x40>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	691b      	ldr	r3, [r3, #16]
 8010d0e:	2201      	movs	r2, #1
 8010d10:	401a      	ands	r2, r3
 8010d12:	1dfb      	adds	r3, r7, #7
 8010d14:	3a01      	subs	r2, #1
 8010d16:	4251      	negs	r1, r2
 8010d18:	414a      	adcs	r2, r1
 8010d1a:	701a      	strb	r2, [r3, #0]
    if (complete)
 8010d1c:	1dfb      	adds	r3, r7, #7
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d007      	beq.n	8010d34 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8010d24:	4b06      	ldr	r3, [pc, #24]	@ (8010d40 <micSettlingComplete+0x40>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	0018      	movs	r0, r3
 8010d2a:	f00b f817 	bl	801bd5c <HAL_TIM_Base_Stop>
      DataReady = true;
 8010d2e:	4b05      	ldr	r3, [pc, #20]	@ (8010d44 <micSettlingComplete+0x44>)
 8010d30:	2201      	movs	r2, #1
 8010d32:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8010d34:	1dfb      	adds	r3, r7, #7
 8010d36:	781b      	ldrb	r3, [r3, #0]
}
 8010d38:	0018      	movs	r0, r3
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	b002      	add	sp, #8
 8010d3e:	bd80      	pop	{r7, pc}
 8010d40:	20001a08 	.word	0x20001a08
 8010d44:	20000fc1 	.word	0x20000fc1

08010d48 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	0002      	movs	r2, r0
 8010d50:	1dfb      	adds	r3, r7, #7
 8010d52:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8010d54:	4b29      	ldr	r3, [pc, #164]	@ (8010dfc <enableMicrophone+0xb4>)
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	1dfa      	adds	r2, r7, #7
 8010d5c:	7812      	ldrb	r2, [r2, #0]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d101      	bne.n	8010d66 <enableMicrophone+0x1e>
    {
        return true;
 8010d62:	2301      	movs	r3, #1
 8010d64:	e045      	b.n	8010df2 <enableMicrophone+0xaa>
    }
    if (bEnable)
 8010d66:	1dfb      	adds	r3, r7, #7
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d025      	beq.n	8010dba <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8010d6e:	f7ff ffb1 	bl	8010cd4 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8010d72:	4b23      	ldr	r3, [pc, #140]	@ (8010e00 <enableMicrophone+0xb8>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	2280      	movs	r2, #128	@ 0x80
 8010d78:	0092      	lsls	r2, r2, #2
 8010d7a:	4922      	ldr	r1, [pc, #136]	@ (8010e04 <enableMicrophone+0xbc>)
 8010d7c:	0018      	movs	r0, r3
 8010d7e:	f007 fa0d 	bl	801819c <HAL_I2S_Receive_DMA>
 8010d82:	1e03      	subs	r3, r0, #0
 8010d84:	d001      	beq.n	8010d8a <enableMicrophone+0x42>
        {
            return false;
 8010d86:	2300      	movs	r3, #0
 8010d88:	e033      	b.n	8010df2 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8010d8a:	f7ff ff99 	bl	8010cc0 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8010d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8010e08 <enableMicrophone+0xc0>)
 8010d90:	2200      	movs	r2, #0
 8010d92:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010d94:	4b1d      	ldr	r3, [pc, #116]	@ (8010e0c <enableMicrophone+0xc4>)
 8010d96:	781b      	ldrb	r3, [r3, #0]
 8010d98:	b25b      	sxtb	r3, r3
 8010d9a:	0018      	movs	r0, r3
 8010d9c:	f7ff fe56 	bl	8010a4c <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8010da0:	4b1b      	ldr	r3, [pc, #108]	@ (8010e10 <enableMicrophone+0xc8>)
 8010da2:	2201      	movs	r2, #1
 8010da4:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8010da6:	4b15      	ldr	r3, [pc, #84]	@ (8010dfc <enableMicrophone+0xb4>)
 8010da8:	2201      	movs	r2, #1
 8010daa:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010dac:	4b19      	ldr	r3, [pc, #100]	@ (8010e14 <enableMicrophone+0xcc>)
 8010dae:	2200      	movs	r2, #0
 8010db0:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8010db2:	4b19      	ldr	r3, [pc, #100]	@ (8010e18 <enableMicrophone+0xd0>)
 8010db4:	2200      	movs	r2, #0
 8010db6:	701a      	strb	r2, [r3, #0]
 8010db8:	e01a      	b.n	8010df0 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8010dba:	4b14      	ldr	r3, [pc, #80]	@ (8010e0c <enableMicrophone+0xc4>)
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	b25b      	sxtb	r3, r3
 8010dc0:	0018      	movs	r0, r3
 8010dc2:	f7ff fe5d 	bl	8010a80 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8010dc6:	4b12      	ldr	r3, [pc, #72]	@ (8010e10 <enableMicrophone+0xc8>)
 8010dc8:	2200      	movs	r2, #0
 8010dca:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010dcc:	4b11      	ldr	r3, [pc, #68]	@ (8010e14 <enableMicrophone+0xcc>)
 8010dce:	2200      	movs	r2, #0
 8010dd0:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8010dd2:	4b11      	ldr	r3, [pc, #68]	@ (8010e18 <enableMicrophone+0xd0>)
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8010dd8:	4b09      	ldr	r3, [pc, #36]	@ (8010e00 <enableMicrophone+0xb8>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	0018      	movs	r0, r3
 8010dde:	f007 fa9f 	bl	8018320 <HAL_I2S_DMAStop>
 8010de2:	1e03      	subs	r3, r0, #0
 8010de4:	d001      	beq.n	8010dea <enableMicrophone+0xa2>
        {
            return false;
 8010de6:	2300      	movs	r3, #0
 8010de8:	e003      	b.n	8010df2 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8010dea:	4b04      	ldr	r3, [pc, #16]	@ (8010dfc <enableMicrophone+0xb4>)
 8010dec:	2200      	movs	r2, #0
 8010dee:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8010df0:	2301      	movs	r3, #1
}
 8010df2:	0018      	movs	r0, r3
 8010df4:	46bd      	mov	sp, r7
 8010df6:	b002      	add	sp, #8
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	46c0      	nop			@ (mov r8, r8)
 8010dfc:	20000fc2 	.word	0x20000fc2
 8010e00:	20001a0c 	.word	0x20001a0c
 8010e04:	20001008 	.word	0x20001008
 8010e08:	20000fc8 	.word	0x20000fc8
 8010e0c:	20001a14 	.word	0x20001a14
 8010e10:	20000fc4 	.word	0x20000fc4
 8010e14:	20000fc3 	.word	0x20000fc3
 8010e18:	20000fc5 	.word	0x20000fc5

08010e1c <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8010e20:	4b0c      	ldr	r3, [pc, #48]	@ (8010e54 <startSPLcalculation+0x38>)
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	2201      	movs	r2, #1
 8010e28:	4053      	eors	r3, r2
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d001      	beq.n	8010e34 <startSPLcalculation+0x18>
    {
        return false;
 8010e30:	2300      	movs	r3, #0
 8010e32:	e00c      	b.n	8010e4e <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8010e34:	4b08      	ldr	r3, [pc, #32]	@ (8010e58 <startSPLcalculation+0x3c>)
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d001      	beq.n	8010e42 <startSPLcalculation+0x26>
    {
        return true;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	e005      	b.n	8010e4e <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8010e42:	f000 fb63 	bl	801150c <resetSPLstate>
    SPLcalcEnabled = true;
 8010e46:	4b04      	ldr	r3, [pc, #16]	@ (8010e58 <startSPLcalculation+0x3c>)
 8010e48:	2201      	movs	r2, #1
 8010e4a:	701a      	strb	r2, [r3, #0]
    return true;
 8010e4c:	2301      	movs	r3, #1
}
 8010e4e:	0018      	movs	r0, r3
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	20000fc2 	.word	0x20000fc2
 8010e58:	20000fc3 	.word	0x20000fc3

08010e5c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010e64:	4b05      	ldr	r3, [pc, #20]	@ (8010e7c <HAL_I2S_RxHalfCpltCallback+0x20>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d102      	bne.n	8010e74 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8010e6e:	2000      	movs	r0, #0
 8010e70:	f000 f81a 	bl	8010ea8 <processHalfDMAbuffer>
  }
}
 8010e74:	46c0      	nop			@ (mov r8, r8)
 8010e76:	46bd      	mov	sp, r7
 8010e78:	b002      	add	sp, #8
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	20001a0c 	.word	0x20001a0c

08010e80 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010e88:	4b06      	ldr	r3, [pc, #24]	@ (8010ea4 <HAL_I2S_RxCpltCallback+0x24>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	687a      	ldr	r2, [r7, #4]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d104      	bne.n	8010e9c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8010e92:	2380      	movs	r3, #128	@ 0x80
 8010e94:	009b      	lsls	r3, r3, #2
 8010e96:	0018      	movs	r0, r3
 8010e98:	f000 f806 	bl	8010ea8 <processHalfDMAbuffer>
  }
}
 8010e9c:	46c0      	nop			@ (mov r8, r8)
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	b002      	add	sp, #8
 8010ea2:	bd80      	pop	{r7, pc}
 8010ea4:	20001a0c 	.word	0x20001a0c

08010ea8 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	005a      	lsls	r2, r3, #1
 8010eb4:	4b15      	ldr	r3, [pc, #84]	@ (8010f0c <processHalfDMAbuffer+0x64>)
 8010eb6:	18d3      	adds	r3, r2, r3
 8010eb8:	4a15      	ldr	r2, [pc, #84]	@ (8010f10 <processHalfDMAbuffer+0x68>)
 8010eba:	2180      	movs	r1, #128	@ 0x80
 8010ebc:	0089      	lsls	r1, r1, #2
 8010ebe:	0018      	movs	r0, r3
 8010ec0:	f000 fd35 	bl	801192e <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8010ec4:	4b13      	ldr	r3, [pc, #76]	@ (8010f14 <processHalfDMAbuffer+0x6c>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	425a      	negs	r2, r3
 8010eca:	4153      	adcs	r3, r2
 8010ecc:	b2da      	uxtb	r2, r3
 8010ece:	4b11      	ldr	r3, [pc, #68]	@ (8010f14 <processHalfDMAbuffer+0x6c>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2109      	movs	r1, #9
 8010ed4:	4299      	cmp	r1, r3
 8010ed6:	419b      	sbcs	r3, r3
 8010ed8:	425b      	negs	r3, r3
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	480c      	ldr	r0, [pc, #48]	@ (8010f10 <processHalfDMAbuffer+0x68>)
 8010ede:	2180      	movs	r1, #128	@ 0x80
 8010ee0:	f000 fb46 	bl	8011570 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8010ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8010f14 <processHalfDMAbuffer+0x6c>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	2b09      	cmp	r3, #9
 8010eea:	d804      	bhi.n	8010ef6 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8010eec:	4b09      	ldr	r3, [pc, #36]	@ (8010f14 <processHalfDMAbuffer+0x6c>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	1c5a      	adds	r2, r3, #1
 8010ef2:	4b08      	ldr	r3, [pc, #32]	@ (8010f14 <processHalfDMAbuffer+0x6c>)
 8010ef4:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8010ef6:	4b08      	ldr	r3, [pc, #32]	@ (8010f18 <processHalfDMAbuffer+0x70>)
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d001      	beq.n	8010f04 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8010f00:	f000 f826 	bl	8010f50 <calculateSPLQ31>
    }
}
 8010f04:	46c0      	nop			@ (mov r8, r8)
 8010f06:	46bd      	mov	sp, r7
 8010f08:	b002      	add	sp, #8
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	20001008 	.word	0x20001008
 8010f10:	20001808 	.word	0x20001808
 8010f14:	20000fc8 	.word	0x20000fc8
 8010f18:	20000fc3 	.word	0x20000fc3

08010f1c <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010f24:	4b07      	ldr	r3, [pc, #28]	@ (8010f44 <HAL_I2S_ErrorCallback+0x28>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	687a      	ldr	r2, [r7, #4]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d106      	bne.n	8010f3c <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8010f2e:	4a06      	ldr	r2, [pc, #24]	@ (8010f48 <HAL_I2S_ErrorCallback+0x2c>)
 8010f30:	239e      	movs	r3, #158	@ 0x9e
 8010f32:	0059      	lsls	r1, r3, #1
 8010f34:	4b05      	ldr	r3, [pc, #20]	@ (8010f4c <HAL_I2S_ErrorCallback+0x30>)
 8010f36:	0018      	movs	r0, r3
 8010f38:	f002 f96e 	bl	8013218 <errorHandler>
  }
}
 8010f3c:	46c0      	nop			@ (mov r8, r8)
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	b002      	add	sp, #8
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	20001a0c 	.word	0x20001a0c
 8010f48:	0802d130 	.word	0x0802d130
 8010f4c:	0802da44 	.word	0x0802da44

08010f50 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8010f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f52:	b0b3      	sub	sp, #204	@ 0xcc
 8010f54:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8010f56:	4ae2      	ldr	r2, [pc, #904]	@ (80112e0 <calculateSPLQ31+0x390>)
 8010f58:	2338      	movs	r3, #56	@ 0x38
 8010f5a:	2030      	movs	r0, #48	@ 0x30
 8010f5c:	181b      	adds	r3, r3, r0
 8010f5e:	19d9      	adds	r1, r3, r7
 8010f60:	2334      	movs	r3, #52	@ 0x34
 8010f62:	181b      	adds	r3, r3, r0
 8010f64:	19d8      	adds	r0, r3, r7
 8010f66:	2380      	movs	r3, #128	@ 0x80
 8010f68:	f000 fc36 	bl	80117d8 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8010f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	da00      	bge.n	8010f74 <calculateSPLQ31+0x24>
 8010f72:	3301      	adds	r3, #1
 8010f74:	105b      	asrs	r3, r3, #1
 8010f76:	001a      	movs	r2, r3
 8010f78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	da00      	bge.n	8010f80 <calculateSPLQ31+0x30>
 8010f7e:	3301      	adds	r3, #1
 8010f80:	105b      	asrs	r3, r3, #1
 8010f82:	18d3      	adds	r3, r2, r3
 8010f84:	2188      	movs	r1, #136	@ 0x88
 8010f86:	187a      	adds	r2, r7, r1
 8010f88:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8010f8a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010f8c:	187b      	adds	r3, r7, r1
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	1ad3      	subs	r3, r2, r3
 8010f92:	3304      	adds	r3, #4
 8010f94:	2284      	movs	r2, #132	@ 0x84
 8010f96:	18b9      	adds	r1, r7, r2
 8010f98:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8010f9a:	18bb      	adds	r3, r7, r2
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	4ad1      	ldr	r2, [pc, #836]	@ (80112e4 <calculateSPLQ31+0x394>)
 8010fa0:	0019      	movs	r1, r3
 8010fa2:	0010      	movs	r0, r2
 8010fa4:	f000 fc58 	bl	8011858 <getPo2factor>
 8010fa8:	0003      	movs	r3, r0
 8010faa:	2280      	movs	r2, #128	@ 0x80
 8010fac:	18ba      	adds	r2, r7, r2
 8010fae:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	2284      	movs	r2, #132	@ 0x84
 8010fb4:	2130      	movs	r1, #48	@ 0x30
 8010fb6:	1852      	adds	r2, r2, r1
 8010fb8:	19d2      	adds	r2, r2, r7
 8010fba:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	2280      	movs	r2, #128	@ 0x80
 8010fc0:	1852      	adds	r2, r2, r1
 8010fc2:	19d2      	adds	r2, r2, r7
 8010fc4:	6013      	str	r3, [r2, #0]
 8010fc6:	e032      	b.n	801102e <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8010fc8:	4ac5      	ldr	r2, [pc, #788]	@ (80112e0 <calculateSPLQ31+0x390>)
 8010fca:	2680      	movs	r6, #128	@ 0x80
 8010fcc:	2330      	movs	r3, #48	@ 0x30
 8010fce:	18f1      	adds	r1, r6, r3
 8010fd0:	19cb      	adds	r3, r1, r7
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	589a      	ldr	r2, [r3, r2]
 8010fd8:	2188      	movs	r1, #136	@ 0x88
 8010fda:	1879      	adds	r1, r7, r1
 8010fdc:	680b      	ldr	r3, [r1, #0]
 8010fde:	1ad2      	subs	r2, r2, r3
 8010fe0:	2180      	movs	r1, #128	@ 0x80
 8010fe2:	1879      	adds	r1, r7, r1
 8010fe4:	680b      	ldr	r3, [r1, #0]
 8010fe6:	409a      	lsls	r2, r3
 8010fe8:	0011      	movs	r1, r2
 8010fea:	4abf      	ldr	r2, [pc, #764]	@ (80112e8 <calculateSPLQ31+0x398>)
 8010fec:	2084      	movs	r0, #132	@ 0x84
 8010fee:	2330      	movs	r3, #48	@ 0x30
 8010ff0:	18c3      	adds	r3, r0, r3
 8010ff2:	19db      	adds	r3, r3, r7
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	009b      	lsls	r3, r3, #2
 8010ff8:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8010ffa:	2230      	movs	r2, #48	@ 0x30
 8010ffc:	1883      	adds	r3, r0, r2
 8010ffe:	19db      	adds	r3, r3, r7
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	3301      	adds	r3, #1
 8011004:	49b8      	ldr	r1, [pc, #736]	@ (80112e8 <calculateSPLQ31+0x398>)
 8011006:	009a      	lsls	r2, r3, #2
 8011008:	2300      	movs	r3, #0
 801100a:	5053      	str	r3, [r2, r1]
        count += 2;
 801100c:	2230      	movs	r2, #48	@ 0x30
 801100e:	1883      	adds	r3, r0, r2
 8011010:	19db      	adds	r3, r3, r7
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	3302      	adds	r3, #2
 8011016:	0011      	movs	r1, r2
 8011018:	1882      	adds	r2, r0, r2
 801101a:	19d2      	adds	r2, r2, r7
 801101c:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 801101e:	000a      	movs	r2, r1
 8011020:	18b3      	adds	r3, r6, r2
 8011022:	19db      	adds	r3, r3, r7
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	3301      	adds	r3, #1
 8011028:	18b2      	adds	r2, r6, r2
 801102a:	19d2      	adds	r2, r2, r7
 801102c:	6013      	str	r3, [r2, #0]
 801102e:	2380      	movs	r3, #128	@ 0x80
 8011030:	2630      	movs	r6, #48	@ 0x30
 8011032:	199b      	adds	r3, r3, r6
 8011034:	19db      	adds	r3, r3, r7
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	2b7f      	cmp	r3, #127	@ 0x7f
 801103a:	d9c5      	bls.n	8010fc8 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 801103c:	4bab      	ldr	r3, [pc, #684]	@ (80112ec <calculateSPLQ31+0x39c>)
 801103e:	6818      	ldr	r0, [r3, #0]
 8011040:	49a9      	ldr	r1, [pc, #676]	@ (80112e8 <calculateSPLQ31+0x398>)
 8011042:	2301      	movs	r3, #1
 8011044:	2200      	movs	r2, #0
 8011046:	f011 ff07 	bl	8022e58 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 801104a:	4aa9      	ldr	r2, [pc, #676]	@ (80112f0 <calculateSPLQ31+0x3a0>)
 801104c:	2338      	movs	r3, #56	@ 0x38
 801104e:	199b      	adds	r3, r3, r6
 8011050:	19d9      	adds	r1, r3, r7
 8011052:	2334      	movs	r3, #52	@ 0x34
 8011054:	199b      	adds	r3, r3, r6
 8011056:	19d8      	adds	r0, r3, r7
 8011058:	237e      	movs	r3, #126	@ 0x7e
 801105a:	f000 fbbd 	bl	80117d8 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 801105e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011060:	2380      	movs	r3, #128	@ 0x80
 8011062:	061b      	lsls	r3, r3, #24
 8011064:	429a      	cmp	r2, r3
 8011066:	d101      	bne.n	801106c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011068:	4b9e      	ldr	r3, [pc, #632]	@ (80112e4 <calculateSPLQ31+0x394>)
 801106a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 801106c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801106e:	2380      	movs	r3, #128	@ 0x80
 8011070:	061b      	lsls	r3, r3, #24
 8011072:	429a      	cmp	r2, r3
 8011074:	d101      	bne.n	801107a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8011076:	4b9b      	ldr	r3, [pc, #620]	@ (80112e4 <calculateSPLQ31+0x394>)
 8011078:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 801107a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801107c:	17da      	asrs	r2, r3, #31
 801107e:	189b      	adds	r3, r3, r2
 8011080:	4053      	eors	r3, r2
 8011082:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8011084:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011086:	17da      	asrs	r2, r3, #31
 8011088:	189b      	adds	r3, r3, r2
 801108a:	4053      	eors	r3, r2
 801108c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 801108e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011092:	429a      	cmp	r2, r3
 8011094:	dd01      	ble.n	801109a <calculateSPLQ31+0x14a>
    {
        max = min;
 8011096:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011098:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 801109a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801109c:	3304      	adds	r3, #4
 801109e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 80110a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80110a2:	4a90      	ldr	r2, [pc, #576]	@ (80112e4 <calculateSPLQ31+0x394>)
 80110a4:	0019      	movs	r1, r3
 80110a6:	0010      	movs	r0, r2
 80110a8:	f000 fbd6 	bl	8011858 <getPo2factor>
 80110ac:	0003      	movs	r3, r0
 80110ae:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 80110b0:	2302      	movs	r3, #2
 80110b2:	22ac      	movs	r2, #172	@ 0xac
 80110b4:	18ba      	adds	r2, r7, r2
 80110b6:	6013      	str	r3, [r2, #0]
 80110b8:	e012      	b.n	80110e0 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 80110ba:	4a8b      	ldr	r2, [pc, #556]	@ (80112e8 <calculateSPLQ31+0x398>)
 80110bc:	20ac      	movs	r0, #172	@ 0xac
 80110be:	183b      	adds	r3, r7, r0
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	589a      	ldr	r2, [r3, r2]
 80110c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80110c8:	409a      	lsls	r2, r3
 80110ca:	0011      	movs	r1, r2
 80110cc:	4a86      	ldr	r2, [pc, #536]	@ (80112e8 <calculateSPLQ31+0x398>)
 80110ce:	183b      	adds	r3, r7, r0
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 80110d6:	183b      	adds	r3, r7, r0
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	3301      	adds	r3, #1
 80110dc:	183a      	adds	r2, r7, r0
 80110de:	6013      	str	r3, [r2, #0]
 80110e0:	23ac      	movs	r3, #172	@ 0xac
 80110e2:	18fb      	adds	r3, r7, r3
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80110e8:	d9e7      	bls.n	80110ba <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 80110ea:	4b7d      	ldr	r3, [pc, #500]	@ (80112e0 <calculateSPLQ31+0x390>)
 80110ec:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 80110ee:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80110f0:	4b7d      	ldr	r3, [pc, #500]	@ (80112e8 <calculateSPLQ31+0x398>)
 80110f2:	2240      	movs	r2, #64	@ 0x40
 80110f4:	0018      	movs	r0, r3
 80110f6:	f012 fc59 	bl	80239ac <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 80110fa:	2330      	movs	r3, #48	@ 0x30
 80110fc:	18fb      	adds	r3, r7, r3
 80110fe:	0018      	movs	r0, r3
 8011100:	2330      	movs	r3, #48	@ 0x30
 8011102:	001a      	movs	r2, r3
 8011104:	2100      	movs	r1, #0
 8011106:	f014 faa5 	bl	8025654 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 801110a:	2200      	movs	r2, #0
 801110c:	2300      	movs	r3, #0
 801110e:	21a0      	movs	r1, #160	@ 0xa0
 8011110:	1879      	adds	r1, r7, r1
 8011112:	600a      	str	r2, [r1, #0]
 8011114:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011116:	2301      	movs	r3, #1
 8011118:	229c      	movs	r2, #156	@ 0x9c
 801111a:	18ba      	adds	r2, r7, r2
 801111c:	6013      	str	r3, [r2, #0]
 801111e:	e05b      	b.n	80111d8 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011120:	269c      	movs	r6, #156	@ 0x9c
 8011122:	19bb      	adds	r3, r7, r6
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	009a      	lsls	r2, r3, #2
 8011128:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801112a:	189b      	adds	r3, r3, r2
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	613b      	str	r3, [r7, #16]
 8011130:	17db      	asrs	r3, r3, #31
 8011132:	617b      	str	r3, [r7, #20]
 8011134:	4b6f      	ldr	r3, [pc, #444]	@ (80112f4 <calculateSPLQ31+0x3a4>)
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	19bb      	adds	r3, r7, r6
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	005b      	lsls	r3, r3, #1
 801113e:	18d3      	adds	r3, r2, r3
 8011140:	881b      	ldrh	r3, [r3, #0]
 8011142:	60bb      	str	r3, [r7, #8]
 8011144:	2300      	movs	r3, #0
 8011146:	60fb      	str	r3, [r7, #12]
 8011148:	68ba      	ldr	r2, [r7, #8]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	6938      	ldr	r0, [r7, #16]
 801114e:	6979      	ldr	r1, [r7, #20]
 8011150:	f7ef fa36 	bl	80005c0 <__aeabi_lmul>
 8011154:	0002      	movs	r2, r0
 8011156:	000b      	movs	r3, r1
 8011158:	0010      	movs	r0, r2
 801115a:	0019      	movs	r1, r3
 801115c:	23a0      	movs	r3, #160	@ 0xa0
 801115e:	18fa      	adds	r2, r7, r3
 8011160:	6853      	ldr	r3, [r2, #4]
 8011162:	6812      	ldr	r2, [r2, #0]
 8011164:	1812      	adds	r2, r2, r0
 8011166:	414b      	adcs	r3, r1
 8011168:	21a0      	movs	r1, #160	@ 0xa0
 801116a:	1879      	adds	r1, r7, r1
 801116c:	600a      	str	r2, [r1, #0]
 801116e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8011170:	4b61      	ldr	r3, [pc, #388]	@ (80112f8 <calculateSPLQ31+0x3a8>)
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	19bb      	adds	r3, r7, r6
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	18d3      	adds	r3, r2, r3
 801117a:	781b      	ldrb	r3, [r3, #0]
 801117c:	2b06      	cmp	r3, #6
 801117e:	d025      	beq.n	80111cc <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8011180:	4b5d      	ldr	r3, [pc, #372]	@ (80112f8 <calculateSPLQ31+0x3a8>)
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	19bb      	adds	r3, r7, r6
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	18d3      	adds	r3, r2, r3
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	2230      	movs	r2, #48	@ 0x30
 801118e:	18ba      	adds	r2, r7, r2
 8011190:	00db      	lsls	r3, r3, #3
 8011192:	18d3      	adds	r3, r2, r3
 8011194:	6818      	ldr	r0, [r3, #0]
 8011196:	6859      	ldr	r1, [r3, #4]
 8011198:	19bb      	adds	r3, r7, r6
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	009a      	lsls	r2, r3, #2
 801119e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80111a0:	189b      	adds	r3, r3, r2
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	603b      	str	r3, [r7, #0]
 80111a6:	17db      	asrs	r3, r3, #31
 80111a8:	607b      	str	r3, [r7, #4]
 80111aa:	4b53      	ldr	r3, [pc, #332]	@ (80112f8 <calculateSPLQ31+0x3a8>)
 80111ac:	681a      	ldr	r2, [r3, #0]
 80111ae:	19be      	adds	r6, r7, r6
 80111b0:	6833      	ldr	r3, [r6, #0]
 80111b2:	18d3      	adds	r3, r2, r3
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	001e      	movs	r6, r3
 80111b8:	683a      	ldr	r2, [r7, #0]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	1880      	adds	r0, r0, r2
 80111be:	4159      	adcs	r1, r3
 80111c0:	2330      	movs	r3, #48	@ 0x30
 80111c2:	18fa      	adds	r2, r7, r3
 80111c4:	00f3      	lsls	r3, r6, #3
 80111c6:	18d3      	adds	r3, r2, r3
 80111c8:	6018      	str	r0, [r3, #0]
 80111ca:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 80111cc:	229c      	movs	r2, #156	@ 0x9c
 80111ce:	18bb      	adds	r3, r7, r2
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	3301      	adds	r3, #1
 80111d4:	18ba      	adds	r2, r7, r2
 80111d6:	6013      	str	r3, [r2, #0]
 80111d8:	239c      	movs	r3, #156	@ 0x9c
 80111da:	18fb      	adds	r3, r7, r3
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	2b3f      	cmp	r3, #63	@ 0x3f
 80111e0:	d99e      	bls.n	8011120 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 80111e2:	2380      	movs	r3, #128	@ 0x80
 80111e4:	18fb      	adds	r3, r7, r3
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	005b      	lsls	r3, r3, #1
 80111ea:	001a      	movs	r2, r3
 80111ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80111ee:	005b      	lsls	r3, r3, #1
 80111f0:	18d3      	adds	r3, r2, r3
 80111f2:	3b22      	subs	r3, #34	@ 0x22
 80111f4:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 80111f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80111f8:	17da      	asrs	r2, r3, #31
 80111fa:	189b      	adds	r3, r3, r2
 80111fc:	4053      	eors	r3, r2
 80111fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8011200:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011202:	2b00      	cmp	r3, #0
 8011204:	da62      	bge.n	80112cc <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8011206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011208:	3b20      	subs	r3, #32
 801120a:	2b00      	cmp	r3, #0
 801120c:	db05      	blt.n	801121a <calculateSPLQ31+0x2ca>
 801120e:	22a0      	movs	r2, #160	@ 0xa0
 8011210:	18ba      	adds	r2, r7, r2
 8011212:	6812      	ldr	r2, [r2, #0]
 8011214:	409a      	lsls	r2, r3
 8011216:	627a      	str	r2, [r7, #36]	@ 0x24
 8011218:	e010      	b.n	801123c <calculateSPLQ31+0x2ec>
 801121a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801121c:	2220      	movs	r2, #32
 801121e:	1ad3      	subs	r3, r2, r3
 8011220:	22a0      	movs	r2, #160	@ 0xa0
 8011222:	18ba      	adds	r2, r7, r2
 8011224:	6812      	ldr	r2, [r2, #0]
 8011226:	40da      	lsrs	r2, r3
 8011228:	0013      	movs	r3, r2
 801122a:	22a4      	movs	r2, #164	@ 0xa4
 801122c:	18ba      	adds	r2, r7, r2
 801122e:	6811      	ldr	r1, [r2, #0]
 8011230:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011232:	4091      	lsls	r1, r2
 8011234:	6279      	str	r1, [r7, #36]	@ 0x24
 8011236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011238:	431a      	orrs	r2, r3
 801123a:	627a      	str	r2, [r7, #36]	@ 0x24
 801123c:	21a0      	movs	r1, #160	@ 0xa0
 801123e:	187b      	adds	r3, r7, r1
 8011240:	681a      	ldr	r2, [r3, #0]
 8011242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011244:	409a      	lsls	r2, r3
 8011246:	623a      	str	r2, [r7, #32]
 8011248:	6a3b      	ldr	r3, [r7, #32]
 801124a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 801124c:	187a      	adds	r2, r7, r1
 801124e:	6013      	str	r3, [r2, #0]
 8011250:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011252:	2300      	movs	r3, #0
 8011254:	2298      	movs	r2, #152	@ 0x98
 8011256:	18ba      	adds	r2, r7, r2
 8011258:	6013      	str	r3, [r2, #0]
 801125a:	e031      	b.n	80112c0 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 801125c:	2330      	movs	r3, #48	@ 0x30
 801125e:	18fa      	adds	r2, r7, r3
 8011260:	2398      	movs	r3, #152	@ 0x98
 8011262:	18fb      	adds	r3, r7, r3
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	00db      	lsls	r3, r3, #3
 8011268:	18d3      	adds	r3, r2, r3
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011270:	3920      	subs	r1, #32
 8011272:	2900      	cmp	r1, #0
 8011274:	db03      	blt.n	801127e <calculateSPLQ31+0x32e>
 8011276:	0010      	movs	r0, r2
 8011278:	4088      	lsls	r0, r1
 801127a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801127c:	e00c      	b.n	8011298 <calculateSPLQ31+0x348>
 801127e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011280:	2020      	movs	r0, #32
 8011282:	1a41      	subs	r1, r0, r1
 8011284:	0010      	movs	r0, r2
 8011286:	40c8      	lsrs	r0, r1
 8011288:	0001      	movs	r1, r0
 801128a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801128c:	001c      	movs	r4, r3
 801128e:	4084      	lsls	r4, r0
 8011290:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8011292:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011294:	4308      	orrs	r0, r1
 8011296:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011298:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801129a:	0013      	movs	r3, r2
 801129c:	408b      	lsls	r3, r1
 801129e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80112a0:	2330      	movs	r3, #48	@ 0x30
 80112a2:	18fa      	adds	r2, r7, r3
 80112a4:	2098      	movs	r0, #152	@ 0x98
 80112a6:	183b      	adds	r3, r7, r0
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	00db      	lsls	r3, r3, #3
 80112ac:	18d3      	adds	r3, r2, r3
 80112ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80112b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112b2:	6019      	str	r1, [r3, #0]
 80112b4:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80112b6:	183b      	adds	r3, r7, r0
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	3301      	adds	r3, #1
 80112bc:	183a      	adds	r2, r7, r0
 80112be:	6013      	str	r3, [r2, #0]
 80112c0:	2398      	movs	r3, #152	@ 0x98
 80112c2:	18fb      	adds	r3, r7, r3
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2b05      	cmp	r3, #5
 80112c8:	d9c8      	bls.n	801125c <calculateSPLQ31+0x30c>
 80112ca:	e06b      	b.n	80113a4 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 80112cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112ce:	3b20      	subs	r3, #32
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	db13      	blt.n	80112fc <calculateSPLQ31+0x3ac>
 80112d4:	22a4      	movs	r2, #164	@ 0xa4
 80112d6:	18ba      	adds	r2, r7, r2
 80112d8:	6812      	ldr	r2, [r2, #0]
 80112da:	40da      	lsrs	r2, r3
 80112dc:	61ba      	str	r2, [r7, #24]
 80112de:	e01e      	b.n	801131e <calculateSPLQ31+0x3ce>
 80112e0:	20001808 	.word	0x20001808
 80112e4:	7fffffff 	.word	0x7fffffff
 80112e8:	20001a54 	.word	0x20001a54
 80112ec:	200000c8 	.word	0x200000c8
 80112f0:	20001a5c 	.word	0x20001a5c
 80112f4:	200000cc 	.word	0x200000cc
 80112f8:	200000d8 	.word	0x200000d8
 80112fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112fe:	2220      	movs	r2, #32
 8011300:	1ad3      	subs	r3, r2, r3
 8011302:	22a4      	movs	r2, #164	@ 0xa4
 8011304:	18ba      	adds	r2, r7, r2
 8011306:	6812      	ldr	r2, [r2, #0]
 8011308:	409a      	lsls	r2, r3
 801130a:	0013      	movs	r3, r2
 801130c:	22a0      	movs	r2, #160	@ 0xa0
 801130e:	18ba      	adds	r2, r7, r2
 8011310:	6811      	ldr	r1, [r2, #0]
 8011312:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011314:	40d1      	lsrs	r1, r2
 8011316:	61b9      	str	r1, [r7, #24]
 8011318:	69ba      	ldr	r2, [r7, #24]
 801131a:	431a      	orrs	r2, r3
 801131c:	61ba      	str	r2, [r7, #24]
 801131e:	23a4      	movs	r3, #164	@ 0xa4
 8011320:	18fb      	adds	r3, r7, r3
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011326:	40da      	lsrs	r2, r3
 8011328:	61fa      	str	r2, [r7, #28]
 801132a:	69ba      	ldr	r2, [r7, #24]
 801132c:	69fb      	ldr	r3, [r7, #28]
 801132e:	21a0      	movs	r1, #160	@ 0xa0
 8011330:	1879      	adds	r1, r7, r1
 8011332:	600a      	str	r2, [r1, #0]
 8011334:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011336:	2300      	movs	r3, #0
 8011338:	2294      	movs	r2, #148	@ 0x94
 801133a:	18ba      	adds	r2, r7, r2
 801133c:	6013      	str	r3, [r2, #0]
 801133e:	e02c      	b.n	801139a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 8011340:	2330      	movs	r3, #48	@ 0x30
 8011342:	18fa      	adds	r2, r7, r3
 8011344:	2394      	movs	r3, #148	@ 0x94
 8011346:	18fb      	adds	r3, r7, r3
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	00db      	lsls	r3, r3, #3
 801134c:	18d3      	adds	r3, r2, r3
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011354:	3920      	subs	r1, #32
 8011356:	2900      	cmp	r1, #0
 8011358:	db03      	blt.n	8011362 <calculateSPLQ31+0x412>
 801135a:	0018      	movs	r0, r3
 801135c:	40c8      	lsrs	r0, r1
 801135e:	0004      	movs	r4, r0
 8011360:	e00a      	b.n	8011378 <calculateSPLQ31+0x428>
 8011362:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011364:	2020      	movs	r0, #32
 8011366:	1a41      	subs	r1, r0, r1
 8011368:	0018      	movs	r0, r3
 801136a:	4088      	lsls	r0, r1
 801136c:	0001      	movs	r1, r0
 801136e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011370:	0016      	movs	r6, r2
 8011372:	40c6      	lsrs	r6, r0
 8011374:	0034      	movs	r4, r6
 8011376:	430c      	orrs	r4, r1
 8011378:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801137a:	40cb      	lsrs	r3, r1
 801137c:	001d      	movs	r5, r3
 801137e:	2330      	movs	r3, #48	@ 0x30
 8011380:	18fa      	adds	r2, r7, r3
 8011382:	2194      	movs	r1, #148	@ 0x94
 8011384:	187b      	adds	r3, r7, r1
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	00db      	lsls	r3, r3, #3
 801138a:	18d3      	adds	r3, r2, r3
 801138c:	601c      	str	r4, [r3, #0]
 801138e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011390:	187b      	adds	r3, r7, r1
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	3301      	adds	r3, #1
 8011396:	187a      	adds	r2, r7, r1
 8011398:	6013      	str	r3, [r2, #0]
 801139a:	2394      	movs	r3, #148	@ 0x94
 801139c:	18fb      	adds	r3, r7, r3
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	2b05      	cmp	r3, #5
 80113a2:	d9cd      	bls.n	8011340 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 80113a4:	230f      	movs	r3, #15
 80113a6:	425d      	negs	r5, r3
 80113a8:	2305      	movs	r3, #5
 80113aa:	425e      	negs	r6, r3
 80113ac:	4b4a      	ldr	r3, [pc, #296]	@ (80114d8 <calculateSPLQ31+0x588>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	4b4a      	ldr	r3, [pc, #296]	@ (80114dc <calculateSPLQ31+0x58c>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	21a0      	movs	r1, #160	@ 0xa0
 80113ba:	1879      	adds	r1, r7, r1
 80113bc:	6808      	ldr	r0, [r1, #0]
 80113be:	6849      	ldr	r1, [r1, #4]
 80113c0:	4c47      	ldr	r4, [pc, #284]	@ (80114e0 <calculateSPLQ31+0x590>)
 80113c2:	9403      	str	r4, [sp, #12]
 80113c4:	4c47      	ldr	r4, [pc, #284]	@ (80114e4 <calculateSPLQ31+0x594>)
 80113c6:	9402      	str	r4, [sp, #8]
 80113c8:	9301      	str	r3, [sp, #4]
 80113ca:	9200      	str	r2, [sp, #0]
 80113cc:	0033      	movs	r3, r6
 80113ce:	002a      	movs	r2, r5
 80113d0:	f000 fa86 	bl	80118e0 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80113d4:	2300      	movs	r3, #0
 80113d6:	2290      	movs	r2, #144	@ 0x90
 80113d8:	18ba      	adds	r2, r7, r2
 80113da:	6013      	str	r3, [r2, #0]
 80113dc:	e026      	b.n	801142c <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 80113de:	2330      	movs	r3, #48	@ 0x30
 80113e0:	18fa      	adds	r2, r7, r3
 80113e2:	2490      	movs	r4, #144	@ 0x90
 80113e4:	193b      	adds	r3, r7, r4
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	00db      	lsls	r3, r3, #3
 80113ea:	18d3      	adds	r3, r2, r3
 80113ec:	6818      	ldr	r0, [r3, #0]
 80113ee:	6859      	ldr	r1, [r3, #4]
 80113f0:	230f      	movs	r3, #15
 80113f2:	425d      	negs	r5, r3
 80113f4:	2305      	movs	r3, #5
 80113f6:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 80113f8:	193b      	adds	r3, r7, r4
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	009a      	lsls	r2, r3, #2
 80113fe:	4b3a      	ldr	r3, [pc, #232]	@ (80114e8 <calculateSPLQ31+0x598>)
 8011400:	18d3      	adds	r3, r2, r3
 8011402:	193a      	adds	r2, r7, r4
 8011404:	6812      	ldr	r2, [r2, #0]
 8011406:	0094      	lsls	r4, r2, #2
 8011408:	4a38      	ldr	r2, [pc, #224]	@ (80114ec <calculateSPLQ31+0x59c>)
 801140a:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801140c:	9203      	str	r2, [sp, #12]
 801140e:	9302      	str	r3, [sp, #8]
 8011410:	2300      	movs	r3, #0
 8011412:	9301      	str	r3, [sp, #4]
 8011414:	2300      	movs	r3, #0
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	0033      	movs	r3, r6
 801141a:	002a      	movs	r2, r5
 801141c:	f000 fa60 	bl	80118e0 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011420:	2490      	movs	r4, #144	@ 0x90
 8011422:	193b      	adds	r3, r7, r4
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	3301      	adds	r3, #1
 8011428:	193a      	adds	r2, r7, r4
 801142a:	6013      	str	r3, [r2, #0]
 801142c:	2390      	movs	r3, #144	@ 0x90
 801142e:	18fb      	adds	r3, r7, r3
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	2b05      	cmp	r3, #5
 8011434:	d9d3      	bls.n	80113de <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 8011436:	4b2b      	ldr	r3, [pc, #172]	@ (80114e4 <calculateSPLQ31+0x594>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	4b2d      	ldr	r3, [pc, #180]	@ (80114f0 <calculateSPLQ31+0x5a0>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	18d2      	adds	r2, r2, r3
 8011440:	4b2b      	ldr	r3, [pc, #172]	@ (80114f0 <calculateSPLQ31+0x5a0>)
 8011442:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 8011444:	4b26      	ldr	r3, [pc, #152]	@ (80114e0 <calculateSPLQ31+0x590>)
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	4b2a      	ldr	r3, [pc, #168]	@ (80114f4 <calculateSPLQ31+0x5a4>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	18d2      	adds	r2, r2, r3
 801144e:	4b29      	ldr	r3, [pc, #164]	@ (80114f4 <calculateSPLQ31+0x5a4>)
 8011450:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011452:	2300      	movs	r3, #0
 8011454:	228c      	movs	r2, #140	@ 0x8c
 8011456:	18ba      	adds	r2, r7, r2
 8011458:	6013      	str	r3, [r2, #0]
 801145a:	e025      	b.n	80114a8 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 801145c:	4b22      	ldr	r3, [pc, #136]	@ (80114e8 <calculateSPLQ31+0x598>)
 801145e:	208c      	movs	r0, #140	@ 0x8c
 8011460:	183a      	adds	r2, r7, r0
 8011462:	6812      	ldr	r2, [r2, #0]
 8011464:	0092      	lsls	r2, r2, #2
 8011466:	58d2      	ldr	r2, [r2, r3]
 8011468:	4b23      	ldr	r3, [pc, #140]	@ (80114f8 <calculateSPLQ31+0x5a8>)
 801146a:	1839      	adds	r1, r7, r0
 801146c:	6809      	ldr	r1, [r1, #0]
 801146e:	0089      	lsls	r1, r1, #2
 8011470:	58cb      	ldr	r3, [r1, r3]
 8011472:	18d1      	adds	r1, r2, r3
 8011474:	4b20      	ldr	r3, [pc, #128]	@ (80114f8 <calculateSPLQ31+0x5a8>)
 8011476:	183a      	adds	r2, r7, r0
 8011478:	6812      	ldr	r2, [r2, #0]
 801147a:	0092      	lsls	r2, r2, #2
 801147c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 801147e:	4b1b      	ldr	r3, [pc, #108]	@ (80114ec <calculateSPLQ31+0x59c>)
 8011480:	183a      	adds	r2, r7, r0
 8011482:	6812      	ldr	r2, [r2, #0]
 8011484:	0092      	lsls	r2, r2, #2
 8011486:	58d2      	ldr	r2, [r2, r3]
 8011488:	4b1c      	ldr	r3, [pc, #112]	@ (80114fc <calculateSPLQ31+0x5ac>)
 801148a:	1839      	adds	r1, r7, r0
 801148c:	6809      	ldr	r1, [r1, #0]
 801148e:	0089      	lsls	r1, r1, #2
 8011490:	58cb      	ldr	r3, [r1, r3]
 8011492:	18d1      	adds	r1, r2, r3
 8011494:	4b19      	ldr	r3, [pc, #100]	@ (80114fc <calculateSPLQ31+0x5ac>)
 8011496:	183a      	adds	r2, r7, r0
 8011498:	6812      	ldr	r2, [r2, #0]
 801149a:	0092      	lsls	r2, r2, #2
 801149c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801149e:	183b      	adds	r3, r7, r0
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	3301      	adds	r3, #1
 80114a4:	183a      	adds	r2, r7, r0
 80114a6:	6013      	str	r3, [r2, #0]
 80114a8:	238c      	movs	r3, #140	@ 0x8c
 80114aa:	18fb      	adds	r3, r7, r3
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b05      	cmp	r3, #5
 80114b0:	d9d4      	bls.n	801145c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 80114b2:	4b13      	ldr	r3, [pc, #76]	@ (8011500 <calculateSPLQ31+0x5b0>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	1c5a      	adds	r2, r3, #1
 80114b8:	4b11      	ldr	r3, [pc, #68]	@ (8011500 <calculateSPLQ31+0x5b0>)
 80114ba:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 80114bc:	4b10      	ldr	r3, [pc, #64]	@ (8011500 <calculateSPLQ31+0x5b0>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2b0f      	cmp	r3, #15
 80114c2:	d905      	bls.n	80114d0 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 80114c4:	4b0f      	ldr	r3, [pc, #60]	@ (8011504 <calculateSPLQ31+0x5b4>)
 80114c6:	2201      	movs	r2, #1
 80114c8:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 80114ca:	4b0f      	ldr	r3, [pc, #60]	@ (8011508 <calculateSPLQ31+0x5b8>)
 80114cc:	2200      	movs	r2, #0
 80114ce:	701a      	strb	r2, [r3, #0]
    }
}
 80114d0:	46c0      	nop			@ (mov r8, r8)
 80114d2:	46bd      	mov	sp, r7
 80114d4:	b02f      	add	sp, #188	@ 0xbc
 80114d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114d8:	200000d0 	.word	0x200000d0
 80114dc:	200000d4 	.word	0x200000d4
 80114e0:	20000fd4 	.word	0x20000fd4
 80114e4:	20000fd0 	.word	0x20000fd0
 80114e8:	20000fd8 	.word	0x20000fd8
 80114ec:	20000ff0 	.word	0x20000ff0
 80114f0:	20001a18 	.word	0x20001a18
 80114f4:	20001a1c 	.word	0x20001a1c
 80114f8:	20001a20 	.word	0x20001a20
 80114fc:	20001a38 	.word	0x20001a38
 8011500:	20001a50 	.word	0x20001a50
 8011504:	20000fc5 	.word	0x20000fc5
 8011508:	20000fc3 	.word	0x20000fc3

0801150c <resetSPLstate>:

static void resetSPLstate(void)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 8011512:	4b11      	ldr	r3, [pc, #68]	@ (8011558 <resetSPLstate+0x4c>)
 8011514:	2200      	movs	r2, #0
 8011516:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8011518:	4b10      	ldr	r3, [pc, #64]	@ (801155c <resetSPLstate+0x50>)
 801151a:	2200      	movs	r2, #0
 801151c:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 801151e:	4b10      	ldr	r3, [pc, #64]	@ (8011560 <resetSPLstate+0x54>)
 8011520:	2200      	movs	r2, #0
 8011522:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011524:	2300      	movs	r3, #0
 8011526:	607b      	str	r3, [r7, #4]
 8011528:	e00c      	b.n	8011544 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 801152a:	4b0e      	ldr	r3, [pc, #56]	@ (8011564 <resetSPLstate+0x58>)
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	0092      	lsls	r2, r2, #2
 8011530:	2100      	movs	r1, #0
 8011532:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 8011534:	4b0c      	ldr	r3, [pc, #48]	@ (8011568 <resetSPLstate+0x5c>)
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	0092      	lsls	r2, r2, #2
 801153a:	2100      	movs	r1, #0
 801153c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	3301      	adds	r3, #1
 8011542:	607b      	str	r3, [r7, #4]
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2b05      	cmp	r3, #5
 8011548:	d9ef      	bls.n	801152a <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 801154a:	4b08      	ldr	r3, [pc, #32]	@ (801156c <resetSPLstate+0x60>)
 801154c:	2200      	movs	r2, #0
 801154e:	701a      	strb	r2, [r3, #0]
}
 8011550:	46c0      	nop			@ (mov r8, r8)
 8011552:	46bd      	mov	sp, r7
 8011554:	b002      	add	sp, #8
 8011556:	bd80      	pop	{r7, pc}
 8011558:	20001a18 	.word	0x20001a18
 801155c:	20001a1c 	.word	0x20001a1c
 8011560:	20001a50 	.word	0x20001a50
 8011564:	20001a20 	.word	0x20001a20
 8011568:	20001a38 	.word	0x20001a38
 801156c:	20000fc5 	.word	0x20000fc5

08011570 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 8011570:	b5b0      	push	{r4, r5, r7, lr}
 8011572:	b090      	sub	sp, #64	@ 0x40
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	60b9      	str	r1, [r7, #8]
 801157a:	0019      	movs	r1, r3
 801157c:	1dfb      	adds	r3, r7, #7
 801157e:	701a      	strb	r2, [r3, #0]
 8011580:	1dbb      	adds	r3, r7, #6
 8011582:	1c0a      	adds	r2, r1, #0
 8011584:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8011586:	1dfb      	adds	r3, r7, #7
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d005      	beq.n	801159a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 801158e:	4b3b      	ldr	r3, [pc, #236]	@ (801167c <getFilteredMaxAmplitudeQ31+0x10c>)
 8011590:	2200      	movs	r2, #0
 8011592:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8011594:	4b3a      	ldr	r3, [pc, #232]	@ (8011680 <getFilteredMaxAmplitudeQ31+0x110>)
 8011596:	2200      	movs	r2, #0
 8011598:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 801159a:	2300      	movs	r3, #0
 801159c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 801159e:	2300      	movs	r3, #0
 80115a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 80115a2:	2305      	movs	r3, #5
 80115a4:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 80115a6:	2300      	movs	r3, #0
 80115a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80115aa:	e040      	b.n	801162e <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 80115ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	68fa      	ldr	r2, [r7, #12]
 80115b2:	18d3      	adds	r3, r2, r3
 80115b4:	681a      	ldr	r2, [r3, #0]
 80115b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115b8:	409a      	lsls	r2, r3
 80115ba:	0013      	movs	r3, r2
 80115bc:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 80115be:	4b30      	ldr	r3, [pc, #192]	@ (8011680 <getFilteredMaxAmplitudeQ31+0x110>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	425a      	negs	r2, r3
 80115c4:	4b2e      	ldr	r3, [pc, #184]	@ (8011680 <getFilteredMaxAmplitudeQ31+0x110>)
 80115c6:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 80115c8:	2418      	movs	r4, #24
 80115ca:	193a      	adds	r2, r7, r4
 80115cc:	492c      	ldr	r1, [pc, #176]	@ (8011680 <getFilteredMaxAmplitudeQ31+0x110>)
 80115ce:	231c      	movs	r3, #28
 80115d0:	18f8      	adds	r0, r7, r3
 80115d2:	2301      	movs	r3, #1
 80115d4:	f012 fa42 	bl	8023a5c <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 80115d8:	2514      	movs	r5, #20
 80115da:	197a      	adds	r2, r7, r5
 80115dc:	1939      	adds	r1, r7, r4
 80115de:	4829      	ldr	r0, [pc, #164]	@ (8011684 <getFilteredMaxAmplitudeQ31+0x114>)
 80115e0:	2301      	movs	r3, #1
 80115e2:	f012 fa09 	bl	80239f8 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 80115e6:	2410      	movs	r4, #16
 80115e8:	193a      	adds	r2, r7, r4
 80115ea:	4924      	ldr	r1, [pc, #144]	@ (801167c <getFilteredMaxAmplitudeQ31+0x10c>)
 80115ec:	4826      	ldr	r0, [pc, #152]	@ (8011688 <getFilteredMaxAmplitudeQ31+0x118>)
 80115ee:	2301      	movs	r3, #1
 80115f0:	f012 fa02 	bl	80239f8 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 80115f4:	4a21      	ldr	r2, [pc, #132]	@ (801167c <getFilteredMaxAmplitudeQ31+0x10c>)
 80115f6:	1939      	adds	r1, r7, r4
 80115f8:	1978      	adds	r0, r7, r5
 80115fa:	2301      	movs	r3, #1
 80115fc:	f012 fa2e 	bl	8023a5c <arm_add_q31>

        lastData = fx;
 8011600:	69fa      	ldr	r2, [r7, #28]
 8011602:	4b1f      	ldr	r3, [pc, #124]	@ (8011680 <getFilteredMaxAmplitudeQ31+0x110>)
 8011604:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8011606:	4b1d      	ldr	r3, [pc, #116]	@ (801167c <getFilteredMaxAmplitudeQ31+0x10c>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801160c:	429a      	cmp	r2, r3
 801160e:	da03      	bge.n	8011618 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 8011610:	4b1a      	ldr	r3, [pc, #104]	@ (801167c <getFilteredMaxAmplitudeQ31+0x10c>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011616:	e007      	b.n	8011628 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8011618:	4b18      	ldr	r3, [pc, #96]	@ (801167c <getFilteredMaxAmplitudeQ31+0x10c>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801161e:	429a      	cmp	r2, r3
 8011620:	dd02      	ble.n	8011628 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 8011622:	4b16      	ldr	r3, [pc, #88]	@ (801167c <getFilteredMaxAmplitudeQ31+0x10c>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8011628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801162a:	3301      	adds	r3, #1
 801162c:	637b      	str	r3, [r7, #52]	@ 0x34
 801162e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	429a      	cmp	r2, r3
 8011634:	d3ba      	bcc.n	80115ac <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 8011636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011638:	17da      	asrs	r2, r3, #31
 801163a:	189b      	adds	r3, r3, r2
 801163c:	4053      	eors	r3, r2
 801163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 8011640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011642:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 8011644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011648:	4293      	cmp	r3, r2
 801164a:	d200      	bcs.n	801164e <getFilteredMaxAmplitudeQ31+0xde>
 801164c:	0013      	movs	r3, r2
 801164e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 8011650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011654:	40da      	lsrs	r2, r3
 8011656:	0013      	movs	r3, r2
 8011658:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 801165a:	1dbb      	adds	r3, r7, #6
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d007      	beq.n	8011672 <getFilteredMaxAmplitudeQ31+0x102>
 8011662:	4b0a      	ldr	r3, [pc, #40]	@ (801168c <getFilteredMaxAmplitudeQ31+0x11c>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	6a3a      	ldr	r2, [r7, #32]
 8011668:	429a      	cmp	r2, r3
 801166a:	d902      	bls.n	8011672 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 801166c:	4b07      	ldr	r3, [pc, #28]	@ (801168c <getFilteredMaxAmplitudeQ31+0x11c>)
 801166e:	6a3a      	ldr	r2, [r7, #32]
 8011670:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 8011672:	6a3b      	ldr	r3, [r7, #32]
}
 8011674:	0018      	movs	r0, r3
 8011676:	46bd      	mov	sp, r7
 8011678:	b010      	add	sp, #64	@ 0x40
 801167a:	bdb0      	pop	{r4, r5, r7, pc}
 801167c:	20001e54 	.word	0x20001e54
 8011680:	20001e58 	.word	0x20001e58
 8011684:	0802da3c 	.word	0x0802da3c
 8011688:	0802da40 	.word	0x0802da40
 801168c:	20000fcc 	.word	0x20000fcc

08011690 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b086      	sub	sp, #24
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 801169c:	4913      	ldr	r1, [pc, #76]	@ (80116ec <floatToIntAndFrac2dp+0x5c>)
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f7ef fcce 	bl	8001040 <__aeabi_fmul>
 80116a4:	1c03      	adds	r3, r0, #0
 80116a6:	1c18      	adds	r0, r3, #0
 80116a8:	f016 fed2 	bl	8028450 <roundf>
 80116ac:	1c03      	adds	r3, r0, #0
 80116ae:	1c18      	adds	r0, r3, #0
 80116b0:	f7ee ffb4 	bl	800061c <__aeabi_f2uiz>
 80116b4:	0003      	movs	r3, r0
 80116b6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	2164      	movs	r1, #100	@ 0x64
 80116bc:	0018      	movs	r0, r3
 80116be:	f7ee fd71 	bl	80001a4 <__udivsi3>
 80116c2:	0003      	movs	r3, r0
 80116c4:	001a      	movs	r2, r3
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	b2da      	uxtb	r2, r3
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	2164      	movs	r1, #100	@ 0x64
 80116d6:	434b      	muls	r3, r1
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	b2da      	uxtb	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	701a      	strb	r2, [r3, #0]
}
 80116e2:	46c0      	nop			@ (mov r8, r8)
 80116e4:	46bd      	mov	sp, r7
 80116e6:	b006      	add	sp, #24
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	46c0      	nop			@ (mov r8, r8)
 80116ec:	42c80000 	.word	0x42c80000

080116f0 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b086      	sub	sp, #24
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 80116fc:	4914      	ldr	r1, [pc, #80]	@ (8011750 <floatToIntAndFrac1dp+0x60>)
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f7ef fc9e 	bl	8001040 <__aeabi_fmul>
 8011704:	1c03      	adds	r3, r0, #0
 8011706:	1c18      	adds	r0, r3, #0
 8011708:	f016 fea2 	bl	8028450 <roundf>
 801170c:	1c03      	adds	r3, r0, #0
 801170e:	1c18      	adds	r0, r3, #0
 8011710:	f7ee ff84 	bl	800061c <__aeabi_f2uiz>
 8011714:	0003      	movs	r3, r0
 8011716:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	210a      	movs	r1, #10
 801171c:	0018      	movs	r0, r3
 801171e:	f7ee fd41 	bl	80001a4 <__udivsi3>
 8011722:	0003      	movs	r3, r0
 8011724:	001a      	movs	r2, r3
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 801172a:	697b      	ldr	r3, [r7, #20]
 801172c:	b2da      	uxtb	r2, r3
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	b2db      	uxtb	r3, r3
 8011734:	1c19      	adds	r1, r3, #0
 8011736:	0089      	lsls	r1, r1, #2
 8011738:	18cb      	adds	r3, r1, r3
 801173a:	18db      	adds	r3, r3, r3
 801173c:	b2db      	uxtb	r3, r3
 801173e:	1ad3      	subs	r3, r2, r3
 8011740:	b2da      	uxtb	r2, r3
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	701a      	strb	r2, [r3, #0]
}
 8011746:	46c0      	nop			@ (mov r8, r8)
 8011748:	46bd      	mov	sp, r7
 801174a:	b006      	add	sp, #24
 801174c:	bd80      	pop	{r7, pc}
 801174e:	46c0      	nop			@ (mov r8, r8)
 8011750:	41200000 	.word	0x41200000

08011754 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 8011754:	b590      	push	{r4, r7, lr}
 8011756:	b087      	sub	sp, #28
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	607a      	str	r2, [r7, #4]
 8011760:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f7f0 f860 	bl	8001828 <__aeabi_i2f>
 8011768:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 801176a:	6838      	ldr	r0, [r7, #0]
 801176c:	f7f0 f85c 	bl	8001828 <__aeabi_i2f>
 8011770:	1c03      	adds	r3, r0, #0
 8011772:	4918      	ldr	r1, [pc, #96]	@ (80117d4 <sumToIntAverage+0x80>)
 8011774:	1c18      	adds	r0, r3, #0
 8011776:	f7ef fa95 	bl	8000ca4 <__aeabi_fdiv>
 801177a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 801177c:	1c19      	adds	r1, r3, #0
 801177e:	1c20      	adds	r0, r4, #0
 8011780:	f7ef f89e 	bl	80008c0 <__aeabi_fadd>
 8011784:	1c03      	adds	r3, r0, #0
 8011786:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8011788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801178a:	f7f0 f89d 	bl	80018c8 <__aeabi_ui2f>
 801178e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8011790:	1c19      	adds	r1, r3, #0
 8011792:	1c20      	adds	r0, r4, #0
 8011794:	f7ef fa86 	bl	8000ca4 <__aeabi_fdiv>
 8011798:	1c03      	adds	r3, r0, #0
 801179a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 801179c:	2300      	movs	r3, #0
 801179e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 80117a0:	68ba      	ldr	r2, [r7, #8]
 80117a2:	2310      	movs	r3, #16
 80117a4:	18f9      	adds	r1, r7, r3
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	1c18      	adds	r0, r3, #0
 80117aa:	f7ff ffa1 	bl	80116f0 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	2bff      	cmp	r3, #255	@ 0xff
 80117b2:	d906      	bls.n	80117c2 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	22ff      	movs	r2, #255	@ 0xff
 80117b8:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	2209      	movs	r2, #9
 80117be:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 80117c0:	e003      	b.n	80117ca <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	b2da      	uxtb	r2, r3
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	701a      	strb	r2, [r3, #0]
}
 80117ca:	46c0      	nop			@ (mov r8, r8)
 80117cc:	46bd      	mov	sp, r7
 80117ce:	b007      	add	sp, #28
 80117d0:	bd90      	pop	{r4, r7, pc}
 80117d2:	46c0      	nop			@ (mov r8, r8)
 80117d4:	41200000 	.word	0x41200000

080117d8 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b086      	sub	sp, #24
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]
 80117e4:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	2280      	movs	r2, #128	@ 0x80
 80117ea:	0612      	lsls	r2, r2, #24
 80117ec:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	4a18      	ldr	r2, [pc, #96]	@ (8011854 <findMinMax+0x7c>)
 80117f2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80117f4:	2300      	movs	r3, #0
 80117f6:	617b      	str	r3, [r7, #20]
 80117f8:	e022      	b.n	8011840 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	18d3      	adds	r3, r2, r3
 8011802:	681a      	ldr	r2, [r3, #0]
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	429a      	cmp	r2, r3
 801180a:	da06      	bge.n	801181a <findMinMax+0x42>
        {
            min[0] = array[i];
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	009b      	lsls	r3, r3, #2
 8011810:	687a      	ldr	r2, [r7, #4]
 8011812:	18d3      	adds	r3, r2, r3
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	687a      	ldr	r2, [r7, #4]
 8011820:	18d3      	adds	r3, r2, r3
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	429a      	cmp	r2, r3
 801182a:	dd06      	ble.n	801183a <findMinMax+0x62>
        {
            max[0] = array[i];
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	18d3      	adds	r3, r2, r3
 8011834:	681a      	ldr	r2, [r3, #0]
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	3301      	adds	r3, #1
 801183e:	617b      	str	r3, [r7, #20]
 8011840:	697a      	ldr	r2, [r7, #20]
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	429a      	cmp	r2, r3
 8011846:	d3d8      	bcc.n	80117fa <findMinMax+0x22>
        }
    }
}
 8011848:	46c0      	nop			@ (mov r8, r8)
 801184a:	46c0      	nop			@ (mov r8, r8)
 801184c:	46bd      	mov	sp, r7
 801184e:	b006      	add	sp, #24
 8011850:	bd80      	pop	{r7, pc}
 8011852:	46c0      	nop			@ (mov r8, r8)
 8011854:	7fffffff 	.word	0x7fffffff

08011858 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b084      	sub	sp, #16
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8011862:	2300      	movs	r3, #0
 8011864:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	429a      	cmp	r2, r3
 801186c:	d302      	bcc.n	8011874 <getPo2factor+0x1c>
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d107      	bne.n	8011884 <getPo2factor+0x2c>
    {
        return 0;
 8011874:	2300      	movs	r3, #0
 8011876:	e00d      	b.n	8011894 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	085b      	lsrs	r3, r3, #1
 801187c:	607b      	str	r3, [r7, #4]
        bitShift++;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	3301      	adds	r3, #1
 8011882:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8011884:	687a      	ldr	r2, [r7, #4]
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	429a      	cmp	r2, r3
 801188a:	d2f5      	bcs.n	8011878 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	3b01      	subs	r3, #1
 8011890:	60fb      	str	r3, [r7, #12]
    return bitShift;
 8011892:	68fb      	ldr	r3, [r7, #12]
}
 8011894:	0018      	movs	r0, r3
 8011896:	46bd      	mov	sp, r7
 8011898:	b004      	add	sp, #16
 801189a:	bd80      	pop	{r7, pc}

0801189c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b086      	sub	sp, #24
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	607a      	str	r2, [r7, #4]
 80118a8:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 80118aa:	68f8      	ldr	r0, [r7, #12]
 80118ac:	f7f0 f80c 	bl	80018c8 <__aeabi_ui2f>
 80118b0:	1c03      	adds	r3, r0, #0
 80118b2:	1c19      	adds	r1, r3, #0
 80118b4:	68b8      	ldr	r0, [r7, #8]
 80118b6:	f7ef fbc3 	bl	8001040 <__aeabi_fmul>
 80118ba:	1c03      	adds	r3, r0, #0
 80118bc:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 80118be:	2300      	movs	r3, #0
 80118c0:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 80118c2:	683a      	ldr	r2, [r7, #0]
 80118c4:	2310      	movs	r3, #16
 80118c6:	18f9      	adds	r1, r7, r3
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	1c18      	adds	r0, r3, #0
 80118cc:	f7ff fee0 	bl	8011690 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	801a      	strh	r2, [r3, #0]
}
 80118d8:	46c0      	nop			@ (mov r8, r8)
 80118da:	46bd      	mov	sp, r7
 80118dc:	b006      	add	sp, #24
 80118de:	bd80      	pop	{r7, pc}

080118e0 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	60b8      	str	r0, [r7, #8]
 80118e8:	60f9      	str	r1, [r7, #12]
 80118ea:	607a      	str	r2, [r7, #4]
 80118ec:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 80118ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f0:	6a3a      	ldr	r2, [r7, #32]
 80118f2:	68b8      	ldr	r0, [r7, #8]
 80118f4:	68f9      	ldr	r1, [r7, #12]
 80118f6:	f7f9 ff67 	bl	800b7c8 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 80118fa:	6a3b      	ldr	r3, [r7, #32]
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	18d2      	adds	r2, r2, r3
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	18d2      	adds	r2, r2, r3
 8011906:	6a3b      	ldr	r3, [r7, #32]
 8011908:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 801190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	18d2      	adds	r2, r2, r3
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	18d2      	adds	r2, r2, r3
 8011916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011918:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 801191a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801191c:	6a3b      	ldr	r3, [r7, #32]
 801191e:	0011      	movs	r1, r2
 8011920:	0018      	movs	r0, r3
 8011922:	f7f9 ffe1 	bl	800b8e8 <correctIntFracNumber>
}
 8011926:	46c0      	nop			@ (mov r8, r8)
 8011928:	46bd      	mov	sp, r7
 801192a:	b004      	add	sp, #16
 801192c:	bd80      	pop	{r7, pc}

0801192e <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 801192e:	b580      	push	{r7, lr}
 8011930:	b086      	sub	sp, #24
 8011932:	af00      	add	r7, sp, #0
 8011934:	60f8      	str	r0, [r7, #12]
 8011936:	60b9      	str	r1, [r7, #8]
 8011938:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 801193a:	2300      	movs	r3, #0
 801193c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 801193e:	2300      	movs	r3, #0
 8011940:	613b      	str	r3, [r7, #16]
 8011942:	e019      	b.n	8011978 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	005b      	lsls	r3, r3, #1
 8011948:	68fa      	ldr	r2, [r7, #12]
 801194a:	18d3      	adds	r3, r2, r3
 801194c:	881b      	ldrh	r3, [r3, #0]
 801194e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8011950:	693a      	ldr	r2, [r7, #16]
 8011952:	3201      	adds	r2, #1
 8011954:	0052      	lsls	r2, r2, #1
 8011956:	68f9      	ldr	r1, [r7, #12]
 8011958:	188a      	adds	r2, r1, r2
 801195a:	8812      	ldrh	r2, [r2, #0]
 801195c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801195e:	0019      	movs	r1, r3
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8011968:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801196a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	3301      	adds	r3, #1
 8011970:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	3304      	adds	r3, #4
 8011976:	613b      	str	r3, [r7, #16]
 8011978:	693a      	ldr	r2, [r7, #16]
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	429a      	cmp	r2, r3
 801197e:	d3e1      	bcc.n	8011944 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8011980:	46c0      	nop			@ (mov r8, r8)
 8011982:	46c0      	nop			@ (mov r8, r8)
 8011984:	46bd      	mov	sp, r7
 8011986:	b006      	add	sp, #24
 8011988:	bd80      	pop	{r7, pc}
	...

0801198c <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 801198c:	b580      	push	{r7, lr}
 801198e:	af00      	add	r7, sp, #0
  init = false;
 8011990:	4b02      	ldr	r3, [pc, #8]	@ (801199c <InitDone+0x10>)
 8011992:	2200      	movs	r2, #0
 8011994:	701a      	strb	r2, [r3, #0]
}
 8011996:	46c0      	nop			@ (mov r8, r8)
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}
 801199c:	200000dc 	.word	0x200000dc

080119a0 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 80119a6:	f7f7 fbf3 	bl	8009190 <ReadBatteryVoltage>
 80119aa:	1c02      	adds	r2, r0, #0
 80119ac:	4b25      	ldr	r3, [pc, #148]	@ (8011a44 <batteryChargeCheck+0xa4>)
 80119ae:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 80119b0:	4b24      	ldr	r3, [pc, #144]	@ (8011a44 <batteryChargeCheck+0xa4>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	4924      	ldr	r1, [pc, #144]	@ (8011a48 <batteryChargeCheck+0xa8>)
 80119b6:	1c18      	adds	r0, r3, #0
 80119b8:	f7ee fdba 	bl	8000530 <__aeabi_fcmplt>
 80119bc:	1e03      	subs	r3, r0, #0
 80119be:	d002      	beq.n	80119c6 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 80119c0:	1dfb      	adds	r3, r7, #7
 80119c2:	2200      	movs	r2, #0
 80119c4:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 80119c6:	4b1f      	ldr	r3, [pc, #124]	@ (8011a44 <batteryChargeCheck+0xa4>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	491f      	ldr	r1, [pc, #124]	@ (8011a48 <batteryChargeCheck+0xa8>)
 80119cc:	1c18      	adds	r0, r3, #0
 80119ce:	f7ee fdcd 	bl	800056c <__aeabi_fcmpge>
 80119d2:	1e03      	subs	r3, r0, #0
 80119d4:	d00d      	beq.n	80119f2 <batteryChargeCheck+0x52>
 80119d6:	4b1b      	ldr	r3, [pc, #108]	@ (8011a44 <batteryChargeCheck+0xa4>)
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	1c18      	adds	r0, r3, #0
 80119dc:	f7f1 ff5a 	bl	8003894 <__aeabi_f2d>
 80119e0:	4a1a      	ldr	r2, [pc, #104]	@ (8011a4c <batteryChargeCheck+0xac>)
 80119e2:	4b1b      	ldr	r3, [pc, #108]	@ (8011a50 <batteryChargeCheck+0xb0>)
 80119e4:	f7ee fd6a 	bl	80004bc <__aeabi_dcmplt>
 80119e8:	1e03      	subs	r3, r0, #0
 80119ea:	d002      	beq.n	80119f2 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 80119ec:	1dfb      	adds	r3, r7, #7
 80119ee:	2201      	movs	r2, #1
 80119f0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 80119f2:	4b14      	ldr	r3, [pc, #80]	@ (8011a44 <batteryChargeCheck+0xa4>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	1c18      	adds	r0, r3, #0
 80119f8:	f7f1 ff4c 	bl	8003894 <__aeabi_f2d>
 80119fc:	4a13      	ldr	r2, [pc, #76]	@ (8011a4c <batteryChargeCheck+0xac>)
 80119fe:	4b14      	ldr	r3, [pc, #80]	@ (8011a50 <batteryChargeCheck+0xb0>)
 8011a00:	f7ee fd7a 	bl	80004f8 <__aeabi_dcmpge>
 8011a04:	1e03      	subs	r3, r0, #0
 8011a06:	d00b      	beq.n	8011a20 <batteryChargeCheck+0x80>
 8011a08:	4b0e      	ldr	r3, [pc, #56]	@ (8011a44 <batteryChargeCheck+0xa4>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	2181      	movs	r1, #129	@ 0x81
 8011a0e:	05c9      	lsls	r1, r1, #23
 8011a10:	1c18      	adds	r0, r3, #0
 8011a12:	f7ee fd8d 	bl	8000530 <__aeabi_fcmplt>
 8011a16:	1e03      	subs	r3, r0, #0
 8011a18:	d002      	beq.n	8011a20 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 8011a1a:	1dfb      	adds	r3, r7, #7
 8011a1c:	2202      	movs	r2, #2
 8011a1e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8011a20:	4b08      	ldr	r3, [pc, #32]	@ (8011a44 <batteryChargeCheck+0xa4>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	2181      	movs	r1, #129	@ 0x81
 8011a26:	05c9      	lsls	r1, r1, #23
 8011a28:	1c18      	adds	r0, r3, #0
 8011a2a:	f7ee fd9f 	bl	800056c <__aeabi_fcmpge>
 8011a2e:	1e03      	subs	r3, r0, #0
 8011a30:	d002      	beq.n	8011a38 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 8011a32:	1dfb      	adds	r3, r7, #7
 8011a34:	2203      	movs	r2, #3
 8011a36:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8011a38:	1dfb      	adds	r3, r7, #7
 8011a3a:	781b      	ldrb	r3, [r3, #0]
}
 8011a3c:	0018      	movs	r0, r3
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	b002      	add	sp, #8
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	20001e6c 	.word	0x20001e6c
 8011a48:	40600000 	.word	0x40600000
 8011a4c:	9999999a 	.word	0x9999999a
 8011a50:	400d9999 	.word	0x400d9999

08011a54 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8011a54:	b5b0      	push	{r4, r5, r7, lr}
 8011a56:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8011a58:	f7f7 fbfc 	bl	8009254 <ReadSolarVoltage>
 8011a5c:	0003      	movs	r3, r0
 8011a5e:	001a      	movs	r2, r3
 8011a60:	4b1a      	ldr	r3, [pc, #104]	@ (8011acc <Calculate_LED_ON+0x78>)
 8011a62:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8011a64:	4b19      	ldr	r3, [pc, #100]	@ (8011acc <Calculate_LED_ON+0x78>)
 8011a66:	881b      	ldrh	r3, [r3, #0]
 8011a68:	4a19      	ldr	r2, [pc, #100]	@ (8011ad0 <Calculate_LED_ON+0x7c>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d802      	bhi.n	8011a74 <Calculate_LED_ON+0x20>
    solmV = 2900;
 8011a6e:	4b17      	ldr	r3, [pc, #92]	@ (8011acc <Calculate_LED_ON+0x78>)
 8011a70:	4a18      	ldr	r2, [pc, #96]	@ (8011ad4 <Calculate_LED_ON+0x80>)
 8011a72:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8011a74:	4b15      	ldr	r3, [pc, #84]	@ (8011acc <Calculate_LED_ON+0x78>)
 8011a76:	881b      	ldrh	r3, [r3, #0]
 8011a78:	4a17      	ldr	r2, [pc, #92]	@ (8011ad8 <Calculate_LED_ON+0x84>)
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d902      	bls.n	8011a84 <Calculate_LED_ON+0x30>
    solmV = 4700;
 8011a7e:	4b13      	ldr	r3, [pc, #76]	@ (8011acc <Calculate_LED_ON+0x78>)
 8011a80:	4a15      	ldr	r2, [pc, #84]	@ (8011ad8 <Calculate_LED_ON+0x84>)
 8011a82:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8011a84:	4b11      	ldr	r3, [pc, #68]	@ (8011acc <Calculate_LED_ON+0x78>)
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	0018      	movs	r0, r3
 8011a8a:	f7f1 feb1 	bl	80037f0 <__aeabi_i2d>
 8011a8e:	0004      	movs	r4, r0
 8011a90:	000d      	movs	r5, r1
 8011a92:	4b0e      	ldr	r3, [pc, #56]	@ (8011acc <Calculate_LED_ON+0x78>)
 8011a94:	881b      	ldrh	r3, [r3, #0]
 8011a96:	001a      	movs	r2, r3
 8011a98:	4b10      	ldr	r3, [pc, #64]	@ (8011adc <Calculate_LED_ON+0x88>)
 8011a9a:	1a9b      	subs	r3, r3, r2
 8011a9c:	0018      	movs	r0, r3
 8011a9e:	f7f1 fea7 	bl	80037f0 <__aeabi_i2d>
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8011ae0 <Calculate_LED_ON+0x8c>)
 8011aa6:	f7f0 ff55 	bl	8002954 <__aeabi_dmul>
 8011aaa:	0002      	movs	r2, r0
 8011aac:	000b      	movs	r3, r1
 8011aae:	0020      	movs	r0, r4
 8011ab0:	0029      	movs	r1, r5
 8011ab2:	f7ef ff4f 	bl	8001954 <__aeabi_dadd>
 8011ab6:	0002      	movs	r2, r0
 8011ab8:	000b      	movs	r3, r1
 8011aba:	0010      	movs	r0, r2
 8011abc:	0019      	movs	r1, r3
 8011abe:	f7ee fdc5 	bl	800064c <__aeabi_d2uiz>
 8011ac2:	0003      	movs	r3, r0
 8011ac4:	b29b      	uxth	r3, r3
}
 8011ac6:	0018      	movs	r0, r3
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bdb0      	pop	{r4, r5, r7, pc}
 8011acc:	20001e70 	.word	0x20001e70
 8011ad0:	00000b53 	.word	0x00000b53
 8011ad4:	00000b54 	.word	0x00000b54
 8011ad8:	0000125c 	.word	0x0000125c
 8011adc:	00000dee 	.word	0x00000dee
 8011ae0:	3ff80000 	.word	0x3ff80000

08011ae4 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8011ae4:	b590      	push	{r4, r7, lr}
 8011ae6:	b083      	sub	sp, #12
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	0004      	movs	r4, r0
 8011aec:	0008      	movs	r0, r1
 8011aee:	0011      	movs	r1, r2
 8011af0:	1dbb      	adds	r3, r7, #6
 8011af2:	1c22      	adds	r2, r4, #0
 8011af4:	801a      	strh	r2, [r3, #0]
 8011af6:	1d3b      	adds	r3, r7, #4
 8011af8:	1c02      	adds	r2, r0, #0
 8011afa:	801a      	strh	r2, [r3, #0]
 8011afc:	1cbb      	adds	r3, r7, #2
 8011afe:	1c0a      	adds	r2, r1, #0
 8011b00:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011b02:	4b0f      	ldr	r3, [pc, #60]	@ (8011b40 <SetStatusLED+0x5c>)
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d107      	bne.n	8011b1a <SetStatusLED+0x36>
 8011b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8011b44 <SetStatusLED+0x60>)
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d103      	bne.n	8011b1a <SetStatusLED+0x36>
 8011b12:	4b0d      	ldr	r3, [pc, #52]	@ (8011b48 <SetStatusLED+0x64>)
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d00e      	beq.n	8011b38 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8011b1a:	2380      	movs	r3, #128	@ 0x80
 8011b1c:	05db      	lsls	r3, r3, #23
 8011b1e:	1dba      	adds	r2, r7, #6
 8011b20:	8812      	ldrh	r2, [r2, #0]
 8011b22:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8011b24:	2380      	movs	r3, #128	@ 0x80
 8011b26:	05db      	lsls	r3, r3, #23
 8011b28:	1d3a      	adds	r2, r7, #4
 8011b2a:	8812      	ldrh	r2, [r2, #0]
 8011b2c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8011b2e:	2380      	movs	r3, #128	@ 0x80
 8011b30:	05db      	lsls	r3, r3, #23
 8011b32:	1cba      	adds	r2, r7, #2
 8011b34:	8812      	ldrh	r2, [r2, #0]
 8011b36:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011b38:	46c0      	nop			@ (mov r8, r8)
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	b003      	add	sp, #12
 8011b3e:	bd90      	pop	{r4, r7, pc}
 8011b40:	20001e5d 	.word	0x20001e5d
 8011b44:	200000dc 	.word	0x200000dc
 8011b48:	20001e5e 	.word	0x20001e5e

08011b4c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8011b4c:	b590      	push	{r4, r7, lr}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	0004      	movs	r4, r0
 8011b54:	0008      	movs	r0, r1
 8011b56:	0011      	movs	r1, r2
 8011b58:	1dfb      	adds	r3, r7, #7
 8011b5a:	1c22      	adds	r2, r4, #0
 8011b5c:	701a      	strb	r2, [r3, #0]
 8011b5e:	1dbb      	adds	r3, r7, #6
 8011b60:	1c02      	adds	r2, r0, #0
 8011b62:	701a      	strb	r2, [r3, #0]
 8011b64:	1d7b      	adds	r3, r7, #5
 8011b66:	1c0a      	adds	r2, r1, #0
 8011b68:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8011b6a:	4b19      	ldr	r3, [pc, #100]	@ (8011bd0 <SetDBLED+0x84>)
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d107      	bne.n	8011b82 <SetDBLED+0x36>
 8011b72:	4b18      	ldr	r3, [pc, #96]	@ (8011bd4 <SetDBLED+0x88>)
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d103      	bne.n	8011b82 <SetDBLED+0x36>
 8011b7a:	4b17      	ldr	r3, [pc, #92]	@ (8011bd8 <SetDBLED+0x8c>)
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d022      	beq.n	8011bc8 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8011b82:	1dfb      	adds	r3, r7, #7
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	2201      	movs	r2, #1
 8011b88:	4053      	eors	r3, r2
 8011b8a:	b2db      	uxtb	r3, r3
 8011b8c:	001a      	movs	r2, r3
 8011b8e:	4b13      	ldr	r3, [pc, #76]	@ (8011bdc <SetDBLED+0x90>)
 8011b90:	2101      	movs	r1, #1
 8011b92:	0018      	movs	r0, r3
 8011b94:	f003 fa59 	bl	801504a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8011b98:	1dbb      	adds	r3, r7, #6
 8011b9a:	781b      	ldrb	r3, [r3, #0]
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	4053      	eors	r3, r2
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	001a      	movs	r2, r3
 8011ba4:	2380      	movs	r3, #128	@ 0x80
 8011ba6:	005b      	lsls	r3, r3, #1
 8011ba8:	480c      	ldr	r0, [pc, #48]	@ (8011bdc <SetDBLED+0x90>)
 8011baa:	0019      	movs	r1, r3
 8011bac:	f003 fa4d 	bl	801504a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8011bb0:	1d7b      	adds	r3, r7, #5
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	2201      	movs	r2, #1
 8011bb6:	4053      	eors	r3, r2
 8011bb8:	b2db      	uxtb	r3, r3
 8011bba:	001a      	movs	r2, r3
 8011bbc:	2380      	movs	r3, #128	@ 0x80
 8011bbe:	009b      	lsls	r3, r3, #2
 8011bc0:	4806      	ldr	r0, [pc, #24]	@ (8011bdc <SetDBLED+0x90>)
 8011bc2:	0019      	movs	r1, r3
 8011bc4:	f003 fa41 	bl	801504a <HAL_GPIO_WritePin>
  }
}
 8011bc8:	46c0      	nop			@ (mov r8, r8)
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	b003      	add	sp, #12
 8011bce:	bd90      	pop	{r4, r7, pc}
 8011bd0:	20001e5d 	.word	0x20001e5d
 8011bd4:	200000dc 	.word	0x200000dc
 8011bd8:	20001e5e 	.word	0x20001e5e
 8011bdc:	50000400 	.word	0x50000400

08011be0 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8011be0:	b590      	push	{r4, r7, lr}
 8011be2:	b083      	sub	sp, #12
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	0004      	movs	r4, r0
 8011be8:	0008      	movs	r0, r1
 8011bea:	0011      	movs	r1, r2
 8011bec:	1dbb      	adds	r3, r7, #6
 8011bee:	1c22      	adds	r2, r4, #0
 8011bf0:	801a      	strh	r2, [r3, #0]
 8011bf2:	1d3b      	adds	r3, r7, #4
 8011bf4:	1c02      	adds	r2, r0, #0
 8011bf6:	801a      	strh	r2, [r3, #0]
 8011bf8:	1cbb      	adds	r3, r7, #2
 8011bfa:	1c0a      	adds	r2, r1, #0
 8011bfc:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8011c38 <SetVocLED+0x58>)
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d107      	bne.n	8011c16 <SetVocLED+0x36>
 8011c06:	4b0d      	ldr	r3, [pc, #52]	@ (8011c3c <SetVocLED+0x5c>)
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d103      	bne.n	8011c16 <SetVocLED+0x36>
 8011c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8011c40 <SetVocLED+0x60>)
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00b      	beq.n	8011c2e <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8011c16:	4b0b      	ldr	r3, [pc, #44]	@ (8011c44 <SetVocLED+0x64>)
 8011c18:	1dba      	adds	r2, r7, #6
 8011c1a:	8812      	ldrh	r2, [r2, #0]
 8011c1c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8011c1e:	4b09      	ldr	r3, [pc, #36]	@ (8011c44 <SetVocLED+0x64>)
 8011c20:	1d3a      	adds	r2, r7, #4
 8011c22:	8812      	ldrh	r2, [r2, #0]
 8011c24:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8011c26:	4b07      	ldr	r3, [pc, #28]	@ (8011c44 <SetVocLED+0x64>)
 8011c28:	1cba      	adds	r2, r7, #2
 8011c2a:	8812      	ldrh	r2, [r2, #0]
 8011c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011c2e:	46c0      	nop			@ (mov r8, r8)
 8011c30:	46bd      	mov	sp, r7
 8011c32:	b003      	add	sp, #12
 8011c34:	bd90      	pop	{r4, r7, pc}
 8011c36:	46c0      	nop			@ (mov r8, r8)
 8011c38:	20001e5d 	.word	0x20001e5d
 8011c3c:	200000dc 	.word	0x200000dc
 8011c40:	20001e5e 	.word	0x20001e5e
 8011c44:	40000400 	.word	0x40000400

08011c48 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011c4c:	4b08      	ldr	r3, [pc, #32]	@ (8011c70 <SetMeasurementIndicator+0x28>)
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d103      	bne.n	8011c5c <SetMeasurementIndicator+0x14>
 8011c54:	4b07      	ldr	r3, [pc, #28]	@ (8011c74 <SetMeasurementIndicator+0x2c>)
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d006      	beq.n	8011c6a <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011c5c:	f7ff fefa 	bl	8011a54 <Calculate_LED_ON>
 8011c60:	0003      	movs	r3, r0
 8011c62:	001a      	movs	r2, r3
 8011c64:	2380      	movs	r3, #128	@ 0x80
 8011c66:	05db      	lsls	r3, r3, #23
 8011c68:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011c6a:	46c0      	nop			@ (mov r8, r8)
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	20001e5d 	.word	0x20001e5d
 8011c74:	20001e5e 	.word	0x20001e5e

08011c78 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011c7c:	4b07      	ldr	r3, [pc, #28]	@ (8011c9c <ResetMeasurementIndicator+0x24>)
 8011c7e:	781b      	ldrb	r3, [r3, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d103      	bne.n	8011c8c <ResetMeasurementIndicator+0x14>
 8011c84:	4b06      	ldr	r3, [pc, #24]	@ (8011ca0 <ResetMeasurementIndicator+0x28>)
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d004      	beq.n	8011c96 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8011c8c:	2380      	movs	r3, #128	@ 0x80
 8011c8e:	05db      	lsls	r3, r3, #23
 8011c90:	22fa      	movs	r2, #250	@ 0xfa
 8011c92:	0112      	lsls	r2, r2, #4
 8011c94:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011c96:	46c0      	nop			@ (mov r8, r8)
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	20001e5d 	.word	0x20001e5d
 8011ca0:	20001e5e 	.word	0x20001e5e

08011ca4 <SetMICIndicator>:
void SetMICIndicator(){
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011ca8:	4b19      	ldr	r3, [pc, #100]	@ (8011d10 <SetMICIndicator+0x6c>)
 8011caa:	781b      	ldrb	r3, [r3, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d103      	bne.n	8011cb8 <SetMICIndicator+0x14>
 8011cb0:	4b18      	ldr	r3, [pc, #96]	@ (8011d14 <SetMICIndicator+0x70>)
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d007      	beq.n	8011cc8 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 8011cb8:	f7ff fecc 	bl	8011a54 <Calculate_LED_ON>
 8011cbc:	0003      	movs	r3, r0
 8011cbe:	001a      	movs	r2, r3
 8011cc0:	2380      	movs	r3, #128	@ 0x80
 8011cc2:	05db      	lsls	r3, r3, #23
 8011cc4:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 8011cc6:	e01f      	b.n	8011d08 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 8011cc8:	4b13      	ldr	r3, [pc, #76]	@ (8011d18 <SetMICIndicator+0x74>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	1c18      	adds	r0, r3, #0
 8011cce:	f7f1 fde1 	bl	8003894 <__aeabi_f2d>
 8011cd2:	4a12      	ldr	r2, [pc, #72]	@ (8011d1c <SetMICIndicator+0x78>)
 8011cd4:	4b12      	ldr	r3, [pc, #72]	@ (8011d20 <SetMICIndicator+0x7c>)
 8011cd6:	f7ee fc05 	bl	80004e4 <__aeabi_dcmpgt>
 8011cda:	1e03      	subs	r3, r0, #0
 8011cdc:	d00a      	beq.n	8011cf4 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8011cde:	f7ff feb9 	bl	8011a54 <Calculate_LED_ON>
 8011ce2:	0003      	movs	r3, r0
 8011ce4:	001a      	movs	r2, r3
 8011ce6:	2380      	movs	r3, #128	@ 0x80
 8011ce8:	05db      	lsls	r3, r3, #23
 8011cea:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8011cec:	4b0d      	ldr	r3, [pc, #52]	@ (8011d24 <SetMICIndicator+0x80>)
 8011cee:	2202      	movs	r2, #2
 8011cf0:	701a      	strb	r2, [r3, #0]
}
 8011cf2:	e009      	b.n	8011d08 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8011cf4:	f7ff feae 	bl	8011a54 <Calculate_LED_ON>
 8011cf8:	0003      	movs	r3, r0
 8011cfa:	001a      	movs	r2, r3
 8011cfc:	2380      	movs	r3, #128	@ 0x80
 8011cfe:	05db      	lsls	r3, r3, #23
 8011d00:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8011d02:	4b08      	ldr	r3, [pc, #32]	@ (8011d24 <SetMICIndicator+0x80>)
 8011d04:	2201      	movs	r2, #1
 8011d06:	701a      	strb	r2, [r3, #0]
}
 8011d08:	46c0      	nop			@ (mov r8, r8)
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	46c0      	nop			@ (mov r8, r8)
 8011d10:	20001e5d 	.word	0x20001e5d
 8011d14:	20001e5e 	.word	0x20001e5e
 8011d18:	20001e6c 	.word	0x20001e6c
 8011d1c:	9999999a 	.word	0x9999999a
 8011d20:	400d9999 	.word	0x400d9999
 8011d24:	20001e60 	.word	0x20001e60

08011d28 <ResetMICIndicator>:
void ResetMICIndicator(){
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8011d6c <ResetMICIndicator+0x44>)
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d103      	bne.n	8011d3c <ResetMICIndicator+0x14>
 8011d34:	4b0e      	ldr	r3, [pc, #56]	@ (8011d70 <ResetMICIndicator+0x48>)
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d005      	beq.n	8011d48 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 8011d3c:	2380      	movs	r3, #128	@ 0x80
 8011d3e:	05db      	lsls	r3, r3, #23
 8011d40:	22fa      	movs	r2, #250	@ 0xfa
 8011d42:	0112      	lsls	r2, r2, #4
 8011d44:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 8011d46:	e00e      	b.n	8011d66 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 8011d48:	4b0a      	ldr	r3, [pc, #40]	@ (8011d74 <ResetMICIndicator+0x4c>)
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	2b02      	cmp	r3, #2
 8011d4e:	d105      	bne.n	8011d5c <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 8011d50:	2380      	movs	r3, #128	@ 0x80
 8011d52:	05db      	lsls	r3, r3, #23
 8011d54:	22fa      	movs	r2, #250	@ 0xfa
 8011d56:	0112      	lsls	r2, r2, #4
 8011d58:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8011d5a:	e004      	b.n	8011d66 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8011d5c:	2380      	movs	r3, #128	@ 0x80
 8011d5e:	05db      	lsls	r3, r3, #23
 8011d60:	22fa      	movs	r2, #250	@ 0xfa
 8011d62:	0112      	lsls	r2, r2, #4
 8011d64:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8011d66:	46c0      	nop			@ (mov r8, r8)
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	20001e5d 	.word	0x20001e5d
 8011d70:	20001e5e 	.word	0x20001e5e
 8011d74:	20001e60 	.word	0x20001e60

08011d78 <SetESPIndicator>:
void SetESPIndicator(){
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011d7c:	4b08      	ldr	r3, [pc, #32]	@ (8011da0 <SetESPIndicator+0x28>)
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d103      	bne.n	8011d8c <SetESPIndicator+0x14>
 8011d84:	4b07      	ldr	r3, [pc, #28]	@ (8011da4 <SetESPIndicator+0x2c>)
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d006      	beq.n	8011d9a <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8011d8c:	f7ff fe62 	bl	8011a54 <Calculate_LED_ON>
 8011d90:	0003      	movs	r3, r0
 8011d92:	001a      	movs	r2, r3
 8011d94:	2380      	movs	r3, #128	@ 0x80
 8011d96:	05db      	lsls	r3, r3, #23
 8011d98:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011d9a:	46c0      	nop			@ (mov r8, r8)
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}
 8011da0:	20001e5d 	.word	0x20001e5d
 8011da4:	20001e5e 	.word	0x20001e5e

08011da8 <ResetESPIndicator>:
void ResetESPIndicator(){
 8011da8:	b580      	push	{r7, lr}
 8011daa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011dac:	4b07      	ldr	r3, [pc, #28]	@ (8011dcc <ResetESPIndicator+0x24>)
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d103      	bne.n	8011dbc <ResetESPIndicator+0x14>
 8011db4:	4b06      	ldr	r3, [pc, #24]	@ (8011dd0 <ResetESPIndicator+0x28>)
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d004      	beq.n	8011dc6 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8011dbc:	2380      	movs	r3, #128	@ 0x80
 8011dbe:	05db      	lsls	r3, r3, #23
 8011dc0:	22fa      	movs	r2, #250	@ 0xfa
 8011dc2:	0112      	lsls	r2, r2, #4
 8011dc4:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011dc6:	46c0      	nop			@ (mov r8, r8)
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	20001e5d 	.word	0x20001e5d
 8011dd0:	20001e5e 	.word	0x20001e5e

08011dd4 <SetPMIndicator>:

void SetPMIndicator() {
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8011e18 <SetPMIndicator+0x44>)
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d103      	bne.n	8011de8 <SetPMIndicator+0x14>
 8011de0:	4b0e      	ldr	r3, [pc, #56]	@ (8011e1c <SetPMIndicator+0x48>)
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d014      	beq.n	8011e12 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8011de8:	f7ff fe34 	bl	8011a54 <Calculate_LED_ON>
 8011dec:	0003      	movs	r3, r0
 8011dee:	001a      	movs	r2, r3
 8011df0:	2380      	movs	r3, #128	@ 0x80
 8011df2:	05db      	lsls	r3, r3, #23
 8011df4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8011df6:	f7ff fe2d 	bl	8011a54 <Calculate_LED_ON>
 8011dfa:	0003      	movs	r3, r0
 8011dfc:	001a      	movs	r2, r3
 8011dfe:	2380      	movs	r3, #128	@ 0x80
 8011e00:	05db      	lsls	r3, r3, #23
 8011e02:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011e04:	f7ff fe26 	bl	8011a54 <Calculate_LED_ON>
 8011e08:	0003      	movs	r3, r0
 8011e0a:	001a      	movs	r2, r3
 8011e0c:	2380      	movs	r3, #128	@ 0x80
 8011e0e:	05db      	lsls	r3, r3, #23
 8011e10:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011e12:	46c0      	nop			@ (mov r8, r8)
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}
 8011e18:	20001e5d 	.word	0x20001e5d
 8011e1c:	20001e5e 	.word	0x20001e5e

08011e20 <ResetPMIndicator>:

void ResetPMIndicator() {
 8011e20:	b580      	push	{r7, lr}
 8011e22:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011e24:	4b0c      	ldr	r3, [pc, #48]	@ (8011e58 <ResetPMIndicator+0x38>)
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d103      	bne.n	8011e34 <ResetPMIndicator+0x14>
 8011e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8011e5c <ResetPMIndicator+0x3c>)
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d00e      	beq.n	8011e52 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8011e34:	2380      	movs	r3, #128	@ 0x80
 8011e36:	05db      	lsls	r3, r3, #23
 8011e38:	22fa      	movs	r2, #250	@ 0xfa
 8011e3a:	0112      	lsls	r2, r2, #4
 8011e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8011e3e:	2380      	movs	r3, #128	@ 0x80
 8011e40:	05db      	lsls	r3, r3, #23
 8011e42:	22fa      	movs	r2, #250	@ 0xfa
 8011e44:	0112      	lsls	r2, r2, #4
 8011e46:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8011e48:	2380      	movs	r3, #128	@ 0x80
 8011e4a:	05db      	lsls	r3, r3, #23
 8011e4c:	22fa      	movs	r2, #250	@ 0xfa
 8011e4e:	0112      	lsls	r2, r2, #4
 8011e50:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011e52:	46c0      	nop			@ (mov r8, r8)
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	20001e5d 	.word	0x20001e5d
 8011e5c:	20001e5e 	.word	0x20001e5e

08011e60 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8011e60:	b580      	push	{r7, lr}
 8011e62:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8011e64:	23fa      	movs	r3, #250	@ 0xfa
 8011e66:	011a      	lsls	r2, r3, #4
 8011e68:	23fa      	movs	r3, #250	@ 0xfa
 8011e6a:	0119      	lsls	r1, r3, #4
 8011e6c:	23fa      	movs	r3, #250	@ 0xfa
 8011e6e:	011b      	lsls	r3, r3, #4
 8011e70:	0018      	movs	r0, r3
 8011e72:	f7ff fe37 	bl	8011ae4 <SetStatusLED>
  SetDBLED(false,false,false);
 8011e76:	2200      	movs	r2, #0
 8011e78:	2100      	movs	r1, #0
 8011e7a:	2000      	movs	r0, #0
 8011e7c:	f7ff fe66 	bl	8011b4c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8011e80:	23fa      	movs	r3, #250	@ 0xfa
 8011e82:	011a      	lsls	r2, r3, #4
 8011e84:	23fa      	movs	r3, #250	@ 0xfa
 8011e86:	0119      	lsls	r1, r3, #4
 8011e88:	23fa      	movs	r3, #250	@ 0xfa
 8011e8a:	011b      	lsls	r3, r3, #4
 8011e8c:	0018      	movs	r0, r3
 8011e8e:	f7ff fea7 	bl	8011be0 <SetVocLED>
return;
 8011e92:	46c0      	nop			@ (mov r8, r8)
}
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bd80      	pop	{r7, pc}

08011e98 <SetAllREDLED>:

void SetAllREDLED() {
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 8011e9c:	2380      	movs	r3, #128	@ 0x80
 8011e9e:	05db      	lsls	r3, r3, #23
 8011ea0:	4a19      	ldr	r2, [pc, #100]	@ (8011f08 <SetAllREDLED+0x70>)
 8011ea2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8011ea4:	2380      	movs	r3, #128	@ 0x80
 8011ea6:	05db      	lsls	r3, r3, #23
 8011ea8:	22fa      	movs	r2, #250	@ 0xfa
 8011eaa:	0112      	lsls	r2, r2, #4
 8011eac:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8011eae:	2380      	movs	r3, #128	@ 0x80
 8011eb0:	05db      	lsls	r3, r3, #23
 8011eb2:	22fa      	movs	r2, #250	@ 0xfa
 8011eb4:	0112      	lsls	r2, r2, #4
 8011eb6:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8011eb8:	4b14      	ldr	r3, [pc, #80]	@ (8011f0c <SetAllREDLED+0x74>)
 8011eba:	4a13      	ldr	r2, [pc, #76]	@ (8011f08 <SetAllREDLED+0x70>)
 8011ebc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8011ebe:	4b13      	ldr	r3, [pc, #76]	@ (8011f0c <SetAllREDLED+0x74>)
 8011ec0:	22fa      	movs	r2, #250	@ 0xfa
 8011ec2:	0112      	lsls	r2, r2, #4
 8011ec4:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8011ec6:	4b11      	ldr	r3, [pc, #68]	@ (8011f0c <SetAllREDLED+0x74>)
 8011ec8:	22fa      	movs	r2, #250	@ 0xfa
 8011eca:	0112      	lsls	r2, r2, #4
 8011ecc:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8011ece:	4b10      	ldr	r3, [pc, #64]	@ (8011f10 <SetAllREDLED+0x78>)
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	2101      	movs	r1, #1
 8011ed4:	0018      	movs	r0, r3
 8011ed6:	f003 f8b8 	bl	801504a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8011eda:	2380      	movs	r3, #128	@ 0x80
 8011edc:	005b      	lsls	r3, r3, #1
 8011ede:	480c      	ldr	r0, [pc, #48]	@ (8011f10 <SetAllREDLED+0x78>)
 8011ee0:	2201      	movs	r2, #1
 8011ee2:	0019      	movs	r1, r3
 8011ee4:	f003 f8b1 	bl	801504a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8011ee8:	2380      	movs	r3, #128	@ 0x80
 8011eea:	009b      	lsls	r3, r3, #2
 8011eec:	4808      	ldr	r0, [pc, #32]	@ (8011f10 <SetAllREDLED+0x78>)
 8011eee:	2201      	movs	r2, #1
 8011ef0:	0019      	movs	r1, r3
 8011ef2:	f003 f8aa 	bl	801504a <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8011ef6:	23fa      	movs	r3, #250	@ 0xfa
 8011ef8:	009b      	lsls	r3, r3, #2
 8011efa:	0018      	movs	r0, r3
 8011efc:	f001 fe1e 	bl	8013b3c <HAL_Delay>
}
 8011f00:	46c0      	nop			@ (mov r8, r8)
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	46c0      	nop			@ (mov r8, r8)
 8011f08:	00000bb8 	.word	0x00000bb8
 8011f0c:	40000400 	.word	0x40000400
 8011f10:	50000400 	.word	0x50000400

08011f14 <SetAllBlueLED>:

void SetAllBlueLED() {
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8011f1a:	1dfb      	adds	r3, r7, #7
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	701a      	strb	r2, [r3, #0]
 8011f20:	e04b      	b.n	8011fba <SetAllBlueLED+0xa6>
    TIM2 -> CCR1 = LED_OFF;
 8011f22:	2380      	movs	r3, #128	@ 0x80
 8011f24:	05db      	lsls	r3, r3, #23
 8011f26:	22fa      	movs	r2, #250	@ 0xfa
 8011f28:	0112      	lsls	r2, r2, #4
 8011f2a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8011f2c:	2380      	movs	r3, #128	@ 0x80
 8011f2e:	05db      	lsls	r3, r3, #23
 8011f30:	22fa      	movs	r2, #250	@ 0xfa
 8011f32:	0112      	lsls	r2, r2, #4
 8011f34:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8011f36:	2380      	movs	r3, #128	@ 0x80
 8011f38:	05db      	lsls	r3, r3, #23
 8011f3a:	4a24      	ldr	r2, [pc, #144]	@ (8011fcc <SetAllBlueLED+0xb8>)
 8011f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8011f3e:	4b24      	ldr	r3, [pc, #144]	@ (8011fd0 <SetAllBlueLED+0xbc>)
 8011f40:	22fa      	movs	r2, #250	@ 0xfa
 8011f42:	0112      	lsls	r2, r2, #4
 8011f44:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8011f46:	4b22      	ldr	r3, [pc, #136]	@ (8011fd0 <SetAllBlueLED+0xbc>)
 8011f48:	22fa      	movs	r2, #250	@ 0xfa
 8011f4a:	0112      	lsls	r2, r2, #4
 8011f4c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8011f4e:	4b20      	ldr	r3, [pc, #128]	@ (8011fd0 <SetAllBlueLED+0xbc>)
 8011f50:	4a1e      	ldr	r2, [pc, #120]	@ (8011fcc <SetAllBlueLED+0xb8>)
 8011f52:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8011f54:	4b1f      	ldr	r3, [pc, #124]	@ (8011fd4 <SetAllBlueLED+0xc0>)
 8011f56:	2201      	movs	r2, #1
 8011f58:	2101      	movs	r1, #1
 8011f5a:	0018      	movs	r0, r3
 8011f5c:	f003 f875 	bl	801504a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8011f60:	2380      	movs	r3, #128	@ 0x80
 8011f62:	005b      	lsls	r3, r3, #1
 8011f64:	481b      	ldr	r0, [pc, #108]	@ (8011fd4 <SetAllBlueLED+0xc0>)
 8011f66:	2201      	movs	r2, #1
 8011f68:	0019      	movs	r1, r3
 8011f6a:	f003 f86e 	bl	801504a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8011f6e:	2380      	movs	r3, #128	@ 0x80
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	4818      	ldr	r0, [pc, #96]	@ (8011fd4 <SetAllBlueLED+0xc0>)
 8011f74:	2200      	movs	r2, #0
 8011f76:	0019      	movs	r1, r3
 8011f78:	f003 f867 	bl	801504a <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8011f7c:	23fa      	movs	r3, #250	@ 0xfa
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	0018      	movs	r0, r3
 8011f82:	f001 fddb 	bl	8013b3c <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8011f86:	2380      	movs	r3, #128	@ 0x80
 8011f88:	05db      	lsls	r3, r3, #23
 8011f8a:	22fa      	movs	r2, #250	@ 0xfa
 8011f8c:	0112      	lsls	r2, r2, #4
 8011f8e:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR3 = LED_OFF;
 8011f90:	4b0f      	ldr	r3, [pc, #60]	@ (8011fd0 <SetAllBlueLED+0xbc>)
 8011f92:	22fa      	movs	r2, #250	@ 0xfa
 8011f94:	0112      	lsls	r2, r2, #4
 8011f96:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8011f98:	2380      	movs	r3, #128	@ 0x80
 8011f9a:	009b      	lsls	r3, r3, #2
 8011f9c:	480d      	ldr	r0, [pc, #52]	@ (8011fd4 <SetAllBlueLED+0xc0>)
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	0019      	movs	r1, r3
 8011fa2:	f003 f852 	bl	801504a <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8011fa6:	23fa      	movs	r3, #250	@ 0xfa
 8011fa8:	005b      	lsls	r3, r3, #1
 8011faa:	0018      	movs	r0, r3
 8011fac:	f001 fdc6 	bl	8013b3c <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8011fb0:	1dfb      	adds	r3, r7, #7
 8011fb2:	781a      	ldrb	r2, [r3, #0]
 8011fb4:	1dfb      	adds	r3, r7, #7
 8011fb6:	3201      	adds	r2, #1
 8011fb8:	701a      	strb	r2, [r3, #0]
 8011fba:	1dfb      	adds	r3, r7, #7
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	2b02      	cmp	r3, #2
 8011fc0:	d9af      	bls.n	8011f22 <SetAllBlueLED+0xe>
  }
}
 8011fc2:	46c0      	nop			@ (mov r8, r8)
 8011fc4:	46c0      	nop			@ (mov r8, r8)
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	b002      	add	sp, #8
 8011fca:	bd80      	pop	{r7, pc}
 8011fcc:	00000bb8 	.word	0x00000bb8
 8011fd0:	40000400 	.word	0x40000400
 8011fd4:	50000400 	.word	0x50000400

08011fd8 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8011fd8:	b5b0      	push	{r4, r5, r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	0002      	movs	r2, r0
 8011fe0:	1dbb      	adds	r3, r7, #6
 8011fe2:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8011fe4:	1dbb      	adds	r3, r7, #6
 8011fe6:	881b      	ldrh	r3, [r3, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d05a      	beq.n	80120a2 <SetVOCindicator+0xca>
 8011fec:	1dbb      	adds	r3, r7, #6
 8011fee:	881b      	ldrh	r3, [r3, #0]
 8011ff0:	2b64      	cmp	r3, #100	@ 0x64
 8011ff2:	d856      	bhi.n	80120a2 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8011ff4:	1dbb      	adds	r3, r7, #6
 8011ff6:	881b      	ldrh	r3, [r3, #0]
 8011ff8:	0018      	movs	r0, r3
 8011ffa:	f7f1 fbf9 	bl	80037f0 <__aeabi_i2d>
 8011ffe:	2200      	movs	r2, #0
 8012000:	4b5f      	ldr	r3, [pc, #380]	@ (8012180 <SetVOCindicator+0x1a8>)
 8012002:	f7f0 f86d 	bl	80020e0 <__aeabi_ddiv>
 8012006:	0002      	movs	r2, r0
 8012008:	000b      	movs	r3, r1
 801200a:	2000      	movs	r0, #0
 801200c:	495d      	ldr	r1, [pc, #372]	@ (8012184 <SetVOCindicator+0x1ac>)
 801200e:	f7f0 ff87 	bl	8002f20 <__aeabi_dsub>
 8012012:	0002      	movs	r2, r0
 8012014:	000b      	movs	r3, r1
 8012016:	0014      	movs	r4, r2
 8012018:	001d      	movs	r5, r3
 801201a:	4b5b      	ldr	r3, [pc, #364]	@ (8012188 <SetVOCindicator+0x1b0>)
 801201c:	881b      	ldrh	r3, [r3, #0]
 801201e:	0018      	movs	r0, r3
 8012020:	f7f1 fbe6 	bl	80037f0 <__aeabi_i2d>
 8012024:	0002      	movs	r2, r0
 8012026:	000b      	movs	r3, r1
 8012028:	0020      	movs	r0, r4
 801202a:	0029      	movs	r1, r5
 801202c:	f7f0 fc92 	bl	8002954 <__aeabi_dmul>
 8012030:	0002      	movs	r2, r0
 8012032:	000b      	movs	r3, r1
 8012034:	0010      	movs	r0, r2
 8012036:	0019      	movs	r1, r3
 8012038:	f7ee fb08 	bl	800064c <__aeabi_d2uiz>
 801203c:	0003      	movs	r3, r0
 801203e:	b29a      	uxth	r2, r3
 8012040:	4b52      	ldr	r3, [pc, #328]	@ (801218c <SetVOCindicator+0x1b4>)
 8012042:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012044:	1dbb      	adds	r3, r7, #6
 8012046:	881b      	ldrh	r3, [r3, #0]
 8012048:	0018      	movs	r0, r3
 801204a:	f7f1 fbd1 	bl	80037f0 <__aeabi_i2d>
 801204e:	2200      	movs	r2, #0
 8012050:	4b4b      	ldr	r3, [pc, #300]	@ (8012180 <SetVOCindicator+0x1a8>)
 8012052:	f7f0 f845 	bl	80020e0 <__aeabi_ddiv>
 8012056:	0002      	movs	r2, r0
 8012058:	000b      	movs	r3, r1
 801205a:	0014      	movs	r4, r2
 801205c:	001d      	movs	r5, r3
 801205e:	4b4a      	ldr	r3, [pc, #296]	@ (8012188 <SetVOCindicator+0x1b0>)
 8012060:	881b      	ldrh	r3, [r3, #0]
 8012062:	0018      	movs	r0, r3
 8012064:	f7f1 fbc4 	bl	80037f0 <__aeabi_i2d>
 8012068:	0002      	movs	r2, r0
 801206a:	000b      	movs	r3, r1
 801206c:	0020      	movs	r0, r4
 801206e:	0029      	movs	r1, r5
 8012070:	f7f0 fc70 	bl	8002954 <__aeabi_dmul>
 8012074:	0002      	movs	r2, r0
 8012076:	000b      	movs	r3, r1
 8012078:	0010      	movs	r0, r2
 801207a:	0019      	movs	r1, r3
 801207c:	f7ee fae6 	bl	800064c <__aeabi_d2uiz>
 8012080:	0003      	movs	r3, r0
 8012082:	b29a      	uxth	r2, r3
 8012084:	4b42      	ldr	r3, [pc, #264]	@ (8012190 <SetVOCindicator+0x1b8>)
 8012086:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012088:	4b3f      	ldr	r3, [pc, #252]	@ (8012188 <SetVOCindicator+0x1b0>)
 801208a:	881a      	ldrh	r2, [r3, #0]
 801208c:	4b41      	ldr	r3, [pc, #260]	@ (8012194 <SetVOCindicator+0x1bc>)
 801208e:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012090:	4b40      	ldr	r3, [pc, #256]	@ (8012194 <SetVOCindicator+0x1bc>)
 8012092:	8818      	ldrh	r0, [r3, #0]
 8012094:	4b3d      	ldr	r3, [pc, #244]	@ (801218c <SetVOCindicator+0x1b4>)
 8012096:	8819      	ldrh	r1, [r3, #0]
 8012098:	4b3d      	ldr	r3, [pc, #244]	@ (8012190 <SetVOCindicator+0x1b8>)
 801209a:	881b      	ldrh	r3, [r3, #0]
 801209c:	001a      	movs	r2, r3
 801209e:	f7ff fd9f 	bl	8011be0 <SetVocLED>
  }
  if(VOCi > 100){
 80120a2:	1dbb      	adds	r3, r7, #6
 80120a4:	881b      	ldrh	r3, [r3, #0]
 80120a6:	2b64      	cmp	r3, #100	@ 0x64
 80120a8:	d966      	bls.n	8012178 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 80120aa:	1dbb      	adds	r3, r7, #6
 80120ac:	881b      	ldrh	r3, [r3, #0]
 80120ae:	0018      	movs	r0, r3
 80120b0:	f7f1 fb9e 	bl	80037f0 <__aeabi_i2d>
 80120b4:	2200      	movs	r2, #0
 80120b6:	4b32      	ldr	r3, [pc, #200]	@ (8012180 <SetVOCindicator+0x1a8>)
 80120b8:	f7f0 ff32 	bl	8002f20 <__aeabi_dsub>
 80120bc:	0002      	movs	r2, r0
 80120be:	000b      	movs	r3, r1
 80120c0:	0010      	movs	r0, r2
 80120c2:	0019      	movs	r1, r3
 80120c4:	2200      	movs	r2, #0
 80120c6:	4b34      	ldr	r3, [pc, #208]	@ (8012198 <SetVOCindicator+0x1c0>)
 80120c8:	f7f0 f80a 	bl	80020e0 <__aeabi_ddiv>
 80120cc:	0002      	movs	r2, r0
 80120ce:	000b      	movs	r3, r1
 80120d0:	0014      	movs	r4, r2
 80120d2:	001d      	movs	r5, r3
 80120d4:	4b2c      	ldr	r3, [pc, #176]	@ (8012188 <SetVOCindicator+0x1b0>)
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	0018      	movs	r0, r3
 80120da:	f7f1 fb89 	bl	80037f0 <__aeabi_i2d>
 80120de:	0002      	movs	r2, r0
 80120e0:	000b      	movs	r3, r1
 80120e2:	0020      	movs	r0, r4
 80120e4:	0029      	movs	r1, r5
 80120e6:	f7f0 fc35 	bl	8002954 <__aeabi_dmul>
 80120ea:	0002      	movs	r2, r0
 80120ec:	000b      	movs	r3, r1
 80120ee:	0010      	movs	r0, r2
 80120f0:	0019      	movs	r1, r3
 80120f2:	f7ee faab 	bl	800064c <__aeabi_d2uiz>
 80120f6:	0003      	movs	r3, r0
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	4b24      	ldr	r3, [pc, #144]	@ (801218c <SetVOCindicator+0x1b4>)
 80120fc:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 80120fe:	1dbb      	adds	r3, r7, #6
 8012100:	881b      	ldrh	r3, [r3, #0]
 8012102:	0018      	movs	r0, r3
 8012104:	f7f1 fb74 	bl	80037f0 <__aeabi_i2d>
 8012108:	2200      	movs	r2, #0
 801210a:	4b1d      	ldr	r3, [pc, #116]	@ (8012180 <SetVOCindicator+0x1a8>)
 801210c:	f7f0 ff08 	bl	8002f20 <__aeabi_dsub>
 8012110:	0002      	movs	r2, r0
 8012112:	000b      	movs	r3, r1
 8012114:	0010      	movs	r0, r2
 8012116:	0019      	movs	r1, r3
 8012118:	2200      	movs	r2, #0
 801211a:	4b1f      	ldr	r3, [pc, #124]	@ (8012198 <SetVOCindicator+0x1c0>)
 801211c:	f7ef ffe0 	bl	80020e0 <__aeabi_ddiv>
 8012120:	0002      	movs	r2, r0
 8012122:	000b      	movs	r3, r1
 8012124:	2000      	movs	r0, #0
 8012126:	4917      	ldr	r1, [pc, #92]	@ (8012184 <SetVOCindicator+0x1ac>)
 8012128:	f7f0 fefa 	bl	8002f20 <__aeabi_dsub>
 801212c:	0002      	movs	r2, r0
 801212e:	000b      	movs	r3, r1
 8012130:	0014      	movs	r4, r2
 8012132:	001d      	movs	r5, r3
 8012134:	4b14      	ldr	r3, [pc, #80]	@ (8012188 <SetVOCindicator+0x1b0>)
 8012136:	881b      	ldrh	r3, [r3, #0]
 8012138:	0018      	movs	r0, r3
 801213a:	f7f1 fb59 	bl	80037f0 <__aeabi_i2d>
 801213e:	0002      	movs	r2, r0
 8012140:	000b      	movs	r3, r1
 8012142:	0020      	movs	r0, r4
 8012144:	0029      	movs	r1, r5
 8012146:	f7f0 fc05 	bl	8002954 <__aeabi_dmul>
 801214a:	0002      	movs	r2, r0
 801214c:	000b      	movs	r3, r1
 801214e:	0010      	movs	r0, r2
 8012150:	0019      	movs	r1, r3
 8012152:	f7ee fa7b 	bl	800064c <__aeabi_d2uiz>
 8012156:	0003      	movs	r3, r0
 8012158:	b29a      	uxth	r2, r3
 801215a:	4b0e      	ldr	r3, [pc, #56]	@ (8012194 <SetVOCindicator+0x1bc>)
 801215c:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 801215e:	4b0a      	ldr	r3, [pc, #40]	@ (8012188 <SetVOCindicator+0x1b0>)
 8012160:	881a      	ldrh	r2, [r3, #0]
 8012162:	4b0b      	ldr	r3, [pc, #44]	@ (8012190 <SetVOCindicator+0x1b8>)
 8012164:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012166:	4b0b      	ldr	r3, [pc, #44]	@ (8012194 <SetVOCindicator+0x1bc>)
 8012168:	8818      	ldrh	r0, [r3, #0]
 801216a:	4b08      	ldr	r3, [pc, #32]	@ (801218c <SetVOCindicator+0x1b4>)
 801216c:	8819      	ldrh	r1, [r3, #0]
 801216e:	4b08      	ldr	r3, [pc, #32]	@ (8012190 <SetVOCindicator+0x1b8>)
 8012170:	881b      	ldrh	r3, [r3, #0]
 8012172:	001a      	movs	r2, r3
 8012174:	f7ff fd34 	bl	8011be0 <SetVocLED>
  }

}
 8012178:	46c0      	nop			@ (mov r8, r8)
 801217a:	46bd      	mov	sp, r7
 801217c:	b002      	add	sp, #8
 801217e:	bdb0      	pop	{r4, r5, r7, pc}
 8012180:	40590000 	.word	0x40590000
 8012184:	3ff00000 	.word	0x3ff00000
 8012188:	200000de 	.word	0x200000de
 801218c:	20001e72 	.word	0x20001e72
 8012190:	20001e74 	.word	0x20001e74
 8012194:	20001e76 	.word	0x20001e76
 8012198:	40790000 	.word	0x40790000

0801219c <powerCheck>:

Battery_Status powerCheck(){
 801219c:	b590      	push	{r4, r7, lr}
 801219e:	b083      	sub	sp, #12
 80121a0:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 80121a2:	f7f7 f8ab 	bl	80092fc <Check_USB_PowerOn>
 80121a6:	0003      	movs	r3, r0
 80121a8:	001a      	movs	r2, r3
 80121aa:	2301      	movs	r3, #1
 80121ac:	4053      	eors	r3, r2
 80121ae:	b2db      	uxtb	r3, r3
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d005      	beq.n	80121c0 <powerCheck+0x24>
    status = batteryChargeCheck();
 80121b4:	1dfc      	adds	r4, r7, #7
 80121b6:	f7ff fbf3 	bl	80119a0 <batteryChargeCheck>
 80121ba:	0003      	movs	r3, r0
 80121bc:	7023      	strb	r3, [r4, #0]
 80121be:	e002      	b.n	80121c6 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 80121c0:	1dfb      	adds	r3, r7, #7
 80121c2:	2204      	movs	r2, #4
 80121c4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80121c6:	1dfb      	adds	r3, r7, #7
 80121c8:	781b      	ldrb	r3, [r3, #0]
}
 80121ca:	0018      	movs	r0, r3
 80121cc:	46bd      	mov	sp, r7
 80121ce:	b003      	add	sp, #12
 80121d0:	bd90      	pop	{r4, r7, pc}
	...

080121d4 <powerDisplay>:

void powerDisplay(Battery_Status status){
 80121d4:	b5b0      	push	{r4, r5, r7, lr}
 80121d6:	b086      	sub	sp, #24
 80121d8:	af04      	add	r7, sp, #16
 80121da:	0002      	movs	r2, r0
 80121dc:	1dfb      	adds	r3, r7, #7
 80121de:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 80121e0:	1dfb      	adds	r3, r7, #7
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	2b04      	cmp	r3, #4
 80121e6:	d114      	bne.n	8012212 <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar %dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 80121e8:	f7f6 ffd2 	bl	8009190 <ReadBatteryVoltage>
 80121ec:	1c03      	adds	r3, r0, #0
 80121ee:	1c18      	adds	r0, r3, #0
 80121f0:	f7f1 fb50 	bl	8003894 <__aeabi_f2d>
 80121f4:	0004      	movs	r4, r0
 80121f6:	000d      	movs	r5, r1
 80121f8:	f7f7 f82c 	bl	8009254 <ReadSolarVoltage>
 80121fc:	0003      	movs	r3, r0
 80121fe:	0019      	movs	r1, r3
 8012200:	4a1a      	ldr	r2, [pc, #104]	@ (801226c <powerDisplay+0x98>)
 8012202:	4b1b      	ldr	r3, [pc, #108]	@ (8012270 <powerDisplay+0x9c>)
 8012204:	9102      	str	r1, [sp, #8]
 8012206:	9400      	str	r4, [sp, #0]
 8012208:	9501      	str	r5, [sp, #4]
 801220a:	0019      	movs	r1, r3
 801220c:	2003      	movs	r0, #3
 801220e:	f000 ff4b 	bl	80130a8 <CreateLine>
  }
  if(status == BATTERY_FULL){
 8012212:	1dfb      	adds	r3, r7, #7
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	2b03      	cmp	r3, #3
 8012218:	d105      	bne.n	8012226 <powerDisplay+0x52>
    Debug("Battery fully charged");
 801221a:	4a16      	ldr	r2, [pc, #88]	@ (8012274 <powerDisplay+0xa0>)
 801221c:	4b14      	ldr	r3, [pc, #80]	@ (8012270 <powerDisplay+0x9c>)
 801221e:	0019      	movs	r1, r3
 8012220:	2003      	movs	r0, #3
 8012222:	f000 ff41 	bl	80130a8 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8012226:	1dfb      	adds	r3, r7, #7
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	2b02      	cmp	r3, #2
 801222c:	d105      	bne.n	801223a <powerDisplay+0x66>
    Debug("Battery charge is doing well");
 801222e:	4a12      	ldr	r2, [pc, #72]	@ (8012278 <powerDisplay+0xa4>)
 8012230:	4b0f      	ldr	r3, [pc, #60]	@ (8012270 <powerDisplay+0x9c>)
 8012232:	0019      	movs	r1, r3
 8012234:	2003      	movs	r0, #3
 8012236:	f000 ff37 	bl	80130a8 <CreateLine>
  }
  if(status == BATTERY_LOW){
 801223a:	1dfb      	adds	r3, r7, #7
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	2b01      	cmp	r3, #1
 8012240:	d105      	bne.n	801224e <powerDisplay+0x7a>
    Debug("Battery is getting low");
 8012242:	4a0e      	ldr	r2, [pc, #56]	@ (801227c <powerDisplay+0xa8>)
 8012244:	4b0a      	ldr	r3, [pc, #40]	@ (8012270 <powerDisplay+0x9c>)
 8012246:	0019      	movs	r1, r3
 8012248:	2003      	movs	r0, #3
 801224a:	f000 ff2d 	bl	80130a8 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 801224e:	1dfb      	adds	r3, r7, #7
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d105      	bne.n	8012262 <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 8012256:	4a0a      	ldr	r2, [pc, #40]	@ (8012280 <powerDisplay+0xac>)
 8012258:	4b05      	ldr	r3, [pc, #20]	@ (8012270 <powerDisplay+0x9c>)
 801225a:	0019      	movs	r1, r3
 801225c:	2003      	movs	r0, #3
 801225e:	f000 ff23 	bl	80130a8 <CreateLine>
  }
}
 8012262:	46c0      	nop			@ (mov r8, r8)
 8012264:	46bd      	mov	sp, r7
 8012266:	b002      	add	sp, #8
 8012268:	bdb0      	pop	{r4, r5, r7, pc}
 801226a:	46c0      	nop			@ (mov r8, r8)
 801226c:	0802d150 	.word	0x0802d150
 8012270:	0802d190 	.word	0x0802d190
 8012274:	0802d194 	.word	0x0802d194
 8012278:	0802d1ac 	.word	0x0802d1ac
 801227c:	0802d1cc 	.word	0x0802d1cc
 8012280:	0802d1e4 	.word	0x0802d1e4

08012284 <configCheck>:

void configCheck(){
 8012284:	b590      	push	{r4, r7, lr}
 8012286:	b083      	sub	sp, #12
 8012288:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 801228a:	f7f7 f846 	bl	800931a <BootButton_Pressed>
 801228e:	1e03      	subs	r3, r0, #0
 8012290:	d007      	beq.n	80122a2 <configCheck+0x1e>
 8012292:	f7f7 f853 	bl	800933c <UserButton_Pressed>
 8012296:	1e03      	subs	r3, r0, #0
 8012298:	d003      	beq.n	80122a2 <configCheck+0x1e>
    configSet = true;
 801229a:	4bb5      	ldr	r3, [pc, #724]	@ (8012570 <configCheck+0x2ec>)
 801229c:	2201      	movs	r2, #1
 801229e:	701a      	strb	r2, [r3, #0]
 80122a0:	e00a      	b.n	80122b8 <configCheck+0x34>
  }
  else{
    configSet = false;
 80122a2:	4bb3      	ldr	r3, [pc, #716]	@ (8012570 <configCheck+0x2ec>)
 80122a4:	2200      	movs	r2, #0
 80122a6:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 80122a8:	f001 fc3e 	bl	8013b28 <HAL_GetTick>
 80122ac:	0003      	movs	r3, r0
 80122ae:	22fa      	movs	r2, #250	@ 0xfa
 80122b0:	00d2      	lsls	r2, r2, #3
 80122b2:	189a      	adds	r2, r3, r2
 80122b4:	4baf      	ldr	r3, [pc, #700]	@ (8012574 <configCheck+0x2f0>)
 80122b6:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 80122b8:	4bad      	ldr	r3, [pc, #692]	@ (8012570 <configCheck+0x2ec>)
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d00d      	beq.n	80122dc <configCheck+0x58>
 80122c0:	4bac      	ldr	r3, [pc, #688]	@ (8012574 <configCheck+0x2f0>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	0018      	movs	r0, r3
 80122c6:	f000 fe99 	bl	8012ffc <TimestampIsReached>
 80122ca:	1e03      	subs	r3, r0, #0
 80122cc:	d006      	beq.n	80122dc <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 80122ce:	f7f2 fdb5 	bl	8004e3c <SetConfigMode>
    SetDBLED(true, true, true);
 80122d2:	2201      	movs	r2, #1
 80122d4:	2101      	movs	r1, #1
 80122d6:	2001      	movs	r0, #1
 80122d8:	f7ff fc38 	bl	8011b4c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 80122dc:	f7f7 f81d 	bl	800931a <BootButton_Pressed>
 80122e0:	0003      	movs	r3, r0
 80122e2:	001a      	movs	r2, r3
 80122e4:	2301      	movs	r3, #1
 80122e6:	4053      	eors	r3, r2
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d05a      	beq.n	80123a4 <configCheck+0x120>
 80122ee:	f7f7 f825 	bl	800933c <UserButton_Pressed>
 80122f2:	1e03      	subs	r3, r0, #0
 80122f4:	d056      	beq.n	80123a4 <configCheck+0x120>
 80122f6:	4ba0      	ldr	r3, [pc, #640]	@ (8012578 <configCheck+0x2f4>)
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	2201      	movs	r2, #1
 80122fc:	4053      	eors	r3, r2
 80122fe:	b2db      	uxtb	r3, r3
 8012300:	2b00      	cmp	r3, #0
 8012302:	d04f      	beq.n	80123a4 <configCheck+0x120>
 8012304:	f7f2 fdba 	bl	8004e7c <GetReconfigMode>
 8012308:	0003      	movs	r3, r0
 801230a:	001a      	movs	r2, r3
 801230c:	2301      	movs	r3, #1
 801230e:	4053      	eors	r3, r2
 8012310:	b2db      	uxtb	r3, r3
 8012312:	2b00      	cmp	r3, #0
 8012314:	d046      	beq.n	80123a4 <configCheck+0x120>
    SetLEDsOff();
 8012316:	f7ff fda3 	bl	8011e60 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 801231a:	4a98      	ldr	r2, [pc, #608]	@ (801257c <configCheck+0x2f8>)
 801231c:	4997      	ldr	r1, [pc, #604]	@ (801257c <configCheck+0x2f8>)
 801231e:	4b97      	ldr	r3, [pc, #604]	@ (801257c <configCheck+0x2f8>)
 8012320:	0018      	movs	r0, r3
 8012322:	f7ff fc5d 	bl	8011be0 <SetVocLED>
    HAL_Delay(1500);
 8012326:	4b96      	ldr	r3, [pc, #600]	@ (8012580 <configCheck+0x2fc>)
 8012328:	0018      	movs	r0, r3
 801232a:	f001 fc07 	bl	8013b3c <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 801232e:	23fa      	movs	r3, #250	@ 0xfa
 8012330:	011a      	lsls	r2, r3, #4
 8012332:	23fa      	movs	r3, #250	@ 0xfa
 8012334:	0119      	lsls	r1, r3, #4
 8012336:	23fa      	movs	r3, #250	@ 0xfa
 8012338:	011b      	lsls	r3, r3, #4
 801233a:	0018      	movs	r0, r3
 801233c:	f7ff fc50 	bl	8011be0 <SetVocLED>
    userToggle = !userToggle;
 8012340:	4b90      	ldr	r3, [pc, #576]	@ (8012584 <configCheck+0x300>)
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	1e5a      	subs	r2, r3, #1
 8012346:	4193      	sbcs	r3, r2
 8012348:	b2db      	uxtb	r3, r3
 801234a:	2201      	movs	r2, #1
 801234c:	4053      	eors	r3, r2
 801234e:	b2db      	uxtb	r3, r3
 8012350:	1c1a      	adds	r2, r3, #0
 8012352:	2301      	movs	r3, #1
 8012354:	4013      	ands	r3, r2
 8012356:	b2da      	uxtb	r2, r3
 8012358:	4b8a      	ldr	r3, [pc, #552]	@ (8012584 <configCheck+0x300>)
 801235a:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 801235c:	4b89      	ldr	r3, [pc, #548]	@ (8012584 <configCheck+0x300>)
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d002      	beq.n	801236a <configCheck+0xe6>
      EnabledConnectedDevices();
 8012364:	f7fa fec4 	bl	800d0f0 <EnabledConnectedDevices>
 8012368:	e004      	b.n	8012374 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 801236a:	f001 fbdd 	bl	8013b28 <HAL_GetTick>
 801236e:	0002      	movs	r2, r0
 8012370:	4b85      	ldr	r3, [pc, #532]	@ (8012588 <configCheck+0x304>)
 8012372:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8012374:	4b83      	ldr	r3, [pc, #524]	@ (8012584 <configCheck+0x300>)
 8012376:	781b      	ldrb	r3, [r3, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d001      	beq.n	8012380 <configCheck+0xfc>
 801237c:	4b83      	ldr	r3, [pc, #524]	@ (801258c <configCheck+0x308>)
 801237e:	e000      	b.n	8012382 <configCheck+0xfe>
 8012380:	4b83      	ldr	r3, [pc, #524]	@ (8012590 <configCheck+0x30c>)
 8012382:	4a84      	ldr	r2, [pc, #528]	@ (8012594 <configCheck+0x310>)
 8012384:	4984      	ldr	r1, [pc, #528]	@ (8012598 <configCheck+0x314>)
 8012386:	2003      	movs	r0, #3
 8012388:	f000 fe8e 	bl	80130a8 <CreateLine>
    userbuttonHeld = true;
 801238c:	4b7a      	ldr	r3, [pc, #488]	@ (8012578 <configCheck+0x2f4>)
 801238e:	2201      	movs	r2, #1
 8012390:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 8012392:	f001 fbc9 	bl	8013b28 <HAL_GetTick>
 8012396:	0003      	movs	r3, r0
 8012398:	22fa      	movs	r2, #250	@ 0xfa
 801239a:	00d2      	lsls	r2, r2, #3
 801239c:	189a      	adds	r2, r3, r2
 801239e:	4b7f      	ldr	r3, [pc, #508]	@ (801259c <configCheck+0x318>)
 80123a0:	601a      	str	r2, [r3, #0]
 80123a2:	e002      	b.n	80123aa <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 80123a4:	4b74      	ldr	r3, [pc, #464]	@ (8012578 <configCheck+0x2f4>)
 80123a6:	2200      	movs	r2, #0
 80123a8:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 80123aa:	f7f6 ffb6 	bl	800931a <BootButton_Pressed>
 80123ae:	0003      	movs	r3, r0
 80123b0:	001a      	movs	r2, r3
 80123b2:	2301      	movs	r3, #1
 80123b4:	4053      	eors	r3, r2
 80123b6:	b2db      	uxtb	r3, r3
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d100      	bne.n	80123be <configCheck+0x13a>
 80123bc:	e0a4      	b.n	8012508 <configCheck+0x284>
 80123be:	4b6e      	ldr	r3, [pc, #440]	@ (8012578 <configCheck+0x2f4>)
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d100      	bne.n	80123c8 <configCheck+0x144>
 80123c6:	e09f      	b.n	8012508 <configCheck+0x284>
 80123c8:	4b74      	ldr	r3, [pc, #464]	@ (801259c <configCheck+0x318>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	0018      	movs	r0, r3
 80123ce:	f000 fe15 	bl	8012ffc <TimestampIsReached>
 80123d2:	1e03      	subs	r3, r0, #0
 80123d4:	d100      	bne.n	80123d8 <configCheck+0x154>
 80123d6:	e097      	b.n	8012508 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80123d8:	f7fa fa90 	bl	800c8fc <GetPMSensorPresence>
 80123dc:	1e03      	subs	r3, r0, #0
 80123de:	d100      	bne.n	80123e2 <configCheck+0x15e>
 80123e0:	e082      	b.n	80124e8 <configCheck+0x264>
 80123e2:	4b6f      	ldr	r3, [pc, #444]	@ (80125a0 <configCheck+0x31c>)
 80123e4:	791b      	ldrb	r3, [r3, #4]
 80123e6:	2b34      	cmp	r3, #52	@ 0x34
 80123e8:	d004      	beq.n	80123f4 <configCheck+0x170>
 80123ea:	4b6d      	ldr	r3, [pc, #436]	@ (80125a0 <configCheck+0x31c>)
 80123ec:	791b      	ldrb	r3, [r3, #4]
 80123ee:	2b35      	cmp	r3, #53	@ 0x35
 80123f0:	d000      	beq.n	80123f4 <configCheck+0x170>
 80123f2:	e079      	b.n	80124e8 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 80123f4:	4b6b      	ldr	r3, [pc, #428]	@ (80125a4 <configCheck+0x320>)
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	1e5a      	subs	r2, r3, #1
 80123fa:	4193      	sbcs	r3, r2
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	2201      	movs	r2, #1
 8012400:	4053      	eors	r3, r2
 8012402:	b2db      	uxtb	r3, r3
 8012404:	1c1a      	adds	r2, r3, #0
 8012406:	2301      	movs	r3, #1
 8012408:	4013      	ands	r3, r2
 801240a:	b2da      	uxtb	r2, r3
 801240c:	4b65      	ldr	r3, [pc, #404]	@ (80125a4 <configCheck+0x320>)
 801240e:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 8012410:	4b64      	ldr	r3, [pc, #400]	@ (80125a4 <configCheck+0x320>)
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d005      	beq.n	8012424 <configCheck+0x1a0>
 8012418:	1dbc      	adds	r4, r7, #6
 801241a:	f7ff fb1b 	bl	8011a54 <Calculate_LED_ON>
 801241e:	0003      	movs	r3, r0
 8012420:	8023      	strh	r3, [r4, #0]
 8012422:	e003      	b.n	801242c <configCheck+0x1a8>
        else color = 4000;
 8012424:	1dbb      	adds	r3, r7, #6
 8012426:	22fa      	movs	r2, #250	@ 0xfa
 8012428:	0112      	lsls	r2, r2, #4
 801242a:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 801242c:	4b5d      	ldr	r3, [pc, #372]	@ (80125a4 <configCheck+0x320>)
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d001      	beq.n	8012438 <configCheck+0x1b4>
 8012434:	4b5c      	ldr	r3, [pc, #368]	@ (80125a8 <configCheck+0x324>)
 8012436:	e000      	b.n	801243a <configCheck+0x1b6>
 8012438:	4b5c      	ldr	r3, [pc, #368]	@ (80125ac <configCheck+0x328>)
 801243a:	4a5d      	ldr	r2, [pc, #372]	@ (80125b0 <configCheck+0x32c>)
 801243c:	495d      	ldr	r1, [pc, #372]	@ (80125b4 <configCheck+0x330>)
 801243e:	2002      	movs	r0, #2
 8012440:	f000 fe32 	bl	80130a8 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 8012444:	1d7b      	adds	r3, r7, #5
 8012446:	2200      	movs	r2, #0
 8012448:	701a      	strb	r2, [r3, #0]
 801244a:	e028      	b.n	801249e <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 801244c:	f7ff fb02 	bl	8011a54 <Calculate_LED_ON>
 8012450:	0003      	movs	r3, r0
 8012452:	001a      	movs	r2, r3
 8012454:	4b58      	ldr	r3, [pc, #352]	@ (80125b8 <configCheck+0x334>)
 8012456:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8012458:	4b57      	ldr	r3, [pc, #348]	@ (80125b8 <configCheck+0x334>)
 801245a:	1dba      	adds	r2, r7, #6
 801245c:	8812      	ldrh	r2, [r2, #0]
 801245e:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 8012460:	4b55      	ldr	r3, [pc, #340]	@ (80125b8 <configCheck+0x334>)
 8012462:	1dba      	adds	r2, r7, #6
 8012464:	8812      	ldrh	r2, [r2, #0]
 8012466:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8012468:	23c8      	movs	r3, #200	@ 0xc8
 801246a:	005b      	lsls	r3, r3, #1
 801246c:	0018      	movs	r0, r3
 801246e:	f001 fb65 	bl	8013b3c <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 8012472:	4b51      	ldr	r3, [pc, #324]	@ (80125b8 <configCheck+0x334>)
 8012474:	22fa      	movs	r2, #250	@ 0xfa
 8012476:	0112      	lsls	r2, r2, #4
 8012478:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 801247a:	4b4f      	ldr	r3, [pc, #316]	@ (80125b8 <configCheck+0x334>)
 801247c:	22fa      	movs	r2, #250	@ 0xfa
 801247e:	0112      	lsls	r2, r2, #4
 8012480:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 8012482:	4b4d      	ldr	r3, [pc, #308]	@ (80125b8 <configCheck+0x334>)
 8012484:	22fa      	movs	r2, #250	@ 0xfa
 8012486:	0112      	lsls	r2, r2, #4
 8012488:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 801248a:	23c8      	movs	r3, #200	@ 0xc8
 801248c:	005b      	lsls	r3, r3, #1
 801248e:	0018      	movs	r0, r3
 8012490:	f001 fb54 	bl	8013b3c <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8012494:	1d7b      	adds	r3, r7, #5
 8012496:	781a      	ldrb	r2, [r3, #0]
 8012498:	1d7b      	adds	r3, r7, #5
 801249a:	3201      	adds	r2, #1
 801249c:	701a      	strb	r2, [r3, #0]
 801249e:	1d7b      	adds	r3, r7, #5
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	d9d2      	bls.n	801244c <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 80124a6:	4b37      	ldr	r3, [pc, #220]	@ (8012584 <configCheck+0x300>)
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	1e5a      	subs	r2, r3, #1
 80124ac:	4193      	sbcs	r3, r2
 80124ae:	b2db      	uxtb	r3, r3
 80124b0:	2201      	movs	r2, #1
 80124b2:	4053      	eors	r3, r2
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	1c1a      	adds	r2, r3, #0
 80124b8:	2301      	movs	r3, #1
 80124ba:	4013      	ands	r3, r2
 80124bc:	b2da      	uxtb	r2, r3
 80124be:	4b31      	ldr	r3, [pc, #196]	@ (8012584 <configCheck+0x300>)
 80124c0:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 80124c2:	4b30      	ldr	r3, [pc, #192]	@ (8012584 <configCheck+0x300>)
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d001      	beq.n	80124ce <configCheck+0x24a>
 80124ca:	4b37      	ldr	r3, [pc, #220]	@ (80125a8 <configCheck+0x324>)
 80124cc:	e000      	b.n	80124d0 <configCheck+0x24c>
 80124ce:	4b37      	ldr	r3, [pc, #220]	@ (80125ac <configCheck+0x328>)
 80124d0:	4a3a      	ldr	r2, [pc, #232]	@ (80125bc <configCheck+0x338>)
 80124d2:	4938      	ldr	r1, [pc, #224]	@ (80125b4 <configCheck+0x330>)
 80124d4:	2002      	movs	r0, #2
 80124d6:	f000 fde7 	bl	80130a8 <CreateLine>
      if (usbPluggedIn) {
 80124da:	4b39      	ldr	r3, [pc, #228]	@ (80125c0 <configCheck+0x33c>)
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d009      	beq.n	80124f6 <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 80124e2:	f7fb ffbd 	bl	800e460 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80124e6:	e006      	b.n	80124f6 <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 80124e8:	4a36      	ldr	r2, [pc, #216]	@ (80125c4 <configCheck+0x340>)
 80124ea:	4b32      	ldr	r3, [pc, #200]	@ (80125b4 <configCheck+0x330>)
 80124ec:	0019      	movs	r1, r3
 80124ee:	2002      	movs	r0, #2
 80124f0:	f000 fdda 	bl	80130a8 <CreateLine>
 80124f4:	e000      	b.n	80124f8 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80124f6:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 80124f8:	46c0      	nop			@ (mov r8, r8)
 80124fa:	f7f6 ff1f 	bl	800933c <UserButton_Pressed>
 80124fe:	1e03      	subs	r3, r0, #0
 8012500:	d1fb      	bne.n	80124fa <configCheck+0x276>
    }
    userbuttonHeld = false;
 8012502:	4b1d      	ldr	r3, [pc, #116]	@ (8012578 <configCheck+0x2f4>)
 8012504:	2200      	movs	r2, #0
 8012506:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8012508:	f7f6 ff07 	bl	800931a <BootButton_Pressed>
 801250c:	0003      	movs	r3, r0
 801250e:	001a      	movs	r2, r3
 8012510:	2301      	movs	r3, #1
 8012512:	4053      	eors	r3, r2
 8012514:	b2db      	uxtb	r3, r3
 8012516:	2b00      	cmp	r3, #0
 8012518:	d00b      	beq.n	8012532 <configCheck+0x2ae>
 801251a:	f7f6 ff0f 	bl	800933c <UserButton_Pressed>
 801251e:	0003      	movs	r3, r0
 8012520:	001a      	movs	r2, r3
 8012522:	2301      	movs	r3, #1
 8012524:	4053      	eors	r3, r2
 8012526:	b2db      	uxtb	r3, r3
 8012528:	2b00      	cmp	r3, #0
 801252a:	d002      	beq.n	8012532 <configCheck+0x2ae>
    userbuttonHeld = false;
 801252c:	4b12      	ldr	r3, [pc, #72]	@ (8012578 <configCheck+0x2f4>)
 801252e:	2200      	movs	r2, #0
 8012530:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 8012532:	f7f6 fee3 	bl	80092fc <Check_USB_PowerOn>
 8012536:	1e03      	subs	r3, r0, #0
 8012538:	d003      	beq.n	8012542 <configCheck+0x2be>
    usbPluggedIn = true;
 801253a:	4b21      	ldr	r3, [pc, #132]	@ (80125c0 <configCheck+0x33c>)
 801253c:	2201      	movs	r2, #1
 801253e:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 8012540:	e012      	b.n	8012568 <configCheck+0x2e4>
    if(!userToggle && !init){
 8012542:	4b10      	ldr	r3, [pc, #64]	@ (8012584 <configCheck+0x300>)
 8012544:	781b      	ldrb	r3, [r3, #0]
 8012546:	2201      	movs	r2, #1
 8012548:	4053      	eors	r3, r2
 801254a:	b2db      	uxtb	r3, r3
 801254c:	2b00      	cmp	r3, #0
 801254e:	d008      	beq.n	8012562 <configCheck+0x2de>
 8012550:	4b1d      	ldr	r3, [pc, #116]	@ (80125c8 <configCheck+0x344>)
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	2201      	movs	r2, #1
 8012556:	4053      	eors	r3, r2
 8012558:	b2db      	uxtb	r3, r3
 801255a:	2b00      	cmp	r3, #0
 801255c:	d001      	beq.n	8012562 <configCheck+0x2de>
      SetLEDsOff();
 801255e:	f7ff fc7f 	bl	8011e60 <SetLEDsOff>
    usbPluggedIn = false;
 8012562:	4b17      	ldr	r3, [pc, #92]	@ (80125c0 <configCheck+0x33c>)
 8012564:	2200      	movs	r2, #0
 8012566:	701a      	strb	r2, [r3, #0]
}
 8012568:	46c0      	nop			@ (mov r8, r8)
 801256a:	46bd      	mov	sp, r7
 801256c:	b003      	add	sp, #12
 801256e:	bd90      	pop	{r4, r7, pc}
 8012570:	20001e5c 	.word	0x20001e5c
 8012574:	20001e64 	.word	0x20001e64
 8012578:	20001e5f 	.word	0x20001e5f
 801257c:	00000bb8 	.word	0x00000bb8
 8012580:	000005dc 	.word	0x000005dc
 8012584:	20001e5e 	.word	0x20001e5e
 8012588:	20000e24 	.word	0x20000e24
 801258c:	0802d208 	.word	0x0802d208
 8012590:	0802d20c 	.word	0x0802d20c
 8012594:	0802d210 	.word	0x0802d210
 8012598:	0802d190 	.word	0x0802d190
 801259c:	20001e68 	.word	0x20001e68
 80125a0:	20000ed0 	.word	0x20000ed0
 80125a4:	20000ece 	.word	0x20000ece
 80125a8:	0802d230 	.word	0x0802d230
 80125ac:	0802d238 	.word	0x0802d238
 80125b0:	0802d244 	.word	0x0802d244
 80125b4:	0802d264 	.word	0x0802d264
 80125b8:	40000400 	.word	0x40000400
 80125bc:	0802d268 	.word	0x0802d268
 80125c0:	20001e5d 	.word	0x20001e5d
 80125c4:	0802d280 	.word	0x0802d280
 80125c8:	200000dc 	.word	0x200000dc

080125cc <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 80125cc:	b590      	push	{r4, r7, lr}
 80125ce:	b083      	sub	sp, #12
 80125d0:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 80125d2:	1dfc      	adds	r4, r7, #7
 80125d4:	f7ff fde2 	bl	801219c <powerCheck>
 80125d8:	0003      	movs	r3, r0
 80125da:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 80125dc:	1dfb      	adds	r3, r7, #7
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	0018      	movs	r0, r3
 80125e2:	f7ff fdf7 	bl	80121d4 <powerDisplay>
  return status;
 80125e6:	1dfb      	adds	r3, r7, #7
 80125e8:	781b      	ldrb	r3, [r3, #0]
}
 80125ea:	0018      	movs	r0, r3
 80125ec:	46bd      	mov	sp, r7
 80125ee:	b003      	add	sp, #12
 80125f0:	bd90      	pop	{r4, r7, pc}
	...

080125f4 <setuserToggle>:

void setuserToggle(void) {
 80125f4:	b580      	push	{r7, lr}
 80125f6:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 80125f8:	f7ff fdd0 	bl	801219c <powerCheck>
 80125fc:	0003      	movs	r3, r0
 80125fe:	2b04      	cmp	r3, #4
 8012600:	d004      	beq.n	801260c <setuserToggle+0x18>
    userToggle = true;
 8012602:	4b04      	ldr	r3, [pc, #16]	@ (8012614 <setuserToggle+0x20>)
 8012604:	2201      	movs	r2, #1
 8012606:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 8012608:	f7fa fd72 	bl	800d0f0 <EnabledConnectedDevices>
  }
}
 801260c:	46c0      	nop			@ (mov r8, r8)
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	46c0      	nop			@ (mov r8, r8)
 8012614:	20001e5e 	.word	0x20001e5e

08012618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801261c:	4b07      	ldr	r3, [pc, #28]	@ (801263c <HAL_MspInit+0x24>)
 801261e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012620:	4b06      	ldr	r3, [pc, #24]	@ (801263c <HAL_MspInit+0x24>)
 8012622:	2101      	movs	r1, #1
 8012624:	430a      	orrs	r2, r1
 8012626:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8012628:	4b04      	ldr	r3, [pc, #16]	@ (801263c <HAL_MspInit+0x24>)
 801262a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801262c:	4b03      	ldr	r3, [pc, #12]	@ (801263c <HAL_MspInit+0x24>)
 801262e:	2180      	movs	r1, #128	@ 0x80
 8012630:	0549      	lsls	r1, r1, #21
 8012632:	430a      	orrs	r2, r1
 8012634:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012636:	46c0      	nop			@ (mov r8, r8)
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	40021000 	.word	0x40021000

08012640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012644:	46c0      	nop			@ (mov r8, r8)
 8012646:	e7fd      	b.n	8012644 <NMI_Handler+0x4>

08012648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801264c:	46c0      	nop			@ (mov r8, r8)
 801264e:	e7fd      	b.n	801264c <HardFault_Handler+0x4>

08012650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8012654:	46c0      	nop			@ (mov r8, r8)
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}

0801265a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801265a:	b580      	push	{r7, lr}
 801265c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801265e:	46c0      	nop			@ (mov r8, r8)
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012668:	f001 fa4c 	bl	8013b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 801266c:	46c0      	nop			@ (mov r8, r8)
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
	...

08012674 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8012678:	4b03      	ldr	r3, [pc, #12]	@ (8012688 <RTC_IRQHandler+0x14>)
 801267a:	0018      	movs	r0, r3
 801267c:	f009 fa7e 	bl	801bb7c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8012680:	46c0      	nop			@ (mov r8, r8)
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	46c0      	nop			@ (mov r8, r8)
 8012688:	20000ea8 	.word	0x20000ea8

0801268c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 8012690:	2380      	movs	r3, #128	@ 0x80
 8012692:	021b      	lsls	r3, r3, #8
 8012694:	0018      	movs	r0, r3
 8012696:	f002 fcf5 	bl	8015084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 801269a:	46c0      	nop			@ (mov r8, r8)
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80126a4:	4b05      	ldr	r3, [pc, #20]	@ (80126bc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80126a6:	0018      	movs	r0, r3
 80126a8:	f002 f87d 	bl	80147a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80126ac:	4b04      	ldr	r3, [pc, #16]	@ (80126c0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80126ae:	0018      	movs	r0, r3
 80126b0:	f002 f879 	bl	80147a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80126b4:	46c0      	nop			@ (mov r8, r8)
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	46c0      	nop			@ (mov r8, r8)
 80126bc:	20000d40 	.word	0x20000d40
 80126c0:	20000cf8 	.word	0x20000cf8

080126c4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80126c8:	4b07      	ldr	r3, [pc, #28]	@ (80126e8 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80126ca:	0018      	movs	r0, r3
 80126cc:	f002 f86b 	bl	80147a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80126d0:	4b06      	ldr	r3, [pc, #24]	@ (80126ec <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80126d2:	0018      	movs	r0, r3
 80126d4:	f002 f867 	bl	80147a6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80126d8:	4b05      	ldr	r3, [pc, #20]	@ (80126f0 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80126da:	0018      	movs	r0, r3
 80126dc:	f002 f863 	bl	80147a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80126e0:	46c0      	nop			@ (mov r8, r8)
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}
 80126e6:	46c0      	nop			@ (mov r8, r8)
 80126e8:	20000dc4 	.word	0x20000dc4
 80126ec:	20002164 	.word	0x20002164
 80126f0:	200021ac 	.word	0x200021ac

080126f4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80126f8:	4b03      	ldr	r3, [pc, #12]	@ (8012708 <USART4_5_IRQHandler+0x14>)
 80126fa:	0018      	movs	r0, r3
 80126fc:	f00a f938 	bl	801c970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8012700:	46c0      	nop			@ (mov r8, r8)
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	46c0      	nop			@ (mov r8, r8)
 8012708:	200020ac 	.word	0x200020ac

0801270c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8012710:	4b09      	ldr	r3, [pc, #36]	@ (8012738 <I2C1_IRQHandler+0x2c>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	699a      	ldr	r2, [r3, #24]
 8012716:	23e0      	movs	r3, #224	@ 0xe0
 8012718:	00db      	lsls	r3, r3, #3
 801271a:	4013      	ands	r3, r2
 801271c:	d004      	beq.n	8012728 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 801271e:	4b06      	ldr	r3, [pc, #24]	@ (8012738 <I2C1_IRQHandler+0x2c>)
 8012720:	0018      	movs	r0, r3
 8012722:	f003 fbcd 	bl	8015ec0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8012726:	e003      	b.n	8012730 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8012728:	4b03      	ldr	r3, [pc, #12]	@ (8012738 <I2C1_IRQHandler+0x2c>)
 801272a:	0018      	movs	r0, r3
 801272c:	f003 fbae 	bl	8015e8c <HAL_I2C_EV_IRQHandler>
}
 8012730:	46c0      	nop			@ (mov r8, r8)
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	46c0      	nop			@ (mov r8, r8)
 8012738:	20000c50 	.word	0x20000c50

0801273c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8012740:	4b03      	ldr	r3, [pc, #12]	@ (8012750 <USART1_IRQHandler+0x14>)
 8012742:	0018      	movs	r0, r3
 8012744:	f00a f914 	bl	801c970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8012748:	46c0      	nop			@ (mov r8, r8)
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	46c0      	nop			@ (mov r8, r8)
 8012750:	20001ff4 	.word	0x20001ff4

08012754 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8012758:	4b03      	ldr	r3, [pc, #12]	@ (8012768 <USB_IRQHandler+0x14>)
 801275a:	0018      	movs	r0, r3
 801275c:	f006 f864 	bl	8018828 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8012760:	46c0      	nop			@ (mov r8, r8)
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}
 8012766:	46c0      	nop			@ (mov r8, r8)
 8012768:	20002fc8 	.word	0x20002fc8

0801276c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	af00      	add	r7, sp, #0
  return 1;
 8012770:	2301      	movs	r3, #1
}
 8012772:	0018      	movs	r0, r3
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <_kill>:

int _kill(int pid, int sig)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012782:	f013 f80b 	bl	802579c <__errno>
 8012786:	0003      	movs	r3, r0
 8012788:	2216      	movs	r2, #22
 801278a:	601a      	str	r2, [r3, #0]
  return -1;
 801278c:	2301      	movs	r3, #1
 801278e:	425b      	negs	r3, r3
}
 8012790:	0018      	movs	r0, r3
 8012792:	46bd      	mov	sp, r7
 8012794:	b002      	add	sp, #8
 8012796:	bd80      	pop	{r7, pc}

08012798 <_exit>:

void _exit (int status)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80127a0:	2301      	movs	r3, #1
 80127a2:	425a      	negs	r2, r3
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	0011      	movs	r1, r2
 80127a8:	0018      	movs	r0, r3
 80127aa:	f7ff ffe5 	bl	8012778 <_kill>
  while (1) {}    /* Make sure we hang here */
 80127ae:	46c0      	nop			@ (mov r8, r8)
 80127b0:	e7fd      	b.n	80127ae <_exit+0x16>

080127b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80127b2:	b580      	push	{r7, lr}
 80127b4:	b086      	sub	sp, #24
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	60f8      	str	r0, [r7, #12]
 80127ba:	60b9      	str	r1, [r7, #8]
 80127bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80127be:	2300      	movs	r3, #0
 80127c0:	617b      	str	r3, [r7, #20]
 80127c2:	e00a      	b.n	80127da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80127c4:	e000      	b.n	80127c8 <_read+0x16>
 80127c6:	bf00      	nop
 80127c8:	0001      	movs	r1, r0
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	1c5a      	adds	r2, r3, #1
 80127ce:	60ba      	str	r2, [r7, #8]
 80127d0:	b2ca      	uxtb	r2, r1
 80127d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	3301      	adds	r3, #1
 80127d8:	617b      	str	r3, [r7, #20]
 80127da:	697a      	ldr	r2, [r7, #20]
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	429a      	cmp	r2, r3
 80127e0:	dbf0      	blt.n	80127c4 <_read+0x12>
  }

  return len;
 80127e2:	687b      	ldr	r3, [r7, #4]
}
 80127e4:	0018      	movs	r0, r3
 80127e6:	46bd      	mov	sp, r7
 80127e8:	b006      	add	sp, #24
 80127ea:	bd80      	pop	{r7, pc}

080127ec <_close>:
  }
  return len;
}

int _close(int file)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80127f4:	2301      	movs	r3, #1
 80127f6:	425b      	negs	r3, r3
}
 80127f8:	0018      	movs	r0, r3
 80127fa:	46bd      	mov	sp, r7
 80127fc:	b002      	add	sp, #8
 80127fe:	bd80      	pop	{r7, pc}

08012800 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	2280      	movs	r2, #128	@ 0x80
 801280e:	0192      	lsls	r2, r2, #6
 8012810:	605a      	str	r2, [r3, #4]
  return 0;
 8012812:	2300      	movs	r3, #0
}
 8012814:	0018      	movs	r0, r3
 8012816:	46bd      	mov	sp, r7
 8012818:	b002      	add	sp, #8
 801281a:	bd80      	pop	{r7, pc}

0801281c <_isatty>:

int _isatty(int file)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012824:	2301      	movs	r3, #1
}
 8012826:	0018      	movs	r0, r3
 8012828:	46bd      	mov	sp, r7
 801282a:	b002      	add	sp, #8
 801282c:	bd80      	pop	{r7, pc}

0801282e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801282e:	b580      	push	{r7, lr}
 8012830:	b084      	sub	sp, #16
 8012832:	af00      	add	r7, sp, #0
 8012834:	60f8      	str	r0, [r7, #12]
 8012836:	60b9      	str	r1, [r7, #8]
 8012838:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801283a:	2300      	movs	r3, #0
}
 801283c:	0018      	movs	r0, r3
 801283e:	46bd      	mov	sp, r7
 8012840:	b004      	add	sp, #16
 8012842:	bd80      	pop	{r7, pc}

08012844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b086      	sub	sp, #24
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801284c:	4a14      	ldr	r2, [pc, #80]	@ (80128a0 <_sbrk+0x5c>)
 801284e:	4b15      	ldr	r3, [pc, #84]	@ (80128a4 <_sbrk+0x60>)
 8012850:	1ad3      	subs	r3, r2, r3
 8012852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012858:	4b13      	ldr	r3, [pc, #76]	@ (80128a8 <_sbrk+0x64>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d102      	bne.n	8012866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012860:	4b11      	ldr	r3, [pc, #68]	@ (80128a8 <_sbrk+0x64>)
 8012862:	4a12      	ldr	r2, [pc, #72]	@ (80128ac <_sbrk+0x68>)
 8012864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012866:	4b10      	ldr	r3, [pc, #64]	@ (80128a8 <_sbrk+0x64>)
 8012868:	681a      	ldr	r2, [r3, #0]
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	18d3      	adds	r3, r2, r3
 801286e:	693a      	ldr	r2, [r7, #16]
 8012870:	429a      	cmp	r2, r3
 8012872:	d207      	bcs.n	8012884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012874:	f012 ff92 	bl	802579c <__errno>
 8012878:	0003      	movs	r3, r0
 801287a:	220c      	movs	r2, #12
 801287c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801287e:	2301      	movs	r3, #1
 8012880:	425b      	negs	r3, r3
 8012882:	e009      	b.n	8012898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012884:	4b08      	ldr	r3, [pc, #32]	@ (80128a8 <_sbrk+0x64>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801288a:	4b07      	ldr	r3, [pc, #28]	@ (80128a8 <_sbrk+0x64>)
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	18d2      	adds	r2, r2, r3
 8012892:	4b05      	ldr	r3, [pc, #20]	@ (80128a8 <_sbrk+0x64>)
 8012894:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8012896:	68fb      	ldr	r3, [r7, #12]
}
 8012898:	0018      	movs	r0, r3
 801289a:	46bd      	mov	sp, r7
 801289c:	b006      	add	sp, #24
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	20005000 	.word	0x20005000
 80128a4:	00000400 	.word	0x00000400
 80128a8:	20001e78 	.word	0x20001e78
 80128ac:	20003628 	.word	0x20003628

080128b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80128b4:	46c0      	nop			@ (mov r8, r8)
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}
	...

080128bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b086      	sub	sp, #24
 80128c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80128c2:	2310      	movs	r3, #16
 80128c4:	18fb      	adds	r3, r7, r3
 80128c6:	0018      	movs	r0, r3
 80128c8:	2308      	movs	r3, #8
 80128ca:	001a      	movs	r2, r3
 80128cc:	2100      	movs	r1, #0
 80128ce:	f012 fec1 	bl	8025654 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80128d2:	003b      	movs	r3, r7
 80128d4:	0018      	movs	r0, r3
 80128d6:	2310      	movs	r3, #16
 80128d8:	001a      	movs	r2, r3
 80128da:	2100      	movs	r1, #0
 80128dc:	f012 feba 	bl	8025654 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80128e0:	4b2e      	ldr	r3, [pc, #184]	@ (801299c <MX_TIM2_Init+0xe0>)
 80128e2:	2280      	movs	r2, #128	@ 0x80
 80128e4:	05d2      	lsls	r2, r2, #23
 80128e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80128e8:	4b2c      	ldr	r3, [pc, #176]	@ (801299c <MX_TIM2_Init+0xe0>)
 80128ea:	2200      	movs	r2, #0
 80128ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80128ee:	4b2b      	ldr	r3, [pc, #172]	@ (801299c <MX_TIM2_Init+0xe0>)
 80128f0:	2200      	movs	r2, #0
 80128f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80128f4:	4b29      	ldr	r3, [pc, #164]	@ (801299c <MX_TIM2_Init+0xe0>)
 80128f6:	4a2a      	ldr	r2, [pc, #168]	@ (80129a0 <MX_TIM2_Init+0xe4>)
 80128f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80128fa:	4b28      	ldr	r3, [pc, #160]	@ (801299c <MX_TIM2_Init+0xe0>)
 80128fc:	2200      	movs	r2, #0
 80128fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012900:	4b26      	ldr	r3, [pc, #152]	@ (801299c <MX_TIM2_Init+0xe0>)
 8012902:	2200      	movs	r2, #0
 8012904:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8012906:	4b25      	ldr	r3, [pc, #148]	@ (801299c <MX_TIM2_Init+0xe0>)
 8012908:	0018      	movs	r0, r3
 801290a:	f009 fa45 	bl	801bd98 <HAL_TIM_PWM_Init>
 801290e:	1e03      	subs	r3, r0, #0
 8012910:	d001      	beq.n	8012916 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8012912:	f7f9 ffa1 	bl	800c858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012916:	2110      	movs	r1, #16
 8012918:	187b      	adds	r3, r7, r1
 801291a:	2200      	movs	r2, #0
 801291c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801291e:	187b      	adds	r3, r7, r1
 8012920:	2200      	movs	r2, #0
 8012922:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8012924:	187a      	adds	r2, r7, r1
 8012926:	4b1d      	ldr	r3, [pc, #116]	@ (801299c <MX_TIM2_Init+0xe0>)
 8012928:	0011      	movs	r1, r2
 801292a:	0018      	movs	r0, r3
 801292c:	f009 fd52 	bl	801c3d4 <HAL_TIMEx_MasterConfigSynchronization>
 8012930:	1e03      	subs	r3, r0, #0
 8012932:	d001      	beq.n	8012938 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8012934:	f7f9 ff90 	bl	800c858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012938:	003b      	movs	r3, r7
 801293a:	2260      	movs	r2, #96	@ 0x60
 801293c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 801293e:	003b      	movs	r3, r7
 8012940:	2200      	movs	r2, #0
 8012942:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012944:	003b      	movs	r3, r7
 8012946:	2200      	movs	r2, #0
 8012948:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801294a:	003b      	movs	r3, r7
 801294c:	2200      	movs	r2, #0
 801294e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012950:	0039      	movs	r1, r7
 8012952:	4b12      	ldr	r3, [pc, #72]	@ (801299c <MX_TIM2_Init+0xe0>)
 8012954:	2200      	movs	r2, #0
 8012956:	0018      	movs	r0, r3
 8012958:	f009 faf0 	bl	801bf3c <HAL_TIM_PWM_ConfigChannel>
 801295c:	1e03      	subs	r3, r0, #0
 801295e:	d001      	beq.n	8012964 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8012960:	f7f9 ff7a 	bl	800c858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012964:	0039      	movs	r1, r7
 8012966:	4b0d      	ldr	r3, [pc, #52]	@ (801299c <MX_TIM2_Init+0xe0>)
 8012968:	2208      	movs	r2, #8
 801296a:	0018      	movs	r0, r3
 801296c:	f009 fae6 	bl	801bf3c <HAL_TIM_PWM_ConfigChannel>
 8012970:	1e03      	subs	r3, r0, #0
 8012972:	d001      	beq.n	8012978 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8012974:	f7f9 ff70 	bl	800c858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012978:	0039      	movs	r1, r7
 801297a:	4b08      	ldr	r3, [pc, #32]	@ (801299c <MX_TIM2_Init+0xe0>)
 801297c:	220c      	movs	r2, #12
 801297e:	0018      	movs	r0, r3
 8012980:	f009 fadc 	bl	801bf3c <HAL_TIM_PWM_ConfigChannel>
 8012984:	1e03      	subs	r3, r0, #0
 8012986:	d001      	beq.n	801298c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8012988:	f7f9 ff66 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 801298c:	4b03      	ldr	r3, [pc, #12]	@ (801299c <MX_TIM2_Init+0xe0>)
 801298e:	0018      	movs	r0, r3
 8012990:	f000 f8fe 	bl	8012b90 <HAL_TIM_MspPostInit>

}
 8012994:	46c0      	nop			@ (mov r8, r8)
 8012996:	46bd      	mov	sp, r7
 8012998:	b006      	add	sp, #24
 801299a:	bd80      	pop	{r7, pc}
 801299c:	20001e7c 	.word	0x20001e7c
 80129a0:	0000ffff 	.word	0x0000ffff

080129a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b086      	sub	sp, #24
 80129a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80129aa:	2310      	movs	r3, #16
 80129ac:	18fb      	adds	r3, r7, r3
 80129ae:	0018      	movs	r0, r3
 80129b0:	2308      	movs	r3, #8
 80129b2:	001a      	movs	r2, r3
 80129b4:	2100      	movs	r1, #0
 80129b6:	f012 fe4d 	bl	8025654 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80129ba:	003b      	movs	r3, r7
 80129bc:	0018      	movs	r0, r3
 80129be:	2310      	movs	r3, #16
 80129c0:	001a      	movs	r2, r3
 80129c2:	2100      	movs	r1, #0
 80129c4:	f012 fe46 	bl	8025654 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80129c8:	4b32      	ldr	r3, [pc, #200]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 80129ca:	4a33      	ldr	r2, [pc, #204]	@ (8012a98 <MX_TIM3_Init+0xf4>)
 80129cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80129ce:	4b31      	ldr	r3, [pc, #196]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 80129d0:	2200      	movs	r2, #0
 80129d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80129d4:	4b2f      	ldr	r3, [pc, #188]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 80129d6:	2200      	movs	r2, #0
 80129d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80129da:	4b2e      	ldr	r3, [pc, #184]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 80129dc:	4a2f      	ldr	r2, [pc, #188]	@ (8012a9c <MX_TIM3_Init+0xf8>)
 80129de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80129e0:	4b2c      	ldr	r3, [pc, #176]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 80129e2:	2200      	movs	r2, #0
 80129e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80129e6:	4b2b      	ldr	r3, [pc, #172]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 80129e8:	2200      	movs	r2, #0
 80129ea:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80129ec:	4b29      	ldr	r3, [pc, #164]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 80129ee:	0018      	movs	r0, r3
 80129f0:	f009 f9d2 	bl	801bd98 <HAL_TIM_PWM_Init>
 80129f4:	1e03      	subs	r3, r0, #0
 80129f6:	d001      	beq.n	80129fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80129f8:	f7f9 ff2e 	bl	800c858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80129fc:	2110      	movs	r1, #16
 80129fe:	187b      	adds	r3, r7, r1
 8012a00:	2200      	movs	r2, #0
 8012a02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012a04:	187b      	adds	r3, r7, r1
 8012a06:	2200      	movs	r2, #0
 8012a08:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012a0a:	187a      	adds	r2, r7, r1
 8012a0c:	4b21      	ldr	r3, [pc, #132]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 8012a0e:	0011      	movs	r1, r2
 8012a10:	0018      	movs	r0, r3
 8012a12:	f009 fcdf 	bl	801c3d4 <HAL_TIMEx_MasterConfigSynchronization>
 8012a16:	1e03      	subs	r3, r0, #0
 8012a18:	d001      	beq.n	8012a1e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8012a1a:	f7f9 ff1d 	bl	800c858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012a1e:	003b      	movs	r3, r7
 8012a20:	2260      	movs	r2, #96	@ 0x60
 8012a22:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8012a24:	003b      	movs	r3, r7
 8012a26:	2200      	movs	r2, #0
 8012a28:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012a2a:	003b      	movs	r3, r7
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012a30:	003b      	movs	r3, r7
 8012a32:	2200      	movs	r2, #0
 8012a34:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012a36:	0039      	movs	r1, r7
 8012a38:	4b16      	ldr	r3, [pc, #88]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	0018      	movs	r0, r3
 8012a3e:	f009 fa7d 	bl	801bf3c <HAL_TIM_PWM_ConfigChannel>
 8012a42:	1e03      	subs	r3, r0, #0
 8012a44:	d001      	beq.n	8012a4a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8012a46:	f7f9 ff07 	bl	800c858 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8012a4a:	4b12      	ldr	r3, [pc, #72]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 8012a4c:	2104      	movs	r1, #4
 8012a4e:	0018      	movs	r0, r3
 8012a50:	f009 fd1e 	bl	801c490 <HAL_TIMEx_RemapConfig>
 8012a54:	1e03      	subs	r3, r0, #0
 8012a56:	d001      	beq.n	8012a5c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8012a58:	f7f9 fefe 	bl	800c858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8012a5c:	0039      	movs	r1, r7
 8012a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 8012a60:	2204      	movs	r2, #4
 8012a62:	0018      	movs	r0, r3
 8012a64:	f009 fa6a 	bl	801bf3c <HAL_TIM_PWM_ConfigChannel>
 8012a68:	1e03      	subs	r3, r0, #0
 8012a6a:	d001      	beq.n	8012a70 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8012a6c:	f7f9 fef4 	bl	800c858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012a70:	0039      	movs	r1, r7
 8012a72:	4b08      	ldr	r3, [pc, #32]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 8012a74:	2208      	movs	r2, #8
 8012a76:	0018      	movs	r0, r3
 8012a78:	f009 fa60 	bl	801bf3c <HAL_TIM_PWM_ConfigChannel>
 8012a7c:	1e03      	subs	r3, r0, #0
 8012a7e:	d001      	beq.n	8012a84 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8012a80:	f7f9 feea 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8012a84:	4b03      	ldr	r3, [pc, #12]	@ (8012a94 <MX_TIM3_Init+0xf0>)
 8012a86:	0018      	movs	r0, r3
 8012a88:	f000 f882 	bl	8012b90 <HAL_TIM_MspPostInit>

}
 8012a8c:	46c0      	nop			@ (mov r8, r8)
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	b006      	add	sp, #24
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	20001ebc 	.word	0x20001ebc
 8012a98:	40000400 	.word	0x40000400
 8012a9c:	0000ffff 	.word	0x0000ffff

08012aa0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012aa6:	003b      	movs	r3, r7
 8012aa8:	0018      	movs	r0, r3
 8012aaa:	2308      	movs	r3, #8
 8012aac:	001a      	movs	r2, r3
 8012aae:	2100      	movs	r1, #0
 8012ab0:	f012 fdd0 	bl	8025654 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8012ab4:	4b15      	ldr	r3, [pc, #84]	@ (8012b0c <MX_TIM6_Init+0x6c>)
 8012ab6:	4a16      	ldr	r2, [pc, #88]	@ (8012b10 <MX_TIM6_Init+0x70>)
 8012ab8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8012aba:	4b14      	ldr	r3, [pc, #80]	@ (8012b0c <MX_TIM6_Init+0x6c>)
 8012abc:	220a      	movs	r2, #10
 8012abe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012ac0:	4b12      	ldr	r3, [pc, #72]	@ (8012b0c <MX_TIM6_Init+0x6c>)
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8012ac6:	4b11      	ldr	r3, [pc, #68]	@ (8012b0c <MX_TIM6_Init+0x6c>)
 8012ac8:	4a12      	ldr	r2, [pc, #72]	@ (8012b14 <MX_TIM6_Init+0x74>)
 8012aca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012acc:	4b0f      	ldr	r3, [pc, #60]	@ (8012b0c <MX_TIM6_Init+0x6c>)
 8012ace:	2200      	movs	r2, #0
 8012ad0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8012ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8012b0c <MX_TIM6_Init+0x6c>)
 8012ad4:	0018      	movs	r0, r3
 8012ad6:	f009 f8b7 	bl	801bc48 <HAL_TIM_Base_Init>
 8012ada:	1e03      	subs	r3, r0, #0
 8012adc:	d001      	beq.n	8012ae2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8012ade:	f7f9 febb 	bl	800c858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012ae2:	003b      	movs	r3, r7
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012ae8:	003b      	movs	r3, r7
 8012aea:	2200      	movs	r2, #0
 8012aec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8012aee:	003a      	movs	r2, r7
 8012af0:	4b06      	ldr	r3, [pc, #24]	@ (8012b0c <MX_TIM6_Init+0x6c>)
 8012af2:	0011      	movs	r1, r2
 8012af4:	0018      	movs	r0, r3
 8012af6:	f009 fc6d 	bl	801c3d4 <HAL_TIMEx_MasterConfigSynchronization>
 8012afa:	1e03      	subs	r3, r0, #0
 8012afc:	d001      	beq.n	8012b02 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8012afe:	f7f9 feab 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8012b02:	46c0      	nop			@ (mov r8, r8)
 8012b04:	46bd      	mov	sp, r7
 8012b06:	b002      	add	sp, #8
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	46c0      	nop			@ (mov r8, r8)
 8012b0c:	20001efc 	.word	0x20001efc
 8012b10:	40001000 	.word	0x40001000
 8012b14:	0000ffff 	.word	0x0000ffff

08012b18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b082      	sub	sp, #8
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681a      	ldr	r2, [r3, #0]
 8012b24:	2380      	movs	r3, #128	@ 0x80
 8012b26:	05db      	lsls	r3, r3, #23
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	d106      	bne.n	8012b3a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8012b58 <HAL_TIM_PWM_MspInit+0x40>)
 8012b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b30:	4b09      	ldr	r3, [pc, #36]	@ (8012b58 <HAL_TIM_PWM_MspInit+0x40>)
 8012b32:	2101      	movs	r1, #1
 8012b34:	430a      	orrs	r2, r1
 8012b36:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8012b38:	e00a      	b.n	8012b50 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	4a07      	ldr	r2, [pc, #28]	@ (8012b5c <HAL_TIM_PWM_MspInit+0x44>)
 8012b40:	4293      	cmp	r3, r2
 8012b42:	d105      	bne.n	8012b50 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012b44:	4b04      	ldr	r3, [pc, #16]	@ (8012b58 <HAL_TIM_PWM_MspInit+0x40>)
 8012b46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b48:	4b03      	ldr	r3, [pc, #12]	@ (8012b58 <HAL_TIM_PWM_MspInit+0x40>)
 8012b4a:	2102      	movs	r1, #2
 8012b4c:	430a      	orrs	r2, r1
 8012b4e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012b50:	46c0      	nop			@ (mov r8, r8)
 8012b52:	46bd      	mov	sp, r7
 8012b54:	b002      	add	sp, #8
 8012b56:	bd80      	pop	{r7, pc}
 8012b58:	40021000 	.word	0x40021000
 8012b5c:	40000400 	.word	0x40000400

08012b60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b082      	sub	sp, #8
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4a06      	ldr	r2, [pc, #24]	@ (8012b88 <HAL_TIM_Base_MspInit+0x28>)
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	d105      	bne.n	8012b7e <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8012b72:	4b06      	ldr	r3, [pc, #24]	@ (8012b8c <HAL_TIM_Base_MspInit+0x2c>)
 8012b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b76:	4b05      	ldr	r3, [pc, #20]	@ (8012b8c <HAL_TIM_Base_MspInit+0x2c>)
 8012b78:	2110      	movs	r1, #16
 8012b7a:	430a      	orrs	r2, r1
 8012b7c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8012b7e:	46c0      	nop			@ (mov r8, r8)
 8012b80:	46bd      	mov	sp, r7
 8012b82:	b002      	add	sp, #8
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	46c0      	nop			@ (mov r8, r8)
 8012b88:	40001000 	.word	0x40001000
 8012b8c:	40021000 	.word	0x40021000

08012b90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8012b90:	b590      	push	{r4, r7, lr}
 8012b92:	b08b      	sub	sp, #44	@ 0x2c
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b98:	2414      	movs	r4, #20
 8012b9a:	193b      	adds	r3, r7, r4
 8012b9c:	0018      	movs	r0, r3
 8012b9e:	2314      	movs	r3, #20
 8012ba0:	001a      	movs	r2, r3
 8012ba2:	2100      	movs	r1, #0
 8012ba4:	f012 fd56 	bl	8025654 <memset>
  if(timHandle->Instance==TIM2)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	2380      	movs	r3, #128	@ 0x80
 8012bae:	05db      	lsls	r3, r3, #23
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d123      	bne.n	8012bfc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012bb4:	4b27      	ldr	r3, [pc, #156]	@ (8012c54 <HAL_TIM_MspPostInit+0xc4>)
 8012bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bb8:	4b26      	ldr	r3, [pc, #152]	@ (8012c54 <HAL_TIM_MspPostInit+0xc4>)
 8012bba:	2101      	movs	r1, #1
 8012bbc:	430a      	orrs	r2, r1
 8012bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012bc0:	4b24      	ldr	r3, [pc, #144]	@ (8012c54 <HAL_TIM_MspPostInit+0xc4>)
 8012bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	4013      	ands	r3, r2
 8012bc8:	613b      	str	r3, [r7, #16]
 8012bca:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8012bcc:	0021      	movs	r1, r4
 8012bce:	187b      	adds	r3, r7, r1
 8012bd0:	220d      	movs	r2, #13
 8012bd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012bd4:	187b      	adds	r3, r7, r1
 8012bd6:	2202      	movs	r2, #2
 8012bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012bda:	187b      	adds	r3, r7, r1
 8012bdc:	2200      	movs	r2, #0
 8012bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012be0:	187b      	adds	r3, r7, r1
 8012be2:	2200      	movs	r2, #0
 8012be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8012be6:	187b      	adds	r3, r7, r1
 8012be8:	2202      	movs	r2, #2
 8012bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012bec:	187a      	adds	r2, r7, r1
 8012bee:	23a0      	movs	r3, #160	@ 0xa0
 8012bf0:	05db      	lsls	r3, r3, #23
 8012bf2:	0011      	movs	r1, r2
 8012bf4:	0018      	movs	r0, r3
 8012bf6:	f002 f88d 	bl	8014d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8012bfa:	e027      	b.n	8012c4c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4a15      	ldr	r2, [pc, #84]	@ (8012c58 <HAL_TIM_MspPostInit+0xc8>)
 8012c02:	4293      	cmp	r3, r2
 8012c04:	d122      	bne.n	8012c4c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c06:	4b13      	ldr	r3, [pc, #76]	@ (8012c54 <HAL_TIM_MspPostInit+0xc4>)
 8012c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c0a:	4b12      	ldr	r3, [pc, #72]	@ (8012c54 <HAL_TIM_MspPostInit+0xc4>)
 8012c0c:	2104      	movs	r1, #4
 8012c0e:	430a      	orrs	r2, r1
 8012c10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012c12:	4b10      	ldr	r3, [pc, #64]	@ (8012c54 <HAL_TIM_MspPostInit+0xc4>)
 8012c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c16:	2204      	movs	r2, #4
 8012c18:	4013      	ands	r3, r2
 8012c1a:	60fb      	str	r3, [r7, #12]
 8012c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8012c1e:	2114      	movs	r1, #20
 8012c20:	187b      	adds	r3, r7, r1
 8012c22:	22e0      	movs	r2, #224	@ 0xe0
 8012c24:	0052      	lsls	r2, r2, #1
 8012c26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c28:	187b      	adds	r3, r7, r1
 8012c2a:	2202      	movs	r2, #2
 8012c2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c2e:	187b      	adds	r3, r7, r1
 8012c30:	2200      	movs	r2, #0
 8012c32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c34:	187b      	adds	r3, r7, r1
 8012c36:	2200      	movs	r2, #0
 8012c38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012c3a:	187b      	adds	r3, r7, r1
 8012c3c:	2202      	movs	r2, #2
 8012c3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012c40:	187b      	adds	r3, r7, r1
 8012c42:	4a06      	ldr	r2, [pc, #24]	@ (8012c5c <HAL_TIM_MspPostInit+0xcc>)
 8012c44:	0019      	movs	r1, r3
 8012c46:	0010      	movs	r0, r2
 8012c48:	f002 f864 	bl	8014d14 <HAL_GPIO_Init>
}
 8012c4c:	46c0      	nop			@ (mov r8, r8)
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	b00b      	add	sp, #44	@ 0x2c
 8012c52:	bd90      	pop	{r4, r7, pc}
 8012c54:	40021000 	.word	0x40021000
 8012c58:	40000400 	.word	0x40000400
 8012c5c:	50000800 	.word	0x50000800

08012c60 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8012c64:	4b17      	ldr	r3, [pc, #92]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012c66:	4a18      	ldr	r2, [pc, #96]	@ (8012cc8 <MX_LPUART1_UART_Init+0x68>)
 8012c68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8012c6a:	4b16      	ldr	r3, [pc, #88]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012c6c:	22e1      	movs	r2, #225	@ 0xe1
 8012c6e:	0252      	lsls	r2, r2, #9
 8012c70:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012c72:	4b14      	ldr	r3, [pc, #80]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012c74:	2200      	movs	r2, #0
 8012c76:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8012c78:	4b12      	ldr	r3, [pc, #72]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8012c7e:	4b11      	ldr	r3, [pc, #68]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012c80:	2200      	movs	r2, #0
 8012c82:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8012c84:	4b0f      	ldr	r3, [pc, #60]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012c86:	220c      	movs	r2, #12
 8012c88:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012c90:	4b0c      	ldr	r3, [pc, #48]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012c92:	2200      	movs	r2, #0
 8012c94:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8012c96:	4b0b      	ldr	r3, [pc, #44]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012c98:	2218      	movs	r2, #24
 8012c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8012c9c:	4b09      	ldr	r3, [pc, #36]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012c9e:	2280      	movs	r2, #128	@ 0x80
 8012ca0:	0212      	lsls	r2, r2, #8
 8012ca2:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8012ca4:	4b07      	ldr	r3, [pc, #28]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012ca6:	2280      	movs	r2, #128	@ 0x80
 8012ca8:	0152      	lsls	r2, r2, #5
 8012caa:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8012cac:	4b05      	ldr	r3, [pc, #20]	@ (8012cc4 <MX_LPUART1_UART_Init+0x64>)
 8012cae:	0018      	movs	r0, r3
 8012cb0:	f009 fc0c 	bl	801c4cc <HAL_UART_Init>
 8012cb4:	1e03      	subs	r3, r0, #0
 8012cb6:	d001      	beq.n	8012cbc <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8012cb8:	f7f9 fdce 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8012cbc:	46c0      	nop			@ (mov r8, r8)
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
 8012cc2:	46c0      	nop			@ (mov r8, r8)
 8012cc4:	20001f3c 	.word	0x20001f3c
 8012cc8:	40004800 	.word	0x40004800

08012ccc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8012cd0:	4b14      	ldr	r3, [pc, #80]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012cd2:	4a15      	ldr	r2, [pc, #84]	@ (8012d28 <MX_USART1_UART_Init+0x5c>)
 8012cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8012cd6:	4b13      	ldr	r3, [pc, #76]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012cd8:	22e1      	movs	r2, #225	@ 0xe1
 8012cda:	0252      	lsls	r2, r2, #9
 8012cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012cde:	4b11      	ldr	r3, [pc, #68]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8012cea:	4b0e      	ldr	r3, [pc, #56]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012cec:	2200      	movs	r2, #0
 8012cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012cf2:	220c      	movs	r2, #12
 8012cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012cfc:	4b09      	ldr	r3, [pc, #36]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012cfe:	2200      	movs	r2, #0
 8012d00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012d02:	4b08      	ldr	r3, [pc, #32]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012d04:	2200      	movs	r2, #0
 8012d06:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012d08:	4b06      	ldr	r3, [pc, #24]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8012d0e:	4b05      	ldr	r3, [pc, #20]	@ (8012d24 <MX_USART1_UART_Init+0x58>)
 8012d10:	0018      	movs	r0, r3
 8012d12:	f009 fbdb 	bl	801c4cc <HAL_UART_Init>
 8012d16:	1e03      	subs	r3, r0, #0
 8012d18:	d001      	beq.n	8012d1e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8012d1a:	f7f9 fd9d 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8012d1e:	46c0      	nop			@ (mov r8, r8)
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	20001ff4 	.word	0x20001ff4
 8012d28:	40013800 	.word	0x40013800

08012d2c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8012d30:	4b14      	ldr	r3, [pc, #80]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d32:	4a15      	ldr	r2, [pc, #84]	@ (8012d88 <MX_USART4_UART_Init+0x5c>)
 8012d34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8012d36:	4b13      	ldr	r3, [pc, #76]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d38:	22e1      	movs	r2, #225	@ 0xe1
 8012d3a:	0252      	lsls	r2, r2, #9
 8012d3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8012d3e:	4b11      	ldr	r3, [pc, #68]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d40:	2200      	movs	r2, #0
 8012d42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8012d44:	4b0f      	ldr	r3, [pc, #60]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d46:	2200      	movs	r2, #0
 8012d48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8012d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8012d50:	4b0c      	ldr	r3, [pc, #48]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d52:	220c      	movs	r2, #12
 8012d54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012d56:	4b0b      	ldr	r3, [pc, #44]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d58:	2200      	movs	r2, #0
 8012d5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8012d5c:	4b09      	ldr	r3, [pc, #36]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d5e:	2200      	movs	r2, #0
 8012d60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012d62:	4b08      	ldr	r3, [pc, #32]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d64:	2200      	movs	r2, #0
 8012d66:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012d68:	4b06      	ldr	r3, [pc, #24]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8012d6e:	4b05      	ldr	r3, [pc, #20]	@ (8012d84 <MX_USART4_UART_Init+0x58>)
 8012d70:	0018      	movs	r0, r3
 8012d72:	f009 fbab 	bl	801c4cc <HAL_UART_Init>
 8012d76:	1e03      	subs	r3, r0, #0
 8012d78:	d001      	beq.n	8012d7e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8012d7a:	f7f9 fd6d 	bl	800c858 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8012d7e:	46c0      	nop			@ (mov r8, r8)
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}
 8012d84:	200020ac 	.word	0x200020ac
 8012d88:	40004c00 	.word	0x40004c00

08012d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8012d8c:	b590      	push	{r4, r7, lr}
 8012d8e:	b08d      	sub	sp, #52	@ 0x34
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012d94:	241c      	movs	r4, #28
 8012d96:	193b      	adds	r3, r7, r4
 8012d98:	0018      	movs	r0, r3
 8012d9a:	2314      	movs	r3, #20
 8012d9c:	001a      	movs	r2, r3
 8012d9e:	2100      	movs	r1, #0
 8012da0:	f012 fc58 	bl	8025654 <memset>
  if(uartHandle->Instance==LPUART1)
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	4a8b      	ldr	r2, [pc, #556]	@ (8012fd8 <HAL_UART_MspInit+0x24c>)
 8012daa:	4293      	cmp	r3, r2
 8012dac:	d129      	bne.n	8012e02 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8012dae:	4b8b      	ldr	r3, [pc, #556]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012db2:	4b8a      	ldr	r3, [pc, #552]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012db4:	2180      	movs	r1, #128	@ 0x80
 8012db6:	02c9      	lsls	r1, r1, #11
 8012db8:	430a      	orrs	r2, r1
 8012dba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012dbc:	4b87      	ldr	r3, [pc, #540]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012dc0:	4b86      	ldr	r3, [pc, #536]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012dc2:	2104      	movs	r1, #4
 8012dc4:	430a      	orrs	r2, r1
 8012dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012dc8:	4b84      	ldr	r3, [pc, #528]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dcc:	2204      	movs	r2, #4
 8012dce:	4013      	ands	r3, r2
 8012dd0:	61bb      	str	r3, [r7, #24]
 8012dd2:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8012dd4:	0021      	movs	r1, r4
 8012dd6:	187b      	adds	r3, r7, r1
 8012dd8:	2203      	movs	r2, #3
 8012dda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ddc:	187b      	adds	r3, r7, r1
 8012dde:	2202      	movs	r2, #2
 8012de0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012de2:	187b      	adds	r3, r7, r1
 8012de4:	2200      	movs	r2, #0
 8012de6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012de8:	187b      	adds	r3, r7, r1
 8012dea:	2203      	movs	r2, #3
 8012dec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8012dee:	187b      	adds	r3, r7, r1
 8012df0:	2206      	movs	r2, #6
 8012df2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012df4:	187b      	adds	r3, r7, r1
 8012df6:	4a7a      	ldr	r2, [pc, #488]	@ (8012fe0 <HAL_UART_MspInit+0x254>)
 8012df8:	0019      	movs	r1, r3
 8012dfa:	0010      	movs	r0, r2
 8012dfc:	f001 ff8a 	bl	8014d14 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8012e00:	e0e5      	b.n	8012fce <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4a77      	ldr	r2, [pc, #476]	@ (8012fe4 <HAL_UART_MspInit+0x258>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d133      	bne.n	8012e74 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8012e0c:	4b73      	ldr	r3, [pc, #460]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012e10:	4b72      	ldr	r3, [pc, #456]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012e12:	2180      	movs	r1, #128	@ 0x80
 8012e14:	01c9      	lsls	r1, r1, #7
 8012e16:	430a      	orrs	r2, r1
 8012e18:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e1a:	4b70      	ldr	r3, [pc, #448]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012e20:	2101      	movs	r1, #1
 8012e22:	430a      	orrs	r2, r1
 8012e24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012e26:	4b6d      	ldr	r3, [pc, #436]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e2a:	2201      	movs	r2, #1
 8012e2c:	4013      	ands	r3, r2
 8012e2e:	617b      	str	r3, [r7, #20]
 8012e30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8012e32:	211c      	movs	r1, #28
 8012e34:	187b      	adds	r3, r7, r1
 8012e36:	22c0      	movs	r2, #192	@ 0xc0
 8012e38:	00d2      	lsls	r2, r2, #3
 8012e3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e3c:	187b      	adds	r3, r7, r1
 8012e3e:	2202      	movs	r2, #2
 8012e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e42:	187b      	adds	r3, r7, r1
 8012e44:	2200      	movs	r2, #0
 8012e46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e48:	187b      	adds	r3, r7, r1
 8012e4a:	2203      	movs	r2, #3
 8012e4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8012e4e:	187b      	adds	r3, r7, r1
 8012e50:	2204      	movs	r2, #4
 8012e52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012e54:	187a      	adds	r2, r7, r1
 8012e56:	23a0      	movs	r3, #160	@ 0xa0
 8012e58:	05db      	lsls	r3, r3, #23
 8012e5a:	0011      	movs	r1, r2
 8012e5c:	0018      	movs	r0, r3
 8012e5e:	f001 ff59 	bl	8014d14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8012e62:	2200      	movs	r2, #0
 8012e64:	2100      	movs	r1, #0
 8012e66:	201b      	movs	r0, #27
 8012e68:	f001 fb02 	bl	8014470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8012e6c:	201b      	movs	r0, #27
 8012e6e:	f001 fb14 	bl	801449a <HAL_NVIC_EnableIRQ>
}
 8012e72:	e0ac      	b.n	8012fce <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	4a5b      	ldr	r2, [pc, #364]	@ (8012fe8 <HAL_UART_MspInit+0x25c>)
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	d000      	beq.n	8012e80 <HAL_UART_MspInit+0xf4>
 8012e7e:	e0a6      	b.n	8012fce <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8012e80:	4b56      	ldr	r3, [pc, #344]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012e82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012e84:	4b55      	ldr	r3, [pc, #340]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012e86:	2180      	movs	r1, #128	@ 0x80
 8012e88:	0309      	lsls	r1, r1, #12
 8012e8a:	430a      	orrs	r2, r1
 8012e8c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e8e:	4b53      	ldr	r3, [pc, #332]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e92:	4b52      	ldr	r3, [pc, #328]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012e94:	2101      	movs	r1, #1
 8012e96:	430a      	orrs	r2, r1
 8012e98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012e9a:	4b50      	ldr	r3, [pc, #320]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	4013      	ands	r3, r2
 8012ea2:	613b      	str	r3, [r7, #16]
 8012ea4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012ea6:	4b4d      	ldr	r3, [pc, #308]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012eac:	2104      	movs	r1, #4
 8012eae:	430a      	orrs	r2, r1
 8012eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8012fdc <HAL_UART_MspInit+0x250>)
 8012eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012eb6:	2204      	movs	r2, #4
 8012eb8:	4013      	ands	r3, r2
 8012eba:	60fb      	str	r3, [r7, #12]
 8012ebc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8012ebe:	241c      	movs	r4, #28
 8012ec0:	193b      	adds	r3, r7, r4
 8012ec2:	2202      	movs	r2, #2
 8012ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ec6:	193b      	adds	r3, r7, r4
 8012ec8:	2202      	movs	r2, #2
 8012eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ecc:	193b      	adds	r3, r7, r4
 8012ece:	2200      	movs	r2, #0
 8012ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ed2:	193b      	adds	r3, r7, r4
 8012ed4:	2203      	movs	r2, #3
 8012ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8012ed8:	193b      	adds	r3, r7, r4
 8012eda:	2206      	movs	r2, #6
 8012edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ede:	193a      	adds	r2, r7, r4
 8012ee0:	23a0      	movs	r3, #160	@ 0xa0
 8012ee2:	05db      	lsls	r3, r3, #23
 8012ee4:	0011      	movs	r1, r2
 8012ee6:	0018      	movs	r0, r3
 8012ee8:	f001 ff14 	bl	8014d14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012eec:	0021      	movs	r1, r4
 8012eee:	187b      	adds	r3, r7, r1
 8012ef0:	2280      	movs	r2, #128	@ 0x80
 8012ef2:	00d2      	lsls	r2, r2, #3
 8012ef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ef6:	187b      	adds	r3, r7, r1
 8012ef8:	2202      	movs	r2, #2
 8012efa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012efc:	187b      	adds	r3, r7, r1
 8012efe:	2200      	movs	r2, #0
 8012f00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f02:	187b      	adds	r3, r7, r1
 8012f04:	2203      	movs	r2, #3
 8012f06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8012f08:	187b      	adds	r3, r7, r1
 8012f0a:	2206      	movs	r2, #6
 8012f0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012f0e:	187b      	adds	r3, r7, r1
 8012f10:	4a33      	ldr	r2, [pc, #204]	@ (8012fe0 <HAL_UART_MspInit+0x254>)
 8012f12:	0019      	movs	r1, r3
 8012f14:	0010      	movs	r0, r2
 8012f16:	f001 fefd 	bl	8014d14 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8012f1a:	4b34      	ldr	r3, [pc, #208]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f1c:	4a34      	ldr	r2, [pc, #208]	@ (8012ff0 <HAL_UART_MspInit+0x264>)
 8012f1e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8012f20:	4b32      	ldr	r3, [pc, #200]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f22:	220c      	movs	r2, #12
 8012f24:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012f26:	4b31      	ldr	r3, [pc, #196]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f28:	2200      	movs	r2, #0
 8012f2a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f2e:	2200      	movs	r2, #0
 8012f30:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012f32:	4b2e      	ldr	r3, [pc, #184]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f34:	2280      	movs	r2, #128	@ 0x80
 8012f36:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012f38:	4b2c      	ldr	r3, [pc, #176]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f40:	2200      	movs	r2, #0
 8012f42:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8012f44:	4b29      	ldr	r3, [pc, #164]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f46:	2220      	movs	r2, #32
 8012f48:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012f4a:	4b28      	ldr	r3, [pc, #160]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8012f50:	4b26      	ldr	r3, [pc, #152]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f52:	0018      	movs	r0, r3
 8012f54:	f001 fac2 	bl	80144dc <HAL_DMA_Init>
 8012f58:	1e03      	subs	r3, r0, #0
 8012f5a:	d001      	beq.n	8012f60 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8012f5c:	f7f9 fc7c 	bl	800c858 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	4a22      	ldr	r2, [pc, #136]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f64:	675a      	str	r2, [r3, #116]	@ 0x74
 8012f66:	4b21      	ldr	r3, [pc, #132]	@ (8012fec <HAL_UART_MspInit+0x260>)
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8012f6c:	4b21      	ldr	r3, [pc, #132]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012f6e:	4a22      	ldr	r2, [pc, #136]	@ (8012ff8 <HAL_UART_MspInit+0x26c>)
 8012f70:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8012f72:	4b20      	ldr	r3, [pc, #128]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012f74:	220c      	movs	r2, #12
 8012f76:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8012f78:	4b1e      	ldr	r3, [pc, #120]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012f7a:	2210      	movs	r2, #16
 8012f7c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012f80:	2200      	movs	r2, #0
 8012f82:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8012f84:	4b1b      	ldr	r3, [pc, #108]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012f86:	2280      	movs	r2, #128	@ 0x80
 8012f88:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012f90:	4b18      	ldr	r3, [pc, #96]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012f92:	2200      	movs	r2, #0
 8012f94:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8012f96:	4b17      	ldr	r3, [pc, #92]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012f98:	2200      	movs	r2, #0
 8012f9a:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8012f9c:	4b15      	ldr	r3, [pc, #84]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8012fa2:	4b14      	ldr	r3, [pc, #80]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012fa4:	0018      	movs	r0, r3
 8012fa6:	f001 fa99 	bl	80144dc <HAL_DMA_Init>
 8012faa:	1e03      	subs	r3, r0, #0
 8012fac:	d001      	beq.n	8012fb2 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8012fae:	f7f9 fc53 	bl	800c858 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012fb6:	671a      	str	r2, [r3, #112]	@ 0x70
 8012fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8012ff4 <HAL_UART_MspInit+0x268>)
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	2100      	movs	r1, #0
 8012fc2:	200e      	movs	r0, #14
 8012fc4:	f001 fa54 	bl	8014470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8012fc8:	200e      	movs	r0, #14
 8012fca:	f001 fa66 	bl	801449a <HAL_NVIC_EnableIRQ>
}
 8012fce:	46c0      	nop			@ (mov r8, r8)
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	b00d      	add	sp, #52	@ 0x34
 8012fd4:	bd90      	pop	{r4, r7, pc}
 8012fd6:	46c0      	nop			@ (mov r8, r8)
 8012fd8:	40004800 	.word	0x40004800
 8012fdc:	40021000 	.word	0x40021000
 8012fe0:	50000800 	.word	0x50000800
 8012fe4:	40013800 	.word	0x40013800
 8012fe8:	40004c00 	.word	0x40004c00
 8012fec:	20002164 	.word	0x20002164
 8012ff0:	4002006c 	.word	0x4002006c
 8012ff4:	200021ac 	.word	0x200021ac
 8012ff8:	40020080 	.word	0x40020080

08012ffc <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b086      	sub	sp, #24
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013004:	f000 fd90 	bl	8013b28 <HAL_GetTick>
 8013008:	0003      	movs	r3, r0
 801300a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 801300c:	4b1c      	ldr	r3, [pc, #112]	@ (8013080 <TimestampIsReached+0x84>)
 801300e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8013010:	697a      	ldr	r2, [r7, #20]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	429a      	cmp	r2, r3
 8013016:	d307      	bcc.n	8013028 <TimestampIsReached+0x2c>
 8013018:	697a      	ldr	r2, [r7, #20]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	1ad3      	subs	r3, r2, r3
 801301e:	693a      	ldr	r2, [r7, #16]
 8013020:	429a      	cmp	r2, r3
 8013022:	d901      	bls.n	8013028 <TimestampIsReached+0x2c>
 8013024:	2201      	movs	r2, #1
 8013026:	e000      	b.n	801302a <TimestampIsReached+0x2e>
 8013028:	2200      	movs	r2, #0
 801302a:	230f      	movs	r3, #15
 801302c:	18fb      	adds	r3, r7, r3
 801302e:	701a      	strb	r2, [r3, #0]
 8013030:	781a      	ldrb	r2, [r3, #0]
 8013032:	2101      	movs	r1, #1
 8013034:	400a      	ands	r2, r1
 8013036:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013038:	697a      	ldr	r2, [r7, #20]
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	429a      	cmp	r2, r3
 801303e:	d207      	bcs.n	8013050 <TimestampIsReached+0x54>
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	1ad3      	subs	r3, r2, r3
 8013046:	693a      	ldr	r2, [r7, #16]
 8013048:	429a      	cmp	r2, r3
 801304a:	d201      	bcs.n	8013050 <TimestampIsReached+0x54>
 801304c:	2201      	movs	r2, #1
 801304e:	e000      	b.n	8013052 <TimestampIsReached+0x56>
 8013050:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8013052:	200e      	movs	r0, #14
 8013054:	183b      	adds	r3, r7, r0
 8013056:	701a      	strb	r2, [r3, #0]
 8013058:	781a      	ldrb	r2, [r3, #0]
 801305a:	2101      	movs	r1, #1
 801305c:	400a      	ands	r2, r1
 801305e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8013060:	230f      	movs	r3, #15
 8013062:	18fb      	adds	r3, r7, r3
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d103      	bne.n	8013072 <TimestampIsReached+0x76>
 801306a:	183b      	adds	r3, r7, r0
 801306c:	781b      	ldrb	r3, [r3, #0]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d001      	beq.n	8013076 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8013072:	2301      	movs	r3, #1
 8013074:	e000      	b.n	8013078 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8013076:	2300      	movs	r3, #0
}
 8013078:	0018      	movs	r0, r3
 801307a:	46bd      	mov	sp, r7
 801307c:	b006      	add	sp, #24
 801307e:	bd80      	pop	{r7, pc}
 8013080:	7fffffff 	.word	0x7fffffff

08013084 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 801308c:	f000 fd4c 	bl	8013b28 <HAL_GetTick>
 8013090:	0002      	movs	r2, r0
 8013092:	4904      	ldr	r1, [pc, #16]	@ (80130a4 <AddTimestamp+0x20>)
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	0018      	movs	r0, r3
 8013098:	f012 f972 	bl	8025380 <siprintf>
}
 801309c:	46c0      	nop			@ (mov r8, r8)
 801309e:	46bd      	mov	sp, r7
 80130a0:	b002      	add	sp, #8
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	0802d2b4 	.word	0x0802d2b4

080130a8 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80130a8:	b40c      	push	{r2, r3}
 80130aa:	b5b0      	push	{r4, r5, r7, lr}
 80130ac:	b0a4      	sub	sp, #144	@ 0x90
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	0002      	movs	r2, r0
 80130b2:	6039      	str	r1, [r7, #0]
 80130b4:	1dfb      	adds	r3, r7, #7
 80130b6:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 80130b8:	4b23      	ldr	r3, [pc, #140]	@ (8013148 <CreateLine+0xa0>)
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	1dfa      	adds	r2, r7, #7
 80130be:	7812      	ldrb	r2, [r2, #0]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d839      	bhi.n	8013138 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 80130c4:	683a      	ldr	r2, [r7, #0]
 80130c6:	4921      	ldr	r1, [pc, #132]	@ (801314c <CreateLine+0xa4>)
 80130c8:	240c      	movs	r4, #12
 80130ca:	193b      	adds	r3, r7, r4
 80130cc:	0018      	movs	r0, r3
 80130ce:	f012 f957 	bl	8025380 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 80130d2:	4b1d      	ldr	r3, [pc, #116]	@ (8013148 <CreateLine+0xa0>)
 80130d4:	781b      	ldrb	r3, [r3, #0]
 80130d6:	2b01      	cmp	r3, #1
 80130d8:	d909      	bls.n	80130ee <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80130da:	193b      	adds	r3, r7, r4
 80130dc:	0018      	movs	r0, r3
 80130de:	f7ed f845 	bl	800016c <strlen>
 80130e2:	0002      	movs	r2, r0
 80130e4:	193b      	adds	r3, r7, r4
 80130e6:	189b      	adds	r3, r3, r2
 80130e8:	0018      	movs	r0, r3
 80130ea:	f7ff ffcb 	bl	8013084 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 80130ee:	240c      	movs	r4, #12
 80130f0:	193b      	adds	r3, r7, r4
 80130f2:	0018      	movs	r0, r3
 80130f4:	f7ed f83a 	bl	800016c <strlen>
 80130f8:	0003      	movs	r3, r0
 80130fa:	218c      	movs	r1, #140	@ 0x8c
 80130fc:	187a      	adds	r2, r7, r1
 80130fe:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8013100:	239c      	movs	r3, #156	@ 0x9c
 8013102:	2508      	movs	r5, #8
 8013104:	195b      	adds	r3, r3, r5
 8013106:	19db      	adds	r3, r3, r7
 8013108:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 801310a:	193a      	adds	r2, r7, r4
 801310c:	187b      	adds	r3, r7, r1
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	18d0      	adds	r0, r2, r3
 8013112:	187b      	adds	r3, r7, r1
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	2280      	movs	r2, #128	@ 0x80
 8013118:	1ad3      	subs	r3, r2, r3
 801311a:	0019      	movs	r1, r3
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	2298      	movs	r2, #152	@ 0x98
 8013120:	1952      	adds	r2, r2, r5
 8013122:	19d2      	adds	r2, r2, r7
 8013124:	6812      	ldr	r2, [r2, #0]
 8013126:	f012 f9c7 	bl	80254b8 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 801312a:	193a      	adds	r2, r7, r4
 801312c:	4b08      	ldr	r3, [pc, #32]	@ (8013150 <CreateLine+0xa8>)
 801312e:	0011      	movs	r1, r2
 8013130:	0018      	movs	r0, r3
 8013132:	f012 f8b5 	bl	80252a0 <iprintf>
 8013136:	e000      	b.n	801313a <CreateLine+0x92>
    return;
 8013138:	46c0      	nop			@ (mov r8, r8)
}
 801313a:	46bd      	mov	sp, r7
 801313c:	b024      	add	sp, #144	@ 0x90
 801313e:	bcb0      	pop	{r4, r5, r7}
 8013140:	bc08      	pop	{r3}
 8013142:	b002      	add	sp, #8
 8013144:	4718      	bx	r3
 8013146:	46c0      	nop			@ (mov r8, r8)
 8013148:	200000e4 	.word	0x200000e4
 801314c:	0802d2c0 	.word	0x0802d2c0
 8013150:	0802d2c4 	.word	0x0802d2c4

08013154 <_write>:

int _write(int fd, void *buf, size_t count) {
 8013154:	b580      	push	{r7, lr}
 8013156:	b084      	sub	sp, #16
 8013158:	af00      	add	r7, sp, #0
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	b29a      	uxth	r2, r3
 8013164:	68b9      	ldr	r1, [r7, #8]
 8013166:	4804      	ldr	r0, [pc, #16]	@ (8013178 <_write+0x24>)
 8013168:	2364      	movs	r3, #100	@ 0x64
 801316a:	f009 fa15 	bl	801c598 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 801316e:	687b      	ldr	r3, [r7, #4]
}
 8013170:	0018      	movs	r0, r3
 8013172:	46bd      	mov	sp, r7
 8013174:	b004      	add	sp, #16
 8013176:	bd80      	pop	{r7, pc}
 8013178:	20001ff4 	.word	0x20001ff4

0801317c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	0002      	movs	r2, r0
 8013184:	1dfb      	adds	r3, r7, #7
 8013186:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8013188:	4b03      	ldr	r3, [pc, #12]	@ (8013198 <SetVerboseLevel+0x1c>)
 801318a:	1dfa      	adds	r2, r7, #7
 801318c:	7812      	ldrb	r2, [r2, #0]
 801318e:	701a      	strb	r2, [r3, #0]
}
 8013190:	46c0      	nop			@ (mov r8, r8)
 8013192:	46bd      	mov	sp, r7
 8013194:	b002      	add	sp, #8
 8013196:	bd80      	pop	{r7, pc}
 8013198:	200000e4 	.word	0x200000e4

0801319c <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 801319c:	b580      	push	{r7, lr}
 801319e:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 80131a0:	4b02      	ldr	r3, [pc, #8]	@ (80131ac <GetVerboseLevel+0x10>)
 80131a2:	781b      	ldrb	r3, [r3, #0]
 80131a4:	0018      	movs	r0, r3
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	46c0      	nop			@ (mov r8, r8)
 80131ac:	200000e4 	.word	0x200000e4

080131b0 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 80131b6:	4a0f      	ldr	r2, [pc, #60]	@ (80131f4 <BinaryReleaseInfo+0x44>)
 80131b8:	4b0f      	ldr	r3, [pc, #60]	@ (80131f8 <BinaryReleaseInfo+0x48>)
 80131ba:	0019      	movs	r1, r3
 80131bc:	2002      	movs	r0, #2
 80131be:	f7ff ff73 	bl	80130a8 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 80131c2:	480e      	ldr	r0, [pc, #56]	@ (80131fc <BinaryReleaseInfo+0x4c>)
 80131c4:	4a0e      	ldr	r2, [pc, #56]	@ (8013200 <BinaryReleaseInfo+0x50>)
 80131c6:	490c      	ldr	r1, [pc, #48]	@ (80131f8 <BinaryReleaseInfo+0x48>)
 80131c8:	4b0e      	ldr	r3, [pc, #56]	@ (8013204 <BinaryReleaseInfo+0x54>)
 80131ca:	9300      	str	r3, [sp, #0]
 80131cc:	0003      	movs	r3, r0
 80131ce:	2002      	movs	r0, #2
 80131d0:	f7ff ff6a 	bl	80130a8 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 80131d4:	4b0c      	ldr	r3, [pc, #48]	@ (8013208 <BinaryReleaseInfo+0x58>)
 80131d6:	4a0d      	ldr	r2, [pc, #52]	@ (801320c <BinaryReleaseInfo+0x5c>)
 80131d8:	4907      	ldr	r1, [pc, #28]	@ (80131f8 <BinaryReleaseInfo+0x48>)
 80131da:	2002      	movs	r0, #2
 80131dc:	f7ff ff64 	bl	80130a8 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 80131e0:	4b0b      	ldr	r3, [pc, #44]	@ (8013210 <BinaryReleaseInfo+0x60>)
 80131e2:	4a0c      	ldr	r2, [pc, #48]	@ (8013214 <BinaryReleaseInfo+0x64>)
 80131e4:	4904      	ldr	r1, [pc, #16]	@ (80131f8 <BinaryReleaseInfo+0x48>)
 80131e6:	2002      	movs	r0, #2
 80131e8:	f7ff ff5e 	bl	80130a8 <CreateLine>
}
 80131ec:	46c0      	nop			@ (mov r8, r8)
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
 80131f2:	46c0      	nop			@ (mov r8, r8)
 80131f4:	0802d2cc 	.word	0x0802d2cc
 80131f8:	0802d2f8 	.word	0x0802d2f8
 80131fc:	0802d2fc 	.word	0x0802d2fc
 8013200:	0802d308 	.word	0x0802d308
 8013204:	0802d31c 	.word	0x0802d31c
 8013208:	0802d328 	.word	0x0802d328
 801320c:	0802d334 	.word	0x0802d334
 8013210:	0802d33c 	.word	0x0802d33c
 8013214:	0802d344 	.word	0x0802d344

08013218 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	68ba      	ldr	r2, [r7, #8]
 8013228:	68f9      	ldr	r1, [r7, #12]
 801322a:	4803      	ldr	r0, [pc, #12]	@ (8013238 <errorHandler+0x20>)
 801322c:	f012 f838 	bl	80252a0 <iprintf>
//    while (true)
//    {
//    }
}
 8013230:	46c0      	nop			@ (mov r8, r8)
 8013232:	46bd      	mov	sp, r7
 8013234:	b004      	add	sp, #16
 8013236:	bd80      	pop	{r7, pc}
 8013238:	0802d35c 	.word	0x0802d35c

0801323c <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 801323c:	b590      	push	{r4, r7, lr}
 801323e:	b083      	sub	sp, #12
 8013240:	af00      	add	r7, sp, #0
 8013242:	6039      	str	r1, [r7, #0]
 8013244:	0011      	movs	r1, r2
 8013246:	1dfb      	adds	r3, r7, #7
 8013248:	1c02      	adds	r2, r0, #0
 801324a:	701a      	strb	r2, [r3, #0]
 801324c:	1dbb      	adds	r3, r7, #6
 801324e:	1c0a      	adds	r2, r1, #0
 8013250:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8013252:	4b0a      	ldr	r3, [pc, #40]	@ (801327c <ReadRegister+0x40>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d00a      	beq.n	8013270 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 801325a:	4b08      	ldr	r3, [pc, #32]	@ (801327c <ReadRegister+0x40>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	1dba      	adds	r2, r7, #6
 8013260:	7814      	ldrb	r4, [r2, #0]
 8013262:	6839      	ldr	r1, [r7, #0]
 8013264:	1dfa      	adds	r2, r7, #7
 8013266:	7810      	ldrb	r0, [r2, #0]
 8013268:	0022      	movs	r2, r4
 801326a:	4798      	blx	r3
 801326c:	0003      	movs	r3, r0
 801326e:	e000      	b.n	8013272 <ReadRegister+0x36>
	}
	return false;
 8013270:	2300      	movs	r3, #0
}
 8013272:	0018      	movs	r0, r3
 8013274:	46bd      	mov	sp, r7
 8013276:	b003      	add	sp, #12
 8013278:	bd90      	pop	{r4, r7, pc}
 801327a:	46c0      	nop			@ (mov r8, r8)
 801327c:	200021fc 	.word	0x200021fc

08013280 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8013280:	b590      	push	{r4, r7, lr}
 8013282:	b083      	sub	sp, #12
 8013284:	af00      	add	r7, sp, #0
 8013286:	6039      	str	r1, [r7, #0]
 8013288:	0011      	movs	r1, r2
 801328a:	1dfb      	adds	r3, r7, #7
 801328c:	1c02      	adds	r2, r0, #0
 801328e:	701a      	strb	r2, [r3, #0]
 8013290:	1dbb      	adds	r3, r7, #6
 8013292:	1c0a      	adds	r2, r1, #0
 8013294:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8013296:	4b0a      	ldr	r3, [pc, #40]	@ (80132c0 <WriteRegister+0x40>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d00a      	beq.n	80132b4 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 801329e:	4b08      	ldr	r3, [pc, #32]	@ (80132c0 <WriteRegister+0x40>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	1dba      	adds	r2, r7, #6
 80132a4:	7814      	ldrb	r4, [r2, #0]
 80132a6:	6839      	ldr	r1, [r7, #0]
 80132a8:	1dfa      	adds	r2, r7, #7
 80132aa:	7810      	ldrb	r0, [r2, #0]
 80132ac:	0022      	movs	r2, r4
 80132ae:	4798      	blx	r3
 80132b0:	0003      	movs	r3, r0
 80132b2:	e000      	b.n	80132b6 <WriteRegister+0x36>
  }
  return false;
 80132b4:	2300      	movs	r3, #0
}
 80132b6:	0018      	movs	r0, r3
 80132b8:	46bd      	mov	sp, r7
 80132ba:	b003      	add	sp, #12
 80132bc:	bd90      	pop	{r4, r7, pc}
 80132be:	46c0      	nop			@ (mov r8, r8)
 80132c0:	20002200 	.word	0x20002200

080132c4 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b084      	sub	sp, #16
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	000a      	movs	r2, r1
 80132ce:	1cfb      	adds	r3, r7, #3
 80132d0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80132d2:	230f      	movs	r3, #15
 80132d4:	18fb      	adds	r3, r7, r3
 80132d6:	22ff      	movs	r2, #255	@ 0xff
 80132d8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80132da:	230e      	movs	r3, #14
 80132dc:	18fb      	adds	r3, r7, r3
 80132de:	2200      	movs	r2, #0
 80132e0:	701a      	strb	r2, [r3, #0]
 80132e2:	e038      	b.n	8013356 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80132e4:	230e      	movs	r3, #14
 80132e6:	18fb      	adds	r3, r7, r3
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	687a      	ldr	r2, [r7, #4]
 80132ec:	18d3      	adds	r3, r2, r3
 80132ee:	7819      	ldrb	r1, [r3, #0]
 80132f0:	220f      	movs	r2, #15
 80132f2:	18bb      	adds	r3, r7, r2
 80132f4:	18ba      	adds	r2, r7, r2
 80132f6:	7812      	ldrb	r2, [r2, #0]
 80132f8:	404a      	eors	r2, r1
 80132fa:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80132fc:	230d      	movs	r3, #13
 80132fe:	18fb      	adds	r3, r7, r3
 8013300:	2200      	movs	r2, #0
 8013302:	701a      	strb	r2, [r3, #0]
 8013304:	e01c      	b.n	8013340 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8013306:	210f      	movs	r1, #15
 8013308:	187b      	adds	r3, r7, r1
 801330a:	781b      	ldrb	r3, [r3, #0]
 801330c:	b25b      	sxtb	r3, r3
 801330e:	2b00      	cmp	r3, #0
 8013310:	da0a      	bge.n	8013328 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8013312:	187b      	adds	r3, r7, r1
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	b25b      	sxtb	r3, r3
 8013318:	18db      	adds	r3, r3, r3
 801331a:	b25b      	sxtb	r3, r3
 801331c:	2231      	movs	r2, #49	@ 0x31
 801331e:	4053      	eors	r3, r2
 8013320:	b25a      	sxtb	r2, r3
 8013322:	187b      	adds	r3, r7, r1
 8013324:	701a      	strb	r2, [r3, #0]
 8013326:	e005      	b.n	8013334 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 8013328:	230f      	movs	r3, #15
 801332a:	18fa      	adds	r2, r7, r3
 801332c:	18fb      	adds	r3, r7, r3
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	18db      	adds	r3, r3, r3
 8013332:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8013334:	210d      	movs	r1, #13
 8013336:	187b      	adds	r3, r7, r1
 8013338:	781a      	ldrb	r2, [r3, #0]
 801333a:	187b      	adds	r3, r7, r1
 801333c:	3201      	adds	r2, #1
 801333e:	701a      	strb	r2, [r3, #0]
 8013340:	230d      	movs	r3, #13
 8013342:	18fb      	adds	r3, r7, r3
 8013344:	781b      	ldrb	r3, [r3, #0]
 8013346:	2b07      	cmp	r3, #7
 8013348:	d9dd      	bls.n	8013306 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 801334a:	210e      	movs	r1, #14
 801334c:	187b      	adds	r3, r7, r1
 801334e:	781a      	ldrb	r2, [r3, #0]
 8013350:	187b      	adds	r3, r7, r1
 8013352:	3201      	adds	r2, #1
 8013354:	701a      	strb	r2, [r3, #0]
 8013356:	230e      	movs	r3, #14
 8013358:	18fa      	adds	r2, r7, r3
 801335a:	1cfb      	adds	r3, r7, #3
 801335c:	7812      	ldrb	r2, [r2, #0]
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	429a      	cmp	r2, r3
 8013362:	d3bf      	bcc.n	80132e4 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8013364:	230f      	movs	r3, #15
 8013366:	18fb      	adds	r3, r7, r3
 8013368:	781b      	ldrb	r3, [r3, #0]
}
 801336a:	0018      	movs	r0, r3
 801336c:	46bd      	mov	sp, r7
 801336e:	b004      	add	sp, #16
 8013370:	bd80      	pop	{r7, pc}
	...

08013374 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8013374:	b5b0      	push	{r4, r5, r7, lr}
 8013376:	b084      	sub	sp, #16
 8013378:	af00      	add	r7, sp, #0
 801337a:	6078      	str	r0, [r7, #4]
 801337c:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 801337e:	683b      	ldr	r3, [r7, #0]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	1c18      	adds	r0, r3, #0
 8013384:	f7f0 fa86 	bl	8003894 <__aeabi_f2d>
 8013388:	4a2e      	ldr	r2, [pc, #184]	@ (8013444 <HIDS_DewPointCalculation+0xd0>)
 801338a:	4b2f      	ldr	r3, [pc, #188]	@ (8013448 <HIDS_DewPointCalculation+0xd4>)
 801338c:	f7ef fae2 	bl	8002954 <__aeabi_dmul>
 8013390:	0002      	movs	r2, r0
 8013392:	000b      	movs	r3, r1
 8013394:	0014      	movs	r4, r2
 8013396:	001d      	movs	r5, r3
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	1c18      	adds	r0, r3, #0
 801339e:	f7f0 fa79 	bl	8003894 <__aeabi_f2d>
 80133a2:	4a2a      	ldr	r2, [pc, #168]	@ (801344c <HIDS_DewPointCalculation+0xd8>)
 80133a4:	4b2a      	ldr	r3, [pc, #168]	@ (8013450 <HIDS_DewPointCalculation+0xdc>)
 80133a6:	f7ee fad5 	bl	8001954 <__aeabi_dadd>
 80133aa:	0002      	movs	r2, r0
 80133ac:	000b      	movs	r3, r1
 80133ae:	0020      	movs	r0, r4
 80133b0:	0029      	movs	r1, r5
 80133b2:	f7ee fe95 	bl	80020e0 <__aeabi_ddiv>
 80133b6:	0002      	movs	r2, r0
 80133b8:	000b      	movs	r3, r1
 80133ba:	0014      	movs	r4, r2
 80133bc:	001d      	movs	r5, r3
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	1c18      	adds	r0, r3, #0
 80133c4:	f7f0 fa66 	bl	8003894 <__aeabi_f2d>
 80133c8:	2200      	movs	r2, #0
 80133ca:	4b22      	ldr	r3, [pc, #136]	@ (8013454 <HIDS_DewPointCalculation+0xe0>)
 80133cc:	f7ee fe88 	bl	80020e0 <__aeabi_ddiv>
 80133d0:	0002      	movs	r2, r0
 80133d2:	000b      	movs	r3, r1
 80133d4:	0010      	movs	r0, r2
 80133d6:	0019      	movs	r1, r3
 80133d8:	f014 fecc 	bl	8028174 <log>
 80133dc:	0002      	movs	r2, r0
 80133de:	000b      	movs	r3, r1
 80133e0:	0020      	movs	r0, r4
 80133e2:	0029      	movs	r1, r5
 80133e4:	f7ee fab6 	bl	8001954 <__aeabi_dadd>
 80133e8:	0002      	movs	r2, r0
 80133ea:	000b      	movs	r3, r1
 80133ec:	0010      	movs	r0, r2
 80133ee:	0019      	movs	r1, r3
 80133f0:	f7f0 fa98 	bl	8003924 <__aeabi_d2f>
 80133f4:	1c03      	adds	r3, r0, #0
 80133f6:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 80133f8:	68f8      	ldr	r0, [r7, #12]
 80133fa:	f7f0 fa4b 	bl	8003894 <__aeabi_f2d>
 80133fe:	4a13      	ldr	r2, [pc, #76]	@ (801344c <HIDS_DewPointCalculation+0xd8>)
 8013400:	4b13      	ldr	r3, [pc, #76]	@ (8013450 <HIDS_DewPointCalculation+0xdc>)
 8013402:	f7ef faa7 	bl	8002954 <__aeabi_dmul>
 8013406:	0002      	movs	r2, r0
 8013408:	000b      	movs	r3, r1
 801340a:	0014      	movs	r4, r2
 801340c:	001d      	movs	r5, r3
 801340e:	68f8      	ldr	r0, [r7, #12]
 8013410:	f7f0 fa40 	bl	8003894 <__aeabi_f2d>
 8013414:	0002      	movs	r2, r0
 8013416:	000b      	movs	r3, r1
 8013418:	480a      	ldr	r0, [pc, #40]	@ (8013444 <HIDS_DewPointCalculation+0xd0>)
 801341a:	490b      	ldr	r1, [pc, #44]	@ (8013448 <HIDS_DewPointCalculation+0xd4>)
 801341c:	f7ef fd80 	bl	8002f20 <__aeabi_dsub>
 8013420:	0002      	movs	r2, r0
 8013422:	000b      	movs	r3, r1
 8013424:	0020      	movs	r0, r4
 8013426:	0029      	movs	r1, r5
 8013428:	f7ee fe5a 	bl	80020e0 <__aeabi_ddiv>
 801342c:	0002      	movs	r2, r0
 801342e:	000b      	movs	r3, r1
 8013430:	0010      	movs	r0, r2
 8013432:	0019      	movs	r1, r3
 8013434:	f7f0 fa76 	bl	8003924 <__aeabi_d2f>
 8013438:	1c03      	adds	r3, r0, #0
}
 801343a:	1c18      	adds	r0, r3, #0
 801343c:	46bd      	mov	sp, r7
 801343e:	b004      	add	sp, #16
 8013440:	bdb0      	pop	{r4, r5, r7, pc}
 8013442:	46c0      	nop			@ (mov r8, r8)
 8013444:	b851eb85 	.word	0xb851eb85
 8013448:	4031451e 	.word	0x4031451e
 801344c:	66666666 	.word	0x66666666
 8013450:	406db666 	.word	0x406db666
 8013454:	40590000 	.word	0x40590000

08013458 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 8013458:	b580      	push	{r7, lr}
 801345a:	b082      	sub	sp, #8
 801345c:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 801345e:	4b0d      	ldr	r3, [pc, #52]	@ (8013494 <HIDS_EnableHeater+0x3c>)
 8013460:	781a      	ldrb	r2, [r3, #0]
 8013462:	1dfb      	adds	r3, r7, #7
 8013464:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 8013466:	1dfb      	adds	r3, r7, #7
 8013468:	2201      	movs	r2, #1
 801346a:	0019      	movs	r1, r3
 801346c:	2044      	movs	r0, #68	@ 0x44
 801346e:	f7ff ff07 	bl	8013280 <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 8013472:	1dfb      	adds	r3, r7, #7
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	4a08      	ldr	r2, [pc, #32]	@ (8013498 <HIDS_EnableHeater+0x40>)
 8013478:	4908      	ldr	r1, [pc, #32]	@ (801349c <HIDS_EnableHeater+0x44>)
 801347a:	2002      	movs	r0, #2
 801347c:	f7ff fe14 	bl	80130a8 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 8013480:	f7f6 fa3b 	bl	80098fa <getPosixTime>
 8013484:	0002      	movs	r2, r0
 8013486:	4b06      	ldr	r3, [pc, #24]	@ (80134a0 <HIDS_EnableHeater+0x48>)
 8013488:	601a      	str	r2, [r3, #0]
}
 801348a:	46c0      	nop			@ (mov r8, r8)
 801348c:	46bd      	mov	sp, r7
 801348e:	b002      	add	sp, #8
 8013490:	bd80      	pop	{r7, pc}
 8013492:	46c0      	nop			@ (mov r8, r8)
 8013494:	200000e5 	.word	0x200000e5
 8013498:	0802d384 	.word	0x0802d384
 801349c:	0802d3a4 	.word	0x0802d3a4
 80134a0:	20002214 	.word	0x20002214

080134a4 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
 80134ac:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 80134ae:	4b0a      	ldr	r3, [pc, #40]	@ (80134d8 <HIDS_Init+0x34>)
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 80134b4:	4b09      	ldr	r3, [pc, #36]	@ (80134dc <HIDS_Init+0x38>)
 80134b6:	683a      	ldr	r2, [r7, #0]
 80134b8:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 80134ba:	4b09      	ldr	r3, [pc, #36]	@ (80134e0 <HIDS_Init+0x3c>)
 80134bc:	781b      	ldrb	r3, [r3, #0]
 80134be:	0018      	movs	r0, r3
 80134c0:	f000 f840 	bl	8013544 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 80134c4:	4b07      	ldr	r3, [pc, #28]	@ (80134e4 <HIDS_Init+0x40>)
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	0018      	movs	r0, r3
 80134ca:	f000 f82b 	bl	8013524 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 80134ce:	46c0      	nop			@ (mov r8, r8)
 80134d0:	46bd      	mov	sp, r7
 80134d2:	b002      	add	sp, #8
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	46c0      	nop			@ (mov r8, r8)
 80134d8:	200021fc 	.word	0x200021fc
 80134dc:	20002200 	.word	0x20002200
 80134e0:	200000e6 	.word	0x200000e6
 80134e4:	200000e5 	.word	0x200000e5

080134e8 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 80134e8:	b580      	push	{r7, lr}
 80134ea:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 80134ec:	f000 fb1c 	bl	8013b28 <HAL_GetTick>
 80134f0:	0002      	movs	r2, r0
 80134f2:	4b08      	ldr	r3, [pc, #32]	@ (8013514 <HIDS_StartMeasurement+0x2c>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	18d2      	adds	r2, r2, r3
 80134f8:	4b07      	ldr	r3, [pc, #28]	@ (8013518 <HIDS_StartMeasurement+0x30>)
 80134fa:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 80134fc:	4b07      	ldr	r3, [pc, #28]	@ (801351c <HIDS_StartMeasurement+0x34>)
 80134fe:	2201      	movs	r2, #1
 8013500:	0019      	movs	r1, r3
 8013502:	2044      	movs	r0, #68	@ 0x44
 8013504:	f7ff febc 	bl	8013280 <WriteRegister>
  MeasurementDone = false;
 8013508:	4b05      	ldr	r3, [pc, #20]	@ (8013520 <HIDS_StartMeasurement+0x38>)
 801350a:	2200      	movs	r2, #0
 801350c:	701a      	strb	r2, [r3, #0]
}
 801350e:	46c0      	nop			@ (mov r8, r8)
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	200000ec 	.word	0x200000ec
 8013518:	200000e8 	.word	0x200000e8
 801351c:	200000e6 	.word	0x200000e6
 8013520:	20002218 	.word	0x20002218

08013524 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	0002      	movs	r2, r0
 801352c:	1dfb      	adds	r3, r7, #7
 801352e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8013530:	4b03      	ldr	r3, [pc, #12]	@ (8013540 <HIDS_SetHeaterMode+0x1c>)
 8013532:	1dfa      	adds	r2, r7, #7
 8013534:	7812      	ldrb	r2, [r2, #0]
 8013536:	701a      	strb	r2, [r3, #0]
}
 8013538:	46c0      	nop			@ (mov r8, r8)
 801353a:	46bd      	mov	sp, r7
 801353c:	b002      	add	sp, #8
 801353e:	bd80      	pop	{r7, pc}
 8013540:	200000e5 	.word	0x200000e5

08013544 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
 801354a:	0002      	movs	r2, r0
 801354c:	1dfb      	adds	r3, r7, #7
 801354e:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 8013550:	4b03      	ldr	r3, [pc, #12]	@ (8013560 <HIDS_SetMeasurementMode+0x1c>)
 8013552:	1dfa      	adds	r2, r7, #7
 8013554:	7812      	ldrb	r2, [r2, #0]
 8013556:	701a      	strb	r2, [r3, #0]
}
 8013558:	46c0      	nop			@ (mov r8, r8)
 801355a:	46bd      	mov	sp, r7
 801355c:	b002      	add	sp, #8
 801355e:	bd80      	pop	{r7, pc}
 8013560:	200000e6 	.word	0x200000e6

08013564 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 801356c:	f000 fadc 	bl	8013b28 <HAL_GetTick>
 8013570:	0002      	movs	r2, r0
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	18d2      	adds	r2, r2, r3
 8013576:	4b03      	ldr	r3, [pc, #12]	@ (8013584 <setHIDSTimeStamp+0x20>)
 8013578:	601a      	str	r2, [r3, #0]
}
 801357a:	46c0      	nop			@ (mov r8, r8)
 801357c:	46bd      	mov	sp, r7
 801357e:	b002      	add	sp, #8
 8013580:	bd80      	pop	{r7, pc}
 8013582:	46c0      	nop			@ (mov r8, r8)
 8013584:	2000221c 	.word	0x2000221c

08013588 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8013588:	b590      	push	{r4, r7, lr}
 801358a:	b085      	sub	sp, #20
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	781a      	ldrb	r2, [r3, #0]
 8013594:	210c      	movs	r1, #12
 8013596:	187b      	adds	r3, r7, r1
 8013598:	701a      	strb	r2, [r3, #0]
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	785a      	ldrb	r2, [r3, #1]
 801359e:	187b      	adds	r3, r7, r1
 80135a0:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 80135a2:	240f      	movs	r4, #15
 80135a4:	193b      	adds	r3, r7, r4
 80135a6:	687a      	ldr	r2, [r7, #4]
 80135a8:	7892      	ldrb	r2, [r2, #2]
 80135aa:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 80135ac:	187b      	adds	r3, r7, r1
 80135ae:	2102      	movs	r1, #2
 80135b0:	0018      	movs	r0, r3
 80135b2:	f7ff fe87 	bl	80132c4 <CalculateCRC>
 80135b6:	0003      	movs	r3, r0
 80135b8:	001a      	movs	r2, r3
 80135ba:	193b      	adds	r3, r7, r4
 80135bc:	781b      	ldrb	r3, [r3, #0]
 80135be:	4293      	cmp	r3, r2
 80135c0:	d007      	beq.n	80135d2 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80135c2:	4a1a      	ldr	r2, [pc, #104]	@ (801362c <CheckCRC+0xa4>)
 80135c4:	4b1a      	ldr	r3, [pc, #104]	@ (8013630 <CheckCRC+0xa8>)
 80135c6:	0019      	movs	r1, r3
 80135c8:	2001      	movs	r0, #1
 80135ca:	f7ff fd6d 	bl	80130a8 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 80135ce:	2300      	movs	r3, #0
 80135d0:	e027      	b.n	8013622 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	78da      	ldrb	r2, [r3, #3]
 80135d6:	2108      	movs	r1, #8
 80135d8:	187b      	adds	r3, r7, r1
 80135da:	701a      	strb	r2, [r3, #0]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	791a      	ldrb	r2, [r3, #4]
 80135e0:	187b      	adds	r3, r7, r1
 80135e2:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 80135e4:	240e      	movs	r4, #14
 80135e6:	193b      	adds	r3, r7, r4
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	7952      	ldrb	r2, [r2, #5]
 80135ec:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 80135ee:	187b      	adds	r3, r7, r1
 80135f0:	2102      	movs	r1, #2
 80135f2:	0018      	movs	r0, r3
 80135f4:	f7ff fe66 	bl	80132c4 <CalculateCRC>
 80135f8:	0003      	movs	r3, r0
 80135fa:	001a      	movs	r2, r3
 80135fc:	193b      	adds	r3, r7, r4
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	4293      	cmp	r3, r2
 8013602:	d00d      	beq.n	8013620 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8013604:	4a0b      	ldr	r2, [pc, #44]	@ (8013634 <CheckCRC+0xac>)
 8013606:	4b0a      	ldr	r3, [pc, #40]	@ (8013630 <CheckCRC+0xa8>)
 8013608:	0019      	movs	r1, r3
 801360a:	2001      	movs	r0, #1
 801360c:	f7ff fd4c 	bl	80130a8 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 8013610:	4a09      	ldr	r2, [pc, #36]	@ (8013638 <CheckCRC+0xb0>)
 8013612:	4b0a      	ldr	r3, [pc, #40]	@ (801363c <CheckCRC+0xb4>)
 8013614:	2185      	movs	r1, #133	@ 0x85
 8013616:	0018      	movs	r0, r3
 8013618:	f7ff fdfe 	bl	8013218 <errorHandler>
		return false;
 801361c:	2300      	movs	r3, #0
 801361e:	e000      	b.n	8013622 <CheckCRC+0x9a>
	}
	return true;
 8013620:	2301      	movs	r3, #1
}
 8013622:	0018      	movs	r0, r3
 8013624:	46bd      	mov	sp, r7
 8013626:	b005      	add	sp, #20
 8013628:	bd90      	pop	{r4, r7, pc}
 801362a:	46c0      	nop			@ (mov r8, r8)
 801362c:	0802d3a8 	.word	0x0802d3a8
 8013630:	0802d3d0 	.word	0x0802d3d0
 8013634:	0802d3d4 	.word	0x0802d3d4
 8013638:	0802d400 	.word	0x0802d400
 801363c:	0802da9c 	.word	0x0802da9c

08013640 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8013640:	b580      	push	{r7, lr}
 8013642:	b084      	sub	sp, #16
 8013644:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8013646:	1dbb      	adds	r3, r7, #6
 8013648:	2289      	movs	r2, #137	@ 0x89
 801364a:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 801364c:	1dbb      	adds	r3, r7, #6
 801364e:	2201      	movs	r2, #1
 8013650:	0019      	movs	r1, r3
 8013652:	2044      	movs	r0, #68	@ 0x44
 8013654:	f7ff fe14 	bl	8013280 <WriteRegister>
	HAL_Delay(30);
 8013658:	201e      	movs	r0, #30
 801365a:	f000 fa6f 	bl	8013b3c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 801365e:	4b14      	ldr	r3, [pc, #80]	@ (80136b0 <HIDS_DeviceConnected+0x70>)
 8013660:	2206      	movs	r2, #6
 8013662:	0019      	movs	r1, r3
 8013664:	2044      	movs	r0, #68	@ 0x44
 8013666:	f7ff fde9 	bl	801323c <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 801366a:	1dfb      	adds	r3, r7, #7
 801366c:	2200      	movs	r2, #0
 801366e:	701a      	strb	r2, [r3, #0]
 8013670:	e011      	b.n	8013696 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8013672:	1dfb      	adds	r3, r7, #7
 8013674:	7818      	ldrb	r0, [r3, #0]
 8013676:	1dfb      	adds	r3, r7, #7
 8013678:	781b      	ldrb	r3, [r3, #0]
 801367a:	4a0d      	ldr	r2, [pc, #52]	@ (80136b0 <HIDS_DeviceConnected+0x70>)
 801367c:	5cd3      	ldrb	r3, [r2, r3]
 801367e:	4a0d      	ldr	r2, [pc, #52]	@ (80136b4 <HIDS_DeviceConnected+0x74>)
 8013680:	490d      	ldr	r1, [pc, #52]	@ (80136b8 <HIDS_DeviceConnected+0x78>)
 8013682:	9300      	str	r3, [sp, #0]
 8013684:	0003      	movs	r3, r0
 8013686:	2002      	movs	r0, #2
 8013688:	f7ff fd0e 	bl	80130a8 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 801368c:	1dfb      	adds	r3, r7, #7
 801368e:	781a      	ldrb	r2, [r3, #0]
 8013690:	1dfb      	adds	r3, r7, #7
 8013692:	3201      	adds	r2, #1
 8013694:	701a      	strb	r2, [r3, #0]
 8013696:	1dfb      	adds	r3, r7, #7
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	2b05      	cmp	r3, #5
 801369c:	d9e9      	bls.n	8013672 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 801369e:	4b04      	ldr	r3, [pc, #16]	@ (80136b0 <HIDS_DeviceConnected+0x70>)
 80136a0:	0018      	movs	r0, r3
 80136a2:	f7ff ff71 	bl	8013588 <CheckCRC>
 80136a6:	0003      	movs	r3, r0
}
 80136a8:	0018      	movs	r0, r3
 80136aa:	46bd      	mov	sp, r7
 80136ac:	b002      	add	sp, #8
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	20002204 	.word	0x20002204
 80136b4:	0802d418 	.word	0x0802d418
 80136b8:	0802d3a4 	.word	0x0802d3a4

080136bc <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80136bc:	b580      	push	{r7, lr}
 80136be:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80136c0:	4b04      	ldr	r3, [pc, #16]	@ (80136d4 <HIDS_MeasurementReady+0x18>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	0018      	movs	r0, r3
 80136c6:	f7ff fc99 	bl	8012ffc <TimestampIsReached>
 80136ca:	0003      	movs	r3, r0
}
 80136cc:	0018      	movs	r0, r3
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}
 80136d2:	46c0      	nop			@ (mov r8, r8)
 80136d4:	200000e8 	.word	0x200000e8

080136d8 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 80136d8:	b580      	push	{r7, lr}
 80136da:	b084      	sub	sp, #16
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 80136e2:	4b41      	ldr	r3, [pc, #260]	@ (80137e8 <HIDS_GetMeasurementValues+0x110>)
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <HIDS_GetMeasurementValues+0x16>
 80136ea:	2301      	movs	r3, #1
 80136ec:	e077      	b.n	80137de <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 80136ee:	f7ff ffe5 	bl	80136bc <HIDS_MeasurementReady>
 80136f2:	0003      	movs	r3, r0
 80136f4:	001a      	movs	r2, r3
 80136f6:	2301      	movs	r3, #1
 80136f8:	4053      	eors	r3, r2
 80136fa:	b2db      	uxtb	r3, r3
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d001      	beq.n	8013704 <HIDS_GetMeasurementValues+0x2c>
 8013700:	2300      	movs	r3, #0
 8013702:	e06c      	b.n	80137de <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8013704:	4b39      	ldr	r3, [pc, #228]	@ (80137ec <HIDS_GetMeasurementValues+0x114>)
 8013706:	2206      	movs	r2, #6
 8013708:	0019      	movs	r1, r3
 801370a:	2044      	movs	r0, #68	@ 0x44
 801370c:	f7ff fd96 	bl	801323c <ReadRegister>
 8013710:	0003      	movs	r3, r0
 8013712:	001a      	movs	r2, r3
 8013714:	2301      	movs	r3, #1
 8013716:	4053      	eors	r3, r2
 8013718:	b2db      	uxtb	r3, r3
 801371a:	2b00      	cmp	r3, #0
 801371c:	d005      	beq.n	801372a <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 801371e:	4a34      	ldr	r2, [pc, #208]	@ (80137f0 <HIDS_GetMeasurementValues+0x118>)
 8013720:	4b34      	ldr	r3, [pc, #208]	@ (80137f4 <HIDS_GetMeasurementValues+0x11c>)
 8013722:	0019      	movs	r1, r3
 8013724:	2001      	movs	r0, #1
 8013726:	f7ff fcbf 	bl	80130a8 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 801372a:	4b30      	ldr	r3, [pc, #192]	@ (80137ec <HIDS_GetMeasurementValues+0x114>)
 801372c:	0018      	movs	r0, r3
 801372e:	f7ff ff2b 	bl	8013588 <CheckCRC>
 8013732:	0003      	movs	r3, r0
 8013734:	001a      	movs	r2, r3
 8013736:	2301      	movs	r3, #1
 8013738:	4053      	eors	r3, r2
 801373a:	b2db      	uxtb	r3, r3
 801373c:	2b00      	cmp	r3, #0
 801373e:	d001      	beq.n	8013744 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 8013740:	2300      	movs	r3, #0
 8013742:	e04c      	b.n	80137de <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8013744:	4b29      	ldr	r3, [pc, #164]	@ (80137ec <HIDS_GetMeasurementValues+0x114>)
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	021b      	lsls	r3, r3, #8
 801374a:	4a28      	ldr	r2, [pc, #160]	@ (80137ec <HIDS_GetMeasurementValues+0x114>)
 801374c:	7852      	ldrb	r2, [r2, #1]
 801374e:	4313      	orrs	r3, r2
 8013750:	22af      	movs	r2, #175	@ 0xaf
 8013752:	4353      	muls	r3, r2
 8013754:	0018      	movs	r0, r3
 8013756:	f7f0 f84b 	bl	80037f0 <__aeabi_i2d>
 801375a:	2200      	movs	r2, #0
 801375c:	4b26      	ldr	r3, [pc, #152]	@ (80137f8 <HIDS_GetMeasurementValues+0x120>)
 801375e:	f7ee fcbf 	bl	80020e0 <__aeabi_ddiv>
 8013762:	0002      	movs	r2, r0
 8013764:	000b      	movs	r3, r1
 8013766:	0010      	movs	r0, r2
 8013768:	0019      	movs	r1, r3
 801376a:	f7f0 f8db 	bl	8003924 <__aeabi_d2f>
 801376e:	1c03      	adds	r3, r0, #0
 8013770:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 8013772:	4922      	ldr	r1, [pc, #136]	@ (80137fc <HIDS_GetMeasurementValues+0x124>)
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f7ed fdbd 	bl	80012f4 <__aeabi_fsub>
 801377a:	1c03      	adds	r3, r0, #0
 801377c:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 801377e:	4b1b      	ldr	r3, [pc, #108]	@ (80137ec <HIDS_GetMeasurementValues+0x114>)
 8013780:	78db      	ldrb	r3, [r3, #3]
 8013782:	021b      	lsls	r3, r3, #8
 8013784:	4a19      	ldr	r2, [pc, #100]	@ (80137ec <HIDS_GetMeasurementValues+0x114>)
 8013786:	7912      	ldrb	r2, [r2, #4]
 8013788:	431a      	orrs	r2, r3
 801378a:	0013      	movs	r3, r2
 801378c:	015b      	lsls	r3, r3, #5
 801378e:	1a9b      	subs	r3, r3, r2
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	189b      	adds	r3, r3, r2
 8013794:	0018      	movs	r0, r3
 8013796:	f7f0 f82b 	bl	80037f0 <__aeabi_i2d>
 801379a:	2200      	movs	r2, #0
 801379c:	4b16      	ldr	r3, [pc, #88]	@ (80137f8 <HIDS_GetMeasurementValues+0x120>)
 801379e:	f7ee fc9f 	bl	80020e0 <__aeabi_ddiv>
 80137a2:	0002      	movs	r2, r0
 80137a4:	000b      	movs	r3, r1
 80137a6:	0010      	movs	r0, r2
 80137a8:	0019      	movs	r1, r3
 80137aa:	f7f0 f8bb 	bl	8003924 <__aeabi_d2f>
 80137ae:	1c03      	adds	r3, r0, #0
 80137b0:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 80137b2:	4913      	ldr	r1, [pc, #76]	@ (8013800 <HIDS_GetMeasurementValues+0x128>)
 80137b4:	68b8      	ldr	r0, [r7, #8]
 80137b6:	f7ed fd9d 	bl	80012f4 <__aeabi_fsub>
 80137ba:	1c03      	adds	r3, r0, #0
 80137bc:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	68fa      	ldr	r2, [r7, #12]
 80137c2:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	68ba      	ldr	r2, [r7, #8]
 80137c8:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 80137ca:	687a      	ldr	r2, [r7, #4]
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	0011      	movs	r1, r2
 80137d0:	0018      	movs	r0, r3
 80137d2:	f7fc ffe5 	bl	80107a0 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 80137d6:	4b04      	ldr	r3, [pc, #16]	@ (80137e8 <HIDS_GetMeasurementValues+0x110>)
 80137d8:	2201      	movs	r2, #1
 80137da:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 80137dc:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 80137de:	0018      	movs	r0, r3
 80137e0:	46bd      	mov	sp, r7
 80137e2:	b004      	add	sp, #16
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	46c0      	nop			@ (mov r8, r8)
 80137e8:	20002218 	.word	0x20002218
 80137ec:	2000220c 	.word	0x2000220c
 80137f0:	0802d438 	.word	0x0802d438
 80137f4:	0802d3d0 	.word	0x0802d3d0
 80137f8:	40efffe0 	.word	0x40efffe0
 80137fc:	42340000 	.word	0x42340000
 8013800:	40c00000 	.word	0x40c00000

08013804 <ResetHIDSresults>:

void ResetHIDSresults() {
 8013804:	b580      	push	{r7, lr}
 8013806:	af00      	add	r7, sp, #0
  humid = 0.0;
 8013808:	4b04      	ldr	r3, [pc, #16]	@ (801381c <ResetHIDSresults+0x18>)
 801380a:	2200      	movs	r2, #0
 801380c:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 801380e:	4b04      	ldr	r3, [pc, #16]	@ (8013820 <ResetHIDSresults+0x1c>)
 8013810:	2200      	movs	r2, #0
 8013812:	601a      	str	r2, [r3, #0]
}
 8013814:	46c0      	nop			@ (mov r8, r8)
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}
 801381a:	46c0      	nop			@ (mov r8, r8)
 801381c:	200021f4 	.word	0x200021f4
 8013820:	200021f8 	.word	0x200021f8

08013824 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8013824:	b5b0      	push	{r4, r5, r7, lr}
 8013826:	b084      	sub	sp, #16
 8013828:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 801382a:	4b69      	ldr	r3, [pc, #420]	@ (80139d0 <HIDS_Upkeep+0x1ac>)
 801382c:	781b      	ldrb	r3, [r3, #0]
 801382e:	2b06      	cmp	r3, #6
 8013830:	d900      	bls.n	8013834 <HIDS_Upkeep+0x10>
 8013832:	e0bd      	b.n	80139b0 <HIDS_Upkeep+0x18c>
 8013834:	009a      	lsls	r2, r3, #2
 8013836:	4b67      	ldr	r3, [pc, #412]	@ (80139d4 <HIDS_Upkeep+0x1b0>)
 8013838:	18d3      	adds	r3, r2, r3
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 801383e:	4a66      	ldr	r2, [pc, #408]	@ (80139d8 <HIDS_Upkeep+0x1b4>)
 8013840:	4b66      	ldr	r3, [pc, #408]	@ (80139dc <HIDS_Upkeep+0x1b8>)
 8013842:	0019      	movs	r1, r3
 8013844:	2003      	movs	r0, #3
 8013846:	f7ff fc2f 	bl	80130a8 <CreateLine>
      break;
 801384a:	e0bc      	b.n	80139c6 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 801384c:	f7ff ffda 	bl	8013804 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 8013850:	4b5f      	ldr	r3, [pc, #380]	@ (80139d0 <HIDS_Upkeep+0x1ac>)
 8013852:	2201      	movs	r2, #1
 8013854:	701a      	strb	r2, [r3, #0]
      break;
 8013856:	e0b6      	b.n	80139c6 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 8013858:	f7f9 fcdc 	bl	800d214 <getSensorLock>
 801385c:	1e03      	subs	r3, r0, #0
 801385e:	d000      	beq.n	8013862 <HIDS_Upkeep+0x3e>
 8013860:	e0aa      	b.n	80139b8 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 8013862:	2001      	movs	r0, #1
 8013864:	f7f9 fcc2 	bl	800d1ec <setSensorLock>
      SetMeasurementIndicator();
 8013868:	f7fe f9ee 	bl	8011c48 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 801386c:	f7ff fe3c 	bl	80134e8 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 8013870:	200a      	movs	r0, #10
 8013872:	f000 f963 	bl	8013b3c <HAL_Delay>
      setSensorLock(FREE);
 8013876:	2000      	movs	r0, #0
 8013878:	f7f9 fcb8 	bl	800d1ec <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 801387c:	4b54      	ldr	r3, [pc, #336]	@ (80139d0 <HIDS_Upkeep+0x1ac>)
 801387e:	2202      	movs	r2, #2
 8013880:	701a      	strb	r2, [r3, #0]
      break;
 8013882:	e0a0      	b.n	80139c6 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 8013884:	f7f9 fcc6 	bl	800d214 <getSensorLock>
 8013888:	1e03      	subs	r3, r0, #0
 801388a:	d000      	beq.n	801388e <HIDS_Upkeep+0x6a>
 801388c:	e096      	b.n	80139bc <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 801388e:	2001      	movs	r0, #1
 8013890:	f7f9 fcac 	bl	800d1ec <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8013894:	4a52      	ldr	r2, [pc, #328]	@ (80139e0 <HIDS_Upkeep+0x1bc>)
 8013896:	4b53      	ldr	r3, [pc, #332]	@ (80139e4 <HIDS_Upkeep+0x1c0>)
 8013898:	0011      	movs	r1, r2
 801389a:	0018      	movs	r0, r3
 801389c:	f7ff ff1c 	bl	80136d8 <HIDS_GetMeasurementValues>
 80138a0:	1e03      	subs	r3, r0, #0
 80138a2:	d002      	beq.n	80138aa <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 80138a4:	4b4a      	ldr	r3, [pc, #296]	@ (80139d0 <HIDS_Upkeep+0x1ac>)
 80138a6:	2203      	movs	r2, #3
 80138a8:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 80138aa:	200a      	movs	r0, #10
 80138ac:	f000 f946 	bl	8013b3c <HAL_Delay>
      setSensorLock(FREE);
 80138b0:	2000      	movs	r0, #0
 80138b2:	f7f9 fc9b 	bl	800d1ec <setSensorLock>
      break;
 80138b6:	e086      	b.n	80139c6 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 80138b8:	4b4a      	ldr	r3, [pc, #296]	@ (80139e4 <HIDS_Upkeep+0x1c0>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	1c18      	adds	r0, r3, #0
 80138be:	f7ef ffe9 	bl	8003894 <__aeabi_f2d>
 80138c2:	0004      	movs	r4, r0
 80138c4:	000d      	movs	r5, r1
 80138c6:	4b46      	ldr	r3, [pc, #280]	@ (80139e0 <HIDS_Upkeep+0x1bc>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	1c18      	adds	r0, r3, #0
 80138cc:	f7ef ffe2 	bl	8003894 <__aeabi_f2d>
 80138d0:	0002      	movs	r2, r0
 80138d2:	000b      	movs	r3, r1
 80138d4:	4844      	ldr	r0, [pc, #272]	@ (80139e8 <HIDS_Upkeep+0x1c4>)
 80138d6:	4941      	ldr	r1, [pc, #260]	@ (80139dc <HIDS_Upkeep+0x1b8>)
 80138d8:	9202      	str	r2, [sp, #8]
 80138da:	9303      	str	r3, [sp, #12]
 80138dc:	9400      	str	r4, [sp, #0]
 80138de:	9501      	str	r5, [sp, #4]
 80138e0:	0002      	movs	r2, r0
 80138e2:	2003      	movs	r0, #3
 80138e4:	f7ff fbe0 	bl	80130a8 <CreateLine>
      setHIDS(temp, humid);
 80138e8:	4b3d      	ldr	r3, [pc, #244]	@ (80139e0 <HIDS_Upkeep+0x1bc>)
 80138ea:	681a      	ldr	r2, [r3, #0]
 80138ec:	4b3d      	ldr	r3, [pc, #244]	@ (80139e4 <HIDS_Upkeep+0x1c0>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	1c19      	adds	r1, r3, #0
 80138f2:	1c10      	adds	r0, r2, #0
 80138f4:	f7f1 f8a2 	bl	8004a3c <setHIDS>
      ResetMeasurementIndicator();
 80138f8:	f7fe f9be 	bl	8011c78 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 80138fc:	4b38      	ldr	r3, [pc, #224]	@ (80139e0 <HIDS_Upkeep+0x1bc>)
 80138fe:	681c      	ldr	r4, [r3, #0]
 8013900:	4a37      	ldr	r2, [pc, #220]	@ (80139e0 <HIDS_Upkeep+0x1bc>)
 8013902:	4b38      	ldr	r3, [pc, #224]	@ (80139e4 <HIDS_Upkeep+0x1c0>)
 8013904:	0011      	movs	r1, r2
 8013906:	0018      	movs	r0, r3
 8013908:	f7ff fd34 	bl	8013374 <HIDS_DewPointCalculation>
 801390c:	1c03      	adds	r3, r0, #0
 801390e:	1c19      	adds	r1, r3, #0
 8013910:	1c20      	adds	r0, r4, #0
 8013912:	f7ed fcef 	bl	80012f4 <__aeabi_fsub>
 8013916:	1c03      	adds	r3, r0, #0
 8013918:	21fe      	movs	r1, #254	@ 0xfe
 801391a:	0589      	lsls	r1, r1, #22
 801391c:	1c18      	adds	r0, r3, #0
 801391e:	f7ec fe07 	bl	8000530 <__aeabi_fcmplt>
 8013922:	1e03      	subs	r3, r0, #0
 8013924:	d023      	beq.n	801396e <HIDS_Upkeep+0x14a>
 8013926:	f7f5 ffe8 	bl	80098fa <getPosixTime>
 801392a:	0002      	movs	r2, r0
 801392c:	4b2f      	ldr	r3, [pc, #188]	@ (80139ec <HIDS_Upkeep+0x1c8>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	1ad2      	subs	r2, r2, r3
 8013932:	23e1      	movs	r3, #225	@ 0xe1
 8013934:	009b      	lsls	r3, r3, #2
 8013936:	429a      	cmp	r2, r3
 8013938:	d919      	bls.n	801396e <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 801393a:	4a2d      	ldr	r2, [pc, #180]	@ (80139f0 <HIDS_Upkeep+0x1cc>)
 801393c:	4b2d      	ldr	r3, [pc, #180]	@ (80139f4 <HIDS_Upkeep+0x1d0>)
 801393e:	0019      	movs	r1, r3
 8013940:	2002      	movs	r0, #2
 8013942:	f7ff fbb1 	bl	80130a8 <CreateLine>
        if (getSensorLock() != FREE) {
 8013946:	f7f9 fc65 	bl	800d214 <getSensorLock>
 801394a:	1e03      	subs	r3, r0, #0
 801394c:	d138      	bne.n	80139c0 <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 801394e:	f7ff fd83 	bl	8013458 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 8013952:	200a      	movs	r0, #10
 8013954:	f000 f8f2 	bl	8013b3c <HAL_Delay>
        setSensorLock(FREE);
 8013958:	2000      	movs	r0, #0
 801395a:	f7f9 fc47 	bl	800d1ec <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 801395e:	f000 f8e3 	bl	8013b28 <HAL_GetTick>
 8013962:	0003      	movs	r3, r0
 8013964:	4a24      	ldr	r2, [pc, #144]	@ (80139f8 <HIDS_Upkeep+0x1d4>)
 8013966:	189a      	adds	r2, r3, r2
 8013968:	4b24      	ldr	r3, [pc, #144]	@ (80139fc <HIDS_Upkeep+0x1d8>)
 801396a:	601a      	str	r2, [r3, #0]
 801396c:	e011      	b.n	8013992 <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 801396e:	f000 f8db 	bl	8013b28 <HAL_GetTick>
 8013972:	0004      	movs	r4, r0
 8013974:	f7f5 fcc2 	bl	80092fc <Check_USB_PowerOn>
 8013978:	1e03      	subs	r3, r0, #0
 801397a:	d103      	bne.n	8013984 <HIDS_Upkeep+0x160>
 801397c:	4b20      	ldr	r3, [pc, #128]	@ (8013a00 <HIDS_Upkeep+0x1dc>)
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d001      	beq.n	8013988 <HIDS_Upkeep+0x164>
 8013984:	4b1f      	ldr	r3, [pc, #124]	@ (8013a04 <HIDS_Upkeep+0x1e0>)
 8013986:	e001      	b.n	801398c <HIDS_Upkeep+0x168>
 8013988:	23fa      	movs	r3, #250	@ 0xfa
 801398a:	009b      	lsls	r3, r3, #2
 801398c:	191a      	adds	r2, r3, r4
 801398e:	4b1b      	ldr	r3, [pc, #108]	@ (80139fc <HIDS_Upkeep+0x1d8>)
 8013990:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 8013992:	4b0f      	ldr	r3, [pc, #60]	@ (80139d0 <HIDS_Upkeep+0x1ac>)
 8013994:	2206      	movs	r2, #6
 8013996:	701a      	strb	r2, [r3, #0]
      break;
 8013998:	e015      	b.n	80139c6 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 801399a:	4b18      	ldr	r3, [pc, #96]	@ (80139fc <HIDS_Upkeep+0x1d8>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	0018      	movs	r0, r3
 80139a0:	f7ff fb2c 	bl	8012ffc <TimestampIsReached>
 80139a4:	1e03      	subs	r3, r0, #0
 80139a6:	d00d      	beq.n	80139c4 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 80139a8:	4b09      	ldr	r3, [pc, #36]	@ (80139d0 <HIDS_Upkeep+0x1ac>)
 80139aa:	2200      	movs	r2, #0
 80139ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 80139ae:	e009      	b.n	80139c4 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 80139b0:	4b07      	ldr	r3, [pc, #28]	@ (80139d0 <HIDS_Upkeep+0x1ac>)
 80139b2:	2200      	movs	r2, #0
 80139b4:	701a      	strb	r2, [r3, #0]
      break;
 80139b6:	e006      	b.n	80139c6 <HIDS_Upkeep+0x1a2>
        break;
 80139b8:	46c0      	nop			@ (mov r8, r8)
 80139ba:	e004      	b.n	80139c6 <HIDS_Upkeep+0x1a2>
        break;
 80139bc:	46c0      	nop			@ (mov r8, r8)
 80139be:	e002      	b.n	80139c6 <HIDS_Upkeep+0x1a2>
          break;
 80139c0:	46c0      	nop			@ (mov r8, r8)
 80139c2:	e000      	b.n	80139c6 <HIDS_Upkeep+0x1a2>
      break;
 80139c4:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 80139c6:	4b02      	ldr	r3, [pc, #8]	@ (80139d0 <HIDS_Upkeep+0x1ac>)
 80139c8:	781b      	ldrb	r3, [r3, #0]
}
 80139ca:	0018      	movs	r0, r3
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bdb0      	pop	{r4, r5, r7, pc}
 80139d0:	20002220 	.word	0x20002220
 80139d4:	0802da80 	.word	0x0802da80
 80139d8:	0802d46c 	.word	0x0802d46c
 80139dc:	0802d4a0 	.word	0x0802d4a0
 80139e0:	200021f8 	.word	0x200021f8
 80139e4:	200021f4 	.word	0x200021f4
 80139e8:	0802d4a4 	.word	0x0802d4a4
 80139ec:	20002214 	.word	0x20002214
 80139f0:	0802d4d8 	.word	0x0802d4d8
 80139f4:	0802d3a4 	.word	0x0802d3a4
 80139f8:	00002ee0 	.word	0x00002ee0
 80139fc:	2000221c 	.word	0x2000221c
 8013a00:	20001e5e 	.word	0x20001e5e
 8013a04:	00002710 	.word	0x00002710

08013a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8013a08:	480d      	ldr	r0, [pc, #52]	@ (8013a40 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8013a0a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8013a0c:	f7fe ff50 	bl	80128b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8013a10:	480c      	ldr	r0, [pc, #48]	@ (8013a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8013a12:	490d      	ldr	r1, [pc, #52]	@ (8013a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8013a14:	4a0d      	ldr	r2, [pc, #52]	@ (8013a4c <LoopForever+0xe>)
  movs r3, #0
 8013a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013a18:	e002      	b.n	8013a20 <LoopCopyDataInit>

08013a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013a1e:	3304      	adds	r3, #4

08013a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013a24:	d3f9      	bcc.n	8013a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013a26:	4a0a      	ldr	r2, [pc, #40]	@ (8013a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8013a28:	4c0a      	ldr	r4, [pc, #40]	@ (8013a54 <LoopForever+0x16>)
  movs r3, #0
 8013a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013a2c:	e001      	b.n	8013a32 <LoopFillZerobss>

08013a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013a30:	3204      	adds	r2, #4

08013a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013a34:	d3fb      	bcc.n	8013a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8013a36:	f011 feb7 	bl	80257a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013a3a:	f7f8 fb9b 	bl	800c174 <main>

08013a3e <LoopForever>:

LoopForever:
    b LoopForever
 8013a3e:	e7fe      	b.n	8013a3e <LoopForever>
   ldr   r0, =_estack
 8013a40:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8013a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013a48:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 8013a4c:	0802e468 	.word	0x0802e468
  ldr r2, =_sbss
 8013a50:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8013a54:	20003628 	.word	0x20003628

08013a58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013a58:	e7fe      	b.n	8013a58 <ADC1_COMP_IRQHandler>
	...

08013a5c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b082      	sub	sp, #8
 8013a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8013a62:	1dfb      	adds	r3, r7, #7
 8013a64:	2200      	movs	r2, #0
 8013a66:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8013a68:	4b0b      	ldr	r3, [pc, #44]	@ (8013a98 <HAL_Init+0x3c>)
 8013a6a:	681a      	ldr	r2, [r3, #0]
 8013a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8013a98 <HAL_Init+0x3c>)
 8013a6e:	2140      	movs	r1, #64	@ 0x40
 8013a70:	430a      	orrs	r2, r1
 8013a72:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013a74:	2003      	movs	r0, #3
 8013a76:	f000 f811 	bl	8013a9c <HAL_InitTick>
 8013a7a:	1e03      	subs	r3, r0, #0
 8013a7c:	d003      	beq.n	8013a86 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8013a7e:	1dfb      	adds	r3, r7, #7
 8013a80:	2201      	movs	r2, #1
 8013a82:	701a      	strb	r2, [r3, #0]
 8013a84:	e001      	b.n	8013a8a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8013a86:	f7fe fdc7 	bl	8012618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8013a8a:	1dfb      	adds	r3, r7, #7
 8013a8c:	781b      	ldrb	r3, [r3, #0]
}
 8013a8e:	0018      	movs	r0, r3
 8013a90:	46bd      	mov	sp, r7
 8013a92:	b002      	add	sp, #8
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	46c0      	nop			@ (mov r8, r8)
 8013a98:	40022000 	.word	0x40022000

08013a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013a9c:	b590      	push	{r4, r7, lr}
 8013a9e:	b083      	sub	sp, #12
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013aa4:	4b14      	ldr	r3, [pc, #80]	@ (8013af8 <HAL_InitTick+0x5c>)
 8013aa6:	681c      	ldr	r4, [r3, #0]
 8013aa8:	4b14      	ldr	r3, [pc, #80]	@ (8013afc <HAL_InitTick+0x60>)
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	0019      	movs	r1, r3
 8013aae:	23fa      	movs	r3, #250	@ 0xfa
 8013ab0:	0098      	lsls	r0, r3, #2
 8013ab2:	f7ec fb77 	bl	80001a4 <__udivsi3>
 8013ab6:	0003      	movs	r3, r0
 8013ab8:	0019      	movs	r1, r3
 8013aba:	0020      	movs	r0, r4
 8013abc:	f7ec fb72 	bl	80001a4 <__udivsi3>
 8013ac0:	0003      	movs	r3, r0
 8013ac2:	0018      	movs	r0, r3
 8013ac4:	f000 fcfd 	bl	80144c2 <HAL_SYSTICK_Config>
 8013ac8:	1e03      	subs	r3, r0, #0
 8013aca:	d001      	beq.n	8013ad0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8013acc:	2301      	movs	r3, #1
 8013ace:	e00f      	b.n	8013af0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	2b03      	cmp	r3, #3
 8013ad4:	d80b      	bhi.n	8013aee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013ad6:	6879      	ldr	r1, [r7, #4]
 8013ad8:	2301      	movs	r3, #1
 8013ada:	425b      	negs	r3, r3
 8013adc:	2200      	movs	r2, #0
 8013ade:	0018      	movs	r0, r3
 8013ae0:	f000 fcc6 	bl	8014470 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8013ae4:	4b06      	ldr	r3, [pc, #24]	@ (8013b00 <HAL_InitTick+0x64>)
 8013ae6:	687a      	ldr	r2, [r7, #4]
 8013ae8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8013aea:	2300      	movs	r3, #0
 8013aec:	e000      	b.n	8013af0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8013aee:	2301      	movs	r3, #1
}
 8013af0:	0018      	movs	r0, r3
 8013af2:	46bd      	mov	sp, r7
 8013af4:	b003      	add	sp, #12
 8013af6:	bd90      	pop	{r4, r7, pc}
 8013af8:	200000e0 	.word	0x200000e0
 8013afc:	200000f4 	.word	0x200000f4
 8013b00:	200000f0 	.word	0x200000f0

08013b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8013b08:	4b05      	ldr	r3, [pc, #20]	@ (8013b20 <HAL_IncTick+0x1c>)
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	001a      	movs	r2, r3
 8013b0e:	4b05      	ldr	r3, [pc, #20]	@ (8013b24 <HAL_IncTick+0x20>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	18d2      	adds	r2, r2, r3
 8013b14:	4b03      	ldr	r3, [pc, #12]	@ (8013b24 <HAL_IncTick+0x20>)
 8013b16:	601a      	str	r2, [r3, #0]
}
 8013b18:	46c0      	nop			@ (mov r8, r8)
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}
 8013b1e:	46c0      	nop			@ (mov r8, r8)
 8013b20:	200000f4 	.word	0x200000f4
 8013b24:	20002224 	.word	0x20002224

08013b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8013b2c:	4b02      	ldr	r3, [pc, #8]	@ (8013b38 <HAL_GetTick+0x10>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
}
 8013b30:	0018      	movs	r0, r3
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}
 8013b36:	46c0      	nop			@ (mov r8, r8)
 8013b38:	20002224 	.word	0x20002224

08013b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b084      	sub	sp, #16
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013b44:	f7ff fff0 	bl	8013b28 <HAL_GetTick>
 8013b48:	0003      	movs	r3, r0
 8013b4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	3301      	adds	r3, #1
 8013b54:	d005      	beq.n	8013b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013b56:	4b0a      	ldr	r3, [pc, #40]	@ (8013b80 <HAL_Delay+0x44>)
 8013b58:	781b      	ldrb	r3, [r3, #0]
 8013b5a:	001a      	movs	r2, r3
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	189b      	adds	r3, r3, r2
 8013b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013b62:	46c0      	nop			@ (mov r8, r8)
 8013b64:	f7ff ffe0 	bl	8013b28 <HAL_GetTick>
 8013b68:	0002      	movs	r2, r0
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	1ad3      	subs	r3, r2, r3
 8013b6e:	68fa      	ldr	r2, [r7, #12]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d8f7      	bhi.n	8013b64 <HAL_Delay+0x28>
  {
  }
}
 8013b74:	46c0      	nop			@ (mov r8, r8)
 8013b76:	46c0      	nop			@ (mov r8, r8)
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	b004      	add	sp, #16
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	46c0      	nop			@ (mov r8, r8)
 8013b80:	200000f4 	.word	0x200000f4

08013b84 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8013b88:	4b04      	ldr	r3, [pc, #16]	@ (8013b9c <HAL_SuspendTick+0x18>)
 8013b8a:	681a      	ldr	r2, [r3, #0]
 8013b8c:	4b03      	ldr	r3, [pc, #12]	@ (8013b9c <HAL_SuspendTick+0x18>)
 8013b8e:	2102      	movs	r1, #2
 8013b90:	438a      	bics	r2, r1
 8013b92:	601a      	str	r2, [r3, #0]
}
 8013b94:	46c0      	nop			@ (mov r8, r8)
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}
 8013b9a:	46c0      	nop			@ (mov r8, r8)
 8013b9c:	e000e010 	.word	0xe000e010

08013ba0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8013ba4:	4b04      	ldr	r3, [pc, #16]	@ (8013bb8 <HAL_ResumeTick+0x18>)
 8013ba6:	681a      	ldr	r2, [r3, #0]
 8013ba8:	4b03      	ldr	r3, [pc, #12]	@ (8013bb8 <HAL_ResumeTick+0x18>)
 8013baa:	2102      	movs	r1, #2
 8013bac:	430a      	orrs	r2, r1
 8013bae:	601a      	str	r2, [r3, #0]
}
 8013bb0:	46c0      	nop			@ (mov r8, r8)
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
 8013bb6:	46c0      	nop			@ (mov r8, r8)
 8013bb8:	e000e010 	.word	0xe000e010

08013bbc <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8013bc0:	4b02      	ldr	r3, [pc, #8]	@ (8013bcc <HAL_GetUIDw0+0x10>)
 8013bc2:	681b      	ldr	r3, [r3, #0]
}
 8013bc4:	0018      	movs	r0, r3
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	46c0      	nop			@ (mov r8, r8)
 8013bcc:	1ff80050 	.word	0x1ff80050

08013bd0 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8013bd4:	4b02      	ldr	r3, [pc, #8]	@ (8013be0 <HAL_GetUIDw1+0x10>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
}
 8013bd8:	0018      	movs	r0, r3
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	46c0      	nop			@ (mov r8, r8)
 8013be0:	1ff80054 	.word	0x1ff80054

08013be4 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8013be8:	4b02      	ldr	r3, [pc, #8]	@ (8013bf4 <HAL_GetUIDw2+0x10>)
 8013bea:	681b      	ldr	r3, [r3, #0]
}
 8013bec:	0018      	movs	r0, r3
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
 8013bf2:	46c0      	nop			@ (mov r8, r8)
 8013bf4:	1ff80064 	.word	0x1ff80064

08013bf8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d101      	bne.n	8013c0a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8013c06:	2301      	movs	r3, #1
 8013c08:	e159      	b.n	8013ebe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d10a      	bne.n	8013c28 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	2200      	movs	r2, #0
 8013c16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2250      	movs	r2, #80	@ 0x50
 8013c1c:	2100      	movs	r1, #0
 8013c1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	0018      	movs	r0, r3
 8013c24:	f7f6 fa22 	bl	800a06c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c2c:	2210      	movs	r2, #16
 8013c2e:	4013      	ands	r3, r2
 8013c30:	2b10      	cmp	r3, #16
 8013c32:	d005      	beq.n	8013c40 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	689b      	ldr	r3, [r3, #8]
 8013c3a:	2204      	movs	r2, #4
 8013c3c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8013c3e:	d00b      	beq.n	8013c58 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c44:	2210      	movs	r2, #16
 8013c46:	431a      	orrs	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2250      	movs	r2, #80	@ 0x50
 8013c50:	2100      	movs	r1, #0
 8013c52:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013c54:	2301      	movs	r3, #1
 8013c56:	e132      	b.n	8013ebe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c5c:	4a9a      	ldr	r2, [pc, #616]	@ (8013ec8 <HAL_ADC_Init+0x2d0>)
 8013c5e:	4013      	ands	r3, r2
 8013c60:	2202      	movs	r2, #2
 8013c62:	431a      	orrs	r2, r3
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	689b      	ldr	r3, [r3, #8]
 8013c6e:	2203      	movs	r2, #3
 8013c70:	4013      	ands	r3, r2
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	d108      	bne.n	8013c88 <HAL_ADC_Init+0x90>
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	2201      	movs	r2, #1
 8013c7e:	4013      	ands	r3, r2
 8013c80:	2b01      	cmp	r3, #1
 8013c82:	d101      	bne.n	8013c88 <HAL_ADC_Init+0x90>
 8013c84:	2301      	movs	r3, #1
 8013c86:	e000      	b.n	8013c8a <HAL_ADC_Init+0x92>
 8013c88:	2300      	movs	r3, #0
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d149      	bne.n	8013d22 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	685a      	ldr	r2, [r3, #4]
 8013c92:	23c0      	movs	r3, #192	@ 0xc0
 8013c94:	061b      	lsls	r3, r3, #24
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d00b      	beq.n	8013cb2 <HAL_ADC_Init+0xba>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	685a      	ldr	r2, [r3, #4]
 8013c9e:	2380      	movs	r3, #128	@ 0x80
 8013ca0:	05db      	lsls	r3, r3, #23
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d005      	beq.n	8013cb2 <HAL_ADC_Init+0xba>
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	685a      	ldr	r2, [r3, #4]
 8013caa:	2380      	movs	r3, #128	@ 0x80
 8013cac:	061b      	lsls	r3, r3, #24
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d111      	bne.n	8013cd6 <HAL_ADC_Init+0xde>
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	691a      	ldr	r2, [r3, #16]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	0092      	lsls	r2, r2, #2
 8013cbe:	0892      	lsrs	r2, r2, #2
 8013cc0:	611a      	str	r2, [r3, #16]
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	6919      	ldr	r1, [r3, #16]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	685a      	ldr	r2, [r3, #4]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	430a      	orrs	r2, r1
 8013cd2:	611a      	str	r2, [r3, #16]
 8013cd4:	e014      	b.n	8013d00 <HAL_ADC_Init+0x108>
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	691a      	ldr	r2, [r3, #16]
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	0092      	lsls	r2, r2, #2
 8013ce2:	0892      	lsrs	r2, r2, #2
 8013ce4:	611a      	str	r2, [r3, #16]
 8013ce6:	4b79      	ldr	r3, [pc, #484]	@ (8013ecc <HAL_ADC_Init+0x2d4>)
 8013ce8:	681a      	ldr	r2, [r3, #0]
 8013cea:	4b78      	ldr	r3, [pc, #480]	@ (8013ecc <HAL_ADC_Init+0x2d4>)
 8013cec:	4978      	ldr	r1, [pc, #480]	@ (8013ed0 <HAL_ADC_Init+0x2d8>)
 8013cee:	400a      	ands	r2, r1
 8013cf0:	601a      	str	r2, [r3, #0]
 8013cf2:	4b76      	ldr	r3, [pc, #472]	@ (8013ecc <HAL_ADC_Init+0x2d4>)
 8013cf4:	6819      	ldr	r1, [r3, #0]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	685a      	ldr	r2, [r3, #4]
 8013cfa:	4b74      	ldr	r3, [pc, #464]	@ (8013ecc <HAL_ADC_Init+0x2d4>)
 8013cfc:	430a      	orrs	r2, r1
 8013cfe:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	68da      	ldr	r2, [r3, #12]
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	2118      	movs	r1, #24
 8013d0c:	438a      	bics	r2, r1
 8013d0e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	68d9      	ldr	r1, [r3, #12]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	689a      	ldr	r2, [r3, #8]
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	430a      	orrs	r2, r1
 8013d20:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8013d22:	4b6a      	ldr	r3, [pc, #424]	@ (8013ecc <HAL_ADC_Init+0x2d4>)
 8013d24:	681a      	ldr	r2, [r3, #0]
 8013d26:	4b69      	ldr	r3, [pc, #420]	@ (8013ecc <HAL_ADC_Init+0x2d4>)
 8013d28:	496a      	ldr	r1, [pc, #424]	@ (8013ed4 <HAL_ADC_Init+0x2dc>)
 8013d2a:	400a      	ands	r2, r1
 8013d2c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8013d2e:	4b67      	ldr	r3, [pc, #412]	@ (8013ecc <HAL_ADC_Init+0x2d4>)
 8013d30:	6819      	ldr	r1, [r3, #0]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d36:	065a      	lsls	r2, r3, #25
 8013d38:	4b64      	ldr	r3, [pc, #400]	@ (8013ecc <HAL_ADC_Init+0x2d4>)
 8013d3a:	430a      	orrs	r2, r1
 8013d3c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	689a      	ldr	r2, [r3, #8]
 8013d44:	2380      	movs	r3, #128	@ 0x80
 8013d46:	055b      	lsls	r3, r3, #21
 8013d48:	4013      	ands	r3, r2
 8013d4a:	d108      	bne.n	8013d5e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	689a      	ldr	r2, [r3, #8]
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	2180      	movs	r1, #128	@ 0x80
 8013d58:	0549      	lsls	r1, r1, #21
 8013d5a:	430a      	orrs	r2, r1
 8013d5c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	68da      	ldr	r2, [r3, #12]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	495b      	ldr	r1, [pc, #364]	@ (8013ed8 <HAL_ADC_Init+0x2e0>)
 8013d6a:	400a      	ands	r2, r1
 8013d6c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	68d9      	ldr	r1, [r3, #12]
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	691b      	ldr	r3, [r3, #16]
 8013d7c:	2b02      	cmp	r3, #2
 8013d7e:	d101      	bne.n	8013d84 <HAL_ADC_Init+0x18c>
 8013d80:	2304      	movs	r3, #4
 8013d82:	e000      	b.n	8013d86 <HAL_ADC_Init+0x18e>
 8013d84:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013d86:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2020      	movs	r0, #32
 8013d8c:	5c1b      	ldrb	r3, [r3, r0]
 8013d8e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8013d90:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	202c      	movs	r0, #44	@ 0x2c
 8013d96:	5c1b      	ldrb	r3, [r3, r0]
 8013d98:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8013d9a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8013da0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	699b      	ldr	r3, [r3, #24]
 8013da6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8013da8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	69db      	ldr	r3, [r3, #28]
 8013dae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8013db0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	430a      	orrs	r2, r1
 8013db8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013dbe:	23c2      	movs	r3, #194	@ 0xc2
 8013dc0:	33ff      	adds	r3, #255	@ 0xff
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	d00b      	beq.n	8013dde <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	68d9      	ldr	r1, [r3, #12]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8013dd4:	431a      	orrs	r2, r3
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	430a      	orrs	r2, r1
 8013ddc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	2221      	movs	r2, #33	@ 0x21
 8013de2:	5c9b      	ldrb	r3, [r3, r2]
 8013de4:	2b01      	cmp	r3, #1
 8013de6:	d11a      	bne.n	8013e1e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2220      	movs	r2, #32
 8013dec:	5c9b      	ldrb	r3, [r3, r2]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d109      	bne.n	8013e06 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	68da      	ldr	r2, [r3, #12]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	2180      	movs	r1, #128	@ 0x80
 8013dfe:	0249      	lsls	r1, r1, #9
 8013e00:	430a      	orrs	r2, r1
 8013e02:	60da      	str	r2, [r3, #12]
 8013e04:	e00b      	b.n	8013e1e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e0a:	2220      	movs	r2, #32
 8013e0c:	431a      	orrs	r2, r3
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013e16:	2201      	movs	r2, #1
 8013e18:	431a      	orrs	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e22:	2b01      	cmp	r3, #1
 8013e24:	d11f      	bne.n	8013e66 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	691a      	ldr	r2, [r3, #16]
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	492a      	ldr	r1, [pc, #168]	@ (8013edc <HAL_ADC_Init+0x2e4>)
 8013e32:	400a      	ands	r2, r1
 8013e34:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	6919      	ldr	r1, [r3, #16]
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013e44:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8013e4a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	430a      	orrs	r2, r1
 8013e52:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	691a      	ldr	r2, [r3, #16]
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	2101      	movs	r1, #1
 8013e60:	430a      	orrs	r2, r1
 8013e62:	611a      	str	r2, [r3, #16]
 8013e64:	e00e      	b.n	8013e84 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	691b      	ldr	r3, [r3, #16]
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	4013      	ands	r3, r2
 8013e70:	2b01      	cmp	r3, #1
 8013e72:	d107      	bne.n	8013e84 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	691a      	ldr	r2, [r3, #16]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	2101      	movs	r1, #1
 8013e80:	438a      	bics	r2, r1
 8013e82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	695a      	ldr	r2, [r3, #20]
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2107      	movs	r1, #7
 8013e90:	438a      	bics	r2, r1
 8013e92:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	6959      	ldr	r1, [r3, #20]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	430a      	orrs	r2, r1
 8013ea4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013eb0:	2203      	movs	r2, #3
 8013eb2:	4393      	bics	r3, r2
 8013eb4:	2201      	movs	r2, #1
 8013eb6:	431a      	orrs	r2, r3
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8013ebc:	2300      	movs	r3, #0
}
 8013ebe:	0018      	movs	r0, r3
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	b002      	add	sp, #8
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	46c0      	nop			@ (mov r8, r8)
 8013ec8:	fffffefd 	.word	0xfffffefd
 8013ecc:	40012708 	.word	0x40012708
 8013ed0:	ffc3ffff 	.word	0xffc3ffff
 8013ed4:	fdffffff 	.word	0xfdffffff
 8013ed8:	fffe0219 	.word	0xfffe0219
 8013edc:	fffffc03 	.word	0xfffffc03

08013ee0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8013ee0:	b590      	push	{r4, r7, lr}
 8013ee2:	b085      	sub	sp, #20
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013ee8:	230f      	movs	r3, #15
 8013eea:	18fb      	adds	r3, r7, r3
 8013eec:	2200      	movs	r2, #0
 8013eee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	689b      	ldr	r3, [r3, #8]
 8013ef6:	2204      	movs	r2, #4
 8013ef8:	4013      	ands	r3, r2
 8013efa:	d138      	bne.n	8013f6e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2250      	movs	r2, #80	@ 0x50
 8013f00:	5c9b      	ldrb	r3, [r3, r2]
 8013f02:	2b01      	cmp	r3, #1
 8013f04:	d101      	bne.n	8013f0a <HAL_ADC_Start+0x2a>
 8013f06:	2302      	movs	r3, #2
 8013f08:	e038      	b.n	8013f7c <HAL_ADC_Start+0x9c>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2250      	movs	r2, #80	@ 0x50
 8013f0e:	2101      	movs	r1, #1
 8013f10:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	69db      	ldr	r3, [r3, #28]
 8013f16:	2b01      	cmp	r3, #1
 8013f18:	d007      	beq.n	8013f2a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8013f1a:	230f      	movs	r3, #15
 8013f1c:	18fc      	adds	r4, r7, r3
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	0018      	movs	r0, r3
 8013f22:	f000 f95f 	bl	80141e4 <ADC_Enable>
 8013f26:	0003      	movs	r3, r0
 8013f28:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8013f2a:	230f      	movs	r3, #15
 8013f2c:	18fb      	adds	r3, r7, r3
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d120      	bne.n	8013f76 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f38:	4a12      	ldr	r2, [pc, #72]	@ (8013f84 <HAL_ADC_Start+0xa4>)
 8013f3a:	4013      	ands	r3, r2
 8013f3c:	2280      	movs	r2, #128	@ 0x80
 8013f3e:	0052      	lsls	r2, r2, #1
 8013f40:	431a      	orrs	r2, r3
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2200      	movs	r2, #0
 8013f4a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2250      	movs	r2, #80	@ 0x50
 8013f50:	2100      	movs	r1, #0
 8013f52:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	221c      	movs	r2, #28
 8013f5a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	689a      	ldr	r2, [r3, #8]
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	2104      	movs	r1, #4
 8013f68:	430a      	orrs	r2, r1
 8013f6a:	609a      	str	r2, [r3, #8]
 8013f6c:	e003      	b.n	8013f76 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8013f6e:	230f      	movs	r3, #15
 8013f70:	18fb      	adds	r3, r7, r3
 8013f72:	2202      	movs	r2, #2
 8013f74:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8013f76:	230f      	movs	r3, #15
 8013f78:	18fb      	adds	r3, r7, r3
 8013f7a:	781b      	ldrb	r3, [r3, #0]
}
 8013f7c:	0018      	movs	r0, r3
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	b005      	add	sp, #20
 8013f82:	bd90      	pop	{r4, r7, pc}
 8013f84:	fffff0fe 	.word	0xfffff0fe

08013f88 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b084      	sub	sp, #16
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8013f92:	2300      	movs	r3, #0
 8013f94:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8013f96:	2300      	movs	r3, #0
 8013f98:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	695b      	ldr	r3, [r3, #20]
 8013f9e:	2b08      	cmp	r3, #8
 8013fa0:	d102      	bne.n	8013fa8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8013fa2:	2308      	movs	r3, #8
 8013fa4:	60fb      	str	r3, [r7, #12]
 8013fa6:	e014      	b.n	8013fd2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	68db      	ldr	r3, [r3, #12]
 8013fae:	2201      	movs	r2, #1
 8013fb0:	4013      	ands	r3, r2
 8013fb2:	2b01      	cmp	r3, #1
 8013fb4:	d10b      	bne.n	8013fce <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013fba:	2220      	movs	r2, #32
 8013fbc:	431a      	orrs	r2, r3
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2250      	movs	r2, #80	@ 0x50
 8013fc6:	2100      	movs	r1, #0
 8013fc8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8013fca:	2301      	movs	r3, #1
 8013fcc:	e072      	b.n	80140b4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8013fce:	230c      	movs	r3, #12
 8013fd0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8013fd2:	f7ff fda9 	bl	8013b28 <HAL_GetTick>
 8013fd6:	0003      	movs	r3, r0
 8013fd8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8013fda:	e01f      	b.n	801401c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	3301      	adds	r3, #1
 8013fe0:	d01c      	beq.n	801401c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8013fe2:	683b      	ldr	r3, [r7, #0]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d007      	beq.n	8013ff8 <HAL_ADC_PollForConversion+0x70>
 8013fe8:	f7ff fd9e 	bl	8013b28 <HAL_GetTick>
 8013fec:	0002      	movs	r2, r0
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	1ad3      	subs	r3, r2, r3
 8013ff2:	683a      	ldr	r2, [r7, #0]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d211      	bcs.n	801401c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	68fa      	ldr	r2, [r7, #12]
 8014000:	4013      	ands	r3, r2
 8014002:	d10b      	bne.n	801401c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014008:	2204      	movs	r2, #4
 801400a:	431a      	orrs	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2250      	movs	r2, #80	@ 0x50
 8014014:	2100      	movs	r1, #0
 8014016:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014018:	2303      	movs	r3, #3
 801401a:	e04b      	b.n	80140b4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	68fa      	ldr	r2, [r7, #12]
 8014024:	4013      	ands	r3, r2
 8014026:	d0d9      	beq.n	8013fdc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801402c:	2280      	movs	r2, #128	@ 0x80
 801402e:	0092      	lsls	r2, r2, #2
 8014030:	431a      	orrs	r2, r3
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	68da      	ldr	r2, [r3, #12]
 801403c:	23c0      	movs	r3, #192	@ 0xc0
 801403e:	011b      	lsls	r3, r3, #4
 8014040:	4013      	ands	r3, r2
 8014042:	d12e      	bne.n	80140a2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2220      	movs	r2, #32
 8014048:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 801404a:	2b00      	cmp	r3, #0
 801404c:	d129      	bne.n	80140a2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2208      	movs	r2, #8
 8014056:	4013      	ands	r3, r2
 8014058:	2b08      	cmp	r3, #8
 801405a:	d122      	bne.n	80140a2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	689b      	ldr	r3, [r3, #8]
 8014062:	2204      	movs	r2, #4
 8014064:	4013      	ands	r3, r2
 8014066:	d110      	bne.n	801408a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	685a      	ldr	r2, [r3, #4]
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	210c      	movs	r1, #12
 8014074:	438a      	bics	r2, r1
 8014076:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801407c:	4a0f      	ldr	r2, [pc, #60]	@ (80140bc <HAL_ADC_PollForConversion+0x134>)
 801407e:	4013      	ands	r3, r2
 8014080:	2201      	movs	r2, #1
 8014082:	431a      	orrs	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	655a      	str	r2, [r3, #84]	@ 0x54
 8014088:	e00b      	b.n	80140a2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801408e:	2220      	movs	r2, #32
 8014090:	431a      	orrs	r2, r3
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801409a:	2201      	movs	r2, #1
 801409c:	431a      	orrs	r2, r3
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	699b      	ldr	r3, [r3, #24]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d103      	bne.n	80140b2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	220c      	movs	r2, #12
 80140b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80140b2:	2300      	movs	r3, #0
}
 80140b4:	0018      	movs	r0, r3
 80140b6:	46bd      	mov	sp, r7
 80140b8:	b004      	add	sp, #16
 80140ba:	bd80      	pop	{r7, pc}
 80140bc:	fffffefe 	.word	0xfffffefe

080140c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b082      	sub	sp, #8
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80140ce:	0018      	movs	r0, r3
 80140d0:	46bd      	mov	sp, r7
 80140d2:	b002      	add	sp, #8
 80140d4:	bd80      	pop	{r7, pc}
	...

080140d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b082      	sub	sp, #8
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
 80140e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2250      	movs	r2, #80	@ 0x50
 80140e6:	5c9b      	ldrb	r3, [r3, r2]
 80140e8:	2b01      	cmp	r3, #1
 80140ea:	d101      	bne.n	80140f0 <HAL_ADC_ConfigChannel+0x18>
 80140ec:	2302      	movs	r3, #2
 80140ee:	e06c      	b.n	80141ca <HAL_ADC_ConfigChannel+0xf2>
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2250      	movs	r2, #80	@ 0x50
 80140f4:	2101      	movs	r1, #1
 80140f6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	689b      	ldr	r3, [r3, #8]
 80140fe:	2204      	movs	r2, #4
 8014100:	4013      	ands	r3, r2
 8014102:	d00b      	beq.n	801411c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014108:	2220      	movs	r2, #32
 801410a:	431a      	orrs	r2, r3
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	2250      	movs	r2, #80	@ 0x50
 8014114:	2100      	movs	r1, #0
 8014116:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014118:	2301      	movs	r3, #1
 801411a:	e056      	b.n	80141ca <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	685b      	ldr	r3, [r3, #4]
 8014120:	4a2c      	ldr	r2, [pc, #176]	@ (80141d4 <HAL_ADC_ConfigChannel+0xfc>)
 8014122:	4293      	cmp	r3, r2
 8014124:	d028      	beq.n	8014178 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	035b      	lsls	r3, r3, #13
 8014132:	0b5a      	lsrs	r2, r3, #13
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	430a      	orrs	r2, r1
 801413a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 801413c:	683b      	ldr	r3, [r7, #0]
 801413e:	681a      	ldr	r2, [r3, #0]
 8014140:	2380      	movs	r3, #128	@ 0x80
 8014142:	02db      	lsls	r3, r3, #11
 8014144:	4013      	ands	r3, r2
 8014146:	d009      	beq.n	801415c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8014148:	4b23      	ldr	r3, [pc, #140]	@ (80141d8 <HAL_ADC_ConfigChannel+0x100>)
 801414a:	681a      	ldr	r2, [r3, #0]
 801414c:	4b22      	ldr	r3, [pc, #136]	@ (80141d8 <HAL_ADC_ConfigChannel+0x100>)
 801414e:	2180      	movs	r1, #128	@ 0x80
 8014150:	0409      	lsls	r1, r1, #16
 8014152:	430a      	orrs	r2, r1
 8014154:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8014156:	200a      	movs	r0, #10
 8014158:	f000 f8ac 	bl	80142b4 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	681a      	ldr	r2, [r3, #0]
 8014160:	2380      	movs	r3, #128	@ 0x80
 8014162:	029b      	lsls	r3, r3, #10
 8014164:	4013      	ands	r3, r2
 8014166:	d02b      	beq.n	80141c0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8014168:	4b1b      	ldr	r3, [pc, #108]	@ (80141d8 <HAL_ADC_ConfigChannel+0x100>)
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	4b1a      	ldr	r3, [pc, #104]	@ (80141d8 <HAL_ADC_ConfigChannel+0x100>)
 801416e:	2180      	movs	r1, #128	@ 0x80
 8014170:	03c9      	lsls	r1, r1, #15
 8014172:	430a      	orrs	r2, r1
 8014174:	601a      	str	r2, [r3, #0]
 8014176:	e023      	b.n	80141c0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	035b      	lsls	r3, r3, #13
 8014184:	0b5b      	lsrs	r3, r3, #13
 8014186:	43d9      	mvns	r1, r3
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	400a      	ands	r2, r1
 801418e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	681a      	ldr	r2, [r3, #0]
 8014194:	2380      	movs	r3, #128	@ 0x80
 8014196:	02db      	lsls	r3, r3, #11
 8014198:	4013      	ands	r3, r2
 801419a:	d005      	beq.n	80141a8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 801419c:	4b0e      	ldr	r3, [pc, #56]	@ (80141d8 <HAL_ADC_ConfigChannel+0x100>)
 801419e:	681a      	ldr	r2, [r3, #0]
 80141a0:	4b0d      	ldr	r3, [pc, #52]	@ (80141d8 <HAL_ADC_ConfigChannel+0x100>)
 80141a2:	490e      	ldr	r1, [pc, #56]	@ (80141dc <HAL_ADC_ConfigChannel+0x104>)
 80141a4:	400a      	ands	r2, r1
 80141a6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	681a      	ldr	r2, [r3, #0]
 80141ac:	2380      	movs	r3, #128	@ 0x80
 80141ae:	029b      	lsls	r3, r3, #10
 80141b0:	4013      	ands	r3, r2
 80141b2:	d005      	beq.n	80141c0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80141b4:	4b08      	ldr	r3, [pc, #32]	@ (80141d8 <HAL_ADC_ConfigChannel+0x100>)
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	4b07      	ldr	r3, [pc, #28]	@ (80141d8 <HAL_ADC_ConfigChannel+0x100>)
 80141ba:	4909      	ldr	r1, [pc, #36]	@ (80141e0 <HAL_ADC_ConfigChannel+0x108>)
 80141bc:	400a      	ands	r2, r1
 80141be:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2250      	movs	r2, #80	@ 0x50
 80141c4:	2100      	movs	r1, #0
 80141c6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80141c8:	2300      	movs	r3, #0
}
 80141ca:	0018      	movs	r0, r3
 80141cc:	46bd      	mov	sp, r7
 80141ce:	b002      	add	sp, #8
 80141d0:	bd80      	pop	{r7, pc}
 80141d2:	46c0      	nop			@ (mov r8, r8)
 80141d4:	00001001 	.word	0x00001001
 80141d8:	40012708 	.word	0x40012708
 80141dc:	ff7fffff 	.word	0xff7fffff
 80141e0:	ffbfffff 	.word	0xffbfffff

080141e4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b084      	sub	sp, #16
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80141ec:	2300      	movs	r3, #0
 80141ee:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	689b      	ldr	r3, [r3, #8]
 80141f6:	2203      	movs	r2, #3
 80141f8:	4013      	ands	r3, r2
 80141fa:	2b01      	cmp	r3, #1
 80141fc:	d108      	bne.n	8014210 <ADC_Enable+0x2c>
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	2201      	movs	r2, #1
 8014206:	4013      	ands	r3, r2
 8014208:	2b01      	cmp	r3, #1
 801420a:	d101      	bne.n	8014210 <ADC_Enable+0x2c>
 801420c:	2301      	movs	r3, #1
 801420e:	e000      	b.n	8014212 <ADC_Enable+0x2e>
 8014210:	2300      	movs	r3, #0
 8014212:	2b00      	cmp	r3, #0
 8014214:	d146      	bne.n	80142a4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	689b      	ldr	r3, [r3, #8]
 801421c:	4a24      	ldr	r2, [pc, #144]	@ (80142b0 <ADC_Enable+0xcc>)
 801421e:	4013      	ands	r3, r2
 8014220:	d00d      	beq.n	801423e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014226:	2210      	movs	r2, #16
 8014228:	431a      	orrs	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014232:	2201      	movs	r2, #1
 8014234:	431a      	orrs	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 801423a:	2301      	movs	r3, #1
 801423c:	e033      	b.n	80142a6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	689a      	ldr	r2, [r3, #8]
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	2101      	movs	r1, #1
 801424a:	430a      	orrs	r2, r1
 801424c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 801424e:	2001      	movs	r0, #1
 8014250:	f000 f830 	bl	80142b4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8014254:	f7ff fc68 	bl	8013b28 <HAL_GetTick>
 8014258:	0003      	movs	r3, r0
 801425a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801425c:	e01b      	b.n	8014296 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801425e:	f7ff fc63 	bl	8013b28 <HAL_GetTick>
 8014262:	0002      	movs	r2, r0
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	1ad3      	subs	r3, r2, r3
 8014268:	2b0a      	cmp	r3, #10
 801426a:	d914      	bls.n	8014296 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	2201      	movs	r2, #1
 8014274:	4013      	ands	r3, r2
 8014276:	2b01      	cmp	r3, #1
 8014278:	d00d      	beq.n	8014296 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801427e:	2210      	movs	r2, #16
 8014280:	431a      	orrs	r2, r3
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801428a:	2201      	movs	r2, #1
 801428c:	431a      	orrs	r2, r3
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8014292:	2301      	movs	r3, #1
 8014294:	e007      	b.n	80142a6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	2201      	movs	r2, #1
 801429e:	4013      	ands	r3, r2
 80142a0:	2b01      	cmp	r3, #1
 80142a2:	d1dc      	bne.n	801425e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80142a4:	2300      	movs	r3, #0
}
 80142a6:	0018      	movs	r0, r3
 80142a8:	46bd      	mov	sp, r7
 80142aa:	b004      	add	sp, #16
 80142ac:	bd80      	pop	{r7, pc}
 80142ae:	46c0      	nop			@ (mov r8, r8)
 80142b0:	80000017 	.word	0x80000017

080142b4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b084      	sub	sp, #16
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80142bc:	4b0b      	ldr	r3, [pc, #44]	@ (80142ec <ADC_DelayMicroSecond+0x38>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	490b      	ldr	r1, [pc, #44]	@ (80142f0 <ADC_DelayMicroSecond+0x3c>)
 80142c2:	0018      	movs	r0, r3
 80142c4:	f7eb ff6e 	bl	80001a4 <__udivsi3>
 80142c8:	0003      	movs	r3, r0
 80142ca:	001a      	movs	r2, r3
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	4353      	muls	r3, r2
 80142d0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80142d2:	e002      	b.n	80142da <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	3b01      	subs	r3, #1
 80142d8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d1f9      	bne.n	80142d4 <ADC_DelayMicroSecond+0x20>
  }
}
 80142e0:	46c0      	nop			@ (mov r8, r8)
 80142e2:	46c0      	nop			@ (mov r8, r8)
 80142e4:	46bd      	mov	sp, r7
 80142e6:	b004      	add	sp, #16
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	46c0      	nop			@ (mov r8, r8)
 80142ec:	200000e0 	.word	0x200000e0
 80142f0:	000f4240 	.word	0x000f4240

080142f4 <__NVIC_EnableIRQ>:
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	0002      	movs	r2, r0
 80142fc:	1dfb      	adds	r3, r7, #7
 80142fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8014300:	1dfb      	adds	r3, r7, #7
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	2b7f      	cmp	r3, #127	@ 0x7f
 8014306:	d809      	bhi.n	801431c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014308:	1dfb      	adds	r3, r7, #7
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	001a      	movs	r2, r3
 801430e:	231f      	movs	r3, #31
 8014310:	401a      	ands	r2, r3
 8014312:	4b04      	ldr	r3, [pc, #16]	@ (8014324 <__NVIC_EnableIRQ+0x30>)
 8014314:	2101      	movs	r1, #1
 8014316:	4091      	lsls	r1, r2
 8014318:	000a      	movs	r2, r1
 801431a:	601a      	str	r2, [r3, #0]
}
 801431c:	46c0      	nop			@ (mov r8, r8)
 801431e:	46bd      	mov	sp, r7
 8014320:	b002      	add	sp, #8
 8014322:	bd80      	pop	{r7, pc}
 8014324:	e000e100 	.word	0xe000e100

08014328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014328:	b590      	push	{r4, r7, lr}
 801432a:	b083      	sub	sp, #12
 801432c:	af00      	add	r7, sp, #0
 801432e:	0002      	movs	r2, r0
 8014330:	6039      	str	r1, [r7, #0]
 8014332:	1dfb      	adds	r3, r7, #7
 8014334:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8014336:	1dfb      	adds	r3, r7, #7
 8014338:	781b      	ldrb	r3, [r3, #0]
 801433a:	2b7f      	cmp	r3, #127	@ 0x7f
 801433c:	d828      	bhi.n	8014390 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801433e:	4a2f      	ldr	r2, [pc, #188]	@ (80143fc <__NVIC_SetPriority+0xd4>)
 8014340:	1dfb      	adds	r3, r7, #7
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	b25b      	sxtb	r3, r3
 8014346:	089b      	lsrs	r3, r3, #2
 8014348:	33c0      	adds	r3, #192	@ 0xc0
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	589b      	ldr	r3, [r3, r2]
 801434e:	1dfa      	adds	r2, r7, #7
 8014350:	7812      	ldrb	r2, [r2, #0]
 8014352:	0011      	movs	r1, r2
 8014354:	2203      	movs	r2, #3
 8014356:	400a      	ands	r2, r1
 8014358:	00d2      	lsls	r2, r2, #3
 801435a:	21ff      	movs	r1, #255	@ 0xff
 801435c:	4091      	lsls	r1, r2
 801435e:	000a      	movs	r2, r1
 8014360:	43d2      	mvns	r2, r2
 8014362:	401a      	ands	r2, r3
 8014364:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	019b      	lsls	r3, r3, #6
 801436a:	22ff      	movs	r2, #255	@ 0xff
 801436c:	401a      	ands	r2, r3
 801436e:	1dfb      	adds	r3, r7, #7
 8014370:	781b      	ldrb	r3, [r3, #0]
 8014372:	0018      	movs	r0, r3
 8014374:	2303      	movs	r3, #3
 8014376:	4003      	ands	r3, r0
 8014378:	00db      	lsls	r3, r3, #3
 801437a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801437c:	481f      	ldr	r0, [pc, #124]	@ (80143fc <__NVIC_SetPriority+0xd4>)
 801437e:	1dfb      	adds	r3, r7, #7
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	b25b      	sxtb	r3, r3
 8014384:	089b      	lsrs	r3, r3, #2
 8014386:	430a      	orrs	r2, r1
 8014388:	33c0      	adds	r3, #192	@ 0xc0
 801438a:	009b      	lsls	r3, r3, #2
 801438c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 801438e:	e031      	b.n	80143f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014390:	4a1b      	ldr	r2, [pc, #108]	@ (8014400 <__NVIC_SetPriority+0xd8>)
 8014392:	1dfb      	adds	r3, r7, #7
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	0019      	movs	r1, r3
 8014398:	230f      	movs	r3, #15
 801439a:	400b      	ands	r3, r1
 801439c:	3b08      	subs	r3, #8
 801439e:	089b      	lsrs	r3, r3, #2
 80143a0:	3306      	adds	r3, #6
 80143a2:	009b      	lsls	r3, r3, #2
 80143a4:	18d3      	adds	r3, r2, r3
 80143a6:	3304      	adds	r3, #4
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	1dfa      	adds	r2, r7, #7
 80143ac:	7812      	ldrb	r2, [r2, #0]
 80143ae:	0011      	movs	r1, r2
 80143b0:	2203      	movs	r2, #3
 80143b2:	400a      	ands	r2, r1
 80143b4:	00d2      	lsls	r2, r2, #3
 80143b6:	21ff      	movs	r1, #255	@ 0xff
 80143b8:	4091      	lsls	r1, r2
 80143ba:	000a      	movs	r2, r1
 80143bc:	43d2      	mvns	r2, r2
 80143be:	401a      	ands	r2, r3
 80143c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	019b      	lsls	r3, r3, #6
 80143c6:	22ff      	movs	r2, #255	@ 0xff
 80143c8:	401a      	ands	r2, r3
 80143ca:	1dfb      	adds	r3, r7, #7
 80143cc:	781b      	ldrb	r3, [r3, #0]
 80143ce:	0018      	movs	r0, r3
 80143d0:	2303      	movs	r3, #3
 80143d2:	4003      	ands	r3, r0
 80143d4:	00db      	lsls	r3, r3, #3
 80143d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80143d8:	4809      	ldr	r0, [pc, #36]	@ (8014400 <__NVIC_SetPriority+0xd8>)
 80143da:	1dfb      	adds	r3, r7, #7
 80143dc:	781b      	ldrb	r3, [r3, #0]
 80143de:	001c      	movs	r4, r3
 80143e0:	230f      	movs	r3, #15
 80143e2:	4023      	ands	r3, r4
 80143e4:	3b08      	subs	r3, #8
 80143e6:	089b      	lsrs	r3, r3, #2
 80143e8:	430a      	orrs	r2, r1
 80143ea:	3306      	adds	r3, #6
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	18c3      	adds	r3, r0, r3
 80143f0:	3304      	adds	r3, #4
 80143f2:	601a      	str	r2, [r3, #0]
}
 80143f4:	46c0      	nop			@ (mov r8, r8)
 80143f6:	46bd      	mov	sp, r7
 80143f8:	b003      	add	sp, #12
 80143fa:	bd90      	pop	{r4, r7, pc}
 80143fc:	e000e100 	.word	0xe000e100
 8014400:	e000ed00 	.word	0xe000ed00

08014404 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8014408:	f3bf 8f4f 	dsb	sy
}
 801440c:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801440e:	4b04      	ldr	r3, [pc, #16]	@ (8014420 <__NVIC_SystemReset+0x1c>)
 8014410:	4a04      	ldr	r2, [pc, #16]	@ (8014424 <__NVIC_SystemReset+0x20>)
 8014412:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014414:	f3bf 8f4f 	dsb	sy
}
 8014418:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801441a:	46c0      	nop			@ (mov r8, r8)
 801441c:	e7fd      	b.n	801441a <__NVIC_SystemReset+0x16>
 801441e:	46c0      	nop			@ (mov r8, r8)
 8014420:	e000ed00 	.word	0xe000ed00
 8014424:	05fa0004 	.word	0x05fa0004

08014428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b082      	sub	sp, #8
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	1e5a      	subs	r2, r3, #1
 8014434:	2380      	movs	r3, #128	@ 0x80
 8014436:	045b      	lsls	r3, r3, #17
 8014438:	429a      	cmp	r2, r3
 801443a:	d301      	bcc.n	8014440 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 801443c:	2301      	movs	r3, #1
 801443e:	e010      	b.n	8014462 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8014440:	4b0a      	ldr	r3, [pc, #40]	@ (801446c <SysTick_Config+0x44>)
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	3a01      	subs	r2, #1
 8014446:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8014448:	2301      	movs	r3, #1
 801444a:	425b      	negs	r3, r3
 801444c:	2103      	movs	r1, #3
 801444e:	0018      	movs	r0, r3
 8014450:	f7ff ff6a 	bl	8014328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8014454:	4b05      	ldr	r3, [pc, #20]	@ (801446c <SysTick_Config+0x44>)
 8014456:	2200      	movs	r2, #0
 8014458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801445a:	4b04      	ldr	r3, [pc, #16]	@ (801446c <SysTick_Config+0x44>)
 801445c:	2207      	movs	r2, #7
 801445e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8014460:	2300      	movs	r3, #0
}
 8014462:	0018      	movs	r0, r3
 8014464:	46bd      	mov	sp, r7
 8014466:	b002      	add	sp, #8
 8014468:	bd80      	pop	{r7, pc}
 801446a:	46c0      	nop			@ (mov r8, r8)
 801446c:	e000e010 	.word	0xe000e010

08014470 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af00      	add	r7, sp, #0
 8014476:	60b9      	str	r1, [r7, #8]
 8014478:	607a      	str	r2, [r7, #4]
 801447a:	210f      	movs	r1, #15
 801447c:	187b      	adds	r3, r7, r1
 801447e:	1c02      	adds	r2, r0, #0
 8014480:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8014482:	68ba      	ldr	r2, [r7, #8]
 8014484:	187b      	adds	r3, r7, r1
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	b25b      	sxtb	r3, r3
 801448a:	0011      	movs	r1, r2
 801448c:	0018      	movs	r0, r3
 801448e:	f7ff ff4b 	bl	8014328 <__NVIC_SetPriority>
}
 8014492:	46c0      	nop			@ (mov r8, r8)
 8014494:	46bd      	mov	sp, r7
 8014496:	b004      	add	sp, #16
 8014498:	bd80      	pop	{r7, pc}

0801449a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801449a:	b580      	push	{r7, lr}
 801449c:	b082      	sub	sp, #8
 801449e:	af00      	add	r7, sp, #0
 80144a0:	0002      	movs	r2, r0
 80144a2:	1dfb      	adds	r3, r7, #7
 80144a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80144a6:	1dfb      	adds	r3, r7, #7
 80144a8:	781b      	ldrb	r3, [r3, #0]
 80144aa:	b25b      	sxtb	r3, r3
 80144ac:	0018      	movs	r0, r3
 80144ae:	f7ff ff21 	bl	80142f4 <__NVIC_EnableIRQ>
}
 80144b2:	46c0      	nop			@ (mov r8, r8)
 80144b4:	46bd      	mov	sp, r7
 80144b6:	b002      	add	sp, #8
 80144b8:	bd80      	pop	{r7, pc}

080144ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80144ba:	b580      	push	{r7, lr}
 80144bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80144be:	f7ff ffa1 	bl	8014404 <__NVIC_SystemReset>

080144c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80144c2:	b580      	push	{r7, lr}
 80144c4:	b082      	sub	sp, #8
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	0018      	movs	r0, r3
 80144ce:	f7ff ffab 	bl	8014428 <SysTick_Config>
 80144d2:	0003      	movs	r3, r0
}
 80144d4:	0018      	movs	r0, r3
 80144d6:	46bd      	mov	sp, r7
 80144d8:	b002      	add	sp, #8
 80144da:	bd80      	pop	{r7, pc}

080144dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d101      	bne.n	80144ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80144ea:	2301      	movs	r3, #1
 80144ec:	e061      	b.n	80145b2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	4a32      	ldr	r2, [pc, #200]	@ (80145bc <HAL_DMA_Init+0xe0>)
 80144f4:	4694      	mov	ip, r2
 80144f6:	4463      	add	r3, ip
 80144f8:	2114      	movs	r1, #20
 80144fa:	0018      	movs	r0, r3
 80144fc:	f7eb fe52 	bl	80001a4 <__udivsi3>
 8014500:	0003      	movs	r3, r0
 8014502:	009a      	lsls	r2, r3, #2
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	4a2d      	ldr	r2, [pc, #180]	@ (80145c0 <HAL_DMA_Init+0xe4>)
 801450c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2225      	movs	r2, #37	@ 0x25
 8014512:	2102      	movs	r1, #2
 8014514:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	4a28      	ldr	r2, [pc, #160]	@ (80145c4 <HAL_DMA_Init+0xe8>)
 8014522:	4013      	ands	r3, r2
 8014524:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801452e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	691b      	ldr	r3, [r3, #16]
 8014534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801453a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	699b      	ldr	r3, [r3, #24]
 8014540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8014546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	6a1b      	ldr	r3, [r3, #32]
 801454c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801454e:	68fa      	ldr	r2, [r7, #12]
 8014550:	4313      	orrs	r3, r2
 8014552:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	68fa      	ldr	r2, [r7, #12]
 801455a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	689a      	ldr	r2, [r3, #8]
 8014560:	2380      	movs	r3, #128	@ 0x80
 8014562:	01db      	lsls	r3, r3, #7
 8014564:	429a      	cmp	r2, r3
 8014566:	d018      	beq.n	801459a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8014568:	4b17      	ldr	r3, [pc, #92]	@ (80145c8 <HAL_DMA_Init+0xec>)
 801456a:	681a      	ldr	r2, [r3, #0]
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014570:	211c      	movs	r1, #28
 8014572:	400b      	ands	r3, r1
 8014574:	210f      	movs	r1, #15
 8014576:	4099      	lsls	r1, r3
 8014578:	000b      	movs	r3, r1
 801457a:	43d9      	mvns	r1, r3
 801457c:	4b12      	ldr	r3, [pc, #72]	@ (80145c8 <HAL_DMA_Init+0xec>)
 801457e:	400a      	ands	r2, r1
 8014580:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8014582:	4b11      	ldr	r3, [pc, #68]	@ (80145c8 <HAL_DMA_Init+0xec>)
 8014584:	6819      	ldr	r1, [r3, #0]
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	685a      	ldr	r2, [r3, #4]
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801458e:	201c      	movs	r0, #28
 8014590:	4003      	ands	r3, r0
 8014592:	409a      	lsls	r2, r3
 8014594:	4b0c      	ldr	r3, [pc, #48]	@ (80145c8 <HAL_DMA_Init+0xec>)
 8014596:	430a      	orrs	r2, r1
 8014598:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2200      	movs	r2, #0
 801459e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2225      	movs	r2, #37	@ 0x25
 80145a4:	2101      	movs	r1, #1
 80145a6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2224      	movs	r2, #36	@ 0x24
 80145ac:	2100      	movs	r1, #0
 80145ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80145b0:	2300      	movs	r3, #0
}
 80145b2:	0018      	movs	r0, r3
 80145b4:	46bd      	mov	sp, r7
 80145b6:	b004      	add	sp, #16
 80145b8:	bd80      	pop	{r7, pc}
 80145ba:	46c0      	nop			@ (mov r8, r8)
 80145bc:	bffdfff8 	.word	0xbffdfff8
 80145c0:	40020000 	.word	0x40020000
 80145c4:	ffff800f 	.word	0xffff800f
 80145c8:	400200a8 	.word	0x400200a8

080145cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b086      	sub	sp, #24
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	607a      	str	r2, [r7, #4]
 80145d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80145da:	2317      	movs	r3, #23
 80145dc:	18fb      	adds	r3, r7, r3
 80145de:	2200      	movs	r2, #0
 80145e0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	2224      	movs	r2, #36	@ 0x24
 80145e6:	5c9b      	ldrb	r3, [r3, r2]
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	d101      	bne.n	80145f0 <HAL_DMA_Start_IT+0x24>
 80145ec:	2302      	movs	r3, #2
 80145ee:	e04f      	b.n	8014690 <HAL_DMA_Start_IT+0xc4>
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	2224      	movs	r2, #36	@ 0x24
 80145f4:	2101      	movs	r1, #1
 80145f6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	2225      	movs	r2, #37	@ 0x25
 80145fc:	5c9b      	ldrb	r3, [r3, r2]
 80145fe:	b2db      	uxtb	r3, r3
 8014600:	2b01      	cmp	r3, #1
 8014602:	d13a      	bne.n	801467a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	2225      	movs	r2, #37	@ 0x25
 8014608:	2102      	movs	r1, #2
 801460a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2200      	movs	r2, #0
 8014610:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	681a      	ldr	r2, [r3, #0]
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	2101      	movs	r1, #1
 801461e:	438a      	bics	r2, r1
 8014620:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	68b9      	ldr	r1, [r7, #8]
 8014628:	68f8      	ldr	r0, [r7, #12]
 801462a:	f000 f976 	bl	801491a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014632:	2b00      	cmp	r3, #0
 8014634:	d008      	beq.n	8014648 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	681a      	ldr	r2, [r3, #0]
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	210e      	movs	r1, #14
 8014642:	430a      	orrs	r2, r1
 8014644:	601a      	str	r2, [r3, #0]
 8014646:	e00f      	b.n	8014668 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	681a      	ldr	r2, [r3, #0]
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	2104      	movs	r1, #4
 8014654:	438a      	bics	r2, r1
 8014656:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	681a      	ldr	r2, [r3, #0]
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	210a      	movs	r1, #10
 8014664:	430a      	orrs	r2, r1
 8014666:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	681a      	ldr	r2, [r3, #0]
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2101      	movs	r1, #1
 8014674:	430a      	orrs	r2, r1
 8014676:	601a      	str	r2, [r3, #0]
 8014678:	e007      	b.n	801468a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	2224      	movs	r2, #36	@ 0x24
 801467e:	2100      	movs	r1, #0
 8014680:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8014682:	2317      	movs	r3, #23
 8014684:	18fb      	adds	r3, r7, r3
 8014686:	2202      	movs	r2, #2
 8014688:	701a      	strb	r2, [r3, #0]
  }
  return status;
 801468a:	2317      	movs	r3, #23
 801468c:	18fb      	adds	r3, r7, r3
 801468e:	781b      	ldrb	r3, [r3, #0]
}
 8014690:	0018      	movs	r0, r3
 8014692:	46bd      	mov	sp, r7
 8014694:	b006      	add	sp, #24
 8014696:	bd80      	pop	{r7, pc}

08014698 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80146a0:	230f      	movs	r3, #15
 80146a2:	18fb      	adds	r3, r7, r3
 80146a4:	2200      	movs	r2, #0
 80146a6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2225      	movs	r2, #37	@ 0x25
 80146ac:	5c9b      	ldrb	r3, [r3, r2]
 80146ae:	b2db      	uxtb	r3, r3
 80146b0:	2b02      	cmp	r3, #2
 80146b2:	d008      	beq.n	80146c6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2204      	movs	r2, #4
 80146b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	2224      	movs	r2, #36	@ 0x24
 80146be:	2100      	movs	r1, #0
 80146c0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80146c2:	2301      	movs	r3, #1
 80146c4:	e024      	b.n	8014710 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	681a      	ldr	r2, [r3, #0]
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	210e      	movs	r1, #14
 80146d2:	438a      	bics	r2, r1
 80146d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2101      	movs	r1, #1
 80146e2:	438a      	bics	r2, r1
 80146e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80146ea:	221c      	movs	r2, #28
 80146ec:	401a      	ands	r2, r3
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80146f2:	2101      	movs	r1, #1
 80146f4:	4091      	lsls	r1, r2
 80146f6:	000a      	movs	r2, r1
 80146f8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2225      	movs	r2, #37	@ 0x25
 80146fe:	2101      	movs	r1, #1
 8014700:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2224      	movs	r2, #36	@ 0x24
 8014706:	2100      	movs	r1, #0
 8014708:	5499      	strb	r1, [r3, r2]

    return status;
 801470a:	230f      	movs	r3, #15
 801470c:	18fb      	adds	r3, r7, r3
 801470e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014710:	0018      	movs	r0, r3
 8014712:	46bd      	mov	sp, r7
 8014714:	b004      	add	sp, #16
 8014716:	bd80      	pop	{r7, pc}

08014718 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	b084      	sub	sp, #16
 801471c:	af00      	add	r7, sp, #0
 801471e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014720:	210f      	movs	r1, #15
 8014722:	187b      	adds	r3, r7, r1
 8014724:	2200      	movs	r2, #0
 8014726:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2225      	movs	r2, #37	@ 0x25
 801472c:	5c9b      	ldrb	r3, [r3, r2]
 801472e:	b2db      	uxtb	r3, r3
 8014730:	2b02      	cmp	r3, #2
 8014732:	d006      	beq.n	8014742 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2204      	movs	r2, #4
 8014738:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 801473a:	187b      	adds	r3, r7, r1
 801473c:	2201      	movs	r2, #1
 801473e:	701a      	strb	r2, [r3, #0]
 8014740:	e02a      	b.n	8014798 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	681a      	ldr	r2, [r3, #0]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	210e      	movs	r1, #14
 801474e:	438a      	bics	r2, r1
 8014750:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	681a      	ldr	r2, [r3, #0]
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	2101      	movs	r1, #1
 801475e:	438a      	bics	r2, r1
 8014760:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014766:	221c      	movs	r2, #28
 8014768:	401a      	ands	r2, r3
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801476e:	2101      	movs	r1, #1
 8014770:	4091      	lsls	r1, r2
 8014772:	000a      	movs	r2, r1
 8014774:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2225      	movs	r2, #37	@ 0x25
 801477a:	2101      	movs	r1, #1
 801477c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2224      	movs	r2, #36	@ 0x24
 8014782:	2100      	movs	r1, #0
 8014784:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801478a:	2b00      	cmp	r3, #0
 801478c:	d004      	beq.n	8014798 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	0010      	movs	r0, r2
 8014796:	4798      	blx	r3
    }
  }
  return status;
 8014798:	230f      	movs	r3, #15
 801479a:	18fb      	adds	r3, r7, r3
 801479c:	781b      	ldrb	r3, [r3, #0]
}
 801479e:	0018      	movs	r0, r3
 80147a0:	46bd      	mov	sp, r7
 80147a2:	b004      	add	sp, #16
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80147a6:	b580      	push	{r7, lr}
 80147a8:	b084      	sub	sp, #16
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147c2:	221c      	movs	r2, #28
 80147c4:	4013      	ands	r3, r2
 80147c6:	2204      	movs	r2, #4
 80147c8:	409a      	lsls	r2, r3
 80147ca:	0013      	movs	r3, r2
 80147cc:	68fa      	ldr	r2, [r7, #12]
 80147ce:	4013      	ands	r3, r2
 80147d0:	d026      	beq.n	8014820 <HAL_DMA_IRQHandler+0x7a>
 80147d2:	68bb      	ldr	r3, [r7, #8]
 80147d4:	2204      	movs	r2, #4
 80147d6:	4013      	ands	r3, r2
 80147d8:	d022      	beq.n	8014820 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	2220      	movs	r2, #32
 80147e2:	4013      	ands	r3, r2
 80147e4:	d107      	bne.n	80147f6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	681a      	ldr	r2, [r3, #0]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	2104      	movs	r1, #4
 80147f2:	438a      	bics	r2, r1
 80147f4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147fa:	221c      	movs	r2, #28
 80147fc:	401a      	ands	r2, r3
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014802:	2104      	movs	r1, #4
 8014804:	4091      	lsls	r1, r2
 8014806:	000a      	movs	r2, r1
 8014808:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801480e:	2b00      	cmp	r3, #0
 8014810:	d100      	bne.n	8014814 <HAL_DMA_IRQHandler+0x6e>
 8014812:	e071      	b.n	80148f8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014818:	687a      	ldr	r2, [r7, #4]
 801481a:	0010      	movs	r0, r2
 801481c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 801481e:	e06b      	b.n	80148f8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014824:	221c      	movs	r2, #28
 8014826:	4013      	ands	r3, r2
 8014828:	2202      	movs	r2, #2
 801482a:	409a      	lsls	r2, r3
 801482c:	0013      	movs	r3, r2
 801482e:	68fa      	ldr	r2, [r7, #12]
 8014830:	4013      	ands	r3, r2
 8014832:	d02d      	beq.n	8014890 <HAL_DMA_IRQHandler+0xea>
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	2202      	movs	r2, #2
 8014838:	4013      	ands	r3, r2
 801483a:	d029      	beq.n	8014890 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	2220      	movs	r2, #32
 8014844:	4013      	ands	r3, r2
 8014846:	d10b      	bne.n	8014860 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	681a      	ldr	r2, [r3, #0]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	210a      	movs	r1, #10
 8014854:	438a      	bics	r2, r1
 8014856:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2225      	movs	r2, #37	@ 0x25
 801485c:	2101      	movs	r1, #1
 801485e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014864:	221c      	movs	r2, #28
 8014866:	401a      	ands	r2, r3
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801486c:	2102      	movs	r1, #2
 801486e:	4091      	lsls	r1, r2
 8014870:	000a      	movs	r2, r1
 8014872:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	2224      	movs	r2, #36	@ 0x24
 8014878:	2100      	movs	r1, #0
 801487a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014880:	2b00      	cmp	r3, #0
 8014882:	d039      	beq.n	80148f8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014888:	687a      	ldr	r2, [r7, #4]
 801488a:	0010      	movs	r0, r2
 801488c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 801488e:	e033      	b.n	80148f8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014894:	221c      	movs	r2, #28
 8014896:	4013      	ands	r3, r2
 8014898:	2208      	movs	r2, #8
 801489a:	409a      	lsls	r2, r3
 801489c:	0013      	movs	r3, r2
 801489e:	68fa      	ldr	r2, [r7, #12]
 80148a0:	4013      	ands	r3, r2
 80148a2:	d02a      	beq.n	80148fa <HAL_DMA_IRQHandler+0x154>
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	2208      	movs	r2, #8
 80148a8:	4013      	ands	r3, r2
 80148aa:	d026      	beq.n	80148fa <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	681a      	ldr	r2, [r3, #0]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	210e      	movs	r1, #14
 80148b8:	438a      	bics	r2, r1
 80148ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148c0:	221c      	movs	r2, #28
 80148c2:	401a      	ands	r2, r3
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148c8:	2101      	movs	r1, #1
 80148ca:	4091      	lsls	r1, r2
 80148cc:	000a      	movs	r2, r1
 80148ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2201      	movs	r2, #1
 80148d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2225      	movs	r2, #37	@ 0x25
 80148da:	2101      	movs	r1, #1
 80148dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2224      	movs	r2, #36	@ 0x24
 80148e2:	2100      	movs	r1, #0
 80148e4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d005      	beq.n	80148fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	0010      	movs	r0, r2
 80148f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80148f8:	46c0      	nop			@ (mov r8, r8)
 80148fa:	46c0      	nop			@ (mov r8, r8)
}
 80148fc:	46bd      	mov	sp, r7
 80148fe:	b004      	add	sp, #16
 8014900:	bd80      	pop	{r7, pc}

08014902 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8014902:	b580      	push	{r7, lr}
 8014904:	b082      	sub	sp, #8
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2225      	movs	r2, #37	@ 0x25
 801490e:	5c9b      	ldrb	r3, [r3, r2]
 8014910:	b2db      	uxtb	r3, r3
}
 8014912:	0018      	movs	r0, r3
 8014914:	46bd      	mov	sp, r7
 8014916:	b002      	add	sp, #8
 8014918:	bd80      	pop	{r7, pc}

0801491a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801491a:	b580      	push	{r7, lr}
 801491c:	b084      	sub	sp, #16
 801491e:	af00      	add	r7, sp, #0
 8014920:	60f8      	str	r0, [r7, #12]
 8014922:	60b9      	str	r1, [r7, #8]
 8014924:	607a      	str	r2, [r7, #4]
 8014926:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801492c:	221c      	movs	r2, #28
 801492e:	401a      	ands	r2, r3
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014934:	2101      	movs	r1, #1
 8014936:	4091      	lsls	r1, r2
 8014938:	000a      	movs	r2, r1
 801493a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	683a      	ldr	r2, [r7, #0]
 8014942:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	689b      	ldr	r3, [r3, #8]
 8014948:	2b10      	cmp	r3, #16
 801494a:	d108      	bne.n	801495e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	68ba      	ldr	r2, [r7, #8]
 801495a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801495c:	e007      	b.n	801496e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	68ba      	ldr	r2, [r7, #8]
 8014964:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	687a      	ldr	r2, [r7, #4]
 801496c:	60da      	str	r2, [r3, #12]
}
 801496e:	46c0      	nop			@ (mov r8, r8)
 8014970:	46bd      	mov	sp, r7
 8014972:	b004      	add	sp, #16
 8014974:	bd80      	pop	{r7, pc}
	...

08014978 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b084      	sub	sp, #16
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8014980:	f7ff f8d2 	bl	8013b28 <HAL_GetTick>
 8014984:	0003      	movs	r3, r0
 8014986:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8014988:	e00f      	b.n	80149aa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	3301      	adds	r3, #1
 801498e:	d00c      	beq.n	80149aa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d007      	beq.n	80149a6 <FLASH_WaitForLastOperation+0x2e>
 8014996:	f7ff f8c7 	bl	8013b28 <HAL_GetTick>
 801499a:	0002      	movs	r2, r0
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	1ad3      	subs	r3, r2, r3
 80149a0:	687a      	ldr	r2, [r7, #4]
 80149a2:	429a      	cmp	r2, r3
 80149a4:	d201      	bcs.n	80149aa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80149a6:	2303      	movs	r3, #3
 80149a8:	e052      	b.n	8014a50 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80149aa:	4b2b      	ldr	r3, [pc, #172]	@ (8014a58 <FLASH_WaitForLastOperation+0xe0>)
 80149ac:	699b      	ldr	r3, [r3, #24]
 80149ae:	2201      	movs	r2, #1
 80149b0:	4013      	ands	r3, r2
 80149b2:	2b01      	cmp	r3, #1
 80149b4:	d0e9      	beq.n	801498a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80149b6:	4b28      	ldr	r3, [pc, #160]	@ (8014a58 <FLASH_WaitForLastOperation+0xe0>)
 80149b8:	699b      	ldr	r3, [r3, #24]
 80149ba:	2202      	movs	r2, #2
 80149bc:	4013      	ands	r3, r2
 80149be:	2b02      	cmp	r3, #2
 80149c0:	d102      	bne.n	80149c8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80149c2:	4b25      	ldr	r3, [pc, #148]	@ (8014a58 <FLASH_WaitForLastOperation+0xe0>)
 80149c4:	2202      	movs	r2, #2
 80149c6:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80149c8:	4b23      	ldr	r3, [pc, #140]	@ (8014a58 <FLASH_WaitForLastOperation+0xe0>)
 80149ca:	699a      	ldr	r2, [r3, #24]
 80149cc:	2380      	movs	r3, #128	@ 0x80
 80149ce:	005b      	lsls	r3, r3, #1
 80149d0:	401a      	ands	r2, r3
 80149d2:	2380      	movs	r3, #128	@ 0x80
 80149d4:	005b      	lsls	r3, r3, #1
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d035      	beq.n	8014a46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80149da:	4b1f      	ldr	r3, [pc, #124]	@ (8014a58 <FLASH_WaitForLastOperation+0xe0>)
 80149dc:	699a      	ldr	r2, [r3, #24]
 80149de:	2380      	movs	r3, #128	@ 0x80
 80149e0:	009b      	lsls	r3, r3, #2
 80149e2:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80149e4:	2380      	movs	r3, #128	@ 0x80
 80149e6:	009b      	lsls	r3, r3, #2
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d02c      	beq.n	8014a46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80149ec:	4b1a      	ldr	r3, [pc, #104]	@ (8014a58 <FLASH_WaitForLastOperation+0xe0>)
 80149ee:	699a      	ldr	r2, [r3, #24]
 80149f0:	2380      	movs	r3, #128	@ 0x80
 80149f2:	00db      	lsls	r3, r3, #3
 80149f4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80149f6:	2380      	movs	r3, #128	@ 0x80
 80149f8:	00db      	lsls	r3, r3, #3
 80149fa:	429a      	cmp	r2, r3
 80149fc:	d023      	beq.n	8014a46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80149fe:	4b16      	ldr	r3, [pc, #88]	@ (8014a58 <FLASH_WaitForLastOperation+0xe0>)
 8014a00:	699a      	ldr	r2, [r3, #24]
 8014a02:	2380      	movs	r3, #128	@ 0x80
 8014a04:	011b      	lsls	r3, r3, #4
 8014a06:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8014a08:	2380      	movs	r3, #128	@ 0x80
 8014a0a:	011b      	lsls	r3, r3, #4
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d01a      	beq.n	8014a46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014a10:	4b11      	ldr	r3, [pc, #68]	@ (8014a58 <FLASH_WaitForLastOperation+0xe0>)
 8014a12:	699a      	ldr	r2, [r3, #24]
 8014a14:	2380      	movs	r3, #128	@ 0x80
 8014a16:	019b      	lsls	r3, r3, #6
 8014a18:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014a1a:	2380      	movs	r3, #128	@ 0x80
 8014a1c:	019b      	lsls	r3, r3, #6
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d011      	beq.n	8014a46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014a22:	4b0d      	ldr	r3, [pc, #52]	@ (8014a58 <FLASH_WaitForLastOperation+0xe0>)
 8014a24:	699a      	ldr	r2, [r3, #24]
 8014a26:	2380      	movs	r3, #128	@ 0x80
 8014a28:	029b      	lsls	r3, r3, #10
 8014a2a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014a2c:	2380      	movs	r3, #128	@ 0x80
 8014a2e:	029b      	lsls	r3, r3, #10
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d008      	beq.n	8014a46 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8014a34:	4b08      	ldr	r3, [pc, #32]	@ (8014a58 <FLASH_WaitForLastOperation+0xe0>)
 8014a36:	699a      	ldr	r2, [r3, #24]
 8014a38:	2380      	movs	r3, #128	@ 0x80
 8014a3a:	025b      	lsls	r3, r3, #9
 8014a3c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014a3e:	2380      	movs	r3, #128	@ 0x80
 8014a40:	025b      	lsls	r3, r3, #9
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d103      	bne.n	8014a4e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8014a46:	f000 f809 	bl	8014a5c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	e000      	b.n	8014a50 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8014a4e:	2300      	movs	r3, #0
}
 8014a50:	0018      	movs	r0, r3
 8014a52:	46bd      	mov	sp, r7
 8014a54:	b004      	add	sp, #16
 8014a56:	bd80      	pop	{r7, pc}
 8014a58:	40022000 	.word	0x40022000

08014a5c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b082      	sub	sp, #8
 8014a60:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8014a62:	2300      	movs	r3, #0
 8014a64:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8014a66:	4b49      	ldr	r3, [pc, #292]	@ (8014b8c <FLASH_SetErrorCode+0x130>)
 8014a68:	699a      	ldr	r2, [r3, #24]
 8014a6a:	2380      	movs	r3, #128	@ 0x80
 8014a6c:	005b      	lsls	r3, r3, #1
 8014a6e:	401a      	ands	r2, r3
 8014a70:	2380      	movs	r3, #128	@ 0x80
 8014a72:	005b      	lsls	r3, r3, #1
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d10a      	bne.n	8014a8e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8014a78:	4b45      	ldr	r3, [pc, #276]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014a7a:	695b      	ldr	r3, [r3, #20]
 8014a7c:	2202      	movs	r2, #2
 8014a7e:	431a      	orrs	r2, r3
 8014a80:	4b43      	ldr	r3, [pc, #268]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014a82:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	2280      	movs	r2, #128	@ 0x80
 8014a88:	0052      	lsls	r2, r2, #1
 8014a8a:	4313      	orrs	r3, r2
 8014a8c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8014a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8014b8c <FLASH_SetErrorCode+0x130>)
 8014a90:	699a      	ldr	r2, [r3, #24]
 8014a92:	2380      	movs	r3, #128	@ 0x80
 8014a94:	009b      	lsls	r3, r3, #2
 8014a96:	401a      	ands	r2, r3
 8014a98:	2380      	movs	r3, #128	@ 0x80
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d10a      	bne.n	8014ab6 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8014aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014aa2:	695b      	ldr	r3, [r3, #20]
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	431a      	orrs	r2, r3
 8014aa8:	4b39      	ldr	r3, [pc, #228]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014aaa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2280      	movs	r2, #128	@ 0x80
 8014ab0:	0092      	lsls	r2, r2, #2
 8014ab2:	4313      	orrs	r3, r2
 8014ab4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8014ab6:	4b35      	ldr	r3, [pc, #212]	@ (8014b8c <FLASH_SetErrorCode+0x130>)
 8014ab8:	699a      	ldr	r2, [r3, #24]
 8014aba:	2380      	movs	r3, #128	@ 0x80
 8014abc:	00db      	lsls	r3, r3, #3
 8014abe:	401a      	ands	r2, r3
 8014ac0:	2380      	movs	r3, #128	@ 0x80
 8014ac2:	00db      	lsls	r3, r3, #3
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d10a      	bne.n	8014ade <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8014ac8:	4b31      	ldr	r3, [pc, #196]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014aca:	695b      	ldr	r3, [r3, #20]
 8014acc:	2208      	movs	r2, #8
 8014ace:	431a      	orrs	r2, r3
 8014ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014ad2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2280      	movs	r2, #128	@ 0x80
 8014ad8:	00d2      	lsls	r2, r2, #3
 8014ada:	4313      	orrs	r3, r2
 8014adc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8014ade:	4b2b      	ldr	r3, [pc, #172]	@ (8014b8c <FLASH_SetErrorCode+0x130>)
 8014ae0:	699a      	ldr	r2, [r3, #24]
 8014ae2:	2380      	movs	r3, #128	@ 0x80
 8014ae4:	011b      	lsls	r3, r3, #4
 8014ae6:	401a      	ands	r2, r3
 8014ae8:	2380      	movs	r3, #128	@ 0x80
 8014aea:	011b      	lsls	r3, r3, #4
 8014aec:	429a      	cmp	r2, r3
 8014aee:	d10a      	bne.n	8014b06 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8014af0:	4b27      	ldr	r3, [pc, #156]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014af2:	695b      	ldr	r3, [r3, #20]
 8014af4:	2204      	movs	r2, #4
 8014af6:	431a      	orrs	r2, r3
 8014af8:	4b25      	ldr	r3, [pc, #148]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014afa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	2280      	movs	r2, #128	@ 0x80
 8014b00:	0112      	lsls	r2, r2, #4
 8014b02:	4313      	orrs	r3, r2
 8014b04:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8014b06:	4b21      	ldr	r3, [pc, #132]	@ (8014b8c <FLASH_SetErrorCode+0x130>)
 8014b08:	699a      	ldr	r2, [r3, #24]
 8014b0a:	2380      	movs	r3, #128	@ 0x80
 8014b0c:	019b      	lsls	r3, r3, #6
 8014b0e:	401a      	ands	r2, r3
 8014b10:	2380      	movs	r3, #128	@ 0x80
 8014b12:	019b      	lsls	r3, r3, #6
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d10a      	bne.n	8014b2e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8014b18:	4b1d      	ldr	r3, [pc, #116]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014b1a:	695b      	ldr	r3, [r3, #20]
 8014b1c:	2210      	movs	r2, #16
 8014b1e:	431a      	orrs	r2, r3
 8014b20:	4b1b      	ldr	r3, [pc, #108]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014b22:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2280      	movs	r2, #128	@ 0x80
 8014b28:	0192      	lsls	r2, r2, #6
 8014b2a:	4313      	orrs	r3, r2
 8014b2c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8014b2e:	4b17      	ldr	r3, [pc, #92]	@ (8014b8c <FLASH_SetErrorCode+0x130>)
 8014b30:	699a      	ldr	r2, [r3, #24]
 8014b32:	2380      	movs	r3, #128	@ 0x80
 8014b34:	029b      	lsls	r3, r3, #10
 8014b36:	401a      	ands	r2, r3
 8014b38:	2380      	movs	r3, #128	@ 0x80
 8014b3a:	029b      	lsls	r3, r3, #10
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	d109      	bne.n	8014b54 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8014b40:	4b13      	ldr	r3, [pc, #76]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014b42:	695b      	ldr	r3, [r3, #20]
 8014b44:	2220      	movs	r2, #32
 8014b46:	431a      	orrs	r2, r3
 8014b48:	4b11      	ldr	r3, [pc, #68]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014b4a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2220      	movs	r2, #32
 8014b50:	4313      	orrs	r3, r2
 8014b52:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8014b54:	4b0d      	ldr	r3, [pc, #52]	@ (8014b8c <FLASH_SetErrorCode+0x130>)
 8014b56:	699a      	ldr	r2, [r3, #24]
 8014b58:	2380      	movs	r3, #128	@ 0x80
 8014b5a:	025b      	lsls	r3, r3, #9
 8014b5c:	401a      	ands	r2, r3
 8014b5e:	2380      	movs	r3, #128	@ 0x80
 8014b60:	025b      	lsls	r3, r3, #9
 8014b62:	429a      	cmp	r2, r3
 8014b64:	d10a      	bne.n	8014b7c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8014b66:	4b0a      	ldr	r3, [pc, #40]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014b68:	695b      	ldr	r3, [r3, #20]
 8014b6a:	2240      	movs	r2, #64	@ 0x40
 8014b6c:	431a      	orrs	r2, r3
 8014b6e:	4b08      	ldr	r3, [pc, #32]	@ (8014b90 <FLASH_SetErrorCode+0x134>)
 8014b70:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2280      	movs	r2, #128	@ 0x80
 8014b76:	0252      	lsls	r2, r2, #9
 8014b78:	4313      	orrs	r3, r2
 8014b7a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8014b7c:	4b03      	ldr	r3, [pc, #12]	@ (8014b8c <FLASH_SetErrorCode+0x130>)
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	619a      	str	r2, [r3, #24]
}  
 8014b82:	46c0      	nop			@ (mov r8, r8)
 8014b84:	46bd      	mov	sp, r7
 8014b86:	b002      	add	sp, #8
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	46c0      	nop			@ (mov r8, r8)
 8014b8c:	40022000 	.word	0x40022000
 8014b90:	20002228 	.word	0x20002228

08014b94 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b084      	sub	sp, #16
 8014b98:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014b9a:	4b12      	ldr	r3, [pc, #72]	@ (8014be4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	2201      	movs	r2, #1
 8014ba0:	4013      	ands	r3, r2
 8014ba2:	d019      	beq.n	8014bd8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8014ba8:	607b      	str	r3, [r7, #4]
  return(result);
 8014baa:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8014bac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8014bae:	b672      	cpsid	i
}
 8014bb0:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8014bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8014be4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8014be8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8014bb6:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8014bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8014be4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014bba:	4a0c      	ldr	r2, [pc, #48]	@ (8014bec <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8014bbc:	60da      	str	r2, [r3, #12]
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	f383 8810 	msr	PRIMASK, r3
}
 8014bc8:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014bca:	4b06      	ldr	r3, [pc, #24]	@ (8014be4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014bcc:	685b      	ldr	r3, [r3, #4]
 8014bce:	2201      	movs	r2, #1
 8014bd0:	4013      	ands	r3, r2
 8014bd2:	d001      	beq.n	8014bd8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	e000      	b.n	8014bda <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8014bd8:	2300      	movs	r3, #0
}
 8014bda:	0018      	movs	r0, r3
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	b004      	add	sp, #16
 8014be0:	bd80      	pop	{r7, pc}
 8014be2:	46c0      	nop			@ (mov r8, r8)
 8014be4:	40022000 	.word	0x40022000
 8014be8:	89abcdef 	.word	0x89abcdef
 8014bec:	02030405 	.word	0x02030405

08014bf0 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8014bf4:	4b04      	ldr	r3, [pc, #16]	@ (8014c08 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8014bf6:	685a      	ldr	r2, [r3, #4]
 8014bf8:	4b03      	ldr	r3, [pc, #12]	@ (8014c08 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8014bfa:	2101      	movs	r1, #1
 8014bfc:	430a      	orrs	r2, r1
 8014bfe:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8014c00:	2300      	movs	r3, #0
}
 8014c02:	0018      	movs	r0, r3
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}
 8014c08:	40022000 	.word	0x40022000

08014c0c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8014c0c:	b5b0      	push	{r4, r5, r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014c14:	250f      	movs	r5, #15
 8014c16:	197b      	adds	r3, r7, r5
 8014c18:	2200      	movs	r2, #0
 8014c1a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014c1c:	197c      	adds	r4, r7, r5
 8014c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8014c5c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014c20:	0018      	movs	r0, r3
 8014c22:	f7ff fea9 	bl	8014978 <FLASH_WaitForLastOperation>
 8014c26:	0003      	movs	r3, r0
 8014c28:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8014c2a:	0029      	movs	r1, r5
 8014c2c:	187b      	adds	r3, r7, r1
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d10c      	bne.n	8014c4e <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014c34:	4b0a      	ldr	r3, [pc, #40]	@ (8014c60 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8014c36:	2200      	movs	r2, #0
 8014c38:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014c40:	187c      	adds	r4, r7, r1
 8014c42:	4b06      	ldr	r3, [pc, #24]	@ (8014c5c <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014c44:	0018      	movs	r0, r3
 8014c46:	f7ff fe97 	bl	8014978 <FLASH_WaitForLastOperation>
 8014c4a:	0003      	movs	r3, r0
 8014c4c:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8014c4e:	230f      	movs	r3, #15
 8014c50:	18fb      	adds	r3, r7, r3
 8014c52:	781b      	ldrb	r3, [r3, #0]
}  
 8014c54:	0018      	movs	r0, r3
 8014c56:	46bd      	mov	sp, r7
 8014c58:	b004      	add	sp, #16
 8014c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8014c5c:	0000c350 	.word	0x0000c350
 8014c60:	20002228 	.word	0x20002228

08014c64 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8014c64:	b5b0      	push	{r4, r5, r7, lr}
 8014c66:	b086      	sub	sp, #24
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	60f8      	str	r0, [r7, #12]
 8014c6c:	60b9      	str	r1, [r7, #8]
 8014c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014c70:	2317      	movs	r3, #23
 8014c72:	18fb      	adds	r3, r7, r3
 8014c74:	2201      	movs	r2, #1
 8014c76:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8014c78:	4b24      	ldr	r3, [pc, #144]	@ (8014d0c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014c7a:	7c1b      	ldrb	r3, [r3, #16]
 8014c7c:	2b01      	cmp	r3, #1
 8014c7e:	d101      	bne.n	8014c84 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8014c80:	2302      	movs	r3, #2
 8014c82:	e03e      	b.n	8014d02 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8014c84:	4b21      	ldr	r3, [pc, #132]	@ (8014d0c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014c86:	2201      	movs	r2, #1
 8014c88:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014c8a:	2517      	movs	r5, #23
 8014c8c:	197c      	adds	r4, r7, r5
 8014c8e:	4b20      	ldr	r3, [pc, #128]	@ (8014d10 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014c90:	0018      	movs	r0, r3
 8014c92:	f7ff fe71 	bl	8014978 <FLASH_WaitForLastOperation>
 8014c96:	0003      	movs	r3, r0
 8014c98:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8014c9a:	197b      	adds	r3, r7, r5
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d129      	bne.n	8014cf6 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8014d0c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	2b02      	cmp	r3, #2
 8014cac:	d103      	bne.n	8014cb6 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	601a      	str	r2, [r3, #0]
 8014cb4:	e013      	b.n	8014cde <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	2b01      	cmp	r3, #1
 8014cba:	d104      	bne.n	8014cc6 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	b292      	uxth	r2, r2
 8014cc2:	801a      	strh	r2, [r3, #0]
 8014cc4:	e00b      	b.n	8014cde <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d104      	bne.n	8014cd6 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	687a      	ldr	r2, [r7, #4]
 8014cd0:	b2d2      	uxtb	r2, r2
 8014cd2:	701a      	strb	r2, [r3, #0]
 8014cd4:	e003      	b.n	8014cde <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8014cd6:	2317      	movs	r3, #23
 8014cd8:	18fb      	adds	r3, r7, r3
 8014cda:	2201      	movs	r2, #1
 8014cdc:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8014cde:	2217      	movs	r2, #23
 8014ce0:	18bb      	adds	r3, r7, r2
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d106      	bne.n	8014cf6 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014ce8:	18bc      	adds	r4, r7, r2
 8014cea:	4b09      	ldr	r3, [pc, #36]	@ (8014d10 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014cec:	0018      	movs	r0, r3
 8014cee:	f7ff fe43 	bl	8014978 <FLASH_WaitForLastOperation>
 8014cf2:	0003      	movs	r3, r0
 8014cf4:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8014cf6:	4b05      	ldr	r3, [pc, #20]	@ (8014d0c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	741a      	strb	r2, [r3, #16]

  return status;
 8014cfc:	2317      	movs	r3, #23
 8014cfe:	18fb      	adds	r3, r7, r3
 8014d00:	781b      	ldrb	r3, [r3, #0]
}
 8014d02:	0018      	movs	r0, r3
 8014d04:	46bd      	mov	sp, r7
 8014d06:	b006      	add	sp, #24
 8014d08:	bdb0      	pop	{r4, r5, r7, pc}
 8014d0a:	46c0      	nop			@ (mov r8, r8)
 8014d0c:	20002228 	.word	0x20002228
 8014d10:	0000c350 	.word	0x0000c350

08014d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b086      	sub	sp, #24
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8014d22:	2300      	movs	r3, #0
 8014d24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8014d26:	2300      	movs	r3, #0
 8014d28:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8014d2a:	e155      	b.n	8014fd8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8014d2c:	683b      	ldr	r3, [r7, #0]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	2101      	movs	r1, #1
 8014d32:	697a      	ldr	r2, [r7, #20]
 8014d34:	4091      	lsls	r1, r2
 8014d36:	000a      	movs	r2, r1
 8014d38:	4013      	ands	r3, r2
 8014d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d100      	bne.n	8014d44 <HAL_GPIO_Init+0x30>
 8014d42:	e146      	b.n	8014fd2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	2203      	movs	r2, #3
 8014d4a:	4013      	ands	r3, r2
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	d005      	beq.n	8014d5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	685b      	ldr	r3, [r3, #4]
 8014d54:	2203      	movs	r2, #3
 8014d56:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8014d58:	2b02      	cmp	r3, #2
 8014d5a:	d130      	bne.n	8014dbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	689b      	ldr	r3, [r3, #8]
 8014d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8014d62:	697b      	ldr	r3, [r7, #20]
 8014d64:	005b      	lsls	r3, r3, #1
 8014d66:	2203      	movs	r2, #3
 8014d68:	409a      	lsls	r2, r3
 8014d6a:	0013      	movs	r3, r2
 8014d6c:	43da      	mvns	r2, r3
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	4013      	ands	r3, r2
 8014d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	68da      	ldr	r2, [r3, #12]
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	005b      	lsls	r3, r3, #1
 8014d7c:	409a      	lsls	r2, r3
 8014d7e:	0013      	movs	r3, r2
 8014d80:	693a      	ldr	r2, [r7, #16]
 8014d82:	4313      	orrs	r3, r2
 8014d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	693a      	ldr	r2, [r7, #16]
 8014d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	685b      	ldr	r3, [r3, #4]
 8014d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014d92:	2201      	movs	r2, #1
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	409a      	lsls	r2, r3
 8014d98:	0013      	movs	r3, r2
 8014d9a:	43da      	mvns	r2, r3
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	4013      	ands	r3, r2
 8014da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8014da2:	683b      	ldr	r3, [r7, #0]
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	091b      	lsrs	r3, r3, #4
 8014da8:	2201      	movs	r2, #1
 8014daa:	401a      	ands	r2, r3
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	409a      	lsls	r2, r3
 8014db0:	0013      	movs	r3, r2
 8014db2:	693a      	ldr	r2, [r7, #16]
 8014db4:	4313      	orrs	r3, r2
 8014db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	693a      	ldr	r2, [r7, #16]
 8014dbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	685b      	ldr	r3, [r3, #4]
 8014dc2:	2203      	movs	r2, #3
 8014dc4:	4013      	ands	r3, r2
 8014dc6:	2b03      	cmp	r3, #3
 8014dc8:	d017      	beq.n	8014dfa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	68db      	ldr	r3, [r3, #12]
 8014dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8014dd0:	697b      	ldr	r3, [r7, #20]
 8014dd2:	005b      	lsls	r3, r3, #1
 8014dd4:	2203      	movs	r2, #3
 8014dd6:	409a      	lsls	r2, r3
 8014dd8:	0013      	movs	r3, r2
 8014dda:	43da      	mvns	r2, r3
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	4013      	ands	r3, r2
 8014de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	689a      	ldr	r2, [r3, #8]
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	005b      	lsls	r3, r3, #1
 8014dea:	409a      	lsls	r2, r3
 8014dec:	0013      	movs	r3, r2
 8014dee:	693a      	ldr	r2, [r7, #16]
 8014df0:	4313      	orrs	r3, r2
 8014df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	693a      	ldr	r2, [r7, #16]
 8014df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	2203      	movs	r2, #3
 8014e00:	4013      	ands	r3, r2
 8014e02:	2b02      	cmp	r3, #2
 8014e04:	d123      	bne.n	8014e4e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	08da      	lsrs	r2, r3, #3
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	3208      	adds	r2, #8
 8014e0e:	0092      	lsls	r2, r2, #2
 8014e10:	58d3      	ldr	r3, [r2, r3]
 8014e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8014e14:	697b      	ldr	r3, [r7, #20]
 8014e16:	2207      	movs	r2, #7
 8014e18:	4013      	ands	r3, r2
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	220f      	movs	r2, #15
 8014e1e:	409a      	lsls	r2, r3
 8014e20:	0013      	movs	r3, r2
 8014e22:	43da      	mvns	r2, r3
 8014e24:	693b      	ldr	r3, [r7, #16]
 8014e26:	4013      	ands	r3, r2
 8014e28:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	691a      	ldr	r2, [r3, #16]
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	2107      	movs	r1, #7
 8014e32:	400b      	ands	r3, r1
 8014e34:	009b      	lsls	r3, r3, #2
 8014e36:	409a      	lsls	r2, r3
 8014e38:	0013      	movs	r3, r2
 8014e3a:	693a      	ldr	r2, [r7, #16]
 8014e3c:	4313      	orrs	r3, r2
 8014e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	08da      	lsrs	r2, r3, #3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	3208      	adds	r2, #8
 8014e48:	0092      	lsls	r2, r2, #2
 8014e4a:	6939      	ldr	r1, [r7, #16]
 8014e4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	005b      	lsls	r3, r3, #1
 8014e58:	2203      	movs	r2, #3
 8014e5a:	409a      	lsls	r2, r3
 8014e5c:	0013      	movs	r3, r2
 8014e5e:	43da      	mvns	r2, r3
 8014e60:	693b      	ldr	r3, [r7, #16]
 8014e62:	4013      	ands	r3, r2
 8014e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	2203      	movs	r2, #3
 8014e6c:	401a      	ands	r2, r3
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	005b      	lsls	r3, r3, #1
 8014e72:	409a      	lsls	r2, r3
 8014e74:	0013      	movs	r3, r2
 8014e76:	693a      	ldr	r2, [r7, #16]
 8014e78:	4313      	orrs	r3, r2
 8014e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	693a      	ldr	r2, [r7, #16]
 8014e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	685a      	ldr	r2, [r3, #4]
 8014e86:	23c0      	movs	r3, #192	@ 0xc0
 8014e88:	029b      	lsls	r3, r3, #10
 8014e8a:	4013      	ands	r3, r2
 8014e8c:	d100      	bne.n	8014e90 <HAL_GPIO_Init+0x17c>
 8014e8e:	e0a0      	b.n	8014fd2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014e90:	4b57      	ldr	r3, [pc, #348]	@ (8014ff0 <HAL_GPIO_Init+0x2dc>)
 8014e92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014e94:	4b56      	ldr	r3, [pc, #344]	@ (8014ff0 <HAL_GPIO_Init+0x2dc>)
 8014e96:	2101      	movs	r1, #1
 8014e98:	430a      	orrs	r2, r1
 8014e9a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8014e9c:	4a55      	ldr	r2, [pc, #340]	@ (8014ff4 <HAL_GPIO_Init+0x2e0>)
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	089b      	lsrs	r3, r3, #2
 8014ea2:	3302      	adds	r3, #2
 8014ea4:	009b      	lsls	r3, r3, #2
 8014ea6:	589b      	ldr	r3, [r3, r2]
 8014ea8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	2203      	movs	r2, #3
 8014eae:	4013      	ands	r3, r2
 8014eb0:	009b      	lsls	r3, r3, #2
 8014eb2:	220f      	movs	r2, #15
 8014eb4:	409a      	lsls	r2, r3
 8014eb6:	0013      	movs	r3, r2
 8014eb8:	43da      	mvns	r2, r3
 8014eba:	693b      	ldr	r3, [r7, #16]
 8014ebc:	4013      	ands	r3, r2
 8014ebe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8014ec0:	687a      	ldr	r2, [r7, #4]
 8014ec2:	23a0      	movs	r3, #160	@ 0xa0
 8014ec4:	05db      	lsls	r3, r3, #23
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	d01f      	beq.n	8014f0a <HAL_GPIO_Init+0x1f6>
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	4a4a      	ldr	r2, [pc, #296]	@ (8014ff8 <HAL_GPIO_Init+0x2e4>)
 8014ece:	4293      	cmp	r3, r2
 8014ed0:	d019      	beq.n	8014f06 <HAL_GPIO_Init+0x1f2>
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	4a49      	ldr	r2, [pc, #292]	@ (8014ffc <HAL_GPIO_Init+0x2e8>)
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	d013      	beq.n	8014f02 <HAL_GPIO_Init+0x1ee>
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	4a48      	ldr	r2, [pc, #288]	@ (8015000 <HAL_GPIO_Init+0x2ec>)
 8014ede:	4293      	cmp	r3, r2
 8014ee0:	d00d      	beq.n	8014efe <HAL_GPIO_Init+0x1ea>
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	4a47      	ldr	r2, [pc, #284]	@ (8015004 <HAL_GPIO_Init+0x2f0>)
 8014ee6:	4293      	cmp	r3, r2
 8014ee8:	d007      	beq.n	8014efa <HAL_GPIO_Init+0x1e6>
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	4a46      	ldr	r2, [pc, #280]	@ (8015008 <HAL_GPIO_Init+0x2f4>)
 8014eee:	4293      	cmp	r3, r2
 8014ef0:	d101      	bne.n	8014ef6 <HAL_GPIO_Init+0x1e2>
 8014ef2:	2305      	movs	r3, #5
 8014ef4:	e00a      	b.n	8014f0c <HAL_GPIO_Init+0x1f8>
 8014ef6:	2306      	movs	r3, #6
 8014ef8:	e008      	b.n	8014f0c <HAL_GPIO_Init+0x1f8>
 8014efa:	2304      	movs	r3, #4
 8014efc:	e006      	b.n	8014f0c <HAL_GPIO_Init+0x1f8>
 8014efe:	2303      	movs	r3, #3
 8014f00:	e004      	b.n	8014f0c <HAL_GPIO_Init+0x1f8>
 8014f02:	2302      	movs	r3, #2
 8014f04:	e002      	b.n	8014f0c <HAL_GPIO_Init+0x1f8>
 8014f06:	2301      	movs	r3, #1
 8014f08:	e000      	b.n	8014f0c <HAL_GPIO_Init+0x1f8>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	697a      	ldr	r2, [r7, #20]
 8014f0e:	2103      	movs	r1, #3
 8014f10:	400a      	ands	r2, r1
 8014f12:	0092      	lsls	r2, r2, #2
 8014f14:	4093      	lsls	r3, r2
 8014f16:	693a      	ldr	r2, [r7, #16]
 8014f18:	4313      	orrs	r3, r2
 8014f1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8014f1c:	4935      	ldr	r1, [pc, #212]	@ (8014ff4 <HAL_GPIO_Init+0x2e0>)
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	089b      	lsrs	r3, r3, #2
 8014f22:	3302      	adds	r3, #2
 8014f24:	009b      	lsls	r3, r3, #2
 8014f26:	693a      	ldr	r2, [r7, #16]
 8014f28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8014f2a:	4b38      	ldr	r3, [pc, #224]	@ (801500c <HAL_GPIO_Init+0x2f8>)
 8014f2c:	689b      	ldr	r3, [r3, #8]
 8014f2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	43da      	mvns	r2, r3
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	4013      	ands	r3, r2
 8014f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	685a      	ldr	r2, [r3, #4]
 8014f3e:	2380      	movs	r3, #128	@ 0x80
 8014f40:	035b      	lsls	r3, r3, #13
 8014f42:	4013      	ands	r3, r2
 8014f44:	d003      	beq.n	8014f4e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8014f46:	693a      	ldr	r2, [r7, #16]
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	4313      	orrs	r3, r2
 8014f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8014f4e:	4b2f      	ldr	r3, [pc, #188]	@ (801500c <HAL_GPIO_Init+0x2f8>)
 8014f50:	693a      	ldr	r2, [r7, #16]
 8014f52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8014f54:	4b2d      	ldr	r3, [pc, #180]	@ (801500c <HAL_GPIO_Init+0x2f8>)
 8014f56:	68db      	ldr	r3, [r3, #12]
 8014f58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	43da      	mvns	r2, r3
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	4013      	ands	r3, r2
 8014f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	685a      	ldr	r2, [r3, #4]
 8014f68:	2380      	movs	r3, #128	@ 0x80
 8014f6a:	039b      	lsls	r3, r3, #14
 8014f6c:	4013      	ands	r3, r2
 8014f6e:	d003      	beq.n	8014f78 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8014f70:	693a      	ldr	r2, [r7, #16]
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	4313      	orrs	r3, r2
 8014f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8014f78:	4b24      	ldr	r3, [pc, #144]	@ (801500c <HAL_GPIO_Init+0x2f8>)
 8014f7a:	693a      	ldr	r2, [r7, #16]
 8014f7c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8014f7e:	4b23      	ldr	r3, [pc, #140]	@ (801500c <HAL_GPIO_Init+0x2f8>)
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	43da      	mvns	r2, r3
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	4013      	ands	r3, r2
 8014f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	685a      	ldr	r2, [r3, #4]
 8014f92:	2380      	movs	r3, #128	@ 0x80
 8014f94:	029b      	lsls	r3, r3, #10
 8014f96:	4013      	ands	r3, r2
 8014f98:	d003      	beq.n	8014fa2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8014f9a:	693a      	ldr	r2, [r7, #16]
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	4313      	orrs	r3, r2
 8014fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8014fa2:	4b1a      	ldr	r3, [pc, #104]	@ (801500c <HAL_GPIO_Init+0x2f8>)
 8014fa4:	693a      	ldr	r2, [r7, #16]
 8014fa6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8014fa8:	4b18      	ldr	r3, [pc, #96]	@ (801500c <HAL_GPIO_Init+0x2f8>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	43da      	mvns	r2, r3
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	4013      	ands	r3, r2
 8014fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8014fb8:	683b      	ldr	r3, [r7, #0]
 8014fba:	685a      	ldr	r2, [r3, #4]
 8014fbc:	2380      	movs	r3, #128	@ 0x80
 8014fbe:	025b      	lsls	r3, r3, #9
 8014fc0:	4013      	ands	r3, r2
 8014fc2:	d003      	beq.n	8014fcc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8014fc4:	693a      	ldr	r2, [r7, #16]
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	4313      	orrs	r3, r2
 8014fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8014fcc:	4b0f      	ldr	r3, [pc, #60]	@ (801500c <HAL_GPIO_Init+0x2f8>)
 8014fce:	693a      	ldr	r2, [r7, #16]
 8014fd0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	3301      	adds	r3, #1
 8014fd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	681a      	ldr	r2, [r3, #0]
 8014fdc:	697b      	ldr	r3, [r7, #20]
 8014fde:	40da      	lsrs	r2, r3
 8014fe0:	1e13      	subs	r3, r2, #0
 8014fe2:	d000      	beq.n	8014fe6 <HAL_GPIO_Init+0x2d2>
 8014fe4:	e6a2      	b.n	8014d2c <HAL_GPIO_Init+0x18>
  }
}
 8014fe6:	46c0      	nop			@ (mov r8, r8)
 8014fe8:	46c0      	nop			@ (mov r8, r8)
 8014fea:	46bd      	mov	sp, r7
 8014fec:	b006      	add	sp, #24
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	40021000 	.word	0x40021000
 8014ff4:	40010000 	.word	0x40010000
 8014ff8:	50000400 	.word	0x50000400
 8014ffc:	50000800 	.word	0x50000800
 8015000:	50000c00 	.word	0x50000c00
 8015004:	50001000 	.word	0x50001000
 8015008:	50001c00 	.word	0x50001c00
 801500c:	40010400 	.word	0x40010400

08015010 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b084      	sub	sp, #16
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	000a      	movs	r2, r1
 801501a:	1cbb      	adds	r3, r7, #2
 801501c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	691b      	ldr	r3, [r3, #16]
 8015022:	1cba      	adds	r2, r7, #2
 8015024:	8812      	ldrh	r2, [r2, #0]
 8015026:	4013      	ands	r3, r2
 8015028:	d004      	beq.n	8015034 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 801502a:	230f      	movs	r3, #15
 801502c:	18fb      	adds	r3, r7, r3
 801502e:	2201      	movs	r2, #1
 8015030:	701a      	strb	r2, [r3, #0]
 8015032:	e003      	b.n	801503c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8015034:	230f      	movs	r3, #15
 8015036:	18fb      	adds	r3, r7, r3
 8015038:	2200      	movs	r2, #0
 801503a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 801503c:	230f      	movs	r3, #15
 801503e:	18fb      	adds	r3, r7, r3
 8015040:	781b      	ldrb	r3, [r3, #0]
}
 8015042:	0018      	movs	r0, r3
 8015044:	46bd      	mov	sp, r7
 8015046:	b004      	add	sp, #16
 8015048:	bd80      	pop	{r7, pc}

0801504a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801504a:	b580      	push	{r7, lr}
 801504c:	b082      	sub	sp, #8
 801504e:	af00      	add	r7, sp, #0
 8015050:	6078      	str	r0, [r7, #4]
 8015052:	0008      	movs	r0, r1
 8015054:	0011      	movs	r1, r2
 8015056:	1cbb      	adds	r3, r7, #2
 8015058:	1c02      	adds	r2, r0, #0
 801505a:	801a      	strh	r2, [r3, #0]
 801505c:	1c7b      	adds	r3, r7, #1
 801505e:	1c0a      	adds	r2, r1, #0
 8015060:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8015062:	1c7b      	adds	r3, r7, #1
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d004      	beq.n	8015074 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 801506a:	1cbb      	adds	r3, r7, #2
 801506c:	881a      	ldrh	r2, [r3, #0]
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8015072:	e003      	b.n	801507c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8015074:	1cbb      	adds	r3, r7, #2
 8015076:	881a      	ldrh	r2, [r3, #0]
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801507c:	46c0      	nop			@ (mov r8, r8)
 801507e:	46bd      	mov	sp, r7
 8015080:	b002      	add	sp, #8
 8015082:	bd80      	pop	{r7, pc}

08015084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b082      	sub	sp, #8
 8015088:	af00      	add	r7, sp, #0
 801508a:	0002      	movs	r2, r0
 801508c:	1dbb      	adds	r3, r7, #6
 801508e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8015090:	4b09      	ldr	r3, [pc, #36]	@ (80150b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8015092:	695b      	ldr	r3, [r3, #20]
 8015094:	1dba      	adds	r2, r7, #6
 8015096:	8812      	ldrh	r2, [r2, #0]
 8015098:	4013      	ands	r3, r2
 801509a:	d008      	beq.n	80150ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801509c:	4b06      	ldr	r3, [pc, #24]	@ (80150b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801509e:	1dba      	adds	r2, r7, #6
 80150a0:	8812      	ldrh	r2, [r2, #0]
 80150a2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80150a4:	1dbb      	adds	r3, r7, #6
 80150a6:	881b      	ldrh	r3, [r3, #0]
 80150a8:	0018      	movs	r0, r3
 80150aa:	f7f7 fbb7 	bl	800c81c <HAL_GPIO_EXTI_Callback>
  }
}
 80150ae:	46c0      	nop			@ (mov r8, r8)
 80150b0:	46bd      	mov	sp, r7
 80150b2:	b002      	add	sp, #8
 80150b4:	bd80      	pop	{r7, pc}
 80150b6:	46c0      	nop			@ (mov r8, r8)
 80150b8:	40010400 	.word	0x40010400

080150bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d101      	bne.n	80150ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80150ca:	2301      	movs	r3, #1
 80150cc:	e082      	b.n	80151d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	2241      	movs	r2, #65	@ 0x41
 80150d2:	5c9b      	ldrb	r3, [r3, r2]
 80150d4:	b2db      	uxtb	r3, r3
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d107      	bne.n	80150ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2240      	movs	r2, #64	@ 0x40
 80150de:	2100      	movs	r1, #0
 80150e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	0018      	movs	r0, r3
 80150e6:	f7f6 fe6b 	bl	800bdc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2241      	movs	r2, #65	@ 0x41
 80150ee:	2124      	movs	r1, #36	@ 0x24
 80150f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	681a      	ldr	r2, [r3, #0]
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	2101      	movs	r1, #1
 80150fe:	438a      	bics	r2, r1
 8015100:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	685a      	ldr	r2, [r3, #4]
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	4934      	ldr	r1, [pc, #208]	@ (80151dc <HAL_I2C_Init+0x120>)
 801510c:	400a      	ands	r2, r1
 801510e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	689a      	ldr	r2, [r3, #8]
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	4931      	ldr	r1, [pc, #196]	@ (80151e0 <HAL_I2C_Init+0x124>)
 801511c:	400a      	ands	r2, r1
 801511e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	68db      	ldr	r3, [r3, #12]
 8015124:	2b01      	cmp	r3, #1
 8015126:	d108      	bne.n	801513a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	689a      	ldr	r2, [r3, #8]
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	2180      	movs	r1, #128	@ 0x80
 8015132:	0209      	lsls	r1, r1, #8
 8015134:	430a      	orrs	r2, r1
 8015136:	609a      	str	r2, [r3, #8]
 8015138:	e007      	b.n	801514a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	689a      	ldr	r2, [r3, #8]
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	2184      	movs	r1, #132	@ 0x84
 8015144:	0209      	lsls	r1, r1, #8
 8015146:	430a      	orrs	r2, r1
 8015148:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	68db      	ldr	r3, [r3, #12]
 801514e:	2b02      	cmp	r3, #2
 8015150:	d104      	bne.n	801515c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2280      	movs	r2, #128	@ 0x80
 8015158:	0112      	lsls	r2, r2, #4
 801515a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	685a      	ldr	r2, [r3, #4]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	491f      	ldr	r1, [pc, #124]	@ (80151e4 <HAL_I2C_Init+0x128>)
 8015168:	430a      	orrs	r2, r1
 801516a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	68da      	ldr	r2, [r3, #12]
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	491a      	ldr	r1, [pc, #104]	@ (80151e0 <HAL_I2C_Init+0x124>)
 8015178:	400a      	ands	r2, r1
 801517a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	691a      	ldr	r2, [r3, #16]
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	695b      	ldr	r3, [r3, #20]
 8015184:	431a      	orrs	r2, r3
 8015186:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	699b      	ldr	r3, [r3, #24]
 801518c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	430a      	orrs	r2, r1
 8015194:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	69d9      	ldr	r1, [r3, #28]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	6a1a      	ldr	r2, [r3, #32]
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	430a      	orrs	r2, r1
 80151a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	681a      	ldr	r2, [r3, #0]
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	2101      	movs	r1, #1
 80151b2:	430a      	orrs	r2, r1
 80151b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	2200      	movs	r2, #0
 80151ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2241      	movs	r2, #65	@ 0x41
 80151c0:	2120      	movs	r1, #32
 80151c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2200      	movs	r2, #0
 80151c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2242      	movs	r2, #66	@ 0x42
 80151ce:	2100      	movs	r1, #0
 80151d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80151d2:	2300      	movs	r3, #0
}
 80151d4:	0018      	movs	r0, r3
 80151d6:	46bd      	mov	sp, r7
 80151d8:	b002      	add	sp, #8
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	f0ffffff 	.word	0xf0ffffff
 80151e0:	ffff7fff 	.word	0xffff7fff
 80151e4:	02008000 	.word	0x02008000

080151e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80151e8:	b590      	push	{r4, r7, lr}
 80151ea:	b089      	sub	sp, #36	@ 0x24
 80151ec:	af02      	add	r7, sp, #8
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	0008      	movs	r0, r1
 80151f2:	607a      	str	r2, [r7, #4]
 80151f4:	0019      	movs	r1, r3
 80151f6:	230a      	movs	r3, #10
 80151f8:	18fb      	adds	r3, r7, r3
 80151fa:	1c02      	adds	r2, r0, #0
 80151fc:	801a      	strh	r2, [r3, #0]
 80151fe:	2308      	movs	r3, #8
 8015200:	18fb      	adds	r3, r7, r3
 8015202:	1c0a      	adds	r2, r1, #0
 8015204:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	2241      	movs	r2, #65	@ 0x41
 801520a:	5c9b      	ldrb	r3, [r3, r2]
 801520c:	b2db      	uxtb	r3, r3
 801520e:	2b20      	cmp	r3, #32
 8015210:	d000      	beq.n	8015214 <HAL_I2C_Master_Transmit+0x2c>
 8015212:	e0e7      	b.n	80153e4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	2240      	movs	r2, #64	@ 0x40
 8015218:	5c9b      	ldrb	r3, [r3, r2]
 801521a:	2b01      	cmp	r3, #1
 801521c:	d101      	bne.n	8015222 <HAL_I2C_Master_Transmit+0x3a>
 801521e:	2302      	movs	r3, #2
 8015220:	e0e1      	b.n	80153e6 <HAL_I2C_Master_Transmit+0x1fe>
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2240      	movs	r2, #64	@ 0x40
 8015226:	2101      	movs	r1, #1
 8015228:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801522a:	f7fe fc7d 	bl	8013b28 <HAL_GetTick>
 801522e:	0003      	movs	r3, r0
 8015230:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015232:	2380      	movs	r3, #128	@ 0x80
 8015234:	0219      	lsls	r1, r3, #8
 8015236:	68f8      	ldr	r0, [r7, #12]
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	9300      	str	r3, [sp, #0]
 801523c:	2319      	movs	r3, #25
 801523e:	2201      	movs	r2, #1
 8015240:	f002 faa4 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8015244:	1e03      	subs	r3, r0, #0
 8015246:	d001      	beq.n	801524c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8015248:	2301      	movs	r3, #1
 801524a:	e0cc      	b.n	80153e6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	2241      	movs	r2, #65	@ 0x41
 8015250:	2121      	movs	r1, #33	@ 0x21
 8015252:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	2242      	movs	r2, #66	@ 0x42
 8015258:	2110      	movs	r1, #16
 801525a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	2200      	movs	r2, #0
 8015260:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	687a      	ldr	r2, [r7, #4]
 8015266:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	2208      	movs	r2, #8
 801526c:	18ba      	adds	r2, r7, r2
 801526e:	8812      	ldrh	r2, [r2, #0]
 8015270:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	2200      	movs	r2, #0
 8015276:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801527c:	b29b      	uxth	r3, r3
 801527e:	2bff      	cmp	r3, #255	@ 0xff
 8015280:	d911      	bls.n	80152a6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	22ff      	movs	r2, #255	@ 0xff
 8015286:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801528c:	b2da      	uxtb	r2, r3
 801528e:	2380      	movs	r3, #128	@ 0x80
 8015290:	045c      	lsls	r4, r3, #17
 8015292:	230a      	movs	r3, #10
 8015294:	18fb      	adds	r3, r7, r3
 8015296:	8819      	ldrh	r1, [r3, #0]
 8015298:	68f8      	ldr	r0, [r7, #12]
 801529a:	4b55      	ldr	r3, [pc, #340]	@ (80153f0 <HAL_I2C_Master_Transmit+0x208>)
 801529c:	9300      	str	r3, [sp, #0]
 801529e:	0023      	movs	r3, r4
 80152a0:	f002 fcc6 	bl	8017c30 <I2C_TransferConfig>
 80152a4:	e075      	b.n	8015392 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80152aa:	b29a      	uxth	r2, r3
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152b4:	b2da      	uxtb	r2, r3
 80152b6:	2380      	movs	r3, #128	@ 0x80
 80152b8:	049c      	lsls	r4, r3, #18
 80152ba:	230a      	movs	r3, #10
 80152bc:	18fb      	adds	r3, r7, r3
 80152be:	8819      	ldrh	r1, [r3, #0]
 80152c0:	68f8      	ldr	r0, [r7, #12]
 80152c2:	4b4b      	ldr	r3, [pc, #300]	@ (80153f0 <HAL_I2C_Master_Transmit+0x208>)
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	0023      	movs	r3, r4
 80152c8:	f002 fcb2 	bl	8017c30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80152cc:	e061      	b.n	8015392 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80152ce:	697a      	ldr	r2, [r7, #20]
 80152d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	0018      	movs	r0, r3
 80152d6:	f002 faa7 	bl	8017828 <I2C_WaitOnTXISFlagUntilTimeout>
 80152da:	1e03      	subs	r3, r0, #0
 80152dc:	d001      	beq.n	80152e2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80152de:	2301      	movs	r3, #1
 80152e0:	e081      	b.n	80153e6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152e6:	781a      	ldrb	r2, [r3, #0]
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152f2:	1c5a      	adds	r2, r3, #1
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	3b01      	subs	r3, #1
 8015300:	b29a      	uxth	r2, r3
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801530a:	3b01      	subs	r3, #1
 801530c:	b29a      	uxth	r2, r3
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015316:	b29b      	uxth	r3, r3
 8015318:	2b00      	cmp	r3, #0
 801531a:	d03a      	beq.n	8015392 <HAL_I2C_Master_Transmit+0x1aa>
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015320:	2b00      	cmp	r3, #0
 8015322:	d136      	bne.n	8015392 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015326:	68f8      	ldr	r0, [r7, #12]
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	9300      	str	r3, [sp, #0]
 801532c:	0013      	movs	r3, r2
 801532e:	2200      	movs	r2, #0
 8015330:	2180      	movs	r1, #128	@ 0x80
 8015332:	f002 fa2b 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8015336:	1e03      	subs	r3, r0, #0
 8015338:	d001      	beq.n	801533e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 801533a:	2301      	movs	r3, #1
 801533c:	e053      	b.n	80153e6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015342:	b29b      	uxth	r3, r3
 8015344:	2bff      	cmp	r3, #255	@ 0xff
 8015346:	d911      	bls.n	801536c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	22ff      	movs	r2, #255	@ 0xff
 801534c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015352:	b2da      	uxtb	r2, r3
 8015354:	2380      	movs	r3, #128	@ 0x80
 8015356:	045c      	lsls	r4, r3, #17
 8015358:	230a      	movs	r3, #10
 801535a:	18fb      	adds	r3, r7, r3
 801535c:	8819      	ldrh	r1, [r3, #0]
 801535e:	68f8      	ldr	r0, [r7, #12]
 8015360:	2300      	movs	r3, #0
 8015362:	9300      	str	r3, [sp, #0]
 8015364:	0023      	movs	r3, r4
 8015366:	f002 fc63 	bl	8017c30 <I2C_TransferConfig>
 801536a:	e012      	b.n	8015392 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015370:	b29a      	uxth	r2, r3
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801537a:	b2da      	uxtb	r2, r3
 801537c:	2380      	movs	r3, #128	@ 0x80
 801537e:	049c      	lsls	r4, r3, #18
 8015380:	230a      	movs	r3, #10
 8015382:	18fb      	adds	r3, r7, r3
 8015384:	8819      	ldrh	r1, [r3, #0]
 8015386:	68f8      	ldr	r0, [r7, #12]
 8015388:	2300      	movs	r3, #0
 801538a:	9300      	str	r3, [sp, #0]
 801538c:	0023      	movs	r3, r4
 801538e:	f002 fc4f 	bl	8017c30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015396:	b29b      	uxth	r3, r3
 8015398:	2b00      	cmp	r3, #0
 801539a:	d198      	bne.n	80152ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801539c:	697a      	ldr	r2, [r7, #20]
 801539e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	0018      	movs	r0, r3
 80153a4:	f002 fa86 	bl	80178b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80153a8:	1e03      	subs	r3, r0, #0
 80153aa:	d001      	beq.n	80153b0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80153ac:	2301      	movs	r3, #1
 80153ae:	e01a      	b.n	80153e6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	2220      	movs	r2, #32
 80153b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	685a      	ldr	r2, [r3, #4]
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	490c      	ldr	r1, [pc, #48]	@ (80153f4 <HAL_I2C_Master_Transmit+0x20c>)
 80153c4:	400a      	ands	r2, r1
 80153c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	2241      	movs	r2, #65	@ 0x41
 80153cc:	2120      	movs	r1, #32
 80153ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	2242      	movs	r2, #66	@ 0x42
 80153d4:	2100      	movs	r1, #0
 80153d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	2240      	movs	r2, #64	@ 0x40
 80153dc:	2100      	movs	r1, #0
 80153de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80153e0:	2300      	movs	r3, #0
 80153e2:	e000      	b.n	80153e6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80153e4:	2302      	movs	r3, #2
  }
}
 80153e6:	0018      	movs	r0, r3
 80153e8:	46bd      	mov	sp, r7
 80153ea:	b007      	add	sp, #28
 80153ec:	bd90      	pop	{r4, r7, pc}
 80153ee:	46c0      	nop			@ (mov r8, r8)
 80153f0:	80002000 	.word	0x80002000
 80153f4:	fe00e800 	.word	0xfe00e800

080153f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80153f8:	b590      	push	{r4, r7, lr}
 80153fa:	b089      	sub	sp, #36	@ 0x24
 80153fc:	af02      	add	r7, sp, #8
 80153fe:	60f8      	str	r0, [r7, #12]
 8015400:	0008      	movs	r0, r1
 8015402:	607a      	str	r2, [r7, #4]
 8015404:	0019      	movs	r1, r3
 8015406:	230a      	movs	r3, #10
 8015408:	18fb      	adds	r3, r7, r3
 801540a:	1c02      	adds	r2, r0, #0
 801540c:	801a      	strh	r2, [r3, #0]
 801540e:	2308      	movs	r3, #8
 8015410:	18fb      	adds	r3, r7, r3
 8015412:	1c0a      	adds	r2, r1, #0
 8015414:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	2241      	movs	r2, #65	@ 0x41
 801541a:	5c9b      	ldrb	r3, [r3, r2]
 801541c:	b2db      	uxtb	r3, r3
 801541e:	2b20      	cmp	r3, #32
 8015420:	d000      	beq.n	8015424 <HAL_I2C_Master_Receive+0x2c>
 8015422:	e0e8      	b.n	80155f6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	2240      	movs	r2, #64	@ 0x40
 8015428:	5c9b      	ldrb	r3, [r3, r2]
 801542a:	2b01      	cmp	r3, #1
 801542c:	d101      	bne.n	8015432 <HAL_I2C_Master_Receive+0x3a>
 801542e:	2302      	movs	r3, #2
 8015430:	e0e2      	b.n	80155f8 <HAL_I2C_Master_Receive+0x200>
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	2240      	movs	r2, #64	@ 0x40
 8015436:	2101      	movs	r1, #1
 8015438:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801543a:	f7fe fb75 	bl	8013b28 <HAL_GetTick>
 801543e:	0003      	movs	r3, r0
 8015440:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015442:	2380      	movs	r3, #128	@ 0x80
 8015444:	0219      	lsls	r1, r3, #8
 8015446:	68f8      	ldr	r0, [r7, #12]
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	9300      	str	r3, [sp, #0]
 801544c:	2319      	movs	r3, #25
 801544e:	2201      	movs	r2, #1
 8015450:	f002 f99c 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8015454:	1e03      	subs	r3, r0, #0
 8015456:	d001      	beq.n	801545c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8015458:	2301      	movs	r3, #1
 801545a:	e0cd      	b.n	80155f8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	2241      	movs	r2, #65	@ 0x41
 8015460:	2122      	movs	r1, #34	@ 0x22
 8015462:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	2242      	movs	r2, #66	@ 0x42
 8015468:	2110      	movs	r1, #16
 801546a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	2200      	movs	r2, #0
 8015470:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	2208      	movs	r2, #8
 801547c:	18ba      	adds	r2, r7, r2
 801547e:	8812      	ldrh	r2, [r2, #0]
 8015480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2200      	movs	r2, #0
 8015486:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801548c:	b29b      	uxth	r3, r3
 801548e:	2bff      	cmp	r3, #255	@ 0xff
 8015490:	d911      	bls.n	80154b6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	22ff      	movs	r2, #255	@ 0xff
 8015496:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801549c:	b2da      	uxtb	r2, r3
 801549e:	2380      	movs	r3, #128	@ 0x80
 80154a0:	045c      	lsls	r4, r3, #17
 80154a2:	230a      	movs	r3, #10
 80154a4:	18fb      	adds	r3, r7, r3
 80154a6:	8819      	ldrh	r1, [r3, #0]
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	4b55      	ldr	r3, [pc, #340]	@ (8015600 <HAL_I2C_Master_Receive+0x208>)
 80154ac:	9300      	str	r3, [sp, #0]
 80154ae:	0023      	movs	r3, r4
 80154b0:	f002 fbbe 	bl	8017c30 <I2C_TransferConfig>
 80154b4:	e076      	b.n	80155a4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80154ba:	b29a      	uxth	r2, r3
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80154c4:	b2da      	uxtb	r2, r3
 80154c6:	2380      	movs	r3, #128	@ 0x80
 80154c8:	049c      	lsls	r4, r3, #18
 80154ca:	230a      	movs	r3, #10
 80154cc:	18fb      	adds	r3, r7, r3
 80154ce:	8819      	ldrh	r1, [r3, #0]
 80154d0:	68f8      	ldr	r0, [r7, #12]
 80154d2:	4b4b      	ldr	r3, [pc, #300]	@ (8015600 <HAL_I2C_Master_Receive+0x208>)
 80154d4:	9300      	str	r3, [sp, #0]
 80154d6:	0023      	movs	r3, r4
 80154d8:	f002 fbaa 	bl	8017c30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80154dc:	e062      	b.n	80155a4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80154de:	697a      	ldr	r2, [r7, #20]
 80154e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	0018      	movs	r0, r3
 80154e6:	f002 fa29 	bl	801793c <I2C_WaitOnRXNEFlagUntilTimeout>
 80154ea:	1e03      	subs	r3, r0, #0
 80154ec:	d001      	beq.n	80154f2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80154ee:	2301      	movs	r3, #1
 80154f0:	e082      	b.n	80155f8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154fc:	b2d2      	uxtb	r2, r2
 80154fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015504:	1c5a      	adds	r2, r3, #1
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801550e:	3b01      	subs	r3, #1
 8015510:	b29a      	uxth	r2, r3
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801551a:	b29b      	uxth	r3, r3
 801551c:	3b01      	subs	r3, #1
 801551e:	b29a      	uxth	r2, r3
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015528:	b29b      	uxth	r3, r3
 801552a:	2b00      	cmp	r3, #0
 801552c:	d03a      	beq.n	80155a4 <HAL_I2C_Master_Receive+0x1ac>
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015532:	2b00      	cmp	r3, #0
 8015534:	d136      	bne.n	80155a4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015538:	68f8      	ldr	r0, [r7, #12]
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	9300      	str	r3, [sp, #0]
 801553e:	0013      	movs	r3, r2
 8015540:	2200      	movs	r2, #0
 8015542:	2180      	movs	r1, #128	@ 0x80
 8015544:	f002 f922 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8015548:	1e03      	subs	r3, r0, #0
 801554a:	d001      	beq.n	8015550 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 801554c:	2301      	movs	r3, #1
 801554e:	e053      	b.n	80155f8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015554:	b29b      	uxth	r3, r3
 8015556:	2bff      	cmp	r3, #255	@ 0xff
 8015558:	d911      	bls.n	801557e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	22ff      	movs	r2, #255	@ 0xff
 801555e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015564:	b2da      	uxtb	r2, r3
 8015566:	2380      	movs	r3, #128	@ 0x80
 8015568:	045c      	lsls	r4, r3, #17
 801556a:	230a      	movs	r3, #10
 801556c:	18fb      	adds	r3, r7, r3
 801556e:	8819      	ldrh	r1, [r3, #0]
 8015570:	68f8      	ldr	r0, [r7, #12]
 8015572:	2300      	movs	r3, #0
 8015574:	9300      	str	r3, [sp, #0]
 8015576:	0023      	movs	r3, r4
 8015578:	f002 fb5a 	bl	8017c30 <I2C_TransferConfig>
 801557c:	e012      	b.n	80155a4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015582:	b29a      	uxth	r2, r3
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801558c:	b2da      	uxtb	r2, r3
 801558e:	2380      	movs	r3, #128	@ 0x80
 8015590:	049c      	lsls	r4, r3, #18
 8015592:	230a      	movs	r3, #10
 8015594:	18fb      	adds	r3, r7, r3
 8015596:	8819      	ldrh	r1, [r3, #0]
 8015598:	68f8      	ldr	r0, [r7, #12]
 801559a:	2300      	movs	r3, #0
 801559c:	9300      	str	r3, [sp, #0]
 801559e:	0023      	movs	r3, r4
 80155a0:	f002 fb46 	bl	8017c30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155a8:	b29b      	uxth	r3, r3
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d197      	bne.n	80154de <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80155ae:	697a      	ldr	r2, [r7, #20]
 80155b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	0018      	movs	r0, r3
 80155b6:	f002 f97d 	bl	80178b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80155ba:	1e03      	subs	r3, r0, #0
 80155bc:	d001      	beq.n	80155c2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80155be:	2301      	movs	r3, #1
 80155c0:	e01a      	b.n	80155f8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	2220      	movs	r2, #32
 80155c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	685a      	ldr	r2, [r3, #4]
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	490b      	ldr	r1, [pc, #44]	@ (8015604 <HAL_I2C_Master_Receive+0x20c>)
 80155d6:	400a      	ands	r2, r1
 80155d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	2241      	movs	r2, #65	@ 0x41
 80155de:	2120      	movs	r1, #32
 80155e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	2242      	movs	r2, #66	@ 0x42
 80155e6:	2100      	movs	r1, #0
 80155e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	2240      	movs	r2, #64	@ 0x40
 80155ee:	2100      	movs	r1, #0
 80155f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80155f2:	2300      	movs	r3, #0
 80155f4:	e000      	b.n	80155f8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80155f6:	2302      	movs	r3, #2
  }
}
 80155f8:	0018      	movs	r0, r3
 80155fa:	46bd      	mov	sp, r7
 80155fc:	b007      	add	sp, #28
 80155fe:	bd90      	pop	{r4, r7, pc}
 8015600:	80002400 	.word	0x80002400
 8015604:	fe00e800 	.word	0xfe00e800

08015608 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8015608:	b5b0      	push	{r4, r5, r7, lr}
 801560a:	b088      	sub	sp, #32
 801560c:	af02      	add	r7, sp, #8
 801560e:	60f8      	str	r0, [r7, #12]
 8015610:	0008      	movs	r0, r1
 8015612:	607a      	str	r2, [r7, #4]
 8015614:	0019      	movs	r1, r3
 8015616:	230a      	movs	r3, #10
 8015618:	18fb      	adds	r3, r7, r3
 801561a:	1c02      	adds	r2, r0, #0
 801561c:	801a      	strh	r2, [r3, #0]
 801561e:	2308      	movs	r3, #8
 8015620:	18fb      	adds	r3, r7, r3
 8015622:	1c0a      	adds	r2, r1, #0
 8015624:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	2241      	movs	r2, #65	@ 0x41
 801562a:	5c9b      	ldrb	r3, [r3, r2]
 801562c:	b2db      	uxtb	r3, r3
 801562e:	2b20      	cmp	r3, #32
 8015630:	d000      	beq.n	8015634 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8015632:	e0dd      	b.n	80157f0 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	699a      	ldr	r2, [r3, #24]
 801563a:	2380      	movs	r3, #128	@ 0x80
 801563c:	021b      	lsls	r3, r3, #8
 801563e:	401a      	ands	r2, r3
 8015640:	2380      	movs	r3, #128	@ 0x80
 8015642:	021b      	lsls	r3, r3, #8
 8015644:	429a      	cmp	r2, r3
 8015646:	d101      	bne.n	801564c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8015648:	2302      	movs	r3, #2
 801564a:	e0d2      	b.n	80157f2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	2240      	movs	r2, #64	@ 0x40
 8015650:	5c9b      	ldrb	r3, [r3, r2]
 8015652:	2b01      	cmp	r3, #1
 8015654:	d101      	bne.n	801565a <HAL_I2C_Master_Transmit_DMA+0x52>
 8015656:	2302      	movs	r3, #2
 8015658:	e0cb      	b.n	80157f2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	2240      	movs	r2, #64	@ 0x40
 801565e:	2101      	movs	r1, #1
 8015660:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	2241      	movs	r2, #65	@ 0x41
 8015666:	2121      	movs	r1, #33	@ 0x21
 8015668:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	2242      	movs	r2, #66	@ 0x42
 801566e:	2110      	movs	r1, #16
 8015670:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	2200      	movs	r2, #0
 8015676:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	687a      	ldr	r2, [r7, #4]
 801567c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	2208      	movs	r2, #8
 8015682:	18ba      	adds	r2, r7, r2
 8015684:	8812      	ldrh	r2, [r2, #0]
 8015686:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	4a5c      	ldr	r2, [pc, #368]	@ (80157fc <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 801568c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	4a5b      	ldr	r2, [pc, #364]	@ (8015800 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8015692:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015698:	b29b      	uxth	r3, r3
 801569a:	2bff      	cmp	r3, #255	@ 0xff
 801569c:	d906      	bls.n	80156ac <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	22ff      	movs	r2, #255	@ 0xff
 80156a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80156a4:	2380      	movs	r3, #128	@ 0x80
 80156a6:	045b      	lsls	r3, r3, #17
 80156a8:	617b      	str	r3, [r7, #20]
 80156aa:	e007      	b.n	80156bc <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80156b0:	b29a      	uxth	r2, r3
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80156b6:	2380      	movs	r3, #128	@ 0x80
 80156b8:	049b      	lsls	r3, r3, #18
 80156ba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d100      	bne.n	80156c6 <HAL_I2C_Master_Transmit_DMA+0xbe>
 80156c4:	e078      	b.n	80157b8 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d023      	beq.n	8015716 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156d2:	4a4c      	ldr	r2, [pc, #304]	@ (8015804 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80156d4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156da:	4a4b      	ldr	r2, [pc, #300]	@ (8015808 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80156dc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156e2:	2200      	movs	r2, #0
 80156e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156ea:	2200      	movs	r2, #0
 80156ec:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80156f2:	6879      	ldr	r1, [r7, #4]
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	3328      	adds	r3, #40	@ 0x28
 80156fa:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015700:	2513      	movs	r5, #19
 8015702:	197c      	adds	r4, r7, r5
 8015704:	f7fe ff62 	bl	80145cc <HAL_DMA_Start_IT>
 8015708:	0003      	movs	r3, r0
 801570a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 801570c:	197b      	adds	r3, r7, r5
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d13d      	bne.n	8015790 <HAL_I2C_Master_Transmit_DMA+0x188>
 8015714:	e013      	b.n	801573e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	2241      	movs	r2, #65	@ 0x41
 801571a:	2120      	movs	r1, #32
 801571c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	2242      	movs	r2, #66	@ 0x42
 8015722:	2100      	movs	r1, #0
 8015724:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801572a:	2280      	movs	r2, #128	@ 0x80
 801572c:	431a      	orrs	r2, r3
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	2240      	movs	r2, #64	@ 0x40
 8015736:	2100      	movs	r1, #0
 8015738:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 801573a:	2301      	movs	r3, #1
 801573c:	e059      	b.n	80157f2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015742:	b2da      	uxtb	r2, r3
 8015744:	697c      	ldr	r4, [r7, #20]
 8015746:	230a      	movs	r3, #10
 8015748:	18fb      	adds	r3, r7, r3
 801574a:	8819      	ldrh	r1, [r3, #0]
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	4b2f      	ldr	r3, [pc, #188]	@ (801580c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8015750:	9300      	str	r3, [sp, #0]
 8015752:	0023      	movs	r3, r4
 8015754:	f002 fa6c 	bl	8017c30 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801575c:	b29a      	uxth	r2, r3
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015762:	1ad3      	subs	r3, r2, r3
 8015764:	b29a      	uxth	r2, r3
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	2240      	movs	r2, #64	@ 0x40
 801576e:	2100      	movs	r1, #0
 8015770:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	2110      	movs	r1, #16
 8015776:	0018      	movs	r0, r3
 8015778:	f002 fa94 	bl	8017ca4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	681a      	ldr	r2, [r3, #0]
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	2180      	movs	r1, #128	@ 0x80
 8015788:	01c9      	lsls	r1, r1, #7
 801578a:	430a      	orrs	r2, r1
 801578c:	601a      	str	r2, [r3, #0]
 801578e:	e02d      	b.n	80157ec <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	2241      	movs	r2, #65	@ 0x41
 8015794:	2120      	movs	r1, #32
 8015796:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	2242      	movs	r2, #66	@ 0x42
 801579c:	2100      	movs	r1, #0
 801579e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157a4:	2210      	movs	r2, #16
 80157a6:	431a      	orrs	r2, r3
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	2240      	movs	r2, #64	@ 0x40
 80157b0:	2100      	movs	r1, #0
 80157b2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80157b4:	2301      	movs	r3, #1
 80157b6:	e01c      	b.n	80157f2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	4a15      	ldr	r2, [pc, #84]	@ (8015810 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80157bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157c2:	b2da      	uxtb	r2, r3
 80157c4:	2380      	movs	r3, #128	@ 0x80
 80157c6:	049c      	lsls	r4, r3, #18
 80157c8:	230a      	movs	r3, #10
 80157ca:	18fb      	adds	r3, r7, r3
 80157cc:	8819      	ldrh	r1, [r3, #0]
 80157ce:	68f8      	ldr	r0, [r7, #12]
 80157d0:	4b0e      	ldr	r3, [pc, #56]	@ (801580c <HAL_I2C_Master_Transmit_DMA+0x204>)
 80157d2:	9300      	str	r3, [sp, #0]
 80157d4:	0023      	movs	r3, r4
 80157d6:	f002 fa2b 	bl	8017c30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	2240      	movs	r2, #64	@ 0x40
 80157de:	2100      	movs	r1, #0
 80157e0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	2101      	movs	r1, #1
 80157e6:	0018      	movs	r0, r3
 80157e8:	f002 fa5c 	bl	8017ca4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80157ec:	2300      	movs	r3, #0
 80157ee:	e000      	b.n	80157f2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80157f0:	2302      	movs	r3, #2
  }
}
 80157f2:	0018      	movs	r0, r3
 80157f4:	46bd      	mov	sp, r7
 80157f6:	b006      	add	sp, #24
 80157f8:	bdb0      	pop	{r4, r5, r7, pc}
 80157fa:	46c0      	nop			@ (mov r8, r8)
 80157fc:	ffff0000 	.word	0xffff0000
 8015800:	080164e1 	.word	0x080164e1
 8015804:	080175dd 	.word	0x080175dd
 8015808:	0801771d 	.word	0x0801771d
 801580c:	80002000 	.word	0x80002000
 8015810:	08016035 	.word	0x08016035

08015814 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8015814:	b5b0      	push	{r4, r5, r7, lr}
 8015816:	b088      	sub	sp, #32
 8015818:	af02      	add	r7, sp, #8
 801581a:	60f8      	str	r0, [r7, #12]
 801581c:	0008      	movs	r0, r1
 801581e:	607a      	str	r2, [r7, #4]
 8015820:	0019      	movs	r1, r3
 8015822:	230a      	movs	r3, #10
 8015824:	18fb      	adds	r3, r7, r3
 8015826:	1c02      	adds	r2, r0, #0
 8015828:	801a      	strh	r2, [r3, #0]
 801582a:	2308      	movs	r3, #8
 801582c:	18fb      	adds	r3, r7, r3
 801582e:	1c0a      	adds	r2, r1, #0
 8015830:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	2241      	movs	r2, #65	@ 0x41
 8015836:	5c9b      	ldrb	r3, [r3, r2]
 8015838:	b2db      	uxtb	r3, r3
 801583a:	2b20      	cmp	r3, #32
 801583c:	d000      	beq.n	8015840 <HAL_I2C_Master_Receive_DMA+0x2c>
 801583e:	e0dd      	b.n	80159fc <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	699a      	ldr	r2, [r3, #24]
 8015846:	2380      	movs	r3, #128	@ 0x80
 8015848:	021b      	lsls	r3, r3, #8
 801584a:	401a      	ands	r2, r3
 801584c:	2380      	movs	r3, #128	@ 0x80
 801584e:	021b      	lsls	r3, r3, #8
 8015850:	429a      	cmp	r2, r3
 8015852:	d101      	bne.n	8015858 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8015854:	2302      	movs	r3, #2
 8015856:	e0d2      	b.n	80159fe <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	2240      	movs	r2, #64	@ 0x40
 801585c:	5c9b      	ldrb	r3, [r3, r2]
 801585e:	2b01      	cmp	r3, #1
 8015860:	d101      	bne.n	8015866 <HAL_I2C_Master_Receive_DMA+0x52>
 8015862:	2302      	movs	r3, #2
 8015864:	e0cb      	b.n	80159fe <HAL_I2C_Master_Receive_DMA+0x1ea>
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	2240      	movs	r2, #64	@ 0x40
 801586a:	2101      	movs	r1, #1
 801586c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	2241      	movs	r2, #65	@ 0x41
 8015872:	2122      	movs	r1, #34	@ 0x22
 8015874:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	2242      	movs	r2, #66	@ 0x42
 801587a:	2110      	movs	r1, #16
 801587c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	2200      	movs	r2, #0
 8015882:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	687a      	ldr	r2, [r7, #4]
 8015888:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	2208      	movs	r2, #8
 801588e:	18ba      	adds	r2, r7, r2
 8015890:	8812      	ldrh	r2, [r2, #0]
 8015892:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	4a5c      	ldr	r2, [pc, #368]	@ (8015a08 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8015898:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	4a5b      	ldr	r2, [pc, #364]	@ (8015a0c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 801589e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	2bff      	cmp	r3, #255	@ 0xff
 80158a8:	d906      	bls.n	80158b8 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	22ff      	movs	r2, #255	@ 0xff
 80158ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80158b0:	2380      	movs	r3, #128	@ 0x80
 80158b2:	045b      	lsls	r3, r3, #17
 80158b4:	617b      	str	r3, [r7, #20]
 80158b6:	e007      	b.n	80158c8 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80158bc:	b29a      	uxth	r2, r3
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80158c2:	2380      	movs	r3, #128	@ 0x80
 80158c4:	049b      	lsls	r3, r3, #18
 80158c6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d100      	bne.n	80158d2 <HAL_I2C_Master_Receive_DMA+0xbe>
 80158d0:	e078      	b.n	80159c4 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d023      	beq.n	8015922 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80158de:	4a4c      	ldr	r2, [pc, #304]	@ (8015a10 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80158e0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80158e6:	4a4b      	ldr	r2, [pc, #300]	@ (8015a14 <HAL_I2C_Master_Receive_DMA+0x200>)
 80158e8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80158ee:	2200      	movs	r2, #0
 80158f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80158f6:	2200      	movs	r2, #0
 80158f8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	3324      	adds	r3, #36	@ 0x24
 8015904:	0019      	movs	r1, r3
 8015906:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 801590c:	2513      	movs	r5, #19
 801590e:	197c      	adds	r4, r7, r5
 8015910:	f7fe fe5c 	bl	80145cc <HAL_DMA_Start_IT>
 8015914:	0003      	movs	r3, r0
 8015916:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8015918:	197b      	adds	r3, r7, r5
 801591a:	781b      	ldrb	r3, [r3, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d13d      	bne.n	801599c <HAL_I2C_Master_Receive_DMA+0x188>
 8015920:	e013      	b.n	801594a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	2241      	movs	r2, #65	@ 0x41
 8015926:	2120      	movs	r1, #32
 8015928:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	2242      	movs	r2, #66	@ 0x42
 801592e:	2100      	movs	r1, #0
 8015930:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015936:	2280      	movs	r2, #128	@ 0x80
 8015938:	431a      	orrs	r2, r3
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	2240      	movs	r2, #64	@ 0x40
 8015942:	2100      	movs	r1, #0
 8015944:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8015946:	2301      	movs	r3, #1
 8015948:	e059      	b.n	80159fe <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801594e:	b2da      	uxtb	r2, r3
 8015950:	697c      	ldr	r4, [r7, #20]
 8015952:	230a      	movs	r3, #10
 8015954:	18fb      	adds	r3, r7, r3
 8015956:	8819      	ldrh	r1, [r3, #0]
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	4b2f      	ldr	r3, [pc, #188]	@ (8015a18 <HAL_I2C_Master_Receive_DMA+0x204>)
 801595c:	9300      	str	r3, [sp, #0]
 801595e:	0023      	movs	r3, r4
 8015960:	f002 f966 	bl	8017c30 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015968:	b29a      	uxth	r2, r3
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801596e:	1ad3      	subs	r3, r2, r3
 8015970:	b29a      	uxth	r2, r3
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	2240      	movs	r2, #64	@ 0x40
 801597a:	2100      	movs	r1, #0
 801597c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	2110      	movs	r1, #16
 8015982:	0018      	movs	r0, r3
 8015984:	f002 f98e 	bl	8017ca4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	681a      	ldr	r2, [r3, #0]
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	2180      	movs	r1, #128	@ 0x80
 8015994:	0209      	lsls	r1, r1, #8
 8015996:	430a      	orrs	r2, r1
 8015998:	601a      	str	r2, [r3, #0]
 801599a:	e02d      	b.n	80159f8 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2241      	movs	r2, #65	@ 0x41
 80159a0:	2120      	movs	r1, #32
 80159a2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2242      	movs	r2, #66	@ 0x42
 80159a8:	2100      	movs	r1, #0
 80159aa:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159b0:	2210      	movs	r2, #16
 80159b2:	431a      	orrs	r2, r3
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	2240      	movs	r2, #64	@ 0x40
 80159bc:	2100      	movs	r1, #0
 80159be:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80159c0:	2301      	movs	r3, #1
 80159c2:	e01c      	b.n	80159fe <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	4a15      	ldr	r2, [pc, #84]	@ (8015a1c <HAL_I2C_Master_Receive_DMA+0x208>)
 80159c8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159ce:	b2da      	uxtb	r2, r3
 80159d0:	2380      	movs	r3, #128	@ 0x80
 80159d2:	049c      	lsls	r4, r3, #18
 80159d4:	230a      	movs	r3, #10
 80159d6:	18fb      	adds	r3, r7, r3
 80159d8:	8819      	ldrh	r1, [r3, #0]
 80159da:	68f8      	ldr	r0, [r7, #12]
 80159dc:	4b0e      	ldr	r3, [pc, #56]	@ (8015a18 <HAL_I2C_Master_Receive_DMA+0x204>)
 80159de:	9300      	str	r3, [sp, #0]
 80159e0:	0023      	movs	r3, r4
 80159e2:	f002 f925 	bl	8017c30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2240      	movs	r2, #64	@ 0x40
 80159ea:	2100      	movs	r1, #0
 80159ec:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	2101      	movs	r1, #1
 80159f2:	0018      	movs	r0, r3
 80159f4:	f002 f956 	bl	8017ca4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80159f8:	2300      	movs	r3, #0
 80159fa:	e000      	b.n	80159fe <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80159fc:	2302      	movs	r3, #2
  }
}
 80159fe:	0018      	movs	r0, r3
 8015a00:	46bd      	mov	sp, r7
 8015a02:	b006      	add	sp, #24
 8015a04:	bdb0      	pop	{r4, r5, r7, pc}
 8015a06:	46c0      	nop			@ (mov r8, r8)
 8015a08:	ffff0000 	.word	0xffff0000
 8015a0c:	080164e1 	.word	0x080164e1
 8015a10:	0801767d 	.word	0x0801767d
 8015a14:	0801771d 	.word	0x0801771d
 8015a18:	80002400 	.word	0x80002400
 8015a1c:	08016035 	.word	0x08016035

08015a20 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015a20:	b590      	push	{r4, r7, lr}
 8015a22:	b089      	sub	sp, #36	@ 0x24
 8015a24:	af02      	add	r7, sp, #8
 8015a26:	60f8      	str	r0, [r7, #12]
 8015a28:	000c      	movs	r4, r1
 8015a2a:	0010      	movs	r0, r2
 8015a2c:	0019      	movs	r1, r3
 8015a2e:	230a      	movs	r3, #10
 8015a30:	18fb      	adds	r3, r7, r3
 8015a32:	1c22      	adds	r2, r4, #0
 8015a34:	801a      	strh	r2, [r3, #0]
 8015a36:	2308      	movs	r3, #8
 8015a38:	18fb      	adds	r3, r7, r3
 8015a3a:	1c02      	adds	r2, r0, #0
 8015a3c:	801a      	strh	r2, [r3, #0]
 8015a3e:	1dbb      	adds	r3, r7, #6
 8015a40:	1c0a      	adds	r2, r1, #0
 8015a42:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2241      	movs	r2, #65	@ 0x41
 8015a48:	5c9b      	ldrb	r3, [r3, r2]
 8015a4a:	b2db      	uxtb	r3, r3
 8015a4c:	2b20      	cmp	r3, #32
 8015a4e:	d000      	beq.n	8015a52 <HAL_I2C_Mem_Read+0x32>
 8015a50:	e110      	b.n	8015c74 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8015a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d004      	beq.n	8015a62 <HAL_I2C_Mem_Read+0x42>
 8015a58:	232c      	movs	r3, #44	@ 0x2c
 8015a5a:	18fb      	adds	r3, r7, r3
 8015a5c:	881b      	ldrh	r3, [r3, #0]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d105      	bne.n	8015a6e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	2280      	movs	r2, #128	@ 0x80
 8015a66:	0092      	lsls	r2, r2, #2
 8015a68:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	e103      	b.n	8015c76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	2240      	movs	r2, #64	@ 0x40
 8015a72:	5c9b      	ldrb	r3, [r3, r2]
 8015a74:	2b01      	cmp	r3, #1
 8015a76:	d101      	bne.n	8015a7c <HAL_I2C_Mem_Read+0x5c>
 8015a78:	2302      	movs	r3, #2
 8015a7a:	e0fc      	b.n	8015c76 <HAL_I2C_Mem_Read+0x256>
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	2240      	movs	r2, #64	@ 0x40
 8015a80:	2101      	movs	r1, #1
 8015a82:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015a84:	f7fe f850 	bl	8013b28 <HAL_GetTick>
 8015a88:	0003      	movs	r3, r0
 8015a8a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015a8c:	2380      	movs	r3, #128	@ 0x80
 8015a8e:	0219      	lsls	r1, r3, #8
 8015a90:	68f8      	ldr	r0, [r7, #12]
 8015a92:	697b      	ldr	r3, [r7, #20]
 8015a94:	9300      	str	r3, [sp, #0]
 8015a96:	2319      	movs	r3, #25
 8015a98:	2201      	movs	r2, #1
 8015a9a:	f001 fe77 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8015a9e:	1e03      	subs	r3, r0, #0
 8015aa0:	d001      	beq.n	8015aa6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8015aa2:	2301      	movs	r3, #1
 8015aa4:	e0e7      	b.n	8015c76 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	2241      	movs	r2, #65	@ 0x41
 8015aaa:	2122      	movs	r1, #34	@ 0x22
 8015aac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	2242      	movs	r2, #66	@ 0x42
 8015ab2:	2140      	movs	r1, #64	@ 0x40
 8015ab4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2200      	movs	r2, #0
 8015aba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ac0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	222c      	movs	r2, #44	@ 0x2c
 8015ac6:	18ba      	adds	r2, r7, r2
 8015ac8:	8812      	ldrh	r2, [r2, #0]
 8015aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	2200      	movs	r2, #0
 8015ad0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8015ad2:	1dbb      	adds	r3, r7, #6
 8015ad4:	881c      	ldrh	r4, [r3, #0]
 8015ad6:	2308      	movs	r3, #8
 8015ad8:	18fb      	adds	r3, r7, r3
 8015ada:	881a      	ldrh	r2, [r3, #0]
 8015adc:	230a      	movs	r3, #10
 8015ade:	18fb      	adds	r3, r7, r3
 8015ae0:	8819      	ldrh	r1, [r3, #0]
 8015ae2:	68f8      	ldr	r0, [r7, #12]
 8015ae4:	697b      	ldr	r3, [r7, #20]
 8015ae6:	9301      	str	r3, [sp, #4]
 8015ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aea:	9300      	str	r3, [sp, #0]
 8015aec:	0023      	movs	r3, r4
 8015aee:	f001 f829 	bl	8016b44 <I2C_RequestMemoryRead>
 8015af2:	1e03      	subs	r3, r0, #0
 8015af4:	d005      	beq.n	8015b02 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	2240      	movs	r2, #64	@ 0x40
 8015afa:	2100      	movs	r1, #0
 8015afc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015afe:	2301      	movs	r3, #1
 8015b00:	e0b9      	b.n	8015c76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b06:	b29b      	uxth	r3, r3
 8015b08:	2bff      	cmp	r3, #255	@ 0xff
 8015b0a:	d911      	bls.n	8015b30 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	22ff      	movs	r2, #255	@ 0xff
 8015b10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b16:	b2da      	uxtb	r2, r3
 8015b18:	2380      	movs	r3, #128	@ 0x80
 8015b1a:	045c      	lsls	r4, r3, #17
 8015b1c:	230a      	movs	r3, #10
 8015b1e:	18fb      	adds	r3, r7, r3
 8015b20:	8819      	ldrh	r1, [r3, #0]
 8015b22:	68f8      	ldr	r0, [r7, #12]
 8015b24:	4b56      	ldr	r3, [pc, #344]	@ (8015c80 <HAL_I2C_Mem_Read+0x260>)
 8015b26:	9300      	str	r3, [sp, #0]
 8015b28:	0023      	movs	r3, r4
 8015b2a:	f002 f881 	bl	8017c30 <I2C_TransferConfig>
 8015b2e:	e012      	b.n	8015b56 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b34:	b29a      	uxth	r2, r3
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b3e:	b2da      	uxtb	r2, r3
 8015b40:	2380      	movs	r3, #128	@ 0x80
 8015b42:	049c      	lsls	r4, r3, #18
 8015b44:	230a      	movs	r3, #10
 8015b46:	18fb      	adds	r3, r7, r3
 8015b48:	8819      	ldrh	r1, [r3, #0]
 8015b4a:	68f8      	ldr	r0, [r7, #12]
 8015b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8015c80 <HAL_I2C_Mem_Read+0x260>)
 8015b4e:	9300      	str	r3, [sp, #0]
 8015b50:	0023      	movs	r3, r4
 8015b52:	f002 f86d 	bl	8017c30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8015b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b58:	68f8      	ldr	r0, [r7, #12]
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	9300      	str	r3, [sp, #0]
 8015b5e:	0013      	movs	r3, r2
 8015b60:	2200      	movs	r2, #0
 8015b62:	2104      	movs	r1, #4
 8015b64:	f001 fe12 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8015b68:	1e03      	subs	r3, r0, #0
 8015b6a:	d001      	beq.n	8015b70 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	e082      	b.n	8015c76 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b7a:	b2d2      	uxtb	r2, r2
 8015b7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b82:	1c5a      	adds	r2, r3, #1
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b8c:	3b01      	subs	r3, #1
 8015b8e:	b29a      	uxth	r2, r3
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b98:	b29b      	uxth	r3, r3
 8015b9a:	3b01      	subs	r3, #1
 8015b9c:	b29a      	uxth	r2, r3
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ba6:	b29b      	uxth	r3, r3
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d03a      	beq.n	8015c22 <HAL_I2C_Mem_Read+0x202>
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d136      	bne.n	8015c22 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015bb6:	68f8      	ldr	r0, [r7, #12]
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	9300      	str	r3, [sp, #0]
 8015bbc:	0013      	movs	r3, r2
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	2180      	movs	r1, #128	@ 0x80
 8015bc2:	f001 fde3 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8015bc6:	1e03      	subs	r3, r0, #0
 8015bc8:	d001      	beq.n	8015bce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8015bca:	2301      	movs	r3, #1
 8015bcc:	e053      	b.n	8015c76 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015bd2:	b29b      	uxth	r3, r3
 8015bd4:	2bff      	cmp	r3, #255	@ 0xff
 8015bd6:	d911      	bls.n	8015bfc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	22ff      	movs	r2, #255	@ 0xff
 8015bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015be2:	b2da      	uxtb	r2, r3
 8015be4:	2380      	movs	r3, #128	@ 0x80
 8015be6:	045c      	lsls	r4, r3, #17
 8015be8:	230a      	movs	r3, #10
 8015bea:	18fb      	adds	r3, r7, r3
 8015bec:	8819      	ldrh	r1, [r3, #0]
 8015bee:	68f8      	ldr	r0, [r7, #12]
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	9300      	str	r3, [sp, #0]
 8015bf4:	0023      	movs	r3, r4
 8015bf6:	f002 f81b 	bl	8017c30 <I2C_TransferConfig>
 8015bfa:	e012      	b.n	8015c22 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c00:	b29a      	uxth	r2, r3
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c0a:	b2da      	uxtb	r2, r3
 8015c0c:	2380      	movs	r3, #128	@ 0x80
 8015c0e:	049c      	lsls	r4, r3, #18
 8015c10:	230a      	movs	r3, #10
 8015c12:	18fb      	adds	r3, r7, r3
 8015c14:	8819      	ldrh	r1, [r3, #0]
 8015c16:	68f8      	ldr	r0, [r7, #12]
 8015c18:	2300      	movs	r3, #0
 8015c1a:	9300      	str	r3, [sp, #0]
 8015c1c:	0023      	movs	r3, r4
 8015c1e:	f002 f807 	bl	8017c30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d194      	bne.n	8015b56 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015c2c:	697a      	ldr	r2, [r7, #20]
 8015c2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	0018      	movs	r0, r3
 8015c34:	f001 fe3e 	bl	80178b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015c38:	1e03      	subs	r3, r0, #0
 8015c3a:	d001      	beq.n	8015c40 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	e01a      	b.n	8015c76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	2220      	movs	r2, #32
 8015c46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	685a      	ldr	r2, [r3, #4]
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	490c      	ldr	r1, [pc, #48]	@ (8015c84 <HAL_I2C_Mem_Read+0x264>)
 8015c54:	400a      	ands	r2, r1
 8015c56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	2241      	movs	r2, #65	@ 0x41
 8015c5c:	2120      	movs	r1, #32
 8015c5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	2242      	movs	r2, #66	@ 0x42
 8015c64:	2100      	movs	r1, #0
 8015c66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	2240      	movs	r2, #64	@ 0x40
 8015c6c:	2100      	movs	r1, #0
 8015c6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015c70:	2300      	movs	r3, #0
 8015c72:	e000      	b.n	8015c76 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8015c74:	2302      	movs	r3, #2
  }
}
 8015c76:	0018      	movs	r0, r3
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	b007      	add	sp, #28
 8015c7c:	bd90      	pop	{r4, r7, pc}
 8015c7e:	46c0      	nop			@ (mov r8, r8)
 8015c80:	80002400 	.word	0x80002400
 8015c84:	fe00e800 	.word	0xfe00e800

08015c88 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8015c88:	b5b0      	push	{r4, r5, r7, lr}
 8015c8a:	b088      	sub	sp, #32
 8015c8c:	af02      	add	r7, sp, #8
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	000c      	movs	r4, r1
 8015c92:	0010      	movs	r0, r2
 8015c94:	0019      	movs	r1, r3
 8015c96:	230a      	movs	r3, #10
 8015c98:	18fb      	adds	r3, r7, r3
 8015c9a:	1c22      	adds	r2, r4, #0
 8015c9c:	801a      	strh	r2, [r3, #0]
 8015c9e:	2308      	movs	r3, #8
 8015ca0:	18fb      	adds	r3, r7, r3
 8015ca2:	1c02      	adds	r2, r0, #0
 8015ca4:	801a      	strh	r2, [r3, #0]
 8015ca6:	1dbb      	adds	r3, r7, #6
 8015ca8:	1c0a      	adds	r2, r1, #0
 8015caa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	2241      	movs	r2, #65	@ 0x41
 8015cb0:	5c9b      	ldrb	r3, [r3, r2]
 8015cb2:	b2db      	uxtb	r3, r3
 8015cb4:	2b20      	cmp	r3, #32
 8015cb6:	d000      	beq.n	8015cba <HAL_I2C_Mem_Write_DMA+0x32>
 8015cb8:	e0d8      	b.n	8015e6c <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8015cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d004      	beq.n	8015cca <HAL_I2C_Mem_Write_DMA+0x42>
 8015cc0:	232c      	movs	r3, #44	@ 0x2c
 8015cc2:	18fb      	adds	r3, r7, r3
 8015cc4:	881b      	ldrh	r3, [r3, #0]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d105      	bne.n	8015cd6 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	2280      	movs	r2, #128	@ 0x80
 8015cce:	0092      	lsls	r2, r2, #2
 8015cd0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	e0cb      	b.n	8015e6e <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	699a      	ldr	r2, [r3, #24]
 8015cdc:	2380      	movs	r3, #128	@ 0x80
 8015cde:	021b      	lsls	r3, r3, #8
 8015ce0:	401a      	ands	r2, r3
 8015ce2:	2380      	movs	r3, #128	@ 0x80
 8015ce4:	021b      	lsls	r3, r3, #8
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d101      	bne.n	8015cee <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8015cea:	2302      	movs	r3, #2
 8015cec:	e0bf      	b.n	8015e6e <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	2240      	movs	r2, #64	@ 0x40
 8015cf2:	5c9b      	ldrb	r3, [r3, r2]
 8015cf4:	2b01      	cmp	r3, #1
 8015cf6:	d101      	bne.n	8015cfc <HAL_I2C_Mem_Write_DMA+0x74>
 8015cf8:	2302      	movs	r3, #2
 8015cfa:	e0b8      	b.n	8015e6e <HAL_I2C_Mem_Write_DMA+0x1e6>
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2240      	movs	r2, #64	@ 0x40
 8015d00:	2101      	movs	r1, #1
 8015d02:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	2241      	movs	r2, #65	@ 0x41
 8015d08:	2121      	movs	r1, #33	@ 0x21
 8015d0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	2242      	movs	r2, #66	@ 0x42
 8015d10:	2140      	movs	r1, #64	@ 0x40
 8015d12:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	2200      	movs	r2, #0
 8015d18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	222c      	movs	r2, #44	@ 0x2c
 8015d24:	18ba      	adds	r2, r7, r2
 8015d26:	8812      	ldrh	r2, [r2, #0]
 8015d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	4a52      	ldr	r2, [pc, #328]	@ (8015e78 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8015d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	4a52      	ldr	r2, [pc, #328]	@ (8015e7c <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8015d34:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8015d36:	230a      	movs	r3, #10
 8015d38:	18fb      	adds	r3, r7, r3
 8015d3a:	881a      	ldrh	r2, [r3, #0]
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d44:	b29b      	uxth	r3, r3
 8015d46:	2bff      	cmp	r3, #255	@ 0xff
 8015d48:	d903      	bls.n	8015d52 <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	22ff      	movs	r2, #255	@ 0xff
 8015d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015d50:	e004      	b.n	8015d5c <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015d56:	b29a      	uxth	r2, r3
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8015d5c:	1dbb      	adds	r3, r7, #6
 8015d5e:	881b      	ldrh	r3, [r3, #0]
 8015d60:	2b01      	cmp	r3, #1
 8015d62:	d10b      	bne.n	8015d7c <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015d64:	2308      	movs	r3, #8
 8015d66:	18fb      	adds	r3, r7, r3
 8015d68:	881b      	ldrh	r3, [r3, #0]
 8015d6a:	b2da      	uxtb	r2, r3
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	2201      	movs	r2, #1
 8015d76:	4252      	negs	r2, r2
 8015d78:	651a      	str	r2, [r3, #80]	@ 0x50
 8015d7a:	e00e      	b.n	8015d9a <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8015d7c:	2108      	movs	r1, #8
 8015d7e:	187b      	adds	r3, r7, r1
 8015d80:	881b      	ldrh	r3, [r3, #0]
 8015d82:	0a1b      	lsrs	r3, r3, #8
 8015d84:	b29b      	uxth	r3, r3
 8015d86:	b2da      	uxtb	r2, r3
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8015d8e:	187b      	adds	r3, r7, r1
 8015d90:	881b      	ldrh	r3, [r3, #0]
 8015d92:	b2db      	uxtb	r3, r3
 8015d94:	001a      	movs	r2, r3
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d023      	beq.n	8015dea <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015da6:	4a36      	ldr	r2, [pc, #216]	@ (8015e80 <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8015da8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dae:	4a35      	ldr	r2, [pc, #212]	@ (8015e84 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8015db0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015db6:	2200      	movs	r2, #0
 8015db8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	3328      	adds	r3, #40	@ 0x28
 8015dce:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015dd4:	2517      	movs	r5, #23
 8015dd6:	197c      	adds	r4, r7, r5
 8015dd8:	f7fe fbf8 	bl	80145cc <HAL_DMA_Start_IT>
 8015ddc:	0003      	movs	r3, r0
 8015dde:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8015de0:	197b      	adds	r3, r7, r5
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d12d      	bne.n	8015e44 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8015de8:	e013      	b.n	8015e12 <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	2241      	movs	r2, #65	@ 0x41
 8015dee:	2120      	movs	r1, #32
 8015df0:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	2242      	movs	r2, #66	@ 0x42
 8015df6:	2100      	movs	r1, #0
 8015df8:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015dfe:	2280      	movs	r2, #128	@ 0x80
 8015e00:	431a      	orrs	r2, r3
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	2240      	movs	r2, #64	@ 0x40
 8015e0a:	2100      	movs	r1, #0
 8015e0c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015e0e:	2301      	movs	r3, #1
 8015e10:	e02d      	b.n	8015e6e <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8015e12:	1dbb      	adds	r3, r7, #6
 8015e14:	881b      	ldrh	r3, [r3, #0]
 8015e16:	b2da      	uxtb	r2, r3
 8015e18:	2380      	movs	r3, #128	@ 0x80
 8015e1a:	045c      	lsls	r4, r3, #17
 8015e1c:	230a      	movs	r3, #10
 8015e1e:	18fb      	adds	r3, r7, r3
 8015e20:	8819      	ldrh	r1, [r3, #0]
 8015e22:	68f8      	ldr	r0, [r7, #12]
 8015e24:	4b18      	ldr	r3, [pc, #96]	@ (8015e88 <HAL_I2C_Mem_Write_DMA+0x200>)
 8015e26:	9300      	str	r3, [sp, #0]
 8015e28:	0023      	movs	r3, r4
 8015e2a:	f001 ff01 	bl	8017c30 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	2240      	movs	r2, #64	@ 0x40
 8015e32:	2100      	movs	r1, #0
 8015e34:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	2101      	movs	r1, #1
 8015e3a:	0018      	movs	r0, r3
 8015e3c:	f001 ff32 	bl	8017ca4 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8015e40:	2300      	movs	r3, #0
 8015e42:	e014      	b.n	8015e6e <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	2241      	movs	r2, #65	@ 0x41
 8015e48:	2120      	movs	r1, #32
 8015e4a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	2242      	movs	r2, #66	@ 0x42
 8015e50:	2100      	movs	r1, #0
 8015e52:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e58:	2210      	movs	r2, #16
 8015e5a:	431a      	orrs	r2, r3
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	2240      	movs	r2, #64	@ 0x40
 8015e64:	2100      	movs	r1, #0
 8015e66:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015e68:	2301      	movs	r3, #1
 8015e6a:	e000      	b.n	8015e6e <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8015e6c:	2302      	movs	r3, #2
  }
}
 8015e6e:	0018      	movs	r0, r3
 8015e70:	46bd      	mov	sp, r7
 8015e72:	b006      	add	sp, #24
 8015e74:	bdb0      	pop	{r4, r5, r7, pc}
 8015e76:	46c0      	nop			@ (mov r8, r8)
 8015e78:	ffff0000 	.word	0xffff0000
 8015e7c:	080166f9 	.word	0x080166f9
 8015e80:	080175dd 	.word	0x080175dd
 8015e84:	0801771d 	.word	0x0801771d
 8015e88:	80002000 	.word	0x80002000

08015e8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015e8c:	b580      	push	{r7, lr}
 8015e8e:	b084      	sub	sp, #16
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	699b      	ldr	r3, [r3, #24]
 8015e9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d005      	beq.n	8015eb8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015eb0:	68ba      	ldr	r2, [r7, #8]
 8015eb2:	68f9      	ldr	r1, [r7, #12]
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	4798      	blx	r3
  }
}
 8015eb8:	46c0      	nop			@ (mov r8, r8)
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	b004      	add	sp, #16
 8015ebe:	bd80      	pop	{r7, pc}

08015ec0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b086      	sub	sp, #24
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	699b      	ldr	r3, [r3, #24]
 8015ece:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	0a1b      	lsrs	r3, r3, #8
 8015edc:	001a      	movs	r2, r3
 8015ede:	2301      	movs	r3, #1
 8015ee0:	4013      	ands	r3, r2
 8015ee2:	d010      	beq.n	8015f06 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015ee4:	693b      	ldr	r3, [r7, #16]
 8015ee6:	09db      	lsrs	r3, r3, #7
 8015ee8:	001a      	movs	r2, r3
 8015eea:	2301      	movs	r3, #1
 8015eec:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8015eee:	d00a      	beq.n	8015f06 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ef4:	2201      	movs	r2, #1
 8015ef6:	431a      	orrs	r2, r3
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	2280      	movs	r2, #128	@ 0x80
 8015f02:	0052      	lsls	r2, r2, #1
 8015f04:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	0a9b      	lsrs	r3, r3, #10
 8015f0a:	001a      	movs	r2, r3
 8015f0c:	2301      	movs	r3, #1
 8015f0e:	4013      	ands	r3, r2
 8015f10:	d010      	beq.n	8015f34 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	09db      	lsrs	r3, r3, #7
 8015f16:	001a      	movs	r2, r3
 8015f18:	2301      	movs	r3, #1
 8015f1a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015f1c:	d00a      	beq.n	8015f34 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f22:	2208      	movs	r2, #8
 8015f24:	431a      	orrs	r2, r3
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	2280      	movs	r2, #128	@ 0x80
 8015f30:	00d2      	lsls	r2, r2, #3
 8015f32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	0a5b      	lsrs	r3, r3, #9
 8015f38:	001a      	movs	r2, r3
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	4013      	ands	r3, r2
 8015f3e:	d010      	beq.n	8015f62 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015f40:	693b      	ldr	r3, [r7, #16]
 8015f42:	09db      	lsrs	r3, r3, #7
 8015f44:	001a      	movs	r2, r3
 8015f46:	2301      	movs	r3, #1
 8015f48:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8015f4a:	d00a      	beq.n	8015f62 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f50:	2202      	movs	r2, #2
 8015f52:	431a      	orrs	r2, r3
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	2280      	movs	r2, #128	@ 0x80
 8015f5e:	0092      	lsls	r2, r2, #2
 8015f60:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f66:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	220b      	movs	r2, #11
 8015f6c:	4013      	ands	r3, r2
 8015f6e:	d005      	beq.n	8015f7c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8015f70:	68fa      	ldr	r2, [r7, #12]
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	0011      	movs	r1, r2
 8015f76:	0018      	movs	r0, r3
 8015f78:	f001 f9e2 	bl	8017340 <I2C_ITError>
  }
}
 8015f7c:	46c0      	nop			@ (mov r8, r8)
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	b006      	add	sp, #24
 8015f82:	bd80      	pop	{r7, pc}

08015f84 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b082      	sub	sp, #8
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8015f8c:	46c0      	nop			@ (mov r8, r8)
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	b002      	add	sp, #8
 8015f92:	bd80      	pop	{r7, pc}

08015f94 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015f94:	b580      	push	{r7, lr}
 8015f96:	b082      	sub	sp, #8
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8015f9c:	46c0      	nop			@ (mov r8, r8)
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	b002      	add	sp, #8
 8015fa2:	bd80      	pop	{r7, pc}

08015fa4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b082      	sub	sp, #8
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8015fac:	46c0      	nop			@ (mov r8, r8)
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	b002      	add	sp, #8
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b082      	sub	sp, #8
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8015fbc:	46c0      	nop			@ (mov r8, r8)
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	b002      	add	sp, #8
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b082      	sub	sp, #8
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
 8015fcc:	0008      	movs	r0, r1
 8015fce:	0011      	movs	r1, r2
 8015fd0:	1cfb      	adds	r3, r7, #3
 8015fd2:	1c02      	adds	r2, r0, #0
 8015fd4:	701a      	strb	r2, [r3, #0]
 8015fd6:	003b      	movs	r3, r7
 8015fd8:	1c0a      	adds	r2, r1, #0
 8015fda:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8015fdc:	46c0      	nop			@ (mov r8, r8)
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	b002      	add	sp, #8
 8015fe2:	bd80      	pop	{r7, pc}

08015fe4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b082      	sub	sp, #8
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8015fec:	46c0      	nop			@ (mov r8, r8)
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	b002      	add	sp, #8
 8015ff2:	bd80      	pop	{r7, pc}

08015ff4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b082      	sub	sp, #8
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8015ffc:	46c0      	nop			@ (mov r8, r8)
 8015ffe:	46bd      	mov	sp, r7
 8016000:	b002      	add	sp, #8
 8016002:	bd80      	pop	{r7, pc}

08016004 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b082      	sub	sp, #8
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801600c:	46c0      	nop			@ (mov r8, r8)
 801600e:	46bd      	mov	sp, r7
 8016010:	b002      	add	sp, #8
 8016012:	bd80      	pop	{r7, pc}

08016014 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b082      	sub	sp, #8
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801601c:	46c0      	nop			@ (mov r8, r8)
 801601e:	46bd      	mov	sp, r7
 8016020:	b002      	add	sp, #8
 8016022:	bd80      	pop	{r7, pc}

08016024 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b082      	sub	sp, #8
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801602c:	46c0      	nop			@ (mov r8, r8)
 801602e:	46bd      	mov	sp, r7
 8016030:	b002      	add	sp, #8
 8016032:	bd80      	pop	{r7, pc}

08016034 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016034:	b590      	push	{r4, r7, lr}
 8016036:	b089      	sub	sp, #36	@ 0x24
 8016038:	af02      	add	r7, sp, #8
 801603a:	60f8      	str	r0, [r7, #12]
 801603c:	60b9      	str	r1, [r7, #8]
 801603e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	2240      	movs	r2, #64	@ 0x40
 8016048:	5c9b      	ldrb	r3, [r3, r2]
 801604a:	2b01      	cmp	r3, #1
 801604c:	d101      	bne.n	8016052 <I2C_Master_ISR_IT+0x1e>
 801604e:	2302      	movs	r3, #2
 8016050:	e12b      	b.n	80162aa <I2C_Master_ISR_IT+0x276>
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	2240      	movs	r2, #64	@ 0x40
 8016056:	2101      	movs	r1, #1
 8016058:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	091b      	lsrs	r3, r3, #4
 801605e:	001a      	movs	r2, r3
 8016060:	2301      	movs	r3, #1
 8016062:	4013      	ands	r3, r2
 8016064:	d014      	beq.n	8016090 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	091b      	lsrs	r3, r3, #4
 801606a:	001a      	movs	r2, r3
 801606c:	2301      	movs	r3, #1
 801606e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016070:	d00e      	beq.n	8016090 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	2210      	movs	r2, #16
 8016078:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801607e:	2204      	movs	r2, #4
 8016080:	431a      	orrs	r2, r3
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	0018      	movs	r0, r3
 801608a:	f001 fa84 	bl	8017596 <I2C_Flush_TXDR>
 801608e:	e0f5      	b.n	801627c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016090:	697b      	ldr	r3, [r7, #20]
 8016092:	089b      	lsrs	r3, r3, #2
 8016094:	001a      	movs	r2, r3
 8016096:	2301      	movs	r3, #1
 8016098:	4013      	ands	r3, r2
 801609a:	d023      	beq.n	80160e4 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	089b      	lsrs	r3, r3, #2
 80160a0:	001a      	movs	r2, r3
 80160a2:	2301      	movs	r3, #1
 80160a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80160a6:	d01d      	beq.n	80160e4 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80160a8:	697b      	ldr	r3, [r7, #20]
 80160aa:	2204      	movs	r2, #4
 80160ac:	4393      	bics	r3, r2
 80160ae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ba:	b2d2      	uxtb	r2, r2
 80160bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160c2:	1c5a      	adds	r2, r3, #1
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80160cc:	3b01      	subs	r3, #1
 80160ce:	b29a      	uxth	r2, r3
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80160d8:	b29b      	uxth	r3, r3
 80160da:	3b01      	subs	r3, #1
 80160dc:	b29a      	uxth	r2, r3
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80160e2:	e0cb      	b.n	801627c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80160e4:	697b      	ldr	r3, [r7, #20]
 80160e6:	085b      	lsrs	r3, r3, #1
 80160e8:	001a      	movs	r2, r3
 80160ea:	2301      	movs	r3, #1
 80160ec:	4013      	ands	r3, r2
 80160ee:	d01e      	beq.n	801612e <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	085b      	lsrs	r3, r3, #1
 80160f4:	001a      	movs	r2, r3
 80160f6:	2301      	movs	r3, #1
 80160f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80160fa:	d018      	beq.n	801612e <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016100:	781a      	ldrb	r2, [r3, #0]
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801610c:	1c5a      	adds	r2, r3, #1
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016116:	3b01      	subs	r3, #1
 8016118:	b29a      	uxth	r2, r3
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016122:	b29b      	uxth	r3, r3
 8016124:	3b01      	subs	r3, #1
 8016126:	b29a      	uxth	r2, r3
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801612c:	e0a6      	b.n	801627c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801612e:	697b      	ldr	r3, [r7, #20]
 8016130:	09db      	lsrs	r3, r3, #7
 8016132:	001a      	movs	r2, r3
 8016134:	2301      	movs	r3, #1
 8016136:	4013      	ands	r3, r2
 8016138:	d100      	bne.n	801613c <I2C_Master_ISR_IT+0x108>
 801613a:	e06b      	b.n	8016214 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	099b      	lsrs	r3, r3, #6
 8016140:	001a      	movs	r2, r3
 8016142:	2301      	movs	r3, #1
 8016144:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8016146:	d065      	beq.n	8016214 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801614c:	b29b      	uxth	r3, r3
 801614e:	2b00      	cmp	r3, #0
 8016150:	d04a      	beq.n	80161e8 <I2C_Master_ISR_IT+0x1b4>
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016156:	2b00      	cmp	r3, #0
 8016158:	d146      	bne.n	80161e8 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	685b      	ldr	r3, [r3, #4]
 8016160:	b29a      	uxth	r2, r3
 8016162:	2112      	movs	r1, #18
 8016164:	187b      	adds	r3, r7, r1
 8016166:	0592      	lsls	r2, r2, #22
 8016168:	0d92      	lsrs	r2, r2, #22
 801616a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016170:	b29b      	uxth	r3, r3
 8016172:	2bff      	cmp	r3, #255	@ 0xff
 8016174:	d910      	bls.n	8016198 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	22ff      	movs	r2, #255	@ 0xff
 801617a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016180:	b2da      	uxtb	r2, r3
 8016182:	2380      	movs	r3, #128	@ 0x80
 8016184:	045c      	lsls	r4, r3, #17
 8016186:	187b      	adds	r3, r7, r1
 8016188:	8819      	ldrh	r1, [r3, #0]
 801618a:	68f8      	ldr	r0, [r7, #12]
 801618c:	2300      	movs	r3, #0
 801618e:	9300      	str	r3, [sp, #0]
 8016190:	0023      	movs	r3, r4
 8016192:	f001 fd4d 	bl	8017c30 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016196:	e03c      	b.n	8016212 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801619c:	b29a      	uxth	r2, r3
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161a6:	4a43      	ldr	r2, [pc, #268]	@ (80162b4 <I2C_Master_ISR_IT+0x280>)
 80161a8:	4293      	cmp	r3, r2
 80161aa:	d00e      	beq.n	80161ca <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161b0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80161b6:	2312      	movs	r3, #18
 80161b8:	18fb      	adds	r3, r7, r3
 80161ba:	8819      	ldrh	r1, [r3, #0]
 80161bc:	68f8      	ldr	r0, [r7, #12]
 80161be:	2300      	movs	r3, #0
 80161c0:	9300      	str	r3, [sp, #0]
 80161c2:	0023      	movs	r3, r4
 80161c4:	f001 fd34 	bl	8017c30 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80161c8:	e023      	b.n	8016212 <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161ce:	b2da      	uxtb	r2, r3
 80161d0:	2380      	movs	r3, #128	@ 0x80
 80161d2:	049c      	lsls	r4, r3, #18
 80161d4:	2312      	movs	r3, #18
 80161d6:	18fb      	adds	r3, r7, r3
 80161d8:	8819      	ldrh	r1, [r3, #0]
 80161da:	68f8      	ldr	r0, [r7, #12]
 80161dc:	2300      	movs	r3, #0
 80161de:	9300      	str	r3, [sp, #0]
 80161e0:	0023      	movs	r3, r4
 80161e2:	f001 fd25 	bl	8017c30 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80161e6:	e014      	b.n	8016212 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	685a      	ldr	r2, [r3, #4]
 80161ee:	2380      	movs	r3, #128	@ 0x80
 80161f0:	049b      	lsls	r3, r3, #18
 80161f2:	401a      	ands	r2, r3
 80161f4:	2380      	movs	r3, #128	@ 0x80
 80161f6:	049b      	lsls	r3, r3, #18
 80161f8:	429a      	cmp	r2, r3
 80161fa:	d004      	beq.n	8016206 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	0018      	movs	r0, r3
 8016200:	f000 fda6 	bl	8016d50 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016204:	e03a      	b.n	801627c <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	2140      	movs	r1, #64	@ 0x40
 801620a:	0018      	movs	r0, r3
 801620c:	f001 f898 	bl	8017340 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016210:	e034      	b.n	801627c <I2C_Master_ISR_IT+0x248>
 8016212:	e033      	b.n	801627c <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	099b      	lsrs	r3, r3, #6
 8016218:	001a      	movs	r2, r3
 801621a:	2301      	movs	r3, #1
 801621c:	4013      	ands	r3, r2
 801621e:	d02d      	beq.n	801627c <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	099b      	lsrs	r3, r3, #6
 8016224:	001a      	movs	r2, r3
 8016226:	2301      	movs	r3, #1
 8016228:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 801622a:	d027      	beq.n	801627c <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016230:	b29b      	uxth	r3, r3
 8016232:	2b00      	cmp	r3, #0
 8016234:	d11d      	bne.n	8016272 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	685a      	ldr	r2, [r3, #4]
 801623c:	2380      	movs	r3, #128	@ 0x80
 801623e:	049b      	lsls	r3, r3, #18
 8016240:	401a      	ands	r2, r3
 8016242:	2380      	movs	r3, #128	@ 0x80
 8016244:	049b      	lsls	r3, r3, #18
 8016246:	429a      	cmp	r2, r3
 8016248:	d018      	beq.n	801627c <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801624e:	4a19      	ldr	r2, [pc, #100]	@ (80162b4 <I2C_Master_ISR_IT+0x280>)
 8016250:	4293      	cmp	r3, r2
 8016252:	d109      	bne.n	8016268 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	685a      	ldr	r2, [r3, #4]
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	2180      	movs	r1, #128	@ 0x80
 8016260:	01c9      	lsls	r1, r1, #7
 8016262:	430a      	orrs	r2, r1
 8016264:	605a      	str	r2, [r3, #4]
 8016266:	e009      	b.n	801627c <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	0018      	movs	r0, r3
 801626c:	f000 fd70 	bl	8016d50 <I2C_ITMasterSeqCplt>
 8016270:	e004      	b.n	801627c <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	2140      	movs	r1, #64	@ 0x40
 8016276:	0018      	movs	r0, r3
 8016278:	f001 f862 	bl	8017340 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 801627c:	697b      	ldr	r3, [r7, #20]
 801627e:	095b      	lsrs	r3, r3, #5
 8016280:	001a      	movs	r2, r3
 8016282:	2301      	movs	r3, #1
 8016284:	4013      	ands	r3, r2
 8016286:	d00b      	beq.n	80162a0 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	095b      	lsrs	r3, r3, #5
 801628c:	001a      	movs	r2, r3
 801628e:	2301      	movs	r3, #1
 8016290:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016292:	d005      	beq.n	80162a0 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8016294:	697a      	ldr	r2, [r7, #20]
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	0011      	movs	r1, r2
 801629a:	0018      	movs	r0, r3
 801629c:	f000 fe00 	bl	8016ea0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	2240      	movs	r2, #64	@ 0x40
 80162a4:	2100      	movs	r1, #0
 80162a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80162a8:	2300      	movs	r3, #0
}
 80162aa:	0018      	movs	r0, r3
 80162ac:	46bd      	mov	sp, r7
 80162ae:	b007      	add	sp, #28
 80162b0:	bd90      	pop	{r4, r7, pc}
 80162b2:	46c0      	nop			@ (mov r8, r8)
 80162b4:	ffff0000 	.word	0xffff0000

080162b8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b086      	sub	sp, #24
 80162bc:	af00      	add	r7, sp, #0
 80162be:	60f8      	str	r0, [r7, #12]
 80162c0:	60b9      	str	r1, [r7, #8]
 80162c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	2240      	movs	r2, #64	@ 0x40
 80162d2:	5c9b      	ldrb	r3, [r3, r2]
 80162d4:	2b01      	cmp	r3, #1
 80162d6:	d101      	bne.n	80162dc <I2C_Slave_ISR_IT+0x24>
 80162d8:	2302      	movs	r3, #2
 80162da:	e0fa      	b.n	80164d2 <I2C_Slave_ISR_IT+0x21a>
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	2240      	movs	r2, #64	@ 0x40
 80162e0:	2101      	movs	r1, #1
 80162e2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80162e4:	693b      	ldr	r3, [r7, #16]
 80162e6:	095b      	lsrs	r3, r3, #5
 80162e8:	001a      	movs	r2, r3
 80162ea:	2301      	movs	r3, #1
 80162ec:	4013      	ands	r3, r2
 80162ee:	d00b      	beq.n	8016308 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	095b      	lsrs	r3, r3, #5
 80162f4:	001a      	movs	r2, r3
 80162f6:	2301      	movs	r3, #1
 80162f8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80162fa:	d005      	beq.n	8016308 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80162fc:	693a      	ldr	r2, [r7, #16]
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	0011      	movs	r1, r2
 8016302:	0018      	movs	r0, r3
 8016304:	f000 fe9e 	bl	8017044 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	091b      	lsrs	r3, r3, #4
 801630c:	001a      	movs	r2, r3
 801630e:	2301      	movs	r3, #1
 8016310:	4013      	ands	r3, r2
 8016312:	d054      	beq.n	80163be <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	091b      	lsrs	r3, r3, #4
 8016318:	001a      	movs	r2, r3
 801631a:	2301      	movs	r3, #1
 801631c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801631e:	d04e      	beq.n	80163be <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016324:	b29b      	uxth	r3, r3
 8016326:	2b00      	cmp	r3, #0
 8016328:	d12d      	bne.n	8016386 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	2241      	movs	r2, #65	@ 0x41
 801632e:	5c9b      	ldrb	r3, [r3, r2]
 8016330:	b2db      	uxtb	r3, r3
 8016332:	2b28      	cmp	r3, #40	@ 0x28
 8016334:	d10b      	bne.n	801634e <I2C_Slave_ISR_IT+0x96>
 8016336:	697a      	ldr	r2, [r7, #20]
 8016338:	2380      	movs	r3, #128	@ 0x80
 801633a:	049b      	lsls	r3, r3, #18
 801633c:	429a      	cmp	r2, r3
 801633e:	d106      	bne.n	801634e <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8016340:	693a      	ldr	r2, [r7, #16]
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	0011      	movs	r1, r2
 8016346:	0018      	movs	r0, r3
 8016348:	f000 ffa0 	bl	801728c <I2C_ITListenCplt>
 801634c:	e036      	b.n	80163bc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	2241      	movs	r2, #65	@ 0x41
 8016352:	5c9b      	ldrb	r3, [r3, r2]
 8016354:	b2db      	uxtb	r3, r3
 8016356:	2b29      	cmp	r3, #41	@ 0x29
 8016358:	d110      	bne.n	801637c <I2C_Slave_ISR_IT+0xc4>
 801635a:	697b      	ldr	r3, [r7, #20]
 801635c:	4a5f      	ldr	r2, [pc, #380]	@ (80164dc <I2C_Slave_ISR_IT+0x224>)
 801635e:	4293      	cmp	r3, r2
 8016360:	d00c      	beq.n	801637c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	2210      	movs	r2, #16
 8016368:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	0018      	movs	r0, r3
 801636e:	f001 f912 	bl	8017596 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	0018      	movs	r0, r3
 8016376:	f000 fd2d 	bl	8016dd4 <I2C_ITSlaveSeqCplt>
 801637a:	e01f      	b.n	80163bc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	2210      	movs	r2, #16
 8016382:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8016384:	e09d      	b.n	80164c2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	2210      	movs	r2, #16
 801638c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016392:	2204      	movs	r2, #4
 8016394:	431a      	orrs	r2, r3
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801639a:	697b      	ldr	r3, [r7, #20]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d005      	beq.n	80163ac <I2C_Slave_ISR_IT+0xf4>
 80163a0:	697a      	ldr	r2, [r7, #20]
 80163a2:	2380      	movs	r3, #128	@ 0x80
 80163a4:	045b      	lsls	r3, r3, #17
 80163a6:	429a      	cmp	r2, r3
 80163a8:	d000      	beq.n	80163ac <I2C_Slave_ISR_IT+0xf4>
 80163aa:	e08a      	b.n	80164c2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	0011      	movs	r1, r2
 80163b4:	0018      	movs	r0, r3
 80163b6:	f000 ffc3 	bl	8017340 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80163ba:	e082      	b.n	80164c2 <I2C_Slave_ISR_IT+0x20a>
 80163bc:	e081      	b.n	80164c2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80163be:	693b      	ldr	r3, [r7, #16]
 80163c0:	089b      	lsrs	r3, r3, #2
 80163c2:	001a      	movs	r2, r3
 80163c4:	2301      	movs	r3, #1
 80163c6:	4013      	ands	r3, r2
 80163c8:	d031      	beq.n	801642e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	089b      	lsrs	r3, r3, #2
 80163ce:	001a      	movs	r2, r3
 80163d0:	2301      	movs	r3, #1
 80163d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80163d4:	d02b      	beq.n	801642e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163da:	b29b      	uxth	r3, r3
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d018      	beq.n	8016412 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163ea:	b2d2      	uxtb	r2, r2
 80163ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163f2:	1c5a      	adds	r2, r3, #1
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80163fc:	3b01      	subs	r3, #1
 80163fe:	b29a      	uxth	r2, r3
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016408:	b29b      	uxth	r3, r3
 801640a:	3b01      	subs	r3, #1
 801640c:	b29a      	uxth	r2, r3
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016416:	b29b      	uxth	r3, r3
 8016418:	2b00      	cmp	r3, #0
 801641a:	d154      	bne.n	80164c6 <I2C_Slave_ISR_IT+0x20e>
 801641c:	697b      	ldr	r3, [r7, #20]
 801641e:	4a2f      	ldr	r2, [pc, #188]	@ (80164dc <I2C_Slave_ISR_IT+0x224>)
 8016420:	4293      	cmp	r3, r2
 8016422:	d050      	beq.n	80164c6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	0018      	movs	r0, r3
 8016428:	f000 fcd4 	bl	8016dd4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 801642c:	e04b      	b.n	80164c6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801642e:	693b      	ldr	r3, [r7, #16]
 8016430:	08db      	lsrs	r3, r3, #3
 8016432:	001a      	movs	r2, r3
 8016434:	2301      	movs	r3, #1
 8016436:	4013      	ands	r3, r2
 8016438:	d00c      	beq.n	8016454 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	08db      	lsrs	r3, r3, #3
 801643e:	001a      	movs	r2, r3
 8016440:	2301      	movs	r3, #1
 8016442:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016444:	d006      	beq.n	8016454 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8016446:	693a      	ldr	r2, [r7, #16]
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	0011      	movs	r1, r2
 801644c:	0018      	movs	r0, r3
 801644e:	f000 fbdb 	bl	8016c08 <I2C_ITAddrCplt>
 8016452:	e039      	b.n	80164c8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016454:	693b      	ldr	r3, [r7, #16]
 8016456:	085b      	lsrs	r3, r3, #1
 8016458:	001a      	movs	r2, r3
 801645a:	2301      	movs	r3, #1
 801645c:	4013      	ands	r3, r2
 801645e:	d033      	beq.n	80164c8 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	085b      	lsrs	r3, r3, #1
 8016464:	001a      	movs	r2, r3
 8016466:	2301      	movs	r3, #1
 8016468:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 801646a:	d02d      	beq.n	80164c8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016470:	b29b      	uxth	r3, r3
 8016472:	2b00      	cmp	r3, #0
 8016474:	d018      	beq.n	80164a8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801647a:	781a      	ldrb	r2, [r3, #0]
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016486:	1c5a      	adds	r2, r3, #1
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016490:	b29b      	uxth	r3, r3
 8016492:	3b01      	subs	r3, #1
 8016494:	b29a      	uxth	r2, r3
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801649e:	3b01      	subs	r3, #1
 80164a0:	b29a      	uxth	r2, r3
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80164a6:	e00f      	b.n	80164c8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80164a8:	697a      	ldr	r2, [r7, #20]
 80164aa:	2380      	movs	r3, #128	@ 0x80
 80164ac:	045b      	lsls	r3, r3, #17
 80164ae:	429a      	cmp	r2, r3
 80164b0:	d002      	beq.n	80164b8 <I2C_Slave_ISR_IT+0x200>
 80164b2:	697b      	ldr	r3, [r7, #20]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d107      	bne.n	80164c8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	0018      	movs	r0, r3
 80164bc:	f000 fc8a 	bl	8016dd4 <I2C_ITSlaveSeqCplt>
 80164c0:	e002      	b.n	80164c8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80164c2:	46c0      	nop			@ (mov r8, r8)
 80164c4:	e000      	b.n	80164c8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80164c6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	2240      	movs	r2, #64	@ 0x40
 80164cc:	2100      	movs	r1, #0
 80164ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80164d0:	2300      	movs	r3, #0
}
 80164d2:	0018      	movs	r0, r3
 80164d4:	46bd      	mov	sp, r7
 80164d6:	b006      	add	sp, #24
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	46c0      	nop			@ (mov r8, r8)
 80164dc:	ffff0000 	.word	0xffff0000

080164e0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80164e0:	b590      	push	{r4, r7, lr}
 80164e2:	b089      	sub	sp, #36	@ 0x24
 80164e4:	af02      	add	r7, sp, #8
 80164e6:	60f8      	str	r0, [r7, #12]
 80164e8:	60b9      	str	r1, [r7, #8]
 80164ea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	2240      	movs	r2, #64	@ 0x40
 80164f0:	5c9b      	ldrb	r3, [r3, r2]
 80164f2:	2b01      	cmp	r3, #1
 80164f4:	d101      	bne.n	80164fa <I2C_Master_ISR_DMA+0x1a>
 80164f6:	2302      	movs	r3, #2
 80164f8:	e0f7      	b.n	80166ea <I2C_Master_ISR_DMA+0x20a>
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	2240      	movs	r2, #64	@ 0x40
 80164fe:	2101      	movs	r1, #1
 8016500:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	091b      	lsrs	r3, r3, #4
 8016506:	001a      	movs	r2, r3
 8016508:	2301      	movs	r3, #1
 801650a:	4013      	ands	r3, r2
 801650c:	d019      	beq.n	8016542 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	091b      	lsrs	r3, r3, #4
 8016512:	001a      	movs	r2, r3
 8016514:	2301      	movs	r3, #1
 8016516:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016518:	d013      	beq.n	8016542 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	2210      	movs	r2, #16
 8016520:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016526:	2204      	movs	r2, #4
 8016528:	431a      	orrs	r2, r3
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	2120      	movs	r1, #32
 8016532:	0018      	movs	r0, r3
 8016534:	f001 fbb6 	bl	8017ca4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	0018      	movs	r0, r3
 801653c:	f001 f82b 	bl	8017596 <I2C_Flush_TXDR>
 8016540:	e0ce      	b.n	80166e0 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8016542:	68bb      	ldr	r3, [r7, #8]
 8016544:	09db      	lsrs	r3, r3, #7
 8016546:	001a      	movs	r2, r3
 8016548:	2301      	movs	r3, #1
 801654a:	4013      	ands	r3, r2
 801654c:	d100      	bne.n	8016550 <I2C_Master_ISR_DMA+0x70>
 801654e:	e07e      	b.n	801664e <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	099b      	lsrs	r3, r3, #6
 8016554:	001a      	movs	r2, r3
 8016556:	2301      	movs	r3, #1
 8016558:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801655a:	d100      	bne.n	801655e <I2C_Master_ISR_DMA+0x7e>
 801655c:	e077      	b.n	801664e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	681a      	ldr	r2, [r3, #0]
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	2140      	movs	r1, #64	@ 0x40
 801656a:	438a      	bics	r2, r1
 801656c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016572:	b29b      	uxth	r3, r3
 8016574:	2b00      	cmp	r3, #0
 8016576:	d055      	beq.n	8016624 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	685b      	ldr	r3, [r3, #4]
 801657e:	b29a      	uxth	r2, r3
 8016580:	2312      	movs	r3, #18
 8016582:	18fb      	adds	r3, r7, r3
 8016584:	0592      	lsls	r2, r2, #22
 8016586:	0d92      	lsrs	r2, r2, #22
 8016588:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801658e:	b29b      	uxth	r3, r3
 8016590:	2bff      	cmp	r3, #255	@ 0xff
 8016592:	d906      	bls.n	80165a2 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	22ff      	movs	r2, #255	@ 0xff
 8016598:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 801659a:	2380      	movs	r3, #128	@ 0x80
 801659c:	045b      	lsls	r3, r3, #17
 801659e:	617b      	str	r3, [r7, #20]
 80165a0:	e010      	b.n	80165c4 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165a6:	b29a      	uxth	r2, r3
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165b0:	4a50      	ldr	r2, [pc, #320]	@ (80166f4 <I2C_Master_ISR_DMA+0x214>)
 80165b2:	4293      	cmp	r3, r2
 80165b4:	d003      	beq.n	80165be <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165ba:	617b      	str	r3, [r7, #20]
 80165bc:	e002      	b.n	80165c4 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80165be:	2380      	movs	r3, #128	@ 0x80
 80165c0:	049b      	lsls	r3, r3, #18
 80165c2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165c8:	b2da      	uxtb	r2, r3
 80165ca:	697c      	ldr	r4, [r7, #20]
 80165cc:	2312      	movs	r3, #18
 80165ce:	18fb      	adds	r3, r7, r3
 80165d0:	8819      	ldrh	r1, [r3, #0]
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	2300      	movs	r3, #0
 80165d6:	9300      	str	r3, [sp, #0]
 80165d8:	0023      	movs	r3, r4
 80165da:	f001 fb29 	bl	8017c30 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165e2:	b29a      	uxth	r2, r3
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165e8:	1ad3      	subs	r3, r2, r3
 80165ea:	b29a      	uxth	r2, r3
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	2241      	movs	r2, #65	@ 0x41
 80165f4:	5c9b      	ldrb	r3, [r3, r2]
 80165f6:	b2db      	uxtb	r3, r3
 80165f8:	2b22      	cmp	r3, #34	@ 0x22
 80165fa:	d109      	bne.n	8016610 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	681a      	ldr	r2, [r3, #0]
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	2180      	movs	r1, #128	@ 0x80
 8016608:	0209      	lsls	r1, r1, #8
 801660a:	430a      	orrs	r2, r1
 801660c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801660e:	e067      	b.n	80166e0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	681a      	ldr	r2, [r3, #0]
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	2180      	movs	r1, #128	@ 0x80
 801661c:	01c9      	lsls	r1, r1, #7
 801661e:	430a      	orrs	r2, r1
 8016620:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016622:	e05d      	b.n	80166e0 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	685a      	ldr	r2, [r3, #4]
 801662a:	2380      	movs	r3, #128	@ 0x80
 801662c:	049b      	lsls	r3, r3, #18
 801662e:	401a      	ands	r2, r3
 8016630:	2380      	movs	r3, #128	@ 0x80
 8016632:	049b      	lsls	r3, r3, #18
 8016634:	429a      	cmp	r2, r3
 8016636:	d004      	beq.n	8016642 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	0018      	movs	r0, r3
 801663c:	f000 fb88 	bl	8016d50 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8016640:	e04e      	b.n	80166e0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	2140      	movs	r1, #64	@ 0x40
 8016646:	0018      	movs	r0, r3
 8016648:	f000 fe7a 	bl	8017340 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801664c:	e048      	b.n	80166e0 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801664e:	68bb      	ldr	r3, [r7, #8]
 8016650:	099b      	lsrs	r3, r3, #6
 8016652:	001a      	movs	r2, r3
 8016654:	2301      	movs	r3, #1
 8016656:	4013      	ands	r3, r2
 8016658:	d02e      	beq.n	80166b8 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	099b      	lsrs	r3, r3, #6
 801665e:	001a      	movs	r2, r3
 8016660:	2301      	movs	r3, #1
 8016662:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016664:	d028      	beq.n	80166b8 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801666a:	b29b      	uxth	r3, r3
 801666c:	2b00      	cmp	r3, #0
 801666e:	d11d      	bne.n	80166ac <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	685a      	ldr	r2, [r3, #4]
 8016676:	2380      	movs	r3, #128	@ 0x80
 8016678:	049b      	lsls	r3, r3, #18
 801667a:	401a      	ands	r2, r3
 801667c:	2380      	movs	r3, #128	@ 0x80
 801667e:	049b      	lsls	r3, r3, #18
 8016680:	429a      	cmp	r2, r3
 8016682:	d02c      	beq.n	80166de <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016688:	4a1a      	ldr	r2, [pc, #104]	@ (80166f4 <I2C_Master_ISR_DMA+0x214>)
 801668a:	4293      	cmp	r3, r2
 801668c:	d109      	bne.n	80166a2 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	685a      	ldr	r2, [r3, #4]
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	2180      	movs	r1, #128	@ 0x80
 801669a:	01c9      	lsls	r1, r1, #7
 801669c:	430a      	orrs	r2, r1
 801669e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80166a0:	e01d      	b.n	80166de <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	0018      	movs	r0, r3
 80166a6:	f000 fb53 	bl	8016d50 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80166aa:	e018      	b.n	80166de <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	2140      	movs	r1, #64	@ 0x40
 80166b0:	0018      	movs	r0, r3
 80166b2:	f000 fe45 	bl	8017340 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80166b6:	e012      	b.n	80166de <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	095b      	lsrs	r3, r3, #5
 80166bc:	001a      	movs	r2, r3
 80166be:	2301      	movs	r3, #1
 80166c0:	4013      	ands	r3, r2
 80166c2:	d00d      	beq.n	80166e0 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	095b      	lsrs	r3, r3, #5
 80166c8:	001a      	movs	r2, r3
 80166ca:	2301      	movs	r3, #1
 80166cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80166ce:	d007      	beq.n	80166e0 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80166d0:	68ba      	ldr	r2, [r7, #8]
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	0011      	movs	r1, r2
 80166d6:	0018      	movs	r0, r3
 80166d8:	f000 fbe2 	bl	8016ea0 <I2C_ITMasterCplt>
 80166dc:	e000      	b.n	80166e0 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80166de:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	2240      	movs	r2, #64	@ 0x40
 80166e4:	2100      	movs	r1, #0
 80166e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80166e8:	2300      	movs	r3, #0
}
 80166ea:	0018      	movs	r0, r3
 80166ec:	46bd      	mov	sp, r7
 80166ee:	b007      	add	sp, #28
 80166f0:	bd90      	pop	{r4, r7, pc}
 80166f2:	46c0      	nop			@ (mov r8, r8)
 80166f4:	ffff0000 	.word	0xffff0000

080166f8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80166f8:	b590      	push	{r4, r7, lr}
 80166fa:	b089      	sub	sp, #36	@ 0x24
 80166fc:	af02      	add	r7, sp, #8
 80166fe:	60f8      	str	r0, [r7, #12]
 8016700:	60b9      	str	r1, [r7, #8]
 8016702:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8016704:	4b92      	ldr	r3, [pc, #584]	@ (8016950 <I2C_Mem_ISR_DMA+0x258>)
 8016706:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	2240      	movs	r2, #64	@ 0x40
 801670c:	5c9b      	ldrb	r3, [r3, r2]
 801670e:	2b01      	cmp	r3, #1
 8016710:	d101      	bne.n	8016716 <I2C_Mem_ISR_DMA+0x1e>
 8016712:	2302      	movs	r3, #2
 8016714:	e118      	b.n	8016948 <I2C_Mem_ISR_DMA+0x250>
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2240      	movs	r2, #64	@ 0x40
 801671a:	2101      	movs	r1, #1
 801671c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	091b      	lsrs	r3, r3, #4
 8016722:	001a      	movs	r2, r3
 8016724:	2301      	movs	r3, #1
 8016726:	4013      	ands	r3, r2
 8016728:	d019      	beq.n	801675e <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	091b      	lsrs	r3, r3, #4
 801672e:	001a      	movs	r2, r3
 8016730:	2301      	movs	r3, #1
 8016732:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016734:	d013      	beq.n	801675e <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	2210      	movs	r2, #16
 801673c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016742:	2204      	movs	r2, #4
 8016744:	431a      	orrs	r2, r3
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	2120      	movs	r1, #32
 801674e:	0018      	movs	r0, r3
 8016750:	f001 faa8 	bl	8017ca4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	0018      	movs	r0, r3
 8016758:	f000 ff1d 	bl	8017596 <I2C_Flush_TXDR>
 801675c:	e0ef      	b.n	801693e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801675e:	68bb      	ldr	r3, [r7, #8]
 8016760:	085b      	lsrs	r3, r3, #1
 8016762:	001a      	movs	r2, r3
 8016764:	2301      	movs	r3, #1
 8016766:	4013      	ands	r3, r2
 8016768:	d00f      	beq.n	801678a <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	085b      	lsrs	r3, r3, #1
 801676e:	001a      	movs	r2, r3
 8016770:	2301      	movs	r3, #1
 8016772:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016774:	d009      	beq.n	801678a <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	68fa      	ldr	r2, [r7, #12]
 801677c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801677e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	2201      	movs	r2, #1
 8016784:	4252      	negs	r2, r2
 8016786:	651a      	str	r2, [r3, #80]	@ 0x50
 8016788:	e0d9      	b.n	801693e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801678a:	68bb      	ldr	r3, [r7, #8]
 801678c:	09db      	lsrs	r3, r3, #7
 801678e:	001a      	movs	r2, r3
 8016790:	2301      	movs	r3, #1
 8016792:	4013      	ands	r3, r2
 8016794:	d060      	beq.n	8016858 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	099b      	lsrs	r3, r3, #6
 801679a:	001a      	movs	r2, r3
 801679c:	2301      	movs	r3, #1
 801679e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80167a0:	d05a      	beq.n	8016858 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	2110      	movs	r1, #16
 80167a6:	0018      	movs	r0, r3
 80167a8:	f001 fa7c 	bl	8017ca4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80167b0:	b29b      	uxth	r3, r3
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d04a      	beq.n	801684c <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80167ba:	b29b      	uxth	r3, r3
 80167bc:	2bff      	cmp	r3, #255	@ 0xff
 80167be:	d910      	bls.n	80167e2 <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	22ff      	movs	r2, #255	@ 0xff
 80167c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80167ca:	b299      	uxth	r1, r3
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167d0:	b2da      	uxtb	r2, r3
 80167d2:	2380      	movs	r3, #128	@ 0x80
 80167d4:	045b      	lsls	r3, r3, #17
 80167d6:	68f8      	ldr	r0, [r7, #12]
 80167d8:	2400      	movs	r4, #0
 80167da:	9400      	str	r4, [sp, #0]
 80167dc:	f001 fa28 	bl	8017c30 <I2C_TransferConfig>
 80167e0:	e011      	b.n	8016806 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80167e6:	b29a      	uxth	r2, r3
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80167f0:	b299      	uxth	r1, r3
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167f6:	b2da      	uxtb	r2, r3
 80167f8:	2380      	movs	r3, #128	@ 0x80
 80167fa:	049b      	lsls	r3, r3, #18
 80167fc:	68f8      	ldr	r0, [r7, #12]
 80167fe:	2400      	movs	r4, #0
 8016800:	9400      	str	r4, [sp, #0]
 8016802:	f001 fa15 	bl	8017c30 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801680a:	b29a      	uxth	r2, r3
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016810:	1ad3      	subs	r3, r2, r3
 8016812:	b29a      	uxth	r2, r3
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	2241      	movs	r2, #65	@ 0x41
 801681c:	5c9b      	ldrb	r3, [r3, r2]
 801681e:	b2db      	uxtb	r3, r3
 8016820:	2b22      	cmp	r3, #34	@ 0x22
 8016822:	d109      	bne.n	8016838 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	681a      	ldr	r2, [r3, #0]
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	2180      	movs	r1, #128	@ 0x80
 8016830:	0209      	lsls	r1, r1, #8
 8016832:	430a      	orrs	r2, r1
 8016834:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8016836:	e082      	b.n	801693e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	681a      	ldr	r2, [r3, #0]
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	2180      	movs	r1, #128	@ 0x80
 8016844:	01c9      	lsls	r1, r1, #7
 8016846:	430a      	orrs	r2, r1
 8016848:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801684a:	e078      	b.n	801693e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	2140      	movs	r1, #64	@ 0x40
 8016850:	0018      	movs	r0, r3
 8016852:	f000 fd75 	bl	8017340 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8016856:	e072      	b.n	801693e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	099b      	lsrs	r3, r3, #6
 801685c:	001a      	movs	r2, r3
 801685e:	2301      	movs	r3, #1
 8016860:	4013      	ands	r3, r2
 8016862:	d05a      	beq.n	801691a <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	099b      	lsrs	r3, r3, #6
 8016868:	001a      	movs	r2, r3
 801686a:	2301      	movs	r3, #1
 801686c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801686e:	d054      	beq.n	801691a <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	2241      	movs	r2, #65	@ 0x41
 8016874:	5c9b      	ldrb	r3, [r3, r2]
 8016876:	b2db      	uxtb	r3, r3
 8016878:	2b22      	cmp	r3, #34	@ 0x22
 801687a:	d101      	bne.n	8016880 <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 801687c:	4b35      	ldr	r3, [pc, #212]	@ (8016954 <I2C_Mem_ISR_DMA+0x25c>)
 801687e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016884:	b29b      	uxth	r3, r3
 8016886:	2bff      	cmp	r3, #255	@ 0xff
 8016888:	d911      	bls.n	80168ae <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	22ff      	movs	r2, #255	@ 0xff
 801688e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016894:	b299      	uxth	r1, r3
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801689a:	b2da      	uxtb	r2, r3
 801689c:	2380      	movs	r3, #128	@ 0x80
 801689e:	045c      	lsls	r4, r3, #17
 80168a0:	68f8      	ldr	r0, [r7, #12]
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	9300      	str	r3, [sp, #0]
 80168a6:	0023      	movs	r3, r4
 80168a8:	f001 f9c2 	bl	8017c30 <I2C_TransferConfig>
 80168ac:	e012      	b.n	80168d4 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168b2:	b29a      	uxth	r2, r3
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80168bc:	b299      	uxth	r1, r3
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168c2:	b2da      	uxtb	r2, r3
 80168c4:	2380      	movs	r3, #128	@ 0x80
 80168c6:	049c      	lsls	r4, r3, #18
 80168c8:	68f8      	ldr	r0, [r7, #12]
 80168ca:	697b      	ldr	r3, [r7, #20]
 80168cc:	9300      	str	r3, [sp, #0]
 80168ce:	0023      	movs	r3, r4
 80168d0:	f001 f9ae 	bl	8017c30 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168d8:	b29a      	uxth	r2, r3
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168de:	1ad3      	subs	r3, r2, r3
 80168e0:	b29a      	uxth	r2, r3
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	2241      	movs	r2, #65	@ 0x41
 80168ea:	5c9b      	ldrb	r3, [r3, r2]
 80168ec:	b2db      	uxtb	r3, r3
 80168ee:	2b22      	cmp	r3, #34	@ 0x22
 80168f0:	d109      	bne.n	8016906 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	681a      	ldr	r2, [r3, #0]
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	2180      	movs	r1, #128	@ 0x80
 80168fe:	0209      	lsls	r1, r1, #8
 8016900:	430a      	orrs	r2, r1
 8016902:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016904:	e01b      	b.n	801693e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	681a      	ldr	r2, [r3, #0]
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	2180      	movs	r1, #128	@ 0x80
 8016912:	01c9      	lsls	r1, r1, #7
 8016914:	430a      	orrs	r2, r1
 8016916:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016918:	e011      	b.n	801693e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801691a:	68bb      	ldr	r3, [r7, #8]
 801691c:	095b      	lsrs	r3, r3, #5
 801691e:	001a      	movs	r2, r3
 8016920:	2301      	movs	r3, #1
 8016922:	4013      	ands	r3, r2
 8016924:	d00b      	beq.n	801693e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	095b      	lsrs	r3, r3, #5
 801692a:	001a      	movs	r2, r3
 801692c:	2301      	movs	r3, #1
 801692e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016930:	d005      	beq.n	801693e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8016932:	68ba      	ldr	r2, [r7, #8]
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	0011      	movs	r1, r2
 8016938:	0018      	movs	r0, r3
 801693a:	f000 fab1 	bl	8016ea0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	2240      	movs	r2, #64	@ 0x40
 8016942:	2100      	movs	r1, #0
 8016944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016946:	2300      	movs	r3, #0
}
 8016948:	0018      	movs	r0, r3
 801694a:	46bd      	mov	sp, r7
 801694c:	b007      	add	sp, #28
 801694e:	bd90      	pop	{r4, r7, pc}
 8016950:	80002000 	.word	0x80002000
 8016954:	80002400 	.word	0x80002400

08016958 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b088      	sub	sp, #32
 801695c:	af00      	add	r7, sp, #0
 801695e:	60f8      	str	r0, [r7, #12]
 8016960:	60b9      	str	r1, [r7, #8]
 8016962:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016968:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801696a:	2300      	movs	r3, #0
 801696c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	2240      	movs	r2, #64	@ 0x40
 8016972:	5c9b      	ldrb	r3, [r3, r2]
 8016974:	2b01      	cmp	r3, #1
 8016976:	d101      	bne.n	801697c <I2C_Slave_ISR_DMA+0x24>
 8016978:	2302      	movs	r3, #2
 801697a:	e0dd      	b.n	8016b38 <I2C_Slave_ISR_DMA+0x1e0>
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	2240      	movs	r2, #64	@ 0x40
 8016980:	2101      	movs	r1, #1
 8016982:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016984:	68bb      	ldr	r3, [r7, #8]
 8016986:	095b      	lsrs	r3, r3, #5
 8016988:	001a      	movs	r2, r3
 801698a:	2301      	movs	r3, #1
 801698c:	4013      	ands	r3, r2
 801698e:	d00b      	beq.n	80169a8 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	095b      	lsrs	r3, r3, #5
 8016994:	001a      	movs	r2, r3
 8016996:	2301      	movs	r3, #1
 8016998:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801699a:	d005      	beq.n	80169a8 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 801699c:	68ba      	ldr	r2, [r7, #8]
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	0011      	movs	r1, r2
 80169a2:	0018      	movs	r0, r3
 80169a4:	f000 fb4e 	bl	8017044 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	091b      	lsrs	r3, r3, #4
 80169ac:	001a      	movs	r2, r3
 80169ae:	2301      	movs	r3, #1
 80169b0:	4013      	ands	r3, r2
 80169b2:	d100      	bne.n	80169b6 <I2C_Slave_ISR_DMA+0x5e>
 80169b4:	e0a9      	b.n	8016b0a <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	091b      	lsrs	r3, r3, #4
 80169ba:	001a      	movs	r2, r3
 80169bc:	2301      	movs	r3, #1
 80169be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80169c0:	d100      	bne.n	80169c4 <I2C_Slave_ISR_DMA+0x6c>
 80169c2:	e0a2      	b.n	8016b0a <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	0b9b      	lsrs	r3, r3, #14
 80169c8:	001a      	movs	r2, r3
 80169ca:	2301      	movs	r3, #1
 80169cc:	4013      	ands	r3, r2
 80169ce:	d106      	bne.n	80169de <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	0bdb      	lsrs	r3, r3, #15
 80169d4:	001a      	movs	r2, r3
 80169d6:	2301      	movs	r3, #1
 80169d8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80169da:	d100      	bne.n	80169de <I2C_Slave_ISR_DMA+0x86>
 80169dc:	e08e      	b.n	8016afc <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d00d      	beq.n	8016a02 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	0bdb      	lsrs	r3, r3, #15
 80169ea:	001a      	movs	r2, r3
 80169ec:	2301      	movs	r3, #1
 80169ee:	4013      	ands	r3, r2
 80169f0:	d007      	beq.n	8016a02 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d101      	bne.n	8016a02 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 80169fe:	2301      	movs	r3, #1
 8016a00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d00d      	beq.n	8016a26 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	0b9b      	lsrs	r3, r3, #14
 8016a0e:	001a      	movs	r2, r3
 8016a10:	2301      	movs	r3, #1
 8016a12:	4013      	ands	r3, r2
 8016a14:	d007      	beq.n	8016a26 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	685b      	ldr	r3, [r3, #4]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d101      	bne.n	8016a26 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8016a22:	2301      	movs	r3, #1
 8016a24:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8016a26:	69fb      	ldr	r3, [r7, #28]
 8016a28:	2b01      	cmp	r3, #1
 8016a2a:	d12d      	bne.n	8016a88 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	2241      	movs	r2, #65	@ 0x41
 8016a30:	5c9b      	ldrb	r3, [r3, r2]
 8016a32:	b2db      	uxtb	r3, r3
 8016a34:	2b28      	cmp	r3, #40	@ 0x28
 8016a36:	d10b      	bne.n	8016a50 <I2C_Slave_ISR_DMA+0xf8>
 8016a38:	69ba      	ldr	r2, [r7, #24]
 8016a3a:	2380      	movs	r3, #128	@ 0x80
 8016a3c:	049b      	lsls	r3, r3, #18
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d106      	bne.n	8016a50 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8016a42:	68ba      	ldr	r2, [r7, #8]
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	0011      	movs	r1, r2
 8016a48:	0018      	movs	r0, r3
 8016a4a:	f000 fc1f 	bl	801728c <I2C_ITListenCplt>
 8016a4e:	e054      	b.n	8016afa <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	2241      	movs	r2, #65	@ 0x41
 8016a54:	5c9b      	ldrb	r3, [r3, r2]
 8016a56:	b2db      	uxtb	r3, r3
 8016a58:	2b29      	cmp	r3, #41	@ 0x29
 8016a5a:	d110      	bne.n	8016a7e <I2C_Slave_ISR_DMA+0x126>
 8016a5c:	69bb      	ldr	r3, [r7, #24]
 8016a5e:	4a38      	ldr	r2, [pc, #224]	@ (8016b40 <I2C_Slave_ISR_DMA+0x1e8>)
 8016a60:	4293      	cmp	r3, r2
 8016a62:	d00c      	beq.n	8016a7e <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	2210      	movs	r2, #16
 8016a6a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	0018      	movs	r0, r3
 8016a70:	f000 fd91 	bl	8017596 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	0018      	movs	r0, r3
 8016a78:	f000 f9ac 	bl	8016dd4 <I2C_ITSlaveSeqCplt>
 8016a7c:	e03d      	b.n	8016afa <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	2210      	movs	r2, #16
 8016a84:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8016a86:	e03e      	b.n	8016b06 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	2210      	movs	r2, #16
 8016a8e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016a94:	2204      	movs	r2, #4
 8016a96:	431a      	orrs	r2, r3
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8016a9c:	2317      	movs	r3, #23
 8016a9e:	18fb      	adds	r3, r7, r3
 8016aa0:	68fa      	ldr	r2, [r7, #12]
 8016aa2:	2141      	movs	r1, #65	@ 0x41
 8016aa4:	5c52      	ldrb	r2, [r2, r1]
 8016aa6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8016aa8:	69bb      	ldr	r3, [r7, #24]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d004      	beq.n	8016ab8 <I2C_Slave_ISR_DMA+0x160>
 8016aae:	69ba      	ldr	r2, [r7, #24]
 8016ab0:	2380      	movs	r3, #128	@ 0x80
 8016ab2:	045b      	lsls	r3, r3, #17
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	d126      	bne.n	8016b06 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8016ab8:	2217      	movs	r2, #23
 8016aba:	18bb      	adds	r3, r7, r2
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	2b21      	cmp	r3, #33	@ 0x21
 8016ac0:	d003      	beq.n	8016aca <I2C_Slave_ISR_DMA+0x172>
 8016ac2:	18bb      	adds	r3, r7, r2
 8016ac4:	781b      	ldrb	r3, [r3, #0]
 8016ac6:	2b29      	cmp	r3, #41	@ 0x29
 8016ac8:	d103      	bne.n	8016ad2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	2221      	movs	r2, #33	@ 0x21
 8016ace:	631a      	str	r2, [r3, #48]	@ 0x30
 8016ad0:	e00b      	b.n	8016aea <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8016ad2:	2217      	movs	r2, #23
 8016ad4:	18bb      	adds	r3, r7, r2
 8016ad6:	781b      	ldrb	r3, [r3, #0]
 8016ad8:	2b22      	cmp	r3, #34	@ 0x22
 8016ada:	d003      	beq.n	8016ae4 <I2C_Slave_ISR_DMA+0x18c>
 8016adc:	18bb      	adds	r3, r7, r2
 8016ade:	781b      	ldrb	r3, [r3, #0]
 8016ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ae2:	d102      	bne.n	8016aea <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	2222      	movs	r2, #34	@ 0x22
 8016ae8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	0011      	movs	r1, r2
 8016af2:	0018      	movs	r0, r3
 8016af4:	f000 fc24 	bl	8017340 <I2C_ITError>
      if (treatdmanack == 1U)
 8016af8:	e005      	b.n	8016b06 <I2C_Slave_ISR_DMA+0x1ae>
 8016afa:	e004      	b.n	8016b06 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	2210      	movs	r2, #16
 8016b02:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016b04:	e013      	b.n	8016b2e <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8016b06:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016b08:	e011      	b.n	8016b2e <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016b0a:	68bb      	ldr	r3, [r7, #8]
 8016b0c:	08db      	lsrs	r3, r3, #3
 8016b0e:	001a      	movs	r2, r3
 8016b10:	2301      	movs	r3, #1
 8016b12:	4013      	ands	r3, r2
 8016b14:	d00b      	beq.n	8016b2e <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	08db      	lsrs	r3, r3, #3
 8016b1a:	001a      	movs	r2, r3
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016b20:	d005      	beq.n	8016b2e <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8016b22:	68ba      	ldr	r2, [r7, #8]
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	0011      	movs	r1, r2
 8016b28:	0018      	movs	r0, r3
 8016b2a:	f000 f86d 	bl	8016c08 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	2240      	movs	r2, #64	@ 0x40
 8016b32:	2100      	movs	r1, #0
 8016b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016b36:	2300      	movs	r3, #0
}
 8016b38:	0018      	movs	r0, r3
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	b008      	add	sp, #32
 8016b3e:	bd80      	pop	{r7, pc}
 8016b40:	ffff0000 	.word	0xffff0000

08016b44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8016b44:	b5b0      	push	{r4, r5, r7, lr}
 8016b46:	b086      	sub	sp, #24
 8016b48:	af02      	add	r7, sp, #8
 8016b4a:	60f8      	str	r0, [r7, #12]
 8016b4c:	000c      	movs	r4, r1
 8016b4e:	0010      	movs	r0, r2
 8016b50:	0019      	movs	r1, r3
 8016b52:	250a      	movs	r5, #10
 8016b54:	197b      	adds	r3, r7, r5
 8016b56:	1c22      	adds	r2, r4, #0
 8016b58:	801a      	strh	r2, [r3, #0]
 8016b5a:	2308      	movs	r3, #8
 8016b5c:	18fb      	adds	r3, r7, r3
 8016b5e:	1c02      	adds	r2, r0, #0
 8016b60:	801a      	strh	r2, [r3, #0]
 8016b62:	1dbb      	adds	r3, r7, #6
 8016b64:	1c0a      	adds	r2, r1, #0
 8016b66:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8016b68:	1dbb      	adds	r3, r7, #6
 8016b6a:	881b      	ldrh	r3, [r3, #0]
 8016b6c:	b2da      	uxtb	r2, r3
 8016b6e:	197b      	adds	r3, r7, r5
 8016b70:	8819      	ldrh	r1, [r3, #0]
 8016b72:	68f8      	ldr	r0, [r7, #12]
 8016b74:	4b23      	ldr	r3, [pc, #140]	@ (8016c04 <I2C_RequestMemoryRead+0xc0>)
 8016b76:	9300      	str	r3, [sp, #0]
 8016b78:	2300      	movs	r3, #0
 8016b7a:	f001 f859 	bl	8017c30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b80:	6a39      	ldr	r1, [r7, #32]
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	0018      	movs	r0, r3
 8016b86:	f000 fe4f 	bl	8017828 <I2C_WaitOnTXISFlagUntilTimeout>
 8016b8a:	1e03      	subs	r3, r0, #0
 8016b8c:	d001      	beq.n	8016b92 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8016b8e:	2301      	movs	r3, #1
 8016b90:	e033      	b.n	8016bfa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8016b92:	1dbb      	adds	r3, r7, #6
 8016b94:	881b      	ldrh	r3, [r3, #0]
 8016b96:	2b01      	cmp	r3, #1
 8016b98:	d107      	bne.n	8016baa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016b9a:	2308      	movs	r3, #8
 8016b9c:	18fb      	adds	r3, r7, r3
 8016b9e:	881b      	ldrh	r3, [r3, #0]
 8016ba0:	b2da      	uxtb	r2, r3
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	629a      	str	r2, [r3, #40]	@ 0x28
 8016ba8:	e019      	b.n	8016bde <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8016baa:	2308      	movs	r3, #8
 8016bac:	18fb      	adds	r3, r7, r3
 8016bae:	881b      	ldrh	r3, [r3, #0]
 8016bb0:	0a1b      	lsrs	r3, r3, #8
 8016bb2:	b29b      	uxth	r3, r3
 8016bb4:	b2da      	uxtb	r2, r3
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016bbe:	6a39      	ldr	r1, [r7, #32]
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	0018      	movs	r0, r3
 8016bc4:	f000 fe30 	bl	8017828 <I2C_WaitOnTXISFlagUntilTimeout>
 8016bc8:	1e03      	subs	r3, r0, #0
 8016bca:	d001      	beq.n	8016bd0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8016bcc:	2301      	movs	r3, #1
 8016bce:	e014      	b.n	8016bfa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016bd0:	2308      	movs	r3, #8
 8016bd2:	18fb      	adds	r3, r7, r3
 8016bd4:	881b      	ldrh	r3, [r3, #0]
 8016bd6:	b2da      	uxtb	r2, r3
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8016bde:	6a3a      	ldr	r2, [r7, #32]
 8016be0:	68f8      	ldr	r0, [r7, #12]
 8016be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016be4:	9300      	str	r3, [sp, #0]
 8016be6:	0013      	movs	r3, r2
 8016be8:	2200      	movs	r2, #0
 8016bea:	2140      	movs	r1, #64	@ 0x40
 8016bec:	f000 fdce 	bl	801778c <I2C_WaitOnFlagUntilTimeout>
 8016bf0:	1e03      	subs	r3, r0, #0
 8016bf2:	d001      	beq.n	8016bf8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	e000      	b.n	8016bfa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8016bf8:	2300      	movs	r3, #0
}
 8016bfa:	0018      	movs	r0, r3
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	b004      	add	sp, #16
 8016c00:	bdb0      	pop	{r4, r5, r7, pc}
 8016c02:	46c0      	nop			@ (mov r8, r8)
 8016c04:	80002000 	.word	0x80002000

08016c08 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016c08:	b5b0      	push	{r4, r5, r7, lr}
 8016c0a:	b084      	sub	sp, #16
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
 8016c10:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2241      	movs	r2, #65	@ 0x41
 8016c16:	5c9b      	ldrb	r3, [r3, r2]
 8016c18:	b2db      	uxtb	r3, r3
 8016c1a:	001a      	movs	r2, r3
 8016c1c:	2328      	movs	r3, #40	@ 0x28
 8016c1e:	4013      	ands	r3, r2
 8016c20:	2b28      	cmp	r3, #40	@ 0x28
 8016c22:	d000      	beq.n	8016c26 <I2C_ITAddrCplt+0x1e>
 8016c24:	e088      	b.n	8016d38 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	699b      	ldr	r3, [r3, #24]
 8016c2c:	0c1b      	lsrs	r3, r3, #16
 8016c2e:	b2da      	uxtb	r2, r3
 8016c30:	250f      	movs	r5, #15
 8016c32:	197b      	adds	r3, r7, r5
 8016c34:	2101      	movs	r1, #1
 8016c36:	400a      	ands	r2, r1
 8016c38:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	699b      	ldr	r3, [r3, #24]
 8016c40:	0c1b      	lsrs	r3, r3, #16
 8016c42:	b29a      	uxth	r2, r3
 8016c44:	200c      	movs	r0, #12
 8016c46:	183b      	adds	r3, r7, r0
 8016c48:	21fe      	movs	r1, #254	@ 0xfe
 8016c4a:	400a      	ands	r2, r1
 8016c4c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	689b      	ldr	r3, [r3, #8]
 8016c54:	b29a      	uxth	r2, r3
 8016c56:	240a      	movs	r4, #10
 8016c58:	193b      	adds	r3, r7, r4
 8016c5a:	0592      	lsls	r2, r2, #22
 8016c5c:	0d92      	lsrs	r2, r2, #22
 8016c5e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	68db      	ldr	r3, [r3, #12]
 8016c66:	b29a      	uxth	r2, r3
 8016c68:	2308      	movs	r3, #8
 8016c6a:	18fb      	adds	r3, r7, r3
 8016c6c:	21fe      	movs	r1, #254	@ 0xfe
 8016c6e:	400a      	ands	r2, r1
 8016c70:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	68db      	ldr	r3, [r3, #12]
 8016c76:	2b02      	cmp	r3, #2
 8016c78:	d148      	bne.n	8016d0c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8016c7a:	0021      	movs	r1, r4
 8016c7c:	187b      	adds	r3, r7, r1
 8016c7e:	881b      	ldrh	r3, [r3, #0]
 8016c80:	09db      	lsrs	r3, r3, #7
 8016c82:	b29a      	uxth	r2, r3
 8016c84:	183b      	adds	r3, r7, r0
 8016c86:	881b      	ldrh	r3, [r3, #0]
 8016c88:	4053      	eors	r3, r2
 8016c8a:	b29b      	uxth	r3, r3
 8016c8c:	001a      	movs	r2, r3
 8016c8e:	2306      	movs	r3, #6
 8016c90:	4013      	ands	r3, r2
 8016c92:	d120      	bne.n	8016cd6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8016c94:	183b      	adds	r3, r7, r0
 8016c96:	187a      	adds	r2, r7, r1
 8016c98:	8812      	ldrh	r2, [r2, #0]
 8016c9a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016ca0:	1c5a      	adds	r2, r3, #1
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016caa:	2b02      	cmp	r3, #2
 8016cac:	d14c      	bne.n	8016d48 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	2208      	movs	r2, #8
 8016cba:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	2240      	movs	r2, #64	@ 0x40
 8016cc0:	2100      	movs	r1, #0
 8016cc2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016cc4:	183b      	adds	r3, r7, r0
 8016cc6:	881a      	ldrh	r2, [r3, #0]
 8016cc8:	197b      	adds	r3, r7, r5
 8016cca:	7819      	ldrb	r1, [r3, #0]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	0018      	movs	r0, r3
 8016cd0:	f7ff f978 	bl	8015fc4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8016cd4:	e038      	b.n	8016d48 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8016cd6:	240c      	movs	r4, #12
 8016cd8:	193b      	adds	r3, r7, r4
 8016cda:	2208      	movs	r2, #8
 8016cdc:	18ba      	adds	r2, r7, r2
 8016cde:	8812      	ldrh	r2, [r2, #0]
 8016ce0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016ce2:	2380      	movs	r3, #128	@ 0x80
 8016ce4:	021a      	lsls	r2, r3, #8
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	0011      	movs	r1, r2
 8016cea:	0018      	movs	r0, r3
 8016cec:	f001 f868 	bl	8017dc0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	2240      	movs	r2, #64	@ 0x40
 8016cf4:	2100      	movs	r1, #0
 8016cf6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016cf8:	193b      	adds	r3, r7, r4
 8016cfa:	881a      	ldrh	r2, [r3, #0]
 8016cfc:	230f      	movs	r3, #15
 8016cfe:	18fb      	adds	r3, r7, r3
 8016d00:	7819      	ldrb	r1, [r3, #0]
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	0018      	movs	r0, r3
 8016d06:	f7ff f95d 	bl	8015fc4 <HAL_I2C_AddrCallback>
}
 8016d0a:	e01d      	b.n	8016d48 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016d0c:	2380      	movs	r3, #128	@ 0x80
 8016d0e:	021a      	lsls	r2, r3, #8
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	0011      	movs	r1, r2
 8016d14:	0018      	movs	r0, r3
 8016d16:	f001 f853 	bl	8017dc0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2240      	movs	r2, #64	@ 0x40
 8016d1e:	2100      	movs	r1, #0
 8016d20:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016d22:	230c      	movs	r3, #12
 8016d24:	18fb      	adds	r3, r7, r3
 8016d26:	881a      	ldrh	r2, [r3, #0]
 8016d28:	230f      	movs	r3, #15
 8016d2a:	18fb      	adds	r3, r7, r3
 8016d2c:	7819      	ldrb	r1, [r3, #0]
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	0018      	movs	r0, r3
 8016d32:	f7ff f947 	bl	8015fc4 <HAL_I2C_AddrCallback>
}
 8016d36:	e007      	b.n	8016d48 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	2208      	movs	r2, #8
 8016d3e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	2240      	movs	r2, #64	@ 0x40
 8016d44:	2100      	movs	r1, #0
 8016d46:	5499      	strb	r1, [r3, r2]
}
 8016d48:	46c0      	nop			@ (mov r8, r8)
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	b004      	add	sp, #16
 8016d4e:	bdb0      	pop	{r4, r5, r7, pc}

08016d50 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b082      	sub	sp, #8
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	2242      	movs	r2, #66	@ 0x42
 8016d5c:	2100      	movs	r1, #0
 8016d5e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	2241      	movs	r2, #65	@ 0x41
 8016d64:	5c9b      	ldrb	r3, [r3, r2]
 8016d66:	b2db      	uxtb	r3, r3
 8016d68:	2b21      	cmp	r3, #33	@ 0x21
 8016d6a:	d117      	bne.n	8016d9c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2241      	movs	r2, #65	@ 0x41
 8016d70:	2120      	movs	r1, #32
 8016d72:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	2211      	movs	r2, #17
 8016d78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2200      	movs	r2, #0
 8016d7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	2101      	movs	r1, #1
 8016d84:	0018      	movs	r0, r3
 8016d86:	f001 f81b 	bl	8017dc0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2240      	movs	r2, #64	@ 0x40
 8016d8e:	2100      	movs	r1, #0
 8016d90:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	0018      	movs	r0, r3
 8016d96:	f7ff f8f5 	bl	8015f84 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016d9a:	e016      	b.n	8016dca <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	2241      	movs	r2, #65	@ 0x41
 8016da0:	2120      	movs	r1, #32
 8016da2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	2212      	movs	r2, #18
 8016da8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2200      	movs	r2, #0
 8016dae:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	2102      	movs	r1, #2
 8016db4:	0018      	movs	r0, r3
 8016db6:	f001 f803 	bl	8017dc0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	2240      	movs	r2, #64	@ 0x40
 8016dbe:	2100      	movs	r1, #0
 8016dc0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	0018      	movs	r0, r3
 8016dc6:	f7ff f8e5 	bl	8015f94 <HAL_I2C_MasterRxCpltCallback>
}
 8016dca:	46c0      	nop			@ (mov r8, r8)
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	b002      	add	sp, #8
 8016dd0:	bd80      	pop	{r7, pc}
	...

08016dd4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b084      	sub	sp, #16
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	2242      	movs	r2, #66	@ 0x42
 8016de8:	2100      	movs	r1, #0
 8016dea:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	0b9b      	lsrs	r3, r3, #14
 8016df0:	001a      	movs	r2, r3
 8016df2:	2301      	movs	r3, #1
 8016df4:	4013      	ands	r3, r2
 8016df6:	d008      	beq.n	8016e0a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	681a      	ldr	r2, [r3, #0]
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	4925      	ldr	r1, [pc, #148]	@ (8016e98 <I2C_ITSlaveSeqCplt+0xc4>)
 8016e04:	400a      	ands	r2, r1
 8016e06:	601a      	str	r2, [r3, #0]
 8016e08:	e00d      	b.n	8016e26 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	0bdb      	lsrs	r3, r3, #15
 8016e0e:	001a      	movs	r2, r3
 8016e10:	2301      	movs	r3, #1
 8016e12:	4013      	ands	r3, r2
 8016e14:	d007      	beq.n	8016e26 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	681a      	ldr	r2, [r3, #0]
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	491e      	ldr	r1, [pc, #120]	@ (8016e9c <I2C_ITSlaveSeqCplt+0xc8>)
 8016e22:	400a      	ands	r2, r1
 8016e24:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	2241      	movs	r2, #65	@ 0x41
 8016e2a:	5c9b      	ldrb	r3, [r3, r2]
 8016e2c:	b2db      	uxtb	r3, r3
 8016e2e:	2b29      	cmp	r3, #41	@ 0x29
 8016e30:	d114      	bne.n	8016e5c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	2241      	movs	r2, #65	@ 0x41
 8016e36:	2128      	movs	r1, #40	@ 0x28
 8016e38:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	2221      	movs	r2, #33	@ 0x21
 8016e3e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	2101      	movs	r1, #1
 8016e44:	0018      	movs	r0, r3
 8016e46:	f000 ffbb 	bl	8017dc0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2240      	movs	r2, #64	@ 0x40
 8016e4e:	2100      	movs	r1, #0
 8016e50:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	0018      	movs	r0, r3
 8016e56:	f7ff f8a5 	bl	8015fa4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8016e5a:	e019      	b.n	8016e90 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2241      	movs	r2, #65	@ 0x41
 8016e60:	5c9b      	ldrb	r3, [r3, r2]
 8016e62:	b2db      	uxtb	r3, r3
 8016e64:	2b2a      	cmp	r3, #42	@ 0x2a
 8016e66:	d113      	bne.n	8016e90 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2241      	movs	r2, #65	@ 0x41
 8016e6c:	2128      	movs	r1, #40	@ 0x28
 8016e6e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2222      	movs	r2, #34	@ 0x22
 8016e74:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	2102      	movs	r1, #2
 8016e7a:	0018      	movs	r0, r3
 8016e7c:	f000 ffa0 	bl	8017dc0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2240      	movs	r2, #64	@ 0x40
 8016e84:	2100      	movs	r1, #0
 8016e86:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	0018      	movs	r0, r3
 8016e8c:	f7ff f892 	bl	8015fb4 <HAL_I2C_SlaveRxCpltCallback>
}
 8016e90:	46c0      	nop			@ (mov r8, r8)
 8016e92:	46bd      	mov	sp, r7
 8016e94:	b004      	add	sp, #16
 8016e96:	bd80      	pop	{r7, pc}
 8016e98:	ffffbfff 	.word	0xffffbfff
 8016e9c:	ffff7fff 	.word	0xffff7fff

08016ea0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b086      	sub	sp, #24
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
 8016ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	2220      	movs	r2, #32
 8016eb4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	2241      	movs	r2, #65	@ 0x41
 8016eba:	5c9b      	ldrb	r3, [r3, r2]
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	2b21      	cmp	r3, #33	@ 0x21
 8016ec0:	d108      	bne.n	8016ed4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	2101      	movs	r1, #1
 8016ec6:	0018      	movs	r0, r3
 8016ec8:	f000 ff7a 	bl	8017dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	2211      	movs	r2, #17
 8016ed0:	631a      	str	r2, [r3, #48]	@ 0x30
 8016ed2:	e00d      	b.n	8016ef0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	2241      	movs	r2, #65	@ 0x41
 8016ed8:	5c9b      	ldrb	r3, [r3, r2]
 8016eda:	b2db      	uxtb	r3, r3
 8016edc:	2b22      	cmp	r3, #34	@ 0x22
 8016ede:	d107      	bne.n	8016ef0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	2102      	movs	r1, #2
 8016ee4:	0018      	movs	r0, r3
 8016ee6:	f000 ff6b 	bl	8017dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2212      	movs	r2, #18
 8016eee:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	685a      	ldr	r2, [r3, #4]
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	4950      	ldr	r1, [pc, #320]	@ (801703c <I2C_ITMasterCplt+0x19c>)
 8016efc:	400a      	ands	r2, r1
 8016efe:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	2200      	movs	r2, #0
 8016f04:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	4a4d      	ldr	r2, [pc, #308]	@ (8017040 <I2C_ITMasterCplt+0x1a0>)
 8016f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8016f0c:	697b      	ldr	r3, [r7, #20]
 8016f0e:	091b      	lsrs	r3, r3, #4
 8016f10:	001a      	movs	r2, r3
 8016f12:	2301      	movs	r3, #1
 8016f14:	4013      	ands	r3, r2
 8016f16:	d009      	beq.n	8016f2c <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	2210      	movs	r2, #16
 8016f1e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f24:	2204      	movs	r2, #4
 8016f26:	431a      	orrs	r2, r3
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2241      	movs	r2, #65	@ 0x41
 8016f30:	5c9b      	ldrb	r3, [r3, r2]
 8016f32:	b2db      	uxtb	r3, r3
 8016f34:	2b60      	cmp	r3, #96	@ 0x60
 8016f36:	d10b      	bne.n	8016f50 <I2C_ITMasterCplt+0xb0>
 8016f38:	697b      	ldr	r3, [r7, #20]
 8016f3a:	089b      	lsrs	r3, r3, #2
 8016f3c:	001a      	movs	r2, r3
 8016f3e:	2301      	movs	r3, #1
 8016f40:	4013      	ands	r3, r2
 8016f42:	d005      	beq.n	8016f50 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f4a:	b2db      	uxtb	r3, r3
 8016f4c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8016f4e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	0018      	movs	r0, r3
 8016f54:	f000 fb1f 	bl	8017596 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f5c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	2241      	movs	r2, #65	@ 0x41
 8016f62:	5c9b      	ldrb	r3, [r3, r2]
 8016f64:	b2db      	uxtb	r3, r3
 8016f66:	2b60      	cmp	r3, #96	@ 0x60
 8016f68:	d002      	beq.n	8016f70 <I2C_ITMasterCplt+0xd0>
 8016f6a:	693b      	ldr	r3, [r7, #16]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d007      	beq.n	8016f80 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	0011      	movs	r1, r2
 8016f78:	0018      	movs	r0, r3
 8016f7a:	f000 f9e1 	bl	8017340 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8016f7e:	e058      	b.n	8017032 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	2241      	movs	r2, #65	@ 0x41
 8016f84:	5c9b      	ldrb	r3, [r3, r2]
 8016f86:	b2db      	uxtb	r3, r3
 8016f88:	2b21      	cmp	r3, #33	@ 0x21
 8016f8a:	d126      	bne.n	8016fda <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2241      	movs	r2, #65	@ 0x41
 8016f90:	2120      	movs	r1, #32
 8016f92:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2200      	movs	r2, #0
 8016f98:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	2242      	movs	r2, #66	@ 0x42
 8016f9e:	5c9b      	ldrb	r3, [r3, r2]
 8016fa0:	b2db      	uxtb	r3, r3
 8016fa2:	2b40      	cmp	r3, #64	@ 0x40
 8016fa4:	d10c      	bne.n	8016fc0 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	2242      	movs	r2, #66	@ 0x42
 8016faa:	2100      	movs	r1, #0
 8016fac:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	2240      	movs	r2, #64	@ 0x40
 8016fb2:	2100      	movs	r1, #0
 8016fb4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	0018      	movs	r0, r3
 8016fba:	f7ff f81b 	bl	8015ff4 <HAL_I2C_MemTxCpltCallback>
}
 8016fbe:	e038      	b.n	8017032 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2242      	movs	r2, #66	@ 0x42
 8016fc4:	2100      	movs	r1, #0
 8016fc6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	2240      	movs	r2, #64	@ 0x40
 8016fcc:	2100      	movs	r1, #0
 8016fce:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	0018      	movs	r0, r3
 8016fd4:	f7fe ffd6 	bl	8015f84 <HAL_I2C_MasterTxCpltCallback>
}
 8016fd8:	e02b      	b.n	8017032 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	2241      	movs	r2, #65	@ 0x41
 8016fde:	5c9b      	ldrb	r3, [r3, r2]
 8016fe0:	b2db      	uxtb	r3, r3
 8016fe2:	2b22      	cmp	r3, #34	@ 0x22
 8016fe4:	d125      	bne.n	8017032 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	2241      	movs	r2, #65	@ 0x41
 8016fea:	2120      	movs	r1, #32
 8016fec:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	2242      	movs	r2, #66	@ 0x42
 8016ff8:	5c9b      	ldrb	r3, [r3, r2]
 8016ffa:	b2db      	uxtb	r3, r3
 8016ffc:	2b40      	cmp	r3, #64	@ 0x40
 8016ffe:	d10c      	bne.n	801701a <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2242      	movs	r2, #66	@ 0x42
 8017004:	2100      	movs	r1, #0
 8017006:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	2240      	movs	r2, #64	@ 0x40
 801700c:	2100      	movs	r1, #0
 801700e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	0018      	movs	r0, r3
 8017014:	f7fe fff6 	bl	8016004 <HAL_I2C_MemRxCpltCallback>
}
 8017018:	e00b      	b.n	8017032 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	2242      	movs	r2, #66	@ 0x42
 801701e:	2100      	movs	r1, #0
 8017020:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	2240      	movs	r2, #64	@ 0x40
 8017026:	2100      	movs	r1, #0
 8017028:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	0018      	movs	r0, r3
 801702e:	f7fe ffb1 	bl	8015f94 <HAL_I2C_MasterRxCpltCallback>
}
 8017032:	46c0      	nop			@ (mov r8, r8)
 8017034:	46bd      	mov	sp, r7
 8017036:	b006      	add	sp, #24
 8017038:	bd80      	pop	{r7, pc}
 801703a:	46c0      	nop			@ (mov r8, r8)
 801703c:	fe00e800 	.word	0xfe00e800
 8017040:	ffff0000 	.word	0xffff0000

08017044 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b086      	sub	sp, #24
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
 801704c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8017056:	683b      	ldr	r3, [r7, #0]
 8017058:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801705a:	200f      	movs	r0, #15
 801705c:	183b      	adds	r3, r7, r0
 801705e:	687a      	ldr	r2, [r7, #4]
 8017060:	2141      	movs	r1, #65	@ 0x41
 8017062:	5c52      	ldrb	r2, [r2, r1]
 8017064:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2220      	movs	r2, #32
 801706c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801706e:	183b      	adds	r3, r7, r0
 8017070:	781b      	ldrb	r3, [r3, #0]
 8017072:	2b21      	cmp	r3, #33	@ 0x21
 8017074:	d003      	beq.n	801707e <I2C_ITSlaveCplt+0x3a>
 8017076:	183b      	adds	r3, r7, r0
 8017078:	781b      	ldrb	r3, [r3, #0]
 801707a:	2b29      	cmp	r3, #41	@ 0x29
 801707c:	d109      	bne.n	8017092 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801707e:	4a7d      	ldr	r2, [pc, #500]	@ (8017274 <I2C_ITSlaveCplt+0x230>)
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	0011      	movs	r1, r2
 8017084:	0018      	movs	r0, r3
 8017086:	f000 fe9b 	bl	8017dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	2221      	movs	r2, #33	@ 0x21
 801708e:	631a      	str	r2, [r3, #48]	@ 0x30
 8017090:	e011      	b.n	80170b6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017092:	220f      	movs	r2, #15
 8017094:	18bb      	adds	r3, r7, r2
 8017096:	781b      	ldrb	r3, [r3, #0]
 8017098:	2b22      	cmp	r3, #34	@ 0x22
 801709a:	d003      	beq.n	80170a4 <I2C_ITSlaveCplt+0x60>
 801709c:	18bb      	adds	r3, r7, r2
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80170a2:	d108      	bne.n	80170b6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80170a4:	4a74      	ldr	r2, [pc, #464]	@ (8017278 <I2C_ITSlaveCplt+0x234>)
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	0011      	movs	r1, r2
 80170aa:	0018      	movs	r0, r3
 80170ac:	f000 fe88 	bl	8017dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2222      	movs	r2, #34	@ 0x22
 80170b4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	685a      	ldr	r2, [r3, #4]
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	2180      	movs	r1, #128	@ 0x80
 80170c2:	0209      	lsls	r1, r1, #8
 80170c4:	430a      	orrs	r2, r1
 80170c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	685a      	ldr	r2, [r3, #4]
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	496a      	ldr	r1, [pc, #424]	@ (801727c <I2C_ITSlaveCplt+0x238>)
 80170d4:	400a      	ands	r2, r1
 80170d6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	0018      	movs	r0, r3
 80170dc:	f000 fa5b 	bl	8017596 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80170e0:	693b      	ldr	r3, [r7, #16]
 80170e2:	0b9b      	lsrs	r3, r3, #14
 80170e4:	001a      	movs	r2, r3
 80170e6:	2301      	movs	r3, #1
 80170e8:	4013      	ands	r3, r2
 80170ea:	d013      	beq.n	8017114 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	681a      	ldr	r2, [r3, #0]
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	4962      	ldr	r1, [pc, #392]	@ (8017280 <I2C_ITSlaveCplt+0x23c>)
 80170f8:	400a      	ands	r2, r1
 80170fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017100:	2b00      	cmp	r3, #0
 8017102:	d020      	beq.n	8017146 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	685b      	ldr	r3, [r3, #4]
 801710c:	b29a      	uxth	r2, r3
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017112:	e018      	b.n	8017146 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	0bdb      	lsrs	r3, r3, #15
 8017118:	001a      	movs	r2, r3
 801711a:	2301      	movs	r3, #1
 801711c:	4013      	ands	r3, r2
 801711e:	d012      	beq.n	8017146 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	681a      	ldr	r2, [r3, #0]
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	4956      	ldr	r1, [pc, #344]	@ (8017284 <I2C_ITSlaveCplt+0x240>)
 801712c:	400a      	ands	r2, r1
 801712e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017134:	2b00      	cmp	r3, #0
 8017136:	d006      	beq.n	8017146 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	b29a      	uxth	r2, r3
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	089b      	lsrs	r3, r3, #2
 801714a:	001a      	movs	r2, r3
 801714c:	2301      	movs	r3, #1
 801714e:	4013      	ands	r3, r2
 8017150:	d020      	beq.n	8017194 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8017152:	697b      	ldr	r3, [r7, #20]
 8017154:	2204      	movs	r2, #4
 8017156:	4393      	bics	r3, r2
 8017158:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017164:	b2d2      	uxtb	r2, r2
 8017166:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801716c:	1c5a      	adds	r2, r3, #1
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017176:	2b00      	cmp	r3, #0
 8017178:	d00c      	beq.n	8017194 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801717e:	3b01      	subs	r3, #1
 8017180:	b29a      	uxth	r2, r3
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801718a:	b29b      	uxth	r3, r3
 801718c:	3b01      	subs	r3, #1
 801718e:	b29a      	uxth	r2, r3
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017198:	b29b      	uxth	r3, r3
 801719a:	2b00      	cmp	r3, #0
 801719c:	d005      	beq.n	80171aa <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171a2:	2204      	movs	r2, #4
 80171a4:	431a      	orrs	r2, r3
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	2242      	movs	r2, #66	@ 0x42
 80171ae:	2100      	movs	r1, #0
 80171b0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	2200      	movs	r2, #0
 80171b6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d013      	beq.n	80171e8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	0011      	movs	r1, r2
 80171c8:	0018      	movs	r0, r3
 80171ca:	f000 f8b9 	bl	8017340 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2241      	movs	r2, #65	@ 0x41
 80171d2:	5c9b      	ldrb	r3, [r3, r2]
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	2b28      	cmp	r3, #40	@ 0x28
 80171d8:	d147      	bne.n	801726a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80171da:	697a      	ldr	r2, [r7, #20]
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	0011      	movs	r1, r2
 80171e0:	0018      	movs	r0, r3
 80171e2:	f000 f853 	bl	801728c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80171e6:	e040      	b.n	801726a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171ec:	4a26      	ldr	r2, [pc, #152]	@ (8017288 <I2C_ITSlaveCplt+0x244>)
 80171ee:	4293      	cmp	r3, r2
 80171f0:	d016      	beq.n	8017220 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	0018      	movs	r0, r3
 80171f6:	f7ff fded 	bl	8016dd4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	4a22      	ldr	r2, [pc, #136]	@ (8017288 <I2C_ITSlaveCplt+0x244>)
 80171fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2241      	movs	r2, #65	@ 0x41
 8017204:	2120      	movs	r1, #32
 8017206:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2200      	movs	r2, #0
 801720c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	2240      	movs	r2, #64	@ 0x40
 8017212:	2100      	movs	r1, #0
 8017214:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	0018      	movs	r0, r3
 801721a:	f7fe fee3 	bl	8015fe4 <HAL_I2C_ListenCpltCallback>
}
 801721e:	e024      	b.n	801726a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2241      	movs	r2, #65	@ 0x41
 8017224:	5c9b      	ldrb	r3, [r3, r2]
 8017226:	b2db      	uxtb	r3, r3
 8017228:	2b22      	cmp	r3, #34	@ 0x22
 801722a:	d10f      	bne.n	801724c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	2241      	movs	r2, #65	@ 0x41
 8017230:	2120      	movs	r1, #32
 8017232:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2200      	movs	r2, #0
 8017238:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2240      	movs	r2, #64	@ 0x40
 801723e:	2100      	movs	r1, #0
 8017240:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	0018      	movs	r0, r3
 8017246:	f7fe feb5 	bl	8015fb4 <HAL_I2C_SlaveRxCpltCallback>
}
 801724a:	e00e      	b.n	801726a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	2241      	movs	r2, #65	@ 0x41
 8017250:	2120      	movs	r1, #32
 8017252:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	2200      	movs	r2, #0
 8017258:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	2240      	movs	r2, #64	@ 0x40
 801725e:	2100      	movs	r1, #0
 8017260:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	0018      	movs	r0, r3
 8017266:	f7fe fe9d 	bl	8015fa4 <HAL_I2C_SlaveTxCpltCallback>
}
 801726a:	46c0      	nop			@ (mov r8, r8)
 801726c:	46bd      	mov	sp, r7
 801726e:	b006      	add	sp, #24
 8017270:	bd80      	pop	{r7, pc}
 8017272:	46c0      	nop			@ (mov r8, r8)
 8017274:	00008001 	.word	0x00008001
 8017278:	00008002 	.word	0x00008002
 801727c:	fe00e800 	.word	0xfe00e800
 8017280:	ffffbfff 	.word	0xffffbfff
 8017284:	ffff7fff 	.word	0xffff7fff
 8017288:	ffff0000 	.word	0xffff0000

0801728c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	4a27      	ldr	r2, [pc, #156]	@ (8017338 <I2C_ITListenCplt+0xac>)
 801729a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	2200      	movs	r2, #0
 80172a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2241      	movs	r2, #65	@ 0x41
 80172a6:	2120      	movs	r1, #32
 80172a8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	2242      	movs	r2, #66	@ 0x42
 80172ae:	2100      	movs	r1, #0
 80172b0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	2200      	movs	r2, #0
 80172b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	089b      	lsrs	r3, r3, #2
 80172bc:	001a      	movs	r2, r3
 80172be:	2301      	movs	r3, #1
 80172c0:	4013      	ands	r3, r2
 80172c2:	d022      	beq.n	801730a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172ce:	b2d2      	uxtb	r2, r2
 80172d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172d6:	1c5a      	adds	r2, r3, #1
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d012      	beq.n	801730a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80172e8:	3b01      	subs	r3, #1
 80172ea:	b29a      	uxth	r2, r3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80172f4:	b29b      	uxth	r3, r3
 80172f6:	3b01      	subs	r3, #1
 80172f8:	b29a      	uxth	r2, r3
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017302:	2204      	movs	r2, #4
 8017304:	431a      	orrs	r2, r3
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801730a:	4a0c      	ldr	r2, [pc, #48]	@ (801733c <I2C_ITListenCplt+0xb0>)
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	0011      	movs	r1, r2
 8017310:	0018      	movs	r0, r3
 8017312:	f000 fd55 	bl	8017dc0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	2210      	movs	r2, #16
 801731c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	2240      	movs	r2, #64	@ 0x40
 8017322:	2100      	movs	r1, #0
 8017324:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	0018      	movs	r0, r3
 801732a:	f7fe fe5b 	bl	8015fe4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801732e:	46c0      	nop			@ (mov r8, r8)
 8017330:	46bd      	mov	sp, r7
 8017332:	b002      	add	sp, #8
 8017334:	bd80      	pop	{r7, pc}
 8017336:	46c0      	nop			@ (mov r8, r8)
 8017338:	ffff0000 	.word	0xffff0000
 801733c:	00008003 	.word	0x00008003

08017340 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b084      	sub	sp, #16
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
 8017348:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801734a:	200f      	movs	r0, #15
 801734c:	183b      	adds	r3, r7, r0
 801734e:	687a      	ldr	r2, [r7, #4]
 8017350:	2141      	movs	r1, #65	@ 0x41
 8017352:	5c52      	ldrb	r2, [r2, r1]
 8017354:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	2242      	movs	r2, #66	@ 0x42
 801735a:	2100      	movs	r1, #0
 801735c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	4a72      	ldr	r2, [pc, #456]	@ (801752c <I2C_ITError+0x1ec>)
 8017362:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2200      	movs	r2, #0
 8017368:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801736e:	683b      	ldr	r3, [r7, #0]
 8017370:	431a      	orrs	r2, r3
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8017376:	183b      	adds	r3, r7, r0
 8017378:	781b      	ldrb	r3, [r3, #0]
 801737a:	2b28      	cmp	r3, #40	@ 0x28
 801737c:	d007      	beq.n	801738e <I2C_ITError+0x4e>
 801737e:	183b      	adds	r3, r7, r0
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	2b29      	cmp	r3, #41	@ 0x29
 8017384:	d003      	beq.n	801738e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8017386:	183b      	adds	r3, r7, r0
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	2b2a      	cmp	r3, #42	@ 0x2a
 801738c:	d10c      	bne.n	80173a8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	2103      	movs	r1, #3
 8017392:	0018      	movs	r0, r3
 8017394:	f000 fd14 	bl	8017dc0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	2241      	movs	r2, #65	@ 0x41
 801739c:	2128      	movs	r1, #40	@ 0x28
 801739e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	4a63      	ldr	r2, [pc, #396]	@ (8017530 <I2C_ITError+0x1f0>)
 80173a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80173a6:	e032      	b.n	801740e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80173a8:	4a62      	ldr	r2, [pc, #392]	@ (8017534 <I2C_ITError+0x1f4>)
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	0011      	movs	r1, r2
 80173ae:	0018      	movs	r0, r3
 80173b0:	f000 fd06 	bl	8017dc0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	0018      	movs	r0, r3
 80173b8:	f000 f8ed 	bl	8017596 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	2241      	movs	r2, #65	@ 0x41
 80173c0:	5c9b      	ldrb	r3, [r3, r2]
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	2b60      	cmp	r3, #96	@ 0x60
 80173c6:	d01f      	beq.n	8017408 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2241      	movs	r2, #65	@ 0x41
 80173cc:	2120      	movs	r1, #32
 80173ce:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	699b      	ldr	r3, [r3, #24]
 80173d6:	2220      	movs	r2, #32
 80173d8:	4013      	ands	r3, r2
 80173da:	2b20      	cmp	r3, #32
 80173dc:	d114      	bne.n	8017408 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	699b      	ldr	r3, [r3, #24]
 80173e4:	2210      	movs	r2, #16
 80173e6:	4013      	ands	r3, r2
 80173e8:	2b10      	cmp	r3, #16
 80173ea:	d109      	bne.n	8017400 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	2210      	movs	r2, #16
 80173f2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173f8:	2204      	movs	r2, #4
 80173fa:	431a      	orrs	r2, r3
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	2220      	movs	r2, #32
 8017406:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	2200      	movs	r2, #0
 801740c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017412:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017418:	2b00      	cmp	r3, #0
 801741a:	d03b      	beq.n	8017494 <I2C_ITError+0x154>
 801741c:	68bb      	ldr	r3, [r7, #8]
 801741e:	2b11      	cmp	r3, #17
 8017420:	d002      	beq.n	8017428 <I2C_ITError+0xe8>
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	2b21      	cmp	r3, #33	@ 0x21
 8017426:	d135      	bne.n	8017494 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	681a      	ldr	r2, [r3, #0]
 801742e:	2380      	movs	r3, #128	@ 0x80
 8017430:	01db      	lsls	r3, r3, #7
 8017432:	401a      	ands	r2, r3
 8017434:	2380      	movs	r3, #128	@ 0x80
 8017436:	01db      	lsls	r3, r3, #7
 8017438:	429a      	cmp	r2, r3
 801743a:	d107      	bne.n	801744c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	681a      	ldr	r2, [r3, #0]
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	493c      	ldr	r1, [pc, #240]	@ (8017538 <I2C_ITError+0x1f8>)
 8017448:	400a      	ands	r2, r1
 801744a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017450:	0018      	movs	r0, r3
 8017452:	f7fd fa56 	bl	8014902 <HAL_DMA_GetState>
 8017456:	0003      	movs	r3, r0
 8017458:	2b01      	cmp	r3, #1
 801745a:	d016      	beq.n	801748a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017460:	4a36      	ldr	r2, [pc, #216]	@ (801753c <I2C_ITError+0x1fc>)
 8017462:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	2240      	movs	r2, #64	@ 0x40
 8017468:	2100      	movs	r1, #0
 801746a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017470:	0018      	movs	r0, r3
 8017472:	f7fd f951 	bl	8014718 <HAL_DMA_Abort_IT>
 8017476:	1e03      	subs	r3, r0, #0
 8017478:	d051      	beq.n	801751e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801747e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017484:	0018      	movs	r0, r3
 8017486:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017488:	e049      	b.n	801751e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	0018      	movs	r0, r3
 801748e:	f000 f859 	bl	8017544 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017492:	e044      	b.n	801751e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017498:	2b00      	cmp	r3, #0
 801749a:	d03b      	beq.n	8017514 <I2C_ITError+0x1d4>
 801749c:	68bb      	ldr	r3, [r7, #8]
 801749e:	2b12      	cmp	r3, #18
 80174a0:	d002      	beq.n	80174a8 <I2C_ITError+0x168>
 80174a2:	68bb      	ldr	r3, [r7, #8]
 80174a4:	2b22      	cmp	r3, #34	@ 0x22
 80174a6:	d135      	bne.n	8017514 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	681a      	ldr	r2, [r3, #0]
 80174ae:	2380      	movs	r3, #128	@ 0x80
 80174b0:	021b      	lsls	r3, r3, #8
 80174b2:	401a      	ands	r2, r3
 80174b4:	2380      	movs	r3, #128	@ 0x80
 80174b6:	021b      	lsls	r3, r3, #8
 80174b8:	429a      	cmp	r2, r3
 80174ba:	d107      	bne.n	80174cc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	681a      	ldr	r2, [r3, #0]
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	491e      	ldr	r1, [pc, #120]	@ (8017540 <I2C_ITError+0x200>)
 80174c8:	400a      	ands	r2, r1
 80174ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174d0:	0018      	movs	r0, r3
 80174d2:	f7fd fa16 	bl	8014902 <HAL_DMA_GetState>
 80174d6:	0003      	movs	r3, r0
 80174d8:	2b01      	cmp	r3, #1
 80174da:	d016      	beq.n	801750a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174e0:	4a16      	ldr	r2, [pc, #88]	@ (801753c <I2C_ITError+0x1fc>)
 80174e2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2240      	movs	r2, #64	@ 0x40
 80174e8:	2100      	movs	r1, #0
 80174ea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174f0:	0018      	movs	r0, r3
 80174f2:	f7fd f911 	bl	8014718 <HAL_DMA_Abort_IT>
 80174f6:	1e03      	subs	r3, r0, #0
 80174f8:	d013      	beq.n	8017522 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017504:	0018      	movs	r0, r3
 8017506:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017508:	e00b      	b.n	8017522 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	0018      	movs	r0, r3
 801750e:	f000 f819 	bl	8017544 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017512:	e006      	b.n	8017522 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	0018      	movs	r0, r3
 8017518:	f000 f814 	bl	8017544 <I2C_TreatErrorCallback>
  }
}
 801751c:	e002      	b.n	8017524 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801751e:	46c0      	nop			@ (mov r8, r8)
 8017520:	e000      	b.n	8017524 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017522:	46c0      	nop			@ (mov r8, r8)
}
 8017524:	46c0      	nop			@ (mov r8, r8)
 8017526:	46bd      	mov	sp, r7
 8017528:	b004      	add	sp, #16
 801752a:	bd80      	pop	{r7, pc}
 801752c:	ffff0000 	.word	0xffff0000
 8017530:	080162b9 	.word	0x080162b9
 8017534:	00008003 	.word	0x00008003
 8017538:	ffffbfff 	.word	0xffffbfff
 801753c:	0801774f 	.word	0x0801774f
 8017540:	ffff7fff 	.word	0xffff7fff

08017544 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b082      	sub	sp, #8
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2241      	movs	r2, #65	@ 0x41
 8017550:	5c9b      	ldrb	r3, [r3, r2]
 8017552:	b2db      	uxtb	r3, r3
 8017554:	2b60      	cmp	r3, #96	@ 0x60
 8017556:	d10f      	bne.n	8017578 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	2241      	movs	r2, #65	@ 0x41
 801755c:	2120      	movs	r1, #32
 801755e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	2200      	movs	r2, #0
 8017564:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	2240      	movs	r2, #64	@ 0x40
 801756a:	2100      	movs	r1, #0
 801756c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	0018      	movs	r0, r3
 8017572:	f7fe fd57 	bl	8016024 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017576:	e00a      	b.n	801758e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	2200      	movs	r2, #0
 801757c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	2240      	movs	r2, #64	@ 0x40
 8017582:	2100      	movs	r1, #0
 8017584:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	0018      	movs	r0, r3
 801758a:	f7fe fd43 	bl	8016014 <HAL_I2C_ErrorCallback>
}
 801758e:	46c0      	nop			@ (mov r8, r8)
 8017590:	46bd      	mov	sp, r7
 8017592:	b002      	add	sp, #8
 8017594:	bd80      	pop	{r7, pc}

08017596 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8017596:	b580      	push	{r7, lr}
 8017598:	b082      	sub	sp, #8
 801759a:	af00      	add	r7, sp, #0
 801759c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	699b      	ldr	r3, [r3, #24]
 80175a4:	2202      	movs	r2, #2
 80175a6:	4013      	ands	r3, r2
 80175a8:	2b02      	cmp	r3, #2
 80175aa:	d103      	bne.n	80175b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	2200      	movs	r2, #0
 80175b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	681b      	ldr	r3, [r3, #0]
 80175b8:	699b      	ldr	r3, [r3, #24]
 80175ba:	2201      	movs	r2, #1
 80175bc:	4013      	ands	r3, r2
 80175be:	2b01      	cmp	r3, #1
 80175c0:	d007      	beq.n	80175d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	699a      	ldr	r2, [r3, #24]
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	2101      	movs	r1, #1
 80175ce:	430a      	orrs	r2, r1
 80175d0:	619a      	str	r2, [r3, #24]
  }
}
 80175d2:	46c0      	nop			@ (mov r8, r8)
 80175d4:	46bd      	mov	sp, r7
 80175d6:	b002      	add	sp, #8
 80175d8:	bd80      	pop	{r7, pc}
	...

080175dc <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b084      	sub	sp, #16
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175e8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	681a      	ldr	r2, [r3, #0]
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	4920      	ldr	r1, [pc, #128]	@ (8017678 <I2C_DMAMasterTransmitCplt+0x9c>)
 80175f6:	400a      	ands	r2, r1
 80175f8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175fe:	b29b      	uxth	r3, r3
 8017600:	2b00      	cmp	r3, #0
 8017602:	d105      	bne.n	8017610 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	2120      	movs	r1, #32
 8017608:	0018      	movs	r0, r3
 801760a:	f000 fb4b 	bl	8017ca4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801760e:	e02e      	b.n	801766e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017614:	68fa      	ldr	r2, [r7, #12]
 8017616:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8017618:	189a      	adds	r2, r3, r2
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017622:	b29b      	uxth	r3, r3
 8017624:	2bff      	cmp	r3, #255	@ 0xff
 8017626:	d903      	bls.n	8017630 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	22ff      	movs	r2, #255	@ 0xff
 801762c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801762e:	e004      	b.n	801763a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017634:	b29a      	uxth	r2, r3
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017642:	0019      	movs	r1, r3
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	3328      	adds	r3, #40	@ 0x28
 801764a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8017650:	f7fc ffbc 	bl	80145cc <HAL_DMA_Start_IT>
 8017654:	1e03      	subs	r3, r0, #0
 8017656:	d005      	beq.n	8017664 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8017658:	68fb      	ldr	r3, [r7, #12]
 801765a:	2110      	movs	r1, #16
 801765c:	0018      	movs	r0, r3
 801765e:	f7ff fe6f 	bl	8017340 <I2C_ITError>
}
 8017662:	e004      	b.n	801766e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	2140      	movs	r1, #64	@ 0x40
 8017668:	0018      	movs	r0, r3
 801766a:	f000 fb1b 	bl	8017ca4 <I2C_Enable_IRQ>
}
 801766e:	46c0      	nop			@ (mov r8, r8)
 8017670:	46bd      	mov	sp, r7
 8017672:	b004      	add	sp, #16
 8017674:	bd80      	pop	{r7, pc}
 8017676:	46c0      	nop			@ (mov r8, r8)
 8017678:	ffffbfff 	.word	0xffffbfff

0801767c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b084      	sub	sp, #16
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017688:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	681a      	ldr	r2, [r3, #0]
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	4920      	ldr	r1, [pc, #128]	@ (8017718 <I2C_DMAMasterReceiveCplt+0x9c>)
 8017696:	400a      	ands	r2, r1
 8017698:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801769e:	b29b      	uxth	r3, r3
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d105      	bne.n	80176b0 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	2120      	movs	r1, #32
 80176a8:	0018      	movs	r0, r3
 80176aa:	f000 fafb 	bl	8017ca4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80176ae:	e02e      	b.n	801770e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176b4:	68fa      	ldr	r2, [r7, #12]
 80176b6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80176b8:	189a      	adds	r2, r3, r2
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176c2:	b29b      	uxth	r3, r3
 80176c4:	2bff      	cmp	r3, #255	@ 0xff
 80176c6:	d903      	bls.n	80176d0 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	22ff      	movs	r2, #255	@ 0xff
 80176cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80176ce:	e004      	b.n	80176da <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176d4:	b29a      	uxth	r2, r3
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	3324      	adds	r3, #36	@ 0x24
 80176e4:	0019      	movs	r1, r3
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176ea:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80176f0:	f7fc ff6c 	bl	80145cc <HAL_DMA_Start_IT>
 80176f4:	1e03      	subs	r3, r0, #0
 80176f6:	d005      	beq.n	8017704 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	2110      	movs	r1, #16
 80176fc:	0018      	movs	r0, r3
 80176fe:	f7ff fe1f 	bl	8017340 <I2C_ITError>
}
 8017702:	e004      	b.n	801770e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	2140      	movs	r1, #64	@ 0x40
 8017708:	0018      	movs	r0, r3
 801770a:	f000 facb 	bl	8017ca4 <I2C_Enable_IRQ>
}
 801770e:	46c0      	nop			@ (mov r8, r8)
 8017710:	46bd      	mov	sp, r7
 8017712:	b004      	add	sp, #16
 8017714:	bd80      	pop	{r7, pc}
 8017716:	46c0      	nop			@ (mov r8, r8)
 8017718:	ffff7fff 	.word	0xffff7fff

0801771c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b084      	sub	sp, #16
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017728:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	685a      	ldr	r2, [r3, #4]
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	2180      	movs	r1, #128	@ 0x80
 8017736:	0209      	lsls	r1, r1, #8
 8017738:	430a      	orrs	r2, r1
 801773a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	2110      	movs	r1, #16
 8017740:	0018      	movs	r0, r3
 8017742:	f7ff fdfd 	bl	8017340 <I2C_ITError>
}
 8017746:	46c0      	nop			@ (mov r8, r8)
 8017748:	46bd      	mov	sp, r7
 801774a:	b004      	add	sp, #16
 801774c:	bd80      	pop	{r7, pc}

0801774e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801774e:	b580      	push	{r7, lr}
 8017750:	b084      	sub	sp, #16
 8017752:	af00      	add	r7, sp, #0
 8017754:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801775a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017760:	2b00      	cmp	r3, #0
 8017762:	d003      	beq.n	801776c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017768:	2200      	movs	r2, #0
 801776a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017770:	2b00      	cmp	r3, #0
 8017772:	d003      	beq.n	801777c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017778:	2200      	movs	r2, #0
 801777a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	0018      	movs	r0, r3
 8017780:	f7ff fee0 	bl	8017544 <I2C_TreatErrorCallback>
}
 8017784:	46c0      	nop			@ (mov r8, r8)
 8017786:	46bd      	mov	sp, r7
 8017788:	b004      	add	sp, #16
 801778a:	bd80      	pop	{r7, pc}

0801778c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b084      	sub	sp, #16
 8017790:	af00      	add	r7, sp, #0
 8017792:	60f8      	str	r0, [r7, #12]
 8017794:	60b9      	str	r1, [r7, #8]
 8017796:	603b      	str	r3, [r7, #0]
 8017798:	1dfb      	adds	r3, r7, #7
 801779a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801779c:	e030      	b.n	8017800 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801779e:	683b      	ldr	r3, [r7, #0]
 80177a0:	3301      	adds	r3, #1
 80177a2:	d02d      	beq.n	8017800 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80177a4:	f7fc f9c0 	bl	8013b28 <HAL_GetTick>
 80177a8:	0002      	movs	r2, r0
 80177aa:	69bb      	ldr	r3, [r7, #24]
 80177ac:	1ad3      	subs	r3, r2, r3
 80177ae:	683a      	ldr	r2, [r7, #0]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d302      	bcc.n	80177ba <I2C_WaitOnFlagUntilTimeout+0x2e>
 80177b4:	683b      	ldr	r3, [r7, #0]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d122      	bne.n	8017800 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	699b      	ldr	r3, [r3, #24]
 80177c0:	68ba      	ldr	r2, [r7, #8]
 80177c2:	4013      	ands	r3, r2
 80177c4:	68ba      	ldr	r2, [r7, #8]
 80177c6:	1ad3      	subs	r3, r2, r3
 80177c8:	425a      	negs	r2, r3
 80177ca:	4153      	adcs	r3, r2
 80177cc:	b2db      	uxtb	r3, r3
 80177ce:	001a      	movs	r2, r3
 80177d0:	1dfb      	adds	r3, r7, #7
 80177d2:	781b      	ldrb	r3, [r3, #0]
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d113      	bne.n	8017800 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177dc:	2220      	movs	r2, #32
 80177de:	431a      	orrs	r2, r3
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	2241      	movs	r2, #65	@ 0x41
 80177e8:	2120      	movs	r1, #32
 80177ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	2242      	movs	r2, #66	@ 0x42
 80177f0:	2100      	movs	r1, #0
 80177f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	2240      	movs	r2, #64	@ 0x40
 80177f8:	2100      	movs	r1, #0
 80177fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80177fc:	2301      	movs	r3, #1
 80177fe:	e00f      	b.n	8017820 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	699b      	ldr	r3, [r3, #24]
 8017806:	68ba      	ldr	r2, [r7, #8]
 8017808:	4013      	ands	r3, r2
 801780a:	68ba      	ldr	r2, [r7, #8]
 801780c:	1ad3      	subs	r3, r2, r3
 801780e:	425a      	negs	r2, r3
 8017810:	4153      	adcs	r3, r2
 8017812:	b2db      	uxtb	r3, r3
 8017814:	001a      	movs	r2, r3
 8017816:	1dfb      	adds	r3, r7, #7
 8017818:	781b      	ldrb	r3, [r3, #0]
 801781a:	429a      	cmp	r2, r3
 801781c:	d0bf      	beq.n	801779e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801781e:	2300      	movs	r3, #0
}
 8017820:	0018      	movs	r0, r3
 8017822:	46bd      	mov	sp, r7
 8017824:	b004      	add	sp, #16
 8017826:	bd80      	pop	{r7, pc}

08017828 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b084      	sub	sp, #16
 801782c:	af00      	add	r7, sp, #0
 801782e:	60f8      	str	r0, [r7, #12]
 8017830:	60b9      	str	r1, [r7, #8]
 8017832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017834:	e032      	b.n	801789c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8017836:	687a      	ldr	r2, [r7, #4]
 8017838:	68b9      	ldr	r1, [r7, #8]
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	0018      	movs	r0, r3
 801783e:	f000 f8ff 	bl	8017a40 <I2C_IsErrorOccurred>
 8017842:	1e03      	subs	r3, r0, #0
 8017844:	d001      	beq.n	801784a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8017846:	2301      	movs	r3, #1
 8017848:	e030      	b.n	80178ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801784a:	68bb      	ldr	r3, [r7, #8]
 801784c:	3301      	adds	r3, #1
 801784e:	d025      	beq.n	801789c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017850:	f7fc f96a 	bl	8013b28 <HAL_GetTick>
 8017854:	0002      	movs	r2, r0
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	1ad3      	subs	r3, r2, r3
 801785a:	68ba      	ldr	r2, [r7, #8]
 801785c:	429a      	cmp	r2, r3
 801785e:	d302      	bcc.n	8017866 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8017860:	68bb      	ldr	r3, [r7, #8]
 8017862:	2b00      	cmp	r3, #0
 8017864:	d11a      	bne.n	801789c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	699b      	ldr	r3, [r3, #24]
 801786c:	2202      	movs	r2, #2
 801786e:	4013      	ands	r3, r2
 8017870:	2b02      	cmp	r3, #2
 8017872:	d013      	beq.n	801789c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017878:	2220      	movs	r2, #32
 801787a:	431a      	orrs	r2, r3
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	2241      	movs	r2, #65	@ 0x41
 8017884:	2120      	movs	r1, #32
 8017886:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	2242      	movs	r2, #66	@ 0x42
 801788c:	2100      	movs	r1, #0
 801788e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	2240      	movs	r2, #64	@ 0x40
 8017894:	2100      	movs	r1, #0
 8017896:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8017898:	2301      	movs	r3, #1
 801789a:	e007      	b.n	80178ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	699b      	ldr	r3, [r3, #24]
 80178a2:	2202      	movs	r2, #2
 80178a4:	4013      	ands	r3, r2
 80178a6:	2b02      	cmp	r3, #2
 80178a8:	d1c5      	bne.n	8017836 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80178aa:	2300      	movs	r3, #0
}
 80178ac:	0018      	movs	r0, r3
 80178ae:	46bd      	mov	sp, r7
 80178b0:	b004      	add	sp, #16
 80178b2:	bd80      	pop	{r7, pc}

080178b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b084      	sub	sp, #16
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	60f8      	str	r0, [r7, #12]
 80178bc:	60b9      	str	r1, [r7, #8]
 80178be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80178c0:	e02f      	b.n	8017922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80178c2:	687a      	ldr	r2, [r7, #4]
 80178c4:	68b9      	ldr	r1, [r7, #8]
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	0018      	movs	r0, r3
 80178ca:	f000 f8b9 	bl	8017a40 <I2C_IsErrorOccurred>
 80178ce:	1e03      	subs	r3, r0, #0
 80178d0:	d001      	beq.n	80178d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80178d2:	2301      	movs	r3, #1
 80178d4:	e02d      	b.n	8017932 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80178d6:	f7fc f927 	bl	8013b28 <HAL_GetTick>
 80178da:	0002      	movs	r2, r0
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	1ad3      	subs	r3, r2, r3
 80178e0:	68ba      	ldr	r2, [r7, #8]
 80178e2:	429a      	cmp	r2, r3
 80178e4:	d302      	bcc.n	80178ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d11a      	bne.n	8017922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	699b      	ldr	r3, [r3, #24]
 80178f2:	2220      	movs	r2, #32
 80178f4:	4013      	ands	r3, r2
 80178f6:	2b20      	cmp	r3, #32
 80178f8:	d013      	beq.n	8017922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178fe:	2220      	movs	r2, #32
 8017900:	431a      	orrs	r2, r3
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	2241      	movs	r2, #65	@ 0x41
 801790a:	2120      	movs	r1, #32
 801790c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	2242      	movs	r2, #66	@ 0x42
 8017912:	2100      	movs	r1, #0
 8017914:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	2240      	movs	r2, #64	@ 0x40
 801791a:	2100      	movs	r1, #0
 801791c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801791e:	2301      	movs	r3, #1
 8017920:	e007      	b.n	8017932 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	699b      	ldr	r3, [r3, #24]
 8017928:	2220      	movs	r2, #32
 801792a:	4013      	ands	r3, r2
 801792c:	2b20      	cmp	r3, #32
 801792e:	d1c8      	bne.n	80178c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017930:	2300      	movs	r3, #0
}
 8017932:	0018      	movs	r0, r3
 8017934:	46bd      	mov	sp, r7
 8017936:	b004      	add	sp, #16
 8017938:	bd80      	pop	{r7, pc}
	...

0801793c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801793c:	b580      	push	{r7, lr}
 801793e:	b084      	sub	sp, #16
 8017940:	af00      	add	r7, sp, #0
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017948:	e06b      	b.n	8017a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801794a:	687a      	ldr	r2, [r7, #4]
 801794c:	68b9      	ldr	r1, [r7, #8]
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	0018      	movs	r0, r3
 8017952:	f000 f875 	bl	8017a40 <I2C_IsErrorOccurred>
 8017956:	1e03      	subs	r3, r0, #0
 8017958:	d001      	beq.n	801795e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801795a:	2301      	movs	r3, #1
 801795c:	e069      	b.n	8017a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	699b      	ldr	r3, [r3, #24]
 8017964:	2220      	movs	r2, #32
 8017966:	4013      	ands	r3, r2
 8017968:	2b20      	cmp	r3, #32
 801796a:	d138      	bne.n	80179de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	699b      	ldr	r3, [r3, #24]
 8017972:	2204      	movs	r2, #4
 8017974:	4013      	ands	r3, r2
 8017976:	2b04      	cmp	r3, #4
 8017978:	d105      	bne.n	8017986 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801797e:	2b00      	cmp	r3, #0
 8017980:	d001      	beq.n	8017986 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8017982:	2300      	movs	r3, #0
 8017984:	e055      	b.n	8017a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	699b      	ldr	r3, [r3, #24]
 801798c:	2210      	movs	r2, #16
 801798e:	4013      	ands	r3, r2
 8017990:	2b10      	cmp	r3, #16
 8017992:	d107      	bne.n	80179a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	2210      	movs	r2, #16
 801799a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	2204      	movs	r2, #4
 80179a0:	645a      	str	r2, [r3, #68]	@ 0x44
 80179a2:	e002      	b.n	80179aa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	2200      	movs	r2, #0
 80179a8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	2220      	movs	r2, #32
 80179b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	685a      	ldr	r2, [r3, #4]
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	491f      	ldr	r1, [pc, #124]	@ (8017a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80179be:	400a      	ands	r2, r1
 80179c0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	2241      	movs	r2, #65	@ 0x41
 80179c6:	2120      	movs	r1, #32
 80179c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	2242      	movs	r2, #66	@ 0x42
 80179ce:	2100      	movs	r1, #0
 80179d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	2240      	movs	r2, #64	@ 0x40
 80179d6:	2100      	movs	r1, #0
 80179d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80179da:	2301      	movs	r3, #1
 80179dc:	e029      	b.n	8017a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80179de:	f7fc f8a3 	bl	8013b28 <HAL_GetTick>
 80179e2:	0002      	movs	r2, r0
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	1ad3      	subs	r3, r2, r3
 80179e8:	68ba      	ldr	r2, [r7, #8]
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d302      	bcc.n	80179f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d116      	bne.n	8017a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	699b      	ldr	r3, [r3, #24]
 80179fa:	2204      	movs	r2, #4
 80179fc:	4013      	ands	r3, r2
 80179fe:	2b04      	cmp	r3, #4
 8017a00:	d00f      	beq.n	8017a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a06:	2220      	movs	r2, #32
 8017a08:	431a      	orrs	r2, r3
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	2241      	movs	r2, #65	@ 0x41
 8017a12:	2120      	movs	r1, #32
 8017a14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	2240      	movs	r2, #64	@ 0x40
 8017a1a:	2100      	movs	r1, #0
 8017a1c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017a1e:	2301      	movs	r3, #1
 8017a20:	e007      	b.n	8017a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	699b      	ldr	r3, [r3, #24]
 8017a28:	2204      	movs	r2, #4
 8017a2a:	4013      	ands	r3, r2
 8017a2c:	2b04      	cmp	r3, #4
 8017a2e:	d18c      	bne.n	801794a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017a30:	2300      	movs	r3, #0
}
 8017a32:	0018      	movs	r0, r3
 8017a34:	46bd      	mov	sp, r7
 8017a36:	b004      	add	sp, #16
 8017a38:	bd80      	pop	{r7, pc}
 8017a3a:	46c0      	nop			@ (mov r8, r8)
 8017a3c:	fe00e800 	.word	0xfe00e800

08017a40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b08a      	sub	sp, #40	@ 0x28
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	60f8      	str	r0, [r7, #12]
 8017a48:	60b9      	str	r1, [r7, #8]
 8017a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017a4c:	2327      	movs	r3, #39	@ 0x27
 8017a4e:	18fb      	adds	r3, r7, r3
 8017a50:	2200      	movs	r2, #0
 8017a52:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	699b      	ldr	r3, [r3, #24]
 8017a5a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017a64:	69bb      	ldr	r3, [r7, #24]
 8017a66:	2210      	movs	r2, #16
 8017a68:	4013      	ands	r3, r2
 8017a6a:	d100      	bne.n	8017a6e <I2C_IsErrorOccurred+0x2e>
 8017a6c:	e079      	b.n	8017b62 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	2210      	movs	r2, #16
 8017a74:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017a76:	e057      	b.n	8017b28 <I2C_IsErrorOccurred+0xe8>
 8017a78:	2227      	movs	r2, #39	@ 0x27
 8017a7a:	18bb      	adds	r3, r7, r2
 8017a7c:	18ba      	adds	r2, r7, r2
 8017a7e:	7812      	ldrb	r2, [r2, #0]
 8017a80:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017a82:	68bb      	ldr	r3, [r7, #8]
 8017a84:	3301      	adds	r3, #1
 8017a86:	d04f      	beq.n	8017b28 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017a88:	f7fc f84e 	bl	8013b28 <HAL_GetTick>
 8017a8c:	0002      	movs	r2, r0
 8017a8e:	69fb      	ldr	r3, [r7, #28]
 8017a90:	1ad3      	subs	r3, r2, r3
 8017a92:	68ba      	ldr	r2, [r7, #8]
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d302      	bcc.n	8017a9e <I2C_IsErrorOccurred+0x5e>
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d144      	bne.n	8017b28 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	685a      	ldr	r2, [r3, #4]
 8017aa4:	2380      	movs	r3, #128	@ 0x80
 8017aa6:	01db      	lsls	r3, r3, #7
 8017aa8:	4013      	ands	r3, r2
 8017aaa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8017aac:	2013      	movs	r0, #19
 8017aae:	183b      	adds	r3, r7, r0
 8017ab0:	68fa      	ldr	r2, [r7, #12]
 8017ab2:	2142      	movs	r1, #66	@ 0x42
 8017ab4:	5c52      	ldrb	r2, [r2, r1]
 8017ab6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	699a      	ldr	r2, [r3, #24]
 8017abe:	2380      	movs	r3, #128	@ 0x80
 8017ac0:	021b      	lsls	r3, r3, #8
 8017ac2:	401a      	ands	r2, r3
 8017ac4:	2380      	movs	r3, #128	@ 0x80
 8017ac6:	021b      	lsls	r3, r3, #8
 8017ac8:	429a      	cmp	r2, r3
 8017aca:	d126      	bne.n	8017b1a <I2C_IsErrorOccurred+0xda>
 8017acc:	697a      	ldr	r2, [r7, #20]
 8017ace:	2380      	movs	r3, #128	@ 0x80
 8017ad0:	01db      	lsls	r3, r3, #7
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d021      	beq.n	8017b1a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8017ad6:	183b      	adds	r3, r7, r0
 8017ad8:	781b      	ldrb	r3, [r3, #0]
 8017ada:	2b20      	cmp	r3, #32
 8017adc:	d01d      	beq.n	8017b1a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	685a      	ldr	r2, [r3, #4]
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	2180      	movs	r1, #128	@ 0x80
 8017aea:	01c9      	lsls	r1, r1, #7
 8017aec:	430a      	orrs	r2, r1
 8017aee:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8017af0:	f7fc f81a 	bl	8013b28 <HAL_GetTick>
 8017af4:	0003      	movs	r3, r0
 8017af6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017af8:	e00f      	b.n	8017b1a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8017afa:	f7fc f815 	bl	8013b28 <HAL_GetTick>
 8017afe:	0002      	movs	r2, r0
 8017b00:	69fb      	ldr	r3, [r7, #28]
 8017b02:	1ad3      	subs	r3, r2, r3
 8017b04:	2b19      	cmp	r3, #25
 8017b06:	d908      	bls.n	8017b1a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8017b08:	6a3b      	ldr	r3, [r7, #32]
 8017b0a:	2220      	movs	r2, #32
 8017b0c:	4313      	orrs	r3, r2
 8017b0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8017b10:	2327      	movs	r3, #39	@ 0x27
 8017b12:	18fb      	adds	r3, r7, r3
 8017b14:	2201      	movs	r2, #1
 8017b16:	701a      	strb	r2, [r3, #0]

              break;
 8017b18:	e006      	b.n	8017b28 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	699b      	ldr	r3, [r3, #24]
 8017b20:	2220      	movs	r2, #32
 8017b22:	4013      	ands	r3, r2
 8017b24:	2b20      	cmp	r3, #32
 8017b26:	d1e8      	bne.n	8017afa <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	699b      	ldr	r3, [r3, #24]
 8017b2e:	2220      	movs	r2, #32
 8017b30:	4013      	ands	r3, r2
 8017b32:	2b20      	cmp	r3, #32
 8017b34:	d004      	beq.n	8017b40 <I2C_IsErrorOccurred+0x100>
 8017b36:	2327      	movs	r3, #39	@ 0x27
 8017b38:	18fb      	adds	r3, r7, r3
 8017b3a:	781b      	ldrb	r3, [r3, #0]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d09b      	beq.n	8017a78 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8017b40:	2327      	movs	r3, #39	@ 0x27
 8017b42:	18fb      	adds	r3, r7, r3
 8017b44:	781b      	ldrb	r3, [r3, #0]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d103      	bne.n	8017b52 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	2220      	movs	r2, #32
 8017b50:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017b52:	6a3b      	ldr	r3, [r7, #32]
 8017b54:	2204      	movs	r2, #4
 8017b56:	4313      	orrs	r3, r2
 8017b58:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017b5a:	2327      	movs	r3, #39	@ 0x27
 8017b5c:	18fb      	adds	r3, r7, r3
 8017b5e:	2201      	movs	r2, #1
 8017b60:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	699b      	ldr	r3, [r3, #24]
 8017b68:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017b6a:	69ba      	ldr	r2, [r7, #24]
 8017b6c:	2380      	movs	r3, #128	@ 0x80
 8017b6e:	005b      	lsls	r3, r3, #1
 8017b70:	4013      	ands	r3, r2
 8017b72:	d00c      	beq.n	8017b8e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017b74:	6a3b      	ldr	r3, [r7, #32]
 8017b76:	2201      	movs	r2, #1
 8017b78:	4313      	orrs	r3, r2
 8017b7a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	2280      	movs	r2, #128	@ 0x80
 8017b82:	0052      	lsls	r2, r2, #1
 8017b84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017b86:	2327      	movs	r3, #39	@ 0x27
 8017b88:	18fb      	adds	r3, r7, r3
 8017b8a:	2201      	movs	r2, #1
 8017b8c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8017b8e:	69ba      	ldr	r2, [r7, #24]
 8017b90:	2380      	movs	r3, #128	@ 0x80
 8017b92:	00db      	lsls	r3, r3, #3
 8017b94:	4013      	ands	r3, r2
 8017b96:	d00c      	beq.n	8017bb2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8017b98:	6a3b      	ldr	r3, [r7, #32]
 8017b9a:	2208      	movs	r2, #8
 8017b9c:	4313      	orrs	r3, r2
 8017b9e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2280      	movs	r2, #128	@ 0x80
 8017ba6:	00d2      	lsls	r2, r2, #3
 8017ba8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017baa:	2327      	movs	r3, #39	@ 0x27
 8017bac:	18fb      	adds	r3, r7, r3
 8017bae:	2201      	movs	r2, #1
 8017bb0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8017bb2:	69ba      	ldr	r2, [r7, #24]
 8017bb4:	2380      	movs	r3, #128	@ 0x80
 8017bb6:	009b      	lsls	r3, r3, #2
 8017bb8:	4013      	ands	r3, r2
 8017bba:	d00c      	beq.n	8017bd6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8017bbc:	6a3b      	ldr	r3, [r7, #32]
 8017bbe:	2202      	movs	r2, #2
 8017bc0:	4313      	orrs	r3, r2
 8017bc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	2280      	movs	r2, #128	@ 0x80
 8017bca:	0092      	lsls	r2, r2, #2
 8017bcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017bce:	2327      	movs	r3, #39	@ 0x27
 8017bd0:	18fb      	adds	r3, r7, r3
 8017bd2:	2201      	movs	r2, #1
 8017bd4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8017bd6:	2327      	movs	r3, #39	@ 0x27
 8017bd8:	18fb      	adds	r3, r7, r3
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d01d      	beq.n	8017c1c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	0018      	movs	r0, r3
 8017be4:	f7ff fcd7 	bl	8017596 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	685a      	ldr	r2, [r3, #4]
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	490e      	ldr	r1, [pc, #56]	@ (8017c2c <I2C_IsErrorOccurred+0x1ec>)
 8017bf4:	400a      	ands	r2, r1
 8017bf6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017bfc:	6a3b      	ldr	r3, [r7, #32]
 8017bfe:	431a      	orrs	r2, r3
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	2241      	movs	r2, #65	@ 0x41
 8017c08:	2120      	movs	r1, #32
 8017c0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	2242      	movs	r2, #66	@ 0x42
 8017c10:	2100      	movs	r1, #0
 8017c12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	2240      	movs	r2, #64	@ 0x40
 8017c18:	2100      	movs	r1, #0
 8017c1a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8017c1c:	2327      	movs	r3, #39	@ 0x27
 8017c1e:	18fb      	adds	r3, r7, r3
 8017c20:	781b      	ldrb	r3, [r3, #0]
}
 8017c22:	0018      	movs	r0, r3
 8017c24:	46bd      	mov	sp, r7
 8017c26:	b00a      	add	sp, #40	@ 0x28
 8017c28:	bd80      	pop	{r7, pc}
 8017c2a:	46c0      	nop			@ (mov r8, r8)
 8017c2c:	fe00e800 	.word	0xfe00e800

08017c30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8017c30:	b590      	push	{r4, r7, lr}
 8017c32:	b087      	sub	sp, #28
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	60f8      	str	r0, [r7, #12]
 8017c38:	0008      	movs	r0, r1
 8017c3a:	0011      	movs	r1, r2
 8017c3c:	607b      	str	r3, [r7, #4]
 8017c3e:	240a      	movs	r4, #10
 8017c40:	193b      	adds	r3, r7, r4
 8017c42:	1c02      	adds	r2, r0, #0
 8017c44:	801a      	strh	r2, [r3, #0]
 8017c46:	2009      	movs	r0, #9
 8017c48:	183b      	adds	r3, r7, r0
 8017c4a:	1c0a      	adds	r2, r1, #0
 8017c4c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017c4e:	193b      	adds	r3, r7, r4
 8017c50:	881b      	ldrh	r3, [r3, #0]
 8017c52:	059b      	lsls	r3, r3, #22
 8017c54:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017c56:	183b      	adds	r3, r7, r0
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	0419      	lsls	r1, r3, #16
 8017c5c:	23ff      	movs	r3, #255	@ 0xff
 8017c5e:	041b      	lsls	r3, r3, #16
 8017c60:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017c62:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c6a:	4313      	orrs	r3, r2
 8017c6c:	005b      	lsls	r3, r3, #1
 8017c6e:	085b      	lsrs	r3, r3, #1
 8017c70:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	685b      	ldr	r3, [r3, #4]
 8017c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017c7a:	0d51      	lsrs	r1, r2, #21
 8017c7c:	2280      	movs	r2, #128	@ 0x80
 8017c7e:	00d2      	lsls	r2, r2, #3
 8017c80:	400a      	ands	r2, r1
 8017c82:	4907      	ldr	r1, [pc, #28]	@ (8017ca0 <I2C_TransferConfig+0x70>)
 8017c84:	430a      	orrs	r2, r1
 8017c86:	43d2      	mvns	r2, r2
 8017c88:	401a      	ands	r2, r3
 8017c8a:	0011      	movs	r1, r2
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	697a      	ldr	r2, [r7, #20]
 8017c92:	430a      	orrs	r2, r1
 8017c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8017c96:	46c0      	nop			@ (mov r8, r8)
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	b007      	add	sp, #28
 8017c9c:	bd90      	pop	{r4, r7, pc}
 8017c9e:	46c0      	nop			@ (mov r8, r8)
 8017ca0:	03ff63ff 	.word	0x03ff63ff

08017ca4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b084      	sub	sp, #16
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
 8017cac:	000a      	movs	r2, r1
 8017cae:	1cbb      	adds	r3, r7, #2
 8017cb0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017cba:	4b3e      	ldr	r3, [pc, #248]	@ (8017db4 <I2C_Enable_IRQ+0x110>)
 8017cbc:	429a      	cmp	r2, r3
 8017cbe:	d035      	beq.n	8017d2c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8017cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8017db8 <I2C_Enable_IRQ+0x114>)
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	d030      	beq.n	8017d2c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8017cce:	4b3b      	ldr	r3, [pc, #236]	@ (8017dbc <I2C_Enable_IRQ+0x118>)
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d02b      	beq.n	8017d2c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017cd4:	1cbb      	adds	r3, r7, #2
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	5e9b      	ldrsh	r3, [r3, r2]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	da03      	bge.n	8017ce6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	22b8      	movs	r2, #184	@ 0xb8
 8017ce2:	4313      	orrs	r3, r2
 8017ce4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017ce6:	1cbb      	adds	r3, r7, #2
 8017ce8:	881b      	ldrh	r3, [r3, #0]
 8017cea:	2201      	movs	r2, #1
 8017cec:	4013      	ands	r3, r2
 8017cee:	d003      	beq.n	8017cf8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	22f2      	movs	r2, #242	@ 0xf2
 8017cf4:	4313      	orrs	r3, r2
 8017cf6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017cf8:	1cbb      	adds	r3, r7, #2
 8017cfa:	881b      	ldrh	r3, [r3, #0]
 8017cfc:	2202      	movs	r2, #2
 8017cfe:	4013      	ands	r3, r2
 8017d00:	d003      	beq.n	8017d0a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	22f4      	movs	r2, #244	@ 0xf4
 8017d06:	4313      	orrs	r3, r2
 8017d08:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017d0a:	1cbb      	adds	r3, r7, #2
 8017d0c:	881b      	ldrh	r3, [r3, #0]
 8017d0e:	2b10      	cmp	r3, #16
 8017d10:	d103      	bne.n	8017d1a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	2290      	movs	r2, #144	@ 0x90
 8017d16:	4313      	orrs	r3, r2
 8017d18:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017d1a:	1cbb      	adds	r3, r7, #2
 8017d1c:	881b      	ldrh	r3, [r3, #0]
 8017d1e:	2b20      	cmp	r3, #32
 8017d20:	d13c      	bne.n	8017d9c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	2220      	movs	r2, #32
 8017d26:	4313      	orrs	r3, r2
 8017d28:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017d2a:	e037      	b.n	8017d9c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017d2c:	1cbb      	adds	r3, r7, #2
 8017d2e:	2200      	movs	r2, #0
 8017d30:	5e9b      	ldrsh	r3, [r3, r2]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	da03      	bge.n	8017d3e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	22b8      	movs	r2, #184	@ 0xb8
 8017d3a:	4313      	orrs	r3, r2
 8017d3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017d3e:	1cbb      	adds	r3, r7, #2
 8017d40:	881b      	ldrh	r3, [r3, #0]
 8017d42:	2201      	movs	r2, #1
 8017d44:	4013      	ands	r3, r2
 8017d46:	d003      	beq.n	8017d50 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	22f2      	movs	r2, #242	@ 0xf2
 8017d4c:	4313      	orrs	r3, r2
 8017d4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017d50:	1cbb      	adds	r3, r7, #2
 8017d52:	881b      	ldrh	r3, [r3, #0]
 8017d54:	2202      	movs	r2, #2
 8017d56:	4013      	ands	r3, r2
 8017d58:	d003      	beq.n	8017d62 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	22f4      	movs	r2, #244	@ 0xf4
 8017d5e:	4313      	orrs	r3, r2
 8017d60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017d62:	1cbb      	adds	r3, r7, #2
 8017d64:	881b      	ldrh	r3, [r3, #0]
 8017d66:	2b10      	cmp	r3, #16
 8017d68:	d103      	bne.n	8017d72 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	2290      	movs	r2, #144	@ 0x90
 8017d6e:	4313      	orrs	r3, r2
 8017d70:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017d72:	1cbb      	adds	r3, r7, #2
 8017d74:	881b      	ldrh	r3, [r3, #0]
 8017d76:	2b20      	cmp	r3, #32
 8017d78:	d103      	bne.n	8017d82 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	2260      	movs	r2, #96	@ 0x60
 8017d7e:	4313      	orrs	r3, r2
 8017d80:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017d86:	4b0d      	ldr	r3, [pc, #52]	@ (8017dbc <I2C_Enable_IRQ+0x118>)
 8017d88:	429a      	cmp	r2, r3
 8017d8a:	d007      	beq.n	8017d9c <I2C_Enable_IRQ+0xf8>
 8017d8c:	1cbb      	adds	r3, r7, #2
 8017d8e:	881b      	ldrh	r3, [r3, #0]
 8017d90:	2b40      	cmp	r3, #64	@ 0x40
 8017d92:	d103      	bne.n	8017d9c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	2240      	movs	r2, #64	@ 0x40
 8017d98:	4313      	orrs	r3, r2
 8017d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	6819      	ldr	r1, [r3, #0]
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	68fa      	ldr	r2, [r7, #12]
 8017da8:	430a      	orrs	r2, r1
 8017daa:	601a      	str	r2, [r3, #0]
}
 8017dac:	46c0      	nop			@ (mov r8, r8)
 8017dae:	46bd      	mov	sp, r7
 8017db0:	b004      	add	sp, #16
 8017db2:	bd80      	pop	{r7, pc}
 8017db4:	080164e1 	.word	0x080164e1
 8017db8:	08016959 	.word	0x08016959
 8017dbc:	080166f9 	.word	0x080166f9

08017dc0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b084      	sub	sp, #16
 8017dc4:	af00      	add	r7, sp, #0
 8017dc6:	6078      	str	r0, [r7, #4]
 8017dc8:	000a      	movs	r2, r1
 8017dca:	1cbb      	adds	r3, r7, #2
 8017dcc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8017dce:	2300      	movs	r3, #0
 8017dd0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017dd2:	1cbb      	adds	r3, r7, #2
 8017dd4:	881b      	ldrh	r3, [r3, #0]
 8017dd6:	2201      	movs	r2, #1
 8017dd8:	4013      	ands	r3, r2
 8017dda:	d010      	beq.n	8017dfe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	2242      	movs	r2, #66	@ 0x42
 8017de0:	4313      	orrs	r3, r2
 8017de2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	2241      	movs	r2, #65	@ 0x41
 8017de8:	5c9b      	ldrb	r3, [r3, r2]
 8017dea:	b2db      	uxtb	r3, r3
 8017dec:	001a      	movs	r2, r3
 8017dee:	2328      	movs	r3, #40	@ 0x28
 8017df0:	4013      	ands	r3, r2
 8017df2:	2b28      	cmp	r3, #40	@ 0x28
 8017df4:	d003      	beq.n	8017dfe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	22b0      	movs	r2, #176	@ 0xb0
 8017dfa:	4313      	orrs	r3, r2
 8017dfc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017dfe:	1cbb      	adds	r3, r7, #2
 8017e00:	881b      	ldrh	r3, [r3, #0]
 8017e02:	2202      	movs	r2, #2
 8017e04:	4013      	ands	r3, r2
 8017e06:	d010      	beq.n	8017e2a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	2244      	movs	r2, #68	@ 0x44
 8017e0c:	4313      	orrs	r3, r2
 8017e0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	2241      	movs	r2, #65	@ 0x41
 8017e14:	5c9b      	ldrb	r3, [r3, r2]
 8017e16:	b2db      	uxtb	r3, r3
 8017e18:	001a      	movs	r2, r3
 8017e1a:	2328      	movs	r3, #40	@ 0x28
 8017e1c:	4013      	ands	r3, r2
 8017e1e:	2b28      	cmp	r3, #40	@ 0x28
 8017e20:	d003      	beq.n	8017e2a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	22b0      	movs	r2, #176	@ 0xb0
 8017e26:	4313      	orrs	r3, r2
 8017e28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017e2a:	1cbb      	adds	r3, r7, #2
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	5e9b      	ldrsh	r3, [r3, r2]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	da03      	bge.n	8017e3c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	22b8      	movs	r2, #184	@ 0xb8
 8017e38:	4313      	orrs	r3, r2
 8017e3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017e3c:	1cbb      	adds	r3, r7, #2
 8017e3e:	881b      	ldrh	r3, [r3, #0]
 8017e40:	2b10      	cmp	r3, #16
 8017e42:	d103      	bne.n	8017e4c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	2290      	movs	r2, #144	@ 0x90
 8017e48:	4313      	orrs	r3, r2
 8017e4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017e4c:	1cbb      	adds	r3, r7, #2
 8017e4e:	881b      	ldrh	r3, [r3, #0]
 8017e50:	2b20      	cmp	r3, #32
 8017e52:	d103      	bne.n	8017e5c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	2220      	movs	r2, #32
 8017e58:	4313      	orrs	r3, r2
 8017e5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8017e5c:	1cbb      	adds	r3, r7, #2
 8017e5e:	881b      	ldrh	r3, [r3, #0]
 8017e60:	2b40      	cmp	r3, #64	@ 0x40
 8017e62:	d103      	bne.n	8017e6c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	2240      	movs	r2, #64	@ 0x40
 8017e68:	4313      	orrs	r3, r2
 8017e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	681a      	ldr	r2, [r3, #0]
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	43d9      	mvns	r1, r3
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	400a      	ands	r2, r1
 8017e7c:	601a      	str	r2, [r3, #0]
}
 8017e7e:	46c0      	nop			@ (mov r8, r8)
 8017e80:	46bd      	mov	sp, r7
 8017e82:	b004      	add	sp, #16
 8017e84:	bd80      	pop	{r7, pc}
	...

08017e88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	b082      	sub	sp, #8
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	6078      	str	r0, [r7, #4]
 8017e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	2241      	movs	r2, #65	@ 0x41
 8017e96:	5c9b      	ldrb	r3, [r3, r2]
 8017e98:	b2db      	uxtb	r3, r3
 8017e9a:	2b20      	cmp	r3, #32
 8017e9c:	d138      	bne.n	8017f10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	2240      	movs	r2, #64	@ 0x40
 8017ea2:	5c9b      	ldrb	r3, [r3, r2]
 8017ea4:	2b01      	cmp	r3, #1
 8017ea6:	d101      	bne.n	8017eac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8017ea8:	2302      	movs	r3, #2
 8017eaa:	e032      	b.n	8017f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	2240      	movs	r2, #64	@ 0x40
 8017eb0:	2101      	movs	r1, #1
 8017eb2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	2241      	movs	r2, #65	@ 0x41
 8017eb8:	2124      	movs	r1, #36	@ 0x24
 8017eba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	681a      	ldr	r2, [r3, #0]
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	2101      	movs	r1, #1
 8017ec8:	438a      	bics	r2, r1
 8017eca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	681a      	ldr	r2, [r3, #0]
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	4911      	ldr	r1, [pc, #68]	@ (8017f1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8017ed8:	400a      	ands	r2, r1
 8017eda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	6819      	ldr	r1, [r3, #0]
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	683a      	ldr	r2, [r7, #0]
 8017ee8:	430a      	orrs	r2, r1
 8017eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	681a      	ldr	r2, [r3, #0]
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	2101      	movs	r1, #1
 8017ef8:	430a      	orrs	r2, r1
 8017efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	2241      	movs	r2, #65	@ 0x41
 8017f00:	2120      	movs	r1, #32
 8017f02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	2240      	movs	r2, #64	@ 0x40
 8017f08:	2100      	movs	r1, #0
 8017f0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	e000      	b.n	8017f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017f10:	2302      	movs	r3, #2
  }
}
 8017f12:	0018      	movs	r0, r3
 8017f14:	46bd      	mov	sp, r7
 8017f16:	b002      	add	sp, #8
 8017f18:	bd80      	pop	{r7, pc}
 8017f1a:	46c0      	nop			@ (mov r8, r8)
 8017f1c:	ffffefff 	.word	0xffffefff

08017f20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b084      	sub	sp, #16
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
 8017f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	2241      	movs	r2, #65	@ 0x41
 8017f2e:	5c9b      	ldrb	r3, [r3, r2]
 8017f30:	b2db      	uxtb	r3, r3
 8017f32:	2b20      	cmp	r3, #32
 8017f34:	d139      	bne.n	8017faa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	2240      	movs	r2, #64	@ 0x40
 8017f3a:	5c9b      	ldrb	r3, [r3, r2]
 8017f3c:	2b01      	cmp	r3, #1
 8017f3e:	d101      	bne.n	8017f44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8017f40:	2302      	movs	r3, #2
 8017f42:	e033      	b.n	8017fac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	2240      	movs	r2, #64	@ 0x40
 8017f48:	2101      	movs	r1, #1
 8017f4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	2241      	movs	r2, #65	@ 0x41
 8017f50:	2124      	movs	r1, #36	@ 0x24
 8017f52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	681a      	ldr	r2, [r3, #0]
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	2101      	movs	r1, #1
 8017f60:	438a      	bics	r2, r1
 8017f62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	4a11      	ldr	r2, [pc, #68]	@ (8017fb4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8017f70:	4013      	ands	r3, r2
 8017f72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	021b      	lsls	r3, r3, #8
 8017f78:	68fa      	ldr	r2, [r7, #12]
 8017f7a:	4313      	orrs	r3, r2
 8017f7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	68fa      	ldr	r2, [r7, #12]
 8017f84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	681a      	ldr	r2, [r3, #0]
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	2101      	movs	r1, #1
 8017f92:	430a      	orrs	r2, r1
 8017f94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	2241      	movs	r2, #65	@ 0x41
 8017f9a:	2120      	movs	r1, #32
 8017f9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	2240      	movs	r2, #64	@ 0x40
 8017fa2:	2100      	movs	r1, #0
 8017fa4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	e000      	b.n	8017fac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8017faa:	2302      	movs	r3, #2
  }
}
 8017fac:	0018      	movs	r0, r3
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	b004      	add	sp, #16
 8017fb2:	bd80      	pop	{r7, pc}
 8017fb4:	fffff0ff 	.word	0xfffff0ff

08017fb8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b088      	sub	sp, #32
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d101      	bne.n	8017fca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8017fc6:	2301      	movs	r3, #1
 8017fc8:	e0e1      	b.n	801818e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	2235      	movs	r2, #53	@ 0x35
 8017fce:	5c9b      	ldrb	r3, [r3, r2]
 8017fd0:	b2db      	uxtb	r3, r3
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d107      	bne.n	8017fe6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	2234      	movs	r2, #52	@ 0x34
 8017fda:	2100      	movs	r1, #0
 8017fdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	0018      	movs	r0, r3
 8017fe2:	f7f3 ffef 	bl	800bfc4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	2235      	movs	r2, #53	@ 0x35
 8017fea:	2102      	movs	r1, #2
 8017fec:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	69da      	ldr	r2, [r3, #28]
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	4967      	ldr	r1, [pc, #412]	@ (8018198 <HAL_I2S_Init+0x1e0>)
 8017ffa:	400a      	ands	r2, r1
 8017ffc:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2202      	movs	r2, #2
 8018004:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	695b      	ldr	r3, [r3, #20]
 801800a:	2b02      	cmp	r3, #2
 801800c:	d073      	beq.n	80180f6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	68db      	ldr	r3, [r3, #12]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d102      	bne.n	801801c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018016:	2310      	movs	r3, #16
 8018018:	617b      	str	r3, [r7, #20]
 801801a:	e001      	b.n	8018020 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 801801c:	2320      	movs	r3, #32
 801801e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	689b      	ldr	r3, [r3, #8]
 8018024:	2b20      	cmp	r3, #32
 8018026:	d802      	bhi.n	801802e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	005b      	lsls	r3, r3, #1
 801802c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801802e:	f002 fed3 	bl	801add8 <HAL_RCC_GetSysClockFreq>
 8018032:	0003      	movs	r3, r0
 8018034:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	691a      	ldr	r2, [r3, #16]
 801803a:	2380      	movs	r3, #128	@ 0x80
 801803c:	009b      	lsls	r3, r3, #2
 801803e:	429a      	cmp	r2, r3
 8018040:	d131      	bne.n	80180a6 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	68db      	ldr	r3, [r3, #12]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d016      	beq.n	8018078 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801804a:	697b      	ldr	r3, [r7, #20]
 801804c:	009b      	lsls	r3, r3, #2
 801804e:	0019      	movs	r1, r3
 8018050:	68f8      	ldr	r0, [r7, #12]
 8018052:	f7e8 f8a7 	bl	80001a4 <__udivsi3>
 8018056:	0003      	movs	r3, r0
 8018058:	001a      	movs	r2, r3
 801805a:	0013      	movs	r3, r2
 801805c:	009b      	lsls	r3, r3, #2
 801805e:	189b      	adds	r3, r3, r2
 8018060:	005b      	lsls	r3, r3, #1
 8018062:	001a      	movs	r2, r3
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	695b      	ldr	r3, [r3, #20]
 8018068:	0019      	movs	r1, r3
 801806a:	0010      	movs	r0, r2
 801806c:	f7e8 f89a 	bl	80001a4 <__udivsi3>
 8018070:	0003      	movs	r3, r0
 8018072:	3305      	adds	r3, #5
 8018074:	613b      	str	r3, [r7, #16]
 8018076:	e02a      	b.n	80180ce <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018078:	697b      	ldr	r3, [r7, #20]
 801807a:	00db      	lsls	r3, r3, #3
 801807c:	0019      	movs	r1, r3
 801807e:	68f8      	ldr	r0, [r7, #12]
 8018080:	f7e8 f890 	bl	80001a4 <__udivsi3>
 8018084:	0003      	movs	r3, r0
 8018086:	001a      	movs	r2, r3
 8018088:	0013      	movs	r3, r2
 801808a:	009b      	lsls	r3, r3, #2
 801808c:	189b      	adds	r3, r3, r2
 801808e:	005b      	lsls	r3, r3, #1
 8018090:	001a      	movs	r2, r3
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	695b      	ldr	r3, [r3, #20]
 8018096:	0019      	movs	r1, r3
 8018098:	0010      	movs	r0, r2
 801809a:	f7e8 f883 	bl	80001a4 <__udivsi3>
 801809e:	0003      	movs	r3, r0
 80180a0:	3305      	adds	r3, #5
 80180a2:	613b      	str	r3, [r7, #16]
 80180a4:	e013      	b.n	80180ce <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80180a6:	6979      	ldr	r1, [r7, #20]
 80180a8:	68f8      	ldr	r0, [r7, #12]
 80180aa:	f7e8 f87b 	bl	80001a4 <__udivsi3>
 80180ae:	0003      	movs	r3, r0
 80180b0:	001a      	movs	r2, r3
 80180b2:	0013      	movs	r3, r2
 80180b4:	009b      	lsls	r3, r3, #2
 80180b6:	189b      	adds	r3, r3, r2
 80180b8:	005b      	lsls	r3, r3, #1
 80180ba:	001a      	movs	r2, r3
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	695b      	ldr	r3, [r3, #20]
 80180c0:	0019      	movs	r1, r3
 80180c2:	0010      	movs	r0, r2
 80180c4:	f7e8 f86e 	bl	80001a4 <__udivsi3>
 80180c8:	0003      	movs	r3, r0
 80180ca:	3305      	adds	r3, #5
 80180cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80180ce:	693b      	ldr	r3, [r7, #16]
 80180d0:	210a      	movs	r1, #10
 80180d2:	0018      	movs	r0, r3
 80180d4:	f7e8 f866 	bl	80001a4 <__udivsi3>
 80180d8:	0003      	movs	r3, r0
 80180da:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80180dc:	693b      	ldr	r3, [r7, #16]
 80180de:	2201      	movs	r2, #1
 80180e0:	4013      	ands	r3, r2
 80180e2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80180e4:	693a      	ldr	r2, [r7, #16]
 80180e6:	69bb      	ldr	r3, [r7, #24]
 80180e8:	1ad3      	subs	r3, r2, r3
 80180ea:	085b      	lsrs	r3, r3, #1
 80180ec:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80180ee:	69bb      	ldr	r3, [r7, #24]
 80180f0:	021b      	lsls	r3, r3, #8
 80180f2:	61bb      	str	r3, [r7, #24]
 80180f4:	e003      	b.n	80180fe <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80180f6:	2302      	movs	r3, #2
 80180f8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80180fa:	2300      	movs	r3, #0
 80180fc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80180fe:	69fb      	ldr	r3, [r7, #28]
 8018100:	2b01      	cmp	r3, #1
 8018102:	d902      	bls.n	801810a <HAL_I2S_Init+0x152>
 8018104:	69fb      	ldr	r3, [r7, #28]
 8018106:	2bff      	cmp	r3, #255	@ 0xff
 8018108:	d907      	bls.n	801811a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801810e:	2210      	movs	r2, #16
 8018110:	431a      	orrs	r2, r3
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8018116:	2301      	movs	r3, #1
 8018118:	e039      	b.n	801818e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	691a      	ldr	r2, [r3, #16]
 801811e:	69bb      	ldr	r3, [r7, #24]
 8018120:	431a      	orrs	r2, r3
 8018122:	0011      	movs	r1, r2
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	69fa      	ldr	r2, [r7, #28]
 801812a:	430a      	orrs	r2, r1
 801812c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	69db      	ldr	r3, [r3, #28]
 8018134:	4a18      	ldr	r2, [pc, #96]	@ (8018198 <HAL_I2S_Init+0x1e0>)
 8018136:	401a      	ands	r2, r3
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	6859      	ldr	r1, [r3, #4]
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	689b      	ldr	r3, [r3, #8]
 8018140:	4319      	orrs	r1, r3
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	68db      	ldr	r3, [r3, #12]
 8018146:	4319      	orrs	r1, r3
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	699b      	ldr	r3, [r3, #24]
 801814c:	430b      	orrs	r3, r1
 801814e:	431a      	orrs	r2, r3
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	2180      	movs	r1, #128	@ 0x80
 8018156:	0109      	lsls	r1, r1, #4
 8018158:	430a      	orrs	r2, r1
 801815a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	689b      	ldr	r3, [r3, #8]
 8018160:	2b30      	cmp	r3, #48	@ 0x30
 8018162:	d003      	beq.n	801816c <HAL_I2S_Init+0x1b4>
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	689b      	ldr	r3, [r3, #8]
 8018168:	2bb0      	cmp	r3, #176	@ 0xb0
 801816a:	d108      	bne.n	801817e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	69da      	ldr	r2, [r3, #28]
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	2180      	movs	r1, #128	@ 0x80
 8018178:	0149      	lsls	r1, r1, #5
 801817a:	430a      	orrs	r2, r1
 801817c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	2200      	movs	r2, #0
 8018182:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2235      	movs	r2, #53	@ 0x35
 8018188:	2101      	movs	r1, #1
 801818a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801818c:	2300      	movs	r3, #0
}
 801818e:	0018      	movs	r0, r3
 8018190:	46bd      	mov	sp, r7
 8018192:	b008      	add	sp, #32
 8018194:	bd80      	pop	{r7, pc}
 8018196:	46c0      	nop			@ (mov r8, r8)
 8018198:	fffff040 	.word	0xfffff040

0801819c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 801819c:	b580      	push	{r7, lr}
 801819e:	b086      	sub	sp, #24
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	60f8      	str	r0, [r7, #12]
 80181a4:	60b9      	str	r1, [r7, #8]
 80181a6:	1dbb      	adds	r3, r7, #6
 80181a8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80181aa:	68bb      	ldr	r3, [r7, #8]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d003      	beq.n	80181b8 <HAL_I2S_Receive_DMA+0x1c>
 80181b0:	1dbb      	adds	r3, r7, #6
 80181b2:	881b      	ldrh	r3, [r3, #0]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d101      	bne.n	80181bc <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80181b8:	2301      	movs	r3, #1
 80181ba:	e0a6      	b.n	801830a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	2234      	movs	r2, #52	@ 0x34
 80181c0:	5c9b      	ldrb	r3, [r3, r2]
 80181c2:	b2db      	uxtb	r3, r3
 80181c4:	2b01      	cmp	r3, #1
 80181c6:	d101      	bne.n	80181cc <HAL_I2S_Receive_DMA+0x30>
 80181c8:	2302      	movs	r3, #2
 80181ca:	e09e      	b.n	801830a <HAL_I2S_Receive_DMA+0x16e>
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	2234      	movs	r2, #52	@ 0x34
 80181d0:	2101      	movs	r1, #1
 80181d2:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	2235      	movs	r2, #53	@ 0x35
 80181d8:	5c9b      	ldrb	r3, [r3, r2]
 80181da:	b2db      	uxtb	r3, r3
 80181dc:	2b01      	cmp	r3, #1
 80181de:	d005      	beq.n	80181ec <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	2234      	movs	r2, #52	@ 0x34
 80181e4:	2100      	movs	r1, #0
 80181e6:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80181e8:	2302      	movs	r3, #2
 80181ea:	e08e      	b.n	801830a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	2235      	movs	r2, #53	@ 0x35
 80181f0:	2104      	movs	r1, #4
 80181f2:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	2200      	movs	r2, #0
 80181f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	68ba      	ldr	r2, [r7, #8]
 80181fe:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	69db      	ldr	r3, [r3, #28]
 8018206:	2207      	movs	r2, #7
 8018208:	4013      	ands	r3, r2
 801820a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 801820c:	697b      	ldr	r3, [r7, #20]
 801820e:	2b03      	cmp	r3, #3
 8018210:	d002      	beq.n	8018218 <HAL_I2S_Receive_DMA+0x7c>
 8018212:	697b      	ldr	r3, [r7, #20]
 8018214:	2b05      	cmp	r3, #5
 8018216:	d10c      	bne.n	8018232 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8018218:	1dbb      	adds	r3, r7, #6
 801821a:	881b      	ldrh	r3, [r3, #0]
 801821c:	18db      	adds	r3, r3, r3
 801821e:	b29a      	uxth	r2, r3
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8018224:	1dbb      	adds	r3, r7, #6
 8018226:	881b      	ldrh	r3, [r3, #0]
 8018228:	18db      	adds	r3, r3, r3
 801822a:	b29a      	uxth	r2, r3
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8018230:	e007      	b.n	8018242 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	1dba      	adds	r2, r7, #6
 8018236:	8812      	ldrh	r2, [r2, #0]
 8018238:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	1dba      	adds	r2, r7, #6
 801823e:	8812      	ldrh	r2, [r2, #0]
 8018240:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018246:	4a33      	ldr	r2, [pc, #204]	@ (8018314 <HAL_I2S_Receive_DMA+0x178>)
 8018248:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801824e:	4a32      	ldr	r2, [pc, #200]	@ (8018318 <HAL_I2S_Receive_DMA+0x17c>)
 8018250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018256:	4a31      	ldr	r2, [pc, #196]	@ (801831c <HAL_I2S_Receive_DMA+0x180>)
 8018258:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	69da      	ldr	r2, [r3, #28]
 8018260:	23c0      	movs	r3, #192	@ 0xc0
 8018262:	009b      	lsls	r3, r3, #2
 8018264:	401a      	ands	r2, r3
 8018266:	23c0      	movs	r3, #192	@ 0xc0
 8018268:	009b      	lsls	r3, r3, #2
 801826a:	429a      	cmp	r2, r3
 801826c:	d10a      	bne.n	8018284 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801826e:	2300      	movs	r3, #0
 8018270:	613b      	str	r3, [r7, #16]
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	68db      	ldr	r3, [r3, #12]
 8018278:	613b      	str	r3, [r7, #16]
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	689b      	ldr	r3, [r3, #8]
 8018280:	613b      	str	r3, [r7, #16]
 8018282:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	330c      	adds	r3, #12
 801828e:	0019      	movs	r1, r3
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018294:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801829a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 801829c:	f7fc f996 	bl	80145cc <HAL_DMA_Start_IT>
 80182a0:	1e03      	subs	r3, r0, #0
 80182a2:	d00f      	beq.n	80182c4 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80182a8:	2208      	movs	r2, #8
 80182aa:	431a      	orrs	r2, r3
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	2235      	movs	r2, #53	@ 0x35
 80182b4:	2101      	movs	r1, #1
 80182b6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	2234      	movs	r2, #52	@ 0x34
 80182bc:	2100      	movs	r1, #0
 80182be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80182c0:	2301      	movs	r3, #1
 80182c2:	e022      	b.n	801830a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	69da      	ldr	r2, [r3, #28]
 80182ca:	2380      	movs	r3, #128	@ 0x80
 80182cc:	00db      	lsls	r3, r3, #3
 80182ce:	4013      	ands	r3, r2
 80182d0:	d108      	bne.n	80182e4 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	69da      	ldr	r2, [r3, #28]
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	2180      	movs	r1, #128	@ 0x80
 80182de:	00c9      	lsls	r1, r1, #3
 80182e0:	430a      	orrs	r2, r1
 80182e2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	685b      	ldr	r3, [r3, #4]
 80182ea:	2201      	movs	r2, #1
 80182ec:	4013      	ands	r3, r2
 80182ee:	d107      	bne.n	8018300 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	685a      	ldr	r2, [r3, #4]
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	2101      	movs	r1, #1
 80182fc:	430a      	orrs	r2, r1
 80182fe:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	2234      	movs	r2, #52	@ 0x34
 8018304:	2100      	movs	r1, #0
 8018306:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8018308:	2300      	movs	r3, #0
}
 801830a:	0018      	movs	r0, r3
 801830c:	46bd      	mov	sp, r7
 801830e:	b006      	add	sp, #24
 8018310:	bd80      	pop	{r7, pc}
 8018312:	46c0      	nop			@ (mov r8, r8)
 8018314:	080184fd 	.word	0x080184fd
 8018318:	080184b9 	.word	0x080184b9
 801831c:	0801851b 	.word	0x0801851b

08018320 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8018320:	b580      	push	{r7, lr}
 8018322:	b086      	sub	sp, #24
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8018328:	2317      	movs	r3, #23
 801832a:	18fb      	adds	r3, r7, r3
 801832c:	2200      	movs	r2, #0
 801832e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	685a      	ldr	r2, [r3, #4]
 8018334:	2380      	movs	r3, #128	@ 0x80
 8018336:	009b      	lsls	r3, r3, #2
 8018338:	429a      	cmp	r2, r3
 801833a:	d003      	beq.n	8018344 <HAL_I2S_DMAStop+0x24>
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	685b      	ldr	r3, [r3, #4]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d158      	bne.n	80183f6 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018348:	2b00      	cmp	r3, #0
 801834a:	d010      	beq.n	801836e <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018350:	0018      	movs	r0, r3
 8018352:	f7fc f9a1 	bl	8014698 <HAL_DMA_Abort>
 8018356:	1e03      	subs	r3, r0, #0
 8018358:	d009      	beq.n	801836e <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801835e:	2208      	movs	r2, #8
 8018360:	431a      	orrs	r2, r3
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8018366:	2317      	movs	r3, #23
 8018368:	18fb      	adds	r3, r7, r3
 801836a:	2201      	movs	r2, #1
 801836c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801836e:	6878      	ldr	r0, [r7, #4]
 8018370:	2364      	movs	r3, #100	@ 0x64
 8018372:	2201      	movs	r2, #1
 8018374:	2102      	movs	r1, #2
 8018376:	f000 f8f7 	bl	8018568 <I2S_WaitFlagStateUntilTimeout>
 801837a:	1e03      	subs	r3, r0, #0
 801837c:	d00d      	beq.n	801839a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018382:	2201      	movs	r2, #1
 8018384:	431a      	orrs	r2, r3
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	2235      	movs	r2, #53	@ 0x35
 801838e:	2101      	movs	r1, #1
 8018390:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8018392:	2317      	movs	r3, #23
 8018394:	18fb      	adds	r3, r7, r3
 8018396:	2201      	movs	r2, #1
 8018398:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	2364      	movs	r3, #100	@ 0x64
 801839e:	2200      	movs	r2, #0
 80183a0:	2180      	movs	r1, #128	@ 0x80
 80183a2:	f000 f8e1 	bl	8018568 <I2S_WaitFlagStateUntilTimeout>
 80183a6:	1e03      	subs	r3, r0, #0
 80183a8:	d00d      	beq.n	80183c6 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183ae:	2201      	movs	r2, #1
 80183b0:	431a      	orrs	r2, r3
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	2235      	movs	r2, #53	@ 0x35
 80183ba:	2101      	movs	r1, #1
 80183bc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80183be:	2317      	movs	r3, #23
 80183c0:	18fb      	adds	r3, r7, r3
 80183c2:	2201      	movs	r2, #1
 80183c4:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	69da      	ldr	r2, [r3, #28]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	4938      	ldr	r1, [pc, #224]	@ (80184b4 <HAL_I2S_DMAStop+0x194>)
 80183d2:	400a      	ands	r2, r1
 80183d4:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80183d6:	2300      	movs	r3, #0
 80183d8:	613b      	str	r3, [r7, #16]
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	689b      	ldr	r3, [r3, #8]
 80183e0:	613b      	str	r3, [r7, #16]
 80183e2:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	685a      	ldr	r2, [r3, #4]
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	2102      	movs	r1, #2
 80183f0:	438a      	bics	r2, r1
 80183f2:	605a      	str	r2, [r3, #4]
 80183f4:	e053      	b.n	801849e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	685a      	ldr	r2, [r3, #4]
 80183fa:	23c0      	movs	r3, #192	@ 0xc0
 80183fc:	009b      	lsls	r3, r3, #2
 80183fe:	429a      	cmp	r2, r3
 8018400:	d005      	beq.n	801840e <HAL_I2S_DMAStop+0xee>
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	685a      	ldr	r2, [r3, #4]
 8018406:	2380      	movs	r3, #128	@ 0x80
 8018408:	005b      	lsls	r3, r3, #1
 801840a:	429a      	cmp	r2, r3
 801840c:	d147      	bne.n	801849e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018412:	2b00      	cmp	r3, #0
 8018414:	d010      	beq.n	8018438 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801841a:	0018      	movs	r0, r3
 801841c:	f7fc f93c 	bl	8014698 <HAL_DMA_Abort>
 8018420:	1e03      	subs	r3, r0, #0
 8018422:	d009      	beq.n	8018438 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018428:	2208      	movs	r2, #8
 801842a:	431a      	orrs	r2, r3
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8018430:	2317      	movs	r3, #23
 8018432:	18fb      	adds	r3, r7, r3
 8018434:	2201      	movs	r2, #1
 8018436:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	69da      	ldr	r2, [r3, #28]
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	491c      	ldr	r1, [pc, #112]	@ (80184b4 <HAL_I2S_DMAStop+0x194>)
 8018444:	400a      	ands	r2, r1
 8018446:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8018448:	2300      	movs	r3, #0
 801844a:	60fb      	str	r3, [r7, #12]
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	68db      	ldr	r3, [r3, #12]
 8018452:	60fb      	str	r3, [r7, #12]
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	689b      	ldr	r3, [r3, #8]
 801845a:	60fb      	str	r3, [r7, #12]
 801845c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	685a      	ldr	r2, [r3, #4]
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	2101      	movs	r1, #1
 801846a:	438a      	bics	r2, r1
 801846c:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	685a      	ldr	r2, [r3, #4]
 8018472:	2380      	movs	r3, #128	@ 0x80
 8018474:	005b      	lsls	r3, r3, #1
 8018476:	429a      	cmp	r2, r3
 8018478:	d10e      	bne.n	8018498 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801847e:	2240      	movs	r2, #64	@ 0x40
 8018480:	431a      	orrs	r2, r3
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	2235      	movs	r2, #53	@ 0x35
 801848a:	2101      	movs	r1, #1
 801848c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 801848e:	2317      	movs	r3, #23
 8018490:	18fb      	adds	r3, r7, r3
 8018492:	2201      	movs	r2, #1
 8018494:	701a      	strb	r2, [r3, #0]
 8018496:	e002      	b.n	801849e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	2235      	movs	r2, #53	@ 0x35
 80184a2:	2101      	movs	r1, #1
 80184a4:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80184a6:	2317      	movs	r3, #23
 80184a8:	18fb      	adds	r3, r7, r3
 80184aa:	781b      	ldrb	r3, [r3, #0]
}
 80184ac:	0018      	movs	r0, r3
 80184ae:	46bd      	mov	sp, r7
 80184b0:	b006      	add	sp, #24
 80184b2:	bd80      	pop	{r7, pc}
 80184b4:	fffffbff 	.word	0xfffffbff

080184b8 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b084      	sub	sp, #16
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184c4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	69db      	ldr	r3, [r3, #28]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d10e      	bne.n	80184ec <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	685a      	ldr	r2, [r3, #4]
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	2101      	movs	r1, #1
 80184da:	438a      	bics	r2, r1
 80184dc:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	2200      	movs	r2, #0
 80184e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	2235      	movs	r2, #53	@ 0x35
 80184e8:	2101      	movs	r1, #1
 80184ea:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	0018      	movs	r0, r3
 80184f0:	f7f8 fcc6 	bl	8010e80 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80184f4:	46c0      	nop			@ (mov r8, r8)
 80184f6:	46bd      	mov	sp, r7
 80184f8:	b004      	add	sp, #16
 80184fa:	bd80      	pop	{r7, pc}

080184fc <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b084      	sub	sp, #16
 8018500:	af00      	add	r7, sp, #0
 8018502:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018508:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	0018      	movs	r0, r3
 801850e:	f7f8 fca5 	bl	8010e5c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8018512:	46c0      	nop			@ (mov r8, r8)
 8018514:	46bd      	mov	sp, r7
 8018516:	b004      	add	sp, #16
 8018518:	bd80      	pop	{r7, pc}

0801851a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801851a:	b580      	push	{r7, lr}
 801851c:	b084      	sub	sp, #16
 801851e:	af00      	add	r7, sp, #0
 8018520:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018526:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	685a      	ldr	r2, [r3, #4]
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	2103      	movs	r1, #3
 8018534:	438a      	bics	r2, r1
 8018536:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	2200      	movs	r2, #0
 801853c:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	2200      	movs	r2, #0
 8018542:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	2235      	movs	r2, #53	@ 0x35
 8018548:	2101      	movs	r1, #1
 801854a:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018550:	2208      	movs	r2, #8
 8018552:	431a      	orrs	r2, r3
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	0018      	movs	r0, r3
 801855c:	f7f8 fcde 	bl	8010f1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8018560:	46c0      	nop			@ (mov r8, r8)
 8018562:	46bd      	mov	sp, r7
 8018564:	b004      	add	sp, #16
 8018566:	bd80      	pop	{r7, pc}

08018568 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b086      	sub	sp, #24
 801856c:	af00      	add	r7, sp, #0
 801856e:	60f8      	str	r0, [r7, #12]
 8018570:	60b9      	str	r1, [r7, #8]
 8018572:	603b      	str	r3, [r7, #0]
 8018574:	1dfb      	adds	r3, r7, #7
 8018576:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8018578:	f7fb fad6 	bl	8013b28 <HAL_GetTick>
 801857c:	0003      	movs	r3, r0
 801857e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8018580:	e017      	b.n	80185b2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8018582:	683b      	ldr	r3, [r7, #0]
 8018584:	3301      	adds	r3, #1
 8018586:	d014      	beq.n	80185b2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8018588:	f7fb face 	bl	8013b28 <HAL_GetTick>
 801858c:	0002      	movs	r2, r0
 801858e:	697b      	ldr	r3, [r7, #20]
 8018590:	1ad3      	subs	r3, r2, r3
 8018592:	683a      	ldr	r2, [r7, #0]
 8018594:	429a      	cmp	r2, r3
 8018596:	d902      	bls.n	801859e <I2S_WaitFlagStateUntilTimeout+0x36>
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d109      	bne.n	80185b2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	2235      	movs	r2, #53	@ 0x35
 80185a2:	2101      	movs	r1, #1
 80185a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	2234      	movs	r2, #52	@ 0x34
 80185aa:	2100      	movs	r1, #0
 80185ac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80185ae:	2303      	movs	r3, #3
 80185b0:	e00f      	b.n	80185d2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	689b      	ldr	r3, [r3, #8]
 80185b8:	68ba      	ldr	r2, [r7, #8]
 80185ba:	4013      	ands	r3, r2
 80185bc:	68ba      	ldr	r2, [r7, #8]
 80185be:	1ad3      	subs	r3, r2, r3
 80185c0:	425a      	negs	r2, r3
 80185c2:	4153      	adcs	r3, r2
 80185c4:	b2db      	uxtb	r3, r3
 80185c6:	001a      	movs	r2, r3
 80185c8:	1dfb      	adds	r3, r7, #7
 80185ca:	781b      	ldrb	r3, [r3, #0]
 80185cc:	429a      	cmp	r2, r3
 80185ce:	d1d8      	bne.n	8018582 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80185d0:	2300      	movs	r3, #0
}
 80185d2:	0018      	movs	r0, r3
 80185d4:	46bd      	mov	sp, r7
 80185d6:	b006      	add	sp, #24
 80185d8:	bd80      	pop	{r7, pc}
	...

080185dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80185dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185de:	b08b      	sub	sp, #44	@ 0x2c
 80185e0:	af06      	add	r7, sp, #24
 80185e2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d101      	bne.n	80185ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80185ea:	2301      	movs	r3, #1
 80185ec:	e0f0      	b.n	80187d0 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	4a79      	ldr	r2, [pc, #484]	@ (80187d8 <HAL_PCD_Init+0x1fc>)
 80185f2:	5c9b      	ldrb	r3, [r3, r2]
 80185f4:	b2db      	uxtb	r3, r3
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d108      	bne.n	801860c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80185fa:	687a      	ldr	r2, [r7, #4]
 80185fc:	23aa      	movs	r3, #170	@ 0xaa
 80185fe:	009b      	lsls	r3, r3, #2
 8018600:	2100      	movs	r1, #0
 8018602:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	0018      	movs	r0, r3
 8018608:	f009 ff4c 	bl	80224a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	4a72      	ldr	r2, [pc, #456]	@ (80187d8 <HAL_PCD_Init+0x1fc>)
 8018610:	2103      	movs	r1, #3
 8018612:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	0018      	movs	r0, r3
 801861a:	f005 fefd 	bl	801e418 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801861e:	230f      	movs	r3, #15
 8018620:	18fb      	adds	r3, r7, r3
 8018622:	2200      	movs	r2, #0
 8018624:	701a      	strb	r2, [r3, #0]
 8018626:	e049      	b.n	80186bc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8018628:	200f      	movs	r0, #15
 801862a:	183b      	adds	r3, r7, r0
 801862c:	781b      	ldrb	r3, [r3, #0]
 801862e:	6879      	ldr	r1, [r7, #4]
 8018630:	1c5a      	adds	r2, r3, #1
 8018632:	0013      	movs	r3, r2
 8018634:	009b      	lsls	r3, r3, #2
 8018636:	189b      	adds	r3, r3, r2
 8018638:	00db      	lsls	r3, r3, #3
 801863a:	18cb      	adds	r3, r1, r3
 801863c:	3301      	adds	r3, #1
 801863e:	2201      	movs	r2, #1
 8018640:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8018642:	183b      	adds	r3, r7, r0
 8018644:	781b      	ldrb	r3, [r3, #0]
 8018646:	6879      	ldr	r1, [r7, #4]
 8018648:	1c5a      	adds	r2, r3, #1
 801864a:	0013      	movs	r3, r2
 801864c:	009b      	lsls	r3, r3, #2
 801864e:	189b      	adds	r3, r3, r2
 8018650:	00db      	lsls	r3, r3, #3
 8018652:	183a      	adds	r2, r7, r0
 8018654:	7812      	ldrb	r2, [r2, #0]
 8018656:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8018658:	183b      	adds	r3, r7, r0
 801865a:	781b      	ldrb	r3, [r3, #0]
 801865c:	6879      	ldr	r1, [r7, #4]
 801865e:	1c5a      	adds	r2, r3, #1
 8018660:	0013      	movs	r3, r2
 8018662:	009b      	lsls	r3, r3, #2
 8018664:	189b      	adds	r3, r3, r2
 8018666:	00db      	lsls	r3, r3, #3
 8018668:	18cb      	adds	r3, r1, r3
 801866a:	3303      	adds	r3, #3
 801866c:	2200      	movs	r2, #0
 801866e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8018670:	183b      	adds	r3, r7, r0
 8018672:	781a      	ldrb	r2, [r3, #0]
 8018674:	6879      	ldr	r1, [r7, #4]
 8018676:	0013      	movs	r3, r2
 8018678:	009b      	lsls	r3, r3, #2
 801867a:	189b      	adds	r3, r3, r2
 801867c:	00db      	lsls	r3, r3, #3
 801867e:	18cb      	adds	r3, r1, r3
 8018680:	3338      	adds	r3, #56	@ 0x38
 8018682:	2200      	movs	r2, #0
 8018684:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8018686:	183b      	adds	r3, r7, r0
 8018688:	781a      	ldrb	r2, [r3, #0]
 801868a:	6879      	ldr	r1, [r7, #4]
 801868c:	0013      	movs	r3, r2
 801868e:	009b      	lsls	r3, r3, #2
 8018690:	189b      	adds	r3, r3, r2
 8018692:	00db      	lsls	r3, r3, #3
 8018694:	18cb      	adds	r3, r1, r3
 8018696:	333c      	adds	r3, #60	@ 0x3c
 8018698:	2200      	movs	r2, #0
 801869a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801869c:	183b      	adds	r3, r7, r0
 801869e:	781a      	ldrb	r2, [r3, #0]
 80186a0:	6879      	ldr	r1, [r7, #4]
 80186a2:	0013      	movs	r3, r2
 80186a4:	009b      	lsls	r3, r3, #2
 80186a6:	189b      	adds	r3, r3, r2
 80186a8:	00db      	lsls	r3, r3, #3
 80186aa:	18cb      	adds	r3, r1, r3
 80186ac:	3340      	adds	r3, #64	@ 0x40
 80186ae:	2200      	movs	r2, #0
 80186b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80186b2:	183b      	adds	r3, r7, r0
 80186b4:	781a      	ldrb	r2, [r3, #0]
 80186b6:	183b      	adds	r3, r7, r0
 80186b8:	3201      	adds	r2, #1
 80186ba:	701a      	strb	r2, [r3, #0]
 80186bc:	210f      	movs	r1, #15
 80186be:	187b      	adds	r3, r7, r1
 80186c0:	781a      	ldrb	r2, [r3, #0]
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	685b      	ldr	r3, [r3, #4]
 80186c6:	429a      	cmp	r2, r3
 80186c8:	d3ae      	bcc.n	8018628 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80186ca:	187b      	adds	r3, r7, r1
 80186cc:	2200      	movs	r2, #0
 80186ce:	701a      	strb	r2, [r3, #0]
 80186d0:	e056      	b.n	8018780 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80186d2:	240f      	movs	r4, #15
 80186d4:	193b      	adds	r3, r7, r4
 80186d6:	781a      	ldrb	r2, [r3, #0]
 80186d8:	6878      	ldr	r0, [r7, #4]
 80186da:	236a      	movs	r3, #106	@ 0x6a
 80186dc:	33ff      	adds	r3, #255	@ 0xff
 80186de:	0019      	movs	r1, r3
 80186e0:	0013      	movs	r3, r2
 80186e2:	009b      	lsls	r3, r3, #2
 80186e4:	189b      	adds	r3, r3, r2
 80186e6:	00db      	lsls	r3, r3, #3
 80186e8:	18c3      	adds	r3, r0, r3
 80186ea:	185b      	adds	r3, r3, r1
 80186ec:	2200      	movs	r2, #0
 80186ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80186f0:	193b      	adds	r3, r7, r4
 80186f2:	781a      	ldrb	r2, [r3, #0]
 80186f4:	6878      	ldr	r0, [r7, #4]
 80186f6:	23b4      	movs	r3, #180	@ 0xb4
 80186f8:	0059      	lsls	r1, r3, #1
 80186fa:	0013      	movs	r3, r2
 80186fc:	009b      	lsls	r3, r3, #2
 80186fe:	189b      	adds	r3, r3, r2
 8018700:	00db      	lsls	r3, r3, #3
 8018702:	18c3      	adds	r3, r0, r3
 8018704:	185b      	adds	r3, r3, r1
 8018706:	193a      	adds	r2, r7, r4
 8018708:	7812      	ldrb	r2, [r2, #0]
 801870a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801870c:	193b      	adds	r3, r7, r4
 801870e:	781a      	ldrb	r2, [r3, #0]
 8018710:	6878      	ldr	r0, [r7, #4]
 8018712:	236c      	movs	r3, #108	@ 0x6c
 8018714:	33ff      	adds	r3, #255	@ 0xff
 8018716:	0019      	movs	r1, r3
 8018718:	0013      	movs	r3, r2
 801871a:	009b      	lsls	r3, r3, #2
 801871c:	189b      	adds	r3, r3, r2
 801871e:	00db      	lsls	r3, r3, #3
 8018720:	18c3      	adds	r3, r0, r3
 8018722:	185b      	adds	r3, r3, r1
 8018724:	2200      	movs	r2, #0
 8018726:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8018728:	193b      	adds	r3, r7, r4
 801872a:	781a      	ldrb	r2, [r3, #0]
 801872c:	6878      	ldr	r0, [r7, #4]
 801872e:	23bc      	movs	r3, #188	@ 0xbc
 8018730:	0059      	lsls	r1, r3, #1
 8018732:	0013      	movs	r3, r2
 8018734:	009b      	lsls	r3, r3, #2
 8018736:	189b      	adds	r3, r3, r2
 8018738:	00db      	lsls	r3, r3, #3
 801873a:	18c3      	adds	r3, r0, r3
 801873c:	185b      	adds	r3, r3, r1
 801873e:	2200      	movs	r2, #0
 8018740:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8018742:	193b      	adds	r3, r7, r4
 8018744:	781a      	ldrb	r2, [r3, #0]
 8018746:	6878      	ldr	r0, [r7, #4]
 8018748:	23be      	movs	r3, #190	@ 0xbe
 801874a:	0059      	lsls	r1, r3, #1
 801874c:	0013      	movs	r3, r2
 801874e:	009b      	lsls	r3, r3, #2
 8018750:	189b      	adds	r3, r3, r2
 8018752:	00db      	lsls	r3, r3, #3
 8018754:	18c3      	adds	r3, r0, r3
 8018756:	185b      	adds	r3, r3, r1
 8018758:	2200      	movs	r2, #0
 801875a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801875c:	193b      	adds	r3, r7, r4
 801875e:	781a      	ldrb	r2, [r3, #0]
 8018760:	6878      	ldr	r0, [r7, #4]
 8018762:	23c0      	movs	r3, #192	@ 0xc0
 8018764:	0059      	lsls	r1, r3, #1
 8018766:	0013      	movs	r3, r2
 8018768:	009b      	lsls	r3, r3, #2
 801876a:	189b      	adds	r3, r3, r2
 801876c:	00db      	lsls	r3, r3, #3
 801876e:	18c3      	adds	r3, r0, r3
 8018770:	185b      	adds	r3, r3, r1
 8018772:	2200      	movs	r2, #0
 8018774:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018776:	193b      	adds	r3, r7, r4
 8018778:	781a      	ldrb	r2, [r3, #0]
 801877a:	193b      	adds	r3, r7, r4
 801877c:	3201      	adds	r2, #1
 801877e:	701a      	strb	r2, [r3, #0]
 8018780:	230f      	movs	r3, #15
 8018782:	18fb      	adds	r3, r7, r3
 8018784:	781a      	ldrb	r2, [r3, #0]
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	685b      	ldr	r3, [r3, #4]
 801878a:	429a      	cmp	r2, r3
 801878c:	d3a1      	bcc.n	80186d2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	6818      	ldr	r0, [r3, #0]
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	466a      	mov	r2, sp
 8018796:	0011      	movs	r1, r2
 8018798:	001a      	movs	r2, r3
 801879a:	3210      	adds	r2, #16
 801879c:	ca70      	ldmia	r2!, {r4, r5, r6}
 801879e:	c170      	stmia	r1!, {r4, r5, r6}
 80187a0:	ca30      	ldmia	r2!, {r4, r5}
 80187a2:	c130      	stmia	r1!, {r4, r5}
 80187a4:	6859      	ldr	r1, [r3, #4]
 80187a6:	689a      	ldr	r2, [r3, #8]
 80187a8:	68db      	ldr	r3, [r3, #12]
 80187aa:	f005 fe4f 	bl	801e44c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	2224      	movs	r2, #36	@ 0x24
 80187b2:	2100      	movs	r1, #0
 80187b4:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	4a07      	ldr	r2, [pc, #28]	@ (80187d8 <HAL_PCD_Init+0x1fc>)
 80187ba:	2101      	movs	r1, #1
 80187bc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	69db      	ldr	r3, [r3, #28]
 80187c2:	2b01      	cmp	r3, #1
 80187c4:	d103      	bne.n	80187ce <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	0018      	movs	r0, r3
 80187ca:	f001 fd23 	bl	801a214 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80187ce:	2300      	movs	r3, #0
}
 80187d0:	0018      	movs	r0, r3
 80187d2:	46bd      	mov	sp, r7
 80187d4:	b005      	add	sp, #20
 80187d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187d8:	000002a9 	.word	0x000002a9

080187dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b082      	sub	sp, #8
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80187e4:	687a      	ldr	r2, [r7, #4]
 80187e6:	23aa      	movs	r3, #170	@ 0xaa
 80187e8:	009b      	lsls	r3, r3, #2
 80187ea:	5cd3      	ldrb	r3, [r2, r3]
 80187ec:	2b01      	cmp	r3, #1
 80187ee:	d101      	bne.n	80187f4 <HAL_PCD_Start+0x18>
 80187f0:	2302      	movs	r3, #2
 80187f2:	e014      	b.n	801881e <HAL_PCD_Start+0x42>
 80187f4:	687a      	ldr	r2, [r7, #4]
 80187f6:	23aa      	movs	r3, #170	@ 0xaa
 80187f8:	009b      	lsls	r3, r3, #2
 80187fa:	2101      	movs	r1, #1
 80187fc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	0018      	movs	r0, r3
 8018804:	f005 fdf2 	bl	801e3ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	0018      	movs	r0, r3
 801880e:	f007 fdf5 	bl	80203fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8018812:	687a      	ldr	r2, [r7, #4]
 8018814:	23aa      	movs	r3, #170	@ 0xaa
 8018816:	009b      	lsls	r3, r3, #2
 8018818:	2100      	movs	r1, #0
 801881a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 801881c:	2300      	movs	r3, #0
}
 801881e:	0018      	movs	r0, r3
 8018820:	46bd      	mov	sp, r7
 8018822:	b002      	add	sp, #8
 8018824:	bd80      	pop	{r7, pc}
	...

08018828 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8018828:	b580      	push	{r7, lr}
 801882a:	b084      	sub	sp, #16
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	0018      	movs	r0, r3
 8018836:	f007 fdf7 	bl	8020428 <USB_ReadInterrupts>
 801883a:	0003      	movs	r3, r0
 801883c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801883e:	68fa      	ldr	r2, [r7, #12]
 8018840:	2380      	movs	r3, #128	@ 0x80
 8018842:	021b      	lsls	r3, r3, #8
 8018844:	4013      	ands	r3, r2
 8018846:	d004      	beq.n	8018852 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	0018      	movs	r0, r3
 801884c:	f000 fb62 	bl	8018f14 <PCD_EP_ISR_Handler>

    return;
 8018850:	e11d      	b.n	8018a8e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8018852:	68fa      	ldr	r2, [r7, #12]
 8018854:	2380      	movs	r3, #128	@ 0x80
 8018856:	00db      	lsls	r3, r3, #3
 8018858:	4013      	ands	r3, r2
 801885a:	d015      	beq.n	8018888 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	2244      	movs	r2, #68	@ 0x44
 8018862:	5a9b      	ldrh	r3, [r3, r2]
 8018864:	b29a      	uxth	r2, r3
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	498a      	ldr	r1, [pc, #552]	@ (8018a94 <HAL_PCD_IRQHandler+0x26c>)
 801886c:	400a      	ands	r2, r1
 801886e:	b291      	uxth	r1, r2
 8018870:	2244      	movs	r2, #68	@ 0x44
 8018872:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	0018      	movs	r0, r3
 8018878:	f009 fe97 	bl	80225aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	2100      	movs	r1, #0
 8018880:	0018      	movs	r0, r3
 8018882:	f000 f915 	bl	8018ab0 <HAL_PCD_SetAddress>

    return;
 8018886:	e102      	b.n	8018a8e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8018888:	68fa      	ldr	r2, [r7, #12]
 801888a:	2380      	movs	r3, #128	@ 0x80
 801888c:	01db      	lsls	r3, r3, #7
 801888e:	4013      	ands	r3, r2
 8018890:	d00c      	beq.n	80188ac <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	2244      	movs	r2, #68	@ 0x44
 8018898:	5a9b      	ldrh	r3, [r3, r2]
 801889a:	b29a      	uxth	r2, r3
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	497d      	ldr	r1, [pc, #500]	@ (8018a98 <HAL_PCD_IRQHandler+0x270>)
 80188a2:	400a      	ands	r2, r1
 80188a4:	b291      	uxth	r1, r2
 80188a6:	2244      	movs	r2, #68	@ 0x44
 80188a8:	5299      	strh	r1, [r3, r2]

    return;
 80188aa:	e0f0      	b.n	8018a8e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80188ac:	68fa      	ldr	r2, [r7, #12]
 80188ae:	2380      	movs	r3, #128	@ 0x80
 80188b0:	019b      	lsls	r3, r3, #6
 80188b2:	4013      	ands	r3, r2
 80188b4:	d00c      	beq.n	80188d0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	2244      	movs	r2, #68	@ 0x44
 80188bc:	5a9b      	ldrh	r3, [r3, r2]
 80188be:	b29a      	uxth	r2, r3
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	4975      	ldr	r1, [pc, #468]	@ (8018a9c <HAL_PCD_IRQHandler+0x274>)
 80188c6:	400a      	ands	r2, r1
 80188c8:	b291      	uxth	r1, r2
 80188ca:	2244      	movs	r2, #68	@ 0x44
 80188cc:	5299      	strh	r1, [r3, r2]

    return;
 80188ce:	e0de      	b.n	8018a8e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80188d0:	68fa      	ldr	r2, [r7, #12]
 80188d2:	2380      	movs	r3, #128	@ 0x80
 80188d4:	015b      	lsls	r3, r3, #5
 80188d6:	4013      	ands	r3, r2
 80188d8:	d038      	beq.n	801894c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	2240      	movs	r2, #64	@ 0x40
 80188e0:	5a9b      	ldrh	r3, [r3, r2]
 80188e2:	b29a      	uxth	r2, r3
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	2104      	movs	r1, #4
 80188ea:	438a      	bics	r2, r1
 80188ec:	b291      	uxth	r1, r2
 80188ee:	2240      	movs	r2, #64	@ 0x40
 80188f0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	2240      	movs	r2, #64	@ 0x40
 80188f8:	5a9b      	ldrh	r3, [r3, r2]
 80188fa:	b29a      	uxth	r2, r3
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	2108      	movs	r1, #8
 8018902:	438a      	bics	r2, r1
 8018904:	b291      	uxth	r1, r2
 8018906:	2240      	movs	r2, #64	@ 0x40
 8018908:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801890a:	687a      	ldr	r2, [r7, #4]
 801890c:	23b8      	movs	r3, #184	@ 0xb8
 801890e:	009b      	lsls	r3, r3, #2
 8018910:	5cd3      	ldrb	r3, [r2, r3]
 8018912:	2b01      	cmp	r3, #1
 8018914:	d109      	bne.n	801892a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8018916:	687a      	ldr	r2, [r7, #4]
 8018918:	23b8      	movs	r3, #184	@ 0xb8
 801891a:	009b      	lsls	r3, r3, #2
 801891c:	2100      	movs	r1, #0
 801891e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2100      	movs	r1, #0
 8018924:	0018      	movs	r0, r3
 8018926:	f001 fc9f 	bl	801a268 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	0018      	movs	r0, r3
 801892e:	f009 fe7d 	bl	802262c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	2244      	movs	r2, #68	@ 0x44
 8018938:	5a9b      	ldrh	r3, [r3, r2]
 801893a:	b29a      	uxth	r2, r3
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	4957      	ldr	r1, [pc, #348]	@ (8018aa0 <HAL_PCD_IRQHandler+0x278>)
 8018942:	400a      	ands	r2, r1
 8018944:	b291      	uxth	r1, r2
 8018946:	2244      	movs	r2, #68	@ 0x44
 8018948:	5299      	strh	r1, [r3, r2]

    return;
 801894a:	e0a0      	b.n	8018a8e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 801894c:	68fa      	ldr	r2, [r7, #12]
 801894e:	2380      	movs	r3, #128	@ 0x80
 8018950:	011b      	lsls	r3, r3, #4
 8018952:	4013      	ands	r3, r2
 8018954:	d028      	beq.n	80189a8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	2240      	movs	r2, #64	@ 0x40
 801895c:	5a9b      	ldrh	r3, [r3, r2]
 801895e:	b29a      	uxth	r2, r3
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	2108      	movs	r1, #8
 8018966:	430a      	orrs	r2, r1
 8018968:	b291      	uxth	r1, r2
 801896a:	2240      	movs	r2, #64	@ 0x40
 801896c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	2244      	movs	r2, #68	@ 0x44
 8018974:	5a9b      	ldrh	r3, [r3, r2]
 8018976:	b29a      	uxth	r2, r3
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	4949      	ldr	r1, [pc, #292]	@ (8018aa4 <HAL_PCD_IRQHandler+0x27c>)
 801897e:	400a      	ands	r2, r1
 8018980:	b291      	uxth	r1, r2
 8018982:	2244      	movs	r2, #68	@ 0x44
 8018984:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	2240      	movs	r2, #64	@ 0x40
 801898c:	5a9b      	ldrh	r3, [r3, r2]
 801898e:	b29a      	uxth	r2, r3
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	2104      	movs	r1, #4
 8018996:	430a      	orrs	r2, r1
 8018998:	b291      	uxth	r1, r2
 801899a:	2240      	movs	r2, #64	@ 0x40
 801899c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	0018      	movs	r0, r3
 80189a2:	f009 fe27 	bl	80225f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80189a6:	e072      	b.n	8018a8e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	2280      	movs	r2, #128	@ 0x80
 80189ac:	4013      	ands	r3, r2
 80189ae:	d046      	beq.n	8018a3e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	2244      	movs	r2, #68	@ 0x44
 80189b6:	5a9b      	ldrh	r3, [r3, r2]
 80189b8:	b29a      	uxth	r2, r3
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	2180      	movs	r1, #128	@ 0x80
 80189c0:	438a      	bics	r2, r1
 80189c2:	b291      	uxth	r1, r2
 80189c4:	2244      	movs	r2, #68	@ 0x44
 80189c6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80189c8:	687a      	ldr	r2, [r7, #4]
 80189ca:	23b8      	movs	r3, #184	@ 0xb8
 80189cc:	009b      	lsls	r3, r3, #2
 80189ce:	5cd3      	ldrb	r3, [r2, r3]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d12f      	bne.n	8018a34 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	2240      	movs	r2, #64	@ 0x40
 80189da:	5a9b      	ldrh	r3, [r3, r2]
 80189dc:	b29a      	uxth	r2, r3
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	2104      	movs	r1, #4
 80189e4:	430a      	orrs	r2, r1
 80189e6:	b291      	uxth	r1, r2
 80189e8:	2240      	movs	r2, #64	@ 0x40
 80189ea:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	2240      	movs	r2, #64	@ 0x40
 80189f2:	5a9b      	ldrh	r3, [r3, r2]
 80189f4:	b29a      	uxth	r2, r3
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	2108      	movs	r1, #8
 80189fc:	430a      	orrs	r2, r1
 80189fe:	b291      	uxth	r1, r2
 8018a00:	2240      	movs	r2, #64	@ 0x40
 8018a02:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8018a04:	687a      	ldr	r2, [r7, #4]
 8018a06:	23b8      	movs	r3, #184	@ 0xb8
 8018a08:	009b      	lsls	r3, r3, #2
 8018a0a:	2101      	movs	r1, #1
 8018a0c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	2254      	movs	r2, #84	@ 0x54
 8018a14:	5a9b      	ldrh	r3, [r3, r2]
 8018a16:	b29b      	uxth	r3, r3
 8018a18:	089b      	lsrs	r3, r3, #2
 8018a1a:	223c      	movs	r2, #60	@ 0x3c
 8018a1c:	4013      	ands	r3, r2
 8018a1e:	0019      	movs	r1, r3
 8018a20:	687a      	ldr	r2, [r7, #4]
 8018a22:	23b9      	movs	r3, #185	@ 0xb9
 8018a24:	009b      	lsls	r3, r3, #2
 8018a26:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	2101      	movs	r1, #1
 8018a2c:	0018      	movs	r0, r3
 8018a2e:	f001 fc1b 	bl	801a268 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8018a32:	e02c      	b.n	8018a8e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	0018      	movs	r0, r3
 8018a38:	f009 fddc 	bl	80225f4 <HAL_PCD_SuspendCallback>
    return;
 8018a3c:	e027      	b.n	8018a8e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8018a3e:	68fa      	ldr	r2, [r7, #12]
 8018a40:	2380      	movs	r3, #128	@ 0x80
 8018a42:	009b      	lsls	r3, r3, #2
 8018a44:	4013      	ands	r3, r2
 8018a46:	d010      	beq.n	8018a6a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	2244      	movs	r2, #68	@ 0x44
 8018a4e:	5a9b      	ldrh	r3, [r3, r2]
 8018a50:	b29a      	uxth	r2, r3
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	4914      	ldr	r1, [pc, #80]	@ (8018aa8 <HAL_PCD_IRQHandler+0x280>)
 8018a58:	400a      	ands	r2, r1
 8018a5a:	b291      	uxth	r1, r2
 8018a5c:	2244      	movs	r2, #68	@ 0x44
 8018a5e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	0018      	movs	r0, r3
 8018a64:	f009 fd92 	bl	802258c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8018a68:	e011      	b.n	8018a8e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8018a6a:	68fa      	ldr	r2, [r7, #12]
 8018a6c:	2380      	movs	r3, #128	@ 0x80
 8018a6e:	005b      	lsls	r3, r3, #1
 8018a70:	4013      	ands	r3, r2
 8018a72:	d00c      	beq.n	8018a8e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	2244      	movs	r2, #68	@ 0x44
 8018a7a:	5a9b      	ldrh	r3, [r3, r2]
 8018a7c:	b29a      	uxth	r2, r3
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	490a      	ldr	r1, [pc, #40]	@ (8018aac <HAL_PCD_IRQHandler+0x284>)
 8018a84:	400a      	ands	r2, r1
 8018a86:	b291      	uxth	r1, r2
 8018a88:	2244      	movs	r2, #68	@ 0x44
 8018a8a:	5299      	strh	r1, [r3, r2]

    return;
 8018a8c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	b004      	add	sp, #16
 8018a92:	bd80      	pop	{r7, pc}
 8018a94:	fffffbff 	.word	0xfffffbff
 8018a98:	ffffbfff 	.word	0xffffbfff
 8018a9c:	ffffdfff 	.word	0xffffdfff
 8018aa0:	ffffefff 	.word	0xffffefff
 8018aa4:	fffff7ff 	.word	0xfffff7ff
 8018aa8:	fffffdff 	.word	0xfffffdff
 8018aac:	fffffeff 	.word	0xfffffeff

08018ab0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b082      	sub	sp, #8
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
 8018ab8:	000a      	movs	r2, r1
 8018aba:	1cfb      	adds	r3, r7, #3
 8018abc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8018abe:	687a      	ldr	r2, [r7, #4]
 8018ac0:	23aa      	movs	r3, #170	@ 0xaa
 8018ac2:	009b      	lsls	r3, r3, #2
 8018ac4:	5cd3      	ldrb	r3, [r2, r3]
 8018ac6:	2b01      	cmp	r3, #1
 8018ac8:	d101      	bne.n	8018ace <HAL_PCD_SetAddress+0x1e>
 8018aca:	2302      	movs	r3, #2
 8018acc:	e017      	b.n	8018afe <HAL_PCD_SetAddress+0x4e>
 8018ace:	687a      	ldr	r2, [r7, #4]
 8018ad0:	23aa      	movs	r3, #170	@ 0xaa
 8018ad2:	009b      	lsls	r3, r3, #2
 8018ad4:	2101      	movs	r1, #1
 8018ad6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	1cfa      	adds	r2, r7, #3
 8018adc:	2124      	movs	r1, #36	@ 0x24
 8018ade:	7812      	ldrb	r2, [r2, #0]
 8018ae0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	681a      	ldr	r2, [r3, #0]
 8018ae6:	1cfb      	adds	r3, r7, #3
 8018ae8:	781b      	ldrb	r3, [r3, #0]
 8018aea:	0019      	movs	r1, r3
 8018aec:	0010      	movs	r0, r2
 8018aee:	f007 fc71 	bl	80203d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8018af2:	687a      	ldr	r2, [r7, #4]
 8018af4:	23aa      	movs	r3, #170	@ 0xaa
 8018af6:	009b      	lsls	r3, r3, #2
 8018af8:	2100      	movs	r1, #0
 8018afa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018afc:	2300      	movs	r3, #0
}
 8018afe:	0018      	movs	r0, r3
 8018b00:	46bd      	mov	sp, r7
 8018b02:	b002      	add	sp, #8
 8018b04:	bd80      	pop	{r7, pc}

08018b06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8018b06:	b590      	push	{r4, r7, lr}
 8018b08:	b085      	sub	sp, #20
 8018b0a:	af00      	add	r7, sp, #0
 8018b0c:	6078      	str	r0, [r7, #4]
 8018b0e:	000c      	movs	r4, r1
 8018b10:	0010      	movs	r0, r2
 8018b12:	0019      	movs	r1, r3
 8018b14:	1cfb      	adds	r3, r7, #3
 8018b16:	1c22      	adds	r2, r4, #0
 8018b18:	701a      	strb	r2, [r3, #0]
 8018b1a:	003b      	movs	r3, r7
 8018b1c:	1c02      	adds	r2, r0, #0
 8018b1e:	801a      	strh	r2, [r3, #0]
 8018b20:	1cbb      	adds	r3, r7, #2
 8018b22:	1c0a      	adds	r2, r1, #0
 8018b24:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8018b26:	230b      	movs	r3, #11
 8018b28:	18fb      	adds	r3, r7, r3
 8018b2a:	2200      	movs	r2, #0
 8018b2c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018b2e:	1cfb      	adds	r3, r7, #3
 8018b30:	781b      	ldrb	r3, [r3, #0]
 8018b32:	b25b      	sxtb	r3, r3
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	da0f      	bge.n	8018b58 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018b38:	1cfb      	adds	r3, r7, #3
 8018b3a:	781b      	ldrb	r3, [r3, #0]
 8018b3c:	2207      	movs	r2, #7
 8018b3e:	4013      	ands	r3, r2
 8018b40:	1c5a      	adds	r2, r3, #1
 8018b42:	0013      	movs	r3, r2
 8018b44:	009b      	lsls	r3, r3, #2
 8018b46:	189b      	adds	r3, r3, r2
 8018b48:	00db      	lsls	r3, r3, #3
 8018b4a:	687a      	ldr	r2, [r7, #4]
 8018b4c:	18d3      	adds	r3, r2, r3
 8018b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	2201      	movs	r2, #1
 8018b54:	705a      	strb	r2, [r3, #1]
 8018b56:	e00f      	b.n	8018b78 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018b58:	1cfb      	adds	r3, r7, #3
 8018b5a:	781b      	ldrb	r3, [r3, #0]
 8018b5c:	2207      	movs	r2, #7
 8018b5e:	401a      	ands	r2, r3
 8018b60:	0013      	movs	r3, r2
 8018b62:	009b      	lsls	r3, r3, #2
 8018b64:	189b      	adds	r3, r3, r2
 8018b66:	00db      	lsls	r3, r3, #3
 8018b68:	3369      	adds	r3, #105	@ 0x69
 8018b6a:	33ff      	adds	r3, #255	@ 0xff
 8018b6c:	687a      	ldr	r2, [r7, #4]
 8018b6e:	18d3      	adds	r3, r2, r3
 8018b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	2200      	movs	r2, #0
 8018b76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8018b78:	1cfb      	adds	r3, r7, #3
 8018b7a:	781b      	ldrb	r3, [r3, #0]
 8018b7c:	2207      	movs	r2, #7
 8018b7e:	4013      	ands	r3, r2
 8018b80:	b2da      	uxtb	r2, r3
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8018b86:	003b      	movs	r3, r7
 8018b88:	881a      	ldrh	r2, [r3, #0]
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	1cba      	adds	r2, r7, #2
 8018b92:	7812      	ldrb	r2, [r2, #0]
 8018b94:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8018b96:	1cbb      	adds	r3, r7, #2
 8018b98:	781b      	ldrb	r3, [r3, #0]
 8018b9a:	2b02      	cmp	r3, #2
 8018b9c:	d102      	bne.n	8018ba4 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8018ba4:	687a      	ldr	r2, [r7, #4]
 8018ba6:	23aa      	movs	r3, #170	@ 0xaa
 8018ba8:	009b      	lsls	r3, r3, #2
 8018baa:	5cd3      	ldrb	r3, [r2, r3]
 8018bac:	2b01      	cmp	r3, #1
 8018bae:	d101      	bne.n	8018bb4 <HAL_PCD_EP_Open+0xae>
 8018bb0:	2302      	movs	r3, #2
 8018bb2:	e013      	b.n	8018bdc <HAL_PCD_EP_Open+0xd6>
 8018bb4:	687a      	ldr	r2, [r7, #4]
 8018bb6:	23aa      	movs	r3, #170	@ 0xaa
 8018bb8:	009b      	lsls	r3, r3, #2
 8018bba:	2101      	movs	r1, #1
 8018bbc:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	68fa      	ldr	r2, [r7, #12]
 8018bc4:	0011      	movs	r1, r2
 8018bc6:	0018      	movs	r0, r3
 8018bc8:	f005 fc68 	bl	801e49c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018bcc:	687a      	ldr	r2, [r7, #4]
 8018bce:	23aa      	movs	r3, #170	@ 0xaa
 8018bd0:	009b      	lsls	r3, r3, #2
 8018bd2:	2100      	movs	r1, #0
 8018bd4:	54d1      	strb	r1, [r2, r3]

  return ret;
 8018bd6:	230b      	movs	r3, #11
 8018bd8:	18fb      	adds	r3, r7, r3
 8018bda:	781b      	ldrb	r3, [r3, #0]
}
 8018bdc:	0018      	movs	r0, r3
 8018bde:	46bd      	mov	sp, r7
 8018be0:	b005      	add	sp, #20
 8018be2:	bd90      	pop	{r4, r7, pc}

08018be4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b084      	sub	sp, #16
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
 8018bec:	000a      	movs	r2, r1
 8018bee:	1cfb      	adds	r3, r7, #3
 8018bf0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018bf2:	1cfb      	adds	r3, r7, #3
 8018bf4:	781b      	ldrb	r3, [r3, #0]
 8018bf6:	b25b      	sxtb	r3, r3
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	da0f      	bge.n	8018c1c <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018bfc:	1cfb      	adds	r3, r7, #3
 8018bfe:	781b      	ldrb	r3, [r3, #0]
 8018c00:	2207      	movs	r2, #7
 8018c02:	4013      	ands	r3, r2
 8018c04:	1c5a      	adds	r2, r3, #1
 8018c06:	0013      	movs	r3, r2
 8018c08:	009b      	lsls	r3, r3, #2
 8018c0a:	189b      	adds	r3, r3, r2
 8018c0c:	00db      	lsls	r3, r3, #3
 8018c0e:	687a      	ldr	r2, [r7, #4]
 8018c10:	18d3      	adds	r3, r2, r3
 8018c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	2201      	movs	r2, #1
 8018c18:	705a      	strb	r2, [r3, #1]
 8018c1a:	e00f      	b.n	8018c3c <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018c1c:	1cfb      	adds	r3, r7, #3
 8018c1e:	781b      	ldrb	r3, [r3, #0]
 8018c20:	2207      	movs	r2, #7
 8018c22:	401a      	ands	r2, r3
 8018c24:	0013      	movs	r3, r2
 8018c26:	009b      	lsls	r3, r3, #2
 8018c28:	189b      	adds	r3, r3, r2
 8018c2a:	00db      	lsls	r3, r3, #3
 8018c2c:	3369      	adds	r3, #105	@ 0x69
 8018c2e:	33ff      	adds	r3, #255	@ 0xff
 8018c30:	687a      	ldr	r2, [r7, #4]
 8018c32:	18d3      	adds	r3, r2, r3
 8018c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	2200      	movs	r2, #0
 8018c3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8018c3c:	1cfb      	adds	r3, r7, #3
 8018c3e:	781b      	ldrb	r3, [r3, #0]
 8018c40:	2207      	movs	r2, #7
 8018c42:	4013      	ands	r3, r2
 8018c44:	b2da      	uxtb	r2, r3
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018c4a:	687a      	ldr	r2, [r7, #4]
 8018c4c:	23aa      	movs	r3, #170	@ 0xaa
 8018c4e:	009b      	lsls	r3, r3, #2
 8018c50:	5cd3      	ldrb	r3, [r2, r3]
 8018c52:	2b01      	cmp	r3, #1
 8018c54:	d101      	bne.n	8018c5a <HAL_PCD_EP_Close+0x76>
 8018c56:	2302      	movs	r3, #2
 8018c58:	e011      	b.n	8018c7e <HAL_PCD_EP_Close+0x9a>
 8018c5a:	687a      	ldr	r2, [r7, #4]
 8018c5c:	23aa      	movs	r3, #170	@ 0xaa
 8018c5e:	009b      	lsls	r3, r3, #2
 8018c60:	2101      	movs	r1, #1
 8018c62:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	68fa      	ldr	r2, [r7, #12]
 8018c6a:	0011      	movs	r1, r2
 8018c6c:	0018      	movs	r0, r3
 8018c6e:	f005 ffb7 	bl	801ebe0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018c72:	687a      	ldr	r2, [r7, #4]
 8018c74:	23aa      	movs	r3, #170	@ 0xaa
 8018c76:	009b      	lsls	r3, r3, #2
 8018c78:	2100      	movs	r1, #0
 8018c7a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8018c7c:	2300      	movs	r3, #0
}
 8018c7e:	0018      	movs	r0, r3
 8018c80:	46bd      	mov	sp, r7
 8018c82:	b004      	add	sp, #16
 8018c84:	bd80      	pop	{r7, pc}

08018c86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018c86:	b580      	push	{r7, lr}
 8018c88:	b086      	sub	sp, #24
 8018c8a:	af00      	add	r7, sp, #0
 8018c8c:	60f8      	str	r0, [r7, #12]
 8018c8e:	607a      	str	r2, [r7, #4]
 8018c90:	603b      	str	r3, [r7, #0]
 8018c92:	200b      	movs	r0, #11
 8018c94:	183b      	adds	r3, r7, r0
 8018c96:	1c0a      	adds	r2, r1, #0
 8018c98:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018c9a:	0001      	movs	r1, r0
 8018c9c:	187b      	adds	r3, r7, r1
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	2207      	movs	r2, #7
 8018ca2:	401a      	ands	r2, r3
 8018ca4:	0013      	movs	r3, r2
 8018ca6:	009b      	lsls	r3, r3, #2
 8018ca8:	189b      	adds	r3, r3, r2
 8018caa:	00db      	lsls	r3, r3, #3
 8018cac:	3369      	adds	r3, #105	@ 0x69
 8018cae:	33ff      	adds	r3, #255	@ 0xff
 8018cb0:	68fa      	ldr	r2, [r7, #12]
 8018cb2:	18d3      	adds	r3, r2, r3
 8018cb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018cb6:	697b      	ldr	r3, [r7, #20]
 8018cb8:	687a      	ldr	r2, [r7, #4]
 8018cba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018cbc:	697b      	ldr	r3, [r7, #20]
 8018cbe:	683a      	ldr	r2, [r7, #0]
 8018cc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8018cc2:	697b      	ldr	r3, [r7, #20]
 8018cc4:	2200      	movs	r2, #0
 8018cc6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	2200      	movs	r2, #0
 8018ccc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018cce:	187b      	adds	r3, r7, r1
 8018cd0:	781b      	ldrb	r3, [r3, #0]
 8018cd2:	2207      	movs	r2, #7
 8018cd4:	4013      	ands	r3, r2
 8018cd6:	b2da      	uxtb	r2, r3
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	697a      	ldr	r2, [r7, #20]
 8018ce2:	0011      	movs	r1, r2
 8018ce4:	0018      	movs	r0, r3
 8018ce6:	f006 f93b 	bl	801ef60 <USB_EPStartXfer>

  return HAL_OK;
 8018cea:	2300      	movs	r3, #0
}
 8018cec:	0018      	movs	r0, r3
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	b006      	add	sp, #24
 8018cf2:	bd80      	pop	{r7, pc}

08018cf4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b082      	sub	sp, #8
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
 8018cfc:	000a      	movs	r2, r1
 8018cfe:	1cfb      	adds	r3, r7, #3
 8018d00:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8018d02:	1cfb      	adds	r3, r7, #3
 8018d04:	781b      	ldrb	r3, [r3, #0]
 8018d06:	2207      	movs	r2, #7
 8018d08:	401a      	ands	r2, r3
 8018d0a:	6878      	ldr	r0, [r7, #4]
 8018d0c:	23c2      	movs	r3, #194	@ 0xc2
 8018d0e:	0059      	lsls	r1, r3, #1
 8018d10:	0013      	movs	r3, r2
 8018d12:	009b      	lsls	r3, r3, #2
 8018d14:	189b      	adds	r3, r3, r2
 8018d16:	00db      	lsls	r3, r3, #3
 8018d18:	18c3      	adds	r3, r0, r3
 8018d1a:	185b      	adds	r3, r3, r1
 8018d1c:	681b      	ldr	r3, [r3, #0]
}
 8018d1e:	0018      	movs	r0, r3
 8018d20:	46bd      	mov	sp, r7
 8018d22:	b002      	add	sp, #8
 8018d24:	bd80      	pop	{r7, pc}

08018d26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018d26:	b580      	push	{r7, lr}
 8018d28:	b086      	sub	sp, #24
 8018d2a:	af00      	add	r7, sp, #0
 8018d2c:	60f8      	str	r0, [r7, #12]
 8018d2e:	607a      	str	r2, [r7, #4]
 8018d30:	603b      	str	r3, [r7, #0]
 8018d32:	200b      	movs	r0, #11
 8018d34:	183b      	adds	r3, r7, r0
 8018d36:	1c0a      	adds	r2, r1, #0
 8018d38:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018d3a:	183b      	adds	r3, r7, r0
 8018d3c:	781b      	ldrb	r3, [r3, #0]
 8018d3e:	2207      	movs	r2, #7
 8018d40:	4013      	ands	r3, r2
 8018d42:	1c5a      	adds	r2, r3, #1
 8018d44:	0013      	movs	r3, r2
 8018d46:	009b      	lsls	r3, r3, #2
 8018d48:	189b      	adds	r3, r3, r2
 8018d4a:	00db      	lsls	r3, r3, #3
 8018d4c:	68fa      	ldr	r2, [r7, #12]
 8018d4e:	18d3      	adds	r3, r2, r3
 8018d50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018d52:	697b      	ldr	r3, [r7, #20]
 8018d54:	687a      	ldr	r2, [r7, #4]
 8018d56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018d58:	697b      	ldr	r3, [r7, #20]
 8018d5a:	683a      	ldr	r2, [r7, #0]
 8018d5c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8018d5e:	697b      	ldr	r3, [r7, #20]
 8018d60:	2224      	movs	r2, #36	@ 0x24
 8018d62:	2101      	movs	r1, #1
 8018d64:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8018d66:	697b      	ldr	r3, [r7, #20]
 8018d68:	683a      	ldr	r2, [r7, #0]
 8018d6a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8018d6c:	697b      	ldr	r3, [r7, #20]
 8018d6e:	2200      	movs	r2, #0
 8018d70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8018d72:	697b      	ldr	r3, [r7, #20]
 8018d74:	2201      	movs	r2, #1
 8018d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018d78:	183b      	adds	r3, r7, r0
 8018d7a:	781b      	ldrb	r3, [r3, #0]
 8018d7c:	2207      	movs	r2, #7
 8018d7e:	4013      	ands	r3, r2
 8018d80:	b2da      	uxtb	r2, r3
 8018d82:	697b      	ldr	r3, [r7, #20]
 8018d84:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	697a      	ldr	r2, [r7, #20]
 8018d8c:	0011      	movs	r1, r2
 8018d8e:	0018      	movs	r0, r3
 8018d90:	f006 f8e6 	bl	801ef60 <USB_EPStartXfer>

  return HAL_OK;
 8018d94:	2300      	movs	r3, #0
}
 8018d96:	0018      	movs	r0, r3
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	b006      	add	sp, #24
 8018d9c:	bd80      	pop	{r7, pc}

08018d9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018d9e:	b580      	push	{r7, lr}
 8018da0:	b084      	sub	sp, #16
 8018da2:	af00      	add	r7, sp, #0
 8018da4:	6078      	str	r0, [r7, #4]
 8018da6:	000a      	movs	r2, r1
 8018da8:	1cfb      	adds	r3, r7, #3
 8018daa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8018dac:	1cfb      	adds	r3, r7, #3
 8018dae:	781b      	ldrb	r3, [r3, #0]
 8018db0:	2207      	movs	r2, #7
 8018db2:	401a      	ands	r2, r3
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	685b      	ldr	r3, [r3, #4]
 8018db8:	429a      	cmp	r2, r3
 8018dba:	d901      	bls.n	8018dc0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8018dbc:	2301      	movs	r3, #1
 8018dbe:	e046      	b.n	8018e4e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018dc0:	1cfb      	adds	r3, r7, #3
 8018dc2:	781b      	ldrb	r3, [r3, #0]
 8018dc4:	b25b      	sxtb	r3, r3
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	da0f      	bge.n	8018dea <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018dca:	1cfb      	adds	r3, r7, #3
 8018dcc:	781b      	ldrb	r3, [r3, #0]
 8018dce:	2207      	movs	r2, #7
 8018dd0:	4013      	ands	r3, r2
 8018dd2:	1c5a      	adds	r2, r3, #1
 8018dd4:	0013      	movs	r3, r2
 8018dd6:	009b      	lsls	r3, r3, #2
 8018dd8:	189b      	adds	r3, r3, r2
 8018dda:	00db      	lsls	r3, r3, #3
 8018ddc:	687a      	ldr	r2, [r7, #4]
 8018dde:	18d3      	adds	r3, r2, r3
 8018de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	2201      	movs	r2, #1
 8018de6:	705a      	strb	r2, [r3, #1]
 8018de8:	e00d      	b.n	8018e06 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8018dea:	1cfb      	adds	r3, r7, #3
 8018dec:	781a      	ldrb	r2, [r3, #0]
 8018dee:	0013      	movs	r3, r2
 8018df0:	009b      	lsls	r3, r3, #2
 8018df2:	189b      	adds	r3, r3, r2
 8018df4:	00db      	lsls	r3, r3, #3
 8018df6:	3369      	adds	r3, #105	@ 0x69
 8018df8:	33ff      	adds	r3, #255	@ 0xff
 8018dfa:	687a      	ldr	r2, [r7, #4]
 8018dfc:	18d3      	adds	r3, r2, r3
 8018dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	2200      	movs	r2, #0
 8018e04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	2201      	movs	r2, #1
 8018e0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018e0c:	1cfb      	adds	r3, r7, #3
 8018e0e:	781b      	ldrb	r3, [r3, #0]
 8018e10:	2207      	movs	r2, #7
 8018e12:	4013      	ands	r3, r2
 8018e14:	b2da      	uxtb	r2, r3
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018e1a:	687a      	ldr	r2, [r7, #4]
 8018e1c:	23aa      	movs	r3, #170	@ 0xaa
 8018e1e:	009b      	lsls	r3, r3, #2
 8018e20:	5cd3      	ldrb	r3, [r2, r3]
 8018e22:	2b01      	cmp	r3, #1
 8018e24:	d101      	bne.n	8018e2a <HAL_PCD_EP_SetStall+0x8c>
 8018e26:	2302      	movs	r3, #2
 8018e28:	e011      	b.n	8018e4e <HAL_PCD_EP_SetStall+0xb0>
 8018e2a:	687a      	ldr	r2, [r7, #4]
 8018e2c:	23aa      	movs	r3, #170	@ 0xaa
 8018e2e:	009b      	lsls	r3, r3, #2
 8018e30:	2101      	movs	r1, #1
 8018e32:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	68fa      	ldr	r2, [r7, #12]
 8018e3a:	0011      	movs	r1, r2
 8018e3c:	0018      	movs	r0, r3
 8018e3e:	f007 f9c7 	bl	80201d0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8018e42:	687a      	ldr	r2, [r7, #4]
 8018e44:	23aa      	movs	r3, #170	@ 0xaa
 8018e46:	009b      	lsls	r3, r3, #2
 8018e48:	2100      	movs	r1, #0
 8018e4a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018e4c:	2300      	movs	r3, #0
}
 8018e4e:	0018      	movs	r0, r3
 8018e50:	46bd      	mov	sp, r7
 8018e52:	b004      	add	sp, #16
 8018e54:	bd80      	pop	{r7, pc}

08018e56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018e56:	b580      	push	{r7, lr}
 8018e58:	b084      	sub	sp, #16
 8018e5a:	af00      	add	r7, sp, #0
 8018e5c:	6078      	str	r0, [r7, #4]
 8018e5e:	000a      	movs	r2, r1
 8018e60:	1cfb      	adds	r3, r7, #3
 8018e62:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8018e64:	1cfb      	adds	r3, r7, #3
 8018e66:	781b      	ldrb	r3, [r3, #0]
 8018e68:	220f      	movs	r2, #15
 8018e6a:	401a      	ands	r2, r3
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	685b      	ldr	r3, [r3, #4]
 8018e70:	429a      	cmp	r2, r3
 8018e72:	d901      	bls.n	8018e78 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8018e74:	2301      	movs	r3, #1
 8018e76:	e048      	b.n	8018f0a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018e78:	1cfb      	adds	r3, r7, #3
 8018e7a:	781b      	ldrb	r3, [r3, #0]
 8018e7c:	b25b      	sxtb	r3, r3
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	da0f      	bge.n	8018ea2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018e82:	1cfb      	adds	r3, r7, #3
 8018e84:	781b      	ldrb	r3, [r3, #0]
 8018e86:	2207      	movs	r2, #7
 8018e88:	4013      	ands	r3, r2
 8018e8a:	1c5a      	adds	r2, r3, #1
 8018e8c:	0013      	movs	r3, r2
 8018e8e:	009b      	lsls	r3, r3, #2
 8018e90:	189b      	adds	r3, r3, r2
 8018e92:	00db      	lsls	r3, r3, #3
 8018e94:	687a      	ldr	r2, [r7, #4]
 8018e96:	18d3      	adds	r3, r2, r3
 8018e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	2201      	movs	r2, #1
 8018e9e:	705a      	strb	r2, [r3, #1]
 8018ea0:	e00f      	b.n	8018ec2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018ea2:	1cfb      	adds	r3, r7, #3
 8018ea4:	781b      	ldrb	r3, [r3, #0]
 8018ea6:	2207      	movs	r2, #7
 8018ea8:	401a      	ands	r2, r3
 8018eaa:	0013      	movs	r3, r2
 8018eac:	009b      	lsls	r3, r3, #2
 8018eae:	189b      	adds	r3, r3, r2
 8018eb0:	00db      	lsls	r3, r3, #3
 8018eb2:	3369      	adds	r3, #105	@ 0x69
 8018eb4:	33ff      	adds	r3, #255	@ 0xff
 8018eb6:	687a      	ldr	r2, [r7, #4]
 8018eb8:	18d3      	adds	r3, r2, r3
 8018eba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018ec8:	1cfb      	adds	r3, r7, #3
 8018eca:	781b      	ldrb	r3, [r3, #0]
 8018ecc:	2207      	movs	r2, #7
 8018ece:	4013      	ands	r3, r2
 8018ed0:	b2da      	uxtb	r2, r3
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018ed6:	687a      	ldr	r2, [r7, #4]
 8018ed8:	23aa      	movs	r3, #170	@ 0xaa
 8018eda:	009b      	lsls	r3, r3, #2
 8018edc:	5cd3      	ldrb	r3, [r2, r3]
 8018ede:	2b01      	cmp	r3, #1
 8018ee0:	d101      	bne.n	8018ee6 <HAL_PCD_EP_ClrStall+0x90>
 8018ee2:	2302      	movs	r3, #2
 8018ee4:	e011      	b.n	8018f0a <HAL_PCD_EP_ClrStall+0xb4>
 8018ee6:	687a      	ldr	r2, [r7, #4]
 8018ee8:	23aa      	movs	r3, #170	@ 0xaa
 8018eea:	009b      	lsls	r3, r3, #2
 8018eec:	2101      	movs	r1, #1
 8018eee:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	68fa      	ldr	r2, [r7, #12]
 8018ef6:	0011      	movs	r1, r2
 8018ef8:	0018      	movs	r0, r3
 8018efa:	f007 f9b9 	bl	8020270 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8018efe:	687a      	ldr	r2, [r7, #4]
 8018f00:	23aa      	movs	r3, #170	@ 0xaa
 8018f02:	009b      	lsls	r3, r3, #2
 8018f04:	2100      	movs	r1, #0
 8018f06:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018f08:	2300      	movs	r3, #0
}
 8018f0a:	0018      	movs	r0, r3
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	b004      	add	sp, #16
 8018f10:	bd80      	pop	{r7, pc}
	...

08018f14 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8018f14:	b5b0      	push	{r4, r5, r7, lr}
 8018f16:	b096      	sub	sp, #88	@ 0x58
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8018f1c:	f000 fbec 	bl	80196f8 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	681a      	ldr	r2, [r3, #0]
 8018f24:	204e      	movs	r0, #78	@ 0x4e
 8018f26:	183b      	adds	r3, r7, r0
 8018f28:	2144      	movs	r1, #68	@ 0x44
 8018f2a:	5a52      	ldrh	r2, [r2, r1]
 8018f2c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8018f2e:	183b      	adds	r3, r7, r0
 8018f30:	881b      	ldrh	r3, [r3, #0]
 8018f32:	b2da      	uxtb	r2, r3
 8018f34:	244d      	movs	r4, #77	@ 0x4d
 8018f36:	193b      	adds	r3, r7, r4
 8018f38:	210f      	movs	r1, #15
 8018f3a:	400a      	ands	r2, r1
 8018f3c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8018f3e:	193b      	adds	r3, r7, r4
 8018f40:	781b      	ldrb	r3, [r3, #0]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d000      	beq.n	8018f48 <PCD_EP_ISR_Handler+0x34>
 8018f46:	e18f      	b.n	8019268 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8018f48:	183b      	adds	r3, r7, r0
 8018f4a:	881b      	ldrh	r3, [r3, #0]
 8018f4c:	2210      	movs	r2, #16
 8018f4e:	4013      	ands	r3, r2
 8018f50:	d155      	bne.n	8018ffe <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	881b      	ldrh	r3, [r3, #0]
 8018f58:	b29a      	uxth	r2, r3
 8018f5a:	200e      	movs	r0, #14
 8018f5c:	183b      	adds	r3, r7, r0
 8018f5e:	49bb      	ldr	r1, [pc, #748]	@ (801924c <PCD_EP_ISR_Handler+0x338>)
 8018f60:	400a      	ands	r2, r1
 8018f62:	801a      	strh	r2, [r3, #0]
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	183a      	adds	r2, r7, r0
 8018f6a:	8812      	ldrh	r2, [r2, #0]
 8018f6c:	49b8      	ldr	r1, [pc, #736]	@ (8019250 <PCD_EP_ISR_Handler+0x33c>)
 8018f6e:	430a      	orrs	r2, r1
 8018f70:	b292      	uxth	r2, r2
 8018f72:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	3328      	adds	r3, #40	@ 0x28
 8018f78:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	2250      	movs	r2, #80	@ 0x50
 8018f80:	5a9b      	ldrh	r3, [r3, r2]
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	001a      	movs	r2, r3
 8018f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018f88:	781b      	ldrb	r3, [r3, #0]
 8018f8a:	00db      	lsls	r3, r3, #3
 8018f8c:	18d2      	adds	r2, r2, r3
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	18d3      	adds	r3, r2, r3
 8018f94:	4aaf      	ldr	r2, [pc, #700]	@ (8019254 <PCD_EP_ISR_Handler+0x340>)
 8018f96:	4694      	mov	ip, r2
 8018f98:	4463      	add	r3, ip
 8018f9a:	881b      	ldrh	r3, [r3, #0]
 8018f9c:	059b      	lsls	r3, r3, #22
 8018f9e:	0d9a      	lsrs	r2, r3, #22
 8018fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fa2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8018fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fa6:	695a      	ldr	r2, [r3, #20]
 8018fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018faa:	69db      	ldr	r3, [r3, #28]
 8018fac:	18d2      	adds	r2, r2, r3
 8018fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fb0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	2100      	movs	r1, #0
 8018fb6:	0018      	movs	r0, r3
 8018fb8:	f009 faca 	bl	8022550 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	2224      	movs	r2, #36	@ 0x24
 8018fc0:	5c9b      	ldrb	r3, [r3, r2]
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d101      	bne.n	8018fcc <PCD_EP_ISR_Handler+0xb8>
 8018fc8:	f000 fb96 	bl	80196f8 <PCD_EP_ISR_Handler+0x7e4>
 8018fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018fce:	699b      	ldr	r3, [r3, #24]
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d001      	beq.n	8018fd8 <PCD_EP_ISR_Handler+0xc4>
 8018fd4:	f000 fb90 	bl	80196f8 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	2224      	movs	r2, #36	@ 0x24
 8018fdc:	5c9b      	ldrb	r3, [r3, r2]
 8018fde:	b2db      	uxtb	r3, r3
 8018fe0:	2280      	movs	r2, #128	@ 0x80
 8018fe2:	4252      	negs	r2, r2
 8018fe4:	4313      	orrs	r3, r2
 8018fe6:	b2da      	uxtb	r2, r3
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	0011      	movs	r1, r2
 8018fee:	224c      	movs	r2, #76	@ 0x4c
 8018ff0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	2224      	movs	r2, #36	@ 0x24
 8018ff6:	2100      	movs	r1, #0
 8018ff8:	5499      	strb	r1, [r3, r2]
 8018ffa:	f000 fb7d 	bl	80196f8 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	3369      	adds	r3, #105	@ 0x69
 8019002:	33ff      	adds	r3, #255	@ 0xff
 8019004:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	681a      	ldr	r2, [r3, #0]
 801900a:	214a      	movs	r1, #74	@ 0x4a
 801900c:	187b      	adds	r3, r7, r1
 801900e:	8812      	ldrh	r2, [r2, #0]
 8019010:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8019012:	187b      	adds	r3, r7, r1
 8019014:	881a      	ldrh	r2, [r3, #0]
 8019016:	2380      	movs	r3, #128	@ 0x80
 8019018:	011b      	lsls	r3, r3, #4
 801901a:	4013      	ands	r3, r2
 801901c:	d037      	beq.n	801908e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	2250      	movs	r2, #80	@ 0x50
 8019024:	5a9b      	ldrh	r3, [r3, r2]
 8019026:	b29b      	uxth	r3, r3
 8019028:	001a      	movs	r2, r3
 801902a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801902c:	781b      	ldrb	r3, [r3, #0]
 801902e:	00db      	lsls	r3, r3, #3
 8019030:	18d2      	adds	r2, r2, r3
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	18d3      	adds	r3, r2, r3
 8019038:	4a87      	ldr	r2, [pc, #540]	@ (8019258 <PCD_EP_ISR_Handler+0x344>)
 801903a:	4694      	mov	ip, r2
 801903c:	4463      	add	r3, ip
 801903e:	881b      	ldrh	r3, [r3, #0]
 8019040:	059b      	lsls	r3, r3, #22
 8019042:	0d9a      	lsrs	r2, r3, #22
 8019044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019046:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	6818      	ldr	r0, [r3, #0]
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	22ac      	movs	r2, #172	@ 0xac
 8019050:	0092      	lsls	r2, r2, #2
 8019052:	1899      	adds	r1, r3, r2
 8019054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019056:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8019058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801905a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801905c:	b29b      	uxth	r3, r3
 801905e:	f007 fa3b 	bl	80204d8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	881b      	ldrh	r3, [r3, #0]
 8019068:	b29a      	uxth	r2, r3
 801906a:	2010      	movs	r0, #16
 801906c:	183b      	adds	r3, r7, r0
 801906e:	497b      	ldr	r1, [pc, #492]	@ (801925c <PCD_EP_ISR_Handler+0x348>)
 8019070:	400a      	ands	r2, r1
 8019072:	801a      	strh	r2, [r3, #0]
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	183a      	adds	r2, r7, r0
 801907a:	8812      	ldrh	r2, [r2, #0]
 801907c:	2180      	movs	r1, #128	@ 0x80
 801907e:	430a      	orrs	r2, r1
 8019080:	b292      	uxth	r2, r2
 8019082:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	0018      	movs	r0, r3
 8019088:	f009 fa2c 	bl	80224e4 <HAL_PCD_SetupStageCallback>
 801908c:	e334      	b.n	80196f8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801908e:	234a      	movs	r3, #74	@ 0x4a
 8019090:	18fb      	adds	r3, r7, r3
 8019092:	2200      	movs	r2, #0
 8019094:	5e9b      	ldrsh	r3, [r3, r2]
 8019096:	2b00      	cmp	r3, #0
 8019098:	db00      	blt.n	801909c <PCD_EP_ISR_Handler+0x188>
 801909a:	e32d      	b.n	80196f8 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	881b      	ldrh	r3, [r3, #0]
 80190a2:	b29a      	uxth	r2, r3
 80190a4:	201e      	movs	r0, #30
 80190a6:	183b      	adds	r3, r7, r0
 80190a8:	496c      	ldr	r1, [pc, #432]	@ (801925c <PCD_EP_ISR_Handler+0x348>)
 80190aa:	400a      	ands	r2, r1
 80190ac:	801a      	strh	r2, [r3, #0]
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	183a      	adds	r2, r7, r0
 80190b4:	8812      	ldrh	r2, [r2, #0]
 80190b6:	2180      	movs	r1, #128	@ 0x80
 80190b8:	430a      	orrs	r2, r1
 80190ba:	b292      	uxth	r2, r2
 80190bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	2250      	movs	r2, #80	@ 0x50
 80190c4:	5a9b      	ldrh	r3, [r3, r2]
 80190c6:	b29b      	uxth	r3, r3
 80190c8:	001a      	movs	r2, r3
 80190ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190cc:	781b      	ldrb	r3, [r3, #0]
 80190ce:	00db      	lsls	r3, r3, #3
 80190d0:	18d2      	adds	r2, r2, r3
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	18d3      	adds	r3, r2, r3
 80190d8:	4a5f      	ldr	r2, [pc, #380]	@ (8019258 <PCD_EP_ISR_Handler+0x344>)
 80190da:	4694      	mov	ip, r2
 80190dc:	4463      	add	r3, ip
 80190de:	881b      	ldrh	r3, [r3, #0]
 80190e0:	059b      	lsls	r3, r3, #22
 80190e2:	0d9a      	lsrs	r2, r3, #22
 80190e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80190e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190ea:	69db      	ldr	r3, [r3, #28]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d01a      	beq.n	8019126 <PCD_EP_ISR_Handler+0x212>
 80190f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190f2:	695b      	ldr	r3, [r3, #20]
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d016      	beq.n	8019126 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	6818      	ldr	r0, [r3, #0]
 80190fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190fe:	6959      	ldr	r1, [r3, #20]
 8019100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019102:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8019104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019106:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019108:	b29b      	uxth	r3, r3
 801910a:	f007 f9e5 	bl	80204d8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801910e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019110:	695a      	ldr	r2, [r3, #20]
 8019112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019114:	69db      	ldr	r3, [r3, #28]
 8019116:	18d2      	adds	r2, r2, r3
 8019118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801911a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	2100      	movs	r1, #0
 8019120:	0018      	movs	r0, r3
 8019122:	f009 f9f4 	bl	802250e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	681a      	ldr	r2, [r3, #0]
 801912a:	214a      	movs	r1, #74	@ 0x4a
 801912c:	187b      	adds	r3, r7, r1
 801912e:	8812      	ldrh	r2, [r2, #0]
 8019130:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8019132:	187b      	adds	r3, r7, r1
 8019134:	881a      	ldrh	r2, [r3, #0]
 8019136:	2380      	movs	r3, #128	@ 0x80
 8019138:	011b      	lsls	r3, r3, #4
 801913a:	4013      	ands	r3, r2
 801913c:	d000      	beq.n	8019140 <PCD_EP_ISR_Handler+0x22c>
 801913e:	e2db      	b.n	80196f8 <PCD_EP_ISR_Handler+0x7e4>
 8019140:	187b      	adds	r3, r7, r1
 8019142:	881a      	ldrh	r2, [r3, #0]
 8019144:	23c0      	movs	r3, #192	@ 0xc0
 8019146:	019b      	lsls	r3, r3, #6
 8019148:	401a      	ands	r2, r3
 801914a:	23c0      	movs	r3, #192	@ 0xc0
 801914c:	019b      	lsls	r3, r3, #6
 801914e:	429a      	cmp	r2, r3
 8019150:	d100      	bne.n	8019154 <PCD_EP_ISR_Handler+0x240>
 8019152:	e2d1      	b.n	80196f8 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	61bb      	str	r3, [r7, #24]
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	2250      	movs	r2, #80	@ 0x50
 8019160:	5a9b      	ldrh	r3, [r3, r2]
 8019162:	b29b      	uxth	r3, r3
 8019164:	001a      	movs	r2, r3
 8019166:	69bb      	ldr	r3, [r7, #24]
 8019168:	189b      	adds	r3, r3, r2
 801916a:	61bb      	str	r3, [r7, #24]
 801916c:	69bb      	ldr	r3, [r7, #24]
 801916e:	4a3a      	ldr	r2, [pc, #232]	@ (8019258 <PCD_EP_ISR_Handler+0x344>)
 8019170:	4694      	mov	ip, r2
 8019172:	4463      	add	r3, ip
 8019174:	617b      	str	r3, [r7, #20]
 8019176:	697b      	ldr	r3, [r7, #20]
 8019178:	881b      	ldrh	r3, [r3, #0]
 801917a:	b29b      	uxth	r3, r3
 801917c:	059b      	lsls	r3, r3, #22
 801917e:	0d9b      	lsrs	r3, r3, #22
 8019180:	b29a      	uxth	r2, r3
 8019182:	697b      	ldr	r3, [r7, #20]
 8019184:	801a      	strh	r2, [r3, #0]
 8019186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019188:	691b      	ldr	r3, [r3, #16]
 801918a:	2b3e      	cmp	r3, #62	@ 0x3e
 801918c:	d91a      	bls.n	80191c4 <PCD_EP_ISR_Handler+0x2b0>
 801918e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019190:	691b      	ldr	r3, [r3, #16]
 8019192:	095b      	lsrs	r3, r3, #5
 8019194:	647b      	str	r3, [r7, #68]	@ 0x44
 8019196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019198:	691b      	ldr	r3, [r3, #16]
 801919a:	221f      	movs	r2, #31
 801919c:	4013      	ands	r3, r2
 801919e:	d102      	bne.n	80191a6 <PCD_EP_ISR_Handler+0x292>
 80191a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80191a2:	3b01      	subs	r3, #1
 80191a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80191a6:	697b      	ldr	r3, [r7, #20]
 80191a8:	881b      	ldrh	r3, [r3, #0]
 80191aa:	b29a      	uxth	r2, r3
 80191ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80191ae:	b29b      	uxth	r3, r3
 80191b0:	029b      	lsls	r3, r3, #10
 80191b2:	b29b      	uxth	r3, r3
 80191b4:	4313      	orrs	r3, r2
 80191b6:	b29b      	uxth	r3, r3
 80191b8:	4a25      	ldr	r2, [pc, #148]	@ (8019250 <PCD_EP_ISR_Handler+0x33c>)
 80191ba:	4313      	orrs	r3, r2
 80191bc:	b29a      	uxth	r2, r3
 80191be:	697b      	ldr	r3, [r7, #20]
 80191c0:	801a      	strh	r2, [r3, #0]
 80191c2:	e023      	b.n	801920c <PCD_EP_ISR_Handler+0x2f8>
 80191c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191c6:	691b      	ldr	r3, [r3, #16]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d108      	bne.n	80191de <PCD_EP_ISR_Handler+0x2ca>
 80191cc:	697b      	ldr	r3, [r7, #20]
 80191ce:	881b      	ldrh	r3, [r3, #0]
 80191d0:	b29b      	uxth	r3, r3
 80191d2:	4a1f      	ldr	r2, [pc, #124]	@ (8019250 <PCD_EP_ISR_Handler+0x33c>)
 80191d4:	4313      	orrs	r3, r2
 80191d6:	b29a      	uxth	r2, r3
 80191d8:	697b      	ldr	r3, [r7, #20]
 80191da:	801a      	strh	r2, [r3, #0]
 80191dc:	e016      	b.n	801920c <PCD_EP_ISR_Handler+0x2f8>
 80191de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191e0:	691b      	ldr	r3, [r3, #16]
 80191e2:	085b      	lsrs	r3, r3, #1
 80191e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80191e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191e8:	691b      	ldr	r3, [r3, #16]
 80191ea:	2201      	movs	r2, #1
 80191ec:	4013      	ands	r3, r2
 80191ee:	d002      	beq.n	80191f6 <PCD_EP_ISR_Handler+0x2e2>
 80191f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80191f2:	3301      	adds	r3, #1
 80191f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80191f6:	697b      	ldr	r3, [r7, #20]
 80191f8:	881b      	ldrh	r3, [r3, #0]
 80191fa:	b29a      	uxth	r2, r3
 80191fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80191fe:	b29b      	uxth	r3, r3
 8019200:	029b      	lsls	r3, r3, #10
 8019202:	b29b      	uxth	r3, r3
 8019204:	4313      	orrs	r3, r2
 8019206:	b29a      	uxth	r2, r3
 8019208:	697b      	ldr	r3, [r7, #20]
 801920a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	881b      	ldrh	r3, [r3, #0]
 8019212:	b29a      	uxth	r2, r3
 8019214:	2012      	movs	r0, #18
 8019216:	183b      	adds	r3, r7, r0
 8019218:	4911      	ldr	r1, [pc, #68]	@ (8019260 <PCD_EP_ISR_Handler+0x34c>)
 801921a:	400a      	ands	r2, r1
 801921c:	801a      	strh	r2, [r3, #0]
 801921e:	183b      	adds	r3, r7, r0
 8019220:	183a      	adds	r2, r7, r0
 8019222:	8812      	ldrh	r2, [r2, #0]
 8019224:	2180      	movs	r1, #128	@ 0x80
 8019226:	0149      	lsls	r1, r1, #5
 8019228:	404a      	eors	r2, r1
 801922a:	801a      	strh	r2, [r3, #0]
 801922c:	183b      	adds	r3, r7, r0
 801922e:	183a      	adds	r2, r7, r0
 8019230:	8812      	ldrh	r2, [r2, #0]
 8019232:	2180      	movs	r1, #128	@ 0x80
 8019234:	0189      	lsls	r1, r1, #6
 8019236:	404a      	eors	r2, r1
 8019238:	801a      	strh	r2, [r3, #0]
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	183a      	adds	r2, r7, r0
 8019240:	8812      	ldrh	r2, [r2, #0]
 8019242:	4908      	ldr	r1, [pc, #32]	@ (8019264 <PCD_EP_ISR_Handler+0x350>)
 8019244:	430a      	orrs	r2, r1
 8019246:	b292      	uxth	r2, r2
 8019248:	801a      	strh	r2, [r3, #0]
 801924a:	e255      	b.n	80196f8 <PCD_EP_ISR_Handler+0x7e4>
 801924c:	ffff8f0f 	.word	0xffff8f0f
 8019250:	ffff8000 	.word	0xffff8000
 8019254:	00000402 	.word	0x00000402
 8019258:	00000406 	.word	0x00000406
 801925c:	00000f8f 	.word	0x00000f8f
 8019260:	ffffbf8f 	.word	0xffffbf8f
 8019264:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	001a      	movs	r2, r3
 801926e:	204d      	movs	r0, #77	@ 0x4d
 8019270:	183b      	adds	r3, r7, r0
 8019272:	781b      	ldrb	r3, [r3, #0]
 8019274:	009b      	lsls	r3, r3, #2
 8019276:	18d2      	adds	r2, r2, r3
 8019278:	214a      	movs	r1, #74	@ 0x4a
 801927a:	187b      	adds	r3, r7, r1
 801927c:	8812      	ldrh	r2, [r2, #0]
 801927e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8019280:	187b      	adds	r3, r7, r1
 8019282:	2200      	movs	r2, #0
 8019284:	5e9b      	ldrsh	r3, [r3, r2]
 8019286:	2b00      	cmp	r3, #0
 8019288:	db00      	blt.n	801928c <PCD_EP_ISR_Handler+0x378>
 801928a:	e0fa      	b.n	8019482 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	001a      	movs	r2, r3
 8019292:	183b      	adds	r3, r7, r0
 8019294:	781b      	ldrb	r3, [r3, #0]
 8019296:	009b      	lsls	r3, r3, #2
 8019298:	18d3      	adds	r3, r2, r3
 801929a:	881b      	ldrh	r3, [r3, #0]
 801929c:	b29a      	uxth	r2, r3
 801929e:	2448      	movs	r4, #72	@ 0x48
 80192a0:	193b      	adds	r3, r7, r4
 80192a2:	49d1      	ldr	r1, [pc, #836]	@ (80195e8 <PCD_EP_ISR_Handler+0x6d4>)
 80192a4:	400a      	ands	r2, r1
 80192a6:	801a      	strh	r2, [r3, #0]
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	001a      	movs	r2, r3
 80192ae:	183b      	adds	r3, r7, r0
 80192b0:	781b      	ldrb	r3, [r3, #0]
 80192b2:	009b      	lsls	r3, r3, #2
 80192b4:	18d3      	adds	r3, r2, r3
 80192b6:	193a      	adds	r2, r7, r4
 80192b8:	8812      	ldrh	r2, [r2, #0]
 80192ba:	2180      	movs	r1, #128	@ 0x80
 80192bc:	430a      	orrs	r2, r1
 80192be:	b292      	uxth	r2, r2
 80192c0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80192c2:	183b      	adds	r3, r7, r0
 80192c4:	781a      	ldrb	r2, [r3, #0]
 80192c6:	0013      	movs	r3, r2
 80192c8:	009b      	lsls	r3, r3, #2
 80192ca:	189b      	adds	r3, r3, r2
 80192cc:	00db      	lsls	r3, r3, #3
 80192ce:	3369      	adds	r3, #105	@ 0x69
 80192d0:	33ff      	adds	r3, #255	@ 0xff
 80192d2:	687a      	ldr	r2, [r7, #4]
 80192d4:	18d3      	adds	r3, r2, r3
 80192d6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80192d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192da:	7b1b      	ldrb	r3, [r3, #12]
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d125      	bne.n	801932c <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	2250      	movs	r2, #80	@ 0x50
 80192e6:	5a9b      	ldrh	r3, [r3, r2]
 80192e8:	b29b      	uxth	r3, r3
 80192ea:	001a      	movs	r2, r3
 80192ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192ee:	781b      	ldrb	r3, [r3, #0]
 80192f0:	00db      	lsls	r3, r3, #3
 80192f2:	18d2      	adds	r2, r2, r3
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	18d3      	adds	r3, r2, r3
 80192fa:	4abc      	ldr	r2, [pc, #752]	@ (80195ec <PCD_EP_ISR_Handler+0x6d8>)
 80192fc:	4694      	mov	ip, r2
 80192fe:	4463      	add	r3, ip
 8019300:	881a      	ldrh	r2, [r3, #0]
 8019302:	2450      	movs	r4, #80	@ 0x50
 8019304:	193b      	adds	r3, r7, r4
 8019306:	0592      	lsls	r2, r2, #22
 8019308:	0d92      	lsrs	r2, r2, #22
 801930a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801930c:	193b      	adds	r3, r7, r4
 801930e:	881b      	ldrh	r3, [r3, #0]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d100      	bne.n	8019316 <PCD_EP_ISR_Handler+0x402>
 8019314:	e08d      	b.n	8019432 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	6818      	ldr	r0, [r3, #0]
 801931a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801931c:	6959      	ldr	r1, [r3, #20]
 801931e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019320:	88da      	ldrh	r2, [r3, #6]
 8019322:	193b      	adds	r3, r7, r4
 8019324:	881b      	ldrh	r3, [r3, #0]
 8019326:	f007 f8d7 	bl	80204d8 <USB_ReadPMA>
 801932a:	e082      	b.n	8019432 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801932c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801932e:	78db      	ldrb	r3, [r3, #3]
 8019330:	2b02      	cmp	r3, #2
 8019332:	d10c      	bne.n	801934e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8019334:	2350      	movs	r3, #80	@ 0x50
 8019336:	18fc      	adds	r4, r7, r3
 8019338:	234a      	movs	r3, #74	@ 0x4a
 801933a:	18fb      	adds	r3, r7, r3
 801933c:	881a      	ldrh	r2, [r3, #0]
 801933e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	0018      	movs	r0, r3
 8019344:	f000 f9ec 	bl	8019720 <HAL_PCD_EP_DB_Receive>
 8019348:	0003      	movs	r3, r0
 801934a:	8023      	strh	r3, [r4, #0]
 801934c:	e071      	b.n	8019432 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	001a      	movs	r2, r3
 8019354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019356:	781b      	ldrb	r3, [r3, #0]
 8019358:	009b      	lsls	r3, r3, #2
 801935a:	18d3      	adds	r3, r2, r3
 801935c:	881b      	ldrh	r3, [r3, #0]
 801935e:	b29a      	uxth	r2, r3
 8019360:	2052      	movs	r0, #82	@ 0x52
 8019362:	183b      	adds	r3, r7, r0
 8019364:	49a2      	ldr	r1, [pc, #648]	@ (80195f0 <PCD_EP_ISR_Handler+0x6dc>)
 8019366:	400a      	ands	r2, r1
 8019368:	801a      	strh	r2, [r3, #0]
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	001a      	movs	r2, r3
 8019370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019372:	781b      	ldrb	r3, [r3, #0]
 8019374:	009b      	lsls	r3, r3, #2
 8019376:	18d3      	adds	r3, r2, r3
 8019378:	183a      	adds	r2, r7, r0
 801937a:	8812      	ldrh	r2, [r2, #0]
 801937c:	499d      	ldr	r1, [pc, #628]	@ (80195f4 <PCD_EP_ISR_Handler+0x6e0>)
 801937e:	430a      	orrs	r2, r1
 8019380:	b292      	uxth	r2, r2
 8019382:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	001a      	movs	r2, r3
 801938a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801938c:	781b      	ldrb	r3, [r3, #0]
 801938e:	009b      	lsls	r3, r3, #2
 8019390:	18d3      	adds	r3, r2, r3
 8019392:	881b      	ldrh	r3, [r3, #0]
 8019394:	b29b      	uxth	r3, r3
 8019396:	001a      	movs	r2, r3
 8019398:	2380      	movs	r3, #128	@ 0x80
 801939a:	01db      	lsls	r3, r3, #7
 801939c:	4013      	ands	r3, r2
 801939e:	d024      	beq.n	80193ea <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	2250      	movs	r2, #80	@ 0x50
 80193a6:	5a9b      	ldrh	r3, [r3, r2]
 80193a8:	b29b      	uxth	r3, r3
 80193aa:	001a      	movs	r2, r3
 80193ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193ae:	781b      	ldrb	r3, [r3, #0]
 80193b0:	00db      	lsls	r3, r3, #3
 80193b2:	18d2      	adds	r2, r2, r3
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	18d3      	adds	r3, r2, r3
 80193ba:	4a8f      	ldr	r2, [pc, #572]	@ (80195f8 <PCD_EP_ISR_Handler+0x6e4>)
 80193bc:	4694      	mov	ip, r2
 80193be:	4463      	add	r3, ip
 80193c0:	881a      	ldrh	r2, [r3, #0]
 80193c2:	2450      	movs	r4, #80	@ 0x50
 80193c4:	193b      	adds	r3, r7, r4
 80193c6:	0592      	lsls	r2, r2, #22
 80193c8:	0d92      	lsrs	r2, r2, #22
 80193ca:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80193cc:	193b      	adds	r3, r7, r4
 80193ce:	881b      	ldrh	r3, [r3, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d02e      	beq.n	8019432 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	6818      	ldr	r0, [r3, #0]
 80193d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193da:	6959      	ldr	r1, [r3, #20]
 80193dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193de:	891a      	ldrh	r2, [r3, #8]
 80193e0:	193b      	adds	r3, r7, r4
 80193e2:	881b      	ldrh	r3, [r3, #0]
 80193e4:	f007 f878 	bl	80204d8 <USB_ReadPMA>
 80193e8:	e023      	b.n	8019432 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	2250      	movs	r2, #80	@ 0x50
 80193f0:	5a9b      	ldrh	r3, [r3, r2]
 80193f2:	b29b      	uxth	r3, r3
 80193f4:	001a      	movs	r2, r3
 80193f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193f8:	781b      	ldrb	r3, [r3, #0]
 80193fa:	00db      	lsls	r3, r3, #3
 80193fc:	18d2      	adds	r2, r2, r3
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	18d3      	adds	r3, r2, r3
 8019404:	4a79      	ldr	r2, [pc, #484]	@ (80195ec <PCD_EP_ISR_Handler+0x6d8>)
 8019406:	4694      	mov	ip, r2
 8019408:	4463      	add	r3, ip
 801940a:	881a      	ldrh	r2, [r3, #0]
 801940c:	2450      	movs	r4, #80	@ 0x50
 801940e:	193b      	adds	r3, r7, r4
 8019410:	0592      	lsls	r2, r2, #22
 8019412:	0d92      	lsrs	r2, r2, #22
 8019414:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8019416:	193b      	adds	r3, r7, r4
 8019418:	881b      	ldrh	r3, [r3, #0]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d009      	beq.n	8019432 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	6818      	ldr	r0, [r3, #0]
 8019422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019424:	6959      	ldr	r1, [r3, #20]
 8019426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019428:	895a      	ldrh	r2, [r3, #10]
 801942a:	193b      	adds	r3, r7, r4
 801942c:	881b      	ldrh	r3, [r3, #0]
 801942e:	f007 f853 	bl	80204d8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8019432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019434:	69da      	ldr	r2, [r3, #28]
 8019436:	2150      	movs	r1, #80	@ 0x50
 8019438:	187b      	adds	r3, r7, r1
 801943a:	881b      	ldrh	r3, [r3, #0]
 801943c:	18d2      	adds	r2, r2, r3
 801943e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019440:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8019442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019444:	695a      	ldr	r2, [r3, #20]
 8019446:	187b      	adds	r3, r7, r1
 8019448:	881b      	ldrh	r3, [r3, #0]
 801944a:	18d2      	adds	r2, r2, r3
 801944c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801944e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8019450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019452:	699b      	ldr	r3, [r3, #24]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d005      	beq.n	8019464 <PCD_EP_ISR_Handler+0x550>
 8019458:	187b      	adds	r3, r7, r1
 801945a:	881a      	ldrh	r2, [r3, #0]
 801945c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801945e:	691b      	ldr	r3, [r3, #16]
 8019460:	429a      	cmp	r2, r3
 8019462:	d207      	bcs.n	8019474 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8019464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019466:	781a      	ldrb	r2, [r3, #0]
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	0011      	movs	r1, r2
 801946c:	0018      	movs	r0, r3
 801946e:	f009 f84e 	bl	802250e <HAL_PCD_DataOutStageCallback>
 8019472:	e006      	b.n	8019482 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801947a:	0011      	movs	r1, r2
 801947c:	0018      	movs	r0, r3
 801947e:	f005 fd6f 	bl	801ef60 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8019482:	244a      	movs	r4, #74	@ 0x4a
 8019484:	193b      	adds	r3, r7, r4
 8019486:	881b      	ldrh	r3, [r3, #0]
 8019488:	2280      	movs	r2, #128	@ 0x80
 801948a:	4013      	ands	r3, r2
 801948c:	d100      	bne.n	8019490 <PCD_EP_ISR_Handler+0x57c>
 801948e:	e133      	b.n	80196f8 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8019490:	204d      	movs	r0, #77	@ 0x4d
 8019492:	183b      	adds	r3, r7, r0
 8019494:	781b      	ldrb	r3, [r3, #0]
 8019496:	1c5a      	adds	r2, r3, #1
 8019498:	0013      	movs	r3, r2
 801949a:	009b      	lsls	r3, r3, #2
 801949c:	189b      	adds	r3, r3, r2
 801949e:	00db      	lsls	r3, r3, #3
 80194a0:	687a      	ldr	r2, [r7, #4]
 80194a2:	18d3      	adds	r3, r2, r3
 80194a4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	001a      	movs	r2, r3
 80194ac:	183b      	adds	r3, r7, r0
 80194ae:	781b      	ldrb	r3, [r3, #0]
 80194b0:	009b      	lsls	r3, r3, #2
 80194b2:	18d3      	adds	r3, r2, r3
 80194b4:	881b      	ldrh	r3, [r3, #0]
 80194b6:	b29a      	uxth	r2, r3
 80194b8:	2542      	movs	r5, #66	@ 0x42
 80194ba:	197b      	adds	r3, r7, r5
 80194bc:	494f      	ldr	r1, [pc, #316]	@ (80195fc <PCD_EP_ISR_Handler+0x6e8>)
 80194be:	400a      	ands	r2, r1
 80194c0:	801a      	strh	r2, [r3, #0]
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	001a      	movs	r2, r3
 80194c8:	183b      	adds	r3, r7, r0
 80194ca:	781b      	ldrb	r3, [r3, #0]
 80194cc:	009b      	lsls	r3, r3, #2
 80194ce:	18d3      	adds	r3, r2, r3
 80194d0:	197a      	adds	r2, r7, r5
 80194d2:	8812      	ldrh	r2, [r2, #0]
 80194d4:	494a      	ldr	r1, [pc, #296]	@ (8019600 <PCD_EP_ISR_Handler+0x6ec>)
 80194d6:	430a      	orrs	r2, r1
 80194d8:	b292      	uxth	r2, r2
 80194da:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80194dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194de:	78db      	ldrb	r3, [r3, #3]
 80194e0:	2b01      	cmp	r3, #1
 80194e2:	d000      	beq.n	80194e6 <PCD_EP_ISR_Handler+0x5d2>
 80194e4:	e0af      	b.n	8019646 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80194e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194e8:	2200      	movs	r2, #0
 80194ea:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80194ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194ee:	7b1b      	ldrb	r3, [r3, #12]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d100      	bne.n	80194f6 <PCD_EP_ISR_Handler+0x5e2>
 80194f4:	e09f      	b.n	8019636 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80194f6:	193b      	adds	r3, r7, r4
 80194f8:	881b      	ldrh	r3, [r3, #0]
 80194fa:	2240      	movs	r2, #64	@ 0x40
 80194fc:	4013      	ands	r3, r2
 80194fe:	d046      	beq.n	801958e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019502:	785b      	ldrb	r3, [r3, #1]
 8019504:	2b00      	cmp	r3, #0
 8019506:	d125      	bne.n	8019554 <PCD_EP_ISR_Handler+0x640>
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	627b      	str	r3, [r7, #36]	@ 0x24
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	2250      	movs	r2, #80	@ 0x50
 8019514:	5a9b      	ldrh	r3, [r3, r2]
 8019516:	b29b      	uxth	r3, r3
 8019518:	001a      	movs	r2, r3
 801951a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801951c:	189b      	adds	r3, r3, r2
 801951e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019522:	781b      	ldrb	r3, [r3, #0]
 8019524:	00da      	lsls	r2, r3, #3
 8019526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019528:	18d3      	adds	r3, r2, r3
 801952a:	4a33      	ldr	r2, [pc, #204]	@ (80195f8 <PCD_EP_ISR_Handler+0x6e4>)
 801952c:	4694      	mov	ip, r2
 801952e:	4463      	add	r3, ip
 8019530:	623b      	str	r3, [r7, #32]
 8019532:	6a3b      	ldr	r3, [r7, #32]
 8019534:	881b      	ldrh	r3, [r3, #0]
 8019536:	b29b      	uxth	r3, r3
 8019538:	059b      	lsls	r3, r3, #22
 801953a:	0d9b      	lsrs	r3, r3, #22
 801953c:	b29a      	uxth	r2, r3
 801953e:	6a3b      	ldr	r3, [r7, #32]
 8019540:	801a      	strh	r2, [r3, #0]
 8019542:	6a3b      	ldr	r3, [r7, #32]
 8019544:	881b      	ldrh	r3, [r3, #0]
 8019546:	b29b      	uxth	r3, r3
 8019548:	4a2d      	ldr	r2, [pc, #180]	@ (8019600 <PCD_EP_ISR_Handler+0x6ec>)
 801954a:	4313      	orrs	r3, r2
 801954c:	b29a      	uxth	r2, r3
 801954e:	6a3b      	ldr	r3, [r7, #32]
 8019550:	801a      	strh	r2, [r3, #0]
 8019552:	e070      	b.n	8019636 <PCD_EP_ISR_Handler+0x722>
 8019554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019556:	785b      	ldrb	r3, [r3, #1]
 8019558:	2b01      	cmp	r3, #1
 801955a:	d16c      	bne.n	8019636 <PCD_EP_ISR_Handler+0x722>
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	2250      	movs	r2, #80	@ 0x50
 8019568:	5a9b      	ldrh	r3, [r3, r2]
 801956a:	b29b      	uxth	r3, r3
 801956c:	001a      	movs	r2, r3
 801956e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019570:	189b      	adds	r3, r3, r2
 8019572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019576:	781b      	ldrb	r3, [r3, #0]
 8019578:	00da      	lsls	r2, r3, #3
 801957a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801957c:	18d3      	adds	r3, r2, r3
 801957e:	4a1e      	ldr	r2, [pc, #120]	@ (80195f8 <PCD_EP_ISR_Handler+0x6e4>)
 8019580:	4694      	mov	ip, r2
 8019582:	4463      	add	r3, ip
 8019584:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019588:	2200      	movs	r2, #0
 801958a:	801a      	strh	r2, [r3, #0]
 801958c:	e053      	b.n	8019636 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019596:	785b      	ldrb	r3, [r3, #1]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d133      	bne.n	8019604 <PCD_EP_ISR_Handler+0x6f0>
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	2250      	movs	r2, #80	@ 0x50
 80195a8:	5a9b      	ldrh	r3, [r3, r2]
 80195aa:	b29b      	uxth	r3, r3
 80195ac:	001a      	movs	r2, r3
 80195ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80195b0:	189b      	adds	r3, r3, r2
 80195b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80195b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195b6:	781b      	ldrb	r3, [r3, #0]
 80195b8:	00da      	lsls	r2, r3, #3
 80195ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80195bc:	18d3      	adds	r3, r2, r3
 80195be:	4a0b      	ldr	r2, [pc, #44]	@ (80195ec <PCD_EP_ISR_Handler+0x6d8>)
 80195c0:	4694      	mov	ip, r2
 80195c2:	4463      	add	r3, ip
 80195c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80195c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195c8:	881b      	ldrh	r3, [r3, #0]
 80195ca:	b29b      	uxth	r3, r3
 80195cc:	059b      	lsls	r3, r3, #22
 80195ce:	0d9b      	lsrs	r3, r3, #22
 80195d0:	b29a      	uxth	r2, r3
 80195d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195d4:	801a      	strh	r2, [r3, #0]
 80195d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195d8:	881b      	ldrh	r3, [r3, #0]
 80195da:	b29b      	uxth	r3, r3
 80195dc:	4a08      	ldr	r2, [pc, #32]	@ (8019600 <PCD_EP_ISR_Handler+0x6ec>)
 80195de:	4313      	orrs	r3, r2
 80195e0:	b29a      	uxth	r2, r3
 80195e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80195e4:	801a      	strh	r2, [r3, #0]
 80195e6:	e026      	b.n	8019636 <PCD_EP_ISR_Handler+0x722>
 80195e8:	00000f8f 	.word	0x00000f8f
 80195ec:	00000406 	.word	0x00000406
 80195f0:	ffff8f8f 	.word	0xffff8f8f
 80195f4:	ffff80c0 	.word	0xffff80c0
 80195f8:	00000402 	.word	0x00000402
 80195fc:	ffff8f0f 	.word	0xffff8f0f
 8019600:	ffff8000 	.word	0xffff8000
 8019604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019606:	785b      	ldrb	r3, [r3, #1]
 8019608:	2b01      	cmp	r3, #1
 801960a:	d114      	bne.n	8019636 <PCD_EP_ISR_Handler+0x722>
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	2250      	movs	r2, #80	@ 0x50
 8019612:	5a9b      	ldrh	r3, [r3, r2]
 8019614:	b29b      	uxth	r3, r3
 8019616:	001a      	movs	r2, r3
 8019618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801961a:	189b      	adds	r3, r3, r2
 801961c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801961e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019620:	781b      	ldrb	r3, [r3, #0]
 8019622:	00da      	lsls	r2, r3, #3
 8019624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019626:	18d3      	adds	r3, r2, r3
 8019628:	4a3b      	ldr	r2, [pc, #236]	@ (8019718 <PCD_EP_ISR_Handler+0x804>)
 801962a:	4694      	mov	ip, r2
 801962c:	4463      	add	r3, ip
 801962e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019632:	2200      	movs	r2, #0
 8019634:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019638:	781a      	ldrb	r2, [r3, #0]
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	0011      	movs	r1, r2
 801963e:	0018      	movs	r0, r3
 8019640:	f008 ff86 	bl	8022550 <HAL_PCD_DataInStageCallback>
 8019644:	e058      	b.n	80196f8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8019646:	234a      	movs	r3, #74	@ 0x4a
 8019648:	18fb      	adds	r3, r7, r3
 801964a:	881a      	ldrh	r2, [r3, #0]
 801964c:	2380      	movs	r3, #128	@ 0x80
 801964e:	005b      	lsls	r3, r3, #1
 8019650:	4013      	ands	r3, r2
 8019652:	d149      	bne.n	80196e8 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	2250      	movs	r2, #80	@ 0x50
 801965a:	5a9b      	ldrh	r3, [r3, r2]
 801965c:	b29b      	uxth	r3, r3
 801965e:	001a      	movs	r2, r3
 8019660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	00db      	lsls	r3, r3, #3
 8019666:	18d2      	adds	r2, r2, r3
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	18d3      	adds	r3, r2, r3
 801966e:	4a2b      	ldr	r2, [pc, #172]	@ (801971c <PCD_EP_ISR_Handler+0x808>)
 8019670:	4694      	mov	ip, r2
 8019672:	4463      	add	r3, ip
 8019674:	881a      	ldrh	r2, [r3, #0]
 8019676:	2140      	movs	r1, #64	@ 0x40
 8019678:	187b      	adds	r3, r7, r1
 801967a:	0592      	lsls	r2, r2, #22
 801967c:	0d92      	lsrs	r2, r2, #22
 801967e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8019680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019682:	699a      	ldr	r2, [r3, #24]
 8019684:	187b      	adds	r3, r7, r1
 8019686:	881b      	ldrh	r3, [r3, #0]
 8019688:	429a      	cmp	r2, r3
 801968a:	d907      	bls.n	801969c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801968c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801968e:	699a      	ldr	r2, [r3, #24]
 8019690:	187b      	adds	r3, r7, r1
 8019692:	881b      	ldrh	r3, [r3, #0]
 8019694:	1ad2      	subs	r2, r2, r3
 8019696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019698:	619a      	str	r2, [r3, #24]
 801969a:	e002      	b.n	80196a2 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801969c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801969e:	2200      	movs	r2, #0
 80196a0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80196a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196a4:	699b      	ldr	r3, [r3, #24]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d107      	bne.n	80196ba <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80196aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196ac:	781a      	ldrb	r2, [r3, #0]
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	0011      	movs	r1, r2
 80196b2:	0018      	movs	r0, r3
 80196b4:	f008 ff4c 	bl	8022550 <HAL_PCD_DataInStageCallback>
 80196b8:	e01e      	b.n	80196f8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80196ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196bc:	695a      	ldr	r2, [r3, #20]
 80196be:	2140      	movs	r1, #64	@ 0x40
 80196c0:	187b      	adds	r3, r7, r1
 80196c2:	881b      	ldrh	r3, [r3, #0]
 80196c4:	18d2      	adds	r2, r2, r3
 80196c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196c8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80196ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196cc:	69da      	ldr	r2, [r3, #28]
 80196ce:	187b      	adds	r3, r7, r1
 80196d0:	881b      	ldrh	r3, [r3, #0]
 80196d2:	18d2      	adds	r2, r2, r3
 80196d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196d6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80196de:	0011      	movs	r1, r2
 80196e0:	0018      	movs	r0, r3
 80196e2:	f005 fc3d 	bl	801ef60 <USB_EPStartXfer>
 80196e6:	e007      	b.n	80196f8 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80196e8:	234a      	movs	r3, #74	@ 0x4a
 80196ea:	18fb      	adds	r3, r7, r3
 80196ec:	881a      	ldrh	r2, [r3, #0]
 80196ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	0018      	movs	r0, r3
 80196f4:	f000 f930 	bl	8019958 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	2244      	movs	r2, #68	@ 0x44
 80196fe:	5a9b      	ldrh	r3, [r3, r2]
 8019700:	b29b      	uxth	r3, r3
 8019702:	b21b      	sxth	r3, r3
 8019704:	2b00      	cmp	r3, #0
 8019706:	da01      	bge.n	801970c <PCD_EP_ISR_Handler+0x7f8>
 8019708:	f7ff fc0a 	bl	8018f20 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801970c:	2300      	movs	r3, #0
}
 801970e:	0018      	movs	r0, r3
 8019710:	46bd      	mov	sp, r7
 8019712:	b016      	add	sp, #88	@ 0x58
 8019714:	bdb0      	pop	{r4, r5, r7, pc}
 8019716:	46c0      	nop			@ (mov r8, r8)
 8019718:	00000406 	.word	0x00000406
 801971c:	00000402 	.word	0x00000402

08019720 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8019720:	b590      	push	{r4, r7, lr}
 8019722:	b089      	sub	sp, #36	@ 0x24
 8019724:	af00      	add	r7, sp, #0
 8019726:	60f8      	str	r0, [r7, #12]
 8019728:	60b9      	str	r1, [r7, #8]
 801972a:	1dbb      	adds	r3, r7, #6
 801972c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801972e:	1dbb      	adds	r3, r7, #6
 8019730:	881a      	ldrh	r2, [r3, #0]
 8019732:	2380      	movs	r3, #128	@ 0x80
 8019734:	01db      	lsls	r3, r3, #7
 8019736:	4013      	ands	r3, r2
 8019738:	d100      	bne.n	801973c <HAL_PCD_EP_DB_Receive+0x1c>
 801973a:	e07d      	b.n	8019838 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	2250      	movs	r2, #80	@ 0x50
 8019742:	5a9b      	ldrh	r3, [r3, r2]
 8019744:	b29b      	uxth	r3, r3
 8019746:	001a      	movs	r2, r3
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	781b      	ldrb	r3, [r3, #0]
 801974c:	00db      	lsls	r3, r3, #3
 801974e:	18d2      	adds	r2, r2, r3
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	18d3      	adds	r3, r2, r3
 8019756:	4a7a      	ldr	r2, [pc, #488]	@ (8019940 <HAL_PCD_EP_DB_Receive+0x220>)
 8019758:	4694      	mov	ip, r2
 801975a:	4463      	add	r3, ip
 801975c:	881a      	ldrh	r2, [r3, #0]
 801975e:	211a      	movs	r1, #26
 8019760:	187b      	adds	r3, r7, r1
 8019762:	0592      	lsls	r2, r2, #22
 8019764:	0d92      	lsrs	r2, r2, #22
 8019766:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019768:	68bb      	ldr	r3, [r7, #8]
 801976a:	699a      	ldr	r2, [r3, #24]
 801976c:	187b      	adds	r3, r7, r1
 801976e:	881b      	ldrh	r3, [r3, #0]
 8019770:	429a      	cmp	r2, r3
 8019772:	d307      	bcc.n	8019784 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8019774:	68bb      	ldr	r3, [r7, #8]
 8019776:	699a      	ldr	r2, [r3, #24]
 8019778:	187b      	adds	r3, r7, r1
 801977a:	881b      	ldrh	r3, [r3, #0]
 801977c:	1ad2      	subs	r2, r2, r3
 801977e:	68bb      	ldr	r3, [r7, #8]
 8019780:	619a      	str	r2, [r3, #24]
 8019782:	e002      	b.n	801978a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	2200      	movs	r2, #0
 8019788:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801978a:	68bb      	ldr	r3, [r7, #8]
 801978c:	699b      	ldr	r3, [r3, #24]
 801978e:	2b00      	cmp	r3, #0
 8019790:	d121      	bne.n	80197d6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	001a      	movs	r2, r3
 8019798:	68bb      	ldr	r3, [r7, #8]
 801979a:	781b      	ldrb	r3, [r3, #0]
 801979c:	009b      	lsls	r3, r3, #2
 801979e:	18d3      	adds	r3, r2, r3
 80197a0:	881b      	ldrh	r3, [r3, #0]
 80197a2:	b29a      	uxth	r2, r3
 80197a4:	2018      	movs	r0, #24
 80197a6:	183b      	adds	r3, r7, r0
 80197a8:	4966      	ldr	r1, [pc, #408]	@ (8019944 <HAL_PCD_EP_DB_Receive+0x224>)
 80197aa:	400a      	ands	r2, r1
 80197ac:	801a      	strh	r2, [r3, #0]
 80197ae:	183b      	adds	r3, r7, r0
 80197b0:	183a      	adds	r2, r7, r0
 80197b2:	8812      	ldrh	r2, [r2, #0]
 80197b4:	2180      	movs	r1, #128	@ 0x80
 80197b6:	0189      	lsls	r1, r1, #6
 80197b8:	404a      	eors	r2, r1
 80197ba:	801a      	strh	r2, [r3, #0]
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	001a      	movs	r2, r3
 80197c2:	68bb      	ldr	r3, [r7, #8]
 80197c4:	781b      	ldrb	r3, [r3, #0]
 80197c6:	009b      	lsls	r3, r3, #2
 80197c8:	18d3      	adds	r3, r2, r3
 80197ca:	183a      	adds	r2, r7, r0
 80197cc:	8812      	ldrh	r2, [r2, #0]
 80197ce:	495e      	ldr	r1, [pc, #376]	@ (8019948 <HAL_PCD_EP_DB_Receive+0x228>)
 80197d0:	430a      	orrs	r2, r1
 80197d2:	b292      	uxth	r2, r2
 80197d4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80197d6:	1dbb      	adds	r3, r7, #6
 80197d8:	881b      	ldrh	r3, [r3, #0]
 80197da:	2240      	movs	r2, #64	@ 0x40
 80197dc:	4013      	ands	r3, r2
 80197de:	d01a      	beq.n	8019816 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	001a      	movs	r2, r3
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	781b      	ldrb	r3, [r3, #0]
 80197ea:	009b      	lsls	r3, r3, #2
 80197ec:	18d3      	adds	r3, r2, r3
 80197ee:	881b      	ldrh	r3, [r3, #0]
 80197f0:	b29a      	uxth	r2, r3
 80197f2:	2016      	movs	r0, #22
 80197f4:	183b      	adds	r3, r7, r0
 80197f6:	4955      	ldr	r1, [pc, #340]	@ (801994c <HAL_PCD_EP_DB_Receive+0x22c>)
 80197f8:	400a      	ands	r2, r1
 80197fa:	801a      	strh	r2, [r3, #0]
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	001a      	movs	r2, r3
 8019802:	68bb      	ldr	r3, [r7, #8]
 8019804:	781b      	ldrb	r3, [r3, #0]
 8019806:	009b      	lsls	r3, r3, #2
 8019808:	18d3      	adds	r3, r2, r3
 801980a:	183a      	adds	r2, r7, r0
 801980c:	8812      	ldrh	r2, [r2, #0]
 801980e:	4950      	ldr	r1, [pc, #320]	@ (8019950 <HAL_PCD_EP_DB_Receive+0x230>)
 8019810:	430a      	orrs	r2, r1
 8019812:	b292      	uxth	r2, r2
 8019814:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8019816:	241a      	movs	r4, #26
 8019818:	193b      	adds	r3, r7, r4
 801981a:	881b      	ldrh	r3, [r3, #0]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d100      	bne.n	8019822 <HAL_PCD_EP_DB_Receive+0x102>
 8019820:	e086      	b.n	8019930 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	6818      	ldr	r0, [r3, #0]
 8019826:	68bb      	ldr	r3, [r7, #8]
 8019828:	6959      	ldr	r1, [r3, #20]
 801982a:	68bb      	ldr	r3, [r7, #8]
 801982c:	891a      	ldrh	r2, [r3, #8]
 801982e:	193b      	adds	r3, r7, r4
 8019830:	881b      	ldrh	r3, [r3, #0]
 8019832:	f006 fe51 	bl	80204d8 <USB_ReadPMA>
 8019836:	e07b      	b.n	8019930 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019838:	68fb      	ldr	r3, [r7, #12]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	2250      	movs	r2, #80	@ 0x50
 801983e:	5a9b      	ldrh	r3, [r3, r2]
 8019840:	b29b      	uxth	r3, r3
 8019842:	001a      	movs	r2, r3
 8019844:	68bb      	ldr	r3, [r7, #8]
 8019846:	781b      	ldrb	r3, [r3, #0]
 8019848:	00db      	lsls	r3, r3, #3
 801984a:	18d2      	adds	r2, r2, r3
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	18d3      	adds	r3, r2, r3
 8019852:	4a40      	ldr	r2, [pc, #256]	@ (8019954 <HAL_PCD_EP_DB_Receive+0x234>)
 8019854:	4694      	mov	ip, r2
 8019856:	4463      	add	r3, ip
 8019858:	881a      	ldrh	r2, [r3, #0]
 801985a:	211a      	movs	r1, #26
 801985c:	187b      	adds	r3, r7, r1
 801985e:	0592      	lsls	r2, r2, #22
 8019860:	0d92      	lsrs	r2, r2, #22
 8019862:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8019864:	68bb      	ldr	r3, [r7, #8]
 8019866:	699a      	ldr	r2, [r3, #24]
 8019868:	187b      	adds	r3, r7, r1
 801986a:	881b      	ldrh	r3, [r3, #0]
 801986c:	429a      	cmp	r2, r3
 801986e:	d307      	bcc.n	8019880 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8019870:	68bb      	ldr	r3, [r7, #8]
 8019872:	699a      	ldr	r2, [r3, #24]
 8019874:	187b      	adds	r3, r7, r1
 8019876:	881b      	ldrh	r3, [r3, #0]
 8019878:	1ad2      	subs	r2, r2, r3
 801987a:	68bb      	ldr	r3, [r7, #8]
 801987c:	619a      	str	r2, [r3, #24]
 801987e:	e002      	b.n	8019886 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8019880:	68bb      	ldr	r3, [r7, #8]
 8019882:	2200      	movs	r2, #0
 8019884:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8019886:	68bb      	ldr	r3, [r7, #8]
 8019888:	699b      	ldr	r3, [r3, #24]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d121      	bne.n	80198d2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	001a      	movs	r2, r3
 8019894:	68bb      	ldr	r3, [r7, #8]
 8019896:	781b      	ldrb	r3, [r3, #0]
 8019898:	009b      	lsls	r3, r3, #2
 801989a:	18d3      	adds	r3, r2, r3
 801989c:	881b      	ldrh	r3, [r3, #0]
 801989e:	b29a      	uxth	r2, r3
 80198a0:	201e      	movs	r0, #30
 80198a2:	183b      	adds	r3, r7, r0
 80198a4:	4927      	ldr	r1, [pc, #156]	@ (8019944 <HAL_PCD_EP_DB_Receive+0x224>)
 80198a6:	400a      	ands	r2, r1
 80198a8:	801a      	strh	r2, [r3, #0]
 80198aa:	183b      	adds	r3, r7, r0
 80198ac:	183a      	adds	r2, r7, r0
 80198ae:	8812      	ldrh	r2, [r2, #0]
 80198b0:	2180      	movs	r1, #128	@ 0x80
 80198b2:	0189      	lsls	r1, r1, #6
 80198b4:	404a      	eors	r2, r1
 80198b6:	801a      	strh	r2, [r3, #0]
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	001a      	movs	r2, r3
 80198be:	68bb      	ldr	r3, [r7, #8]
 80198c0:	781b      	ldrb	r3, [r3, #0]
 80198c2:	009b      	lsls	r3, r3, #2
 80198c4:	18d3      	adds	r3, r2, r3
 80198c6:	183a      	adds	r2, r7, r0
 80198c8:	8812      	ldrh	r2, [r2, #0]
 80198ca:	491f      	ldr	r1, [pc, #124]	@ (8019948 <HAL_PCD_EP_DB_Receive+0x228>)
 80198cc:	430a      	orrs	r2, r1
 80198ce:	b292      	uxth	r2, r2
 80198d0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80198d2:	1dbb      	adds	r3, r7, #6
 80198d4:	881b      	ldrh	r3, [r3, #0]
 80198d6:	2240      	movs	r2, #64	@ 0x40
 80198d8:	4013      	ands	r3, r2
 80198da:	d11a      	bne.n	8019912 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	001a      	movs	r2, r3
 80198e2:	68bb      	ldr	r3, [r7, #8]
 80198e4:	781b      	ldrb	r3, [r3, #0]
 80198e6:	009b      	lsls	r3, r3, #2
 80198e8:	18d3      	adds	r3, r2, r3
 80198ea:	881b      	ldrh	r3, [r3, #0]
 80198ec:	b29a      	uxth	r2, r3
 80198ee:	201c      	movs	r0, #28
 80198f0:	183b      	adds	r3, r7, r0
 80198f2:	4916      	ldr	r1, [pc, #88]	@ (801994c <HAL_PCD_EP_DB_Receive+0x22c>)
 80198f4:	400a      	ands	r2, r1
 80198f6:	801a      	strh	r2, [r3, #0]
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	001a      	movs	r2, r3
 80198fe:	68bb      	ldr	r3, [r7, #8]
 8019900:	781b      	ldrb	r3, [r3, #0]
 8019902:	009b      	lsls	r3, r3, #2
 8019904:	18d3      	adds	r3, r2, r3
 8019906:	183a      	adds	r2, r7, r0
 8019908:	8812      	ldrh	r2, [r2, #0]
 801990a:	4911      	ldr	r1, [pc, #68]	@ (8019950 <HAL_PCD_EP_DB_Receive+0x230>)
 801990c:	430a      	orrs	r2, r1
 801990e:	b292      	uxth	r2, r2
 8019910:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8019912:	241a      	movs	r4, #26
 8019914:	193b      	adds	r3, r7, r4
 8019916:	881b      	ldrh	r3, [r3, #0]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d009      	beq.n	8019930 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	6818      	ldr	r0, [r3, #0]
 8019920:	68bb      	ldr	r3, [r7, #8]
 8019922:	6959      	ldr	r1, [r3, #20]
 8019924:	68bb      	ldr	r3, [r7, #8]
 8019926:	895a      	ldrh	r2, [r3, #10]
 8019928:	193b      	adds	r3, r7, r4
 801992a:	881b      	ldrh	r3, [r3, #0]
 801992c:	f006 fdd4 	bl	80204d8 <USB_ReadPMA>
    }
  }

  return count;
 8019930:	231a      	movs	r3, #26
 8019932:	18fb      	adds	r3, r7, r3
 8019934:	881b      	ldrh	r3, [r3, #0]
}
 8019936:	0018      	movs	r0, r3
 8019938:	46bd      	mov	sp, r7
 801993a:	b009      	add	sp, #36	@ 0x24
 801993c:	bd90      	pop	{r4, r7, pc}
 801993e:	46c0      	nop			@ (mov r8, r8)
 8019940:	00000402 	.word	0x00000402
 8019944:	ffffbf8f 	.word	0xffffbf8f
 8019948:	ffff8080 	.word	0xffff8080
 801994c:	ffff8f8f 	.word	0xffff8f8f
 8019950:	ffff80c0 	.word	0xffff80c0
 8019954:	00000406 	.word	0x00000406

08019958 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b0a4      	sub	sp, #144	@ 0x90
 801995c:	af00      	add	r7, sp, #0
 801995e:	60f8      	str	r0, [r7, #12]
 8019960:	60b9      	str	r1, [r7, #8]
 8019962:	1dbb      	adds	r3, r7, #6
 8019964:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019966:	1dbb      	adds	r3, r7, #6
 8019968:	881b      	ldrh	r3, [r3, #0]
 801996a:	2240      	movs	r2, #64	@ 0x40
 801996c:	4013      	ands	r3, r2
 801996e:	d100      	bne.n	8019972 <HAL_PCD_EP_DB_Transmit+0x1a>
 8019970:	e1e4      	b.n	8019d3c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	2250      	movs	r2, #80	@ 0x50
 8019978:	5a9b      	ldrh	r3, [r3, r2]
 801997a:	b29b      	uxth	r3, r3
 801997c:	001a      	movs	r2, r3
 801997e:	68bb      	ldr	r3, [r7, #8]
 8019980:	781b      	ldrb	r3, [r3, #0]
 8019982:	00db      	lsls	r3, r3, #3
 8019984:	18d2      	adds	r2, r2, r3
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	18d3      	adds	r3, r2, r3
 801998c:	4ad0      	ldr	r2, [pc, #832]	@ (8019cd0 <HAL_PCD_EP_DB_Transmit+0x378>)
 801998e:	4694      	mov	ip, r2
 8019990:	4463      	add	r3, ip
 8019992:	881a      	ldrh	r2, [r3, #0]
 8019994:	2186      	movs	r1, #134	@ 0x86
 8019996:	187b      	adds	r3, r7, r1
 8019998:	0592      	lsls	r2, r2, #22
 801999a:	0d92      	lsrs	r2, r2, #22
 801999c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801999e:	68bb      	ldr	r3, [r7, #8]
 80199a0:	699a      	ldr	r2, [r3, #24]
 80199a2:	187b      	adds	r3, r7, r1
 80199a4:	881b      	ldrh	r3, [r3, #0]
 80199a6:	429a      	cmp	r2, r3
 80199a8:	d907      	bls.n	80199ba <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80199aa:	68bb      	ldr	r3, [r7, #8]
 80199ac:	699a      	ldr	r2, [r3, #24]
 80199ae:	187b      	adds	r3, r7, r1
 80199b0:	881b      	ldrh	r3, [r3, #0]
 80199b2:	1ad2      	subs	r2, r2, r3
 80199b4:	68bb      	ldr	r3, [r7, #8]
 80199b6:	619a      	str	r2, [r3, #24]
 80199b8:	e002      	b.n	80199c0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80199ba:	68bb      	ldr	r3, [r7, #8]
 80199bc:	2200      	movs	r2, #0
 80199be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80199c0:	68bb      	ldr	r3, [r7, #8]
 80199c2:	699b      	ldr	r3, [r3, #24]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d000      	beq.n	80199ca <HAL_PCD_EP_DB_Transmit+0x72>
 80199c8:	e0b5      	b.n	8019b36 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80199ca:	68bb      	ldr	r3, [r7, #8]
 80199cc:	785b      	ldrb	r3, [r3, #1]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d125      	bne.n	8019a1e <HAL_PCD_EP_DB_Transmit+0xc6>
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80199d8:	68fb      	ldr	r3, [r7, #12]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	2250      	movs	r2, #80	@ 0x50
 80199de:	5a9b      	ldrh	r3, [r3, r2]
 80199e0:	b29b      	uxth	r3, r3
 80199e2:	001a      	movs	r2, r3
 80199e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199e6:	189b      	adds	r3, r3, r2
 80199e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80199ea:	68bb      	ldr	r3, [r7, #8]
 80199ec:	781b      	ldrb	r3, [r3, #0]
 80199ee:	00da      	lsls	r2, r3, #3
 80199f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80199f2:	18d3      	adds	r3, r2, r3
 80199f4:	4ab6      	ldr	r2, [pc, #728]	@ (8019cd0 <HAL_PCD_EP_DB_Transmit+0x378>)
 80199f6:	4694      	mov	ip, r2
 80199f8:	4463      	add	r3, ip
 80199fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80199fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199fe:	881b      	ldrh	r3, [r3, #0]
 8019a00:	b29b      	uxth	r3, r3
 8019a02:	059b      	lsls	r3, r3, #22
 8019a04:	0d9b      	lsrs	r3, r3, #22
 8019a06:	b29a      	uxth	r2, r3
 8019a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a0a:	801a      	strh	r2, [r3, #0]
 8019a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a0e:	881b      	ldrh	r3, [r3, #0]
 8019a10:	b29b      	uxth	r3, r3
 8019a12:	4ab0      	ldr	r2, [pc, #704]	@ (8019cd4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019a14:	4313      	orrs	r3, r2
 8019a16:	b29a      	uxth	r2, r3
 8019a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a1a:	801a      	strh	r2, [r3, #0]
 8019a1c:	e01b      	b.n	8019a56 <HAL_PCD_EP_DB_Transmit+0xfe>
 8019a1e:	68bb      	ldr	r3, [r7, #8]
 8019a20:	785b      	ldrb	r3, [r3, #1]
 8019a22:	2b01      	cmp	r3, #1
 8019a24:	d117      	bne.n	8019a56 <HAL_PCD_EP_DB_Transmit+0xfe>
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	2250      	movs	r2, #80	@ 0x50
 8019a32:	5a9b      	ldrh	r3, [r3, r2]
 8019a34:	b29b      	uxth	r3, r3
 8019a36:	001a      	movs	r2, r3
 8019a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a3a:	189b      	adds	r3, r3, r2
 8019a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a3e:	68bb      	ldr	r3, [r7, #8]
 8019a40:	781b      	ldrb	r3, [r3, #0]
 8019a42:	00da      	lsls	r2, r3, #3
 8019a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019a46:	18d3      	adds	r3, r2, r3
 8019a48:	4aa1      	ldr	r2, [pc, #644]	@ (8019cd0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8019a4a:	4694      	mov	ip, r2
 8019a4c:	4463      	add	r3, ip
 8019a4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8019a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a52:	2200      	movs	r2, #0
 8019a54:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8019a5c:	68bb      	ldr	r3, [r7, #8]
 8019a5e:	785b      	ldrb	r3, [r3, #1]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d125      	bne.n	8019ab0 <HAL_PCD_EP_DB_Transmit+0x158>
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	61fb      	str	r3, [r7, #28]
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	2250      	movs	r2, #80	@ 0x50
 8019a70:	5a9b      	ldrh	r3, [r3, r2]
 8019a72:	b29b      	uxth	r3, r3
 8019a74:	001a      	movs	r2, r3
 8019a76:	69fb      	ldr	r3, [r7, #28]
 8019a78:	189b      	adds	r3, r3, r2
 8019a7a:	61fb      	str	r3, [r7, #28]
 8019a7c:	68bb      	ldr	r3, [r7, #8]
 8019a7e:	781b      	ldrb	r3, [r3, #0]
 8019a80:	00da      	lsls	r2, r3, #3
 8019a82:	69fb      	ldr	r3, [r7, #28]
 8019a84:	18d3      	adds	r3, r2, r3
 8019a86:	4a94      	ldr	r2, [pc, #592]	@ (8019cd8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8019a88:	4694      	mov	ip, r2
 8019a8a:	4463      	add	r3, ip
 8019a8c:	61bb      	str	r3, [r7, #24]
 8019a8e:	69bb      	ldr	r3, [r7, #24]
 8019a90:	881b      	ldrh	r3, [r3, #0]
 8019a92:	b29b      	uxth	r3, r3
 8019a94:	059b      	lsls	r3, r3, #22
 8019a96:	0d9b      	lsrs	r3, r3, #22
 8019a98:	b29a      	uxth	r2, r3
 8019a9a:	69bb      	ldr	r3, [r7, #24]
 8019a9c:	801a      	strh	r2, [r3, #0]
 8019a9e:	69bb      	ldr	r3, [r7, #24]
 8019aa0:	881b      	ldrh	r3, [r3, #0]
 8019aa2:	b29b      	uxth	r3, r3
 8019aa4:	4a8b      	ldr	r2, [pc, #556]	@ (8019cd4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019aa6:	4313      	orrs	r3, r2
 8019aa8:	b29a      	uxth	r2, r3
 8019aaa:	69bb      	ldr	r3, [r7, #24]
 8019aac:	801a      	strh	r2, [r3, #0]
 8019aae:	e018      	b.n	8019ae2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8019ab0:	68bb      	ldr	r3, [r7, #8]
 8019ab2:	785b      	ldrb	r3, [r3, #1]
 8019ab4:	2b01      	cmp	r3, #1
 8019ab6:	d114      	bne.n	8019ae2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	2250      	movs	r2, #80	@ 0x50
 8019abe:	5a9b      	ldrh	r3, [r3, r2]
 8019ac0:	b29b      	uxth	r3, r3
 8019ac2:	001a      	movs	r2, r3
 8019ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ac6:	189b      	adds	r3, r3, r2
 8019ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8019aca:	68bb      	ldr	r3, [r7, #8]
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	00da      	lsls	r2, r3, #3
 8019ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ad2:	18d3      	adds	r3, r2, r3
 8019ad4:	4a80      	ldr	r2, [pc, #512]	@ (8019cd8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8019ad6:	4694      	mov	ip, r2
 8019ad8:	4463      	add	r3, ip
 8019ada:	623b      	str	r3, [r7, #32]
 8019adc:	6a3b      	ldr	r3, [r7, #32]
 8019ade:	2200      	movs	r2, #0
 8019ae0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019ae2:	68bb      	ldr	r3, [r7, #8]
 8019ae4:	781a      	ldrb	r2, [r3, #0]
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	0011      	movs	r1, r2
 8019aea:	0018      	movs	r0, r3
 8019aec:	f008 fd30 	bl	8022550 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019af0:	1dbb      	adds	r3, r7, #6
 8019af2:	881a      	ldrh	r2, [r3, #0]
 8019af4:	2380      	movs	r3, #128	@ 0x80
 8019af6:	01db      	lsls	r3, r3, #7
 8019af8:	4013      	ands	r3, r2
 8019afa:	d100      	bne.n	8019afe <HAL_PCD_EP_DB_Transmit+0x1a6>
 8019afc:	e309      	b.n	801a112 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	001a      	movs	r2, r3
 8019b04:	68bb      	ldr	r3, [r7, #8]
 8019b06:	781b      	ldrb	r3, [r3, #0]
 8019b08:	009b      	lsls	r3, r3, #2
 8019b0a:	18d3      	adds	r3, r2, r3
 8019b0c:	881b      	ldrh	r3, [r3, #0]
 8019b0e:	b29a      	uxth	r2, r3
 8019b10:	2016      	movs	r0, #22
 8019b12:	183b      	adds	r3, r7, r0
 8019b14:	4971      	ldr	r1, [pc, #452]	@ (8019cdc <HAL_PCD_EP_DB_Transmit+0x384>)
 8019b16:	400a      	ands	r2, r1
 8019b18:	801a      	strh	r2, [r3, #0]
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	001a      	movs	r2, r3
 8019b20:	68bb      	ldr	r3, [r7, #8]
 8019b22:	781b      	ldrb	r3, [r3, #0]
 8019b24:	009b      	lsls	r3, r3, #2
 8019b26:	18d3      	adds	r3, r2, r3
 8019b28:	183a      	adds	r2, r7, r0
 8019b2a:	8812      	ldrh	r2, [r2, #0]
 8019b2c:	496c      	ldr	r1, [pc, #432]	@ (8019ce0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8019b2e:	430a      	orrs	r2, r1
 8019b30:	b292      	uxth	r2, r2
 8019b32:	801a      	strh	r2, [r3, #0]
 8019b34:	e2ed      	b.n	801a112 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019b36:	1dbb      	adds	r3, r7, #6
 8019b38:	881a      	ldrh	r2, [r3, #0]
 8019b3a:	2380      	movs	r3, #128	@ 0x80
 8019b3c:	01db      	lsls	r3, r3, #7
 8019b3e:	4013      	ands	r3, r2
 8019b40:	d01a      	beq.n	8019b78 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	001a      	movs	r2, r3
 8019b48:	68bb      	ldr	r3, [r7, #8]
 8019b4a:	781b      	ldrb	r3, [r3, #0]
 8019b4c:	009b      	lsls	r3, r3, #2
 8019b4e:	18d3      	adds	r3, r2, r3
 8019b50:	881b      	ldrh	r3, [r3, #0]
 8019b52:	b29a      	uxth	r2, r3
 8019b54:	208a      	movs	r0, #138	@ 0x8a
 8019b56:	183b      	adds	r3, r7, r0
 8019b58:	4960      	ldr	r1, [pc, #384]	@ (8019cdc <HAL_PCD_EP_DB_Transmit+0x384>)
 8019b5a:	400a      	ands	r2, r1
 8019b5c:	801a      	strh	r2, [r3, #0]
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	001a      	movs	r2, r3
 8019b64:	68bb      	ldr	r3, [r7, #8]
 8019b66:	781b      	ldrb	r3, [r3, #0]
 8019b68:	009b      	lsls	r3, r3, #2
 8019b6a:	18d3      	adds	r3, r2, r3
 8019b6c:	183a      	adds	r2, r7, r0
 8019b6e:	8812      	ldrh	r2, [r2, #0]
 8019b70:	495b      	ldr	r1, [pc, #364]	@ (8019ce0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8019b72:	430a      	orrs	r2, r1
 8019b74:	b292      	uxth	r2, r2
 8019b76:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8019b78:	68bb      	ldr	r3, [r7, #8]
 8019b7a:	2224      	movs	r2, #36	@ 0x24
 8019b7c:	5c9b      	ldrb	r3, [r3, r2]
 8019b7e:	2b01      	cmp	r3, #1
 8019b80:	d000      	beq.n	8019b84 <HAL_PCD_EP_DB_Transmit+0x22c>
 8019b82:	e2c6      	b.n	801a112 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019b84:	68bb      	ldr	r3, [r7, #8]
 8019b86:	695a      	ldr	r2, [r3, #20]
 8019b88:	2186      	movs	r1, #134	@ 0x86
 8019b8a:	187b      	adds	r3, r7, r1
 8019b8c:	881b      	ldrh	r3, [r3, #0]
 8019b8e:	18d2      	adds	r2, r2, r3
 8019b90:	68bb      	ldr	r3, [r7, #8]
 8019b92:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019b94:	68bb      	ldr	r3, [r7, #8]
 8019b96:	69da      	ldr	r2, [r3, #28]
 8019b98:	187b      	adds	r3, r7, r1
 8019b9a:	881b      	ldrh	r3, [r3, #0]
 8019b9c:	18d2      	adds	r2, r2, r3
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	6a1a      	ldr	r2, [r3, #32]
 8019ba6:	68bb      	ldr	r3, [r7, #8]
 8019ba8:	691b      	ldr	r3, [r3, #16]
 8019baa:	429a      	cmp	r2, r3
 8019bac:	d30c      	bcc.n	8019bc8 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8019bae:	68bb      	ldr	r3, [r7, #8]
 8019bb0:	691b      	ldr	r3, [r3, #16]
 8019bb2:	218c      	movs	r1, #140	@ 0x8c
 8019bb4:	187a      	adds	r2, r7, r1
 8019bb6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8019bb8:	68bb      	ldr	r3, [r7, #8]
 8019bba:	6a1a      	ldr	r2, [r3, #32]
 8019bbc:	187b      	adds	r3, r7, r1
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	1ad2      	subs	r2, r2, r3
 8019bc2:	68bb      	ldr	r3, [r7, #8]
 8019bc4:	621a      	str	r2, [r3, #32]
 8019bc6:	e01a      	b.n	8019bfe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8019bc8:	68bb      	ldr	r3, [r7, #8]
 8019bca:	6a1b      	ldr	r3, [r3, #32]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d10a      	bne.n	8019be6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8019bd0:	2386      	movs	r3, #134	@ 0x86
 8019bd2:	18fb      	adds	r3, r7, r3
 8019bd4:	881b      	ldrh	r3, [r3, #0]
 8019bd6:	228c      	movs	r2, #140	@ 0x8c
 8019bd8:	18ba      	adds	r2, r7, r2
 8019bda:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	2224      	movs	r2, #36	@ 0x24
 8019be0:	2100      	movs	r1, #0
 8019be2:	5499      	strb	r1, [r3, r2]
 8019be4:	e00b      	b.n	8019bfe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8019be6:	68bb      	ldr	r3, [r7, #8]
 8019be8:	2224      	movs	r2, #36	@ 0x24
 8019bea:	2100      	movs	r1, #0
 8019bec:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8019bee:	68bb      	ldr	r3, [r7, #8]
 8019bf0:	6a1b      	ldr	r3, [r3, #32]
 8019bf2:	228c      	movs	r2, #140	@ 0x8c
 8019bf4:	18ba      	adds	r2, r7, r2
 8019bf6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8019bf8:	68bb      	ldr	r3, [r7, #8]
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8019bfe:	68bb      	ldr	r3, [r7, #8]
 8019c00:	785b      	ldrb	r3, [r3, #1]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d000      	beq.n	8019c08 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8019c06:	e06d      	b.n	8019ce4 <HAL_PCD_EP_DB_Transmit+0x38c>
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	2250      	movs	r2, #80	@ 0x50
 8019c14:	5a9b      	ldrh	r3, [r3, r2]
 8019c16:	b29b      	uxth	r3, r3
 8019c18:	001a      	movs	r2, r3
 8019c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c1c:	189b      	adds	r3, r3, r2
 8019c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019c20:	68bb      	ldr	r3, [r7, #8]
 8019c22:	781b      	ldrb	r3, [r3, #0]
 8019c24:	00da      	lsls	r2, r3, #3
 8019c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c28:	18d3      	adds	r3, r2, r3
 8019c2a:	4a29      	ldr	r2, [pc, #164]	@ (8019cd0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8019c2c:	4694      	mov	ip, r2
 8019c2e:	4463      	add	r3, ip
 8019c30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c34:	881b      	ldrh	r3, [r3, #0]
 8019c36:	b29b      	uxth	r3, r3
 8019c38:	059b      	lsls	r3, r3, #22
 8019c3a:	0d9b      	lsrs	r3, r3, #22
 8019c3c:	b29a      	uxth	r2, r3
 8019c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c40:	801a      	strh	r2, [r3, #0]
 8019c42:	228c      	movs	r2, #140	@ 0x8c
 8019c44:	18bb      	adds	r3, r7, r2
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	2b3e      	cmp	r3, #62	@ 0x3e
 8019c4a:	d91a      	bls.n	8019c82 <HAL_PCD_EP_DB_Transmit+0x32a>
 8019c4c:	18bb      	adds	r3, r7, r2
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	095b      	lsrs	r3, r3, #5
 8019c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019c54:	18bb      	adds	r3, r7, r2
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	221f      	movs	r2, #31
 8019c5a:	4013      	ands	r3, r2
 8019c5c:	d102      	bne.n	8019c64 <HAL_PCD_EP_DB_Transmit+0x30c>
 8019c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019c60:	3b01      	subs	r3, #1
 8019c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c66:	881b      	ldrh	r3, [r3, #0]
 8019c68:	b29a      	uxth	r2, r3
 8019c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019c6c:	b29b      	uxth	r3, r3
 8019c6e:	029b      	lsls	r3, r3, #10
 8019c70:	b29b      	uxth	r3, r3
 8019c72:	4313      	orrs	r3, r2
 8019c74:	b29b      	uxth	r3, r3
 8019c76:	4a17      	ldr	r2, [pc, #92]	@ (8019cd4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019c78:	4313      	orrs	r3, r2
 8019c7a:	b29a      	uxth	r2, r3
 8019c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c7e:	801a      	strh	r2, [r3, #0]
 8019c80:	e04f      	b.n	8019d22 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019c82:	238c      	movs	r3, #140	@ 0x8c
 8019c84:	18fb      	adds	r3, r7, r3
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d108      	bne.n	8019c9e <HAL_PCD_EP_DB_Transmit+0x346>
 8019c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c8e:	881b      	ldrh	r3, [r3, #0]
 8019c90:	b29b      	uxth	r3, r3
 8019c92:	4a10      	ldr	r2, [pc, #64]	@ (8019cd4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019c94:	4313      	orrs	r3, r2
 8019c96:	b29a      	uxth	r2, r3
 8019c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019c9a:	801a      	strh	r2, [r3, #0]
 8019c9c:	e041      	b.n	8019d22 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019c9e:	228c      	movs	r2, #140	@ 0x8c
 8019ca0:	18bb      	adds	r3, r7, r2
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	085b      	lsrs	r3, r3, #1
 8019ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019ca8:	18bb      	adds	r3, r7, r2
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	2201      	movs	r2, #1
 8019cae:	4013      	ands	r3, r2
 8019cb0:	d002      	beq.n	8019cb8 <HAL_PCD_EP_DB_Transmit+0x360>
 8019cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019cb4:	3301      	adds	r3, #1
 8019cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cba:	881b      	ldrh	r3, [r3, #0]
 8019cbc:	b29a      	uxth	r2, r3
 8019cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019cc0:	b29b      	uxth	r3, r3
 8019cc2:	029b      	lsls	r3, r3, #10
 8019cc4:	b29b      	uxth	r3, r3
 8019cc6:	4313      	orrs	r3, r2
 8019cc8:	b29a      	uxth	r2, r3
 8019cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ccc:	801a      	strh	r2, [r3, #0]
 8019cce:	e028      	b.n	8019d22 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019cd0:	00000402 	.word	0x00000402
 8019cd4:	ffff8000 	.word	0xffff8000
 8019cd8:	00000406 	.word	0x00000406
 8019cdc:	ffff8f8f 	.word	0xffff8f8f
 8019ce0:	ffffc080 	.word	0xffffc080
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	785b      	ldrb	r3, [r3, #1]
 8019ce8:	2b01      	cmp	r3, #1
 8019cea:	d11a      	bne.n	8019d22 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	2250      	movs	r2, #80	@ 0x50
 8019cf8:	5a9b      	ldrh	r3, [r3, r2]
 8019cfa:	b29b      	uxth	r3, r3
 8019cfc:	001a      	movs	r2, r3
 8019cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d00:	189b      	adds	r3, r3, r2
 8019d02:	647b      	str	r3, [r7, #68]	@ 0x44
 8019d04:	68bb      	ldr	r3, [r7, #8]
 8019d06:	781b      	ldrb	r3, [r3, #0]
 8019d08:	00da      	lsls	r2, r3, #3
 8019d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d0c:	18d3      	adds	r3, r2, r3
 8019d0e:	4adb      	ldr	r2, [pc, #876]	@ (801a07c <HAL_PCD_EP_DB_Transmit+0x724>)
 8019d10:	4694      	mov	ip, r2
 8019d12:	4463      	add	r3, ip
 8019d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d16:	238c      	movs	r3, #140	@ 0x8c
 8019d18:	18fb      	adds	r3, r7, r3
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	b29a      	uxth	r2, r3
 8019d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019d20:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	6818      	ldr	r0, [r3, #0]
 8019d26:	68bb      	ldr	r3, [r7, #8]
 8019d28:	6959      	ldr	r1, [r3, #20]
 8019d2a:	68bb      	ldr	r3, [r7, #8]
 8019d2c:	891a      	ldrh	r2, [r3, #8]
 8019d2e:	238c      	movs	r3, #140	@ 0x8c
 8019d30:	18fb      	adds	r3, r7, r3
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	b29b      	uxth	r3, r3
 8019d36:	f006 fb85 	bl	8020444 <USB_WritePMA>
 8019d3a:	e1ea      	b.n	801a112 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	2250      	movs	r2, #80	@ 0x50
 8019d42:	5a9b      	ldrh	r3, [r3, r2]
 8019d44:	b29b      	uxth	r3, r3
 8019d46:	001a      	movs	r2, r3
 8019d48:	68bb      	ldr	r3, [r7, #8]
 8019d4a:	781b      	ldrb	r3, [r3, #0]
 8019d4c:	00db      	lsls	r3, r3, #3
 8019d4e:	18d2      	adds	r2, r2, r3
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	18d3      	adds	r3, r2, r3
 8019d56:	4aca      	ldr	r2, [pc, #808]	@ (801a080 <HAL_PCD_EP_DB_Transmit+0x728>)
 8019d58:	4694      	mov	ip, r2
 8019d5a:	4463      	add	r3, ip
 8019d5c:	881a      	ldrh	r2, [r3, #0]
 8019d5e:	2186      	movs	r1, #134	@ 0x86
 8019d60:	187b      	adds	r3, r7, r1
 8019d62:	0592      	lsls	r2, r2, #22
 8019d64:	0d92      	lsrs	r2, r2, #22
 8019d66:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8019d68:	68bb      	ldr	r3, [r7, #8]
 8019d6a:	699a      	ldr	r2, [r3, #24]
 8019d6c:	187b      	adds	r3, r7, r1
 8019d6e:	881b      	ldrh	r3, [r3, #0]
 8019d70:	429a      	cmp	r2, r3
 8019d72:	d307      	bcc.n	8019d84 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8019d74:	68bb      	ldr	r3, [r7, #8]
 8019d76:	699a      	ldr	r2, [r3, #24]
 8019d78:	187b      	adds	r3, r7, r1
 8019d7a:	881b      	ldrh	r3, [r3, #0]
 8019d7c:	1ad2      	subs	r2, r2, r3
 8019d7e:	68bb      	ldr	r3, [r7, #8]
 8019d80:	619a      	str	r2, [r3, #24]
 8019d82:	e002      	b.n	8019d8a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8019d84:	68bb      	ldr	r3, [r7, #8]
 8019d86:	2200      	movs	r2, #0
 8019d88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8019d8a:	68bb      	ldr	r3, [r7, #8]
 8019d8c:	699b      	ldr	r3, [r3, #24]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d000      	beq.n	8019d94 <HAL_PCD_EP_DB_Transmit+0x43c>
 8019d92:	e0bb      	b.n	8019f0c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019d94:	68bb      	ldr	r3, [r7, #8]
 8019d96:	785b      	ldrb	r3, [r3, #1]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d125      	bne.n	8019de8 <HAL_PCD_EP_DB_Transmit+0x490>
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	2250      	movs	r2, #80	@ 0x50
 8019da8:	5a9b      	ldrh	r3, [r3, r2]
 8019daa:	b29b      	uxth	r3, r3
 8019dac:	001a      	movs	r2, r3
 8019dae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019db0:	189b      	adds	r3, r3, r2
 8019db2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019db4:	68bb      	ldr	r3, [r7, #8]
 8019db6:	781b      	ldrb	r3, [r3, #0]
 8019db8:	00da      	lsls	r2, r3, #3
 8019dba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019dbc:	18d3      	adds	r3, r2, r3
 8019dbe:	4aaf      	ldr	r2, [pc, #700]	@ (801a07c <HAL_PCD_EP_DB_Transmit+0x724>)
 8019dc0:	4694      	mov	ip, r2
 8019dc2:	4463      	add	r3, ip
 8019dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019dc8:	881b      	ldrh	r3, [r3, #0]
 8019dca:	b29b      	uxth	r3, r3
 8019dcc:	059b      	lsls	r3, r3, #22
 8019dce:	0d9b      	lsrs	r3, r3, #22
 8019dd0:	b29a      	uxth	r2, r3
 8019dd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019dd4:	801a      	strh	r2, [r3, #0]
 8019dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019dd8:	881b      	ldrh	r3, [r3, #0]
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	4aa9      	ldr	r2, [pc, #676]	@ (801a084 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019dde:	4313      	orrs	r3, r2
 8019de0:	b29a      	uxth	r2, r3
 8019de2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019de4:	801a      	strh	r2, [r3, #0]
 8019de6:	e01b      	b.n	8019e20 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8019de8:	68bb      	ldr	r3, [r7, #8]
 8019dea:	785b      	ldrb	r3, [r3, #1]
 8019dec:	2b01      	cmp	r3, #1
 8019dee:	d117      	bne.n	8019e20 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	667b      	str	r3, [r7, #100]	@ 0x64
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	2250      	movs	r2, #80	@ 0x50
 8019dfc:	5a9b      	ldrh	r3, [r3, r2]
 8019dfe:	b29b      	uxth	r3, r3
 8019e00:	001a      	movs	r2, r3
 8019e02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019e04:	189b      	adds	r3, r3, r2
 8019e06:	667b      	str	r3, [r7, #100]	@ 0x64
 8019e08:	68bb      	ldr	r3, [r7, #8]
 8019e0a:	781b      	ldrb	r3, [r3, #0]
 8019e0c:	00da      	lsls	r2, r3, #3
 8019e0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019e10:	18d3      	adds	r3, r2, r3
 8019e12:	4a9a      	ldr	r2, [pc, #616]	@ (801a07c <HAL_PCD_EP_DB_Transmit+0x724>)
 8019e14:	4694      	mov	ip, r2
 8019e16:	4463      	add	r3, ip
 8019e18:	663b      	str	r3, [r7, #96]	@ 0x60
 8019e1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019e1c:	2200      	movs	r2, #0
 8019e1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	677b      	str	r3, [r7, #116]	@ 0x74
 8019e26:	68bb      	ldr	r3, [r7, #8]
 8019e28:	785b      	ldrb	r3, [r3, #1]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d12b      	bne.n	8019e86 <HAL_PCD_EP_DB_Transmit+0x52e>
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	2250      	movs	r2, #80	@ 0x50
 8019e3a:	5a9b      	ldrh	r3, [r3, r2]
 8019e3c:	b29b      	uxth	r3, r3
 8019e3e:	001a      	movs	r2, r3
 8019e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019e42:	189b      	adds	r3, r3, r2
 8019e44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019e46:	68bb      	ldr	r3, [r7, #8]
 8019e48:	781b      	ldrb	r3, [r3, #0]
 8019e4a:	00da      	lsls	r2, r3, #3
 8019e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019e4e:	18d3      	adds	r3, r2, r3
 8019e50:	4a8b      	ldr	r2, [pc, #556]	@ (801a080 <HAL_PCD_EP_DB_Transmit+0x728>)
 8019e52:	4694      	mov	ip, r2
 8019e54:	4463      	add	r3, ip
 8019e56:	2180      	movs	r1, #128	@ 0x80
 8019e58:	187a      	adds	r2, r7, r1
 8019e5a:	6013      	str	r3, [r2, #0]
 8019e5c:	187b      	adds	r3, r7, r1
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	881b      	ldrh	r3, [r3, #0]
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	059b      	lsls	r3, r3, #22
 8019e66:	0d9b      	lsrs	r3, r3, #22
 8019e68:	b29a      	uxth	r2, r3
 8019e6a:	187b      	adds	r3, r7, r1
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	801a      	strh	r2, [r3, #0]
 8019e70:	187b      	adds	r3, r7, r1
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	881b      	ldrh	r3, [r3, #0]
 8019e76:	b29b      	uxth	r3, r3
 8019e78:	4a82      	ldr	r2, [pc, #520]	@ (801a084 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019e7a:	4313      	orrs	r3, r2
 8019e7c:	b29a      	uxth	r2, r3
 8019e7e:	187b      	adds	r3, r7, r1
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	801a      	strh	r2, [r3, #0]
 8019e84:	e018      	b.n	8019eb8 <HAL_PCD_EP_DB_Transmit+0x560>
 8019e86:	68bb      	ldr	r3, [r7, #8]
 8019e88:	785b      	ldrb	r3, [r3, #1]
 8019e8a:	2b01      	cmp	r3, #1
 8019e8c:	d114      	bne.n	8019eb8 <HAL_PCD_EP_DB_Transmit+0x560>
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	2250      	movs	r2, #80	@ 0x50
 8019e94:	5a9b      	ldrh	r3, [r3, r2]
 8019e96:	b29b      	uxth	r3, r3
 8019e98:	001a      	movs	r2, r3
 8019e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019e9c:	189b      	adds	r3, r3, r2
 8019e9e:	677b      	str	r3, [r7, #116]	@ 0x74
 8019ea0:	68bb      	ldr	r3, [r7, #8]
 8019ea2:	781b      	ldrb	r3, [r3, #0]
 8019ea4:	00da      	lsls	r2, r3, #3
 8019ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019ea8:	18d3      	adds	r3, r2, r3
 8019eaa:	4a75      	ldr	r2, [pc, #468]	@ (801a080 <HAL_PCD_EP_DB_Transmit+0x728>)
 8019eac:	4694      	mov	ip, r2
 8019eae:	4463      	add	r3, ip
 8019eb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8019eb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019eb4:	2200      	movs	r2, #0
 8019eb6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019eb8:	68bb      	ldr	r3, [r7, #8]
 8019eba:	781a      	ldrb	r2, [r3, #0]
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	0011      	movs	r1, r2
 8019ec0:	0018      	movs	r0, r3
 8019ec2:	f008 fb45 	bl	8022550 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8019ec6:	1dbb      	adds	r3, r7, #6
 8019ec8:	881a      	ldrh	r2, [r3, #0]
 8019eca:	2380      	movs	r3, #128	@ 0x80
 8019ecc:	01db      	lsls	r3, r3, #7
 8019ece:	4013      	ands	r3, r2
 8019ed0:	d000      	beq.n	8019ed4 <HAL_PCD_EP_DB_Transmit+0x57c>
 8019ed2:	e11e      	b.n	801a112 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	001a      	movs	r2, r3
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	781b      	ldrb	r3, [r3, #0]
 8019ede:	009b      	lsls	r3, r3, #2
 8019ee0:	18d3      	adds	r3, r2, r3
 8019ee2:	881b      	ldrh	r3, [r3, #0]
 8019ee4:	b29a      	uxth	r2, r3
 8019ee6:	2088      	movs	r0, #136	@ 0x88
 8019ee8:	183b      	adds	r3, r7, r0
 8019eea:	4967      	ldr	r1, [pc, #412]	@ (801a088 <HAL_PCD_EP_DB_Transmit+0x730>)
 8019eec:	400a      	ands	r2, r1
 8019eee:	801a      	strh	r2, [r3, #0]
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	001a      	movs	r2, r3
 8019ef6:	68bb      	ldr	r3, [r7, #8]
 8019ef8:	781b      	ldrb	r3, [r3, #0]
 8019efa:	009b      	lsls	r3, r3, #2
 8019efc:	18d3      	adds	r3, r2, r3
 8019efe:	183a      	adds	r2, r7, r0
 8019f00:	8812      	ldrh	r2, [r2, #0]
 8019f02:	4962      	ldr	r1, [pc, #392]	@ (801a08c <HAL_PCD_EP_DB_Transmit+0x734>)
 8019f04:	430a      	orrs	r2, r1
 8019f06:	b292      	uxth	r2, r2
 8019f08:	801a      	strh	r2, [r3, #0]
 8019f0a:	e102      	b.n	801a112 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8019f0c:	1dbb      	adds	r3, r7, #6
 8019f0e:	881a      	ldrh	r2, [r3, #0]
 8019f10:	2380      	movs	r3, #128	@ 0x80
 8019f12:	01db      	lsls	r3, r3, #7
 8019f14:	4013      	ands	r3, r2
 8019f16:	d11a      	bne.n	8019f4e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	001a      	movs	r2, r3
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	781b      	ldrb	r3, [r3, #0]
 8019f22:	009b      	lsls	r3, r3, #2
 8019f24:	18d3      	adds	r3, r2, r3
 8019f26:	881b      	ldrh	r3, [r3, #0]
 8019f28:	b29a      	uxth	r2, r3
 8019f2a:	204e      	movs	r0, #78	@ 0x4e
 8019f2c:	183b      	adds	r3, r7, r0
 8019f2e:	4956      	ldr	r1, [pc, #344]	@ (801a088 <HAL_PCD_EP_DB_Transmit+0x730>)
 8019f30:	400a      	ands	r2, r1
 8019f32:	801a      	strh	r2, [r3, #0]
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	001a      	movs	r2, r3
 8019f3a:	68bb      	ldr	r3, [r7, #8]
 8019f3c:	781b      	ldrb	r3, [r3, #0]
 8019f3e:	009b      	lsls	r3, r3, #2
 8019f40:	18d3      	adds	r3, r2, r3
 8019f42:	183a      	adds	r2, r7, r0
 8019f44:	8812      	ldrh	r2, [r2, #0]
 8019f46:	4951      	ldr	r1, [pc, #324]	@ (801a08c <HAL_PCD_EP_DB_Transmit+0x734>)
 8019f48:	430a      	orrs	r2, r1
 8019f4a:	b292      	uxth	r2, r2
 8019f4c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8019f4e:	68bb      	ldr	r3, [r7, #8]
 8019f50:	2224      	movs	r2, #36	@ 0x24
 8019f52:	5c9b      	ldrb	r3, [r3, r2]
 8019f54:	2b01      	cmp	r3, #1
 8019f56:	d000      	beq.n	8019f5a <HAL_PCD_EP_DB_Transmit+0x602>
 8019f58:	e0db      	b.n	801a112 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019f5a:	68bb      	ldr	r3, [r7, #8]
 8019f5c:	695a      	ldr	r2, [r3, #20]
 8019f5e:	2186      	movs	r1, #134	@ 0x86
 8019f60:	187b      	adds	r3, r7, r1
 8019f62:	881b      	ldrh	r3, [r3, #0]
 8019f64:	18d2      	adds	r2, r2, r3
 8019f66:	68bb      	ldr	r3, [r7, #8]
 8019f68:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019f6a:	68bb      	ldr	r3, [r7, #8]
 8019f6c:	69da      	ldr	r2, [r3, #28]
 8019f6e:	187b      	adds	r3, r7, r1
 8019f70:	881b      	ldrh	r3, [r3, #0]
 8019f72:	18d2      	adds	r2, r2, r3
 8019f74:	68bb      	ldr	r3, [r7, #8]
 8019f76:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019f78:	68bb      	ldr	r3, [r7, #8]
 8019f7a:	6a1a      	ldr	r2, [r3, #32]
 8019f7c:	68bb      	ldr	r3, [r7, #8]
 8019f7e:	691b      	ldr	r3, [r3, #16]
 8019f80:	429a      	cmp	r2, r3
 8019f82:	d30c      	bcc.n	8019f9e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8019f84:	68bb      	ldr	r3, [r7, #8]
 8019f86:	691b      	ldr	r3, [r3, #16]
 8019f88:	218c      	movs	r1, #140	@ 0x8c
 8019f8a:	187a      	adds	r2, r7, r1
 8019f8c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8019f8e:	68bb      	ldr	r3, [r7, #8]
 8019f90:	6a1a      	ldr	r2, [r3, #32]
 8019f92:	187b      	adds	r3, r7, r1
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	1ad2      	subs	r2, r2, r3
 8019f98:	68bb      	ldr	r3, [r7, #8]
 8019f9a:	621a      	str	r2, [r3, #32]
 8019f9c:	e01a      	b.n	8019fd4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8019f9e:	68bb      	ldr	r3, [r7, #8]
 8019fa0:	6a1b      	ldr	r3, [r3, #32]
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d10a      	bne.n	8019fbc <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8019fa6:	2386      	movs	r3, #134	@ 0x86
 8019fa8:	18fb      	adds	r3, r7, r3
 8019faa:	881b      	ldrh	r3, [r3, #0]
 8019fac:	228c      	movs	r2, #140	@ 0x8c
 8019fae:	18ba      	adds	r2, r7, r2
 8019fb0:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8019fb2:	68bb      	ldr	r3, [r7, #8]
 8019fb4:	2224      	movs	r2, #36	@ 0x24
 8019fb6:	2100      	movs	r1, #0
 8019fb8:	5499      	strb	r1, [r3, r2]
 8019fba:	e00b      	b.n	8019fd4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8019fbc:	68bb      	ldr	r3, [r7, #8]
 8019fbe:	6a1b      	ldr	r3, [r3, #32]
 8019fc0:	228c      	movs	r2, #140	@ 0x8c
 8019fc2:	18ba      	adds	r2, r7, r2
 8019fc4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8019fc6:	68bb      	ldr	r3, [r7, #8]
 8019fc8:	2200      	movs	r2, #0
 8019fca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8019fcc:	68bb      	ldr	r3, [r7, #8]
 8019fce:	2224      	movs	r2, #36	@ 0x24
 8019fd0:	2100      	movs	r1, #0
 8019fd2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8019fda:	68bb      	ldr	r3, [r7, #8]
 8019fdc:	785b      	ldrb	r3, [r3, #1]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d000      	beq.n	8019fe4 <HAL_PCD_EP_DB_Transmit+0x68c>
 8019fe2:	e06e      	b.n	801a0c2 <HAL_PCD_EP_DB_Transmit+0x76a>
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	2250      	movs	r2, #80	@ 0x50
 8019ff0:	5a9b      	ldrh	r3, [r3, r2]
 8019ff2:	b29b      	uxth	r3, r3
 8019ff4:	001a      	movs	r2, r3
 8019ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019ff8:	189b      	adds	r3, r3, r2
 8019ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019ffc:	68bb      	ldr	r3, [r7, #8]
 8019ffe:	781b      	ldrb	r3, [r3, #0]
 801a000:	00da      	lsls	r2, r3, #3
 801a002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a004:	18d3      	adds	r3, r2, r3
 801a006:	4a1e      	ldr	r2, [pc, #120]	@ (801a080 <HAL_PCD_EP_DB_Transmit+0x728>)
 801a008:	4694      	mov	ip, r2
 801a00a:	4463      	add	r3, ip
 801a00c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a00e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a010:	881b      	ldrh	r3, [r3, #0]
 801a012:	b29b      	uxth	r3, r3
 801a014:	059b      	lsls	r3, r3, #22
 801a016:	0d9b      	lsrs	r3, r3, #22
 801a018:	b29a      	uxth	r2, r3
 801a01a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a01c:	801a      	strh	r2, [r3, #0]
 801a01e:	228c      	movs	r2, #140	@ 0x8c
 801a020:	18bb      	adds	r3, r7, r2
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	2b3e      	cmp	r3, #62	@ 0x3e
 801a026:	d91a      	bls.n	801a05e <HAL_PCD_EP_DB_Transmit+0x706>
 801a028:	18bb      	adds	r3, r7, r2
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	095b      	lsrs	r3, r3, #5
 801a02e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a030:	18bb      	adds	r3, r7, r2
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	221f      	movs	r2, #31
 801a036:	4013      	ands	r3, r2
 801a038:	d102      	bne.n	801a040 <HAL_PCD_EP_DB_Transmit+0x6e8>
 801a03a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a03c:	3b01      	subs	r3, #1
 801a03e:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a040:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a042:	881b      	ldrh	r3, [r3, #0]
 801a044:	b29a      	uxth	r2, r3
 801a046:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a048:	b29b      	uxth	r3, r3
 801a04a:	029b      	lsls	r3, r3, #10
 801a04c:	b29b      	uxth	r3, r3
 801a04e:	4313      	orrs	r3, r2
 801a050:	b29b      	uxth	r3, r3
 801a052:	4a0c      	ldr	r2, [pc, #48]	@ (801a084 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a054:	4313      	orrs	r3, r2
 801a056:	b29a      	uxth	r2, r3
 801a058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a05a:	801a      	strh	r2, [r3, #0]
 801a05c:	e04d      	b.n	801a0fa <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a05e:	238c      	movs	r3, #140	@ 0x8c
 801a060:	18fb      	adds	r3, r7, r3
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	2b00      	cmp	r3, #0
 801a066:	d113      	bne.n	801a090 <HAL_PCD_EP_DB_Transmit+0x738>
 801a068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a06a:	881b      	ldrh	r3, [r3, #0]
 801a06c:	b29b      	uxth	r3, r3
 801a06e:	4a05      	ldr	r2, [pc, #20]	@ (801a084 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a070:	4313      	orrs	r3, r2
 801a072:	b29a      	uxth	r2, r3
 801a074:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a076:	801a      	strh	r2, [r3, #0]
 801a078:	e03f      	b.n	801a0fa <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a07a:	46c0      	nop			@ (mov r8, r8)
 801a07c:	00000402 	.word	0x00000402
 801a080:	00000406 	.word	0x00000406
 801a084:	ffff8000 	.word	0xffff8000
 801a088:	ffff8f8f 	.word	0xffff8f8f
 801a08c:	ffffc080 	.word	0xffffc080
 801a090:	228c      	movs	r2, #140	@ 0x8c
 801a092:	18bb      	adds	r3, r7, r2
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	085b      	lsrs	r3, r3, #1
 801a098:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a09a:	18bb      	adds	r3, r7, r2
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	2201      	movs	r2, #1
 801a0a0:	4013      	ands	r3, r2
 801a0a2:	d002      	beq.n	801a0aa <HAL_PCD_EP_DB_Transmit+0x752>
 801a0a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a0a6:	3301      	adds	r3, #1
 801a0a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a0aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a0ac:	881b      	ldrh	r3, [r3, #0]
 801a0ae:	b29a      	uxth	r2, r3
 801a0b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a0b2:	b29b      	uxth	r3, r3
 801a0b4:	029b      	lsls	r3, r3, #10
 801a0b6:	b29b      	uxth	r3, r3
 801a0b8:	4313      	orrs	r3, r2
 801a0ba:	b29a      	uxth	r2, r3
 801a0bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a0be:	801a      	strh	r2, [r3, #0]
 801a0c0:	e01b      	b.n	801a0fa <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a0c2:	68bb      	ldr	r3, [r7, #8]
 801a0c4:	785b      	ldrb	r3, [r3, #1]
 801a0c6:	2b01      	cmp	r3, #1
 801a0c8:	d117      	bne.n	801a0fa <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	2250      	movs	r2, #80	@ 0x50
 801a0d0:	5a9b      	ldrh	r3, [r3, r2]
 801a0d2:	b29b      	uxth	r3, r3
 801a0d4:	001a      	movs	r2, r3
 801a0d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0d8:	189b      	adds	r3, r3, r2
 801a0da:	657b      	str	r3, [r7, #84]	@ 0x54
 801a0dc:	68bb      	ldr	r3, [r7, #8]
 801a0de:	781b      	ldrb	r3, [r3, #0]
 801a0e0:	00da      	lsls	r2, r3, #3
 801a0e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0e4:	18d3      	adds	r3, r2, r3
 801a0e6:	4a21      	ldr	r2, [pc, #132]	@ (801a16c <HAL_PCD_EP_DB_Transmit+0x814>)
 801a0e8:	4694      	mov	ip, r2
 801a0ea:	4463      	add	r3, ip
 801a0ec:	653b      	str	r3, [r7, #80]	@ 0x50
 801a0ee:	238c      	movs	r3, #140	@ 0x8c
 801a0f0:	18fb      	adds	r3, r7, r3
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	b29a      	uxth	r2, r3
 801a0f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a0f8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	6818      	ldr	r0, [r3, #0]
 801a0fe:	68bb      	ldr	r3, [r7, #8]
 801a100:	6959      	ldr	r1, [r3, #20]
 801a102:	68bb      	ldr	r3, [r7, #8]
 801a104:	895a      	ldrh	r2, [r3, #10]
 801a106:	238c      	movs	r3, #140	@ 0x8c
 801a108:	18fb      	adds	r3, r7, r3
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	f006 f999 	bl	8020444 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	001a      	movs	r2, r3
 801a118:	68bb      	ldr	r3, [r7, #8]
 801a11a:	781b      	ldrb	r3, [r3, #0]
 801a11c:	009b      	lsls	r3, r3, #2
 801a11e:	18d3      	adds	r3, r2, r3
 801a120:	881b      	ldrh	r3, [r3, #0]
 801a122:	b29a      	uxth	r2, r3
 801a124:	2014      	movs	r0, #20
 801a126:	183b      	adds	r3, r7, r0
 801a128:	4911      	ldr	r1, [pc, #68]	@ (801a170 <HAL_PCD_EP_DB_Transmit+0x818>)
 801a12a:	400a      	ands	r2, r1
 801a12c:	801a      	strh	r2, [r3, #0]
 801a12e:	183b      	adds	r3, r7, r0
 801a130:	183a      	adds	r2, r7, r0
 801a132:	8812      	ldrh	r2, [r2, #0]
 801a134:	2110      	movs	r1, #16
 801a136:	404a      	eors	r2, r1
 801a138:	801a      	strh	r2, [r3, #0]
 801a13a:	183b      	adds	r3, r7, r0
 801a13c:	183a      	adds	r2, r7, r0
 801a13e:	8812      	ldrh	r2, [r2, #0]
 801a140:	2120      	movs	r1, #32
 801a142:	404a      	eors	r2, r1
 801a144:	801a      	strh	r2, [r3, #0]
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	001a      	movs	r2, r3
 801a14c:	68bb      	ldr	r3, [r7, #8]
 801a14e:	781b      	ldrb	r3, [r3, #0]
 801a150:	009b      	lsls	r3, r3, #2
 801a152:	18d3      	adds	r3, r2, r3
 801a154:	183a      	adds	r2, r7, r0
 801a156:	8812      	ldrh	r2, [r2, #0]
 801a158:	4906      	ldr	r1, [pc, #24]	@ (801a174 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801a15a:	430a      	orrs	r2, r1
 801a15c:	b292      	uxth	r2, r2
 801a15e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801a160:	2300      	movs	r3, #0
}
 801a162:	0018      	movs	r0, r3
 801a164:	46bd      	mov	sp, r7
 801a166:	b024      	add	sp, #144	@ 0x90
 801a168:	bd80      	pop	{r7, pc}
 801a16a:	46c0      	nop			@ (mov r8, r8)
 801a16c:	00000406 	.word	0x00000406
 801a170:	ffff8fbf 	.word	0xffff8fbf
 801a174:	ffff8080 	.word	0xffff8080

0801a178 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801a178:	b590      	push	{r4, r7, lr}
 801a17a:	b087      	sub	sp, #28
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	60f8      	str	r0, [r7, #12]
 801a180:	0008      	movs	r0, r1
 801a182:	0011      	movs	r1, r2
 801a184:	607b      	str	r3, [r7, #4]
 801a186:	240a      	movs	r4, #10
 801a188:	193b      	adds	r3, r7, r4
 801a18a:	1c02      	adds	r2, r0, #0
 801a18c:	801a      	strh	r2, [r3, #0]
 801a18e:	2308      	movs	r3, #8
 801a190:	18fb      	adds	r3, r7, r3
 801a192:	1c0a      	adds	r2, r1, #0
 801a194:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801a196:	0021      	movs	r1, r4
 801a198:	187b      	adds	r3, r7, r1
 801a19a:	881b      	ldrh	r3, [r3, #0]
 801a19c:	2280      	movs	r2, #128	@ 0x80
 801a19e:	4013      	ands	r3, r2
 801a1a0:	b29b      	uxth	r3, r3
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d00c      	beq.n	801a1c0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a1a6:	187b      	adds	r3, r7, r1
 801a1a8:	881b      	ldrh	r3, [r3, #0]
 801a1aa:	2207      	movs	r2, #7
 801a1ac:	4013      	ands	r3, r2
 801a1ae:	1c5a      	adds	r2, r3, #1
 801a1b0:	0013      	movs	r3, r2
 801a1b2:	009b      	lsls	r3, r3, #2
 801a1b4:	189b      	adds	r3, r3, r2
 801a1b6:	00db      	lsls	r3, r3, #3
 801a1b8:	68fa      	ldr	r2, [r7, #12]
 801a1ba:	18d3      	adds	r3, r2, r3
 801a1bc:	617b      	str	r3, [r7, #20]
 801a1be:	e00b      	b.n	801a1d8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a1c0:	230a      	movs	r3, #10
 801a1c2:	18fb      	adds	r3, r7, r3
 801a1c4:	881a      	ldrh	r2, [r3, #0]
 801a1c6:	0013      	movs	r3, r2
 801a1c8:	009b      	lsls	r3, r3, #2
 801a1ca:	189b      	adds	r3, r3, r2
 801a1cc:	00db      	lsls	r3, r3, #3
 801a1ce:	3369      	adds	r3, #105	@ 0x69
 801a1d0:	33ff      	adds	r3, #255	@ 0xff
 801a1d2:	68fa      	ldr	r2, [r7, #12]
 801a1d4:	18d3      	adds	r3, r2, r3
 801a1d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801a1d8:	2308      	movs	r3, #8
 801a1da:	18fb      	adds	r3, r7, r3
 801a1dc:	881b      	ldrh	r3, [r3, #0]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d107      	bne.n	801a1f2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801a1e2:	697b      	ldr	r3, [r7, #20]
 801a1e4:	2200      	movs	r2, #0
 801a1e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	b29a      	uxth	r2, r3
 801a1ec:	697b      	ldr	r3, [r7, #20]
 801a1ee:	80da      	strh	r2, [r3, #6]
 801a1f0:	e00b      	b.n	801a20a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801a1f2:	697b      	ldr	r3, [r7, #20]
 801a1f4:	2201      	movs	r2, #1
 801a1f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	b29a      	uxth	r2, r3
 801a1fc:	697b      	ldr	r3, [r7, #20]
 801a1fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	0c1b      	lsrs	r3, r3, #16
 801a204:	b29a      	uxth	r2, r3
 801a206:	697b      	ldr	r3, [r7, #20]
 801a208:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801a20a:	2300      	movs	r3, #0
}
 801a20c:	0018      	movs	r0, r3
 801a20e:	46bd      	mov	sp, r7
 801a210:	b007      	add	sp, #28
 801a212:	bd90      	pop	{r4, r7, pc}

0801a214 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801a214:	b580      	push	{r7, lr}
 801a216:	b084      	sub	sp, #16
 801a218:	af00      	add	r7, sp, #0
 801a21a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801a222:	687a      	ldr	r2, [r7, #4]
 801a224:	23ba      	movs	r3, #186	@ 0xba
 801a226:	009b      	lsls	r3, r3, #2
 801a228:	2101      	movs	r1, #1
 801a22a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801a22c:	687a      	ldr	r2, [r7, #4]
 801a22e:	23b8      	movs	r3, #184	@ 0xb8
 801a230:	009b      	lsls	r3, r3, #2
 801a232:	2100      	movs	r1, #0
 801a234:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	2254      	movs	r2, #84	@ 0x54
 801a23a:	5a9b      	ldrh	r3, [r3, r2]
 801a23c:	b29b      	uxth	r3, r3
 801a23e:	2201      	movs	r2, #1
 801a240:	4313      	orrs	r3, r2
 801a242:	b299      	uxth	r1, r3
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	2254      	movs	r2, #84	@ 0x54
 801a248:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	2254      	movs	r2, #84	@ 0x54
 801a24e:	5a9b      	ldrh	r3, [r3, r2]
 801a250:	b29b      	uxth	r3, r3
 801a252:	2202      	movs	r2, #2
 801a254:	4313      	orrs	r3, r2
 801a256:	b299      	uxth	r1, r3
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	2254      	movs	r2, #84	@ 0x54
 801a25c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a25e:	2300      	movs	r3, #0
}
 801a260:	0018      	movs	r0, r3
 801a262:	46bd      	mov	sp, r7
 801a264:	b004      	add	sp, #16
 801a266:	bd80      	pop	{r7, pc}

0801a268 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a268:	b580      	push	{r7, lr}
 801a26a:	b082      	sub	sp, #8
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	6078      	str	r0, [r7, #4]
 801a270:	000a      	movs	r2, r1
 801a272:	1cfb      	adds	r3, r7, #3
 801a274:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801a276:	46c0      	nop			@ (mov r8, r8)
 801a278:	46bd      	mov	sp, r7
 801a27a:	b002      	add	sp, #8
 801a27c:	bd80      	pop	{r7, pc}
	...

0801a280 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801a280:	b580      	push	{r7, lr}
 801a282:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801a284:	4b04      	ldr	r3, [pc, #16]	@ (801a298 <HAL_PWR_EnableBkUpAccess+0x18>)
 801a286:	681a      	ldr	r2, [r3, #0]
 801a288:	4b03      	ldr	r3, [pc, #12]	@ (801a298 <HAL_PWR_EnableBkUpAccess+0x18>)
 801a28a:	2180      	movs	r1, #128	@ 0x80
 801a28c:	0049      	lsls	r1, r1, #1
 801a28e:	430a      	orrs	r2, r1
 801a290:	601a      	str	r2, [r3, #0]
}
 801a292:	46c0      	nop			@ (mov r8, r8)
 801a294:	46bd      	mov	sp, r7
 801a296:	bd80      	pop	{r7, pc}
 801a298:	40007000 	.word	0x40007000

0801a29c <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801a2a0:	4b04      	ldr	r3, [pc, #16]	@ (801a2b4 <HAL_PWR_DisableBkUpAccess+0x18>)
 801a2a2:	681a      	ldr	r2, [r3, #0]
 801a2a4:	4b03      	ldr	r3, [pc, #12]	@ (801a2b4 <HAL_PWR_DisableBkUpAccess+0x18>)
 801a2a6:	4904      	ldr	r1, [pc, #16]	@ (801a2b8 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801a2a8:	400a      	ands	r2, r1
 801a2aa:	601a      	str	r2, [r3, #0]
}
 801a2ac:	46c0      	nop			@ (mov r8, r8)
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	bd80      	pop	{r7, pc}
 801a2b2:	46c0      	nop			@ (mov r8, r8)
 801a2b4:	40007000 	.word	0x40007000
 801a2b8:	fffffeff 	.word	0xfffffeff

0801a2bc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801a2bc:	b580      	push	{r7, lr}
 801a2be:	b086      	sub	sp, #24
 801a2c0:	af00      	add	r7, sp, #0
 801a2c2:	6078      	str	r0, [r7, #4]
 801a2c4:	000a      	movs	r2, r1
 801a2c6:	1cfb      	adds	r3, r7, #3
 801a2c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801a2ce:	4b25      	ldr	r3, [pc, #148]	@ (801a364 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a2d0:	681a      	ldr	r2, [r3, #0]
 801a2d2:	2380      	movs	r3, #128	@ 0x80
 801a2d4:	009b      	lsls	r3, r3, #2
 801a2d6:	4013      	ands	r3, r2
 801a2d8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801a2da:	4b23      	ldr	r3, [pc, #140]	@ (801a368 <HAL_PWR_EnterSTOPMode+0xac>)
 801a2dc:	6a1b      	ldr	r3, [r3, #32]
 801a2de:	2201      	movs	r2, #1
 801a2e0:	4013      	ands	r3, r2
 801a2e2:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801a2e4:	693b      	ldr	r3, [r7, #16]
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d008      	beq.n	801a2fc <HAL_PWR_EnterSTOPMode+0x40>
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d005      	beq.n	801a2fc <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801a2f0:	4b1c      	ldr	r3, [pc, #112]	@ (801a364 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a2f2:	681a      	ldr	r2, [r3, #0]
 801a2f4:	4b1b      	ldr	r3, [pc, #108]	@ (801a364 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a2f6:	491d      	ldr	r1, [pc, #116]	@ (801a36c <HAL_PWR_EnterSTOPMode+0xb0>)
 801a2f8:	400a      	ands	r2, r1
 801a2fa:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801a2fc:	4b19      	ldr	r3, [pc, #100]	@ (801a364 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801a302:	697b      	ldr	r3, [r7, #20]
 801a304:	2203      	movs	r2, #3
 801a306:	4393      	bics	r3, r2
 801a308:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801a30a:	697a      	ldr	r2, [r7, #20]
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	4313      	orrs	r3, r2
 801a310:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801a312:	4b14      	ldr	r3, [pc, #80]	@ (801a364 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a314:	697a      	ldr	r2, [r7, #20]
 801a316:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a318:	4b15      	ldr	r3, [pc, #84]	@ (801a370 <HAL_PWR_EnterSTOPMode+0xb4>)
 801a31a:	691a      	ldr	r2, [r3, #16]
 801a31c:	4b14      	ldr	r3, [pc, #80]	@ (801a370 <HAL_PWR_EnterSTOPMode+0xb4>)
 801a31e:	2104      	movs	r1, #4
 801a320:	430a      	orrs	r2, r1
 801a322:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801a324:	1cfb      	adds	r3, r7, #3
 801a326:	781b      	ldrb	r3, [r3, #0]
 801a328:	2b01      	cmp	r3, #1
 801a32a:	d101      	bne.n	801a330 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801a32c:	bf30      	wfi
 801a32e:	e002      	b.n	801a336 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801a330:	bf40      	sev
    __WFE();
 801a332:	bf20      	wfe
    __WFE();
 801a334:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a336:	4b0e      	ldr	r3, [pc, #56]	@ (801a370 <HAL_PWR_EnterSTOPMode+0xb4>)
 801a338:	691a      	ldr	r2, [r3, #16]
 801a33a:	4b0d      	ldr	r3, [pc, #52]	@ (801a370 <HAL_PWR_EnterSTOPMode+0xb4>)
 801a33c:	2104      	movs	r1, #4
 801a33e:	438a      	bics	r2, r1
 801a340:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801a342:	693b      	ldr	r3, [r7, #16]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d009      	beq.n	801a35c <HAL_PWR_EnterSTOPMode+0xa0>
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d006      	beq.n	801a35c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801a34e:	4b05      	ldr	r3, [pc, #20]	@ (801a364 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a350:	681a      	ldr	r2, [r3, #0]
 801a352:	4b04      	ldr	r3, [pc, #16]	@ (801a364 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a354:	2180      	movs	r1, #128	@ 0x80
 801a356:	0089      	lsls	r1, r1, #2
 801a358:	430a      	orrs	r2, r1
 801a35a:	601a      	str	r2, [r3, #0]
  }
}
 801a35c:	46c0      	nop			@ (mov r8, r8)
 801a35e:	46bd      	mov	sp, r7
 801a360:	b006      	add	sp, #24
 801a362:	bd80      	pop	{r7, pc}
 801a364:	40007000 	.word	0x40007000
 801a368:	40010000 	.word	0x40010000
 801a36c:	fffffdff 	.word	0xfffffdff
 801a370:	e000ed00 	.word	0xe000ed00

0801a374 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801a374:	b580      	push	{r7, lr}
 801a376:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801a378:	4b07      	ldr	r3, [pc, #28]	@ (801a398 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801a37a:	681a      	ldr	r2, [r3, #0]
 801a37c:	4b06      	ldr	r3, [pc, #24]	@ (801a398 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801a37e:	2102      	movs	r1, #2
 801a380:	430a      	orrs	r2, r1
 801a382:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a384:	4b05      	ldr	r3, [pc, #20]	@ (801a39c <HAL_PWR_EnterSTANDBYMode+0x28>)
 801a386:	691a      	ldr	r2, [r3, #16]
 801a388:	4b04      	ldr	r3, [pc, #16]	@ (801a39c <HAL_PWR_EnterSTANDBYMode+0x28>)
 801a38a:	2104      	movs	r1, #4
 801a38c:	430a      	orrs	r2, r1
 801a38e:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801a390:	bf30      	wfi
}
 801a392:	46c0      	nop			@ (mov r8, r8)
 801a394:	46bd      	mov	sp, r7
 801a396:	bd80      	pop	{r7, pc}
 801a398:	40007000 	.word	0x40007000
 801a39c:	e000ed00 	.word	0xe000ed00

0801a3a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a3a0:	b5b0      	push	{r4, r5, r7, lr}
 801a3a2:	b08a      	sub	sp, #40	@ 0x28
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d102      	bne.n	801a3b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801a3ae:	2301      	movs	r3, #1
 801a3b0:	f000 fbbf 	bl	801ab32 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a3b4:	4bc9      	ldr	r3, [pc, #804]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a3b6:	68db      	ldr	r3, [r3, #12]
 801a3b8:	220c      	movs	r2, #12
 801a3ba:	4013      	ands	r3, r2
 801a3bc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801a3be:	4bc7      	ldr	r3, [pc, #796]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a3c0:	68da      	ldr	r2, [r3, #12]
 801a3c2:	2380      	movs	r3, #128	@ 0x80
 801a3c4:	025b      	lsls	r3, r3, #9
 801a3c6:	4013      	ands	r3, r2
 801a3c8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	2201      	movs	r2, #1
 801a3d0:	4013      	ands	r3, r2
 801a3d2:	d100      	bne.n	801a3d6 <HAL_RCC_OscConfig+0x36>
 801a3d4:	e07e      	b.n	801a4d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801a3d6:	69fb      	ldr	r3, [r7, #28]
 801a3d8:	2b08      	cmp	r3, #8
 801a3da:	d007      	beq.n	801a3ec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801a3dc:	69fb      	ldr	r3, [r7, #28]
 801a3de:	2b0c      	cmp	r3, #12
 801a3e0:	d112      	bne.n	801a408 <HAL_RCC_OscConfig+0x68>
 801a3e2:	69ba      	ldr	r2, [r7, #24]
 801a3e4:	2380      	movs	r3, #128	@ 0x80
 801a3e6:	025b      	lsls	r3, r3, #9
 801a3e8:	429a      	cmp	r2, r3
 801a3ea:	d10d      	bne.n	801a408 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a3ec:	4bbb      	ldr	r3, [pc, #748]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a3ee:	681a      	ldr	r2, [r3, #0]
 801a3f0:	2380      	movs	r3, #128	@ 0x80
 801a3f2:	029b      	lsls	r3, r3, #10
 801a3f4:	4013      	ands	r3, r2
 801a3f6:	d100      	bne.n	801a3fa <HAL_RCC_OscConfig+0x5a>
 801a3f8:	e06b      	b.n	801a4d2 <HAL_RCC_OscConfig+0x132>
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	685b      	ldr	r3, [r3, #4]
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d167      	bne.n	801a4d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801a402:	2301      	movs	r3, #1
 801a404:	f000 fb95 	bl	801ab32 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	685a      	ldr	r2, [r3, #4]
 801a40c:	2380      	movs	r3, #128	@ 0x80
 801a40e:	025b      	lsls	r3, r3, #9
 801a410:	429a      	cmp	r2, r3
 801a412:	d107      	bne.n	801a424 <HAL_RCC_OscConfig+0x84>
 801a414:	4bb1      	ldr	r3, [pc, #708]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a416:	681a      	ldr	r2, [r3, #0]
 801a418:	4bb0      	ldr	r3, [pc, #704]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a41a:	2180      	movs	r1, #128	@ 0x80
 801a41c:	0249      	lsls	r1, r1, #9
 801a41e:	430a      	orrs	r2, r1
 801a420:	601a      	str	r2, [r3, #0]
 801a422:	e027      	b.n	801a474 <HAL_RCC_OscConfig+0xd4>
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	685a      	ldr	r2, [r3, #4]
 801a428:	23a0      	movs	r3, #160	@ 0xa0
 801a42a:	02db      	lsls	r3, r3, #11
 801a42c:	429a      	cmp	r2, r3
 801a42e:	d10e      	bne.n	801a44e <HAL_RCC_OscConfig+0xae>
 801a430:	4baa      	ldr	r3, [pc, #680]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a432:	681a      	ldr	r2, [r3, #0]
 801a434:	4ba9      	ldr	r3, [pc, #676]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a436:	2180      	movs	r1, #128	@ 0x80
 801a438:	02c9      	lsls	r1, r1, #11
 801a43a:	430a      	orrs	r2, r1
 801a43c:	601a      	str	r2, [r3, #0]
 801a43e:	4ba7      	ldr	r3, [pc, #668]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a440:	681a      	ldr	r2, [r3, #0]
 801a442:	4ba6      	ldr	r3, [pc, #664]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a444:	2180      	movs	r1, #128	@ 0x80
 801a446:	0249      	lsls	r1, r1, #9
 801a448:	430a      	orrs	r2, r1
 801a44a:	601a      	str	r2, [r3, #0]
 801a44c:	e012      	b.n	801a474 <HAL_RCC_OscConfig+0xd4>
 801a44e:	4ba3      	ldr	r3, [pc, #652]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a450:	681a      	ldr	r2, [r3, #0]
 801a452:	4ba2      	ldr	r3, [pc, #648]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a454:	49a2      	ldr	r1, [pc, #648]	@ (801a6e0 <HAL_RCC_OscConfig+0x340>)
 801a456:	400a      	ands	r2, r1
 801a458:	601a      	str	r2, [r3, #0]
 801a45a:	4ba0      	ldr	r3, [pc, #640]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a45c:	681a      	ldr	r2, [r3, #0]
 801a45e:	2380      	movs	r3, #128	@ 0x80
 801a460:	025b      	lsls	r3, r3, #9
 801a462:	4013      	ands	r3, r2
 801a464:	60fb      	str	r3, [r7, #12]
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	4b9c      	ldr	r3, [pc, #624]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a46a:	681a      	ldr	r2, [r3, #0]
 801a46c:	4b9b      	ldr	r3, [pc, #620]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a46e:	499d      	ldr	r1, [pc, #628]	@ (801a6e4 <HAL_RCC_OscConfig+0x344>)
 801a470:	400a      	ands	r2, r1
 801a472:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	685b      	ldr	r3, [r3, #4]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d015      	beq.n	801a4a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a47c:	f7f9 fb54 	bl	8013b28 <HAL_GetTick>
 801a480:	0003      	movs	r3, r0
 801a482:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a484:	e009      	b.n	801a49a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a486:	f7f9 fb4f 	bl	8013b28 <HAL_GetTick>
 801a48a:	0002      	movs	r2, r0
 801a48c:	697b      	ldr	r3, [r7, #20]
 801a48e:	1ad3      	subs	r3, r2, r3
 801a490:	2b64      	cmp	r3, #100	@ 0x64
 801a492:	d902      	bls.n	801a49a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a494:	2303      	movs	r3, #3
 801a496:	f000 fb4c 	bl	801ab32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a49a:	4b90      	ldr	r3, [pc, #576]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a49c:	681a      	ldr	r2, [r3, #0]
 801a49e:	2380      	movs	r3, #128	@ 0x80
 801a4a0:	029b      	lsls	r3, r3, #10
 801a4a2:	4013      	ands	r3, r2
 801a4a4:	d0ef      	beq.n	801a486 <HAL_RCC_OscConfig+0xe6>
 801a4a6:	e015      	b.n	801a4d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a4a8:	f7f9 fb3e 	bl	8013b28 <HAL_GetTick>
 801a4ac:	0003      	movs	r3, r0
 801a4ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a4b0:	e008      	b.n	801a4c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a4b2:	f7f9 fb39 	bl	8013b28 <HAL_GetTick>
 801a4b6:	0002      	movs	r2, r0
 801a4b8:	697b      	ldr	r3, [r7, #20]
 801a4ba:	1ad3      	subs	r3, r2, r3
 801a4bc:	2b64      	cmp	r3, #100	@ 0x64
 801a4be:	d901      	bls.n	801a4c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801a4c0:	2303      	movs	r3, #3
 801a4c2:	e336      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a4c4:	4b85      	ldr	r3, [pc, #532]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a4c6:	681a      	ldr	r2, [r3, #0]
 801a4c8:	2380      	movs	r3, #128	@ 0x80
 801a4ca:	029b      	lsls	r3, r3, #10
 801a4cc:	4013      	ands	r3, r2
 801a4ce:	d1f0      	bne.n	801a4b2 <HAL_RCC_OscConfig+0x112>
 801a4d0:	e000      	b.n	801a4d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a4d2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	2202      	movs	r2, #2
 801a4da:	4013      	ands	r3, r2
 801a4dc:	d100      	bne.n	801a4e0 <HAL_RCC_OscConfig+0x140>
 801a4de:	e099      	b.n	801a614 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	68db      	ldr	r3, [r3, #12]
 801a4e4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4e8:	2220      	movs	r2, #32
 801a4ea:	4013      	ands	r3, r2
 801a4ec:	d009      	beq.n	801a502 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801a4ee:	4b7b      	ldr	r3, [pc, #492]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a4f0:	681a      	ldr	r2, [r3, #0]
 801a4f2:	4b7a      	ldr	r3, [pc, #488]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a4f4:	2120      	movs	r1, #32
 801a4f6:	430a      	orrs	r2, r1
 801a4f8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801a4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4fc:	2220      	movs	r2, #32
 801a4fe:	4393      	bics	r3, r2
 801a500:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801a502:	69fb      	ldr	r3, [r7, #28]
 801a504:	2b04      	cmp	r3, #4
 801a506:	d005      	beq.n	801a514 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801a508:	69fb      	ldr	r3, [r7, #28]
 801a50a:	2b0c      	cmp	r3, #12
 801a50c:	d13e      	bne.n	801a58c <HAL_RCC_OscConfig+0x1ec>
 801a50e:	69bb      	ldr	r3, [r7, #24]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d13b      	bne.n	801a58c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801a514:	4b71      	ldr	r3, [pc, #452]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	2204      	movs	r2, #4
 801a51a:	4013      	ands	r3, r2
 801a51c:	d004      	beq.n	801a528 <HAL_RCC_OscConfig+0x188>
 801a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a520:	2b00      	cmp	r3, #0
 801a522:	d101      	bne.n	801a528 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801a524:	2301      	movs	r3, #1
 801a526:	e304      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a528:	4b6c      	ldr	r3, [pc, #432]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a52a:	685b      	ldr	r3, [r3, #4]
 801a52c:	4a6e      	ldr	r2, [pc, #440]	@ (801a6e8 <HAL_RCC_OscConfig+0x348>)
 801a52e:	4013      	ands	r3, r2
 801a530:	0019      	movs	r1, r3
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	691b      	ldr	r3, [r3, #16]
 801a536:	021a      	lsls	r2, r3, #8
 801a538:	4b68      	ldr	r3, [pc, #416]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a53a:	430a      	orrs	r2, r1
 801a53c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a53e:	4b67      	ldr	r3, [pc, #412]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	2209      	movs	r2, #9
 801a544:	4393      	bics	r3, r2
 801a546:	0019      	movs	r1, r3
 801a548:	4b64      	ldr	r3, [pc, #400]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a54a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a54c:	430a      	orrs	r2, r1
 801a54e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a550:	f000 fc42 	bl	801add8 <HAL_RCC_GetSysClockFreq>
 801a554:	0001      	movs	r1, r0
 801a556:	4b61      	ldr	r3, [pc, #388]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a558:	68db      	ldr	r3, [r3, #12]
 801a55a:	091b      	lsrs	r3, r3, #4
 801a55c:	220f      	movs	r2, #15
 801a55e:	4013      	ands	r3, r2
 801a560:	4a62      	ldr	r2, [pc, #392]	@ (801a6ec <HAL_RCC_OscConfig+0x34c>)
 801a562:	5cd3      	ldrb	r3, [r2, r3]
 801a564:	000a      	movs	r2, r1
 801a566:	40da      	lsrs	r2, r3
 801a568:	4b61      	ldr	r3, [pc, #388]	@ (801a6f0 <HAL_RCC_OscConfig+0x350>)
 801a56a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801a56c:	4b61      	ldr	r3, [pc, #388]	@ (801a6f4 <HAL_RCC_OscConfig+0x354>)
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	2513      	movs	r5, #19
 801a572:	197c      	adds	r4, r7, r5
 801a574:	0018      	movs	r0, r3
 801a576:	f7f9 fa91 	bl	8013a9c <HAL_InitTick>
 801a57a:	0003      	movs	r3, r0
 801a57c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801a57e:	197b      	adds	r3, r7, r5
 801a580:	781b      	ldrb	r3, [r3, #0]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d046      	beq.n	801a614 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801a586:	197b      	adds	r3, r7, r5
 801a588:	781b      	ldrb	r3, [r3, #0]
 801a58a:	e2d2      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801a58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a58e:	2b00      	cmp	r3, #0
 801a590:	d027      	beq.n	801a5e2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a592:	4b52      	ldr	r3, [pc, #328]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	2209      	movs	r2, #9
 801a598:	4393      	bics	r3, r2
 801a59a:	0019      	movs	r1, r3
 801a59c:	4b4f      	ldr	r3, [pc, #316]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a59e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a5a0:	430a      	orrs	r2, r1
 801a5a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a5a4:	f7f9 fac0 	bl	8013b28 <HAL_GetTick>
 801a5a8:	0003      	movs	r3, r0
 801a5aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a5ac:	e008      	b.n	801a5c0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a5ae:	f7f9 fabb 	bl	8013b28 <HAL_GetTick>
 801a5b2:	0002      	movs	r2, r0
 801a5b4:	697b      	ldr	r3, [r7, #20]
 801a5b6:	1ad3      	subs	r3, r2, r3
 801a5b8:	2b02      	cmp	r3, #2
 801a5ba:	d901      	bls.n	801a5c0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801a5bc:	2303      	movs	r3, #3
 801a5be:	e2b8      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a5c0:	4b46      	ldr	r3, [pc, #280]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	2204      	movs	r2, #4
 801a5c6:	4013      	ands	r3, r2
 801a5c8:	d0f1      	beq.n	801a5ae <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a5ca:	4b44      	ldr	r3, [pc, #272]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a5cc:	685b      	ldr	r3, [r3, #4]
 801a5ce:	4a46      	ldr	r2, [pc, #280]	@ (801a6e8 <HAL_RCC_OscConfig+0x348>)
 801a5d0:	4013      	ands	r3, r2
 801a5d2:	0019      	movs	r1, r3
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	691b      	ldr	r3, [r3, #16]
 801a5d8:	021a      	lsls	r2, r3, #8
 801a5da:	4b40      	ldr	r3, [pc, #256]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a5dc:	430a      	orrs	r2, r1
 801a5de:	605a      	str	r2, [r3, #4]
 801a5e0:	e018      	b.n	801a614 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a5e2:	4b3e      	ldr	r3, [pc, #248]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a5e4:	681a      	ldr	r2, [r3, #0]
 801a5e6:	4b3d      	ldr	r3, [pc, #244]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a5e8:	2101      	movs	r1, #1
 801a5ea:	438a      	bics	r2, r1
 801a5ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a5ee:	f7f9 fa9b 	bl	8013b28 <HAL_GetTick>
 801a5f2:	0003      	movs	r3, r0
 801a5f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a5f6:	e008      	b.n	801a60a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a5f8:	f7f9 fa96 	bl	8013b28 <HAL_GetTick>
 801a5fc:	0002      	movs	r2, r0
 801a5fe:	697b      	ldr	r3, [r7, #20]
 801a600:	1ad3      	subs	r3, r2, r3
 801a602:	2b02      	cmp	r3, #2
 801a604:	d901      	bls.n	801a60a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801a606:	2303      	movs	r3, #3
 801a608:	e293      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a60a:	4b34      	ldr	r3, [pc, #208]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	2204      	movs	r2, #4
 801a610:	4013      	ands	r3, r2
 801a612:	d1f1      	bne.n	801a5f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	2210      	movs	r2, #16
 801a61a:	4013      	ands	r3, r2
 801a61c:	d100      	bne.n	801a620 <HAL_RCC_OscConfig+0x280>
 801a61e:	e0a2      	b.n	801a766 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801a620:	69fb      	ldr	r3, [r7, #28]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d140      	bne.n	801a6a8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801a626:	4b2d      	ldr	r3, [pc, #180]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a628:	681a      	ldr	r2, [r3, #0]
 801a62a:	2380      	movs	r3, #128	@ 0x80
 801a62c:	009b      	lsls	r3, r3, #2
 801a62e:	4013      	ands	r3, r2
 801a630:	d005      	beq.n	801a63e <HAL_RCC_OscConfig+0x29e>
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	69db      	ldr	r3, [r3, #28]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d101      	bne.n	801a63e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801a63a:	2301      	movs	r3, #1
 801a63c:	e279      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a63e:	4b27      	ldr	r3, [pc, #156]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a640:	685b      	ldr	r3, [r3, #4]
 801a642:	4a2d      	ldr	r2, [pc, #180]	@ (801a6f8 <HAL_RCC_OscConfig+0x358>)
 801a644:	4013      	ands	r3, r2
 801a646:	0019      	movs	r1, r3
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a64c:	4b23      	ldr	r3, [pc, #140]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a64e:	430a      	orrs	r2, r1
 801a650:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a652:	4b22      	ldr	r3, [pc, #136]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a654:	685b      	ldr	r3, [r3, #4]
 801a656:	021b      	lsls	r3, r3, #8
 801a658:	0a19      	lsrs	r1, r3, #8
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	6a1b      	ldr	r3, [r3, #32]
 801a65e:	061a      	lsls	r2, r3, #24
 801a660:	4b1e      	ldr	r3, [pc, #120]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a662:	430a      	orrs	r2, r1
 801a664:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a66a:	0b5b      	lsrs	r3, r3, #13
 801a66c:	3301      	adds	r3, #1
 801a66e:	2280      	movs	r2, #128	@ 0x80
 801a670:	0212      	lsls	r2, r2, #8
 801a672:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801a674:	4b19      	ldr	r3, [pc, #100]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a676:	68db      	ldr	r3, [r3, #12]
 801a678:	091b      	lsrs	r3, r3, #4
 801a67a:	210f      	movs	r1, #15
 801a67c:	400b      	ands	r3, r1
 801a67e:	491b      	ldr	r1, [pc, #108]	@ (801a6ec <HAL_RCC_OscConfig+0x34c>)
 801a680:	5ccb      	ldrb	r3, [r1, r3]
 801a682:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801a684:	4b1a      	ldr	r3, [pc, #104]	@ (801a6f0 <HAL_RCC_OscConfig+0x350>)
 801a686:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801a688:	4b1a      	ldr	r3, [pc, #104]	@ (801a6f4 <HAL_RCC_OscConfig+0x354>)
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	2513      	movs	r5, #19
 801a68e:	197c      	adds	r4, r7, r5
 801a690:	0018      	movs	r0, r3
 801a692:	f7f9 fa03 	bl	8013a9c <HAL_InitTick>
 801a696:	0003      	movs	r3, r0
 801a698:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801a69a:	197b      	adds	r3, r7, r5
 801a69c:	781b      	ldrb	r3, [r3, #0]
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d061      	beq.n	801a766 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801a6a2:	197b      	adds	r3, r7, r5
 801a6a4:	781b      	ldrb	r3, [r3, #0]
 801a6a6:	e244      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	69db      	ldr	r3, [r3, #28]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d040      	beq.n	801a732 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801a6b0:	4b0a      	ldr	r3, [pc, #40]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a6b2:	681a      	ldr	r2, [r3, #0]
 801a6b4:	4b09      	ldr	r3, [pc, #36]	@ (801a6dc <HAL_RCC_OscConfig+0x33c>)
 801a6b6:	2180      	movs	r1, #128	@ 0x80
 801a6b8:	0049      	lsls	r1, r1, #1
 801a6ba:	430a      	orrs	r2, r1
 801a6bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a6be:	f7f9 fa33 	bl	8013b28 <HAL_GetTick>
 801a6c2:	0003      	movs	r3, r0
 801a6c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a6c6:	e019      	b.n	801a6fc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a6c8:	f7f9 fa2e 	bl	8013b28 <HAL_GetTick>
 801a6cc:	0002      	movs	r2, r0
 801a6ce:	697b      	ldr	r3, [r7, #20]
 801a6d0:	1ad3      	subs	r3, r2, r3
 801a6d2:	2b02      	cmp	r3, #2
 801a6d4:	d912      	bls.n	801a6fc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801a6d6:	2303      	movs	r3, #3
 801a6d8:	e22b      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
 801a6da:	46c0      	nop			@ (mov r8, r8)
 801a6dc:	40021000 	.word	0x40021000
 801a6e0:	fffeffff 	.word	0xfffeffff
 801a6e4:	fffbffff 	.word	0xfffbffff
 801a6e8:	ffffe0ff 	.word	0xffffe0ff
 801a6ec:	0802da5c 	.word	0x0802da5c
 801a6f0:	200000e0 	.word	0x200000e0
 801a6f4:	200000f0 	.word	0x200000f0
 801a6f8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a6fc:	4bca      	ldr	r3, [pc, #808]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a6fe:	681a      	ldr	r2, [r3, #0]
 801a700:	2380      	movs	r3, #128	@ 0x80
 801a702:	009b      	lsls	r3, r3, #2
 801a704:	4013      	ands	r3, r2
 801a706:	d0df      	beq.n	801a6c8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a708:	4bc7      	ldr	r3, [pc, #796]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a70a:	685b      	ldr	r3, [r3, #4]
 801a70c:	4ac7      	ldr	r2, [pc, #796]	@ (801aa2c <HAL_RCC_OscConfig+0x68c>)
 801a70e:	4013      	ands	r3, r2
 801a710:	0019      	movs	r1, r3
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a716:	4bc4      	ldr	r3, [pc, #784]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a718:	430a      	orrs	r2, r1
 801a71a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a71c:	4bc2      	ldr	r3, [pc, #776]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a71e:	685b      	ldr	r3, [r3, #4]
 801a720:	021b      	lsls	r3, r3, #8
 801a722:	0a19      	lsrs	r1, r3, #8
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	6a1b      	ldr	r3, [r3, #32]
 801a728:	061a      	lsls	r2, r3, #24
 801a72a:	4bbf      	ldr	r3, [pc, #764]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a72c:	430a      	orrs	r2, r1
 801a72e:	605a      	str	r2, [r3, #4]
 801a730:	e019      	b.n	801a766 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801a732:	4bbd      	ldr	r3, [pc, #756]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a734:	681a      	ldr	r2, [r3, #0]
 801a736:	4bbc      	ldr	r3, [pc, #752]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a738:	49bd      	ldr	r1, [pc, #756]	@ (801aa30 <HAL_RCC_OscConfig+0x690>)
 801a73a:	400a      	ands	r2, r1
 801a73c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a73e:	f7f9 f9f3 	bl	8013b28 <HAL_GetTick>
 801a742:	0003      	movs	r3, r0
 801a744:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a746:	e008      	b.n	801a75a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a748:	f7f9 f9ee 	bl	8013b28 <HAL_GetTick>
 801a74c:	0002      	movs	r2, r0
 801a74e:	697b      	ldr	r3, [r7, #20]
 801a750:	1ad3      	subs	r3, r2, r3
 801a752:	2b02      	cmp	r3, #2
 801a754:	d901      	bls.n	801a75a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801a756:	2303      	movs	r3, #3
 801a758:	e1eb      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a75a:	4bb3      	ldr	r3, [pc, #716]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a75c:	681a      	ldr	r2, [r3, #0]
 801a75e:	2380      	movs	r3, #128	@ 0x80
 801a760:	009b      	lsls	r3, r3, #2
 801a762:	4013      	ands	r3, r2
 801a764:	d1f0      	bne.n	801a748 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	2208      	movs	r2, #8
 801a76c:	4013      	ands	r3, r2
 801a76e:	d036      	beq.n	801a7de <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	695b      	ldr	r3, [r3, #20]
 801a774:	2b00      	cmp	r3, #0
 801a776:	d019      	beq.n	801a7ac <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a778:	4bab      	ldr	r3, [pc, #684]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a77a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a77c:	4baa      	ldr	r3, [pc, #680]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a77e:	2101      	movs	r1, #1
 801a780:	430a      	orrs	r2, r1
 801a782:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a784:	f7f9 f9d0 	bl	8013b28 <HAL_GetTick>
 801a788:	0003      	movs	r3, r0
 801a78a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a78c:	e008      	b.n	801a7a0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a78e:	f7f9 f9cb 	bl	8013b28 <HAL_GetTick>
 801a792:	0002      	movs	r2, r0
 801a794:	697b      	ldr	r3, [r7, #20]
 801a796:	1ad3      	subs	r3, r2, r3
 801a798:	2b02      	cmp	r3, #2
 801a79a:	d901      	bls.n	801a7a0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801a79c:	2303      	movs	r3, #3
 801a79e:	e1c8      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a7a0:	4ba1      	ldr	r3, [pc, #644]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a7a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a7a4:	2202      	movs	r2, #2
 801a7a6:	4013      	ands	r3, r2
 801a7a8:	d0f1      	beq.n	801a78e <HAL_RCC_OscConfig+0x3ee>
 801a7aa:	e018      	b.n	801a7de <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a7ac:	4b9e      	ldr	r3, [pc, #632]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a7ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a7b0:	4b9d      	ldr	r3, [pc, #628]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a7b2:	2101      	movs	r1, #1
 801a7b4:	438a      	bics	r2, r1
 801a7b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a7b8:	f7f9 f9b6 	bl	8013b28 <HAL_GetTick>
 801a7bc:	0003      	movs	r3, r0
 801a7be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a7c0:	e008      	b.n	801a7d4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a7c2:	f7f9 f9b1 	bl	8013b28 <HAL_GetTick>
 801a7c6:	0002      	movs	r2, r0
 801a7c8:	697b      	ldr	r3, [r7, #20]
 801a7ca:	1ad3      	subs	r3, r2, r3
 801a7cc:	2b02      	cmp	r3, #2
 801a7ce:	d901      	bls.n	801a7d4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801a7d0:	2303      	movs	r3, #3
 801a7d2:	e1ae      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a7d4:	4b94      	ldr	r3, [pc, #592]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a7d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a7d8:	2202      	movs	r2, #2
 801a7da:	4013      	ands	r3, r2
 801a7dc:	d1f1      	bne.n	801a7c2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	2204      	movs	r2, #4
 801a7e4:	4013      	ands	r3, r2
 801a7e6:	d100      	bne.n	801a7ea <HAL_RCC_OscConfig+0x44a>
 801a7e8:	e0ae      	b.n	801a948 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a7ea:	2023      	movs	r0, #35	@ 0x23
 801a7ec:	183b      	adds	r3, r7, r0
 801a7ee:	2200      	movs	r2, #0
 801a7f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a7f2:	4b8d      	ldr	r3, [pc, #564]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a7f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a7f6:	2380      	movs	r3, #128	@ 0x80
 801a7f8:	055b      	lsls	r3, r3, #21
 801a7fa:	4013      	ands	r3, r2
 801a7fc:	d109      	bne.n	801a812 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a7fe:	4b8a      	ldr	r3, [pc, #552]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a800:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a802:	4b89      	ldr	r3, [pc, #548]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a804:	2180      	movs	r1, #128	@ 0x80
 801a806:	0549      	lsls	r1, r1, #21
 801a808:	430a      	orrs	r2, r1
 801a80a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801a80c:	183b      	adds	r3, r7, r0
 801a80e:	2201      	movs	r2, #1
 801a810:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a812:	4b88      	ldr	r3, [pc, #544]	@ (801aa34 <HAL_RCC_OscConfig+0x694>)
 801a814:	681a      	ldr	r2, [r3, #0]
 801a816:	2380      	movs	r3, #128	@ 0x80
 801a818:	005b      	lsls	r3, r3, #1
 801a81a:	4013      	ands	r3, r2
 801a81c:	d11a      	bne.n	801a854 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a81e:	4b85      	ldr	r3, [pc, #532]	@ (801aa34 <HAL_RCC_OscConfig+0x694>)
 801a820:	681a      	ldr	r2, [r3, #0]
 801a822:	4b84      	ldr	r3, [pc, #528]	@ (801aa34 <HAL_RCC_OscConfig+0x694>)
 801a824:	2180      	movs	r1, #128	@ 0x80
 801a826:	0049      	lsls	r1, r1, #1
 801a828:	430a      	orrs	r2, r1
 801a82a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a82c:	f7f9 f97c 	bl	8013b28 <HAL_GetTick>
 801a830:	0003      	movs	r3, r0
 801a832:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a834:	e008      	b.n	801a848 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a836:	f7f9 f977 	bl	8013b28 <HAL_GetTick>
 801a83a:	0002      	movs	r2, r0
 801a83c:	697b      	ldr	r3, [r7, #20]
 801a83e:	1ad3      	subs	r3, r2, r3
 801a840:	2b64      	cmp	r3, #100	@ 0x64
 801a842:	d901      	bls.n	801a848 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801a844:	2303      	movs	r3, #3
 801a846:	e174      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a848:	4b7a      	ldr	r3, [pc, #488]	@ (801aa34 <HAL_RCC_OscConfig+0x694>)
 801a84a:	681a      	ldr	r2, [r3, #0]
 801a84c:	2380      	movs	r3, #128	@ 0x80
 801a84e:	005b      	lsls	r3, r3, #1
 801a850:	4013      	ands	r3, r2
 801a852:	d0f0      	beq.n	801a836 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	689a      	ldr	r2, [r3, #8]
 801a858:	2380      	movs	r3, #128	@ 0x80
 801a85a:	005b      	lsls	r3, r3, #1
 801a85c:	429a      	cmp	r2, r3
 801a85e:	d107      	bne.n	801a870 <HAL_RCC_OscConfig+0x4d0>
 801a860:	4b71      	ldr	r3, [pc, #452]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a862:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a864:	4b70      	ldr	r3, [pc, #448]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a866:	2180      	movs	r1, #128	@ 0x80
 801a868:	0049      	lsls	r1, r1, #1
 801a86a:	430a      	orrs	r2, r1
 801a86c:	651a      	str	r2, [r3, #80]	@ 0x50
 801a86e:	e031      	b.n	801a8d4 <HAL_RCC_OscConfig+0x534>
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	689b      	ldr	r3, [r3, #8]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d10c      	bne.n	801a892 <HAL_RCC_OscConfig+0x4f2>
 801a878:	4b6b      	ldr	r3, [pc, #428]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a87a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a87c:	4b6a      	ldr	r3, [pc, #424]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a87e:	496c      	ldr	r1, [pc, #432]	@ (801aa30 <HAL_RCC_OscConfig+0x690>)
 801a880:	400a      	ands	r2, r1
 801a882:	651a      	str	r2, [r3, #80]	@ 0x50
 801a884:	4b68      	ldr	r3, [pc, #416]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a886:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a888:	4b67      	ldr	r3, [pc, #412]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a88a:	496b      	ldr	r1, [pc, #428]	@ (801aa38 <HAL_RCC_OscConfig+0x698>)
 801a88c:	400a      	ands	r2, r1
 801a88e:	651a      	str	r2, [r3, #80]	@ 0x50
 801a890:	e020      	b.n	801a8d4 <HAL_RCC_OscConfig+0x534>
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	689a      	ldr	r2, [r3, #8]
 801a896:	23a0      	movs	r3, #160	@ 0xa0
 801a898:	00db      	lsls	r3, r3, #3
 801a89a:	429a      	cmp	r2, r3
 801a89c:	d10e      	bne.n	801a8bc <HAL_RCC_OscConfig+0x51c>
 801a89e:	4b62      	ldr	r3, [pc, #392]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a8a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a8a2:	4b61      	ldr	r3, [pc, #388]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a8a4:	2180      	movs	r1, #128	@ 0x80
 801a8a6:	00c9      	lsls	r1, r1, #3
 801a8a8:	430a      	orrs	r2, r1
 801a8aa:	651a      	str	r2, [r3, #80]	@ 0x50
 801a8ac:	4b5e      	ldr	r3, [pc, #376]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a8ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a8b0:	4b5d      	ldr	r3, [pc, #372]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a8b2:	2180      	movs	r1, #128	@ 0x80
 801a8b4:	0049      	lsls	r1, r1, #1
 801a8b6:	430a      	orrs	r2, r1
 801a8b8:	651a      	str	r2, [r3, #80]	@ 0x50
 801a8ba:	e00b      	b.n	801a8d4 <HAL_RCC_OscConfig+0x534>
 801a8bc:	4b5a      	ldr	r3, [pc, #360]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a8be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a8c0:	4b59      	ldr	r3, [pc, #356]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a8c2:	495b      	ldr	r1, [pc, #364]	@ (801aa30 <HAL_RCC_OscConfig+0x690>)
 801a8c4:	400a      	ands	r2, r1
 801a8c6:	651a      	str	r2, [r3, #80]	@ 0x50
 801a8c8:	4b57      	ldr	r3, [pc, #348]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a8ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a8cc:	4b56      	ldr	r3, [pc, #344]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a8ce:	495a      	ldr	r1, [pc, #360]	@ (801aa38 <HAL_RCC_OscConfig+0x698>)
 801a8d0:	400a      	ands	r2, r1
 801a8d2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	689b      	ldr	r3, [r3, #8]
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d015      	beq.n	801a908 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a8dc:	f7f9 f924 	bl	8013b28 <HAL_GetTick>
 801a8e0:	0003      	movs	r3, r0
 801a8e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a8e4:	e009      	b.n	801a8fa <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a8e6:	f7f9 f91f 	bl	8013b28 <HAL_GetTick>
 801a8ea:	0002      	movs	r2, r0
 801a8ec:	697b      	ldr	r3, [r7, #20]
 801a8ee:	1ad3      	subs	r3, r2, r3
 801a8f0:	4a52      	ldr	r2, [pc, #328]	@ (801aa3c <HAL_RCC_OscConfig+0x69c>)
 801a8f2:	4293      	cmp	r3, r2
 801a8f4:	d901      	bls.n	801a8fa <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801a8f6:	2303      	movs	r3, #3
 801a8f8:	e11b      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a8fa:	4b4b      	ldr	r3, [pc, #300]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a8fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a8fe:	2380      	movs	r3, #128	@ 0x80
 801a900:	009b      	lsls	r3, r3, #2
 801a902:	4013      	ands	r3, r2
 801a904:	d0ef      	beq.n	801a8e6 <HAL_RCC_OscConfig+0x546>
 801a906:	e014      	b.n	801a932 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a908:	f7f9 f90e 	bl	8013b28 <HAL_GetTick>
 801a90c:	0003      	movs	r3, r0
 801a90e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a910:	e009      	b.n	801a926 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a912:	f7f9 f909 	bl	8013b28 <HAL_GetTick>
 801a916:	0002      	movs	r2, r0
 801a918:	697b      	ldr	r3, [r7, #20]
 801a91a:	1ad3      	subs	r3, r2, r3
 801a91c:	4a47      	ldr	r2, [pc, #284]	@ (801aa3c <HAL_RCC_OscConfig+0x69c>)
 801a91e:	4293      	cmp	r3, r2
 801a920:	d901      	bls.n	801a926 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801a922:	2303      	movs	r3, #3
 801a924:	e105      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a926:	4b40      	ldr	r3, [pc, #256]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a928:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a92a:	2380      	movs	r3, #128	@ 0x80
 801a92c:	009b      	lsls	r3, r3, #2
 801a92e:	4013      	ands	r3, r2
 801a930:	d1ef      	bne.n	801a912 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801a932:	2323      	movs	r3, #35	@ 0x23
 801a934:	18fb      	adds	r3, r7, r3
 801a936:	781b      	ldrb	r3, [r3, #0]
 801a938:	2b01      	cmp	r3, #1
 801a93a:	d105      	bne.n	801a948 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a93c:	4b3a      	ldr	r3, [pc, #232]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a93e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a940:	4b39      	ldr	r3, [pc, #228]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a942:	493f      	ldr	r1, [pc, #252]	@ (801aa40 <HAL_RCC_OscConfig+0x6a0>)
 801a944:	400a      	ands	r2, r1
 801a946:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	2220      	movs	r2, #32
 801a94e:	4013      	ands	r3, r2
 801a950:	d049      	beq.n	801a9e6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	699b      	ldr	r3, [r3, #24]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d026      	beq.n	801a9a8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801a95a:	4b33      	ldr	r3, [pc, #204]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a95c:	689a      	ldr	r2, [r3, #8]
 801a95e:	4b32      	ldr	r3, [pc, #200]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a960:	2101      	movs	r1, #1
 801a962:	430a      	orrs	r2, r1
 801a964:	609a      	str	r2, [r3, #8]
 801a966:	4b30      	ldr	r3, [pc, #192]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a96a:	4b2f      	ldr	r3, [pc, #188]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a96c:	2101      	movs	r1, #1
 801a96e:	430a      	orrs	r2, r1
 801a970:	635a      	str	r2, [r3, #52]	@ 0x34
 801a972:	4b34      	ldr	r3, [pc, #208]	@ (801aa44 <HAL_RCC_OscConfig+0x6a4>)
 801a974:	6a1a      	ldr	r2, [r3, #32]
 801a976:	4b33      	ldr	r3, [pc, #204]	@ (801aa44 <HAL_RCC_OscConfig+0x6a4>)
 801a978:	2180      	movs	r1, #128	@ 0x80
 801a97a:	0189      	lsls	r1, r1, #6
 801a97c:	430a      	orrs	r2, r1
 801a97e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a980:	f7f9 f8d2 	bl	8013b28 <HAL_GetTick>
 801a984:	0003      	movs	r3, r0
 801a986:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a988:	e008      	b.n	801a99c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a98a:	f7f9 f8cd 	bl	8013b28 <HAL_GetTick>
 801a98e:	0002      	movs	r2, r0
 801a990:	697b      	ldr	r3, [r7, #20]
 801a992:	1ad3      	subs	r3, r2, r3
 801a994:	2b02      	cmp	r3, #2
 801a996:	d901      	bls.n	801a99c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801a998:	2303      	movs	r3, #3
 801a99a:	e0ca      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a99c:	4b22      	ldr	r3, [pc, #136]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a99e:	689b      	ldr	r3, [r3, #8]
 801a9a0:	2202      	movs	r2, #2
 801a9a2:	4013      	ands	r3, r2
 801a9a4:	d0f1      	beq.n	801a98a <HAL_RCC_OscConfig+0x5ea>
 801a9a6:	e01e      	b.n	801a9e6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801a9a8:	4b1f      	ldr	r3, [pc, #124]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a9aa:	689a      	ldr	r2, [r3, #8]
 801a9ac:	4b1e      	ldr	r3, [pc, #120]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a9ae:	2101      	movs	r1, #1
 801a9b0:	438a      	bics	r2, r1
 801a9b2:	609a      	str	r2, [r3, #8]
 801a9b4:	4b23      	ldr	r3, [pc, #140]	@ (801aa44 <HAL_RCC_OscConfig+0x6a4>)
 801a9b6:	6a1a      	ldr	r2, [r3, #32]
 801a9b8:	4b22      	ldr	r3, [pc, #136]	@ (801aa44 <HAL_RCC_OscConfig+0x6a4>)
 801a9ba:	4923      	ldr	r1, [pc, #140]	@ (801aa48 <HAL_RCC_OscConfig+0x6a8>)
 801a9bc:	400a      	ands	r2, r1
 801a9be:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a9c0:	f7f9 f8b2 	bl	8013b28 <HAL_GetTick>
 801a9c4:	0003      	movs	r3, r0
 801a9c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801a9c8:	e008      	b.n	801a9dc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a9ca:	f7f9 f8ad 	bl	8013b28 <HAL_GetTick>
 801a9ce:	0002      	movs	r2, r0
 801a9d0:	697b      	ldr	r3, [r7, #20]
 801a9d2:	1ad3      	subs	r3, r2, r3
 801a9d4:	2b02      	cmp	r3, #2
 801a9d6:	d901      	bls.n	801a9dc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801a9d8:	2303      	movs	r3, #3
 801a9da:	e0aa      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801a9dc:	4b12      	ldr	r3, [pc, #72]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801a9de:	689b      	ldr	r3, [r3, #8]
 801a9e0:	2202      	movs	r2, #2
 801a9e2:	4013      	ands	r3, r2
 801a9e4:	d1f1      	bne.n	801a9ca <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d100      	bne.n	801a9f0 <HAL_RCC_OscConfig+0x650>
 801a9ee:	e09f      	b.n	801ab30 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801a9f0:	69fb      	ldr	r3, [r7, #28]
 801a9f2:	2b0c      	cmp	r3, #12
 801a9f4:	d100      	bne.n	801a9f8 <HAL_RCC_OscConfig+0x658>
 801a9f6:	e078      	b.n	801aaea <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a9fc:	2b02      	cmp	r3, #2
 801a9fe:	d159      	bne.n	801aab4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801aa00:	4b09      	ldr	r3, [pc, #36]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801aa02:	681a      	ldr	r2, [r3, #0]
 801aa04:	4b08      	ldr	r3, [pc, #32]	@ (801aa28 <HAL_RCC_OscConfig+0x688>)
 801aa06:	4911      	ldr	r1, [pc, #68]	@ (801aa4c <HAL_RCC_OscConfig+0x6ac>)
 801aa08:	400a      	ands	r2, r1
 801aa0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aa0c:	f7f9 f88c 	bl	8013b28 <HAL_GetTick>
 801aa10:	0003      	movs	r3, r0
 801aa12:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801aa14:	e01c      	b.n	801aa50 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801aa16:	f7f9 f887 	bl	8013b28 <HAL_GetTick>
 801aa1a:	0002      	movs	r2, r0
 801aa1c:	697b      	ldr	r3, [r7, #20]
 801aa1e:	1ad3      	subs	r3, r2, r3
 801aa20:	2b02      	cmp	r3, #2
 801aa22:	d915      	bls.n	801aa50 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801aa24:	2303      	movs	r3, #3
 801aa26:	e084      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
 801aa28:	40021000 	.word	0x40021000
 801aa2c:	ffff1fff 	.word	0xffff1fff
 801aa30:	fffffeff 	.word	0xfffffeff
 801aa34:	40007000 	.word	0x40007000
 801aa38:	fffffbff 	.word	0xfffffbff
 801aa3c:	00001388 	.word	0x00001388
 801aa40:	efffffff 	.word	0xefffffff
 801aa44:	40010000 	.word	0x40010000
 801aa48:	ffffdfff 	.word	0xffffdfff
 801aa4c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801aa50:	4b3a      	ldr	r3, [pc, #232]	@ (801ab3c <HAL_RCC_OscConfig+0x79c>)
 801aa52:	681a      	ldr	r2, [r3, #0]
 801aa54:	2380      	movs	r3, #128	@ 0x80
 801aa56:	049b      	lsls	r3, r3, #18
 801aa58:	4013      	ands	r3, r2
 801aa5a:	d1dc      	bne.n	801aa16 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801aa5c:	4b37      	ldr	r3, [pc, #220]	@ (801ab3c <HAL_RCC_OscConfig+0x79c>)
 801aa5e:	68db      	ldr	r3, [r3, #12]
 801aa60:	4a37      	ldr	r2, [pc, #220]	@ (801ab40 <HAL_RCC_OscConfig+0x7a0>)
 801aa62:	4013      	ands	r3, r2
 801aa64:	0019      	movs	r1, r3
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aa6e:	431a      	orrs	r2, r3
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa74:	431a      	orrs	r2, r3
 801aa76:	4b31      	ldr	r3, [pc, #196]	@ (801ab3c <HAL_RCC_OscConfig+0x79c>)
 801aa78:	430a      	orrs	r2, r1
 801aa7a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801aa7c:	4b2f      	ldr	r3, [pc, #188]	@ (801ab3c <HAL_RCC_OscConfig+0x79c>)
 801aa7e:	681a      	ldr	r2, [r3, #0]
 801aa80:	4b2e      	ldr	r3, [pc, #184]	@ (801ab3c <HAL_RCC_OscConfig+0x79c>)
 801aa82:	2180      	movs	r1, #128	@ 0x80
 801aa84:	0449      	lsls	r1, r1, #17
 801aa86:	430a      	orrs	r2, r1
 801aa88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aa8a:	f7f9 f84d 	bl	8013b28 <HAL_GetTick>
 801aa8e:	0003      	movs	r3, r0
 801aa90:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801aa92:	e008      	b.n	801aaa6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801aa94:	f7f9 f848 	bl	8013b28 <HAL_GetTick>
 801aa98:	0002      	movs	r2, r0
 801aa9a:	697b      	ldr	r3, [r7, #20]
 801aa9c:	1ad3      	subs	r3, r2, r3
 801aa9e:	2b02      	cmp	r3, #2
 801aaa0:	d901      	bls.n	801aaa6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801aaa2:	2303      	movs	r3, #3
 801aaa4:	e045      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801aaa6:	4b25      	ldr	r3, [pc, #148]	@ (801ab3c <HAL_RCC_OscConfig+0x79c>)
 801aaa8:	681a      	ldr	r2, [r3, #0]
 801aaaa:	2380      	movs	r3, #128	@ 0x80
 801aaac:	049b      	lsls	r3, r3, #18
 801aaae:	4013      	ands	r3, r2
 801aab0:	d0f0      	beq.n	801aa94 <HAL_RCC_OscConfig+0x6f4>
 801aab2:	e03d      	b.n	801ab30 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801aab4:	4b21      	ldr	r3, [pc, #132]	@ (801ab3c <HAL_RCC_OscConfig+0x79c>)
 801aab6:	681a      	ldr	r2, [r3, #0]
 801aab8:	4b20      	ldr	r3, [pc, #128]	@ (801ab3c <HAL_RCC_OscConfig+0x79c>)
 801aaba:	4922      	ldr	r1, [pc, #136]	@ (801ab44 <HAL_RCC_OscConfig+0x7a4>)
 801aabc:	400a      	ands	r2, r1
 801aabe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aac0:	f7f9 f832 	bl	8013b28 <HAL_GetTick>
 801aac4:	0003      	movs	r3, r0
 801aac6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801aac8:	e008      	b.n	801aadc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801aaca:	f7f9 f82d 	bl	8013b28 <HAL_GetTick>
 801aace:	0002      	movs	r2, r0
 801aad0:	697b      	ldr	r3, [r7, #20]
 801aad2:	1ad3      	subs	r3, r2, r3
 801aad4:	2b02      	cmp	r3, #2
 801aad6:	d901      	bls.n	801aadc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801aad8:	2303      	movs	r3, #3
 801aada:	e02a      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801aadc:	4b17      	ldr	r3, [pc, #92]	@ (801ab3c <HAL_RCC_OscConfig+0x79c>)
 801aade:	681a      	ldr	r2, [r3, #0]
 801aae0:	2380      	movs	r3, #128	@ 0x80
 801aae2:	049b      	lsls	r3, r3, #18
 801aae4:	4013      	ands	r3, r2
 801aae6:	d1f0      	bne.n	801aaca <HAL_RCC_OscConfig+0x72a>
 801aae8:	e022      	b.n	801ab30 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aaee:	2b01      	cmp	r3, #1
 801aaf0:	d101      	bne.n	801aaf6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801aaf2:	2301      	movs	r3, #1
 801aaf4:	e01d      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801aaf6:	4b11      	ldr	r3, [pc, #68]	@ (801ab3c <HAL_RCC_OscConfig+0x79c>)
 801aaf8:	68db      	ldr	r3, [r3, #12]
 801aafa:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801aafc:	69ba      	ldr	r2, [r7, #24]
 801aafe:	2380      	movs	r3, #128	@ 0x80
 801ab00:	025b      	lsls	r3, r3, #9
 801ab02:	401a      	ands	r2, r3
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab08:	429a      	cmp	r2, r3
 801ab0a:	d10f      	bne.n	801ab2c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801ab0c:	69ba      	ldr	r2, [r7, #24]
 801ab0e:	23f0      	movs	r3, #240	@ 0xf0
 801ab10:	039b      	lsls	r3, r3, #14
 801ab12:	401a      	ands	r2, r3
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ab18:	429a      	cmp	r2, r3
 801ab1a:	d107      	bne.n	801ab2c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801ab1c:	69ba      	ldr	r2, [r7, #24]
 801ab1e:	23c0      	movs	r3, #192	@ 0xc0
 801ab20:	041b      	lsls	r3, r3, #16
 801ab22:	401a      	ands	r2, r3
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801ab28:	429a      	cmp	r2, r3
 801ab2a:	d001      	beq.n	801ab30 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801ab2c:	2301      	movs	r3, #1
 801ab2e:	e000      	b.n	801ab32 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801ab30:	2300      	movs	r3, #0
}
 801ab32:	0018      	movs	r0, r3
 801ab34:	46bd      	mov	sp, r7
 801ab36:	b00a      	add	sp, #40	@ 0x28
 801ab38:	bdb0      	pop	{r4, r5, r7, pc}
 801ab3a:	46c0      	nop			@ (mov r8, r8)
 801ab3c:	40021000 	.word	0x40021000
 801ab40:	ff02ffff 	.word	0xff02ffff
 801ab44:	feffffff 	.word	0xfeffffff

0801ab48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ab48:	b5b0      	push	{r4, r5, r7, lr}
 801ab4a:	b084      	sub	sp, #16
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
 801ab50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d101      	bne.n	801ab5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ab58:	2301      	movs	r3, #1
 801ab5a:	e128      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801ab5c:	4b96      	ldr	r3, [pc, #600]	@ (801adb8 <HAL_RCC_ClockConfig+0x270>)
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	2201      	movs	r2, #1
 801ab62:	4013      	ands	r3, r2
 801ab64:	683a      	ldr	r2, [r7, #0]
 801ab66:	429a      	cmp	r2, r3
 801ab68:	d91e      	bls.n	801aba8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ab6a:	4b93      	ldr	r3, [pc, #588]	@ (801adb8 <HAL_RCC_ClockConfig+0x270>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	2201      	movs	r2, #1
 801ab70:	4393      	bics	r3, r2
 801ab72:	0019      	movs	r1, r3
 801ab74:	4b90      	ldr	r3, [pc, #576]	@ (801adb8 <HAL_RCC_ClockConfig+0x270>)
 801ab76:	683a      	ldr	r2, [r7, #0]
 801ab78:	430a      	orrs	r2, r1
 801ab7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801ab7c:	f7f8 ffd4 	bl	8013b28 <HAL_GetTick>
 801ab80:	0003      	movs	r3, r0
 801ab82:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ab84:	e009      	b.n	801ab9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ab86:	f7f8 ffcf 	bl	8013b28 <HAL_GetTick>
 801ab8a:	0002      	movs	r2, r0
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	1ad3      	subs	r3, r2, r3
 801ab90:	4a8a      	ldr	r2, [pc, #552]	@ (801adbc <HAL_RCC_ClockConfig+0x274>)
 801ab92:	4293      	cmp	r3, r2
 801ab94:	d901      	bls.n	801ab9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801ab96:	2303      	movs	r3, #3
 801ab98:	e109      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ab9a:	4b87      	ldr	r3, [pc, #540]	@ (801adb8 <HAL_RCC_ClockConfig+0x270>)
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	2201      	movs	r2, #1
 801aba0:	4013      	ands	r3, r2
 801aba2:	683a      	ldr	r2, [r7, #0]
 801aba4:	429a      	cmp	r2, r3
 801aba6:	d1ee      	bne.n	801ab86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	2202      	movs	r2, #2
 801abae:	4013      	ands	r3, r2
 801abb0:	d009      	beq.n	801abc6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801abb2:	4b83      	ldr	r3, [pc, #524]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801abb4:	68db      	ldr	r3, [r3, #12]
 801abb6:	22f0      	movs	r2, #240	@ 0xf0
 801abb8:	4393      	bics	r3, r2
 801abba:	0019      	movs	r1, r3
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	689a      	ldr	r2, [r3, #8]
 801abc0:	4b7f      	ldr	r3, [pc, #508]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801abc2:	430a      	orrs	r2, r1
 801abc4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	2201      	movs	r2, #1
 801abcc:	4013      	ands	r3, r2
 801abce:	d100      	bne.n	801abd2 <HAL_RCC_ClockConfig+0x8a>
 801abd0:	e089      	b.n	801ace6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	685b      	ldr	r3, [r3, #4]
 801abd6:	2b02      	cmp	r3, #2
 801abd8:	d107      	bne.n	801abea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801abda:	4b79      	ldr	r3, [pc, #484]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801abdc:	681a      	ldr	r2, [r3, #0]
 801abde:	2380      	movs	r3, #128	@ 0x80
 801abe0:	029b      	lsls	r3, r3, #10
 801abe2:	4013      	ands	r3, r2
 801abe4:	d120      	bne.n	801ac28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801abe6:	2301      	movs	r3, #1
 801abe8:	e0e1      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	685b      	ldr	r3, [r3, #4]
 801abee:	2b03      	cmp	r3, #3
 801abf0:	d107      	bne.n	801ac02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801abf2:	4b73      	ldr	r3, [pc, #460]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801abf4:	681a      	ldr	r2, [r3, #0]
 801abf6:	2380      	movs	r3, #128	@ 0x80
 801abf8:	049b      	lsls	r3, r3, #18
 801abfa:	4013      	ands	r3, r2
 801abfc:	d114      	bne.n	801ac28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801abfe:	2301      	movs	r3, #1
 801ac00:	e0d5      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	685b      	ldr	r3, [r3, #4]
 801ac06:	2b01      	cmp	r3, #1
 801ac08:	d106      	bne.n	801ac18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ac0a:	4b6d      	ldr	r3, [pc, #436]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	2204      	movs	r2, #4
 801ac10:	4013      	ands	r3, r2
 801ac12:	d109      	bne.n	801ac28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ac14:	2301      	movs	r3, #1
 801ac16:	e0ca      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801ac18:	4b69      	ldr	r3, [pc, #420]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ac1a:	681a      	ldr	r2, [r3, #0]
 801ac1c:	2380      	movs	r3, #128	@ 0x80
 801ac1e:	009b      	lsls	r3, r3, #2
 801ac20:	4013      	ands	r3, r2
 801ac22:	d101      	bne.n	801ac28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ac24:	2301      	movs	r3, #1
 801ac26:	e0c2      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801ac28:	4b65      	ldr	r3, [pc, #404]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ac2a:	68db      	ldr	r3, [r3, #12]
 801ac2c:	2203      	movs	r2, #3
 801ac2e:	4393      	bics	r3, r2
 801ac30:	0019      	movs	r1, r3
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	685a      	ldr	r2, [r3, #4]
 801ac36:	4b62      	ldr	r3, [pc, #392]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ac38:	430a      	orrs	r2, r1
 801ac3a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801ac3c:	f7f8 ff74 	bl	8013b28 <HAL_GetTick>
 801ac40:	0003      	movs	r3, r0
 801ac42:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	685b      	ldr	r3, [r3, #4]
 801ac48:	2b02      	cmp	r3, #2
 801ac4a:	d111      	bne.n	801ac70 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801ac4c:	e009      	b.n	801ac62 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ac4e:	f7f8 ff6b 	bl	8013b28 <HAL_GetTick>
 801ac52:	0002      	movs	r2, r0
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	1ad3      	subs	r3, r2, r3
 801ac58:	4a58      	ldr	r2, [pc, #352]	@ (801adbc <HAL_RCC_ClockConfig+0x274>)
 801ac5a:	4293      	cmp	r3, r2
 801ac5c:	d901      	bls.n	801ac62 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801ac5e:	2303      	movs	r3, #3
 801ac60:	e0a5      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801ac62:	4b57      	ldr	r3, [pc, #348]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ac64:	68db      	ldr	r3, [r3, #12]
 801ac66:	220c      	movs	r2, #12
 801ac68:	4013      	ands	r3, r2
 801ac6a:	2b08      	cmp	r3, #8
 801ac6c:	d1ef      	bne.n	801ac4e <HAL_RCC_ClockConfig+0x106>
 801ac6e:	e03a      	b.n	801ace6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	685b      	ldr	r3, [r3, #4]
 801ac74:	2b03      	cmp	r3, #3
 801ac76:	d111      	bne.n	801ac9c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ac78:	e009      	b.n	801ac8e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ac7a:	f7f8 ff55 	bl	8013b28 <HAL_GetTick>
 801ac7e:	0002      	movs	r2, r0
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	1ad3      	subs	r3, r2, r3
 801ac84:	4a4d      	ldr	r2, [pc, #308]	@ (801adbc <HAL_RCC_ClockConfig+0x274>)
 801ac86:	4293      	cmp	r3, r2
 801ac88:	d901      	bls.n	801ac8e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801ac8a:	2303      	movs	r3, #3
 801ac8c:	e08f      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ac8e:	4b4c      	ldr	r3, [pc, #304]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ac90:	68db      	ldr	r3, [r3, #12]
 801ac92:	220c      	movs	r2, #12
 801ac94:	4013      	ands	r3, r2
 801ac96:	2b0c      	cmp	r3, #12
 801ac98:	d1ef      	bne.n	801ac7a <HAL_RCC_ClockConfig+0x132>
 801ac9a:	e024      	b.n	801ace6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	685b      	ldr	r3, [r3, #4]
 801aca0:	2b01      	cmp	r3, #1
 801aca2:	d11b      	bne.n	801acdc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801aca4:	e009      	b.n	801acba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801aca6:	f7f8 ff3f 	bl	8013b28 <HAL_GetTick>
 801acaa:	0002      	movs	r2, r0
 801acac:	68fb      	ldr	r3, [r7, #12]
 801acae:	1ad3      	subs	r3, r2, r3
 801acb0:	4a42      	ldr	r2, [pc, #264]	@ (801adbc <HAL_RCC_ClockConfig+0x274>)
 801acb2:	4293      	cmp	r3, r2
 801acb4:	d901      	bls.n	801acba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801acb6:	2303      	movs	r3, #3
 801acb8:	e079      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801acba:	4b41      	ldr	r3, [pc, #260]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801acbc:	68db      	ldr	r3, [r3, #12]
 801acbe:	220c      	movs	r2, #12
 801acc0:	4013      	ands	r3, r2
 801acc2:	2b04      	cmp	r3, #4
 801acc4:	d1ef      	bne.n	801aca6 <HAL_RCC_ClockConfig+0x15e>
 801acc6:	e00e      	b.n	801ace6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801acc8:	f7f8 ff2e 	bl	8013b28 <HAL_GetTick>
 801accc:	0002      	movs	r2, r0
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	1ad3      	subs	r3, r2, r3
 801acd2:	4a3a      	ldr	r2, [pc, #232]	@ (801adbc <HAL_RCC_ClockConfig+0x274>)
 801acd4:	4293      	cmp	r3, r2
 801acd6:	d901      	bls.n	801acdc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801acd8:	2303      	movs	r3, #3
 801acda:	e068      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801acdc:	4b38      	ldr	r3, [pc, #224]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801acde:	68db      	ldr	r3, [r3, #12]
 801ace0:	220c      	movs	r2, #12
 801ace2:	4013      	ands	r3, r2
 801ace4:	d1f0      	bne.n	801acc8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801ace6:	4b34      	ldr	r3, [pc, #208]	@ (801adb8 <HAL_RCC_ClockConfig+0x270>)
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	2201      	movs	r2, #1
 801acec:	4013      	ands	r3, r2
 801acee:	683a      	ldr	r2, [r7, #0]
 801acf0:	429a      	cmp	r2, r3
 801acf2:	d21e      	bcs.n	801ad32 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801acf4:	4b30      	ldr	r3, [pc, #192]	@ (801adb8 <HAL_RCC_ClockConfig+0x270>)
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	2201      	movs	r2, #1
 801acfa:	4393      	bics	r3, r2
 801acfc:	0019      	movs	r1, r3
 801acfe:	4b2e      	ldr	r3, [pc, #184]	@ (801adb8 <HAL_RCC_ClockConfig+0x270>)
 801ad00:	683a      	ldr	r2, [r7, #0]
 801ad02:	430a      	orrs	r2, r1
 801ad04:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801ad06:	f7f8 ff0f 	bl	8013b28 <HAL_GetTick>
 801ad0a:	0003      	movs	r3, r0
 801ad0c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ad0e:	e009      	b.n	801ad24 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ad10:	f7f8 ff0a 	bl	8013b28 <HAL_GetTick>
 801ad14:	0002      	movs	r2, r0
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	1ad3      	subs	r3, r2, r3
 801ad1a:	4a28      	ldr	r2, [pc, #160]	@ (801adbc <HAL_RCC_ClockConfig+0x274>)
 801ad1c:	4293      	cmp	r3, r2
 801ad1e:	d901      	bls.n	801ad24 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801ad20:	2303      	movs	r3, #3
 801ad22:	e044      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ad24:	4b24      	ldr	r3, [pc, #144]	@ (801adb8 <HAL_RCC_ClockConfig+0x270>)
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	2201      	movs	r2, #1
 801ad2a:	4013      	ands	r3, r2
 801ad2c:	683a      	ldr	r2, [r7, #0]
 801ad2e:	429a      	cmp	r2, r3
 801ad30:	d1ee      	bne.n	801ad10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	2204      	movs	r2, #4
 801ad38:	4013      	ands	r3, r2
 801ad3a:	d009      	beq.n	801ad50 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801ad3c:	4b20      	ldr	r3, [pc, #128]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ad3e:	68db      	ldr	r3, [r3, #12]
 801ad40:	4a20      	ldr	r2, [pc, #128]	@ (801adc4 <HAL_RCC_ClockConfig+0x27c>)
 801ad42:	4013      	ands	r3, r2
 801ad44:	0019      	movs	r1, r3
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	68da      	ldr	r2, [r3, #12]
 801ad4a:	4b1d      	ldr	r3, [pc, #116]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ad4c:	430a      	orrs	r2, r1
 801ad4e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	2208      	movs	r2, #8
 801ad56:	4013      	ands	r3, r2
 801ad58:	d00a      	beq.n	801ad70 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801ad5a:	4b19      	ldr	r3, [pc, #100]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ad5c:	68db      	ldr	r3, [r3, #12]
 801ad5e:	4a1a      	ldr	r2, [pc, #104]	@ (801adc8 <HAL_RCC_ClockConfig+0x280>)
 801ad60:	4013      	ands	r3, r2
 801ad62:	0019      	movs	r1, r3
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	691b      	ldr	r3, [r3, #16]
 801ad68:	00da      	lsls	r2, r3, #3
 801ad6a:	4b15      	ldr	r3, [pc, #84]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ad6c:	430a      	orrs	r2, r1
 801ad6e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801ad70:	f000 f832 	bl	801add8 <HAL_RCC_GetSysClockFreq>
 801ad74:	0001      	movs	r1, r0
 801ad76:	4b12      	ldr	r3, [pc, #72]	@ (801adc0 <HAL_RCC_ClockConfig+0x278>)
 801ad78:	68db      	ldr	r3, [r3, #12]
 801ad7a:	091b      	lsrs	r3, r3, #4
 801ad7c:	220f      	movs	r2, #15
 801ad7e:	4013      	ands	r3, r2
 801ad80:	4a12      	ldr	r2, [pc, #72]	@ (801adcc <HAL_RCC_ClockConfig+0x284>)
 801ad82:	5cd3      	ldrb	r3, [r2, r3]
 801ad84:	000a      	movs	r2, r1
 801ad86:	40da      	lsrs	r2, r3
 801ad88:	4b11      	ldr	r3, [pc, #68]	@ (801add0 <HAL_RCC_ClockConfig+0x288>)
 801ad8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801ad8c:	4b11      	ldr	r3, [pc, #68]	@ (801add4 <HAL_RCC_ClockConfig+0x28c>)
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	250b      	movs	r5, #11
 801ad92:	197c      	adds	r4, r7, r5
 801ad94:	0018      	movs	r0, r3
 801ad96:	f7f8 fe81 	bl	8013a9c <HAL_InitTick>
 801ad9a:	0003      	movs	r3, r0
 801ad9c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801ad9e:	197b      	adds	r3, r7, r5
 801ada0:	781b      	ldrb	r3, [r3, #0]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d002      	beq.n	801adac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801ada6:	197b      	adds	r3, r7, r5
 801ada8:	781b      	ldrb	r3, [r3, #0]
 801adaa:	e000      	b.n	801adae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801adac:	2300      	movs	r3, #0
}
 801adae:	0018      	movs	r0, r3
 801adb0:	46bd      	mov	sp, r7
 801adb2:	b004      	add	sp, #16
 801adb4:	bdb0      	pop	{r4, r5, r7, pc}
 801adb6:	46c0      	nop			@ (mov r8, r8)
 801adb8:	40022000 	.word	0x40022000
 801adbc:	00001388 	.word	0x00001388
 801adc0:	40021000 	.word	0x40021000
 801adc4:	fffff8ff 	.word	0xfffff8ff
 801adc8:	ffffc7ff 	.word	0xffffc7ff
 801adcc:	0802da5c 	.word	0x0802da5c
 801add0:	200000e0 	.word	0x200000e0
 801add4:	200000f0 	.word	0x200000f0

0801add8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801add8:	b5b0      	push	{r4, r5, r7, lr}
 801adda:	b08e      	sub	sp, #56	@ 0x38
 801addc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801adde:	4b4c      	ldr	r3, [pc, #304]	@ (801af10 <HAL_RCC_GetSysClockFreq+0x138>)
 801ade0:	68db      	ldr	r3, [r3, #12]
 801ade2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801ade4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ade6:	230c      	movs	r3, #12
 801ade8:	4013      	ands	r3, r2
 801adea:	2b0c      	cmp	r3, #12
 801adec:	d014      	beq.n	801ae18 <HAL_RCC_GetSysClockFreq+0x40>
 801adee:	d900      	bls.n	801adf2 <HAL_RCC_GetSysClockFreq+0x1a>
 801adf0:	e07b      	b.n	801aeea <HAL_RCC_GetSysClockFreq+0x112>
 801adf2:	2b04      	cmp	r3, #4
 801adf4:	d002      	beq.n	801adfc <HAL_RCC_GetSysClockFreq+0x24>
 801adf6:	2b08      	cmp	r3, #8
 801adf8:	d00b      	beq.n	801ae12 <HAL_RCC_GetSysClockFreq+0x3a>
 801adfa:	e076      	b.n	801aeea <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801adfc:	4b44      	ldr	r3, [pc, #272]	@ (801af10 <HAL_RCC_GetSysClockFreq+0x138>)
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	2210      	movs	r2, #16
 801ae02:	4013      	ands	r3, r2
 801ae04:	d002      	beq.n	801ae0c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801ae06:	4b43      	ldr	r3, [pc, #268]	@ (801af14 <HAL_RCC_GetSysClockFreq+0x13c>)
 801ae08:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801ae0a:	e07c      	b.n	801af06 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801ae0c:	4b42      	ldr	r3, [pc, #264]	@ (801af18 <HAL_RCC_GetSysClockFreq+0x140>)
 801ae0e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801ae10:	e079      	b.n	801af06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801ae12:	4b42      	ldr	r3, [pc, #264]	@ (801af1c <HAL_RCC_GetSysClockFreq+0x144>)
 801ae14:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801ae16:	e076      	b.n	801af06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801ae18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae1a:	0c9a      	lsrs	r2, r3, #18
 801ae1c:	230f      	movs	r3, #15
 801ae1e:	401a      	ands	r2, r3
 801ae20:	4b3f      	ldr	r3, [pc, #252]	@ (801af20 <HAL_RCC_GetSysClockFreq+0x148>)
 801ae22:	5c9b      	ldrb	r3, [r3, r2]
 801ae24:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801ae26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae28:	0d9a      	lsrs	r2, r3, #22
 801ae2a:	2303      	movs	r3, #3
 801ae2c:	4013      	ands	r3, r2
 801ae2e:	3301      	adds	r3, #1
 801ae30:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801ae32:	4b37      	ldr	r3, [pc, #220]	@ (801af10 <HAL_RCC_GetSysClockFreq+0x138>)
 801ae34:	68da      	ldr	r2, [r3, #12]
 801ae36:	2380      	movs	r3, #128	@ 0x80
 801ae38:	025b      	lsls	r3, r3, #9
 801ae3a:	4013      	ands	r3, r2
 801ae3c:	d01a      	beq.n	801ae74 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801ae3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae40:	61bb      	str	r3, [r7, #24]
 801ae42:	2300      	movs	r3, #0
 801ae44:	61fb      	str	r3, [r7, #28]
 801ae46:	4a35      	ldr	r2, [pc, #212]	@ (801af1c <HAL_RCC_GetSysClockFreq+0x144>)
 801ae48:	2300      	movs	r3, #0
 801ae4a:	69b8      	ldr	r0, [r7, #24]
 801ae4c:	69f9      	ldr	r1, [r7, #28]
 801ae4e:	f7e5 fbb7 	bl	80005c0 <__aeabi_lmul>
 801ae52:	0002      	movs	r2, r0
 801ae54:	000b      	movs	r3, r1
 801ae56:	0010      	movs	r0, r2
 801ae58:	0019      	movs	r1, r3
 801ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae5c:	613b      	str	r3, [r7, #16]
 801ae5e:	2300      	movs	r3, #0
 801ae60:	617b      	str	r3, [r7, #20]
 801ae62:	693a      	ldr	r2, [r7, #16]
 801ae64:	697b      	ldr	r3, [r7, #20]
 801ae66:	f7e5 fb8b 	bl	8000580 <__aeabi_uldivmod>
 801ae6a:	0002      	movs	r2, r0
 801ae6c:	000b      	movs	r3, r1
 801ae6e:	0013      	movs	r3, r2
 801ae70:	637b      	str	r3, [r7, #52]	@ 0x34
 801ae72:	e037      	b.n	801aee4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801ae74:	4b26      	ldr	r3, [pc, #152]	@ (801af10 <HAL_RCC_GetSysClockFreq+0x138>)
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	2210      	movs	r2, #16
 801ae7a:	4013      	ands	r3, r2
 801ae7c:	d01a      	beq.n	801aeb4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801ae7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae80:	60bb      	str	r3, [r7, #8]
 801ae82:	2300      	movs	r3, #0
 801ae84:	60fb      	str	r3, [r7, #12]
 801ae86:	4a23      	ldr	r2, [pc, #140]	@ (801af14 <HAL_RCC_GetSysClockFreq+0x13c>)
 801ae88:	2300      	movs	r3, #0
 801ae8a:	68b8      	ldr	r0, [r7, #8]
 801ae8c:	68f9      	ldr	r1, [r7, #12]
 801ae8e:	f7e5 fb97 	bl	80005c0 <__aeabi_lmul>
 801ae92:	0002      	movs	r2, r0
 801ae94:	000b      	movs	r3, r1
 801ae96:	0010      	movs	r0, r2
 801ae98:	0019      	movs	r1, r3
 801ae9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae9c:	603b      	str	r3, [r7, #0]
 801ae9e:	2300      	movs	r3, #0
 801aea0:	607b      	str	r3, [r7, #4]
 801aea2:	683a      	ldr	r2, [r7, #0]
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	f7e5 fb6b 	bl	8000580 <__aeabi_uldivmod>
 801aeaa:	0002      	movs	r2, r0
 801aeac:	000b      	movs	r3, r1
 801aeae:	0013      	movs	r3, r2
 801aeb0:	637b      	str	r3, [r7, #52]	@ 0x34
 801aeb2:	e017      	b.n	801aee4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801aeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeb6:	0018      	movs	r0, r3
 801aeb8:	2300      	movs	r3, #0
 801aeba:	0019      	movs	r1, r3
 801aebc:	4a16      	ldr	r2, [pc, #88]	@ (801af18 <HAL_RCC_GetSysClockFreq+0x140>)
 801aebe:	2300      	movs	r3, #0
 801aec0:	f7e5 fb7e 	bl	80005c0 <__aeabi_lmul>
 801aec4:	0002      	movs	r2, r0
 801aec6:	000b      	movs	r3, r1
 801aec8:	0010      	movs	r0, r2
 801aeca:	0019      	movs	r1, r3
 801aecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aece:	001c      	movs	r4, r3
 801aed0:	2300      	movs	r3, #0
 801aed2:	001d      	movs	r5, r3
 801aed4:	0022      	movs	r2, r4
 801aed6:	002b      	movs	r3, r5
 801aed8:	f7e5 fb52 	bl	8000580 <__aeabi_uldivmod>
 801aedc:	0002      	movs	r2, r0
 801aede:	000b      	movs	r3, r1
 801aee0:	0013      	movs	r3, r2
 801aee2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801aee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aee6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801aee8:	e00d      	b.n	801af06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801aeea:	4b09      	ldr	r3, [pc, #36]	@ (801af10 <HAL_RCC_GetSysClockFreq+0x138>)
 801aeec:	685b      	ldr	r3, [r3, #4]
 801aeee:	0b5b      	lsrs	r3, r3, #13
 801aef0:	2207      	movs	r2, #7
 801aef2:	4013      	ands	r3, r2
 801aef4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801aef6:	6a3b      	ldr	r3, [r7, #32]
 801aef8:	3301      	adds	r3, #1
 801aefa:	2280      	movs	r2, #128	@ 0x80
 801aefc:	0212      	lsls	r2, r2, #8
 801aefe:	409a      	lsls	r2, r3
 801af00:	0013      	movs	r3, r2
 801af02:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801af04:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801af06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801af08:	0018      	movs	r0, r3
 801af0a:	46bd      	mov	sp, r7
 801af0c:	b00e      	add	sp, #56	@ 0x38
 801af0e:	bdb0      	pop	{r4, r5, r7, pc}
 801af10:	40021000 	.word	0x40021000
 801af14:	003d0900 	.word	0x003d0900
 801af18:	00f42400 	.word	0x00f42400
 801af1c:	007a1200 	.word	0x007a1200
 801af20:	0802da74 	.word	0x0802da74

0801af24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801af24:	b580      	push	{r7, lr}
 801af26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801af28:	4b02      	ldr	r3, [pc, #8]	@ (801af34 <HAL_RCC_GetHCLKFreq+0x10>)
 801af2a:	681b      	ldr	r3, [r3, #0]
}
 801af2c:	0018      	movs	r0, r3
 801af2e:	46bd      	mov	sp, r7
 801af30:	bd80      	pop	{r7, pc}
 801af32:	46c0      	nop			@ (mov r8, r8)
 801af34:	200000e0 	.word	0x200000e0

0801af38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801af3c:	f7ff fff2 	bl	801af24 <HAL_RCC_GetHCLKFreq>
 801af40:	0001      	movs	r1, r0
 801af42:	4b06      	ldr	r3, [pc, #24]	@ (801af5c <HAL_RCC_GetPCLK1Freq+0x24>)
 801af44:	68db      	ldr	r3, [r3, #12]
 801af46:	0a1b      	lsrs	r3, r3, #8
 801af48:	2207      	movs	r2, #7
 801af4a:	4013      	ands	r3, r2
 801af4c:	4a04      	ldr	r2, [pc, #16]	@ (801af60 <HAL_RCC_GetPCLK1Freq+0x28>)
 801af4e:	5cd3      	ldrb	r3, [r2, r3]
 801af50:	40d9      	lsrs	r1, r3
 801af52:	000b      	movs	r3, r1
}
 801af54:	0018      	movs	r0, r3
 801af56:	46bd      	mov	sp, r7
 801af58:	bd80      	pop	{r7, pc}
 801af5a:	46c0      	nop			@ (mov r8, r8)
 801af5c:	40021000 	.word	0x40021000
 801af60:	0802da6c 	.word	0x0802da6c

0801af64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801af64:	b580      	push	{r7, lr}
 801af66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801af68:	f7ff ffdc 	bl	801af24 <HAL_RCC_GetHCLKFreq>
 801af6c:	0001      	movs	r1, r0
 801af6e:	4b06      	ldr	r3, [pc, #24]	@ (801af88 <HAL_RCC_GetPCLK2Freq+0x24>)
 801af70:	68db      	ldr	r3, [r3, #12]
 801af72:	0adb      	lsrs	r3, r3, #11
 801af74:	2207      	movs	r2, #7
 801af76:	4013      	ands	r3, r2
 801af78:	4a04      	ldr	r2, [pc, #16]	@ (801af8c <HAL_RCC_GetPCLK2Freq+0x28>)
 801af7a:	5cd3      	ldrb	r3, [r2, r3]
 801af7c:	40d9      	lsrs	r1, r3
 801af7e:	000b      	movs	r3, r1
}
 801af80:	0018      	movs	r0, r3
 801af82:	46bd      	mov	sp, r7
 801af84:	bd80      	pop	{r7, pc}
 801af86:	46c0      	nop			@ (mov r8, r8)
 801af88:	40021000 	.word	0x40021000
 801af8c:	0802da6c 	.word	0x0802da6c

0801af90 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b086      	sub	sp, #24
 801af94:	af00      	add	r7, sp, #0
 801af96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801af98:	2017      	movs	r0, #23
 801af9a:	183b      	adds	r3, r7, r0
 801af9c:	2200      	movs	r2, #0
 801af9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	2220      	movs	r2, #32
 801afa6:	4013      	ands	r3, r2
 801afa8:	d100      	bne.n	801afac <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801afaa:	e0c7      	b.n	801b13c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801afac:	4b9b      	ldr	r3, [pc, #620]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801afae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801afb0:	2380      	movs	r3, #128	@ 0x80
 801afb2:	055b      	lsls	r3, r3, #21
 801afb4:	4013      	ands	r3, r2
 801afb6:	d109      	bne.n	801afcc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801afb8:	4b98      	ldr	r3, [pc, #608]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801afba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801afbc:	4b97      	ldr	r3, [pc, #604]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801afbe:	2180      	movs	r1, #128	@ 0x80
 801afc0:	0549      	lsls	r1, r1, #21
 801afc2:	430a      	orrs	r2, r1
 801afc4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801afc6:	183b      	adds	r3, r7, r0
 801afc8:	2201      	movs	r2, #1
 801afca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801afcc:	4b94      	ldr	r3, [pc, #592]	@ (801b220 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801afce:	681a      	ldr	r2, [r3, #0]
 801afd0:	2380      	movs	r3, #128	@ 0x80
 801afd2:	005b      	lsls	r3, r3, #1
 801afd4:	4013      	ands	r3, r2
 801afd6:	d11a      	bne.n	801b00e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801afd8:	4b91      	ldr	r3, [pc, #580]	@ (801b220 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801afda:	681a      	ldr	r2, [r3, #0]
 801afdc:	4b90      	ldr	r3, [pc, #576]	@ (801b220 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801afde:	2180      	movs	r1, #128	@ 0x80
 801afe0:	0049      	lsls	r1, r1, #1
 801afe2:	430a      	orrs	r2, r1
 801afe4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801afe6:	f7f8 fd9f 	bl	8013b28 <HAL_GetTick>
 801afea:	0003      	movs	r3, r0
 801afec:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801afee:	e008      	b.n	801b002 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801aff0:	f7f8 fd9a 	bl	8013b28 <HAL_GetTick>
 801aff4:	0002      	movs	r2, r0
 801aff6:	693b      	ldr	r3, [r7, #16]
 801aff8:	1ad3      	subs	r3, r2, r3
 801affa:	2b64      	cmp	r3, #100	@ 0x64
 801affc:	d901      	bls.n	801b002 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801affe:	2303      	movs	r3, #3
 801b000:	e107      	b.n	801b212 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b002:	4b87      	ldr	r3, [pc, #540]	@ (801b220 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b004:	681a      	ldr	r2, [r3, #0]
 801b006:	2380      	movs	r3, #128	@ 0x80
 801b008:	005b      	lsls	r3, r3, #1
 801b00a:	4013      	ands	r3, r2
 801b00c:	d0f0      	beq.n	801aff0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801b00e:	4b83      	ldr	r3, [pc, #524]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b010:	681a      	ldr	r2, [r3, #0]
 801b012:	23c0      	movs	r3, #192	@ 0xc0
 801b014:	039b      	lsls	r3, r3, #14
 801b016:	4013      	ands	r3, r2
 801b018:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	685a      	ldr	r2, [r3, #4]
 801b01e:	23c0      	movs	r3, #192	@ 0xc0
 801b020:	039b      	lsls	r3, r3, #14
 801b022:	4013      	ands	r3, r2
 801b024:	68fa      	ldr	r2, [r7, #12]
 801b026:	429a      	cmp	r2, r3
 801b028:	d013      	beq.n	801b052 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	685a      	ldr	r2, [r3, #4]
 801b02e:	23c0      	movs	r3, #192	@ 0xc0
 801b030:	029b      	lsls	r3, r3, #10
 801b032:	401a      	ands	r2, r3
 801b034:	23c0      	movs	r3, #192	@ 0xc0
 801b036:	029b      	lsls	r3, r3, #10
 801b038:	429a      	cmp	r2, r3
 801b03a:	d10a      	bne.n	801b052 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801b03c:	4b77      	ldr	r3, [pc, #476]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b03e:	681a      	ldr	r2, [r3, #0]
 801b040:	2380      	movs	r3, #128	@ 0x80
 801b042:	029b      	lsls	r3, r3, #10
 801b044:	401a      	ands	r2, r3
 801b046:	2380      	movs	r3, #128	@ 0x80
 801b048:	029b      	lsls	r3, r3, #10
 801b04a:	429a      	cmp	r2, r3
 801b04c:	d101      	bne.n	801b052 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801b04e:	2301      	movs	r3, #1
 801b050:	e0df      	b.n	801b212 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801b052:	4b72      	ldr	r3, [pc, #456]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b054:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b056:	23c0      	movs	r3, #192	@ 0xc0
 801b058:	029b      	lsls	r3, r3, #10
 801b05a:	4013      	ands	r3, r2
 801b05c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801b05e:	68fb      	ldr	r3, [r7, #12]
 801b060:	2b00      	cmp	r3, #0
 801b062:	d03b      	beq.n	801b0dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	685a      	ldr	r2, [r3, #4]
 801b068:	23c0      	movs	r3, #192	@ 0xc0
 801b06a:	029b      	lsls	r3, r3, #10
 801b06c:	4013      	ands	r3, r2
 801b06e:	68fa      	ldr	r2, [r7, #12]
 801b070:	429a      	cmp	r2, r3
 801b072:	d033      	beq.n	801b0dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	2220      	movs	r2, #32
 801b07a:	4013      	ands	r3, r2
 801b07c:	d02e      	beq.n	801b0dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801b07e:	4b67      	ldr	r3, [pc, #412]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b082:	4a68      	ldr	r2, [pc, #416]	@ (801b224 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801b084:	4013      	ands	r3, r2
 801b086:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b088:	4b64      	ldr	r3, [pc, #400]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b08a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b08c:	4b63      	ldr	r3, [pc, #396]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b08e:	2180      	movs	r1, #128	@ 0x80
 801b090:	0309      	lsls	r1, r1, #12
 801b092:	430a      	orrs	r2, r1
 801b094:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b096:	4b61      	ldr	r3, [pc, #388]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b098:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b09a:	4b60      	ldr	r3, [pc, #384]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b09c:	4962      	ldr	r1, [pc, #392]	@ (801b228 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801b09e:	400a      	ands	r2, r1
 801b0a0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801b0a2:	4b5e      	ldr	r3, [pc, #376]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0a4:	68fa      	ldr	r2, [r7, #12]
 801b0a6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801b0a8:	68fa      	ldr	r2, [r7, #12]
 801b0aa:	2380      	movs	r3, #128	@ 0x80
 801b0ac:	005b      	lsls	r3, r3, #1
 801b0ae:	4013      	ands	r3, r2
 801b0b0:	d014      	beq.n	801b0dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b0b2:	f7f8 fd39 	bl	8013b28 <HAL_GetTick>
 801b0b6:	0003      	movs	r3, r0
 801b0b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b0ba:	e009      	b.n	801b0d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b0bc:	f7f8 fd34 	bl	8013b28 <HAL_GetTick>
 801b0c0:	0002      	movs	r2, r0
 801b0c2:	693b      	ldr	r3, [r7, #16]
 801b0c4:	1ad3      	subs	r3, r2, r3
 801b0c6:	4a59      	ldr	r2, [pc, #356]	@ (801b22c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801b0c8:	4293      	cmp	r3, r2
 801b0ca:	d901      	bls.n	801b0d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801b0cc:	2303      	movs	r3, #3
 801b0ce:	e0a0      	b.n	801b212 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b0d0:	4b52      	ldr	r3, [pc, #328]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b0d4:	2380      	movs	r3, #128	@ 0x80
 801b0d6:	009b      	lsls	r3, r3, #2
 801b0d8:	4013      	ands	r3, r2
 801b0da:	d0ef      	beq.n	801b0bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	2220      	movs	r2, #32
 801b0e2:	4013      	ands	r3, r2
 801b0e4:	d01f      	beq.n	801b126 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	685a      	ldr	r2, [r3, #4]
 801b0ea:	23c0      	movs	r3, #192	@ 0xc0
 801b0ec:	029b      	lsls	r3, r3, #10
 801b0ee:	401a      	ands	r2, r3
 801b0f0:	23c0      	movs	r3, #192	@ 0xc0
 801b0f2:	029b      	lsls	r3, r3, #10
 801b0f4:	429a      	cmp	r2, r3
 801b0f6:	d10c      	bne.n	801b112 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801b0f8:	4b48      	ldr	r3, [pc, #288]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	4a4c      	ldr	r2, [pc, #304]	@ (801b230 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801b0fe:	4013      	ands	r3, r2
 801b100:	0019      	movs	r1, r3
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	685a      	ldr	r2, [r3, #4]
 801b106:	23c0      	movs	r3, #192	@ 0xc0
 801b108:	039b      	lsls	r3, r3, #14
 801b10a:	401a      	ands	r2, r3
 801b10c:	4b43      	ldr	r3, [pc, #268]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b10e:	430a      	orrs	r2, r1
 801b110:	601a      	str	r2, [r3, #0]
 801b112:	4b42      	ldr	r3, [pc, #264]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b114:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	685a      	ldr	r2, [r3, #4]
 801b11a:	23c0      	movs	r3, #192	@ 0xc0
 801b11c:	029b      	lsls	r3, r3, #10
 801b11e:	401a      	ands	r2, r3
 801b120:	4b3e      	ldr	r3, [pc, #248]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b122:	430a      	orrs	r2, r1
 801b124:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b126:	2317      	movs	r3, #23
 801b128:	18fb      	adds	r3, r7, r3
 801b12a:	781b      	ldrb	r3, [r3, #0]
 801b12c:	2b01      	cmp	r3, #1
 801b12e:	d105      	bne.n	801b13c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b130:	4b3a      	ldr	r3, [pc, #232]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b134:	4b39      	ldr	r3, [pc, #228]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b136:	493f      	ldr	r1, [pc, #252]	@ (801b234 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801b138:	400a      	ands	r2, r1
 801b13a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	2201      	movs	r2, #1
 801b142:	4013      	ands	r3, r2
 801b144:	d009      	beq.n	801b15a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801b146:	4b35      	ldr	r3, [pc, #212]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b14a:	2203      	movs	r2, #3
 801b14c:	4393      	bics	r3, r2
 801b14e:	0019      	movs	r1, r3
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	689a      	ldr	r2, [r3, #8]
 801b154:	4b31      	ldr	r3, [pc, #196]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b156:	430a      	orrs	r2, r1
 801b158:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	2202      	movs	r2, #2
 801b160:	4013      	ands	r3, r2
 801b162:	d009      	beq.n	801b178 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801b164:	4b2d      	ldr	r3, [pc, #180]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b168:	220c      	movs	r2, #12
 801b16a:	4393      	bics	r3, r2
 801b16c:	0019      	movs	r1, r3
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	68da      	ldr	r2, [r3, #12]
 801b172:	4b2a      	ldr	r3, [pc, #168]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b174:	430a      	orrs	r2, r1
 801b176:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	2204      	movs	r2, #4
 801b17e:	4013      	ands	r3, r2
 801b180:	d009      	beq.n	801b196 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801b182:	4b26      	ldr	r3, [pc, #152]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b186:	4a2c      	ldr	r2, [pc, #176]	@ (801b238 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801b188:	4013      	ands	r3, r2
 801b18a:	0019      	movs	r1, r3
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	691a      	ldr	r2, [r3, #16]
 801b190:	4b22      	ldr	r3, [pc, #136]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b192:	430a      	orrs	r2, r1
 801b194:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	2208      	movs	r2, #8
 801b19c:	4013      	ands	r3, r2
 801b19e:	d009      	beq.n	801b1b4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801b1a0:	4b1e      	ldr	r3, [pc, #120]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b1a4:	4a25      	ldr	r2, [pc, #148]	@ (801b23c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801b1a6:	4013      	ands	r3, r2
 801b1a8:	0019      	movs	r1, r3
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	695a      	ldr	r2, [r3, #20]
 801b1ae:	4b1b      	ldr	r3, [pc, #108]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1b0:	430a      	orrs	r2, r1
 801b1b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	681a      	ldr	r2, [r3, #0]
 801b1b8:	2380      	movs	r3, #128	@ 0x80
 801b1ba:	005b      	lsls	r3, r3, #1
 801b1bc:	4013      	ands	r3, r2
 801b1be:	d009      	beq.n	801b1d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801b1c0:	4b16      	ldr	r3, [pc, #88]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b1c4:	4a17      	ldr	r2, [pc, #92]	@ (801b224 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801b1c6:	4013      	ands	r3, r2
 801b1c8:	0019      	movs	r1, r3
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	699a      	ldr	r2, [r3, #24]
 801b1ce:	4b13      	ldr	r3, [pc, #76]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1d0:	430a      	orrs	r2, r1
 801b1d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	2240      	movs	r2, #64	@ 0x40
 801b1da:	4013      	ands	r3, r2
 801b1dc:	d009      	beq.n	801b1f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801b1de:	4b0f      	ldr	r3, [pc, #60]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b1e2:	4a17      	ldr	r2, [pc, #92]	@ (801b240 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801b1e4:	4013      	ands	r3, r2
 801b1e6:	0019      	movs	r1, r3
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	6a1a      	ldr	r2, [r3, #32]
 801b1ec:	4b0b      	ldr	r3, [pc, #44]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1ee:	430a      	orrs	r2, r1
 801b1f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	2280      	movs	r2, #128	@ 0x80
 801b1f8:	4013      	ands	r3, r2
 801b1fa:	d009      	beq.n	801b210 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801b1fc:	4b07      	ldr	r3, [pc, #28]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b200:	4a10      	ldr	r2, [pc, #64]	@ (801b244 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801b202:	4013      	ands	r3, r2
 801b204:	0019      	movs	r1, r3
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	69da      	ldr	r2, [r3, #28]
 801b20a:	4b04      	ldr	r3, [pc, #16]	@ (801b21c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b20c:	430a      	orrs	r2, r1
 801b20e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801b210:	2300      	movs	r3, #0
}
 801b212:	0018      	movs	r0, r3
 801b214:	46bd      	mov	sp, r7
 801b216:	b006      	add	sp, #24
 801b218:	bd80      	pop	{r7, pc}
 801b21a:	46c0      	nop			@ (mov r8, r8)
 801b21c:	40021000 	.word	0x40021000
 801b220:	40007000 	.word	0x40007000
 801b224:	fffcffff 	.word	0xfffcffff
 801b228:	fff7ffff 	.word	0xfff7ffff
 801b22c:	00001388 	.word	0x00001388
 801b230:	ffcfffff 	.word	0xffcfffff
 801b234:	efffffff 	.word	0xefffffff
 801b238:	fffff3ff 	.word	0xfffff3ff
 801b23c:	ffffcfff 	.word	0xffffcfff
 801b240:	fbffffff 	.word	0xfbffffff
 801b244:	fff3ffff 	.word	0xfff3ffff

0801b248 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801b248:	b5b0      	push	{r4, r5, r7, lr}
 801b24a:	b084      	sub	sp, #16
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801b250:	230f      	movs	r3, #15
 801b252:	18fb      	adds	r3, r7, r3
 801b254:	2201      	movs	r2, #1
 801b256:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d101      	bne.n	801b262 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801b25e:	2301      	movs	r3, #1
 801b260:	e088      	b.n	801b374 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	2221      	movs	r2, #33	@ 0x21
 801b266:	5c9b      	ldrb	r3, [r3, r2]
 801b268:	b2db      	uxtb	r3, r3
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d107      	bne.n	801b27e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	2220      	movs	r2, #32
 801b272:	2100      	movs	r1, #0
 801b274:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	0018      	movs	r0, r3
 801b27a:	f7f2 fb61 	bl	800d940 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	2221      	movs	r2, #33	@ 0x21
 801b282:	2102      	movs	r1, #2
 801b284:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	68db      	ldr	r3, [r3, #12]
 801b28c:	2210      	movs	r2, #16
 801b28e:	4013      	ands	r3, r2
 801b290:	2b10      	cmp	r3, #16
 801b292:	d05f      	beq.n	801b354 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	681b      	ldr	r3, [r3, #0]
 801b298:	22ca      	movs	r2, #202	@ 0xca
 801b29a:	625a      	str	r2, [r3, #36]	@ 0x24
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	2253      	movs	r2, #83	@ 0x53
 801b2a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801b2a4:	250f      	movs	r5, #15
 801b2a6:	197c      	adds	r4, r7, r5
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	0018      	movs	r0, r3
 801b2ac:	f000 fa7c 	bl	801b7a8 <RTC_EnterInitMode>
 801b2b0:	0003      	movs	r3, r0
 801b2b2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801b2b4:	0028      	movs	r0, r5
 801b2b6:	183b      	adds	r3, r7, r0
 801b2b8:	781b      	ldrb	r3, [r3, #0]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d12c      	bne.n	801b318 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	689a      	ldr	r2, [r3, #8]
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	492c      	ldr	r1, [pc, #176]	@ (801b37c <HAL_RTC_Init+0x134>)
 801b2ca:	400a      	ands	r2, r1
 801b2cc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	6899      	ldr	r1, [r3, #8]
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	685a      	ldr	r2, [r3, #4]
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	691b      	ldr	r3, [r3, #16]
 801b2dc:	431a      	orrs	r2, r3
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	699b      	ldr	r3, [r3, #24]
 801b2e2:	431a      	orrs	r2, r3
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	430a      	orrs	r2, r1
 801b2ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	687a      	ldr	r2, [r7, #4]
 801b2f2:	68d2      	ldr	r2, [r2, #12]
 801b2f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	6919      	ldr	r1, [r3, #16]
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	689b      	ldr	r3, [r3, #8]
 801b300:	041a      	lsls	r2, r3, #16
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	430a      	orrs	r2, r1
 801b308:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801b30a:	183c      	adds	r4, r7, r0
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	0018      	movs	r0, r3
 801b310:	f000 fa8e 	bl	801b830 <RTC_ExitInitMode>
 801b314:	0003      	movs	r3, r0
 801b316:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801b318:	230f      	movs	r3, #15
 801b31a:	18fb      	adds	r3, r7, r3
 801b31c:	781b      	ldrb	r3, [r3, #0]
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d113      	bne.n	801b34a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	2103      	movs	r1, #3
 801b32e:	438a      	bics	r2, r1
 801b330:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	69da      	ldr	r2, [r3, #28]
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	695b      	ldr	r3, [r3, #20]
 801b340:	431a      	orrs	r2, r3
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	430a      	orrs	r2, r1
 801b348:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	22ff      	movs	r2, #255	@ 0xff
 801b350:	625a      	str	r2, [r3, #36]	@ 0x24
 801b352:	e003      	b.n	801b35c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801b354:	230f      	movs	r3, #15
 801b356:	18fb      	adds	r3, r7, r3
 801b358:	2200      	movs	r2, #0
 801b35a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801b35c:	230f      	movs	r3, #15
 801b35e:	18fb      	adds	r3, r7, r3
 801b360:	781b      	ldrb	r3, [r3, #0]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d103      	bne.n	801b36e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	2221      	movs	r2, #33	@ 0x21
 801b36a:	2101      	movs	r1, #1
 801b36c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801b36e:	230f      	movs	r3, #15
 801b370:	18fb      	adds	r3, r7, r3
 801b372:	781b      	ldrb	r3, [r3, #0]
}
 801b374:	0018      	movs	r0, r3
 801b376:	46bd      	mov	sp, r7
 801b378:	b004      	add	sp, #16
 801b37a:	bdb0      	pop	{r4, r5, r7, pc}
 801b37c:	ff8fffbf 	.word	0xff8fffbf

0801b380 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801b380:	b5b0      	push	{r4, r5, r7, lr}
 801b382:	b086      	sub	sp, #24
 801b384:	af00      	add	r7, sp, #0
 801b386:	60f8      	str	r0, [r7, #12]
 801b388:	60b9      	str	r1, [r7, #8]
 801b38a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801b38c:	2300      	movs	r3, #0
 801b38e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	2220      	movs	r2, #32
 801b394:	5c9b      	ldrb	r3, [r3, r2]
 801b396:	2b01      	cmp	r3, #1
 801b398:	d101      	bne.n	801b39e <HAL_RTC_SetTime+0x1e>
 801b39a:	2302      	movs	r3, #2
 801b39c:	e092      	b.n	801b4c4 <HAL_RTC_SetTime+0x144>
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	2220      	movs	r2, #32
 801b3a2:	2101      	movs	r1, #1
 801b3a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b3a6:	68fb      	ldr	r3, [r7, #12]
 801b3a8:	2221      	movs	r2, #33	@ 0x21
 801b3aa:	2102      	movs	r1, #2
 801b3ac:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d125      	bne.n	801b400 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	689b      	ldr	r3, [r3, #8]
 801b3ba:	2240      	movs	r2, #64	@ 0x40
 801b3bc:	4013      	ands	r3, r2
 801b3be:	d102      	bne.n	801b3c6 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801b3c0:	68bb      	ldr	r3, [r7, #8]
 801b3c2:	2200      	movs	r2, #0
 801b3c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b3c6:	68bb      	ldr	r3, [r7, #8]
 801b3c8:	781b      	ldrb	r3, [r3, #0]
 801b3ca:	0018      	movs	r0, r3
 801b3cc:	f000 fa5a 	bl	801b884 <RTC_ByteToBcd2>
 801b3d0:	0003      	movs	r3, r0
 801b3d2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801b3d4:	68bb      	ldr	r3, [r7, #8]
 801b3d6:	785b      	ldrb	r3, [r3, #1]
 801b3d8:	0018      	movs	r0, r3
 801b3da:	f000 fa53 	bl	801b884 <RTC_ByteToBcd2>
 801b3de:	0003      	movs	r3, r0
 801b3e0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b3e2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801b3e4:	68bb      	ldr	r3, [r7, #8]
 801b3e6:	789b      	ldrb	r3, [r3, #2]
 801b3e8:	0018      	movs	r0, r3
 801b3ea:	f000 fa4b 	bl	801b884 <RTC_ByteToBcd2>
 801b3ee:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801b3f0:	0022      	movs	r2, r4
 801b3f2:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801b3f4:	68bb      	ldr	r3, [r7, #8]
 801b3f6:	78db      	ldrb	r3, [r3, #3]
 801b3f8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b3fa:	4313      	orrs	r3, r2
 801b3fc:	617b      	str	r3, [r7, #20]
 801b3fe:	e017      	b.n	801b430 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	689b      	ldr	r3, [r3, #8]
 801b406:	2240      	movs	r2, #64	@ 0x40
 801b408:	4013      	ands	r3, r2
 801b40a:	d102      	bne.n	801b412 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801b40c:	68bb      	ldr	r3, [r7, #8]
 801b40e:	2200      	movs	r2, #0
 801b410:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b412:	68bb      	ldr	r3, [r7, #8]
 801b414:	781b      	ldrb	r3, [r3, #0]
 801b416:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801b418:	68bb      	ldr	r3, [r7, #8]
 801b41a:	785b      	ldrb	r3, [r3, #1]
 801b41c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b41e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801b420:	68ba      	ldr	r2, [r7, #8]
 801b422:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801b424:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801b426:	68bb      	ldr	r3, [r7, #8]
 801b428:	78db      	ldrb	r3, [r3, #3]
 801b42a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b42c:	4313      	orrs	r3, r2
 801b42e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b430:	68fb      	ldr	r3, [r7, #12]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	22ca      	movs	r2, #202	@ 0xca
 801b436:	625a      	str	r2, [r3, #36]	@ 0x24
 801b438:	68fb      	ldr	r3, [r7, #12]
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	2253      	movs	r2, #83	@ 0x53
 801b43e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801b440:	2513      	movs	r5, #19
 801b442:	197c      	adds	r4, r7, r5
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	0018      	movs	r0, r3
 801b448:	f000 f9ae 	bl	801b7a8 <RTC_EnterInitMode>
 801b44c:	0003      	movs	r3, r0
 801b44e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801b450:	0028      	movs	r0, r5
 801b452:	183b      	adds	r3, r7, r0
 801b454:	781b      	ldrb	r3, [r3, #0]
 801b456:	2b00      	cmp	r3, #0
 801b458:	d120      	bne.n	801b49c <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	697a      	ldr	r2, [r7, #20]
 801b460:	491a      	ldr	r1, [pc, #104]	@ (801b4cc <HAL_RTC_SetTime+0x14c>)
 801b462:	400a      	ands	r2, r1
 801b464:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801b466:	68fb      	ldr	r3, [r7, #12]
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	689a      	ldr	r2, [r3, #8]
 801b46c:	68fb      	ldr	r3, [r7, #12]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	4917      	ldr	r1, [pc, #92]	@ (801b4d0 <HAL_RTC_SetTime+0x150>)
 801b472:	400a      	ands	r2, r1
 801b474:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	6899      	ldr	r1, [r3, #8]
 801b47c:	68bb      	ldr	r3, [r7, #8]
 801b47e:	68da      	ldr	r2, [r3, #12]
 801b480:	68bb      	ldr	r3, [r7, #8]
 801b482:	691b      	ldr	r3, [r3, #16]
 801b484:	431a      	orrs	r2, r3
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	430a      	orrs	r2, r1
 801b48c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801b48e:	183c      	adds	r4, r7, r0
 801b490:	68fb      	ldr	r3, [r7, #12]
 801b492:	0018      	movs	r0, r3
 801b494:	f000 f9cc 	bl	801b830 <RTC_ExitInitMode>
 801b498:	0003      	movs	r3, r0
 801b49a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801b49c:	2313      	movs	r3, #19
 801b49e:	18fb      	adds	r3, r7, r3
 801b4a0:	781b      	ldrb	r3, [r3, #0]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d103      	bne.n	801b4ae <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	2221      	movs	r2, #33	@ 0x21
 801b4aa:	2101      	movs	r1, #1
 801b4ac:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	22ff      	movs	r2, #255	@ 0xff
 801b4b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	2220      	movs	r2, #32
 801b4ba:	2100      	movs	r1, #0
 801b4bc:	5499      	strb	r1, [r3, r2]

  return status;
 801b4be:	2313      	movs	r3, #19
 801b4c0:	18fb      	adds	r3, r7, r3
 801b4c2:	781b      	ldrb	r3, [r3, #0]
}
 801b4c4:	0018      	movs	r0, r3
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	b006      	add	sp, #24
 801b4ca:	bdb0      	pop	{r4, r5, r7, pc}
 801b4cc:	007f7f7f 	.word	0x007f7f7f
 801b4d0:	fffbffff 	.word	0xfffbffff

0801b4d4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801b4d4:	b580      	push	{r7, lr}
 801b4d6:	b086      	sub	sp, #24
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	60f8      	str	r0, [r7, #12]
 801b4dc:	60b9      	str	r1, [r7, #8]
 801b4de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801b4e4:	68fb      	ldr	r3, [r7, #12]
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b4ea:	68bb      	ldr	r3, [r7, #8]
 801b4ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	691b      	ldr	r3, [r3, #16]
 801b4f4:	045b      	lsls	r3, r3, #17
 801b4f6:	0c5a      	lsrs	r2, r3, #17
 801b4f8:	68bb      	ldr	r3, [r7, #8]
 801b4fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	4a22      	ldr	r2, [pc, #136]	@ (801b58c <HAL_RTC_GetTime+0xb8>)
 801b504:	4013      	ands	r3, r2
 801b506:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801b508:	697b      	ldr	r3, [r7, #20]
 801b50a:	0c1b      	lsrs	r3, r3, #16
 801b50c:	b2db      	uxtb	r3, r3
 801b50e:	223f      	movs	r2, #63	@ 0x3f
 801b510:	4013      	ands	r3, r2
 801b512:	b2da      	uxtb	r2, r3
 801b514:	68bb      	ldr	r3, [r7, #8]
 801b516:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801b518:	697b      	ldr	r3, [r7, #20]
 801b51a:	0a1b      	lsrs	r3, r3, #8
 801b51c:	b2db      	uxtb	r3, r3
 801b51e:	227f      	movs	r2, #127	@ 0x7f
 801b520:	4013      	ands	r3, r2
 801b522:	b2da      	uxtb	r2, r3
 801b524:	68bb      	ldr	r3, [r7, #8]
 801b526:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801b528:	697b      	ldr	r3, [r7, #20]
 801b52a:	b2db      	uxtb	r3, r3
 801b52c:	227f      	movs	r2, #127	@ 0x7f
 801b52e:	4013      	ands	r3, r2
 801b530:	b2da      	uxtb	r2, r3
 801b532:	68bb      	ldr	r3, [r7, #8]
 801b534:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801b536:	697b      	ldr	r3, [r7, #20]
 801b538:	0d9b      	lsrs	r3, r3, #22
 801b53a:	b2db      	uxtb	r3, r3
 801b53c:	2201      	movs	r2, #1
 801b53e:	4013      	ands	r3, r2
 801b540:	b2da      	uxtb	r2, r3
 801b542:	68bb      	ldr	r3, [r7, #8]
 801b544:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d11a      	bne.n	801b582 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	781b      	ldrb	r3, [r3, #0]
 801b550:	0018      	movs	r0, r3
 801b552:	f000 f9b8 	bl	801b8c6 <RTC_Bcd2ToByte>
 801b556:	0003      	movs	r3, r0
 801b558:	001a      	movs	r2, r3
 801b55a:	68bb      	ldr	r3, [r7, #8]
 801b55c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801b55e:	68bb      	ldr	r3, [r7, #8]
 801b560:	785b      	ldrb	r3, [r3, #1]
 801b562:	0018      	movs	r0, r3
 801b564:	f000 f9af 	bl	801b8c6 <RTC_Bcd2ToByte>
 801b568:	0003      	movs	r3, r0
 801b56a:	001a      	movs	r2, r3
 801b56c:	68bb      	ldr	r3, [r7, #8]
 801b56e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801b570:	68bb      	ldr	r3, [r7, #8]
 801b572:	789b      	ldrb	r3, [r3, #2]
 801b574:	0018      	movs	r0, r3
 801b576:	f000 f9a6 	bl	801b8c6 <RTC_Bcd2ToByte>
 801b57a:	0003      	movs	r3, r0
 801b57c:	001a      	movs	r2, r3
 801b57e:	68bb      	ldr	r3, [r7, #8]
 801b580:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801b582:	2300      	movs	r3, #0
}
 801b584:	0018      	movs	r0, r3
 801b586:	46bd      	mov	sp, r7
 801b588:	b006      	add	sp, #24
 801b58a:	bd80      	pop	{r7, pc}
 801b58c:	007f7f7f 	.word	0x007f7f7f

0801b590 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b590:	b5b0      	push	{r4, r5, r7, lr}
 801b592:	b086      	sub	sp, #24
 801b594:	af00      	add	r7, sp, #0
 801b596:	60f8      	str	r0, [r7, #12]
 801b598:	60b9      	str	r1, [r7, #8]
 801b59a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b59c:	2300      	movs	r3, #0
 801b59e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	2220      	movs	r2, #32
 801b5a4:	5c9b      	ldrb	r3, [r3, r2]
 801b5a6:	2b01      	cmp	r3, #1
 801b5a8:	d101      	bne.n	801b5ae <HAL_RTC_SetDate+0x1e>
 801b5aa:	2302      	movs	r3, #2
 801b5ac:	e07e      	b.n	801b6ac <HAL_RTC_SetDate+0x11c>
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	2220      	movs	r2, #32
 801b5b2:	2101      	movs	r1, #1
 801b5b4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b5b6:	68fb      	ldr	r3, [r7, #12]
 801b5b8:	2221      	movs	r2, #33	@ 0x21
 801b5ba:	2102      	movs	r1, #2
 801b5bc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d10e      	bne.n	801b5e2 <HAL_RTC_SetDate+0x52>
 801b5c4:	68bb      	ldr	r3, [r7, #8]
 801b5c6:	785b      	ldrb	r3, [r3, #1]
 801b5c8:	001a      	movs	r2, r3
 801b5ca:	2310      	movs	r3, #16
 801b5cc:	4013      	ands	r3, r2
 801b5ce:	d008      	beq.n	801b5e2 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801b5d0:	68bb      	ldr	r3, [r7, #8]
 801b5d2:	785b      	ldrb	r3, [r3, #1]
 801b5d4:	2210      	movs	r2, #16
 801b5d6:	4393      	bics	r3, r2
 801b5d8:	b2db      	uxtb	r3, r3
 801b5da:	330a      	adds	r3, #10
 801b5dc:	b2da      	uxtb	r2, r3
 801b5de:	68bb      	ldr	r3, [r7, #8]
 801b5e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d11c      	bne.n	801b622 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b5e8:	68bb      	ldr	r3, [r7, #8]
 801b5ea:	78db      	ldrb	r3, [r3, #3]
 801b5ec:	0018      	movs	r0, r3
 801b5ee:	f000 f949 	bl	801b884 <RTC_ByteToBcd2>
 801b5f2:	0003      	movs	r3, r0
 801b5f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801b5f6:	68bb      	ldr	r3, [r7, #8]
 801b5f8:	785b      	ldrb	r3, [r3, #1]
 801b5fa:	0018      	movs	r0, r3
 801b5fc:	f000 f942 	bl	801b884 <RTC_ByteToBcd2>
 801b600:	0003      	movs	r3, r0
 801b602:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b604:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801b606:	68bb      	ldr	r3, [r7, #8]
 801b608:	789b      	ldrb	r3, [r3, #2]
 801b60a:	0018      	movs	r0, r3
 801b60c:	f000 f93a 	bl	801b884 <RTC_ByteToBcd2>
 801b610:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801b612:	0022      	movs	r2, r4
 801b614:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801b616:	68bb      	ldr	r3, [r7, #8]
 801b618:	781b      	ldrb	r3, [r3, #0]
 801b61a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b61c:	4313      	orrs	r3, r2
 801b61e:	617b      	str	r3, [r7, #20]
 801b620:	e00e      	b.n	801b640 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b622:	68bb      	ldr	r3, [r7, #8]
 801b624:	78db      	ldrb	r3, [r3, #3]
 801b626:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801b628:	68bb      	ldr	r3, [r7, #8]
 801b62a:	785b      	ldrb	r3, [r3, #1]
 801b62c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b62e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801b630:	68ba      	ldr	r2, [r7, #8]
 801b632:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801b634:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801b636:	68bb      	ldr	r3, [r7, #8]
 801b638:	781b      	ldrb	r3, [r3, #0]
 801b63a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b63c:	4313      	orrs	r3, r2
 801b63e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	22ca      	movs	r2, #202	@ 0xca
 801b646:	625a      	str	r2, [r3, #36]	@ 0x24
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	2253      	movs	r2, #83	@ 0x53
 801b64e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801b650:	2513      	movs	r5, #19
 801b652:	197c      	adds	r4, r7, r5
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	0018      	movs	r0, r3
 801b658:	f000 f8a6 	bl	801b7a8 <RTC_EnterInitMode>
 801b65c:	0003      	movs	r3, r0
 801b65e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801b660:	0028      	movs	r0, r5
 801b662:	183b      	adds	r3, r7, r0
 801b664:	781b      	ldrb	r3, [r3, #0]
 801b666:	2b00      	cmp	r3, #0
 801b668:	d10c      	bne.n	801b684 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801b66a:	68fb      	ldr	r3, [r7, #12]
 801b66c:	681b      	ldr	r3, [r3, #0]
 801b66e:	697a      	ldr	r2, [r7, #20]
 801b670:	4910      	ldr	r1, [pc, #64]	@ (801b6b4 <HAL_RTC_SetDate+0x124>)
 801b672:	400a      	ands	r2, r1
 801b674:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801b676:	183c      	adds	r4, r7, r0
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	0018      	movs	r0, r3
 801b67c:	f000 f8d8 	bl	801b830 <RTC_ExitInitMode>
 801b680:	0003      	movs	r3, r0
 801b682:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801b684:	2313      	movs	r3, #19
 801b686:	18fb      	adds	r3, r7, r3
 801b688:	781b      	ldrb	r3, [r3, #0]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d103      	bne.n	801b696 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	2221      	movs	r2, #33	@ 0x21
 801b692:	2101      	movs	r1, #1
 801b694:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	22ff      	movs	r2, #255	@ 0xff
 801b69c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	2220      	movs	r2, #32
 801b6a2:	2100      	movs	r1, #0
 801b6a4:	5499      	strb	r1, [r3, r2]

  return status;
 801b6a6:	2313      	movs	r3, #19
 801b6a8:	18fb      	adds	r3, r7, r3
 801b6aa:	781b      	ldrb	r3, [r3, #0]
}
 801b6ac:	0018      	movs	r0, r3
 801b6ae:	46bd      	mov	sp, r7
 801b6b0:	b006      	add	sp, #24
 801b6b2:	bdb0      	pop	{r4, r5, r7, pc}
 801b6b4:	00ffff3f 	.word	0x00ffff3f

0801b6b8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b6b8:	b580      	push	{r7, lr}
 801b6ba:	b086      	sub	sp, #24
 801b6bc:	af00      	add	r7, sp, #0
 801b6be:	60f8      	str	r0, [r7, #12]
 801b6c0:	60b9      	str	r1, [r7, #8]
 801b6c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	685b      	ldr	r3, [r3, #4]
 801b6ce:	4a21      	ldr	r2, [pc, #132]	@ (801b754 <HAL_RTC_GetDate+0x9c>)
 801b6d0:	4013      	ands	r3, r2
 801b6d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801b6d4:	697b      	ldr	r3, [r7, #20]
 801b6d6:	0c1b      	lsrs	r3, r3, #16
 801b6d8:	b2da      	uxtb	r2, r3
 801b6da:	68bb      	ldr	r3, [r7, #8]
 801b6dc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801b6de:	697b      	ldr	r3, [r7, #20]
 801b6e0:	0a1b      	lsrs	r3, r3, #8
 801b6e2:	b2db      	uxtb	r3, r3
 801b6e4:	221f      	movs	r2, #31
 801b6e6:	4013      	ands	r3, r2
 801b6e8:	b2da      	uxtb	r2, r3
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801b6ee:	697b      	ldr	r3, [r7, #20]
 801b6f0:	b2db      	uxtb	r3, r3
 801b6f2:	223f      	movs	r2, #63	@ 0x3f
 801b6f4:	4013      	ands	r3, r2
 801b6f6:	b2da      	uxtb	r2, r3
 801b6f8:	68bb      	ldr	r3, [r7, #8]
 801b6fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801b6fc:	697b      	ldr	r3, [r7, #20]
 801b6fe:	0b5b      	lsrs	r3, r3, #13
 801b700:	b2db      	uxtb	r3, r3
 801b702:	2207      	movs	r2, #7
 801b704:	4013      	ands	r3, r2
 801b706:	b2da      	uxtb	r2, r3
 801b708:	68bb      	ldr	r3, [r7, #8]
 801b70a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	2b00      	cmp	r3, #0
 801b710:	d11a      	bne.n	801b748 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801b712:	68bb      	ldr	r3, [r7, #8]
 801b714:	78db      	ldrb	r3, [r3, #3]
 801b716:	0018      	movs	r0, r3
 801b718:	f000 f8d5 	bl	801b8c6 <RTC_Bcd2ToByte>
 801b71c:	0003      	movs	r3, r0
 801b71e:	001a      	movs	r2, r3
 801b720:	68bb      	ldr	r3, [r7, #8]
 801b722:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801b724:	68bb      	ldr	r3, [r7, #8]
 801b726:	785b      	ldrb	r3, [r3, #1]
 801b728:	0018      	movs	r0, r3
 801b72a:	f000 f8cc 	bl	801b8c6 <RTC_Bcd2ToByte>
 801b72e:	0003      	movs	r3, r0
 801b730:	001a      	movs	r2, r3
 801b732:	68bb      	ldr	r3, [r7, #8]
 801b734:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801b736:	68bb      	ldr	r3, [r7, #8]
 801b738:	789b      	ldrb	r3, [r3, #2]
 801b73a:	0018      	movs	r0, r3
 801b73c:	f000 f8c3 	bl	801b8c6 <RTC_Bcd2ToByte>
 801b740:	0003      	movs	r3, r0
 801b742:	001a      	movs	r2, r3
 801b744:	68bb      	ldr	r3, [r7, #8]
 801b746:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801b748:	2300      	movs	r3, #0
}
 801b74a:	0018      	movs	r0, r3
 801b74c:	46bd      	mov	sp, r7
 801b74e:	b006      	add	sp, #24
 801b750:	bd80      	pop	{r7, pc}
 801b752:	46c0      	nop			@ (mov r8, r8)
 801b754:	00ffff3f 	.word	0x00ffff3f

0801b758 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b084      	sub	sp, #16
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b760:	2300      	movs	r3, #0
 801b762:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	4a0e      	ldr	r2, [pc, #56]	@ (801b7a4 <HAL_RTC_WaitForSynchro+0x4c>)
 801b76a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b76c:	f7f8 f9dc 	bl	8013b28 <HAL_GetTick>
 801b770:	0003      	movs	r3, r0
 801b772:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801b774:	e00a      	b.n	801b78c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b776:	f7f8 f9d7 	bl	8013b28 <HAL_GetTick>
 801b77a:	0002      	movs	r2, r0
 801b77c:	68fb      	ldr	r3, [r7, #12]
 801b77e:	1ad2      	subs	r2, r2, r3
 801b780:	23fa      	movs	r3, #250	@ 0xfa
 801b782:	009b      	lsls	r3, r3, #2
 801b784:	429a      	cmp	r2, r3
 801b786:	d901      	bls.n	801b78c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801b788:	2303      	movs	r3, #3
 801b78a:	e006      	b.n	801b79a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	68db      	ldr	r3, [r3, #12]
 801b792:	2220      	movs	r2, #32
 801b794:	4013      	ands	r3, r2
 801b796:	d0ee      	beq.n	801b776 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801b798:	2300      	movs	r3, #0
}
 801b79a:	0018      	movs	r0, r3
 801b79c:	46bd      	mov	sp, r7
 801b79e:	b004      	add	sp, #16
 801b7a0:	bd80      	pop	{r7, pc}
 801b7a2:	46c0      	nop			@ (mov r8, r8)
 801b7a4:	0001ff5f 	.word	0x0001ff5f

0801b7a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b084      	sub	sp, #16
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801b7b4:	230f      	movs	r3, #15
 801b7b6:	18fb      	adds	r3, r7, r3
 801b7b8:	2200      	movs	r2, #0
 801b7ba:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	68db      	ldr	r3, [r3, #12]
 801b7c2:	2240      	movs	r2, #64	@ 0x40
 801b7c4:	4013      	ands	r3, r2
 801b7c6:	d12c      	bne.n	801b822 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	681b      	ldr	r3, [r3, #0]
 801b7cc:	68da      	ldr	r2, [r3, #12]
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	2180      	movs	r1, #128	@ 0x80
 801b7d4:	430a      	orrs	r2, r1
 801b7d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b7d8:	f7f8 f9a6 	bl	8013b28 <HAL_GetTick>
 801b7dc:	0003      	movs	r3, r0
 801b7de:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801b7e0:	e014      	b.n	801b80c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b7e2:	f7f8 f9a1 	bl	8013b28 <HAL_GetTick>
 801b7e6:	0002      	movs	r2, r0
 801b7e8:	68bb      	ldr	r3, [r7, #8]
 801b7ea:	1ad2      	subs	r2, r2, r3
 801b7ec:	200f      	movs	r0, #15
 801b7ee:	183b      	adds	r3, r7, r0
 801b7f0:	1839      	adds	r1, r7, r0
 801b7f2:	7809      	ldrb	r1, [r1, #0]
 801b7f4:	7019      	strb	r1, [r3, #0]
 801b7f6:	23fa      	movs	r3, #250	@ 0xfa
 801b7f8:	009b      	lsls	r3, r3, #2
 801b7fa:	429a      	cmp	r2, r3
 801b7fc:	d906      	bls.n	801b80c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	2221      	movs	r2, #33	@ 0x21
 801b802:	2104      	movs	r1, #4
 801b804:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801b806:	183b      	adds	r3, r7, r0
 801b808:	2201      	movs	r2, #1
 801b80a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	681b      	ldr	r3, [r3, #0]
 801b810:	68db      	ldr	r3, [r3, #12]
 801b812:	2240      	movs	r2, #64	@ 0x40
 801b814:	4013      	ands	r3, r2
 801b816:	d104      	bne.n	801b822 <RTC_EnterInitMode+0x7a>
 801b818:	230f      	movs	r3, #15
 801b81a:	18fb      	adds	r3, r7, r3
 801b81c:	781b      	ldrb	r3, [r3, #0]
 801b81e:	2b01      	cmp	r3, #1
 801b820:	d1df      	bne.n	801b7e2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801b822:	230f      	movs	r3, #15
 801b824:	18fb      	adds	r3, r7, r3
 801b826:	781b      	ldrb	r3, [r3, #0]
}
 801b828:	0018      	movs	r0, r3
 801b82a:	46bd      	mov	sp, r7
 801b82c:	b004      	add	sp, #16
 801b82e:	bd80      	pop	{r7, pc}

0801b830 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801b830:	b590      	push	{r4, r7, lr}
 801b832:	b085      	sub	sp, #20
 801b834:	af00      	add	r7, sp, #0
 801b836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b838:	240f      	movs	r4, #15
 801b83a:	193b      	adds	r3, r7, r4
 801b83c:	2200      	movs	r2, #0
 801b83e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	68da      	ldr	r2, [r3, #12]
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	2180      	movs	r1, #128	@ 0x80
 801b84c:	438a      	bics	r2, r1
 801b84e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	689b      	ldr	r3, [r3, #8]
 801b856:	2220      	movs	r2, #32
 801b858:	4013      	ands	r3, r2
 801b85a:	d10c      	bne.n	801b876 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	0018      	movs	r0, r3
 801b860:	f7ff ff7a 	bl	801b758 <HAL_RTC_WaitForSynchro>
 801b864:	1e03      	subs	r3, r0, #0
 801b866:	d006      	beq.n	801b876 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	2221      	movs	r2, #33	@ 0x21
 801b86c:	2104      	movs	r1, #4
 801b86e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801b870:	193b      	adds	r3, r7, r4
 801b872:	2201      	movs	r2, #1
 801b874:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801b876:	230f      	movs	r3, #15
 801b878:	18fb      	adds	r3, r7, r3
 801b87a:	781b      	ldrb	r3, [r3, #0]
}
 801b87c:	0018      	movs	r0, r3
 801b87e:	46bd      	mov	sp, r7
 801b880:	b005      	add	sp, #20
 801b882:	bd90      	pop	{r4, r7, pc}

0801b884 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801b884:	b580      	push	{r7, lr}
 801b886:	b084      	sub	sp, #16
 801b888:	af00      	add	r7, sp, #0
 801b88a:	0002      	movs	r2, r0
 801b88c:	1dfb      	adds	r3, r7, #7
 801b88e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801b890:	2300      	movs	r3, #0
 801b892:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801b894:	e007      	b.n	801b8a6 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	3301      	adds	r3, #1
 801b89a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801b89c:	1dfb      	adds	r3, r7, #7
 801b89e:	1dfa      	adds	r2, r7, #7
 801b8a0:	7812      	ldrb	r2, [r2, #0]
 801b8a2:	3a0a      	subs	r2, #10
 801b8a4:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801b8a6:	1dfb      	adds	r3, r7, #7
 801b8a8:	781b      	ldrb	r3, [r3, #0]
 801b8aa:	2b09      	cmp	r3, #9
 801b8ac:	d8f3      	bhi.n	801b896 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	b2db      	uxtb	r3, r3
 801b8b2:	011b      	lsls	r3, r3, #4
 801b8b4:	b2da      	uxtb	r2, r3
 801b8b6:	1dfb      	adds	r3, r7, #7
 801b8b8:	781b      	ldrb	r3, [r3, #0]
 801b8ba:	4313      	orrs	r3, r2
 801b8bc:	b2db      	uxtb	r3, r3
}
 801b8be:	0018      	movs	r0, r3
 801b8c0:	46bd      	mov	sp, r7
 801b8c2:	b004      	add	sp, #16
 801b8c4:	bd80      	pop	{r7, pc}

0801b8c6 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801b8c6:	b580      	push	{r7, lr}
 801b8c8:	b084      	sub	sp, #16
 801b8ca:	af00      	add	r7, sp, #0
 801b8cc:	0002      	movs	r2, r0
 801b8ce:	1dfb      	adds	r3, r7, #7
 801b8d0:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801b8d6:	1dfb      	adds	r3, r7, #7
 801b8d8:	781b      	ldrb	r3, [r3, #0]
 801b8da:	091b      	lsrs	r3, r3, #4
 801b8dc:	b2db      	uxtb	r3, r3
 801b8de:	001a      	movs	r2, r3
 801b8e0:	0013      	movs	r3, r2
 801b8e2:	009b      	lsls	r3, r3, #2
 801b8e4:	189b      	adds	r3, r3, r2
 801b8e6:	005b      	lsls	r3, r3, #1
 801b8e8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	b2da      	uxtb	r2, r3
 801b8ee:	1dfb      	adds	r3, r7, #7
 801b8f0:	781b      	ldrb	r3, [r3, #0]
 801b8f2:	210f      	movs	r1, #15
 801b8f4:	400b      	ands	r3, r1
 801b8f6:	b2db      	uxtb	r3, r3
 801b8f8:	18d3      	adds	r3, r2, r3
 801b8fa:	b2db      	uxtb	r3, r3
}
 801b8fc:	0018      	movs	r0, r3
 801b8fe:	46bd      	mov	sp, r7
 801b900:	b004      	add	sp, #16
 801b902:	bd80      	pop	{r7, pc}

0801b904 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801b904:	b580      	push	{r7, lr}
 801b906:	b086      	sub	sp, #24
 801b908:	af00      	add	r7, sp, #0
 801b90a:	60f8      	str	r0, [r7, #12]
 801b90c:	60b9      	str	r1, [r7, #8]
 801b90e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801b910:	4b64      	ldr	r3, [pc, #400]	@ (801baa4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	22fa      	movs	r2, #250	@ 0xfa
 801b916:	01d1      	lsls	r1, r2, #7
 801b918:	0018      	movs	r0, r3
 801b91a:	f7e4 fc43 	bl	80001a4 <__udivsi3>
 801b91e:	0003      	movs	r3, r0
 801b920:	001a      	movs	r2, r3
 801b922:	0013      	movs	r3, r2
 801b924:	015b      	lsls	r3, r3, #5
 801b926:	1a9b      	subs	r3, r3, r2
 801b928:	009b      	lsls	r3, r3, #2
 801b92a:	189b      	adds	r3, r3, r2
 801b92c:	00db      	lsls	r3, r3, #3
 801b92e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b930:	68fb      	ldr	r3, [r7, #12]
 801b932:	2220      	movs	r2, #32
 801b934:	5c9b      	ldrb	r3, [r3, r2]
 801b936:	2b01      	cmp	r3, #1
 801b938:	d101      	bne.n	801b93e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801b93a:	2302      	movs	r3, #2
 801b93c:	e0ad      	b.n	801ba9a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801b93e:	68fb      	ldr	r3, [r7, #12]
 801b940:	2220      	movs	r2, #32
 801b942:	2101      	movs	r1, #1
 801b944:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	2221      	movs	r2, #33	@ 0x21
 801b94a:	2102      	movs	r1, #2
 801b94c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	22ca      	movs	r2, #202	@ 0xca
 801b954:	625a      	str	r2, [r3, #36]	@ 0x24
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	2253      	movs	r2, #83	@ 0x53
 801b95c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	689a      	ldr	r2, [r3, #8]
 801b964:	2380      	movs	r3, #128	@ 0x80
 801b966:	00db      	lsls	r3, r3, #3
 801b968:	4013      	ands	r3, r2
 801b96a:	d019      	beq.n	801b9a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801b96c:	697b      	ldr	r3, [r7, #20]
 801b96e:	3b01      	subs	r3, #1
 801b970:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801b972:	697b      	ldr	r3, [r7, #20]
 801b974:	2b00      	cmp	r3, #0
 801b976:	d10d      	bne.n	801b994 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	22ff      	movs	r2, #255	@ 0xff
 801b97e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801b980:	68fb      	ldr	r3, [r7, #12]
 801b982:	2221      	movs	r2, #33	@ 0x21
 801b984:	2103      	movs	r1, #3
 801b986:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801b988:	68fb      	ldr	r3, [r7, #12]
 801b98a:	2220      	movs	r2, #32
 801b98c:	2100      	movs	r1, #0
 801b98e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801b990:	2303      	movs	r3, #3
 801b992:	e082      	b.n	801ba9a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	68db      	ldr	r3, [r3, #12]
 801b99a:	2204      	movs	r2, #4
 801b99c:	4013      	ands	r3, r2
 801b99e:	d1e5      	bne.n	801b96c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	689a      	ldr	r2, [r3, #8]
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	493f      	ldr	r1, [pc, #252]	@ (801baa8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801b9ac:	400a      	ands	r2, r1
 801b9ae:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	68db      	ldr	r3, [r3, #12]
 801b9b6:	22ff      	movs	r2, #255	@ 0xff
 801b9b8:	401a      	ands	r2, r3
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	493b      	ldr	r1, [pc, #236]	@ (801baac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801b9c0:	430a      	orrs	r2, r1
 801b9c2:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801b9c4:	4b37      	ldr	r3, [pc, #220]	@ (801baa4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	22fa      	movs	r2, #250	@ 0xfa
 801b9ca:	01d1      	lsls	r1, r2, #7
 801b9cc:	0018      	movs	r0, r3
 801b9ce:	f7e4 fbe9 	bl	80001a4 <__udivsi3>
 801b9d2:	0003      	movs	r3, r0
 801b9d4:	001a      	movs	r2, r3
 801b9d6:	0013      	movs	r3, r2
 801b9d8:	015b      	lsls	r3, r3, #5
 801b9da:	1a9b      	subs	r3, r3, r2
 801b9dc:	009b      	lsls	r3, r3, #2
 801b9de:	189b      	adds	r3, r3, r2
 801b9e0:	00db      	lsls	r3, r3, #3
 801b9e2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801b9e4:	697b      	ldr	r3, [r7, #20]
 801b9e6:	3b01      	subs	r3, #1
 801b9e8:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801b9ea:	697b      	ldr	r3, [r7, #20]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d10d      	bne.n	801ba0c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	22ff      	movs	r2, #255	@ 0xff
 801b9f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	2221      	movs	r2, #33	@ 0x21
 801b9fc:	2103      	movs	r1, #3
 801b9fe:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801ba00:	68fb      	ldr	r3, [r7, #12]
 801ba02:	2220      	movs	r2, #32
 801ba04:	2100      	movs	r1, #0
 801ba06:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801ba08:	2303      	movs	r3, #3
 801ba0a:	e046      	b.n	801ba9a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	68db      	ldr	r3, [r3, #12]
 801ba12:	2204      	movs	r2, #4
 801ba14:	4013      	ands	r3, r2
 801ba16:	d0e5      	beq.n	801b9e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801ba18:	68fb      	ldr	r3, [r7, #12]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	689a      	ldr	r2, [r3, #8]
 801ba1e:	68fb      	ldr	r3, [r7, #12]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	2107      	movs	r1, #7
 801ba24:	438a      	bics	r2, r1
 801ba26:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801ba28:	68fb      	ldr	r3, [r7, #12]
 801ba2a:	681b      	ldr	r3, [r3, #0]
 801ba2c:	6899      	ldr	r1, [r3, #8]
 801ba2e:	68fb      	ldr	r3, [r7, #12]
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	687a      	ldr	r2, [r7, #4]
 801ba34:	430a      	orrs	r2, r1
 801ba36:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	681b      	ldr	r3, [r3, #0]
 801ba3c:	68ba      	ldr	r2, [r7, #8]
 801ba3e:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801ba40:	4b1b      	ldr	r3, [pc, #108]	@ (801bab0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801ba42:	681a      	ldr	r2, [r3, #0]
 801ba44:	4b1a      	ldr	r3, [pc, #104]	@ (801bab0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801ba46:	2180      	movs	r1, #128	@ 0x80
 801ba48:	0349      	lsls	r1, r1, #13
 801ba4a:	430a      	orrs	r2, r1
 801ba4c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801ba4e:	4b18      	ldr	r3, [pc, #96]	@ (801bab0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801ba50:	689a      	ldr	r2, [r3, #8]
 801ba52:	4b17      	ldr	r3, [pc, #92]	@ (801bab0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801ba54:	2180      	movs	r1, #128	@ 0x80
 801ba56:	0349      	lsls	r1, r1, #13
 801ba58:	430a      	orrs	r2, r1
 801ba5a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	689a      	ldr	r2, [r3, #8]
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	2180      	movs	r1, #128	@ 0x80
 801ba68:	01c9      	lsls	r1, r1, #7
 801ba6a:	430a      	orrs	r2, r1
 801ba6c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801ba6e:	68fb      	ldr	r3, [r7, #12]
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	689a      	ldr	r2, [r3, #8]
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	2180      	movs	r1, #128	@ 0x80
 801ba7a:	00c9      	lsls	r1, r1, #3
 801ba7c:	430a      	orrs	r2, r1
 801ba7e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	22ff      	movs	r2, #255	@ 0xff
 801ba86:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	2221      	movs	r2, #33	@ 0x21
 801ba8c:	2101      	movs	r1, #1
 801ba8e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	2220      	movs	r2, #32
 801ba94:	2100      	movs	r1, #0
 801ba96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ba98:	2300      	movs	r3, #0
}
 801ba9a:	0018      	movs	r0, r3
 801ba9c:	46bd      	mov	sp, r7
 801ba9e:	b006      	add	sp, #24
 801baa0:	bd80      	pop	{r7, pc}
 801baa2:	46c0      	nop			@ (mov r8, r8)
 801baa4:	200000e0 	.word	0x200000e0
 801baa8:	fffffbff 	.word	0xfffffbff
 801baac:	fffffb7f 	.word	0xfffffb7f
 801bab0:	40010400 	.word	0x40010400

0801bab4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801bab4:	b580      	push	{r7, lr}
 801bab6:	b084      	sub	sp, #16
 801bab8:	af00      	add	r7, sp, #0
 801baba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801babc:	2300      	movs	r3, #0
 801babe:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	2220      	movs	r2, #32
 801bac4:	5c9b      	ldrb	r3, [r3, r2]
 801bac6:	2b01      	cmp	r3, #1
 801bac8:	d101      	bne.n	801bace <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801baca:	2302      	movs	r3, #2
 801bacc:	e04e      	b.n	801bb6c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	2220      	movs	r2, #32
 801bad2:	2101      	movs	r1, #1
 801bad4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	2221      	movs	r2, #33	@ 0x21
 801bada:	2102      	movs	r1, #2
 801badc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	22ca      	movs	r2, #202	@ 0xca
 801bae4:	625a      	str	r2, [r3, #36]	@ 0x24
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	2253      	movs	r2, #83	@ 0x53
 801baec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	689a      	ldr	r2, [r3, #8]
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	491e      	ldr	r1, [pc, #120]	@ (801bb74 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801bafa:	400a      	ands	r2, r1
 801bafc:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	689a      	ldr	r2, [r3, #8]
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	491b      	ldr	r1, [pc, #108]	@ (801bb78 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801bb0a:	400a      	ands	r2, r1
 801bb0c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801bb0e:	f7f8 f80b 	bl	8013b28 <HAL_GetTick>
 801bb12:	0003      	movs	r3, r0
 801bb14:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801bb16:	e016      	b.n	801bb46 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801bb18:	f7f8 f806 	bl	8013b28 <HAL_GetTick>
 801bb1c:	0002      	movs	r2, r0
 801bb1e:	68fb      	ldr	r3, [r7, #12]
 801bb20:	1ad2      	subs	r2, r2, r3
 801bb22:	23fa      	movs	r3, #250	@ 0xfa
 801bb24:	009b      	lsls	r3, r3, #2
 801bb26:	429a      	cmp	r2, r3
 801bb28:	d90d      	bls.n	801bb46 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	22ff      	movs	r2, #255	@ 0xff
 801bb30:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	2221      	movs	r2, #33	@ 0x21
 801bb36:	2103      	movs	r1, #3
 801bb38:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	2220      	movs	r2, #32
 801bb3e:	2100      	movs	r1, #0
 801bb40:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801bb42:	2303      	movs	r3, #3
 801bb44:	e012      	b.n	801bb6c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	681b      	ldr	r3, [r3, #0]
 801bb4a:	68db      	ldr	r3, [r3, #12]
 801bb4c:	2204      	movs	r2, #4
 801bb4e:	4013      	ands	r3, r2
 801bb50:	d0e2      	beq.n	801bb18 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	22ff      	movs	r2, #255	@ 0xff
 801bb58:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	2221      	movs	r2, #33	@ 0x21
 801bb5e:	2101      	movs	r1, #1
 801bb60:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	2220      	movs	r2, #32
 801bb66:	2100      	movs	r1, #0
 801bb68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bb6a:	2300      	movs	r3, #0
}
 801bb6c:	0018      	movs	r0, r3
 801bb6e:	46bd      	mov	sp, r7
 801bb70:	b004      	add	sp, #16
 801bb72:	bd80      	pop	{r7, pc}
 801bb74:	fffffbff 	.word	0xfffffbff
 801bb78:	ffffbfff 	.word	0xffffbfff

0801bb7c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801bb7c:	b580      	push	{r7, lr}
 801bb7e:	b082      	sub	sp, #8
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801bb84:	4b13      	ldr	r3, [pc, #76]	@ (801bbd4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801bb86:	2280      	movs	r2, #128	@ 0x80
 801bb88:	0352      	lsls	r2, r2, #13
 801bb8a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	689a      	ldr	r2, [r3, #8]
 801bb92:	2380      	movs	r3, #128	@ 0x80
 801bb94:	01db      	lsls	r3, r3, #7
 801bb96:	4013      	ands	r3, r2
 801bb98:	d014      	beq.n	801bbc4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	68da      	ldr	r2, [r3, #12]
 801bba0:	2380      	movs	r3, #128	@ 0x80
 801bba2:	00db      	lsls	r3, r3, #3
 801bba4:	4013      	ands	r3, r2
 801bba6:	d00d      	beq.n	801bbc4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	681b      	ldr	r3, [r3, #0]
 801bbac:	68db      	ldr	r3, [r3, #12]
 801bbae:	22ff      	movs	r2, #255	@ 0xff
 801bbb0:	401a      	ands	r2, r3
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	4908      	ldr	r1, [pc, #32]	@ (801bbd8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801bbb8:	430a      	orrs	r2, r1
 801bbba:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	0018      	movs	r0, r3
 801bbc0:	f000 f80c 	bl	801bbdc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	2221      	movs	r2, #33	@ 0x21
 801bbc8:	2101      	movs	r1, #1
 801bbca:	5499      	strb	r1, [r3, r2]
}
 801bbcc:	46c0      	nop			@ (mov r8, r8)
 801bbce:	46bd      	mov	sp, r7
 801bbd0:	b002      	add	sp, #8
 801bbd2:	bd80      	pop	{r7, pc}
 801bbd4:	40010400 	.word	0x40010400
 801bbd8:	fffffb7f 	.word	0xfffffb7f

0801bbdc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801bbdc:	b580      	push	{r7, lr}
 801bbde:	b082      	sub	sp, #8
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801bbe4:	46c0      	nop			@ (mov r8, r8)
 801bbe6:	46bd      	mov	sp, r7
 801bbe8:	b002      	add	sp, #8
 801bbea:	bd80      	pop	{r7, pc}

0801bbec <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801bbec:	b580      	push	{r7, lr}
 801bbee:	b086      	sub	sp, #24
 801bbf0:	af00      	add	r7, sp, #0
 801bbf2:	60f8      	str	r0, [r7, #12]
 801bbf4:	60b9      	str	r1, [r7, #8]
 801bbf6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801bbfc:	68fb      	ldr	r3, [r7, #12]
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	3350      	adds	r3, #80	@ 0x50
 801bc02:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801bc04:	68bb      	ldr	r3, [r7, #8]
 801bc06:	009b      	lsls	r3, r3, #2
 801bc08:	697a      	ldr	r2, [r7, #20]
 801bc0a:	18d3      	adds	r3, r2, r3
 801bc0c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801bc0e:	697b      	ldr	r3, [r7, #20]
 801bc10:	687a      	ldr	r2, [r7, #4]
 801bc12:	601a      	str	r2, [r3, #0]
}
 801bc14:	46c0      	nop			@ (mov r8, r8)
 801bc16:	46bd      	mov	sp, r7
 801bc18:	b006      	add	sp, #24
 801bc1a:	bd80      	pop	{r7, pc}

0801bc1c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801bc1c:	b580      	push	{r7, lr}
 801bc1e:	b084      	sub	sp, #16
 801bc20:	af00      	add	r7, sp, #0
 801bc22:	6078      	str	r0, [r7, #4]
 801bc24:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801bc26:	2300      	movs	r3, #0
 801bc28:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	3350      	adds	r3, #80	@ 0x50
 801bc30:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801bc32:	683b      	ldr	r3, [r7, #0]
 801bc34:	009b      	lsls	r3, r3, #2
 801bc36:	68fa      	ldr	r2, [r7, #12]
 801bc38:	18d3      	adds	r3, r2, r3
 801bc3a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801bc3c:	68fb      	ldr	r3, [r7, #12]
 801bc3e:	681b      	ldr	r3, [r3, #0]
}
 801bc40:	0018      	movs	r0, r3
 801bc42:	46bd      	mov	sp, r7
 801bc44:	b004      	add	sp, #16
 801bc46:	bd80      	pop	{r7, pc}

0801bc48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801bc48:	b580      	push	{r7, lr}
 801bc4a:	b082      	sub	sp, #8
 801bc4c:	af00      	add	r7, sp, #0
 801bc4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d101      	bne.n	801bc5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801bc56:	2301      	movs	r3, #1
 801bc58:	e032      	b.n	801bcc0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	2239      	movs	r2, #57	@ 0x39
 801bc5e:	5c9b      	ldrb	r3, [r3, r2]
 801bc60:	b2db      	uxtb	r3, r3
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d107      	bne.n	801bc76 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	2238      	movs	r2, #56	@ 0x38
 801bc6a:	2100      	movs	r1, #0
 801bc6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	0018      	movs	r0, r3
 801bc72:	f7f6 ff75 	bl	8012b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	2239      	movs	r2, #57	@ 0x39
 801bc7a:	2102      	movs	r1, #2
 801bc7c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	681a      	ldr	r2, [r3, #0]
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	3304      	adds	r3, #4
 801bc86:	0019      	movs	r1, r3
 801bc88:	0010      	movs	r0, r2
 801bc8a:	f000 fa1d 	bl	801c0c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	223e      	movs	r2, #62	@ 0x3e
 801bc92:	2101      	movs	r1, #1
 801bc94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	223a      	movs	r2, #58	@ 0x3a
 801bc9a:	2101      	movs	r1, #1
 801bc9c:	5499      	strb	r1, [r3, r2]
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	223b      	movs	r2, #59	@ 0x3b
 801bca2:	2101      	movs	r1, #1
 801bca4:	5499      	strb	r1, [r3, r2]
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	223c      	movs	r2, #60	@ 0x3c
 801bcaa:	2101      	movs	r1, #1
 801bcac:	5499      	strb	r1, [r3, r2]
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	223d      	movs	r2, #61	@ 0x3d
 801bcb2:	2101      	movs	r1, #1
 801bcb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	2239      	movs	r2, #57	@ 0x39
 801bcba:	2101      	movs	r1, #1
 801bcbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bcbe:	2300      	movs	r3, #0
}
 801bcc0:	0018      	movs	r0, r3
 801bcc2:	46bd      	mov	sp, r7
 801bcc4:	b002      	add	sp, #8
 801bcc6:	bd80      	pop	{r7, pc}

0801bcc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b084      	sub	sp, #16
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	2239      	movs	r2, #57	@ 0x39
 801bcd4:	5c9b      	ldrb	r3, [r3, r2]
 801bcd6:	b2db      	uxtb	r3, r3
 801bcd8:	2b01      	cmp	r3, #1
 801bcda:	d001      	beq.n	801bce0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801bcdc:	2301      	movs	r3, #1
 801bcde:	e033      	b.n	801bd48 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	2239      	movs	r2, #57	@ 0x39
 801bce4:	2102      	movs	r1, #2
 801bce6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	681a      	ldr	r2, [r3, #0]
 801bcec:	2380      	movs	r3, #128	@ 0x80
 801bcee:	05db      	lsls	r3, r3, #23
 801bcf0:	429a      	cmp	r2, r3
 801bcf2:	d00e      	beq.n	801bd12 <HAL_TIM_Base_Start+0x4a>
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	4a15      	ldr	r2, [pc, #84]	@ (801bd50 <HAL_TIM_Base_Start+0x88>)
 801bcfa:	4293      	cmp	r3, r2
 801bcfc:	d009      	beq.n	801bd12 <HAL_TIM_Base_Start+0x4a>
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	4a14      	ldr	r2, [pc, #80]	@ (801bd54 <HAL_TIM_Base_Start+0x8c>)
 801bd04:	4293      	cmp	r3, r2
 801bd06:	d004      	beq.n	801bd12 <HAL_TIM_Base_Start+0x4a>
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	4a12      	ldr	r2, [pc, #72]	@ (801bd58 <HAL_TIM_Base_Start+0x90>)
 801bd0e:	4293      	cmp	r3, r2
 801bd10:	d111      	bne.n	801bd36 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	689b      	ldr	r3, [r3, #8]
 801bd18:	2207      	movs	r2, #7
 801bd1a:	4013      	ands	r3, r2
 801bd1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bd1e:	68fb      	ldr	r3, [r7, #12]
 801bd20:	2b06      	cmp	r3, #6
 801bd22:	d010      	beq.n	801bd46 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	681b      	ldr	r3, [r3, #0]
 801bd28:	681a      	ldr	r2, [r3, #0]
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	2101      	movs	r1, #1
 801bd30:	430a      	orrs	r2, r1
 801bd32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bd34:	e007      	b.n	801bd46 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	681a      	ldr	r2, [r3, #0]
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	2101      	movs	r1, #1
 801bd42:	430a      	orrs	r2, r1
 801bd44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801bd46:	2300      	movs	r3, #0
}
 801bd48:	0018      	movs	r0, r3
 801bd4a:	46bd      	mov	sp, r7
 801bd4c:	b004      	add	sp, #16
 801bd4e:	bd80      	pop	{r7, pc}
 801bd50:	40000400 	.word	0x40000400
 801bd54:	40010800 	.word	0x40010800
 801bd58:	40011400 	.word	0x40011400

0801bd5c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b082      	sub	sp, #8
 801bd60:	af00      	add	r7, sp, #0
 801bd62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	6a1b      	ldr	r3, [r3, #32]
 801bd6a:	4a0a      	ldr	r2, [pc, #40]	@ (801bd94 <HAL_TIM_Base_Stop+0x38>)
 801bd6c:	4013      	ands	r3, r2
 801bd6e:	d107      	bne.n	801bd80 <HAL_TIM_Base_Stop+0x24>
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	681a      	ldr	r2, [r3, #0]
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	681b      	ldr	r3, [r3, #0]
 801bd7a:	2101      	movs	r1, #1
 801bd7c:	438a      	bics	r2, r1
 801bd7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	2239      	movs	r2, #57	@ 0x39
 801bd84:	2101      	movs	r1, #1
 801bd86:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801bd88:	2300      	movs	r3, #0
}
 801bd8a:	0018      	movs	r0, r3
 801bd8c:	46bd      	mov	sp, r7
 801bd8e:	b002      	add	sp, #8
 801bd90:	bd80      	pop	{r7, pc}
 801bd92:	46c0      	nop			@ (mov r8, r8)
 801bd94:	00001111 	.word	0x00001111

0801bd98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801bd98:	b580      	push	{r7, lr}
 801bd9a:	b082      	sub	sp, #8
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d101      	bne.n	801bdaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801bda6:	2301      	movs	r3, #1
 801bda8:	e032      	b.n	801be10 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	2239      	movs	r2, #57	@ 0x39
 801bdae:	5c9b      	ldrb	r3, [r3, r2]
 801bdb0:	b2db      	uxtb	r3, r3
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d107      	bne.n	801bdc6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	2238      	movs	r2, #56	@ 0x38
 801bdba:	2100      	movs	r1, #0
 801bdbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	0018      	movs	r0, r3
 801bdc2:	f7f6 fea9 	bl	8012b18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	2239      	movs	r2, #57	@ 0x39
 801bdca:	2102      	movs	r1, #2
 801bdcc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	681a      	ldr	r2, [r3, #0]
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	3304      	adds	r3, #4
 801bdd6:	0019      	movs	r1, r3
 801bdd8:	0010      	movs	r0, r2
 801bdda:	f000 f975 	bl	801c0c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	223e      	movs	r2, #62	@ 0x3e
 801bde2:	2101      	movs	r1, #1
 801bde4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	223a      	movs	r2, #58	@ 0x3a
 801bdea:	2101      	movs	r1, #1
 801bdec:	5499      	strb	r1, [r3, r2]
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	223b      	movs	r2, #59	@ 0x3b
 801bdf2:	2101      	movs	r1, #1
 801bdf4:	5499      	strb	r1, [r3, r2]
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	223c      	movs	r2, #60	@ 0x3c
 801bdfa:	2101      	movs	r1, #1
 801bdfc:	5499      	strb	r1, [r3, r2]
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	223d      	movs	r2, #61	@ 0x3d
 801be02:	2101      	movs	r1, #1
 801be04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	2239      	movs	r2, #57	@ 0x39
 801be0a:	2101      	movs	r1, #1
 801be0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801be0e:	2300      	movs	r3, #0
}
 801be10:	0018      	movs	r0, r3
 801be12:	46bd      	mov	sp, r7
 801be14:	b002      	add	sp, #8
 801be16:	bd80      	pop	{r7, pc}

0801be18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801be18:	b580      	push	{r7, lr}
 801be1a:	b084      	sub	sp, #16
 801be1c:	af00      	add	r7, sp, #0
 801be1e:	6078      	str	r0, [r7, #4]
 801be20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801be22:	683b      	ldr	r3, [r7, #0]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d108      	bne.n	801be3a <HAL_TIM_PWM_Start+0x22>
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	223a      	movs	r2, #58	@ 0x3a
 801be2c:	5c9b      	ldrb	r3, [r3, r2]
 801be2e:	b2db      	uxtb	r3, r3
 801be30:	3b01      	subs	r3, #1
 801be32:	1e5a      	subs	r2, r3, #1
 801be34:	4193      	sbcs	r3, r2
 801be36:	b2db      	uxtb	r3, r3
 801be38:	e01f      	b.n	801be7a <HAL_TIM_PWM_Start+0x62>
 801be3a:	683b      	ldr	r3, [r7, #0]
 801be3c:	2b04      	cmp	r3, #4
 801be3e:	d108      	bne.n	801be52 <HAL_TIM_PWM_Start+0x3a>
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	223b      	movs	r2, #59	@ 0x3b
 801be44:	5c9b      	ldrb	r3, [r3, r2]
 801be46:	b2db      	uxtb	r3, r3
 801be48:	3b01      	subs	r3, #1
 801be4a:	1e5a      	subs	r2, r3, #1
 801be4c:	4193      	sbcs	r3, r2
 801be4e:	b2db      	uxtb	r3, r3
 801be50:	e013      	b.n	801be7a <HAL_TIM_PWM_Start+0x62>
 801be52:	683b      	ldr	r3, [r7, #0]
 801be54:	2b08      	cmp	r3, #8
 801be56:	d108      	bne.n	801be6a <HAL_TIM_PWM_Start+0x52>
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	223c      	movs	r2, #60	@ 0x3c
 801be5c:	5c9b      	ldrb	r3, [r3, r2]
 801be5e:	b2db      	uxtb	r3, r3
 801be60:	3b01      	subs	r3, #1
 801be62:	1e5a      	subs	r2, r3, #1
 801be64:	4193      	sbcs	r3, r2
 801be66:	b2db      	uxtb	r3, r3
 801be68:	e007      	b.n	801be7a <HAL_TIM_PWM_Start+0x62>
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	223d      	movs	r2, #61	@ 0x3d
 801be6e:	5c9b      	ldrb	r3, [r3, r2]
 801be70:	b2db      	uxtb	r3, r3
 801be72:	3b01      	subs	r3, #1
 801be74:	1e5a      	subs	r2, r3, #1
 801be76:	4193      	sbcs	r3, r2
 801be78:	b2db      	uxtb	r3, r3
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d001      	beq.n	801be82 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801be7e:	2301      	movs	r3, #1
 801be80:	e052      	b.n	801bf28 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801be82:	683b      	ldr	r3, [r7, #0]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d104      	bne.n	801be92 <HAL_TIM_PWM_Start+0x7a>
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	223a      	movs	r2, #58	@ 0x3a
 801be8c:	2102      	movs	r1, #2
 801be8e:	5499      	strb	r1, [r3, r2]
 801be90:	e013      	b.n	801beba <HAL_TIM_PWM_Start+0xa2>
 801be92:	683b      	ldr	r3, [r7, #0]
 801be94:	2b04      	cmp	r3, #4
 801be96:	d104      	bne.n	801bea2 <HAL_TIM_PWM_Start+0x8a>
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	223b      	movs	r2, #59	@ 0x3b
 801be9c:	2102      	movs	r1, #2
 801be9e:	5499      	strb	r1, [r3, r2]
 801bea0:	e00b      	b.n	801beba <HAL_TIM_PWM_Start+0xa2>
 801bea2:	683b      	ldr	r3, [r7, #0]
 801bea4:	2b08      	cmp	r3, #8
 801bea6:	d104      	bne.n	801beb2 <HAL_TIM_PWM_Start+0x9a>
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	223c      	movs	r2, #60	@ 0x3c
 801beac:	2102      	movs	r1, #2
 801beae:	5499      	strb	r1, [r3, r2]
 801beb0:	e003      	b.n	801beba <HAL_TIM_PWM_Start+0xa2>
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	223d      	movs	r2, #61	@ 0x3d
 801beb6:	2102      	movs	r1, #2
 801beb8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	6839      	ldr	r1, [r7, #0]
 801bec0:	2201      	movs	r2, #1
 801bec2:	0018      	movs	r0, r3
 801bec4:	f000 fa62 	bl	801c38c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bec8:	687b      	ldr	r3, [r7, #4]
 801beca:	681a      	ldr	r2, [r3, #0]
 801becc:	2380      	movs	r3, #128	@ 0x80
 801bece:	05db      	lsls	r3, r3, #23
 801bed0:	429a      	cmp	r2, r3
 801bed2:	d00e      	beq.n	801bef2 <HAL_TIM_PWM_Start+0xda>
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	4a15      	ldr	r2, [pc, #84]	@ (801bf30 <HAL_TIM_PWM_Start+0x118>)
 801beda:	4293      	cmp	r3, r2
 801bedc:	d009      	beq.n	801bef2 <HAL_TIM_PWM_Start+0xda>
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	4a14      	ldr	r2, [pc, #80]	@ (801bf34 <HAL_TIM_PWM_Start+0x11c>)
 801bee4:	4293      	cmp	r3, r2
 801bee6:	d004      	beq.n	801bef2 <HAL_TIM_PWM_Start+0xda>
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	681b      	ldr	r3, [r3, #0]
 801beec:	4a12      	ldr	r2, [pc, #72]	@ (801bf38 <HAL_TIM_PWM_Start+0x120>)
 801beee:	4293      	cmp	r3, r2
 801bef0:	d111      	bne.n	801bf16 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	681b      	ldr	r3, [r3, #0]
 801bef6:	689b      	ldr	r3, [r3, #8]
 801bef8:	2207      	movs	r2, #7
 801befa:	4013      	ands	r3, r2
 801befc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	2b06      	cmp	r3, #6
 801bf02:	d010      	beq.n	801bf26 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	681a      	ldr	r2, [r3, #0]
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	2101      	movs	r1, #1
 801bf10:	430a      	orrs	r2, r1
 801bf12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bf14:	e007      	b.n	801bf26 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	681b      	ldr	r3, [r3, #0]
 801bf1a:	681a      	ldr	r2, [r3, #0]
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	2101      	movs	r1, #1
 801bf22:	430a      	orrs	r2, r1
 801bf24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801bf26:	2300      	movs	r3, #0
}
 801bf28:	0018      	movs	r0, r3
 801bf2a:	46bd      	mov	sp, r7
 801bf2c:	b004      	add	sp, #16
 801bf2e:	bd80      	pop	{r7, pc}
 801bf30:	40000400 	.word	0x40000400
 801bf34:	40010800 	.word	0x40010800
 801bf38:	40011400 	.word	0x40011400

0801bf3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801bf3c:	b580      	push	{r7, lr}
 801bf3e:	b086      	sub	sp, #24
 801bf40:	af00      	add	r7, sp, #0
 801bf42:	60f8      	str	r0, [r7, #12]
 801bf44:	60b9      	str	r1, [r7, #8]
 801bf46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bf48:	2317      	movs	r3, #23
 801bf4a:	18fb      	adds	r3, r7, r3
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801bf50:	68fb      	ldr	r3, [r7, #12]
 801bf52:	2238      	movs	r2, #56	@ 0x38
 801bf54:	5c9b      	ldrb	r3, [r3, r2]
 801bf56:	2b01      	cmp	r3, #1
 801bf58:	d101      	bne.n	801bf5e <HAL_TIM_PWM_ConfigChannel+0x22>
 801bf5a:	2302      	movs	r3, #2
 801bf5c:	e0ad      	b.n	801c0ba <HAL_TIM_PWM_ConfigChannel+0x17e>
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	2238      	movs	r2, #56	@ 0x38
 801bf62:	2101      	movs	r1, #1
 801bf64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	2b0c      	cmp	r3, #12
 801bf6a:	d100      	bne.n	801bf6e <HAL_TIM_PWM_ConfigChannel+0x32>
 801bf6c:	e076      	b.n	801c05c <HAL_TIM_PWM_ConfigChannel+0x120>
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	2b0c      	cmp	r3, #12
 801bf72:	d900      	bls.n	801bf76 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801bf74:	e095      	b.n	801c0a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	2b08      	cmp	r3, #8
 801bf7a:	d04e      	beq.n	801c01a <HAL_TIM_PWM_ConfigChannel+0xde>
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	2b08      	cmp	r3, #8
 801bf80:	d900      	bls.n	801bf84 <HAL_TIM_PWM_ConfigChannel+0x48>
 801bf82:	e08e      	b.n	801c0a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d003      	beq.n	801bf92 <HAL_TIM_PWM_ConfigChannel+0x56>
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	2b04      	cmp	r3, #4
 801bf8e:	d021      	beq.n	801bfd4 <HAL_TIM_PWM_ConfigChannel+0x98>
 801bf90:	e087      	b.n	801c0a2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	68ba      	ldr	r2, [r7, #8]
 801bf98:	0011      	movs	r1, r2
 801bf9a:	0018      	movs	r0, r3
 801bf9c:	f000 f8f2 	bl	801c184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801bfa0:	68fb      	ldr	r3, [r7, #12]
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	699a      	ldr	r2, [r3, #24]
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	2108      	movs	r1, #8
 801bfac:	430a      	orrs	r2, r1
 801bfae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801bfb0:	68fb      	ldr	r3, [r7, #12]
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	699a      	ldr	r2, [r3, #24]
 801bfb6:	68fb      	ldr	r3, [r7, #12]
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	2104      	movs	r1, #4
 801bfbc:	438a      	bics	r2, r1
 801bfbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801bfc0:	68fb      	ldr	r3, [r7, #12]
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	6999      	ldr	r1, [r3, #24]
 801bfc6:	68bb      	ldr	r3, [r7, #8]
 801bfc8:	68da      	ldr	r2, [r3, #12]
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	430a      	orrs	r2, r1
 801bfd0:	619a      	str	r2, [r3, #24]
      break;
 801bfd2:	e06b      	b.n	801c0ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801bfd4:	68fb      	ldr	r3, [r7, #12]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	68ba      	ldr	r2, [r7, #8]
 801bfda:	0011      	movs	r1, r2
 801bfdc:	0018      	movs	r0, r3
 801bfde:	f000 f90d 	bl	801c1fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	699a      	ldr	r2, [r3, #24]
 801bfe8:	68fb      	ldr	r3, [r7, #12]
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	2180      	movs	r1, #128	@ 0x80
 801bfee:	0109      	lsls	r1, r1, #4
 801bff0:	430a      	orrs	r2, r1
 801bff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	699a      	ldr	r2, [r3, #24]
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	4931      	ldr	r1, [pc, #196]	@ (801c0c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801c000:	400a      	ands	r2, r1
 801c002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801c004:	68fb      	ldr	r3, [r7, #12]
 801c006:	681b      	ldr	r3, [r3, #0]
 801c008:	6999      	ldr	r1, [r3, #24]
 801c00a:	68bb      	ldr	r3, [r7, #8]
 801c00c:	68db      	ldr	r3, [r3, #12]
 801c00e:	021a      	lsls	r2, r3, #8
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	430a      	orrs	r2, r1
 801c016:	619a      	str	r2, [r3, #24]
      break;
 801c018:	e048      	b.n	801c0ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	68ba      	ldr	r2, [r7, #8]
 801c020:	0011      	movs	r1, r2
 801c022:	0018      	movs	r0, r3
 801c024:	f000 f92c 	bl	801c280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801c028:	68fb      	ldr	r3, [r7, #12]
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	69da      	ldr	r2, [r3, #28]
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	2108      	movs	r1, #8
 801c034:	430a      	orrs	r2, r1
 801c036:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801c038:	68fb      	ldr	r3, [r7, #12]
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	69da      	ldr	r2, [r3, #28]
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	2104      	movs	r1, #4
 801c044:	438a      	bics	r2, r1
 801c046:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	69d9      	ldr	r1, [r3, #28]
 801c04e:	68bb      	ldr	r3, [r7, #8]
 801c050:	68da      	ldr	r2, [r3, #12]
 801c052:	68fb      	ldr	r3, [r7, #12]
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	430a      	orrs	r2, r1
 801c058:	61da      	str	r2, [r3, #28]
      break;
 801c05a:	e027      	b.n	801c0ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	68ba      	ldr	r2, [r7, #8]
 801c062:	0011      	movs	r1, r2
 801c064:	0018      	movs	r0, r3
 801c066:	f000 f94b 	bl	801c300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	69da      	ldr	r2, [r3, #28]
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	2180      	movs	r1, #128	@ 0x80
 801c076:	0109      	lsls	r1, r1, #4
 801c078:	430a      	orrs	r2, r1
 801c07a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	69da      	ldr	r2, [r3, #28]
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	490f      	ldr	r1, [pc, #60]	@ (801c0c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801c088:	400a      	ands	r2, r1
 801c08a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801c08c:	68fb      	ldr	r3, [r7, #12]
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	69d9      	ldr	r1, [r3, #28]
 801c092:	68bb      	ldr	r3, [r7, #8]
 801c094:	68db      	ldr	r3, [r3, #12]
 801c096:	021a      	lsls	r2, r3, #8
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	430a      	orrs	r2, r1
 801c09e:	61da      	str	r2, [r3, #28]
      break;
 801c0a0:	e004      	b.n	801c0ac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801c0a2:	2317      	movs	r3, #23
 801c0a4:	18fb      	adds	r3, r7, r3
 801c0a6:	2201      	movs	r2, #1
 801c0a8:	701a      	strb	r2, [r3, #0]
      break;
 801c0aa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801c0ac:	68fb      	ldr	r3, [r7, #12]
 801c0ae:	2238      	movs	r2, #56	@ 0x38
 801c0b0:	2100      	movs	r1, #0
 801c0b2:	5499      	strb	r1, [r3, r2]

  return status;
 801c0b4:	2317      	movs	r3, #23
 801c0b6:	18fb      	adds	r3, r7, r3
 801c0b8:	781b      	ldrb	r3, [r3, #0]
}
 801c0ba:	0018      	movs	r0, r3
 801c0bc:	46bd      	mov	sp, r7
 801c0be:	b006      	add	sp, #24
 801c0c0:	bd80      	pop	{r7, pc}
 801c0c2:	46c0      	nop			@ (mov r8, r8)
 801c0c4:	fffffbff 	.word	0xfffffbff

0801c0c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801c0c8:	b580      	push	{r7, lr}
 801c0ca:	b084      	sub	sp, #16
 801c0cc:	af00      	add	r7, sp, #0
 801c0ce:	6078      	str	r0, [r7, #4]
 801c0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801c0d8:	687a      	ldr	r2, [r7, #4]
 801c0da:	2380      	movs	r3, #128	@ 0x80
 801c0dc:	05db      	lsls	r3, r3, #23
 801c0de:	429a      	cmp	r2, r3
 801c0e0:	d00b      	beq.n	801c0fa <TIM_Base_SetConfig+0x32>
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	4a23      	ldr	r2, [pc, #140]	@ (801c174 <TIM_Base_SetConfig+0xac>)
 801c0e6:	4293      	cmp	r3, r2
 801c0e8:	d007      	beq.n	801c0fa <TIM_Base_SetConfig+0x32>
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	4a22      	ldr	r2, [pc, #136]	@ (801c178 <TIM_Base_SetConfig+0xb0>)
 801c0ee:	4293      	cmp	r3, r2
 801c0f0:	d003      	beq.n	801c0fa <TIM_Base_SetConfig+0x32>
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	4a21      	ldr	r2, [pc, #132]	@ (801c17c <TIM_Base_SetConfig+0xb4>)
 801c0f6:	4293      	cmp	r3, r2
 801c0f8:	d108      	bne.n	801c10c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801c0fa:	68fb      	ldr	r3, [r7, #12]
 801c0fc:	2270      	movs	r2, #112	@ 0x70
 801c0fe:	4393      	bics	r3, r2
 801c100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801c102:	683b      	ldr	r3, [r7, #0]
 801c104:	685b      	ldr	r3, [r3, #4]
 801c106:	68fa      	ldr	r2, [r7, #12]
 801c108:	4313      	orrs	r3, r2
 801c10a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c10c:	687a      	ldr	r2, [r7, #4]
 801c10e:	2380      	movs	r3, #128	@ 0x80
 801c110:	05db      	lsls	r3, r3, #23
 801c112:	429a      	cmp	r2, r3
 801c114:	d00b      	beq.n	801c12e <TIM_Base_SetConfig+0x66>
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	4a16      	ldr	r2, [pc, #88]	@ (801c174 <TIM_Base_SetConfig+0xac>)
 801c11a:	4293      	cmp	r3, r2
 801c11c:	d007      	beq.n	801c12e <TIM_Base_SetConfig+0x66>
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	4a15      	ldr	r2, [pc, #84]	@ (801c178 <TIM_Base_SetConfig+0xb0>)
 801c122:	4293      	cmp	r3, r2
 801c124:	d003      	beq.n	801c12e <TIM_Base_SetConfig+0x66>
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	4a14      	ldr	r2, [pc, #80]	@ (801c17c <TIM_Base_SetConfig+0xb4>)
 801c12a:	4293      	cmp	r3, r2
 801c12c:	d108      	bne.n	801c140 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	4a13      	ldr	r2, [pc, #76]	@ (801c180 <TIM_Base_SetConfig+0xb8>)
 801c132:	4013      	ands	r3, r2
 801c134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801c136:	683b      	ldr	r3, [r7, #0]
 801c138:	68db      	ldr	r3, [r3, #12]
 801c13a:	68fa      	ldr	r2, [r7, #12]
 801c13c:	4313      	orrs	r3, r2
 801c13e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	2280      	movs	r2, #128	@ 0x80
 801c144:	4393      	bics	r3, r2
 801c146:	001a      	movs	r2, r3
 801c148:	683b      	ldr	r3, [r7, #0]
 801c14a:	691b      	ldr	r3, [r3, #16]
 801c14c:	4313      	orrs	r3, r2
 801c14e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	68fa      	ldr	r2, [r7, #12]
 801c154:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801c156:	683b      	ldr	r3, [r7, #0]
 801c158:	689a      	ldr	r2, [r3, #8]
 801c15a:	687b      	ldr	r3, [r7, #4]
 801c15c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801c15e:	683b      	ldr	r3, [r7, #0]
 801c160:	681a      	ldr	r2, [r3, #0]
 801c162:	687b      	ldr	r3, [r7, #4]
 801c164:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	2201      	movs	r2, #1
 801c16a:	615a      	str	r2, [r3, #20]
}
 801c16c:	46c0      	nop			@ (mov r8, r8)
 801c16e:	46bd      	mov	sp, r7
 801c170:	b004      	add	sp, #16
 801c172:	bd80      	pop	{r7, pc}
 801c174:	40000400 	.word	0x40000400
 801c178:	40010800 	.word	0x40010800
 801c17c:	40011400 	.word	0x40011400
 801c180:	fffffcff 	.word	0xfffffcff

0801c184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c184:	b580      	push	{r7, lr}
 801c186:	b086      	sub	sp, #24
 801c188:	af00      	add	r7, sp, #0
 801c18a:	6078      	str	r0, [r7, #4]
 801c18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	6a1b      	ldr	r3, [r3, #32]
 801c192:	2201      	movs	r2, #1
 801c194:	4393      	bics	r3, r2
 801c196:	001a      	movs	r2, r3
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	6a1b      	ldr	r3, [r3, #32]
 801c1a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	685b      	ldr	r3, [r3, #4]
 801c1a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	699b      	ldr	r3, [r3, #24]
 801c1ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	2270      	movs	r2, #112	@ 0x70
 801c1b2:	4393      	bics	r3, r2
 801c1b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	2203      	movs	r2, #3
 801c1ba:	4393      	bics	r3, r2
 801c1bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c1be:	683b      	ldr	r3, [r7, #0]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	68fa      	ldr	r2, [r7, #12]
 801c1c4:	4313      	orrs	r3, r2
 801c1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801c1c8:	697b      	ldr	r3, [r7, #20]
 801c1ca:	2202      	movs	r2, #2
 801c1cc:	4393      	bics	r3, r2
 801c1ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801c1d0:	683b      	ldr	r3, [r7, #0]
 801c1d2:	689b      	ldr	r3, [r3, #8]
 801c1d4:	697a      	ldr	r2, [r7, #20]
 801c1d6:	4313      	orrs	r3, r2
 801c1d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	693a      	ldr	r2, [r7, #16]
 801c1de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	68fa      	ldr	r2, [r7, #12]
 801c1e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801c1e6:	683b      	ldr	r3, [r7, #0]
 801c1e8:	685a      	ldr	r2, [r3, #4]
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	697a      	ldr	r2, [r7, #20]
 801c1f2:	621a      	str	r2, [r3, #32]
}
 801c1f4:	46c0      	nop			@ (mov r8, r8)
 801c1f6:	46bd      	mov	sp, r7
 801c1f8:	b006      	add	sp, #24
 801c1fa:	bd80      	pop	{r7, pc}

0801c1fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b086      	sub	sp, #24
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
 801c204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	6a1b      	ldr	r3, [r3, #32]
 801c20a:	2210      	movs	r2, #16
 801c20c:	4393      	bics	r3, r2
 801c20e:	001a      	movs	r2, r3
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	6a1b      	ldr	r3, [r3, #32]
 801c218:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	685b      	ldr	r3, [r3, #4]
 801c21e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	699b      	ldr	r3, [r3, #24]
 801c224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801c226:	68fb      	ldr	r3, [r7, #12]
 801c228:	4a13      	ldr	r2, [pc, #76]	@ (801c278 <TIM_OC2_SetConfig+0x7c>)
 801c22a:	4013      	ands	r3, r2
 801c22c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	4a12      	ldr	r2, [pc, #72]	@ (801c27c <TIM_OC2_SetConfig+0x80>)
 801c232:	4013      	ands	r3, r2
 801c234:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c236:	683b      	ldr	r3, [r7, #0]
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	021b      	lsls	r3, r3, #8
 801c23c:	68fa      	ldr	r2, [r7, #12]
 801c23e:	4313      	orrs	r3, r2
 801c240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801c242:	697b      	ldr	r3, [r7, #20]
 801c244:	2220      	movs	r2, #32
 801c246:	4393      	bics	r3, r2
 801c248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801c24a:	683b      	ldr	r3, [r7, #0]
 801c24c:	689b      	ldr	r3, [r3, #8]
 801c24e:	011b      	lsls	r3, r3, #4
 801c250:	697a      	ldr	r2, [r7, #20]
 801c252:	4313      	orrs	r3, r2
 801c254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	693a      	ldr	r2, [r7, #16]
 801c25a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	68fa      	ldr	r2, [r7, #12]
 801c260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801c262:	683b      	ldr	r3, [r7, #0]
 801c264:	685a      	ldr	r2, [r3, #4]
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	697a      	ldr	r2, [r7, #20]
 801c26e:	621a      	str	r2, [r3, #32]
}
 801c270:	46c0      	nop			@ (mov r8, r8)
 801c272:	46bd      	mov	sp, r7
 801c274:	b006      	add	sp, #24
 801c276:	bd80      	pop	{r7, pc}
 801c278:	ffff8fff 	.word	0xffff8fff
 801c27c:	fffffcff 	.word	0xfffffcff

0801c280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c280:	b580      	push	{r7, lr}
 801c282:	b086      	sub	sp, #24
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
 801c288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	6a1b      	ldr	r3, [r3, #32]
 801c28e:	4a1a      	ldr	r2, [pc, #104]	@ (801c2f8 <TIM_OC3_SetConfig+0x78>)
 801c290:	401a      	ands	r2, r3
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	6a1b      	ldr	r3, [r3, #32]
 801c29a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	685b      	ldr	r3, [r3, #4]
 801c2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	69db      	ldr	r3, [r3, #28]
 801c2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	2270      	movs	r2, #112	@ 0x70
 801c2ac:	4393      	bics	r3, r2
 801c2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	2203      	movs	r2, #3
 801c2b4:	4393      	bics	r3, r2
 801c2b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c2b8:	683b      	ldr	r3, [r7, #0]
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	68fa      	ldr	r2, [r7, #12]
 801c2be:	4313      	orrs	r3, r2
 801c2c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801c2c2:	697b      	ldr	r3, [r7, #20]
 801c2c4:	4a0d      	ldr	r2, [pc, #52]	@ (801c2fc <TIM_OC3_SetConfig+0x7c>)
 801c2c6:	4013      	ands	r3, r2
 801c2c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801c2ca:	683b      	ldr	r3, [r7, #0]
 801c2cc:	689b      	ldr	r3, [r3, #8]
 801c2ce:	021b      	lsls	r3, r3, #8
 801c2d0:	697a      	ldr	r2, [r7, #20]
 801c2d2:	4313      	orrs	r3, r2
 801c2d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	693a      	ldr	r2, [r7, #16]
 801c2da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	68fa      	ldr	r2, [r7, #12]
 801c2e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801c2e2:	683b      	ldr	r3, [r7, #0]
 801c2e4:	685a      	ldr	r2, [r3, #4]
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	697a      	ldr	r2, [r7, #20]
 801c2ee:	621a      	str	r2, [r3, #32]
}
 801c2f0:	46c0      	nop			@ (mov r8, r8)
 801c2f2:	46bd      	mov	sp, r7
 801c2f4:	b006      	add	sp, #24
 801c2f6:	bd80      	pop	{r7, pc}
 801c2f8:	fffffeff 	.word	0xfffffeff
 801c2fc:	fffffdff 	.word	0xfffffdff

0801c300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c300:	b580      	push	{r7, lr}
 801c302:	b086      	sub	sp, #24
 801c304:	af00      	add	r7, sp, #0
 801c306:	6078      	str	r0, [r7, #4]
 801c308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	6a1b      	ldr	r3, [r3, #32]
 801c30e:	4a1b      	ldr	r2, [pc, #108]	@ (801c37c <TIM_OC4_SetConfig+0x7c>)
 801c310:	401a      	ands	r2, r3
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	6a1b      	ldr	r3, [r3, #32]
 801c31a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	685b      	ldr	r3, [r3, #4]
 801c320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	69db      	ldr	r3, [r3, #28]
 801c326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	4a15      	ldr	r2, [pc, #84]	@ (801c380 <TIM_OC4_SetConfig+0x80>)
 801c32c:	4013      	ands	r3, r2
 801c32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801c330:	68fb      	ldr	r3, [r7, #12]
 801c332:	4a14      	ldr	r2, [pc, #80]	@ (801c384 <TIM_OC4_SetConfig+0x84>)
 801c334:	4013      	ands	r3, r2
 801c336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	681b      	ldr	r3, [r3, #0]
 801c33c:	021b      	lsls	r3, r3, #8
 801c33e:	68fa      	ldr	r2, [r7, #12]
 801c340:	4313      	orrs	r3, r2
 801c342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801c344:	697b      	ldr	r3, [r7, #20]
 801c346:	4a10      	ldr	r2, [pc, #64]	@ (801c388 <TIM_OC4_SetConfig+0x88>)
 801c348:	4013      	ands	r3, r2
 801c34a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801c34c:	683b      	ldr	r3, [r7, #0]
 801c34e:	689b      	ldr	r3, [r3, #8]
 801c350:	031b      	lsls	r3, r3, #12
 801c352:	697a      	ldr	r2, [r7, #20]
 801c354:	4313      	orrs	r3, r2
 801c356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	693a      	ldr	r2, [r7, #16]
 801c35c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	68fa      	ldr	r2, [r7, #12]
 801c362:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801c364:	683b      	ldr	r3, [r7, #0]
 801c366:	685a      	ldr	r2, [r3, #4]
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	697a      	ldr	r2, [r7, #20]
 801c370:	621a      	str	r2, [r3, #32]
}
 801c372:	46c0      	nop			@ (mov r8, r8)
 801c374:	46bd      	mov	sp, r7
 801c376:	b006      	add	sp, #24
 801c378:	bd80      	pop	{r7, pc}
 801c37a:	46c0      	nop			@ (mov r8, r8)
 801c37c:	ffffefff 	.word	0xffffefff
 801c380:	ffff8fff 	.word	0xffff8fff
 801c384:	fffffcff 	.word	0xfffffcff
 801c388:	ffffdfff 	.word	0xffffdfff

0801c38c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801c38c:	b580      	push	{r7, lr}
 801c38e:	b086      	sub	sp, #24
 801c390:	af00      	add	r7, sp, #0
 801c392:	60f8      	str	r0, [r7, #12]
 801c394:	60b9      	str	r1, [r7, #8]
 801c396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801c398:	68bb      	ldr	r3, [r7, #8]
 801c39a:	221f      	movs	r2, #31
 801c39c:	4013      	ands	r3, r2
 801c39e:	2201      	movs	r2, #1
 801c3a0:	409a      	lsls	r2, r3
 801c3a2:	0013      	movs	r3, r2
 801c3a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801c3a6:	68fb      	ldr	r3, [r7, #12]
 801c3a8:	6a1b      	ldr	r3, [r3, #32]
 801c3aa:	697a      	ldr	r2, [r7, #20]
 801c3ac:	43d2      	mvns	r2, r2
 801c3ae:	401a      	ands	r2, r3
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	6a1a      	ldr	r2, [r3, #32]
 801c3b8:	68bb      	ldr	r3, [r7, #8]
 801c3ba:	211f      	movs	r1, #31
 801c3bc:	400b      	ands	r3, r1
 801c3be:	6879      	ldr	r1, [r7, #4]
 801c3c0:	4099      	lsls	r1, r3
 801c3c2:	000b      	movs	r3, r1
 801c3c4:	431a      	orrs	r2, r3
 801c3c6:	68fb      	ldr	r3, [r7, #12]
 801c3c8:	621a      	str	r2, [r3, #32]
}
 801c3ca:	46c0      	nop			@ (mov r8, r8)
 801c3cc:	46bd      	mov	sp, r7
 801c3ce:	b006      	add	sp, #24
 801c3d0:	bd80      	pop	{r7, pc}
	...

0801c3d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801c3d4:	b580      	push	{r7, lr}
 801c3d6:	b084      	sub	sp, #16
 801c3d8:	af00      	add	r7, sp, #0
 801c3da:	6078      	str	r0, [r7, #4]
 801c3dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	2238      	movs	r2, #56	@ 0x38
 801c3e2:	5c9b      	ldrb	r3, [r3, r2]
 801c3e4:	2b01      	cmp	r3, #1
 801c3e6:	d101      	bne.n	801c3ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801c3e8:	2302      	movs	r3, #2
 801c3ea:	e047      	b.n	801c47c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	2238      	movs	r2, #56	@ 0x38
 801c3f0:	2101      	movs	r1, #1
 801c3f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	2239      	movs	r2, #57	@ 0x39
 801c3f8:	2102      	movs	r1, #2
 801c3fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	685b      	ldr	r3, [r3, #4]
 801c402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	689b      	ldr	r3, [r3, #8]
 801c40a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	2270      	movs	r2, #112	@ 0x70
 801c410:	4393      	bics	r3, r2
 801c412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801c414:	683b      	ldr	r3, [r7, #0]
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	68fa      	ldr	r2, [r7, #12]
 801c41a:	4313      	orrs	r3, r2
 801c41c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	68fa      	ldr	r2, [r7, #12]
 801c424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	681a      	ldr	r2, [r3, #0]
 801c42a:	2380      	movs	r3, #128	@ 0x80
 801c42c:	05db      	lsls	r3, r3, #23
 801c42e:	429a      	cmp	r2, r3
 801c430:	d00e      	beq.n	801c450 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	4a13      	ldr	r2, [pc, #76]	@ (801c484 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801c438:	4293      	cmp	r3, r2
 801c43a:	d009      	beq.n	801c450 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	4a11      	ldr	r2, [pc, #68]	@ (801c488 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801c442:	4293      	cmp	r3, r2
 801c444:	d004      	beq.n	801c450 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	4a10      	ldr	r2, [pc, #64]	@ (801c48c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801c44c:	4293      	cmp	r3, r2
 801c44e:	d10c      	bne.n	801c46a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801c450:	68bb      	ldr	r3, [r7, #8]
 801c452:	2280      	movs	r2, #128	@ 0x80
 801c454:	4393      	bics	r3, r2
 801c456:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801c458:	683b      	ldr	r3, [r7, #0]
 801c45a:	685b      	ldr	r3, [r3, #4]
 801c45c:	68ba      	ldr	r2, [r7, #8]
 801c45e:	4313      	orrs	r3, r2
 801c460:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	68ba      	ldr	r2, [r7, #8]
 801c468:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	2239      	movs	r2, #57	@ 0x39
 801c46e:	2101      	movs	r1, #1
 801c470:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	2238      	movs	r2, #56	@ 0x38
 801c476:	2100      	movs	r1, #0
 801c478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c47a:	2300      	movs	r3, #0
}
 801c47c:	0018      	movs	r0, r3
 801c47e:	46bd      	mov	sp, r7
 801c480:	b004      	add	sp, #16
 801c482:	bd80      	pop	{r7, pc}
 801c484:	40000400 	.word	0x40000400
 801c488:	40010800 	.word	0x40010800
 801c48c:	40011400 	.word	0x40011400

0801c490 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801c490:	b580      	push	{r7, lr}
 801c492:	b082      	sub	sp, #8
 801c494:	af00      	add	r7, sp, #0
 801c496:	6078      	str	r0, [r7, #4]
 801c498:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	2238      	movs	r2, #56	@ 0x38
 801c49e:	5c9b      	ldrb	r3, [r3, r2]
 801c4a0:	2b01      	cmp	r3, #1
 801c4a2:	d101      	bne.n	801c4a8 <HAL_TIMEx_RemapConfig+0x18>
 801c4a4:	2302      	movs	r3, #2
 801c4a6:	e00c      	b.n	801c4c2 <HAL_TIMEx_RemapConfig+0x32>
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	2238      	movs	r2, #56	@ 0x38
 801c4ac:	2101      	movs	r1, #1
 801c4ae:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	683a      	ldr	r2, [r7, #0]
 801c4b6:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	2238      	movs	r2, #56	@ 0x38
 801c4bc:	2100      	movs	r1, #0
 801c4be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c4c0:	2300      	movs	r3, #0
}
 801c4c2:	0018      	movs	r0, r3
 801c4c4:	46bd      	mov	sp, r7
 801c4c6:	b002      	add	sp, #8
 801c4c8:	bd80      	pop	{r7, pc}
	...

0801c4cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801c4cc:	b580      	push	{r7, lr}
 801c4ce:	b082      	sub	sp, #8
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d101      	bne.n	801c4de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801c4da:	2301      	movs	r3, #1
 801c4dc:	e053      	b.n	801c586 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d116      	bne.n	801c514 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	2278      	movs	r2, #120	@ 0x78
 801c4ea:	2100      	movs	r1, #0
 801c4ec:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	0018      	movs	r0, r3
 801c4f2:	f000 fd65 	bl	801cfc0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	22b0      	movs	r2, #176	@ 0xb0
 801c4fa:	589b      	ldr	r3, [r3, r2]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d103      	bne.n	801c508 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	21b0      	movs	r1, #176	@ 0xb0
 801c504:	4a22      	ldr	r2, [pc, #136]	@ (801c590 <HAL_UART_Init+0xc4>)
 801c506:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	22b0      	movs	r2, #176	@ 0xb0
 801c50c:	589b      	ldr	r3, [r3, r2]
 801c50e:	687a      	ldr	r2, [r7, #4]
 801c510:	0010      	movs	r0, r2
 801c512:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	2224      	movs	r2, #36	@ 0x24
 801c518:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	681a      	ldr	r2, [r3, #0]
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	2101      	movs	r1, #1
 801c526:	438a      	bics	r2, r1
 801c528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	0018      	movs	r0, r3
 801c52e:	f000 fd8b 	bl	801d048 <UART_SetConfig>
 801c532:	0003      	movs	r3, r0
 801c534:	2b01      	cmp	r3, #1
 801c536:	d101      	bne.n	801c53c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801c538:	2301      	movs	r3, #1
 801c53a:	e024      	b.n	801c586 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c540:	2b00      	cmp	r3, #0
 801c542:	d003      	beq.n	801c54c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	0018      	movs	r0, r3
 801c548:	f001 f81c 	bl	801d584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	685a      	ldr	r2, [r3, #4]
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	490f      	ldr	r1, [pc, #60]	@ (801c594 <HAL_UART_Init+0xc8>)
 801c558:	400a      	ands	r2, r1
 801c55a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	689a      	ldr	r2, [r3, #8]
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	681b      	ldr	r3, [r3, #0]
 801c566:	212a      	movs	r1, #42	@ 0x2a
 801c568:	438a      	bics	r2, r1
 801c56a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	681a      	ldr	r2, [r3, #0]
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	2101      	movs	r1, #1
 801c578:	430a      	orrs	r2, r1
 801c57a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	0018      	movs	r0, r3
 801c580:	f001 f8b4 	bl	801d6ec <UART_CheckIdleState>
 801c584:	0003      	movs	r3, r0
}
 801c586:	0018      	movs	r0, r3
 801c588:	46bd      	mov	sp, r7
 801c58a:	b002      	add	sp, #8
 801c58c:	bd80      	pop	{r7, pc}
 801c58e:	46c0      	nop			@ (mov r8, r8)
 801c590:	08012d8d 	.word	0x08012d8d
 801c594:	ffffb7ff 	.word	0xffffb7ff

0801c598 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c598:	b580      	push	{r7, lr}
 801c59a:	b08a      	sub	sp, #40	@ 0x28
 801c59c:	af02      	add	r7, sp, #8
 801c59e:	60f8      	str	r0, [r7, #12]
 801c5a0:	60b9      	str	r1, [r7, #8]
 801c5a2:	603b      	str	r3, [r7, #0]
 801c5a4:	1dbb      	adds	r3, r7, #6
 801c5a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c5ac:	2b20      	cmp	r3, #32
 801c5ae:	d000      	beq.n	801c5b2 <HAL_UART_Transmit+0x1a>
 801c5b0:	e08c      	b.n	801c6cc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801c5b2:	68bb      	ldr	r3, [r7, #8]
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d003      	beq.n	801c5c0 <HAL_UART_Transmit+0x28>
 801c5b8:	1dbb      	adds	r3, r7, #6
 801c5ba:	881b      	ldrh	r3, [r3, #0]
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d101      	bne.n	801c5c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801c5c0:	2301      	movs	r3, #1
 801c5c2:	e084      	b.n	801c6ce <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c5c4:	68fb      	ldr	r3, [r7, #12]
 801c5c6:	689a      	ldr	r2, [r3, #8]
 801c5c8:	2380      	movs	r3, #128	@ 0x80
 801c5ca:	015b      	lsls	r3, r3, #5
 801c5cc:	429a      	cmp	r2, r3
 801c5ce:	d109      	bne.n	801c5e4 <HAL_UART_Transmit+0x4c>
 801c5d0:	68fb      	ldr	r3, [r7, #12]
 801c5d2:	691b      	ldr	r3, [r3, #16]
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d105      	bne.n	801c5e4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c5d8:	68bb      	ldr	r3, [r7, #8]
 801c5da:	2201      	movs	r2, #1
 801c5dc:	4013      	ands	r3, r2
 801c5de:	d001      	beq.n	801c5e4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801c5e0:	2301      	movs	r3, #1
 801c5e2:	e074      	b.n	801c6ce <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	2284      	movs	r2, #132	@ 0x84
 801c5e8:	2100      	movs	r1, #0
 801c5ea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	2221      	movs	r2, #33	@ 0x21
 801c5f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801c5f2:	f7f7 fa99 	bl	8013b28 <HAL_GetTick>
 801c5f6:	0003      	movs	r3, r0
 801c5f8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801c5fa:	68fb      	ldr	r3, [r7, #12]
 801c5fc:	1dba      	adds	r2, r7, #6
 801c5fe:	2150      	movs	r1, #80	@ 0x50
 801c600:	8812      	ldrh	r2, [r2, #0]
 801c602:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	1dba      	adds	r2, r7, #6
 801c608:	2152      	movs	r1, #82	@ 0x52
 801c60a:	8812      	ldrh	r2, [r2, #0]
 801c60c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	689a      	ldr	r2, [r3, #8]
 801c612:	2380      	movs	r3, #128	@ 0x80
 801c614:	015b      	lsls	r3, r3, #5
 801c616:	429a      	cmp	r2, r3
 801c618:	d108      	bne.n	801c62c <HAL_UART_Transmit+0x94>
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	691b      	ldr	r3, [r3, #16]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d104      	bne.n	801c62c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801c622:	2300      	movs	r3, #0
 801c624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801c626:	68bb      	ldr	r3, [r7, #8]
 801c628:	61bb      	str	r3, [r7, #24]
 801c62a:	e003      	b.n	801c634 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801c62c:	68bb      	ldr	r3, [r7, #8]
 801c62e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801c630:	2300      	movs	r3, #0
 801c632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801c634:	e02f      	b.n	801c696 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c636:	697a      	ldr	r2, [r7, #20]
 801c638:	68f8      	ldr	r0, [r7, #12]
 801c63a:	683b      	ldr	r3, [r7, #0]
 801c63c:	9300      	str	r3, [sp, #0]
 801c63e:	0013      	movs	r3, r2
 801c640:	2200      	movs	r2, #0
 801c642:	2180      	movs	r1, #128	@ 0x80
 801c644:	f001 f8fa 	bl	801d83c <UART_WaitOnFlagUntilTimeout>
 801c648:	1e03      	subs	r3, r0, #0
 801c64a:	d004      	beq.n	801c656 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801c64c:	68fb      	ldr	r3, [r7, #12]
 801c64e:	2220      	movs	r2, #32
 801c650:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801c652:	2303      	movs	r3, #3
 801c654:	e03b      	b.n	801c6ce <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801c656:	69fb      	ldr	r3, [r7, #28]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d10b      	bne.n	801c674 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801c65c:	69bb      	ldr	r3, [r7, #24]
 801c65e:	881b      	ldrh	r3, [r3, #0]
 801c660:	001a      	movs	r2, r3
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	681b      	ldr	r3, [r3, #0]
 801c666:	05d2      	lsls	r2, r2, #23
 801c668:	0dd2      	lsrs	r2, r2, #23
 801c66a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801c66c:	69bb      	ldr	r3, [r7, #24]
 801c66e:	3302      	adds	r3, #2
 801c670:	61bb      	str	r3, [r7, #24]
 801c672:	e007      	b.n	801c684 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801c674:	69fb      	ldr	r3, [r7, #28]
 801c676:	781a      	ldrb	r2, [r3, #0]
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801c67e:	69fb      	ldr	r3, [r7, #28]
 801c680:	3301      	adds	r3, #1
 801c682:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	2252      	movs	r2, #82	@ 0x52
 801c688:	5a9b      	ldrh	r3, [r3, r2]
 801c68a:	b29b      	uxth	r3, r3
 801c68c:	3b01      	subs	r3, #1
 801c68e:	b299      	uxth	r1, r3
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	2252      	movs	r2, #82	@ 0x52
 801c694:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801c696:	68fb      	ldr	r3, [r7, #12]
 801c698:	2252      	movs	r2, #82	@ 0x52
 801c69a:	5a9b      	ldrh	r3, [r3, r2]
 801c69c:	b29b      	uxth	r3, r3
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d1c9      	bne.n	801c636 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801c6a2:	697a      	ldr	r2, [r7, #20]
 801c6a4:	68f8      	ldr	r0, [r7, #12]
 801c6a6:	683b      	ldr	r3, [r7, #0]
 801c6a8:	9300      	str	r3, [sp, #0]
 801c6aa:	0013      	movs	r3, r2
 801c6ac:	2200      	movs	r2, #0
 801c6ae:	2140      	movs	r1, #64	@ 0x40
 801c6b0:	f001 f8c4 	bl	801d83c <UART_WaitOnFlagUntilTimeout>
 801c6b4:	1e03      	subs	r3, r0, #0
 801c6b6:	d004      	beq.n	801c6c2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	2220      	movs	r2, #32
 801c6bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801c6be:	2303      	movs	r3, #3
 801c6c0:	e005      	b.n	801c6ce <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	2220      	movs	r2, #32
 801c6c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	e000      	b.n	801c6ce <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801c6cc:	2302      	movs	r3, #2
  }
}
 801c6ce:	0018      	movs	r0, r3
 801c6d0:	46bd      	mov	sp, r7
 801c6d2:	b008      	add	sp, #32
 801c6d4:	bd80      	pop	{r7, pc}
	...

0801c6d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c6d8:	b580      	push	{r7, lr}
 801c6da:	b088      	sub	sp, #32
 801c6dc:	af00      	add	r7, sp, #0
 801c6de:	60f8      	str	r0, [r7, #12]
 801c6e0:	60b9      	str	r1, [r7, #8]
 801c6e2:	1dbb      	adds	r3, r7, #6
 801c6e4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	2280      	movs	r2, #128	@ 0x80
 801c6ea:	589b      	ldr	r3, [r3, r2]
 801c6ec:	2b20      	cmp	r3, #32
 801c6ee:	d14a      	bne.n	801c786 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c6f0:	68bb      	ldr	r3, [r7, #8]
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d003      	beq.n	801c6fe <HAL_UART_Receive_IT+0x26>
 801c6f6:	1dbb      	adds	r3, r7, #6
 801c6f8:	881b      	ldrh	r3, [r3, #0]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d101      	bne.n	801c702 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801c6fe:	2301      	movs	r3, #1
 801c700:	e042      	b.n	801c788 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	689a      	ldr	r2, [r3, #8]
 801c706:	2380      	movs	r3, #128	@ 0x80
 801c708:	015b      	lsls	r3, r3, #5
 801c70a:	429a      	cmp	r2, r3
 801c70c:	d109      	bne.n	801c722 <HAL_UART_Receive_IT+0x4a>
 801c70e:	68fb      	ldr	r3, [r7, #12]
 801c710:	691b      	ldr	r3, [r3, #16]
 801c712:	2b00      	cmp	r3, #0
 801c714:	d105      	bne.n	801c722 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c716:	68bb      	ldr	r3, [r7, #8]
 801c718:	2201      	movs	r2, #1
 801c71a:	4013      	ands	r3, r2
 801c71c:	d001      	beq.n	801c722 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801c71e:	2301      	movs	r3, #1
 801c720:	e032      	b.n	801c788 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c722:	68fb      	ldr	r3, [r7, #12]
 801c724:	2200      	movs	r2, #0
 801c726:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c728:	68fb      	ldr	r3, [r7, #12]
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	4a18      	ldr	r2, [pc, #96]	@ (801c790 <HAL_UART_Receive_IT+0xb8>)
 801c72e:	4293      	cmp	r3, r2
 801c730:	d020      	beq.n	801c774 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c732:	68fb      	ldr	r3, [r7, #12]
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	685a      	ldr	r2, [r3, #4]
 801c738:	2380      	movs	r3, #128	@ 0x80
 801c73a:	041b      	lsls	r3, r3, #16
 801c73c:	4013      	ands	r3, r2
 801c73e:	d019      	beq.n	801c774 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c740:	f3ef 8310 	mrs	r3, PRIMASK
 801c744:	613b      	str	r3, [r7, #16]
  return(result);
 801c746:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c748:	61fb      	str	r3, [r7, #28]
 801c74a:	2301      	movs	r3, #1
 801c74c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c74e:	697b      	ldr	r3, [r7, #20]
 801c750:	f383 8810 	msr	PRIMASK, r3
}
 801c754:	46c0      	nop			@ (mov r8, r8)
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	681a      	ldr	r2, [r3, #0]
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	2180      	movs	r1, #128	@ 0x80
 801c762:	04c9      	lsls	r1, r1, #19
 801c764:	430a      	orrs	r2, r1
 801c766:	601a      	str	r2, [r3, #0]
 801c768:	69fb      	ldr	r3, [r7, #28]
 801c76a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c76c:	69bb      	ldr	r3, [r7, #24]
 801c76e:	f383 8810 	msr	PRIMASK, r3
}
 801c772:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801c774:	1dbb      	adds	r3, r7, #6
 801c776:	881a      	ldrh	r2, [r3, #0]
 801c778:	68b9      	ldr	r1, [r7, #8]
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	0018      	movs	r0, r3
 801c77e:	f001 f8c7 	bl	801d910 <UART_Start_Receive_IT>
 801c782:	0003      	movs	r3, r0
 801c784:	e000      	b.n	801c788 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801c786:	2302      	movs	r3, #2
  }
}
 801c788:	0018      	movs	r0, r3
 801c78a:	46bd      	mov	sp, r7
 801c78c:	b008      	add	sp, #32
 801c78e:	bd80      	pop	{r7, pc}
 801c790:	40004800 	.word	0x40004800

0801c794 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801c794:	b580      	push	{r7, lr}
 801c796:	b088      	sub	sp, #32
 801c798:	af00      	add	r7, sp, #0
 801c79a:	60f8      	str	r0, [r7, #12]
 801c79c:	60b9      	str	r1, [r7, #8]
 801c79e:	1dbb      	adds	r3, r7, #6
 801c7a0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c7a6:	2b20      	cmp	r3, #32
 801c7a8:	d000      	beq.n	801c7ac <HAL_UART_Transmit_DMA+0x18>
 801c7aa:	e077      	b.n	801c89c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801c7ac:	68bb      	ldr	r3, [r7, #8]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d003      	beq.n	801c7ba <HAL_UART_Transmit_DMA+0x26>
 801c7b2:	1dbb      	adds	r3, r7, #6
 801c7b4:	881b      	ldrh	r3, [r3, #0]
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d101      	bne.n	801c7be <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801c7ba:	2301      	movs	r3, #1
 801c7bc:	e06f      	b.n	801c89e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	689a      	ldr	r2, [r3, #8]
 801c7c2:	2380      	movs	r3, #128	@ 0x80
 801c7c4:	015b      	lsls	r3, r3, #5
 801c7c6:	429a      	cmp	r2, r3
 801c7c8:	d109      	bne.n	801c7de <HAL_UART_Transmit_DMA+0x4a>
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	691b      	ldr	r3, [r3, #16]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d105      	bne.n	801c7de <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c7d2:	68bb      	ldr	r3, [r7, #8]
 801c7d4:	2201      	movs	r2, #1
 801c7d6:	4013      	ands	r3, r2
 801c7d8:	d001      	beq.n	801c7de <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801c7da:	2301      	movs	r3, #1
 801c7dc:	e05f      	b.n	801c89e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	68ba      	ldr	r2, [r7, #8]
 801c7e2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	1dba      	adds	r2, r7, #6
 801c7e8:	2150      	movs	r1, #80	@ 0x50
 801c7ea:	8812      	ldrh	r2, [r2, #0]
 801c7ec:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801c7ee:	68fb      	ldr	r3, [r7, #12]
 801c7f0:	1dba      	adds	r2, r7, #6
 801c7f2:	2152      	movs	r1, #82	@ 0x52
 801c7f4:	8812      	ldrh	r2, [r2, #0]
 801c7f6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	2284      	movs	r2, #132	@ 0x84
 801c7fc:	2100      	movs	r1, #0
 801c7fe:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	2221      	movs	r2, #33	@ 0x21
 801c804:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801c806:	68fb      	ldr	r3, [r7, #12]
 801c808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d027      	beq.n	801c85e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c812:	4a25      	ldr	r2, [pc, #148]	@ (801c8a8 <HAL_UART_Transmit_DMA+0x114>)
 801c814:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c81a:	4a24      	ldr	r2, [pc, #144]	@ (801c8ac <HAL_UART_Transmit_DMA+0x118>)
 801c81c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c822:	4a23      	ldr	r2, [pc, #140]	@ (801c8b0 <HAL_UART_Transmit_DMA+0x11c>)
 801c824:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801c826:	68fb      	ldr	r3, [r7, #12]
 801c828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c82a:	2200      	movs	r2, #0
 801c82c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c836:	0019      	movs	r1, r3
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	3328      	adds	r3, #40	@ 0x28
 801c83e:	001a      	movs	r2, r3
 801c840:	1dbb      	adds	r3, r7, #6
 801c842:	881b      	ldrh	r3, [r3, #0]
 801c844:	f7f7 fec2 	bl	80145cc <HAL_DMA_Start_IT>
 801c848:	1e03      	subs	r3, r0, #0
 801c84a:	d008      	beq.n	801c85e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801c84c:	68fb      	ldr	r3, [r7, #12]
 801c84e:	2284      	movs	r2, #132	@ 0x84
 801c850:	2110      	movs	r1, #16
 801c852:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	2220      	movs	r2, #32
 801c858:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801c85a:	2301      	movs	r3, #1
 801c85c:	e01f      	b.n	801c89e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801c85e:	68fb      	ldr	r3, [r7, #12]
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	2240      	movs	r2, #64	@ 0x40
 801c864:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c866:	f3ef 8310 	mrs	r3, PRIMASK
 801c86a:	613b      	str	r3, [r7, #16]
  return(result);
 801c86c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801c86e:	61fb      	str	r3, [r7, #28]
 801c870:	2301      	movs	r3, #1
 801c872:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c874:	697b      	ldr	r3, [r7, #20]
 801c876:	f383 8810 	msr	PRIMASK, r3
}
 801c87a:	46c0      	nop			@ (mov r8, r8)
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	681b      	ldr	r3, [r3, #0]
 801c880:	689a      	ldr	r2, [r3, #8]
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	2180      	movs	r1, #128	@ 0x80
 801c888:	430a      	orrs	r2, r1
 801c88a:	609a      	str	r2, [r3, #8]
 801c88c:	69fb      	ldr	r3, [r7, #28]
 801c88e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c890:	69bb      	ldr	r3, [r7, #24]
 801c892:	f383 8810 	msr	PRIMASK, r3
}
 801c896:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801c898:	2300      	movs	r3, #0
 801c89a:	e000      	b.n	801c89e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801c89c:	2302      	movs	r3, #2
  }
}
 801c89e:	0018      	movs	r0, r3
 801c8a0:	46bd      	mov	sp, r7
 801c8a2:	b008      	add	sp, #32
 801c8a4:	bd80      	pop	{r7, pc}
 801c8a6:	46c0      	nop			@ (mov r8, r8)
 801c8a8:	0801dcf5 	.word	0x0801dcf5
 801c8ac:	0801dd91 	.word	0x0801dd91
 801c8b0:	0801df31 	.word	0x0801df31

0801c8b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c8b4:	b580      	push	{r7, lr}
 801c8b6:	b088      	sub	sp, #32
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	60f8      	str	r0, [r7, #12]
 801c8bc:	60b9      	str	r1, [r7, #8]
 801c8be:	1dbb      	adds	r3, r7, #6
 801c8c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	2280      	movs	r2, #128	@ 0x80
 801c8c6:	589b      	ldr	r3, [r3, r2]
 801c8c8:	2b20      	cmp	r3, #32
 801c8ca:	d14a      	bne.n	801c962 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c8cc:	68bb      	ldr	r3, [r7, #8]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d003      	beq.n	801c8da <HAL_UART_Receive_DMA+0x26>
 801c8d2:	1dbb      	adds	r3, r7, #6
 801c8d4:	881b      	ldrh	r3, [r3, #0]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d101      	bne.n	801c8de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801c8da:	2301      	movs	r3, #1
 801c8dc:	e042      	b.n	801c964 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c8de:	68fb      	ldr	r3, [r7, #12]
 801c8e0:	689a      	ldr	r2, [r3, #8]
 801c8e2:	2380      	movs	r3, #128	@ 0x80
 801c8e4:	015b      	lsls	r3, r3, #5
 801c8e6:	429a      	cmp	r2, r3
 801c8e8:	d109      	bne.n	801c8fe <HAL_UART_Receive_DMA+0x4a>
 801c8ea:	68fb      	ldr	r3, [r7, #12]
 801c8ec:	691b      	ldr	r3, [r3, #16]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d105      	bne.n	801c8fe <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c8f2:	68bb      	ldr	r3, [r7, #8]
 801c8f4:	2201      	movs	r2, #1
 801c8f6:	4013      	ands	r3, r2
 801c8f8:	d001      	beq.n	801c8fe <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801c8fa:	2301      	movs	r3, #1
 801c8fc:	e032      	b.n	801c964 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	2200      	movs	r2, #0
 801c902:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	4a18      	ldr	r2, [pc, #96]	@ (801c96c <HAL_UART_Receive_DMA+0xb8>)
 801c90a:	4293      	cmp	r3, r2
 801c90c:	d020      	beq.n	801c950 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	685a      	ldr	r2, [r3, #4]
 801c914:	2380      	movs	r3, #128	@ 0x80
 801c916:	041b      	lsls	r3, r3, #16
 801c918:	4013      	ands	r3, r2
 801c91a:	d019      	beq.n	801c950 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c91c:	f3ef 8310 	mrs	r3, PRIMASK
 801c920:	613b      	str	r3, [r7, #16]
  return(result);
 801c922:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c924:	61fb      	str	r3, [r7, #28]
 801c926:	2301      	movs	r3, #1
 801c928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c92a:	697b      	ldr	r3, [r7, #20]
 801c92c:	f383 8810 	msr	PRIMASK, r3
}
 801c930:	46c0      	nop			@ (mov r8, r8)
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	681b      	ldr	r3, [r3, #0]
 801c936:	681a      	ldr	r2, [r3, #0]
 801c938:	68fb      	ldr	r3, [r7, #12]
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	2180      	movs	r1, #128	@ 0x80
 801c93e:	04c9      	lsls	r1, r1, #19
 801c940:	430a      	orrs	r2, r1
 801c942:	601a      	str	r2, [r3, #0]
 801c944:	69fb      	ldr	r3, [r7, #28]
 801c946:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c948:	69bb      	ldr	r3, [r7, #24]
 801c94a:	f383 8810 	msr	PRIMASK, r3
}
 801c94e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801c950:	1dbb      	adds	r3, r7, #6
 801c952:	881a      	ldrh	r2, [r3, #0]
 801c954:	68b9      	ldr	r1, [r7, #8]
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	0018      	movs	r0, r3
 801c95a:	f001 f8a3 	bl	801daa4 <UART_Start_Receive_DMA>
 801c95e:	0003      	movs	r3, r0
 801c960:	e000      	b.n	801c964 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801c962:	2302      	movs	r3, #2
  }
}
 801c964:	0018      	movs	r0, r3
 801c966:	46bd      	mov	sp, r7
 801c968:	b008      	add	sp, #32
 801c96a:	bd80      	pop	{r7, pc}
 801c96c:	40004800 	.word	0x40004800

0801c970 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c970:	b590      	push	{r4, r7, lr}
 801c972:	b0ab      	sub	sp, #172	@ 0xac
 801c974:	af00      	add	r7, sp, #0
 801c976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	69db      	ldr	r3, [r3, #28]
 801c97e:	22a4      	movs	r2, #164	@ 0xa4
 801c980:	18b9      	adds	r1, r7, r2
 801c982:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	20a0      	movs	r0, #160	@ 0xa0
 801c98c:	1839      	adds	r1, r7, r0
 801c98e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	689b      	ldr	r3, [r3, #8]
 801c996:	219c      	movs	r1, #156	@ 0x9c
 801c998:	1879      	adds	r1, r7, r1
 801c99a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801c99c:	0011      	movs	r1, r2
 801c99e:	18bb      	adds	r3, r7, r2
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	4a9c      	ldr	r2, [pc, #624]	@ (801cc14 <HAL_UART_IRQHandler+0x2a4>)
 801c9a4:	4013      	ands	r3, r2
 801c9a6:	2298      	movs	r2, #152	@ 0x98
 801c9a8:	18bc      	adds	r4, r7, r2
 801c9aa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801c9ac:	18bb      	adds	r3, r7, r2
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d114      	bne.n	801c9de <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801c9b4:	187b      	adds	r3, r7, r1
 801c9b6:	681b      	ldr	r3, [r3, #0]
 801c9b8:	2220      	movs	r2, #32
 801c9ba:	4013      	ands	r3, r2
 801c9bc:	d00f      	beq.n	801c9de <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801c9be:	183b      	adds	r3, r7, r0
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	2220      	movs	r2, #32
 801c9c4:	4013      	ands	r3, r2
 801c9c6:	d00a      	beq.n	801c9de <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d100      	bne.n	801c9d2 <HAL_UART_IRQHandler+0x62>
 801c9d0:	e2aa      	b.n	801cf28 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c9d6:	687a      	ldr	r2, [r7, #4]
 801c9d8:	0010      	movs	r0, r2
 801c9da:	4798      	blx	r3
      }
      return;
 801c9dc:	e2a4      	b.n	801cf28 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801c9de:	2398      	movs	r3, #152	@ 0x98
 801c9e0:	18fb      	adds	r3, r7, r3
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d100      	bne.n	801c9ea <HAL_UART_IRQHandler+0x7a>
 801c9e8:	e11a      	b.n	801cc20 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801c9ea:	239c      	movs	r3, #156	@ 0x9c
 801c9ec:	18fb      	adds	r3, r7, r3
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	2201      	movs	r2, #1
 801c9f2:	4013      	ands	r3, r2
 801c9f4:	d106      	bne.n	801ca04 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801c9f6:	23a0      	movs	r3, #160	@ 0xa0
 801c9f8:	18fb      	adds	r3, r7, r3
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	4a86      	ldr	r2, [pc, #536]	@ (801cc18 <HAL_UART_IRQHandler+0x2a8>)
 801c9fe:	4013      	ands	r3, r2
 801ca00:	d100      	bne.n	801ca04 <HAL_UART_IRQHandler+0x94>
 801ca02:	e10d      	b.n	801cc20 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801ca04:	23a4      	movs	r3, #164	@ 0xa4
 801ca06:	18fb      	adds	r3, r7, r3
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	2201      	movs	r2, #1
 801ca0c:	4013      	ands	r3, r2
 801ca0e:	d012      	beq.n	801ca36 <HAL_UART_IRQHandler+0xc6>
 801ca10:	23a0      	movs	r3, #160	@ 0xa0
 801ca12:	18fb      	adds	r3, r7, r3
 801ca14:	681a      	ldr	r2, [r3, #0]
 801ca16:	2380      	movs	r3, #128	@ 0x80
 801ca18:	005b      	lsls	r3, r3, #1
 801ca1a:	4013      	ands	r3, r2
 801ca1c:	d00b      	beq.n	801ca36 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	2201      	movs	r2, #1
 801ca24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	2284      	movs	r2, #132	@ 0x84
 801ca2a:	589b      	ldr	r3, [r3, r2]
 801ca2c:	2201      	movs	r2, #1
 801ca2e:	431a      	orrs	r2, r3
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	2184      	movs	r1, #132	@ 0x84
 801ca34:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ca36:	23a4      	movs	r3, #164	@ 0xa4
 801ca38:	18fb      	adds	r3, r7, r3
 801ca3a:	681b      	ldr	r3, [r3, #0]
 801ca3c:	2202      	movs	r2, #2
 801ca3e:	4013      	ands	r3, r2
 801ca40:	d011      	beq.n	801ca66 <HAL_UART_IRQHandler+0xf6>
 801ca42:	239c      	movs	r3, #156	@ 0x9c
 801ca44:	18fb      	adds	r3, r7, r3
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	2201      	movs	r2, #1
 801ca4a:	4013      	ands	r3, r2
 801ca4c:	d00b      	beq.n	801ca66 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	2202      	movs	r2, #2
 801ca54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	2284      	movs	r2, #132	@ 0x84
 801ca5a:	589b      	ldr	r3, [r3, r2]
 801ca5c:	2204      	movs	r2, #4
 801ca5e:	431a      	orrs	r2, r3
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	2184      	movs	r1, #132	@ 0x84
 801ca64:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ca66:	23a4      	movs	r3, #164	@ 0xa4
 801ca68:	18fb      	adds	r3, r7, r3
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	2204      	movs	r2, #4
 801ca6e:	4013      	ands	r3, r2
 801ca70:	d011      	beq.n	801ca96 <HAL_UART_IRQHandler+0x126>
 801ca72:	239c      	movs	r3, #156	@ 0x9c
 801ca74:	18fb      	adds	r3, r7, r3
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	2201      	movs	r2, #1
 801ca7a:	4013      	ands	r3, r2
 801ca7c:	d00b      	beq.n	801ca96 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	2204      	movs	r2, #4
 801ca84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	2284      	movs	r2, #132	@ 0x84
 801ca8a:	589b      	ldr	r3, [r3, r2]
 801ca8c:	2202      	movs	r2, #2
 801ca8e:	431a      	orrs	r2, r3
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	2184      	movs	r1, #132	@ 0x84
 801ca94:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801ca96:	23a4      	movs	r3, #164	@ 0xa4
 801ca98:	18fb      	adds	r3, r7, r3
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	2208      	movs	r2, #8
 801ca9e:	4013      	ands	r3, r2
 801caa0:	d017      	beq.n	801cad2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801caa2:	23a0      	movs	r3, #160	@ 0xa0
 801caa4:	18fb      	adds	r3, r7, r3
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	2220      	movs	r2, #32
 801caaa:	4013      	ands	r3, r2
 801caac:	d105      	bne.n	801caba <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801caae:	239c      	movs	r3, #156	@ 0x9c
 801cab0:	18fb      	adds	r3, r7, r3
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	2201      	movs	r2, #1
 801cab6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cab8:	d00b      	beq.n	801cad2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	2208      	movs	r2, #8
 801cac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	2284      	movs	r2, #132	@ 0x84
 801cac6:	589b      	ldr	r3, [r3, r2]
 801cac8:	2208      	movs	r2, #8
 801caca:	431a      	orrs	r2, r3
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	2184      	movs	r1, #132	@ 0x84
 801cad0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801cad2:	23a4      	movs	r3, #164	@ 0xa4
 801cad4:	18fb      	adds	r3, r7, r3
 801cad6:	681a      	ldr	r2, [r3, #0]
 801cad8:	2380      	movs	r3, #128	@ 0x80
 801cada:	011b      	lsls	r3, r3, #4
 801cadc:	4013      	ands	r3, r2
 801cade:	d013      	beq.n	801cb08 <HAL_UART_IRQHandler+0x198>
 801cae0:	23a0      	movs	r3, #160	@ 0xa0
 801cae2:	18fb      	adds	r3, r7, r3
 801cae4:	681a      	ldr	r2, [r3, #0]
 801cae6:	2380      	movs	r3, #128	@ 0x80
 801cae8:	04db      	lsls	r3, r3, #19
 801caea:	4013      	ands	r3, r2
 801caec:	d00c      	beq.n	801cb08 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	2280      	movs	r2, #128	@ 0x80
 801caf4:	0112      	lsls	r2, r2, #4
 801caf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	2284      	movs	r2, #132	@ 0x84
 801cafc:	589b      	ldr	r3, [r3, r2]
 801cafe:	2220      	movs	r2, #32
 801cb00:	431a      	orrs	r2, r3
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	2184      	movs	r1, #132	@ 0x84
 801cb06:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	2284      	movs	r2, #132	@ 0x84
 801cb0c:	589b      	ldr	r3, [r3, r2]
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d100      	bne.n	801cb14 <HAL_UART_IRQHandler+0x1a4>
 801cb12:	e20b      	b.n	801cf2c <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801cb14:	23a4      	movs	r3, #164	@ 0xa4
 801cb16:	18fb      	adds	r3, r7, r3
 801cb18:	681b      	ldr	r3, [r3, #0]
 801cb1a:	2220      	movs	r2, #32
 801cb1c:	4013      	ands	r3, r2
 801cb1e:	d00e      	beq.n	801cb3e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801cb20:	23a0      	movs	r3, #160	@ 0xa0
 801cb22:	18fb      	adds	r3, r7, r3
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	2220      	movs	r2, #32
 801cb28:	4013      	ands	r3, r2
 801cb2a:	d008      	beq.n	801cb3e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d004      	beq.n	801cb3e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cb38:	687a      	ldr	r2, [r7, #4]
 801cb3a:	0010      	movs	r0, r2
 801cb3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	2284      	movs	r2, #132	@ 0x84
 801cb42:	589b      	ldr	r3, [r3, r2]
 801cb44:	2194      	movs	r1, #148	@ 0x94
 801cb46:	187a      	adds	r2, r7, r1
 801cb48:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	681b      	ldr	r3, [r3, #0]
 801cb4e:	689b      	ldr	r3, [r3, #8]
 801cb50:	2240      	movs	r2, #64	@ 0x40
 801cb52:	4013      	ands	r3, r2
 801cb54:	2b40      	cmp	r3, #64	@ 0x40
 801cb56:	d004      	beq.n	801cb62 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801cb58:	187b      	adds	r3, r7, r1
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	2228      	movs	r2, #40	@ 0x28
 801cb5e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801cb60:	d04b      	beq.n	801cbfa <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	0018      	movs	r0, r3
 801cb66:	f001 f861 	bl	801dc2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	681b      	ldr	r3, [r3, #0]
 801cb6e:	689b      	ldr	r3, [r3, #8]
 801cb70:	2240      	movs	r2, #64	@ 0x40
 801cb72:	4013      	ands	r3, r2
 801cb74:	2b40      	cmp	r3, #64	@ 0x40
 801cb76:	d139      	bne.n	801cbec <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb78:	f3ef 8310 	mrs	r3, PRIMASK
 801cb7c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801cb7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801cb80:	2090      	movs	r0, #144	@ 0x90
 801cb82:	183a      	adds	r2, r7, r0
 801cb84:	6013      	str	r3, [r2, #0]
 801cb86:	2301      	movs	r3, #1
 801cb88:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cb8c:	f383 8810 	msr	PRIMASK, r3
}
 801cb90:	46c0      	nop			@ (mov r8, r8)
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	689a      	ldr	r2, [r3, #8]
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	2140      	movs	r1, #64	@ 0x40
 801cb9e:	438a      	bics	r2, r1
 801cba0:	609a      	str	r2, [r3, #8]
 801cba2:	183b      	adds	r3, r7, r0
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cbaa:	f383 8810 	msr	PRIMASK, r3
}
 801cbae:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801cbb0:	687b      	ldr	r3, [r7, #4]
 801cbb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d012      	beq.n	801cbde <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cbbc:	4a17      	ldr	r2, [pc, #92]	@ (801cc1c <HAL_UART_IRQHandler+0x2ac>)
 801cbbe:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cbc4:	0018      	movs	r0, r3
 801cbc6:	f7f7 fda7 	bl	8014718 <HAL_DMA_Abort_IT>
 801cbca:	1e03      	subs	r3, r0, #0
 801cbcc:	d020      	beq.n	801cc10 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cbd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cbd8:	0018      	movs	r0, r3
 801cbda:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cbdc:	e018      	b.n	801cc10 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	2298      	movs	r2, #152	@ 0x98
 801cbe2:	589b      	ldr	r3, [r3, r2]
 801cbe4:	687a      	ldr	r2, [r7, #4]
 801cbe6:	0010      	movs	r0, r2
 801cbe8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cbea:	e011      	b.n	801cc10 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	2298      	movs	r2, #152	@ 0x98
 801cbf0:	589b      	ldr	r3, [r3, r2]
 801cbf2:	687a      	ldr	r2, [r7, #4]
 801cbf4:	0010      	movs	r0, r2
 801cbf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cbf8:	e00a      	b.n	801cc10 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	2298      	movs	r2, #152	@ 0x98
 801cbfe:	589b      	ldr	r3, [r3, r2]
 801cc00:	687a      	ldr	r2, [r7, #4]
 801cc02:	0010      	movs	r0, r2
 801cc04:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	2284      	movs	r2, #132	@ 0x84
 801cc0a:	2100      	movs	r1, #0
 801cc0c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801cc0e:	e18d      	b.n	801cf2c <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cc10:	46c0      	nop			@ (mov r8, r8)
    return;
 801cc12:	e18b      	b.n	801cf2c <HAL_UART_IRQHandler+0x5bc>
 801cc14:	0000080f 	.word	0x0000080f
 801cc18:	04000120 	.word	0x04000120
 801cc1c:	0801dfb9 	.word	0x0801dfb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cc24:	2b01      	cmp	r3, #1
 801cc26:	d000      	beq.n	801cc2a <HAL_UART_IRQHandler+0x2ba>
 801cc28:	e13d      	b.n	801cea6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801cc2a:	23a4      	movs	r3, #164	@ 0xa4
 801cc2c:	18fb      	adds	r3, r7, r3
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	2210      	movs	r2, #16
 801cc32:	4013      	ands	r3, r2
 801cc34:	d100      	bne.n	801cc38 <HAL_UART_IRQHandler+0x2c8>
 801cc36:	e136      	b.n	801cea6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801cc38:	23a0      	movs	r3, #160	@ 0xa0
 801cc3a:	18fb      	adds	r3, r7, r3
 801cc3c:	681b      	ldr	r3, [r3, #0]
 801cc3e:	2210      	movs	r2, #16
 801cc40:	4013      	ands	r3, r2
 801cc42:	d100      	bne.n	801cc46 <HAL_UART_IRQHandler+0x2d6>
 801cc44:	e12f      	b.n	801cea6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	2210      	movs	r2, #16
 801cc4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	689b      	ldr	r3, [r3, #8]
 801cc54:	2240      	movs	r2, #64	@ 0x40
 801cc56:	4013      	ands	r3, r2
 801cc58:	2b40      	cmp	r3, #64	@ 0x40
 801cc5a:	d000      	beq.n	801cc5e <HAL_UART_IRQHandler+0x2ee>
 801cc5c:	e0a2      	b.n	801cda4 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	685a      	ldr	r2, [r3, #4]
 801cc66:	217e      	movs	r1, #126	@ 0x7e
 801cc68:	187b      	adds	r3, r7, r1
 801cc6a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801cc6c:	187b      	adds	r3, r7, r1
 801cc6e:	881b      	ldrh	r3, [r3, #0]
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	d100      	bne.n	801cc76 <HAL_UART_IRQHandler+0x306>
 801cc74:	e15c      	b.n	801cf30 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	2258      	movs	r2, #88	@ 0x58
 801cc7a:	5a9b      	ldrh	r3, [r3, r2]
 801cc7c:	187a      	adds	r2, r7, r1
 801cc7e:	8812      	ldrh	r2, [r2, #0]
 801cc80:	429a      	cmp	r2, r3
 801cc82:	d300      	bcc.n	801cc86 <HAL_UART_IRQHandler+0x316>
 801cc84:	e154      	b.n	801cf30 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	187a      	adds	r2, r7, r1
 801cc8a:	215a      	movs	r1, #90	@ 0x5a
 801cc8c:	8812      	ldrh	r2, [r2, #0]
 801cc8e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	2220      	movs	r2, #32
 801cc9a:	4013      	ands	r3, r2
 801cc9c:	d16f      	bne.n	801cd7e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc9e:	f3ef 8310 	mrs	r3, PRIMASK
 801cca2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801cca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801cca6:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cca8:	2301      	movs	r3, #1
 801ccaa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ccae:	f383 8810 	msr	PRIMASK, r3
}
 801ccb2:	46c0      	nop			@ (mov r8, r8)
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	681a      	ldr	r2, [r3, #0]
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	49a0      	ldr	r1, [pc, #640]	@ (801cf40 <HAL_UART_IRQHandler+0x5d0>)
 801ccc0:	400a      	ands	r2, r1
 801ccc2:	601a      	str	r2, [r3, #0]
 801ccc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ccc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ccca:	f383 8810 	msr	PRIMASK, r3
}
 801ccce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccd0:	f3ef 8310 	mrs	r3, PRIMASK
 801ccd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801ccd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ccd8:	677b      	str	r3, [r7, #116]	@ 0x74
 801ccda:	2301      	movs	r3, #1
 801ccdc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cce0:	f383 8810 	msr	PRIMASK, r3
}
 801cce4:	46c0      	nop			@ (mov r8, r8)
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	689a      	ldr	r2, [r3, #8]
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	2101      	movs	r1, #1
 801ccf2:	438a      	bics	r2, r1
 801ccf4:	609a      	str	r2, [r3, #8]
 801ccf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ccf8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ccfc:	f383 8810 	msr	PRIMASK, r3
}
 801cd00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd02:	f3ef 8310 	mrs	r3, PRIMASK
 801cd06:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801cd08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801cd0a:	673b      	str	r3, [r7, #112]	@ 0x70
 801cd0c:	2301      	movs	r3, #1
 801cd0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cd12:	f383 8810 	msr	PRIMASK, r3
}
 801cd16:	46c0      	nop			@ (mov r8, r8)
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	689a      	ldr	r2, [r3, #8]
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	2140      	movs	r1, #64	@ 0x40
 801cd24:	438a      	bics	r2, r1
 801cd26:	609a      	str	r2, [r3, #8]
 801cd28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cd2a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cd2e:	f383 8810 	msr	PRIMASK, r3
}
 801cd32:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2280      	movs	r2, #128	@ 0x80
 801cd38:	2120      	movs	r1, #32
 801cd3a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	2200      	movs	r2, #0
 801cd40:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd42:	f3ef 8310 	mrs	r3, PRIMASK
 801cd46:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801cd48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cd4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801cd4c:	2301      	movs	r3, #1
 801cd4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cd52:	f383 8810 	msr	PRIMASK, r3
}
 801cd56:	46c0      	nop			@ (mov r8, r8)
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	681a      	ldr	r2, [r3, #0]
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	2110      	movs	r1, #16
 801cd64:	438a      	bics	r2, r1
 801cd66:	601a      	str	r2, [r3, #0]
 801cd68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801cd6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cd6e:	f383 8810 	msr	PRIMASK, r3
}
 801cd72:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cd78:	0018      	movs	r0, r3
 801cd7a:	f7f7 fc8d 	bl	8014698 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	2202      	movs	r2, #2
 801cd82:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	22ac      	movs	r2, #172	@ 0xac
 801cd88:	589b      	ldr	r3, [r3, r2]
 801cd8a:	687a      	ldr	r2, [r7, #4]
 801cd8c:	2158      	movs	r1, #88	@ 0x58
 801cd8e:	5a51      	ldrh	r1, [r2, r1]
 801cd90:	687a      	ldr	r2, [r7, #4]
 801cd92:	205a      	movs	r0, #90	@ 0x5a
 801cd94:	5a12      	ldrh	r2, [r2, r0]
 801cd96:	b292      	uxth	r2, r2
 801cd98:	1a8a      	subs	r2, r1, r2
 801cd9a:	b291      	uxth	r1, r2
 801cd9c:	687a      	ldr	r2, [r7, #4]
 801cd9e:	0010      	movs	r0, r2
 801cda0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801cda2:	e0c5      	b.n	801cf30 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	2258      	movs	r2, #88	@ 0x58
 801cda8:	5a99      	ldrh	r1, [r3, r2]
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	225a      	movs	r2, #90	@ 0x5a
 801cdae:	5a9b      	ldrh	r3, [r3, r2]
 801cdb0:	b29a      	uxth	r2, r3
 801cdb2:	208e      	movs	r0, #142	@ 0x8e
 801cdb4:	183b      	adds	r3, r7, r0
 801cdb6:	1a8a      	subs	r2, r1, r2
 801cdb8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	225a      	movs	r2, #90	@ 0x5a
 801cdbe:	5a9b      	ldrh	r3, [r3, r2]
 801cdc0:	b29b      	uxth	r3, r3
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d100      	bne.n	801cdc8 <HAL_UART_IRQHandler+0x458>
 801cdc6:	e0b5      	b.n	801cf34 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801cdc8:	183b      	adds	r3, r7, r0
 801cdca:	881b      	ldrh	r3, [r3, #0]
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d100      	bne.n	801cdd2 <HAL_UART_IRQHandler+0x462>
 801cdd0:	e0b0      	b.n	801cf34 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdd2:	f3ef 8310 	mrs	r3, PRIMASK
 801cdd6:	60fb      	str	r3, [r7, #12]
  return(result);
 801cdd8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801cdda:	2488      	movs	r4, #136	@ 0x88
 801cddc:	193a      	adds	r2, r7, r4
 801cdde:	6013      	str	r3, [r2, #0]
 801cde0:	2301      	movs	r3, #1
 801cde2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cde4:	693b      	ldr	r3, [r7, #16]
 801cde6:	f383 8810 	msr	PRIMASK, r3
}
 801cdea:	46c0      	nop			@ (mov r8, r8)
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	681a      	ldr	r2, [r3, #0]
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	681b      	ldr	r3, [r3, #0]
 801cdf6:	4953      	ldr	r1, [pc, #332]	@ (801cf44 <HAL_UART_IRQHandler+0x5d4>)
 801cdf8:	400a      	ands	r2, r1
 801cdfa:	601a      	str	r2, [r3, #0]
 801cdfc:	193b      	adds	r3, r7, r4
 801cdfe:	681b      	ldr	r3, [r3, #0]
 801ce00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce02:	697b      	ldr	r3, [r7, #20]
 801ce04:	f383 8810 	msr	PRIMASK, r3
}
 801ce08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce0a:	f3ef 8310 	mrs	r3, PRIMASK
 801ce0e:	61bb      	str	r3, [r7, #24]
  return(result);
 801ce10:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ce12:	2484      	movs	r4, #132	@ 0x84
 801ce14:	193a      	adds	r2, r7, r4
 801ce16:	6013      	str	r3, [r2, #0]
 801ce18:	2301      	movs	r3, #1
 801ce1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce1c:	69fb      	ldr	r3, [r7, #28]
 801ce1e:	f383 8810 	msr	PRIMASK, r3
}
 801ce22:	46c0      	nop			@ (mov r8, r8)
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	689a      	ldr	r2, [r3, #8]
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	2101      	movs	r1, #1
 801ce30:	438a      	bics	r2, r1
 801ce32:	609a      	str	r2, [r3, #8]
 801ce34:	193b      	adds	r3, r7, r4
 801ce36:	681b      	ldr	r3, [r3, #0]
 801ce38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce3a:	6a3b      	ldr	r3, [r7, #32]
 801ce3c:	f383 8810 	msr	PRIMASK, r3
}
 801ce40:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	2280      	movs	r2, #128	@ 0x80
 801ce46:	2120      	movs	r1, #32
 801ce48:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	2200      	movs	r2, #0
 801ce4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	2200      	movs	r2, #0
 801ce54:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce56:	f3ef 8310 	mrs	r3, PRIMASK
 801ce5a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ce5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ce5e:	2480      	movs	r4, #128	@ 0x80
 801ce60:	193a      	adds	r2, r7, r4
 801ce62:	6013      	str	r3, [r2, #0]
 801ce64:	2301      	movs	r3, #1
 801ce66:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ce6a:	f383 8810 	msr	PRIMASK, r3
}
 801ce6e:	46c0      	nop			@ (mov r8, r8)
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	681a      	ldr	r2, [r3, #0]
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	2110      	movs	r1, #16
 801ce7c:	438a      	bics	r2, r1
 801ce7e:	601a      	str	r2, [r3, #0]
 801ce80:	193b      	adds	r3, r7, r4
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce88:	f383 8810 	msr	PRIMASK, r3
}
 801ce8c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	2202      	movs	r2, #2
 801ce92:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	22ac      	movs	r2, #172	@ 0xac
 801ce98:	589b      	ldr	r3, [r3, r2]
 801ce9a:	183a      	adds	r2, r7, r0
 801ce9c:	8811      	ldrh	r1, [r2, #0]
 801ce9e:	687a      	ldr	r2, [r7, #4]
 801cea0:	0010      	movs	r0, r2
 801cea2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801cea4:	e046      	b.n	801cf34 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801cea6:	23a4      	movs	r3, #164	@ 0xa4
 801cea8:	18fb      	adds	r3, r7, r3
 801ceaa:	681a      	ldr	r2, [r3, #0]
 801ceac:	2380      	movs	r3, #128	@ 0x80
 801ceae:	035b      	lsls	r3, r3, #13
 801ceb0:	4013      	ands	r3, r2
 801ceb2:	d012      	beq.n	801ceda <HAL_UART_IRQHandler+0x56a>
 801ceb4:	239c      	movs	r3, #156	@ 0x9c
 801ceb6:	18fb      	adds	r3, r7, r3
 801ceb8:	681a      	ldr	r2, [r3, #0]
 801ceba:	2380      	movs	r3, #128	@ 0x80
 801cebc:	03db      	lsls	r3, r3, #15
 801cebe:	4013      	ands	r3, r2
 801cec0:	d00b      	beq.n	801ceda <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	2280      	movs	r2, #128	@ 0x80
 801cec8:	0352      	lsls	r2, r2, #13
 801ceca:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	22a8      	movs	r2, #168	@ 0xa8
 801ced0:	589b      	ldr	r3, [r3, r2]
 801ced2:	687a      	ldr	r2, [r7, #4]
 801ced4:	0010      	movs	r0, r2
 801ced6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801ced8:	e02f      	b.n	801cf3a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801ceda:	23a4      	movs	r3, #164	@ 0xa4
 801cedc:	18fb      	adds	r3, r7, r3
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	2280      	movs	r2, #128	@ 0x80
 801cee2:	4013      	ands	r3, r2
 801cee4:	d00f      	beq.n	801cf06 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801cee6:	23a0      	movs	r3, #160	@ 0xa0
 801cee8:	18fb      	adds	r3, r7, r3
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	2280      	movs	r2, #128	@ 0x80
 801ceee:	4013      	ands	r3, r2
 801cef0:	d009      	beq.n	801cf06 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d01e      	beq.n	801cf38 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cefe:	687a      	ldr	r2, [r7, #4]
 801cf00:	0010      	movs	r0, r2
 801cf02:	4798      	blx	r3
    }
    return;
 801cf04:	e018      	b.n	801cf38 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801cf06:	23a4      	movs	r3, #164	@ 0xa4
 801cf08:	18fb      	adds	r3, r7, r3
 801cf0a:	681b      	ldr	r3, [r3, #0]
 801cf0c:	2240      	movs	r2, #64	@ 0x40
 801cf0e:	4013      	ands	r3, r2
 801cf10:	d013      	beq.n	801cf3a <HAL_UART_IRQHandler+0x5ca>
 801cf12:	23a0      	movs	r3, #160	@ 0xa0
 801cf14:	18fb      	adds	r3, r7, r3
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	2240      	movs	r2, #64	@ 0x40
 801cf1a:	4013      	ands	r3, r2
 801cf1c:	d00d      	beq.n	801cf3a <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	0018      	movs	r0, r3
 801cf22:	f001 f862 	bl	801dfea <UART_EndTransmit_IT>
    return;
 801cf26:	e008      	b.n	801cf3a <HAL_UART_IRQHandler+0x5ca>
      return;
 801cf28:	46c0      	nop			@ (mov r8, r8)
 801cf2a:	e006      	b.n	801cf3a <HAL_UART_IRQHandler+0x5ca>
    return;
 801cf2c:	46c0      	nop			@ (mov r8, r8)
 801cf2e:	e004      	b.n	801cf3a <HAL_UART_IRQHandler+0x5ca>
      return;
 801cf30:	46c0      	nop			@ (mov r8, r8)
 801cf32:	e002      	b.n	801cf3a <HAL_UART_IRQHandler+0x5ca>
      return;
 801cf34:	46c0      	nop			@ (mov r8, r8)
 801cf36:	e000      	b.n	801cf3a <HAL_UART_IRQHandler+0x5ca>
    return;
 801cf38:	46c0      	nop			@ (mov r8, r8)
  }

}
 801cf3a:	46bd      	mov	sp, r7
 801cf3c:	b02b      	add	sp, #172	@ 0xac
 801cf3e:	bd90      	pop	{r4, r7, pc}
 801cf40:	fffffeff 	.word	0xfffffeff
 801cf44:	fffffedf 	.word	0xfffffedf

0801cf48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801cf48:	b580      	push	{r7, lr}
 801cf4a:	b082      	sub	sp, #8
 801cf4c:	af00      	add	r7, sp, #0
 801cf4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801cf50:	46c0      	nop			@ (mov r8, r8)
 801cf52:	46bd      	mov	sp, r7
 801cf54:	b002      	add	sp, #8
 801cf56:	bd80      	pop	{r7, pc}

0801cf58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801cf58:	b580      	push	{r7, lr}
 801cf5a:	b082      	sub	sp, #8
 801cf5c:	af00      	add	r7, sp, #0
 801cf5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801cf60:	46c0      	nop			@ (mov r8, r8)
 801cf62:	46bd      	mov	sp, r7
 801cf64:	b002      	add	sp, #8
 801cf66:	bd80      	pop	{r7, pc}

0801cf68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801cf68:	b580      	push	{r7, lr}
 801cf6a:	b082      	sub	sp, #8
 801cf6c:	af00      	add	r7, sp, #0
 801cf6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801cf70:	46c0      	nop			@ (mov r8, r8)
 801cf72:	46bd      	mov	sp, r7
 801cf74:	b002      	add	sp, #8
 801cf76:	bd80      	pop	{r7, pc}

0801cf78 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801cf78:	b580      	push	{r7, lr}
 801cf7a:	b082      	sub	sp, #8
 801cf7c:	af00      	add	r7, sp, #0
 801cf7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801cf80:	46c0      	nop			@ (mov r8, r8)
 801cf82:	46bd      	mov	sp, r7
 801cf84:	b002      	add	sp, #8
 801cf86:	bd80      	pop	{r7, pc}

0801cf88 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b082      	sub	sp, #8
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801cf90:	46c0      	nop			@ (mov r8, r8)
 801cf92:	46bd      	mov	sp, r7
 801cf94:	b002      	add	sp, #8
 801cf96:	bd80      	pop	{r7, pc}

0801cf98 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801cf98:	b580      	push	{r7, lr}
 801cf9a:	b082      	sub	sp, #8
 801cf9c:	af00      	add	r7, sp, #0
 801cf9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801cfa0:	46c0      	nop			@ (mov r8, r8)
 801cfa2:	46bd      	mov	sp, r7
 801cfa4:	b002      	add	sp, #8
 801cfa6:	bd80      	pop	{r7, pc}

0801cfa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801cfa8:	b580      	push	{r7, lr}
 801cfaa:	b082      	sub	sp, #8
 801cfac:	af00      	add	r7, sp, #0
 801cfae:	6078      	str	r0, [r7, #4]
 801cfb0:	000a      	movs	r2, r1
 801cfb2:	1cbb      	adds	r3, r7, #2
 801cfb4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801cfb6:	46c0      	nop			@ (mov r8, r8)
 801cfb8:	46bd      	mov	sp, r7
 801cfba:	b002      	add	sp, #8
 801cfbc:	bd80      	pop	{r7, pc}
	...

0801cfc0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b082      	sub	sp, #8
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	2188      	movs	r1, #136	@ 0x88
 801cfcc:	4a14      	ldr	r2, [pc, #80]	@ (801d020 <UART_InitCallbacksToDefault+0x60>)
 801cfce:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	218c      	movs	r1, #140	@ 0x8c
 801cfd4:	4a13      	ldr	r2, [pc, #76]	@ (801d024 <UART_InitCallbacksToDefault+0x64>)
 801cfd6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	2190      	movs	r1, #144	@ 0x90
 801cfdc:	4a12      	ldr	r2, [pc, #72]	@ (801d028 <UART_InitCallbacksToDefault+0x68>)
 801cfde:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	2194      	movs	r1, #148	@ 0x94
 801cfe4:	4a11      	ldr	r2, [pc, #68]	@ (801d02c <UART_InitCallbacksToDefault+0x6c>)
 801cfe6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	2198      	movs	r1, #152	@ 0x98
 801cfec:	4a10      	ldr	r2, [pc, #64]	@ (801d030 <UART_InitCallbacksToDefault+0x70>)
 801cfee:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	219c      	movs	r1, #156	@ 0x9c
 801cff4:	4a0f      	ldr	r2, [pc, #60]	@ (801d034 <UART_InitCallbacksToDefault+0x74>)
 801cff6:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	21a0      	movs	r1, #160	@ 0xa0
 801cffc:	4a0e      	ldr	r2, [pc, #56]	@ (801d038 <UART_InitCallbacksToDefault+0x78>)
 801cffe:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	21a4      	movs	r1, #164	@ 0xa4
 801d004:	4a0d      	ldr	r2, [pc, #52]	@ (801d03c <UART_InitCallbacksToDefault+0x7c>)
 801d006:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	21a8      	movs	r1, #168	@ 0xa8
 801d00c:	4a0c      	ldr	r2, [pc, #48]	@ (801d040 <UART_InitCallbacksToDefault+0x80>)
 801d00e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	21ac      	movs	r1, #172	@ 0xac
 801d014:	4a0b      	ldr	r2, [pc, #44]	@ (801d044 <UART_InitCallbacksToDefault+0x84>)
 801d016:	505a      	str	r2, [r3, r1]

}
 801d018:	46c0      	nop			@ (mov r8, r8)
 801d01a:	46bd      	mov	sp, r7
 801d01c:	b002      	add	sp, #8
 801d01e:	bd80      	pop	{r7, pc}
 801d020:	0801cf59 	.word	0x0801cf59
 801d024:	0801cf49 	.word	0x0801cf49
 801d028:	0801cf69 	.word	0x0801cf69
 801d02c:	0800c7ed 	.word	0x0800c7ed
 801d030:	08005111 	.word	0x08005111
 801d034:	0801cf79 	.word	0x0801cf79
 801d038:	0801cf89 	.word	0x0801cf89
 801d03c:	0801cf99 	.word	0x0801cf99
 801d040:	0801e3dd 	.word	0x0801e3dd
 801d044:	0801cfa9 	.word	0x0801cfa9

0801d048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801d048:	b5b0      	push	{r4, r5, r7, lr}
 801d04a:	b08e      	sub	sp, #56	@ 0x38
 801d04c:	af00      	add	r7, sp, #0
 801d04e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801d050:	231a      	movs	r3, #26
 801d052:	2218      	movs	r2, #24
 801d054:	189b      	adds	r3, r3, r2
 801d056:	19db      	adds	r3, r3, r7
 801d058:	2200      	movs	r2, #0
 801d05a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801d05c:	69fb      	ldr	r3, [r7, #28]
 801d05e:	689a      	ldr	r2, [r3, #8]
 801d060:	69fb      	ldr	r3, [r7, #28]
 801d062:	691b      	ldr	r3, [r3, #16]
 801d064:	431a      	orrs	r2, r3
 801d066:	69fb      	ldr	r3, [r7, #28]
 801d068:	695b      	ldr	r3, [r3, #20]
 801d06a:	431a      	orrs	r2, r3
 801d06c:	69fb      	ldr	r3, [r7, #28]
 801d06e:	69db      	ldr	r3, [r3, #28]
 801d070:	4313      	orrs	r3, r2
 801d072:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801d074:	69fb      	ldr	r3, [r7, #28]
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	4ac3      	ldr	r2, [pc, #780]	@ (801d388 <UART_SetConfig+0x340>)
 801d07c:	4013      	ands	r3, r2
 801d07e:	0019      	movs	r1, r3
 801d080:	69fb      	ldr	r3, [r7, #28]
 801d082:	681b      	ldr	r3, [r3, #0]
 801d084:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d086:	430a      	orrs	r2, r1
 801d088:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801d08a:	69fb      	ldr	r3, [r7, #28]
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	685b      	ldr	r3, [r3, #4]
 801d090:	4abe      	ldr	r2, [pc, #760]	@ (801d38c <UART_SetConfig+0x344>)
 801d092:	4013      	ands	r3, r2
 801d094:	0019      	movs	r1, r3
 801d096:	69fb      	ldr	r3, [r7, #28]
 801d098:	68da      	ldr	r2, [r3, #12]
 801d09a:	69fb      	ldr	r3, [r7, #28]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	430a      	orrs	r2, r1
 801d0a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801d0a2:	69fb      	ldr	r3, [r7, #28]
 801d0a4:	699b      	ldr	r3, [r3, #24]
 801d0a6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801d0a8:	69fb      	ldr	r3, [r7, #28]
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	4ab8      	ldr	r2, [pc, #736]	@ (801d390 <UART_SetConfig+0x348>)
 801d0ae:	4293      	cmp	r3, r2
 801d0b0:	d004      	beq.n	801d0bc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801d0b2:	69fb      	ldr	r3, [r7, #28]
 801d0b4:	6a1b      	ldr	r3, [r3, #32]
 801d0b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d0b8:	4313      	orrs	r3, r2
 801d0ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801d0bc:	69fb      	ldr	r3, [r7, #28]
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	689b      	ldr	r3, [r3, #8]
 801d0c2:	4ab4      	ldr	r2, [pc, #720]	@ (801d394 <UART_SetConfig+0x34c>)
 801d0c4:	4013      	ands	r3, r2
 801d0c6:	0019      	movs	r1, r3
 801d0c8:	69fb      	ldr	r3, [r7, #28]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d0ce:	430a      	orrs	r2, r1
 801d0d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801d0d2:	69fb      	ldr	r3, [r7, #28]
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	4ab0      	ldr	r2, [pc, #704]	@ (801d398 <UART_SetConfig+0x350>)
 801d0d8:	4293      	cmp	r3, r2
 801d0da:	d131      	bne.n	801d140 <UART_SetConfig+0xf8>
 801d0dc:	4baf      	ldr	r3, [pc, #700]	@ (801d39c <UART_SetConfig+0x354>)
 801d0de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d0e0:	2203      	movs	r2, #3
 801d0e2:	4013      	ands	r3, r2
 801d0e4:	2b03      	cmp	r3, #3
 801d0e6:	d01d      	beq.n	801d124 <UART_SetConfig+0xdc>
 801d0e8:	d823      	bhi.n	801d132 <UART_SetConfig+0xea>
 801d0ea:	2b02      	cmp	r3, #2
 801d0ec:	d00c      	beq.n	801d108 <UART_SetConfig+0xc0>
 801d0ee:	d820      	bhi.n	801d132 <UART_SetConfig+0xea>
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d002      	beq.n	801d0fa <UART_SetConfig+0xb2>
 801d0f4:	2b01      	cmp	r3, #1
 801d0f6:	d00e      	beq.n	801d116 <UART_SetConfig+0xce>
 801d0f8:	e01b      	b.n	801d132 <UART_SetConfig+0xea>
 801d0fa:	231b      	movs	r3, #27
 801d0fc:	2218      	movs	r2, #24
 801d0fe:	189b      	adds	r3, r3, r2
 801d100:	19db      	adds	r3, r3, r7
 801d102:	2201      	movs	r2, #1
 801d104:	701a      	strb	r2, [r3, #0]
 801d106:	e0b4      	b.n	801d272 <UART_SetConfig+0x22a>
 801d108:	231b      	movs	r3, #27
 801d10a:	2218      	movs	r2, #24
 801d10c:	189b      	adds	r3, r3, r2
 801d10e:	19db      	adds	r3, r3, r7
 801d110:	2202      	movs	r2, #2
 801d112:	701a      	strb	r2, [r3, #0]
 801d114:	e0ad      	b.n	801d272 <UART_SetConfig+0x22a>
 801d116:	231b      	movs	r3, #27
 801d118:	2218      	movs	r2, #24
 801d11a:	189b      	adds	r3, r3, r2
 801d11c:	19db      	adds	r3, r3, r7
 801d11e:	2204      	movs	r2, #4
 801d120:	701a      	strb	r2, [r3, #0]
 801d122:	e0a6      	b.n	801d272 <UART_SetConfig+0x22a>
 801d124:	231b      	movs	r3, #27
 801d126:	2218      	movs	r2, #24
 801d128:	189b      	adds	r3, r3, r2
 801d12a:	19db      	adds	r3, r3, r7
 801d12c:	2208      	movs	r2, #8
 801d12e:	701a      	strb	r2, [r3, #0]
 801d130:	e09f      	b.n	801d272 <UART_SetConfig+0x22a>
 801d132:	231b      	movs	r3, #27
 801d134:	2218      	movs	r2, #24
 801d136:	189b      	adds	r3, r3, r2
 801d138:	19db      	adds	r3, r3, r7
 801d13a:	2210      	movs	r2, #16
 801d13c:	701a      	strb	r2, [r3, #0]
 801d13e:	e098      	b.n	801d272 <UART_SetConfig+0x22a>
 801d140:	69fb      	ldr	r3, [r7, #28]
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	4a96      	ldr	r2, [pc, #600]	@ (801d3a0 <UART_SetConfig+0x358>)
 801d146:	4293      	cmp	r3, r2
 801d148:	d131      	bne.n	801d1ae <UART_SetConfig+0x166>
 801d14a:	4b94      	ldr	r3, [pc, #592]	@ (801d39c <UART_SetConfig+0x354>)
 801d14c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d14e:	220c      	movs	r2, #12
 801d150:	4013      	ands	r3, r2
 801d152:	2b0c      	cmp	r3, #12
 801d154:	d01d      	beq.n	801d192 <UART_SetConfig+0x14a>
 801d156:	d823      	bhi.n	801d1a0 <UART_SetConfig+0x158>
 801d158:	2b08      	cmp	r3, #8
 801d15a:	d00c      	beq.n	801d176 <UART_SetConfig+0x12e>
 801d15c:	d820      	bhi.n	801d1a0 <UART_SetConfig+0x158>
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d002      	beq.n	801d168 <UART_SetConfig+0x120>
 801d162:	2b04      	cmp	r3, #4
 801d164:	d00e      	beq.n	801d184 <UART_SetConfig+0x13c>
 801d166:	e01b      	b.n	801d1a0 <UART_SetConfig+0x158>
 801d168:	231b      	movs	r3, #27
 801d16a:	2218      	movs	r2, #24
 801d16c:	189b      	adds	r3, r3, r2
 801d16e:	19db      	adds	r3, r3, r7
 801d170:	2200      	movs	r2, #0
 801d172:	701a      	strb	r2, [r3, #0]
 801d174:	e07d      	b.n	801d272 <UART_SetConfig+0x22a>
 801d176:	231b      	movs	r3, #27
 801d178:	2218      	movs	r2, #24
 801d17a:	189b      	adds	r3, r3, r2
 801d17c:	19db      	adds	r3, r3, r7
 801d17e:	2202      	movs	r2, #2
 801d180:	701a      	strb	r2, [r3, #0]
 801d182:	e076      	b.n	801d272 <UART_SetConfig+0x22a>
 801d184:	231b      	movs	r3, #27
 801d186:	2218      	movs	r2, #24
 801d188:	189b      	adds	r3, r3, r2
 801d18a:	19db      	adds	r3, r3, r7
 801d18c:	2204      	movs	r2, #4
 801d18e:	701a      	strb	r2, [r3, #0]
 801d190:	e06f      	b.n	801d272 <UART_SetConfig+0x22a>
 801d192:	231b      	movs	r3, #27
 801d194:	2218      	movs	r2, #24
 801d196:	189b      	adds	r3, r3, r2
 801d198:	19db      	adds	r3, r3, r7
 801d19a:	2208      	movs	r2, #8
 801d19c:	701a      	strb	r2, [r3, #0]
 801d19e:	e068      	b.n	801d272 <UART_SetConfig+0x22a>
 801d1a0:	231b      	movs	r3, #27
 801d1a2:	2218      	movs	r2, #24
 801d1a4:	189b      	adds	r3, r3, r2
 801d1a6:	19db      	adds	r3, r3, r7
 801d1a8:	2210      	movs	r2, #16
 801d1aa:	701a      	strb	r2, [r3, #0]
 801d1ac:	e061      	b.n	801d272 <UART_SetConfig+0x22a>
 801d1ae:	69fb      	ldr	r3, [r7, #28]
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	4a7c      	ldr	r2, [pc, #496]	@ (801d3a4 <UART_SetConfig+0x35c>)
 801d1b4:	4293      	cmp	r3, r2
 801d1b6:	d106      	bne.n	801d1c6 <UART_SetConfig+0x17e>
 801d1b8:	231b      	movs	r3, #27
 801d1ba:	2218      	movs	r2, #24
 801d1bc:	189b      	adds	r3, r3, r2
 801d1be:	19db      	adds	r3, r3, r7
 801d1c0:	2200      	movs	r2, #0
 801d1c2:	701a      	strb	r2, [r3, #0]
 801d1c4:	e055      	b.n	801d272 <UART_SetConfig+0x22a>
 801d1c6:	69fb      	ldr	r3, [r7, #28]
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	4a77      	ldr	r2, [pc, #476]	@ (801d3a8 <UART_SetConfig+0x360>)
 801d1cc:	4293      	cmp	r3, r2
 801d1ce:	d106      	bne.n	801d1de <UART_SetConfig+0x196>
 801d1d0:	231b      	movs	r3, #27
 801d1d2:	2218      	movs	r2, #24
 801d1d4:	189b      	adds	r3, r3, r2
 801d1d6:	19db      	adds	r3, r3, r7
 801d1d8:	2200      	movs	r2, #0
 801d1da:	701a      	strb	r2, [r3, #0]
 801d1dc:	e049      	b.n	801d272 <UART_SetConfig+0x22a>
 801d1de:	69fb      	ldr	r3, [r7, #28]
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	4a6b      	ldr	r2, [pc, #428]	@ (801d390 <UART_SetConfig+0x348>)
 801d1e4:	4293      	cmp	r3, r2
 801d1e6:	d13e      	bne.n	801d266 <UART_SetConfig+0x21e>
 801d1e8:	4b6c      	ldr	r3, [pc, #432]	@ (801d39c <UART_SetConfig+0x354>)
 801d1ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801d1ec:	23c0      	movs	r3, #192	@ 0xc0
 801d1ee:	011b      	lsls	r3, r3, #4
 801d1f0:	4013      	ands	r3, r2
 801d1f2:	22c0      	movs	r2, #192	@ 0xc0
 801d1f4:	0112      	lsls	r2, r2, #4
 801d1f6:	4293      	cmp	r3, r2
 801d1f8:	d027      	beq.n	801d24a <UART_SetConfig+0x202>
 801d1fa:	22c0      	movs	r2, #192	@ 0xc0
 801d1fc:	0112      	lsls	r2, r2, #4
 801d1fe:	4293      	cmp	r3, r2
 801d200:	d82a      	bhi.n	801d258 <UART_SetConfig+0x210>
 801d202:	2280      	movs	r2, #128	@ 0x80
 801d204:	0112      	lsls	r2, r2, #4
 801d206:	4293      	cmp	r3, r2
 801d208:	d011      	beq.n	801d22e <UART_SetConfig+0x1e6>
 801d20a:	2280      	movs	r2, #128	@ 0x80
 801d20c:	0112      	lsls	r2, r2, #4
 801d20e:	4293      	cmp	r3, r2
 801d210:	d822      	bhi.n	801d258 <UART_SetConfig+0x210>
 801d212:	2b00      	cmp	r3, #0
 801d214:	d004      	beq.n	801d220 <UART_SetConfig+0x1d8>
 801d216:	2280      	movs	r2, #128	@ 0x80
 801d218:	00d2      	lsls	r2, r2, #3
 801d21a:	4293      	cmp	r3, r2
 801d21c:	d00e      	beq.n	801d23c <UART_SetConfig+0x1f4>
 801d21e:	e01b      	b.n	801d258 <UART_SetConfig+0x210>
 801d220:	231b      	movs	r3, #27
 801d222:	2218      	movs	r2, #24
 801d224:	189b      	adds	r3, r3, r2
 801d226:	19db      	adds	r3, r3, r7
 801d228:	2200      	movs	r2, #0
 801d22a:	701a      	strb	r2, [r3, #0]
 801d22c:	e021      	b.n	801d272 <UART_SetConfig+0x22a>
 801d22e:	231b      	movs	r3, #27
 801d230:	2218      	movs	r2, #24
 801d232:	189b      	adds	r3, r3, r2
 801d234:	19db      	adds	r3, r3, r7
 801d236:	2202      	movs	r2, #2
 801d238:	701a      	strb	r2, [r3, #0]
 801d23a:	e01a      	b.n	801d272 <UART_SetConfig+0x22a>
 801d23c:	231b      	movs	r3, #27
 801d23e:	2218      	movs	r2, #24
 801d240:	189b      	adds	r3, r3, r2
 801d242:	19db      	adds	r3, r3, r7
 801d244:	2204      	movs	r2, #4
 801d246:	701a      	strb	r2, [r3, #0]
 801d248:	e013      	b.n	801d272 <UART_SetConfig+0x22a>
 801d24a:	231b      	movs	r3, #27
 801d24c:	2218      	movs	r2, #24
 801d24e:	189b      	adds	r3, r3, r2
 801d250:	19db      	adds	r3, r3, r7
 801d252:	2208      	movs	r2, #8
 801d254:	701a      	strb	r2, [r3, #0]
 801d256:	e00c      	b.n	801d272 <UART_SetConfig+0x22a>
 801d258:	231b      	movs	r3, #27
 801d25a:	2218      	movs	r2, #24
 801d25c:	189b      	adds	r3, r3, r2
 801d25e:	19db      	adds	r3, r3, r7
 801d260:	2210      	movs	r2, #16
 801d262:	701a      	strb	r2, [r3, #0]
 801d264:	e005      	b.n	801d272 <UART_SetConfig+0x22a>
 801d266:	231b      	movs	r3, #27
 801d268:	2218      	movs	r2, #24
 801d26a:	189b      	adds	r3, r3, r2
 801d26c:	19db      	adds	r3, r3, r7
 801d26e:	2210      	movs	r2, #16
 801d270:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801d272:	69fb      	ldr	r3, [r7, #28]
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	4a46      	ldr	r2, [pc, #280]	@ (801d390 <UART_SetConfig+0x348>)
 801d278:	4293      	cmp	r3, r2
 801d27a:	d000      	beq.n	801d27e <UART_SetConfig+0x236>
 801d27c:	e09a      	b.n	801d3b4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801d27e:	231b      	movs	r3, #27
 801d280:	2218      	movs	r2, #24
 801d282:	189b      	adds	r3, r3, r2
 801d284:	19db      	adds	r3, r3, r7
 801d286:	781b      	ldrb	r3, [r3, #0]
 801d288:	2b08      	cmp	r3, #8
 801d28a:	d01d      	beq.n	801d2c8 <UART_SetConfig+0x280>
 801d28c:	dc20      	bgt.n	801d2d0 <UART_SetConfig+0x288>
 801d28e:	2b04      	cmp	r3, #4
 801d290:	d015      	beq.n	801d2be <UART_SetConfig+0x276>
 801d292:	dc1d      	bgt.n	801d2d0 <UART_SetConfig+0x288>
 801d294:	2b00      	cmp	r3, #0
 801d296:	d002      	beq.n	801d29e <UART_SetConfig+0x256>
 801d298:	2b02      	cmp	r3, #2
 801d29a:	d005      	beq.n	801d2a8 <UART_SetConfig+0x260>
 801d29c:	e018      	b.n	801d2d0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d29e:	f7fd fe4b 	bl	801af38 <HAL_RCC_GetPCLK1Freq>
 801d2a2:	0003      	movs	r3, r0
 801d2a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d2a6:	e01c      	b.n	801d2e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d2a8:	4b3c      	ldr	r3, [pc, #240]	@ (801d39c <UART_SetConfig+0x354>)
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	2210      	movs	r2, #16
 801d2ae:	4013      	ands	r3, r2
 801d2b0:	d002      	beq.n	801d2b8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d2b2:	4b3e      	ldr	r3, [pc, #248]	@ (801d3ac <UART_SetConfig+0x364>)
 801d2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d2b6:	e014      	b.n	801d2e2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801d2b8:	4b3d      	ldr	r3, [pc, #244]	@ (801d3b0 <UART_SetConfig+0x368>)
 801d2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d2bc:	e011      	b.n	801d2e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d2be:	f7fd fd8b 	bl	801add8 <HAL_RCC_GetSysClockFreq>
 801d2c2:	0003      	movs	r3, r0
 801d2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d2c6:	e00c      	b.n	801d2e2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d2c8:	2380      	movs	r3, #128	@ 0x80
 801d2ca:	021b      	lsls	r3, r3, #8
 801d2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d2ce:	e008      	b.n	801d2e2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801d2d0:	2300      	movs	r3, #0
 801d2d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d2d4:	231a      	movs	r3, #26
 801d2d6:	2218      	movs	r2, #24
 801d2d8:	189b      	adds	r3, r3, r2
 801d2da:	19db      	adds	r3, r3, r7
 801d2dc:	2201      	movs	r2, #1
 801d2de:	701a      	strb	r2, [r3, #0]
        break;
 801d2e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801d2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	d100      	bne.n	801d2ea <UART_SetConfig+0x2a2>
 801d2e8:	e133      	b.n	801d552 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d2ea:	69fb      	ldr	r3, [r7, #28]
 801d2ec:	685a      	ldr	r2, [r3, #4]
 801d2ee:	0013      	movs	r3, r2
 801d2f0:	005b      	lsls	r3, r3, #1
 801d2f2:	189b      	adds	r3, r3, r2
 801d2f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d2f6:	429a      	cmp	r2, r3
 801d2f8:	d305      	bcc.n	801d306 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801d2fa:	69fb      	ldr	r3, [r7, #28]
 801d2fc:	685b      	ldr	r3, [r3, #4]
 801d2fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d302:	429a      	cmp	r2, r3
 801d304:	d906      	bls.n	801d314 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801d306:	231a      	movs	r3, #26
 801d308:	2218      	movs	r2, #24
 801d30a:	189b      	adds	r3, r3, r2
 801d30c:	19db      	adds	r3, r3, r7
 801d30e:	2201      	movs	r2, #1
 801d310:	701a      	strb	r2, [r3, #0]
 801d312:	e11e      	b.n	801d552 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801d314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d316:	613b      	str	r3, [r7, #16]
 801d318:	2300      	movs	r3, #0
 801d31a:	617b      	str	r3, [r7, #20]
 801d31c:	6939      	ldr	r1, [r7, #16]
 801d31e:	697a      	ldr	r2, [r7, #20]
 801d320:	000b      	movs	r3, r1
 801d322:	0e1b      	lsrs	r3, r3, #24
 801d324:	0010      	movs	r0, r2
 801d326:	0205      	lsls	r5, r0, #8
 801d328:	431d      	orrs	r5, r3
 801d32a:	000b      	movs	r3, r1
 801d32c:	021c      	lsls	r4, r3, #8
 801d32e:	69fb      	ldr	r3, [r7, #28]
 801d330:	685b      	ldr	r3, [r3, #4]
 801d332:	085b      	lsrs	r3, r3, #1
 801d334:	60bb      	str	r3, [r7, #8]
 801d336:	2300      	movs	r3, #0
 801d338:	60fb      	str	r3, [r7, #12]
 801d33a:	68b8      	ldr	r0, [r7, #8]
 801d33c:	68f9      	ldr	r1, [r7, #12]
 801d33e:	1900      	adds	r0, r0, r4
 801d340:	4169      	adcs	r1, r5
 801d342:	69fb      	ldr	r3, [r7, #28]
 801d344:	685b      	ldr	r3, [r3, #4]
 801d346:	603b      	str	r3, [r7, #0]
 801d348:	2300      	movs	r3, #0
 801d34a:	607b      	str	r3, [r7, #4]
 801d34c:	683a      	ldr	r2, [r7, #0]
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	f7e3 f916 	bl	8000580 <__aeabi_uldivmod>
 801d354:	0002      	movs	r2, r0
 801d356:	000b      	movs	r3, r1
 801d358:	0013      	movs	r3, r2
 801d35a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801d35c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d35e:	23c0      	movs	r3, #192	@ 0xc0
 801d360:	009b      	lsls	r3, r3, #2
 801d362:	429a      	cmp	r2, r3
 801d364:	d309      	bcc.n	801d37a <UART_SetConfig+0x332>
 801d366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d368:	2380      	movs	r3, #128	@ 0x80
 801d36a:	035b      	lsls	r3, r3, #13
 801d36c:	429a      	cmp	r2, r3
 801d36e:	d204      	bcs.n	801d37a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801d370:	69fb      	ldr	r3, [r7, #28]
 801d372:	681b      	ldr	r3, [r3, #0]
 801d374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d376:	60da      	str	r2, [r3, #12]
 801d378:	e0eb      	b.n	801d552 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801d37a:	231a      	movs	r3, #26
 801d37c:	2218      	movs	r2, #24
 801d37e:	189b      	adds	r3, r3, r2
 801d380:	19db      	adds	r3, r3, r7
 801d382:	2201      	movs	r2, #1
 801d384:	701a      	strb	r2, [r3, #0]
 801d386:	e0e4      	b.n	801d552 <UART_SetConfig+0x50a>
 801d388:	efff69f3 	.word	0xefff69f3
 801d38c:	ffffcfff 	.word	0xffffcfff
 801d390:	40004800 	.word	0x40004800
 801d394:	fffff4ff 	.word	0xfffff4ff
 801d398:	40013800 	.word	0x40013800
 801d39c:	40021000 	.word	0x40021000
 801d3a0:	40004400 	.word	0x40004400
 801d3a4:	40004c00 	.word	0x40004c00
 801d3a8:	40005000 	.word	0x40005000
 801d3ac:	003d0900 	.word	0x003d0900
 801d3b0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d3b4:	69fb      	ldr	r3, [r7, #28]
 801d3b6:	69da      	ldr	r2, [r3, #28]
 801d3b8:	2380      	movs	r3, #128	@ 0x80
 801d3ba:	021b      	lsls	r3, r3, #8
 801d3bc:	429a      	cmp	r2, r3
 801d3be:	d000      	beq.n	801d3c2 <UART_SetConfig+0x37a>
 801d3c0:	e070      	b.n	801d4a4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801d3c2:	231b      	movs	r3, #27
 801d3c4:	2218      	movs	r2, #24
 801d3c6:	189b      	adds	r3, r3, r2
 801d3c8:	19db      	adds	r3, r3, r7
 801d3ca:	781b      	ldrb	r3, [r3, #0]
 801d3cc:	2b08      	cmp	r3, #8
 801d3ce:	d822      	bhi.n	801d416 <UART_SetConfig+0x3ce>
 801d3d0:	009a      	lsls	r2, r3, #2
 801d3d2:	4b67      	ldr	r3, [pc, #412]	@ (801d570 <UART_SetConfig+0x528>)
 801d3d4:	18d3      	adds	r3, r2, r3
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d3da:	f7fd fdad 	bl	801af38 <HAL_RCC_GetPCLK1Freq>
 801d3de:	0003      	movs	r3, r0
 801d3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d3e2:	e021      	b.n	801d428 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d3e4:	f7fd fdbe 	bl	801af64 <HAL_RCC_GetPCLK2Freq>
 801d3e8:	0003      	movs	r3, r0
 801d3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d3ec:	e01c      	b.n	801d428 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d3ee:	4b61      	ldr	r3, [pc, #388]	@ (801d574 <UART_SetConfig+0x52c>)
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	2210      	movs	r2, #16
 801d3f4:	4013      	ands	r3, r2
 801d3f6:	d002      	beq.n	801d3fe <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d3f8:	4b5f      	ldr	r3, [pc, #380]	@ (801d578 <UART_SetConfig+0x530>)
 801d3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d3fc:	e014      	b.n	801d428 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801d3fe:	4b5f      	ldr	r3, [pc, #380]	@ (801d57c <UART_SetConfig+0x534>)
 801d400:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d402:	e011      	b.n	801d428 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d404:	f7fd fce8 	bl	801add8 <HAL_RCC_GetSysClockFreq>
 801d408:	0003      	movs	r3, r0
 801d40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d40c:	e00c      	b.n	801d428 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d40e:	2380      	movs	r3, #128	@ 0x80
 801d410:	021b      	lsls	r3, r3, #8
 801d412:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d414:	e008      	b.n	801d428 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801d416:	2300      	movs	r3, #0
 801d418:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d41a:	231a      	movs	r3, #26
 801d41c:	2218      	movs	r2, #24
 801d41e:	189b      	adds	r3, r3, r2
 801d420:	19db      	adds	r3, r3, r7
 801d422:	2201      	movs	r2, #1
 801d424:	701a      	strb	r2, [r3, #0]
        break;
 801d426:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801d428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d100      	bne.n	801d430 <UART_SetConfig+0x3e8>
 801d42e:	e090      	b.n	801d552 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801d430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d432:	005a      	lsls	r2, r3, #1
 801d434:	69fb      	ldr	r3, [r7, #28]
 801d436:	685b      	ldr	r3, [r3, #4]
 801d438:	085b      	lsrs	r3, r3, #1
 801d43a:	18d2      	adds	r2, r2, r3
 801d43c:	69fb      	ldr	r3, [r7, #28]
 801d43e:	685b      	ldr	r3, [r3, #4]
 801d440:	0019      	movs	r1, r3
 801d442:	0010      	movs	r0, r2
 801d444:	f7e2 feae 	bl	80001a4 <__udivsi3>
 801d448:	0003      	movs	r3, r0
 801d44a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d44e:	2b0f      	cmp	r3, #15
 801d450:	d921      	bls.n	801d496 <UART_SetConfig+0x44e>
 801d452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d454:	2380      	movs	r3, #128	@ 0x80
 801d456:	025b      	lsls	r3, r3, #9
 801d458:	429a      	cmp	r2, r3
 801d45a:	d21c      	bcs.n	801d496 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801d45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d45e:	b29a      	uxth	r2, r3
 801d460:	200e      	movs	r0, #14
 801d462:	2418      	movs	r4, #24
 801d464:	1903      	adds	r3, r0, r4
 801d466:	19db      	adds	r3, r3, r7
 801d468:	210f      	movs	r1, #15
 801d46a:	438a      	bics	r2, r1
 801d46c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801d46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d470:	085b      	lsrs	r3, r3, #1
 801d472:	b29b      	uxth	r3, r3
 801d474:	2207      	movs	r2, #7
 801d476:	4013      	ands	r3, r2
 801d478:	b299      	uxth	r1, r3
 801d47a:	1903      	adds	r3, r0, r4
 801d47c:	19db      	adds	r3, r3, r7
 801d47e:	1902      	adds	r2, r0, r4
 801d480:	19d2      	adds	r2, r2, r7
 801d482:	8812      	ldrh	r2, [r2, #0]
 801d484:	430a      	orrs	r2, r1
 801d486:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801d488:	69fb      	ldr	r3, [r7, #28]
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	1902      	adds	r2, r0, r4
 801d48e:	19d2      	adds	r2, r2, r7
 801d490:	8812      	ldrh	r2, [r2, #0]
 801d492:	60da      	str	r2, [r3, #12]
 801d494:	e05d      	b.n	801d552 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801d496:	231a      	movs	r3, #26
 801d498:	2218      	movs	r2, #24
 801d49a:	189b      	adds	r3, r3, r2
 801d49c:	19db      	adds	r3, r3, r7
 801d49e:	2201      	movs	r2, #1
 801d4a0:	701a      	strb	r2, [r3, #0]
 801d4a2:	e056      	b.n	801d552 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801d4a4:	231b      	movs	r3, #27
 801d4a6:	2218      	movs	r2, #24
 801d4a8:	189b      	adds	r3, r3, r2
 801d4aa:	19db      	adds	r3, r3, r7
 801d4ac:	781b      	ldrb	r3, [r3, #0]
 801d4ae:	2b08      	cmp	r3, #8
 801d4b0:	d822      	bhi.n	801d4f8 <UART_SetConfig+0x4b0>
 801d4b2:	009a      	lsls	r2, r3, #2
 801d4b4:	4b32      	ldr	r3, [pc, #200]	@ (801d580 <UART_SetConfig+0x538>)
 801d4b6:	18d3      	adds	r3, r2, r3
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d4bc:	f7fd fd3c 	bl	801af38 <HAL_RCC_GetPCLK1Freq>
 801d4c0:	0003      	movs	r3, r0
 801d4c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d4c4:	e021      	b.n	801d50a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d4c6:	f7fd fd4d 	bl	801af64 <HAL_RCC_GetPCLK2Freq>
 801d4ca:	0003      	movs	r3, r0
 801d4cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d4ce:	e01c      	b.n	801d50a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d4d0:	4b28      	ldr	r3, [pc, #160]	@ (801d574 <UART_SetConfig+0x52c>)
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	2210      	movs	r2, #16
 801d4d6:	4013      	ands	r3, r2
 801d4d8:	d002      	beq.n	801d4e0 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d4da:	4b27      	ldr	r3, [pc, #156]	@ (801d578 <UART_SetConfig+0x530>)
 801d4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d4de:	e014      	b.n	801d50a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801d4e0:	4b26      	ldr	r3, [pc, #152]	@ (801d57c <UART_SetConfig+0x534>)
 801d4e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d4e4:	e011      	b.n	801d50a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d4e6:	f7fd fc77 	bl	801add8 <HAL_RCC_GetSysClockFreq>
 801d4ea:	0003      	movs	r3, r0
 801d4ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d4ee:	e00c      	b.n	801d50a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d4f0:	2380      	movs	r3, #128	@ 0x80
 801d4f2:	021b      	lsls	r3, r3, #8
 801d4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d4f6:	e008      	b.n	801d50a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801d4f8:	2300      	movs	r3, #0
 801d4fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d4fc:	231a      	movs	r3, #26
 801d4fe:	2218      	movs	r2, #24
 801d500:	189b      	adds	r3, r3, r2
 801d502:	19db      	adds	r3, r3, r7
 801d504:	2201      	movs	r2, #1
 801d506:	701a      	strb	r2, [r3, #0]
        break;
 801d508:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801d50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d020      	beq.n	801d552 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801d510:	69fb      	ldr	r3, [r7, #28]
 801d512:	685b      	ldr	r3, [r3, #4]
 801d514:	085a      	lsrs	r2, r3, #1
 801d516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d518:	18d2      	adds	r2, r2, r3
 801d51a:	69fb      	ldr	r3, [r7, #28]
 801d51c:	685b      	ldr	r3, [r3, #4]
 801d51e:	0019      	movs	r1, r3
 801d520:	0010      	movs	r0, r2
 801d522:	f7e2 fe3f 	bl	80001a4 <__udivsi3>
 801d526:	0003      	movs	r3, r0
 801d528:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d52c:	2b0f      	cmp	r3, #15
 801d52e:	d90a      	bls.n	801d546 <UART_SetConfig+0x4fe>
 801d530:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d532:	2380      	movs	r3, #128	@ 0x80
 801d534:	025b      	lsls	r3, r3, #9
 801d536:	429a      	cmp	r2, r3
 801d538:	d205      	bcs.n	801d546 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801d53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d53c:	b29a      	uxth	r2, r3
 801d53e:	69fb      	ldr	r3, [r7, #28]
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	60da      	str	r2, [r3, #12]
 801d544:	e005      	b.n	801d552 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801d546:	231a      	movs	r3, #26
 801d548:	2218      	movs	r2, #24
 801d54a:	189b      	adds	r3, r3, r2
 801d54c:	19db      	adds	r3, r3, r7
 801d54e:	2201      	movs	r2, #1
 801d550:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801d552:	69fb      	ldr	r3, [r7, #28]
 801d554:	2200      	movs	r2, #0
 801d556:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801d558:	69fb      	ldr	r3, [r7, #28]
 801d55a:	2200      	movs	r2, #0
 801d55c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801d55e:	231a      	movs	r3, #26
 801d560:	2218      	movs	r2, #24
 801d562:	189b      	adds	r3, r3, r2
 801d564:	19db      	adds	r3, r3, r7
 801d566:	781b      	ldrb	r3, [r3, #0]
}
 801d568:	0018      	movs	r0, r3
 801d56a:	46bd      	mov	sp, r7
 801d56c:	b00e      	add	sp, #56	@ 0x38
 801d56e:	bdb0      	pop	{r4, r5, r7, pc}
 801d570:	0802daa8 	.word	0x0802daa8
 801d574:	40021000 	.word	0x40021000
 801d578:	003d0900 	.word	0x003d0900
 801d57c:	00f42400 	.word	0x00f42400
 801d580:	0802dacc 	.word	0x0802dacc

0801d584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801d584:	b580      	push	{r7, lr}
 801d586:	b082      	sub	sp, #8
 801d588:	af00      	add	r7, sp, #0
 801d58a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801d58c:	687b      	ldr	r3, [r7, #4]
 801d58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d590:	2201      	movs	r2, #1
 801d592:	4013      	ands	r3, r2
 801d594:	d00b      	beq.n	801d5ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801d596:	687b      	ldr	r3, [r7, #4]
 801d598:	681b      	ldr	r3, [r3, #0]
 801d59a:	685b      	ldr	r3, [r3, #4]
 801d59c:	4a4a      	ldr	r2, [pc, #296]	@ (801d6c8 <UART_AdvFeatureConfig+0x144>)
 801d59e:	4013      	ands	r3, r2
 801d5a0:	0019      	movs	r1, r3
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d5a6:	687b      	ldr	r3, [r7, #4]
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	430a      	orrs	r2, r1
 801d5ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801d5ae:	687b      	ldr	r3, [r7, #4]
 801d5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d5b2:	2202      	movs	r2, #2
 801d5b4:	4013      	ands	r3, r2
 801d5b6:	d00b      	beq.n	801d5d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801d5b8:	687b      	ldr	r3, [r7, #4]
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	685b      	ldr	r3, [r3, #4]
 801d5be:	4a43      	ldr	r2, [pc, #268]	@ (801d6cc <UART_AdvFeatureConfig+0x148>)
 801d5c0:	4013      	ands	r3, r2
 801d5c2:	0019      	movs	r1, r3
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	681b      	ldr	r3, [r3, #0]
 801d5cc:	430a      	orrs	r2, r1
 801d5ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801d5d0:	687b      	ldr	r3, [r7, #4]
 801d5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d5d4:	2204      	movs	r2, #4
 801d5d6:	4013      	ands	r3, r2
 801d5d8:	d00b      	beq.n	801d5f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	685b      	ldr	r3, [r3, #4]
 801d5e0:	4a3b      	ldr	r2, [pc, #236]	@ (801d6d0 <UART_AdvFeatureConfig+0x14c>)
 801d5e2:	4013      	ands	r3, r2
 801d5e4:	0019      	movs	r1, r3
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	681b      	ldr	r3, [r3, #0]
 801d5ee:	430a      	orrs	r2, r1
 801d5f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d5f6:	2208      	movs	r2, #8
 801d5f8:	4013      	ands	r3, r2
 801d5fa:	d00b      	beq.n	801d614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	685b      	ldr	r3, [r3, #4]
 801d602:	4a34      	ldr	r2, [pc, #208]	@ (801d6d4 <UART_AdvFeatureConfig+0x150>)
 801d604:	4013      	ands	r3, r2
 801d606:	0019      	movs	r1, r3
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	681b      	ldr	r3, [r3, #0]
 801d610:	430a      	orrs	r2, r1
 801d612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d618:	2210      	movs	r2, #16
 801d61a:	4013      	ands	r3, r2
 801d61c:	d00b      	beq.n	801d636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	681b      	ldr	r3, [r3, #0]
 801d622:	689b      	ldr	r3, [r3, #8]
 801d624:	4a2c      	ldr	r2, [pc, #176]	@ (801d6d8 <UART_AdvFeatureConfig+0x154>)
 801d626:	4013      	ands	r3, r2
 801d628:	0019      	movs	r1, r3
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	430a      	orrs	r2, r1
 801d634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d63a:	2220      	movs	r2, #32
 801d63c:	4013      	ands	r3, r2
 801d63e:	d00b      	beq.n	801d658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	689b      	ldr	r3, [r3, #8]
 801d646:	4a25      	ldr	r2, [pc, #148]	@ (801d6dc <UART_AdvFeatureConfig+0x158>)
 801d648:	4013      	ands	r3, r2
 801d64a:	0019      	movs	r1, r3
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	430a      	orrs	r2, r1
 801d656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801d658:	687b      	ldr	r3, [r7, #4]
 801d65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d65c:	2240      	movs	r2, #64	@ 0x40
 801d65e:	4013      	ands	r3, r2
 801d660:	d01d      	beq.n	801d69e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	681b      	ldr	r3, [r3, #0]
 801d666:	685b      	ldr	r3, [r3, #4]
 801d668:	4a1d      	ldr	r2, [pc, #116]	@ (801d6e0 <UART_AdvFeatureConfig+0x15c>)
 801d66a:	4013      	ands	r3, r2
 801d66c:	0019      	movs	r1, r3
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	430a      	orrs	r2, r1
 801d678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d67e:	2380      	movs	r3, #128	@ 0x80
 801d680:	035b      	lsls	r3, r3, #13
 801d682:	429a      	cmp	r2, r3
 801d684:	d10b      	bne.n	801d69e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	685b      	ldr	r3, [r3, #4]
 801d68c:	4a15      	ldr	r2, [pc, #84]	@ (801d6e4 <UART_AdvFeatureConfig+0x160>)
 801d68e:	4013      	ands	r3, r2
 801d690:	0019      	movs	r1, r3
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	430a      	orrs	r2, r1
 801d69c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6a2:	2280      	movs	r2, #128	@ 0x80
 801d6a4:	4013      	ands	r3, r2
 801d6a6:	d00b      	beq.n	801d6c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	685b      	ldr	r3, [r3, #4]
 801d6ae:	4a0e      	ldr	r2, [pc, #56]	@ (801d6e8 <UART_AdvFeatureConfig+0x164>)
 801d6b0:	4013      	ands	r3, r2
 801d6b2:	0019      	movs	r1, r3
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	430a      	orrs	r2, r1
 801d6be:	605a      	str	r2, [r3, #4]
  }
}
 801d6c0:	46c0      	nop			@ (mov r8, r8)
 801d6c2:	46bd      	mov	sp, r7
 801d6c4:	b002      	add	sp, #8
 801d6c6:	bd80      	pop	{r7, pc}
 801d6c8:	fffdffff 	.word	0xfffdffff
 801d6cc:	fffeffff 	.word	0xfffeffff
 801d6d0:	fffbffff 	.word	0xfffbffff
 801d6d4:	ffff7fff 	.word	0xffff7fff
 801d6d8:	ffffefff 	.word	0xffffefff
 801d6dc:	ffffdfff 	.word	0xffffdfff
 801d6e0:	ffefffff 	.word	0xffefffff
 801d6e4:	ff9fffff 	.word	0xff9fffff
 801d6e8:	fff7ffff 	.word	0xfff7ffff

0801d6ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801d6ec:	b580      	push	{r7, lr}
 801d6ee:	b092      	sub	sp, #72	@ 0x48
 801d6f0:	af02      	add	r7, sp, #8
 801d6f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	2284      	movs	r2, #132	@ 0x84
 801d6f8:	2100      	movs	r1, #0
 801d6fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801d6fc:	f7f6 fa14 	bl	8013b28 <HAL_GetTick>
 801d700:	0003      	movs	r3, r0
 801d702:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	2208      	movs	r2, #8
 801d70c:	4013      	ands	r3, r2
 801d70e:	2b08      	cmp	r3, #8
 801d710:	d12c      	bne.n	801d76c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d714:	2280      	movs	r2, #128	@ 0x80
 801d716:	0391      	lsls	r1, r2, #14
 801d718:	6878      	ldr	r0, [r7, #4]
 801d71a:	4a46      	ldr	r2, [pc, #280]	@ (801d834 <UART_CheckIdleState+0x148>)
 801d71c:	9200      	str	r2, [sp, #0]
 801d71e:	2200      	movs	r2, #0
 801d720:	f000 f88c 	bl	801d83c <UART_WaitOnFlagUntilTimeout>
 801d724:	1e03      	subs	r3, r0, #0
 801d726:	d021      	beq.n	801d76c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d728:	f3ef 8310 	mrs	r3, PRIMASK
 801d72c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801d730:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d732:	2301      	movs	r3, #1
 801d734:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d738:	f383 8810 	msr	PRIMASK, r3
}
 801d73c:	46c0      	nop			@ (mov r8, r8)
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	681a      	ldr	r2, [r3, #0]
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	2180      	movs	r1, #128	@ 0x80
 801d74a:	438a      	bics	r2, r1
 801d74c:	601a      	str	r2, [r3, #0]
 801d74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d754:	f383 8810 	msr	PRIMASK, r3
}
 801d758:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	2220      	movs	r2, #32
 801d75e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	2278      	movs	r2, #120	@ 0x78
 801d764:	2100      	movs	r1, #0
 801d766:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d768:	2303      	movs	r3, #3
 801d76a:	e05f      	b.n	801d82c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	2204      	movs	r2, #4
 801d774:	4013      	ands	r3, r2
 801d776:	2b04      	cmp	r3, #4
 801d778:	d146      	bne.n	801d808 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d77c:	2280      	movs	r2, #128	@ 0x80
 801d77e:	03d1      	lsls	r1, r2, #15
 801d780:	6878      	ldr	r0, [r7, #4]
 801d782:	4a2c      	ldr	r2, [pc, #176]	@ (801d834 <UART_CheckIdleState+0x148>)
 801d784:	9200      	str	r2, [sp, #0]
 801d786:	2200      	movs	r2, #0
 801d788:	f000 f858 	bl	801d83c <UART_WaitOnFlagUntilTimeout>
 801d78c:	1e03      	subs	r3, r0, #0
 801d78e:	d03b      	beq.n	801d808 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d790:	f3ef 8310 	mrs	r3, PRIMASK
 801d794:	60fb      	str	r3, [r7, #12]
  return(result);
 801d796:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d798:	637b      	str	r3, [r7, #52]	@ 0x34
 801d79a:	2301      	movs	r3, #1
 801d79c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d79e:	693b      	ldr	r3, [r7, #16]
 801d7a0:	f383 8810 	msr	PRIMASK, r3
}
 801d7a4:	46c0      	nop			@ (mov r8, r8)
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	681a      	ldr	r2, [r3, #0]
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	4921      	ldr	r1, [pc, #132]	@ (801d838 <UART_CheckIdleState+0x14c>)
 801d7b2:	400a      	ands	r2, r1
 801d7b4:	601a      	str	r2, [r3, #0]
 801d7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d7b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7ba:	697b      	ldr	r3, [r7, #20]
 801d7bc:	f383 8810 	msr	PRIMASK, r3
}
 801d7c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7c2:	f3ef 8310 	mrs	r3, PRIMASK
 801d7c6:	61bb      	str	r3, [r7, #24]
  return(result);
 801d7c8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d7ca:	633b      	str	r3, [r7, #48]	@ 0x30
 801d7cc:	2301      	movs	r3, #1
 801d7ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7d0:	69fb      	ldr	r3, [r7, #28]
 801d7d2:	f383 8810 	msr	PRIMASK, r3
}
 801d7d6:	46c0      	nop			@ (mov r8, r8)
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	689a      	ldr	r2, [r3, #8]
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	2101      	movs	r1, #1
 801d7e4:	438a      	bics	r2, r1
 801d7e6:	609a      	str	r2, [r3, #8]
 801d7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d7ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7ec:	6a3b      	ldr	r3, [r7, #32]
 801d7ee:	f383 8810 	msr	PRIMASK, r3
}
 801d7f2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	2280      	movs	r2, #128	@ 0x80
 801d7f8:	2120      	movs	r1, #32
 801d7fa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	2278      	movs	r2, #120	@ 0x78
 801d800:	2100      	movs	r1, #0
 801d802:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d804:	2303      	movs	r3, #3
 801d806:	e011      	b.n	801d82c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	2220      	movs	r2, #32
 801d80c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	2280      	movs	r2, #128	@ 0x80
 801d812:	2120      	movs	r1, #32
 801d814:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	2200      	movs	r2, #0
 801d81a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	2200      	movs	r2, #0
 801d820:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	2278      	movs	r2, #120	@ 0x78
 801d826:	2100      	movs	r1, #0
 801d828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d82a:	2300      	movs	r3, #0
}
 801d82c:	0018      	movs	r0, r3
 801d82e:	46bd      	mov	sp, r7
 801d830:	b010      	add	sp, #64	@ 0x40
 801d832:	bd80      	pop	{r7, pc}
 801d834:	01ffffff 	.word	0x01ffffff
 801d838:	fffffedf 	.word	0xfffffedf

0801d83c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801d83c:	b580      	push	{r7, lr}
 801d83e:	b084      	sub	sp, #16
 801d840:	af00      	add	r7, sp, #0
 801d842:	60f8      	str	r0, [r7, #12]
 801d844:	60b9      	str	r1, [r7, #8]
 801d846:	603b      	str	r3, [r7, #0]
 801d848:	1dfb      	adds	r3, r7, #7
 801d84a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d84c:	e04b      	b.n	801d8e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d84e:	69bb      	ldr	r3, [r7, #24]
 801d850:	3301      	adds	r3, #1
 801d852:	d048      	beq.n	801d8e6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d854:	f7f6 f968 	bl	8013b28 <HAL_GetTick>
 801d858:	0002      	movs	r2, r0
 801d85a:	683b      	ldr	r3, [r7, #0]
 801d85c:	1ad3      	subs	r3, r2, r3
 801d85e:	69ba      	ldr	r2, [r7, #24]
 801d860:	429a      	cmp	r2, r3
 801d862:	d302      	bcc.n	801d86a <UART_WaitOnFlagUntilTimeout+0x2e>
 801d864:	69bb      	ldr	r3, [r7, #24]
 801d866:	2b00      	cmp	r3, #0
 801d868:	d101      	bne.n	801d86e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801d86a:	2303      	movs	r3, #3
 801d86c:	e04b      	b.n	801d906 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801d86e:	68fb      	ldr	r3, [r7, #12]
 801d870:	681b      	ldr	r3, [r3, #0]
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	2204      	movs	r2, #4
 801d876:	4013      	ands	r3, r2
 801d878:	d035      	beq.n	801d8e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	681b      	ldr	r3, [r3, #0]
 801d87e:	69db      	ldr	r3, [r3, #28]
 801d880:	2208      	movs	r2, #8
 801d882:	4013      	ands	r3, r2
 801d884:	2b08      	cmp	r3, #8
 801d886:	d111      	bne.n	801d8ac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d888:	68fb      	ldr	r3, [r7, #12]
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	2208      	movs	r2, #8
 801d88e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801d890:	68fb      	ldr	r3, [r7, #12]
 801d892:	0018      	movs	r0, r3
 801d894:	f000 f9ca 	bl	801dc2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	2284      	movs	r2, #132	@ 0x84
 801d89c:	2108      	movs	r1, #8
 801d89e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801d8a0:	68fb      	ldr	r3, [r7, #12]
 801d8a2:	2278      	movs	r2, #120	@ 0x78
 801d8a4:	2100      	movs	r1, #0
 801d8a6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801d8a8:	2301      	movs	r3, #1
 801d8aa:	e02c      	b.n	801d906 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	681b      	ldr	r3, [r3, #0]
 801d8b0:	69da      	ldr	r2, [r3, #28]
 801d8b2:	2380      	movs	r3, #128	@ 0x80
 801d8b4:	011b      	lsls	r3, r3, #4
 801d8b6:	401a      	ands	r2, r3
 801d8b8:	2380      	movs	r3, #128	@ 0x80
 801d8ba:	011b      	lsls	r3, r3, #4
 801d8bc:	429a      	cmp	r2, r3
 801d8be:	d112      	bne.n	801d8e6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d8c0:	68fb      	ldr	r3, [r7, #12]
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	2280      	movs	r2, #128	@ 0x80
 801d8c6:	0112      	lsls	r2, r2, #4
 801d8c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	0018      	movs	r0, r3
 801d8ce:	f000 f9ad 	bl	801dc2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	2284      	movs	r2, #132	@ 0x84
 801d8d6:	2120      	movs	r1, #32
 801d8d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	2278      	movs	r2, #120	@ 0x78
 801d8de:	2100      	movs	r1, #0
 801d8e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801d8e2:	2303      	movs	r3, #3
 801d8e4:	e00f      	b.n	801d906 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	69db      	ldr	r3, [r3, #28]
 801d8ec:	68ba      	ldr	r2, [r7, #8]
 801d8ee:	4013      	ands	r3, r2
 801d8f0:	68ba      	ldr	r2, [r7, #8]
 801d8f2:	1ad3      	subs	r3, r2, r3
 801d8f4:	425a      	negs	r2, r3
 801d8f6:	4153      	adcs	r3, r2
 801d8f8:	b2db      	uxtb	r3, r3
 801d8fa:	001a      	movs	r2, r3
 801d8fc:	1dfb      	adds	r3, r7, #7
 801d8fe:	781b      	ldrb	r3, [r3, #0]
 801d900:	429a      	cmp	r2, r3
 801d902:	d0a4      	beq.n	801d84e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801d904:	2300      	movs	r3, #0
}
 801d906:	0018      	movs	r0, r3
 801d908:	46bd      	mov	sp, r7
 801d90a:	b004      	add	sp, #16
 801d90c:	bd80      	pop	{r7, pc}
	...

0801d910 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d910:	b580      	push	{r7, lr}
 801d912:	b090      	sub	sp, #64	@ 0x40
 801d914:	af00      	add	r7, sp, #0
 801d916:	60f8      	str	r0, [r7, #12]
 801d918:	60b9      	str	r1, [r7, #8]
 801d91a:	1dbb      	adds	r3, r7, #6
 801d91c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	68ba      	ldr	r2, [r7, #8]
 801d922:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	1dba      	adds	r2, r7, #6
 801d928:	2158      	movs	r1, #88	@ 0x58
 801d92a:	8812      	ldrh	r2, [r2, #0]
 801d92c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	1dba      	adds	r2, r7, #6
 801d932:	215a      	movs	r1, #90	@ 0x5a
 801d934:	8812      	ldrh	r2, [r2, #0]
 801d936:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	2200      	movs	r2, #0
 801d93c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	689a      	ldr	r2, [r3, #8]
 801d942:	2380      	movs	r3, #128	@ 0x80
 801d944:	015b      	lsls	r3, r3, #5
 801d946:	429a      	cmp	r2, r3
 801d948:	d10d      	bne.n	801d966 <UART_Start_Receive_IT+0x56>
 801d94a:	68fb      	ldr	r3, [r7, #12]
 801d94c:	691b      	ldr	r3, [r3, #16]
 801d94e:	2b00      	cmp	r3, #0
 801d950:	d104      	bne.n	801d95c <UART_Start_Receive_IT+0x4c>
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	225c      	movs	r2, #92	@ 0x5c
 801d956:	4950      	ldr	r1, [pc, #320]	@ (801da98 <UART_Start_Receive_IT+0x188>)
 801d958:	5299      	strh	r1, [r3, r2]
 801d95a:	e02e      	b.n	801d9ba <UART_Start_Receive_IT+0xaa>
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	225c      	movs	r2, #92	@ 0x5c
 801d960:	21ff      	movs	r1, #255	@ 0xff
 801d962:	5299      	strh	r1, [r3, r2]
 801d964:	e029      	b.n	801d9ba <UART_Start_Receive_IT+0xaa>
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	689b      	ldr	r3, [r3, #8]
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d10d      	bne.n	801d98a <UART_Start_Receive_IT+0x7a>
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	691b      	ldr	r3, [r3, #16]
 801d972:	2b00      	cmp	r3, #0
 801d974:	d104      	bne.n	801d980 <UART_Start_Receive_IT+0x70>
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	225c      	movs	r2, #92	@ 0x5c
 801d97a:	21ff      	movs	r1, #255	@ 0xff
 801d97c:	5299      	strh	r1, [r3, r2]
 801d97e:	e01c      	b.n	801d9ba <UART_Start_Receive_IT+0xaa>
 801d980:	68fb      	ldr	r3, [r7, #12]
 801d982:	225c      	movs	r2, #92	@ 0x5c
 801d984:	217f      	movs	r1, #127	@ 0x7f
 801d986:	5299      	strh	r1, [r3, r2]
 801d988:	e017      	b.n	801d9ba <UART_Start_Receive_IT+0xaa>
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	689a      	ldr	r2, [r3, #8]
 801d98e:	2380      	movs	r3, #128	@ 0x80
 801d990:	055b      	lsls	r3, r3, #21
 801d992:	429a      	cmp	r2, r3
 801d994:	d10d      	bne.n	801d9b2 <UART_Start_Receive_IT+0xa2>
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	691b      	ldr	r3, [r3, #16]
 801d99a:	2b00      	cmp	r3, #0
 801d99c:	d104      	bne.n	801d9a8 <UART_Start_Receive_IT+0x98>
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	225c      	movs	r2, #92	@ 0x5c
 801d9a2:	217f      	movs	r1, #127	@ 0x7f
 801d9a4:	5299      	strh	r1, [r3, r2]
 801d9a6:	e008      	b.n	801d9ba <UART_Start_Receive_IT+0xaa>
 801d9a8:	68fb      	ldr	r3, [r7, #12]
 801d9aa:	225c      	movs	r2, #92	@ 0x5c
 801d9ac:	213f      	movs	r1, #63	@ 0x3f
 801d9ae:	5299      	strh	r1, [r3, r2]
 801d9b0:	e003      	b.n	801d9ba <UART_Start_Receive_IT+0xaa>
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	225c      	movs	r2, #92	@ 0x5c
 801d9b6:	2100      	movs	r1, #0
 801d9b8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d9ba:	68fb      	ldr	r3, [r7, #12]
 801d9bc:	2284      	movs	r2, #132	@ 0x84
 801d9be:	2100      	movs	r1, #0
 801d9c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	2280      	movs	r2, #128	@ 0x80
 801d9c6:	2122      	movs	r1, #34	@ 0x22
 801d9c8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d9ca:	f3ef 8310 	mrs	r3, PRIMASK
 801d9ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801d9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d9d4:	2301      	movs	r3, #1
 801d9d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9da:	f383 8810 	msr	PRIMASK, r3
}
 801d9de:	46c0      	nop			@ (mov r8, r8)
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	681b      	ldr	r3, [r3, #0]
 801d9e4:	689a      	ldr	r2, [r3, #8]
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	2101      	movs	r1, #1
 801d9ec:	430a      	orrs	r2, r1
 801d9ee:	609a      	str	r2, [r3, #8]
 801d9f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d9f2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d9f6:	f383 8810 	msr	PRIMASK, r3
}
 801d9fa:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d9fc:	68fb      	ldr	r3, [r7, #12]
 801d9fe:	689a      	ldr	r2, [r3, #8]
 801da00:	2380      	movs	r3, #128	@ 0x80
 801da02:	015b      	lsls	r3, r3, #5
 801da04:	429a      	cmp	r2, r3
 801da06:	d107      	bne.n	801da18 <UART_Start_Receive_IT+0x108>
 801da08:	68fb      	ldr	r3, [r7, #12]
 801da0a:	691b      	ldr	r3, [r3, #16]
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d103      	bne.n	801da18 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	4a22      	ldr	r2, [pc, #136]	@ (801da9c <UART_Start_Receive_IT+0x18c>)
 801da14:	669a      	str	r2, [r3, #104]	@ 0x68
 801da16:	e002      	b.n	801da1e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	4a21      	ldr	r2, [pc, #132]	@ (801daa0 <UART_Start_Receive_IT+0x190>)
 801da1c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801da1e:	68fb      	ldr	r3, [r7, #12]
 801da20:	691b      	ldr	r3, [r3, #16]
 801da22:	2b00      	cmp	r3, #0
 801da24:	d019      	beq.n	801da5a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da26:	f3ef 8310 	mrs	r3, PRIMASK
 801da2a:	61fb      	str	r3, [r7, #28]
  return(result);
 801da2c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801da2e:	637b      	str	r3, [r7, #52]	@ 0x34
 801da30:	2301      	movs	r3, #1
 801da32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da34:	6a3b      	ldr	r3, [r7, #32]
 801da36:	f383 8810 	msr	PRIMASK, r3
}
 801da3a:	46c0      	nop			@ (mov r8, r8)
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	681a      	ldr	r2, [r3, #0]
 801da42:	68fb      	ldr	r3, [r7, #12]
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	2190      	movs	r1, #144	@ 0x90
 801da48:	0049      	lsls	r1, r1, #1
 801da4a:	430a      	orrs	r2, r1
 801da4c:	601a      	str	r2, [r3, #0]
 801da4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da50:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da54:	f383 8810 	msr	PRIMASK, r3
}
 801da58:	e018      	b.n	801da8c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da5a:	f3ef 8310 	mrs	r3, PRIMASK
 801da5e:	613b      	str	r3, [r7, #16]
  return(result);
 801da60:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801da62:	63bb      	str	r3, [r7, #56]	@ 0x38
 801da64:	2301      	movs	r3, #1
 801da66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da68:	697b      	ldr	r3, [r7, #20]
 801da6a:	f383 8810 	msr	PRIMASK, r3
}
 801da6e:	46c0      	nop			@ (mov r8, r8)
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	681a      	ldr	r2, [r3, #0]
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	2120      	movs	r1, #32
 801da7c:	430a      	orrs	r2, r1
 801da7e:	601a      	str	r2, [r3, #0]
 801da80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801da82:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da84:	69bb      	ldr	r3, [r7, #24]
 801da86:	f383 8810 	msr	PRIMASK, r3
}
 801da8a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801da8c:	2300      	movs	r3, #0
}
 801da8e:	0018      	movs	r0, r3
 801da90:	46bd      	mov	sp, r7
 801da92:	b010      	add	sp, #64	@ 0x40
 801da94:	bd80      	pop	{r7, pc}
 801da96:	46c0      	nop			@ (mov r8, r8)
 801da98:	000001ff 	.word	0x000001ff
 801da9c:	0801e211 	.word	0x0801e211
 801daa0:	0801e045 	.word	0x0801e045

0801daa4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801daa4:	b580      	push	{r7, lr}
 801daa6:	b090      	sub	sp, #64	@ 0x40
 801daa8:	af00      	add	r7, sp, #0
 801daaa:	60f8      	str	r0, [r7, #12]
 801daac:	60b9      	str	r1, [r7, #8]
 801daae:	1dbb      	adds	r3, r7, #6
 801dab0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	68ba      	ldr	r2, [r7, #8]
 801dab6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801dab8:	68fb      	ldr	r3, [r7, #12]
 801daba:	1dba      	adds	r2, r7, #6
 801dabc:	2158      	movs	r1, #88	@ 0x58
 801dabe:	8812      	ldrh	r2, [r2, #0]
 801dac0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dac2:	68fb      	ldr	r3, [r7, #12]
 801dac4:	2284      	movs	r2, #132	@ 0x84
 801dac6:	2100      	movs	r1, #0
 801dac8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801daca:	68fb      	ldr	r3, [r7, #12]
 801dacc:	2280      	movs	r2, #128	@ 0x80
 801dace:	2122      	movs	r1, #34	@ 0x22
 801dad0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801dad2:	68fb      	ldr	r3, [r7, #12]
 801dad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d028      	beq.n	801db2c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801dada:	68fb      	ldr	r3, [r7, #12]
 801dadc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dade:	4a3e      	ldr	r2, [pc, #248]	@ (801dbd8 <UART_Start_Receive_DMA+0x134>)
 801dae0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801dae2:	68fb      	ldr	r3, [r7, #12]
 801dae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dae6:	4a3d      	ldr	r2, [pc, #244]	@ (801dbdc <UART_Start_Receive_DMA+0x138>)
 801dae8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801daee:	4a3c      	ldr	r2, [pc, #240]	@ (801dbe0 <UART_Start_Receive_DMA+0x13c>)
 801daf0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801daf2:	68fb      	ldr	r3, [r7, #12]
 801daf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801daf6:	2200      	movs	r2, #0
 801daf8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801dafa:	68fb      	ldr	r3, [r7, #12]
 801dafc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801dafe:	68fb      	ldr	r3, [r7, #12]
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	3324      	adds	r3, #36	@ 0x24
 801db04:	0019      	movs	r1, r3
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801db0a:	001a      	movs	r2, r3
 801db0c:	1dbb      	adds	r3, r7, #6
 801db0e:	881b      	ldrh	r3, [r3, #0]
 801db10:	f7f6 fd5c 	bl	80145cc <HAL_DMA_Start_IT>
 801db14:	1e03      	subs	r3, r0, #0
 801db16:	d009      	beq.n	801db2c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801db18:	68fb      	ldr	r3, [r7, #12]
 801db1a:	2284      	movs	r2, #132	@ 0x84
 801db1c:	2110      	movs	r1, #16
 801db1e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	2280      	movs	r2, #128	@ 0x80
 801db24:	2120      	movs	r1, #32
 801db26:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801db28:	2301      	movs	r3, #1
 801db2a:	e050      	b.n	801dbce <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	691b      	ldr	r3, [r3, #16]
 801db30:	2b00      	cmp	r3, #0
 801db32:	d019      	beq.n	801db68 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db34:	f3ef 8310 	mrs	r3, PRIMASK
 801db38:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801db3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801db3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801db3e:	2301      	movs	r3, #1
 801db40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801db44:	f383 8810 	msr	PRIMASK, r3
}
 801db48:	46c0      	nop			@ (mov r8, r8)
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	681a      	ldr	r2, [r3, #0]
 801db50:	68fb      	ldr	r3, [r7, #12]
 801db52:	681b      	ldr	r3, [r3, #0]
 801db54:	2180      	movs	r1, #128	@ 0x80
 801db56:	0049      	lsls	r1, r1, #1
 801db58:	430a      	orrs	r2, r1
 801db5a:	601a      	str	r2, [r3, #0]
 801db5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801db5e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801db62:	f383 8810 	msr	PRIMASK, r3
}
 801db66:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db68:	f3ef 8310 	mrs	r3, PRIMASK
 801db6c:	613b      	str	r3, [r7, #16]
  return(result);
 801db6e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801db70:	63bb      	str	r3, [r7, #56]	@ 0x38
 801db72:	2301      	movs	r3, #1
 801db74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db76:	697b      	ldr	r3, [r7, #20]
 801db78:	f383 8810 	msr	PRIMASK, r3
}
 801db7c:	46c0      	nop			@ (mov r8, r8)
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	681b      	ldr	r3, [r3, #0]
 801db82:	689a      	ldr	r2, [r3, #8]
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	681b      	ldr	r3, [r3, #0]
 801db88:	2101      	movs	r1, #1
 801db8a:	430a      	orrs	r2, r1
 801db8c:	609a      	str	r2, [r3, #8]
 801db8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801db90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db92:	69bb      	ldr	r3, [r7, #24]
 801db94:	f383 8810 	msr	PRIMASK, r3
}
 801db98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db9a:	f3ef 8310 	mrs	r3, PRIMASK
 801db9e:	61fb      	str	r3, [r7, #28]
  return(result);
 801dba0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dba2:	637b      	str	r3, [r7, #52]	@ 0x34
 801dba4:	2301      	movs	r3, #1
 801dba6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dba8:	6a3b      	ldr	r3, [r7, #32]
 801dbaa:	f383 8810 	msr	PRIMASK, r3
}
 801dbae:	46c0      	nop			@ (mov r8, r8)
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	681b      	ldr	r3, [r3, #0]
 801dbb4:	689a      	ldr	r2, [r3, #8]
 801dbb6:	68fb      	ldr	r3, [r7, #12]
 801dbb8:	681b      	ldr	r3, [r3, #0]
 801dbba:	2140      	movs	r1, #64	@ 0x40
 801dbbc:	430a      	orrs	r2, r1
 801dbbe:	609a      	str	r2, [r3, #8]
 801dbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dbc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dbc6:	f383 8810 	msr	PRIMASK, r3
}
 801dbca:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801dbcc:	2300      	movs	r3, #0
}
 801dbce:	0018      	movs	r0, r3
 801dbd0:	46bd      	mov	sp, r7
 801dbd2:	b010      	add	sp, #64	@ 0x40
 801dbd4:	bd80      	pop	{r7, pc}
 801dbd6:	46c0      	nop			@ (mov r8, r8)
 801dbd8:	0801ddb5 	.word	0x0801ddb5
 801dbdc:	0801dee9 	.word	0x0801dee9
 801dbe0:	0801df31 	.word	0x0801df31

0801dbe4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801dbe4:	b580      	push	{r7, lr}
 801dbe6:	b086      	sub	sp, #24
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbec:	f3ef 8310 	mrs	r3, PRIMASK
 801dbf0:	60bb      	str	r3, [r7, #8]
  return(result);
 801dbf2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801dbf4:	617b      	str	r3, [r7, #20]
 801dbf6:	2301      	movs	r3, #1
 801dbf8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbfa:	68fb      	ldr	r3, [r7, #12]
 801dbfc:	f383 8810 	msr	PRIMASK, r3
}
 801dc00:	46c0      	nop			@ (mov r8, r8)
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	681a      	ldr	r2, [r3, #0]
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	21c0      	movs	r1, #192	@ 0xc0
 801dc0e:	438a      	bics	r2, r1
 801dc10:	601a      	str	r2, [r3, #0]
 801dc12:	697b      	ldr	r3, [r7, #20]
 801dc14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc16:	693b      	ldr	r3, [r7, #16]
 801dc18:	f383 8810 	msr	PRIMASK, r3
}
 801dc1c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	2220      	movs	r2, #32
 801dc22:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801dc24:	46c0      	nop			@ (mov r8, r8)
 801dc26:	46bd      	mov	sp, r7
 801dc28:	b006      	add	sp, #24
 801dc2a:	bd80      	pop	{r7, pc}

0801dc2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801dc2c:	b580      	push	{r7, lr}
 801dc2e:	b08e      	sub	sp, #56	@ 0x38
 801dc30:	af00      	add	r7, sp, #0
 801dc32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc34:	f3ef 8310 	mrs	r3, PRIMASK
 801dc38:	617b      	str	r3, [r7, #20]
  return(result);
 801dc3a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dc3c:	637b      	str	r3, [r7, #52]	@ 0x34
 801dc3e:	2301      	movs	r3, #1
 801dc40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc42:	69bb      	ldr	r3, [r7, #24]
 801dc44:	f383 8810 	msr	PRIMASK, r3
}
 801dc48:	46c0      	nop			@ (mov r8, r8)
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	681b      	ldr	r3, [r3, #0]
 801dc4e:	681a      	ldr	r2, [r3, #0]
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	4926      	ldr	r1, [pc, #152]	@ (801dcf0 <UART_EndRxTransfer+0xc4>)
 801dc56:	400a      	ands	r2, r1
 801dc58:	601a      	str	r2, [r3, #0]
 801dc5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dc5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc5e:	69fb      	ldr	r3, [r7, #28]
 801dc60:	f383 8810 	msr	PRIMASK, r3
}
 801dc64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc66:	f3ef 8310 	mrs	r3, PRIMASK
 801dc6a:	623b      	str	r3, [r7, #32]
  return(result);
 801dc6c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dc6e:	633b      	str	r3, [r7, #48]	@ 0x30
 801dc70:	2301      	movs	r3, #1
 801dc72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc76:	f383 8810 	msr	PRIMASK, r3
}
 801dc7a:	46c0      	nop			@ (mov r8, r8)
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	689a      	ldr	r2, [r3, #8]
 801dc82:	687b      	ldr	r3, [r7, #4]
 801dc84:	681b      	ldr	r3, [r3, #0]
 801dc86:	2101      	movs	r1, #1
 801dc88:	438a      	bics	r2, r1
 801dc8a:	609a      	str	r2, [r3, #8]
 801dc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dc8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc92:	f383 8810 	msr	PRIMASK, r3
}
 801dc96:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dc98:	687b      	ldr	r3, [r7, #4]
 801dc9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dc9c:	2b01      	cmp	r3, #1
 801dc9e:	d118      	bne.n	801dcd2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dca0:	f3ef 8310 	mrs	r3, PRIMASK
 801dca4:	60bb      	str	r3, [r7, #8]
  return(result);
 801dca6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dcaa:	2301      	movs	r3, #1
 801dcac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	f383 8810 	msr	PRIMASK, r3
}
 801dcb4:	46c0      	nop			@ (mov r8, r8)
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	681a      	ldr	r2, [r3, #0]
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	2110      	movs	r1, #16
 801dcc2:	438a      	bics	r2, r1
 801dcc4:	601a      	str	r2, [r3, #0]
 801dcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dcc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcca:	693b      	ldr	r3, [r7, #16]
 801dccc:	f383 8810 	msr	PRIMASK, r3
}
 801dcd0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	2280      	movs	r2, #128	@ 0x80
 801dcd6:	2120      	movs	r1, #32
 801dcd8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dcda:	687b      	ldr	r3, [r7, #4]
 801dcdc:	2200      	movs	r2, #0
 801dcde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	2200      	movs	r2, #0
 801dce4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801dce6:	46c0      	nop			@ (mov r8, r8)
 801dce8:	46bd      	mov	sp, r7
 801dcea:	b00e      	add	sp, #56	@ 0x38
 801dcec:	bd80      	pop	{r7, pc}
 801dcee:	46c0      	nop			@ (mov r8, r8)
 801dcf0:	fffffedf 	.word	0xfffffedf

0801dcf4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801dcf4:	b580      	push	{r7, lr}
 801dcf6:	b08c      	sub	sp, #48	@ 0x30
 801dcf8:	af00      	add	r7, sp, #0
 801dcfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dd00:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	681b      	ldr	r3, [r3, #0]
 801dd06:	681b      	ldr	r3, [r3, #0]
 801dd08:	2220      	movs	r2, #32
 801dd0a:	4013      	ands	r3, r2
 801dd0c:	d135      	bne.n	801dd7a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801dd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd10:	2252      	movs	r2, #82	@ 0x52
 801dd12:	2100      	movs	r1, #0
 801dd14:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd16:	f3ef 8310 	mrs	r3, PRIMASK
 801dd1a:	60fb      	str	r3, [r7, #12]
  return(result);
 801dd1c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801dd1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801dd20:	2301      	movs	r3, #1
 801dd22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd24:	693b      	ldr	r3, [r7, #16]
 801dd26:	f383 8810 	msr	PRIMASK, r3
}
 801dd2a:	46c0      	nop			@ (mov r8, r8)
 801dd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd2e:	681b      	ldr	r3, [r3, #0]
 801dd30:	689a      	ldr	r2, [r3, #8]
 801dd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd34:	681b      	ldr	r3, [r3, #0]
 801dd36:	2180      	movs	r1, #128	@ 0x80
 801dd38:	438a      	bics	r2, r1
 801dd3a:	609a      	str	r2, [r3, #8]
 801dd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dd3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd40:	697b      	ldr	r3, [r7, #20]
 801dd42:	f383 8810 	msr	PRIMASK, r3
}
 801dd46:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd48:	f3ef 8310 	mrs	r3, PRIMASK
 801dd4c:	61bb      	str	r3, [r7, #24]
  return(result);
 801dd4e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801dd50:	627b      	str	r3, [r7, #36]	@ 0x24
 801dd52:	2301      	movs	r3, #1
 801dd54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd56:	69fb      	ldr	r3, [r7, #28]
 801dd58:	f383 8810 	msr	PRIMASK, r3
}
 801dd5c:	46c0      	nop			@ (mov r8, r8)
 801dd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	681a      	ldr	r2, [r3, #0]
 801dd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd66:	681b      	ldr	r3, [r3, #0]
 801dd68:	2140      	movs	r1, #64	@ 0x40
 801dd6a:	430a      	orrs	r2, r1
 801dd6c:	601a      	str	r2, [r3, #0]
 801dd6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd72:	6a3b      	ldr	r3, [r7, #32]
 801dd74:	f383 8810 	msr	PRIMASK, r3
}
 801dd78:	e006      	b.n	801dd88 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801dd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd7c:	228c      	movs	r2, #140	@ 0x8c
 801dd7e:	589b      	ldr	r3, [r3, r2]
 801dd80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801dd82:	0010      	movs	r0, r2
 801dd84:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801dd86:	46c0      	nop			@ (mov r8, r8)
 801dd88:	46c0      	nop			@ (mov r8, r8)
 801dd8a:	46bd      	mov	sp, r7
 801dd8c:	b00c      	add	sp, #48	@ 0x30
 801dd8e:	bd80      	pop	{r7, pc}

0801dd90 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801dd90:	b580      	push	{r7, lr}
 801dd92:	b084      	sub	sp, #16
 801dd94:	af00      	add	r7, sp, #0
 801dd96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dd9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	2288      	movs	r2, #136	@ 0x88
 801dda2:	589b      	ldr	r3, [r3, r2]
 801dda4:	68fa      	ldr	r2, [r7, #12]
 801dda6:	0010      	movs	r0, r2
 801dda8:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ddaa:	46c0      	nop			@ (mov r8, r8)
 801ddac:	46bd      	mov	sp, r7
 801ddae:	b004      	add	sp, #16
 801ddb0:	bd80      	pop	{r7, pc}
	...

0801ddb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	b094      	sub	sp, #80	@ 0x50
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ddbc:	687b      	ldr	r3, [r7, #4]
 801ddbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ddc0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	681b      	ldr	r3, [r3, #0]
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	2220      	movs	r2, #32
 801ddca:	4013      	ands	r3, r2
 801ddcc:	d16f      	bne.n	801deae <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801ddce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ddd0:	225a      	movs	r2, #90	@ 0x5a
 801ddd2:	2100      	movs	r1, #0
 801ddd4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddd6:	f3ef 8310 	mrs	r3, PRIMASK
 801ddda:	61bb      	str	r3, [r7, #24]
  return(result);
 801dddc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ddde:	64bb      	str	r3, [r7, #72]	@ 0x48
 801dde0:	2301      	movs	r3, #1
 801dde2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dde4:	69fb      	ldr	r3, [r7, #28]
 801dde6:	f383 8810 	msr	PRIMASK, r3
}
 801ddea:	46c0      	nop			@ (mov r8, r8)
 801ddec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	681a      	ldr	r2, [r3, #0]
 801ddf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ddf4:	681b      	ldr	r3, [r3, #0]
 801ddf6:	493b      	ldr	r1, [pc, #236]	@ (801dee4 <UART_DMAReceiveCplt+0x130>)
 801ddf8:	400a      	ands	r2, r1
 801ddfa:	601a      	str	r2, [r3, #0]
 801ddfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ddfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de00:	6a3b      	ldr	r3, [r7, #32]
 801de02:	f383 8810 	msr	PRIMASK, r3
}
 801de06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de08:	f3ef 8310 	mrs	r3, PRIMASK
 801de0c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801de0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801de10:	647b      	str	r3, [r7, #68]	@ 0x44
 801de12:	2301      	movs	r3, #1
 801de14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de18:	f383 8810 	msr	PRIMASK, r3
}
 801de1c:	46c0      	nop			@ (mov r8, r8)
 801de1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de20:	681b      	ldr	r3, [r3, #0]
 801de22:	689a      	ldr	r2, [r3, #8]
 801de24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	2101      	movs	r1, #1
 801de2a:	438a      	bics	r2, r1
 801de2c:	609a      	str	r2, [r3, #8]
 801de2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801de30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de34:	f383 8810 	msr	PRIMASK, r3
}
 801de38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de3a:	f3ef 8310 	mrs	r3, PRIMASK
 801de3e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801de40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801de42:	643b      	str	r3, [r7, #64]	@ 0x40
 801de44:	2301      	movs	r3, #1
 801de46:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801de4a:	f383 8810 	msr	PRIMASK, r3
}
 801de4e:	46c0      	nop			@ (mov r8, r8)
 801de50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	689a      	ldr	r2, [r3, #8]
 801de56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	2140      	movs	r1, #64	@ 0x40
 801de5c:	438a      	bics	r2, r1
 801de5e:	609a      	str	r2, [r3, #8]
 801de60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801de62:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de66:	f383 8810 	msr	PRIMASK, r3
}
 801de6a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801de6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de6e:	2280      	movs	r2, #128	@ 0x80
 801de70:	2120      	movs	r1, #32
 801de72:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801de74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801de78:	2b01      	cmp	r3, #1
 801de7a:	d118      	bne.n	801deae <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de7c:	f3ef 8310 	mrs	r3, PRIMASK
 801de80:	60fb      	str	r3, [r7, #12]
  return(result);
 801de82:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801de84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801de86:	2301      	movs	r3, #1
 801de88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de8a:	693b      	ldr	r3, [r7, #16]
 801de8c:	f383 8810 	msr	PRIMASK, r3
}
 801de90:	46c0      	nop			@ (mov r8, r8)
 801de92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	681a      	ldr	r2, [r3, #0]
 801de98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	2110      	movs	r1, #16
 801de9e:	438a      	bics	r2, r1
 801dea0:	601a      	str	r2, [r3, #0]
 801dea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dea6:	697b      	ldr	r3, [r7, #20]
 801dea8:	f383 8810 	msr	PRIMASK, r3
}
 801deac:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801deae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801deb0:	2200      	movs	r2, #0
 801deb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801deb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801deb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801deb8:	2b01      	cmp	r3, #1
 801deba:	d109      	bne.n	801ded0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801debc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801debe:	22ac      	movs	r2, #172	@ 0xac
 801dec0:	589b      	ldr	r3, [r3, r2]
 801dec2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801dec4:	2158      	movs	r1, #88	@ 0x58
 801dec6:	5a51      	ldrh	r1, [r2, r1]
 801dec8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801deca:	0010      	movs	r0, r2
 801decc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801dece:	e005      	b.n	801dedc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801ded0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ded2:	2294      	movs	r2, #148	@ 0x94
 801ded4:	589b      	ldr	r3, [r3, r2]
 801ded6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ded8:	0010      	movs	r0, r2
 801deda:	4798      	blx	r3
}
 801dedc:	46c0      	nop			@ (mov r8, r8)
 801dede:	46bd      	mov	sp, r7
 801dee0:	b014      	add	sp, #80	@ 0x50
 801dee2:	bd80      	pop	{r7, pc}
 801dee4:	fffffeff 	.word	0xfffffeff

0801dee8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801dee8:	b580      	push	{r7, lr}
 801deea:	b084      	sub	sp, #16
 801deec:	af00      	add	r7, sp, #0
 801deee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801def4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801def6:	68fb      	ldr	r3, [r7, #12]
 801def8:	2201      	movs	r2, #1
 801defa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801defc:	68fb      	ldr	r3, [r7, #12]
 801defe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801df00:	2b01      	cmp	r3, #1
 801df02:	d10b      	bne.n	801df1c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801df04:	68fb      	ldr	r3, [r7, #12]
 801df06:	22ac      	movs	r2, #172	@ 0xac
 801df08:	589b      	ldr	r3, [r3, r2]
 801df0a:	68fa      	ldr	r2, [r7, #12]
 801df0c:	2158      	movs	r1, #88	@ 0x58
 801df0e:	5a52      	ldrh	r2, [r2, r1]
 801df10:	0852      	lsrs	r2, r2, #1
 801df12:	b291      	uxth	r1, r2
 801df14:	68fa      	ldr	r2, [r7, #12]
 801df16:	0010      	movs	r0, r2
 801df18:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801df1a:	e005      	b.n	801df28 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	2290      	movs	r2, #144	@ 0x90
 801df20:	589b      	ldr	r3, [r3, r2]
 801df22:	68fa      	ldr	r2, [r7, #12]
 801df24:	0010      	movs	r0, r2
 801df26:	4798      	blx	r3
}
 801df28:	46c0      	nop			@ (mov r8, r8)
 801df2a:	46bd      	mov	sp, r7
 801df2c:	b004      	add	sp, #16
 801df2e:	bd80      	pop	{r7, pc}

0801df30 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801df30:	b580      	push	{r7, lr}
 801df32:	b086      	sub	sp, #24
 801df34:	af00      	add	r7, sp, #0
 801df36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801df3c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801df3e:	697b      	ldr	r3, [r7, #20]
 801df40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801df42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801df44:	697b      	ldr	r3, [r7, #20]
 801df46:	2280      	movs	r2, #128	@ 0x80
 801df48:	589b      	ldr	r3, [r3, r2]
 801df4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801df4c:	697b      	ldr	r3, [r7, #20]
 801df4e:	681b      	ldr	r3, [r3, #0]
 801df50:	689b      	ldr	r3, [r3, #8]
 801df52:	2280      	movs	r2, #128	@ 0x80
 801df54:	4013      	ands	r3, r2
 801df56:	2b80      	cmp	r3, #128	@ 0x80
 801df58:	d10a      	bne.n	801df70 <UART_DMAError+0x40>
 801df5a:	693b      	ldr	r3, [r7, #16]
 801df5c:	2b21      	cmp	r3, #33	@ 0x21
 801df5e:	d107      	bne.n	801df70 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801df60:	697b      	ldr	r3, [r7, #20]
 801df62:	2252      	movs	r2, #82	@ 0x52
 801df64:	2100      	movs	r1, #0
 801df66:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801df68:	697b      	ldr	r3, [r7, #20]
 801df6a:	0018      	movs	r0, r3
 801df6c:	f7ff fe3a 	bl	801dbe4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801df70:	697b      	ldr	r3, [r7, #20]
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	689b      	ldr	r3, [r3, #8]
 801df76:	2240      	movs	r2, #64	@ 0x40
 801df78:	4013      	ands	r3, r2
 801df7a:	2b40      	cmp	r3, #64	@ 0x40
 801df7c:	d10a      	bne.n	801df94 <UART_DMAError+0x64>
 801df7e:	68fb      	ldr	r3, [r7, #12]
 801df80:	2b22      	cmp	r3, #34	@ 0x22
 801df82:	d107      	bne.n	801df94 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801df84:	697b      	ldr	r3, [r7, #20]
 801df86:	225a      	movs	r2, #90	@ 0x5a
 801df88:	2100      	movs	r1, #0
 801df8a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801df8c:	697b      	ldr	r3, [r7, #20]
 801df8e:	0018      	movs	r0, r3
 801df90:	f7ff fe4c 	bl	801dc2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801df94:	697b      	ldr	r3, [r7, #20]
 801df96:	2284      	movs	r2, #132	@ 0x84
 801df98:	589b      	ldr	r3, [r3, r2]
 801df9a:	2210      	movs	r2, #16
 801df9c:	431a      	orrs	r2, r3
 801df9e:	697b      	ldr	r3, [r7, #20]
 801dfa0:	2184      	movs	r1, #132	@ 0x84
 801dfa2:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801dfa4:	697b      	ldr	r3, [r7, #20]
 801dfa6:	2298      	movs	r2, #152	@ 0x98
 801dfa8:	589b      	ldr	r3, [r3, r2]
 801dfaa:	697a      	ldr	r2, [r7, #20]
 801dfac:	0010      	movs	r0, r2
 801dfae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801dfb0:	46c0      	nop			@ (mov r8, r8)
 801dfb2:	46bd      	mov	sp, r7
 801dfb4:	b006      	add	sp, #24
 801dfb6:	bd80      	pop	{r7, pc}

0801dfb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801dfb8:	b580      	push	{r7, lr}
 801dfba:	b084      	sub	sp, #16
 801dfbc:	af00      	add	r7, sp, #0
 801dfbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dfc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801dfc6:	68fb      	ldr	r3, [r7, #12]
 801dfc8:	225a      	movs	r2, #90	@ 0x5a
 801dfca:	2100      	movs	r1, #0
 801dfcc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801dfce:	68fb      	ldr	r3, [r7, #12]
 801dfd0:	2252      	movs	r2, #82	@ 0x52
 801dfd2:	2100      	movs	r1, #0
 801dfd4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801dfd6:	68fb      	ldr	r3, [r7, #12]
 801dfd8:	2298      	movs	r2, #152	@ 0x98
 801dfda:	589b      	ldr	r3, [r3, r2]
 801dfdc:	68fa      	ldr	r2, [r7, #12]
 801dfde:	0010      	movs	r0, r2
 801dfe0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801dfe2:	46c0      	nop			@ (mov r8, r8)
 801dfe4:	46bd      	mov	sp, r7
 801dfe6:	b004      	add	sp, #16
 801dfe8:	bd80      	pop	{r7, pc}

0801dfea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801dfea:	b580      	push	{r7, lr}
 801dfec:	b086      	sub	sp, #24
 801dfee:	af00      	add	r7, sp, #0
 801dff0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dff2:	f3ef 8310 	mrs	r3, PRIMASK
 801dff6:	60bb      	str	r3, [r7, #8]
  return(result);
 801dff8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801dffa:	617b      	str	r3, [r7, #20]
 801dffc:	2301      	movs	r3, #1
 801dffe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	f383 8810 	msr	PRIMASK, r3
}
 801e006:	46c0      	nop			@ (mov r8, r8)
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	681a      	ldr	r2, [r3, #0]
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	2140      	movs	r1, #64	@ 0x40
 801e014:	438a      	bics	r2, r1
 801e016:	601a      	str	r2, [r3, #0]
 801e018:	697b      	ldr	r3, [r7, #20]
 801e01a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e01c:	693b      	ldr	r3, [r7, #16]
 801e01e:	f383 8810 	msr	PRIMASK, r3
}
 801e022:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e024:	687b      	ldr	r3, [r7, #4]
 801e026:	2220      	movs	r2, #32
 801e028:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	2200      	movs	r2, #0
 801e02e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	228c      	movs	r2, #140	@ 0x8c
 801e034:	589b      	ldr	r3, [r3, r2]
 801e036:	687a      	ldr	r2, [r7, #4]
 801e038:	0010      	movs	r0, r2
 801e03a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e03c:	46c0      	nop			@ (mov r8, r8)
 801e03e:	46bd      	mov	sp, r7
 801e040:	b006      	add	sp, #24
 801e042:	bd80      	pop	{r7, pc}

0801e044 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801e044:	b580      	push	{r7, lr}
 801e046:	b094      	sub	sp, #80	@ 0x50
 801e048:	af00      	add	r7, sp, #0
 801e04a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801e04c:	204e      	movs	r0, #78	@ 0x4e
 801e04e:	183b      	adds	r3, r7, r0
 801e050:	687a      	ldr	r2, [r7, #4]
 801e052:	215c      	movs	r1, #92	@ 0x5c
 801e054:	5a52      	ldrh	r2, [r2, r1]
 801e056:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	2280      	movs	r2, #128	@ 0x80
 801e05c:	589b      	ldr	r3, [r3, r2]
 801e05e:	2b22      	cmp	r3, #34	@ 0x22
 801e060:	d000      	beq.n	801e064 <UART_RxISR_8BIT+0x20>
 801e062:	e0c2      	b.n	801e1ea <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e06a:	214c      	movs	r1, #76	@ 0x4c
 801e06c:	187b      	adds	r3, r7, r1
 801e06e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801e070:	187b      	adds	r3, r7, r1
 801e072:	881b      	ldrh	r3, [r3, #0]
 801e074:	b2da      	uxtb	r2, r3
 801e076:	183b      	adds	r3, r7, r0
 801e078:	881b      	ldrh	r3, [r3, #0]
 801e07a:	b2d9      	uxtb	r1, r3
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e080:	400a      	ands	r2, r1
 801e082:	b2d2      	uxtb	r2, r2
 801e084:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e08a:	1c5a      	adds	r2, r3, #1
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	225a      	movs	r2, #90	@ 0x5a
 801e094:	5a9b      	ldrh	r3, [r3, r2]
 801e096:	b29b      	uxth	r3, r3
 801e098:	3b01      	subs	r3, #1
 801e09a:	b299      	uxth	r1, r3
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	225a      	movs	r2, #90	@ 0x5a
 801e0a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	225a      	movs	r2, #90	@ 0x5a
 801e0a6:	5a9b      	ldrh	r3, [r3, r2]
 801e0a8:	b29b      	uxth	r3, r3
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d000      	beq.n	801e0b0 <UART_RxISR_8BIT+0x6c>
 801e0ae:	e0a4      	b.n	801e1fa <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0b0:	f3ef 8310 	mrs	r3, PRIMASK
 801e0b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e0b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e0ba:	2301      	movs	r3, #1
 801e0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0c0:	f383 8810 	msr	PRIMASK, r3
}
 801e0c4:	46c0      	nop			@ (mov r8, r8)
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	681b      	ldr	r3, [r3, #0]
 801e0ca:	681a      	ldr	r2, [r3, #0]
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	681b      	ldr	r3, [r3, #0]
 801e0d0:	494c      	ldr	r1, [pc, #304]	@ (801e204 <UART_RxISR_8BIT+0x1c0>)
 801e0d2:	400a      	ands	r2, r1
 801e0d4:	601a      	str	r2, [r3, #0]
 801e0d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e0dc:	f383 8810 	msr	PRIMASK, r3
}
 801e0e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e0e2:	f3ef 8310 	mrs	r3, PRIMASK
 801e0e6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801e0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e0ea:	647b      	str	r3, [r7, #68]	@ 0x44
 801e0ec:	2301      	movs	r3, #1
 801e0ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e0f2:	f383 8810 	msr	PRIMASK, r3
}
 801e0f6:	46c0      	nop			@ (mov r8, r8)
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	681b      	ldr	r3, [r3, #0]
 801e0fc:	689a      	ldr	r2, [r3, #8]
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	2101      	movs	r1, #1
 801e104:	438a      	bics	r2, r1
 801e106:	609a      	str	r2, [r3, #8]
 801e108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e10a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e10e:	f383 8810 	msr	PRIMASK, r3
}
 801e112:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	2280      	movs	r2, #128	@ 0x80
 801e118:	2120      	movs	r1, #32
 801e11a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	2200      	movs	r2, #0
 801e120:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	2200      	movs	r2, #0
 801e126:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	681b      	ldr	r3, [r3, #0]
 801e12c:	4a36      	ldr	r2, [pc, #216]	@ (801e208 <UART_RxISR_8BIT+0x1c4>)
 801e12e:	4293      	cmp	r3, r2
 801e130:	d01f      	beq.n	801e172 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	685a      	ldr	r2, [r3, #4]
 801e138:	2380      	movs	r3, #128	@ 0x80
 801e13a:	041b      	lsls	r3, r3, #16
 801e13c:	4013      	ands	r3, r2
 801e13e:	d018      	beq.n	801e172 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e140:	f3ef 8310 	mrs	r3, PRIMASK
 801e144:	61bb      	str	r3, [r7, #24]
  return(result);
 801e146:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e148:	643b      	str	r3, [r7, #64]	@ 0x40
 801e14a:	2301      	movs	r3, #1
 801e14c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e14e:	69fb      	ldr	r3, [r7, #28]
 801e150:	f383 8810 	msr	PRIMASK, r3
}
 801e154:	46c0      	nop			@ (mov r8, r8)
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	681b      	ldr	r3, [r3, #0]
 801e15a:	681a      	ldr	r2, [r3, #0]
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	492a      	ldr	r1, [pc, #168]	@ (801e20c <UART_RxISR_8BIT+0x1c8>)
 801e162:	400a      	ands	r2, r1
 801e164:	601a      	str	r2, [r3, #0]
 801e166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e168:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e16a:	6a3b      	ldr	r3, [r7, #32]
 801e16c:	f383 8810 	msr	PRIMASK, r3
}
 801e170:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e176:	2b01      	cmp	r3, #1
 801e178:	d130      	bne.n	801e1dc <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	2200      	movs	r2, #0
 801e17e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e180:	f3ef 8310 	mrs	r3, PRIMASK
 801e184:	60fb      	str	r3, [r7, #12]
  return(result);
 801e186:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e188:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e18a:	2301      	movs	r3, #1
 801e18c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e18e:	693b      	ldr	r3, [r7, #16]
 801e190:	f383 8810 	msr	PRIMASK, r3
}
 801e194:	46c0      	nop			@ (mov r8, r8)
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	681a      	ldr	r2, [r3, #0]
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	2110      	movs	r1, #16
 801e1a2:	438a      	bics	r2, r1
 801e1a4:	601a      	str	r2, [r3, #0]
 801e1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e1a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1aa:	697b      	ldr	r3, [r7, #20]
 801e1ac:	f383 8810 	msr	PRIMASK, r3
}
 801e1b0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	69db      	ldr	r3, [r3, #28]
 801e1b8:	2210      	movs	r2, #16
 801e1ba:	4013      	ands	r3, r2
 801e1bc:	2b10      	cmp	r3, #16
 801e1be:	d103      	bne.n	801e1c8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	681b      	ldr	r3, [r3, #0]
 801e1c4:	2210      	movs	r2, #16
 801e1c6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	22ac      	movs	r2, #172	@ 0xac
 801e1cc:	589b      	ldr	r3, [r3, r2]
 801e1ce:	687a      	ldr	r2, [r7, #4]
 801e1d0:	2158      	movs	r1, #88	@ 0x58
 801e1d2:	5a51      	ldrh	r1, [r2, r1]
 801e1d4:	687a      	ldr	r2, [r7, #4]
 801e1d6:	0010      	movs	r0, r2
 801e1d8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e1da:	e00e      	b.n	801e1fa <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	2294      	movs	r2, #148	@ 0x94
 801e1e0:	589b      	ldr	r3, [r3, r2]
 801e1e2:	687a      	ldr	r2, [r7, #4]
 801e1e4:	0010      	movs	r0, r2
 801e1e6:	4798      	blx	r3
}
 801e1e8:	e007      	b.n	801e1fa <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	699a      	ldr	r2, [r3, #24]
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	2108      	movs	r1, #8
 801e1f6:	430a      	orrs	r2, r1
 801e1f8:	619a      	str	r2, [r3, #24]
}
 801e1fa:	46c0      	nop			@ (mov r8, r8)
 801e1fc:	46bd      	mov	sp, r7
 801e1fe:	b014      	add	sp, #80	@ 0x50
 801e200:	bd80      	pop	{r7, pc}
 801e202:	46c0      	nop			@ (mov r8, r8)
 801e204:	fffffedf 	.word	0xfffffedf
 801e208:	40004800 	.word	0x40004800
 801e20c:	fbffffff 	.word	0xfbffffff

0801e210 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801e210:	b580      	push	{r7, lr}
 801e212:	b094      	sub	sp, #80	@ 0x50
 801e214:	af00      	add	r7, sp, #0
 801e216:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801e218:	204e      	movs	r0, #78	@ 0x4e
 801e21a:	183b      	adds	r3, r7, r0
 801e21c:	687a      	ldr	r2, [r7, #4]
 801e21e:	215c      	movs	r1, #92	@ 0x5c
 801e220:	5a52      	ldrh	r2, [r2, r1]
 801e222:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e224:	687b      	ldr	r3, [r7, #4]
 801e226:	2280      	movs	r2, #128	@ 0x80
 801e228:	589b      	ldr	r3, [r3, r2]
 801e22a:	2b22      	cmp	r3, #34	@ 0x22
 801e22c:	d000      	beq.n	801e230 <UART_RxISR_16BIT+0x20>
 801e22e:	e0c2      	b.n	801e3b6 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e236:	214c      	movs	r1, #76	@ 0x4c
 801e238:	187b      	adds	r3, r7, r1
 801e23a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e240:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801e242:	187b      	adds	r3, r7, r1
 801e244:	183a      	adds	r2, r7, r0
 801e246:	881b      	ldrh	r3, [r3, #0]
 801e248:	8812      	ldrh	r2, [r2, #0]
 801e24a:	4013      	ands	r3, r2
 801e24c:	b29a      	uxth	r2, r3
 801e24e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e250:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801e252:	687b      	ldr	r3, [r7, #4]
 801e254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e256:	1c9a      	adds	r2, r3, #2
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	225a      	movs	r2, #90	@ 0x5a
 801e260:	5a9b      	ldrh	r3, [r3, r2]
 801e262:	b29b      	uxth	r3, r3
 801e264:	3b01      	subs	r3, #1
 801e266:	b299      	uxth	r1, r3
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	225a      	movs	r2, #90	@ 0x5a
 801e26c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	225a      	movs	r2, #90	@ 0x5a
 801e272:	5a9b      	ldrh	r3, [r3, r2]
 801e274:	b29b      	uxth	r3, r3
 801e276:	2b00      	cmp	r3, #0
 801e278:	d000      	beq.n	801e27c <UART_RxISR_16BIT+0x6c>
 801e27a:	e0a4      	b.n	801e3c6 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e27c:	f3ef 8310 	mrs	r3, PRIMASK
 801e280:	623b      	str	r3, [r7, #32]
  return(result);
 801e282:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e284:	647b      	str	r3, [r7, #68]	@ 0x44
 801e286:	2301      	movs	r3, #1
 801e288:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e28c:	f383 8810 	msr	PRIMASK, r3
}
 801e290:	46c0      	nop			@ (mov r8, r8)
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	681b      	ldr	r3, [r3, #0]
 801e296:	681a      	ldr	r2, [r3, #0]
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	494c      	ldr	r1, [pc, #304]	@ (801e3d0 <UART_RxISR_16BIT+0x1c0>)
 801e29e:	400a      	ands	r2, r1
 801e2a0:	601a      	str	r2, [r3, #0]
 801e2a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2a8:	f383 8810 	msr	PRIMASK, r3
}
 801e2ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2ae:	f3ef 8310 	mrs	r3, PRIMASK
 801e2b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801e2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e2b6:	643b      	str	r3, [r7, #64]	@ 0x40
 801e2b8:	2301      	movs	r3, #1
 801e2ba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2be:	f383 8810 	msr	PRIMASK, r3
}
 801e2c2:	46c0      	nop			@ (mov r8, r8)
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	689a      	ldr	r2, [r3, #8]
 801e2ca:	687b      	ldr	r3, [r7, #4]
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	2101      	movs	r1, #1
 801e2d0:	438a      	bics	r2, r1
 801e2d2:	609a      	str	r2, [r3, #8]
 801e2d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e2d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2da:	f383 8810 	msr	PRIMASK, r3
}
 801e2de:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	2280      	movs	r2, #128	@ 0x80
 801e2e4:	2120      	movs	r1, #32
 801e2e6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	2200      	movs	r2, #0
 801e2ec:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	2200      	movs	r2, #0
 801e2f2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	4a36      	ldr	r2, [pc, #216]	@ (801e3d4 <UART_RxISR_16BIT+0x1c4>)
 801e2fa:	4293      	cmp	r3, r2
 801e2fc:	d01f      	beq.n	801e33e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	685a      	ldr	r2, [r3, #4]
 801e304:	2380      	movs	r3, #128	@ 0x80
 801e306:	041b      	lsls	r3, r3, #16
 801e308:	4013      	ands	r3, r2
 801e30a:	d018      	beq.n	801e33e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e30c:	f3ef 8310 	mrs	r3, PRIMASK
 801e310:	617b      	str	r3, [r7, #20]
  return(result);
 801e312:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e314:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e316:	2301      	movs	r3, #1
 801e318:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e31a:	69bb      	ldr	r3, [r7, #24]
 801e31c:	f383 8810 	msr	PRIMASK, r3
}
 801e320:	46c0      	nop			@ (mov r8, r8)
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	681b      	ldr	r3, [r3, #0]
 801e326:	681a      	ldr	r2, [r3, #0]
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	681b      	ldr	r3, [r3, #0]
 801e32c:	492a      	ldr	r1, [pc, #168]	@ (801e3d8 <UART_RxISR_16BIT+0x1c8>)
 801e32e:	400a      	ands	r2, r1
 801e330:	601a      	str	r2, [r3, #0]
 801e332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e334:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e336:	69fb      	ldr	r3, [r7, #28]
 801e338:	f383 8810 	msr	PRIMASK, r3
}
 801e33c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e342:	2b01      	cmp	r3, #1
 801e344:	d130      	bne.n	801e3a8 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	2200      	movs	r2, #0
 801e34a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e34c:	f3ef 8310 	mrs	r3, PRIMASK
 801e350:	60bb      	str	r3, [r7, #8]
  return(result);
 801e352:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e354:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e356:	2301      	movs	r3, #1
 801e358:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e35a:	68fb      	ldr	r3, [r7, #12]
 801e35c:	f383 8810 	msr	PRIMASK, r3
}
 801e360:	46c0      	nop			@ (mov r8, r8)
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	681a      	ldr	r2, [r3, #0]
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	2110      	movs	r1, #16
 801e36e:	438a      	bics	r2, r1
 801e370:	601a      	str	r2, [r3, #0]
 801e372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e374:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e376:	693b      	ldr	r3, [r7, #16]
 801e378:	f383 8810 	msr	PRIMASK, r3
}
 801e37c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	69db      	ldr	r3, [r3, #28]
 801e384:	2210      	movs	r2, #16
 801e386:	4013      	ands	r3, r2
 801e388:	2b10      	cmp	r3, #16
 801e38a:	d103      	bne.n	801e394 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	2210      	movs	r2, #16
 801e392:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	22ac      	movs	r2, #172	@ 0xac
 801e398:	589b      	ldr	r3, [r3, r2]
 801e39a:	687a      	ldr	r2, [r7, #4]
 801e39c:	2158      	movs	r1, #88	@ 0x58
 801e39e:	5a51      	ldrh	r1, [r2, r1]
 801e3a0:	687a      	ldr	r2, [r7, #4]
 801e3a2:	0010      	movs	r0, r2
 801e3a4:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e3a6:	e00e      	b.n	801e3c6 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	2294      	movs	r2, #148	@ 0x94
 801e3ac:	589b      	ldr	r3, [r3, r2]
 801e3ae:	687a      	ldr	r2, [r7, #4]
 801e3b0:	0010      	movs	r0, r2
 801e3b2:	4798      	blx	r3
}
 801e3b4:	e007      	b.n	801e3c6 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	681b      	ldr	r3, [r3, #0]
 801e3ba:	699a      	ldr	r2, [r3, #24]
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	2108      	movs	r1, #8
 801e3c2:	430a      	orrs	r2, r1
 801e3c4:	619a      	str	r2, [r3, #24]
}
 801e3c6:	46c0      	nop			@ (mov r8, r8)
 801e3c8:	46bd      	mov	sp, r7
 801e3ca:	b014      	add	sp, #80	@ 0x50
 801e3cc:	bd80      	pop	{r7, pc}
 801e3ce:	46c0      	nop			@ (mov r8, r8)
 801e3d0:	fffffedf 	.word	0xfffffedf
 801e3d4:	40004800 	.word	0x40004800
 801e3d8:	fbffffff 	.word	0xfbffffff

0801e3dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e3dc:	b580      	push	{r7, lr}
 801e3de:	b082      	sub	sp, #8
 801e3e0:	af00      	add	r7, sp, #0
 801e3e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e3e4:	46c0      	nop			@ (mov r8, r8)
 801e3e6:	46bd      	mov	sp, r7
 801e3e8:	b002      	add	sp, #8
 801e3ea:	bd80      	pop	{r7, pc}

0801e3ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801e3ec:	b580      	push	{r7, lr}
 801e3ee:	b084      	sub	sp, #16
 801e3f0:	af00      	add	r7, sp, #0
 801e3f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e3f4:	687b      	ldr	r3, [r7, #4]
 801e3f6:	2244      	movs	r2, #68	@ 0x44
 801e3f8:	2100      	movs	r1, #0
 801e3fa:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e3fc:	4b05      	ldr	r3, [pc, #20]	@ (801e414 <USB_EnableGlobalInt+0x28>)
 801e3fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801e400:	68fb      	ldr	r3, [r7, #12]
 801e402:	b299      	uxth	r1, r3
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	2240      	movs	r2, #64	@ 0x40
 801e408:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e40a:	2300      	movs	r3, #0
}
 801e40c:	0018      	movs	r0, r3
 801e40e:	46bd      	mov	sp, r7
 801e410:	b004      	add	sp, #16
 801e412:	bd80      	pop	{r7, pc}
 801e414:	0000bf80 	.word	0x0000bf80

0801e418 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801e418:	b580      	push	{r7, lr}
 801e41a:	b084      	sub	sp, #16
 801e41c:	af00      	add	r7, sp, #0
 801e41e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e420:	4b09      	ldr	r3, [pc, #36]	@ (801e448 <USB_DisableGlobalInt+0x30>)
 801e422:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	2240      	movs	r2, #64	@ 0x40
 801e428:	5a9b      	ldrh	r3, [r3, r2]
 801e42a:	b29b      	uxth	r3, r3
 801e42c:	68fa      	ldr	r2, [r7, #12]
 801e42e:	b292      	uxth	r2, r2
 801e430:	43d2      	mvns	r2, r2
 801e432:	b292      	uxth	r2, r2
 801e434:	4013      	ands	r3, r2
 801e436:	b299      	uxth	r1, r3
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	2240      	movs	r2, #64	@ 0x40
 801e43c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e43e:	2300      	movs	r3, #0
}
 801e440:	0018      	movs	r0, r3
 801e442:	46bd      	mov	sp, r7
 801e444:	b004      	add	sp, #16
 801e446:	bd80      	pop	{r7, pc}
 801e448:	0000bf80 	.word	0x0000bf80

0801e44c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801e44c:	b084      	sub	sp, #16
 801e44e:	b590      	push	{r4, r7, lr}
 801e450:	b083      	sub	sp, #12
 801e452:	af00      	add	r7, sp, #0
 801e454:	6078      	str	r0, [r7, #4]
 801e456:	2004      	movs	r0, #4
 801e458:	2410      	movs	r4, #16
 801e45a:	1900      	adds	r0, r0, r4
 801e45c:	2408      	movs	r4, #8
 801e45e:	46a4      	mov	ip, r4
 801e460:	44bc      	add	ip, r7
 801e462:	4460      	add	r0, ip
 801e464:	6001      	str	r1, [r0, #0]
 801e466:	6042      	str	r2, [r0, #4]
 801e468:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	2240      	movs	r2, #64	@ 0x40
 801e46e:	2101      	movs	r1, #1
 801e470:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	2240      	movs	r2, #64	@ 0x40
 801e476:	2100      	movs	r1, #0
 801e478:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	2244      	movs	r2, #68	@ 0x44
 801e47e:	2100      	movs	r1, #0
 801e480:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	2250      	movs	r2, #80	@ 0x50
 801e486:	2100      	movs	r1, #0
 801e488:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e48a:	2300      	movs	r3, #0
}
 801e48c:	0018      	movs	r0, r3
 801e48e:	46bd      	mov	sp, r7
 801e490:	b003      	add	sp, #12
 801e492:	bc90      	pop	{r4, r7}
 801e494:	bc08      	pop	{r3}
 801e496:	b004      	add	sp, #16
 801e498:	4718      	bx	r3
	...

0801e49c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e49c:	b580      	push	{r7, lr}
 801e49e:	b09c      	sub	sp, #112	@ 0x70
 801e4a0:	af00      	add	r7, sp, #0
 801e4a2:	6078      	str	r0, [r7, #4]
 801e4a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801e4a6:	236f      	movs	r3, #111	@ 0x6f
 801e4a8:	18fb      	adds	r3, r7, r3
 801e4aa:	2200      	movs	r2, #0
 801e4ac:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801e4ae:	687a      	ldr	r2, [r7, #4]
 801e4b0:	683b      	ldr	r3, [r7, #0]
 801e4b2:	781b      	ldrb	r3, [r3, #0]
 801e4b4:	009b      	lsls	r3, r3, #2
 801e4b6:	18d3      	adds	r3, r2, r3
 801e4b8:	881b      	ldrh	r3, [r3, #0]
 801e4ba:	b29a      	uxth	r2, r3
 801e4bc:	236c      	movs	r3, #108	@ 0x6c
 801e4be:	18fb      	adds	r3, r7, r3
 801e4c0:	49a3      	ldr	r1, [pc, #652]	@ (801e750 <USB_ActivateEndpoint+0x2b4>)
 801e4c2:	400a      	ands	r2, r1
 801e4c4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801e4c6:	683b      	ldr	r3, [r7, #0]
 801e4c8:	78db      	ldrb	r3, [r3, #3]
 801e4ca:	2b03      	cmp	r3, #3
 801e4cc:	d017      	beq.n	801e4fe <USB_ActivateEndpoint+0x62>
 801e4ce:	dc28      	bgt.n	801e522 <USB_ActivateEndpoint+0x86>
 801e4d0:	2b02      	cmp	r3, #2
 801e4d2:	d00e      	beq.n	801e4f2 <USB_ActivateEndpoint+0x56>
 801e4d4:	dc25      	bgt.n	801e522 <USB_ActivateEndpoint+0x86>
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	d002      	beq.n	801e4e0 <USB_ActivateEndpoint+0x44>
 801e4da:	2b01      	cmp	r3, #1
 801e4dc:	d018      	beq.n	801e510 <USB_ActivateEndpoint+0x74>
 801e4de:	e020      	b.n	801e522 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801e4e0:	226c      	movs	r2, #108	@ 0x6c
 801e4e2:	18bb      	adds	r3, r7, r2
 801e4e4:	18ba      	adds	r2, r7, r2
 801e4e6:	8812      	ldrh	r2, [r2, #0]
 801e4e8:	2180      	movs	r1, #128	@ 0x80
 801e4ea:	0089      	lsls	r1, r1, #2
 801e4ec:	430a      	orrs	r2, r1
 801e4ee:	801a      	strh	r2, [r3, #0]
      break;
 801e4f0:	e01c      	b.n	801e52c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801e4f2:	226c      	movs	r2, #108	@ 0x6c
 801e4f4:	18bb      	adds	r3, r7, r2
 801e4f6:	18ba      	adds	r2, r7, r2
 801e4f8:	8812      	ldrh	r2, [r2, #0]
 801e4fa:	801a      	strh	r2, [r3, #0]
      break;
 801e4fc:	e016      	b.n	801e52c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801e4fe:	226c      	movs	r2, #108	@ 0x6c
 801e500:	18bb      	adds	r3, r7, r2
 801e502:	18ba      	adds	r2, r7, r2
 801e504:	8812      	ldrh	r2, [r2, #0]
 801e506:	21c0      	movs	r1, #192	@ 0xc0
 801e508:	00c9      	lsls	r1, r1, #3
 801e50a:	430a      	orrs	r2, r1
 801e50c:	801a      	strh	r2, [r3, #0]
      break;
 801e50e:	e00d      	b.n	801e52c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801e510:	226c      	movs	r2, #108	@ 0x6c
 801e512:	18bb      	adds	r3, r7, r2
 801e514:	18ba      	adds	r2, r7, r2
 801e516:	8812      	ldrh	r2, [r2, #0]
 801e518:	2180      	movs	r1, #128	@ 0x80
 801e51a:	00c9      	lsls	r1, r1, #3
 801e51c:	430a      	orrs	r2, r1
 801e51e:	801a      	strh	r2, [r3, #0]
      break;
 801e520:	e004      	b.n	801e52c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801e522:	236f      	movs	r3, #111	@ 0x6f
 801e524:	18fb      	adds	r3, r7, r3
 801e526:	2201      	movs	r2, #1
 801e528:	701a      	strb	r2, [r3, #0]
      break;
 801e52a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801e52c:	687a      	ldr	r2, [r7, #4]
 801e52e:	683b      	ldr	r3, [r7, #0]
 801e530:	781b      	ldrb	r3, [r3, #0]
 801e532:	009b      	lsls	r3, r3, #2
 801e534:	18d3      	adds	r3, r2, r3
 801e536:	226c      	movs	r2, #108	@ 0x6c
 801e538:	18ba      	adds	r2, r7, r2
 801e53a:	8812      	ldrh	r2, [r2, #0]
 801e53c:	4985      	ldr	r1, [pc, #532]	@ (801e754 <USB_ActivateEndpoint+0x2b8>)
 801e53e:	430a      	orrs	r2, r1
 801e540:	b292      	uxth	r2, r2
 801e542:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801e544:	687a      	ldr	r2, [r7, #4]
 801e546:	683b      	ldr	r3, [r7, #0]
 801e548:	781b      	ldrb	r3, [r3, #0]
 801e54a:	009b      	lsls	r3, r3, #2
 801e54c:	18d3      	adds	r3, r2, r3
 801e54e:	881b      	ldrh	r3, [r3, #0]
 801e550:	b29b      	uxth	r3, r3
 801e552:	b21b      	sxth	r3, r3
 801e554:	4a80      	ldr	r2, [pc, #512]	@ (801e758 <USB_ActivateEndpoint+0x2bc>)
 801e556:	4013      	ands	r3, r2
 801e558:	b21a      	sxth	r2, r3
 801e55a:	683b      	ldr	r3, [r7, #0]
 801e55c:	781b      	ldrb	r3, [r3, #0]
 801e55e:	b21b      	sxth	r3, r3
 801e560:	4313      	orrs	r3, r2
 801e562:	b21a      	sxth	r2, r3
 801e564:	2166      	movs	r1, #102	@ 0x66
 801e566:	187b      	adds	r3, r7, r1
 801e568:	801a      	strh	r2, [r3, #0]
 801e56a:	687a      	ldr	r2, [r7, #4]
 801e56c:	683b      	ldr	r3, [r7, #0]
 801e56e:	781b      	ldrb	r3, [r3, #0]
 801e570:	009b      	lsls	r3, r3, #2
 801e572:	18d3      	adds	r3, r2, r3
 801e574:	187a      	adds	r2, r7, r1
 801e576:	8812      	ldrh	r2, [r2, #0]
 801e578:	4976      	ldr	r1, [pc, #472]	@ (801e754 <USB_ActivateEndpoint+0x2b8>)
 801e57a:	430a      	orrs	r2, r1
 801e57c:	b292      	uxth	r2, r2
 801e57e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801e580:	683b      	ldr	r3, [r7, #0]
 801e582:	7b1b      	ldrb	r3, [r3, #12]
 801e584:	2b00      	cmp	r3, #0
 801e586:	d000      	beq.n	801e58a <USB_ActivateEndpoint+0xee>
 801e588:	e178      	b.n	801e87c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801e58a:	683b      	ldr	r3, [r7, #0]
 801e58c:	785b      	ldrb	r3, [r3, #1]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d100      	bne.n	801e594 <USB_ActivateEndpoint+0xf8>
 801e592:	e07a      	b.n	801e68a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	61bb      	str	r3, [r7, #24]
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	2250      	movs	r2, #80	@ 0x50
 801e59c:	5a9b      	ldrh	r3, [r3, r2]
 801e59e:	b29b      	uxth	r3, r3
 801e5a0:	001a      	movs	r2, r3
 801e5a2:	69bb      	ldr	r3, [r7, #24]
 801e5a4:	189b      	adds	r3, r3, r2
 801e5a6:	61bb      	str	r3, [r7, #24]
 801e5a8:	683b      	ldr	r3, [r7, #0]
 801e5aa:	781b      	ldrb	r3, [r3, #0]
 801e5ac:	00da      	lsls	r2, r3, #3
 801e5ae:	69bb      	ldr	r3, [r7, #24]
 801e5b0:	18d3      	adds	r3, r2, r3
 801e5b2:	2280      	movs	r2, #128	@ 0x80
 801e5b4:	00d2      	lsls	r2, r2, #3
 801e5b6:	4694      	mov	ip, r2
 801e5b8:	4463      	add	r3, ip
 801e5ba:	617b      	str	r3, [r7, #20]
 801e5bc:	683b      	ldr	r3, [r7, #0]
 801e5be:	88db      	ldrh	r3, [r3, #6]
 801e5c0:	085b      	lsrs	r3, r3, #1
 801e5c2:	b29b      	uxth	r3, r3
 801e5c4:	18db      	adds	r3, r3, r3
 801e5c6:	b29a      	uxth	r2, r3
 801e5c8:	697b      	ldr	r3, [r7, #20]
 801e5ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e5cc:	687a      	ldr	r2, [r7, #4]
 801e5ce:	683b      	ldr	r3, [r7, #0]
 801e5d0:	781b      	ldrb	r3, [r3, #0]
 801e5d2:	009b      	lsls	r3, r3, #2
 801e5d4:	18d2      	adds	r2, r2, r3
 801e5d6:	2112      	movs	r1, #18
 801e5d8:	187b      	adds	r3, r7, r1
 801e5da:	8812      	ldrh	r2, [r2, #0]
 801e5dc:	801a      	strh	r2, [r3, #0]
 801e5de:	187b      	adds	r3, r7, r1
 801e5e0:	881b      	ldrh	r3, [r3, #0]
 801e5e2:	2240      	movs	r2, #64	@ 0x40
 801e5e4:	4013      	ands	r3, r2
 801e5e6:	d016      	beq.n	801e616 <USB_ActivateEndpoint+0x17a>
 801e5e8:	687a      	ldr	r2, [r7, #4]
 801e5ea:	683b      	ldr	r3, [r7, #0]
 801e5ec:	781b      	ldrb	r3, [r3, #0]
 801e5ee:	009b      	lsls	r3, r3, #2
 801e5f0:	18d3      	adds	r3, r2, r3
 801e5f2:	881b      	ldrh	r3, [r3, #0]
 801e5f4:	b29a      	uxth	r2, r3
 801e5f6:	2010      	movs	r0, #16
 801e5f8:	183b      	adds	r3, r7, r0
 801e5fa:	4957      	ldr	r1, [pc, #348]	@ (801e758 <USB_ActivateEndpoint+0x2bc>)
 801e5fc:	400a      	ands	r2, r1
 801e5fe:	801a      	strh	r2, [r3, #0]
 801e600:	687a      	ldr	r2, [r7, #4]
 801e602:	683b      	ldr	r3, [r7, #0]
 801e604:	781b      	ldrb	r3, [r3, #0]
 801e606:	009b      	lsls	r3, r3, #2
 801e608:	18d3      	adds	r3, r2, r3
 801e60a:	183a      	adds	r2, r7, r0
 801e60c:	8812      	ldrh	r2, [r2, #0]
 801e60e:	4953      	ldr	r1, [pc, #332]	@ (801e75c <USB_ActivateEndpoint+0x2c0>)
 801e610:	430a      	orrs	r2, r1
 801e612:	b292      	uxth	r2, r2
 801e614:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e616:	683b      	ldr	r3, [r7, #0]
 801e618:	78db      	ldrb	r3, [r3, #3]
 801e61a:	2b01      	cmp	r3, #1
 801e61c:	d01d      	beq.n	801e65a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e61e:	687a      	ldr	r2, [r7, #4]
 801e620:	683b      	ldr	r3, [r7, #0]
 801e622:	781b      	ldrb	r3, [r3, #0]
 801e624:	009b      	lsls	r3, r3, #2
 801e626:	18d3      	adds	r3, r2, r3
 801e628:	881b      	ldrh	r3, [r3, #0]
 801e62a:	b29a      	uxth	r2, r3
 801e62c:	200c      	movs	r0, #12
 801e62e:	183b      	adds	r3, r7, r0
 801e630:	494b      	ldr	r1, [pc, #300]	@ (801e760 <USB_ActivateEndpoint+0x2c4>)
 801e632:	400a      	ands	r2, r1
 801e634:	801a      	strh	r2, [r3, #0]
 801e636:	183b      	adds	r3, r7, r0
 801e638:	183a      	adds	r2, r7, r0
 801e63a:	8812      	ldrh	r2, [r2, #0]
 801e63c:	2120      	movs	r1, #32
 801e63e:	404a      	eors	r2, r1
 801e640:	801a      	strh	r2, [r3, #0]
 801e642:	687a      	ldr	r2, [r7, #4]
 801e644:	683b      	ldr	r3, [r7, #0]
 801e646:	781b      	ldrb	r3, [r3, #0]
 801e648:	009b      	lsls	r3, r3, #2
 801e64a:	18d3      	adds	r3, r2, r3
 801e64c:	183a      	adds	r2, r7, r0
 801e64e:	8812      	ldrh	r2, [r2, #0]
 801e650:	4940      	ldr	r1, [pc, #256]	@ (801e754 <USB_ActivateEndpoint+0x2b8>)
 801e652:	430a      	orrs	r2, r1
 801e654:	b292      	uxth	r2, r2
 801e656:	801a      	strh	r2, [r3, #0]
 801e658:	e2b4      	b.n	801ebc4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e65a:	687a      	ldr	r2, [r7, #4]
 801e65c:	683b      	ldr	r3, [r7, #0]
 801e65e:	781b      	ldrb	r3, [r3, #0]
 801e660:	009b      	lsls	r3, r3, #2
 801e662:	18d3      	adds	r3, r2, r3
 801e664:	881b      	ldrh	r3, [r3, #0]
 801e666:	b29a      	uxth	r2, r3
 801e668:	200e      	movs	r0, #14
 801e66a:	183b      	adds	r3, r7, r0
 801e66c:	493c      	ldr	r1, [pc, #240]	@ (801e760 <USB_ActivateEndpoint+0x2c4>)
 801e66e:	400a      	ands	r2, r1
 801e670:	801a      	strh	r2, [r3, #0]
 801e672:	687a      	ldr	r2, [r7, #4]
 801e674:	683b      	ldr	r3, [r7, #0]
 801e676:	781b      	ldrb	r3, [r3, #0]
 801e678:	009b      	lsls	r3, r3, #2
 801e67a:	18d3      	adds	r3, r2, r3
 801e67c:	183a      	adds	r2, r7, r0
 801e67e:	8812      	ldrh	r2, [r2, #0]
 801e680:	4934      	ldr	r1, [pc, #208]	@ (801e754 <USB_ActivateEndpoint+0x2b8>)
 801e682:	430a      	orrs	r2, r1
 801e684:	b292      	uxth	r2, r2
 801e686:	801a      	strh	r2, [r3, #0]
 801e688:	e29c      	b.n	801ebc4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801e68a:	687b      	ldr	r3, [r7, #4]
 801e68c:	633b      	str	r3, [r7, #48]	@ 0x30
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	2250      	movs	r2, #80	@ 0x50
 801e692:	5a9b      	ldrh	r3, [r3, r2]
 801e694:	b29b      	uxth	r3, r3
 801e696:	001a      	movs	r2, r3
 801e698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e69a:	189b      	adds	r3, r3, r2
 801e69c:	633b      	str	r3, [r7, #48]	@ 0x30
 801e69e:	683b      	ldr	r3, [r7, #0]
 801e6a0:	781b      	ldrb	r3, [r3, #0]
 801e6a2:	00da      	lsls	r2, r3, #3
 801e6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6a6:	18d3      	adds	r3, r2, r3
 801e6a8:	4a2e      	ldr	r2, [pc, #184]	@ (801e764 <USB_ActivateEndpoint+0x2c8>)
 801e6aa:	4694      	mov	ip, r2
 801e6ac:	4463      	add	r3, ip
 801e6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e6b0:	683b      	ldr	r3, [r7, #0]
 801e6b2:	88db      	ldrh	r3, [r3, #6]
 801e6b4:	085b      	lsrs	r3, r3, #1
 801e6b6:	b29b      	uxth	r3, r3
 801e6b8:	18db      	adds	r3, r3, r3
 801e6ba:	b29a      	uxth	r2, r3
 801e6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e6be:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e6c4:	687b      	ldr	r3, [r7, #4]
 801e6c6:	2250      	movs	r2, #80	@ 0x50
 801e6c8:	5a9b      	ldrh	r3, [r3, r2]
 801e6ca:	b29b      	uxth	r3, r3
 801e6cc:	001a      	movs	r2, r3
 801e6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e6d0:	189b      	adds	r3, r3, r2
 801e6d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e6d4:	683b      	ldr	r3, [r7, #0]
 801e6d6:	781b      	ldrb	r3, [r3, #0]
 801e6d8:	00da      	lsls	r2, r3, #3
 801e6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e6dc:	18d3      	adds	r3, r2, r3
 801e6de:	4a22      	ldr	r2, [pc, #136]	@ (801e768 <USB_ActivateEndpoint+0x2cc>)
 801e6e0:	4694      	mov	ip, r2
 801e6e2:	4463      	add	r3, ip
 801e6e4:	627b      	str	r3, [r7, #36]	@ 0x24
 801e6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6e8:	881b      	ldrh	r3, [r3, #0]
 801e6ea:	b29b      	uxth	r3, r3
 801e6ec:	059b      	lsls	r3, r3, #22
 801e6ee:	0d9b      	lsrs	r3, r3, #22
 801e6f0:	b29a      	uxth	r2, r3
 801e6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e6f4:	801a      	strh	r2, [r3, #0]
 801e6f6:	683b      	ldr	r3, [r7, #0]
 801e6f8:	691b      	ldr	r3, [r3, #16]
 801e6fa:	2b3e      	cmp	r3, #62	@ 0x3e
 801e6fc:	d91a      	bls.n	801e734 <USB_ActivateEndpoint+0x298>
 801e6fe:	683b      	ldr	r3, [r7, #0]
 801e700:	691b      	ldr	r3, [r3, #16]
 801e702:	095b      	lsrs	r3, r3, #5
 801e704:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e706:	683b      	ldr	r3, [r7, #0]
 801e708:	691b      	ldr	r3, [r3, #16]
 801e70a:	221f      	movs	r2, #31
 801e70c:	4013      	ands	r3, r2
 801e70e:	d102      	bne.n	801e716 <USB_ActivateEndpoint+0x27a>
 801e710:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e712:	3b01      	subs	r3, #1
 801e714:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e718:	881b      	ldrh	r3, [r3, #0]
 801e71a:	b29a      	uxth	r2, r3
 801e71c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e71e:	b29b      	uxth	r3, r3
 801e720:	029b      	lsls	r3, r3, #10
 801e722:	b29b      	uxth	r3, r3
 801e724:	4313      	orrs	r3, r2
 801e726:	b29b      	uxth	r3, r3
 801e728:	4a10      	ldr	r2, [pc, #64]	@ (801e76c <USB_ActivateEndpoint+0x2d0>)
 801e72a:	4313      	orrs	r3, r2
 801e72c:	b29a      	uxth	r2, r3
 801e72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e730:	801a      	strh	r2, [r3, #0]
 801e732:	e034      	b.n	801e79e <USB_ActivateEndpoint+0x302>
 801e734:	683b      	ldr	r3, [r7, #0]
 801e736:	691b      	ldr	r3, [r3, #16]
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d119      	bne.n	801e770 <USB_ActivateEndpoint+0x2d4>
 801e73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e73e:	881b      	ldrh	r3, [r3, #0]
 801e740:	b29b      	uxth	r3, r3
 801e742:	4a0a      	ldr	r2, [pc, #40]	@ (801e76c <USB_ActivateEndpoint+0x2d0>)
 801e744:	4313      	orrs	r3, r2
 801e746:	b29a      	uxth	r2, r3
 801e748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e74a:	801a      	strh	r2, [r3, #0]
 801e74c:	e027      	b.n	801e79e <USB_ActivateEndpoint+0x302>
 801e74e:	46c0      	nop			@ (mov r8, r8)
 801e750:	ffff898f 	.word	0xffff898f
 801e754:	ffff8080 	.word	0xffff8080
 801e758:	ffff8f8f 	.word	0xffff8f8f
 801e75c:	ffff80c0 	.word	0xffff80c0
 801e760:	ffff8fbf 	.word	0xffff8fbf
 801e764:	00000404 	.word	0x00000404
 801e768:	00000406 	.word	0x00000406
 801e76c:	ffff8000 	.word	0xffff8000
 801e770:	683b      	ldr	r3, [r7, #0]
 801e772:	691b      	ldr	r3, [r3, #16]
 801e774:	085b      	lsrs	r3, r3, #1
 801e776:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e778:	683b      	ldr	r3, [r7, #0]
 801e77a:	691b      	ldr	r3, [r3, #16]
 801e77c:	2201      	movs	r2, #1
 801e77e:	4013      	ands	r3, r2
 801e780:	d002      	beq.n	801e788 <USB_ActivateEndpoint+0x2ec>
 801e782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e784:	3301      	adds	r3, #1
 801e786:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e78a:	881b      	ldrh	r3, [r3, #0]
 801e78c:	b29a      	uxth	r2, r3
 801e78e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e790:	b29b      	uxth	r3, r3
 801e792:	029b      	lsls	r3, r3, #10
 801e794:	b29b      	uxth	r3, r3
 801e796:	4313      	orrs	r3, r2
 801e798:	b29a      	uxth	r2, r3
 801e79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e79c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e79e:	687a      	ldr	r2, [r7, #4]
 801e7a0:	683b      	ldr	r3, [r7, #0]
 801e7a2:	781b      	ldrb	r3, [r3, #0]
 801e7a4:	009b      	lsls	r3, r3, #2
 801e7a6:	18d2      	adds	r2, r2, r3
 801e7a8:	2122      	movs	r1, #34	@ 0x22
 801e7aa:	187b      	adds	r3, r7, r1
 801e7ac:	8812      	ldrh	r2, [r2, #0]
 801e7ae:	801a      	strh	r2, [r3, #0]
 801e7b0:	187b      	adds	r3, r7, r1
 801e7b2:	881a      	ldrh	r2, [r3, #0]
 801e7b4:	2380      	movs	r3, #128	@ 0x80
 801e7b6:	01db      	lsls	r3, r3, #7
 801e7b8:	4013      	ands	r3, r2
 801e7ba:	d016      	beq.n	801e7ea <USB_ActivateEndpoint+0x34e>
 801e7bc:	687a      	ldr	r2, [r7, #4]
 801e7be:	683b      	ldr	r3, [r7, #0]
 801e7c0:	781b      	ldrb	r3, [r3, #0]
 801e7c2:	009b      	lsls	r3, r3, #2
 801e7c4:	18d3      	adds	r3, r2, r3
 801e7c6:	881b      	ldrh	r3, [r3, #0]
 801e7c8:	b29a      	uxth	r2, r3
 801e7ca:	2020      	movs	r0, #32
 801e7cc:	183b      	adds	r3, r7, r0
 801e7ce:	49dd      	ldr	r1, [pc, #884]	@ (801eb44 <USB_ActivateEndpoint+0x6a8>)
 801e7d0:	400a      	ands	r2, r1
 801e7d2:	801a      	strh	r2, [r3, #0]
 801e7d4:	687a      	ldr	r2, [r7, #4]
 801e7d6:	683b      	ldr	r3, [r7, #0]
 801e7d8:	781b      	ldrb	r3, [r3, #0]
 801e7da:	009b      	lsls	r3, r3, #2
 801e7dc:	18d3      	adds	r3, r2, r3
 801e7de:	183a      	adds	r2, r7, r0
 801e7e0:	8812      	ldrh	r2, [r2, #0]
 801e7e2:	49d9      	ldr	r1, [pc, #868]	@ (801eb48 <USB_ActivateEndpoint+0x6ac>)
 801e7e4:	430a      	orrs	r2, r1
 801e7e6:	b292      	uxth	r2, r2
 801e7e8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801e7ea:	683b      	ldr	r3, [r7, #0]
 801e7ec:	781b      	ldrb	r3, [r3, #0]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d125      	bne.n	801e83e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e7f2:	687a      	ldr	r2, [r7, #4]
 801e7f4:	683b      	ldr	r3, [r7, #0]
 801e7f6:	781b      	ldrb	r3, [r3, #0]
 801e7f8:	009b      	lsls	r3, r3, #2
 801e7fa:	18d3      	adds	r3, r2, r3
 801e7fc:	881b      	ldrh	r3, [r3, #0]
 801e7fe:	b29a      	uxth	r2, r3
 801e800:	201c      	movs	r0, #28
 801e802:	183b      	adds	r3, r7, r0
 801e804:	49d1      	ldr	r1, [pc, #836]	@ (801eb4c <USB_ActivateEndpoint+0x6b0>)
 801e806:	400a      	ands	r2, r1
 801e808:	801a      	strh	r2, [r3, #0]
 801e80a:	183b      	adds	r3, r7, r0
 801e80c:	183a      	adds	r2, r7, r0
 801e80e:	8812      	ldrh	r2, [r2, #0]
 801e810:	2180      	movs	r1, #128	@ 0x80
 801e812:	0149      	lsls	r1, r1, #5
 801e814:	404a      	eors	r2, r1
 801e816:	801a      	strh	r2, [r3, #0]
 801e818:	183b      	adds	r3, r7, r0
 801e81a:	183a      	adds	r2, r7, r0
 801e81c:	8812      	ldrh	r2, [r2, #0]
 801e81e:	2180      	movs	r1, #128	@ 0x80
 801e820:	0189      	lsls	r1, r1, #6
 801e822:	404a      	eors	r2, r1
 801e824:	801a      	strh	r2, [r3, #0]
 801e826:	687a      	ldr	r2, [r7, #4]
 801e828:	683b      	ldr	r3, [r7, #0]
 801e82a:	781b      	ldrb	r3, [r3, #0]
 801e82c:	009b      	lsls	r3, r3, #2
 801e82e:	18d3      	adds	r3, r2, r3
 801e830:	183a      	adds	r2, r7, r0
 801e832:	8812      	ldrh	r2, [r2, #0]
 801e834:	49c6      	ldr	r1, [pc, #792]	@ (801eb50 <USB_ActivateEndpoint+0x6b4>)
 801e836:	430a      	orrs	r2, r1
 801e838:	b292      	uxth	r2, r2
 801e83a:	801a      	strh	r2, [r3, #0]
 801e83c:	e1c2      	b.n	801ebc4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801e83e:	687a      	ldr	r2, [r7, #4]
 801e840:	683b      	ldr	r3, [r7, #0]
 801e842:	781b      	ldrb	r3, [r3, #0]
 801e844:	009b      	lsls	r3, r3, #2
 801e846:	18d3      	adds	r3, r2, r3
 801e848:	881b      	ldrh	r3, [r3, #0]
 801e84a:	b29a      	uxth	r2, r3
 801e84c:	201e      	movs	r0, #30
 801e84e:	183b      	adds	r3, r7, r0
 801e850:	49be      	ldr	r1, [pc, #760]	@ (801eb4c <USB_ActivateEndpoint+0x6b0>)
 801e852:	400a      	ands	r2, r1
 801e854:	801a      	strh	r2, [r3, #0]
 801e856:	183b      	adds	r3, r7, r0
 801e858:	183a      	adds	r2, r7, r0
 801e85a:	8812      	ldrh	r2, [r2, #0]
 801e85c:	2180      	movs	r1, #128	@ 0x80
 801e85e:	0189      	lsls	r1, r1, #6
 801e860:	404a      	eors	r2, r1
 801e862:	801a      	strh	r2, [r3, #0]
 801e864:	687a      	ldr	r2, [r7, #4]
 801e866:	683b      	ldr	r3, [r7, #0]
 801e868:	781b      	ldrb	r3, [r3, #0]
 801e86a:	009b      	lsls	r3, r3, #2
 801e86c:	18d3      	adds	r3, r2, r3
 801e86e:	183a      	adds	r2, r7, r0
 801e870:	8812      	ldrh	r2, [r2, #0]
 801e872:	49b7      	ldr	r1, [pc, #732]	@ (801eb50 <USB_ActivateEndpoint+0x6b4>)
 801e874:	430a      	orrs	r2, r1
 801e876:	b292      	uxth	r2, r2
 801e878:	801a      	strh	r2, [r3, #0]
 801e87a:	e1a3      	b.n	801ebc4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801e87c:	683b      	ldr	r3, [r7, #0]
 801e87e:	78db      	ldrb	r3, [r3, #3]
 801e880:	2b02      	cmp	r3, #2
 801e882:	d117      	bne.n	801e8b4 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801e884:	687a      	ldr	r2, [r7, #4]
 801e886:	683b      	ldr	r3, [r7, #0]
 801e888:	781b      	ldrb	r3, [r3, #0]
 801e88a:	009b      	lsls	r3, r3, #2
 801e88c:	18d3      	adds	r3, r2, r3
 801e88e:	881b      	ldrh	r3, [r3, #0]
 801e890:	b29a      	uxth	r2, r3
 801e892:	2062      	movs	r0, #98	@ 0x62
 801e894:	183b      	adds	r3, r7, r0
 801e896:	49ab      	ldr	r1, [pc, #684]	@ (801eb44 <USB_ActivateEndpoint+0x6a8>)
 801e898:	400a      	ands	r2, r1
 801e89a:	801a      	strh	r2, [r3, #0]
 801e89c:	687a      	ldr	r2, [r7, #4]
 801e89e:	683b      	ldr	r3, [r7, #0]
 801e8a0:	781b      	ldrb	r3, [r3, #0]
 801e8a2:	009b      	lsls	r3, r3, #2
 801e8a4:	18d3      	adds	r3, r2, r3
 801e8a6:	183a      	adds	r2, r7, r0
 801e8a8:	8812      	ldrh	r2, [r2, #0]
 801e8aa:	49aa      	ldr	r1, [pc, #680]	@ (801eb54 <USB_ActivateEndpoint+0x6b8>)
 801e8ac:	430a      	orrs	r2, r1
 801e8ae:	b292      	uxth	r2, r2
 801e8b0:	801a      	strh	r2, [r3, #0]
 801e8b2:	e016      	b.n	801e8e2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801e8b4:	687a      	ldr	r2, [r7, #4]
 801e8b6:	683b      	ldr	r3, [r7, #0]
 801e8b8:	781b      	ldrb	r3, [r3, #0]
 801e8ba:	009b      	lsls	r3, r3, #2
 801e8bc:	18d3      	adds	r3, r2, r3
 801e8be:	881b      	ldrh	r3, [r3, #0]
 801e8c0:	b29a      	uxth	r2, r3
 801e8c2:	2064      	movs	r0, #100	@ 0x64
 801e8c4:	183b      	adds	r3, r7, r0
 801e8c6:	49a4      	ldr	r1, [pc, #656]	@ (801eb58 <USB_ActivateEndpoint+0x6bc>)
 801e8c8:	400a      	ands	r2, r1
 801e8ca:	801a      	strh	r2, [r3, #0]
 801e8cc:	687a      	ldr	r2, [r7, #4]
 801e8ce:	683b      	ldr	r3, [r7, #0]
 801e8d0:	781b      	ldrb	r3, [r3, #0]
 801e8d2:	009b      	lsls	r3, r3, #2
 801e8d4:	18d3      	adds	r3, r2, r3
 801e8d6:	183a      	adds	r2, r7, r0
 801e8d8:	8812      	ldrh	r2, [r2, #0]
 801e8da:	499d      	ldr	r1, [pc, #628]	@ (801eb50 <USB_ActivateEndpoint+0x6b4>)
 801e8dc:	430a      	orrs	r2, r1
 801e8de:	b292      	uxth	r2, r2
 801e8e0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801e8e2:	687b      	ldr	r3, [r7, #4]
 801e8e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e8e6:	687b      	ldr	r3, [r7, #4]
 801e8e8:	2250      	movs	r2, #80	@ 0x50
 801e8ea:	5a9b      	ldrh	r3, [r3, r2]
 801e8ec:	b29b      	uxth	r3, r3
 801e8ee:	001a      	movs	r2, r3
 801e8f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e8f2:	189b      	adds	r3, r3, r2
 801e8f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e8f6:	683b      	ldr	r3, [r7, #0]
 801e8f8:	781b      	ldrb	r3, [r3, #0]
 801e8fa:	00da      	lsls	r2, r3, #3
 801e8fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e8fe:	18d3      	adds	r3, r2, r3
 801e900:	2280      	movs	r2, #128	@ 0x80
 801e902:	00d2      	lsls	r2, r2, #3
 801e904:	4694      	mov	ip, r2
 801e906:	4463      	add	r3, ip
 801e908:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e90a:	683b      	ldr	r3, [r7, #0]
 801e90c:	891b      	ldrh	r3, [r3, #8]
 801e90e:	085b      	lsrs	r3, r3, #1
 801e910:	b29b      	uxth	r3, r3
 801e912:	18db      	adds	r3, r3, r3
 801e914:	b29a      	uxth	r2, r3
 801e916:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e918:	801a      	strh	r2, [r3, #0]
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	657b      	str	r3, [r7, #84]	@ 0x54
 801e91e:	687b      	ldr	r3, [r7, #4]
 801e920:	2250      	movs	r2, #80	@ 0x50
 801e922:	5a9b      	ldrh	r3, [r3, r2]
 801e924:	b29b      	uxth	r3, r3
 801e926:	001a      	movs	r2, r3
 801e928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e92a:	189b      	adds	r3, r3, r2
 801e92c:	657b      	str	r3, [r7, #84]	@ 0x54
 801e92e:	683b      	ldr	r3, [r7, #0]
 801e930:	781b      	ldrb	r3, [r3, #0]
 801e932:	00da      	lsls	r2, r3, #3
 801e934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e936:	18d3      	adds	r3, r2, r3
 801e938:	4a88      	ldr	r2, [pc, #544]	@ (801eb5c <USB_ActivateEndpoint+0x6c0>)
 801e93a:	4694      	mov	ip, r2
 801e93c:	4463      	add	r3, ip
 801e93e:	653b      	str	r3, [r7, #80]	@ 0x50
 801e940:	683b      	ldr	r3, [r7, #0]
 801e942:	895b      	ldrh	r3, [r3, #10]
 801e944:	085b      	lsrs	r3, r3, #1
 801e946:	b29b      	uxth	r3, r3
 801e948:	18db      	adds	r3, r3, r3
 801e94a:	b29a      	uxth	r2, r3
 801e94c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e94e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801e950:	683b      	ldr	r3, [r7, #0]
 801e952:	785b      	ldrb	r3, [r3, #1]
 801e954:	2b00      	cmp	r3, #0
 801e956:	d000      	beq.n	801e95a <USB_ActivateEndpoint+0x4be>
 801e958:	e087      	b.n	801ea6a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e95a:	687a      	ldr	r2, [r7, #4]
 801e95c:	683b      	ldr	r3, [r7, #0]
 801e95e:	781b      	ldrb	r3, [r3, #0]
 801e960:	009b      	lsls	r3, r3, #2
 801e962:	18d2      	adds	r2, r2, r3
 801e964:	2140      	movs	r1, #64	@ 0x40
 801e966:	187b      	adds	r3, r7, r1
 801e968:	8812      	ldrh	r2, [r2, #0]
 801e96a:	801a      	strh	r2, [r3, #0]
 801e96c:	187b      	adds	r3, r7, r1
 801e96e:	881a      	ldrh	r2, [r3, #0]
 801e970:	2380      	movs	r3, #128	@ 0x80
 801e972:	01db      	lsls	r3, r3, #7
 801e974:	4013      	ands	r3, r2
 801e976:	d016      	beq.n	801e9a6 <USB_ActivateEndpoint+0x50a>
 801e978:	687a      	ldr	r2, [r7, #4]
 801e97a:	683b      	ldr	r3, [r7, #0]
 801e97c:	781b      	ldrb	r3, [r3, #0]
 801e97e:	009b      	lsls	r3, r3, #2
 801e980:	18d3      	adds	r3, r2, r3
 801e982:	881b      	ldrh	r3, [r3, #0]
 801e984:	b29a      	uxth	r2, r3
 801e986:	203e      	movs	r0, #62	@ 0x3e
 801e988:	183b      	adds	r3, r7, r0
 801e98a:	496e      	ldr	r1, [pc, #440]	@ (801eb44 <USB_ActivateEndpoint+0x6a8>)
 801e98c:	400a      	ands	r2, r1
 801e98e:	801a      	strh	r2, [r3, #0]
 801e990:	687a      	ldr	r2, [r7, #4]
 801e992:	683b      	ldr	r3, [r7, #0]
 801e994:	781b      	ldrb	r3, [r3, #0]
 801e996:	009b      	lsls	r3, r3, #2
 801e998:	18d3      	adds	r3, r2, r3
 801e99a:	183a      	adds	r2, r7, r0
 801e99c:	8812      	ldrh	r2, [r2, #0]
 801e99e:	496a      	ldr	r1, [pc, #424]	@ (801eb48 <USB_ActivateEndpoint+0x6ac>)
 801e9a0:	430a      	orrs	r2, r1
 801e9a2:	b292      	uxth	r2, r2
 801e9a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e9a6:	687a      	ldr	r2, [r7, #4]
 801e9a8:	683b      	ldr	r3, [r7, #0]
 801e9aa:	781b      	ldrb	r3, [r3, #0]
 801e9ac:	009b      	lsls	r3, r3, #2
 801e9ae:	18d2      	adds	r2, r2, r3
 801e9b0:	213c      	movs	r1, #60	@ 0x3c
 801e9b2:	187b      	adds	r3, r7, r1
 801e9b4:	8812      	ldrh	r2, [r2, #0]
 801e9b6:	801a      	strh	r2, [r3, #0]
 801e9b8:	187b      	adds	r3, r7, r1
 801e9ba:	881b      	ldrh	r3, [r3, #0]
 801e9bc:	2240      	movs	r2, #64	@ 0x40
 801e9be:	4013      	ands	r3, r2
 801e9c0:	d016      	beq.n	801e9f0 <USB_ActivateEndpoint+0x554>
 801e9c2:	687a      	ldr	r2, [r7, #4]
 801e9c4:	683b      	ldr	r3, [r7, #0]
 801e9c6:	781b      	ldrb	r3, [r3, #0]
 801e9c8:	009b      	lsls	r3, r3, #2
 801e9ca:	18d3      	adds	r3, r2, r3
 801e9cc:	881b      	ldrh	r3, [r3, #0]
 801e9ce:	b29a      	uxth	r2, r3
 801e9d0:	203a      	movs	r0, #58	@ 0x3a
 801e9d2:	183b      	adds	r3, r7, r0
 801e9d4:	495b      	ldr	r1, [pc, #364]	@ (801eb44 <USB_ActivateEndpoint+0x6a8>)
 801e9d6:	400a      	ands	r2, r1
 801e9d8:	801a      	strh	r2, [r3, #0]
 801e9da:	687a      	ldr	r2, [r7, #4]
 801e9dc:	683b      	ldr	r3, [r7, #0]
 801e9de:	781b      	ldrb	r3, [r3, #0]
 801e9e0:	009b      	lsls	r3, r3, #2
 801e9e2:	18d3      	adds	r3, r2, r3
 801e9e4:	183a      	adds	r2, r7, r0
 801e9e6:	8812      	ldrh	r2, [r2, #0]
 801e9e8:	495d      	ldr	r1, [pc, #372]	@ (801eb60 <USB_ActivateEndpoint+0x6c4>)
 801e9ea:	430a      	orrs	r2, r1
 801e9ec:	b292      	uxth	r2, r2
 801e9ee:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e9f0:	687a      	ldr	r2, [r7, #4]
 801e9f2:	683b      	ldr	r3, [r7, #0]
 801e9f4:	781b      	ldrb	r3, [r3, #0]
 801e9f6:	009b      	lsls	r3, r3, #2
 801e9f8:	18d3      	adds	r3, r2, r3
 801e9fa:	881b      	ldrh	r3, [r3, #0]
 801e9fc:	b29a      	uxth	r2, r3
 801e9fe:	2038      	movs	r0, #56	@ 0x38
 801ea00:	183b      	adds	r3, r7, r0
 801ea02:	4952      	ldr	r1, [pc, #328]	@ (801eb4c <USB_ActivateEndpoint+0x6b0>)
 801ea04:	400a      	ands	r2, r1
 801ea06:	801a      	strh	r2, [r3, #0]
 801ea08:	183b      	adds	r3, r7, r0
 801ea0a:	183a      	adds	r2, r7, r0
 801ea0c:	8812      	ldrh	r2, [r2, #0]
 801ea0e:	2180      	movs	r1, #128	@ 0x80
 801ea10:	0149      	lsls	r1, r1, #5
 801ea12:	404a      	eors	r2, r1
 801ea14:	801a      	strh	r2, [r3, #0]
 801ea16:	183b      	adds	r3, r7, r0
 801ea18:	183a      	adds	r2, r7, r0
 801ea1a:	8812      	ldrh	r2, [r2, #0]
 801ea1c:	2180      	movs	r1, #128	@ 0x80
 801ea1e:	0189      	lsls	r1, r1, #6
 801ea20:	404a      	eors	r2, r1
 801ea22:	801a      	strh	r2, [r3, #0]
 801ea24:	687a      	ldr	r2, [r7, #4]
 801ea26:	683b      	ldr	r3, [r7, #0]
 801ea28:	781b      	ldrb	r3, [r3, #0]
 801ea2a:	009b      	lsls	r3, r3, #2
 801ea2c:	18d3      	adds	r3, r2, r3
 801ea2e:	183a      	adds	r2, r7, r0
 801ea30:	8812      	ldrh	r2, [r2, #0]
 801ea32:	4947      	ldr	r1, [pc, #284]	@ (801eb50 <USB_ActivateEndpoint+0x6b4>)
 801ea34:	430a      	orrs	r2, r1
 801ea36:	b292      	uxth	r2, r2
 801ea38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ea3a:	687a      	ldr	r2, [r7, #4]
 801ea3c:	683b      	ldr	r3, [r7, #0]
 801ea3e:	781b      	ldrb	r3, [r3, #0]
 801ea40:	009b      	lsls	r3, r3, #2
 801ea42:	18d3      	adds	r3, r2, r3
 801ea44:	881b      	ldrh	r3, [r3, #0]
 801ea46:	b29a      	uxth	r2, r3
 801ea48:	2036      	movs	r0, #54	@ 0x36
 801ea4a:	183b      	adds	r3, r7, r0
 801ea4c:	4945      	ldr	r1, [pc, #276]	@ (801eb64 <USB_ActivateEndpoint+0x6c8>)
 801ea4e:	400a      	ands	r2, r1
 801ea50:	801a      	strh	r2, [r3, #0]
 801ea52:	687a      	ldr	r2, [r7, #4]
 801ea54:	683b      	ldr	r3, [r7, #0]
 801ea56:	781b      	ldrb	r3, [r3, #0]
 801ea58:	009b      	lsls	r3, r3, #2
 801ea5a:	18d3      	adds	r3, r2, r3
 801ea5c:	183a      	adds	r2, r7, r0
 801ea5e:	8812      	ldrh	r2, [r2, #0]
 801ea60:	493b      	ldr	r1, [pc, #236]	@ (801eb50 <USB_ActivateEndpoint+0x6b4>)
 801ea62:	430a      	orrs	r2, r1
 801ea64:	b292      	uxth	r2, r2
 801ea66:	801a      	strh	r2, [r3, #0]
 801ea68:	e0ac      	b.n	801ebc4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ea6a:	687a      	ldr	r2, [r7, #4]
 801ea6c:	683b      	ldr	r3, [r7, #0]
 801ea6e:	781b      	ldrb	r3, [r3, #0]
 801ea70:	009b      	lsls	r3, r3, #2
 801ea72:	18d2      	adds	r2, r2, r3
 801ea74:	214e      	movs	r1, #78	@ 0x4e
 801ea76:	187b      	adds	r3, r7, r1
 801ea78:	8812      	ldrh	r2, [r2, #0]
 801ea7a:	801a      	strh	r2, [r3, #0]
 801ea7c:	187b      	adds	r3, r7, r1
 801ea7e:	881a      	ldrh	r2, [r3, #0]
 801ea80:	2380      	movs	r3, #128	@ 0x80
 801ea82:	01db      	lsls	r3, r3, #7
 801ea84:	4013      	ands	r3, r2
 801ea86:	d016      	beq.n	801eab6 <USB_ActivateEndpoint+0x61a>
 801ea88:	687a      	ldr	r2, [r7, #4]
 801ea8a:	683b      	ldr	r3, [r7, #0]
 801ea8c:	781b      	ldrb	r3, [r3, #0]
 801ea8e:	009b      	lsls	r3, r3, #2
 801ea90:	18d3      	adds	r3, r2, r3
 801ea92:	881b      	ldrh	r3, [r3, #0]
 801ea94:	b29a      	uxth	r2, r3
 801ea96:	204c      	movs	r0, #76	@ 0x4c
 801ea98:	183b      	adds	r3, r7, r0
 801ea9a:	492a      	ldr	r1, [pc, #168]	@ (801eb44 <USB_ActivateEndpoint+0x6a8>)
 801ea9c:	400a      	ands	r2, r1
 801ea9e:	801a      	strh	r2, [r3, #0]
 801eaa0:	687a      	ldr	r2, [r7, #4]
 801eaa2:	683b      	ldr	r3, [r7, #0]
 801eaa4:	781b      	ldrb	r3, [r3, #0]
 801eaa6:	009b      	lsls	r3, r3, #2
 801eaa8:	18d3      	adds	r3, r2, r3
 801eaaa:	183a      	adds	r2, r7, r0
 801eaac:	8812      	ldrh	r2, [r2, #0]
 801eaae:	4926      	ldr	r1, [pc, #152]	@ (801eb48 <USB_ActivateEndpoint+0x6ac>)
 801eab0:	430a      	orrs	r2, r1
 801eab2:	b292      	uxth	r2, r2
 801eab4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801eab6:	687a      	ldr	r2, [r7, #4]
 801eab8:	683b      	ldr	r3, [r7, #0]
 801eaba:	781b      	ldrb	r3, [r3, #0]
 801eabc:	009b      	lsls	r3, r3, #2
 801eabe:	18d2      	adds	r2, r2, r3
 801eac0:	214a      	movs	r1, #74	@ 0x4a
 801eac2:	187b      	adds	r3, r7, r1
 801eac4:	8812      	ldrh	r2, [r2, #0]
 801eac6:	801a      	strh	r2, [r3, #0]
 801eac8:	187b      	adds	r3, r7, r1
 801eaca:	881b      	ldrh	r3, [r3, #0]
 801eacc:	2240      	movs	r2, #64	@ 0x40
 801eace:	4013      	ands	r3, r2
 801ead0:	d016      	beq.n	801eb00 <USB_ActivateEndpoint+0x664>
 801ead2:	687a      	ldr	r2, [r7, #4]
 801ead4:	683b      	ldr	r3, [r7, #0]
 801ead6:	781b      	ldrb	r3, [r3, #0]
 801ead8:	009b      	lsls	r3, r3, #2
 801eada:	18d3      	adds	r3, r2, r3
 801eadc:	881b      	ldrh	r3, [r3, #0]
 801eade:	b29a      	uxth	r2, r3
 801eae0:	2048      	movs	r0, #72	@ 0x48
 801eae2:	183b      	adds	r3, r7, r0
 801eae4:	4917      	ldr	r1, [pc, #92]	@ (801eb44 <USB_ActivateEndpoint+0x6a8>)
 801eae6:	400a      	ands	r2, r1
 801eae8:	801a      	strh	r2, [r3, #0]
 801eaea:	687a      	ldr	r2, [r7, #4]
 801eaec:	683b      	ldr	r3, [r7, #0]
 801eaee:	781b      	ldrb	r3, [r3, #0]
 801eaf0:	009b      	lsls	r3, r3, #2
 801eaf2:	18d3      	adds	r3, r2, r3
 801eaf4:	183a      	adds	r2, r7, r0
 801eaf6:	8812      	ldrh	r2, [r2, #0]
 801eaf8:	4919      	ldr	r1, [pc, #100]	@ (801eb60 <USB_ActivateEndpoint+0x6c4>)
 801eafa:	430a      	orrs	r2, r1
 801eafc:	b292      	uxth	r2, r2
 801eafe:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801eb00:	683b      	ldr	r3, [r7, #0]
 801eb02:	78db      	ldrb	r3, [r3, #3]
 801eb04:	2b01      	cmp	r3, #1
 801eb06:	d02f      	beq.n	801eb68 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801eb08:	687a      	ldr	r2, [r7, #4]
 801eb0a:	683b      	ldr	r3, [r7, #0]
 801eb0c:	781b      	ldrb	r3, [r3, #0]
 801eb0e:	009b      	lsls	r3, r3, #2
 801eb10:	18d3      	adds	r3, r2, r3
 801eb12:	881b      	ldrh	r3, [r3, #0]
 801eb14:	b29a      	uxth	r2, r3
 801eb16:	2044      	movs	r0, #68	@ 0x44
 801eb18:	183b      	adds	r3, r7, r0
 801eb1a:	4912      	ldr	r1, [pc, #72]	@ (801eb64 <USB_ActivateEndpoint+0x6c8>)
 801eb1c:	400a      	ands	r2, r1
 801eb1e:	801a      	strh	r2, [r3, #0]
 801eb20:	183b      	adds	r3, r7, r0
 801eb22:	183a      	adds	r2, r7, r0
 801eb24:	8812      	ldrh	r2, [r2, #0]
 801eb26:	2120      	movs	r1, #32
 801eb28:	404a      	eors	r2, r1
 801eb2a:	801a      	strh	r2, [r3, #0]
 801eb2c:	687a      	ldr	r2, [r7, #4]
 801eb2e:	683b      	ldr	r3, [r7, #0]
 801eb30:	781b      	ldrb	r3, [r3, #0]
 801eb32:	009b      	lsls	r3, r3, #2
 801eb34:	18d3      	adds	r3, r2, r3
 801eb36:	183a      	adds	r2, r7, r0
 801eb38:	8812      	ldrh	r2, [r2, #0]
 801eb3a:	4905      	ldr	r1, [pc, #20]	@ (801eb50 <USB_ActivateEndpoint+0x6b4>)
 801eb3c:	430a      	orrs	r2, r1
 801eb3e:	b292      	uxth	r2, r2
 801eb40:	801a      	strh	r2, [r3, #0]
 801eb42:	e028      	b.n	801eb96 <USB_ActivateEndpoint+0x6fa>
 801eb44:	ffff8f8f 	.word	0xffff8f8f
 801eb48:	ffffc080 	.word	0xffffc080
 801eb4c:	ffffbf8f 	.word	0xffffbf8f
 801eb50:	ffff8080 	.word	0xffff8080
 801eb54:	ffff8180 	.word	0xffff8180
 801eb58:	ffff8e8f 	.word	0xffff8e8f
 801eb5c:	00000404 	.word	0x00000404
 801eb60:	ffff80c0 	.word	0xffff80c0
 801eb64:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801eb68:	687a      	ldr	r2, [r7, #4]
 801eb6a:	683b      	ldr	r3, [r7, #0]
 801eb6c:	781b      	ldrb	r3, [r3, #0]
 801eb6e:	009b      	lsls	r3, r3, #2
 801eb70:	18d3      	adds	r3, r2, r3
 801eb72:	881b      	ldrh	r3, [r3, #0]
 801eb74:	b29a      	uxth	r2, r3
 801eb76:	2046      	movs	r0, #70	@ 0x46
 801eb78:	183b      	adds	r3, r7, r0
 801eb7a:	4916      	ldr	r1, [pc, #88]	@ (801ebd4 <USB_ActivateEndpoint+0x738>)
 801eb7c:	400a      	ands	r2, r1
 801eb7e:	801a      	strh	r2, [r3, #0]
 801eb80:	687a      	ldr	r2, [r7, #4]
 801eb82:	683b      	ldr	r3, [r7, #0]
 801eb84:	781b      	ldrb	r3, [r3, #0]
 801eb86:	009b      	lsls	r3, r3, #2
 801eb88:	18d3      	adds	r3, r2, r3
 801eb8a:	183a      	adds	r2, r7, r0
 801eb8c:	8812      	ldrh	r2, [r2, #0]
 801eb8e:	4912      	ldr	r1, [pc, #72]	@ (801ebd8 <USB_ActivateEndpoint+0x73c>)
 801eb90:	430a      	orrs	r2, r1
 801eb92:	b292      	uxth	r2, r2
 801eb94:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801eb96:	687a      	ldr	r2, [r7, #4]
 801eb98:	683b      	ldr	r3, [r7, #0]
 801eb9a:	781b      	ldrb	r3, [r3, #0]
 801eb9c:	009b      	lsls	r3, r3, #2
 801eb9e:	18d3      	adds	r3, r2, r3
 801eba0:	881b      	ldrh	r3, [r3, #0]
 801eba2:	b29a      	uxth	r2, r3
 801eba4:	2042      	movs	r0, #66	@ 0x42
 801eba6:	183b      	adds	r3, r7, r0
 801eba8:	490c      	ldr	r1, [pc, #48]	@ (801ebdc <USB_ActivateEndpoint+0x740>)
 801ebaa:	400a      	ands	r2, r1
 801ebac:	801a      	strh	r2, [r3, #0]
 801ebae:	687a      	ldr	r2, [r7, #4]
 801ebb0:	683b      	ldr	r3, [r7, #0]
 801ebb2:	781b      	ldrb	r3, [r3, #0]
 801ebb4:	009b      	lsls	r3, r3, #2
 801ebb6:	18d3      	adds	r3, r2, r3
 801ebb8:	183a      	adds	r2, r7, r0
 801ebba:	8812      	ldrh	r2, [r2, #0]
 801ebbc:	4906      	ldr	r1, [pc, #24]	@ (801ebd8 <USB_ActivateEndpoint+0x73c>)
 801ebbe:	430a      	orrs	r2, r1
 801ebc0:	b292      	uxth	r2, r2
 801ebc2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801ebc4:	236f      	movs	r3, #111	@ 0x6f
 801ebc6:	18fb      	adds	r3, r7, r3
 801ebc8:	781b      	ldrb	r3, [r3, #0]
}
 801ebca:	0018      	movs	r0, r3
 801ebcc:	46bd      	mov	sp, r7
 801ebce:	b01c      	add	sp, #112	@ 0x70
 801ebd0:	bd80      	pop	{r7, pc}
 801ebd2:	46c0      	nop			@ (mov r8, r8)
 801ebd4:	ffff8fbf 	.word	0xffff8fbf
 801ebd8:	ffff8080 	.word	0xffff8080
 801ebdc:	ffffbf8f 	.word	0xffffbf8f

0801ebe0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ebe0:	b580      	push	{r7, lr}
 801ebe2:	b08c      	sub	sp, #48	@ 0x30
 801ebe4:	af00      	add	r7, sp, #0
 801ebe6:	6078      	str	r0, [r7, #4]
 801ebe8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801ebea:	683b      	ldr	r3, [r7, #0]
 801ebec:	7b1b      	ldrb	r3, [r3, #12]
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d000      	beq.n	801ebf4 <USB_DeactivateEndpoint+0x14>
 801ebf2:	e07e      	b.n	801ecf2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801ebf4:	683b      	ldr	r3, [r7, #0]
 801ebf6:	785b      	ldrb	r3, [r3, #1]
 801ebf8:	2b00      	cmp	r3, #0
 801ebfa:	d03c      	beq.n	801ec76 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ebfc:	687a      	ldr	r2, [r7, #4]
 801ebfe:	683b      	ldr	r3, [r7, #0]
 801ec00:	781b      	ldrb	r3, [r3, #0]
 801ec02:	009b      	lsls	r3, r3, #2
 801ec04:	18d2      	adds	r2, r2, r3
 801ec06:	210c      	movs	r1, #12
 801ec08:	187b      	adds	r3, r7, r1
 801ec0a:	8812      	ldrh	r2, [r2, #0]
 801ec0c:	801a      	strh	r2, [r3, #0]
 801ec0e:	187b      	adds	r3, r7, r1
 801ec10:	881b      	ldrh	r3, [r3, #0]
 801ec12:	2240      	movs	r2, #64	@ 0x40
 801ec14:	4013      	ands	r3, r2
 801ec16:	d016      	beq.n	801ec46 <USB_DeactivateEndpoint+0x66>
 801ec18:	687a      	ldr	r2, [r7, #4]
 801ec1a:	683b      	ldr	r3, [r7, #0]
 801ec1c:	781b      	ldrb	r3, [r3, #0]
 801ec1e:	009b      	lsls	r3, r3, #2
 801ec20:	18d3      	adds	r3, r2, r3
 801ec22:	881b      	ldrh	r3, [r3, #0]
 801ec24:	b29a      	uxth	r2, r3
 801ec26:	200a      	movs	r0, #10
 801ec28:	183b      	adds	r3, r7, r0
 801ec2a:	49c7      	ldr	r1, [pc, #796]	@ (801ef48 <USB_DeactivateEndpoint+0x368>)
 801ec2c:	400a      	ands	r2, r1
 801ec2e:	801a      	strh	r2, [r3, #0]
 801ec30:	687a      	ldr	r2, [r7, #4]
 801ec32:	683b      	ldr	r3, [r7, #0]
 801ec34:	781b      	ldrb	r3, [r3, #0]
 801ec36:	009b      	lsls	r3, r3, #2
 801ec38:	18d3      	adds	r3, r2, r3
 801ec3a:	183a      	adds	r2, r7, r0
 801ec3c:	8812      	ldrh	r2, [r2, #0]
 801ec3e:	49c3      	ldr	r1, [pc, #780]	@ (801ef4c <USB_DeactivateEndpoint+0x36c>)
 801ec40:	430a      	orrs	r2, r1
 801ec42:	b292      	uxth	r2, r2
 801ec44:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ec46:	687a      	ldr	r2, [r7, #4]
 801ec48:	683b      	ldr	r3, [r7, #0]
 801ec4a:	781b      	ldrb	r3, [r3, #0]
 801ec4c:	009b      	lsls	r3, r3, #2
 801ec4e:	18d3      	adds	r3, r2, r3
 801ec50:	881b      	ldrh	r3, [r3, #0]
 801ec52:	b29a      	uxth	r2, r3
 801ec54:	2008      	movs	r0, #8
 801ec56:	183b      	adds	r3, r7, r0
 801ec58:	49bd      	ldr	r1, [pc, #756]	@ (801ef50 <USB_DeactivateEndpoint+0x370>)
 801ec5a:	400a      	ands	r2, r1
 801ec5c:	801a      	strh	r2, [r3, #0]
 801ec5e:	687a      	ldr	r2, [r7, #4]
 801ec60:	683b      	ldr	r3, [r7, #0]
 801ec62:	781b      	ldrb	r3, [r3, #0]
 801ec64:	009b      	lsls	r3, r3, #2
 801ec66:	18d3      	adds	r3, r2, r3
 801ec68:	183a      	adds	r2, r7, r0
 801ec6a:	8812      	ldrh	r2, [r2, #0]
 801ec6c:	49b9      	ldr	r1, [pc, #740]	@ (801ef54 <USB_DeactivateEndpoint+0x374>)
 801ec6e:	430a      	orrs	r2, r1
 801ec70:	b292      	uxth	r2, r2
 801ec72:	801a      	strh	r2, [r3, #0]
 801ec74:	e163      	b.n	801ef3e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ec76:	687a      	ldr	r2, [r7, #4]
 801ec78:	683b      	ldr	r3, [r7, #0]
 801ec7a:	781b      	ldrb	r3, [r3, #0]
 801ec7c:	009b      	lsls	r3, r3, #2
 801ec7e:	18d2      	adds	r2, r2, r3
 801ec80:	2112      	movs	r1, #18
 801ec82:	187b      	adds	r3, r7, r1
 801ec84:	8812      	ldrh	r2, [r2, #0]
 801ec86:	801a      	strh	r2, [r3, #0]
 801ec88:	187b      	adds	r3, r7, r1
 801ec8a:	881a      	ldrh	r2, [r3, #0]
 801ec8c:	2380      	movs	r3, #128	@ 0x80
 801ec8e:	01db      	lsls	r3, r3, #7
 801ec90:	4013      	ands	r3, r2
 801ec92:	d016      	beq.n	801ecc2 <USB_DeactivateEndpoint+0xe2>
 801ec94:	687a      	ldr	r2, [r7, #4]
 801ec96:	683b      	ldr	r3, [r7, #0]
 801ec98:	781b      	ldrb	r3, [r3, #0]
 801ec9a:	009b      	lsls	r3, r3, #2
 801ec9c:	18d3      	adds	r3, r2, r3
 801ec9e:	881b      	ldrh	r3, [r3, #0]
 801eca0:	b29a      	uxth	r2, r3
 801eca2:	2010      	movs	r0, #16
 801eca4:	183b      	adds	r3, r7, r0
 801eca6:	49a8      	ldr	r1, [pc, #672]	@ (801ef48 <USB_DeactivateEndpoint+0x368>)
 801eca8:	400a      	ands	r2, r1
 801ecaa:	801a      	strh	r2, [r3, #0]
 801ecac:	687a      	ldr	r2, [r7, #4]
 801ecae:	683b      	ldr	r3, [r7, #0]
 801ecb0:	781b      	ldrb	r3, [r3, #0]
 801ecb2:	009b      	lsls	r3, r3, #2
 801ecb4:	18d3      	adds	r3, r2, r3
 801ecb6:	183a      	adds	r2, r7, r0
 801ecb8:	8812      	ldrh	r2, [r2, #0]
 801ecba:	49a7      	ldr	r1, [pc, #668]	@ (801ef58 <USB_DeactivateEndpoint+0x378>)
 801ecbc:	430a      	orrs	r2, r1
 801ecbe:	b292      	uxth	r2, r2
 801ecc0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ecc2:	687a      	ldr	r2, [r7, #4]
 801ecc4:	683b      	ldr	r3, [r7, #0]
 801ecc6:	781b      	ldrb	r3, [r3, #0]
 801ecc8:	009b      	lsls	r3, r3, #2
 801ecca:	18d3      	adds	r3, r2, r3
 801eccc:	881b      	ldrh	r3, [r3, #0]
 801ecce:	b29a      	uxth	r2, r3
 801ecd0:	200e      	movs	r0, #14
 801ecd2:	183b      	adds	r3, r7, r0
 801ecd4:	49a1      	ldr	r1, [pc, #644]	@ (801ef5c <USB_DeactivateEndpoint+0x37c>)
 801ecd6:	400a      	ands	r2, r1
 801ecd8:	801a      	strh	r2, [r3, #0]
 801ecda:	687a      	ldr	r2, [r7, #4]
 801ecdc:	683b      	ldr	r3, [r7, #0]
 801ecde:	781b      	ldrb	r3, [r3, #0]
 801ece0:	009b      	lsls	r3, r3, #2
 801ece2:	18d3      	adds	r3, r2, r3
 801ece4:	183a      	adds	r2, r7, r0
 801ece6:	8812      	ldrh	r2, [r2, #0]
 801ece8:	499a      	ldr	r1, [pc, #616]	@ (801ef54 <USB_DeactivateEndpoint+0x374>)
 801ecea:	430a      	orrs	r2, r1
 801ecec:	b292      	uxth	r2, r2
 801ecee:	801a      	strh	r2, [r3, #0]
 801ecf0:	e125      	b.n	801ef3e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801ecf2:	683b      	ldr	r3, [r7, #0]
 801ecf4:	785b      	ldrb	r3, [r3, #1]
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d000      	beq.n	801ecfc <USB_DeactivateEndpoint+0x11c>
 801ecfa:	e090      	b.n	801ee1e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ecfc:	687a      	ldr	r2, [r7, #4]
 801ecfe:	683b      	ldr	r3, [r7, #0]
 801ed00:	781b      	ldrb	r3, [r3, #0]
 801ed02:	009b      	lsls	r3, r3, #2
 801ed04:	18d2      	adds	r2, r2, r3
 801ed06:	2120      	movs	r1, #32
 801ed08:	187b      	adds	r3, r7, r1
 801ed0a:	8812      	ldrh	r2, [r2, #0]
 801ed0c:	801a      	strh	r2, [r3, #0]
 801ed0e:	187b      	adds	r3, r7, r1
 801ed10:	881a      	ldrh	r2, [r3, #0]
 801ed12:	2380      	movs	r3, #128	@ 0x80
 801ed14:	01db      	lsls	r3, r3, #7
 801ed16:	4013      	ands	r3, r2
 801ed18:	d016      	beq.n	801ed48 <USB_DeactivateEndpoint+0x168>
 801ed1a:	687a      	ldr	r2, [r7, #4]
 801ed1c:	683b      	ldr	r3, [r7, #0]
 801ed1e:	781b      	ldrb	r3, [r3, #0]
 801ed20:	009b      	lsls	r3, r3, #2
 801ed22:	18d3      	adds	r3, r2, r3
 801ed24:	881b      	ldrh	r3, [r3, #0]
 801ed26:	b29a      	uxth	r2, r3
 801ed28:	201e      	movs	r0, #30
 801ed2a:	183b      	adds	r3, r7, r0
 801ed2c:	4986      	ldr	r1, [pc, #536]	@ (801ef48 <USB_DeactivateEndpoint+0x368>)
 801ed2e:	400a      	ands	r2, r1
 801ed30:	801a      	strh	r2, [r3, #0]
 801ed32:	687a      	ldr	r2, [r7, #4]
 801ed34:	683b      	ldr	r3, [r7, #0]
 801ed36:	781b      	ldrb	r3, [r3, #0]
 801ed38:	009b      	lsls	r3, r3, #2
 801ed3a:	18d3      	adds	r3, r2, r3
 801ed3c:	183a      	adds	r2, r7, r0
 801ed3e:	8812      	ldrh	r2, [r2, #0]
 801ed40:	4985      	ldr	r1, [pc, #532]	@ (801ef58 <USB_DeactivateEndpoint+0x378>)
 801ed42:	430a      	orrs	r2, r1
 801ed44:	b292      	uxth	r2, r2
 801ed46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ed48:	687a      	ldr	r2, [r7, #4]
 801ed4a:	683b      	ldr	r3, [r7, #0]
 801ed4c:	781b      	ldrb	r3, [r3, #0]
 801ed4e:	009b      	lsls	r3, r3, #2
 801ed50:	18d2      	adds	r2, r2, r3
 801ed52:	211c      	movs	r1, #28
 801ed54:	187b      	adds	r3, r7, r1
 801ed56:	8812      	ldrh	r2, [r2, #0]
 801ed58:	801a      	strh	r2, [r3, #0]
 801ed5a:	187b      	adds	r3, r7, r1
 801ed5c:	881b      	ldrh	r3, [r3, #0]
 801ed5e:	2240      	movs	r2, #64	@ 0x40
 801ed60:	4013      	ands	r3, r2
 801ed62:	d016      	beq.n	801ed92 <USB_DeactivateEndpoint+0x1b2>
 801ed64:	687a      	ldr	r2, [r7, #4]
 801ed66:	683b      	ldr	r3, [r7, #0]
 801ed68:	781b      	ldrb	r3, [r3, #0]
 801ed6a:	009b      	lsls	r3, r3, #2
 801ed6c:	18d3      	adds	r3, r2, r3
 801ed6e:	881b      	ldrh	r3, [r3, #0]
 801ed70:	b29a      	uxth	r2, r3
 801ed72:	201a      	movs	r0, #26
 801ed74:	183b      	adds	r3, r7, r0
 801ed76:	4974      	ldr	r1, [pc, #464]	@ (801ef48 <USB_DeactivateEndpoint+0x368>)
 801ed78:	400a      	ands	r2, r1
 801ed7a:	801a      	strh	r2, [r3, #0]
 801ed7c:	687a      	ldr	r2, [r7, #4]
 801ed7e:	683b      	ldr	r3, [r7, #0]
 801ed80:	781b      	ldrb	r3, [r3, #0]
 801ed82:	009b      	lsls	r3, r3, #2
 801ed84:	18d3      	adds	r3, r2, r3
 801ed86:	183a      	adds	r2, r7, r0
 801ed88:	8812      	ldrh	r2, [r2, #0]
 801ed8a:	4970      	ldr	r1, [pc, #448]	@ (801ef4c <USB_DeactivateEndpoint+0x36c>)
 801ed8c:	430a      	orrs	r2, r1
 801ed8e:	b292      	uxth	r2, r2
 801ed90:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801ed92:	687a      	ldr	r2, [r7, #4]
 801ed94:	683b      	ldr	r3, [r7, #0]
 801ed96:	781b      	ldrb	r3, [r3, #0]
 801ed98:	009b      	lsls	r3, r3, #2
 801ed9a:	18d3      	adds	r3, r2, r3
 801ed9c:	881b      	ldrh	r3, [r3, #0]
 801ed9e:	b29a      	uxth	r2, r3
 801eda0:	2018      	movs	r0, #24
 801eda2:	183b      	adds	r3, r7, r0
 801eda4:	4968      	ldr	r1, [pc, #416]	@ (801ef48 <USB_DeactivateEndpoint+0x368>)
 801eda6:	400a      	ands	r2, r1
 801eda8:	801a      	strh	r2, [r3, #0]
 801edaa:	687a      	ldr	r2, [r7, #4]
 801edac:	683b      	ldr	r3, [r7, #0]
 801edae:	781b      	ldrb	r3, [r3, #0]
 801edb0:	009b      	lsls	r3, r3, #2
 801edb2:	18d3      	adds	r3, r2, r3
 801edb4:	183a      	adds	r2, r7, r0
 801edb6:	8812      	ldrh	r2, [r2, #0]
 801edb8:	4964      	ldr	r1, [pc, #400]	@ (801ef4c <USB_DeactivateEndpoint+0x36c>)
 801edba:	430a      	orrs	r2, r1
 801edbc:	b292      	uxth	r2, r2
 801edbe:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801edc0:	687a      	ldr	r2, [r7, #4]
 801edc2:	683b      	ldr	r3, [r7, #0]
 801edc4:	781b      	ldrb	r3, [r3, #0]
 801edc6:	009b      	lsls	r3, r3, #2
 801edc8:	18d3      	adds	r3, r2, r3
 801edca:	881b      	ldrh	r3, [r3, #0]
 801edcc:	b29a      	uxth	r2, r3
 801edce:	2016      	movs	r0, #22
 801edd0:	183b      	adds	r3, r7, r0
 801edd2:	4962      	ldr	r1, [pc, #392]	@ (801ef5c <USB_DeactivateEndpoint+0x37c>)
 801edd4:	400a      	ands	r2, r1
 801edd6:	801a      	strh	r2, [r3, #0]
 801edd8:	687a      	ldr	r2, [r7, #4]
 801edda:	683b      	ldr	r3, [r7, #0]
 801eddc:	781b      	ldrb	r3, [r3, #0]
 801edde:	009b      	lsls	r3, r3, #2
 801ede0:	18d3      	adds	r3, r2, r3
 801ede2:	183a      	adds	r2, r7, r0
 801ede4:	8812      	ldrh	r2, [r2, #0]
 801ede6:	495b      	ldr	r1, [pc, #364]	@ (801ef54 <USB_DeactivateEndpoint+0x374>)
 801ede8:	430a      	orrs	r2, r1
 801edea:	b292      	uxth	r2, r2
 801edec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801edee:	687a      	ldr	r2, [r7, #4]
 801edf0:	683b      	ldr	r3, [r7, #0]
 801edf2:	781b      	ldrb	r3, [r3, #0]
 801edf4:	009b      	lsls	r3, r3, #2
 801edf6:	18d3      	adds	r3, r2, r3
 801edf8:	881b      	ldrh	r3, [r3, #0]
 801edfa:	b29a      	uxth	r2, r3
 801edfc:	2014      	movs	r0, #20
 801edfe:	183b      	adds	r3, r7, r0
 801ee00:	4953      	ldr	r1, [pc, #332]	@ (801ef50 <USB_DeactivateEndpoint+0x370>)
 801ee02:	400a      	ands	r2, r1
 801ee04:	801a      	strh	r2, [r3, #0]
 801ee06:	687a      	ldr	r2, [r7, #4]
 801ee08:	683b      	ldr	r3, [r7, #0]
 801ee0a:	781b      	ldrb	r3, [r3, #0]
 801ee0c:	009b      	lsls	r3, r3, #2
 801ee0e:	18d3      	adds	r3, r2, r3
 801ee10:	183a      	adds	r2, r7, r0
 801ee12:	8812      	ldrh	r2, [r2, #0]
 801ee14:	494f      	ldr	r1, [pc, #316]	@ (801ef54 <USB_DeactivateEndpoint+0x374>)
 801ee16:	430a      	orrs	r2, r1
 801ee18:	b292      	uxth	r2, r2
 801ee1a:	801a      	strh	r2, [r3, #0]
 801ee1c:	e08f      	b.n	801ef3e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ee1e:	687a      	ldr	r2, [r7, #4]
 801ee20:	683b      	ldr	r3, [r7, #0]
 801ee22:	781b      	ldrb	r3, [r3, #0]
 801ee24:	009b      	lsls	r3, r3, #2
 801ee26:	18d2      	adds	r2, r2, r3
 801ee28:	212e      	movs	r1, #46	@ 0x2e
 801ee2a:	187b      	adds	r3, r7, r1
 801ee2c:	8812      	ldrh	r2, [r2, #0]
 801ee2e:	801a      	strh	r2, [r3, #0]
 801ee30:	187b      	adds	r3, r7, r1
 801ee32:	881a      	ldrh	r2, [r3, #0]
 801ee34:	2380      	movs	r3, #128	@ 0x80
 801ee36:	01db      	lsls	r3, r3, #7
 801ee38:	4013      	ands	r3, r2
 801ee3a:	d016      	beq.n	801ee6a <USB_DeactivateEndpoint+0x28a>
 801ee3c:	687a      	ldr	r2, [r7, #4]
 801ee3e:	683b      	ldr	r3, [r7, #0]
 801ee40:	781b      	ldrb	r3, [r3, #0]
 801ee42:	009b      	lsls	r3, r3, #2
 801ee44:	18d3      	adds	r3, r2, r3
 801ee46:	881b      	ldrh	r3, [r3, #0]
 801ee48:	b29a      	uxth	r2, r3
 801ee4a:	202c      	movs	r0, #44	@ 0x2c
 801ee4c:	183b      	adds	r3, r7, r0
 801ee4e:	493e      	ldr	r1, [pc, #248]	@ (801ef48 <USB_DeactivateEndpoint+0x368>)
 801ee50:	400a      	ands	r2, r1
 801ee52:	801a      	strh	r2, [r3, #0]
 801ee54:	687a      	ldr	r2, [r7, #4]
 801ee56:	683b      	ldr	r3, [r7, #0]
 801ee58:	781b      	ldrb	r3, [r3, #0]
 801ee5a:	009b      	lsls	r3, r3, #2
 801ee5c:	18d3      	adds	r3, r2, r3
 801ee5e:	183a      	adds	r2, r7, r0
 801ee60:	8812      	ldrh	r2, [r2, #0]
 801ee62:	493d      	ldr	r1, [pc, #244]	@ (801ef58 <USB_DeactivateEndpoint+0x378>)
 801ee64:	430a      	orrs	r2, r1
 801ee66:	b292      	uxth	r2, r2
 801ee68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ee6a:	687a      	ldr	r2, [r7, #4]
 801ee6c:	683b      	ldr	r3, [r7, #0]
 801ee6e:	781b      	ldrb	r3, [r3, #0]
 801ee70:	009b      	lsls	r3, r3, #2
 801ee72:	18d2      	adds	r2, r2, r3
 801ee74:	212a      	movs	r1, #42	@ 0x2a
 801ee76:	187b      	adds	r3, r7, r1
 801ee78:	8812      	ldrh	r2, [r2, #0]
 801ee7a:	801a      	strh	r2, [r3, #0]
 801ee7c:	187b      	adds	r3, r7, r1
 801ee7e:	881b      	ldrh	r3, [r3, #0]
 801ee80:	2240      	movs	r2, #64	@ 0x40
 801ee82:	4013      	ands	r3, r2
 801ee84:	d016      	beq.n	801eeb4 <USB_DeactivateEndpoint+0x2d4>
 801ee86:	687a      	ldr	r2, [r7, #4]
 801ee88:	683b      	ldr	r3, [r7, #0]
 801ee8a:	781b      	ldrb	r3, [r3, #0]
 801ee8c:	009b      	lsls	r3, r3, #2
 801ee8e:	18d3      	adds	r3, r2, r3
 801ee90:	881b      	ldrh	r3, [r3, #0]
 801ee92:	b29a      	uxth	r2, r3
 801ee94:	2028      	movs	r0, #40	@ 0x28
 801ee96:	183b      	adds	r3, r7, r0
 801ee98:	492b      	ldr	r1, [pc, #172]	@ (801ef48 <USB_DeactivateEndpoint+0x368>)
 801ee9a:	400a      	ands	r2, r1
 801ee9c:	801a      	strh	r2, [r3, #0]
 801ee9e:	687a      	ldr	r2, [r7, #4]
 801eea0:	683b      	ldr	r3, [r7, #0]
 801eea2:	781b      	ldrb	r3, [r3, #0]
 801eea4:	009b      	lsls	r3, r3, #2
 801eea6:	18d3      	adds	r3, r2, r3
 801eea8:	183a      	adds	r2, r7, r0
 801eeaa:	8812      	ldrh	r2, [r2, #0]
 801eeac:	4927      	ldr	r1, [pc, #156]	@ (801ef4c <USB_DeactivateEndpoint+0x36c>)
 801eeae:	430a      	orrs	r2, r1
 801eeb0:	b292      	uxth	r2, r2
 801eeb2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801eeb4:	687a      	ldr	r2, [r7, #4]
 801eeb6:	683b      	ldr	r3, [r7, #0]
 801eeb8:	781b      	ldrb	r3, [r3, #0]
 801eeba:	009b      	lsls	r3, r3, #2
 801eebc:	18d3      	adds	r3, r2, r3
 801eebe:	881b      	ldrh	r3, [r3, #0]
 801eec0:	b29a      	uxth	r2, r3
 801eec2:	2026      	movs	r0, #38	@ 0x26
 801eec4:	183b      	adds	r3, r7, r0
 801eec6:	4920      	ldr	r1, [pc, #128]	@ (801ef48 <USB_DeactivateEndpoint+0x368>)
 801eec8:	400a      	ands	r2, r1
 801eeca:	801a      	strh	r2, [r3, #0]
 801eecc:	687a      	ldr	r2, [r7, #4]
 801eece:	683b      	ldr	r3, [r7, #0]
 801eed0:	781b      	ldrb	r3, [r3, #0]
 801eed2:	009b      	lsls	r3, r3, #2
 801eed4:	18d3      	adds	r3, r2, r3
 801eed6:	183a      	adds	r2, r7, r0
 801eed8:	8812      	ldrh	r2, [r2, #0]
 801eeda:	491f      	ldr	r1, [pc, #124]	@ (801ef58 <USB_DeactivateEndpoint+0x378>)
 801eedc:	430a      	orrs	r2, r1
 801eede:	b292      	uxth	r2, r2
 801eee0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801eee2:	687a      	ldr	r2, [r7, #4]
 801eee4:	683b      	ldr	r3, [r7, #0]
 801eee6:	781b      	ldrb	r3, [r3, #0]
 801eee8:	009b      	lsls	r3, r3, #2
 801eeea:	18d3      	adds	r3, r2, r3
 801eeec:	881b      	ldrh	r3, [r3, #0]
 801eeee:	b29a      	uxth	r2, r3
 801eef0:	2024      	movs	r0, #36	@ 0x24
 801eef2:	183b      	adds	r3, r7, r0
 801eef4:	4916      	ldr	r1, [pc, #88]	@ (801ef50 <USB_DeactivateEndpoint+0x370>)
 801eef6:	400a      	ands	r2, r1
 801eef8:	801a      	strh	r2, [r3, #0]
 801eefa:	687a      	ldr	r2, [r7, #4]
 801eefc:	683b      	ldr	r3, [r7, #0]
 801eefe:	781b      	ldrb	r3, [r3, #0]
 801ef00:	009b      	lsls	r3, r3, #2
 801ef02:	18d3      	adds	r3, r2, r3
 801ef04:	183a      	adds	r2, r7, r0
 801ef06:	8812      	ldrh	r2, [r2, #0]
 801ef08:	4912      	ldr	r1, [pc, #72]	@ (801ef54 <USB_DeactivateEndpoint+0x374>)
 801ef0a:	430a      	orrs	r2, r1
 801ef0c:	b292      	uxth	r2, r2
 801ef0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ef10:	687a      	ldr	r2, [r7, #4]
 801ef12:	683b      	ldr	r3, [r7, #0]
 801ef14:	781b      	ldrb	r3, [r3, #0]
 801ef16:	009b      	lsls	r3, r3, #2
 801ef18:	18d3      	adds	r3, r2, r3
 801ef1a:	881b      	ldrh	r3, [r3, #0]
 801ef1c:	b29a      	uxth	r2, r3
 801ef1e:	2022      	movs	r0, #34	@ 0x22
 801ef20:	183b      	adds	r3, r7, r0
 801ef22:	490e      	ldr	r1, [pc, #56]	@ (801ef5c <USB_DeactivateEndpoint+0x37c>)
 801ef24:	400a      	ands	r2, r1
 801ef26:	801a      	strh	r2, [r3, #0]
 801ef28:	687a      	ldr	r2, [r7, #4]
 801ef2a:	683b      	ldr	r3, [r7, #0]
 801ef2c:	781b      	ldrb	r3, [r3, #0]
 801ef2e:	009b      	lsls	r3, r3, #2
 801ef30:	18d3      	adds	r3, r2, r3
 801ef32:	183a      	adds	r2, r7, r0
 801ef34:	8812      	ldrh	r2, [r2, #0]
 801ef36:	4907      	ldr	r1, [pc, #28]	@ (801ef54 <USB_DeactivateEndpoint+0x374>)
 801ef38:	430a      	orrs	r2, r1
 801ef3a:	b292      	uxth	r2, r2
 801ef3c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801ef3e:	2300      	movs	r3, #0
}
 801ef40:	0018      	movs	r0, r3
 801ef42:	46bd      	mov	sp, r7
 801ef44:	b00c      	add	sp, #48	@ 0x30
 801ef46:	bd80      	pop	{r7, pc}
 801ef48:	ffff8f8f 	.word	0xffff8f8f
 801ef4c:	ffff80c0 	.word	0xffff80c0
 801ef50:	ffff8fbf 	.word	0xffff8fbf
 801ef54:	ffff8080 	.word	0xffff8080
 801ef58:	ffffc080 	.word	0xffffc080
 801ef5c:	ffffbf8f 	.word	0xffffbf8f

0801ef60 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ef60:	b590      	push	{r4, r7, lr}
 801ef62:	b0c3      	sub	sp, #268	@ 0x10c
 801ef64:	af00      	add	r7, sp, #0
 801ef66:	6078      	str	r0, [r7, #4]
 801ef68:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801ef6a:	683b      	ldr	r3, [r7, #0]
 801ef6c:	785b      	ldrb	r3, [r3, #1]
 801ef6e:	2b01      	cmp	r3, #1
 801ef70:	d001      	beq.n	801ef76 <USB_EPStartXfer+0x16>
 801ef72:	f000 fd2d 	bl	801f9d0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801ef76:	683b      	ldr	r3, [r7, #0]
 801ef78:	699a      	ldr	r2, [r3, #24]
 801ef7a:	683b      	ldr	r3, [r7, #0]
 801ef7c:	691b      	ldr	r3, [r3, #16]
 801ef7e:	429a      	cmp	r2, r3
 801ef80:	d905      	bls.n	801ef8e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801ef82:	683b      	ldr	r3, [r7, #0]
 801ef84:	691b      	ldr	r3, [r3, #16]
 801ef86:	1d7a      	adds	r2, r7, #5
 801ef88:	32ff      	adds	r2, #255	@ 0xff
 801ef8a:	6013      	str	r3, [r2, #0]
 801ef8c:	e004      	b.n	801ef98 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801ef8e:	683b      	ldr	r3, [r7, #0]
 801ef90:	699b      	ldr	r3, [r3, #24]
 801ef92:	1d7a      	adds	r2, r7, #5
 801ef94:	32ff      	adds	r2, #255	@ 0xff
 801ef96:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801ef98:	683b      	ldr	r3, [r7, #0]
 801ef9a:	7b1b      	ldrb	r3, [r3, #12]
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	d125      	bne.n	801efec <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801efa0:	683b      	ldr	r3, [r7, #0]
 801efa2:	6959      	ldr	r1, [r3, #20]
 801efa4:	683b      	ldr	r3, [r7, #0]
 801efa6:	88da      	ldrh	r2, [r3, #6]
 801efa8:	1d7b      	adds	r3, r7, #5
 801efaa:	33ff      	adds	r3, #255	@ 0xff
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	b29b      	uxth	r3, r3
 801efb0:	6878      	ldr	r0, [r7, #4]
 801efb2:	f001 fa47 	bl	8020444 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	613b      	str	r3, [r7, #16]
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	2250      	movs	r2, #80	@ 0x50
 801efbe:	5a9b      	ldrh	r3, [r3, r2]
 801efc0:	b29b      	uxth	r3, r3
 801efc2:	001a      	movs	r2, r3
 801efc4:	693b      	ldr	r3, [r7, #16]
 801efc6:	189b      	adds	r3, r3, r2
 801efc8:	613b      	str	r3, [r7, #16]
 801efca:	683b      	ldr	r3, [r7, #0]
 801efcc:	781b      	ldrb	r3, [r3, #0]
 801efce:	00da      	lsls	r2, r3, #3
 801efd0:	693b      	ldr	r3, [r7, #16]
 801efd2:	18d3      	adds	r3, r2, r3
 801efd4:	4ad7      	ldr	r2, [pc, #860]	@ (801f334 <USB_EPStartXfer+0x3d4>)
 801efd6:	4694      	mov	ip, r2
 801efd8:	4463      	add	r3, ip
 801efda:	60fb      	str	r3, [r7, #12]
 801efdc:	1d7b      	adds	r3, r7, #5
 801efde:	33ff      	adds	r3, #255	@ 0xff
 801efe0:	681b      	ldr	r3, [r3, #0]
 801efe2:	b29a      	uxth	r2, r3
 801efe4:	68fb      	ldr	r3, [r7, #12]
 801efe6:	801a      	strh	r2, [r3, #0]
 801efe8:	f000 fccd 	bl	801f986 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801efec:	683b      	ldr	r3, [r7, #0]
 801efee:	78db      	ldrb	r3, [r3, #3]
 801eff0:	2b02      	cmp	r3, #2
 801eff2:	d000      	beq.n	801eff6 <USB_EPStartXfer+0x96>
 801eff4:	e362      	b.n	801f6bc <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801eff6:	683b      	ldr	r3, [r7, #0]
 801eff8:	6a1a      	ldr	r2, [r3, #32]
 801effa:	683b      	ldr	r3, [r7, #0]
 801effc:	691b      	ldr	r3, [r3, #16]
 801effe:	429a      	cmp	r2, r3
 801f000:	d800      	bhi.n	801f004 <USB_EPStartXfer+0xa4>
 801f002:	e309      	b.n	801f618 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f004:	687a      	ldr	r2, [r7, #4]
 801f006:	683b      	ldr	r3, [r7, #0]
 801f008:	781b      	ldrb	r3, [r3, #0]
 801f00a:	009b      	lsls	r3, r3, #2
 801f00c:	18d3      	adds	r3, r2, r3
 801f00e:	881b      	ldrh	r3, [r3, #0]
 801f010:	b29a      	uxth	r2, r3
 801f012:	2056      	movs	r0, #86	@ 0x56
 801f014:	183b      	adds	r3, r7, r0
 801f016:	49c8      	ldr	r1, [pc, #800]	@ (801f338 <USB_EPStartXfer+0x3d8>)
 801f018:	400a      	ands	r2, r1
 801f01a:	801a      	strh	r2, [r3, #0]
 801f01c:	687a      	ldr	r2, [r7, #4]
 801f01e:	683b      	ldr	r3, [r7, #0]
 801f020:	781b      	ldrb	r3, [r3, #0]
 801f022:	009b      	lsls	r3, r3, #2
 801f024:	18d3      	adds	r3, r2, r3
 801f026:	183a      	adds	r2, r7, r0
 801f028:	8812      	ldrh	r2, [r2, #0]
 801f02a:	49c4      	ldr	r1, [pc, #784]	@ (801f33c <USB_EPStartXfer+0x3dc>)
 801f02c:	430a      	orrs	r2, r1
 801f02e:	b292      	uxth	r2, r2
 801f030:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801f032:	683b      	ldr	r3, [r7, #0]
 801f034:	6a1a      	ldr	r2, [r3, #32]
 801f036:	1d7b      	adds	r3, r7, #5
 801f038:	33ff      	adds	r3, #255	@ 0xff
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	1ad2      	subs	r2, r2, r3
 801f03e:	683b      	ldr	r3, [r7, #0]
 801f040:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801f042:	687a      	ldr	r2, [r7, #4]
 801f044:	683b      	ldr	r3, [r7, #0]
 801f046:	781b      	ldrb	r3, [r3, #0]
 801f048:	009b      	lsls	r3, r3, #2
 801f04a:	18d3      	adds	r3, r2, r3
 801f04c:	881b      	ldrh	r3, [r3, #0]
 801f04e:	b29b      	uxth	r3, r3
 801f050:	001a      	movs	r2, r3
 801f052:	2340      	movs	r3, #64	@ 0x40
 801f054:	4013      	ands	r3, r2
 801f056:	d100      	bne.n	801f05a <USB_EPStartXfer+0xfa>
 801f058:	e176      	b.n	801f348 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f05a:	687b      	ldr	r3, [r7, #4]
 801f05c:	633b      	str	r3, [r7, #48]	@ 0x30
 801f05e:	683b      	ldr	r3, [r7, #0]
 801f060:	785b      	ldrb	r3, [r3, #1]
 801f062:	2b00      	cmp	r3, #0
 801f064:	d000      	beq.n	801f068 <USB_EPStartXfer+0x108>
 801f066:	e074      	b.n	801f152 <USB_EPStartXfer+0x1f2>
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	2250      	movs	r2, #80	@ 0x50
 801f070:	5a9b      	ldrh	r3, [r3, r2]
 801f072:	b29b      	uxth	r3, r3
 801f074:	001a      	movs	r2, r3
 801f076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f078:	189b      	adds	r3, r3, r2
 801f07a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f07c:	683b      	ldr	r3, [r7, #0]
 801f07e:	781b      	ldrb	r3, [r3, #0]
 801f080:	00da      	lsls	r2, r3, #3
 801f082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f084:	18d3      	adds	r3, r2, r3
 801f086:	4aae      	ldr	r2, [pc, #696]	@ (801f340 <USB_EPStartXfer+0x3e0>)
 801f088:	4694      	mov	ip, r2
 801f08a:	4463      	add	r3, ip
 801f08c:	627b      	str	r3, [r7, #36]	@ 0x24
 801f08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f090:	881b      	ldrh	r3, [r3, #0]
 801f092:	b29b      	uxth	r3, r3
 801f094:	059b      	lsls	r3, r3, #22
 801f096:	0d9b      	lsrs	r3, r3, #22
 801f098:	b29a      	uxth	r2, r3
 801f09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f09c:	801a      	strh	r2, [r3, #0]
 801f09e:	1d7b      	adds	r3, r7, #5
 801f0a0:	33ff      	adds	r3, #255	@ 0xff
 801f0a2:	681b      	ldr	r3, [r3, #0]
 801f0a4:	2b3e      	cmp	r3, #62	@ 0x3e
 801f0a6:	d924      	bls.n	801f0f2 <USB_EPStartXfer+0x192>
 801f0a8:	1d7b      	adds	r3, r7, #5
 801f0aa:	33ff      	adds	r3, #255	@ 0xff
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	095b      	lsrs	r3, r3, #5
 801f0b0:	1c7a      	adds	r2, r7, #1
 801f0b2:	32ff      	adds	r2, #255	@ 0xff
 801f0b4:	6013      	str	r3, [r2, #0]
 801f0b6:	1d7b      	adds	r3, r7, #5
 801f0b8:	33ff      	adds	r3, #255	@ 0xff
 801f0ba:	681b      	ldr	r3, [r3, #0]
 801f0bc:	221f      	movs	r2, #31
 801f0be:	4013      	ands	r3, r2
 801f0c0:	d106      	bne.n	801f0d0 <USB_EPStartXfer+0x170>
 801f0c2:	1c7b      	adds	r3, r7, #1
 801f0c4:	33ff      	adds	r3, #255	@ 0xff
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	3b01      	subs	r3, #1
 801f0ca:	1c7a      	adds	r2, r7, #1
 801f0cc:	32ff      	adds	r2, #255	@ 0xff
 801f0ce:	6013      	str	r3, [r2, #0]
 801f0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f0d2:	881b      	ldrh	r3, [r3, #0]
 801f0d4:	b29a      	uxth	r2, r3
 801f0d6:	1c7b      	adds	r3, r7, #1
 801f0d8:	33ff      	adds	r3, #255	@ 0xff
 801f0da:	681b      	ldr	r3, [r3, #0]
 801f0dc:	b29b      	uxth	r3, r3
 801f0de:	029b      	lsls	r3, r3, #10
 801f0e0:	b29b      	uxth	r3, r3
 801f0e2:	4313      	orrs	r3, r2
 801f0e4:	b29b      	uxth	r3, r3
 801f0e6:	4a97      	ldr	r2, [pc, #604]	@ (801f344 <USB_EPStartXfer+0x3e4>)
 801f0e8:	4313      	orrs	r3, r2
 801f0ea:	b29a      	uxth	r2, r3
 801f0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f0ee:	801a      	strh	r2, [r3, #0]
 801f0f0:	e04a      	b.n	801f188 <USB_EPStartXfer+0x228>
 801f0f2:	1d7b      	adds	r3, r7, #5
 801f0f4:	33ff      	adds	r3, #255	@ 0xff
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	2b00      	cmp	r3, #0
 801f0fa:	d108      	bne.n	801f10e <USB_EPStartXfer+0x1ae>
 801f0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f0fe:	881b      	ldrh	r3, [r3, #0]
 801f100:	b29b      	uxth	r3, r3
 801f102:	4a90      	ldr	r2, [pc, #576]	@ (801f344 <USB_EPStartXfer+0x3e4>)
 801f104:	4313      	orrs	r3, r2
 801f106:	b29a      	uxth	r2, r3
 801f108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f10a:	801a      	strh	r2, [r3, #0]
 801f10c:	e03c      	b.n	801f188 <USB_EPStartXfer+0x228>
 801f10e:	1d7b      	adds	r3, r7, #5
 801f110:	33ff      	adds	r3, #255	@ 0xff
 801f112:	681b      	ldr	r3, [r3, #0]
 801f114:	085b      	lsrs	r3, r3, #1
 801f116:	1c7a      	adds	r2, r7, #1
 801f118:	32ff      	adds	r2, #255	@ 0xff
 801f11a:	6013      	str	r3, [r2, #0]
 801f11c:	1d7b      	adds	r3, r7, #5
 801f11e:	33ff      	adds	r3, #255	@ 0xff
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	2201      	movs	r2, #1
 801f124:	4013      	ands	r3, r2
 801f126:	d006      	beq.n	801f136 <USB_EPStartXfer+0x1d6>
 801f128:	1c7b      	adds	r3, r7, #1
 801f12a:	33ff      	adds	r3, #255	@ 0xff
 801f12c:	681b      	ldr	r3, [r3, #0]
 801f12e:	3301      	adds	r3, #1
 801f130:	1c7a      	adds	r2, r7, #1
 801f132:	32ff      	adds	r2, #255	@ 0xff
 801f134:	6013      	str	r3, [r2, #0]
 801f136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f138:	881b      	ldrh	r3, [r3, #0]
 801f13a:	b29a      	uxth	r2, r3
 801f13c:	1c7b      	adds	r3, r7, #1
 801f13e:	33ff      	adds	r3, #255	@ 0xff
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	b29b      	uxth	r3, r3
 801f144:	029b      	lsls	r3, r3, #10
 801f146:	b29b      	uxth	r3, r3
 801f148:	4313      	orrs	r3, r2
 801f14a:	b29a      	uxth	r2, r3
 801f14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f14e:	801a      	strh	r2, [r3, #0]
 801f150:	e01a      	b.n	801f188 <USB_EPStartXfer+0x228>
 801f152:	683b      	ldr	r3, [r7, #0]
 801f154:	785b      	ldrb	r3, [r3, #1]
 801f156:	2b01      	cmp	r3, #1
 801f158:	d116      	bne.n	801f188 <USB_EPStartXfer+0x228>
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	2250      	movs	r2, #80	@ 0x50
 801f15e:	5a9b      	ldrh	r3, [r3, r2]
 801f160:	b29b      	uxth	r3, r3
 801f162:	001a      	movs	r2, r3
 801f164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f166:	189b      	adds	r3, r3, r2
 801f168:	633b      	str	r3, [r7, #48]	@ 0x30
 801f16a:	683b      	ldr	r3, [r7, #0]
 801f16c:	781b      	ldrb	r3, [r3, #0]
 801f16e:	00da      	lsls	r2, r3, #3
 801f170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f172:	18d3      	adds	r3, r2, r3
 801f174:	4a72      	ldr	r2, [pc, #456]	@ (801f340 <USB_EPStartXfer+0x3e0>)
 801f176:	4694      	mov	ip, r2
 801f178:	4463      	add	r3, ip
 801f17a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f17c:	1d7b      	adds	r3, r7, #5
 801f17e:	33ff      	adds	r3, #255	@ 0xff
 801f180:	681b      	ldr	r3, [r3, #0]
 801f182:	b29a      	uxth	r2, r3
 801f184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f186:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801f188:	2076      	movs	r0, #118	@ 0x76
 801f18a:	183b      	adds	r3, r7, r0
 801f18c:	683a      	ldr	r2, [r7, #0]
 801f18e:	8952      	ldrh	r2, [r2, #10]
 801f190:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f192:	683b      	ldr	r3, [r7, #0]
 801f194:	6959      	ldr	r1, [r3, #20]
 801f196:	1d7b      	adds	r3, r7, #5
 801f198:	33ff      	adds	r3, #255	@ 0xff
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	b29c      	uxth	r4, r3
 801f19e:	183b      	adds	r3, r7, r0
 801f1a0:	881a      	ldrh	r2, [r3, #0]
 801f1a2:	6878      	ldr	r0, [r7, #4]
 801f1a4:	0023      	movs	r3, r4
 801f1a6:	f001 f94d 	bl	8020444 <USB_WritePMA>
            ep->xfer_buff += len;
 801f1aa:	683b      	ldr	r3, [r7, #0]
 801f1ac:	695a      	ldr	r2, [r3, #20]
 801f1ae:	1d7b      	adds	r3, r7, #5
 801f1b0:	33ff      	adds	r3, #255	@ 0xff
 801f1b2:	681b      	ldr	r3, [r3, #0]
 801f1b4:	18d2      	adds	r2, r2, r3
 801f1b6:	683b      	ldr	r3, [r7, #0]
 801f1b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801f1ba:	683b      	ldr	r3, [r7, #0]
 801f1bc:	6a1a      	ldr	r2, [r3, #32]
 801f1be:	683b      	ldr	r3, [r7, #0]
 801f1c0:	691b      	ldr	r3, [r3, #16]
 801f1c2:	429a      	cmp	r2, r3
 801f1c4:	d908      	bls.n	801f1d8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801f1c6:	683b      	ldr	r3, [r7, #0]
 801f1c8:	6a1a      	ldr	r2, [r3, #32]
 801f1ca:	1d7b      	adds	r3, r7, #5
 801f1cc:	33ff      	adds	r3, #255	@ 0xff
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	1ad2      	subs	r2, r2, r3
 801f1d2:	683b      	ldr	r3, [r7, #0]
 801f1d4:	621a      	str	r2, [r3, #32]
 801f1d6:	e007      	b.n	801f1e8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801f1d8:	683b      	ldr	r3, [r7, #0]
 801f1da:	6a1b      	ldr	r3, [r3, #32]
 801f1dc:	1d7a      	adds	r2, r7, #5
 801f1de:	32ff      	adds	r2, #255	@ 0xff
 801f1e0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801f1e2:	683b      	ldr	r3, [r7, #0]
 801f1e4:	2200      	movs	r2, #0
 801f1e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f1e8:	683b      	ldr	r3, [r7, #0]
 801f1ea:	785b      	ldrb	r3, [r3, #1]
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d000      	beq.n	801f1f2 <USB_EPStartXfer+0x292>
 801f1f0:	e070      	b.n	801f2d4 <USB_EPStartXfer+0x374>
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	61bb      	str	r3, [r7, #24]
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	2250      	movs	r2, #80	@ 0x50
 801f1fa:	5a9b      	ldrh	r3, [r3, r2]
 801f1fc:	b29b      	uxth	r3, r3
 801f1fe:	001a      	movs	r2, r3
 801f200:	69bb      	ldr	r3, [r7, #24]
 801f202:	189b      	adds	r3, r3, r2
 801f204:	61bb      	str	r3, [r7, #24]
 801f206:	683b      	ldr	r3, [r7, #0]
 801f208:	781b      	ldrb	r3, [r3, #0]
 801f20a:	00da      	lsls	r2, r3, #3
 801f20c:	69bb      	ldr	r3, [r7, #24]
 801f20e:	18d3      	adds	r3, r2, r3
 801f210:	4a48      	ldr	r2, [pc, #288]	@ (801f334 <USB_EPStartXfer+0x3d4>)
 801f212:	4694      	mov	ip, r2
 801f214:	4463      	add	r3, ip
 801f216:	617b      	str	r3, [r7, #20]
 801f218:	697b      	ldr	r3, [r7, #20]
 801f21a:	881b      	ldrh	r3, [r3, #0]
 801f21c:	b29b      	uxth	r3, r3
 801f21e:	059b      	lsls	r3, r3, #22
 801f220:	0d9b      	lsrs	r3, r3, #22
 801f222:	b29a      	uxth	r2, r3
 801f224:	697b      	ldr	r3, [r7, #20]
 801f226:	801a      	strh	r2, [r3, #0]
 801f228:	1d7b      	adds	r3, r7, #5
 801f22a:	33ff      	adds	r3, #255	@ 0xff
 801f22c:	681b      	ldr	r3, [r3, #0]
 801f22e:	2b3e      	cmp	r3, #62	@ 0x3e
 801f230:	d922      	bls.n	801f278 <USB_EPStartXfer+0x318>
 801f232:	1d7b      	adds	r3, r7, #5
 801f234:	33ff      	adds	r3, #255	@ 0xff
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	095b      	lsrs	r3, r3, #5
 801f23a:	21fc      	movs	r1, #252	@ 0xfc
 801f23c:	187a      	adds	r2, r7, r1
 801f23e:	6013      	str	r3, [r2, #0]
 801f240:	1d7b      	adds	r3, r7, #5
 801f242:	33ff      	adds	r3, #255	@ 0xff
 801f244:	681b      	ldr	r3, [r3, #0]
 801f246:	221f      	movs	r2, #31
 801f248:	4013      	ands	r3, r2
 801f24a:	d104      	bne.n	801f256 <USB_EPStartXfer+0x2f6>
 801f24c:	187b      	adds	r3, r7, r1
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	3b01      	subs	r3, #1
 801f252:	187a      	adds	r2, r7, r1
 801f254:	6013      	str	r3, [r2, #0]
 801f256:	697b      	ldr	r3, [r7, #20]
 801f258:	881b      	ldrh	r3, [r3, #0]
 801f25a:	b29a      	uxth	r2, r3
 801f25c:	23fc      	movs	r3, #252	@ 0xfc
 801f25e:	18fb      	adds	r3, r7, r3
 801f260:	681b      	ldr	r3, [r3, #0]
 801f262:	b29b      	uxth	r3, r3
 801f264:	029b      	lsls	r3, r3, #10
 801f266:	b29b      	uxth	r3, r3
 801f268:	4313      	orrs	r3, r2
 801f26a:	b29b      	uxth	r3, r3
 801f26c:	4a35      	ldr	r2, [pc, #212]	@ (801f344 <USB_EPStartXfer+0x3e4>)
 801f26e:	4313      	orrs	r3, r2
 801f270:	b29a      	uxth	r2, r3
 801f272:	697b      	ldr	r3, [r7, #20]
 801f274:	801a      	strh	r2, [r3, #0]
 801f276:	e04a      	b.n	801f30e <USB_EPStartXfer+0x3ae>
 801f278:	1d7b      	adds	r3, r7, #5
 801f27a:	33ff      	adds	r3, #255	@ 0xff
 801f27c:	681b      	ldr	r3, [r3, #0]
 801f27e:	2b00      	cmp	r3, #0
 801f280:	d108      	bne.n	801f294 <USB_EPStartXfer+0x334>
 801f282:	697b      	ldr	r3, [r7, #20]
 801f284:	881b      	ldrh	r3, [r3, #0]
 801f286:	b29b      	uxth	r3, r3
 801f288:	4a2e      	ldr	r2, [pc, #184]	@ (801f344 <USB_EPStartXfer+0x3e4>)
 801f28a:	4313      	orrs	r3, r2
 801f28c:	b29a      	uxth	r2, r3
 801f28e:	697b      	ldr	r3, [r7, #20]
 801f290:	801a      	strh	r2, [r3, #0]
 801f292:	e03c      	b.n	801f30e <USB_EPStartXfer+0x3ae>
 801f294:	1d7b      	adds	r3, r7, #5
 801f296:	33ff      	adds	r3, #255	@ 0xff
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	085b      	lsrs	r3, r3, #1
 801f29c:	21fc      	movs	r1, #252	@ 0xfc
 801f29e:	187a      	adds	r2, r7, r1
 801f2a0:	6013      	str	r3, [r2, #0]
 801f2a2:	1d7b      	adds	r3, r7, #5
 801f2a4:	33ff      	adds	r3, #255	@ 0xff
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	2201      	movs	r2, #1
 801f2aa:	4013      	ands	r3, r2
 801f2ac:	d004      	beq.n	801f2b8 <USB_EPStartXfer+0x358>
 801f2ae:	187b      	adds	r3, r7, r1
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	3301      	adds	r3, #1
 801f2b4:	187a      	adds	r2, r7, r1
 801f2b6:	6013      	str	r3, [r2, #0]
 801f2b8:	697b      	ldr	r3, [r7, #20]
 801f2ba:	881b      	ldrh	r3, [r3, #0]
 801f2bc:	b29a      	uxth	r2, r3
 801f2be:	23fc      	movs	r3, #252	@ 0xfc
 801f2c0:	18fb      	adds	r3, r7, r3
 801f2c2:	681b      	ldr	r3, [r3, #0]
 801f2c4:	b29b      	uxth	r3, r3
 801f2c6:	029b      	lsls	r3, r3, #10
 801f2c8:	b29b      	uxth	r3, r3
 801f2ca:	4313      	orrs	r3, r2
 801f2cc:	b29a      	uxth	r2, r3
 801f2ce:	697b      	ldr	r3, [r7, #20]
 801f2d0:	801a      	strh	r2, [r3, #0]
 801f2d2:	e01c      	b.n	801f30e <USB_EPStartXfer+0x3ae>
 801f2d4:	683b      	ldr	r3, [r7, #0]
 801f2d6:	785b      	ldrb	r3, [r3, #1]
 801f2d8:	2b01      	cmp	r3, #1
 801f2da:	d118      	bne.n	801f30e <USB_EPStartXfer+0x3ae>
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	623b      	str	r3, [r7, #32]
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	2250      	movs	r2, #80	@ 0x50
 801f2e4:	5a9b      	ldrh	r3, [r3, r2]
 801f2e6:	b29b      	uxth	r3, r3
 801f2e8:	001a      	movs	r2, r3
 801f2ea:	6a3b      	ldr	r3, [r7, #32]
 801f2ec:	189b      	adds	r3, r3, r2
 801f2ee:	623b      	str	r3, [r7, #32]
 801f2f0:	683b      	ldr	r3, [r7, #0]
 801f2f2:	781b      	ldrb	r3, [r3, #0]
 801f2f4:	00da      	lsls	r2, r3, #3
 801f2f6:	6a3b      	ldr	r3, [r7, #32]
 801f2f8:	18d3      	adds	r3, r2, r3
 801f2fa:	4a0e      	ldr	r2, [pc, #56]	@ (801f334 <USB_EPStartXfer+0x3d4>)
 801f2fc:	4694      	mov	ip, r2
 801f2fe:	4463      	add	r3, ip
 801f300:	61fb      	str	r3, [r7, #28]
 801f302:	1d7b      	adds	r3, r7, #5
 801f304:	33ff      	adds	r3, #255	@ 0xff
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	b29a      	uxth	r2, r3
 801f30a:	69fb      	ldr	r3, [r7, #28]
 801f30c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801f30e:	2076      	movs	r0, #118	@ 0x76
 801f310:	183b      	adds	r3, r7, r0
 801f312:	683a      	ldr	r2, [r7, #0]
 801f314:	8912      	ldrh	r2, [r2, #8]
 801f316:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f318:	683b      	ldr	r3, [r7, #0]
 801f31a:	6959      	ldr	r1, [r3, #20]
 801f31c:	1d7b      	adds	r3, r7, #5
 801f31e:	33ff      	adds	r3, #255	@ 0xff
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	b29c      	uxth	r4, r3
 801f324:	183b      	adds	r3, r7, r0
 801f326:	881a      	ldrh	r2, [r3, #0]
 801f328:	6878      	ldr	r0, [r7, #4]
 801f32a:	0023      	movs	r3, r4
 801f32c:	f001 f88a 	bl	8020444 <USB_WritePMA>
 801f330:	e329      	b.n	801f986 <USB_EPStartXfer+0xa26>
 801f332:	46c0      	nop			@ (mov r8, r8)
 801f334:	00000402 	.word	0x00000402
 801f338:	ffff8f8f 	.word	0xffff8f8f
 801f33c:	ffff8180 	.word	0xffff8180
 801f340:	00000406 	.word	0x00000406
 801f344:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f348:	683b      	ldr	r3, [r7, #0]
 801f34a:	785b      	ldrb	r3, [r3, #1]
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d000      	beq.n	801f352 <USB_EPStartXfer+0x3f2>
 801f350:	e070      	b.n	801f434 <USB_EPStartXfer+0x4d4>
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	2250      	movs	r2, #80	@ 0x50
 801f35a:	5a9b      	ldrh	r3, [r3, r2]
 801f35c:	b29b      	uxth	r3, r3
 801f35e:	001a      	movs	r2, r3
 801f360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f362:	189b      	adds	r3, r3, r2
 801f364:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f366:	683b      	ldr	r3, [r7, #0]
 801f368:	781b      	ldrb	r3, [r3, #0]
 801f36a:	00da      	lsls	r2, r3, #3
 801f36c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f36e:	18d3      	adds	r3, r2, r3
 801f370:	4acd      	ldr	r2, [pc, #820]	@ (801f6a8 <USB_EPStartXfer+0x748>)
 801f372:	4694      	mov	ip, r2
 801f374:	4463      	add	r3, ip
 801f376:	647b      	str	r3, [r7, #68]	@ 0x44
 801f378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f37a:	881b      	ldrh	r3, [r3, #0]
 801f37c:	b29b      	uxth	r3, r3
 801f37e:	059b      	lsls	r3, r3, #22
 801f380:	0d9b      	lsrs	r3, r3, #22
 801f382:	b29a      	uxth	r2, r3
 801f384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f386:	801a      	strh	r2, [r3, #0]
 801f388:	1d7b      	adds	r3, r7, #5
 801f38a:	33ff      	adds	r3, #255	@ 0xff
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	2b3e      	cmp	r3, #62	@ 0x3e
 801f390:	d922      	bls.n	801f3d8 <USB_EPStartXfer+0x478>
 801f392:	1d7b      	adds	r3, r7, #5
 801f394:	33ff      	adds	r3, #255	@ 0xff
 801f396:	681b      	ldr	r3, [r3, #0]
 801f398:	095b      	lsrs	r3, r3, #5
 801f39a:	21f8      	movs	r1, #248	@ 0xf8
 801f39c:	187a      	adds	r2, r7, r1
 801f39e:	6013      	str	r3, [r2, #0]
 801f3a0:	1d7b      	adds	r3, r7, #5
 801f3a2:	33ff      	adds	r3, #255	@ 0xff
 801f3a4:	681b      	ldr	r3, [r3, #0]
 801f3a6:	221f      	movs	r2, #31
 801f3a8:	4013      	ands	r3, r2
 801f3aa:	d104      	bne.n	801f3b6 <USB_EPStartXfer+0x456>
 801f3ac:	187b      	adds	r3, r7, r1
 801f3ae:	681b      	ldr	r3, [r3, #0]
 801f3b0:	3b01      	subs	r3, #1
 801f3b2:	187a      	adds	r2, r7, r1
 801f3b4:	6013      	str	r3, [r2, #0]
 801f3b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f3b8:	881b      	ldrh	r3, [r3, #0]
 801f3ba:	b29a      	uxth	r2, r3
 801f3bc:	23f8      	movs	r3, #248	@ 0xf8
 801f3be:	18fb      	adds	r3, r7, r3
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	b29b      	uxth	r3, r3
 801f3c4:	029b      	lsls	r3, r3, #10
 801f3c6:	b29b      	uxth	r3, r3
 801f3c8:	4313      	orrs	r3, r2
 801f3ca:	b29b      	uxth	r3, r3
 801f3cc:	4ab7      	ldr	r2, [pc, #732]	@ (801f6ac <USB_EPStartXfer+0x74c>)
 801f3ce:	4313      	orrs	r3, r2
 801f3d0:	b29a      	uxth	r2, r3
 801f3d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f3d4:	801a      	strh	r2, [r3, #0]
 801f3d6:	e04a      	b.n	801f46e <USB_EPStartXfer+0x50e>
 801f3d8:	1d7b      	adds	r3, r7, #5
 801f3da:	33ff      	adds	r3, #255	@ 0xff
 801f3dc:	681b      	ldr	r3, [r3, #0]
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	d108      	bne.n	801f3f4 <USB_EPStartXfer+0x494>
 801f3e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f3e4:	881b      	ldrh	r3, [r3, #0]
 801f3e6:	b29b      	uxth	r3, r3
 801f3e8:	4ab0      	ldr	r2, [pc, #704]	@ (801f6ac <USB_EPStartXfer+0x74c>)
 801f3ea:	4313      	orrs	r3, r2
 801f3ec:	b29a      	uxth	r2, r3
 801f3ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f3f0:	801a      	strh	r2, [r3, #0]
 801f3f2:	e03c      	b.n	801f46e <USB_EPStartXfer+0x50e>
 801f3f4:	1d7b      	adds	r3, r7, #5
 801f3f6:	33ff      	adds	r3, #255	@ 0xff
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	085b      	lsrs	r3, r3, #1
 801f3fc:	21f8      	movs	r1, #248	@ 0xf8
 801f3fe:	187a      	adds	r2, r7, r1
 801f400:	6013      	str	r3, [r2, #0]
 801f402:	1d7b      	adds	r3, r7, #5
 801f404:	33ff      	adds	r3, #255	@ 0xff
 801f406:	681b      	ldr	r3, [r3, #0]
 801f408:	2201      	movs	r2, #1
 801f40a:	4013      	ands	r3, r2
 801f40c:	d004      	beq.n	801f418 <USB_EPStartXfer+0x4b8>
 801f40e:	187b      	adds	r3, r7, r1
 801f410:	681b      	ldr	r3, [r3, #0]
 801f412:	3301      	adds	r3, #1
 801f414:	187a      	adds	r2, r7, r1
 801f416:	6013      	str	r3, [r2, #0]
 801f418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f41a:	881b      	ldrh	r3, [r3, #0]
 801f41c:	b29a      	uxth	r2, r3
 801f41e:	23f8      	movs	r3, #248	@ 0xf8
 801f420:	18fb      	adds	r3, r7, r3
 801f422:	681b      	ldr	r3, [r3, #0]
 801f424:	b29b      	uxth	r3, r3
 801f426:	029b      	lsls	r3, r3, #10
 801f428:	b29b      	uxth	r3, r3
 801f42a:	4313      	orrs	r3, r2
 801f42c:	b29a      	uxth	r2, r3
 801f42e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f430:	801a      	strh	r2, [r3, #0]
 801f432:	e01c      	b.n	801f46e <USB_EPStartXfer+0x50e>
 801f434:	683b      	ldr	r3, [r7, #0]
 801f436:	785b      	ldrb	r3, [r3, #1]
 801f438:	2b01      	cmp	r3, #1
 801f43a:	d118      	bne.n	801f46e <USB_EPStartXfer+0x50e>
 801f43c:	687b      	ldr	r3, [r7, #4]
 801f43e:	653b      	str	r3, [r7, #80]	@ 0x50
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	2250      	movs	r2, #80	@ 0x50
 801f444:	5a9b      	ldrh	r3, [r3, r2]
 801f446:	b29b      	uxth	r3, r3
 801f448:	001a      	movs	r2, r3
 801f44a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f44c:	189b      	adds	r3, r3, r2
 801f44e:	653b      	str	r3, [r7, #80]	@ 0x50
 801f450:	683b      	ldr	r3, [r7, #0]
 801f452:	781b      	ldrb	r3, [r3, #0]
 801f454:	00da      	lsls	r2, r3, #3
 801f456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f458:	18d3      	adds	r3, r2, r3
 801f45a:	4a93      	ldr	r2, [pc, #588]	@ (801f6a8 <USB_EPStartXfer+0x748>)
 801f45c:	4694      	mov	ip, r2
 801f45e:	4463      	add	r3, ip
 801f460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f462:	1d7b      	adds	r3, r7, #5
 801f464:	33ff      	adds	r3, #255	@ 0xff
 801f466:	681b      	ldr	r3, [r3, #0]
 801f468:	b29a      	uxth	r2, r3
 801f46a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f46c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801f46e:	2076      	movs	r0, #118	@ 0x76
 801f470:	183b      	adds	r3, r7, r0
 801f472:	683a      	ldr	r2, [r7, #0]
 801f474:	8912      	ldrh	r2, [r2, #8]
 801f476:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f478:	683b      	ldr	r3, [r7, #0]
 801f47a:	6959      	ldr	r1, [r3, #20]
 801f47c:	1d7b      	adds	r3, r7, #5
 801f47e:	33ff      	adds	r3, #255	@ 0xff
 801f480:	681b      	ldr	r3, [r3, #0]
 801f482:	b29c      	uxth	r4, r3
 801f484:	183b      	adds	r3, r7, r0
 801f486:	881a      	ldrh	r2, [r3, #0]
 801f488:	6878      	ldr	r0, [r7, #4]
 801f48a:	0023      	movs	r3, r4
 801f48c:	f000 ffda 	bl	8020444 <USB_WritePMA>
            ep->xfer_buff += len;
 801f490:	683b      	ldr	r3, [r7, #0]
 801f492:	695a      	ldr	r2, [r3, #20]
 801f494:	1d7b      	adds	r3, r7, #5
 801f496:	33ff      	adds	r3, #255	@ 0xff
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	18d2      	adds	r2, r2, r3
 801f49c:	683b      	ldr	r3, [r7, #0]
 801f49e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801f4a0:	683b      	ldr	r3, [r7, #0]
 801f4a2:	6a1a      	ldr	r2, [r3, #32]
 801f4a4:	683b      	ldr	r3, [r7, #0]
 801f4a6:	691b      	ldr	r3, [r3, #16]
 801f4a8:	429a      	cmp	r2, r3
 801f4aa:	d908      	bls.n	801f4be <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801f4ac:	683b      	ldr	r3, [r7, #0]
 801f4ae:	6a1a      	ldr	r2, [r3, #32]
 801f4b0:	1d7b      	adds	r3, r7, #5
 801f4b2:	33ff      	adds	r3, #255	@ 0xff
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	1ad2      	subs	r2, r2, r3
 801f4b8:	683b      	ldr	r3, [r7, #0]
 801f4ba:	621a      	str	r2, [r3, #32]
 801f4bc:	e007      	b.n	801f4ce <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801f4be:	683b      	ldr	r3, [r7, #0]
 801f4c0:	6a1b      	ldr	r3, [r3, #32]
 801f4c2:	1d7a      	adds	r2, r7, #5
 801f4c4:	32ff      	adds	r2, #255	@ 0xff
 801f4c6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801f4c8:	683b      	ldr	r3, [r7, #0]
 801f4ca:	2200      	movs	r2, #0
 801f4cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f4ce:	687b      	ldr	r3, [r7, #4]
 801f4d0:	643b      	str	r3, [r7, #64]	@ 0x40
 801f4d2:	683b      	ldr	r3, [r7, #0]
 801f4d4:	785b      	ldrb	r3, [r3, #1]
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	d000      	beq.n	801f4dc <USB_EPStartXfer+0x57c>
 801f4da:	e070      	b.n	801f5be <USB_EPStartXfer+0x65e>
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	2250      	movs	r2, #80	@ 0x50
 801f4e4:	5a9b      	ldrh	r3, [r3, r2]
 801f4e6:	b29b      	uxth	r3, r3
 801f4e8:	001a      	movs	r2, r3
 801f4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f4ec:	189b      	adds	r3, r3, r2
 801f4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f4f0:	683b      	ldr	r3, [r7, #0]
 801f4f2:	781b      	ldrb	r3, [r3, #0]
 801f4f4:	00da      	lsls	r2, r3, #3
 801f4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f4f8:	18d3      	adds	r3, r2, r3
 801f4fa:	4a6d      	ldr	r2, [pc, #436]	@ (801f6b0 <USB_EPStartXfer+0x750>)
 801f4fc:	4694      	mov	ip, r2
 801f4fe:	4463      	add	r3, ip
 801f500:	637b      	str	r3, [r7, #52]	@ 0x34
 801f502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f504:	881b      	ldrh	r3, [r3, #0]
 801f506:	b29b      	uxth	r3, r3
 801f508:	059b      	lsls	r3, r3, #22
 801f50a:	0d9b      	lsrs	r3, r3, #22
 801f50c:	b29a      	uxth	r2, r3
 801f50e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f510:	801a      	strh	r2, [r3, #0]
 801f512:	1d7b      	adds	r3, r7, #5
 801f514:	33ff      	adds	r3, #255	@ 0xff
 801f516:	681b      	ldr	r3, [r3, #0]
 801f518:	2b3e      	cmp	r3, #62	@ 0x3e
 801f51a:	d922      	bls.n	801f562 <USB_EPStartXfer+0x602>
 801f51c:	1d7b      	adds	r3, r7, #5
 801f51e:	33ff      	adds	r3, #255	@ 0xff
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	095b      	lsrs	r3, r3, #5
 801f524:	21f4      	movs	r1, #244	@ 0xf4
 801f526:	187a      	adds	r2, r7, r1
 801f528:	6013      	str	r3, [r2, #0]
 801f52a:	1d7b      	adds	r3, r7, #5
 801f52c:	33ff      	adds	r3, #255	@ 0xff
 801f52e:	681b      	ldr	r3, [r3, #0]
 801f530:	221f      	movs	r2, #31
 801f532:	4013      	ands	r3, r2
 801f534:	d104      	bne.n	801f540 <USB_EPStartXfer+0x5e0>
 801f536:	187b      	adds	r3, r7, r1
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	3b01      	subs	r3, #1
 801f53c:	187a      	adds	r2, r7, r1
 801f53e:	6013      	str	r3, [r2, #0]
 801f540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f542:	881b      	ldrh	r3, [r3, #0]
 801f544:	b29a      	uxth	r2, r3
 801f546:	23f4      	movs	r3, #244	@ 0xf4
 801f548:	18fb      	adds	r3, r7, r3
 801f54a:	681b      	ldr	r3, [r3, #0]
 801f54c:	b29b      	uxth	r3, r3
 801f54e:	029b      	lsls	r3, r3, #10
 801f550:	b29b      	uxth	r3, r3
 801f552:	4313      	orrs	r3, r2
 801f554:	b29b      	uxth	r3, r3
 801f556:	4a55      	ldr	r2, [pc, #340]	@ (801f6ac <USB_EPStartXfer+0x74c>)
 801f558:	4313      	orrs	r3, r2
 801f55a:	b29a      	uxth	r2, r3
 801f55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f55e:	801a      	strh	r2, [r3, #0]
 801f560:	e048      	b.n	801f5f4 <USB_EPStartXfer+0x694>
 801f562:	1d7b      	adds	r3, r7, #5
 801f564:	33ff      	adds	r3, #255	@ 0xff
 801f566:	681b      	ldr	r3, [r3, #0]
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d108      	bne.n	801f57e <USB_EPStartXfer+0x61e>
 801f56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f56e:	881b      	ldrh	r3, [r3, #0]
 801f570:	b29b      	uxth	r3, r3
 801f572:	4a4e      	ldr	r2, [pc, #312]	@ (801f6ac <USB_EPStartXfer+0x74c>)
 801f574:	4313      	orrs	r3, r2
 801f576:	b29a      	uxth	r2, r3
 801f578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f57a:	801a      	strh	r2, [r3, #0]
 801f57c:	e03a      	b.n	801f5f4 <USB_EPStartXfer+0x694>
 801f57e:	1d7b      	adds	r3, r7, #5
 801f580:	33ff      	adds	r3, #255	@ 0xff
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	085b      	lsrs	r3, r3, #1
 801f586:	21f4      	movs	r1, #244	@ 0xf4
 801f588:	187a      	adds	r2, r7, r1
 801f58a:	6013      	str	r3, [r2, #0]
 801f58c:	1d7b      	adds	r3, r7, #5
 801f58e:	33ff      	adds	r3, #255	@ 0xff
 801f590:	681b      	ldr	r3, [r3, #0]
 801f592:	2201      	movs	r2, #1
 801f594:	4013      	ands	r3, r2
 801f596:	d004      	beq.n	801f5a2 <USB_EPStartXfer+0x642>
 801f598:	187b      	adds	r3, r7, r1
 801f59a:	681b      	ldr	r3, [r3, #0]
 801f59c:	3301      	adds	r3, #1
 801f59e:	187a      	adds	r2, r7, r1
 801f5a0:	6013      	str	r3, [r2, #0]
 801f5a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f5a4:	881b      	ldrh	r3, [r3, #0]
 801f5a6:	b29a      	uxth	r2, r3
 801f5a8:	23f4      	movs	r3, #244	@ 0xf4
 801f5aa:	18fb      	adds	r3, r7, r3
 801f5ac:	681b      	ldr	r3, [r3, #0]
 801f5ae:	b29b      	uxth	r3, r3
 801f5b0:	029b      	lsls	r3, r3, #10
 801f5b2:	b29b      	uxth	r3, r3
 801f5b4:	4313      	orrs	r3, r2
 801f5b6:	b29a      	uxth	r2, r3
 801f5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f5ba:	801a      	strh	r2, [r3, #0]
 801f5bc:	e01a      	b.n	801f5f4 <USB_EPStartXfer+0x694>
 801f5be:	683b      	ldr	r3, [r7, #0]
 801f5c0:	785b      	ldrb	r3, [r3, #1]
 801f5c2:	2b01      	cmp	r3, #1
 801f5c4:	d116      	bne.n	801f5f4 <USB_EPStartXfer+0x694>
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	2250      	movs	r2, #80	@ 0x50
 801f5ca:	5a9b      	ldrh	r3, [r3, r2]
 801f5cc:	b29b      	uxth	r3, r3
 801f5ce:	001a      	movs	r2, r3
 801f5d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f5d2:	189b      	adds	r3, r3, r2
 801f5d4:	643b      	str	r3, [r7, #64]	@ 0x40
 801f5d6:	683b      	ldr	r3, [r7, #0]
 801f5d8:	781b      	ldrb	r3, [r3, #0]
 801f5da:	00da      	lsls	r2, r3, #3
 801f5dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f5de:	18d3      	adds	r3, r2, r3
 801f5e0:	4a33      	ldr	r2, [pc, #204]	@ (801f6b0 <USB_EPStartXfer+0x750>)
 801f5e2:	4694      	mov	ip, r2
 801f5e4:	4463      	add	r3, ip
 801f5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f5e8:	1d7b      	adds	r3, r7, #5
 801f5ea:	33ff      	adds	r3, #255	@ 0xff
 801f5ec:	681b      	ldr	r3, [r3, #0]
 801f5ee:	b29a      	uxth	r2, r3
 801f5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f5f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801f5f4:	2076      	movs	r0, #118	@ 0x76
 801f5f6:	183b      	adds	r3, r7, r0
 801f5f8:	683a      	ldr	r2, [r7, #0]
 801f5fa:	8952      	ldrh	r2, [r2, #10]
 801f5fc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f5fe:	683b      	ldr	r3, [r7, #0]
 801f600:	6959      	ldr	r1, [r3, #20]
 801f602:	1d7b      	adds	r3, r7, #5
 801f604:	33ff      	adds	r3, #255	@ 0xff
 801f606:	681b      	ldr	r3, [r3, #0]
 801f608:	b29c      	uxth	r4, r3
 801f60a:	183b      	adds	r3, r7, r0
 801f60c:	881a      	ldrh	r2, [r3, #0]
 801f60e:	6878      	ldr	r0, [r7, #4]
 801f610:	0023      	movs	r3, r4
 801f612:	f000 ff17 	bl	8020444 <USB_WritePMA>
 801f616:	e1b6      	b.n	801f986 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801f618:	683b      	ldr	r3, [r7, #0]
 801f61a:	6a1b      	ldr	r3, [r3, #32]
 801f61c:	1d7a      	adds	r2, r7, #5
 801f61e:	32ff      	adds	r2, #255	@ 0xff
 801f620:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801f622:	687a      	ldr	r2, [r7, #4]
 801f624:	683b      	ldr	r3, [r7, #0]
 801f626:	781b      	ldrb	r3, [r3, #0]
 801f628:	009b      	lsls	r3, r3, #2
 801f62a:	18d3      	adds	r3, r2, r3
 801f62c:	881b      	ldrh	r3, [r3, #0]
 801f62e:	b29a      	uxth	r2, r3
 801f630:	2062      	movs	r0, #98	@ 0x62
 801f632:	183b      	adds	r3, r7, r0
 801f634:	491f      	ldr	r1, [pc, #124]	@ (801f6b4 <USB_EPStartXfer+0x754>)
 801f636:	400a      	ands	r2, r1
 801f638:	801a      	strh	r2, [r3, #0]
 801f63a:	687a      	ldr	r2, [r7, #4]
 801f63c:	683b      	ldr	r3, [r7, #0]
 801f63e:	781b      	ldrb	r3, [r3, #0]
 801f640:	009b      	lsls	r3, r3, #2
 801f642:	18d3      	adds	r3, r2, r3
 801f644:	183a      	adds	r2, r7, r0
 801f646:	8812      	ldrh	r2, [r2, #0]
 801f648:	491b      	ldr	r1, [pc, #108]	@ (801f6b8 <USB_EPStartXfer+0x758>)
 801f64a:	430a      	orrs	r2, r1
 801f64c:	b292      	uxth	r2, r2
 801f64e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801f650:	687b      	ldr	r3, [r7, #4]
 801f652:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f654:	687b      	ldr	r3, [r7, #4]
 801f656:	2250      	movs	r2, #80	@ 0x50
 801f658:	5a9b      	ldrh	r3, [r3, r2]
 801f65a:	b29b      	uxth	r3, r3
 801f65c:	001a      	movs	r2, r3
 801f65e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f660:	189b      	adds	r3, r3, r2
 801f662:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f664:	683b      	ldr	r3, [r7, #0]
 801f666:	781b      	ldrb	r3, [r3, #0]
 801f668:	00da      	lsls	r2, r3, #3
 801f66a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f66c:	18d3      	adds	r3, r2, r3
 801f66e:	4a0e      	ldr	r2, [pc, #56]	@ (801f6a8 <USB_EPStartXfer+0x748>)
 801f670:	4694      	mov	ip, r2
 801f672:	4463      	add	r3, ip
 801f674:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f676:	1d7b      	adds	r3, r7, #5
 801f678:	33ff      	adds	r3, #255	@ 0xff
 801f67a:	681b      	ldr	r3, [r3, #0]
 801f67c:	b29a      	uxth	r2, r3
 801f67e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f680:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801f682:	2076      	movs	r0, #118	@ 0x76
 801f684:	183b      	adds	r3, r7, r0
 801f686:	683a      	ldr	r2, [r7, #0]
 801f688:	8912      	ldrh	r2, [r2, #8]
 801f68a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f68c:	683b      	ldr	r3, [r7, #0]
 801f68e:	6959      	ldr	r1, [r3, #20]
 801f690:	1d7b      	adds	r3, r7, #5
 801f692:	33ff      	adds	r3, #255	@ 0xff
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	b29c      	uxth	r4, r3
 801f698:	183b      	adds	r3, r7, r0
 801f69a:	881a      	ldrh	r2, [r3, #0]
 801f69c:	6878      	ldr	r0, [r7, #4]
 801f69e:	0023      	movs	r3, r4
 801f6a0:	f000 fed0 	bl	8020444 <USB_WritePMA>
 801f6a4:	e16f      	b.n	801f986 <USB_EPStartXfer+0xa26>
 801f6a6:	46c0      	nop			@ (mov r8, r8)
 801f6a8:	00000402 	.word	0x00000402
 801f6ac:	ffff8000 	.word	0xffff8000
 801f6b0:	00000406 	.word	0x00000406
 801f6b4:	ffff8e8f 	.word	0xffff8e8f
 801f6b8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801f6bc:	683b      	ldr	r3, [r7, #0]
 801f6be:	6a1a      	ldr	r2, [r3, #32]
 801f6c0:	1d7b      	adds	r3, r7, #5
 801f6c2:	33ff      	adds	r3, #255	@ 0xff
 801f6c4:	681b      	ldr	r3, [r3, #0]
 801f6c6:	1ad2      	subs	r2, r2, r3
 801f6c8:	683b      	ldr	r3, [r7, #0]
 801f6ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801f6cc:	687a      	ldr	r2, [r7, #4]
 801f6ce:	683b      	ldr	r3, [r7, #0]
 801f6d0:	781b      	ldrb	r3, [r3, #0]
 801f6d2:	009b      	lsls	r3, r3, #2
 801f6d4:	18d3      	adds	r3, r2, r3
 801f6d6:	881b      	ldrh	r3, [r3, #0]
 801f6d8:	b29b      	uxth	r3, r3
 801f6da:	001a      	movs	r2, r3
 801f6dc:	2340      	movs	r3, #64	@ 0x40
 801f6de:	4013      	ands	r3, r2
 801f6e0:	d100      	bne.n	801f6e4 <USB_EPStartXfer+0x784>
 801f6e2:	e0a4      	b.n	801f82e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	673b      	str	r3, [r7, #112]	@ 0x70
 801f6e8:	683b      	ldr	r3, [r7, #0]
 801f6ea:	785b      	ldrb	r3, [r3, #1]
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	d000      	beq.n	801f6f2 <USB_EPStartXfer+0x792>
 801f6f0:	e070      	b.n	801f7d4 <USB_EPStartXfer+0x874>
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	2250      	movs	r2, #80	@ 0x50
 801f6fa:	5a9b      	ldrh	r3, [r3, r2]
 801f6fc:	b29b      	uxth	r3, r3
 801f6fe:	001a      	movs	r2, r3
 801f700:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f702:	189b      	adds	r3, r3, r2
 801f704:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f706:	683b      	ldr	r3, [r7, #0]
 801f708:	781b      	ldrb	r3, [r3, #0]
 801f70a:	00da      	lsls	r2, r3, #3
 801f70c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f70e:	18d3      	adds	r3, r2, r3
 801f710:	4abc      	ldr	r2, [pc, #752]	@ (801fa04 <USB_EPStartXfer+0xaa4>)
 801f712:	4694      	mov	ip, r2
 801f714:	4463      	add	r3, ip
 801f716:	667b      	str	r3, [r7, #100]	@ 0x64
 801f718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f71a:	881b      	ldrh	r3, [r3, #0]
 801f71c:	b29b      	uxth	r3, r3
 801f71e:	059b      	lsls	r3, r3, #22
 801f720:	0d9b      	lsrs	r3, r3, #22
 801f722:	b29a      	uxth	r2, r3
 801f724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f726:	801a      	strh	r2, [r3, #0]
 801f728:	1d7b      	adds	r3, r7, #5
 801f72a:	33ff      	adds	r3, #255	@ 0xff
 801f72c:	681b      	ldr	r3, [r3, #0]
 801f72e:	2b3e      	cmp	r3, #62	@ 0x3e
 801f730:	d922      	bls.n	801f778 <USB_EPStartXfer+0x818>
 801f732:	1d7b      	adds	r3, r7, #5
 801f734:	33ff      	adds	r3, #255	@ 0xff
 801f736:	681b      	ldr	r3, [r3, #0]
 801f738:	095b      	lsrs	r3, r3, #5
 801f73a:	21f0      	movs	r1, #240	@ 0xf0
 801f73c:	187a      	adds	r2, r7, r1
 801f73e:	6013      	str	r3, [r2, #0]
 801f740:	1d7b      	adds	r3, r7, #5
 801f742:	33ff      	adds	r3, #255	@ 0xff
 801f744:	681b      	ldr	r3, [r3, #0]
 801f746:	221f      	movs	r2, #31
 801f748:	4013      	ands	r3, r2
 801f74a:	d104      	bne.n	801f756 <USB_EPStartXfer+0x7f6>
 801f74c:	187b      	adds	r3, r7, r1
 801f74e:	681b      	ldr	r3, [r3, #0]
 801f750:	3b01      	subs	r3, #1
 801f752:	187a      	adds	r2, r7, r1
 801f754:	6013      	str	r3, [r2, #0]
 801f756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f758:	881b      	ldrh	r3, [r3, #0]
 801f75a:	b29a      	uxth	r2, r3
 801f75c:	23f0      	movs	r3, #240	@ 0xf0
 801f75e:	18fb      	adds	r3, r7, r3
 801f760:	681b      	ldr	r3, [r3, #0]
 801f762:	b29b      	uxth	r3, r3
 801f764:	029b      	lsls	r3, r3, #10
 801f766:	b29b      	uxth	r3, r3
 801f768:	4313      	orrs	r3, r2
 801f76a:	b29b      	uxth	r3, r3
 801f76c:	4aa6      	ldr	r2, [pc, #664]	@ (801fa08 <USB_EPStartXfer+0xaa8>)
 801f76e:	4313      	orrs	r3, r2
 801f770:	b29a      	uxth	r2, r3
 801f772:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f774:	801a      	strh	r2, [r3, #0]
 801f776:	e048      	b.n	801f80a <USB_EPStartXfer+0x8aa>
 801f778:	1d7b      	adds	r3, r7, #5
 801f77a:	33ff      	adds	r3, #255	@ 0xff
 801f77c:	681b      	ldr	r3, [r3, #0]
 801f77e:	2b00      	cmp	r3, #0
 801f780:	d108      	bne.n	801f794 <USB_EPStartXfer+0x834>
 801f782:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f784:	881b      	ldrh	r3, [r3, #0]
 801f786:	b29b      	uxth	r3, r3
 801f788:	4a9f      	ldr	r2, [pc, #636]	@ (801fa08 <USB_EPStartXfer+0xaa8>)
 801f78a:	4313      	orrs	r3, r2
 801f78c:	b29a      	uxth	r2, r3
 801f78e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f790:	801a      	strh	r2, [r3, #0]
 801f792:	e03a      	b.n	801f80a <USB_EPStartXfer+0x8aa>
 801f794:	1d7b      	adds	r3, r7, #5
 801f796:	33ff      	adds	r3, #255	@ 0xff
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	085b      	lsrs	r3, r3, #1
 801f79c:	21f0      	movs	r1, #240	@ 0xf0
 801f79e:	187a      	adds	r2, r7, r1
 801f7a0:	6013      	str	r3, [r2, #0]
 801f7a2:	1d7b      	adds	r3, r7, #5
 801f7a4:	33ff      	adds	r3, #255	@ 0xff
 801f7a6:	681b      	ldr	r3, [r3, #0]
 801f7a8:	2201      	movs	r2, #1
 801f7aa:	4013      	ands	r3, r2
 801f7ac:	d004      	beq.n	801f7b8 <USB_EPStartXfer+0x858>
 801f7ae:	187b      	adds	r3, r7, r1
 801f7b0:	681b      	ldr	r3, [r3, #0]
 801f7b2:	3301      	adds	r3, #1
 801f7b4:	187a      	adds	r2, r7, r1
 801f7b6:	6013      	str	r3, [r2, #0]
 801f7b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f7ba:	881b      	ldrh	r3, [r3, #0]
 801f7bc:	b29a      	uxth	r2, r3
 801f7be:	23f0      	movs	r3, #240	@ 0xf0
 801f7c0:	18fb      	adds	r3, r7, r3
 801f7c2:	681b      	ldr	r3, [r3, #0]
 801f7c4:	b29b      	uxth	r3, r3
 801f7c6:	029b      	lsls	r3, r3, #10
 801f7c8:	b29b      	uxth	r3, r3
 801f7ca:	4313      	orrs	r3, r2
 801f7cc:	b29a      	uxth	r2, r3
 801f7ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f7d0:	801a      	strh	r2, [r3, #0]
 801f7d2:	e01a      	b.n	801f80a <USB_EPStartXfer+0x8aa>
 801f7d4:	683b      	ldr	r3, [r7, #0]
 801f7d6:	785b      	ldrb	r3, [r3, #1]
 801f7d8:	2b01      	cmp	r3, #1
 801f7da:	d116      	bne.n	801f80a <USB_EPStartXfer+0x8aa>
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	2250      	movs	r2, #80	@ 0x50
 801f7e0:	5a9b      	ldrh	r3, [r3, r2]
 801f7e2:	b29b      	uxth	r3, r3
 801f7e4:	001a      	movs	r2, r3
 801f7e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f7e8:	189b      	adds	r3, r3, r2
 801f7ea:	673b      	str	r3, [r7, #112]	@ 0x70
 801f7ec:	683b      	ldr	r3, [r7, #0]
 801f7ee:	781b      	ldrb	r3, [r3, #0]
 801f7f0:	00da      	lsls	r2, r3, #3
 801f7f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f7f4:	18d3      	adds	r3, r2, r3
 801f7f6:	4a83      	ldr	r2, [pc, #524]	@ (801fa04 <USB_EPStartXfer+0xaa4>)
 801f7f8:	4694      	mov	ip, r2
 801f7fa:	4463      	add	r3, ip
 801f7fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801f7fe:	1d7b      	adds	r3, r7, #5
 801f800:	33ff      	adds	r3, #255	@ 0xff
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	b29a      	uxth	r2, r3
 801f806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f808:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801f80a:	2076      	movs	r0, #118	@ 0x76
 801f80c:	183b      	adds	r3, r7, r0
 801f80e:	683a      	ldr	r2, [r7, #0]
 801f810:	8952      	ldrh	r2, [r2, #10]
 801f812:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f814:	683b      	ldr	r3, [r7, #0]
 801f816:	6959      	ldr	r1, [r3, #20]
 801f818:	1d7b      	adds	r3, r7, #5
 801f81a:	33ff      	adds	r3, #255	@ 0xff
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	b29c      	uxth	r4, r3
 801f820:	183b      	adds	r3, r7, r0
 801f822:	881a      	ldrh	r2, [r3, #0]
 801f824:	6878      	ldr	r0, [r7, #4]
 801f826:	0023      	movs	r3, r4
 801f828:	f000 fe0c 	bl	8020444 <USB_WritePMA>
 801f82c:	e0ab      	b.n	801f986 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f82e:	683b      	ldr	r3, [r7, #0]
 801f830:	785b      	ldrb	r3, [r3, #1]
 801f832:	2b00      	cmp	r3, #0
 801f834:	d000      	beq.n	801f838 <USB_EPStartXfer+0x8d8>
 801f836:	e070      	b.n	801f91a <USB_EPStartXfer+0x9ba>
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f83c:	687b      	ldr	r3, [r7, #4]
 801f83e:	2250      	movs	r2, #80	@ 0x50
 801f840:	5a9b      	ldrh	r3, [r3, r2]
 801f842:	b29b      	uxth	r3, r3
 801f844:	001a      	movs	r2, r3
 801f846:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f848:	189b      	adds	r3, r3, r2
 801f84a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f84c:	683b      	ldr	r3, [r7, #0]
 801f84e:	781b      	ldrb	r3, [r3, #0]
 801f850:	00da      	lsls	r2, r3, #3
 801f852:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f854:	18d3      	adds	r3, r2, r3
 801f856:	4a6d      	ldr	r2, [pc, #436]	@ (801fa0c <USB_EPStartXfer+0xaac>)
 801f858:	4694      	mov	ip, r2
 801f85a:	4463      	add	r3, ip
 801f85c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801f85e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f860:	881b      	ldrh	r3, [r3, #0]
 801f862:	b29b      	uxth	r3, r3
 801f864:	059b      	lsls	r3, r3, #22
 801f866:	0d9b      	lsrs	r3, r3, #22
 801f868:	b29a      	uxth	r2, r3
 801f86a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f86c:	801a      	strh	r2, [r3, #0]
 801f86e:	1d7b      	adds	r3, r7, #5
 801f870:	33ff      	adds	r3, #255	@ 0xff
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	2b3e      	cmp	r3, #62	@ 0x3e
 801f876:	d922      	bls.n	801f8be <USB_EPStartXfer+0x95e>
 801f878:	1d7b      	adds	r3, r7, #5
 801f87a:	33ff      	adds	r3, #255	@ 0xff
 801f87c:	681b      	ldr	r3, [r3, #0]
 801f87e:	095b      	lsrs	r3, r3, #5
 801f880:	21ec      	movs	r1, #236	@ 0xec
 801f882:	187a      	adds	r2, r7, r1
 801f884:	6013      	str	r3, [r2, #0]
 801f886:	1d7b      	adds	r3, r7, #5
 801f888:	33ff      	adds	r3, #255	@ 0xff
 801f88a:	681b      	ldr	r3, [r3, #0]
 801f88c:	221f      	movs	r2, #31
 801f88e:	4013      	ands	r3, r2
 801f890:	d104      	bne.n	801f89c <USB_EPStartXfer+0x93c>
 801f892:	187b      	adds	r3, r7, r1
 801f894:	681b      	ldr	r3, [r3, #0]
 801f896:	3b01      	subs	r3, #1
 801f898:	187a      	adds	r2, r7, r1
 801f89a:	6013      	str	r3, [r2, #0]
 801f89c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f89e:	881b      	ldrh	r3, [r3, #0]
 801f8a0:	b29a      	uxth	r2, r3
 801f8a2:	23ec      	movs	r3, #236	@ 0xec
 801f8a4:	18fb      	adds	r3, r7, r3
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	b29b      	uxth	r3, r3
 801f8aa:	029b      	lsls	r3, r3, #10
 801f8ac:	b29b      	uxth	r3, r3
 801f8ae:	4313      	orrs	r3, r2
 801f8b0:	b29b      	uxth	r3, r3
 801f8b2:	4a55      	ldr	r2, [pc, #340]	@ (801fa08 <USB_EPStartXfer+0xaa8>)
 801f8b4:	4313      	orrs	r3, r2
 801f8b6:	b29a      	uxth	r2, r3
 801f8b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f8ba:	801a      	strh	r2, [r3, #0]
 801f8bc:	e052      	b.n	801f964 <USB_EPStartXfer+0xa04>
 801f8be:	1d7b      	adds	r3, r7, #5
 801f8c0:	33ff      	adds	r3, #255	@ 0xff
 801f8c2:	681b      	ldr	r3, [r3, #0]
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	d108      	bne.n	801f8da <USB_EPStartXfer+0x97a>
 801f8c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f8ca:	881b      	ldrh	r3, [r3, #0]
 801f8cc:	b29b      	uxth	r3, r3
 801f8ce:	4a4e      	ldr	r2, [pc, #312]	@ (801fa08 <USB_EPStartXfer+0xaa8>)
 801f8d0:	4313      	orrs	r3, r2
 801f8d2:	b29a      	uxth	r2, r3
 801f8d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f8d6:	801a      	strh	r2, [r3, #0]
 801f8d8:	e044      	b.n	801f964 <USB_EPStartXfer+0xa04>
 801f8da:	1d7b      	adds	r3, r7, #5
 801f8dc:	33ff      	adds	r3, #255	@ 0xff
 801f8de:	681b      	ldr	r3, [r3, #0]
 801f8e0:	085b      	lsrs	r3, r3, #1
 801f8e2:	21ec      	movs	r1, #236	@ 0xec
 801f8e4:	187a      	adds	r2, r7, r1
 801f8e6:	6013      	str	r3, [r2, #0]
 801f8e8:	1d7b      	adds	r3, r7, #5
 801f8ea:	33ff      	adds	r3, #255	@ 0xff
 801f8ec:	681b      	ldr	r3, [r3, #0]
 801f8ee:	2201      	movs	r2, #1
 801f8f0:	4013      	ands	r3, r2
 801f8f2:	d004      	beq.n	801f8fe <USB_EPStartXfer+0x99e>
 801f8f4:	187b      	adds	r3, r7, r1
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	3301      	adds	r3, #1
 801f8fa:	187a      	adds	r2, r7, r1
 801f8fc:	6013      	str	r3, [r2, #0]
 801f8fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f900:	881b      	ldrh	r3, [r3, #0]
 801f902:	b29a      	uxth	r2, r3
 801f904:	23ec      	movs	r3, #236	@ 0xec
 801f906:	18fb      	adds	r3, r7, r3
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	b29b      	uxth	r3, r3
 801f90c:	029b      	lsls	r3, r3, #10
 801f90e:	b29b      	uxth	r3, r3
 801f910:	4313      	orrs	r3, r2
 801f912:	b29a      	uxth	r2, r3
 801f914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f916:	801a      	strh	r2, [r3, #0]
 801f918:	e024      	b.n	801f964 <USB_EPStartXfer+0xa04>
 801f91a:	683b      	ldr	r3, [r7, #0]
 801f91c:	785b      	ldrb	r3, [r3, #1]
 801f91e:	2b01      	cmp	r3, #1
 801f920:	d120      	bne.n	801f964 <USB_EPStartXfer+0xa04>
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	2184      	movs	r1, #132	@ 0x84
 801f926:	187a      	adds	r2, r7, r1
 801f928:	6013      	str	r3, [r2, #0]
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	2250      	movs	r2, #80	@ 0x50
 801f92e:	5a9b      	ldrh	r3, [r3, r2]
 801f930:	b29b      	uxth	r3, r3
 801f932:	001a      	movs	r2, r3
 801f934:	187b      	adds	r3, r7, r1
 801f936:	681b      	ldr	r3, [r3, #0]
 801f938:	189b      	adds	r3, r3, r2
 801f93a:	187a      	adds	r2, r7, r1
 801f93c:	6013      	str	r3, [r2, #0]
 801f93e:	683b      	ldr	r3, [r7, #0]
 801f940:	781b      	ldrb	r3, [r3, #0]
 801f942:	00da      	lsls	r2, r3, #3
 801f944:	187b      	adds	r3, r7, r1
 801f946:	681b      	ldr	r3, [r3, #0]
 801f948:	18d3      	adds	r3, r2, r3
 801f94a:	4a30      	ldr	r2, [pc, #192]	@ (801fa0c <USB_EPStartXfer+0xaac>)
 801f94c:	4694      	mov	ip, r2
 801f94e:	4463      	add	r3, ip
 801f950:	2180      	movs	r1, #128	@ 0x80
 801f952:	187a      	adds	r2, r7, r1
 801f954:	6013      	str	r3, [r2, #0]
 801f956:	1d7b      	adds	r3, r7, #5
 801f958:	33ff      	adds	r3, #255	@ 0xff
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	b29a      	uxth	r2, r3
 801f95e:	187b      	adds	r3, r7, r1
 801f960:	681b      	ldr	r3, [r3, #0]
 801f962:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801f964:	2076      	movs	r0, #118	@ 0x76
 801f966:	183b      	adds	r3, r7, r0
 801f968:	683a      	ldr	r2, [r7, #0]
 801f96a:	8912      	ldrh	r2, [r2, #8]
 801f96c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f96e:	683b      	ldr	r3, [r7, #0]
 801f970:	6959      	ldr	r1, [r3, #20]
 801f972:	1d7b      	adds	r3, r7, #5
 801f974:	33ff      	adds	r3, #255	@ 0xff
 801f976:	681b      	ldr	r3, [r3, #0]
 801f978:	b29c      	uxth	r4, r3
 801f97a:	183b      	adds	r3, r7, r0
 801f97c:	881a      	ldrh	r2, [r3, #0]
 801f97e:	6878      	ldr	r0, [r7, #4]
 801f980:	0023      	movs	r3, r4
 801f982:	f000 fd5f 	bl	8020444 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801f986:	687a      	ldr	r2, [r7, #4]
 801f988:	683b      	ldr	r3, [r7, #0]
 801f98a:	781b      	ldrb	r3, [r3, #0]
 801f98c:	009b      	lsls	r3, r3, #2
 801f98e:	18d3      	adds	r3, r2, r3
 801f990:	881b      	ldrh	r3, [r3, #0]
 801f992:	b29a      	uxth	r2, r3
 801f994:	200a      	movs	r0, #10
 801f996:	183b      	adds	r3, r7, r0
 801f998:	491d      	ldr	r1, [pc, #116]	@ (801fa10 <USB_EPStartXfer+0xab0>)
 801f99a:	400a      	ands	r2, r1
 801f99c:	801a      	strh	r2, [r3, #0]
 801f99e:	183b      	adds	r3, r7, r0
 801f9a0:	183a      	adds	r2, r7, r0
 801f9a2:	8812      	ldrh	r2, [r2, #0]
 801f9a4:	2110      	movs	r1, #16
 801f9a6:	404a      	eors	r2, r1
 801f9a8:	801a      	strh	r2, [r3, #0]
 801f9aa:	183b      	adds	r3, r7, r0
 801f9ac:	183a      	adds	r2, r7, r0
 801f9ae:	8812      	ldrh	r2, [r2, #0]
 801f9b0:	2120      	movs	r1, #32
 801f9b2:	404a      	eors	r2, r1
 801f9b4:	801a      	strh	r2, [r3, #0]
 801f9b6:	687a      	ldr	r2, [r7, #4]
 801f9b8:	683b      	ldr	r3, [r7, #0]
 801f9ba:	781b      	ldrb	r3, [r3, #0]
 801f9bc:	009b      	lsls	r3, r3, #2
 801f9be:	18d3      	adds	r3, r2, r3
 801f9c0:	183a      	adds	r2, r7, r0
 801f9c2:	8812      	ldrh	r2, [r2, #0]
 801f9c4:	4913      	ldr	r1, [pc, #76]	@ (801fa14 <USB_EPStartXfer+0xab4>)
 801f9c6:	430a      	orrs	r2, r1
 801f9c8:	b292      	uxth	r2, r2
 801f9ca:	801a      	strh	r2, [r3, #0]
 801f9cc:	f000 fbf4 	bl	80201b8 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801f9d0:	683b      	ldr	r3, [r7, #0]
 801f9d2:	7b1b      	ldrb	r3, [r3, #12]
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	d000      	beq.n	801f9da <USB_EPStartXfer+0xa7a>
 801f9d8:	e0a9      	b.n	801fb2e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801f9da:	683b      	ldr	r3, [r7, #0]
 801f9dc:	699a      	ldr	r2, [r3, #24]
 801f9de:	683b      	ldr	r3, [r7, #0]
 801f9e0:	691b      	ldr	r3, [r3, #16]
 801f9e2:	429a      	cmp	r2, r3
 801f9e4:	d918      	bls.n	801fa18 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801f9e6:	683b      	ldr	r3, [r7, #0]
 801f9e8:	691b      	ldr	r3, [r3, #16]
 801f9ea:	1d7a      	adds	r2, r7, #5
 801f9ec:	32ff      	adds	r2, #255	@ 0xff
 801f9ee:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801f9f0:	683b      	ldr	r3, [r7, #0]
 801f9f2:	699a      	ldr	r2, [r3, #24]
 801f9f4:	1d7b      	adds	r3, r7, #5
 801f9f6:	33ff      	adds	r3, #255	@ 0xff
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	1ad2      	subs	r2, r2, r3
 801f9fc:	683b      	ldr	r3, [r7, #0]
 801f9fe:	619a      	str	r2, [r3, #24]
 801fa00:	e012      	b.n	801fa28 <USB_EPStartXfer+0xac8>
 801fa02:	46c0      	nop			@ (mov r8, r8)
 801fa04:	00000406 	.word	0x00000406
 801fa08:	ffff8000 	.word	0xffff8000
 801fa0c:	00000402 	.word	0x00000402
 801fa10:	ffff8fbf 	.word	0xffff8fbf
 801fa14:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801fa18:	683b      	ldr	r3, [r7, #0]
 801fa1a:	699b      	ldr	r3, [r3, #24]
 801fa1c:	1d7a      	adds	r2, r7, #5
 801fa1e:	32ff      	adds	r2, #255	@ 0xff
 801fa20:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801fa22:	683b      	ldr	r3, [r7, #0]
 801fa24:	2200      	movs	r2, #0
 801fa26:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	2190      	movs	r1, #144	@ 0x90
 801fa2c:	187a      	adds	r2, r7, r1
 801fa2e:	6013      	str	r3, [r2, #0]
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	2250      	movs	r2, #80	@ 0x50
 801fa34:	5a9b      	ldrh	r3, [r3, r2]
 801fa36:	b29b      	uxth	r3, r3
 801fa38:	001a      	movs	r2, r3
 801fa3a:	187b      	adds	r3, r7, r1
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	189b      	adds	r3, r3, r2
 801fa40:	187a      	adds	r2, r7, r1
 801fa42:	6013      	str	r3, [r2, #0]
 801fa44:	683b      	ldr	r3, [r7, #0]
 801fa46:	781b      	ldrb	r3, [r3, #0]
 801fa48:	00da      	lsls	r2, r3, #3
 801fa4a:	187b      	adds	r3, r7, r1
 801fa4c:	681b      	ldr	r3, [r3, #0]
 801fa4e:	18d3      	adds	r3, r2, r3
 801fa50:	4acf      	ldr	r2, [pc, #828]	@ (801fd90 <USB_EPStartXfer+0xe30>)
 801fa52:	4694      	mov	ip, r2
 801fa54:	4463      	add	r3, ip
 801fa56:	218c      	movs	r1, #140	@ 0x8c
 801fa58:	187a      	adds	r2, r7, r1
 801fa5a:	6013      	str	r3, [r2, #0]
 801fa5c:	187b      	adds	r3, r7, r1
 801fa5e:	681b      	ldr	r3, [r3, #0]
 801fa60:	881b      	ldrh	r3, [r3, #0]
 801fa62:	b29b      	uxth	r3, r3
 801fa64:	059b      	lsls	r3, r3, #22
 801fa66:	0d9b      	lsrs	r3, r3, #22
 801fa68:	b29a      	uxth	r2, r3
 801fa6a:	187b      	adds	r3, r7, r1
 801fa6c:	681b      	ldr	r3, [r3, #0]
 801fa6e:	801a      	strh	r2, [r3, #0]
 801fa70:	1d7b      	adds	r3, r7, #5
 801fa72:	33ff      	adds	r3, #255	@ 0xff
 801fa74:	681b      	ldr	r3, [r3, #0]
 801fa76:	2b3e      	cmp	r3, #62	@ 0x3e
 801fa78:	d925      	bls.n	801fac6 <USB_EPStartXfer+0xb66>
 801fa7a:	1d7b      	adds	r3, r7, #5
 801fa7c:	33ff      	adds	r3, #255	@ 0xff
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	095b      	lsrs	r3, r3, #5
 801fa82:	21e8      	movs	r1, #232	@ 0xe8
 801fa84:	187a      	adds	r2, r7, r1
 801fa86:	6013      	str	r3, [r2, #0]
 801fa88:	1d7b      	adds	r3, r7, #5
 801fa8a:	33ff      	adds	r3, #255	@ 0xff
 801fa8c:	681b      	ldr	r3, [r3, #0]
 801fa8e:	221f      	movs	r2, #31
 801fa90:	4013      	ands	r3, r2
 801fa92:	d104      	bne.n	801fa9e <USB_EPStartXfer+0xb3e>
 801fa94:	187b      	adds	r3, r7, r1
 801fa96:	681b      	ldr	r3, [r3, #0]
 801fa98:	3b01      	subs	r3, #1
 801fa9a:	187a      	adds	r2, r7, r1
 801fa9c:	6013      	str	r3, [r2, #0]
 801fa9e:	218c      	movs	r1, #140	@ 0x8c
 801faa0:	187b      	adds	r3, r7, r1
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	881b      	ldrh	r3, [r3, #0]
 801faa6:	b29a      	uxth	r2, r3
 801faa8:	23e8      	movs	r3, #232	@ 0xe8
 801faaa:	18fb      	adds	r3, r7, r3
 801faac:	681b      	ldr	r3, [r3, #0]
 801faae:	b29b      	uxth	r3, r3
 801fab0:	029b      	lsls	r3, r3, #10
 801fab2:	b29b      	uxth	r3, r3
 801fab4:	4313      	orrs	r3, r2
 801fab6:	b29b      	uxth	r3, r3
 801fab8:	4ab6      	ldr	r2, [pc, #728]	@ (801fd94 <USB_EPStartXfer+0xe34>)
 801faba:	4313      	orrs	r3, r2
 801fabc:	b29a      	uxth	r2, r3
 801fabe:	187b      	adds	r3, r7, r1
 801fac0:	681b      	ldr	r3, [r3, #0]
 801fac2:	801a      	strh	r2, [r3, #0]
 801fac4:	e353      	b.n	802016e <USB_EPStartXfer+0x120e>
 801fac6:	1d7b      	adds	r3, r7, #5
 801fac8:	33ff      	adds	r3, #255	@ 0xff
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	2b00      	cmp	r3, #0
 801face:	d10b      	bne.n	801fae8 <USB_EPStartXfer+0xb88>
 801fad0:	218c      	movs	r1, #140	@ 0x8c
 801fad2:	187b      	adds	r3, r7, r1
 801fad4:	681b      	ldr	r3, [r3, #0]
 801fad6:	881b      	ldrh	r3, [r3, #0]
 801fad8:	b29b      	uxth	r3, r3
 801fada:	4aae      	ldr	r2, [pc, #696]	@ (801fd94 <USB_EPStartXfer+0xe34>)
 801fadc:	4313      	orrs	r3, r2
 801fade:	b29a      	uxth	r2, r3
 801fae0:	187b      	adds	r3, r7, r1
 801fae2:	681b      	ldr	r3, [r3, #0]
 801fae4:	801a      	strh	r2, [r3, #0]
 801fae6:	e342      	b.n	802016e <USB_EPStartXfer+0x120e>
 801fae8:	1d7b      	adds	r3, r7, #5
 801faea:	33ff      	adds	r3, #255	@ 0xff
 801faec:	681b      	ldr	r3, [r3, #0]
 801faee:	085b      	lsrs	r3, r3, #1
 801faf0:	21e8      	movs	r1, #232	@ 0xe8
 801faf2:	187a      	adds	r2, r7, r1
 801faf4:	6013      	str	r3, [r2, #0]
 801faf6:	1d7b      	adds	r3, r7, #5
 801faf8:	33ff      	adds	r3, #255	@ 0xff
 801fafa:	681b      	ldr	r3, [r3, #0]
 801fafc:	2201      	movs	r2, #1
 801fafe:	4013      	ands	r3, r2
 801fb00:	d004      	beq.n	801fb0c <USB_EPStartXfer+0xbac>
 801fb02:	187b      	adds	r3, r7, r1
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	3301      	adds	r3, #1
 801fb08:	187a      	adds	r2, r7, r1
 801fb0a:	6013      	str	r3, [r2, #0]
 801fb0c:	218c      	movs	r1, #140	@ 0x8c
 801fb0e:	187b      	adds	r3, r7, r1
 801fb10:	681b      	ldr	r3, [r3, #0]
 801fb12:	881b      	ldrh	r3, [r3, #0]
 801fb14:	b29a      	uxth	r2, r3
 801fb16:	23e8      	movs	r3, #232	@ 0xe8
 801fb18:	18fb      	adds	r3, r7, r3
 801fb1a:	681b      	ldr	r3, [r3, #0]
 801fb1c:	b29b      	uxth	r3, r3
 801fb1e:	029b      	lsls	r3, r3, #10
 801fb20:	b29b      	uxth	r3, r3
 801fb22:	4313      	orrs	r3, r2
 801fb24:	b29a      	uxth	r2, r3
 801fb26:	187b      	adds	r3, r7, r1
 801fb28:	681b      	ldr	r3, [r3, #0]
 801fb2a:	801a      	strh	r2, [r3, #0]
 801fb2c:	e31f      	b.n	802016e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801fb2e:	683b      	ldr	r3, [r7, #0]
 801fb30:	78db      	ldrb	r3, [r3, #3]
 801fb32:	2b02      	cmp	r3, #2
 801fb34:	d000      	beq.n	801fb38 <USB_EPStartXfer+0xbd8>
 801fb36:	e191      	b.n	801fe5c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801fb38:	683b      	ldr	r3, [r7, #0]
 801fb3a:	785b      	ldrb	r3, [r3, #1]
 801fb3c:	2b00      	cmp	r3, #0
 801fb3e:	d000      	beq.n	801fb42 <USB_EPStartXfer+0xbe2>
 801fb40:	e07c      	b.n	801fc3c <USB_EPStartXfer+0xcdc>
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	21ac      	movs	r1, #172	@ 0xac
 801fb46:	187a      	adds	r2, r7, r1
 801fb48:	6013      	str	r3, [r2, #0]
 801fb4a:	687b      	ldr	r3, [r7, #4]
 801fb4c:	2250      	movs	r2, #80	@ 0x50
 801fb4e:	5a9b      	ldrh	r3, [r3, r2]
 801fb50:	b29b      	uxth	r3, r3
 801fb52:	001a      	movs	r2, r3
 801fb54:	187b      	adds	r3, r7, r1
 801fb56:	681b      	ldr	r3, [r3, #0]
 801fb58:	189b      	adds	r3, r3, r2
 801fb5a:	187a      	adds	r2, r7, r1
 801fb5c:	6013      	str	r3, [r2, #0]
 801fb5e:	683b      	ldr	r3, [r7, #0]
 801fb60:	781b      	ldrb	r3, [r3, #0]
 801fb62:	00da      	lsls	r2, r3, #3
 801fb64:	187b      	adds	r3, r7, r1
 801fb66:	681b      	ldr	r3, [r3, #0]
 801fb68:	18d3      	adds	r3, r2, r3
 801fb6a:	4a8b      	ldr	r2, [pc, #556]	@ (801fd98 <USB_EPStartXfer+0xe38>)
 801fb6c:	4694      	mov	ip, r2
 801fb6e:	4463      	add	r3, ip
 801fb70:	21a8      	movs	r1, #168	@ 0xa8
 801fb72:	187a      	adds	r2, r7, r1
 801fb74:	6013      	str	r3, [r2, #0]
 801fb76:	187b      	adds	r3, r7, r1
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	881b      	ldrh	r3, [r3, #0]
 801fb7c:	b29b      	uxth	r3, r3
 801fb7e:	059b      	lsls	r3, r3, #22
 801fb80:	0d9b      	lsrs	r3, r3, #22
 801fb82:	b29a      	uxth	r2, r3
 801fb84:	187b      	adds	r3, r7, r1
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	801a      	strh	r2, [r3, #0]
 801fb8a:	683b      	ldr	r3, [r7, #0]
 801fb8c:	691b      	ldr	r3, [r3, #16]
 801fb8e:	2b3e      	cmp	r3, #62	@ 0x3e
 801fb90:	d923      	bls.n	801fbda <USB_EPStartXfer+0xc7a>
 801fb92:	683b      	ldr	r3, [r7, #0]
 801fb94:	691b      	ldr	r3, [r3, #16]
 801fb96:	095b      	lsrs	r3, r3, #5
 801fb98:	21e4      	movs	r1, #228	@ 0xe4
 801fb9a:	187a      	adds	r2, r7, r1
 801fb9c:	6013      	str	r3, [r2, #0]
 801fb9e:	683b      	ldr	r3, [r7, #0]
 801fba0:	691b      	ldr	r3, [r3, #16]
 801fba2:	221f      	movs	r2, #31
 801fba4:	4013      	ands	r3, r2
 801fba6:	d104      	bne.n	801fbb2 <USB_EPStartXfer+0xc52>
 801fba8:	187b      	adds	r3, r7, r1
 801fbaa:	681b      	ldr	r3, [r3, #0]
 801fbac:	3b01      	subs	r3, #1
 801fbae:	187a      	adds	r2, r7, r1
 801fbb0:	6013      	str	r3, [r2, #0]
 801fbb2:	21a8      	movs	r1, #168	@ 0xa8
 801fbb4:	187b      	adds	r3, r7, r1
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	881b      	ldrh	r3, [r3, #0]
 801fbba:	b29a      	uxth	r2, r3
 801fbbc:	23e4      	movs	r3, #228	@ 0xe4
 801fbbe:	18fb      	adds	r3, r7, r3
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	b29b      	uxth	r3, r3
 801fbc4:	029b      	lsls	r3, r3, #10
 801fbc6:	b29b      	uxth	r3, r3
 801fbc8:	4313      	orrs	r3, r2
 801fbca:	b29b      	uxth	r3, r3
 801fbcc:	4a71      	ldr	r2, [pc, #452]	@ (801fd94 <USB_EPStartXfer+0xe34>)
 801fbce:	4313      	orrs	r3, r2
 801fbd0:	b29a      	uxth	r2, r3
 801fbd2:	187b      	adds	r3, r7, r1
 801fbd4:	681b      	ldr	r3, [r3, #0]
 801fbd6:	801a      	strh	r2, [r3, #0]
 801fbd8:	e054      	b.n	801fc84 <USB_EPStartXfer+0xd24>
 801fbda:	683b      	ldr	r3, [r7, #0]
 801fbdc:	691b      	ldr	r3, [r3, #16]
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d10b      	bne.n	801fbfa <USB_EPStartXfer+0xc9a>
 801fbe2:	21a8      	movs	r1, #168	@ 0xa8
 801fbe4:	187b      	adds	r3, r7, r1
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	881b      	ldrh	r3, [r3, #0]
 801fbea:	b29b      	uxth	r3, r3
 801fbec:	4a69      	ldr	r2, [pc, #420]	@ (801fd94 <USB_EPStartXfer+0xe34>)
 801fbee:	4313      	orrs	r3, r2
 801fbf0:	b29a      	uxth	r2, r3
 801fbf2:	187b      	adds	r3, r7, r1
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	801a      	strh	r2, [r3, #0]
 801fbf8:	e044      	b.n	801fc84 <USB_EPStartXfer+0xd24>
 801fbfa:	683b      	ldr	r3, [r7, #0]
 801fbfc:	691b      	ldr	r3, [r3, #16]
 801fbfe:	085b      	lsrs	r3, r3, #1
 801fc00:	21e4      	movs	r1, #228	@ 0xe4
 801fc02:	187a      	adds	r2, r7, r1
 801fc04:	6013      	str	r3, [r2, #0]
 801fc06:	683b      	ldr	r3, [r7, #0]
 801fc08:	691b      	ldr	r3, [r3, #16]
 801fc0a:	2201      	movs	r2, #1
 801fc0c:	4013      	ands	r3, r2
 801fc0e:	d004      	beq.n	801fc1a <USB_EPStartXfer+0xcba>
 801fc10:	187b      	adds	r3, r7, r1
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	3301      	adds	r3, #1
 801fc16:	187a      	adds	r2, r7, r1
 801fc18:	6013      	str	r3, [r2, #0]
 801fc1a:	21a8      	movs	r1, #168	@ 0xa8
 801fc1c:	187b      	adds	r3, r7, r1
 801fc1e:	681b      	ldr	r3, [r3, #0]
 801fc20:	881b      	ldrh	r3, [r3, #0]
 801fc22:	b29a      	uxth	r2, r3
 801fc24:	23e4      	movs	r3, #228	@ 0xe4
 801fc26:	18fb      	adds	r3, r7, r3
 801fc28:	681b      	ldr	r3, [r3, #0]
 801fc2a:	b29b      	uxth	r3, r3
 801fc2c:	029b      	lsls	r3, r3, #10
 801fc2e:	b29b      	uxth	r3, r3
 801fc30:	4313      	orrs	r3, r2
 801fc32:	b29a      	uxth	r2, r3
 801fc34:	187b      	adds	r3, r7, r1
 801fc36:	681b      	ldr	r3, [r3, #0]
 801fc38:	801a      	strh	r2, [r3, #0]
 801fc3a:	e023      	b.n	801fc84 <USB_EPStartXfer+0xd24>
 801fc3c:	683b      	ldr	r3, [r7, #0]
 801fc3e:	785b      	ldrb	r3, [r3, #1]
 801fc40:	2b01      	cmp	r3, #1
 801fc42:	d11f      	bne.n	801fc84 <USB_EPStartXfer+0xd24>
 801fc44:	687b      	ldr	r3, [r7, #4]
 801fc46:	21b4      	movs	r1, #180	@ 0xb4
 801fc48:	187a      	adds	r2, r7, r1
 801fc4a:	6013      	str	r3, [r2, #0]
 801fc4c:	687b      	ldr	r3, [r7, #4]
 801fc4e:	2250      	movs	r2, #80	@ 0x50
 801fc50:	5a9b      	ldrh	r3, [r3, r2]
 801fc52:	b29b      	uxth	r3, r3
 801fc54:	001a      	movs	r2, r3
 801fc56:	187b      	adds	r3, r7, r1
 801fc58:	681b      	ldr	r3, [r3, #0]
 801fc5a:	189b      	adds	r3, r3, r2
 801fc5c:	187a      	adds	r2, r7, r1
 801fc5e:	6013      	str	r3, [r2, #0]
 801fc60:	683b      	ldr	r3, [r7, #0]
 801fc62:	781b      	ldrb	r3, [r3, #0]
 801fc64:	00da      	lsls	r2, r3, #3
 801fc66:	187b      	adds	r3, r7, r1
 801fc68:	681b      	ldr	r3, [r3, #0]
 801fc6a:	18d3      	adds	r3, r2, r3
 801fc6c:	4a4a      	ldr	r2, [pc, #296]	@ (801fd98 <USB_EPStartXfer+0xe38>)
 801fc6e:	4694      	mov	ip, r2
 801fc70:	4463      	add	r3, ip
 801fc72:	21b0      	movs	r1, #176	@ 0xb0
 801fc74:	187a      	adds	r2, r7, r1
 801fc76:	6013      	str	r3, [r2, #0]
 801fc78:	683b      	ldr	r3, [r7, #0]
 801fc7a:	691b      	ldr	r3, [r3, #16]
 801fc7c:	b29a      	uxth	r2, r3
 801fc7e:	187b      	adds	r3, r7, r1
 801fc80:	681b      	ldr	r3, [r3, #0]
 801fc82:	801a      	strh	r2, [r3, #0]
 801fc84:	687b      	ldr	r3, [r7, #4]
 801fc86:	22a4      	movs	r2, #164	@ 0xa4
 801fc88:	18ba      	adds	r2, r7, r2
 801fc8a:	6013      	str	r3, [r2, #0]
 801fc8c:	683b      	ldr	r3, [r7, #0]
 801fc8e:	785b      	ldrb	r3, [r3, #1]
 801fc90:	2b00      	cmp	r3, #0
 801fc92:	d000      	beq.n	801fc96 <USB_EPStartXfer+0xd36>
 801fc94:	e082      	b.n	801fd9c <USB_EPStartXfer+0xe3c>
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	219c      	movs	r1, #156	@ 0x9c
 801fc9a:	187a      	adds	r2, r7, r1
 801fc9c:	6013      	str	r3, [r2, #0]
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	2250      	movs	r2, #80	@ 0x50
 801fca2:	5a9b      	ldrh	r3, [r3, r2]
 801fca4:	b29b      	uxth	r3, r3
 801fca6:	001a      	movs	r2, r3
 801fca8:	187b      	adds	r3, r7, r1
 801fcaa:	681b      	ldr	r3, [r3, #0]
 801fcac:	189b      	adds	r3, r3, r2
 801fcae:	187a      	adds	r2, r7, r1
 801fcb0:	6013      	str	r3, [r2, #0]
 801fcb2:	683b      	ldr	r3, [r7, #0]
 801fcb4:	781b      	ldrb	r3, [r3, #0]
 801fcb6:	00da      	lsls	r2, r3, #3
 801fcb8:	187b      	adds	r3, r7, r1
 801fcba:	681b      	ldr	r3, [r3, #0]
 801fcbc:	18d3      	adds	r3, r2, r3
 801fcbe:	4a34      	ldr	r2, [pc, #208]	@ (801fd90 <USB_EPStartXfer+0xe30>)
 801fcc0:	4694      	mov	ip, r2
 801fcc2:	4463      	add	r3, ip
 801fcc4:	2198      	movs	r1, #152	@ 0x98
 801fcc6:	187a      	adds	r2, r7, r1
 801fcc8:	6013      	str	r3, [r2, #0]
 801fcca:	187b      	adds	r3, r7, r1
 801fccc:	681b      	ldr	r3, [r3, #0]
 801fcce:	881b      	ldrh	r3, [r3, #0]
 801fcd0:	b29b      	uxth	r3, r3
 801fcd2:	059b      	lsls	r3, r3, #22
 801fcd4:	0d9b      	lsrs	r3, r3, #22
 801fcd6:	b29a      	uxth	r2, r3
 801fcd8:	187b      	adds	r3, r7, r1
 801fcda:	681b      	ldr	r3, [r3, #0]
 801fcdc:	801a      	strh	r2, [r3, #0]
 801fcde:	683b      	ldr	r3, [r7, #0]
 801fce0:	691b      	ldr	r3, [r3, #16]
 801fce2:	2b3e      	cmp	r3, #62	@ 0x3e
 801fce4:	d923      	bls.n	801fd2e <USB_EPStartXfer+0xdce>
 801fce6:	683b      	ldr	r3, [r7, #0]
 801fce8:	691b      	ldr	r3, [r3, #16]
 801fcea:	095b      	lsrs	r3, r3, #5
 801fcec:	21e0      	movs	r1, #224	@ 0xe0
 801fcee:	187a      	adds	r2, r7, r1
 801fcf0:	6013      	str	r3, [r2, #0]
 801fcf2:	683b      	ldr	r3, [r7, #0]
 801fcf4:	691b      	ldr	r3, [r3, #16]
 801fcf6:	221f      	movs	r2, #31
 801fcf8:	4013      	ands	r3, r2
 801fcfa:	d104      	bne.n	801fd06 <USB_EPStartXfer+0xda6>
 801fcfc:	187b      	adds	r3, r7, r1
 801fcfe:	681b      	ldr	r3, [r3, #0]
 801fd00:	3b01      	subs	r3, #1
 801fd02:	187a      	adds	r2, r7, r1
 801fd04:	6013      	str	r3, [r2, #0]
 801fd06:	2198      	movs	r1, #152	@ 0x98
 801fd08:	187b      	adds	r3, r7, r1
 801fd0a:	681b      	ldr	r3, [r3, #0]
 801fd0c:	881b      	ldrh	r3, [r3, #0]
 801fd0e:	b29a      	uxth	r2, r3
 801fd10:	23e0      	movs	r3, #224	@ 0xe0
 801fd12:	18fb      	adds	r3, r7, r3
 801fd14:	681b      	ldr	r3, [r3, #0]
 801fd16:	b29b      	uxth	r3, r3
 801fd18:	029b      	lsls	r3, r3, #10
 801fd1a:	b29b      	uxth	r3, r3
 801fd1c:	4313      	orrs	r3, r2
 801fd1e:	b29b      	uxth	r3, r3
 801fd20:	4a1c      	ldr	r2, [pc, #112]	@ (801fd94 <USB_EPStartXfer+0xe34>)
 801fd22:	4313      	orrs	r3, r2
 801fd24:	b29a      	uxth	r2, r3
 801fd26:	187b      	adds	r3, r7, r1
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	801a      	strh	r2, [r3, #0]
 801fd2c:	e057      	b.n	801fdde <USB_EPStartXfer+0xe7e>
 801fd2e:	683b      	ldr	r3, [r7, #0]
 801fd30:	691b      	ldr	r3, [r3, #16]
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	d10b      	bne.n	801fd4e <USB_EPStartXfer+0xdee>
 801fd36:	2198      	movs	r1, #152	@ 0x98
 801fd38:	187b      	adds	r3, r7, r1
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	881b      	ldrh	r3, [r3, #0]
 801fd3e:	b29b      	uxth	r3, r3
 801fd40:	4a14      	ldr	r2, [pc, #80]	@ (801fd94 <USB_EPStartXfer+0xe34>)
 801fd42:	4313      	orrs	r3, r2
 801fd44:	b29a      	uxth	r2, r3
 801fd46:	187b      	adds	r3, r7, r1
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	801a      	strh	r2, [r3, #0]
 801fd4c:	e047      	b.n	801fdde <USB_EPStartXfer+0xe7e>
 801fd4e:	683b      	ldr	r3, [r7, #0]
 801fd50:	691b      	ldr	r3, [r3, #16]
 801fd52:	085b      	lsrs	r3, r3, #1
 801fd54:	21e0      	movs	r1, #224	@ 0xe0
 801fd56:	187a      	adds	r2, r7, r1
 801fd58:	6013      	str	r3, [r2, #0]
 801fd5a:	683b      	ldr	r3, [r7, #0]
 801fd5c:	691b      	ldr	r3, [r3, #16]
 801fd5e:	2201      	movs	r2, #1
 801fd60:	4013      	ands	r3, r2
 801fd62:	d004      	beq.n	801fd6e <USB_EPStartXfer+0xe0e>
 801fd64:	187b      	adds	r3, r7, r1
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	3301      	adds	r3, #1
 801fd6a:	187a      	adds	r2, r7, r1
 801fd6c:	6013      	str	r3, [r2, #0]
 801fd6e:	2198      	movs	r1, #152	@ 0x98
 801fd70:	187b      	adds	r3, r7, r1
 801fd72:	681b      	ldr	r3, [r3, #0]
 801fd74:	881b      	ldrh	r3, [r3, #0]
 801fd76:	b29a      	uxth	r2, r3
 801fd78:	23e0      	movs	r3, #224	@ 0xe0
 801fd7a:	18fb      	adds	r3, r7, r3
 801fd7c:	681b      	ldr	r3, [r3, #0]
 801fd7e:	b29b      	uxth	r3, r3
 801fd80:	029b      	lsls	r3, r3, #10
 801fd82:	b29b      	uxth	r3, r3
 801fd84:	4313      	orrs	r3, r2
 801fd86:	b29a      	uxth	r2, r3
 801fd88:	187b      	adds	r3, r7, r1
 801fd8a:	681b      	ldr	r3, [r3, #0]
 801fd8c:	801a      	strh	r2, [r3, #0]
 801fd8e:	e026      	b.n	801fdde <USB_EPStartXfer+0xe7e>
 801fd90:	00000406 	.word	0x00000406
 801fd94:	ffff8000 	.word	0xffff8000
 801fd98:	00000402 	.word	0x00000402
 801fd9c:	683b      	ldr	r3, [r7, #0]
 801fd9e:	785b      	ldrb	r3, [r3, #1]
 801fda0:	2b01      	cmp	r3, #1
 801fda2:	d11c      	bne.n	801fdde <USB_EPStartXfer+0xe7e>
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	2250      	movs	r2, #80	@ 0x50
 801fda8:	5a9b      	ldrh	r3, [r3, r2]
 801fdaa:	b29b      	uxth	r3, r3
 801fdac:	001a      	movs	r2, r3
 801fdae:	21a4      	movs	r1, #164	@ 0xa4
 801fdb0:	187b      	adds	r3, r7, r1
 801fdb2:	681b      	ldr	r3, [r3, #0]
 801fdb4:	189b      	adds	r3, r3, r2
 801fdb6:	187a      	adds	r2, r7, r1
 801fdb8:	6013      	str	r3, [r2, #0]
 801fdba:	683b      	ldr	r3, [r7, #0]
 801fdbc:	781b      	ldrb	r3, [r3, #0]
 801fdbe:	00da      	lsls	r2, r3, #3
 801fdc0:	187b      	adds	r3, r7, r1
 801fdc2:	681b      	ldr	r3, [r3, #0]
 801fdc4:	18d3      	adds	r3, r2, r3
 801fdc6:	4ad2      	ldr	r2, [pc, #840]	@ (8020110 <USB_EPStartXfer+0x11b0>)
 801fdc8:	4694      	mov	ip, r2
 801fdca:	4463      	add	r3, ip
 801fdcc:	21a0      	movs	r1, #160	@ 0xa0
 801fdce:	187a      	adds	r2, r7, r1
 801fdd0:	6013      	str	r3, [r2, #0]
 801fdd2:	683b      	ldr	r3, [r7, #0]
 801fdd4:	691b      	ldr	r3, [r3, #16]
 801fdd6:	b29a      	uxth	r2, r3
 801fdd8:	187b      	adds	r3, r7, r1
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801fdde:	683b      	ldr	r3, [r7, #0]
 801fde0:	69db      	ldr	r3, [r3, #28]
 801fde2:	2b00      	cmp	r3, #0
 801fde4:	d100      	bne.n	801fde8 <USB_EPStartXfer+0xe88>
 801fde6:	e1c2      	b.n	802016e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801fde8:	687a      	ldr	r2, [r7, #4]
 801fdea:	683b      	ldr	r3, [r7, #0]
 801fdec:	781b      	ldrb	r3, [r3, #0]
 801fdee:	009b      	lsls	r3, r3, #2
 801fdf0:	18d2      	adds	r2, r2, r3
 801fdf2:	2196      	movs	r1, #150	@ 0x96
 801fdf4:	187b      	adds	r3, r7, r1
 801fdf6:	8812      	ldrh	r2, [r2, #0]
 801fdf8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801fdfa:	187b      	adds	r3, r7, r1
 801fdfc:	881a      	ldrh	r2, [r3, #0]
 801fdfe:	2380      	movs	r3, #128	@ 0x80
 801fe00:	01db      	lsls	r3, r3, #7
 801fe02:	4013      	ands	r3, r2
 801fe04:	d004      	beq.n	801fe10 <USB_EPStartXfer+0xeb0>
 801fe06:	187b      	adds	r3, r7, r1
 801fe08:	881b      	ldrh	r3, [r3, #0]
 801fe0a:	2240      	movs	r2, #64	@ 0x40
 801fe0c:	4013      	ands	r3, r2
 801fe0e:	d10d      	bne.n	801fe2c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801fe10:	2196      	movs	r1, #150	@ 0x96
 801fe12:	187b      	adds	r3, r7, r1
 801fe14:	881a      	ldrh	r2, [r3, #0]
 801fe16:	2380      	movs	r3, #128	@ 0x80
 801fe18:	01db      	lsls	r3, r3, #7
 801fe1a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801fe1c:	d000      	beq.n	801fe20 <USB_EPStartXfer+0xec0>
 801fe1e:	e1a6      	b.n	802016e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801fe20:	187b      	adds	r3, r7, r1
 801fe22:	881b      	ldrh	r3, [r3, #0]
 801fe24:	2240      	movs	r2, #64	@ 0x40
 801fe26:	4013      	ands	r3, r2
 801fe28:	d000      	beq.n	801fe2c <USB_EPStartXfer+0xecc>
 801fe2a:	e1a0      	b.n	802016e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801fe2c:	687a      	ldr	r2, [r7, #4]
 801fe2e:	683b      	ldr	r3, [r7, #0]
 801fe30:	781b      	ldrb	r3, [r3, #0]
 801fe32:	009b      	lsls	r3, r3, #2
 801fe34:	18d3      	adds	r3, r2, r3
 801fe36:	881b      	ldrh	r3, [r3, #0]
 801fe38:	b29a      	uxth	r2, r3
 801fe3a:	2094      	movs	r0, #148	@ 0x94
 801fe3c:	183b      	adds	r3, r7, r0
 801fe3e:	49b5      	ldr	r1, [pc, #724]	@ (8020114 <USB_EPStartXfer+0x11b4>)
 801fe40:	400a      	ands	r2, r1
 801fe42:	801a      	strh	r2, [r3, #0]
 801fe44:	687a      	ldr	r2, [r7, #4]
 801fe46:	683b      	ldr	r3, [r7, #0]
 801fe48:	781b      	ldrb	r3, [r3, #0]
 801fe4a:	009b      	lsls	r3, r3, #2
 801fe4c:	18d3      	adds	r3, r2, r3
 801fe4e:	183a      	adds	r2, r7, r0
 801fe50:	8812      	ldrh	r2, [r2, #0]
 801fe52:	49b1      	ldr	r1, [pc, #708]	@ (8020118 <USB_EPStartXfer+0x11b8>)
 801fe54:	430a      	orrs	r2, r1
 801fe56:	b292      	uxth	r2, r2
 801fe58:	801a      	strh	r2, [r3, #0]
 801fe5a:	e188      	b.n	802016e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801fe5c:	683b      	ldr	r3, [r7, #0]
 801fe5e:	78db      	ldrb	r3, [r3, #3]
 801fe60:	2b01      	cmp	r3, #1
 801fe62:	d000      	beq.n	801fe66 <USB_EPStartXfer+0xf06>
 801fe64:	e181      	b.n	802016a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801fe66:	683b      	ldr	r3, [r7, #0]
 801fe68:	699a      	ldr	r2, [r3, #24]
 801fe6a:	683b      	ldr	r3, [r7, #0]
 801fe6c:	691b      	ldr	r3, [r3, #16]
 801fe6e:	429a      	cmp	r2, r3
 801fe70:	d90d      	bls.n	801fe8e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801fe72:	683b      	ldr	r3, [r7, #0]
 801fe74:	691b      	ldr	r3, [r3, #16]
 801fe76:	1d7a      	adds	r2, r7, #5
 801fe78:	32ff      	adds	r2, #255	@ 0xff
 801fe7a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801fe7c:	683b      	ldr	r3, [r7, #0]
 801fe7e:	699a      	ldr	r2, [r3, #24]
 801fe80:	1d7b      	adds	r3, r7, #5
 801fe82:	33ff      	adds	r3, #255	@ 0xff
 801fe84:	681b      	ldr	r3, [r3, #0]
 801fe86:	1ad2      	subs	r2, r2, r3
 801fe88:	683b      	ldr	r3, [r7, #0]
 801fe8a:	619a      	str	r2, [r3, #24]
 801fe8c:	e007      	b.n	801fe9e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801fe8e:	683b      	ldr	r3, [r7, #0]
 801fe90:	699b      	ldr	r3, [r3, #24]
 801fe92:	1d7a      	adds	r2, r7, #5
 801fe94:	32ff      	adds	r2, #255	@ 0xff
 801fe96:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801fe98:	683b      	ldr	r3, [r7, #0]
 801fe9a:	2200      	movs	r2, #0
 801fe9c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801fe9e:	683b      	ldr	r3, [r7, #0]
 801fea0:	785b      	ldrb	r3, [r3, #1]
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	d000      	beq.n	801fea8 <USB_EPStartXfer+0xf48>
 801fea6:	e082      	b.n	801ffae <USB_EPStartXfer+0x104e>
 801fea8:	687b      	ldr	r3, [r7, #4]
 801feaa:	21cc      	movs	r1, #204	@ 0xcc
 801feac:	187a      	adds	r2, r7, r1
 801feae:	6013      	str	r3, [r2, #0]
 801feb0:	687b      	ldr	r3, [r7, #4]
 801feb2:	2250      	movs	r2, #80	@ 0x50
 801feb4:	5a9b      	ldrh	r3, [r3, r2]
 801feb6:	b29b      	uxth	r3, r3
 801feb8:	001a      	movs	r2, r3
 801feba:	187b      	adds	r3, r7, r1
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	189b      	adds	r3, r3, r2
 801fec0:	187a      	adds	r2, r7, r1
 801fec2:	6013      	str	r3, [r2, #0]
 801fec4:	683b      	ldr	r3, [r7, #0]
 801fec6:	781b      	ldrb	r3, [r3, #0]
 801fec8:	00da      	lsls	r2, r3, #3
 801feca:	187b      	adds	r3, r7, r1
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	18d3      	adds	r3, r2, r3
 801fed0:	4a92      	ldr	r2, [pc, #584]	@ (802011c <USB_EPStartXfer+0x11bc>)
 801fed2:	4694      	mov	ip, r2
 801fed4:	4463      	add	r3, ip
 801fed6:	21c8      	movs	r1, #200	@ 0xc8
 801fed8:	187a      	adds	r2, r7, r1
 801feda:	6013      	str	r3, [r2, #0]
 801fedc:	187b      	adds	r3, r7, r1
 801fede:	681b      	ldr	r3, [r3, #0]
 801fee0:	881b      	ldrh	r3, [r3, #0]
 801fee2:	b29b      	uxth	r3, r3
 801fee4:	059b      	lsls	r3, r3, #22
 801fee6:	0d9b      	lsrs	r3, r3, #22
 801fee8:	b29a      	uxth	r2, r3
 801feea:	187b      	adds	r3, r7, r1
 801feec:	681b      	ldr	r3, [r3, #0]
 801feee:	801a      	strh	r2, [r3, #0]
 801fef0:	1d7b      	adds	r3, r7, #5
 801fef2:	33ff      	adds	r3, #255	@ 0xff
 801fef4:	681b      	ldr	r3, [r3, #0]
 801fef6:	2b3e      	cmp	r3, #62	@ 0x3e
 801fef8:	d925      	bls.n	801ff46 <USB_EPStartXfer+0xfe6>
 801fefa:	1d7b      	adds	r3, r7, #5
 801fefc:	33ff      	adds	r3, #255	@ 0xff
 801fefe:	681b      	ldr	r3, [r3, #0]
 801ff00:	095b      	lsrs	r3, r3, #5
 801ff02:	21dc      	movs	r1, #220	@ 0xdc
 801ff04:	187a      	adds	r2, r7, r1
 801ff06:	6013      	str	r3, [r2, #0]
 801ff08:	1d7b      	adds	r3, r7, #5
 801ff0a:	33ff      	adds	r3, #255	@ 0xff
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	221f      	movs	r2, #31
 801ff10:	4013      	ands	r3, r2
 801ff12:	d104      	bne.n	801ff1e <USB_EPStartXfer+0xfbe>
 801ff14:	187b      	adds	r3, r7, r1
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	3b01      	subs	r3, #1
 801ff1a:	187a      	adds	r2, r7, r1
 801ff1c:	6013      	str	r3, [r2, #0]
 801ff1e:	21c8      	movs	r1, #200	@ 0xc8
 801ff20:	187b      	adds	r3, r7, r1
 801ff22:	681b      	ldr	r3, [r3, #0]
 801ff24:	881b      	ldrh	r3, [r3, #0]
 801ff26:	b29a      	uxth	r2, r3
 801ff28:	23dc      	movs	r3, #220	@ 0xdc
 801ff2a:	18fb      	adds	r3, r7, r3
 801ff2c:	681b      	ldr	r3, [r3, #0]
 801ff2e:	b29b      	uxth	r3, r3
 801ff30:	029b      	lsls	r3, r3, #10
 801ff32:	b29b      	uxth	r3, r3
 801ff34:	4313      	orrs	r3, r2
 801ff36:	b29b      	uxth	r3, r3
 801ff38:	4a79      	ldr	r2, [pc, #484]	@ (8020120 <USB_EPStartXfer+0x11c0>)
 801ff3a:	4313      	orrs	r3, r2
 801ff3c:	b29a      	uxth	r2, r3
 801ff3e:	187b      	adds	r3, r7, r1
 801ff40:	681b      	ldr	r3, [r3, #0]
 801ff42:	801a      	strh	r2, [r3, #0]
 801ff44:	e058      	b.n	801fff8 <USB_EPStartXfer+0x1098>
 801ff46:	1d7b      	adds	r3, r7, #5
 801ff48:	33ff      	adds	r3, #255	@ 0xff
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	2b00      	cmp	r3, #0
 801ff4e:	d10b      	bne.n	801ff68 <USB_EPStartXfer+0x1008>
 801ff50:	21c8      	movs	r1, #200	@ 0xc8
 801ff52:	187b      	adds	r3, r7, r1
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	881b      	ldrh	r3, [r3, #0]
 801ff58:	b29b      	uxth	r3, r3
 801ff5a:	4a71      	ldr	r2, [pc, #452]	@ (8020120 <USB_EPStartXfer+0x11c0>)
 801ff5c:	4313      	orrs	r3, r2
 801ff5e:	b29a      	uxth	r2, r3
 801ff60:	187b      	adds	r3, r7, r1
 801ff62:	681b      	ldr	r3, [r3, #0]
 801ff64:	801a      	strh	r2, [r3, #0]
 801ff66:	e047      	b.n	801fff8 <USB_EPStartXfer+0x1098>
 801ff68:	1d7b      	adds	r3, r7, #5
 801ff6a:	33ff      	adds	r3, #255	@ 0xff
 801ff6c:	681b      	ldr	r3, [r3, #0]
 801ff6e:	085b      	lsrs	r3, r3, #1
 801ff70:	21dc      	movs	r1, #220	@ 0xdc
 801ff72:	187a      	adds	r2, r7, r1
 801ff74:	6013      	str	r3, [r2, #0]
 801ff76:	1d7b      	adds	r3, r7, #5
 801ff78:	33ff      	adds	r3, #255	@ 0xff
 801ff7a:	681b      	ldr	r3, [r3, #0]
 801ff7c:	2201      	movs	r2, #1
 801ff7e:	4013      	ands	r3, r2
 801ff80:	d004      	beq.n	801ff8c <USB_EPStartXfer+0x102c>
 801ff82:	187b      	adds	r3, r7, r1
 801ff84:	681b      	ldr	r3, [r3, #0]
 801ff86:	3301      	adds	r3, #1
 801ff88:	187a      	adds	r2, r7, r1
 801ff8a:	6013      	str	r3, [r2, #0]
 801ff8c:	21c8      	movs	r1, #200	@ 0xc8
 801ff8e:	187b      	adds	r3, r7, r1
 801ff90:	681b      	ldr	r3, [r3, #0]
 801ff92:	881b      	ldrh	r3, [r3, #0]
 801ff94:	b29a      	uxth	r2, r3
 801ff96:	23dc      	movs	r3, #220	@ 0xdc
 801ff98:	18fb      	adds	r3, r7, r3
 801ff9a:	681b      	ldr	r3, [r3, #0]
 801ff9c:	b29b      	uxth	r3, r3
 801ff9e:	029b      	lsls	r3, r3, #10
 801ffa0:	b29b      	uxth	r3, r3
 801ffa2:	4313      	orrs	r3, r2
 801ffa4:	b29a      	uxth	r2, r3
 801ffa6:	187b      	adds	r3, r7, r1
 801ffa8:	681b      	ldr	r3, [r3, #0]
 801ffaa:	801a      	strh	r2, [r3, #0]
 801ffac:	e024      	b.n	801fff8 <USB_EPStartXfer+0x1098>
 801ffae:	683b      	ldr	r3, [r7, #0]
 801ffb0:	785b      	ldrb	r3, [r3, #1]
 801ffb2:	2b01      	cmp	r3, #1
 801ffb4:	d120      	bne.n	801fff8 <USB_EPStartXfer+0x1098>
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	21d4      	movs	r1, #212	@ 0xd4
 801ffba:	187a      	adds	r2, r7, r1
 801ffbc:	6013      	str	r3, [r2, #0]
 801ffbe:	687b      	ldr	r3, [r7, #4]
 801ffc0:	2250      	movs	r2, #80	@ 0x50
 801ffc2:	5a9b      	ldrh	r3, [r3, r2]
 801ffc4:	b29b      	uxth	r3, r3
 801ffc6:	001a      	movs	r2, r3
 801ffc8:	187b      	adds	r3, r7, r1
 801ffca:	681b      	ldr	r3, [r3, #0]
 801ffcc:	189b      	adds	r3, r3, r2
 801ffce:	187a      	adds	r2, r7, r1
 801ffd0:	6013      	str	r3, [r2, #0]
 801ffd2:	683b      	ldr	r3, [r7, #0]
 801ffd4:	781b      	ldrb	r3, [r3, #0]
 801ffd6:	00da      	lsls	r2, r3, #3
 801ffd8:	187b      	adds	r3, r7, r1
 801ffda:	681b      	ldr	r3, [r3, #0]
 801ffdc:	18d3      	adds	r3, r2, r3
 801ffde:	4a4f      	ldr	r2, [pc, #316]	@ (802011c <USB_EPStartXfer+0x11bc>)
 801ffe0:	4694      	mov	ip, r2
 801ffe2:	4463      	add	r3, ip
 801ffe4:	21d0      	movs	r1, #208	@ 0xd0
 801ffe6:	187a      	adds	r2, r7, r1
 801ffe8:	6013      	str	r3, [r2, #0]
 801ffea:	1d7b      	adds	r3, r7, #5
 801ffec:	33ff      	adds	r3, #255	@ 0xff
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	b29a      	uxth	r2, r3
 801fff2:	187b      	adds	r3, r7, r1
 801fff4:	681b      	ldr	r3, [r3, #0]
 801fff6:	801a      	strh	r2, [r3, #0]
 801fff8:	687b      	ldr	r3, [r7, #4]
 801fffa:	22c4      	movs	r2, #196	@ 0xc4
 801fffc:	18ba      	adds	r2, r7, r2
 801fffe:	6013      	str	r3, [r2, #0]
 8020000:	683b      	ldr	r3, [r7, #0]
 8020002:	785b      	ldrb	r3, [r3, #1]
 8020004:	2b00      	cmp	r3, #0
 8020006:	d000      	beq.n	802000a <USB_EPStartXfer+0x10aa>
 8020008:	e08c      	b.n	8020124 <USB_EPStartXfer+0x11c4>
 802000a:	687b      	ldr	r3, [r7, #4]
 802000c:	21bc      	movs	r1, #188	@ 0xbc
 802000e:	187a      	adds	r2, r7, r1
 8020010:	6013      	str	r3, [r2, #0]
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	2250      	movs	r2, #80	@ 0x50
 8020016:	5a9b      	ldrh	r3, [r3, r2]
 8020018:	b29b      	uxth	r3, r3
 802001a:	001a      	movs	r2, r3
 802001c:	187b      	adds	r3, r7, r1
 802001e:	681b      	ldr	r3, [r3, #0]
 8020020:	189b      	adds	r3, r3, r2
 8020022:	187a      	adds	r2, r7, r1
 8020024:	6013      	str	r3, [r2, #0]
 8020026:	683b      	ldr	r3, [r7, #0]
 8020028:	781b      	ldrb	r3, [r3, #0]
 802002a:	00da      	lsls	r2, r3, #3
 802002c:	187b      	adds	r3, r7, r1
 802002e:	681b      	ldr	r3, [r3, #0]
 8020030:	18d3      	adds	r3, r2, r3
 8020032:	4a37      	ldr	r2, [pc, #220]	@ (8020110 <USB_EPStartXfer+0x11b0>)
 8020034:	4694      	mov	ip, r2
 8020036:	4463      	add	r3, ip
 8020038:	21b8      	movs	r1, #184	@ 0xb8
 802003a:	187a      	adds	r2, r7, r1
 802003c:	6013      	str	r3, [r2, #0]
 802003e:	187b      	adds	r3, r7, r1
 8020040:	681b      	ldr	r3, [r3, #0]
 8020042:	881b      	ldrh	r3, [r3, #0]
 8020044:	b29b      	uxth	r3, r3
 8020046:	059b      	lsls	r3, r3, #22
 8020048:	0d9b      	lsrs	r3, r3, #22
 802004a:	b29a      	uxth	r2, r3
 802004c:	187b      	adds	r3, r7, r1
 802004e:	681b      	ldr	r3, [r3, #0]
 8020050:	801a      	strh	r2, [r3, #0]
 8020052:	1d7b      	adds	r3, r7, #5
 8020054:	33ff      	adds	r3, #255	@ 0xff
 8020056:	681b      	ldr	r3, [r3, #0]
 8020058:	2b3e      	cmp	r3, #62	@ 0x3e
 802005a:	d925      	bls.n	80200a8 <USB_EPStartXfer+0x1148>
 802005c:	1d7b      	adds	r3, r7, #5
 802005e:	33ff      	adds	r3, #255	@ 0xff
 8020060:	681b      	ldr	r3, [r3, #0]
 8020062:	095b      	lsrs	r3, r3, #5
 8020064:	21d8      	movs	r1, #216	@ 0xd8
 8020066:	187a      	adds	r2, r7, r1
 8020068:	6013      	str	r3, [r2, #0]
 802006a:	1d7b      	adds	r3, r7, #5
 802006c:	33ff      	adds	r3, #255	@ 0xff
 802006e:	681b      	ldr	r3, [r3, #0]
 8020070:	221f      	movs	r2, #31
 8020072:	4013      	ands	r3, r2
 8020074:	d104      	bne.n	8020080 <USB_EPStartXfer+0x1120>
 8020076:	187b      	adds	r3, r7, r1
 8020078:	681b      	ldr	r3, [r3, #0]
 802007a:	3b01      	subs	r3, #1
 802007c:	187a      	adds	r2, r7, r1
 802007e:	6013      	str	r3, [r2, #0]
 8020080:	21b8      	movs	r1, #184	@ 0xb8
 8020082:	187b      	adds	r3, r7, r1
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	881b      	ldrh	r3, [r3, #0]
 8020088:	b29a      	uxth	r2, r3
 802008a:	23d8      	movs	r3, #216	@ 0xd8
 802008c:	18fb      	adds	r3, r7, r3
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	b29b      	uxth	r3, r3
 8020092:	029b      	lsls	r3, r3, #10
 8020094:	b29b      	uxth	r3, r3
 8020096:	4313      	orrs	r3, r2
 8020098:	b29b      	uxth	r3, r3
 802009a:	4a21      	ldr	r2, [pc, #132]	@ (8020120 <USB_EPStartXfer+0x11c0>)
 802009c:	4313      	orrs	r3, r2
 802009e:	b29a      	uxth	r2, r3
 80200a0:	187b      	adds	r3, r7, r1
 80200a2:	681b      	ldr	r3, [r3, #0]
 80200a4:	801a      	strh	r2, [r3, #0]
 80200a6:	e062      	b.n	802016e <USB_EPStartXfer+0x120e>
 80200a8:	1d7b      	adds	r3, r7, #5
 80200aa:	33ff      	adds	r3, #255	@ 0xff
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	2b00      	cmp	r3, #0
 80200b0:	d10b      	bne.n	80200ca <USB_EPStartXfer+0x116a>
 80200b2:	21b8      	movs	r1, #184	@ 0xb8
 80200b4:	187b      	adds	r3, r7, r1
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	881b      	ldrh	r3, [r3, #0]
 80200ba:	b29b      	uxth	r3, r3
 80200bc:	4a18      	ldr	r2, [pc, #96]	@ (8020120 <USB_EPStartXfer+0x11c0>)
 80200be:	4313      	orrs	r3, r2
 80200c0:	b29a      	uxth	r2, r3
 80200c2:	187b      	adds	r3, r7, r1
 80200c4:	681b      	ldr	r3, [r3, #0]
 80200c6:	801a      	strh	r2, [r3, #0]
 80200c8:	e051      	b.n	802016e <USB_EPStartXfer+0x120e>
 80200ca:	1d7b      	adds	r3, r7, #5
 80200cc:	33ff      	adds	r3, #255	@ 0xff
 80200ce:	681b      	ldr	r3, [r3, #0]
 80200d0:	085b      	lsrs	r3, r3, #1
 80200d2:	21d8      	movs	r1, #216	@ 0xd8
 80200d4:	187a      	adds	r2, r7, r1
 80200d6:	6013      	str	r3, [r2, #0]
 80200d8:	1d7b      	adds	r3, r7, #5
 80200da:	33ff      	adds	r3, #255	@ 0xff
 80200dc:	681b      	ldr	r3, [r3, #0]
 80200de:	2201      	movs	r2, #1
 80200e0:	4013      	ands	r3, r2
 80200e2:	d004      	beq.n	80200ee <USB_EPStartXfer+0x118e>
 80200e4:	187b      	adds	r3, r7, r1
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	3301      	adds	r3, #1
 80200ea:	187a      	adds	r2, r7, r1
 80200ec:	6013      	str	r3, [r2, #0]
 80200ee:	21b8      	movs	r1, #184	@ 0xb8
 80200f0:	187b      	adds	r3, r7, r1
 80200f2:	681b      	ldr	r3, [r3, #0]
 80200f4:	881b      	ldrh	r3, [r3, #0]
 80200f6:	b29a      	uxth	r2, r3
 80200f8:	23d8      	movs	r3, #216	@ 0xd8
 80200fa:	18fb      	adds	r3, r7, r3
 80200fc:	681b      	ldr	r3, [r3, #0]
 80200fe:	b29b      	uxth	r3, r3
 8020100:	029b      	lsls	r3, r3, #10
 8020102:	b29b      	uxth	r3, r3
 8020104:	4313      	orrs	r3, r2
 8020106:	b29a      	uxth	r2, r3
 8020108:	187b      	adds	r3, r7, r1
 802010a:	681b      	ldr	r3, [r3, #0]
 802010c:	801a      	strh	r2, [r3, #0]
 802010e:	e02e      	b.n	802016e <USB_EPStartXfer+0x120e>
 8020110:	00000406 	.word	0x00000406
 8020114:	ffff8f8f 	.word	0xffff8f8f
 8020118:	ffff80c0 	.word	0xffff80c0
 802011c:	00000402 	.word	0x00000402
 8020120:	ffff8000 	.word	0xffff8000
 8020124:	683b      	ldr	r3, [r7, #0]
 8020126:	785b      	ldrb	r3, [r3, #1]
 8020128:	2b01      	cmp	r3, #1
 802012a:	d120      	bne.n	802016e <USB_EPStartXfer+0x120e>
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	2250      	movs	r2, #80	@ 0x50
 8020130:	5a9b      	ldrh	r3, [r3, r2]
 8020132:	b29b      	uxth	r3, r3
 8020134:	001a      	movs	r2, r3
 8020136:	21c4      	movs	r1, #196	@ 0xc4
 8020138:	187b      	adds	r3, r7, r1
 802013a:	681b      	ldr	r3, [r3, #0]
 802013c:	189b      	adds	r3, r3, r2
 802013e:	187a      	adds	r2, r7, r1
 8020140:	6013      	str	r3, [r2, #0]
 8020142:	683b      	ldr	r3, [r7, #0]
 8020144:	781b      	ldrb	r3, [r3, #0]
 8020146:	00da      	lsls	r2, r3, #3
 8020148:	187b      	adds	r3, r7, r1
 802014a:	681b      	ldr	r3, [r3, #0]
 802014c:	18d3      	adds	r3, r2, r3
 802014e:	4a1d      	ldr	r2, [pc, #116]	@ (80201c4 <USB_EPStartXfer+0x1264>)
 8020150:	4694      	mov	ip, r2
 8020152:	4463      	add	r3, ip
 8020154:	21c0      	movs	r1, #192	@ 0xc0
 8020156:	187a      	adds	r2, r7, r1
 8020158:	6013      	str	r3, [r2, #0]
 802015a:	1d7b      	adds	r3, r7, #5
 802015c:	33ff      	adds	r3, #255	@ 0xff
 802015e:	681b      	ldr	r3, [r3, #0]
 8020160:	b29a      	uxth	r2, r3
 8020162:	187b      	adds	r3, r7, r1
 8020164:	681b      	ldr	r3, [r3, #0]
 8020166:	801a      	strh	r2, [r3, #0]
 8020168:	e001      	b.n	802016e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 802016a:	2301      	movs	r3, #1
 802016c:	e025      	b.n	80201ba <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 802016e:	687a      	ldr	r2, [r7, #4]
 8020170:	683b      	ldr	r3, [r7, #0]
 8020172:	781b      	ldrb	r3, [r3, #0]
 8020174:	009b      	lsls	r3, r3, #2
 8020176:	18d3      	adds	r3, r2, r3
 8020178:	881b      	ldrh	r3, [r3, #0]
 802017a:	b29a      	uxth	r2, r3
 802017c:	208a      	movs	r0, #138	@ 0x8a
 802017e:	183b      	adds	r3, r7, r0
 8020180:	4911      	ldr	r1, [pc, #68]	@ (80201c8 <USB_EPStartXfer+0x1268>)
 8020182:	400a      	ands	r2, r1
 8020184:	801a      	strh	r2, [r3, #0]
 8020186:	183b      	adds	r3, r7, r0
 8020188:	183a      	adds	r2, r7, r0
 802018a:	8812      	ldrh	r2, [r2, #0]
 802018c:	2180      	movs	r1, #128	@ 0x80
 802018e:	0149      	lsls	r1, r1, #5
 8020190:	404a      	eors	r2, r1
 8020192:	801a      	strh	r2, [r3, #0]
 8020194:	183b      	adds	r3, r7, r0
 8020196:	183a      	adds	r2, r7, r0
 8020198:	8812      	ldrh	r2, [r2, #0]
 802019a:	2180      	movs	r1, #128	@ 0x80
 802019c:	0189      	lsls	r1, r1, #6
 802019e:	404a      	eors	r2, r1
 80201a0:	801a      	strh	r2, [r3, #0]
 80201a2:	687a      	ldr	r2, [r7, #4]
 80201a4:	683b      	ldr	r3, [r7, #0]
 80201a6:	781b      	ldrb	r3, [r3, #0]
 80201a8:	009b      	lsls	r3, r3, #2
 80201aa:	18d3      	adds	r3, r2, r3
 80201ac:	183a      	adds	r2, r7, r0
 80201ae:	8812      	ldrh	r2, [r2, #0]
 80201b0:	4906      	ldr	r1, [pc, #24]	@ (80201cc <USB_EPStartXfer+0x126c>)
 80201b2:	430a      	orrs	r2, r1
 80201b4:	b292      	uxth	r2, r2
 80201b6:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80201b8:	2300      	movs	r3, #0
}
 80201ba:	0018      	movs	r0, r3
 80201bc:	46bd      	mov	sp, r7
 80201be:	b043      	add	sp, #268	@ 0x10c
 80201c0:	bd90      	pop	{r4, r7, pc}
 80201c2:	46c0      	nop			@ (mov r8, r8)
 80201c4:	00000406 	.word	0x00000406
 80201c8:	ffffbf8f 	.word	0xffffbf8f
 80201cc:	ffff8080 	.word	0xffff8080

080201d0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80201d0:	b580      	push	{r7, lr}
 80201d2:	b084      	sub	sp, #16
 80201d4:	af00      	add	r7, sp, #0
 80201d6:	6078      	str	r0, [r7, #4]
 80201d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80201da:	683b      	ldr	r3, [r7, #0]
 80201dc:	785b      	ldrb	r3, [r3, #1]
 80201de:	2b00      	cmp	r3, #0
 80201e0:	d01d      	beq.n	802021e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80201e2:	687a      	ldr	r2, [r7, #4]
 80201e4:	683b      	ldr	r3, [r7, #0]
 80201e6:	781b      	ldrb	r3, [r3, #0]
 80201e8:	009b      	lsls	r3, r3, #2
 80201ea:	18d3      	adds	r3, r2, r3
 80201ec:	881b      	ldrh	r3, [r3, #0]
 80201ee:	b29a      	uxth	r2, r3
 80201f0:	200c      	movs	r0, #12
 80201f2:	183b      	adds	r3, r7, r0
 80201f4:	491b      	ldr	r1, [pc, #108]	@ (8020264 <USB_EPSetStall+0x94>)
 80201f6:	400a      	ands	r2, r1
 80201f8:	801a      	strh	r2, [r3, #0]
 80201fa:	183b      	adds	r3, r7, r0
 80201fc:	183a      	adds	r2, r7, r0
 80201fe:	8812      	ldrh	r2, [r2, #0]
 8020200:	2110      	movs	r1, #16
 8020202:	404a      	eors	r2, r1
 8020204:	801a      	strh	r2, [r3, #0]
 8020206:	687a      	ldr	r2, [r7, #4]
 8020208:	683b      	ldr	r3, [r7, #0]
 802020a:	781b      	ldrb	r3, [r3, #0]
 802020c:	009b      	lsls	r3, r3, #2
 802020e:	18d3      	adds	r3, r2, r3
 8020210:	183a      	adds	r2, r7, r0
 8020212:	8812      	ldrh	r2, [r2, #0]
 8020214:	4914      	ldr	r1, [pc, #80]	@ (8020268 <USB_EPSetStall+0x98>)
 8020216:	430a      	orrs	r2, r1
 8020218:	b292      	uxth	r2, r2
 802021a:	801a      	strh	r2, [r3, #0]
 802021c:	e01d      	b.n	802025a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 802021e:	687a      	ldr	r2, [r7, #4]
 8020220:	683b      	ldr	r3, [r7, #0]
 8020222:	781b      	ldrb	r3, [r3, #0]
 8020224:	009b      	lsls	r3, r3, #2
 8020226:	18d3      	adds	r3, r2, r3
 8020228:	881b      	ldrh	r3, [r3, #0]
 802022a:	b29a      	uxth	r2, r3
 802022c:	200e      	movs	r0, #14
 802022e:	183b      	adds	r3, r7, r0
 8020230:	490e      	ldr	r1, [pc, #56]	@ (802026c <USB_EPSetStall+0x9c>)
 8020232:	400a      	ands	r2, r1
 8020234:	801a      	strh	r2, [r3, #0]
 8020236:	183b      	adds	r3, r7, r0
 8020238:	183a      	adds	r2, r7, r0
 802023a:	8812      	ldrh	r2, [r2, #0]
 802023c:	2180      	movs	r1, #128	@ 0x80
 802023e:	0149      	lsls	r1, r1, #5
 8020240:	404a      	eors	r2, r1
 8020242:	801a      	strh	r2, [r3, #0]
 8020244:	687a      	ldr	r2, [r7, #4]
 8020246:	683b      	ldr	r3, [r7, #0]
 8020248:	781b      	ldrb	r3, [r3, #0]
 802024a:	009b      	lsls	r3, r3, #2
 802024c:	18d3      	adds	r3, r2, r3
 802024e:	183a      	adds	r2, r7, r0
 8020250:	8812      	ldrh	r2, [r2, #0]
 8020252:	4905      	ldr	r1, [pc, #20]	@ (8020268 <USB_EPSetStall+0x98>)
 8020254:	430a      	orrs	r2, r1
 8020256:	b292      	uxth	r2, r2
 8020258:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 802025a:	2300      	movs	r3, #0
}
 802025c:	0018      	movs	r0, r3
 802025e:	46bd      	mov	sp, r7
 8020260:	b004      	add	sp, #16
 8020262:	bd80      	pop	{r7, pc}
 8020264:	ffff8fbf 	.word	0xffff8fbf
 8020268:	ffff8080 	.word	0xffff8080
 802026c:	ffffbf8f 	.word	0xffffbf8f

08020270 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8020270:	b580      	push	{r7, lr}
 8020272:	b086      	sub	sp, #24
 8020274:	af00      	add	r7, sp, #0
 8020276:	6078      	str	r0, [r7, #4]
 8020278:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 802027a:	683b      	ldr	r3, [r7, #0]
 802027c:	7b1b      	ldrb	r3, [r3, #12]
 802027e:	2b00      	cmp	r3, #0
 8020280:	d000      	beq.n	8020284 <USB_EPClearStall+0x14>
 8020282:	e095      	b.n	80203b0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8020284:	683b      	ldr	r3, [r7, #0]
 8020286:	785b      	ldrb	r3, [r3, #1]
 8020288:	2b00      	cmp	r3, #0
 802028a:	d046      	beq.n	802031a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 802028c:	687a      	ldr	r2, [r7, #4]
 802028e:	683b      	ldr	r3, [r7, #0]
 8020290:	781b      	ldrb	r3, [r3, #0]
 8020292:	009b      	lsls	r3, r3, #2
 8020294:	18d2      	adds	r2, r2, r3
 8020296:	2110      	movs	r1, #16
 8020298:	187b      	adds	r3, r7, r1
 802029a:	8812      	ldrh	r2, [r2, #0]
 802029c:	801a      	strh	r2, [r3, #0]
 802029e:	187b      	adds	r3, r7, r1
 80202a0:	881b      	ldrh	r3, [r3, #0]
 80202a2:	2240      	movs	r2, #64	@ 0x40
 80202a4:	4013      	ands	r3, r2
 80202a6:	d016      	beq.n	80202d6 <USB_EPClearStall+0x66>
 80202a8:	687a      	ldr	r2, [r7, #4]
 80202aa:	683b      	ldr	r3, [r7, #0]
 80202ac:	781b      	ldrb	r3, [r3, #0]
 80202ae:	009b      	lsls	r3, r3, #2
 80202b0:	18d3      	adds	r3, r2, r3
 80202b2:	881b      	ldrh	r3, [r3, #0]
 80202b4:	b29a      	uxth	r2, r3
 80202b6:	200e      	movs	r0, #14
 80202b8:	183b      	adds	r3, r7, r0
 80202ba:	4940      	ldr	r1, [pc, #256]	@ (80203bc <USB_EPClearStall+0x14c>)
 80202bc:	400a      	ands	r2, r1
 80202be:	801a      	strh	r2, [r3, #0]
 80202c0:	687a      	ldr	r2, [r7, #4]
 80202c2:	683b      	ldr	r3, [r7, #0]
 80202c4:	781b      	ldrb	r3, [r3, #0]
 80202c6:	009b      	lsls	r3, r3, #2
 80202c8:	18d3      	adds	r3, r2, r3
 80202ca:	183a      	adds	r2, r7, r0
 80202cc:	8812      	ldrh	r2, [r2, #0]
 80202ce:	493c      	ldr	r1, [pc, #240]	@ (80203c0 <USB_EPClearStall+0x150>)
 80202d0:	430a      	orrs	r2, r1
 80202d2:	b292      	uxth	r2, r2
 80202d4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80202d6:	683b      	ldr	r3, [r7, #0]
 80202d8:	78db      	ldrb	r3, [r3, #3]
 80202da:	2b01      	cmp	r3, #1
 80202dc:	d068      	beq.n	80203b0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80202de:	687a      	ldr	r2, [r7, #4]
 80202e0:	683b      	ldr	r3, [r7, #0]
 80202e2:	781b      	ldrb	r3, [r3, #0]
 80202e4:	009b      	lsls	r3, r3, #2
 80202e6:	18d3      	adds	r3, r2, r3
 80202e8:	881b      	ldrh	r3, [r3, #0]
 80202ea:	b29a      	uxth	r2, r3
 80202ec:	200c      	movs	r0, #12
 80202ee:	183b      	adds	r3, r7, r0
 80202f0:	4934      	ldr	r1, [pc, #208]	@ (80203c4 <USB_EPClearStall+0x154>)
 80202f2:	400a      	ands	r2, r1
 80202f4:	801a      	strh	r2, [r3, #0]
 80202f6:	183b      	adds	r3, r7, r0
 80202f8:	183a      	adds	r2, r7, r0
 80202fa:	8812      	ldrh	r2, [r2, #0]
 80202fc:	2120      	movs	r1, #32
 80202fe:	404a      	eors	r2, r1
 8020300:	801a      	strh	r2, [r3, #0]
 8020302:	687a      	ldr	r2, [r7, #4]
 8020304:	683b      	ldr	r3, [r7, #0]
 8020306:	781b      	ldrb	r3, [r3, #0]
 8020308:	009b      	lsls	r3, r3, #2
 802030a:	18d3      	adds	r3, r2, r3
 802030c:	183a      	adds	r2, r7, r0
 802030e:	8812      	ldrh	r2, [r2, #0]
 8020310:	492d      	ldr	r1, [pc, #180]	@ (80203c8 <USB_EPClearStall+0x158>)
 8020312:	430a      	orrs	r2, r1
 8020314:	b292      	uxth	r2, r2
 8020316:	801a      	strh	r2, [r3, #0]
 8020318:	e04a      	b.n	80203b0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 802031a:	687a      	ldr	r2, [r7, #4]
 802031c:	683b      	ldr	r3, [r7, #0]
 802031e:	781b      	ldrb	r3, [r3, #0]
 8020320:	009b      	lsls	r3, r3, #2
 8020322:	18d2      	adds	r2, r2, r3
 8020324:	2116      	movs	r1, #22
 8020326:	187b      	adds	r3, r7, r1
 8020328:	8812      	ldrh	r2, [r2, #0]
 802032a:	801a      	strh	r2, [r3, #0]
 802032c:	187b      	adds	r3, r7, r1
 802032e:	881a      	ldrh	r2, [r3, #0]
 8020330:	2380      	movs	r3, #128	@ 0x80
 8020332:	01db      	lsls	r3, r3, #7
 8020334:	4013      	ands	r3, r2
 8020336:	d016      	beq.n	8020366 <USB_EPClearStall+0xf6>
 8020338:	687a      	ldr	r2, [r7, #4]
 802033a:	683b      	ldr	r3, [r7, #0]
 802033c:	781b      	ldrb	r3, [r3, #0]
 802033e:	009b      	lsls	r3, r3, #2
 8020340:	18d3      	adds	r3, r2, r3
 8020342:	881b      	ldrh	r3, [r3, #0]
 8020344:	b29a      	uxth	r2, r3
 8020346:	2014      	movs	r0, #20
 8020348:	183b      	adds	r3, r7, r0
 802034a:	491c      	ldr	r1, [pc, #112]	@ (80203bc <USB_EPClearStall+0x14c>)
 802034c:	400a      	ands	r2, r1
 802034e:	801a      	strh	r2, [r3, #0]
 8020350:	687a      	ldr	r2, [r7, #4]
 8020352:	683b      	ldr	r3, [r7, #0]
 8020354:	781b      	ldrb	r3, [r3, #0]
 8020356:	009b      	lsls	r3, r3, #2
 8020358:	18d3      	adds	r3, r2, r3
 802035a:	183a      	adds	r2, r7, r0
 802035c:	8812      	ldrh	r2, [r2, #0]
 802035e:	491b      	ldr	r1, [pc, #108]	@ (80203cc <USB_EPClearStall+0x15c>)
 8020360:	430a      	orrs	r2, r1
 8020362:	b292      	uxth	r2, r2
 8020364:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8020366:	687a      	ldr	r2, [r7, #4]
 8020368:	683b      	ldr	r3, [r7, #0]
 802036a:	781b      	ldrb	r3, [r3, #0]
 802036c:	009b      	lsls	r3, r3, #2
 802036e:	18d3      	adds	r3, r2, r3
 8020370:	881b      	ldrh	r3, [r3, #0]
 8020372:	b29a      	uxth	r2, r3
 8020374:	2012      	movs	r0, #18
 8020376:	183b      	adds	r3, r7, r0
 8020378:	4915      	ldr	r1, [pc, #84]	@ (80203d0 <USB_EPClearStall+0x160>)
 802037a:	400a      	ands	r2, r1
 802037c:	801a      	strh	r2, [r3, #0]
 802037e:	183b      	adds	r3, r7, r0
 8020380:	183a      	adds	r2, r7, r0
 8020382:	8812      	ldrh	r2, [r2, #0]
 8020384:	2180      	movs	r1, #128	@ 0x80
 8020386:	0149      	lsls	r1, r1, #5
 8020388:	404a      	eors	r2, r1
 802038a:	801a      	strh	r2, [r3, #0]
 802038c:	183b      	adds	r3, r7, r0
 802038e:	183a      	adds	r2, r7, r0
 8020390:	8812      	ldrh	r2, [r2, #0]
 8020392:	2180      	movs	r1, #128	@ 0x80
 8020394:	0189      	lsls	r1, r1, #6
 8020396:	404a      	eors	r2, r1
 8020398:	801a      	strh	r2, [r3, #0]
 802039a:	687a      	ldr	r2, [r7, #4]
 802039c:	683b      	ldr	r3, [r7, #0]
 802039e:	781b      	ldrb	r3, [r3, #0]
 80203a0:	009b      	lsls	r3, r3, #2
 80203a2:	18d3      	adds	r3, r2, r3
 80203a4:	183a      	adds	r2, r7, r0
 80203a6:	8812      	ldrh	r2, [r2, #0]
 80203a8:	4907      	ldr	r1, [pc, #28]	@ (80203c8 <USB_EPClearStall+0x158>)
 80203aa:	430a      	orrs	r2, r1
 80203ac:	b292      	uxth	r2, r2
 80203ae:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80203b0:	2300      	movs	r3, #0
}
 80203b2:	0018      	movs	r0, r3
 80203b4:	46bd      	mov	sp, r7
 80203b6:	b006      	add	sp, #24
 80203b8:	bd80      	pop	{r7, pc}
 80203ba:	46c0      	nop			@ (mov r8, r8)
 80203bc:	ffff8f8f 	.word	0xffff8f8f
 80203c0:	ffff80c0 	.word	0xffff80c0
 80203c4:	ffff8fbf 	.word	0xffff8fbf
 80203c8:	ffff8080 	.word	0xffff8080
 80203cc:	ffffc080 	.word	0xffffc080
 80203d0:	ffffbf8f 	.word	0xffffbf8f

080203d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80203d4:	b580      	push	{r7, lr}
 80203d6:	b082      	sub	sp, #8
 80203d8:	af00      	add	r7, sp, #0
 80203da:	6078      	str	r0, [r7, #4]
 80203dc:	000a      	movs	r2, r1
 80203de:	1cfb      	adds	r3, r7, #3
 80203e0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80203e2:	1cfb      	adds	r3, r7, #3
 80203e4:	781b      	ldrb	r3, [r3, #0]
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	d103      	bne.n	80203f2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80203ea:	687b      	ldr	r3, [r7, #4]
 80203ec:	224c      	movs	r2, #76	@ 0x4c
 80203ee:	2180      	movs	r1, #128	@ 0x80
 80203f0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80203f2:	2300      	movs	r3, #0
}
 80203f4:	0018      	movs	r0, r3
 80203f6:	46bd      	mov	sp, r7
 80203f8:	b002      	add	sp, #8
 80203fa:	bd80      	pop	{r7, pc}

080203fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80203fc:	b580      	push	{r7, lr}
 80203fe:	b082      	sub	sp, #8
 8020400:	af00      	add	r7, sp, #0
 8020402:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	2258      	movs	r2, #88	@ 0x58
 8020408:	5a9b      	ldrh	r3, [r3, r2]
 802040a:	b29b      	uxth	r3, r3
 802040c:	4a05      	ldr	r2, [pc, #20]	@ (8020424 <USB_DevConnect+0x28>)
 802040e:	4313      	orrs	r3, r2
 8020410:	b299      	uxth	r1, r3
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	2258      	movs	r2, #88	@ 0x58
 8020416:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8020418:	2300      	movs	r3, #0
}
 802041a:	0018      	movs	r0, r3
 802041c:	46bd      	mov	sp, r7
 802041e:	b002      	add	sp, #8
 8020420:	bd80      	pop	{r7, pc}
 8020422:	46c0      	nop			@ (mov r8, r8)
 8020424:	ffff8000 	.word	0xffff8000

08020428 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8020428:	b580      	push	{r7, lr}
 802042a:	b084      	sub	sp, #16
 802042c:	af00      	add	r7, sp, #0
 802042e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8020430:	687b      	ldr	r3, [r7, #4]
 8020432:	2244      	movs	r2, #68	@ 0x44
 8020434:	5a9b      	ldrh	r3, [r3, r2]
 8020436:	b29b      	uxth	r3, r3
 8020438:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 802043a:	68fb      	ldr	r3, [r7, #12]
}
 802043c:	0018      	movs	r0, r3
 802043e:	46bd      	mov	sp, r7
 8020440:	b004      	add	sp, #16
 8020442:	bd80      	pop	{r7, pc}

08020444 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8020444:	b580      	push	{r7, lr}
 8020446:	b08a      	sub	sp, #40	@ 0x28
 8020448:	af00      	add	r7, sp, #0
 802044a:	60f8      	str	r0, [r7, #12]
 802044c:	60b9      	str	r1, [r7, #8]
 802044e:	0019      	movs	r1, r3
 8020450:	1dbb      	adds	r3, r7, #6
 8020452:	801a      	strh	r2, [r3, #0]
 8020454:	1d3b      	adds	r3, r7, #4
 8020456:	1c0a      	adds	r2, r1, #0
 8020458:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 802045a:	1d3b      	adds	r3, r7, #4
 802045c:	881b      	ldrh	r3, [r3, #0]
 802045e:	3301      	adds	r3, #1
 8020460:	085b      	lsrs	r3, r3, #1
 8020462:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8020464:	68fb      	ldr	r3, [r7, #12]
 8020466:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8020468:	68bb      	ldr	r3, [r7, #8]
 802046a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 802046c:	1dbb      	adds	r3, r7, #6
 802046e:	881a      	ldrh	r2, [r3, #0]
 8020470:	697b      	ldr	r3, [r7, #20]
 8020472:	18d3      	adds	r3, r2, r3
 8020474:	2280      	movs	r2, #128	@ 0x80
 8020476:	00d2      	lsls	r2, r2, #3
 8020478:	4694      	mov	ip, r2
 802047a:	4463      	add	r3, ip
 802047c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 802047e:	69bb      	ldr	r3, [r7, #24]
 8020480:	627b      	str	r3, [r7, #36]	@ 0x24
 8020482:	e021      	b.n	80204c8 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 8020484:	69fb      	ldr	r3, [r7, #28]
 8020486:	781a      	ldrb	r2, [r3, #0]
 8020488:	2112      	movs	r1, #18
 802048a:	187b      	adds	r3, r7, r1
 802048c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 802048e:	69fb      	ldr	r3, [r7, #28]
 8020490:	3301      	adds	r3, #1
 8020492:	781b      	ldrb	r3, [r3, #0]
 8020494:	b21b      	sxth	r3, r3
 8020496:	021b      	lsls	r3, r3, #8
 8020498:	b21a      	sxth	r2, r3
 802049a:	187b      	adds	r3, r7, r1
 802049c:	2000      	movs	r0, #0
 802049e:	5e1b      	ldrsh	r3, [r3, r0]
 80204a0:	4313      	orrs	r3, r2
 80204a2:	b21a      	sxth	r2, r3
 80204a4:	187b      	adds	r3, r7, r1
 80204a6:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80204a8:	6a3b      	ldr	r3, [r7, #32]
 80204aa:	187a      	adds	r2, r7, r1
 80204ac:	8812      	ldrh	r2, [r2, #0]
 80204ae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80204b0:	6a3b      	ldr	r3, [r7, #32]
 80204b2:	3302      	adds	r3, #2
 80204b4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80204b6:	69fb      	ldr	r3, [r7, #28]
 80204b8:	3301      	adds	r3, #1
 80204ba:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80204bc:	69fb      	ldr	r3, [r7, #28]
 80204be:	3301      	adds	r3, #1
 80204c0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80204c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80204c4:	3b01      	subs	r3, #1
 80204c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80204c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80204ca:	2b00      	cmp	r3, #0
 80204cc:	d1da      	bne.n	8020484 <USB_WritePMA+0x40>
  }
}
 80204ce:	46c0      	nop			@ (mov r8, r8)
 80204d0:	46c0      	nop			@ (mov r8, r8)
 80204d2:	46bd      	mov	sp, r7
 80204d4:	b00a      	add	sp, #40	@ 0x28
 80204d6:	bd80      	pop	{r7, pc}

080204d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80204d8:	b580      	push	{r7, lr}
 80204da:	b08a      	sub	sp, #40	@ 0x28
 80204dc:	af00      	add	r7, sp, #0
 80204de:	60f8      	str	r0, [r7, #12]
 80204e0:	60b9      	str	r1, [r7, #8]
 80204e2:	0019      	movs	r1, r3
 80204e4:	1dbb      	adds	r3, r7, #6
 80204e6:	801a      	strh	r2, [r3, #0]
 80204e8:	1d3b      	adds	r3, r7, #4
 80204ea:	1c0a      	adds	r2, r1, #0
 80204ec:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80204ee:	1d3b      	adds	r3, r7, #4
 80204f0:	881b      	ldrh	r3, [r3, #0]
 80204f2:	085b      	lsrs	r3, r3, #1
 80204f4:	b29b      	uxth	r3, r3
 80204f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80204f8:	68fb      	ldr	r3, [r7, #12]
 80204fa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80204fc:	68bb      	ldr	r3, [r7, #8]
 80204fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8020500:	1dbb      	adds	r3, r7, #6
 8020502:	881a      	ldrh	r2, [r3, #0]
 8020504:	697b      	ldr	r3, [r7, #20]
 8020506:	18d3      	adds	r3, r2, r3
 8020508:	2280      	movs	r2, #128	@ 0x80
 802050a:	00d2      	lsls	r2, r2, #3
 802050c:	4694      	mov	ip, r2
 802050e:	4463      	add	r3, ip
 8020510:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8020512:	69bb      	ldr	r3, [r7, #24]
 8020514:	627b      	str	r3, [r7, #36]	@ 0x24
 8020516:	e018      	b.n	802054a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8020518:	6a3b      	ldr	r3, [r7, #32]
 802051a:	881b      	ldrh	r3, [r3, #0]
 802051c:	b29b      	uxth	r3, r3
 802051e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8020520:	6a3b      	ldr	r3, [r7, #32]
 8020522:	3302      	adds	r3, #2
 8020524:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8020526:	693b      	ldr	r3, [r7, #16]
 8020528:	b2da      	uxtb	r2, r3
 802052a:	69fb      	ldr	r3, [r7, #28]
 802052c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 802052e:	69fb      	ldr	r3, [r7, #28]
 8020530:	3301      	adds	r3, #1
 8020532:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8020534:	693b      	ldr	r3, [r7, #16]
 8020536:	0a1b      	lsrs	r3, r3, #8
 8020538:	b2da      	uxtb	r2, r3
 802053a:	69fb      	ldr	r3, [r7, #28]
 802053c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 802053e:	69fb      	ldr	r3, [r7, #28]
 8020540:	3301      	adds	r3, #1
 8020542:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8020544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020546:	3b01      	subs	r3, #1
 8020548:	627b      	str	r3, [r7, #36]	@ 0x24
 802054a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802054c:	2b00      	cmp	r3, #0
 802054e:	d1e3      	bne.n	8020518 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8020550:	1d3b      	adds	r3, r7, #4
 8020552:	881b      	ldrh	r3, [r3, #0]
 8020554:	2201      	movs	r2, #1
 8020556:	4013      	ands	r3, r2
 8020558:	b29b      	uxth	r3, r3
 802055a:	2b00      	cmp	r3, #0
 802055c:	d007      	beq.n	802056e <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 802055e:	6a3b      	ldr	r3, [r7, #32]
 8020560:	881b      	ldrh	r3, [r3, #0]
 8020562:	b29b      	uxth	r3, r3
 8020564:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8020566:	693b      	ldr	r3, [r7, #16]
 8020568:	b2da      	uxtb	r2, r3
 802056a:	69fb      	ldr	r3, [r7, #28]
 802056c:	701a      	strb	r2, [r3, #0]
  }
}
 802056e:	46c0      	nop			@ (mov r8, r8)
 8020570:	46bd      	mov	sp, r7
 8020572:	b00a      	add	sp, #40	@ 0x28
 8020574:	bd80      	pop	{r7, pc}

08020576 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020576:	b580      	push	{r7, lr}
 8020578:	b084      	sub	sp, #16
 802057a:	af00      	add	r7, sp, #0
 802057c:	6078      	str	r0, [r7, #4]
 802057e:	000a      	movs	r2, r1
 8020580:	1cfb      	adds	r3, r7, #3
 8020582:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8020584:	230f      	movs	r3, #15
 8020586:	18fb      	adds	r3, r7, r3
 8020588:	2200      	movs	r2, #0
 802058a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 802058c:	687b      	ldr	r3, [r7, #4]
 802058e:	7c1b      	ldrb	r3, [r3, #16]
 8020590:	2b00      	cmp	r3, #0
 8020592:	d116      	bne.n	80205c2 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020594:	2380      	movs	r3, #128	@ 0x80
 8020596:	009b      	lsls	r3, r3, #2
 8020598:	6878      	ldr	r0, [r7, #4]
 802059a:	2202      	movs	r2, #2
 802059c:	2181      	movs	r1, #129	@ 0x81
 802059e:	f002 f8ec 	bl	802277a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	2201      	movs	r2, #1
 80205a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80205a8:	2380      	movs	r3, #128	@ 0x80
 80205aa:	009b      	lsls	r3, r3, #2
 80205ac:	6878      	ldr	r0, [r7, #4]
 80205ae:	2202      	movs	r2, #2
 80205b0:	2101      	movs	r1, #1
 80205b2:	f002 f8e2 	bl	802277a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80205b6:	687a      	ldr	r2, [r7, #4]
 80205b8:	23b6      	movs	r3, #182	@ 0xb6
 80205ba:	005b      	lsls	r3, r3, #1
 80205bc:	2101      	movs	r1, #1
 80205be:	50d1      	str	r1, [r2, r3]
 80205c0:	e013      	b.n	80205ea <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80205c2:	6878      	ldr	r0, [r7, #4]
 80205c4:	2340      	movs	r3, #64	@ 0x40
 80205c6:	2202      	movs	r2, #2
 80205c8:	2181      	movs	r1, #129	@ 0x81
 80205ca:	f002 f8d6 	bl	802277a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80205ce:	687b      	ldr	r3, [r7, #4]
 80205d0:	2201      	movs	r2, #1
 80205d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80205d4:	6878      	ldr	r0, [r7, #4]
 80205d6:	2340      	movs	r3, #64	@ 0x40
 80205d8:	2202      	movs	r2, #2
 80205da:	2101      	movs	r1, #1
 80205dc:	f002 f8cd 	bl	802277a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80205e0:	687a      	ldr	r2, [r7, #4]
 80205e2:	23b6      	movs	r3, #182	@ 0xb6
 80205e4:	005b      	lsls	r3, r3, #1
 80205e6:	2101      	movs	r1, #1
 80205e8:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80205ea:	6878      	ldr	r0, [r7, #4]
 80205ec:	2308      	movs	r3, #8
 80205ee:	2203      	movs	r2, #3
 80205f0:	2182      	movs	r1, #130	@ 0x82
 80205f2:	f002 f8c2 	bl	802277a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80205f6:	687b      	ldr	r3, [r7, #4]
 80205f8:	2201      	movs	r2, #1
 80205fa:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80205fc:	2387      	movs	r3, #135	@ 0x87
 80205fe:	009b      	lsls	r3, r3, #2
 8020600:	0018      	movs	r0, r3
 8020602:	f002 fa53 	bl	8022aac <USBD_static_malloc>
 8020606:	0001      	movs	r1, r0
 8020608:	687a      	ldr	r2, [r7, #4]
 802060a:	23ae      	movs	r3, #174	@ 0xae
 802060c:	009b      	lsls	r3, r3, #2
 802060e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8020610:	687a      	ldr	r2, [r7, #4]
 8020612:	23ae      	movs	r3, #174	@ 0xae
 8020614:	009b      	lsls	r3, r3, #2
 8020616:	58d3      	ldr	r3, [r2, r3]
 8020618:	2b00      	cmp	r3, #0
 802061a:	d104      	bne.n	8020626 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 802061c:	230f      	movs	r3, #15
 802061e:	18fb      	adds	r3, r7, r3
 8020620:	2201      	movs	r2, #1
 8020622:	701a      	strb	r2, [r3, #0]
 8020624:	e02c      	b.n	8020680 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020626:	687a      	ldr	r2, [r7, #4]
 8020628:	23ae      	movs	r3, #174	@ 0xae
 802062a:	009b      	lsls	r3, r3, #2
 802062c:	58d3      	ldr	r3, [r2, r3]
 802062e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8020630:	687a      	ldr	r2, [r7, #4]
 8020632:	23af      	movs	r3, #175	@ 0xaf
 8020634:	009b      	lsls	r3, r3, #2
 8020636:	58d3      	ldr	r3, [r2, r3]
 8020638:	681b      	ldr	r3, [r3, #0]
 802063a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 802063c:	68ba      	ldr	r2, [r7, #8]
 802063e:	2385      	movs	r3, #133	@ 0x85
 8020640:	009b      	lsls	r3, r3, #2
 8020642:	2100      	movs	r1, #0
 8020644:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8020646:	68ba      	ldr	r2, [r7, #8]
 8020648:	2386      	movs	r3, #134	@ 0x86
 802064a:	009b      	lsls	r3, r3, #2
 802064c:	2100      	movs	r1, #0
 802064e:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020650:	687b      	ldr	r3, [r7, #4]
 8020652:	7c1b      	ldrb	r3, [r3, #16]
 8020654:	2b00      	cmp	r3, #0
 8020656:	d10a      	bne.n	802066e <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8020658:	68ba      	ldr	r2, [r7, #8]
 802065a:	2381      	movs	r3, #129	@ 0x81
 802065c:	009b      	lsls	r3, r3, #2
 802065e:	58d2      	ldr	r2, [r2, r3]
 8020660:	2380      	movs	r3, #128	@ 0x80
 8020662:	009b      	lsls	r3, r3, #2
 8020664:	6878      	ldr	r0, [r7, #4]
 8020666:	2101      	movs	r1, #1
 8020668:	f002 f9d2 	bl	8022a10 <USBD_LL_PrepareReceive>
 802066c:	e008      	b.n	8020680 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 802066e:	68ba      	ldr	r2, [r7, #8]
 8020670:	2381      	movs	r3, #129	@ 0x81
 8020672:	009b      	lsls	r3, r3, #2
 8020674:	58d2      	ldr	r2, [r2, r3]
 8020676:	6878      	ldr	r0, [r7, #4]
 8020678:	2340      	movs	r3, #64	@ 0x40
 802067a:	2101      	movs	r1, #1
 802067c:	f002 f9c8 	bl	8022a10 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8020680:	230f      	movs	r3, #15
 8020682:	18fb      	adds	r3, r7, r3
 8020684:	781b      	ldrb	r3, [r3, #0]
}
 8020686:	0018      	movs	r0, r3
 8020688:	46bd      	mov	sp, r7
 802068a:	b004      	add	sp, #16
 802068c:	bd80      	pop	{r7, pc}

0802068e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802068e:	b580      	push	{r7, lr}
 8020690:	b084      	sub	sp, #16
 8020692:	af00      	add	r7, sp, #0
 8020694:	6078      	str	r0, [r7, #4]
 8020696:	000a      	movs	r2, r1
 8020698:	1cfb      	adds	r3, r7, #3
 802069a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 802069c:	230f      	movs	r3, #15
 802069e:	18fb      	adds	r3, r7, r3
 80206a0:	2200      	movs	r2, #0
 80206a2:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	2181      	movs	r1, #129	@ 0x81
 80206a8:	0018      	movs	r0, r3
 80206aa:	f002 f89d 	bl	80227e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80206ae:	687b      	ldr	r3, [r7, #4]
 80206b0:	2200      	movs	r2, #0
 80206b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	2101      	movs	r1, #1
 80206b8:	0018      	movs	r0, r3
 80206ba:	f002 f895 	bl	80227e8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80206be:	687a      	ldr	r2, [r7, #4]
 80206c0:	23b6      	movs	r3, #182	@ 0xb6
 80206c2:	005b      	lsls	r3, r3, #1
 80206c4:	2100      	movs	r1, #0
 80206c6:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80206c8:	687b      	ldr	r3, [r7, #4]
 80206ca:	2182      	movs	r1, #130	@ 0x82
 80206cc:	0018      	movs	r0, r3
 80206ce:	f002 f88b 	bl	80227e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80206d2:	687b      	ldr	r3, [r7, #4]
 80206d4:	2200      	movs	r2, #0
 80206d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80206d8:	687a      	ldr	r2, [r7, #4]
 80206da:	23ae      	movs	r3, #174	@ 0xae
 80206dc:	009b      	lsls	r3, r3, #2
 80206de:	58d3      	ldr	r3, [r2, r3]
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	d011      	beq.n	8020708 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80206e4:	687a      	ldr	r2, [r7, #4]
 80206e6:	23af      	movs	r3, #175	@ 0xaf
 80206e8:	009b      	lsls	r3, r3, #2
 80206ea:	58d3      	ldr	r3, [r2, r3]
 80206ec:	685b      	ldr	r3, [r3, #4]
 80206ee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80206f0:	687a      	ldr	r2, [r7, #4]
 80206f2:	23ae      	movs	r3, #174	@ 0xae
 80206f4:	009b      	lsls	r3, r3, #2
 80206f6:	58d3      	ldr	r3, [r2, r3]
 80206f8:	0018      	movs	r0, r3
 80206fa:	f002 f9e3 	bl	8022ac4 <USBD_static_free>
    pdev->pClassData = NULL;
 80206fe:	687a      	ldr	r2, [r7, #4]
 8020700:	23ae      	movs	r3, #174	@ 0xae
 8020702:	009b      	lsls	r3, r3, #2
 8020704:	2100      	movs	r1, #0
 8020706:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8020708:	230f      	movs	r3, #15
 802070a:	18fb      	adds	r3, r7, r3
 802070c:	781b      	ldrb	r3, [r3, #0]
}
 802070e:	0018      	movs	r0, r3
 8020710:	46bd      	mov	sp, r7
 8020712:	b004      	add	sp, #16
 8020714:	bd80      	pop	{r7, pc}
	...

08020718 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8020718:	b580      	push	{r7, lr}
 802071a:	b086      	sub	sp, #24
 802071c:	af00      	add	r7, sp, #0
 802071e:	6078      	str	r0, [r7, #4]
 8020720:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020722:	687a      	ldr	r2, [r7, #4]
 8020724:	23ae      	movs	r3, #174	@ 0xae
 8020726:	009b      	lsls	r3, r3, #2
 8020728:	58d3      	ldr	r3, [r2, r3]
 802072a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 802072c:	230f      	movs	r3, #15
 802072e:	18fb      	adds	r3, r7, r3
 8020730:	2200      	movs	r2, #0
 8020732:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8020734:	230c      	movs	r3, #12
 8020736:	18fb      	adds	r3, r7, r3
 8020738:	2200      	movs	r2, #0
 802073a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 802073c:	2317      	movs	r3, #23
 802073e:	18fb      	adds	r3, r7, r3
 8020740:	2200      	movs	r2, #0
 8020742:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020744:	683b      	ldr	r3, [r7, #0]
 8020746:	781b      	ldrb	r3, [r3, #0]
 8020748:	001a      	movs	r2, r3
 802074a:	2360      	movs	r3, #96	@ 0x60
 802074c:	4013      	ands	r3, r2
 802074e:	d03d      	beq.n	80207cc <USBD_CDC_Setup+0xb4>
 8020750:	2b20      	cmp	r3, #32
 8020752:	d000      	beq.n	8020756 <USBD_CDC_Setup+0x3e>
 8020754:	e094      	b.n	8020880 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8020756:	683b      	ldr	r3, [r7, #0]
 8020758:	88db      	ldrh	r3, [r3, #6]
 802075a:	2b00      	cmp	r3, #0
 802075c:	d02b      	beq.n	80207b6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 802075e:	683b      	ldr	r3, [r7, #0]
 8020760:	781b      	ldrb	r3, [r3, #0]
 8020762:	b25b      	sxtb	r3, r3
 8020764:	2b00      	cmp	r3, #0
 8020766:	da12      	bge.n	802078e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020768:	687a      	ldr	r2, [r7, #4]
 802076a:	23af      	movs	r3, #175	@ 0xaf
 802076c:	009b      	lsls	r3, r3, #2
 802076e:	58d3      	ldr	r3, [r2, r3]
 8020770:	689b      	ldr	r3, [r3, #8]
 8020772:	683a      	ldr	r2, [r7, #0]
 8020774:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8020776:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020778:	683a      	ldr	r2, [r7, #0]
 802077a:	88d2      	ldrh	r2, [r2, #6]
 802077c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 802077e:	6939      	ldr	r1, [r7, #16]
 8020780:	683b      	ldr	r3, [r7, #0]
 8020782:	88da      	ldrh	r2, [r3, #6]
 8020784:	687b      	ldr	r3, [r7, #4]
 8020786:	0018      	movs	r0, r3
 8020788:	f001 fbaf 	bl	8021eea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 802078c:	e083      	b.n	8020896 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 802078e:	683b      	ldr	r3, [r7, #0]
 8020790:	7859      	ldrb	r1, [r3, #1]
 8020792:	693a      	ldr	r2, [r7, #16]
 8020794:	2380      	movs	r3, #128	@ 0x80
 8020796:	009b      	lsls	r3, r3, #2
 8020798:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 802079a:	683b      	ldr	r3, [r7, #0]
 802079c:	88db      	ldrh	r3, [r3, #6]
 802079e:	b2d9      	uxtb	r1, r3
 80207a0:	693b      	ldr	r3, [r7, #16]
 80207a2:	4a40      	ldr	r2, [pc, #256]	@ (80208a4 <USBD_CDC_Setup+0x18c>)
 80207a4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80207a6:	6939      	ldr	r1, [r7, #16]
 80207a8:	683b      	ldr	r3, [r7, #0]
 80207aa:	88da      	ldrh	r2, [r3, #6]
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	0018      	movs	r0, r3
 80207b0:	f001 fbce 	bl	8021f50 <USBD_CtlPrepareRx>
      break;
 80207b4:	e06f      	b.n	8020896 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80207b6:	687a      	ldr	r2, [r7, #4]
 80207b8:	23af      	movs	r3, #175	@ 0xaf
 80207ba:	009b      	lsls	r3, r3, #2
 80207bc:	58d3      	ldr	r3, [r2, r3]
 80207be:	689b      	ldr	r3, [r3, #8]
 80207c0:	683a      	ldr	r2, [r7, #0]
 80207c2:	7850      	ldrb	r0, [r2, #1]
 80207c4:	6839      	ldr	r1, [r7, #0]
 80207c6:	2200      	movs	r2, #0
 80207c8:	4798      	blx	r3
      break;
 80207ca:	e064      	b.n	8020896 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80207cc:	683b      	ldr	r3, [r7, #0]
 80207ce:	785b      	ldrb	r3, [r3, #1]
 80207d0:	2b0b      	cmp	r3, #11
 80207d2:	d037      	beq.n	8020844 <USBD_CDC_Setup+0x12c>
 80207d4:	dc47      	bgt.n	8020866 <USBD_CDC_Setup+0x14e>
 80207d6:	2b00      	cmp	r3, #0
 80207d8:	d002      	beq.n	80207e0 <USBD_CDC_Setup+0xc8>
 80207da:	2b0a      	cmp	r3, #10
 80207dc:	d019      	beq.n	8020812 <USBD_CDC_Setup+0xfa>
 80207de:	e042      	b.n	8020866 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80207e0:	687a      	ldr	r2, [r7, #4]
 80207e2:	23a7      	movs	r3, #167	@ 0xa7
 80207e4:	009b      	lsls	r3, r3, #2
 80207e6:	5cd3      	ldrb	r3, [r2, r3]
 80207e8:	2b03      	cmp	r3, #3
 80207ea:	d107      	bne.n	80207fc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80207ec:	230c      	movs	r3, #12
 80207ee:	18f9      	adds	r1, r7, r3
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	2202      	movs	r2, #2
 80207f4:	0018      	movs	r0, r3
 80207f6:	f001 fb78 	bl	8021eea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80207fa:	e040      	b.n	802087e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80207fc:	683a      	ldr	r2, [r7, #0]
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	0011      	movs	r1, r2
 8020802:	0018      	movs	r0, r3
 8020804:	f001 faf3 	bl	8021dee <USBD_CtlError>
            ret = USBD_FAIL;
 8020808:	2317      	movs	r3, #23
 802080a:	18fb      	adds	r3, r7, r3
 802080c:	2202      	movs	r2, #2
 802080e:	701a      	strb	r2, [r3, #0]
          break;
 8020810:	e035      	b.n	802087e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020812:	687a      	ldr	r2, [r7, #4]
 8020814:	23a7      	movs	r3, #167	@ 0xa7
 8020816:	009b      	lsls	r3, r3, #2
 8020818:	5cd3      	ldrb	r3, [r2, r3]
 802081a:	2b03      	cmp	r3, #3
 802081c:	d107      	bne.n	802082e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 802081e:	230f      	movs	r3, #15
 8020820:	18f9      	adds	r1, r7, r3
 8020822:	687b      	ldr	r3, [r7, #4]
 8020824:	2201      	movs	r2, #1
 8020826:	0018      	movs	r0, r3
 8020828:	f001 fb5f 	bl	8021eea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802082c:	e027      	b.n	802087e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 802082e:	683a      	ldr	r2, [r7, #0]
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	0011      	movs	r1, r2
 8020834:	0018      	movs	r0, r3
 8020836:	f001 fada 	bl	8021dee <USBD_CtlError>
            ret = USBD_FAIL;
 802083a:	2317      	movs	r3, #23
 802083c:	18fb      	adds	r3, r7, r3
 802083e:	2202      	movs	r2, #2
 8020840:	701a      	strb	r2, [r3, #0]
          break;
 8020842:	e01c      	b.n	802087e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8020844:	687a      	ldr	r2, [r7, #4]
 8020846:	23a7      	movs	r3, #167	@ 0xa7
 8020848:	009b      	lsls	r3, r3, #2
 802084a:	5cd3      	ldrb	r3, [r2, r3]
 802084c:	2b03      	cmp	r3, #3
 802084e:	d015      	beq.n	802087c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8020850:	683a      	ldr	r2, [r7, #0]
 8020852:	687b      	ldr	r3, [r7, #4]
 8020854:	0011      	movs	r1, r2
 8020856:	0018      	movs	r0, r3
 8020858:	f001 fac9 	bl	8021dee <USBD_CtlError>
            ret = USBD_FAIL;
 802085c:	2317      	movs	r3, #23
 802085e:	18fb      	adds	r3, r7, r3
 8020860:	2202      	movs	r2, #2
 8020862:	701a      	strb	r2, [r3, #0]
          }
          break;
 8020864:	e00a      	b.n	802087c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8020866:	683a      	ldr	r2, [r7, #0]
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	0011      	movs	r1, r2
 802086c:	0018      	movs	r0, r3
 802086e:	f001 fabe 	bl	8021dee <USBD_CtlError>
          ret = USBD_FAIL;
 8020872:	2317      	movs	r3, #23
 8020874:	18fb      	adds	r3, r7, r3
 8020876:	2202      	movs	r2, #2
 8020878:	701a      	strb	r2, [r3, #0]
          break;
 802087a:	e000      	b.n	802087e <USBD_CDC_Setup+0x166>
          break;
 802087c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 802087e:	e00a      	b.n	8020896 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8020880:	683a      	ldr	r2, [r7, #0]
 8020882:	687b      	ldr	r3, [r7, #4]
 8020884:	0011      	movs	r1, r2
 8020886:	0018      	movs	r0, r3
 8020888:	f001 fab1 	bl	8021dee <USBD_CtlError>
      ret = USBD_FAIL;
 802088c:	2317      	movs	r3, #23
 802088e:	18fb      	adds	r3, r7, r3
 8020890:	2202      	movs	r2, #2
 8020892:	701a      	strb	r2, [r3, #0]
      break;
 8020894:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8020896:	2317      	movs	r3, #23
 8020898:	18fb      	adds	r3, r7, r3
 802089a:	781b      	ldrb	r3, [r3, #0]
}
 802089c:	0018      	movs	r0, r3
 802089e:	46bd      	mov	sp, r7
 80208a0:	b006      	add	sp, #24
 80208a2:	bd80      	pop	{r7, pc}
 80208a4:	00000201 	.word	0x00000201

080208a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80208a8:	b580      	push	{r7, lr}
 80208aa:	b084      	sub	sp, #16
 80208ac:	af00      	add	r7, sp, #0
 80208ae:	6078      	str	r0, [r7, #4]
 80208b0:	000a      	movs	r2, r1
 80208b2:	1cfb      	adds	r3, r7, #3
 80208b4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80208b6:	687a      	ldr	r2, [r7, #4]
 80208b8:	23ae      	movs	r3, #174	@ 0xae
 80208ba:	009b      	lsls	r3, r3, #2
 80208bc:	58d3      	ldr	r3, [r2, r3]
 80208be:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80208c0:	687a      	ldr	r2, [r7, #4]
 80208c2:	23b0      	movs	r3, #176	@ 0xb0
 80208c4:	009b      	lsls	r3, r3, #2
 80208c6:	58d3      	ldr	r3, [r2, r3]
 80208c8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80208ca:	687a      	ldr	r2, [r7, #4]
 80208cc:	23ae      	movs	r3, #174	@ 0xae
 80208ce:	009b      	lsls	r3, r3, #2
 80208d0:	58d3      	ldr	r3, [r2, r3]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	d03e      	beq.n	8020954 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80208d6:	1cfb      	adds	r3, r7, #3
 80208d8:	781a      	ldrb	r2, [r3, #0]
 80208da:	6879      	ldr	r1, [r7, #4]
 80208dc:	0013      	movs	r3, r2
 80208de:	009b      	lsls	r3, r3, #2
 80208e0:	189b      	adds	r3, r3, r2
 80208e2:	009b      	lsls	r3, r3, #2
 80208e4:	18cb      	adds	r3, r1, r3
 80208e6:	331c      	adds	r3, #28
 80208e8:	681b      	ldr	r3, [r3, #0]
 80208ea:	2b00      	cmp	r3, #0
 80208ec:	d02b      	beq.n	8020946 <USBD_CDC_DataIn+0x9e>
 80208ee:	1cfb      	adds	r3, r7, #3
 80208f0:	781a      	ldrb	r2, [r3, #0]
 80208f2:	6879      	ldr	r1, [r7, #4]
 80208f4:	0013      	movs	r3, r2
 80208f6:	009b      	lsls	r3, r3, #2
 80208f8:	189b      	adds	r3, r3, r2
 80208fa:	009b      	lsls	r3, r3, #2
 80208fc:	18cb      	adds	r3, r1, r3
 80208fe:	331c      	adds	r3, #28
 8020900:	6818      	ldr	r0, [r3, #0]
 8020902:	1cfb      	adds	r3, r7, #3
 8020904:	781a      	ldrb	r2, [r3, #0]
 8020906:	68b9      	ldr	r1, [r7, #8]
 8020908:	0013      	movs	r3, r2
 802090a:	009b      	lsls	r3, r3, #2
 802090c:	189b      	adds	r3, r3, r2
 802090e:	00db      	lsls	r3, r3, #3
 8020910:	18cb      	adds	r3, r1, r3
 8020912:	3338      	adds	r3, #56	@ 0x38
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	0019      	movs	r1, r3
 8020918:	f7df fcca 	bl	80002b0 <__aeabi_uidivmod>
 802091c:	1e0b      	subs	r3, r1, #0
 802091e:	d112      	bne.n	8020946 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8020920:	1cfb      	adds	r3, r7, #3
 8020922:	781a      	ldrb	r2, [r3, #0]
 8020924:	6879      	ldr	r1, [r7, #4]
 8020926:	0013      	movs	r3, r2
 8020928:	009b      	lsls	r3, r3, #2
 802092a:	189b      	adds	r3, r3, r2
 802092c:	009b      	lsls	r3, r3, #2
 802092e:	18cb      	adds	r3, r1, r3
 8020930:	331c      	adds	r3, #28
 8020932:	2200      	movs	r2, #0
 8020934:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8020936:	1cfb      	adds	r3, r7, #3
 8020938:	7819      	ldrb	r1, [r3, #0]
 802093a:	6878      	ldr	r0, [r7, #4]
 802093c:	2300      	movs	r3, #0
 802093e:	2200      	movs	r2, #0
 8020940:	f002 f82f 	bl	80229a2 <USBD_LL_Transmit>
 8020944:	e004      	b.n	8020950 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8020946:	68fa      	ldr	r2, [r7, #12]
 8020948:	2385      	movs	r3, #133	@ 0x85
 802094a:	009b      	lsls	r3, r3, #2
 802094c:	2100      	movs	r1, #0
 802094e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8020950:	2300      	movs	r3, #0
 8020952:	e000      	b.n	8020956 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8020954:	2302      	movs	r3, #2
  }
}
 8020956:	0018      	movs	r0, r3
 8020958:	46bd      	mov	sp, r7
 802095a:	b004      	add	sp, #16
 802095c:	bd80      	pop	{r7, pc}

0802095e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 802095e:	b580      	push	{r7, lr}
 8020960:	b084      	sub	sp, #16
 8020962:	af00      	add	r7, sp, #0
 8020964:	6078      	str	r0, [r7, #4]
 8020966:	000a      	movs	r2, r1
 8020968:	1cfb      	adds	r3, r7, #3
 802096a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802096c:	687a      	ldr	r2, [r7, #4]
 802096e:	23ae      	movs	r3, #174	@ 0xae
 8020970:	009b      	lsls	r3, r3, #2
 8020972:	58d3      	ldr	r3, [r2, r3]
 8020974:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8020976:	1cfb      	adds	r3, r7, #3
 8020978:	781a      	ldrb	r2, [r3, #0]
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	0011      	movs	r1, r2
 802097e:	0018      	movs	r0, r3
 8020980:	f002 f87d 	bl	8022a7e <USBD_LL_GetRxDataSize>
 8020984:	0001      	movs	r1, r0
 8020986:	68fa      	ldr	r2, [r7, #12]
 8020988:	2383      	movs	r3, #131	@ 0x83
 802098a:	009b      	lsls	r3, r3, #2
 802098c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 802098e:	687a      	ldr	r2, [r7, #4]
 8020990:	23ae      	movs	r3, #174	@ 0xae
 8020992:	009b      	lsls	r3, r3, #2
 8020994:	58d3      	ldr	r3, [r2, r3]
 8020996:	2b00      	cmp	r3, #0
 8020998:	d011      	beq.n	80209be <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802099a:	687a      	ldr	r2, [r7, #4]
 802099c:	23af      	movs	r3, #175	@ 0xaf
 802099e:	009b      	lsls	r3, r3, #2
 80209a0:	58d3      	ldr	r3, [r2, r3]
 80209a2:	68da      	ldr	r2, [r3, #12]
 80209a4:	68f9      	ldr	r1, [r7, #12]
 80209a6:	2381      	movs	r3, #129	@ 0x81
 80209a8:	009b      	lsls	r3, r3, #2
 80209aa:	58c8      	ldr	r0, [r1, r3]
 80209ac:	68fb      	ldr	r3, [r7, #12]
 80209ae:	2183      	movs	r1, #131	@ 0x83
 80209b0:	0089      	lsls	r1, r1, #2
 80209b2:	468c      	mov	ip, r1
 80209b4:	4463      	add	r3, ip
 80209b6:	0019      	movs	r1, r3
 80209b8:	4790      	blx	r2

    return USBD_OK;
 80209ba:	2300      	movs	r3, #0
 80209bc:	e000      	b.n	80209c0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 80209be:	2302      	movs	r3, #2
  }
}
 80209c0:	0018      	movs	r0, r3
 80209c2:	46bd      	mov	sp, r7
 80209c4:	b004      	add	sp, #16
 80209c6:	bd80      	pop	{r7, pc}

080209c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80209c8:	b590      	push	{r4, r7, lr}
 80209ca:	b085      	sub	sp, #20
 80209cc:	af00      	add	r7, sp, #0
 80209ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80209d0:	687a      	ldr	r2, [r7, #4]
 80209d2:	23ae      	movs	r3, #174	@ 0xae
 80209d4:	009b      	lsls	r3, r3, #2
 80209d6:	58d3      	ldr	r3, [r2, r3]
 80209d8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80209da:	687a      	ldr	r2, [r7, #4]
 80209dc:	23af      	movs	r3, #175	@ 0xaf
 80209de:	009b      	lsls	r3, r3, #2
 80209e0:	58d3      	ldr	r3, [r2, r3]
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	d018      	beq.n	8020a18 <USBD_CDC_EP0_RxReady+0x50>
 80209e6:	68fa      	ldr	r2, [r7, #12]
 80209e8:	2380      	movs	r3, #128	@ 0x80
 80209ea:	009b      	lsls	r3, r3, #2
 80209ec:	5cd3      	ldrb	r3, [r2, r3]
 80209ee:	2bff      	cmp	r3, #255	@ 0xff
 80209f0:	d012      	beq.n	8020a18 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80209f2:	687a      	ldr	r2, [r7, #4]
 80209f4:	23af      	movs	r3, #175	@ 0xaf
 80209f6:	009b      	lsls	r3, r3, #2
 80209f8:	58d3      	ldr	r3, [r2, r3]
 80209fa:	689b      	ldr	r3, [r3, #8]
 80209fc:	68f9      	ldr	r1, [r7, #12]
 80209fe:	2280      	movs	r2, #128	@ 0x80
 8020a00:	0092      	lsls	r2, r2, #2
 8020a02:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8020a04:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8020a06:	68fa      	ldr	r2, [r7, #12]
 8020a08:	4c06      	ldr	r4, [pc, #24]	@ (8020a24 <USBD_CDC_EP0_RxReady+0x5c>)
 8020a0a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020a0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8020a0e:	68fa      	ldr	r2, [r7, #12]
 8020a10:	2380      	movs	r3, #128	@ 0x80
 8020a12:	009b      	lsls	r3, r3, #2
 8020a14:	21ff      	movs	r1, #255	@ 0xff
 8020a16:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8020a18:	2300      	movs	r3, #0
}
 8020a1a:	0018      	movs	r0, r3
 8020a1c:	46bd      	mov	sp, r7
 8020a1e:	b005      	add	sp, #20
 8020a20:	bd90      	pop	{r4, r7, pc}
 8020a22:	46c0      	nop			@ (mov r8, r8)
 8020a24:	00000201 	.word	0x00000201

08020a28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8020a28:	b580      	push	{r7, lr}
 8020a2a:	b082      	sub	sp, #8
 8020a2c:	af00      	add	r7, sp, #0
 8020a2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	2243      	movs	r2, #67	@ 0x43
 8020a34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8020a36:	4b02      	ldr	r3, [pc, #8]	@ (8020a40 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8020a38:	0018      	movs	r0, r3
 8020a3a:	46bd      	mov	sp, r7
 8020a3c:	b002      	add	sp, #8
 8020a3e:	bd80      	pop	{r7, pc}
 8020a40:	20000180 	.word	0x20000180

08020a44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8020a44:	b580      	push	{r7, lr}
 8020a46:	b082      	sub	sp, #8
 8020a48:	af00      	add	r7, sp, #0
 8020a4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	2243      	movs	r2, #67	@ 0x43
 8020a50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8020a52:	4b02      	ldr	r3, [pc, #8]	@ (8020a5c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8020a54:	0018      	movs	r0, r3
 8020a56:	46bd      	mov	sp, r7
 8020a58:	b002      	add	sp, #8
 8020a5a:	bd80      	pop	{r7, pc}
 8020a5c:	2000013c 	.word	0x2000013c

08020a60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8020a60:	b580      	push	{r7, lr}
 8020a62:	b082      	sub	sp, #8
 8020a64:	af00      	add	r7, sp, #0
 8020a66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	2243      	movs	r2, #67	@ 0x43
 8020a6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8020a6e:	4b02      	ldr	r3, [pc, #8]	@ (8020a78 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8020a70:	0018      	movs	r0, r3
 8020a72:	46bd      	mov	sp, r7
 8020a74:	b002      	add	sp, #8
 8020a76:	bd80      	pop	{r7, pc}
 8020a78:	200001c4 	.word	0x200001c4

08020a7c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8020a7c:	b580      	push	{r7, lr}
 8020a7e:	b082      	sub	sp, #8
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	220a      	movs	r2, #10
 8020a88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8020a8a:	4b02      	ldr	r3, [pc, #8]	@ (8020a94 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8020a8c:	0018      	movs	r0, r3
 8020a8e:	46bd      	mov	sp, r7
 8020a90:	b002      	add	sp, #8
 8020a92:	bd80      	pop	{r7, pc}
 8020a94:	200000f8 	.word	0x200000f8

08020a98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8020a98:	b580      	push	{r7, lr}
 8020a9a:	b084      	sub	sp, #16
 8020a9c:	af00      	add	r7, sp, #0
 8020a9e:	6078      	str	r0, [r7, #4]
 8020aa0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8020aa2:	200f      	movs	r0, #15
 8020aa4:	183b      	adds	r3, r7, r0
 8020aa6:	2202      	movs	r2, #2
 8020aa8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8020aaa:	683b      	ldr	r3, [r7, #0]
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	d007      	beq.n	8020ac0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8020ab0:	687a      	ldr	r2, [r7, #4]
 8020ab2:	23af      	movs	r3, #175	@ 0xaf
 8020ab4:	009b      	lsls	r3, r3, #2
 8020ab6:	6839      	ldr	r1, [r7, #0]
 8020ab8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8020aba:	183b      	adds	r3, r7, r0
 8020abc:	2200      	movs	r2, #0
 8020abe:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8020ac0:	230f      	movs	r3, #15
 8020ac2:	18fb      	adds	r3, r7, r3
 8020ac4:	781b      	ldrb	r3, [r3, #0]
}
 8020ac6:	0018      	movs	r0, r3
 8020ac8:	46bd      	mov	sp, r7
 8020aca:	b004      	add	sp, #16
 8020acc:	bd80      	pop	{r7, pc}

08020ace <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8020ace:	b580      	push	{r7, lr}
 8020ad0:	b086      	sub	sp, #24
 8020ad2:	af00      	add	r7, sp, #0
 8020ad4:	60f8      	str	r0, [r7, #12]
 8020ad6:	60b9      	str	r1, [r7, #8]
 8020ad8:	1dbb      	adds	r3, r7, #6
 8020ada:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020adc:	68fa      	ldr	r2, [r7, #12]
 8020ade:	23ae      	movs	r3, #174	@ 0xae
 8020ae0:	009b      	lsls	r3, r3, #2
 8020ae2:	58d3      	ldr	r3, [r2, r3]
 8020ae4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8020ae6:	697a      	ldr	r2, [r7, #20]
 8020ae8:	2382      	movs	r3, #130	@ 0x82
 8020aea:	009b      	lsls	r3, r3, #2
 8020aec:	68b9      	ldr	r1, [r7, #8]
 8020aee:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8020af0:	1dbb      	adds	r3, r7, #6
 8020af2:	8819      	ldrh	r1, [r3, #0]
 8020af4:	697a      	ldr	r2, [r7, #20]
 8020af6:	2384      	movs	r3, #132	@ 0x84
 8020af8:	009b      	lsls	r3, r3, #2
 8020afa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020afc:	2300      	movs	r3, #0
}
 8020afe:	0018      	movs	r0, r3
 8020b00:	46bd      	mov	sp, r7
 8020b02:	b006      	add	sp, #24
 8020b04:	bd80      	pop	{r7, pc}

08020b06 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8020b06:	b580      	push	{r7, lr}
 8020b08:	b084      	sub	sp, #16
 8020b0a:	af00      	add	r7, sp, #0
 8020b0c:	6078      	str	r0, [r7, #4]
 8020b0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020b10:	687a      	ldr	r2, [r7, #4]
 8020b12:	23ae      	movs	r3, #174	@ 0xae
 8020b14:	009b      	lsls	r3, r3, #2
 8020b16:	58d3      	ldr	r3, [r2, r3]
 8020b18:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8020b1a:	68fa      	ldr	r2, [r7, #12]
 8020b1c:	2381      	movs	r3, #129	@ 0x81
 8020b1e:	009b      	lsls	r3, r3, #2
 8020b20:	6839      	ldr	r1, [r7, #0]
 8020b22:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020b24:	2300      	movs	r3, #0
}
 8020b26:	0018      	movs	r0, r3
 8020b28:	46bd      	mov	sp, r7
 8020b2a:	b004      	add	sp, #16
 8020b2c:	bd80      	pop	{r7, pc}

08020b2e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8020b2e:	b580      	push	{r7, lr}
 8020b30:	b084      	sub	sp, #16
 8020b32:	af00      	add	r7, sp, #0
 8020b34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020b36:	687a      	ldr	r2, [r7, #4]
 8020b38:	23ae      	movs	r3, #174	@ 0xae
 8020b3a:	009b      	lsls	r3, r3, #2
 8020b3c:	58d3      	ldr	r3, [r2, r3]
 8020b3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8020b40:	687a      	ldr	r2, [r7, #4]
 8020b42:	23ae      	movs	r3, #174	@ 0xae
 8020b44:	009b      	lsls	r3, r3, #2
 8020b46:	58d3      	ldr	r3, [r2, r3]
 8020b48:	2b00      	cmp	r3, #0
 8020b4a:	d022      	beq.n	8020b92 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8020b4c:	68fa      	ldr	r2, [r7, #12]
 8020b4e:	2385      	movs	r3, #133	@ 0x85
 8020b50:	009b      	lsls	r3, r3, #2
 8020b52:	58d3      	ldr	r3, [r2, r3]
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	d11a      	bne.n	8020b8e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8020b58:	68fa      	ldr	r2, [r7, #12]
 8020b5a:	2385      	movs	r3, #133	@ 0x85
 8020b5c:	009b      	lsls	r3, r3, #2
 8020b5e:	2101      	movs	r1, #1
 8020b60:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8020b62:	68fa      	ldr	r2, [r7, #12]
 8020b64:	2384      	movs	r3, #132	@ 0x84
 8020b66:	009b      	lsls	r3, r3, #2
 8020b68:	58d2      	ldr	r2, [r2, r3]
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020b6e:	68fa      	ldr	r2, [r7, #12]
 8020b70:	2382      	movs	r3, #130	@ 0x82
 8020b72:	009b      	lsls	r3, r3, #2
 8020b74:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8020b76:	68fa      	ldr	r2, [r7, #12]
 8020b78:	2384      	movs	r3, #132	@ 0x84
 8020b7a:	009b      	lsls	r3, r3, #2
 8020b7c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020b7e:	b29b      	uxth	r3, r3
 8020b80:	6878      	ldr	r0, [r7, #4]
 8020b82:	000a      	movs	r2, r1
 8020b84:	2181      	movs	r1, #129	@ 0x81
 8020b86:	f001 ff0c 	bl	80229a2 <USBD_LL_Transmit>

      return USBD_OK;
 8020b8a:	2300      	movs	r3, #0
 8020b8c:	e002      	b.n	8020b94 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8020b8e:	2301      	movs	r3, #1
 8020b90:	e000      	b.n	8020b94 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8020b92:	2302      	movs	r3, #2
  }
}
 8020b94:	0018      	movs	r0, r3
 8020b96:	46bd      	mov	sp, r7
 8020b98:	b004      	add	sp, #16
 8020b9a:	bd80      	pop	{r7, pc}

08020b9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8020b9c:	b580      	push	{r7, lr}
 8020b9e:	b084      	sub	sp, #16
 8020ba0:	af00      	add	r7, sp, #0
 8020ba2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020ba4:	687a      	ldr	r2, [r7, #4]
 8020ba6:	23ae      	movs	r3, #174	@ 0xae
 8020ba8:	009b      	lsls	r3, r3, #2
 8020baa:	58d3      	ldr	r3, [r2, r3]
 8020bac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8020bae:	687a      	ldr	r2, [r7, #4]
 8020bb0:	23ae      	movs	r3, #174	@ 0xae
 8020bb2:	009b      	lsls	r3, r3, #2
 8020bb4:	58d3      	ldr	r3, [r2, r3]
 8020bb6:	2b00      	cmp	r3, #0
 8020bb8:	d019      	beq.n	8020bee <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	7c1b      	ldrb	r3, [r3, #16]
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	d10a      	bne.n	8020bd8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8020bc2:	68fa      	ldr	r2, [r7, #12]
 8020bc4:	2381      	movs	r3, #129	@ 0x81
 8020bc6:	009b      	lsls	r3, r3, #2
 8020bc8:	58d2      	ldr	r2, [r2, r3]
 8020bca:	2380      	movs	r3, #128	@ 0x80
 8020bcc:	009b      	lsls	r3, r3, #2
 8020bce:	6878      	ldr	r0, [r7, #4]
 8020bd0:	2101      	movs	r1, #1
 8020bd2:	f001 ff1d 	bl	8022a10 <USBD_LL_PrepareReceive>
 8020bd6:	e008      	b.n	8020bea <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8020bd8:	68fa      	ldr	r2, [r7, #12]
 8020bda:	2381      	movs	r3, #129	@ 0x81
 8020bdc:	009b      	lsls	r3, r3, #2
 8020bde:	58d2      	ldr	r2, [r2, r3]
 8020be0:	6878      	ldr	r0, [r7, #4]
 8020be2:	2340      	movs	r3, #64	@ 0x40
 8020be4:	2101      	movs	r1, #1
 8020be6:	f001 ff13 	bl	8022a10 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8020bea:	2300      	movs	r3, #0
 8020bec:	e000      	b.n	8020bf0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8020bee:	2302      	movs	r3, #2
  }
}
 8020bf0:	0018      	movs	r0, r3
 8020bf2:	46bd      	mov	sp, r7
 8020bf4:	b004      	add	sp, #16
 8020bf6:	bd80      	pop	{r7, pc}

08020bf8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020bf8:	b580      	push	{r7, lr}
 8020bfa:	b084      	sub	sp, #16
 8020bfc:	af00      	add	r7, sp, #0
 8020bfe:	60f8      	str	r0, [r7, #12]
 8020c00:	60b9      	str	r1, [r7, #8]
 8020c02:	1dfb      	adds	r3, r7, #7
 8020c04:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020c06:	68fb      	ldr	r3, [r7, #12]
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d101      	bne.n	8020c10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020c0c:	2302      	movs	r3, #2
 8020c0e:	e020      	b.n	8020c52 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8020c10:	68fa      	ldr	r2, [r7, #12]
 8020c12:	23ad      	movs	r3, #173	@ 0xad
 8020c14:	009b      	lsls	r3, r3, #2
 8020c16:	58d3      	ldr	r3, [r2, r3]
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d004      	beq.n	8020c26 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8020c1c:	68fa      	ldr	r2, [r7, #12]
 8020c1e:	23ad      	movs	r3, #173	@ 0xad
 8020c20:	009b      	lsls	r3, r3, #2
 8020c22:	2100      	movs	r1, #0
 8020c24:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020c26:	68bb      	ldr	r3, [r7, #8]
 8020c28:	2b00      	cmp	r3, #0
 8020c2a:	d004      	beq.n	8020c36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020c2c:	68fa      	ldr	r2, [r7, #12]
 8020c2e:	23ac      	movs	r3, #172	@ 0xac
 8020c30:	009b      	lsls	r3, r3, #2
 8020c32:	68b9      	ldr	r1, [r7, #8]
 8020c34:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020c36:	68fa      	ldr	r2, [r7, #12]
 8020c38:	23a7      	movs	r3, #167	@ 0xa7
 8020c3a:	009b      	lsls	r3, r3, #2
 8020c3c:	2101      	movs	r1, #1
 8020c3e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8020c40:	68fb      	ldr	r3, [r7, #12]
 8020c42:	1dfa      	adds	r2, r7, #7
 8020c44:	7812      	ldrb	r2, [r2, #0]
 8020c46:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8020c48:	68fb      	ldr	r3, [r7, #12]
 8020c4a:	0018      	movs	r0, r3
 8020c4c:	f001 fd0c 	bl	8022668 <USBD_LL_Init>

  return USBD_OK;
 8020c50:	2300      	movs	r3, #0
}
 8020c52:	0018      	movs	r0, r3
 8020c54:	46bd      	mov	sp, r7
 8020c56:	b004      	add	sp, #16
 8020c58:	bd80      	pop	{r7, pc}

08020c5a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020c5a:	b580      	push	{r7, lr}
 8020c5c:	b084      	sub	sp, #16
 8020c5e:	af00      	add	r7, sp, #0
 8020c60:	6078      	str	r0, [r7, #4]
 8020c62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8020c64:	200f      	movs	r0, #15
 8020c66:	183b      	adds	r3, r7, r0
 8020c68:	2200      	movs	r2, #0
 8020c6a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8020c6c:	683b      	ldr	r3, [r7, #0]
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d008      	beq.n	8020c84 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8020c72:	687a      	ldr	r2, [r7, #4]
 8020c74:	23ad      	movs	r3, #173	@ 0xad
 8020c76:	009b      	lsls	r3, r3, #2
 8020c78:	6839      	ldr	r1, [r7, #0]
 8020c7a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8020c7c:	183b      	adds	r3, r7, r0
 8020c7e:	2200      	movs	r2, #0
 8020c80:	701a      	strb	r2, [r3, #0]
 8020c82:	e003      	b.n	8020c8c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8020c84:	230f      	movs	r3, #15
 8020c86:	18fb      	adds	r3, r7, r3
 8020c88:	2202      	movs	r2, #2
 8020c8a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8020c8c:	230f      	movs	r3, #15
 8020c8e:	18fb      	adds	r3, r7, r3
 8020c90:	781b      	ldrb	r3, [r3, #0]
}
 8020c92:	0018      	movs	r0, r3
 8020c94:	46bd      	mov	sp, r7
 8020c96:	b004      	add	sp, #16
 8020c98:	bd80      	pop	{r7, pc}

08020c9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020c9a:	b580      	push	{r7, lr}
 8020c9c:	b082      	sub	sp, #8
 8020c9e:	af00      	add	r7, sp, #0
 8020ca0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	0018      	movs	r0, r3
 8020ca6:	f001 fd43 	bl	8022730 <USBD_LL_Start>

  return USBD_OK;
 8020caa:	2300      	movs	r3, #0
}
 8020cac:	0018      	movs	r0, r3
 8020cae:	46bd      	mov	sp, r7
 8020cb0:	b002      	add	sp, #8
 8020cb2:	bd80      	pop	{r7, pc}

08020cb4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020cb4:	b580      	push	{r7, lr}
 8020cb6:	b082      	sub	sp, #8
 8020cb8:	af00      	add	r7, sp, #0
 8020cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020cbc:	2300      	movs	r3, #0
}
 8020cbe:	0018      	movs	r0, r3
 8020cc0:	46bd      	mov	sp, r7
 8020cc2:	b002      	add	sp, #8
 8020cc4:	bd80      	pop	{r7, pc}

08020cc6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8020cc6:	b590      	push	{r4, r7, lr}
 8020cc8:	b085      	sub	sp, #20
 8020cca:	af00      	add	r7, sp, #0
 8020ccc:	6078      	str	r0, [r7, #4]
 8020cce:	000a      	movs	r2, r1
 8020cd0:	1cfb      	adds	r3, r7, #3
 8020cd2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020cd4:	240f      	movs	r4, #15
 8020cd6:	193b      	adds	r3, r7, r4
 8020cd8:	2202      	movs	r2, #2
 8020cda:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8020cdc:	687a      	ldr	r2, [r7, #4]
 8020cde:	23ad      	movs	r3, #173	@ 0xad
 8020ce0:	009b      	lsls	r3, r3, #2
 8020ce2:	58d3      	ldr	r3, [r2, r3]
 8020ce4:	2b00      	cmp	r3, #0
 8020ce6:	d00e      	beq.n	8020d06 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8020ce8:	687a      	ldr	r2, [r7, #4]
 8020cea:	23ad      	movs	r3, #173	@ 0xad
 8020cec:	009b      	lsls	r3, r3, #2
 8020cee:	58d3      	ldr	r3, [r2, r3]
 8020cf0:	681b      	ldr	r3, [r3, #0]
 8020cf2:	1cfa      	adds	r2, r7, #3
 8020cf4:	7811      	ldrb	r1, [r2, #0]
 8020cf6:	687a      	ldr	r2, [r7, #4]
 8020cf8:	0010      	movs	r0, r2
 8020cfa:	4798      	blx	r3
 8020cfc:	1e03      	subs	r3, r0, #0
 8020cfe:	d102      	bne.n	8020d06 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8020d00:	193b      	adds	r3, r7, r4
 8020d02:	2200      	movs	r2, #0
 8020d04:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8020d06:	230f      	movs	r3, #15
 8020d08:	18fb      	adds	r3, r7, r3
 8020d0a:	781b      	ldrb	r3, [r3, #0]
}
 8020d0c:	0018      	movs	r0, r3
 8020d0e:	46bd      	mov	sp, r7
 8020d10:	b005      	add	sp, #20
 8020d12:	bd90      	pop	{r4, r7, pc}

08020d14 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8020d14:	b580      	push	{r7, lr}
 8020d16:	b082      	sub	sp, #8
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
 8020d1c:	000a      	movs	r2, r1
 8020d1e:	1cfb      	adds	r3, r7, #3
 8020d20:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8020d22:	687a      	ldr	r2, [r7, #4]
 8020d24:	23ad      	movs	r3, #173	@ 0xad
 8020d26:	009b      	lsls	r3, r3, #2
 8020d28:	58d3      	ldr	r3, [r2, r3]
 8020d2a:	685b      	ldr	r3, [r3, #4]
 8020d2c:	1cfa      	adds	r2, r7, #3
 8020d2e:	7811      	ldrb	r1, [r2, #0]
 8020d30:	687a      	ldr	r2, [r7, #4]
 8020d32:	0010      	movs	r0, r2
 8020d34:	4798      	blx	r3

  return USBD_OK;
 8020d36:	2300      	movs	r3, #0
}
 8020d38:	0018      	movs	r0, r3
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	b002      	add	sp, #8
 8020d3e:	bd80      	pop	{r7, pc}

08020d40 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020d40:	b580      	push	{r7, lr}
 8020d42:	b082      	sub	sp, #8
 8020d44:	af00      	add	r7, sp, #0
 8020d46:	6078      	str	r0, [r7, #4]
 8020d48:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	22aa      	movs	r2, #170	@ 0xaa
 8020d4e:	0092      	lsls	r2, r2, #2
 8020d50:	4694      	mov	ip, r2
 8020d52:	4463      	add	r3, ip
 8020d54:	683a      	ldr	r2, [r7, #0]
 8020d56:	0011      	movs	r1, r2
 8020d58:	0018      	movs	r0, r3
 8020d5a:	f001 f810 	bl	8021d7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020d5e:	687a      	ldr	r2, [r7, #4]
 8020d60:	23a5      	movs	r3, #165	@ 0xa5
 8020d62:	009b      	lsls	r3, r3, #2
 8020d64:	2101      	movs	r1, #1
 8020d66:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8020d68:	687b      	ldr	r3, [r7, #4]
 8020d6a:	4a23      	ldr	r2, [pc, #140]	@ (8020df8 <USBD_LL_SetupStage+0xb8>)
 8020d6c:	5a9b      	ldrh	r3, [r3, r2]
 8020d6e:	0019      	movs	r1, r3
 8020d70:	687a      	ldr	r2, [r7, #4]
 8020d72:	23a6      	movs	r3, #166	@ 0xa6
 8020d74:	009b      	lsls	r3, r3, #2
 8020d76:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8020d78:	687a      	ldr	r2, [r7, #4]
 8020d7a:	23aa      	movs	r3, #170	@ 0xaa
 8020d7c:	009b      	lsls	r3, r3, #2
 8020d7e:	5cd3      	ldrb	r3, [r2, r3]
 8020d80:	001a      	movs	r2, r3
 8020d82:	231f      	movs	r3, #31
 8020d84:	4013      	ands	r3, r2
 8020d86:	2b02      	cmp	r3, #2
 8020d88:	d019      	beq.n	8020dbe <USBD_LL_SetupStage+0x7e>
 8020d8a:	d822      	bhi.n	8020dd2 <USBD_LL_SetupStage+0x92>
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d002      	beq.n	8020d96 <USBD_LL_SetupStage+0x56>
 8020d90:	2b01      	cmp	r3, #1
 8020d92:	d00a      	beq.n	8020daa <USBD_LL_SetupStage+0x6a>
 8020d94:	e01d      	b.n	8020dd2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8020d96:	687b      	ldr	r3, [r7, #4]
 8020d98:	22aa      	movs	r2, #170	@ 0xaa
 8020d9a:	0092      	lsls	r2, r2, #2
 8020d9c:	189a      	adds	r2, r3, r2
 8020d9e:	687b      	ldr	r3, [r7, #4]
 8020da0:	0011      	movs	r1, r2
 8020da2:	0018      	movs	r0, r3
 8020da4:	f000 fa10 	bl	80211c8 <USBD_StdDevReq>
      break;
 8020da8:	e020      	b.n	8020dec <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8020daa:	687b      	ldr	r3, [r7, #4]
 8020dac:	22aa      	movs	r2, #170	@ 0xaa
 8020dae:	0092      	lsls	r2, r2, #2
 8020db0:	189a      	adds	r2, r3, r2
 8020db2:	687b      	ldr	r3, [r7, #4]
 8020db4:	0011      	movs	r1, r2
 8020db6:	0018      	movs	r0, r3
 8020db8:	f000 fa78 	bl	80212ac <USBD_StdItfReq>
      break;
 8020dbc:	e016      	b.n	8020dec <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	22aa      	movs	r2, #170	@ 0xaa
 8020dc2:	0092      	lsls	r2, r2, #2
 8020dc4:	189a      	adds	r2, r3, r2
 8020dc6:	687b      	ldr	r3, [r7, #4]
 8020dc8:	0011      	movs	r1, r2
 8020dca:	0018      	movs	r0, r3
 8020dcc:	f000 fac5 	bl	802135a <USBD_StdEPReq>
      break;
 8020dd0:	e00c      	b.n	8020dec <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020dd2:	687a      	ldr	r2, [r7, #4]
 8020dd4:	23aa      	movs	r3, #170	@ 0xaa
 8020dd6:	009b      	lsls	r3, r3, #2
 8020dd8:	5cd3      	ldrb	r3, [r2, r3]
 8020dda:	227f      	movs	r2, #127	@ 0x7f
 8020ddc:	4393      	bics	r3, r2
 8020dde:	b2da      	uxtb	r2, r3
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	0011      	movs	r1, r2
 8020de4:	0018      	movs	r0, r3
 8020de6:	f001 fd2a 	bl	802283e <USBD_LL_StallEP>
      break;
 8020dea:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8020dec:	2300      	movs	r3, #0
}
 8020dee:	0018      	movs	r0, r3
 8020df0:	46bd      	mov	sp, r7
 8020df2:	b002      	add	sp, #8
 8020df4:	bd80      	pop	{r7, pc}
 8020df6:	46c0      	nop			@ (mov r8, r8)
 8020df8:	000002ae 	.word	0x000002ae

08020dfc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8020dfc:	b580      	push	{r7, lr}
 8020dfe:	b086      	sub	sp, #24
 8020e00:	af00      	add	r7, sp, #0
 8020e02:	60f8      	str	r0, [r7, #12]
 8020e04:	607a      	str	r2, [r7, #4]
 8020e06:	200b      	movs	r0, #11
 8020e08:	183b      	adds	r3, r7, r0
 8020e0a:	1c0a      	adds	r2, r1, #0
 8020e0c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8020e0e:	183b      	adds	r3, r7, r0
 8020e10:	781b      	ldrb	r3, [r3, #0]
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	d154      	bne.n	8020ec0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8020e16:	68fb      	ldr	r3, [r7, #12]
 8020e18:	3355      	adds	r3, #85	@ 0x55
 8020e1a:	33ff      	adds	r3, #255	@ 0xff
 8020e1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8020e1e:	68fa      	ldr	r2, [r7, #12]
 8020e20:	23a5      	movs	r3, #165	@ 0xa5
 8020e22:	009b      	lsls	r3, r3, #2
 8020e24:	58d3      	ldr	r3, [r2, r3]
 8020e26:	2b03      	cmp	r3, #3
 8020e28:	d139      	bne.n	8020e9e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8020e2a:	697b      	ldr	r3, [r7, #20]
 8020e2c:	68da      	ldr	r2, [r3, #12]
 8020e2e:	697b      	ldr	r3, [r7, #20]
 8020e30:	691b      	ldr	r3, [r3, #16]
 8020e32:	429a      	cmp	r2, r3
 8020e34:	d919      	bls.n	8020e6a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8020e36:	697b      	ldr	r3, [r7, #20]
 8020e38:	68da      	ldr	r2, [r3, #12]
 8020e3a:	697b      	ldr	r3, [r7, #20]
 8020e3c:	691b      	ldr	r3, [r3, #16]
 8020e3e:	1ad2      	subs	r2, r2, r3
 8020e40:	697b      	ldr	r3, [r7, #20]
 8020e42:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020e44:	697b      	ldr	r3, [r7, #20]
 8020e46:	68da      	ldr	r2, [r3, #12]
 8020e48:	697b      	ldr	r3, [r7, #20]
 8020e4a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8020e4c:	429a      	cmp	r2, r3
 8020e4e:	d203      	bcs.n	8020e58 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020e50:	697b      	ldr	r3, [r7, #20]
 8020e52:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8020e54:	b29b      	uxth	r3, r3
 8020e56:	e002      	b.n	8020e5e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020e58:	697b      	ldr	r3, [r7, #20]
 8020e5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8020e5c:	b29b      	uxth	r3, r3
 8020e5e:	6879      	ldr	r1, [r7, #4]
 8020e60:	68f8      	ldr	r0, [r7, #12]
 8020e62:	001a      	movs	r2, r3
 8020e64:	f001 f898 	bl	8021f98 <USBD_CtlContinueRx>
 8020e68:	e045      	b.n	8020ef6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020e6a:	68fa      	ldr	r2, [r7, #12]
 8020e6c:	23ad      	movs	r3, #173	@ 0xad
 8020e6e:	009b      	lsls	r3, r3, #2
 8020e70:	58d3      	ldr	r3, [r2, r3]
 8020e72:	691b      	ldr	r3, [r3, #16]
 8020e74:	2b00      	cmp	r3, #0
 8020e76:	d00d      	beq.n	8020e94 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020e78:	68fa      	ldr	r2, [r7, #12]
 8020e7a:	23a7      	movs	r3, #167	@ 0xa7
 8020e7c:	009b      	lsls	r3, r3, #2
 8020e7e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020e80:	2b03      	cmp	r3, #3
 8020e82:	d107      	bne.n	8020e94 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8020e84:	68fa      	ldr	r2, [r7, #12]
 8020e86:	23ad      	movs	r3, #173	@ 0xad
 8020e88:	009b      	lsls	r3, r3, #2
 8020e8a:	58d3      	ldr	r3, [r2, r3]
 8020e8c:	691b      	ldr	r3, [r3, #16]
 8020e8e:	68fa      	ldr	r2, [r7, #12]
 8020e90:	0010      	movs	r0, r2
 8020e92:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8020e94:	68fb      	ldr	r3, [r7, #12]
 8020e96:	0018      	movs	r0, r3
 8020e98:	f001 f891 	bl	8021fbe <USBD_CtlSendStatus>
 8020e9c:	e02b      	b.n	8020ef6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8020e9e:	68fa      	ldr	r2, [r7, #12]
 8020ea0:	23a5      	movs	r3, #165	@ 0xa5
 8020ea2:	009b      	lsls	r3, r3, #2
 8020ea4:	58d3      	ldr	r3, [r2, r3]
 8020ea6:	2b05      	cmp	r3, #5
 8020ea8:	d125      	bne.n	8020ef6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8020eaa:	68fa      	ldr	r2, [r7, #12]
 8020eac:	23a5      	movs	r3, #165	@ 0xa5
 8020eae:	009b      	lsls	r3, r3, #2
 8020eb0:	2100      	movs	r1, #0
 8020eb2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8020eb4:	68fb      	ldr	r3, [r7, #12]
 8020eb6:	2100      	movs	r1, #0
 8020eb8:	0018      	movs	r0, r3
 8020eba:	f001 fcc0 	bl	802283e <USBD_LL_StallEP>
 8020ebe:	e01a      	b.n	8020ef6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8020ec0:	68fa      	ldr	r2, [r7, #12]
 8020ec2:	23ad      	movs	r3, #173	@ 0xad
 8020ec4:	009b      	lsls	r3, r3, #2
 8020ec6:	58d3      	ldr	r3, [r2, r3]
 8020ec8:	699b      	ldr	r3, [r3, #24]
 8020eca:	2b00      	cmp	r3, #0
 8020ecc:	d011      	beq.n	8020ef2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020ece:	68fa      	ldr	r2, [r7, #12]
 8020ed0:	23a7      	movs	r3, #167	@ 0xa7
 8020ed2:	009b      	lsls	r3, r3, #2
 8020ed4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8020ed6:	2b03      	cmp	r3, #3
 8020ed8:	d10b      	bne.n	8020ef2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8020eda:	68fa      	ldr	r2, [r7, #12]
 8020edc:	23ad      	movs	r3, #173	@ 0xad
 8020ede:	009b      	lsls	r3, r3, #2
 8020ee0:	58d3      	ldr	r3, [r2, r3]
 8020ee2:	699b      	ldr	r3, [r3, #24]
 8020ee4:	220b      	movs	r2, #11
 8020ee6:	18ba      	adds	r2, r7, r2
 8020ee8:	7811      	ldrb	r1, [r2, #0]
 8020eea:	68fa      	ldr	r2, [r7, #12]
 8020eec:	0010      	movs	r0, r2
 8020eee:	4798      	blx	r3
 8020ef0:	e001      	b.n	8020ef6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8020ef2:	2302      	movs	r3, #2
 8020ef4:	e000      	b.n	8020ef8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8020ef6:	2300      	movs	r3, #0
}
 8020ef8:	0018      	movs	r0, r3
 8020efa:	46bd      	mov	sp, r7
 8020efc:	b006      	add	sp, #24
 8020efe:	bd80      	pop	{r7, pc}

08020f00 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8020f00:	b580      	push	{r7, lr}
 8020f02:	b086      	sub	sp, #24
 8020f04:	af00      	add	r7, sp, #0
 8020f06:	60f8      	str	r0, [r7, #12]
 8020f08:	607a      	str	r2, [r7, #4]
 8020f0a:	200b      	movs	r0, #11
 8020f0c:	183b      	adds	r3, r7, r0
 8020f0e:	1c0a      	adds	r2, r1, #0
 8020f10:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8020f12:	183b      	adds	r3, r7, r0
 8020f14:	781b      	ldrb	r3, [r3, #0]
 8020f16:	2b00      	cmp	r3, #0
 8020f18:	d000      	beq.n	8020f1c <USBD_LL_DataInStage+0x1c>
 8020f1a:	e08e      	b.n	802103a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8020f1c:	68fb      	ldr	r3, [r7, #12]
 8020f1e:	3314      	adds	r3, #20
 8020f20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8020f22:	68fa      	ldr	r2, [r7, #12]
 8020f24:	23a5      	movs	r3, #165	@ 0xa5
 8020f26:	009b      	lsls	r3, r3, #2
 8020f28:	58d3      	ldr	r3, [r2, r3]
 8020f2a:	2b02      	cmp	r3, #2
 8020f2c:	d164      	bne.n	8020ff8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8020f2e:	697b      	ldr	r3, [r7, #20]
 8020f30:	68da      	ldr	r2, [r3, #12]
 8020f32:	697b      	ldr	r3, [r7, #20]
 8020f34:	691b      	ldr	r3, [r3, #16]
 8020f36:	429a      	cmp	r2, r3
 8020f38:	d915      	bls.n	8020f66 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8020f3a:	697b      	ldr	r3, [r7, #20]
 8020f3c:	68da      	ldr	r2, [r3, #12]
 8020f3e:	697b      	ldr	r3, [r7, #20]
 8020f40:	691b      	ldr	r3, [r3, #16]
 8020f42:	1ad2      	subs	r2, r2, r3
 8020f44:	697b      	ldr	r3, [r7, #20]
 8020f46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8020f48:	697b      	ldr	r3, [r7, #20]
 8020f4a:	68db      	ldr	r3, [r3, #12]
 8020f4c:	b29a      	uxth	r2, r3
 8020f4e:	6879      	ldr	r1, [r7, #4]
 8020f50:	68fb      	ldr	r3, [r7, #12]
 8020f52:	0018      	movs	r0, r3
 8020f54:	f000 ffe9 	bl	8021f2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020f58:	68f8      	ldr	r0, [r7, #12]
 8020f5a:	2300      	movs	r3, #0
 8020f5c:	2200      	movs	r2, #0
 8020f5e:	2100      	movs	r1, #0
 8020f60:	f001 fd56 	bl	8022a10 <USBD_LL_PrepareReceive>
 8020f64:	e059      	b.n	802101a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8020f66:	697b      	ldr	r3, [r7, #20]
 8020f68:	689a      	ldr	r2, [r3, #8]
 8020f6a:	697b      	ldr	r3, [r7, #20]
 8020f6c:	691b      	ldr	r3, [r3, #16]
 8020f6e:	0019      	movs	r1, r3
 8020f70:	0010      	movs	r0, r2
 8020f72:	f7df f99d 	bl	80002b0 <__aeabi_uidivmod>
 8020f76:	1e0b      	subs	r3, r1, #0
 8020f78:	d11f      	bne.n	8020fba <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8020f7a:	697b      	ldr	r3, [r7, #20]
 8020f7c:	689a      	ldr	r2, [r3, #8]
 8020f7e:	697b      	ldr	r3, [r7, #20]
 8020f80:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8020f82:	429a      	cmp	r2, r3
 8020f84:	d319      	bcc.n	8020fba <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8020f86:	697b      	ldr	r3, [r7, #20]
 8020f88:	689a      	ldr	r2, [r3, #8]
 8020f8a:	68f9      	ldr	r1, [r7, #12]
 8020f8c:	23a6      	movs	r3, #166	@ 0xa6
 8020f8e:	009b      	lsls	r3, r3, #2
 8020f90:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8020f92:	429a      	cmp	r2, r3
 8020f94:	d211      	bcs.n	8020fba <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8020f96:	68fb      	ldr	r3, [r7, #12]
 8020f98:	2200      	movs	r2, #0
 8020f9a:	2100      	movs	r1, #0
 8020f9c:	0018      	movs	r0, r3
 8020f9e:	f000 ffc4 	bl	8021f2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8020fa2:	68fa      	ldr	r2, [r7, #12]
 8020fa4:	23a6      	movs	r3, #166	@ 0xa6
 8020fa6:	009b      	lsls	r3, r3, #2
 8020fa8:	2100      	movs	r1, #0
 8020faa:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020fac:	68f8      	ldr	r0, [r7, #12]
 8020fae:	2300      	movs	r3, #0
 8020fb0:	2200      	movs	r2, #0
 8020fb2:	2100      	movs	r1, #0
 8020fb4:	f001 fd2c 	bl	8022a10 <USBD_LL_PrepareReceive>
 8020fb8:	e02f      	b.n	802101a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8020fba:	68fa      	ldr	r2, [r7, #12]
 8020fbc:	23ad      	movs	r3, #173	@ 0xad
 8020fbe:	009b      	lsls	r3, r3, #2
 8020fc0:	58d3      	ldr	r3, [r2, r3]
 8020fc2:	68db      	ldr	r3, [r3, #12]
 8020fc4:	2b00      	cmp	r3, #0
 8020fc6:	d00d      	beq.n	8020fe4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020fc8:	68fa      	ldr	r2, [r7, #12]
 8020fca:	23a7      	movs	r3, #167	@ 0xa7
 8020fcc:	009b      	lsls	r3, r3, #2
 8020fce:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8020fd0:	2b03      	cmp	r3, #3
 8020fd2:	d107      	bne.n	8020fe4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8020fd4:	68fa      	ldr	r2, [r7, #12]
 8020fd6:	23ad      	movs	r3, #173	@ 0xad
 8020fd8:	009b      	lsls	r3, r3, #2
 8020fda:	58d3      	ldr	r3, [r2, r3]
 8020fdc:	68db      	ldr	r3, [r3, #12]
 8020fde:	68fa      	ldr	r2, [r7, #12]
 8020fe0:	0010      	movs	r0, r2
 8020fe2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8020fe4:	68fb      	ldr	r3, [r7, #12]
 8020fe6:	2180      	movs	r1, #128	@ 0x80
 8020fe8:	0018      	movs	r0, r3
 8020fea:	f001 fc28 	bl	802283e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8020fee:	68fb      	ldr	r3, [r7, #12]
 8020ff0:	0018      	movs	r0, r3
 8020ff2:	f000 fff8 	bl	8021fe6 <USBD_CtlReceiveStatus>
 8020ff6:	e010      	b.n	802101a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8020ff8:	68fa      	ldr	r2, [r7, #12]
 8020ffa:	23a5      	movs	r3, #165	@ 0xa5
 8020ffc:	009b      	lsls	r3, r3, #2
 8020ffe:	58d3      	ldr	r3, [r2, r3]
 8021000:	2b04      	cmp	r3, #4
 8021002:	d005      	beq.n	8021010 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8021004:	68fa      	ldr	r2, [r7, #12]
 8021006:	23a5      	movs	r3, #165	@ 0xa5
 8021008:	009b      	lsls	r3, r3, #2
 802100a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 802100c:	2b00      	cmp	r3, #0
 802100e:	d104      	bne.n	802101a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8021010:	68fb      	ldr	r3, [r7, #12]
 8021012:	2180      	movs	r1, #128	@ 0x80
 8021014:	0018      	movs	r0, r3
 8021016:	f001 fc12 	bl	802283e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 802101a:	68fa      	ldr	r2, [r7, #12]
 802101c:	23a8      	movs	r3, #168	@ 0xa8
 802101e:	009b      	lsls	r3, r3, #2
 8021020:	5cd3      	ldrb	r3, [r2, r3]
 8021022:	2b01      	cmp	r3, #1
 8021024:	d124      	bne.n	8021070 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8021026:	68fb      	ldr	r3, [r7, #12]
 8021028:	0018      	movs	r0, r3
 802102a:	f7ff fe43 	bl	8020cb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802102e:	68fa      	ldr	r2, [r7, #12]
 8021030:	23a8      	movs	r3, #168	@ 0xa8
 8021032:	009b      	lsls	r3, r3, #2
 8021034:	2100      	movs	r1, #0
 8021036:	54d1      	strb	r1, [r2, r3]
 8021038:	e01a      	b.n	8021070 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 802103a:	68fa      	ldr	r2, [r7, #12]
 802103c:	23ad      	movs	r3, #173	@ 0xad
 802103e:	009b      	lsls	r3, r3, #2
 8021040:	58d3      	ldr	r3, [r2, r3]
 8021042:	695b      	ldr	r3, [r3, #20]
 8021044:	2b00      	cmp	r3, #0
 8021046:	d011      	beq.n	802106c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021048:	68fa      	ldr	r2, [r7, #12]
 802104a:	23a7      	movs	r3, #167	@ 0xa7
 802104c:	009b      	lsls	r3, r3, #2
 802104e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8021050:	2b03      	cmp	r3, #3
 8021052:	d10b      	bne.n	802106c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8021054:	68fa      	ldr	r2, [r7, #12]
 8021056:	23ad      	movs	r3, #173	@ 0xad
 8021058:	009b      	lsls	r3, r3, #2
 802105a:	58d3      	ldr	r3, [r2, r3]
 802105c:	695b      	ldr	r3, [r3, #20]
 802105e:	220b      	movs	r2, #11
 8021060:	18ba      	adds	r2, r7, r2
 8021062:	7811      	ldrb	r1, [r2, #0]
 8021064:	68fa      	ldr	r2, [r7, #12]
 8021066:	0010      	movs	r0, r2
 8021068:	4798      	blx	r3
 802106a:	e001      	b.n	8021070 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 802106c:	2302      	movs	r3, #2
 802106e:	e000      	b.n	8021072 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8021070:	2300      	movs	r3, #0
}
 8021072:	0018      	movs	r0, r3
 8021074:	46bd      	mov	sp, r7
 8021076:	b006      	add	sp, #24
 8021078:	bd80      	pop	{r7, pc}

0802107a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 802107a:	b580      	push	{r7, lr}
 802107c:	b082      	sub	sp, #8
 802107e:	af00      	add	r7, sp, #0
 8021080:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8021082:	6878      	ldr	r0, [r7, #4]
 8021084:	2340      	movs	r3, #64	@ 0x40
 8021086:	2200      	movs	r2, #0
 8021088:	2100      	movs	r1, #0
 802108a:	f001 fb76 	bl	802277a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 802108e:	687a      	ldr	r2, [r7, #4]
 8021090:	23ac      	movs	r3, #172	@ 0xac
 8021092:	005b      	lsls	r3, r3, #1
 8021094:	2101      	movs	r1, #1
 8021096:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021098:	687a      	ldr	r2, [r7, #4]
 802109a:	23b2      	movs	r3, #178	@ 0xb2
 802109c:	005b      	lsls	r3, r3, #1
 802109e:	2140      	movs	r1, #64	@ 0x40
 80210a0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80210a2:	6878      	ldr	r0, [r7, #4]
 80210a4:	2340      	movs	r3, #64	@ 0x40
 80210a6:	2200      	movs	r2, #0
 80210a8:	2180      	movs	r1, #128	@ 0x80
 80210aa:	f001 fb66 	bl	802277a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80210ae:	687b      	ldr	r3, [r7, #4]
 80210b0:	2201      	movs	r2, #1
 80210b2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	2240      	movs	r2, #64	@ 0x40
 80210b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80210ba:	687a      	ldr	r2, [r7, #4]
 80210bc:	23a7      	movs	r3, #167	@ 0xa7
 80210be:	009b      	lsls	r3, r3, #2
 80210c0:	2101      	movs	r1, #1
 80210c2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80210c4:	687a      	ldr	r2, [r7, #4]
 80210c6:	23a5      	movs	r3, #165	@ 0xa5
 80210c8:	009b      	lsls	r3, r3, #2
 80210ca:	2100      	movs	r1, #0
 80210cc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	2200      	movs	r2, #0
 80210d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80210d4:	687a      	ldr	r2, [r7, #4]
 80210d6:	23a9      	movs	r3, #169	@ 0xa9
 80210d8:	009b      	lsls	r3, r3, #2
 80210da:	2100      	movs	r1, #0
 80210dc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80210de:	687a      	ldr	r2, [r7, #4]
 80210e0:	23ae      	movs	r3, #174	@ 0xae
 80210e2:	009b      	lsls	r3, r3, #2
 80210e4:	58d3      	ldr	r3, [r2, r3]
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	d00a      	beq.n	8021100 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80210ea:	687a      	ldr	r2, [r7, #4]
 80210ec:	23ad      	movs	r3, #173	@ 0xad
 80210ee:	009b      	lsls	r3, r3, #2
 80210f0:	58d3      	ldr	r3, [r2, r3]
 80210f2:	685a      	ldr	r2, [r3, #4]
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	685b      	ldr	r3, [r3, #4]
 80210f8:	b2d9      	uxtb	r1, r3
 80210fa:	687b      	ldr	r3, [r7, #4]
 80210fc:	0018      	movs	r0, r3
 80210fe:	4790      	blx	r2
  }

  return USBD_OK;
 8021100:	2300      	movs	r3, #0
}
 8021102:	0018      	movs	r0, r3
 8021104:	46bd      	mov	sp, r7
 8021106:	b002      	add	sp, #8
 8021108:	bd80      	pop	{r7, pc}

0802110a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 802110a:	b580      	push	{r7, lr}
 802110c:	b082      	sub	sp, #8
 802110e:	af00      	add	r7, sp, #0
 8021110:	6078      	str	r0, [r7, #4]
 8021112:	000a      	movs	r2, r1
 8021114:	1cfb      	adds	r3, r7, #3
 8021116:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8021118:	687b      	ldr	r3, [r7, #4]
 802111a:	1cfa      	adds	r2, r7, #3
 802111c:	7812      	ldrb	r2, [r2, #0]
 802111e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8021120:	2300      	movs	r3, #0
}
 8021122:	0018      	movs	r0, r3
 8021124:	46bd      	mov	sp, r7
 8021126:	b002      	add	sp, #8
 8021128:	bd80      	pop	{r7, pc}
	...

0802112c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 802112c:	b580      	push	{r7, lr}
 802112e:	b082      	sub	sp, #8
 8021130:	af00      	add	r7, sp, #0
 8021132:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8021134:	687a      	ldr	r2, [r7, #4]
 8021136:	23a7      	movs	r3, #167	@ 0xa7
 8021138:	009b      	lsls	r3, r3, #2
 802113a:	5cd1      	ldrb	r1, [r2, r3]
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	4a06      	ldr	r2, [pc, #24]	@ (8021158 <USBD_LL_Suspend+0x2c>)
 8021140:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8021142:	687a      	ldr	r2, [r7, #4]
 8021144:	23a7      	movs	r3, #167	@ 0xa7
 8021146:	009b      	lsls	r3, r3, #2
 8021148:	2104      	movs	r1, #4
 802114a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 802114c:	2300      	movs	r3, #0
}
 802114e:	0018      	movs	r0, r3
 8021150:	46bd      	mov	sp, r7
 8021152:	b002      	add	sp, #8
 8021154:	bd80      	pop	{r7, pc}
 8021156:	46c0      	nop			@ (mov r8, r8)
 8021158:	0000029d 	.word	0x0000029d

0802115c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 802115c:	b580      	push	{r7, lr}
 802115e:	b082      	sub	sp, #8
 8021160:	af00      	add	r7, sp, #0
 8021162:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8021164:	687a      	ldr	r2, [r7, #4]
 8021166:	23a7      	movs	r3, #167	@ 0xa7
 8021168:	009b      	lsls	r3, r3, #2
 802116a:	5cd3      	ldrb	r3, [r2, r3]
 802116c:	2b04      	cmp	r3, #4
 802116e:	d106      	bne.n	802117e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8021170:	687b      	ldr	r3, [r7, #4]
 8021172:	4a05      	ldr	r2, [pc, #20]	@ (8021188 <USBD_LL_Resume+0x2c>)
 8021174:	5c99      	ldrb	r1, [r3, r2]
 8021176:	687a      	ldr	r2, [r7, #4]
 8021178:	23a7      	movs	r3, #167	@ 0xa7
 802117a:	009b      	lsls	r3, r3, #2
 802117c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 802117e:	2300      	movs	r3, #0
}
 8021180:	0018      	movs	r0, r3
 8021182:	46bd      	mov	sp, r7
 8021184:	b002      	add	sp, #8
 8021186:	bd80      	pop	{r7, pc}
 8021188:	0000029d 	.word	0x0000029d

0802118c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 802118c:	b580      	push	{r7, lr}
 802118e:	b082      	sub	sp, #8
 8021190:	af00      	add	r7, sp, #0
 8021192:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021194:	687a      	ldr	r2, [r7, #4]
 8021196:	23a7      	movs	r3, #167	@ 0xa7
 8021198:	009b      	lsls	r3, r3, #2
 802119a:	5cd3      	ldrb	r3, [r2, r3]
 802119c:	2b03      	cmp	r3, #3
 802119e:	d10e      	bne.n	80211be <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80211a0:	687a      	ldr	r2, [r7, #4]
 80211a2:	23ad      	movs	r3, #173	@ 0xad
 80211a4:	009b      	lsls	r3, r3, #2
 80211a6:	58d3      	ldr	r3, [r2, r3]
 80211a8:	69db      	ldr	r3, [r3, #28]
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d007      	beq.n	80211be <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80211ae:	687a      	ldr	r2, [r7, #4]
 80211b0:	23ad      	movs	r3, #173	@ 0xad
 80211b2:	009b      	lsls	r3, r3, #2
 80211b4:	58d3      	ldr	r3, [r2, r3]
 80211b6:	69db      	ldr	r3, [r3, #28]
 80211b8:	687a      	ldr	r2, [r7, #4]
 80211ba:	0010      	movs	r0, r2
 80211bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80211be:	2300      	movs	r3, #0
}
 80211c0:	0018      	movs	r0, r3
 80211c2:	46bd      	mov	sp, r7
 80211c4:	b002      	add	sp, #8
 80211c6:	bd80      	pop	{r7, pc}

080211c8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80211c8:	b580      	push	{r7, lr}
 80211ca:	b084      	sub	sp, #16
 80211cc:	af00      	add	r7, sp, #0
 80211ce:	6078      	str	r0, [r7, #4]
 80211d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80211d2:	230f      	movs	r3, #15
 80211d4:	18fb      	adds	r3, r7, r3
 80211d6:	2200      	movs	r2, #0
 80211d8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80211da:	683b      	ldr	r3, [r7, #0]
 80211dc:	781b      	ldrb	r3, [r3, #0]
 80211de:	001a      	movs	r2, r3
 80211e0:	2360      	movs	r3, #96	@ 0x60
 80211e2:	4013      	ands	r3, r2
 80211e4:	2b40      	cmp	r3, #64	@ 0x40
 80211e6:	d004      	beq.n	80211f2 <USBD_StdDevReq+0x2a>
 80211e8:	d84f      	bhi.n	802128a <USBD_StdDevReq+0xc2>
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	d00b      	beq.n	8021206 <USBD_StdDevReq+0x3e>
 80211ee:	2b20      	cmp	r3, #32
 80211f0:	d14b      	bne.n	802128a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80211f2:	687a      	ldr	r2, [r7, #4]
 80211f4:	23ad      	movs	r3, #173	@ 0xad
 80211f6:	009b      	lsls	r3, r3, #2
 80211f8:	58d3      	ldr	r3, [r2, r3]
 80211fa:	689b      	ldr	r3, [r3, #8]
 80211fc:	6839      	ldr	r1, [r7, #0]
 80211fe:	687a      	ldr	r2, [r7, #4]
 8021200:	0010      	movs	r0, r2
 8021202:	4798      	blx	r3
      break;
 8021204:	e048      	b.n	8021298 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021206:	683b      	ldr	r3, [r7, #0]
 8021208:	785b      	ldrb	r3, [r3, #1]
 802120a:	2b09      	cmp	r3, #9
 802120c:	d835      	bhi.n	802127a <USBD_StdDevReq+0xb2>
 802120e:	009a      	lsls	r2, r3, #2
 8021210:	4b25      	ldr	r3, [pc, #148]	@ (80212a8 <USBD_StdDevReq+0xe0>)
 8021212:	18d3      	adds	r3, r2, r3
 8021214:	681b      	ldr	r3, [r3, #0]
 8021216:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021218:	683a      	ldr	r2, [r7, #0]
 802121a:	687b      	ldr	r3, [r7, #4]
 802121c:	0011      	movs	r1, r2
 802121e:	0018      	movs	r0, r3
 8021220:	f000 fa52 	bl	80216c8 <USBD_GetDescriptor>
          break;
 8021224:	e030      	b.n	8021288 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8021226:	683a      	ldr	r2, [r7, #0]
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	0011      	movs	r1, r2
 802122c:	0018      	movs	r0, r3
 802122e:	f000 fbfd 	bl	8021a2c <USBD_SetAddress>
          break;
 8021232:	e029      	b.n	8021288 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8021234:	683a      	ldr	r2, [r7, #0]
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	0011      	movs	r1, r2
 802123a:	0018      	movs	r0, r3
 802123c:	f000 fc4a 	bl	8021ad4 <USBD_SetConfig>
          break;
 8021240:	e022      	b.n	8021288 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8021242:	683a      	ldr	r2, [r7, #0]
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	0011      	movs	r1, r2
 8021248:	0018      	movs	r0, r3
 802124a:	f000 fce7 	bl	8021c1c <USBD_GetConfig>
          break;
 802124e:	e01b      	b.n	8021288 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8021250:	683a      	ldr	r2, [r7, #0]
 8021252:	687b      	ldr	r3, [r7, #4]
 8021254:	0011      	movs	r1, r2
 8021256:	0018      	movs	r0, r3
 8021258:	f000 fd1b 	bl	8021c92 <USBD_GetStatus>
          break;
 802125c:	e014      	b.n	8021288 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 802125e:	683a      	ldr	r2, [r7, #0]
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	0011      	movs	r1, r2
 8021264:	0018      	movs	r0, r3
 8021266:	f000 fd4e 	bl	8021d06 <USBD_SetFeature>
          break;
 802126a:	e00d      	b.n	8021288 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 802126c:	683a      	ldr	r2, [r7, #0]
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	0011      	movs	r1, r2
 8021272:	0018      	movs	r0, r3
 8021274:	f000 fd5d 	bl	8021d32 <USBD_ClrFeature>
          break;
 8021278:	e006      	b.n	8021288 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 802127a:	683a      	ldr	r2, [r7, #0]
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	0011      	movs	r1, r2
 8021280:	0018      	movs	r0, r3
 8021282:	f000 fdb4 	bl	8021dee <USBD_CtlError>
          break;
 8021286:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021288:	e006      	b.n	8021298 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 802128a:	683a      	ldr	r2, [r7, #0]
 802128c:	687b      	ldr	r3, [r7, #4]
 802128e:	0011      	movs	r1, r2
 8021290:	0018      	movs	r0, r3
 8021292:	f000 fdac 	bl	8021dee <USBD_CtlError>
      break;
 8021296:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021298:	230f      	movs	r3, #15
 802129a:	18fb      	adds	r3, r7, r3
 802129c:	781b      	ldrb	r3, [r3, #0]
}
 802129e:	0018      	movs	r0, r3
 80212a0:	46bd      	mov	sp, r7
 80212a2:	b004      	add	sp, #16
 80212a4:	bd80      	pop	{r7, pc}
 80212a6:	46c0      	nop			@ (mov r8, r8)
 80212a8:	0802daf0 	.word	0x0802daf0

080212ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80212ac:	b5b0      	push	{r4, r5, r7, lr}
 80212ae:	b084      	sub	sp, #16
 80212b0:	af00      	add	r7, sp, #0
 80212b2:	6078      	str	r0, [r7, #4]
 80212b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80212b6:	230f      	movs	r3, #15
 80212b8:	18fb      	adds	r3, r7, r3
 80212ba:	2200      	movs	r2, #0
 80212bc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80212be:	683b      	ldr	r3, [r7, #0]
 80212c0:	781b      	ldrb	r3, [r3, #0]
 80212c2:	001a      	movs	r2, r3
 80212c4:	2360      	movs	r3, #96	@ 0x60
 80212c6:	4013      	ands	r3, r2
 80212c8:	2b40      	cmp	r3, #64	@ 0x40
 80212ca:	d004      	beq.n	80212d6 <USBD_StdItfReq+0x2a>
 80212cc:	d839      	bhi.n	8021342 <USBD_StdItfReq+0x96>
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d001      	beq.n	80212d6 <USBD_StdItfReq+0x2a>
 80212d2:	2b20      	cmp	r3, #32
 80212d4:	d135      	bne.n	8021342 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80212d6:	687a      	ldr	r2, [r7, #4]
 80212d8:	23a7      	movs	r3, #167	@ 0xa7
 80212da:	009b      	lsls	r3, r3, #2
 80212dc:	5cd3      	ldrb	r3, [r2, r3]
 80212de:	3b01      	subs	r3, #1
 80212e0:	2b02      	cmp	r3, #2
 80212e2:	d825      	bhi.n	8021330 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80212e4:	683b      	ldr	r3, [r7, #0]
 80212e6:	889b      	ldrh	r3, [r3, #4]
 80212e8:	b2db      	uxtb	r3, r3
 80212ea:	2b01      	cmp	r3, #1
 80212ec:	d819      	bhi.n	8021322 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80212ee:	687a      	ldr	r2, [r7, #4]
 80212f0:	23ad      	movs	r3, #173	@ 0xad
 80212f2:	009b      	lsls	r3, r3, #2
 80212f4:	58d3      	ldr	r3, [r2, r3]
 80212f6:	689b      	ldr	r3, [r3, #8]
 80212f8:	250f      	movs	r5, #15
 80212fa:	197c      	adds	r4, r7, r5
 80212fc:	6839      	ldr	r1, [r7, #0]
 80212fe:	687a      	ldr	r2, [r7, #4]
 8021300:	0010      	movs	r0, r2
 8021302:	4798      	blx	r3
 8021304:	0003      	movs	r3, r0
 8021306:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8021308:	683b      	ldr	r3, [r7, #0]
 802130a:	88db      	ldrh	r3, [r3, #6]
 802130c:	2b00      	cmp	r3, #0
 802130e:	d116      	bne.n	802133e <USBD_StdItfReq+0x92>
 8021310:	197b      	adds	r3, r7, r5
 8021312:	781b      	ldrb	r3, [r3, #0]
 8021314:	2b00      	cmp	r3, #0
 8021316:	d112      	bne.n	802133e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	0018      	movs	r0, r3
 802131c:	f000 fe4f 	bl	8021fbe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8021320:	e00d      	b.n	802133e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8021322:	683a      	ldr	r2, [r7, #0]
 8021324:	687b      	ldr	r3, [r7, #4]
 8021326:	0011      	movs	r1, r2
 8021328:	0018      	movs	r0, r3
 802132a:	f000 fd60 	bl	8021dee <USBD_CtlError>
          break;
 802132e:	e006      	b.n	802133e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8021330:	683a      	ldr	r2, [r7, #0]
 8021332:	687b      	ldr	r3, [r7, #4]
 8021334:	0011      	movs	r1, r2
 8021336:	0018      	movs	r0, r3
 8021338:	f000 fd59 	bl	8021dee <USBD_CtlError>
          break;
 802133c:	e000      	b.n	8021340 <USBD_StdItfReq+0x94>
          break;
 802133e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021340:	e006      	b.n	8021350 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8021342:	683a      	ldr	r2, [r7, #0]
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	0011      	movs	r1, r2
 8021348:	0018      	movs	r0, r3
 802134a:	f000 fd50 	bl	8021dee <USBD_CtlError>
      break;
 802134e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021350:	2300      	movs	r3, #0
}
 8021352:	0018      	movs	r0, r3
 8021354:	46bd      	mov	sp, r7
 8021356:	b004      	add	sp, #16
 8021358:	bdb0      	pop	{r4, r5, r7, pc}

0802135a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 802135a:	b5b0      	push	{r4, r5, r7, lr}
 802135c:	b084      	sub	sp, #16
 802135e:	af00      	add	r7, sp, #0
 8021360:	6078      	str	r0, [r7, #4]
 8021362:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8021364:	230f      	movs	r3, #15
 8021366:	18fb      	adds	r3, r7, r3
 8021368:	2200      	movs	r2, #0
 802136a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 802136c:	683b      	ldr	r3, [r7, #0]
 802136e:	889a      	ldrh	r2, [r3, #4]
 8021370:	230e      	movs	r3, #14
 8021372:	18fb      	adds	r3, r7, r3
 8021374:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021376:	683b      	ldr	r3, [r7, #0]
 8021378:	781b      	ldrb	r3, [r3, #0]
 802137a:	001a      	movs	r2, r3
 802137c:	2360      	movs	r3, #96	@ 0x60
 802137e:	4013      	ands	r3, r2
 8021380:	2b40      	cmp	r3, #64	@ 0x40
 8021382:	d006      	beq.n	8021392 <USBD_StdEPReq+0x38>
 8021384:	d900      	bls.n	8021388 <USBD_StdEPReq+0x2e>
 8021386:	e190      	b.n	80216aa <USBD_StdEPReq+0x350>
 8021388:	2b00      	cmp	r3, #0
 802138a:	d00c      	beq.n	80213a6 <USBD_StdEPReq+0x4c>
 802138c:	2b20      	cmp	r3, #32
 802138e:	d000      	beq.n	8021392 <USBD_StdEPReq+0x38>
 8021390:	e18b      	b.n	80216aa <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8021392:	687a      	ldr	r2, [r7, #4]
 8021394:	23ad      	movs	r3, #173	@ 0xad
 8021396:	009b      	lsls	r3, r3, #2
 8021398:	58d3      	ldr	r3, [r2, r3]
 802139a:	689b      	ldr	r3, [r3, #8]
 802139c:	6839      	ldr	r1, [r7, #0]
 802139e:	687a      	ldr	r2, [r7, #4]
 80213a0:	0010      	movs	r0, r2
 80213a2:	4798      	blx	r3
      break;
 80213a4:	e188      	b.n	80216b8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80213a6:	683b      	ldr	r3, [r7, #0]
 80213a8:	781b      	ldrb	r3, [r3, #0]
 80213aa:	001a      	movs	r2, r3
 80213ac:	2360      	movs	r3, #96	@ 0x60
 80213ae:	4013      	ands	r3, r2
 80213b0:	2b20      	cmp	r3, #32
 80213b2:	d10f      	bne.n	80213d4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80213b4:	687a      	ldr	r2, [r7, #4]
 80213b6:	23ad      	movs	r3, #173	@ 0xad
 80213b8:	009b      	lsls	r3, r3, #2
 80213ba:	58d3      	ldr	r3, [r2, r3]
 80213bc:	689b      	ldr	r3, [r3, #8]
 80213be:	250f      	movs	r5, #15
 80213c0:	197c      	adds	r4, r7, r5
 80213c2:	6839      	ldr	r1, [r7, #0]
 80213c4:	687a      	ldr	r2, [r7, #4]
 80213c6:	0010      	movs	r0, r2
 80213c8:	4798      	blx	r3
 80213ca:	0003      	movs	r3, r0
 80213cc:	7023      	strb	r3, [r4, #0]

        return ret;
 80213ce:	197b      	adds	r3, r7, r5
 80213d0:	781b      	ldrb	r3, [r3, #0]
 80213d2:	e174      	b.n	80216be <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80213d4:	683b      	ldr	r3, [r7, #0]
 80213d6:	785b      	ldrb	r3, [r3, #1]
 80213d8:	2b03      	cmp	r3, #3
 80213da:	d007      	beq.n	80213ec <USBD_StdEPReq+0x92>
 80213dc:	dd00      	ble.n	80213e0 <USBD_StdEPReq+0x86>
 80213de:	e15c      	b.n	802169a <USBD_StdEPReq+0x340>
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d100      	bne.n	80213e6 <USBD_StdEPReq+0x8c>
 80213e4:	e092      	b.n	802150c <USBD_StdEPReq+0x1b2>
 80213e6:	2b01      	cmp	r3, #1
 80213e8:	d04b      	beq.n	8021482 <USBD_StdEPReq+0x128>
 80213ea:	e156      	b.n	802169a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80213ec:	687a      	ldr	r2, [r7, #4]
 80213ee:	23a7      	movs	r3, #167	@ 0xa7
 80213f0:	009b      	lsls	r3, r3, #2
 80213f2:	5cd3      	ldrb	r3, [r2, r3]
 80213f4:	2b02      	cmp	r3, #2
 80213f6:	d002      	beq.n	80213fe <USBD_StdEPReq+0xa4>
 80213f8:	2b03      	cmp	r3, #3
 80213fa:	d01d      	beq.n	8021438 <USBD_StdEPReq+0xde>
 80213fc:	e039      	b.n	8021472 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80213fe:	220e      	movs	r2, #14
 8021400:	18bb      	adds	r3, r7, r2
 8021402:	781b      	ldrb	r3, [r3, #0]
 8021404:	2b00      	cmp	r3, #0
 8021406:	d010      	beq.n	802142a <USBD_StdEPReq+0xd0>
 8021408:	18bb      	adds	r3, r7, r2
 802140a:	781b      	ldrb	r3, [r3, #0]
 802140c:	2b80      	cmp	r3, #128	@ 0x80
 802140e:	d00c      	beq.n	802142a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8021410:	18bb      	adds	r3, r7, r2
 8021412:	781a      	ldrb	r2, [r3, #0]
 8021414:	687b      	ldr	r3, [r7, #4]
 8021416:	0011      	movs	r1, r2
 8021418:	0018      	movs	r0, r3
 802141a:	f001 fa10 	bl	802283e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 802141e:	687b      	ldr	r3, [r7, #4]
 8021420:	2180      	movs	r1, #128	@ 0x80
 8021422:	0018      	movs	r0, r3
 8021424:	f001 fa0b 	bl	802283e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021428:	e02a      	b.n	8021480 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 802142a:	683a      	ldr	r2, [r7, #0]
 802142c:	687b      	ldr	r3, [r7, #4]
 802142e:	0011      	movs	r1, r2
 8021430:	0018      	movs	r0, r3
 8021432:	f000 fcdc 	bl	8021dee <USBD_CtlError>
              break;
 8021436:	e023      	b.n	8021480 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021438:	683b      	ldr	r3, [r7, #0]
 802143a:	885b      	ldrh	r3, [r3, #2]
 802143c:	2b00      	cmp	r3, #0
 802143e:	d113      	bne.n	8021468 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8021440:	220e      	movs	r2, #14
 8021442:	18bb      	adds	r3, r7, r2
 8021444:	781b      	ldrb	r3, [r3, #0]
 8021446:	2b00      	cmp	r3, #0
 8021448:	d00e      	beq.n	8021468 <USBD_StdEPReq+0x10e>
 802144a:	18bb      	adds	r3, r7, r2
 802144c:	781b      	ldrb	r3, [r3, #0]
 802144e:	2b80      	cmp	r3, #128	@ 0x80
 8021450:	d00a      	beq.n	8021468 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8021452:	683b      	ldr	r3, [r7, #0]
 8021454:	88db      	ldrh	r3, [r3, #6]
 8021456:	2b00      	cmp	r3, #0
 8021458:	d106      	bne.n	8021468 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 802145a:	18bb      	adds	r3, r7, r2
 802145c:	781a      	ldrb	r2, [r3, #0]
 802145e:	687b      	ldr	r3, [r7, #4]
 8021460:	0011      	movs	r1, r2
 8021462:	0018      	movs	r0, r3
 8021464:	f001 f9eb 	bl	802283e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	0018      	movs	r0, r3
 802146c:	f000 fda7 	bl	8021fbe <USBD_CtlSendStatus>

              break;
 8021470:	e006      	b.n	8021480 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8021472:	683a      	ldr	r2, [r7, #0]
 8021474:	687b      	ldr	r3, [r7, #4]
 8021476:	0011      	movs	r1, r2
 8021478:	0018      	movs	r0, r3
 802147a:	f000 fcb8 	bl	8021dee <USBD_CtlError>
              break;
 802147e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021480:	e112      	b.n	80216a8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8021482:	687a      	ldr	r2, [r7, #4]
 8021484:	23a7      	movs	r3, #167	@ 0xa7
 8021486:	009b      	lsls	r3, r3, #2
 8021488:	5cd3      	ldrb	r3, [r2, r3]
 802148a:	2b02      	cmp	r3, #2
 802148c:	d002      	beq.n	8021494 <USBD_StdEPReq+0x13a>
 802148e:	2b03      	cmp	r3, #3
 8021490:	d01d      	beq.n	80214ce <USBD_StdEPReq+0x174>
 8021492:	e032      	b.n	80214fa <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021494:	220e      	movs	r2, #14
 8021496:	18bb      	adds	r3, r7, r2
 8021498:	781b      	ldrb	r3, [r3, #0]
 802149a:	2b00      	cmp	r3, #0
 802149c:	d010      	beq.n	80214c0 <USBD_StdEPReq+0x166>
 802149e:	18bb      	adds	r3, r7, r2
 80214a0:	781b      	ldrb	r3, [r3, #0]
 80214a2:	2b80      	cmp	r3, #128	@ 0x80
 80214a4:	d00c      	beq.n	80214c0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80214a6:	18bb      	adds	r3, r7, r2
 80214a8:	781a      	ldrb	r2, [r3, #0]
 80214aa:	687b      	ldr	r3, [r7, #4]
 80214ac:	0011      	movs	r1, r2
 80214ae:	0018      	movs	r0, r3
 80214b0:	f001 f9c5 	bl	802283e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80214b4:	687b      	ldr	r3, [r7, #4]
 80214b6:	2180      	movs	r1, #128	@ 0x80
 80214b8:	0018      	movs	r0, r3
 80214ba:	f001 f9c0 	bl	802283e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80214be:	e024      	b.n	802150a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80214c0:	683a      	ldr	r2, [r7, #0]
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	0011      	movs	r1, r2
 80214c6:	0018      	movs	r0, r3
 80214c8:	f000 fc91 	bl	8021dee <USBD_CtlError>
              break;
 80214cc:	e01d      	b.n	802150a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80214ce:	683b      	ldr	r3, [r7, #0]
 80214d0:	885b      	ldrh	r3, [r3, #2]
 80214d2:	2b00      	cmp	r3, #0
 80214d4:	d118      	bne.n	8021508 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80214d6:	210e      	movs	r1, #14
 80214d8:	187b      	adds	r3, r7, r1
 80214da:	781b      	ldrb	r3, [r3, #0]
 80214dc:	227f      	movs	r2, #127	@ 0x7f
 80214de:	4013      	ands	r3, r2
 80214e0:	d006      	beq.n	80214f0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80214e2:	187b      	adds	r3, r7, r1
 80214e4:	781a      	ldrb	r2, [r3, #0]
 80214e6:	687b      	ldr	r3, [r7, #4]
 80214e8:	0011      	movs	r1, r2
 80214ea:	0018      	movs	r0, r3
 80214ec:	f001 f9d2 	bl	8022894 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80214f0:	687b      	ldr	r3, [r7, #4]
 80214f2:	0018      	movs	r0, r3
 80214f4:	f000 fd63 	bl	8021fbe <USBD_CtlSendStatus>
              }
              break;
 80214f8:	e006      	b.n	8021508 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80214fa:	683a      	ldr	r2, [r7, #0]
 80214fc:	687b      	ldr	r3, [r7, #4]
 80214fe:	0011      	movs	r1, r2
 8021500:	0018      	movs	r0, r3
 8021502:	f000 fc74 	bl	8021dee <USBD_CtlError>
              break;
 8021506:	e000      	b.n	802150a <USBD_StdEPReq+0x1b0>
              break;
 8021508:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 802150a:	e0cd      	b.n	80216a8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 802150c:	687a      	ldr	r2, [r7, #4]
 802150e:	23a7      	movs	r3, #167	@ 0xa7
 8021510:	009b      	lsls	r3, r3, #2
 8021512:	5cd3      	ldrb	r3, [r2, r3]
 8021514:	2b02      	cmp	r3, #2
 8021516:	d002      	beq.n	802151e <USBD_StdEPReq+0x1c4>
 8021518:	2b03      	cmp	r3, #3
 802151a:	d03c      	beq.n	8021596 <USBD_StdEPReq+0x23c>
 802151c:	e0b5      	b.n	802168a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802151e:	220e      	movs	r2, #14
 8021520:	18bb      	adds	r3, r7, r2
 8021522:	781b      	ldrb	r3, [r3, #0]
 8021524:	2b00      	cmp	r3, #0
 8021526:	d00a      	beq.n	802153e <USBD_StdEPReq+0x1e4>
 8021528:	18bb      	adds	r3, r7, r2
 802152a:	781b      	ldrb	r3, [r3, #0]
 802152c:	2b80      	cmp	r3, #128	@ 0x80
 802152e:	d006      	beq.n	802153e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8021530:	683a      	ldr	r2, [r7, #0]
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	0011      	movs	r1, r2
 8021536:	0018      	movs	r0, r3
 8021538:	f000 fc59 	bl	8021dee <USBD_CtlError>
                break;
 802153c:	e0ac      	b.n	8021698 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802153e:	220e      	movs	r2, #14
 8021540:	18bb      	adds	r3, r7, r2
 8021542:	781b      	ldrb	r3, [r3, #0]
 8021544:	b25b      	sxtb	r3, r3
 8021546:	2b00      	cmp	r3, #0
 8021548:	da0c      	bge.n	8021564 <USBD_StdEPReq+0x20a>
 802154a:	18bb      	adds	r3, r7, r2
 802154c:	781b      	ldrb	r3, [r3, #0]
 802154e:	227f      	movs	r2, #127	@ 0x7f
 8021550:	401a      	ands	r2, r3
 8021552:	0013      	movs	r3, r2
 8021554:	009b      	lsls	r3, r3, #2
 8021556:	189b      	adds	r3, r3, r2
 8021558:	009b      	lsls	r3, r3, #2
 802155a:	3310      	adds	r3, #16
 802155c:	687a      	ldr	r2, [r7, #4]
 802155e:	18d3      	adds	r3, r2, r3
 8021560:	3304      	adds	r3, #4
 8021562:	e00d      	b.n	8021580 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021564:	230e      	movs	r3, #14
 8021566:	18fb      	adds	r3, r7, r3
 8021568:	781b      	ldrb	r3, [r3, #0]
 802156a:	227f      	movs	r2, #127	@ 0x7f
 802156c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802156e:	0013      	movs	r3, r2
 8021570:	009b      	lsls	r3, r3, #2
 8021572:	189b      	adds	r3, r3, r2
 8021574:	009b      	lsls	r3, r3, #2
 8021576:	3351      	adds	r3, #81	@ 0x51
 8021578:	33ff      	adds	r3, #255	@ 0xff
 802157a:	687a      	ldr	r2, [r7, #4]
 802157c:	18d3      	adds	r3, r2, r3
 802157e:	3304      	adds	r3, #4
 8021580:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021582:	68bb      	ldr	r3, [r7, #8]
 8021584:	2200      	movs	r2, #0
 8021586:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8021588:	68b9      	ldr	r1, [r7, #8]
 802158a:	687b      	ldr	r3, [r7, #4]
 802158c:	2202      	movs	r2, #2
 802158e:	0018      	movs	r0, r3
 8021590:	f000 fcab 	bl	8021eea <USBD_CtlSendData>
              break;
 8021594:	e080      	b.n	8021698 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021596:	220e      	movs	r2, #14
 8021598:	18bb      	adds	r3, r7, r2
 802159a:	781b      	ldrb	r3, [r3, #0]
 802159c:	b25b      	sxtb	r3, r3
 802159e:	2b00      	cmp	r3, #0
 80215a0:	da14      	bge.n	80215cc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80215a2:	18bb      	adds	r3, r7, r2
 80215a4:	781b      	ldrb	r3, [r3, #0]
 80215a6:	220f      	movs	r2, #15
 80215a8:	401a      	ands	r2, r3
 80215aa:	6879      	ldr	r1, [r7, #4]
 80215ac:	0013      	movs	r3, r2
 80215ae:	009b      	lsls	r3, r3, #2
 80215b0:	189b      	adds	r3, r3, r2
 80215b2:	009b      	lsls	r3, r3, #2
 80215b4:	18cb      	adds	r3, r1, r3
 80215b6:	3318      	adds	r3, #24
 80215b8:	681b      	ldr	r3, [r3, #0]
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	d11e      	bne.n	80215fc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80215be:	683a      	ldr	r2, [r7, #0]
 80215c0:	687b      	ldr	r3, [r7, #4]
 80215c2:	0011      	movs	r1, r2
 80215c4:	0018      	movs	r0, r3
 80215c6:	f000 fc12 	bl	8021dee <USBD_CtlError>
                  break;
 80215ca:	e065      	b.n	8021698 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80215cc:	230e      	movs	r3, #14
 80215ce:	18fb      	adds	r3, r7, r3
 80215d0:	781b      	ldrb	r3, [r3, #0]
 80215d2:	220f      	movs	r2, #15
 80215d4:	401a      	ands	r2, r3
 80215d6:	6878      	ldr	r0, [r7, #4]
 80215d8:	23ac      	movs	r3, #172	@ 0xac
 80215da:	0059      	lsls	r1, r3, #1
 80215dc:	0013      	movs	r3, r2
 80215de:	009b      	lsls	r3, r3, #2
 80215e0:	189b      	adds	r3, r3, r2
 80215e2:	009b      	lsls	r3, r3, #2
 80215e4:	18c3      	adds	r3, r0, r3
 80215e6:	185b      	adds	r3, r3, r1
 80215e8:	681b      	ldr	r3, [r3, #0]
 80215ea:	2b00      	cmp	r3, #0
 80215ec:	d106      	bne.n	80215fc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80215ee:	683a      	ldr	r2, [r7, #0]
 80215f0:	687b      	ldr	r3, [r7, #4]
 80215f2:	0011      	movs	r1, r2
 80215f4:	0018      	movs	r0, r3
 80215f6:	f000 fbfa 	bl	8021dee <USBD_CtlError>
                  break;
 80215fa:	e04d      	b.n	8021698 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80215fc:	220e      	movs	r2, #14
 80215fe:	18bb      	adds	r3, r7, r2
 8021600:	781b      	ldrb	r3, [r3, #0]
 8021602:	b25b      	sxtb	r3, r3
 8021604:	2b00      	cmp	r3, #0
 8021606:	da0c      	bge.n	8021622 <USBD_StdEPReq+0x2c8>
 8021608:	18bb      	adds	r3, r7, r2
 802160a:	781b      	ldrb	r3, [r3, #0]
 802160c:	227f      	movs	r2, #127	@ 0x7f
 802160e:	401a      	ands	r2, r3
 8021610:	0013      	movs	r3, r2
 8021612:	009b      	lsls	r3, r3, #2
 8021614:	189b      	adds	r3, r3, r2
 8021616:	009b      	lsls	r3, r3, #2
 8021618:	3310      	adds	r3, #16
 802161a:	687a      	ldr	r2, [r7, #4]
 802161c:	18d3      	adds	r3, r2, r3
 802161e:	3304      	adds	r3, #4
 8021620:	e00d      	b.n	802163e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8021622:	230e      	movs	r3, #14
 8021624:	18fb      	adds	r3, r7, r3
 8021626:	781b      	ldrb	r3, [r3, #0]
 8021628:	227f      	movs	r2, #127	@ 0x7f
 802162a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802162c:	0013      	movs	r3, r2
 802162e:	009b      	lsls	r3, r3, #2
 8021630:	189b      	adds	r3, r3, r2
 8021632:	009b      	lsls	r3, r3, #2
 8021634:	3351      	adds	r3, #81	@ 0x51
 8021636:	33ff      	adds	r3, #255	@ 0xff
 8021638:	687a      	ldr	r2, [r7, #4]
 802163a:	18d3      	adds	r3, r2, r3
 802163c:	3304      	adds	r3, #4
 802163e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8021640:	220e      	movs	r2, #14
 8021642:	18bb      	adds	r3, r7, r2
 8021644:	781b      	ldrb	r3, [r3, #0]
 8021646:	2b00      	cmp	r3, #0
 8021648:	d003      	beq.n	8021652 <USBD_StdEPReq+0x2f8>
 802164a:	18bb      	adds	r3, r7, r2
 802164c:	781b      	ldrb	r3, [r3, #0]
 802164e:	2b80      	cmp	r3, #128	@ 0x80
 8021650:	d103      	bne.n	802165a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8021652:	68bb      	ldr	r3, [r7, #8]
 8021654:	2200      	movs	r2, #0
 8021656:	601a      	str	r2, [r3, #0]
 8021658:	e010      	b.n	802167c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 802165a:	230e      	movs	r3, #14
 802165c:	18fb      	adds	r3, r7, r3
 802165e:	781a      	ldrb	r2, [r3, #0]
 8021660:	687b      	ldr	r3, [r7, #4]
 8021662:	0011      	movs	r1, r2
 8021664:	0018      	movs	r0, r3
 8021666:	f001 f940 	bl	80228ea <USBD_LL_IsStallEP>
 802166a:	1e03      	subs	r3, r0, #0
 802166c:	d003      	beq.n	8021676 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 802166e:	68bb      	ldr	r3, [r7, #8]
 8021670:	2201      	movs	r2, #1
 8021672:	601a      	str	r2, [r3, #0]
 8021674:	e002      	b.n	802167c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8021676:	68bb      	ldr	r3, [r7, #8]
 8021678:	2200      	movs	r2, #0
 802167a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 802167c:	68b9      	ldr	r1, [r7, #8]
 802167e:	687b      	ldr	r3, [r7, #4]
 8021680:	2202      	movs	r2, #2
 8021682:	0018      	movs	r0, r3
 8021684:	f000 fc31 	bl	8021eea <USBD_CtlSendData>
              break;
 8021688:	e006      	b.n	8021698 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 802168a:	683a      	ldr	r2, [r7, #0]
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	0011      	movs	r1, r2
 8021690:	0018      	movs	r0, r3
 8021692:	f000 fbac 	bl	8021dee <USBD_CtlError>
              break;
 8021696:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021698:	e006      	b.n	80216a8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 802169a:	683a      	ldr	r2, [r7, #0]
 802169c:	687b      	ldr	r3, [r7, #4]
 802169e:	0011      	movs	r1, r2
 80216a0:	0018      	movs	r0, r3
 80216a2:	f000 fba4 	bl	8021dee <USBD_CtlError>
          break;
 80216a6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80216a8:	e006      	b.n	80216b8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80216aa:	683a      	ldr	r2, [r7, #0]
 80216ac:	687b      	ldr	r3, [r7, #4]
 80216ae:	0011      	movs	r1, r2
 80216b0:	0018      	movs	r0, r3
 80216b2:	f000 fb9c 	bl	8021dee <USBD_CtlError>
      break;
 80216b6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80216b8:	230f      	movs	r3, #15
 80216ba:	18fb      	adds	r3, r7, r3
 80216bc:	781b      	ldrb	r3, [r3, #0]
}
 80216be:	0018      	movs	r0, r3
 80216c0:	46bd      	mov	sp, r7
 80216c2:	b004      	add	sp, #16
 80216c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080216c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80216c8:	b580      	push	{r7, lr}
 80216ca:	b084      	sub	sp, #16
 80216cc:	af00      	add	r7, sp, #0
 80216ce:	6078      	str	r0, [r7, #4]
 80216d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80216d2:	2308      	movs	r3, #8
 80216d4:	18fb      	adds	r3, r7, r3
 80216d6:	2200      	movs	r2, #0
 80216d8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80216da:	2300      	movs	r3, #0
 80216dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80216de:	230b      	movs	r3, #11
 80216e0:	18fb      	adds	r3, r7, r3
 80216e2:	2200      	movs	r2, #0
 80216e4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80216e6:	683b      	ldr	r3, [r7, #0]
 80216e8:	885b      	ldrh	r3, [r3, #2]
 80216ea:	0a1b      	lsrs	r3, r3, #8
 80216ec:	b29b      	uxth	r3, r3
 80216ee:	2b07      	cmp	r3, #7
 80216f0:	d900      	bls.n	80216f4 <USBD_GetDescriptor+0x2c>
 80216f2:	e159      	b.n	80219a8 <USBD_GetDescriptor+0x2e0>
 80216f4:	009a      	lsls	r2, r3, #2
 80216f6:	4bcb      	ldr	r3, [pc, #812]	@ (8021a24 <USBD_GetDescriptor+0x35c>)
 80216f8:	18d3      	adds	r3, r2, r3
 80216fa:	681b      	ldr	r3, [r3, #0]
 80216fc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80216fe:	687a      	ldr	r2, [r7, #4]
 8021700:	23ac      	movs	r3, #172	@ 0xac
 8021702:	009b      	lsls	r3, r3, #2
 8021704:	58d3      	ldr	r3, [r2, r3]
 8021706:	681b      	ldr	r3, [r3, #0]
 8021708:	687a      	ldr	r2, [r7, #4]
 802170a:	7c12      	ldrb	r2, [r2, #16]
 802170c:	2108      	movs	r1, #8
 802170e:	1879      	adds	r1, r7, r1
 8021710:	0010      	movs	r0, r2
 8021712:	4798      	blx	r3
 8021714:	0003      	movs	r3, r0
 8021716:	60fb      	str	r3, [r7, #12]
      break;
 8021718:	e153      	b.n	80219c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802171a:	687b      	ldr	r3, [r7, #4]
 802171c:	7c1b      	ldrb	r3, [r3, #16]
 802171e:	2b00      	cmp	r3, #0
 8021720:	d10f      	bne.n	8021742 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8021722:	687a      	ldr	r2, [r7, #4]
 8021724:	23ad      	movs	r3, #173	@ 0xad
 8021726:	009b      	lsls	r3, r3, #2
 8021728:	58d3      	ldr	r3, [r2, r3]
 802172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802172c:	2208      	movs	r2, #8
 802172e:	18ba      	adds	r2, r7, r2
 8021730:	0010      	movs	r0, r2
 8021732:	4798      	blx	r3
 8021734:	0003      	movs	r3, r0
 8021736:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021738:	68fb      	ldr	r3, [r7, #12]
 802173a:	3301      	adds	r3, #1
 802173c:	2202      	movs	r2, #2
 802173e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8021740:	e13f      	b.n	80219c2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8021742:	687a      	ldr	r2, [r7, #4]
 8021744:	23ad      	movs	r3, #173	@ 0xad
 8021746:	009b      	lsls	r3, r3, #2
 8021748:	58d3      	ldr	r3, [r2, r3]
 802174a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802174c:	2208      	movs	r2, #8
 802174e:	18ba      	adds	r2, r7, r2
 8021750:	0010      	movs	r0, r2
 8021752:	4798      	blx	r3
 8021754:	0003      	movs	r3, r0
 8021756:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021758:	68fb      	ldr	r3, [r7, #12]
 802175a:	3301      	adds	r3, #1
 802175c:	2202      	movs	r2, #2
 802175e:	701a      	strb	r2, [r3, #0]
      break;
 8021760:	e12f      	b.n	80219c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021762:	683b      	ldr	r3, [r7, #0]
 8021764:	885b      	ldrh	r3, [r3, #2]
 8021766:	b2db      	uxtb	r3, r3
 8021768:	2b05      	cmp	r3, #5
 802176a:	d900      	bls.n	802176e <USBD_GetDescriptor+0xa6>
 802176c:	e0d0      	b.n	8021910 <USBD_GetDescriptor+0x248>
 802176e:	009a      	lsls	r2, r3, #2
 8021770:	4bad      	ldr	r3, [pc, #692]	@ (8021a28 <USBD_GetDescriptor+0x360>)
 8021772:	18d3      	adds	r3, r2, r3
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021778:	687a      	ldr	r2, [r7, #4]
 802177a:	23ac      	movs	r3, #172	@ 0xac
 802177c:	009b      	lsls	r3, r3, #2
 802177e:	58d3      	ldr	r3, [r2, r3]
 8021780:	685b      	ldr	r3, [r3, #4]
 8021782:	2b00      	cmp	r3, #0
 8021784:	d00d      	beq.n	80217a2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021786:	687a      	ldr	r2, [r7, #4]
 8021788:	23ac      	movs	r3, #172	@ 0xac
 802178a:	009b      	lsls	r3, r3, #2
 802178c:	58d3      	ldr	r3, [r2, r3]
 802178e:	685b      	ldr	r3, [r3, #4]
 8021790:	687a      	ldr	r2, [r7, #4]
 8021792:	7c12      	ldrb	r2, [r2, #16]
 8021794:	2108      	movs	r1, #8
 8021796:	1879      	adds	r1, r7, r1
 8021798:	0010      	movs	r0, r2
 802179a:	4798      	blx	r3
 802179c:	0003      	movs	r3, r0
 802179e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80217a0:	e0c3      	b.n	802192a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80217a2:	683a      	ldr	r2, [r7, #0]
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	0011      	movs	r1, r2
 80217a8:	0018      	movs	r0, r3
 80217aa:	f000 fb20 	bl	8021dee <USBD_CtlError>
            err++;
 80217ae:	210b      	movs	r1, #11
 80217b0:	187b      	adds	r3, r7, r1
 80217b2:	781a      	ldrb	r2, [r3, #0]
 80217b4:	187b      	adds	r3, r7, r1
 80217b6:	3201      	adds	r2, #1
 80217b8:	701a      	strb	r2, [r3, #0]
          break;
 80217ba:	e0b6      	b.n	802192a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80217bc:	687a      	ldr	r2, [r7, #4]
 80217be:	23ac      	movs	r3, #172	@ 0xac
 80217c0:	009b      	lsls	r3, r3, #2
 80217c2:	58d3      	ldr	r3, [r2, r3]
 80217c4:	689b      	ldr	r3, [r3, #8]
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d00d      	beq.n	80217e6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80217ca:	687a      	ldr	r2, [r7, #4]
 80217cc:	23ac      	movs	r3, #172	@ 0xac
 80217ce:	009b      	lsls	r3, r3, #2
 80217d0:	58d3      	ldr	r3, [r2, r3]
 80217d2:	689b      	ldr	r3, [r3, #8]
 80217d4:	687a      	ldr	r2, [r7, #4]
 80217d6:	7c12      	ldrb	r2, [r2, #16]
 80217d8:	2108      	movs	r1, #8
 80217da:	1879      	adds	r1, r7, r1
 80217dc:	0010      	movs	r0, r2
 80217de:	4798      	blx	r3
 80217e0:	0003      	movs	r3, r0
 80217e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80217e4:	e0a1      	b.n	802192a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80217e6:	683a      	ldr	r2, [r7, #0]
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	0011      	movs	r1, r2
 80217ec:	0018      	movs	r0, r3
 80217ee:	f000 fafe 	bl	8021dee <USBD_CtlError>
            err++;
 80217f2:	210b      	movs	r1, #11
 80217f4:	187b      	adds	r3, r7, r1
 80217f6:	781a      	ldrb	r2, [r3, #0]
 80217f8:	187b      	adds	r3, r7, r1
 80217fa:	3201      	adds	r2, #1
 80217fc:	701a      	strb	r2, [r3, #0]
          break;
 80217fe:	e094      	b.n	802192a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8021800:	687a      	ldr	r2, [r7, #4]
 8021802:	23ac      	movs	r3, #172	@ 0xac
 8021804:	009b      	lsls	r3, r3, #2
 8021806:	58d3      	ldr	r3, [r2, r3]
 8021808:	68db      	ldr	r3, [r3, #12]
 802180a:	2b00      	cmp	r3, #0
 802180c:	d00d      	beq.n	802182a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802180e:	687a      	ldr	r2, [r7, #4]
 8021810:	23ac      	movs	r3, #172	@ 0xac
 8021812:	009b      	lsls	r3, r3, #2
 8021814:	58d3      	ldr	r3, [r2, r3]
 8021816:	68db      	ldr	r3, [r3, #12]
 8021818:	687a      	ldr	r2, [r7, #4]
 802181a:	7c12      	ldrb	r2, [r2, #16]
 802181c:	2108      	movs	r1, #8
 802181e:	1879      	adds	r1, r7, r1
 8021820:	0010      	movs	r0, r2
 8021822:	4798      	blx	r3
 8021824:	0003      	movs	r3, r0
 8021826:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021828:	e07f      	b.n	802192a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802182a:	683a      	ldr	r2, [r7, #0]
 802182c:	687b      	ldr	r3, [r7, #4]
 802182e:	0011      	movs	r1, r2
 8021830:	0018      	movs	r0, r3
 8021832:	f000 fadc 	bl	8021dee <USBD_CtlError>
            err++;
 8021836:	210b      	movs	r1, #11
 8021838:	187b      	adds	r3, r7, r1
 802183a:	781a      	ldrb	r2, [r3, #0]
 802183c:	187b      	adds	r3, r7, r1
 802183e:	3201      	adds	r2, #1
 8021840:	701a      	strb	r2, [r3, #0]
          break;
 8021842:	e072      	b.n	802192a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021844:	687a      	ldr	r2, [r7, #4]
 8021846:	23ac      	movs	r3, #172	@ 0xac
 8021848:	009b      	lsls	r3, r3, #2
 802184a:	58d3      	ldr	r3, [r2, r3]
 802184c:	691b      	ldr	r3, [r3, #16]
 802184e:	2b00      	cmp	r3, #0
 8021850:	d00d      	beq.n	802186e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8021852:	687a      	ldr	r2, [r7, #4]
 8021854:	23ac      	movs	r3, #172	@ 0xac
 8021856:	009b      	lsls	r3, r3, #2
 8021858:	58d3      	ldr	r3, [r2, r3]
 802185a:	691b      	ldr	r3, [r3, #16]
 802185c:	687a      	ldr	r2, [r7, #4]
 802185e:	7c12      	ldrb	r2, [r2, #16]
 8021860:	2108      	movs	r1, #8
 8021862:	1879      	adds	r1, r7, r1
 8021864:	0010      	movs	r0, r2
 8021866:	4798      	blx	r3
 8021868:	0003      	movs	r3, r0
 802186a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802186c:	e05d      	b.n	802192a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802186e:	683a      	ldr	r2, [r7, #0]
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	0011      	movs	r1, r2
 8021874:	0018      	movs	r0, r3
 8021876:	f000 faba 	bl	8021dee <USBD_CtlError>
            err++;
 802187a:	210b      	movs	r1, #11
 802187c:	187b      	adds	r3, r7, r1
 802187e:	781a      	ldrb	r2, [r3, #0]
 8021880:	187b      	adds	r3, r7, r1
 8021882:	3201      	adds	r2, #1
 8021884:	701a      	strb	r2, [r3, #0]
          break;
 8021886:	e050      	b.n	802192a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021888:	687a      	ldr	r2, [r7, #4]
 802188a:	23ac      	movs	r3, #172	@ 0xac
 802188c:	009b      	lsls	r3, r3, #2
 802188e:	58d3      	ldr	r3, [r2, r3]
 8021890:	695b      	ldr	r3, [r3, #20]
 8021892:	2b00      	cmp	r3, #0
 8021894:	d00d      	beq.n	80218b2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021896:	687a      	ldr	r2, [r7, #4]
 8021898:	23ac      	movs	r3, #172	@ 0xac
 802189a:	009b      	lsls	r3, r3, #2
 802189c:	58d3      	ldr	r3, [r2, r3]
 802189e:	695b      	ldr	r3, [r3, #20]
 80218a0:	687a      	ldr	r2, [r7, #4]
 80218a2:	7c12      	ldrb	r2, [r2, #16]
 80218a4:	2108      	movs	r1, #8
 80218a6:	1879      	adds	r1, r7, r1
 80218a8:	0010      	movs	r0, r2
 80218aa:	4798      	blx	r3
 80218ac:	0003      	movs	r3, r0
 80218ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80218b0:	e03b      	b.n	802192a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80218b2:	683a      	ldr	r2, [r7, #0]
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	0011      	movs	r1, r2
 80218b8:	0018      	movs	r0, r3
 80218ba:	f000 fa98 	bl	8021dee <USBD_CtlError>
            err++;
 80218be:	210b      	movs	r1, #11
 80218c0:	187b      	adds	r3, r7, r1
 80218c2:	781a      	ldrb	r2, [r3, #0]
 80218c4:	187b      	adds	r3, r7, r1
 80218c6:	3201      	adds	r2, #1
 80218c8:	701a      	strb	r2, [r3, #0]
          break;
 80218ca:	e02e      	b.n	802192a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80218cc:	687a      	ldr	r2, [r7, #4]
 80218ce:	23ac      	movs	r3, #172	@ 0xac
 80218d0:	009b      	lsls	r3, r3, #2
 80218d2:	58d3      	ldr	r3, [r2, r3]
 80218d4:	699b      	ldr	r3, [r3, #24]
 80218d6:	2b00      	cmp	r3, #0
 80218d8:	d00d      	beq.n	80218f6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80218da:	687a      	ldr	r2, [r7, #4]
 80218dc:	23ac      	movs	r3, #172	@ 0xac
 80218de:	009b      	lsls	r3, r3, #2
 80218e0:	58d3      	ldr	r3, [r2, r3]
 80218e2:	699b      	ldr	r3, [r3, #24]
 80218e4:	687a      	ldr	r2, [r7, #4]
 80218e6:	7c12      	ldrb	r2, [r2, #16]
 80218e8:	2108      	movs	r1, #8
 80218ea:	1879      	adds	r1, r7, r1
 80218ec:	0010      	movs	r0, r2
 80218ee:	4798      	blx	r3
 80218f0:	0003      	movs	r3, r0
 80218f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80218f4:	e019      	b.n	802192a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80218f6:	683a      	ldr	r2, [r7, #0]
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	0011      	movs	r1, r2
 80218fc:	0018      	movs	r0, r3
 80218fe:	f000 fa76 	bl	8021dee <USBD_CtlError>
            err++;
 8021902:	210b      	movs	r1, #11
 8021904:	187b      	adds	r3, r7, r1
 8021906:	781a      	ldrb	r2, [r3, #0]
 8021908:	187b      	adds	r3, r7, r1
 802190a:	3201      	adds	r2, #1
 802190c:	701a      	strb	r2, [r3, #0]
          break;
 802190e:	e00c      	b.n	802192a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8021910:	683a      	ldr	r2, [r7, #0]
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	0011      	movs	r1, r2
 8021916:	0018      	movs	r0, r3
 8021918:	f000 fa69 	bl	8021dee <USBD_CtlError>
          err++;
 802191c:	210b      	movs	r1, #11
 802191e:	187b      	adds	r3, r7, r1
 8021920:	781a      	ldrb	r2, [r3, #0]
 8021922:	187b      	adds	r3, r7, r1
 8021924:	3201      	adds	r2, #1
 8021926:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8021928:	e04b      	b.n	80219c2 <USBD_GetDescriptor+0x2fa>
 802192a:	e04a      	b.n	80219c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 802192c:	687b      	ldr	r3, [r7, #4]
 802192e:	7c1b      	ldrb	r3, [r3, #16]
 8021930:	2b00      	cmp	r3, #0
 8021932:	d10b      	bne.n	802194c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8021934:	687a      	ldr	r2, [r7, #4]
 8021936:	23ad      	movs	r3, #173	@ 0xad
 8021938:	009b      	lsls	r3, r3, #2
 802193a:	58d3      	ldr	r3, [r2, r3]
 802193c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802193e:	2208      	movs	r2, #8
 8021940:	18ba      	adds	r2, r7, r2
 8021942:	0010      	movs	r0, r2
 8021944:	4798      	blx	r3
 8021946:	0003      	movs	r3, r0
 8021948:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802194a:	e03a      	b.n	80219c2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 802194c:	683a      	ldr	r2, [r7, #0]
 802194e:	687b      	ldr	r3, [r7, #4]
 8021950:	0011      	movs	r1, r2
 8021952:	0018      	movs	r0, r3
 8021954:	f000 fa4b 	bl	8021dee <USBD_CtlError>
        err++;
 8021958:	210b      	movs	r1, #11
 802195a:	187b      	adds	r3, r7, r1
 802195c:	781a      	ldrb	r2, [r3, #0]
 802195e:	187b      	adds	r3, r7, r1
 8021960:	3201      	adds	r2, #1
 8021962:	701a      	strb	r2, [r3, #0]
      break;
 8021964:	e02d      	b.n	80219c2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021966:	687b      	ldr	r3, [r7, #4]
 8021968:	7c1b      	ldrb	r3, [r3, #16]
 802196a:	2b00      	cmp	r3, #0
 802196c:	d10f      	bne.n	802198e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 802196e:	687a      	ldr	r2, [r7, #4]
 8021970:	23ad      	movs	r3, #173	@ 0xad
 8021972:	009b      	lsls	r3, r3, #2
 8021974:	58d3      	ldr	r3, [r2, r3]
 8021976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021978:	2208      	movs	r2, #8
 802197a:	18ba      	adds	r2, r7, r2
 802197c:	0010      	movs	r0, r2
 802197e:	4798      	blx	r3
 8021980:	0003      	movs	r3, r0
 8021982:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8021984:	68fb      	ldr	r3, [r7, #12]
 8021986:	3301      	adds	r3, #1
 8021988:	2207      	movs	r2, #7
 802198a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 802198c:	e019      	b.n	80219c2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 802198e:	683a      	ldr	r2, [r7, #0]
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	0011      	movs	r1, r2
 8021994:	0018      	movs	r0, r3
 8021996:	f000 fa2a 	bl	8021dee <USBD_CtlError>
        err++;
 802199a:	210b      	movs	r1, #11
 802199c:	187b      	adds	r3, r7, r1
 802199e:	781a      	ldrb	r2, [r3, #0]
 80219a0:	187b      	adds	r3, r7, r1
 80219a2:	3201      	adds	r2, #1
 80219a4:	701a      	strb	r2, [r3, #0]
      break;
 80219a6:	e00c      	b.n	80219c2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80219a8:	683a      	ldr	r2, [r7, #0]
 80219aa:	687b      	ldr	r3, [r7, #4]
 80219ac:	0011      	movs	r1, r2
 80219ae:	0018      	movs	r0, r3
 80219b0:	f000 fa1d 	bl	8021dee <USBD_CtlError>
      err++;
 80219b4:	210b      	movs	r1, #11
 80219b6:	187b      	adds	r3, r7, r1
 80219b8:	781a      	ldrb	r2, [r3, #0]
 80219ba:	187b      	adds	r3, r7, r1
 80219bc:	3201      	adds	r2, #1
 80219be:	701a      	strb	r2, [r3, #0]
      break;
 80219c0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80219c2:	230b      	movs	r3, #11
 80219c4:	18fb      	adds	r3, r7, r3
 80219c6:	781b      	ldrb	r3, [r3, #0]
 80219c8:	2b00      	cmp	r3, #0
 80219ca:	d127      	bne.n	8021a1c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80219cc:	2108      	movs	r1, #8
 80219ce:	187b      	adds	r3, r7, r1
 80219d0:	881b      	ldrh	r3, [r3, #0]
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	d019      	beq.n	8021a0a <USBD_GetDescriptor+0x342>
 80219d6:	683b      	ldr	r3, [r7, #0]
 80219d8:	88db      	ldrh	r3, [r3, #6]
 80219da:	2b00      	cmp	r3, #0
 80219dc:	d015      	beq.n	8021a0a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80219de:	683b      	ldr	r3, [r7, #0]
 80219e0:	88da      	ldrh	r2, [r3, #6]
 80219e2:	187b      	adds	r3, r7, r1
 80219e4:	881b      	ldrh	r3, [r3, #0]
 80219e6:	1c18      	adds	r0, r3, #0
 80219e8:	1c11      	adds	r1, r2, #0
 80219ea:	b28a      	uxth	r2, r1
 80219ec:	b283      	uxth	r3, r0
 80219ee:	429a      	cmp	r2, r3
 80219f0:	d900      	bls.n	80219f4 <USBD_GetDescriptor+0x32c>
 80219f2:	1c01      	adds	r1, r0, #0
 80219f4:	b28a      	uxth	r2, r1
 80219f6:	2108      	movs	r1, #8
 80219f8:	187b      	adds	r3, r7, r1
 80219fa:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80219fc:	187b      	adds	r3, r7, r1
 80219fe:	881a      	ldrh	r2, [r3, #0]
 8021a00:	68f9      	ldr	r1, [r7, #12]
 8021a02:	687b      	ldr	r3, [r7, #4]
 8021a04:	0018      	movs	r0, r3
 8021a06:	f000 fa70 	bl	8021eea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8021a0a:	683b      	ldr	r3, [r7, #0]
 8021a0c:	88db      	ldrh	r3, [r3, #6]
 8021a0e:	2b00      	cmp	r3, #0
 8021a10:	d105      	bne.n	8021a1e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	0018      	movs	r0, r3
 8021a16:	f000 fad2 	bl	8021fbe <USBD_CtlSendStatus>
 8021a1a:	e000      	b.n	8021a1e <USBD_GetDescriptor+0x356>
    return;
 8021a1c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021a1e:	46bd      	mov	sp, r7
 8021a20:	b004      	add	sp, #16
 8021a22:	bd80      	pop	{r7, pc}
 8021a24:	0802db18 	.word	0x0802db18
 8021a28:	0802db38 	.word	0x0802db38

08021a2c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021a2c:	b590      	push	{r4, r7, lr}
 8021a2e:	b085      	sub	sp, #20
 8021a30:	af00      	add	r7, sp, #0
 8021a32:	6078      	str	r0, [r7, #4]
 8021a34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021a36:	683b      	ldr	r3, [r7, #0]
 8021a38:	889b      	ldrh	r3, [r3, #4]
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	d13d      	bne.n	8021aba <USBD_SetAddress+0x8e>
 8021a3e:	683b      	ldr	r3, [r7, #0]
 8021a40:	88db      	ldrh	r3, [r3, #6]
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d139      	bne.n	8021aba <USBD_SetAddress+0x8e>
 8021a46:	683b      	ldr	r3, [r7, #0]
 8021a48:	885b      	ldrh	r3, [r3, #2]
 8021a4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8021a4c:	d835      	bhi.n	8021aba <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021a4e:	683b      	ldr	r3, [r7, #0]
 8021a50:	885b      	ldrh	r3, [r3, #2]
 8021a52:	b2da      	uxtb	r2, r3
 8021a54:	230f      	movs	r3, #15
 8021a56:	18fb      	adds	r3, r7, r3
 8021a58:	217f      	movs	r1, #127	@ 0x7f
 8021a5a:	400a      	ands	r2, r1
 8021a5c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021a5e:	687a      	ldr	r2, [r7, #4]
 8021a60:	23a7      	movs	r3, #167	@ 0xa7
 8021a62:	009b      	lsls	r3, r3, #2
 8021a64:	5cd3      	ldrb	r3, [r2, r3]
 8021a66:	2b03      	cmp	r3, #3
 8021a68:	d106      	bne.n	8021a78 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8021a6a:	683a      	ldr	r2, [r7, #0]
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	0011      	movs	r1, r2
 8021a70:	0018      	movs	r0, r3
 8021a72:	f000 f9bc 	bl	8021dee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021a76:	e027      	b.n	8021ac8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021a78:	687b      	ldr	r3, [r7, #4]
 8021a7a:	240f      	movs	r4, #15
 8021a7c:	193a      	adds	r2, r7, r4
 8021a7e:	4914      	ldr	r1, [pc, #80]	@ (8021ad0 <USBD_SetAddress+0xa4>)
 8021a80:	7812      	ldrb	r2, [r2, #0]
 8021a82:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021a84:	193b      	adds	r3, r7, r4
 8021a86:	781a      	ldrb	r2, [r3, #0]
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	0011      	movs	r1, r2
 8021a8c:	0018      	movs	r0, r3
 8021a8e:	f000 ff5d 	bl	802294c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	0018      	movs	r0, r3
 8021a96:	f000 fa92 	bl	8021fbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021a9a:	193b      	adds	r3, r7, r4
 8021a9c:	781b      	ldrb	r3, [r3, #0]
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	d005      	beq.n	8021aae <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021aa2:	687a      	ldr	r2, [r7, #4]
 8021aa4:	23a7      	movs	r3, #167	@ 0xa7
 8021aa6:	009b      	lsls	r3, r3, #2
 8021aa8:	2102      	movs	r1, #2
 8021aaa:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021aac:	e00c      	b.n	8021ac8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021aae:	687a      	ldr	r2, [r7, #4]
 8021ab0:	23a7      	movs	r3, #167	@ 0xa7
 8021ab2:	009b      	lsls	r3, r3, #2
 8021ab4:	2101      	movs	r1, #1
 8021ab6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021ab8:	e006      	b.n	8021ac8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021aba:	683a      	ldr	r2, [r7, #0]
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	0011      	movs	r1, r2
 8021ac0:	0018      	movs	r0, r3
 8021ac2:	f000 f994 	bl	8021dee <USBD_CtlError>
  }
}
 8021ac6:	46c0      	nop			@ (mov r8, r8)
 8021ac8:	46c0      	nop			@ (mov r8, r8)
 8021aca:	46bd      	mov	sp, r7
 8021acc:	b005      	add	sp, #20
 8021ace:	bd90      	pop	{r4, r7, pc}
 8021ad0:	0000029e 	.word	0x0000029e

08021ad4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ad4:	b580      	push	{r7, lr}
 8021ad6:	b082      	sub	sp, #8
 8021ad8:	af00      	add	r7, sp, #0
 8021ada:	6078      	str	r0, [r7, #4]
 8021adc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021ade:	683b      	ldr	r3, [r7, #0]
 8021ae0:	885b      	ldrh	r3, [r3, #2]
 8021ae2:	b2da      	uxtb	r2, r3
 8021ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021ae6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021aea:	781b      	ldrb	r3, [r3, #0]
 8021aec:	2b01      	cmp	r3, #1
 8021aee:	d906      	bls.n	8021afe <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8021af0:	683a      	ldr	r2, [r7, #0]
 8021af2:	687b      	ldr	r3, [r7, #4]
 8021af4:	0011      	movs	r1, r2
 8021af6:	0018      	movs	r0, r3
 8021af8:	f000 f979 	bl	8021dee <USBD_CtlError>
 8021afc:	e088      	b.n	8021c10 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8021afe:	687a      	ldr	r2, [r7, #4]
 8021b00:	23a7      	movs	r3, #167	@ 0xa7
 8021b02:	009b      	lsls	r3, r3, #2
 8021b04:	5cd3      	ldrb	r3, [r2, r3]
 8021b06:	2b02      	cmp	r3, #2
 8021b08:	d002      	beq.n	8021b10 <USBD_SetConfig+0x3c>
 8021b0a:	2b03      	cmp	r3, #3
 8021b0c:	d029      	beq.n	8021b62 <USBD_SetConfig+0x8e>
 8021b0e:	e071      	b.n	8021bf4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8021b10:	4b41      	ldr	r3, [pc, #260]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021b12:	781b      	ldrb	r3, [r3, #0]
 8021b14:	2b00      	cmp	r3, #0
 8021b16:	d01f      	beq.n	8021b58 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8021b18:	4b3f      	ldr	r3, [pc, #252]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021b1a:	781b      	ldrb	r3, [r3, #0]
 8021b1c:	001a      	movs	r2, r3
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021b22:	687a      	ldr	r2, [r7, #4]
 8021b24:	23a7      	movs	r3, #167	@ 0xa7
 8021b26:	009b      	lsls	r3, r3, #2
 8021b28:	2103      	movs	r1, #3
 8021b2a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021b2e:	781a      	ldrb	r2, [r3, #0]
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	0011      	movs	r1, r2
 8021b34:	0018      	movs	r0, r3
 8021b36:	f7ff f8c6 	bl	8020cc6 <USBD_SetClassConfig>
 8021b3a:	0003      	movs	r3, r0
 8021b3c:	2b02      	cmp	r3, #2
 8021b3e:	d106      	bne.n	8021b4e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8021b40:	683a      	ldr	r2, [r7, #0]
 8021b42:	687b      	ldr	r3, [r7, #4]
 8021b44:	0011      	movs	r1, r2
 8021b46:	0018      	movs	r0, r3
 8021b48:	f000 f951 	bl	8021dee <USBD_CtlError>
            return;
 8021b4c:	e060      	b.n	8021c10 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	0018      	movs	r0, r3
 8021b52:	f000 fa34 	bl	8021fbe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021b56:	e05b      	b.n	8021c10 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021b58:	687b      	ldr	r3, [r7, #4]
 8021b5a:	0018      	movs	r0, r3
 8021b5c:	f000 fa2f 	bl	8021fbe <USBD_CtlSendStatus>
        break;
 8021b60:	e056      	b.n	8021c10 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8021b62:	4b2d      	ldr	r3, [pc, #180]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021b64:	781b      	ldrb	r3, [r3, #0]
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	d115      	bne.n	8021b96 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021b6a:	687a      	ldr	r2, [r7, #4]
 8021b6c:	23a7      	movs	r3, #167	@ 0xa7
 8021b6e:	009b      	lsls	r3, r3, #2
 8021b70:	2102      	movs	r1, #2
 8021b72:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8021b74:	4b28      	ldr	r3, [pc, #160]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021b76:	781b      	ldrb	r3, [r3, #0]
 8021b78:	001a      	movs	r2, r3
 8021b7a:	687b      	ldr	r3, [r7, #4]
 8021b7c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8021b7e:	4b26      	ldr	r3, [pc, #152]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021b80:	781a      	ldrb	r2, [r3, #0]
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	0011      	movs	r1, r2
 8021b86:	0018      	movs	r0, r3
 8021b88:	f7ff f8c4 	bl	8020d14 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	0018      	movs	r0, r3
 8021b90:	f000 fa15 	bl	8021fbe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021b94:	e03c      	b.n	8021c10 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8021b96:	4b20      	ldr	r3, [pc, #128]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021b98:	781b      	ldrb	r3, [r3, #0]
 8021b9a:	001a      	movs	r2, r3
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	685b      	ldr	r3, [r3, #4]
 8021ba0:	429a      	cmp	r2, r3
 8021ba2:	d022      	beq.n	8021bea <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	685b      	ldr	r3, [r3, #4]
 8021ba8:	b2da      	uxtb	r2, r3
 8021baa:	687b      	ldr	r3, [r7, #4]
 8021bac:	0011      	movs	r1, r2
 8021bae:	0018      	movs	r0, r3
 8021bb0:	f7ff f8b0 	bl	8020d14 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8021bb4:	4b18      	ldr	r3, [pc, #96]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021bb6:	781b      	ldrb	r3, [r3, #0]
 8021bb8:	001a      	movs	r2, r3
 8021bba:	687b      	ldr	r3, [r7, #4]
 8021bbc:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021bbe:	4b16      	ldr	r3, [pc, #88]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021bc0:	781a      	ldrb	r2, [r3, #0]
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	0011      	movs	r1, r2
 8021bc6:	0018      	movs	r0, r3
 8021bc8:	f7ff f87d 	bl	8020cc6 <USBD_SetClassConfig>
 8021bcc:	0003      	movs	r3, r0
 8021bce:	2b02      	cmp	r3, #2
 8021bd0:	d106      	bne.n	8021be0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8021bd2:	683a      	ldr	r2, [r7, #0]
 8021bd4:	687b      	ldr	r3, [r7, #4]
 8021bd6:	0011      	movs	r1, r2
 8021bd8:	0018      	movs	r0, r3
 8021bda:	f000 f908 	bl	8021dee <USBD_CtlError>
            return;
 8021bde:	e017      	b.n	8021c10 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	0018      	movs	r0, r3
 8021be4:	f000 f9eb 	bl	8021fbe <USBD_CtlSendStatus>
        break;
 8021be8:	e012      	b.n	8021c10 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021bea:	687b      	ldr	r3, [r7, #4]
 8021bec:	0018      	movs	r0, r3
 8021bee:	f000 f9e6 	bl	8021fbe <USBD_CtlSendStatus>
        break;
 8021bf2:	e00d      	b.n	8021c10 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8021bf4:	683a      	ldr	r2, [r7, #0]
 8021bf6:	687b      	ldr	r3, [r7, #4]
 8021bf8:	0011      	movs	r1, r2
 8021bfa:	0018      	movs	r0, r3
 8021bfc:	f000 f8f7 	bl	8021dee <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8021c00:	4b05      	ldr	r3, [pc, #20]	@ (8021c18 <USBD_SetConfig+0x144>)
 8021c02:	781a      	ldrb	r2, [r3, #0]
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	0011      	movs	r1, r2
 8021c08:	0018      	movs	r0, r3
 8021c0a:	f7ff f883 	bl	8020d14 <USBD_ClrClassConfig>
        break;
 8021c0e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021c10:	46bd      	mov	sp, r7
 8021c12:	b002      	add	sp, #8
 8021c14:	bd80      	pop	{r7, pc}
 8021c16:	46c0      	nop			@ (mov r8, r8)
 8021c18:	20002240 	.word	0x20002240

08021c1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021c1c:	b580      	push	{r7, lr}
 8021c1e:	b082      	sub	sp, #8
 8021c20:	af00      	add	r7, sp, #0
 8021c22:	6078      	str	r0, [r7, #4]
 8021c24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021c26:	683b      	ldr	r3, [r7, #0]
 8021c28:	88db      	ldrh	r3, [r3, #6]
 8021c2a:	2b01      	cmp	r3, #1
 8021c2c:	d006      	beq.n	8021c3c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8021c2e:	683a      	ldr	r2, [r7, #0]
 8021c30:	687b      	ldr	r3, [r7, #4]
 8021c32:	0011      	movs	r1, r2
 8021c34:	0018      	movs	r0, r3
 8021c36:	f000 f8da 	bl	8021dee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021c3a:	e026      	b.n	8021c8a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8021c3c:	687a      	ldr	r2, [r7, #4]
 8021c3e:	23a7      	movs	r3, #167	@ 0xa7
 8021c40:	009b      	lsls	r3, r3, #2
 8021c42:	5cd3      	ldrb	r3, [r2, r3]
 8021c44:	2b02      	cmp	r3, #2
 8021c46:	dc02      	bgt.n	8021c4e <USBD_GetConfig+0x32>
 8021c48:	2b00      	cmp	r3, #0
 8021c4a:	dc03      	bgt.n	8021c54 <USBD_GetConfig+0x38>
 8021c4c:	e016      	b.n	8021c7c <USBD_GetConfig+0x60>
 8021c4e:	2b03      	cmp	r3, #3
 8021c50:	d00c      	beq.n	8021c6c <USBD_GetConfig+0x50>
 8021c52:	e013      	b.n	8021c7c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	2200      	movs	r2, #0
 8021c58:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8021c5a:	687b      	ldr	r3, [r7, #4]
 8021c5c:	3308      	adds	r3, #8
 8021c5e:	0019      	movs	r1, r3
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	2201      	movs	r2, #1
 8021c64:	0018      	movs	r0, r3
 8021c66:	f000 f940 	bl	8021eea <USBD_CtlSendData>
        break;
 8021c6a:	e00e      	b.n	8021c8a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	1d19      	adds	r1, r3, #4
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	2201      	movs	r2, #1
 8021c74:	0018      	movs	r0, r3
 8021c76:	f000 f938 	bl	8021eea <USBD_CtlSendData>
        break;
 8021c7a:	e006      	b.n	8021c8a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8021c7c:	683a      	ldr	r2, [r7, #0]
 8021c7e:	687b      	ldr	r3, [r7, #4]
 8021c80:	0011      	movs	r1, r2
 8021c82:	0018      	movs	r0, r3
 8021c84:	f000 f8b3 	bl	8021dee <USBD_CtlError>
        break;
 8021c88:	46c0      	nop			@ (mov r8, r8)
}
 8021c8a:	46c0      	nop			@ (mov r8, r8)
 8021c8c:	46bd      	mov	sp, r7
 8021c8e:	b002      	add	sp, #8
 8021c90:	bd80      	pop	{r7, pc}

08021c92 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021c92:	b580      	push	{r7, lr}
 8021c94:	b082      	sub	sp, #8
 8021c96:	af00      	add	r7, sp, #0
 8021c98:	6078      	str	r0, [r7, #4]
 8021c9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021c9c:	687a      	ldr	r2, [r7, #4]
 8021c9e:	23a7      	movs	r3, #167	@ 0xa7
 8021ca0:	009b      	lsls	r3, r3, #2
 8021ca2:	5cd3      	ldrb	r3, [r2, r3]
 8021ca4:	3b01      	subs	r3, #1
 8021ca6:	2b02      	cmp	r3, #2
 8021ca8:	d822      	bhi.n	8021cf0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021caa:	683b      	ldr	r3, [r7, #0]
 8021cac:	88db      	ldrh	r3, [r3, #6]
 8021cae:	2b02      	cmp	r3, #2
 8021cb0:	d006      	beq.n	8021cc0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8021cb2:	683a      	ldr	r2, [r7, #0]
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	0011      	movs	r1, r2
 8021cb8:	0018      	movs	r0, r3
 8021cba:	f000 f898 	bl	8021dee <USBD_CtlError>
        break;
 8021cbe:	e01e      	b.n	8021cfe <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	2201      	movs	r2, #1
 8021cc4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8021cc6:	687a      	ldr	r2, [r7, #4]
 8021cc8:	23a9      	movs	r3, #169	@ 0xa9
 8021cca:	009b      	lsls	r3, r3, #2
 8021ccc:	58d3      	ldr	r3, [r2, r3]
 8021cce:	2b00      	cmp	r3, #0
 8021cd0:	d005      	beq.n	8021cde <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021cd2:	687b      	ldr	r3, [r7, #4]
 8021cd4:	68db      	ldr	r3, [r3, #12]
 8021cd6:	2202      	movs	r2, #2
 8021cd8:	431a      	orrs	r2, r3
 8021cda:	687b      	ldr	r3, [r7, #4]
 8021cdc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8021cde:	687b      	ldr	r3, [r7, #4]
 8021ce0:	330c      	adds	r3, #12
 8021ce2:	0019      	movs	r1, r3
 8021ce4:	687b      	ldr	r3, [r7, #4]
 8021ce6:	2202      	movs	r2, #2
 8021ce8:	0018      	movs	r0, r3
 8021cea:	f000 f8fe 	bl	8021eea <USBD_CtlSendData>
      break;
 8021cee:	e006      	b.n	8021cfe <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8021cf0:	683a      	ldr	r2, [r7, #0]
 8021cf2:	687b      	ldr	r3, [r7, #4]
 8021cf4:	0011      	movs	r1, r2
 8021cf6:	0018      	movs	r0, r3
 8021cf8:	f000 f879 	bl	8021dee <USBD_CtlError>
      break;
 8021cfc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8021cfe:	46c0      	nop			@ (mov r8, r8)
 8021d00:	46bd      	mov	sp, r7
 8021d02:	b002      	add	sp, #8
 8021d04:	bd80      	pop	{r7, pc}

08021d06 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021d06:	b580      	push	{r7, lr}
 8021d08:	b082      	sub	sp, #8
 8021d0a:	af00      	add	r7, sp, #0
 8021d0c:	6078      	str	r0, [r7, #4]
 8021d0e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021d10:	683b      	ldr	r3, [r7, #0]
 8021d12:	885b      	ldrh	r3, [r3, #2]
 8021d14:	2b01      	cmp	r3, #1
 8021d16:	d108      	bne.n	8021d2a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8021d18:	687a      	ldr	r2, [r7, #4]
 8021d1a:	23a9      	movs	r3, #169	@ 0xa9
 8021d1c:	009b      	lsls	r3, r3, #2
 8021d1e:	2101      	movs	r1, #1
 8021d20:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8021d22:	687b      	ldr	r3, [r7, #4]
 8021d24:	0018      	movs	r0, r3
 8021d26:	f000 f94a 	bl	8021fbe <USBD_CtlSendStatus>
  }
}
 8021d2a:	46c0      	nop			@ (mov r8, r8)
 8021d2c:	46bd      	mov	sp, r7
 8021d2e:	b002      	add	sp, #8
 8021d30:	bd80      	pop	{r7, pc}

08021d32 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021d32:	b580      	push	{r7, lr}
 8021d34:	b082      	sub	sp, #8
 8021d36:	af00      	add	r7, sp, #0
 8021d38:	6078      	str	r0, [r7, #4]
 8021d3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021d3c:	687a      	ldr	r2, [r7, #4]
 8021d3e:	23a7      	movs	r3, #167	@ 0xa7
 8021d40:	009b      	lsls	r3, r3, #2
 8021d42:	5cd3      	ldrb	r3, [r2, r3]
 8021d44:	3b01      	subs	r3, #1
 8021d46:	2b02      	cmp	r3, #2
 8021d48:	d80d      	bhi.n	8021d66 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021d4a:	683b      	ldr	r3, [r7, #0]
 8021d4c:	885b      	ldrh	r3, [r3, #2]
 8021d4e:	2b01      	cmp	r3, #1
 8021d50:	d110      	bne.n	8021d74 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8021d52:	687a      	ldr	r2, [r7, #4]
 8021d54:	23a9      	movs	r3, #169	@ 0xa9
 8021d56:	009b      	lsls	r3, r3, #2
 8021d58:	2100      	movs	r1, #0
 8021d5a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	0018      	movs	r0, r3
 8021d60:	f000 f92d 	bl	8021fbe <USBD_CtlSendStatus>
      }
      break;
 8021d64:	e006      	b.n	8021d74 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8021d66:	683a      	ldr	r2, [r7, #0]
 8021d68:	687b      	ldr	r3, [r7, #4]
 8021d6a:	0011      	movs	r1, r2
 8021d6c:	0018      	movs	r0, r3
 8021d6e:	f000 f83e 	bl	8021dee <USBD_CtlError>
      break;
 8021d72:	e000      	b.n	8021d76 <USBD_ClrFeature+0x44>
      break;
 8021d74:	46c0      	nop			@ (mov r8, r8)
  }
}
 8021d76:	46c0      	nop			@ (mov r8, r8)
 8021d78:	46bd      	mov	sp, r7
 8021d7a:	b002      	add	sp, #8
 8021d7c:	bd80      	pop	{r7, pc}

08021d7e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021d7e:	b580      	push	{r7, lr}
 8021d80:	b082      	sub	sp, #8
 8021d82:	af00      	add	r7, sp, #0
 8021d84:	6078      	str	r0, [r7, #4]
 8021d86:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8021d88:	683b      	ldr	r3, [r7, #0]
 8021d8a:	781a      	ldrb	r2, [r3, #0]
 8021d8c:	687b      	ldr	r3, [r7, #4]
 8021d8e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8021d90:	683b      	ldr	r3, [r7, #0]
 8021d92:	785a      	ldrb	r2, [r3, #1]
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8021d98:	683b      	ldr	r3, [r7, #0]
 8021d9a:	3302      	adds	r3, #2
 8021d9c:	781b      	ldrb	r3, [r3, #0]
 8021d9e:	001a      	movs	r2, r3
 8021da0:	683b      	ldr	r3, [r7, #0]
 8021da2:	3303      	adds	r3, #3
 8021da4:	781b      	ldrb	r3, [r3, #0]
 8021da6:	021b      	lsls	r3, r3, #8
 8021da8:	b29b      	uxth	r3, r3
 8021daa:	18d3      	adds	r3, r2, r3
 8021dac:	b29a      	uxth	r2, r3
 8021dae:	687b      	ldr	r3, [r7, #4]
 8021db0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8021db2:	683b      	ldr	r3, [r7, #0]
 8021db4:	3304      	adds	r3, #4
 8021db6:	781b      	ldrb	r3, [r3, #0]
 8021db8:	001a      	movs	r2, r3
 8021dba:	683b      	ldr	r3, [r7, #0]
 8021dbc:	3305      	adds	r3, #5
 8021dbe:	781b      	ldrb	r3, [r3, #0]
 8021dc0:	021b      	lsls	r3, r3, #8
 8021dc2:	b29b      	uxth	r3, r3
 8021dc4:	18d3      	adds	r3, r2, r3
 8021dc6:	b29a      	uxth	r2, r3
 8021dc8:	687b      	ldr	r3, [r7, #4]
 8021dca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8021dcc:	683b      	ldr	r3, [r7, #0]
 8021dce:	3306      	adds	r3, #6
 8021dd0:	781b      	ldrb	r3, [r3, #0]
 8021dd2:	001a      	movs	r2, r3
 8021dd4:	683b      	ldr	r3, [r7, #0]
 8021dd6:	3307      	adds	r3, #7
 8021dd8:	781b      	ldrb	r3, [r3, #0]
 8021dda:	021b      	lsls	r3, r3, #8
 8021ddc:	b29b      	uxth	r3, r3
 8021dde:	18d3      	adds	r3, r2, r3
 8021de0:	b29a      	uxth	r2, r3
 8021de2:	687b      	ldr	r3, [r7, #4]
 8021de4:	80da      	strh	r2, [r3, #6]

}
 8021de6:	46c0      	nop			@ (mov r8, r8)
 8021de8:	46bd      	mov	sp, r7
 8021dea:	b002      	add	sp, #8
 8021dec:	bd80      	pop	{r7, pc}

08021dee <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8021dee:	b580      	push	{r7, lr}
 8021df0:	b082      	sub	sp, #8
 8021df2:	af00      	add	r7, sp, #0
 8021df4:	6078      	str	r0, [r7, #4]
 8021df6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8021df8:	687b      	ldr	r3, [r7, #4]
 8021dfa:	2180      	movs	r1, #128	@ 0x80
 8021dfc:	0018      	movs	r0, r3
 8021dfe:	f000 fd1e 	bl	802283e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8021e02:	687b      	ldr	r3, [r7, #4]
 8021e04:	2100      	movs	r1, #0
 8021e06:	0018      	movs	r0, r3
 8021e08:	f000 fd19 	bl	802283e <USBD_LL_StallEP>
}
 8021e0c:	46c0      	nop			@ (mov r8, r8)
 8021e0e:	46bd      	mov	sp, r7
 8021e10:	b002      	add	sp, #8
 8021e12:	bd80      	pop	{r7, pc}

08021e14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021e14:	b590      	push	{r4, r7, lr}
 8021e16:	b087      	sub	sp, #28
 8021e18:	af00      	add	r7, sp, #0
 8021e1a:	60f8      	str	r0, [r7, #12]
 8021e1c:	60b9      	str	r1, [r7, #8]
 8021e1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021e20:	2417      	movs	r4, #23
 8021e22:	193b      	adds	r3, r7, r4
 8021e24:	2200      	movs	r2, #0
 8021e26:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8021e28:	68fb      	ldr	r3, [r7, #12]
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	d03c      	beq.n	8021ea8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8021e2e:	68fb      	ldr	r3, [r7, #12]
 8021e30:	0018      	movs	r0, r3
 8021e32:	f000 f83d 	bl	8021eb0 <USBD_GetLen>
 8021e36:	0003      	movs	r3, r0
 8021e38:	3301      	adds	r3, #1
 8021e3a:	b29b      	uxth	r3, r3
 8021e3c:	18db      	adds	r3, r3, r3
 8021e3e:	b29a      	uxth	r2, r3
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8021e44:	193b      	adds	r3, r7, r4
 8021e46:	781b      	ldrb	r3, [r3, #0]
 8021e48:	193a      	adds	r2, r7, r4
 8021e4a:	1c59      	adds	r1, r3, #1
 8021e4c:	7011      	strb	r1, [r2, #0]
 8021e4e:	001a      	movs	r2, r3
 8021e50:	68bb      	ldr	r3, [r7, #8]
 8021e52:	189b      	adds	r3, r3, r2
 8021e54:	687a      	ldr	r2, [r7, #4]
 8021e56:	7812      	ldrb	r2, [r2, #0]
 8021e58:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8021e5a:	193b      	adds	r3, r7, r4
 8021e5c:	781b      	ldrb	r3, [r3, #0]
 8021e5e:	193a      	adds	r2, r7, r4
 8021e60:	1c59      	adds	r1, r3, #1
 8021e62:	7011      	strb	r1, [r2, #0]
 8021e64:	001a      	movs	r2, r3
 8021e66:	68bb      	ldr	r3, [r7, #8]
 8021e68:	189b      	adds	r3, r3, r2
 8021e6a:	2203      	movs	r2, #3
 8021e6c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8021e6e:	e017      	b.n	8021ea0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8021e70:	68fb      	ldr	r3, [r7, #12]
 8021e72:	1c5a      	adds	r2, r3, #1
 8021e74:	60fa      	str	r2, [r7, #12]
 8021e76:	2417      	movs	r4, #23
 8021e78:	193a      	adds	r2, r7, r4
 8021e7a:	7812      	ldrb	r2, [r2, #0]
 8021e7c:	1939      	adds	r1, r7, r4
 8021e7e:	1c50      	adds	r0, r2, #1
 8021e80:	7008      	strb	r0, [r1, #0]
 8021e82:	0011      	movs	r1, r2
 8021e84:	68ba      	ldr	r2, [r7, #8]
 8021e86:	1852      	adds	r2, r2, r1
 8021e88:	781b      	ldrb	r3, [r3, #0]
 8021e8a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8021e8c:	193b      	adds	r3, r7, r4
 8021e8e:	781b      	ldrb	r3, [r3, #0]
 8021e90:	193a      	adds	r2, r7, r4
 8021e92:	1c59      	adds	r1, r3, #1
 8021e94:	7011      	strb	r1, [r2, #0]
 8021e96:	001a      	movs	r2, r3
 8021e98:	68bb      	ldr	r3, [r7, #8]
 8021e9a:	189b      	adds	r3, r3, r2
 8021e9c:	2200      	movs	r2, #0
 8021e9e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8021ea0:	68fb      	ldr	r3, [r7, #12]
 8021ea2:	781b      	ldrb	r3, [r3, #0]
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	d1e3      	bne.n	8021e70 <USBD_GetString+0x5c>
    }
  }
}
 8021ea8:	46c0      	nop			@ (mov r8, r8)
 8021eaa:	46bd      	mov	sp, r7
 8021eac:	b007      	add	sp, #28
 8021eae:	bd90      	pop	{r4, r7, pc}

08021eb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8021eb0:	b580      	push	{r7, lr}
 8021eb2:	b084      	sub	sp, #16
 8021eb4:	af00      	add	r7, sp, #0
 8021eb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8021eb8:	230f      	movs	r3, #15
 8021eba:	18fb      	adds	r3, r7, r3
 8021ebc:	2200      	movs	r2, #0
 8021ebe:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8021ec0:	e008      	b.n	8021ed4 <USBD_GetLen+0x24>
  {
    len++;
 8021ec2:	210f      	movs	r1, #15
 8021ec4:	187b      	adds	r3, r7, r1
 8021ec6:	781a      	ldrb	r2, [r3, #0]
 8021ec8:	187b      	adds	r3, r7, r1
 8021eca:	3201      	adds	r2, #1
 8021ecc:	701a      	strb	r2, [r3, #0]
    buf++;
 8021ece:	687b      	ldr	r3, [r7, #4]
 8021ed0:	3301      	adds	r3, #1
 8021ed2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	781b      	ldrb	r3, [r3, #0]
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	d1f2      	bne.n	8021ec2 <USBD_GetLen+0x12>
  }

  return len;
 8021edc:	230f      	movs	r3, #15
 8021ede:	18fb      	adds	r3, r7, r3
 8021ee0:	781b      	ldrb	r3, [r3, #0]
}
 8021ee2:	0018      	movs	r0, r3
 8021ee4:	46bd      	mov	sp, r7
 8021ee6:	b004      	add	sp, #16
 8021ee8:	bd80      	pop	{r7, pc}

08021eea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8021eea:	b580      	push	{r7, lr}
 8021eec:	b084      	sub	sp, #16
 8021eee:	af00      	add	r7, sp, #0
 8021ef0:	60f8      	str	r0, [r7, #12]
 8021ef2:	60b9      	str	r1, [r7, #8]
 8021ef4:	1dbb      	adds	r3, r7, #6
 8021ef6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8021ef8:	68fa      	ldr	r2, [r7, #12]
 8021efa:	23a5      	movs	r3, #165	@ 0xa5
 8021efc:	009b      	lsls	r3, r3, #2
 8021efe:	2102      	movs	r1, #2
 8021f00:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8021f02:	1dbb      	adds	r3, r7, #6
 8021f04:	881a      	ldrh	r2, [r3, #0]
 8021f06:	68fb      	ldr	r3, [r7, #12]
 8021f08:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8021f0a:	1dbb      	adds	r3, r7, #6
 8021f0c:	881a      	ldrh	r2, [r3, #0]
 8021f0e:	68fb      	ldr	r3, [r7, #12]
 8021f10:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021f12:	1dbb      	adds	r3, r7, #6
 8021f14:	881b      	ldrh	r3, [r3, #0]
 8021f16:	68ba      	ldr	r2, [r7, #8]
 8021f18:	68f8      	ldr	r0, [r7, #12]
 8021f1a:	2100      	movs	r1, #0
 8021f1c:	f000 fd41 	bl	80229a2 <USBD_LL_Transmit>

  return USBD_OK;
 8021f20:	2300      	movs	r3, #0
}
 8021f22:	0018      	movs	r0, r3
 8021f24:	46bd      	mov	sp, r7
 8021f26:	b004      	add	sp, #16
 8021f28:	bd80      	pop	{r7, pc}

08021f2a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8021f2a:	b580      	push	{r7, lr}
 8021f2c:	b084      	sub	sp, #16
 8021f2e:	af00      	add	r7, sp, #0
 8021f30:	60f8      	str	r0, [r7, #12]
 8021f32:	60b9      	str	r1, [r7, #8]
 8021f34:	1dbb      	adds	r3, r7, #6
 8021f36:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021f38:	1dbb      	adds	r3, r7, #6
 8021f3a:	881b      	ldrh	r3, [r3, #0]
 8021f3c:	68ba      	ldr	r2, [r7, #8]
 8021f3e:	68f8      	ldr	r0, [r7, #12]
 8021f40:	2100      	movs	r1, #0
 8021f42:	f000 fd2e 	bl	80229a2 <USBD_LL_Transmit>

  return USBD_OK;
 8021f46:	2300      	movs	r3, #0
}
 8021f48:	0018      	movs	r0, r3
 8021f4a:	46bd      	mov	sp, r7
 8021f4c:	b004      	add	sp, #16
 8021f4e:	bd80      	pop	{r7, pc}

08021f50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8021f50:	b580      	push	{r7, lr}
 8021f52:	b084      	sub	sp, #16
 8021f54:	af00      	add	r7, sp, #0
 8021f56:	60f8      	str	r0, [r7, #12]
 8021f58:	60b9      	str	r1, [r7, #8]
 8021f5a:	1dbb      	adds	r3, r7, #6
 8021f5c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8021f5e:	68fa      	ldr	r2, [r7, #12]
 8021f60:	23a5      	movs	r3, #165	@ 0xa5
 8021f62:	009b      	lsls	r3, r3, #2
 8021f64:	2103      	movs	r1, #3
 8021f66:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8021f68:	1dbb      	adds	r3, r7, #6
 8021f6a:	8819      	ldrh	r1, [r3, #0]
 8021f6c:	68fa      	ldr	r2, [r7, #12]
 8021f6e:	23ae      	movs	r3, #174	@ 0xae
 8021f70:	005b      	lsls	r3, r3, #1
 8021f72:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8021f74:	1dbb      	adds	r3, r7, #6
 8021f76:	8819      	ldrh	r1, [r3, #0]
 8021f78:	68fa      	ldr	r2, [r7, #12]
 8021f7a:	23b0      	movs	r3, #176	@ 0xb0
 8021f7c:	005b      	lsls	r3, r3, #1
 8021f7e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021f80:	1dbb      	adds	r3, r7, #6
 8021f82:	881b      	ldrh	r3, [r3, #0]
 8021f84:	68ba      	ldr	r2, [r7, #8]
 8021f86:	68f8      	ldr	r0, [r7, #12]
 8021f88:	2100      	movs	r1, #0
 8021f8a:	f000 fd41 	bl	8022a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021f8e:	2300      	movs	r3, #0
}
 8021f90:	0018      	movs	r0, r3
 8021f92:	46bd      	mov	sp, r7
 8021f94:	b004      	add	sp, #16
 8021f96:	bd80      	pop	{r7, pc}

08021f98 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8021f98:	b580      	push	{r7, lr}
 8021f9a:	b084      	sub	sp, #16
 8021f9c:	af00      	add	r7, sp, #0
 8021f9e:	60f8      	str	r0, [r7, #12]
 8021fa0:	60b9      	str	r1, [r7, #8]
 8021fa2:	1dbb      	adds	r3, r7, #6
 8021fa4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021fa6:	1dbb      	adds	r3, r7, #6
 8021fa8:	881b      	ldrh	r3, [r3, #0]
 8021faa:	68ba      	ldr	r2, [r7, #8]
 8021fac:	68f8      	ldr	r0, [r7, #12]
 8021fae:	2100      	movs	r1, #0
 8021fb0:	f000 fd2e 	bl	8022a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021fb4:	2300      	movs	r3, #0
}
 8021fb6:	0018      	movs	r0, r3
 8021fb8:	46bd      	mov	sp, r7
 8021fba:	b004      	add	sp, #16
 8021fbc:	bd80      	pop	{r7, pc}

08021fbe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8021fbe:	b580      	push	{r7, lr}
 8021fc0:	b082      	sub	sp, #8
 8021fc2:	af00      	add	r7, sp, #0
 8021fc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8021fc6:	687a      	ldr	r2, [r7, #4]
 8021fc8:	23a5      	movs	r3, #165	@ 0xa5
 8021fca:	009b      	lsls	r3, r3, #2
 8021fcc:	2104      	movs	r1, #4
 8021fce:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8021fd0:	6878      	ldr	r0, [r7, #4]
 8021fd2:	2300      	movs	r3, #0
 8021fd4:	2200      	movs	r2, #0
 8021fd6:	2100      	movs	r1, #0
 8021fd8:	f000 fce3 	bl	80229a2 <USBD_LL_Transmit>

  return USBD_OK;
 8021fdc:	2300      	movs	r3, #0
}
 8021fde:	0018      	movs	r0, r3
 8021fe0:	46bd      	mov	sp, r7
 8021fe2:	b002      	add	sp, #8
 8021fe4:	bd80      	pop	{r7, pc}

08021fe6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8021fe6:	b580      	push	{r7, lr}
 8021fe8:	b082      	sub	sp, #8
 8021fea:	af00      	add	r7, sp, #0
 8021fec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8021fee:	687a      	ldr	r2, [r7, #4]
 8021ff0:	23a5      	movs	r3, #165	@ 0xa5
 8021ff2:	009b      	lsls	r3, r3, #2
 8021ff4:	2105      	movs	r1, #5
 8021ff6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021ff8:	6878      	ldr	r0, [r7, #4]
 8021ffa:	2300      	movs	r3, #0
 8021ffc:	2200      	movs	r2, #0
 8021ffe:	2100      	movs	r1, #0
 8022000:	f000 fd06 	bl	8022a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022004:	2300      	movs	r3, #0
}
 8022006:	0018      	movs	r0, r3
 8022008:	46bd      	mov	sp, r7
 802200a:	b002      	add	sp, #8
 802200c:	bd80      	pop	{r7, pc}
	...

08022010 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8022010:	b580      	push	{r7, lr}
 8022012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022014:	4914      	ldr	r1, [pc, #80]	@ (8022068 <MX_USB_DEVICE_Init+0x58>)
 8022016:	4b15      	ldr	r3, [pc, #84]	@ (802206c <MX_USB_DEVICE_Init+0x5c>)
 8022018:	2200      	movs	r2, #0
 802201a:	0018      	movs	r0, r3
 802201c:	f7fe fdec 	bl	8020bf8 <USBD_Init>
 8022020:	1e03      	subs	r3, r0, #0
 8022022:	d001      	beq.n	8022028 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022024:	f7ea fc18 	bl	800c858 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022028:	4a11      	ldr	r2, [pc, #68]	@ (8022070 <MX_USB_DEVICE_Init+0x60>)
 802202a:	4b10      	ldr	r3, [pc, #64]	@ (802206c <MX_USB_DEVICE_Init+0x5c>)
 802202c:	0011      	movs	r1, r2
 802202e:	0018      	movs	r0, r3
 8022030:	f7fe fe13 	bl	8020c5a <USBD_RegisterClass>
 8022034:	1e03      	subs	r3, r0, #0
 8022036:	d001      	beq.n	802203c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8022038:	f7ea fc0e 	bl	800c858 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802203c:	4a0d      	ldr	r2, [pc, #52]	@ (8022074 <MX_USB_DEVICE_Init+0x64>)
 802203e:	4b0b      	ldr	r3, [pc, #44]	@ (802206c <MX_USB_DEVICE_Init+0x5c>)
 8022040:	0011      	movs	r1, r2
 8022042:	0018      	movs	r0, r3
 8022044:	f7fe fd28 	bl	8020a98 <USBD_CDC_RegisterInterface>
 8022048:	1e03      	subs	r3, r0, #0
 802204a:	d001      	beq.n	8022050 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 802204c:	f7ea fc04 	bl	800c858 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8022050:	4b06      	ldr	r3, [pc, #24]	@ (802206c <MX_USB_DEVICE_Init+0x5c>)
 8022052:	0018      	movs	r0, r3
 8022054:	f7fe fe21 	bl	8020c9a <USBD_Start>
 8022058:	1e03      	subs	r3, r0, #0
 802205a:	d001      	beq.n	8022060 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 802205c:	f7ea fbfc 	bl	800c858 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8022060:	46c0      	nop			@ (mov r8, r8)
 8022062:	46bd      	mov	sp, r7
 8022064:	bd80      	pop	{r7, pc}
 8022066:	46c0      	nop			@ (mov r8, r8)
 8022068:	20000218 	.word	0x20000218
 802206c:	20002244 	.word	0x20002244
 8022070:	20000104 	.word	0x20000104
 8022074:	20000208 	.word	0x20000208

08022078 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8022078:	b580      	push	{r7, lr}
 802207a:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 802207c:	4907      	ldr	r1, [pc, #28]	@ (802209c <CDC_Init_FS+0x24>)
 802207e:	4b08      	ldr	r3, [pc, #32]	@ (80220a0 <CDC_Init_FS+0x28>)
 8022080:	2200      	movs	r2, #0
 8022082:	0018      	movs	r0, r3
 8022084:	f7fe fd23 	bl	8020ace <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8022088:	4a06      	ldr	r2, [pc, #24]	@ (80220a4 <CDC_Init_FS+0x2c>)
 802208a:	4b05      	ldr	r3, [pc, #20]	@ (80220a0 <CDC_Init_FS+0x28>)
 802208c:	0011      	movs	r1, r2
 802208e:	0018      	movs	r0, r3
 8022090:	f7fe fd39 	bl	8020b06 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8022094:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022096:	0018      	movs	r0, r3
 8022098:	46bd      	mov	sp, r7
 802209a:	bd80      	pop	{r7, pc}
 802209c:	200029c8 	.word	0x200029c8
 80220a0:	20002244 	.word	0x20002244
 80220a4:	200025c8 	.word	0x200025c8

080220a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80220a8:	b580      	push	{r7, lr}
 80220aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80220ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80220ae:	0018      	movs	r0, r3
 80220b0:	46bd      	mov	sp, r7
 80220b2:	bd80      	pop	{r7, pc}

080220b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80220b4:	b580      	push	{r7, lr}
 80220b6:	b082      	sub	sp, #8
 80220b8:	af00      	add	r7, sp, #0
 80220ba:	6039      	str	r1, [r7, #0]
 80220bc:	0011      	movs	r1, r2
 80220be:	1dfb      	adds	r3, r7, #7
 80220c0:	1c02      	adds	r2, r0, #0
 80220c2:	701a      	strb	r2, [r3, #0]
 80220c4:	1d3b      	adds	r3, r7, #4
 80220c6:	1c0a      	adds	r2, r1, #0
 80220c8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80220ca:	1dfb      	adds	r3, r7, #7
 80220cc:	781b      	ldrb	r3, [r3, #0]
 80220ce:	2b23      	cmp	r3, #35	@ 0x23
 80220d0:	d804      	bhi.n	80220dc <CDC_Control_FS+0x28>
 80220d2:	009a      	lsls	r2, r3, #2
 80220d4:	4b04      	ldr	r3, [pc, #16]	@ (80220e8 <CDC_Control_FS+0x34>)
 80220d6:	18d3      	adds	r3, r2, r3
 80220d8:	681b      	ldr	r3, [r3, #0]
 80220da:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80220dc:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80220de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80220e0:	0018      	movs	r0, r3
 80220e2:	46bd      	mov	sp, r7
 80220e4:	b002      	add	sp, #8
 80220e6:	bd80      	pop	{r7, pc}
 80220e8:	0802db50 	.word	0x0802db50

080220ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80220ec:	b580      	push	{r7, lr}
 80220ee:	b082      	sub	sp, #8
 80220f0:	af00      	add	r7, sp, #0
 80220f2:	6078      	str	r0, [r7, #4]
 80220f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 80220f6:	4b12      	ldr	r3, [pc, #72]	@ (8022140 <CDC_Receive_FS+0x54>)
 80220f8:	781b      	ldrb	r3, [r3, #0]
 80220fa:	2b00      	cmp	r3, #0
 80220fc:	d013      	beq.n	8022126 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 80220fe:	683b      	ldr	r3, [r7, #0]
 8022100:	681b      	ldr	r3, [r3, #0]
 8022102:	b29a      	uxth	r2, r3
 8022104:	2301      	movs	r3, #1
 8022106:	425b      	negs	r3, r3
 8022108:	6879      	ldr	r1, [r7, #4]
 802210a:	480e      	ldr	r0, [pc, #56]	@ (8022144 <CDC_Receive_FS+0x58>)
 802210c:	f7fa fa44 	bl	801c598 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022110:	687a      	ldr	r2, [r7, #4]
 8022112:	4b0d      	ldr	r3, [pc, #52]	@ (8022148 <CDC_Receive_FS+0x5c>)
 8022114:	0011      	movs	r1, r2
 8022116:	0018      	movs	r0, r3
 8022118:	f7fe fcf5 	bl	8020b06 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802211c:	4b0a      	ldr	r3, [pc, #40]	@ (8022148 <CDC_Receive_FS+0x5c>)
 802211e:	0018      	movs	r0, r3
 8022120:	f7fe fd3c 	bl	8020b9c <USBD_CDC_ReceivePacket>
 8022124:	e006      	b.n	8022134 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 8022126:	683b      	ldr	r3, [r7, #0]
 8022128:	681a      	ldr	r2, [r3, #0]
 802212a:	4b08      	ldr	r3, [pc, #32]	@ (802214c <CDC_Receive_FS+0x60>)
 802212c:	681b      	ldr	r3, [r3, #0]
 802212e:	18d2      	adds	r2, r2, r3
 8022130:	4b06      	ldr	r3, [pc, #24]	@ (802214c <CDC_Receive_FS+0x60>)
 8022132:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8022134:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8022136:	0018      	movs	r0, r3
 8022138:	46bd      	mov	sp, r7
 802213a:	b002      	add	sp, #8
 802213c:	bd80      	pop	{r7, pc}
 802213e:	46c0      	nop			@ (mov r8, r8)
 8022140:	20002508 	.word	0x20002508
 8022144:	2000250c 	.word	0x2000250c
 8022148:	20002244 	.word	0x20002244
 802214c:	200025c4 	.word	0x200025c4

08022150 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8022150:	b5b0      	push	{r4, r5, r7, lr}
 8022152:	b084      	sub	sp, #16
 8022154:	af00      	add	r7, sp, #0
 8022156:	6078      	str	r0, [r7, #4]
 8022158:	000a      	movs	r2, r1
 802215a:	1cbb      	adds	r3, r7, #2
 802215c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 802215e:	230f      	movs	r3, #15
 8022160:	18fb      	adds	r3, r7, r3
 8022162:	2200      	movs	r2, #0
 8022164:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8022166:	4a11      	ldr	r2, [pc, #68]	@ (80221ac <CDC_Transmit_FS+0x5c>)
 8022168:	23ae      	movs	r3, #174	@ 0xae
 802216a:	009b      	lsls	r3, r3, #2
 802216c:	58d3      	ldr	r3, [r2, r3]
 802216e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8022170:	68ba      	ldr	r2, [r7, #8]
 8022172:	2385      	movs	r3, #133	@ 0x85
 8022174:	009b      	lsls	r3, r3, #2
 8022176:	58d3      	ldr	r3, [r2, r3]
 8022178:	2b00      	cmp	r3, #0
 802217a:	d001      	beq.n	8022180 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 802217c:	2301      	movs	r3, #1
 802217e:	e010      	b.n	80221a2 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8022180:	1cbb      	adds	r3, r7, #2
 8022182:	881a      	ldrh	r2, [r3, #0]
 8022184:	6879      	ldr	r1, [r7, #4]
 8022186:	4b09      	ldr	r3, [pc, #36]	@ (80221ac <CDC_Transmit_FS+0x5c>)
 8022188:	0018      	movs	r0, r3
 802218a:	f7fe fca0 	bl	8020ace <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802218e:	250f      	movs	r5, #15
 8022190:	197c      	adds	r4, r7, r5
 8022192:	4b06      	ldr	r3, [pc, #24]	@ (80221ac <CDC_Transmit_FS+0x5c>)
 8022194:	0018      	movs	r0, r3
 8022196:	f7fe fcca 	bl	8020b2e <USBD_CDC_TransmitPacket>
 802219a:	0003      	movs	r3, r0
 802219c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 802219e:	197b      	adds	r3, r7, r5
 80221a0:	781b      	ldrb	r3, [r3, #0]
}
 80221a2:	0018      	movs	r0, r3
 80221a4:	46bd      	mov	sp, r7
 80221a6:	b004      	add	sp, #16
 80221a8:	bdb0      	pop	{r4, r5, r7, pc}
 80221aa:	46c0      	nop			@ (mov r8, r8)
 80221ac:	20002244 	.word	0x20002244

080221b0 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 80221b0:	b580      	push	{r7, lr}
 80221b2:	af00      	add	r7, sp, #0
  ESPProg = true;
 80221b4:	4b02      	ldr	r3, [pc, #8]	@ (80221c0 <EnableESPProg+0x10>)
 80221b6:	2201      	movs	r2, #1
 80221b8:	701a      	strb	r2, [r3, #0]
}
 80221ba:	46c0      	nop			@ (mov r8, r8)
 80221bc:	46bd      	mov	sp, r7
 80221be:	bd80      	pop	{r7, pc}
 80221c0:	20002508 	.word	0x20002508

080221c4 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 80221c4:	b580      	push	{r7, lr}
 80221c6:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 80221c8:	4b01      	ldr	r3, [pc, #4]	@ (80221d0 <GetUsbRxPointer+0xc>)
}
 80221ca:	0018      	movs	r0, r3
 80221cc:	46bd      	mov	sp, r7
 80221ce:	bd80      	pop	{r7, pc}
 80221d0:	200025c8 	.word	0x200025c8

080221d4 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 80221d4:	b580      	push	{r7, lr}
 80221d6:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 80221d8:	4b07      	ldr	r3, [pc, #28]	@ (80221f8 <ResetUsbRxDataSize+0x24>)
 80221da:	2200      	movs	r2, #0
 80221dc:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80221de:	4a07      	ldr	r2, [pc, #28]	@ (80221fc <ResetUsbRxDataSize+0x28>)
 80221e0:	4b07      	ldr	r3, [pc, #28]	@ (8022200 <ResetUsbRxDataSize+0x2c>)
 80221e2:	0011      	movs	r1, r2
 80221e4:	0018      	movs	r0, r3
 80221e6:	f7fe fc8e 	bl	8020b06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80221ea:	4b05      	ldr	r3, [pc, #20]	@ (8022200 <ResetUsbRxDataSize+0x2c>)
 80221ec:	0018      	movs	r0, r3
 80221ee:	f7fe fcd5 	bl	8020b9c <USBD_CDC_ReceivePacket>
}
 80221f2:	46c0      	nop			@ (mov r8, r8)
 80221f4:	46bd      	mov	sp, r7
 80221f6:	bd80      	pop	{r7, pc}
 80221f8:	200025c4 	.word	0x200025c4
 80221fc:	200025c8 	.word	0x200025c8
 8022200:	20002244 	.word	0x20002244

08022204 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8022204:	b580      	push	{r7, lr}
 8022206:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8022208:	4b02      	ldr	r3, [pc, #8]	@ (8022214 <GetUsbRxDataSize+0x10>)
 802220a:	681b      	ldr	r3, [r3, #0]
}
 802220c:	0018      	movs	r0, r3
 802220e:	46bd      	mov	sp, r7
 8022210:	bd80      	pop	{r7, pc}
 8022212:	46c0      	nop			@ (mov r8, r8)
 8022214:	200025c4 	.word	0x200025c4

08022218 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8022218:	b580      	push	{r7, lr}
 802221a:	b082      	sub	sp, #8
 802221c:	af00      	add	r7, sp, #0
 802221e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8022220:	687a      	ldr	r2, [r7, #4]
 8022222:	4b07      	ldr	r3, [pc, #28]	@ (8022240 <GetUsbRxNextChunk+0x28>)
 8022224:	18d2      	adds	r2, r2, r3
 8022226:	4b07      	ldr	r3, [pc, #28]	@ (8022244 <GetUsbRxNextChunk+0x2c>)
 8022228:	0011      	movs	r1, r2
 802222a:	0018      	movs	r0, r3
 802222c:	f7fe fc6b 	bl	8020b06 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022230:	4b04      	ldr	r3, [pc, #16]	@ (8022244 <GetUsbRxNextChunk+0x2c>)
 8022232:	0018      	movs	r0, r3
 8022234:	f7fe fcb2 	bl	8020b9c <USBD_CDC_ReceivePacket>
}
 8022238:	46c0      	nop			@ (mov r8, r8)
 802223a:	46bd      	mov	sp, r7
 802223c:	b002      	add	sp, #8
 802223e:	bd80      	pop	{r7, pc}
 8022240:	200025c8 	.word	0x200025c8
 8022244:	20002244 	.word	0x20002244

08022248 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022248:	b580      	push	{r7, lr}
 802224a:	b082      	sub	sp, #8
 802224c:	af00      	add	r7, sp, #0
 802224e:	0002      	movs	r2, r0
 8022250:	6039      	str	r1, [r7, #0]
 8022252:	1dfb      	adds	r3, r7, #7
 8022254:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8022256:	683b      	ldr	r3, [r7, #0]
 8022258:	2212      	movs	r2, #18
 802225a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802225c:	4b02      	ldr	r3, [pc, #8]	@ (8022268 <USBD_FS_DeviceDescriptor+0x20>)
}
 802225e:	0018      	movs	r0, r3
 8022260:	46bd      	mov	sp, r7
 8022262:	b002      	add	sp, #8
 8022264:	bd80      	pop	{r7, pc}
 8022266:	46c0      	nop			@ (mov r8, r8)
 8022268:	20000234 	.word	0x20000234

0802226c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802226c:	b580      	push	{r7, lr}
 802226e:	b082      	sub	sp, #8
 8022270:	af00      	add	r7, sp, #0
 8022272:	0002      	movs	r2, r0
 8022274:	6039      	str	r1, [r7, #0]
 8022276:	1dfb      	adds	r3, r7, #7
 8022278:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 802227a:	683b      	ldr	r3, [r7, #0]
 802227c:	2204      	movs	r2, #4
 802227e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8022280:	4b02      	ldr	r3, [pc, #8]	@ (802228c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8022282:	0018      	movs	r0, r3
 8022284:	46bd      	mov	sp, r7
 8022286:	b002      	add	sp, #8
 8022288:	bd80      	pop	{r7, pc}
 802228a:	46c0      	nop			@ (mov r8, r8)
 802228c:	20000248 	.word	0x20000248

08022290 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022290:	b580      	push	{r7, lr}
 8022292:	b082      	sub	sp, #8
 8022294:	af00      	add	r7, sp, #0
 8022296:	0002      	movs	r2, r0
 8022298:	6039      	str	r1, [r7, #0]
 802229a:	1dfb      	adds	r3, r7, #7
 802229c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802229e:	1dfb      	adds	r3, r7, #7
 80222a0:	781b      	ldrb	r3, [r3, #0]
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d106      	bne.n	80222b4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80222a6:	683a      	ldr	r2, [r7, #0]
 80222a8:	4908      	ldr	r1, [pc, #32]	@ (80222cc <USBD_FS_ProductStrDescriptor+0x3c>)
 80222aa:	4b09      	ldr	r3, [pc, #36]	@ (80222d0 <USBD_FS_ProductStrDescriptor+0x40>)
 80222ac:	0018      	movs	r0, r3
 80222ae:	f7ff fdb1 	bl	8021e14 <USBD_GetString>
 80222b2:	e005      	b.n	80222c0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80222b4:	683a      	ldr	r2, [r7, #0]
 80222b6:	4905      	ldr	r1, [pc, #20]	@ (80222cc <USBD_FS_ProductStrDescriptor+0x3c>)
 80222b8:	4b05      	ldr	r3, [pc, #20]	@ (80222d0 <USBD_FS_ProductStrDescriptor+0x40>)
 80222ba:	0018      	movs	r0, r3
 80222bc:	f7ff fdaa 	bl	8021e14 <USBD_GetString>
  }
  return USBD_StrDesc;
 80222c0:	4b02      	ldr	r3, [pc, #8]	@ (80222cc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80222c2:	0018      	movs	r0, r3
 80222c4:	46bd      	mov	sp, r7
 80222c6:	b002      	add	sp, #8
 80222c8:	bd80      	pop	{r7, pc}
 80222ca:	46c0      	nop			@ (mov r8, r8)
 80222cc:	20002dc8 	.word	0x20002dc8
 80222d0:	0802d514 	.word	0x0802d514

080222d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80222d4:	b580      	push	{r7, lr}
 80222d6:	b082      	sub	sp, #8
 80222d8:	af00      	add	r7, sp, #0
 80222da:	0002      	movs	r2, r0
 80222dc:	6039      	str	r1, [r7, #0]
 80222de:	1dfb      	adds	r3, r7, #7
 80222e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80222e2:	683a      	ldr	r2, [r7, #0]
 80222e4:	4904      	ldr	r1, [pc, #16]	@ (80222f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80222e6:	4b05      	ldr	r3, [pc, #20]	@ (80222fc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80222e8:	0018      	movs	r0, r3
 80222ea:	f7ff fd93 	bl	8021e14 <USBD_GetString>
  return USBD_StrDesc;
 80222ee:	4b02      	ldr	r3, [pc, #8]	@ (80222f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80222f0:	0018      	movs	r0, r3
 80222f2:	46bd      	mov	sp, r7
 80222f4:	b002      	add	sp, #8
 80222f6:	bd80      	pop	{r7, pc}
 80222f8:	20002dc8 	.word	0x20002dc8
 80222fc:	0802d52c 	.word	0x0802d52c

08022300 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022300:	b580      	push	{r7, lr}
 8022302:	b082      	sub	sp, #8
 8022304:	af00      	add	r7, sp, #0
 8022306:	0002      	movs	r2, r0
 8022308:	6039      	str	r1, [r7, #0]
 802230a:	1dfb      	adds	r3, r7, #7
 802230c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802230e:	683b      	ldr	r3, [r7, #0]
 8022310:	221a      	movs	r2, #26
 8022312:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8022314:	f000 f84c 	bl	80223b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8022318:	4b02      	ldr	r3, [pc, #8]	@ (8022324 <USBD_FS_SerialStrDescriptor+0x24>)
}
 802231a:	0018      	movs	r0, r3
 802231c:	46bd      	mov	sp, r7
 802231e:	b002      	add	sp, #8
 8022320:	bd80      	pop	{r7, pc}
 8022322:	46c0      	nop			@ (mov r8, r8)
 8022324:	2000024c 	.word	0x2000024c

08022328 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022328:	b580      	push	{r7, lr}
 802232a:	b082      	sub	sp, #8
 802232c:	af00      	add	r7, sp, #0
 802232e:	0002      	movs	r2, r0
 8022330:	6039      	str	r1, [r7, #0]
 8022332:	1dfb      	adds	r3, r7, #7
 8022334:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8022336:	1dfb      	adds	r3, r7, #7
 8022338:	781b      	ldrb	r3, [r3, #0]
 802233a:	2b00      	cmp	r3, #0
 802233c:	d106      	bne.n	802234c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802233e:	683a      	ldr	r2, [r7, #0]
 8022340:	4908      	ldr	r1, [pc, #32]	@ (8022364 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8022342:	4b09      	ldr	r3, [pc, #36]	@ (8022368 <USBD_FS_ConfigStrDescriptor+0x40>)
 8022344:	0018      	movs	r0, r3
 8022346:	f7ff fd65 	bl	8021e14 <USBD_GetString>
 802234a:	e005      	b.n	8022358 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802234c:	683a      	ldr	r2, [r7, #0]
 802234e:	4905      	ldr	r1, [pc, #20]	@ (8022364 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8022350:	4b05      	ldr	r3, [pc, #20]	@ (8022368 <USBD_FS_ConfigStrDescriptor+0x40>)
 8022352:	0018      	movs	r0, r3
 8022354:	f7ff fd5e 	bl	8021e14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022358:	4b02      	ldr	r3, [pc, #8]	@ (8022364 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 802235a:	0018      	movs	r0, r3
 802235c:	46bd      	mov	sp, r7
 802235e:	b002      	add	sp, #8
 8022360:	bd80      	pop	{r7, pc}
 8022362:	46c0      	nop			@ (mov r8, r8)
 8022364:	20002dc8 	.word	0x20002dc8
 8022368:	0802d540 	.word	0x0802d540

0802236c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802236c:	b580      	push	{r7, lr}
 802236e:	b082      	sub	sp, #8
 8022370:	af00      	add	r7, sp, #0
 8022372:	0002      	movs	r2, r0
 8022374:	6039      	str	r1, [r7, #0]
 8022376:	1dfb      	adds	r3, r7, #7
 8022378:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802237a:	1dfb      	adds	r3, r7, #7
 802237c:	781b      	ldrb	r3, [r3, #0]
 802237e:	2b00      	cmp	r3, #0
 8022380:	d106      	bne.n	8022390 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022382:	683a      	ldr	r2, [r7, #0]
 8022384:	4908      	ldr	r1, [pc, #32]	@ (80223a8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8022386:	4b09      	ldr	r3, [pc, #36]	@ (80223ac <USBD_FS_InterfaceStrDescriptor+0x40>)
 8022388:	0018      	movs	r0, r3
 802238a:	f7ff fd43 	bl	8021e14 <USBD_GetString>
 802238e:	e005      	b.n	802239c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8022390:	683a      	ldr	r2, [r7, #0]
 8022392:	4905      	ldr	r1, [pc, #20]	@ (80223a8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8022394:	4b05      	ldr	r3, [pc, #20]	@ (80223ac <USBD_FS_InterfaceStrDescriptor+0x40>)
 8022396:	0018      	movs	r0, r3
 8022398:	f7ff fd3c 	bl	8021e14 <USBD_GetString>
  }
  return USBD_StrDesc;
 802239c:	4b02      	ldr	r3, [pc, #8]	@ (80223a8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 802239e:	0018      	movs	r0, r3
 80223a0:	46bd      	mov	sp, r7
 80223a2:	b002      	add	sp, #8
 80223a4:	bd80      	pop	{r7, pc}
 80223a6:	46c0      	nop			@ (mov r8, r8)
 80223a8:	20002dc8 	.word	0x20002dc8
 80223ac:	0802d54c 	.word	0x0802d54c

080223b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80223b0:	b580      	push	{r7, lr}
 80223b2:	b084      	sub	sp, #16
 80223b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80223b6:	4b10      	ldr	r3, [pc, #64]	@ (80223f8 <Get_SerialNum+0x48>)
 80223b8:	681b      	ldr	r3, [r3, #0]
 80223ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80223bc:	4b0f      	ldr	r3, [pc, #60]	@ (80223fc <Get_SerialNum+0x4c>)
 80223be:	681b      	ldr	r3, [r3, #0]
 80223c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80223c2:	4b0f      	ldr	r3, [pc, #60]	@ (8022400 <Get_SerialNum+0x50>)
 80223c4:	681b      	ldr	r3, [r3, #0]
 80223c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80223c8:	68fa      	ldr	r2, [r7, #12]
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	18d3      	adds	r3, r2, r3
 80223ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80223d0:	68fb      	ldr	r3, [r7, #12]
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	d00b      	beq.n	80223ee <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80223d6:	490b      	ldr	r1, [pc, #44]	@ (8022404 <Get_SerialNum+0x54>)
 80223d8:	68fb      	ldr	r3, [r7, #12]
 80223da:	2208      	movs	r2, #8
 80223dc:	0018      	movs	r0, r3
 80223de:	f000 f815 	bl	802240c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80223e2:	4909      	ldr	r1, [pc, #36]	@ (8022408 <Get_SerialNum+0x58>)
 80223e4:	68bb      	ldr	r3, [r7, #8]
 80223e6:	2204      	movs	r2, #4
 80223e8:	0018      	movs	r0, r3
 80223ea:	f000 f80f 	bl	802240c <IntToUnicode>
  }
}
 80223ee:	46c0      	nop			@ (mov r8, r8)
 80223f0:	46bd      	mov	sp, r7
 80223f2:	b004      	add	sp, #16
 80223f4:	bd80      	pop	{r7, pc}
 80223f6:	46c0      	nop			@ (mov r8, r8)
 80223f8:	1ff80050 	.word	0x1ff80050
 80223fc:	1ff80054 	.word	0x1ff80054
 8022400:	1ff80058 	.word	0x1ff80058
 8022404:	2000024e 	.word	0x2000024e
 8022408:	2000025e 	.word	0x2000025e

0802240c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802240c:	b580      	push	{r7, lr}
 802240e:	b086      	sub	sp, #24
 8022410:	af00      	add	r7, sp, #0
 8022412:	60f8      	str	r0, [r7, #12]
 8022414:	60b9      	str	r1, [r7, #8]
 8022416:	1dfb      	adds	r3, r7, #7
 8022418:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 802241a:	2117      	movs	r1, #23
 802241c:	187b      	adds	r3, r7, r1
 802241e:	2200      	movs	r2, #0
 8022420:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8022422:	187b      	adds	r3, r7, r1
 8022424:	2200      	movs	r2, #0
 8022426:	701a      	strb	r2, [r3, #0]
 8022428:	e02f      	b.n	802248a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 802242a:	68fb      	ldr	r3, [r7, #12]
 802242c:	0f1b      	lsrs	r3, r3, #28
 802242e:	2b09      	cmp	r3, #9
 8022430:	d80d      	bhi.n	802244e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8022432:	68fb      	ldr	r3, [r7, #12]
 8022434:	0f1b      	lsrs	r3, r3, #28
 8022436:	b2da      	uxtb	r2, r3
 8022438:	2317      	movs	r3, #23
 802243a:	18fb      	adds	r3, r7, r3
 802243c:	781b      	ldrb	r3, [r3, #0]
 802243e:	005b      	lsls	r3, r3, #1
 8022440:	0019      	movs	r1, r3
 8022442:	68bb      	ldr	r3, [r7, #8]
 8022444:	185b      	adds	r3, r3, r1
 8022446:	3230      	adds	r2, #48	@ 0x30
 8022448:	b2d2      	uxtb	r2, r2
 802244a:	701a      	strb	r2, [r3, #0]
 802244c:	e00c      	b.n	8022468 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 802244e:	68fb      	ldr	r3, [r7, #12]
 8022450:	0f1b      	lsrs	r3, r3, #28
 8022452:	b2da      	uxtb	r2, r3
 8022454:	2317      	movs	r3, #23
 8022456:	18fb      	adds	r3, r7, r3
 8022458:	781b      	ldrb	r3, [r3, #0]
 802245a:	005b      	lsls	r3, r3, #1
 802245c:	0019      	movs	r1, r3
 802245e:	68bb      	ldr	r3, [r7, #8]
 8022460:	185b      	adds	r3, r3, r1
 8022462:	3237      	adds	r2, #55	@ 0x37
 8022464:	b2d2      	uxtb	r2, r2
 8022466:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8022468:	68fb      	ldr	r3, [r7, #12]
 802246a:	011b      	lsls	r3, r3, #4
 802246c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 802246e:	2117      	movs	r1, #23
 8022470:	187b      	adds	r3, r7, r1
 8022472:	781b      	ldrb	r3, [r3, #0]
 8022474:	005b      	lsls	r3, r3, #1
 8022476:	3301      	adds	r3, #1
 8022478:	68ba      	ldr	r2, [r7, #8]
 802247a:	18d3      	adds	r3, r2, r3
 802247c:	2200      	movs	r2, #0
 802247e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8022480:	187b      	adds	r3, r7, r1
 8022482:	781a      	ldrb	r2, [r3, #0]
 8022484:	187b      	adds	r3, r7, r1
 8022486:	3201      	adds	r2, #1
 8022488:	701a      	strb	r2, [r3, #0]
 802248a:	2317      	movs	r3, #23
 802248c:	18fa      	adds	r2, r7, r3
 802248e:	1dfb      	adds	r3, r7, #7
 8022490:	7812      	ldrb	r2, [r2, #0]
 8022492:	781b      	ldrb	r3, [r3, #0]
 8022494:	429a      	cmp	r2, r3
 8022496:	d3c8      	bcc.n	802242a <IntToUnicode+0x1e>
  }
}
 8022498:	46c0      	nop			@ (mov r8, r8)
 802249a:	46c0      	nop			@ (mov r8, r8)
 802249c:	46bd      	mov	sp, r7
 802249e:	b006      	add	sp, #24
 80224a0:	bd80      	pop	{r7, pc}
	...

080224a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80224a4:	b580      	push	{r7, lr}
 80224a6:	b082      	sub	sp, #8
 80224a8:	af00      	add	r7, sp, #0
 80224aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80224ac:	687b      	ldr	r3, [r7, #4]
 80224ae:	681b      	ldr	r3, [r3, #0]
 80224b0:	4a0a      	ldr	r2, [pc, #40]	@ (80224dc <HAL_PCD_MspInit+0x38>)
 80224b2:	4293      	cmp	r3, r2
 80224b4:	d10e      	bne.n	80224d4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80224b6:	4b0a      	ldr	r3, [pc, #40]	@ (80224e0 <HAL_PCD_MspInit+0x3c>)
 80224b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80224ba:	4b09      	ldr	r3, [pc, #36]	@ (80224e0 <HAL_PCD_MspInit+0x3c>)
 80224bc:	2180      	movs	r1, #128	@ 0x80
 80224be:	0409      	lsls	r1, r1, #16
 80224c0:	430a      	orrs	r2, r1
 80224c2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80224c4:	2200      	movs	r2, #0
 80224c6:	2100      	movs	r1, #0
 80224c8:	201f      	movs	r0, #31
 80224ca:	f7f1 ffd1 	bl	8014470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80224ce:	201f      	movs	r0, #31
 80224d0:	f7f1 ffe3 	bl	801449a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80224d4:	46c0      	nop			@ (mov r8, r8)
 80224d6:	46bd      	mov	sp, r7
 80224d8:	b002      	add	sp, #8
 80224da:	bd80      	pop	{r7, pc}
 80224dc:	40005c00 	.word	0x40005c00
 80224e0:	40021000 	.word	0x40021000

080224e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80224e4:	b580      	push	{r7, lr}
 80224e6:	b082      	sub	sp, #8
 80224e8:	af00      	add	r7, sp, #0
 80224ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80224ec:	687a      	ldr	r2, [r7, #4]
 80224ee:	23bc      	movs	r3, #188	@ 0xbc
 80224f0:	009b      	lsls	r3, r3, #2
 80224f2:	58d2      	ldr	r2, [r2, r3]
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	21ac      	movs	r1, #172	@ 0xac
 80224f8:	0089      	lsls	r1, r1, #2
 80224fa:	468c      	mov	ip, r1
 80224fc:	4463      	add	r3, ip
 80224fe:	0019      	movs	r1, r3
 8022500:	0010      	movs	r0, r2
 8022502:	f7fe fc1d 	bl	8020d40 <USBD_LL_SetupStage>
}
 8022506:	46c0      	nop			@ (mov r8, r8)
 8022508:	46bd      	mov	sp, r7
 802250a:	b002      	add	sp, #8
 802250c:	bd80      	pop	{r7, pc}

0802250e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802250e:	b590      	push	{r4, r7, lr}
 8022510:	b083      	sub	sp, #12
 8022512:	af00      	add	r7, sp, #0
 8022514:	6078      	str	r0, [r7, #4]
 8022516:	000a      	movs	r2, r1
 8022518:	1cfb      	adds	r3, r7, #3
 802251a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802251c:	687a      	ldr	r2, [r7, #4]
 802251e:	23bc      	movs	r3, #188	@ 0xbc
 8022520:	009b      	lsls	r3, r3, #2
 8022522:	58d4      	ldr	r4, [r2, r3]
 8022524:	1cfb      	adds	r3, r7, #3
 8022526:	781a      	ldrb	r2, [r3, #0]
 8022528:	6878      	ldr	r0, [r7, #4]
 802252a:	23be      	movs	r3, #190	@ 0xbe
 802252c:	0059      	lsls	r1, r3, #1
 802252e:	0013      	movs	r3, r2
 8022530:	009b      	lsls	r3, r3, #2
 8022532:	189b      	adds	r3, r3, r2
 8022534:	00db      	lsls	r3, r3, #3
 8022536:	18c3      	adds	r3, r0, r3
 8022538:	185b      	adds	r3, r3, r1
 802253a:	681a      	ldr	r2, [r3, #0]
 802253c:	1cfb      	adds	r3, r7, #3
 802253e:	781b      	ldrb	r3, [r3, #0]
 8022540:	0019      	movs	r1, r3
 8022542:	0020      	movs	r0, r4
 8022544:	f7fe fc5a 	bl	8020dfc <USBD_LL_DataOutStage>
}
 8022548:	46c0      	nop			@ (mov r8, r8)
 802254a:	46bd      	mov	sp, r7
 802254c:	b003      	add	sp, #12
 802254e:	bd90      	pop	{r4, r7, pc}

08022550 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022550:	b580      	push	{r7, lr}
 8022552:	b082      	sub	sp, #8
 8022554:	af00      	add	r7, sp, #0
 8022556:	6078      	str	r0, [r7, #4]
 8022558:	000a      	movs	r2, r1
 802255a:	1cfb      	adds	r3, r7, #3
 802255c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802255e:	687a      	ldr	r2, [r7, #4]
 8022560:	23bc      	movs	r3, #188	@ 0xbc
 8022562:	009b      	lsls	r3, r3, #2
 8022564:	58d0      	ldr	r0, [r2, r3]
 8022566:	1cfb      	adds	r3, r7, #3
 8022568:	781a      	ldrb	r2, [r3, #0]
 802256a:	6879      	ldr	r1, [r7, #4]
 802256c:	0013      	movs	r3, r2
 802256e:	009b      	lsls	r3, r3, #2
 8022570:	189b      	adds	r3, r3, r2
 8022572:	00db      	lsls	r3, r3, #3
 8022574:	18cb      	adds	r3, r1, r3
 8022576:	333c      	adds	r3, #60	@ 0x3c
 8022578:	681a      	ldr	r2, [r3, #0]
 802257a:	1cfb      	adds	r3, r7, #3
 802257c:	781b      	ldrb	r3, [r3, #0]
 802257e:	0019      	movs	r1, r3
 8022580:	f7fe fcbe 	bl	8020f00 <USBD_LL_DataInStage>
}
 8022584:	46c0      	nop			@ (mov r8, r8)
 8022586:	46bd      	mov	sp, r7
 8022588:	b002      	add	sp, #8
 802258a:	bd80      	pop	{r7, pc}

0802258c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802258c:	b580      	push	{r7, lr}
 802258e:	b082      	sub	sp, #8
 8022590:	af00      	add	r7, sp, #0
 8022592:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022594:	687a      	ldr	r2, [r7, #4]
 8022596:	23bc      	movs	r3, #188	@ 0xbc
 8022598:	009b      	lsls	r3, r3, #2
 802259a:	58d3      	ldr	r3, [r2, r3]
 802259c:	0018      	movs	r0, r3
 802259e:	f7fe fdf5 	bl	802118c <USBD_LL_SOF>
}
 80225a2:	46c0      	nop			@ (mov r8, r8)
 80225a4:	46bd      	mov	sp, r7
 80225a6:	b002      	add	sp, #8
 80225a8:	bd80      	pop	{r7, pc}

080225aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225aa:	b580      	push	{r7, lr}
 80225ac:	b084      	sub	sp, #16
 80225ae:	af00      	add	r7, sp, #0
 80225b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80225b2:	230f      	movs	r3, #15
 80225b4:	18fb      	adds	r3, r7, r3
 80225b6:	2201      	movs	r2, #1
 80225b8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80225ba:	687b      	ldr	r3, [r7, #4]
 80225bc:	689b      	ldr	r3, [r3, #8]
 80225be:	2b02      	cmp	r3, #2
 80225c0:	d001      	beq.n	80225c6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80225c2:	f7ea f949 	bl	800c858 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80225c6:	687a      	ldr	r2, [r7, #4]
 80225c8:	23bc      	movs	r3, #188	@ 0xbc
 80225ca:	009b      	lsls	r3, r3, #2
 80225cc:	58d2      	ldr	r2, [r2, r3]
 80225ce:	230f      	movs	r3, #15
 80225d0:	18fb      	adds	r3, r7, r3
 80225d2:	781b      	ldrb	r3, [r3, #0]
 80225d4:	0019      	movs	r1, r3
 80225d6:	0010      	movs	r0, r2
 80225d8:	f7fe fd97 	bl	802110a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80225dc:	687a      	ldr	r2, [r7, #4]
 80225de:	23bc      	movs	r3, #188	@ 0xbc
 80225e0:	009b      	lsls	r3, r3, #2
 80225e2:	58d3      	ldr	r3, [r2, r3]
 80225e4:	0018      	movs	r0, r3
 80225e6:	f7fe fd48 	bl	802107a <USBD_LL_Reset>
}
 80225ea:	46c0      	nop			@ (mov r8, r8)
 80225ec:	46bd      	mov	sp, r7
 80225ee:	b004      	add	sp, #16
 80225f0:	bd80      	pop	{r7, pc}
	...

080225f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225f4:	b580      	push	{r7, lr}
 80225f6:	b082      	sub	sp, #8
 80225f8:	af00      	add	r7, sp, #0
 80225fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80225fc:	687a      	ldr	r2, [r7, #4]
 80225fe:	23bc      	movs	r3, #188	@ 0xbc
 8022600:	009b      	lsls	r3, r3, #2
 8022602:	58d3      	ldr	r3, [r2, r3]
 8022604:	0018      	movs	r0, r3
 8022606:	f7fe fd91 	bl	802112c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	699b      	ldr	r3, [r3, #24]
 802260e:	2b00      	cmp	r3, #0
 8022610:	d005      	beq.n	802261e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022612:	4b05      	ldr	r3, [pc, #20]	@ (8022628 <HAL_PCD_SuspendCallback+0x34>)
 8022614:	691a      	ldr	r2, [r3, #16]
 8022616:	4b04      	ldr	r3, [pc, #16]	@ (8022628 <HAL_PCD_SuspendCallback+0x34>)
 8022618:	2106      	movs	r1, #6
 802261a:	430a      	orrs	r2, r1
 802261c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 802261e:	46c0      	nop			@ (mov r8, r8)
 8022620:	46bd      	mov	sp, r7
 8022622:	b002      	add	sp, #8
 8022624:	bd80      	pop	{r7, pc}
 8022626:	46c0      	nop			@ (mov r8, r8)
 8022628:	e000ed00 	.word	0xe000ed00

0802262c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802262c:	b580      	push	{r7, lr}
 802262e:	b082      	sub	sp, #8
 8022630:	af00      	add	r7, sp, #0
 8022632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	699b      	ldr	r3, [r3, #24]
 8022638:	2b00      	cmp	r3, #0
 802263a:	d007      	beq.n	802264c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802263c:	4b09      	ldr	r3, [pc, #36]	@ (8022664 <HAL_PCD_ResumeCallback+0x38>)
 802263e:	691a      	ldr	r2, [r3, #16]
 8022640:	4b08      	ldr	r3, [pc, #32]	@ (8022664 <HAL_PCD_ResumeCallback+0x38>)
 8022642:	2106      	movs	r1, #6
 8022644:	438a      	bics	r2, r1
 8022646:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8022648:	f000 fa44 	bl	8022ad4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 802264c:	687a      	ldr	r2, [r7, #4]
 802264e:	23bc      	movs	r3, #188	@ 0xbc
 8022650:	009b      	lsls	r3, r3, #2
 8022652:	58d3      	ldr	r3, [r2, r3]
 8022654:	0018      	movs	r0, r3
 8022656:	f7fe fd81 	bl	802115c <USBD_LL_Resume>
}
 802265a:	46c0      	nop			@ (mov r8, r8)
 802265c:	46bd      	mov	sp, r7
 802265e:	b002      	add	sp, #8
 8022660:	bd80      	pop	{r7, pc}
 8022662:	46c0      	nop			@ (mov r8, r8)
 8022664:	e000ed00 	.word	0xe000ed00

08022668 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8022668:	b580      	push	{r7, lr}
 802266a:	b082      	sub	sp, #8
 802266c:	af00      	add	r7, sp, #0
 802266e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8022670:	4a2d      	ldr	r2, [pc, #180]	@ (8022728 <USBD_LL_Init+0xc0>)
 8022672:	23bc      	movs	r3, #188	@ 0xbc
 8022674:	009b      	lsls	r3, r3, #2
 8022676:	6879      	ldr	r1, [r7, #4]
 8022678:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 802267a:	687a      	ldr	r2, [r7, #4]
 802267c:	23b0      	movs	r3, #176	@ 0xb0
 802267e:	009b      	lsls	r3, r3, #2
 8022680:	4929      	ldr	r1, [pc, #164]	@ (8022728 <USBD_LL_Init+0xc0>)
 8022682:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8022684:	4b28      	ldr	r3, [pc, #160]	@ (8022728 <USBD_LL_Init+0xc0>)
 8022686:	4a29      	ldr	r2, [pc, #164]	@ (802272c <USBD_LL_Init+0xc4>)
 8022688:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 802268a:	4b27      	ldr	r3, [pc, #156]	@ (8022728 <USBD_LL_Init+0xc0>)
 802268c:	2208      	movs	r2, #8
 802268e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8022690:	4b25      	ldr	r3, [pc, #148]	@ (8022728 <USBD_LL_Init+0xc0>)
 8022692:	2202      	movs	r2, #2
 8022694:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022696:	4b24      	ldr	r3, [pc, #144]	@ (8022728 <USBD_LL_Init+0xc0>)
 8022698:	2202      	movs	r2, #2
 802269a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 802269c:	4b22      	ldr	r3, [pc, #136]	@ (8022728 <USBD_LL_Init+0xc0>)
 802269e:	2200      	movs	r2, #0
 80226a0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80226a2:	4b21      	ldr	r3, [pc, #132]	@ (8022728 <USBD_LL_Init+0xc0>)
 80226a4:	2200      	movs	r2, #0
 80226a6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80226a8:	4b1f      	ldr	r3, [pc, #124]	@ (8022728 <USBD_LL_Init+0xc0>)
 80226aa:	2200      	movs	r2, #0
 80226ac:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80226ae:	4b1e      	ldr	r3, [pc, #120]	@ (8022728 <USBD_LL_Init+0xc0>)
 80226b0:	0018      	movs	r0, r3
 80226b2:	f7f5 ff93 	bl	80185dc <HAL_PCD_Init>
 80226b6:	1e03      	subs	r3, r0, #0
 80226b8:	d001      	beq.n	80226be <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80226ba:	f7ea f8cd 	bl	800c858 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80226be:	687a      	ldr	r2, [r7, #4]
 80226c0:	23b0      	movs	r3, #176	@ 0xb0
 80226c2:	009b      	lsls	r3, r3, #2
 80226c4:	58d0      	ldr	r0, [r2, r3]
 80226c6:	2318      	movs	r3, #24
 80226c8:	2200      	movs	r2, #0
 80226ca:	2100      	movs	r1, #0
 80226cc:	f7f7 fd54 	bl	801a178 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80226d0:	687a      	ldr	r2, [r7, #4]
 80226d2:	23b0      	movs	r3, #176	@ 0xb0
 80226d4:	009b      	lsls	r3, r3, #2
 80226d6:	58d0      	ldr	r0, [r2, r3]
 80226d8:	2358      	movs	r3, #88	@ 0x58
 80226da:	2200      	movs	r2, #0
 80226dc:	2180      	movs	r1, #128	@ 0x80
 80226de:	f7f7 fd4b 	bl	801a178 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80226e2:	687a      	ldr	r2, [r7, #4]
 80226e4:	23b0      	movs	r3, #176	@ 0xb0
 80226e6:	009b      	lsls	r3, r3, #2
 80226e8:	58d0      	ldr	r0, [r2, r3]
 80226ea:	23c0      	movs	r3, #192	@ 0xc0
 80226ec:	2200      	movs	r2, #0
 80226ee:	2181      	movs	r1, #129	@ 0x81
 80226f0:	f7f7 fd42 	bl	801a178 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80226f4:	687a      	ldr	r2, [r7, #4]
 80226f6:	23b0      	movs	r3, #176	@ 0xb0
 80226f8:	009b      	lsls	r3, r3, #2
 80226fa:	58d0      	ldr	r0, [r2, r3]
 80226fc:	2388      	movs	r3, #136	@ 0x88
 80226fe:	005b      	lsls	r3, r3, #1
 8022700:	2200      	movs	r2, #0
 8022702:	2101      	movs	r1, #1
 8022704:	f7f7 fd38 	bl	801a178 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8022708:	687a      	ldr	r2, [r7, #4]
 802270a:	23b0      	movs	r3, #176	@ 0xb0
 802270c:	009b      	lsls	r3, r3, #2
 802270e:	58d0      	ldr	r0, [r2, r3]
 8022710:	2380      	movs	r3, #128	@ 0x80
 8022712:	005b      	lsls	r3, r3, #1
 8022714:	2200      	movs	r2, #0
 8022716:	2182      	movs	r1, #130	@ 0x82
 8022718:	f7f7 fd2e 	bl	801a178 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 802271c:	2300      	movs	r3, #0
}
 802271e:	0018      	movs	r0, r3
 8022720:	46bd      	mov	sp, r7
 8022722:	b002      	add	sp, #8
 8022724:	bd80      	pop	{r7, pc}
 8022726:	46c0      	nop			@ (mov r8, r8)
 8022728:	20002fc8 	.word	0x20002fc8
 802272c:	40005c00 	.word	0x40005c00

08022730 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022732:	b085      	sub	sp, #20
 8022734:	af00      	add	r7, sp, #0
 8022736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022738:	210f      	movs	r1, #15
 802273a:	187b      	adds	r3, r7, r1
 802273c:	2200      	movs	r2, #0
 802273e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022740:	260e      	movs	r6, #14
 8022742:	19bb      	adds	r3, r7, r6
 8022744:	2200      	movs	r2, #0
 8022746:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022748:	687a      	ldr	r2, [r7, #4]
 802274a:	23b0      	movs	r3, #176	@ 0xb0
 802274c:	009b      	lsls	r3, r3, #2
 802274e:	58d3      	ldr	r3, [r2, r3]
 8022750:	000d      	movs	r5, r1
 8022752:	187c      	adds	r4, r7, r1
 8022754:	0018      	movs	r0, r3
 8022756:	f7f6 f841 	bl	80187dc <HAL_PCD_Start>
 802275a:	0003      	movs	r3, r0
 802275c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802275e:	19bc      	adds	r4, r7, r6
 8022760:	197b      	adds	r3, r7, r5
 8022762:	781b      	ldrb	r3, [r3, #0]
 8022764:	0018      	movs	r0, r3
 8022766:	f000 f9bc 	bl	8022ae2 <USBD_Get_USB_Status>
 802276a:	0003      	movs	r3, r0
 802276c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802276e:	19bb      	adds	r3, r7, r6
 8022770:	781b      	ldrb	r3, [r3, #0]
}
 8022772:	0018      	movs	r0, r3
 8022774:	46bd      	mov	sp, r7
 8022776:	b005      	add	sp, #20
 8022778:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802277a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 802277a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802277c:	b085      	sub	sp, #20
 802277e:	af00      	add	r7, sp, #0
 8022780:	6078      	str	r0, [r7, #4]
 8022782:	000c      	movs	r4, r1
 8022784:	0010      	movs	r0, r2
 8022786:	0019      	movs	r1, r3
 8022788:	1cfb      	adds	r3, r7, #3
 802278a:	1c22      	adds	r2, r4, #0
 802278c:	701a      	strb	r2, [r3, #0]
 802278e:	1cbb      	adds	r3, r7, #2
 8022790:	1c02      	adds	r2, r0, #0
 8022792:	701a      	strb	r2, [r3, #0]
 8022794:	003b      	movs	r3, r7
 8022796:	1c0a      	adds	r2, r1, #0
 8022798:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802279a:	260f      	movs	r6, #15
 802279c:	19bb      	adds	r3, r7, r6
 802279e:	2200      	movs	r2, #0
 80227a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80227a2:	250e      	movs	r5, #14
 80227a4:	197b      	adds	r3, r7, r5
 80227a6:	2200      	movs	r2, #0
 80227a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80227aa:	687a      	ldr	r2, [r7, #4]
 80227ac:	23b0      	movs	r3, #176	@ 0xb0
 80227ae:	009b      	lsls	r3, r3, #2
 80227b0:	58d0      	ldr	r0, [r2, r3]
 80227b2:	19bc      	adds	r4, r7, r6
 80227b4:	1cbb      	adds	r3, r7, #2
 80227b6:	781d      	ldrb	r5, [r3, #0]
 80227b8:	003b      	movs	r3, r7
 80227ba:	881a      	ldrh	r2, [r3, #0]
 80227bc:	1cfb      	adds	r3, r7, #3
 80227be:	7819      	ldrb	r1, [r3, #0]
 80227c0:	002b      	movs	r3, r5
 80227c2:	f7f6 f9a0 	bl	8018b06 <HAL_PCD_EP_Open>
 80227c6:	0003      	movs	r3, r0
 80227c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80227ca:	250e      	movs	r5, #14
 80227cc:	197c      	adds	r4, r7, r5
 80227ce:	19bb      	adds	r3, r7, r6
 80227d0:	781b      	ldrb	r3, [r3, #0]
 80227d2:	0018      	movs	r0, r3
 80227d4:	f000 f985 	bl	8022ae2 <USBD_Get_USB_Status>
 80227d8:	0003      	movs	r3, r0
 80227da:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80227dc:	197b      	adds	r3, r7, r5
 80227de:	781b      	ldrb	r3, [r3, #0]
}
 80227e0:	0018      	movs	r0, r3
 80227e2:	46bd      	mov	sp, r7
 80227e4:	b005      	add	sp, #20
 80227e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080227e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80227e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80227ea:	b085      	sub	sp, #20
 80227ec:	af00      	add	r7, sp, #0
 80227ee:	6078      	str	r0, [r7, #4]
 80227f0:	000a      	movs	r2, r1
 80227f2:	1cfb      	adds	r3, r7, #3
 80227f4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80227f6:	210f      	movs	r1, #15
 80227f8:	187b      	adds	r3, r7, r1
 80227fa:	2200      	movs	r2, #0
 80227fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80227fe:	260e      	movs	r6, #14
 8022800:	19bb      	adds	r3, r7, r6
 8022802:	2200      	movs	r2, #0
 8022804:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022806:	687a      	ldr	r2, [r7, #4]
 8022808:	23b0      	movs	r3, #176	@ 0xb0
 802280a:	009b      	lsls	r3, r3, #2
 802280c:	58d2      	ldr	r2, [r2, r3]
 802280e:	000d      	movs	r5, r1
 8022810:	187c      	adds	r4, r7, r1
 8022812:	1cfb      	adds	r3, r7, #3
 8022814:	781b      	ldrb	r3, [r3, #0]
 8022816:	0019      	movs	r1, r3
 8022818:	0010      	movs	r0, r2
 802281a:	f7f6 f9e3 	bl	8018be4 <HAL_PCD_EP_Close>
 802281e:	0003      	movs	r3, r0
 8022820:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022822:	19bc      	adds	r4, r7, r6
 8022824:	197b      	adds	r3, r7, r5
 8022826:	781b      	ldrb	r3, [r3, #0]
 8022828:	0018      	movs	r0, r3
 802282a:	f000 f95a 	bl	8022ae2 <USBD_Get_USB_Status>
 802282e:	0003      	movs	r3, r0
 8022830:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022832:	19bb      	adds	r3, r7, r6
 8022834:	781b      	ldrb	r3, [r3, #0]
}
 8022836:	0018      	movs	r0, r3
 8022838:	46bd      	mov	sp, r7
 802283a:	b005      	add	sp, #20
 802283c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802283e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802283e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022840:	b085      	sub	sp, #20
 8022842:	af00      	add	r7, sp, #0
 8022844:	6078      	str	r0, [r7, #4]
 8022846:	000a      	movs	r2, r1
 8022848:	1cfb      	adds	r3, r7, #3
 802284a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802284c:	210f      	movs	r1, #15
 802284e:	187b      	adds	r3, r7, r1
 8022850:	2200      	movs	r2, #0
 8022852:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022854:	260e      	movs	r6, #14
 8022856:	19bb      	adds	r3, r7, r6
 8022858:	2200      	movs	r2, #0
 802285a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 802285c:	687a      	ldr	r2, [r7, #4]
 802285e:	23b0      	movs	r3, #176	@ 0xb0
 8022860:	009b      	lsls	r3, r3, #2
 8022862:	58d2      	ldr	r2, [r2, r3]
 8022864:	000d      	movs	r5, r1
 8022866:	187c      	adds	r4, r7, r1
 8022868:	1cfb      	adds	r3, r7, #3
 802286a:	781b      	ldrb	r3, [r3, #0]
 802286c:	0019      	movs	r1, r3
 802286e:	0010      	movs	r0, r2
 8022870:	f7f6 fa95 	bl	8018d9e <HAL_PCD_EP_SetStall>
 8022874:	0003      	movs	r3, r0
 8022876:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022878:	19bc      	adds	r4, r7, r6
 802287a:	197b      	adds	r3, r7, r5
 802287c:	781b      	ldrb	r3, [r3, #0]
 802287e:	0018      	movs	r0, r3
 8022880:	f000 f92f 	bl	8022ae2 <USBD_Get_USB_Status>
 8022884:	0003      	movs	r3, r0
 8022886:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022888:	19bb      	adds	r3, r7, r6
 802288a:	781b      	ldrb	r3, [r3, #0]
}
 802288c:	0018      	movs	r0, r3
 802288e:	46bd      	mov	sp, r7
 8022890:	b005      	add	sp, #20
 8022892:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022894 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022896:	b085      	sub	sp, #20
 8022898:	af00      	add	r7, sp, #0
 802289a:	6078      	str	r0, [r7, #4]
 802289c:	000a      	movs	r2, r1
 802289e:	1cfb      	adds	r3, r7, #3
 80228a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80228a2:	210f      	movs	r1, #15
 80228a4:	187b      	adds	r3, r7, r1
 80228a6:	2200      	movs	r2, #0
 80228a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80228aa:	260e      	movs	r6, #14
 80228ac:	19bb      	adds	r3, r7, r6
 80228ae:	2200      	movs	r2, #0
 80228b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80228b2:	687a      	ldr	r2, [r7, #4]
 80228b4:	23b0      	movs	r3, #176	@ 0xb0
 80228b6:	009b      	lsls	r3, r3, #2
 80228b8:	58d2      	ldr	r2, [r2, r3]
 80228ba:	000d      	movs	r5, r1
 80228bc:	187c      	adds	r4, r7, r1
 80228be:	1cfb      	adds	r3, r7, #3
 80228c0:	781b      	ldrb	r3, [r3, #0]
 80228c2:	0019      	movs	r1, r3
 80228c4:	0010      	movs	r0, r2
 80228c6:	f7f6 fac6 	bl	8018e56 <HAL_PCD_EP_ClrStall>
 80228ca:	0003      	movs	r3, r0
 80228cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228ce:	19bc      	adds	r4, r7, r6
 80228d0:	197b      	adds	r3, r7, r5
 80228d2:	781b      	ldrb	r3, [r3, #0]
 80228d4:	0018      	movs	r0, r3
 80228d6:	f000 f904 	bl	8022ae2 <USBD_Get_USB_Status>
 80228da:	0003      	movs	r3, r0
 80228dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80228de:	19bb      	adds	r3, r7, r6
 80228e0:	781b      	ldrb	r3, [r3, #0]
}
 80228e2:	0018      	movs	r0, r3
 80228e4:	46bd      	mov	sp, r7
 80228e6:	b005      	add	sp, #20
 80228e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080228ea <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80228ea:	b580      	push	{r7, lr}
 80228ec:	b084      	sub	sp, #16
 80228ee:	af00      	add	r7, sp, #0
 80228f0:	6078      	str	r0, [r7, #4]
 80228f2:	000a      	movs	r2, r1
 80228f4:	1cfb      	adds	r3, r7, #3
 80228f6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80228f8:	687a      	ldr	r2, [r7, #4]
 80228fa:	23b0      	movs	r3, #176	@ 0xb0
 80228fc:	009b      	lsls	r3, r3, #2
 80228fe:	58d3      	ldr	r3, [r2, r3]
 8022900:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8022902:	1cfb      	adds	r3, r7, #3
 8022904:	781b      	ldrb	r3, [r3, #0]
 8022906:	b25b      	sxtb	r3, r3
 8022908:	2b00      	cmp	r3, #0
 802290a:	da0d      	bge.n	8022928 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802290c:	1cfb      	adds	r3, r7, #3
 802290e:	781b      	ldrb	r3, [r3, #0]
 8022910:	227f      	movs	r2, #127	@ 0x7f
 8022912:	4013      	ands	r3, r2
 8022914:	68f9      	ldr	r1, [r7, #12]
 8022916:	1c5a      	adds	r2, r3, #1
 8022918:	0013      	movs	r3, r2
 802291a:	009b      	lsls	r3, r3, #2
 802291c:	189b      	adds	r3, r3, r2
 802291e:	00db      	lsls	r3, r3, #3
 8022920:	18cb      	adds	r3, r1, r3
 8022922:	3302      	adds	r3, #2
 8022924:	781b      	ldrb	r3, [r3, #0]
 8022926:	e00d      	b.n	8022944 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022928:	1cfb      	adds	r3, r7, #3
 802292a:	781b      	ldrb	r3, [r3, #0]
 802292c:	227f      	movs	r2, #127	@ 0x7f
 802292e:	401a      	ands	r2, r3
 8022930:	68f8      	ldr	r0, [r7, #12]
 8022932:	23b5      	movs	r3, #181	@ 0xb5
 8022934:	0059      	lsls	r1, r3, #1
 8022936:	0013      	movs	r3, r2
 8022938:	009b      	lsls	r3, r3, #2
 802293a:	189b      	adds	r3, r3, r2
 802293c:	00db      	lsls	r3, r3, #3
 802293e:	18c3      	adds	r3, r0, r3
 8022940:	185b      	adds	r3, r3, r1
 8022942:	781b      	ldrb	r3, [r3, #0]
  }
}
 8022944:	0018      	movs	r0, r3
 8022946:	46bd      	mov	sp, r7
 8022948:	b004      	add	sp, #16
 802294a:	bd80      	pop	{r7, pc}

0802294c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 802294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802294e:	b085      	sub	sp, #20
 8022950:	af00      	add	r7, sp, #0
 8022952:	6078      	str	r0, [r7, #4]
 8022954:	000a      	movs	r2, r1
 8022956:	1cfb      	adds	r3, r7, #3
 8022958:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802295a:	210f      	movs	r1, #15
 802295c:	187b      	adds	r3, r7, r1
 802295e:	2200      	movs	r2, #0
 8022960:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022962:	260e      	movs	r6, #14
 8022964:	19bb      	adds	r3, r7, r6
 8022966:	2200      	movs	r2, #0
 8022968:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802296a:	687a      	ldr	r2, [r7, #4]
 802296c:	23b0      	movs	r3, #176	@ 0xb0
 802296e:	009b      	lsls	r3, r3, #2
 8022970:	58d2      	ldr	r2, [r2, r3]
 8022972:	000d      	movs	r5, r1
 8022974:	187c      	adds	r4, r7, r1
 8022976:	1cfb      	adds	r3, r7, #3
 8022978:	781b      	ldrb	r3, [r3, #0]
 802297a:	0019      	movs	r1, r3
 802297c:	0010      	movs	r0, r2
 802297e:	f7f6 f897 	bl	8018ab0 <HAL_PCD_SetAddress>
 8022982:	0003      	movs	r3, r0
 8022984:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022986:	19bc      	adds	r4, r7, r6
 8022988:	197b      	adds	r3, r7, r5
 802298a:	781b      	ldrb	r3, [r3, #0]
 802298c:	0018      	movs	r0, r3
 802298e:	f000 f8a8 	bl	8022ae2 <USBD_Get_USB_Status>
 8022992:	0003      	movs	r3, r0
 8022994:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022996:	19bb      	adds	r3, r7, r6
 8022998:	781b      	ldrb	r3, [r3, #0]
}
 802299a:	0018      	movs	r0, r3
 802299c:	46bd      	mov	sp, r7
 802299e:	b005      	add	sp, #20
 80229a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080229a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80229a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229a4:	b087      	sub	sp, #28
 80229a6:	af00      	add	r7, sp, #0
 80229a8:	60f8      	str	r0, [r7, #12]
 80229aa:	0008      	movs	r0, r1
 80229ac:	607a      	str	r2, [r7, #4]
 80229ae:	0019      	movs	r1, r3
 80229b0:	230b      	movs	r3, #11
 80229b2:	18fb      	adds	r3, r7, r3
 80229b4:	1c02      	adds	r2, r0, #0
 80229b6:	701a      	strb	r2, [r3, #0]
 80229b8:	2408      	movs	r4, #8
 80229ba:	193b      	adds	r3, r7, r4
 80229bc:	1c0a      	adds	r2, r1, #0
 80229be:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80229c0:	2117      	movs	r1, #23
 80229c2:	187b      	adds	r3, r7, r1
 80229c4:	2200      	movs	r2, #0
 80229c6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80229c8:	2516      	movs	r5, #22
 80229ca:	197b      	adds	r3, r7, r5
 80229cc:	2200      	movs	r2, #0
 80229ce:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80229d0:	68fa      	ldr	r2, [r7, #12]
 80229d2:	23b0      	movs	r3, #176	@ 0xb0
 80229d4:	009b      	lsls	r3, r3, #2
 80229d6:	58d0      	ldr	r0, [r2, r3]
 80229d8:	193b      	adds	r3, r7, r4
 80229da:	881d      	ldrh	r5, [r3, #0]
 80229dc:	000e      	movs	r6, r1
 80229de:	187c      	adds	r4, r7, r1
 80229e0:	687a      	ldr	r2, [r7, #4]
 80229e2:	230b      	movs	r3, #11
 80229e4:	18fb      	adds	r3, r7, r3
 80229e6:	7819      	ldrb	r1, [r3, #0]
 80229e8:	002b      	movs	r3, r5
 80229ea:	f7f6 f99c 	bl	8018d26 <HAL_PCD_EP_Transmit>
 80229ee:	0003      	movs	r3, r0
 80229f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229f2:	2516      	movs	r5, #22
 80229f4:	197c      	adds	r4, r7, r5
 80229f6:	19bb      	adds	r3, r7, r6
 80229f8:	781b      	ldrb	r3, [r3, #0]
 80229fa:	0018      	movs	r0, r3
 80229fc:	f000 f871 	bl	8022ae2 <USBD_Get_USB_Status>
 8022a00:	0003      	movs	r3, r0
 8022a02:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022a04:	197b      	adds	r3, r7, r5
 8022a06:	781b      	ldrb	r3, [r3, #0]
}
 8022a08:	0018      	movs	r0, r3
 8022a0a:	46bd      	mov	sp, r7
 8022a0c:	b007      	add	sp, #28
 8022a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022a10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8022a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a12:	b087      	sub	sp, #28
 8022a14:	af00      	add	r7, sp, #0
 8022a16:	60f8      	str	r0, [r7, #12]
 8022a18:	0008      	movs	r0, r1
 8022a1a:	607a      	str	r2, [r7, #4]
 8022a1c:	0019      	movs	r1, r3
 8022a1e:	230b      	movs	r3, #11
 8022a20:	18fb      	adds	r3, r7, r3
 8022a22:	1c02      	adds	r2, r0, #0
 8022a24:	701a      	strb	r2, [r3, #0]
 8022a26:	2408      	movs	r4, #8
 8022a28:	193b      	adds	r3, r7, r4
 8022a2a:	1c0a      	adds	r2, r1, #0
 8022a2c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a2e:	2117      	movs	r1, #23
 8022a30:	187b      	adds	r3, r7, r1
 8022a32:	2200      	movs	r2, #0
 8022a34:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a36:	2516      	movs	r5, #22
 8022a38:	197b      	adds	r3, r7, r5
 8022a3a:	2200      	movs	r2, #0
 8022a3c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022a3e:	68fa      	ldr	r2, [r7, #12]
 8022a40:	23b0      	movs	r3, #176	@ 0xb0
 8022a42:	009b      	lsls	r3, r3, #2
 8022a44:	58d0      	ldr	r0, [r2, r3]
 8022a46:	193b      	adds	r3, r7, r4
 8022a48:	881d      	ldrh	r5, [r3, #0]
 8022a4a:	000e      	movs	r6, r1
 8022a4c:	187c      	adds	r4, r7, r1
 8022a4e:	687a      	ldr	r2, [r7, #4]
 8022a50:	230b      	movs	r3, #11
 8022a52:	18fb      	adds	r3, r7, r3
 8022a54:	7819      	ldrb	r1, [r3, #0]
 8022a56:	002b      	movs	r3, r5
 8022a58:	f7f6 f915 	bl	8018c86 <HAL_PCD_EP_Receive>
 8022a5c:	0003      	movs	r3, r0
 8022a5e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a60:	2516      	movs	r5, #22
 8022a62:	197c      	adds	r4, r7, r5
 8022a64:	19bb      	adds	r3, r7, r6
 8022a66:	781b      	ldrb	r3, [r3, #0]
 8022a68:	0018      	movs	r0, r3
 8022a6a:	f000 f83a 	bl	8022ae2 <USBD_Get_USB_Status>
 8022a6e:	0003      	movs	r3, r0
 8022a70:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022a72:	197b      	adds	r3, r7, r5
 8022a74:	781b      	ldrb	r3, [r3, #0]
}
 8022a76:	0018      	movs	r0, r3
 8022a78:	46bd      	mov	sp, r7
 8022a7a:	b007      	add	sp, #28
 8022a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022a7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022a7e:	b580      	push	{r7, lr}
 8022a80:	b082      	sub	sp, #8
 8022a82:	af00      	add	r7, sp, #0
 8022a84:	6078      	str	r0, [r7, #4]
 8022a86:	000a      	movs	r2, r1
 8022a88:	1cfb      	adds	r3, r7, #3
 8022a8a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022a8c:	687a      	ldr	r2, [r7, #4]
 8022a8e:	23b0      	movs	r3, #176	@ 0xb0
 8022a90:	009b      	lsls	r3, r3, #2
 8022a92:	58d2      	ldr	r2, [r2, r3]
 8022a94:	1cfb      	adds	r3, r7, #3
 8022a96:	781b      	ldrb	r3, [r3, #0]
 8022a98:	0019      	movs	r1, r3
 8022a9a:	0010      	movs	r0, r2
 8022a9c:	f7f6 f92a 	bl	8018cf4 <HAL_PCD_EP_GetRxCount>
 8022aa0:	0003      	movs	r3, r0
}
 8022aa2:	0018      	movs	r0, r3
 8022aa4:	46bd      	mov	sp, r7
 8022aa6:	b002      	add	sp, #8
 8022aa8:	bd80      	pop	{r7, pc}
	...

08022aac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022aac:	b580      	push	{r7, lr}
 8022aae:	b082      	sub	sp, #8
 8022ab0:	af00      	add	r7, sp, #0
 8022ab2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022ab4:	4b02      	ldr	r3, [pc, #8]	@ (8022ac0 <USBD_static_malloc+0x14>)
}
 8022ab6:	0018      	movs	r0, r3
 8022ab8:	46bd      	mov	sp, r7
 8022aba:	b002      	add	sp, #8
 8022abc:	bd80      	pop	{r7, pc}
 8022abe:	46c0      	nop			@ (mov r8, r8)
 8022ac0:	200032bc 	.word	0x200032bc

08022ac4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022ac4:	b580      	push	{r7, lr}
 8022ac6:	b082      	sub	sp, #8
 8022ac8:	af00      	add	r7, sp, #0
 8022aca:	6078      	str	r0, [r7, #4]

}
 8022acc:	46c0      	nop			@ (mov r8, r8)
 8022ace:	46bd      	mov	sp, r7
 8022ad0:	b002      	add	sp, #8
 8022ad2:	bd80      	pop	{r7, pc}

08022ad4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8022ad4:	b580      	push	{r7, lr}
 8022ad6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8022ad8:	f7e9 fd6e 	bl	800c5b8 <SystemClock_Config>
}
 8022adc:	46c0      	nop			@ (mov r8, r8)
 8022ade:	46bd      	mov	sp, r7
 8022ae0:	bd80      	pop	{r7, pc}

08022ae2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022ae2:	b580      	push	{r7, lr}
 8022ae4:	b084      	sub	sp, #16
 8022ae6:	af00      	add	r7, sp, #0
 8022ae8:	0002      	movs	r2, r0
 8022aea:	1dfb      	adds	r3, r7, #7
 8022aec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022aee:	230f      	movs	r3, #15
 8022af0:	18fb      	adds	r3, r7, r3
 8022af2:	2200      	movs	r2, #0
 8022af4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8022af6:	1dfb      	adds	r3, r7, #7
 8022af8:	781b      	ldrb	r3, [r3, #0]
 8022afa:	2b03      	cmp	r3, #3
 8022afc:	d017      	beq.n	8022b2e <USBD_Get_USB_Status+0x4c>
 8022afe:	dc1b      	bgt.n	8022b38 <USBD_Get_USB_Status+0x56>
 8022b00:	2b02      	cmp	r3, #2
 8022b02:	d00f      	beq.n	8022b24 <USBD_Get_USB_Status+0x42>
 8022b04:	dc18      	bgt.n	8022b38 <USBD_Get_USB_Status+0x56>
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d002      	beq.n	8022b10 <USBD_Get_USB_Status+0x2e>
 8022b0a:	2b01      	cmp	r3, #1
 8022b0c:	d005      	beq.n	8022b1a <USBD_Get_USB_Status+0x38>
 8022b0e:	e013      	b.n	8022b38 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022b10:	230f      	movs	r3, #15
 8022b12:	18fb      	adds	r3, r7, r3
 8022b14:	2200      	movs	r2, #0
 8022b16:	701a      	strb	r2, [r3, #0]
    break;
 8022b18:	e013      	b.n	8022b42 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022b1a:	230f      	movs	r3, #15
 8022b1c:	18fb      	adds	r3, r7, r3
 8022b1e:	2202      	movs	r2, #2
 8022b20:	701a      	strb	r2, [r3, #0]
    break;
 8022b22:	e00e      	b.n	8022b42 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022b24:	230f      	movs	r3, #15
 8022b26:	18fb      	adds	r3, r7, r3
 8022b28:	2201      	movs	r2, #1
 8022b2a:	701a      	strb	r2, [r3, #0]
    break;
 8022b2c:	e009      	b.n	8022b42 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022b2e:	230f      	movs	r3, #15
 8022b30:	18fb      	adds	r3, r7, r3
 8022b32:	2202      	movs	r2, #2
 8022b34:	701a      	strb	r2, [r3, #0]
    break;
 8022b36:	e004      	b.n	8022b42 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8022b38:	230f      	movs	r3, #15
 8022b3a:	18fb      	adds	r3, r7, r3
 8022b3c:	2202      	movs	r2, #2
 8022b3e:	701a      	strb	r2, [r3, #0]
    break;
 8022b40:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8022b42:	230f      	movs	r3, #15
 8022b44:	18fb      	adds	r3, r7, r3
 8022b46:	781b      	ldrb	r3, [r3, #0]
}
 8022b48:	0018      	movs	r0, r3
 8022b4a:	46bd      	mov	sp, r7
 8022b4c:	b004      	add	sp, #16
 8022b4e:	bd80      	pop	{r7, pc}

08022b50 <arm_cfft_radix4by2_q31>:
 8022b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b52:	465f      	mov	r7, fp
 8022b54:	4656      	mov	r6, sl
 8022b56:	464d      	mov	r5, r9
 8022b58:	4644      	mov	r4, r8
 8022b5a:	000b      	movs	r3, r1
 8022b5c:	b4f0      	push	{r4, r5, r6, r7}
 8022b5e:	085b      	lsrs	r3, r3, #1
 8022b60:	b08f      	sub	sp, #60	@ 0x3c
 8022b62:	910a      	str	r1, [sp, #40]	@ 0x28
 8022b64:	0007      	movs	r7, r0
 8022b66:	9009      	str	r0, [sp, #36]	@ 0x24
 8022b68:	0011      	movs	r1, r2
 8022b6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022b6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	d100      	bne.n	8022b74 <arm_cfft_radix4by2_q31+0x24>
 8022b72:	e0a0      	b.n	8022cb6 <arm_cfft_radix4by2_q31+0x166>
 8022b74:	0002      	movs	r2, r0
 8022b76:	00db      	lsls	r3, r3, #3
 8022b78:	3204      	adds	r2, #4
 8022b7a:	4691      	mov	r9, r2
 8022b7c:	4698      	mov	r8, r3
 8022b7e:	000a      	movs	r2, r1
 8022b80:	464e      	mov	r6, r9
 8022b82:	4442      	add	r2, r8
 8022b84:	4699      	mov	r9, r3
 8022b86:	4688      	mov	r8, r1
 8022b88:	9208      	str	r2, [sp, #32]
 8022b8a:	900d      	str	r0, [sp, #52]	@ 0x34
 8022b8c:	4643      	mov	r3, r8
 8022b8e:	681b      	ldr	r3, [r3, #0]
 8022b90:	469b      	mov	fp, r3
 8022b92:	4643      	mov	r3, r8
 8022b94:	685b      	ldr	r3, [r3, #4]
 8022b96:	469a      	mov	sl, r3
 8022b98:	683b      	ldr	r3, [r7, #0]
 8022b9a:	109c      	asrs	r4, r3, #2
 8022b9c:	464b      	mov	r3, r9
 8022b9e:	58fb      	ldr	r3, [r7, r3]
 8022ba0:	109a      	asrs	r2, r3, #2
 8022ba2:	18a3      	adds	r3, r4, r2
 8022ba4:	603b      	str	r3, [r7, #0]
 8022ba6:	6833      	ldr	r3, [r6, #0]
 8022ba8:	1aa4      	subs	r4, r4, r2
 8022baa:	109d      	asrs	r5, r3, #2
 8022bac:	464b      	mov	r3, r9
 8022bae:	58f3      	ldr	r3, [r6, r3]
 8022bb0:	17e2      	asrs	r2, r4, #31
 8022bb2:	109b      	asrs	r3, r3, #2
 8022bb4:	18e9      	adds	r1, r5, r3
 8022bb6:	6031      	str	r1, [r6, #0]
 8022bb8:	0011      	movs	r1, r2
 8022bba:	465a      	mov	r2, fp
 8022bbc:	17d2      	asrs	r2, r2, #31
 8022bbe:	0010      	movs	r0, r2
 8022bc0:	4652      	mov	r2, sl
 8022bc2:	1aed      	subs	r5, r5, r3
 8022bc4:	17eb      	asrs	r3, r5, #31
 8022bc6:	17d2      	asrs	r2, r2, #31
 8022bc8:	9307      	str	r3, [sp, #28]
 8022bca:	9204      	str	r2, [sp, #16]
 8022bcc:	0003      	movs	r3, r0
 8022bce:	465a      	mov	r2, fp
 8022bd0:	9006      	str	r0, [sp, #24]
 8022bd2:	0020      	movs	r0, r4
 8022bd4:	9105      	str	r1, [sp, #20]
 8022bd6:	f7dd fcf3 	bl	80005c0 <__aeabi_lmul>
 8022bda:	2280      	movs	r2, #128	@ 0x80
 8022bdc:	2300      	movs	r3, #0
 8022bde:	0612      	lsls	r2, r2, #24
 8022be0:	1880      	adds	r0, r0, r2
 8022be2:	4159      	adcs	r1, r3
 8022be4:	2300      	movs	r3, #0
 8022be6:	9101      	str	r1, [sp, #4]
 8022be8:	9300      	str	r3, [sp, #0]
 8022bea:	4652      	mov	r2, sl
 8022bec:	9b04      	ldr	r3, [sp, #16]
 8022bee:	0028      	movs	r0, r5
 8022bf0:	17e9      	asrs	r1, r5, #31
 8022bf2:	f7dd fce5 	bl	80005c0 <__aeabi_lmul>
 8022bf6:	9a00      	ldr	r2, [sp, #0]
 8022bf8:	9b01      	ldr	r3, [sp, #4]
 8022bfa:	1880      	adds	r0, r0, r2
 8022bfc:	4159      	adcs	r1, r3
 8022bfe:	2280      	movs	r2, #128	@ 0x80
 8022c00:	2300      	movs	r3, #0
 8022c02:	0612      	lsls	r2, r2, #24
 8022c04:	1880      	adds	r0, r0, r2
 8022c06:	4159      	adcs	r1, r3
 8022c08:	464a      	mov	r2, r9
 8022c0a:	004b      	lsls	r3, r1, #1
 8022c0c:	50bb      	str	r3, [r7, r2]
 8022c0e:	4658      	mov	r0, fp
 8022c10:	002a      	movs	r2, r5
 8022c12:	9b07      	ldr	r3, [sp, #28]
 8022c14:	9906      	ldr	r1, [sp, #24]
 8022c16:	f7dd fcd3 	bl	80005c0 <__aeabi_lmul>
 8022c1a:	2280      	movs	r2, #128	@ 0x80
 8022c1c:	2300      	movs	r3, #0
 8022c1e:	0612      	lsls	r2, r2, #24
 8022c20:	1880      	adds	r0, r0, r2
 8022c22:	4159      	adcs	r1, r3
 8022c24:	2000      	movs	r0, #0
 8022c26:	9103      	str	r1, [sp, #12]
 8022c28:	9002      	str	r0, [sp, #8]
 8022c2a:	4652      	mov	r2, sl
 8022c2c:	9b04      	ldr	r3, [sp, #16]
 8022c2e:	0020      	movs	r0, r4
 8022c30:	9905      	ldr	r1, [sp, #20]
 8022c32:	f7dd fcc5 	bl	80005c0 <__aeabi_lmul>
 8022c36:	9a02      	ldr	r2, [sp, #8]
 8022c38:	9b03      	ldr	r3, [sp, #12]
 8022c3a:	1a12      	subs	r2, r2, r0
 8022c3c:	418b      	sbcs	r3, r1
 8022c3e:	2080      	movs	r0, #128	@ 0x80
 8022c40:	2100      	movs	r1, #0
 8022c42:	0600      	lsls	r0, r0, #24
 8022c44:	1812      	adds	r2, r2, r0
 8022c46:	414b      	adcs	r3, r1
 8022c48:	464a      	mov	r2, r9
 8022c4a:	005b      	lsls	r3, r3, #1
 8022c4c:	50b3      	str	r3, [r6, r2]
 8022c4e:	2308      	movs	r3, #8
 8022c50:	469c      	mov	ip, r3
 8022c52:	9b08      	ldr	r3, [sp, #32]
 8022c54:	44e0      	add	r8, ip
 8022c56:	3708      	adds	r7, #8
 8022c58:	3608      	adds	r6, #8
 8022c5a:	4598      	cmp	r8, r3
 8022c5c:	d196      	bne.n	8022b8c <arm_cfft_radix4by2_q31+0x3c>
 8022c5e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022c60:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022c62:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022c64:	2302      	movs	r3, #2
 8022c66:	003a      	movs	r2, r7
 8022c68:	0029      	movs	r1, r5
 8022c6a:	0020      	movs	r0, r4
 8022c6c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8022c6e:	f000 f957 	bl	8022f20 <arm_radix4_butterfly_q31>
 8022c72:	46a4      	mov	ip, r4
 8022c74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022c76:	2302      	movs	r3, #2
 8022c78:	0088      	lsls	r0, r1, #2
 8022c7a:	4460      	add	r0, ip
 8022c7c:	003a      	movs	r2, r7
 8022c7e:	0029      	movs	r1, r5
 8022c80:	f000 f94e 	bl	8022f20 <arm_radix4_butterfly_q31>
 8022c84:	46a4      	mov	ip, r4
 8022c86:	0128      	lsls	r0, r5, #4
 8022c88:	4460      	add	r0, ip
 8022c8a:	6833      	ldr	r3, [r6, #0]
 8022c8c:	005b      	lsls	r3, r3, #1
 8022c8e:	6033      	str	r3, [r6, #0]
 8022c90:	6873      	ldr	r3, [r6, #4]
 8022c92:	005b      	lsls	r3, r3, #1
 8022c94:	6073      	str	r3, [r6, #4]
 8022c96:	68b3      	ldr	r3, [r6, #8]
 8022c98:	005b      	lsls	r3, r3, #1
 8022c9a:	60b3      	str	r3, [r6, #8]
 8022c9c:	68f3      	ldr	r3, [r6, #12]
 8022c9e:	005b      	lsls	r3, r3, #1
 8022ca0:	60f3      	str	r3, [r6, #12]
 8022ca2:	3610      	adds	r6, #16
 8022ca4:	42b0      	cmp	r0, r6
 8022ca6:	d1f0      	bne.n	8022c8a <arm_cfft_radix4by2_q31+0x13a>
 8022ca8:	b00f      	add	sp, #60	@ 0x3c
 8022caa:	bc3c      	pop	{r2, r3, r4, r5}
 8022cac:	4690      	mov	r8, r2
 8022cae:	4699      	mov	r9, r3
 8022cb0:	46a2      	mov	sl, r4
 8022cb2:	46ab      	mov	fp, r5
 8022cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022cb6:	2302      	movs	r3, #2
 8022cb8:	2100      	movs	r1, #0
 8022cba:	0015      	movs	r5, r2
 8022cbc:	f000 f930 	bl	8022f20 <arm_radix4_butterfly_q31>
 8022cc0:	46bc      	mov	ip, r7
 8022cc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022cc4:	002a      	movs	r2, r5
 8022cc6:	0098      	lsls	r0, r3, #2
 8022cc8:	4460      	add	r0, ip
 8022cca:	2302      	movs	r3, #2
 8022ccc:	2100      	movs	r1, #0
 8022cce:	f000 f927 	bl	8022f20 <arm_radix4_butterfly_q31>
 8022cd2:	e7e9      	b.n	8022ca8 <arm_cfft_radix4by2_q31+0x158>

08022cd4 <arm_cfft_radix4by2_inverse_q31>:
 8022cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022cd6:	465f      	mov	r7, fp
 8022cd8:	4656      	mov	r6, sl
 8022cda:	464d      	mov	r5, r9
 8022cdc:	4644      	mov	r4, r8
 8022cde:	000b      	movs	r3, r1
 8022ce0:	b4f0      	push	{r4, r5, r6, r7}
 8022ce2:	085b      	lsrs	r3, r3, #1
 8022ce4:	b08f      	sub	sp, #60	@ 0x3c
 8022ce6:	910a      	str	r1, [sp, #40]	@ 0x28
 8022ce8:	0007      	movs	r7, r0
 8022cea:	9009      	str	r0, [sp, #36]	@ 0x24
 8022cec:	0011      	movs	r1, r2
 8022cee:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022cf0:	930c      	str	r3, [sp, #48]	@ 0x30
 8022cf2:	2b00      	cmp	r3, #0
 8022cf4:	d100      	bne.n	8022cf8 <arm_cfft_radix4by2_inverse_q31+0x24>
 8022cf6:	e0a0      	b.n	8022e3a <arm_cfft_radix4by2_inverse_q31+0x166>
 8022cf8:	0002      	movs	r2, r0
 8022cfa:	00db      	lsls	r3, r3, #3
 8022cfc:	3204      	adds	r2, #4
 8022cfe:	4691      	mov	r9, r2
 8022d00:	4698      	mov	r8, r3
 8022d02:	000a      	movs	r2, r1
 8022d04:	464e      	mov	r6, r9
 8022d06:	4442      	add	r2, r8
 8022d08:	4699      	mov	r9, r3
 8022d0a:	4688      	mov	r8, r1
 8022d0c:	9208      	str	r2, [sp, #32]
 8022d0e:	900d      	str	r0, [sp, #52]	@ 0x34
 8022d10:	4643      	mov	r3, r8
 8022d12:	681b      	ldr	r3, [r3, #0]
 8022d14:	469b      	mov	fp, r3
 8022d16:	4643      	mov	r3, r8
 8022d18:	685b      	ldr	r3, [r3, #4]
 8022d1a:	469a      	mov	sl, r3
 8022d1c:	683b      	ldr	r3, [r7, #0]
 8022d1e:	109c      	asrs	r4, r3, #2
 8022d20:	464b      	mov	r3, r9
 8022d22:	58fb      	ldr	r3, [r7, r3]
 8022d24:	109a      	asrs	r2, r3, #2
 8022d26:	18a3      	adds	r3, r4, r2
 8022d28:	603b      	str	r3, [r7, #0]
 8022d2a:	6833      	ldr	r3, [r6, #0]
 8022d2c:	1aa4      	subs	r4, r4, r2
 8022d2e:	109d      	asrs	r5, r3, #2
 8022d30:	464b      	mov	r3, r9
 8022d32:	58f3      	ldr	r3, [r6, r3]
 8022d34:	17e2      	asrs	r2, r4, #31
 8022d36:	109b      	asrs	r3, r3, #2
 8022d38:	18e9      	adds	r1, r5, r3
 8022d3a:	6031      	str	r1, [r6, #0]
 8022d3c:	0011      	movs	r1, r2
 8022d3e:	465a      	mov	r2, fp
 8022d40:	17d2      	asrs	r2, r2, #31
 8022d42:	0010      	movs	r0, r2
 8022d44:	4652      	mov	r2, sl
 8022d46:	1aed      	subs	r5, r5, r3
 8022d48:	17eb      	asrs	r3, r5, #31
 8022d4a:	17d2      	asrs	r2, r2, #31
 8022d4c:	9307      	str	r3, [sp, #28]
 8022d4e:	9204      	str	r2, [sp, #16]
 8022d50:	0003      	movs	r3, r0
 8022d52:	465a      	mov	r2, fp
 8022d54:	9006      	str	r0, [sp, #24]
 8022d56:	0020      	movs	r0, r4
 8022d58:	9105      	str	r1, [sp, #20]
 8022d5a:	f7dd fc31 	bl	80005c0 <__aeabi_lmul>
 8022d5e:	2280      	movs	r2, #128	@ 0x80
 8022d60:	2300      	movs	r3, #0
 8022d62:	0612      	lsls	r2, r2, #24
 8022d64:	1880      	adds	r0, r0, r2
 8022d66:	4159      	adcs	r1, r3
 8022d68:	2300      	movs	r3, #0
 8022d6a:	9101      	str	r1, [sp, #4]
 8022d6c:	9300      	str	r3, [sp, #0]
 8022d6e:	4652      	mov	r2, sl
 8022d70:	9b04      	ldr	r3, [sp, #16]
 8022d72:	0028      	movs	r0, r5
 8022d74:	17e9      	asrs	r1, r5, #31
 8022d76:	f7dd fc23 	bl	80005c0 <__aeabi_lmul>
 8022d7a:	9a00      	ldr	r2, [sp, #0]
 8022d7c:	9b01      	ldr	r3, [sp, #4]
 8022d7e:	1a12      	subs	r2, r2, r0
 8022d80:	418b      	sbcs	r3, r1
 8022d82:	2080      	movs	r0, #128	@ 0x80
 8022d84:	2100      	movs	r1, #0
 8022d86:	0600      	lsls	r0, r0, #24
 8022d88:	1812      	adds	r2, r2, r0
 8022d8a:	414b      	adcs	r3, r1
 8022d8c:	464a      	mov	r2, r9
 8022d8e:	005b      	lsls	r3, r3, #1
 8022d90:	50bb      	str	r3, [r7, r2]
 8022d92:	4658      	mov	r0, fp
 8022d94:	002a      	movs	r2, r5
 8022d96:	9b07      	ldr	r3, [sp, #28]
 8022d98:	9906      	ldr	r1, [sp, #24]
 8022d9a:	f7dd fc11 	bl	80005c0 <__aeabi_lmul>
 8022d9e:	2280      	movs	r2, #128	@ 0x80
 8022da0:	2300      	movs	r3, #0
 8022da2:	0612      	lsls	r2, r2, #24
 8022da4:	1880      	adds	r0, r0, r2
 8022da6:	4159      	adcs	r1, r3
 8022da8:	2000      	movs	r0, #0
 8022daa:	9103      	str	r1, [sp, #12]
 8022dac:	9002      	str	r0, [sp, #8]
 8022dae:	4652      	mov	r2, sl
 8022db0:	9b04      	ldr	r3, [sp, #16]
 8022db2:	0020      	movs	r0, r4
 8022db4:	9905      	ldr	r1, [sp, #20]
 8022db6:	f7dd fc03 	bl	80005c0 <__aeabi_lmul>
 8022dba:	9b02      	ldr	r3, [sp, #8]
 8022dbc:	9c03      	ldr	r4, [sp, #12]
 8022dbe:	18c0      	adds	r0, r0, r3
 8022dc0:	4161      	adcs	r1, r4
 8022dc2:	2380      	movs	r3, #128	@ 0x80
 8022dc4:	2400      	movs	r4, #0
 8022dc6:	061b      	lsls	r3, r3, #24
 8022dc8:	18c0      	adds	r0, r0, r3
 8022dca:	4161      	adcs	r1, r4
 8022dcc:	464a      	mov	r2, r9
 8022dce:	004b      	lsls	r3, r1, #1
 8022dd0:	50b3      	str	r3, [r6, r2]
 8022dd2:	2308      	movs	r3, #8
 8022dd4:	469c      	mov	ip, r3
 8022dd6:	9b08      	ldr	r3, [sp, #32]
 8022dd8:	44e0      	add	r8, ip
 8022dda:	3708      	adds	r7, #8
 8022ddc:	3608      	adds	r6, #8
 8022dde:	4598      	cmp	r8, r3
 8022de0:	d196      	bne.n	8022d10 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8022de2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022de4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022de6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022de8:	2302      	movs	r3, #2
 8022dea:	003a      	movs	r2, r7
 8022dec:	0029      	movs	r1, r5
 8022dee:	0020      	movs	r0, r4
 8022df0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8022df2:	f000 fb3b 	bl	802346c <arm_radix4_butterfly_inverse_q31>
 8022df6:	46a4      	mov	ip, r4
 8022df8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022dfa:	2302      	movs	r3, #2
 8022dfc:	0088      	lsls	r0, r1, #2
 8022dfe:	4460      	add	r0, ip
 8022e00:	003a      	movs	r2, r7
 8022e02:	0029      	movs	r1, r5
 8022e04:	f000 fb32 	bl	802346c <arm_radix4_butterfly_inverse_q31>
 8022e08:	46a4      	mov	ip, r4
 8022e0a:	0128      	lsls	r0, r5, #4
 8022e0c:	4460      	add	r0, ip
 8022e0e:	6833      	ldr	r3, [r6, #0]
 8022e10:	005b      	lsls	r3, r3, #1
 8022e12:	6033      	str	r3, [r6, #0]
 8022e14:	6873      	ldr	r3, [r6, #4]
 8022e16:	005b      	lsls	r3, r3, #1
 8022e18:	6073      	str	r3, [r6, #4]
 8022e1a:	68b3      	ldr	r3, [r6, #8]
 8022e1c:	005b      	lsls	r3, r3, #1
 8022e1e:	60b3      	str	r3, [r6, #8]
 8022e20:	68f3      	ldr	r3, [r6, #12]
 8022e22:	005b      	lsls	r3, r3, #1
 8022e24:	60f3      	str	r3, [r6, #12]
 8022e26:	3610      	adds	r6, #16
 8022e28:	42b0      	cmp	r0, r6
 8022e2a:	d1f0      	bne.n	8022e0e <arm_cfft_radix4by2_inverse_q31+0x13a>
 8022e2c:	b00f      	add	sp, #60	@ 0x3c
 8022e2e:	bc3c      	pop	{r2, r3, r4, r5}
 8022e30:	4690      	mov	r8, r2
 8022e32:	4699      	mov	r9, r3
 8022e34:	46a2      	mov	sl, r4
 8022e36:	46ab      	mov	fp, r5
 8022e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e3a:	2302      	movs	r3, #2
 8022e3c:	2100      	movs	r1, #0
 8022e3e:	0015      	movs	r5, r2
 8022e40:	f000 fb14 	bl	802346c <arm_radix4_butterfly_inverse_q31>
 8022e44:	46bc      	mov	ip, r7
 8022e46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022e48:	002a      	movs	r2, r5
 8022e4a:	0098      	lsls	r0, r3, #2
 8022e4c:	4460      	add	r0, ip
 8022e4e:	2302      	movs	r3, #2
 8022e50:	2100      	movs	r1, #0
 8022e52:	f000 fb0b 	bl	802346c <arm_radix4_butterfly_inverse_q31>
 8022e56:	e7e9      	b.n	8022e2c <arm_cfft_radix4by2_inverse_q31+0x158>

08022e58 <arm_cfft_q31>:
 8022e58:	b570      	push	{r4, r5, r6, lr}
 8022e5a:	001e      	movs	r6, r3
 8022e5c:	2380      	movs	r3, #128	@ 0x80
 8022e5e:	000d      	movs	r5, r1
 8022e60:	0004      	movs	r4, r0
 8022e62:	8801      	ldrh	r1, [r0, #0]
 8022e64:	005b      	lsls	r3, r3, #1
 8022e66:	2a01      	cmp	r2, #1
 8022e68:	d028      	beq.n	8022ebc <arm_cfft_q31+0x64>
 8022e6a:	4299      	cmp	r1, r3
 8022e6c:	d020      	beq.n	8022eb0 <arm_cfft_q31+0x58>
 8022e6e:	d812      	bhi.n	8022e96 <arm_cfft_q31+0x3e>
 8022e70:	2920      	cmp	r1, #32
 8022e72:	d004      	beq.n	8022e7e <arm_cfft_q31+0x26>
 8022e74:	d949      	bls.n	8022f0a <arm_cfft_q31+0xb2>
 8022e76:	2940      	cmp	r1, #64	@ 0x40
 8022e78:	d01a      	beq.n	8022eb0 <arm_cfft_q31+0x58>
 8022e7a:	2980      	cmp	r1, #128	@ 0x80
 8022e7c:	d103      	bne.n	8022e86 <arm_cfft_q31+0x2e>
 8022e7e:	6862      	ldr	r2, [r4, #4]
 8022e80:	0028      	movs	r0, r5
 8022e82:	f7ff fe65 	bl	8022b50 <arm_cfft_radix4by2_q31>
 8022e86:	2e00      	cmp	r6, #0
 8022e88:	d004      	beq.n	8022e94 <arm_cfft_q31+0x3c>
 8022e8a:	68a2      	ldr	r2, [r4, #8]
 8022e8c:	89a1      	ldrh	r1, [r4, #12]
 8022e8e:	0028      	movs	r0, r5
 8022e90:	f7dd f93a 	bl	8000108 <arm_bitreversal_32>
 8022e94:	bd70      	pop	{r4, r5, r6, pc}
 8022e96:	2380      	movs	r3, #128	@ 0x80
 8022e98:	00db      	lsls	r3, r3, #3
 8022e9a:	4299      	cmp	r1, r3
 8022e9c:	d008      	beq.n	8022eb0 <arm_cfft_q31+0x58>
 8022e9e:	d92f      	bls.n	8022f00 <arm_cfft_q31+0xa8>
 8022ea0:	2380      	movs	r3, #128	@ 0x80
 8022ea2:	011b      	lsls	r3, r3, #4
 8022ea4:	4299      	cmp	r1, r3
 8022ea6:	d0ea      	beq.n	8022e7e <arm_cfft_q31+0x26>
 8022ea8:	2380      	movs	r3, #128	@ 0x80
 8022eaa:	015b      	lsls	r3, r3, #5
 8022eac:	4299      	cmp	r1, r3
 8022eae:	d1ea      	bne.n	8022e86 <arm_cfft_q31+0x2e>
 8022eb0:	2301      	movs	r3, #1
 8022eb2:	6862      	ldr	r2, [r4, #4]
 8022eb4:	0028      	movs	r0, r5
 8022eb6:	f000 f833 	bl	8022f20 <arm_radix4_butterfly_q31>
 8022eba:	e7e4      	b.n	8022e86 <arm_cfft_q31+0x2e>
 8022ebc:	4299      	cmp	r1, r3
 8022ebe:	d019      	beq.n	8022ef4 <arm_cfft_q31+0x9c>
 8022ec0:	d80b      	bhi.n	8022eda <arm_cfft_q31+0x82>
 8022ec2:	2920      	cmp	r1, #32
 8022ec4:	d004      	beq.n	8022ed0 <arm_cfft_q31+0x78>
 8022ec6:	d928      	bls.n	8022f1a <arm_cfft_q31+0xc2>
 8022ec8:	2940      	cmp	r1, #64	@ 0x40
 8022eca:	d013      	beq.n	8022ef4 <arm_cfft_q31+0x9c>
 8022ecc:	2980      	cmp	r1, #128	@ 0x80
 8022ece:	d1da      	bne.n	8022e86 <arm_cfft_q31+0x2e>
 8022ed0:	6862      	ldr	r2, [r4, #4]
 8022ed2:	0028      	movs	r0, r5
 8022ed4:	f7ff fefe 	bl	8022cd4 <arm_cfft_radix4by2_inverse_q31>
 8022ed8:	e7d5      	b.n	8022e86 <arm_cfft_q31+0x2e>
 8022eda:	2380      	movs	r3, #128	@ 0x80
 8022edc:	00db      	lsls	r3, r3, #3
 8022ede:	4299      	cmp	r1, r3
 8022ee0:	d008      	beq.n	8022ef4 <arm_cfft_q31+0x9c>
 8022ee2:	d915      	bls.n	8022f10 <arm_cfft_q31+0xb8>
 8022ee4:	2380      	movs	r3, #128	@ 0x80
 8022ee6:	011b      	lsls	r3, r3, #4
 8022ee8:	4299      	cmp	r1, r3
 8022eea:	d0f1      	beq.n	8022ed0 <arm_cfft_q31+0x78>
 8022eec:	2380      	movs	r3, #128	@ 0x80
 8022eee:	015b      	lsls	r3, r3, #5
 8022ef0:	4299      	cmp	r1, r3
 8022ef2:	d1c8      	bne.n	8022e86 <arm_cfft_q31+0x2e>
 8022ef4:	2301      	movs	r3, #1
 8022ef6:	6862      	ldr	r2, [r4, #4]
 8022ef8:	0028      	movs	r0, r5
 8022efa:	f000 fab7 	bl	802346c <arm_radix4_butterfly_inverse_q31>
 8022efe:	e7c2      	b.n	8022e86 <arm_cfft_q31+0x2e>
 8022f00:	2380      	movs	r3, #128	@ 0x80
 8022f02:	009b      	lsls	r3, r3, #2
 8022f04:	4299      	cmp	r1, r3
 8022f06:	d0ba      	beq.n	8022e7e <arm_cfft_q31+0x26>
 8022f08:	e7bd      	b.n	8022e86 <arm_cfft_q31+0x2e>
 8022f0a:	2910      	cmp	r1, #16
 8022f0c:	d1bb      	bne.n	8022e86 <arm_cfft_q31+0x2e>
 8022f0e:	e7cf      	b.n	8022eb0 <arm_cfft_q31+0x58>
 8022f10:	2380      	movs	r3, #128	@ 0x80
 8022f12:	009b      	lsls	r3, r3, #2
 8022f14:	4299      	cmp	r1, r3
 8022f16:	d0db      	beq.n	8022ed0 <arm_cfft_q31+0x78>
 8022f18:	e7b5      	b.n	8022e86 <arm_cfft_q31+0x2e>
 8022f1a:	2910      	cmp	r1, #16
 8022f1c:	d1b3      	bne.n	8022e86 <arm_cfft_q31+0x2e>
 8022f1e:	e7e9      	b.n	8022ef4 <arm_cfft_q31+0x9c>

08022f20 <arm_radix4_butterfly_q31>:
 8022f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f22:	464d      	mov	r5, r9
 8022f24:	4644      	mov	r4, r8
 8022f26:	465f      	mov	r7, fp
 8022f28:	4656      	mov	r6, sl
 8022f2a:	469c      	mov	ip, r3
 8022f2c:	b4f0      	push	{r4, r5, r6, r7}
 8022f2e:	b0a7      	sub	sp, #156	@ 0x9c
 8022f30:	9114      	str	r1, [sp, #80]	@ 0x50
 8022f32:	0889      	lsrs	r1, r1, #2
 8022f34:	9310      	str	r3, [sp, #64]	@ 0x40
 8022f36:	00cb      	lsls	r3, r1, #3
 8022f38:	0015      	movs	r5, r2
 8022f3a:	9223      	str	r2, [sp, #140]	@ 0x8c
 8022f3c:	18c2      	adds	r2, r0, r3
 8022f3e:	000c      	movs	r4, r1
 8022f40:	469a      	mov	sl, r3
 8022f42:	9124      	str	r1, [sp, #144]	@ 0x90
 8022f44:	18d1      	adds	r1, r2, r3
 8022f46:	4663      	mov	r3, ip
 8022f48:	468b      	mov	fp, r1
 8022f4a:	0119      	lsls	r1, r3, #4
 8022f4c:	910d      	str	r1, [sp, #52]	@ 0x34
 8022f4e:	00d9      	lsls	r1, r3, #3
 8022f50:	005b      	lsls	r3, r3, #1
 8022f52:	4463      	add	r3, ip
 8022f54:	910e      	str	r1, [sp, #56]	@ 0x38
 8022f56:	00d9      	lsls	r1, r3, #3
 8022f58:	465b      	mov	r3, fp
 8022f5a:	44da      	add	sl, fp
 8022f5c:	4690      	mov	r8, r2
 8022f5e:	4683      	mov	fp, r0
 8022f60:	4699      	mov	r9, r3
 8022f62:	9022      	str	r0, [sp, #136]	@ 0x88
 8022f64:	9025      	str	r0, [sp, #148]	@ 0x94
 8022f66:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022f68:	9502      	str	r5, [sp, #8]
 8022f6a:	9500      	str	r5, [sp, #0]
 8022f6c:	9501      	str	r5, [sp, #4]
 8022f6e:	9407      	str	r4, [sp, #28]
 8022f70:	465b      	mov	r3, fp
 8022f72:	681b      	ldr	r3, [r3, #0]
 8022f74:	4642      	mov	r2, r8
 8022f76:	111c      	asrs	r4, r3, #4
 8022f78:	464b      	mov	r3, r9
 8022f7a:	4658      	mov	r0, fp
 8022f7c:	681b      	ldr	r3, [r3, #0]
 8022f7e:	6812      	ldr	r2, [r2, #0]
 8022f80:	111b      	asrs	r3, r3, #4
 8022f82:	18e7      	adds	r7, r4, r3
 8022f84:	1ae3      	subs	r3, r4, r3
 8022f86:	1114      	asrs	r4, r2, #4
 8022f88:	4652      	mov	r2, sl
 8022f8a:	6840      	ldr	r0, [r0, #4]
 8022f8c:	6812      	ldr	r2, [r2, #0]
 8022f8e:	1105      	asrs	r5, r0, #4
 8022f90:	4648      	mov	r0, r9
 8022f92:	9303      	str	r3, [sp, #12]
 8022f94:	1113      	asrs	r3, r2, #4
 8022f96:	18e2      	adds	r2, r4, r3
 8022f98:	465c      	mov	r4, fp
 8022f9a:	6840      	ldr	r0, [r0, #4]
 8022f9c:	1103      	asrs	r3, r0, #4
 8022f9e:	18ee      	adds	r6, r5, r3
 8022fa0:	1ae8      	subs	r0, r5, r3
 8022fa2:	18bb      	adds	r3, r7, r2
 8022fa4:	6023      	str	r3, [r4, #0]
 8022fa6:	4644      	mov	r4, r8
 8022fa8:	6864      	ldr	r4, [r4, #4]
 8022faa:	9004      	str	r0, [sp, #16]
 8022fac:	1125      	asrs	r5, r4, #4
 8022fae:	4654      	mov	r4, sl
 8022fb0:	6864      	ldr	r4, [r4, #4]
 8022fb2:	1123      	asrs	r3, r4, #4
 8022fb4:	465c      	mov	r4, fp
 8022fb6:	18eb      	adds	r3, r5, r3
 8022fb8:	18f1      	adds	r1, r6, r3
 8022fba:	6061      	str	r1, [r4, #4]
 8022fbc:	4655      	mov	r5, sl
 8022fbe:	4644      	mov	r4, r8
 8022fc0:	686d      	ldr	r5, [r5, #4]
 8022fc2:	6864      	ldr	r4, [r4, #4]
 8022fc4:	1129      	asrs	r1, r5, #4
 8022fc6:	1124      	asrs	r4, r4, #4
 8022fc8:	1a64      	subs	r4, r4, r1
 8022fca:	4641      	mov	r1, r8
 8022fcc:	6809      	ldr	r1, [r1, #0]
 8022fce:	9405      	str	r4, [sp, #20]
 8022fd0:	1108      	asrs	r0, r1, #4
 8022fd2:	4651      	mov	r1, sl
 8022fd4:	6809      	ldr	r1, [r1, #0]
 8022fd6:	1abc      	subs	r4, r7, r2
 8022fd8:	1109      	asrs	r1, r1, #4
 8022fda:	1a41      	subs	r1, r0, r1
 8022fdc:	17e2      	asrs	r2, r4, #31
 8022fde:	9106      	str	r1, [sp, #24]
 8022fe0:	0011      	movs	r1, r2
 8022fe2:	9a01      	ldr	r2, [sp, #4]
 8022fe4:	9108      	str	r1, [sp, #32]
 8022fe6:	6817      	ldr	r7, [r2, #0]
 8022fe8:	17fd      	asrs	r5, r7, #31
 8022fea:	0028      	movs	r0, r5
 8022fec:	1af5      	subs	r5, r6, r3
 8022fee:	17ee      	asrs	r6, r5, #31
 8022ff0:	960a      	str	r6, [sp, #40]	@ 0x28
 8022ff2:	6856      	ldr	r6, [r2, #4]
 8022ff4:	9009      	str	r0, [sp, #36]	@ 0x24
 8022ff6:	17f3      	asrs	r3, r6, #31
 8022ff8:	003a      	movs	r2, r7
 8022ffa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022ffc:	0003      	movs	r3, r0
 8022ffe:	0020      	movs	r0, r4
 8023000:	f7dd fade 	bl	80005c0 <__aeabi_lmul>
 8023004:	0032      	movs	r2, r6
 8023006:	17f3      	asrs	r3, r6, #31
 8023008:	910c      	str	r1, [sp, #48]	@ 0x30
 802300a:	0028      	movs	r0, r5
 802300c:	17e9      	asrs	r1, r5, #31
 802300e:	f7dd fad7 	bl	80005c0 <__aeabi_lmul>
 8023012:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023014:	002a      	movs	r2, r5
 8023016:	4684      	mov	ip, r0
 8023018:	4640      	mov	r0, r8
 802301a:	4461      	add	r1, ip
 802301c:	0049      	lsls	r1, r1, #1
 802301e:	6001      	str	r1, [r0, #0]
 8023020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023022:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023024:	0038      	movs	r0, r7
 8023026:	f7dd facb 	bl	80005c0 <__aeabi_lmul>
 802302a:	0032      	movs	r2, r6
 802302c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802302e:	000d      	movs	r5, r1
 8023030:	0020      	movs	r0, r4
 8023032:	9908      	ldr	r1, [sp, #32]
 8023034:	f7dd fac4 	bl	80005c0 <__aeabi_lmul>
 8023038:	4646      	mov	r6, r8
 802303a:	1a6d      	subs	r5, r5, r1
 802303c:	006d      	lsls	r5, r5, #1
 802303e:	6075      	str	r5, [r6, #4]
 8023040:	9903      	ldr	r1, [sp, #12]
 8023042:	9d05      	ldr	r5, [sp, #20]
 8023044:	000c      	movs	r4, r1
 8023046:	46ac      	mov	ip, r5
 8023048:	4464      	add	r4, ip
 802304a:	17e6      	asrs	r6, r4, #31
 802304c:	0031      	movs	r1, r6
 802304e:	9b00      	ldr	r3, [sp, #0]
 8023050:	9804      	ldr	r0, [sp, #16]
 8023052:	681e      	ldr	r6, [r3, #0]
 8023054:	17f7      	asrs	r7, r6, #31
 8023056:	9709      	str	r7, [sp, #36]	@ 0x24
 8023058:	9f06      	ldr	r7, [sp, #24]
 802305a:	0032      	movs	r2, r6
 802305c:	1bc7      	subs	r7, r0, r7
 802305e:	17fd      	asrs	r5, r7, #31
 8023060:	950a      	str	r5, [sp, #40]	@ 0x28
 8023062:	685d      	ldr	r5, [r3, #4]
 8023064:	17f3      	asrs	r3, r6, #31
 8023066:	17e8      	asrs	r0, r5, #31
 8023068:	900b      	str	r0, [sp, #44]	@ 0x2c
 802306a:	0020      	movs	r0, r4
 802306c:	9108      	str	r1, [sp, #32]
 802306e:	f7dd faa7 	bl	80005c0 <__aeabi_lmul>
 8023072:	002a      	movs	r2, r5
 8023074:	17eb      	asrs	r3, r5, #31
 8023076:	910c      	str	r1, [sp, #48]	@ 0x30
 8023078:	0038      	movs	r0, r7
 802307a:	17f9      	asrs	r1, r7, #31
 802307c:	f7dd faa0 	bl	80005c0 <__aeabi_lmul>
 8023080:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023082:	003a      	movs	r2, r7
 8023084:	4684      	mov	ip, r0
 8023086:	4648      	mov	r0, r9
 8023088:	4461      	add	r1, ip
 802308a:	0049      	lsls	r1, r1, #1
 802308c:	6001      	str	r1, [r0, #0]
 802308e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023090:	0030      	movs	r0, r6
 8023092:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023094:	f7dd fa94 	bl	80005c0 <__aeabi_lmul>
 8023098:	002a      	movs	r2, r5
 802309a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802309c:	000e      	movs	r6, r1
 802309e:	0020      	movs	r0, r4
 80230a0:	9908      	ldr	r1, [sp, #32]
 80230a2:	f7dd fa8d 	bl	80005c0 <__aeabi_lmul>
 80230a6:	464c      	mov	r4, r9
 80230a8:	9d05      	ldr	r5, [sp, #20]
 80230aa:	1a76      	subs	r6, r6, r1
 80230ac:	9903      	ldr	r1, [sp, #12]
 80230ae:	0076      	lsls	r6, r6, #1
 80230b0:	6066      	str	r6, [r4, #4]
 80230b2:	1b4c      	subs	r4, r1, r5
 80230b4:	9e06      	ldr	r6, [sp, #24]
 80230b6:	17e1      	asrs	r1, r4, #31
 80230b8:	9103      	str	r1, [sp, #12]
 80230ba:	9902      	ldr	r1, [sp, #8]
 80230bc:	46b4      	mov	ip, r6
 80230be:	680f      	ldr	r7, [r1, #0]
 80230c0:	9804      	ldr	r0, [sp, #16]
 80230c2:	17fd      	asrs	r5, r7, #31
 80230c4:	002b      	movs	r3, r5
 80230c6:	684e      	ldr	r6, [r1, #4]
 80230c8:	4460      	add	r0, ip
 80230ca:	0005      	movs	r5, r0
 80230cc:	17c0      	asrs	r0, r0, #31
 80230ce:	9005      	str	r0, [sp, #20]
 80230d0:	17f0      	asrs	r0, r6, #31
 80230d2:	9006      	str	r0, [sp, #24]
 80230d4:	003a      	movs	r2, r7
 80230d6:	0020      	movs	r0, r4
 80230d8:	17e1      	asrs	r1, r4, #31
 80230da:	9304      	str	r3, [sp, #16]
 80230dc:	f7dd fa70 	bl	80005c0 <__aeabi_lmul>
 80230e0:	0032      	movs	r2, r6
 80230e2:	9108      	str	r1, [sp, #32]
 80230e4:	17f3      	asrs	r3, r6, #31
 80230e6:	0028      	movs	r0, r5
 80230e8:	17e9      	asrs	r1, r5, #31
 80230ea:	f7dd fa69 	bl	80005c0 <__aeabi_lmul>
 80230ee:	9808      	ldr	r0, [sp, #32]
 80230f0:	002a      	movs	r2, r5
 80230f2:	4684      	mov	ip, r0
 80230f4:	4650      	mov	r0, sl
 80230f6:	4461      	add	r1, ip
 80230f8:	0049      	lsls	r1, r1, #1
 80230fa:	6001      	str	r1, [r0, #0]
 80230fc:	9b05      	ldr	r3, [sp, #20]
 80230fe:	9904      	ldr	r1, [sp, #16]
 8023100:	0038      	movs	r0, r7
 8023102:	f7dd fa5d 	bl	80005c0 <__aeabi_lmul>
 8023106:	0020      	movs	r0, r4
 8023108:	2408      	movs	r4, #8
 802310a:	000d      	movs	r5, r1
 802310c:	0032      	movs	r2, r6
 802310e:	9b06      	ldr	r3, [sp, #24]
 8023110:	9903      	ldr	r1, [sp, #12]
 8023112:	f7dd fa55 	bl	80005c0 <__aeabi_lmul>
 8023116:	46a4      	mov	ip, r4
 8023118:	4650      	mov	r0, sl
 802311a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802311c:	44e3      	add	fp, ip
 802311e:	44e0      	add	r8, ip
 8023120:	44e1      	add	r9, ip
 8023122:	44e2      	add	sl, ip
 8023124:	46a4      	mov	ip, r4
 8023126:	1a6d      	subs	r5, r5, r1
 8023128:	006d      	lsls	r5, r5, #1
 802312a:	9a01      	ldr	r2, [sp, #4]
 802312c:	6045      	str	r5, [r0, #4]
 802312e:	9807      	ldr	r0, [sp, #28]
 8023130:	4462      	add	r2, ip
 8023132:	3801      	subs	r0, #1
 8023134:	9201      	str	r2, [sp, #4]
 8023136:	9007      	str	r0, [sp, #28]
 8023138:	9b00      	ldr	r3, [sp, #0]
 802313a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802313c:	9902      	ldr	r1, [sp, #8]
 802313e:	4694      	mov	ip, r2
 8023140:	4463      	add	r3, ip
 8023142:	9300      	str	r3, [sp, #0]
 8023144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023146:	469c      	mov	ip, r3
 8023148:	4461      	add	r1, ip
 802314a:	9102      	str	r1, [sp, #8]
 802314c:	2800      	cmp	r0, #0
 802314e:	d000      	beq.n	8023152 <arm_radix4_butterfly_q31+0x232>
 8023150:	e70e      	b.n	8022f70 <arm_radix4_butterfly_q31+0x50>
 8023152:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023154:	009b      	lsls	r3, r3, #2
 8023156:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023158:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802315a:	9320      	str	r3, [sp, #128]	@ 0x80
 802315c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802315e:	2b04      	cmp	r3, #4
 8023160:	d800      	bhi.n	8023164 <arm_radix4_butterfly_q31+0x244>
 8023162:	e180      	b.n	8023466 <arm_radix4_butterfly_q31+0x546>
 8023164:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8023166:	0893      	lsrs	r3, r2, #2
 8023168:	1e59      	subs	r1, r3, #1
 802316a:	9321      	str	r3, [sp, #132]	@ 0x84
 802316c:	00db      	lsls	r3, r3, #3
 802316e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023170:	00d3      	lsls	r3, r2, #3
 8023172:	9300      	str	r3, [sp, #0]
 8023174:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023176:	911a      	str	r1, [sp, #104]	@ 0x68
 8023178:	00da      	lsls	r2, r3, #3
 802317a:	921e      	str	r2, [sp, #120]	@ 0x78
 802317c:	011a      	lsls	r2, r3, #4
 802317e:	921d      	str	r2, [sp, #116]	@ 0x74
 8023180:	001a      	movs	r2, r3
 8023182:	4694      	mov	ip, r2
 8023184:	005b      	lsls	r3, r3, #1
 8023186:	4463      	add	r3, ip
 8023188:	00db      	lsls	r3, r3, #3
 802318a:	931c      	str	r3, [sp, #112]	@ 0x70
 802318c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802318e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023190:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023192:	9318      	str	r3, [sp, #96]	@ 0x60
 8023194:	9319      	str	r3, [sp, #100]	@ 0x64
 8023196:	9316      	str	r3, [sp, #88]	@ 0x58
 8023198:	2300      	movs	r3, #0
 802319a:	9315      	str	r3, [sp, #84]	@ 0x54
 802319c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802319e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80231a0:	681a      	ldr	r2, [r3, #0]
 80231a2:	685b      	ldr	r3, [r3, #4]
 80231a4:	9205      	str	r2, [sp, #20]
 80231a6:	9306      	str	r3, [sp, #24]
 80231a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80231aa:	468c      	mov	ip, r1
 80231ac:	681a      	ldr	r2, [r3, #0]
 80231ae:	685b      	ldr	r3, [r3, #4]
 80231b0:	9207      	str	r2, [sp, #28]
 80231b2:	9308      	str	r3, [sp, #32]
 80231b4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80231b6:	681a      	ldr	r2, [r3, #0]
 80231b8:	685b      	ldr	r3, [r3, #4]
 80231ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80231bc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80231be:	930a      	str	r3, [sp, #40]	@ 0x28
 80231c0:	0013      	movs	r3, r2
 80231c2:	4463      	add	r3, ip
 80231c4:	4698      	mov	r8, r3
 80231c6:	0013      	movs	r3, r2
 80231c8:	4442      	add	r2, r8
 80231ca:	4691      	mov	r9, r2
 80231cc:	001a      	movs	r2, r3
 80231ce:	444a      	add	r2, r9
 80231d0:	4692      	mov	sl, r2
 80231d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80231d4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80231d6:	4293      	cmp	r3, r2
 80231d8:	d800      	bhi.n	80231dc <arm_radix4_butterfly_q31+0x2bc>
 80231da:	e0dd      	b.n	8023398 <arm_radix4_butterfly_q31+0x478>
 80231dc:	4694      	mov	ip, r2
 80231de:	468b      	mov	fp, r1
 80231e0:	4644      	mov	r4, r8
 80231e2:	4655      	mov	r5, sl
 80231e4:	9b07      	ldr	r3, [sp, #28]
 80231e6:	17db      	asrs	r3, r3, #31
 80231e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80231ea:	9b08      	ldr	r3, [sp, #32]
 80231ec:	17db      	asrs	r3, r3, #31
 80231ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80231f0:	9b05      	ldr	r3, [sp, #20]
 80231f2:	17db      	asrs	r3, r3, #31
 80231f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80231f6:	9b06      	ldr	r3, [sp, #24]
 80231f8:	17db      	asrs	r3, r3, #31
 80231fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80231fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80231fe:	17db      	asrs	r3, r3, #31
 8023200:	9310      	str	r3, [sp, #64]	@ 0x40
 8023202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023204:	17db      	asrs	r3, r3, #31
 8023206:	9311      	str	r3, [sp, #68]	@ 0x44
 8023208:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802320a:	4463      	add	r3, ip
 802320c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802320e:	465b      	mov	r3, fp
 8023210:	4659      	mov	r1, fp
 8023212:	681a      	ldr	r2, [r3, #0]
 8023214:	464b      	mov	r3, r9
 8023216:	684f      	ldr	r7, [r1, #4]
 8023218:	4649      	mov	r1, r9
 802321a:	681b      	ldr	r3, [r3, #0]
 802321c:	18d6      	adds	r6, r2, r3
 802321e:	1ad3      	subs	r3, r2, r3
 8023220:	9301      	str	r3, [sp, #4]
 8023222:	684b      	ldr	r3, [r1, #4]
 8023224:	18f8      	adds	r0, r7, r3
 8023226:	1af9      	subs	r1, r7, r3
 8023228:	6827      	ldr	r7, [r4, #0]
 802322a:	9102      	str	r1, [sp, #8]
 802322c:	003a      	movs	r2, r7
 802322e:	682f      	ldr	r7, [r5, #0]
 8023230:	46bc      	mov	ip, r7
 8023232:	465f      	mov	r7, fp
 8023234:	4462      	add	r2, ip
 8023236:	18b3      	adds	r3, r6, r2
 8023238:	109b      	asrs	r3, r3, #2
 802323a:	603b      	str	r3, [r7, #0]
 802323c:	6867      	ldr	r7, [r4, #4]
 802323e:	1ab6      	subs	r6, r6, r2
 8023240:	46b8      	mov	r8, r7
 8023242:	686f      	ldr	r7, [r5, #4]
 8023244:	17f2      	asrs	r2, r6, #31
 8023246:	46bc      	mov	ip, r7
 8023248:	44e0      	add	r8, ip
 802324a:	4643      	mov	r3, r8
 802324c:	465f      	mov	r7, fp
 802324e:	18c1      	adds	r1, r0, r3
 8023250:	1089      	asrs	r1, r1, #2
 8023252:	6079      	str	r1, [r7, #4]
 8023254:	9900      	ldr	r1, [sp, #0]
 8023256:	4690      	mov	r8, r2
 8023258:	468c      	mov	ip, r1
 802325a:	6867      	ldr	r7, [r4, #4]
 802325c:	6869      	ldr	r1, [r5, #4]
 802325e:	44e3      	add	fp, ip
 8023260:	1a7f      	subs	r7, r7, r1
 8023262:	9703      	str	r7, [sp, #12]
 8023264:	6829      	ldr	r1, [r5, #0]
 8023266:	6827      	ldr	r7, [r4, #0]
 8023268:	1a7f      	subs	r7, r7, r1
 802326a:	9704      	str	r7, [sp, #16]
 802326c:	1ac7      	subs	r7, r0, r3
 802326e:	17fa      	asrs	r2, r7, #31
 8023270:	4692      	mov	sl, r2
 8023272:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023274:	9a07      	ldr	r2, [sp, #28]
 8023276:	0030      	movs	r0, r6
 8023278:	4641      	mov	r1, r8
 802327a:	f7dd f9a1 	bl	80005c0 <__aeabi_lmul>
 802327e:	9a08      	ldr	r2, [sp, #32]
 8023280:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023282:	9112      	str	r1, [sp, #72]	@ 0x48
 8023284:	0038      	movs	r0, r7
 8023286:	4651      	mov	r1, sl
 8023288:	f7dd f99a 	bl	80005c0 <__aeabi_lmul>
 802328c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802328e:	9a07      	ldr	r2, [sp, #28]
 8023290:	4684      	mov	ip, r0
 8023292:	4461      	add	r1, ip
 8023294:	1049      	asrs	r1, r1, #1
 8023296:	6021      	str	r1, [r4, #0]
 8023298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802329a:	0038      	movs	r0, r7
 802329c:	4651      	mov	r1, sl
 802329e:	f7dd f98f 	bl	80005c0 <__aeabi_lmul>
 80232a2:	9a08      	ldr	r2, [sp, #32]
 80232a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80232a6:	000f      	movs	r7, r1
 80232a8:	0030      	movs	r0, r6
 80232aa:	4641      	mov	r1, r8
 80232ac:	f7dd f988 	bl	80005c0 <__aeabi_lmul>
 80232b0:	9b00      	ldr	r3, [sp, #0]
 80232b2:	9a01      	ldr	r2, [sp, #4]
 80232b4:	469c      	mov	ip, r3
 80232b6:	9803      	ldr	r0, [sp, #12]
 80232b8:	1a7f      	subs	r7, r7, r1
 80232ba:	107f      	asrs	r7, r7, #1
 80232bc:	6067      	str	r7, [r4, #4]
 80232be:	0016      	movs	r6, r2
 80232c0:	4464      	add	r4, ip
 80232c2:	4684      	mov	ip, r0
 80232c4:	4466      	add	r6, ip
 80232c6:	17f2      	asrs	r2, r6, #31
 80232c8:	4690      	mov	r8, r2
 80232ca:	9902      	ldr	r1, [sp, #8]
 80232cc:	9f04      	ldr	r7, [sp, #16]
 80232ce:	0030      	movs	r0, r6
 80232d0:	1bcf      	subs	r7, r1, r7
 80232d2:	17fa      	asrs	r2, r7, #31
 80232d4:	4692      	mov	sl, r2
 80232d6:	4641      	mov	r1, r8
 80232d8:	9a05      	ldr	r2, [sp, #20]
 80232da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80232dc:	f7dd f970 	bl	80005c0 <__aeabi_lmul>
 80232e0:	9a06      	ldr	r2, [sp, #24]
 80232e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80232e4:	9112      	str	r1, [sp, #72]	@ 0x48
 80232e6:	0038      	movs	r0, r7
 80232e8:	4651      	mov	r1, sl
 80232ea:	f7dd f969 	bl	80005c0 <__aeabi_lmul>
 80232ee:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80232f0:	9a05      	ldr	r2, [sp, #20]
 80232f2:	4684      	mov	ip, r0
 80232f4:	4648      	mov	r0, r9
 80232f6:	4461      	add	r1, ip
 80232f8:	1049      	asrs	r1, r1, #1
 80232fa:	6001      	str	r1, [r0, #0]
 80232fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80232fe:	0038      	movs	r0, r7
 8023300:	4651      	mov	r1, sl
 8023302:	f7dd f95d 	bl	80005c0 <__aeabi_lmul>
 8023306:	9a06      	ldr	r2, [sp, #24]
 8023308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802330a:	000f      	movs	r7, r1
 802330c:	0030      	movs	r0, r6
 802330e:	4641      	mov	r1, r8
 8023310:	f7dd f956 	bl	80005c0 <__aeabi_lmul>
 8023314:	464e      	mov	r6, r9
 8023316:	9a00      	ldr	r2, [sp, #0]
 8023318:	9b01      	ldr	r3, [sp, #4]
 802331a:	4694      	mov	ip, r2
 802331c:	9803      	ldr	r0, [sp, #12]
 802331e:	1a7f      	subs	r7, r7, r1
 8023320:	107f      	asrs	r7, r7, #1
 8023322:	6077      	str	r7, [r6, #4]
 8023324:	1a1e      	subs	r6, r3, r0
 8023326:	9b04      	ldr	r3, [sp, #16]
 8023328:	44e1      	add	r9, ip
 802332a:	469c      	mov	ip, r3
 802332c:	17f0      	asrs	r0, r6, #31
 802332e:	4680      	mov	r8, r0
 8023330:	9902      	ldr	r1, [sp, #8]
 8023332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023334:	4461      	add	r1, ip
 8023336:	17cb      	asrs	r3, r1, #31
 8023338:	000f      	movs	r7, r1
 802333a:	469a      	mov	sl, r3
 802333c:	0030      	movs	r0, r6
 802333e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023340:	4641      	mov	r1, r8
 8023342:	f7dd f93d 	bl	80005c0 <__aeabi_lmul>
 8023346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023348:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802334a:	9101      	str	r1, [sp, #4]
 802334c:	0038      	movs	r0, r7
 802334e:	4651      	mov	r1, sl
 8023350:	f7dd f936 	bl	80005c0 <__aeabi_lmul>
 8023354:	9801      	ldr	r0, [sp, #4]
 8023356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023358:	4684      	mov	ip, r0
 802335a:	4461      	add	r1, ip
 802335c:	1049      	asrs	r1, r1, #1
 802335e:	6029      	str	r1, [r5, #0]
 8023360:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023362:	0038      	movs	r0, r7
 8023364:	4651      	mov	r1, sl
 8023366:	f7dd f92b 	bl	80005c0 <__aeabi_lmul>
 802336a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802336c:	000f      	movs	r7, r1
 802336e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023370:	0030      	movs	r0, r6
 8023372:	4641      	mov	r1, r8
 8023374:	f7dd f924 	bl	80005c0 <__aeabi_lmul>
 8023378:	1a7f      	subs	r7, r7, r1
 802337a:	107f      	asrs	r7, r7, #1
 802337c:	606f      	str	r7, [r5, #4]
 802337e:	9a00      	ldr	r2, [sp, #0]
 8023380:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8023382:	4694      	mov	ip, r2
 8023384:	4465      	add	r5, ip
 8023386:	468c      	mov	ip, r1
 8023388:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802338a:	0013      	movs	r3, r2
 802338c:	4462      	add	r2, ip
 802338e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023390:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023392:	429a      	cmp	r2, r3
 8023394:	d900      	bls.n	8023398 <arm_radix4_butterfly_q31+0x478>
 8023396:	e73a      	b.n	802320e <arm_radix4_butterfly_q31+0x2ee>
 8023398:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802339a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802339c:	468c      	mov	ip, r1
 802339e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80233a0:	4462      	add	r2, ip
 80233a2:	468c      	mov	ip, r1
 80233a4:	9216      	str	r2, [sp, #88]	@ 0x58
 80233a6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80233a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80233aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80233ac:	4462      	add	r2, ip
 80233ae:	468c      	mov	ip, r1
 80233b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80233b2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80233b4:	3301      	adds	r3, #1
 80233b6:	4462      	add	r2, ip
 80233b8:	9218      	str	r2, [sp, #96]	@ 0x60
 80233ba:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80233bc:	9315      	str	r3, [sp, #84]	@ 0x54
 80233be:	3208      	adds	r2, #8
 80233c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80233c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80233c4:	4293      	cmp	r3, r2
 80233c6:	d800      	bhi.n	80233ca <arm_radix4_butterfly_q31+0x4aa>
 80233c8:	e6e8      	b.n	802319c <arm_radix4_butterfly_q31+0x27c>
 80233ca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80233cc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80233ce:	009b      	lsls	r3, r3, #2
 80233d0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80233d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80233d4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80233d6:	089b      	lsrs	r3, r3, #2
 80233d8:	9320      	str	r3, [sp, #128]	@ 0x80
 80233da:	2b04      	cmp	r3, #4
 80233dc:	d900      	bls.n	80233e0 <arm_radix4_butterfly_q31+0x4c0>
 80233de:	e6c1      	b.n	8023164 <arm_radix4_butterfly_q31+0x244>
 80233e0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80233e2:	469a      	mov	sl, r3
 80233e4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80233e6:	691c      	ldr	r4, [r3, #16]
 80233e8:	685a      	ldr	r2, [r3, #4]
 80233ea:	46a1      	mov	r9, r4
 80233ec:	4690      	mov	r8, r2
 80233ee:	6819      	ldr	r1, [r3, #0]
 80233f0:	689a      	ldr	r2, [r3, #8]
 80233f2:	699f      	ldr	r7, [r3, #24]
 80233f4:	188d      	adds	r5, r1, r2
 80233f6:	444d      	add	r5, r9
 80233f8:	19ed      	adds	r5, r5, r7
 80233fa:	69de      	ldr	r6, [r3, #28]
 80233fc:	601d      	str	r5, [r3, #0]
 80233fe:	4645      	mov	r5, r8
 8023400:	46b4      	mov	ip, r6
 8023402:	68d8      	ldr	r0, [r3, #12]
 8023404:	695c      	ldr	r4, [r3, #20]
 8023406:	182d      	adds	r5, r5, r0
 8023408:	192d      	adds	r5, r5, r4
 802340a:	4465      	add	r5, ip
 802340c:	605d      	str	r5, [r3, #4]
 802340e:	1a8d      	subs	r5, r1, r2
 8023410:	444d      	add	r5, r9
 8023412:	1bed      	subs	r5, r5, r7
 8023414:	609d      	str	r5, [r3, #8]
 8023416:	4645      	mov	r5, r8
 8023418:	1a2d      	subs	r5, r5, r0
 802341a:	192d      	adds	r5, r5, r4
 802341c:	1bad      	subs	r5, r5, r6
 802341e:	464e      	mov	r6, r9
 8023420:	60dd      	str	r5, [r3, #12]
 8023422:	180d      	adds	r5, r1, r0
 8023424:	1bad      	subs	r5, r5, r6
 8023426:	4666      	mov	r6, ip
 8023428:	1bad      	subs	r5, r5, r6
 802342a:	611d      	str	r5, [r3, #16]
 802342c:	4645      	mov	r5, r8
 802342e:	1aad      	subs	r5, r5, r2
 8023430:	4442      	add	r2, r8
 8023432:	1b12      	subs	r2, r2, r4
 8023434:	1bd2      	subs	r2, r2, r7
 8023436:	1a08      	subs	r0, r1, r0
 8023438:	61da      	str	r2, [r3, #28]
 802343a:	4649      	mov	r1, r9
 802343c:	2201      	movs	r2, #1
 802343e:	1a41      	subs	r1, r0, r1
 8023440:	4252      	negs	r2, r2
 8023442:	4461      	add	r1, ip
 8023444:	4694      	mov	ip, r2
 8023446:	44e2      	add	sl, ip
 8023448:	4652      	mov	r2, sl
 802344a:	1b2d      	subs	r5, r5, r4
 802344c:	19ed      	adds	r5, r5, r7
 802344e:	615d      	str	r5, [r3, #20]
 8023450:	6199      	str	r1, [r3, #24]
 8023452:	3320      	adds	r3, #32
 8023454:	2a00      	cmp	r2, #0
 8023456:	d1c6      	bne.n	80233e6 <arm_radix4_butterfly_q31+0x4c6>
 8023458:	b027      	add	sp, #156	@ 0x9c
 802345a:	bc3c      	pop	{r2, r3, r4, r5}
 802345c:	4690      	mov	r8, r2
 802345e:	4699      	mov	r9, r3
 8023460:	46a2      	mov	sl, r4
 8023462:	46ab      	mov	fp, r5
 8023464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023466:	469a      	mov	sl, r3
 8023468:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802346a:	e7bc      	b.n	80233e6 <arm_radix4_butterfly_q31+0x4c6>

0802346c <arm_radix4_butterfly_inverse_q31>:
 802346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802346e:	464d      	mov	r5, r9
 8023470:	4644      	mov	r4, r8
 8023472:	465f      	mov	r7, fp
 8023474:	4656      	mov	r6, sl
 8023476:	b4f0      	push	{r4, r5, r6, r7}
 8023478:	b0a7      	sub	sp, #156	@ 0x9c
 802347a:	469c      	mov	ip, r3
 802347c:	9114      	str	r1, [sp, #80]	@ 0x50
 802347e:	0889      	lsrs	r1, r1, #2
 8023480:	9310      	str	r3, [sp, #64]	@ 0x40
 8023482:	00cb      	lsls	r3, r1, #3
 8023484:	0015      	movs	r5, r2
 8023486:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023488:	18c2      	adds	r2, r0, r3
 802348a:	000c      	movs	r4, r1
 802348c:	9124      	str	r1, [sp, #144]	@ 0x90
 802348e:	18d1      	adds	r1, r2, r3
 8023490:	468b      	mov	fp, r1
 8023492:	469a      	mov	sl, r3
 8023494:	4663      	mov	r3, ip
 8023496:	44da      	add	sl, fp
 8023498:	46d0      	mov	r8, sl
 802349a:	4681      	mov	r9, r0
 802349c:	4692      	mov	sl, r2
 802349e:	0119      	lsls	r1, r3, #4
 80234a0:	910d      	str	r1, [sp, #52]	@ 0x34
 80234a2:	00d9      	lsls	r1, r3, #3
 80234a4:	005b      	lsls	r3, r3, #1
 80234a6:	4463      	add	r3, ip
 80234a8:	910e      	str	r1, [sp, #56]	@ 0x38
 80234aa:	00d9      	lsls	r1, r3, #3
 80234ac:	9022      	str	r0, [sp, #136]	@ 0x88
 80234ae:	9025      	str	r0, [sp, #148]	@ 0x94
 80234b0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80234b2:	9502      	str	r5, [sp, #8]
 80234b4:	9500      	str	r5, [sp, #0]
 80234b6:	9501      	str	r5, [sp, #4]
 80234b8:	9409      	str	r4, [sp, #36]	@ 0x24
 80234ba:	464b      	mov	r3, r9
 80234bc:	681b      	ldr	r3, [r3, #0]
 80234be:	4652      	mov	r2, sl
 80234c0:	111c      	asrs	r4, r3, #4
 80234c2:	465b      	mov	r3, fp
 80234c4:	4648      	mov	r0, r9
 80234c6:	681b      	ldr	r3, [r3, #0]
 80234c8:	6812      	ldr	r2, [r2, #0]
 80234ca:	6840      	ldr	r0, [r0, #4]
 80234cc:	111b      	asrs	r3, r3, #4
 80234ce:	18e7      	adds	r7, r4, r3
 80234d0:	1ae3      	subs	r3, r4, r3
 80234d2:	1114      	asrs	r4, r2, #4
 80234d4:	4642      	mov	r2, r8
 80234d6:	1105      	asrs	r5, r0, #4
 80234d8:	4658      	mov	r0, fp
 80234da:	6812      	ldr	r2, [r2, #0]
 80234dc:	6840      	ldr	r0, [r0, #4]
 80234de:	9303      	str	r3, [sp, #12]
 80234e0:	1113      	asrs	r3, r2, #4
 80234e2:	18e2      	adds	r2, r4, r3
 80234e4:	1103      	asrs	r3, r0, #4
 80234e6:	18ee      	adds	r6, r5, r3
 80234e8:	1ae8      	subs	r0, r5, r3
 80234ea:	464d      	mov	r5, r9
 80234ec:	18bb      	adds	r3, r7, r2
 80234ee:	602b      	str	r3, [r5, #0]
 80234f0:	4641      	mov	r1, r8
 80234f2:	4655      	mov	r5, sl
 80234f4:	6849      	ldr	r1, [r1, #4]
 80234f6:	686d      	ldr	r5, [r5, #4]
 80234f8:	110b      	asrs	r3, r1, #4
 80234fa:	112d      	asrs	r5, r5, #4
 80234fc:	18eb      	adds	r3, r5, r3
 80234fe:	464d      	mov	r5, r9
 8023500:	18f1      	adds	r1, r6, r3
 8023502:	6069      	str	r1, [r5, #4]
 8023504:	4655      	mov	r5, sl
 8023506:	686d      	ldr	r5, [r5, #4]
 8023508:	9004      	str	r0, [sp, #16]
 802350a:	112c      	asrs	r4, r5, #4
 802350c:	4645      	mov	r5, r8
 802350e:	686d      	ldr	r5, [r5, #4]
 8023510:	1129      	asrs	r1, r5, #4
 8023512:	1a65      	subs	r5, r4, r1
 8023514:	4651      	mov	r1, sl
 8023516:	6809      	ldr	r1, [r1, #0]
 8023518:	1abc      	subs	r4, r7, r2
 802351a:	1108      	asrs	r0, r1, #4
 802351c:	4641      	mov	r1, r8
 802351e:	17e2      	asrs	r2, r4, #31
 8023520:	6809      	ldr	r1, [r1, #0]
 8023522:	9207      	str	r2, [sp, #28]
 8023524:	9a01      	ldr	r2, [sp, #4]
 8023526:	1109      	asrs	r1, r1, #4
 8023528:	6817      	ldr	r7, [r2, #0]
 802352a:	1a41      	subs	r1, r0, r1
 802352c:	9106      	str	r1, [sp, #24]
 802352e:	0039      	movs	r1, r7
 8023530:	17ff      	asrs	r7, r7, #31
 8023532:	0038      	movs	r0, r7
 8023534:	9505      	str	r5, [sp, #20]
 8023536:	1af5      	subs	r5, r6, r3
 8023538:	17ef      	asrs	r7, r5, #31
 802353a:	970b      	str	r7, [sp, #44]	@ 0x2c
 802353c:	6857      	ldr	r7, [r2, #4]
 802353e:	0003      	movs	r3, r0
 8023540:	17fe      	asrs	r6, r7, #31
 8023542:	000a      	movs	r2, r1
 8023544:	9108      	str	r1, [sp, #32]
 8023546:	900a      	str	r0, [sp, #40]	@ 0x28
 8023548:	17e1      	asrs	r1, r4, #31
 802354a:	0020      	movs	r0, r4
 802354c:	960c      	str	r6, [sp, #48]	@ 0x30
 802354e:	f7dd f837 	bl	80005c0 <__aeabi_lmul>
 8023552:	003a      	movs	r2, r7
 8023554:	17fb      	asrs	r3, r7, #31
 8023556:	000e      	movs	r6, r1
 8023558:	0028      	movs	r0, r5
 802355a:	17e9      	asrs	r1, r5, #31
 802355c:	f7dd f830 	bl	80005c0 <__aeabi_lmul>
 8023560:	4653      	mov	r3, sl
 8023562:	1a76      	subs	r6, r6, r1
 8023564:	0076      	lsls	r6, r6, #1
 8023566:	601e      	str	r6, [r3, #0]
 8023568:	002a      	movs	r2, r5
 802356a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802356c:	9808      	ldr	r0, [sp, #32]
 802356e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023570:	f7dd f826 	bl	80005c0 <__aeabi_lmul>
 8023574:	003a      	movs	r2, r7
 8023576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023578:	000d      	movs	r5, r1
 802357a:	0020      	movs	r0, r4
 802357c:	9907      	ldr	r1, [sp, #28]
 802357e:	f7dd f81f 	bl	80005c0 <__aeabi_lmul>
 8023582:	4657      	mov	r7, sl
 8023584:	186d      	adds	r5, r5, r1
 8023586:	006d      	lsls	r5, r5, #1
 8023588:	607d      	str	r5, [r7, #4]
 802358a:	9b03      	ldr	r3, [sp, #12]
 802358c:	9e06      	ldr	r6, [sp, #24]
 802358e:	9d05      	ldr	r5, [sp, #20]
 8023590:	46b4      	mov	ip, r6
 8023592:	1b5d      	subs	r5, r3, r5
 8023594:	9b00      	ldr	r3, [sp, #0]
 8023596:	17ef      	asrs	r7, r5, #31
 8023598:	0039      	movs	r1, r7
 802359a:	681f      	ldr	r7, [r3, #0]
 802359c:	17fc      	asrs	r4, r7, #31
 802359e:	0020      	movs	r0, r4
 80235a0:	9c04      	ldr	r4, [sp, #16]
 80235a2:	4464      	add	r4, ip
 80235a4:	17e6      	asrs	r6, r4, #31
 80235a6:	9407      	str	r4, [sp, #28]
 80235a8:	9608      	str	r6, [sp, #32]
 80235aa:	685e      	ldr	r6, [r3, #4]
 80235ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 80235ae:	17f2      	asrs	r2, r6, #31
 80235b0:	0003      	movs	r3, r0
 80235b2:	920c      	str	r2, [sp, #48]	@ 0x30
 80235b4:	0028      	movs	r0, r5
 80235b6:	003a      	movs	r2, r7
 80235b8:	910a      	str	r1, [sp, #40]	@ 0x28
 80235ba:	f7dd f801 	bl	80005c0 <__aeabi_lmul>
 80235be:	0032      	movs	r2, r6
 80235c0:	17f3      	asrs	r3, r6, #31
 80235c2:	9807      	ldr	r0, [sp, #28]
 80235c4:	000c      	movs	r4, r1
 80235c6:	9908      	ldr	r1, [sp, #32]
 80235c8:	f7dc fffa 	bl	80005c0 <__aeabi_lmul>
 80235cc:	4658      	mov	r0, fp
 80235ce:	1a64      	subs	r4, r4, r1
 80235d0:	0064      	lsls	r4, r4, #1
 80235d2:	9a07      	ldr	r2, [sp, #28]
 80235d4:	6004      	str	r4, [r0, #0]
 80235d6:	9b08      	ldr	r3, [sp, #32]
 80235d8:	0038      	movs	r0, r7
 80235da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80235dc:	f7dc fff0 	bl	80005c0 <__aeabi_lmul>
 80235e0:	0032      	movs	r2, r6
 80235e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80235e4:	000c      	movs	r4, r1
 80235e6:	0028      	movs	r0, r5
 80235e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80235ea:	f7dc ffe9 	bl	80005c0 <__aeabi_lmul>
 80235ee:	9d05      	ldr	r5, [sp, #20]
 80235f0:	465f      	mov	r7, fp
 80235f2:	46ac      	mov	ip, r5
 80235f4:	1864      	adds	r4, r4, r1
 80235f6:	9903      	ldr	r1, [sp, #12]
 80235f8:	0064      	lsls	r4, r4, #1
 80235fa:	4461      	add	r1, ip
 80235fc:	607c      	str	r4, [r7, #4]
 80235fe:	000c      	movs	r4, r1
 8023600:	17c9      	asrs	r1, r1, #31
 8023602:	9105      	str	r1, [sp, #20]
 8023604:	9902      	ldr	r1, [sp, #8]
 8023606:	9804      	ldr	r0, [sp, #16]
 8023608:	680d      	ldr	r5, [r1, #0]
 802360a:	9e06      	ldr	r6, [sp, #24]
 802360c:	002b      	movs	r3, r5
 802360e:	17ed      	asrs	r5, r5, #31
 8023610:	684f      	ldr	r7, [r1, #4]
 8023612:	9503      	str	r5, [sp, #12]
 8023614:	1b85      	subs	r5, r0, r6
 8023616:	17e8      	asrs	r0, r5, #31
 8023618:	001a      	movs	r2, r3
 802361a:	9006      	str	r0, [sp, #24]
 802361c:	17fe      	asrs	r6, r7, #31
 802361e:	9304      	str	r3, [sp, #16]
 8023620:	0020      	movs	r0, r4
 8023622:	9b03      	ldr	r3, [sp, #12]
 8023624:	17e1      	asrs	r1, r4, #31
 8023626:	9607      	str	r6, [sp, #28]
 8023628:	f7dc ffca 	bl	80005c0 <__aeabi_lmul>
 802362c:	003a      	movs	r2, r7
 802362e:	000e      	movs	r6, r1
 8023630:	17fb      	asrs	r3, r7, #31
 8023632:	0028      	movs	r0, r5
 8023634:	17e9      	asrs	r1, r5, #31
 8023636:	f7dc ffc3 	bl	80005c0 <__aeabi_lmul>
 802363a:	4640      	mov	r0, r8
 802363c:	1a76      	subs	r6, r6, r1
 802363e:	0076      	lsls	r6, r6, #1
 8023640:	002a      	movs	r2, r5
 8023642:	9b06      	ldr	r3, [sp, #24]
 8023644:	6006      	str	r6, [r0, #0]
 8023646:	9903      	ldr	r1, [sp, #12]
 8023648:	9804      	ldr	r0, [sp, #16]
 802364a:	f7dc ffb9 	bl	80005c0 <__aeabi_lmul>
 802364e:	0020      	movs	r0, r4
 8023650:	2408      	movs	r4, #8
 8023652:	9b07      	ldr	r3, [sp, #28]
 8023654:	000d      	movs	r5, r1
 8023656:	003a      	movs	r2, r7
 8023658:	9905      	ldr	r1, [sp, #20]
 802365a:	f7dc ffb1 	bl	80005c0 <__aeabi_lmul>
 802365e:	4640      	mov	r0, r8
 8023660:	46a4      	mov	ip, r4
 8023662:	186d      	adds	r5, r5, r1
 8023664:	006d      	lsls	r5, r5, #1
 8023666:	6045      	str	r5, [r0, #4]
 8023668:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802366a:	44e1      	add	r9, ip
 802366c:	3801      	subs	r0, #1
 802366e:	9009      	str	r0, [sp, #36]	@ 0x24
 8023670:	9a01      	ldr	r2, [sp, #4]
 8023672:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023674:	44e2      	add	sl, ip
 8023676:	44e3      	add	fp, ip
 8023678:	44e0      	add	r8, ip
 802367a:	46a4      	mov	ip, r4
 802367c:	4462      	add	r2, ip
 802367e:	9201      	str	r2, [sp, #4]
 8023680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023682:	9b00      	ldr	r3, [sp, #0]
 8023684:	4694      	mov	ip, r2
 8023686:	4463      	add	r3, ip
 8023688:	9300      	str	r3, [sp, #0]
 802368a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802368c:	9902      	ldr	r1, [sp, #8]
 802368e:	469c      	mov	ip, r3
 8023690:	4461      	add	r1, ip
 8023692:	9102      	str	r1, [sp, #8]
 8023694:	2800      	cmp	r0, #0
 8023696:	d000      	beq.n	802369a <arm_radix4_butterfly_inverse_q31+0x22e>
 8023698:	e70f      	b.n	80234ba <arm_radix4_butterfly_inverse_q31+0x4e>
 802369a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802369c:	009b      	lsls	r3, r3, #2
 802369e:	931f      	str	r3, [sp, #124]	@ 0x7c
 80236a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80236a2:	9320      	str	r3, [sp, #128]	@ 0x80
 80236a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80236a6:	2b04      	cmp	r3, #4
 80236a8:	d800      	bhi.n	80236ac <arm_radix4_butterfly_inverse_q31+0x240>
 80236aa:	e17c      	b.n	80239a6 <arm_radix4_butterfly_inverse_q31+0x53a>
 80236ac:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80236ae:	0893      	lsrs	r3, r2, #2
 80236b0:	1e59      	subs	r1, r3, #1
 80236b2:	9321      	str	r3, [sp, #132]	@ 0x84
 80236b4:	00db      	lsls	r3, r3, #3
 80236b6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80236b8:	00d3      	lsls	r3, r2, #3
 80236ba:	9300      	str	r3, [sp, #0]
 80236bc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80236be:	911a      	str	r1, [sp, #104]	@ 0x68
 80236c0:	00da      	lsls	r2, r3, #3
 80236c2:	921e      	str	r2, [sp, #120]	@ 0x78
 80236c4:	011a      	lsls	r2, r3, #4
 80236c6:	921d      	str	r2, [sp, #116]	@ 0x74
 80236c8:	001a      	movs	r2, r3
 80236ca:	4694      	mov	ip, r2
 80236cc:	005b      	lsls	r3, r3, #1
 80236ce:	4463      	add	r3, ip
 80236d0:	00db      	lsls	r3, r3, #3
 80236d2:	931c      	str	r3, [sp, #112]	@ 0x70
 80236d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80236d6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80236d8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80236da:	9318      	str	r3, [sp, #96]	@ 0x60
 80236dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80236de:	9316      	str	r3, [sp, #88]	@ 0x58
 80236e0:	2300      	movs	r3, #0
 80236e2:	9315      	str	r3, [sp, #84]	@ 0x54
 80236e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80236e6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80236e8:	681a      	ldr	r2, [r3, #0]
 80236ea:	685b      	ldr	r3, [r3, #4]
 80236ec:	9205      	str	r2, [sp, #20]
 80236ee:	9306      	str	r3, [sp, #24]
 80236f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80236f2:	468c      	mov	ip, r1
 80236f4:	681a      	ldr	r2, [r3, #0]
 80236f6:	685b      	ldr	r3, [r3, #4]
 80236f8:	9207      	str	r2, [sp, #28]
 80236fa:	9308      	str	r3, [sp, #32]
 80236fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80236fe:	681a      	ldr	r2, [r3, #0]
 8023700:	685b      	ldr	r3, [r3, #4]
 8023702:	9209      	str	r2, [sp, #36]	@ 0x24
 8023704:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023706:	930a      	str	r3, [sp, #40]	@ 0x28
 8023708:	0013      	movs	r3, r2
 802370a:	4463      	add	r3, ip
 802370c:	4698      	mov	r8, r3
 802370e:	0013      	movs	r3, r2
 8023710:	4442      	add	r2, r8
 8023712:	4691      	mov	r9, r2
 8023714:	001a      	movs	r2, r3
 8023716:	444a      	add	r2, r9
 8023718:	4692      	mov	sl, r2
 802371a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802371c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802371e:	4293      	cmp	r3, r2
 8023720:	d800      	bhi.n	8023724 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8023722:	e0d9      	b.n	80238d8 <arm_radix4_butterfly_inverse_q31+0x46c>
 8023724:	4694      	mov	ip, r2
 8023726:	4644      	mov	r4, r8
 8023728:	4655      	mov	r5, sl
 802372a:	4688      	mov	r8, r1
 802372c:	9b07      	ldr	r3, [sp, #28]
 802372e:	17db      	asrs	r3, r3, #31
 8023730:	930c      	str	r3, [sp, #48]	@ 0x30
 8023732:	9b08      	ldr	r3, [sp, #32]
 8023734:	17db      	asrs	r3, r3, #31
 8023736:	930d      	str	r3, [sp, #52]	@ 0x34
 8023738:	9b05      	ldr	r3, [sp, #20]
 802373a:	17db      	asrs	r3, r3, #31
 802373c:	930e      	str	r3, [sp, #56]	@ 0x38
 802373e:	9b06      	ldr	r3, [sp, #24]
 8023740:	17db      	asrs	r3, r3, #31
 8023742:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023746:	17db      	asrs	r3, r3, #31
 8023748:	9310      	str	r3, [sp, #64]	@ 0x40
 802374a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802374c:	17db      	asrs	r3, r3, #31
 802374e:	9311      	str	r3, [sp, #68]	@ 0x44
 8023750:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023752:	4463      	add	r3, ip
 8023754:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023756:	4643      	mov	r3, r8
 8023758:	4641      	mov	r1, r8
 802375a:	681a      	ldr	r2, [r3, #0]
 802375c:	464b      	mov	r3, r9
 802375e:	684f      	ldr	r7, [r1, #4]
 8023760:	4649      	mov	r1, r9
 8023762:	681b      	ldr	r3, [r3, #0]
 8023764:	18d6      	adds	r6, r2, r3
 8023766:	1ad3      	subs	r3, r2, r3
 8023768:	9301      	str	r3, [sp, #4]
 802376a:	684b      	ldr	r3, [r1, #4]
 802376c:	1af9      	subs	r1, r7, r3
 802376e:	9102      	str	r1, [sp, #8]
 8023770:	6829      	ldr	r1, [r5, #0]
 8023772:	18f8      	adds	r0, r7, r3
 8023774:	468c      	mov	ip, r1
 8023776:	6827      	ldr	r7, [r4, #0]
 8023778:	4467      	add	r7, ip
 802377a:	003a      	movs	r2, r7
 802377c:	19f3      	adds	r3, r6, r7
 802377e:	4647      	mov	r7, r8
 8023780:	109b      	asrs	r3, r3, #2
 8023782:	603b      	str	r3, [r7, #0]
 8023784:	6869      	ldr	r1, [r5, #4]
 8023786:	6867      	ldr	r7, [r4, #4]
 8023788:	468c      	mov	ip, r1
 802378a:	4467      	add	r7, ip
 802378c:	003b      	movs	r3, r7
 802378e:	19c1      	adds	r1, r0, r7
 8023790:	4647      	mov	r7, r8
 8023792:	1ab6      	subs	r6, r6, r2
 8023794:	1089      	asrs	r1, r1, #2
 8023796:	6079      	str	r1, [r7, #4]
 8023798:	17f2      	asrs	r2, r6, #31
 802379a:	9900      	ldr	r1, [sp, #0]
 802379c:	4692      	mov	sl, r2
 802379e:	468c      	mov	ip, r1
 80237a0:	6867      	ldr	r7, [r4, #4]
 80237a2:	6869      	ldr	r1, [r5, #4]
 80237a4:	44e0      	add	r8, ip
 80237a6:	1a7f      	subs	r7, r7, r1
 80237a8:	9703      	str	r7, [sp, #12]
 80237aa:	6821      	ldr	r1, [r4, #0]
 80237ac:	682f      	ldr	r7, [r5, #0]
 80237ae:	1bc9      	subs	r1, r1, r7
 80237b0:	1ac7      	subs	r7, r0, r3
 80237b2:	17fa      	asrs	r2, r7, #31
 80237b4:	4693      	mov	fp, r2
 80237b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80237b8:	9a07      	ldr	r2, [sp, #28]
 80237ba:	9104      	str	r1, [sp, #16]
 80237bc:	0030      	movs	r0, r6
 80237be:	4651      	mov	r1, sl
 80237c0:	f7dc fefe 	bl	80005c0 <__aeabi_lmul>
 80237c4:	9a08      	ldr	r2, [sp, #32]
 80237c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80237c8:	9112      	str	r1, [sp, #72]	@ 0x48
 80237ca:	0038      	movs	r0, r7
 80237cc:	4659      	mov	r1, fp
 80237ce:	f7dc fef7 	bl	80005c0 <__aeabi_lmul>
 80237d2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80237d4:	9a07      	ldr	r2, [sp, #28]
 80237d6:	1a41      	subs	r1, r0, r1
 80237d8:	1049      	asrs	r1, r1, #1
 80237da:	6021      	str	r1, [r4, #0]
 80237dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80237de:	0038      	movs	r0, r7
 80237e0:	4659      	mov	r1, fp
 80237e2:	f7dc feed 	bl	80005c0 <__aeabi_lmul>
 80237e6:	9a08      	ldr	r2, [sp, #32]
 80237e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80237ea:	000f      	movs	r7, r1
 80237ec:	0030      	movs	r0, r6
 80237ee:	4651      	mov	r1, sl
 80237f0:	f7dc fee6 	bl	80005c0 <__aeabi_lmul>
 80237f4:	9b00      	ldr	r3, [sp, #0]
 80237f6:	187f      	adds	r7, r7, r1
 80237f8:	469c      	mov	ip, r3
 80237fa:	107f      	asrs	r7, r7, #1
 80237fc:	6067      	str	r7, [r4, #4]
 80237fe:	9a01      	ldr	r2, [sp, #4]
 8023800:	9f03      	ldr	r7, [sp, #12]
 8023802:	9802      	ldr	r0, [sp, #8]
 8023804:	1bd7      	subs	r7, r2, r7
 8023806:	17fe      	asrs	r6, r7, #31
 8023808:	0031      	movs	r1, r6
 802380a:	9e04      	ldr	r6, [sp, #16]
 802380c:	4682      	mov	sl, r0
 802380e:	4464      	add	r4, ip
 8023810:	46b4      	mov	ip, r6
 8023812:	44e2      	add	sl, ip
 8023814:	4652      	mov	r2, sl
 8023816:	17d2      	asrs	r2, r2, #31
 8023818:	4693      	mov	fp, r2
 802381a:	0038      	movs	r0, r7
 802381c:	9a05      	ldr	r2, [sp, #20]
 802381e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023820:	9112      	str	r1, [sp, #72]	@ 0x48
 8023822:	f7dc fecd 	bl	80005c0 <__aeabi_lmul>
 8023826:	9a06      	ldr	r2, [sp, #24]
 8023828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802382a:	000e      	movs	r6, r1
 802382c:	4650      	mov	r0, sl
 802382e:	4659      	mov	r1, fp
 8023830:	f7dc fec6 	bl	80005c0 <__aeabi_lmul>
 8023834:	4648      	mov	r0, r9
 8023836:	1a76      	subs	r6, r6, r1
 8023838:	1076      	asrs	r6, r6, #1
 802383a:	6006      	str	r6, [r0, #0]
 802383c:	9a05      	ldr	r2, [sp, #20]
 802383e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023840:	4650      	mov	r0, sl
 8023842:	4659      	mov	r1, fp
 8023844:	f7dc febc 	bl	80005c0 <__aeabi_lmul>
 8023848:	9a06      	ldr	r2, [sp, #24]
 802384a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802384c:	000e      	movs	r6, r1
 802384e:	0038      	movs	r0, r7
 8023850:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8023852:	f7dc feb5 	bl	80005c0 <__aeabi_lmul>
 8023856:	9a00      	ldr	r2, [sp, #0]
 8023858:	9f03      	ldr	r7, [sp, #12]
 802385a:	4694      	mov	ip, r2
 802385c:	1876      	adds	r6, r6, r1
 802385e:	4649      	mov	r1, r9
 8023860:	44e1      	add	r9, ip
 8023862:	46bc      	mov	ip, r7
 8023864:	9b01      	ldr	r3, [sp, #4]
 8023866:	1076      	asrs	r6, r6, #1
 8023868:	4463      	add	r3, ip
 802386a:	17df      	asrs	r7, r3, #31
 802386c:	604e      	str	r6, [r1, #4]
 802386e:	46ba      	mov	sl, r7
 8023870:	001e      	movs	r6, r3
 8023872:	9802      	ldr	r0, [sp, #8]
 8023874:	9b04      	ldr	r3, [sp, #16]
 8023876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023878:	1ac7      	subs	r7, r0, r3
 802387a:	17fb      	asrs	r3, r7, #31
 802387c:	469b      	mov	fp, r3
 802387e:	0030      	movs	r0, r6
 8023880:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023882:	4651      	mov	r1, sl
 8023884:	f7dc fe9c 	bl	80005c0 <__aeabi_lmul>
 8023888:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802388a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802388c:	9101      	str	r1, [sp, #4]
 802388e:	0038      	movs	r0, r7
 8023890:	4659      	mov	r1, fp
 8023892:	f7dc fe95 	bl	80005c0 <__aeabi_lmul>
 8023896:	9801      	ldr	r0, [sp, #4]
 8023898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802389a:	1a41      	subs	r1, r0, r1
 802389c:	1049      	asrs	r1, r1, #1
 802389e:	6029      	str	r1, [r5, #0]
 80238a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80238a2:	0038      	movs	r0, r7
 80238a4:	4659      	mov	r1, fp
 80238a6:	f7dc fe8b 	bl	80005c0 <__aeabi_lmul>
 80238aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80238ac:	000f      	movs	r7, r1
 80238ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80238b0:	0030      	movs	r0, r6
 80238b2:	4651      	mov	r1, sl
 80238b4:	f7dc fe84 	bl	80005c0 <__aeabi_lmul>
 80238b8:	187f      	adds	r7, r7, r1
 80238ba:	107f      	asrs	r7, r7, #1
 80238bc:	606f      	str	r7, [r5, #4]
 80238be:	9a00      	ldr	r2, [sp, #0]
 80238c0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80238c2:	4694      	mov	ip, r2
 80238c4:	4465      	add	r5, ip
 80238c6:	468c      	mov	ip, r1
 80238c8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80238ca:	0013      	movs	r3, r2
 80238cc:	4462      	add	r2, ip
 80238ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 80238d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80238d2:	429a      	cmp	r2, r3
 80238d4:	d900      	bls.n	80238d8 <arm_radix4_butterfly_inverse_q31+0x46c>
 80238d6:	e73e      	b.n	8023756 <arm_radix4_butterfly_inverse_q31+0x2ea>
 80238d8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80238da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80238dc:	468c      	mov	ip, r1
 80238de:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80238e0:	4462      	add	r2, ip
 80238e2:	468c      	mov	ip, r1
 80238e4:	9216      	str	r2, [sp, #88]	@ 0x58
 80238e6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80238e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80238ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80238ec:	4462      	add	r2, ip
 80238ee:	468c      	mov	ip, r1
 80238f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80238f2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80238f4:	3301      	adds	r3, #1
 80238f6:	4462      	add	r2, ip
 80238f8:	9218      	str	r2, [sp, #96]	@ 0x60
 80238fa:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80238fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80238fe:	3208      	adds	r2, #8
 8023900:	9217      	str	r2, [sp, #92]	@ 0x5c
 8023902:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023904:	4293      	cmp	r3, r2
 8023906:	d800      	bhi.n	802390a <arm_radix4_butterfly_inverse_q31+0x49e>
 8023908:	e6ec      	b.n	80236e4 <arm_radix4_butterfly_inverse_q31+0x278>
 802390a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802390c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802390e:	009b      	lsls	r3, r3, #2
 8023910:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023912:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023914:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023916:	089b      	lsrs	r3, r3, #2
 8023918:	9320      	str	r3, [sp, #128]	@ 0x80
 802391a:	2b04      	cmp	r3, #4
 802391c:	d900      	bls.n	8023920 <arm_radix4_butterfly_inverse_q31+0x4b4>
 802391e:	e6c5      	b.n	80236ac <arm_radix4_butterfly_inverse_q31+0x240>
 8023920:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023922:	469a      	mov	sl, r3
 8023924:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023926:	681a      	ldr	r2, [r3, #0]
 8023928:	6918      	ldr	r0, [r3, #16]
 802392a:	4691      	mov	r9, r2
 802392c:	464c      	mov	r4, r9
 802392e:	4680      	mov	r8, r0
 8023930:	69de      	ldr	r6, [r3, #28]
 8023932:	689d      	ldr	r5, [r3, #8]
 8023934:	46b4      	mov	ip, r6
 8023936:	6998      	ldr	r0, [r3, #24]
 8023938:	1964      	adds	r4, r4, r5
 802393a:	6859      	ldr	r1, [r3, #4]
 802393c:	68da      	ldr	r2, [r3, #12]
 802393e:	4444      	add	r4, r8
 8023940:	695f      	ldr	r7, [r3, #20]
 8023942:	1824      	adds	r4, r4, r0
 8023944:	601c      	str	r4, [r3, #0]
 8023946:	188c      	adds	r4, r1, r2
 8023948:	19e4      	adds	r4, r4, r7
 802394a:	4464      	add	r4, ip
 802394c:	605c      	str	r4, [r3, #4]
 802394e:	464c      	mov	r4, r9
 8023950:	1b64      	subs	r4, r4, r5
 8023952:	4444      	add	r4, r8
 8023954:	1a24      	subs	r4, r4, r0
 8023956:	609c      	str	r4, [r3, #8]
 8023958:	1a8c      	subs	r4, r1, r2
 802395a:	19e4      	adds	r4, r4, r7
 802395c:	1ba4      	subs	r4, r4, r6
 802395e:	60dc      	str	r4, [r3, #12]
 8023960:	464c      	mov	r4, r9
 8023962:	4646      	mov	r6, r8
 8023964:	1aa4      	subs	r4, r4, r2
 8023966:	1ba4      	subs	r4, r4, r6
 8023968:	4464      	add	r4, ip
 802396a:	611c      	str	r4, [r3, #16]
 802396c:	194c      	adds	r4, r1, r5
 802396e:	1be4      	subs	r4, r4, r7
 8023970:	1a24      	subs	r4, r4, r0
 8023972:	615c      	str	r4, [r3, #20]
 8023974:	4644      	mov	r4, r8
 8023976:	4666      	mov	r6, ip
 8023978:	444a      	add	r2, r9
 802397a:	1b12      	subs	r2, r2, r4
 802397c:	1b92      	subs	r2, r2, r6
 802397e:	619a      	str	r2, [r3, #24]
 8023980:	1b4a      	subs	r2, r1, r5
 8023982:	1bd1      	subs	r1, r2, r7
 8023984:	2201      	movs	r2, #1
 8023986:	4252      	negs	r2, r2
 8023988:	4694      	mov	ip, r2
 802398a:	44e2      	add	sl, ip
 802398c:	4652      	mov	r2, sl
 802398e:	1809      	adds	r1, r1, r0
 8023990:	61d9      	str	r1, [r3, #28]
 8023992:	3320      	adds	r3, #32
 8023994:	2a00      	cmp	r2, #0
 8023996:	d1c6      	bne.n	8023926 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8023998:	b027      	add	sp, #156	@ 0x9c
 802399a:	bc3c      	pop	{r2, r3, r4, r5}
 802399c:	4690      	mov	r8, r2
 802399e:	4699      	mov	r9, r3
 80239a0:	46a2      	mov	sl, r4
 80239a2:	46ab      	mov	fp, r5
 80239a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80239a6:	469a      	mov	sl, r3
 80239a8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80239aa:	e7bc      	b.n	8023926 <arm_radix4_butterfly_inverse_q31+0x4ba>

080239ac <arm_cmplx_mag_squared_q31>:
 80239ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239ae:	464f      	mov	r7, r9
 80239b0:	4646      	mov	r6, r8
 80239b2:	0004      	movs	r4, r0
 80239b4:	b4c0      	push	{r6, r7}
 80239b6:	0016      	movs	r6, r2
 80239b8:	000f      	movs	r7, r1
 80239ba:	2a00      	cmp	r2, #0
 80239bc:	d018      	beq.n	80239f0 <arm_cmplx_mag_squared_q31+0x44>
 80239be:	6823      	ldr	r3, [r4, #0]
 80239c0:	6822      	ldr	r2, [r4, #0]
 80239c2:	17d9      	asrs	r1, r3, #31
 80239c4:	6863      	ldr	r3, [r4, #4]
 80239c6:	0010      	movs	r0, r2
 80239c8:	4698      	mov	r8, r3
 80239ca:	17db      	asrs	r3, r3, #31
 80239cc:	4699      	mov	r9, r3
 80239ce:	000b      	movs	r3, r1
 80239d0:	f7dc fdf6 	bl	80005c0 <__aeabi_lmul>
 80239d4:	4642      	mov	r2, r8
 80239d6:	104d      	asrs	r5, r1, #1
 80239d8:	464b      	mov	r3, r9
 80239da:	4640      	mov	r0, r8
 80239dc:	4649      	mov	r1, r9
 80239de:	f7dc fdef 	bl	80005c0 <__aeabi_lmul>
 80239e2:	1049      	asrs	r1, r1, #1
 80239e4:	1869      	adds	r1, r5, r1
 80239e6:	3e01      	subs	r6, #1
 80239e8:	c702      	stmia	r7!, {r1}
 80239ea:	3408      	adds	r4, #8
 80239ec:	2e00      	cmp	r6, #0
 80239ee:	d1e6      	bne.n	80239be <arm_cmplx_mag_squared_q31+0x12>
 80239f0:	bc0c      	pop	{r2, r3}
 80239f2:	4690      	mov	r8, r2
 80239f4:	4699      	mov	r9, r3
 80239f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080239f8 <arm_mult_q31>:
 80239f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239fa:	4646      	mov	r6, r8
 80239fc:	464f      	mov	r7, r9
 80239fe:	4690      	mov	r8, r2
 8023a00:	b4c0      	push	{r6, r7}
 8023a02:	001d      	movs	r5, r3
 8023a04:	0006      	movs	r6, r0
 8023a06:	000f      	movs	r7, r1
 8023a08:	2400      	movs	r4, #0
 8023a0a:	2b00      	cmp	r3, #0
 8023a0c:	d020      	beq.n	8023a50 <arm_mult_q31+0x58>
 8023a0e:	4b12      	ldr	r3, [pc, #72]	@ (8023a58 <arm_mult_q31+0x60>)
 8023a10:	4699      	mov	r9, r3
 8023a12:	e007      	b.n	8023a24 <arm_mult_q31+0x2c>
 8023a14:	464b      	mov	r3, r9
 8023a16:	4059      	eors	r1, r3
 8023a18:	4643      	mov	r3, r8
 8023a1a:	3d01      	subs	r5, #1
 8023a1c:	5119      	str	r1, [r3, r4]
 8023a1e:	3404      	adds	r4, #4
 8023a20:	2d00      	cmp	r5, #0
 8023a22:	d015      	beq.n	8023a50 <arm_mult_q31+0x58>
 8023a24:	5933      	ldr	r3, [r6, r4]
 8023a26:	593a      	ldr	r2, [r7, r4]
 8023a28:	17d9      	asrs	r1, r3, #31
 8023a2a:	593b      	ldr	r3, [r7, r4]
 8023a2c:	5930      	ldr	r0, [r6, r4]
 8023a2e:	17db      	asrs	r3, r3, #31
 8023a30:	f7dc fdc6 	bl	80005c0 <__aeabi_lmul>
 8023a34:	004b      	lsls	r3, r1, #1
 8023a36:	0fc0      	lsrs	r0, r0, #31
 8023a38:	4318      	orrs	r0, r3
 8023a3a:	17c9      	asrs	r1, r1, #31
 8023a3c:	17c3      	asrs	r3, r0, #31
 8023a3e:	428b      	cmp	r3, r1
 8023a40:	d1e8      	bne.n	8023a14 <arm_mult_q31+0x1c>
 8023a42:	0001      	movs	r1, r0
 8023a44:	4643      	mov	r3, r8
 8023a46:	3d01      	subs	r5, #1
 8023a48:	5119      	str	r1, [r3, r4]
 8023a4a:	3404      	adds	r4, #4
 8023a4c:	2d00      	cmp	r5, #0
 8023a4e:	d1e9      	bne.n	8023a24 <arm_mult_q31+0x2c>
 8023a50:	bc0c      	pop	{r2, r3}
 8023a52:	4690      	mov	r8, r2
 8023a54:	4699      	mov	r9, r3
 8023a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023a58:	7fffffff 	.word	0x7fffffff

08023a5c <arm_add_q31>:
 8023a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a5e:	465f      	mov	r7, fp
 8023a60:	4656      	mov	r6, sl
 8023a62:	464d      	mov	r5, r9
 8023a64:	4644      	mov	r4, r8
 8023a66:	b4f0      	push	{r4, r5, r6, r7}
 8023a68:	4693      	mov	fp, r2
 8023a6a:	b083      	sub	sp, #12
 8023a6c:	4681      	mov	r9, r0
 8023a6e:	468a      	mov	sl, r1
 8023a70:	4698      	mov	r8, r3
 8023a72:	2200      	movs	r2, #0
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	d020      	beq.n	8023aba <arm_add_q31+0x5e>
 8023a78:	4649      	mov	r1, r9
 8023a7a:	4653      	mov	r3, sl
 8023a7c:	588e      	ldr	r6, [r1, r2]
 8023a7e:	589b      	ldr	r3, [r3, r2]
 8023a80:	17f7      	asrs	r7, r6, #31
 8023a82:	001c      	movs	r4, r3
 8023a84:	0030      	movs	r0, r6
 8023a86:	0039      	movs	r1, r7
 8023a88:	17dd      	asrs	r5, r3, #31
 8023a8a:	46b4      	mov	ip, r6
 8023a8c:	1900      	adds	r0, r0, r4
 8023a8e:	4169      	adcs	r1, r5
 8023a90:	4463      	add	r3, ip
 8023a92:	9000      	str	r0, [sp, #0]
 8023a94:	9101      	str	r1, [sp, #4]
 8023a96:	17d9      	asrs	r1, r3, #31
 8023a98:	468c      	mov	ip, r1
 8023a9a:	9901      	ldr	r1, [sp, #4]
 8023a9c:	458c      	cmp	ip, r1
 8023a9e:	d002      	beq.n	8023aa6 <arm_add_q31+0x4a>
 8023aa0:	17cb      	asrs	r3, r1, #31
 8023aa2:	4909      	ldr	r1, [pc, #36]	@ (8023ac8 <arm_add_q31+0x6c>)
 8023aa4:	404b      	eors	r3, r1
 8023aa6:	4659      	mov	r1, fp
 8023aa8:	508b      	str	r3, [r1, r2]
 8023aaa:	2301      	movs	r3, #1
 8023aac:	425b      	negs	r3, r3
 8023aae:	469c      	mov	ip, r3
 8023ab0:	44e0      	add	r8, ip
 8023ab2:	4643      	mov	r3, r8
 8023ab4:	3204      	adds	r2, #4
 8023ab6:	2b00      	cmp	r3, #0
 8023ab8:	d1de      	bne.n	8023a78 <arm_add_q31+0x1c>
 8023aba:	b003      	add	sp, #12
 8023abc:	bc3c      	pop	{r2, r3, r4, r5}
 8023abe:	4690      	mov	r8, r2
 8023ac0:	4699      	mov	r9, r3
 8023ac2:	46a2      	mov	sl, r4
 8023ac4:	46ab      	mov	fp, r5
 8023ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ac8:	7fffffff 	.word	0x7fffffff

08023acc <atof>:
 8023acc:	b510      	push	{r4, lr}
 8023ace:	2100      	movs	r1, #0
 8023ad0:	f000 fe1e 	bl	8024710 <strtod>
 8023ad4:	bd10      	pop	{r4, pc}

08023ad6 <atoi>:
 8023ad6:	b510      	push	{r4, lr}
 8023ad8:	220a      	movs	r2, #10
 8023ada:	2100      	movs	r1, #0
 8023adc:	f000 feb0 	bl	8024840 <strtol>
 8023ae0:	bd10      	pop	{r4, pc}
	...

08023ae4 <sulp>:
 8023ae4:	b570      	push	{r4, r5, r6, lr}
 8023ae6:	0016      	movs	r6, r2
 8023ae8:	000d      	movs	r5, r1
 8023aea:	f003 fd0f 	bl	802750c <__ulp>
 8023aee:	2e00      	cmp	r6, #0
 8023af0:	d00d      	beq.n	8023b0e <sulp+0x2a>
 8023af2:	236b      	movs	r3, #107	@ 0x6b
 8023af4:	006a      	lsls	r2, r5, #1
 8023af6:	0d52      	lsrs	r2, r2, #21
 8023af8:	1a9b      	subs	r3, r3, r2
 8023afa:	2b00      	cmp	r3, #0
 8023afc:	dd07      	ble.n	8023b0e <sulp+0x2a>
 8023afe:	2400      	movs	r4, #0
 8023b00:	4a03      	ldr	r2, [pc, #12]	@ (8023b10 <sulp+0x2c>)
 8023b02:	051b      	lsls	r3, r3, #20
 8023b04:	189d      	adds	r5, r3, r2
 8023b06:	002b      	movs	r3, r5
 8023b08:	0022      	movs	r2, r4
 8023b0a:	f7de ff23 	bl	8002954 <__aeabi_dmul>
 8023b0e:	bd70      	pop	{r4, r5, r6, pc}
 8023b10:	3ff00000 	.word	0x3ff00000

08023b14 <_strtod_l>:
 8023b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b16:	b0a3      	sub	sp, #140	@ 0x8c
 8023b18:	921b      	str	r2, [sp, #108]	@ 0x6c
 8023b1a:	2200      	movs	r2, #0
 8023b1c:	2600      	movs	r6, #0
 8023b1e:	2700      	movs	r7, #0
 8023b20:	9005      	str	r0, [sp, #20]
 8023b22:	9109      	str	r1, [sp, #36]	@ 0x24
 8023b24:	921e      	str	r2, [sp, #120]	@ 0x78
 8023b26:	911d      	str	r1, [sp, #116]	@ 0x74
 8023b28:	780a      	ldrb	r2, [r1, #0]
 8023b2a:	2a2b      	cmp	r2, #43	@ 0x2b
 8023b2c:	d053      	beq.n	8023bd6 <_strtod_l+0xc2>
 8023b2e:	d83f      	bhi.n	8023bb0 <_strtod_l+0x9c>
 8023b30:	2a0d      	cmp	r2, #13
 8023b32:	d839      	bhi.n	8023ba8 <_strtod_l+0x94>
 8023b34:	2a08      	cmp	r2, #8
 8023b36:	d839      	bhi.n	8023bac <_strtod_l+0x98>
 8023b38:	2a00      	cmp	r2, #0
 8023b3a:	d042      	beq.n	8023bc2 <_strtod_l+0xae>
 8023b3c:	2200      	movs	r2, #0
 8023b3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8023b40:	2100      	movs	r1, #0
 8023b42:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8023b44:	910c      	str	r1, [sp, #48]	@ 0x30
 8023b46:	782a      	ldrb	r2, [r5, #0]
 8023b48:	2a30      	cmp	r2, #48	@ 0x30
 8023b4a:	d000      	beq.n	8023b4e <_strtod_l+0x3a>
 8023b4c:	e083      	b.n	8023c56 <_strtod_l+0x142>
 8023b4e:	786a      	ldrb	r2, [r5, #1]
 8023b50:	3120      	adds	r1, #32
 8023b52:	438a      	bics	r2, r1
 8023b54:	2a58      	cmp	r2, #88	@ 0x58
 8023b56:	d000      	beq.n	8023b5a <_strtod_l+0x46>
 8023b58:	e073      	b.n	8023c42 <_strtod_l+0x12e>
 8023b5a:	9302      	str	r3, [sp, #8]
 8023b5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023b5e:	4a9b      	ldr	r2, [pc, #620]	@ (8023dcc <_strtod_l+0x2b8>)
 8023b60:	9301      	str	r3, [sp, #4]
 8023b62:	ab1e      	add	r3, sp, #120	@ 0x78
 8023b64:	9300      	str	r3, [sp, #0]
 8023b66:	9805      	ldr	r0, [sp, #20]
 8023b68:	ab1f      	add	r3, sp, #124	@ 0x7c
 8023b6a:	a91d      	add	r1, sp, #116	@ 0x74
 8023b6c:	f002 fd86 	bl	802667c <__gethex>
 8023b70:	230f      	movs	r3, #15
 8023b72:	0002      	movs	r2, r0
 8023b74:	401a      	ands	r2, r3
 8023b76:	0004      	movs	r4, r0
 8023b78:	9206      	str	r2, [sp, #24]
 8023b7a:	4218      	tst	r0, r3
 8023b7c:	d005      	beq.n	8023b8a <_strtod_l+0x76>
 8023b7e:	2a06      	cmp	r2, #6
 8023b80:	d12b      	bne.n	8023bda <_strtod_l+0xc6>
 8023b82:	2300      	movs	r3, #0
 8023b84:	3501      	adds	r5, #1
 8023b86:	951d      	str	r5, [sp, #116]	@ 0x74
 8023b88:	9312      	str	r3, [sp, #72]	@ 0x48
 8023b8a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023b8c:	2b00      	cmp	r3, #0
 8023b8e:	d002      	beq.n	8023b96 <_strtod_l+0x82>
 8023b90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023b92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023b94:	6013      	str	r3, [r2, #0]
 8023b96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023b98:	2b00      	cmp	r3, #0
 8023b9a:	d019      	beq.n	8023bd0 <_strtod_l+0xbc>
 8023b9c:	2380      	movs	r3, #128	@ 0x80
 8023b9e:	0030      	movs	r0, r6
 8023ba0:	061b      	lsls	r3, r3, #24
 8023ba2:	18f9      	adds	r1, r7, r3
 8023ba4:	b023      	add	sp, #140	@ 0x8c
 8023ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ba8:	2a20      	cmp	r2, #32
 8023baa:	d1c7      	bne.n	8023b3c <_strtod_l+0x28>
 8023bac:	3101      	adds	r1, #1
 8023bae:	e7ba      	b.n	8023b26 <_strtod_l+0x12>
 8023bb0:	2a2d      	cmp	r2, #45	@ 0x2d
 8023bb2:	d1c3      	bne.n	8023b3c <_strtod_l+0x28>
 8023bb4:	3a2c      	subs	r2, #44	@ 0x2c
 8023bb6:	9212      	str	r2, [sp, #72]	@ 0x48
 8023bb8:	1c4a      	adds	r2, r1, #1
 8023bba:	921d      	str	r2, [sp, #116]	@ 0x74
 8023bbc:	784a      	ldrb	r2, [r1, #1]
 8023bbe:	2a00      	cmp	r2, #0
 8023bc0:	d1be      	bne.n	8023b40 <_strtod_l+0x2c>
 8023bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023bc4:	931d      	str	r3, [sp, #116]	@ 0x74
 8023bc6:	2300      	movs	r3, #0
 8023bc8:	9312      	str	r3, [sp, #72]	@ 0x48
 8023bca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023bcc:	2b00      	cmp	r3, #0
 8023bce:	d1df      	bne.n	8023b90 <_strtod_l+0x7c>
 8023bd0:	0030      	movs	r0, r6
 8023bd2:	0039      	movs	r1, r7
 8023bd4:	e7e6      	b.n	8023ba4 <_strtod_l+0x90>
 8023bd6:	2200      	movs	r2, #0
 8023bd8:	e7ed      	b.n	8023bb6 <_strtod_l+0xa2>
 8023bda:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023bdc:	2a00      	cmp	r2, #0
 8023bde:	d007      	beq.n	8023bf0 <_strtod_l+0xdc>
 8023be0:	2135      	movs	r1, #53	@ 0x35
 8023be2:	a820      	add	r0, sp, #128	@ 0x80
 8023be4:	f003 fd88 	bl	80276f8 <__copybits>
 8023be8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023bea:	9805      	ldr	r0, [sp, #20]
 8023bec:	f003 f94a 	bl	8026e84 <_Bfree>
 8023bf0:	9806      	ldr	r0, [sp, #24]
 8023bf2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023bf4:	3801      	subs	r0, #1
 8023bf6:	2804      	cmp	r0, #4
 8023bf8:	d806      	bhi.n	8023c08 <_strtod_l+0xf4>
 8023bfa:	f7dc fabf 	bl	800017c <__gnu_thumb1_case_uqi>
 8023bfe:	0312      	.short	0x0312
 8023c00:	1e1c      	.short	0x1e1c
 8023c02:	12          	.byte	0x12
 8023c03:	00          	.byte	0x00
 8023c04:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023c06:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8023c08:	05e4      	lsls	r4, r4, #23
 8023c0a:	d502      	bpl.n	8023c12 <_strtod_l+0xfe>
 8023c0c:	2380      	movs	r3, #128	@ 0x80
 8023c0e:	061b      	lsls	r3, r3, #24
 8023c10:	431f      	orrs	r7, r3
 8023c12:	4b6f      	ldr	r3, [pc, #444]	@ (8023dd0 <_strtod_l+0x2bc>)
 8023c14:	423b      	tst	r3, r7
 8023c16:	d1b8      	bne.n	8023b8a <_strtod_l+0x76>
 8023c18:	f001 fdc0 	bl	802579c <__errno>
 8023c1c:	2322      	movs	r3, #34	@ 0x22
 8023c1e:	6003      	str	r3, [r0, #0]
 8023c20:	e7b3      	b.n	8023b8a <_strtod_l+0x76>
 8023c22:	496c      	ldr	r1, [pc, #432]	@ (8023dd4 <_strtod_l+0x2c0>)
 8023c24:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023c26:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023c28:	400a      	ands	r2, r1
 8023c2a:	496b      	ldr	r1, [pc, #428]	@ (8023dd8 <_strtod_l+0x2c4>)
 8023c2c:	185b      	adds	r3, r3, r1
 8023c2e:	051b      	lsls	r3, r3, #20
 8023c30:	431a      	orrs	r2, r3
 8023c32:	0017      	movs	r7, r2
 8023c34:	e7e8      	b.n	8023c08 <_strtod_l+0xf4>
 8023c36:	4f66      	ldr	r7, [pc, #408]	@ (8023dd0 <_strtod_l+0x2bc>)
 8023c38:	e7e6      	b.n	8023c08 <_strtod_l+0xf4>
 8023c3a:	2601      	movs	r6, #1
 8023c3c:	4f67      	ldr	r7, [pc, #412]	@ (8023ddc <_strtod_l+0x2c8>)
 8023c3e:	4276      	negs	r6, r6
 8023c40:	e7e2      	b.n	8023c08 <_strtod_l+0xf4>
 8023c42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023c44:	1c5a      	adds	r2, r3, #1
 8023c46:	921d      	str	r2, [sp, #116]	@ 0x74
 8023c48:	785b      	ldrb	r3, [r3, #1]
 8023c4a:	2b30      	cmp	r3, #48	@ 0x30
 8023c4c:	d0f9      	beq.n	8023c42 <_strtod_l+0x12e>
 8023c4e:	2b00      	cmp	r3, #0
 8023c50:	d09b      	beq.n	8023b8a <_strtod_l+0x76>
 8023c52:	2301      	movs	r3, #1
 8023c54:	930c      	str	r3, [sp, #48]	@ 0x30
 8023c56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023c58:	220a      	movs	r2, #10
 8023c5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023c5c:	2300      	movs	r3, #0
 8023c5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023c60:	930d      	str	r3, [sp, #52]	@ 0x34
 8023c62:	9308      	str	r3, [sp, #32]
 8023c64:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8023c66:	7804      	ldrb	r4, [r0, #0]
 8023c68:	0023      	movs	r3, r4
 8023c6a:	3b30      	subs	r3, #48	@ 0x30
 8023c6c:	b2d9      	uxtb	r1, r3
 8023c6e:	2909      	cmp	r1, #9
 8023c70:	d927      	bls.n	8023cc2 <_strtod_l+0x1ae>
 8023c72:	2201      	movs	r2, #1
 8023c74:	495a      	ldr	r1, [pc, #360]	@ (8023de0 <_strtod_l+0x2cc>)
 8023c76:	f001 fd03 	bl	8025680 <strncmp>
 8023c7a:	2800      	cmp	r0, #0
 8023c7c:	d033      	beq.n	8023ce6 <_strtod_l+0x1d2>
 8023c7e:	2000      	movs	r0, #0
 8023c80:	0023      	movs	r3, r4
 8023c82:	4684      	mov	ip, r0
 8023c84:	9a08      	ldr	r2, [sp, #32]
 8023c86:	900e      	str	r0, [sp, #56]	@ 0x38
 8023c88:	9206      	str	r2, [sp, #24]
 8023c8a:	2220      	movs	r2, #32
 8023c8c:	0019      	movs	r1, r3
 8023c8e:	4391      	bics	r1, r2
 8023c90:	000a      	movs	r2, r1
 8023c92:	2100      	movs	r1, #0
 8023c94:	9107      	str	r1, [sp, #28]
 8023c96:	2a45      	cmp	r2, #69	@ 0x45
 8023c98:	d000      	beq.n	8023c9c <_strtod_l+0x188>
 8023c9a:	e0cb      	b.n	8023e34 <_strtod_l+0x320>
 8023c9c:	9b06      	ldr	r3, [sp, #24]
 8023c9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023ca0:	4303      	orrs	r3, r0
 8023ca2:	4313      	orrs	r3, r2
 8023ca4:	428b      	cmp	r3, r1
 8023ca6:	d08c      	beq.n	8023bc2 <_strtod_l+0xae>
 8023ca8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8023cac:	3301      	adds	r3, #1
 8023cae:	931d      	str	r3, [sp, #116]	@ 0x74
 8023cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023cb2:	785b      	ldrb	r3, [r3, #1]
 8023cb4:	2b2b      	cmp	r3, #43	@ 0x2b
 8023cb6:	d07b      	beq.n	8023db0 <_strtod_l+0x29c>
 8023cb8:	000c      	movs	r4, r1
 8023cba:	2b2d      	cmp	r3, #45	@ 0x2d
 8023cbc:	d17e      	bne.n	8023dbc <_strtod_l+0x2a8>
 8023cbe:	2401      	movs	r4, #1
 8023cc0:	e077      	b.n	8023db2 <_strtod_l+0x29e>
 8023cc2:	9908      	ldr	r1, [sp, #32]
 8023cc4:	2908      	cmp	r1, #8
 8023cc6:	dc09      	bgt.n	8023cdc <_strtod_l+0x1c8>
 8023cc8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023cca:	4351      	muls	r1, r2
 8023ccc:	185b      	adds	r3, r3, r1
 8023cce:	930d      	str	r3, [sp, #52]	@ 0x34
 8023cd0:	9b08      	ldr	r3, [sp, #32]
 8023cd2:	3001      	adds	r0, #1
 8023cd4:	3301      	adds	r3, #1
 8023cd6:	9308      	str	r3, [sp, #32]
 8023cd8:	901d      	str	r0, [sp, #116]	@ 0x74
 8023cda:	e7c3      	b.n	8023c64 <_strtod_l+0x150>
 8023cdc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023cde:	4355      	muls	r5, r2
 8023ce0:	195b      	adds	r3, r3, r5
 8023ce2:	9310      	str	r3, [sp, #64]	@ 0x40
 8023ce4:	e7f4      	b.n	8023cd0 <_strtod_l+0x1bc>
 8023ce6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023ce8:	1c5a      	adds	r2, r3, #1
 8023cea:	921d      	str	r2, [sp, #116]	@ 0x74
 8023cec:	9a08      	ldr	r2, [sp, #32]
 8023cee:	785b      	ldrb	r3, [r3, #1]
 8023cf0:	2a00      	cmp	r2, #0
 8023cf2:	d03e      	beq.n	8023d72 <_strtod_l+0x25e>
 8023cf4:	900e      	str	r0, [sp, #56]	@ 0x38
 8023cf6:	9206      	str	r2, [sp, #24]
 8023cf8:	001a      	movs	r2, r3
 8023cfa:	3a30      	subs	r2, #48	@ 0x30
 8023cfc:	2a09      	cmp	r2, #9
 8023cfe:	d912      	bls.n	8023d26 <_strtod_l+0x212>
 8023d00:	2201      	movs	r2, #1
 8023d02:	4694      	mov	ip, r2
 8023d04:	e7c1      	b.n	8023c8a <_strtod_l+0x176>
 8023d06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023d08:	3001      	adds	r0, #1
 8023d0a:	1c5a      	adds	r2, r3, #1
 8023d0c:	921d      	str	r2, [sp, #116]	@ 0x74
 8023d0e:	785b      	ldrb	r3, [r3, #1]
 8023d10:	2b30      	cmp	r3, #48	@ 0x30
 8023d12:	d0f8      	beq.n	8023d06 <_strtod_l+0x1f2>
 8023d14:	001a      	movs	r2, r3
 8023d16:	3a31      	subs	r2, #49	@ 0x31
 8023d18:	2a08      	cmp	r2, #8
 8023d1a:	d844      	bhi.n	8023da6 <_strtod_l+0x292>
 8023d1c:	900e      	str	r0, [sp, #56]	@ 0x38
 8023d1e:	2000      	movs	r0, #0
 8023d20:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023d22:	9006      	str	r0, [sp, #24]
 8023d24:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023d26:	001c      	movs	r4, r3
 8023d28:	1c42      	adds	r2, r0, #1
 8023d2a:	3c30      	subs	r4, #48	@ 0x30
 8023d2c:	2b30      	cmp	r3, #48	@ 0x30
 8023d2e:	d01a      	beq.n	8023d66 <_strtod_l+0x252>
 8023d30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023d32:	9906      	ldr	r1, [sp, #24]
 8023d34:	189b      	adds	r3, r3, r2
 8023d36:	930e      	str	r3, [sp, #56]	@ 0x38
 8023d38:	230a      	movs	r3, #10
 8023d3a:	469c      	mov	ip, r3
 8023d3c:	9d06      	ldr	r5, [sp, #24]
 8023d3e:	1c4b      	adds	r3, r1, #1
 8023d40:	1b5d      	subs	r5, r3, r5
 8023d42:	42aa      	cmp	r2, r5
 8023d44:	dc17      	bgt.n	8023d76 <_strtod_l+0x262>
 8023d46:	43c3      	mvns	r3, r0
 8023d48:	9a06      	ldr	r2, [sp, #24]
 8023d4a:	17db      	asrs	r3, r3, #31
 8023d4c:	4003      	ands	r3, r0
 8023d4e:	18d1      	adds	r1, r2, r3
 8023d50:	3201      	adds	r2, #1
 8023d52:	18d3      	adds	r3, r2, r3
 8023d54:	9306      	str	r3, [sp, #24]
 8023d56:	2908      	cmp	r1, #8
 8023d58:	dc1c      	bgt.n	8023d94 <_strtod_l+0x280>
 8023d5a:	230a      	movs	r3, #10
 8023d5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023d5e:	4353      	muls	r3, r2
 8023d60:	2200      	movs	r2, #0
 8023d62:	18e3      	adds	r3, r4, r3
 8023d64:	930d      	str	r3, [sp, #52]	@ 0x34
 8023d66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023d68:	0010      	movs	r0, r2
 8023d6a:	1c59      	adds	r1, r3, #1
 8023d6c:	911d      	str	r1, [sp, #116]	@ 0x74
 8023d6e:	785b      	ldrb	r3, [r3, #1]
 8023d70:	e7c2      	b.n	8023cf8 <_strtod_l+0x1e4>
 8023d72:	9808      	ldr	r0, [sp, #32]
 8023d74:	e7cc      	b.n	8023d10 <_strtod_l+0x1fc>
 8023d76:	2908      	cmp	r1, #8
 8023d78:	dc05      	bgt.n	8023d86 <_strtod_l+0x272>
 8023d7a:	4665      	mov	r5, ip
 8023d7c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023d7e:	4369      	muls	r1, r5
 8023d80:	910d      	str	r1, [sp, #52]	@ 0x34
 8023d82:	0019      	movs	r1, r3
 8023d84:	e7da      	b.n	8023d3c <_strtod_l+0x228>
 8023d86:	2b10      	cmp	r3, #16
 8023d88:	dcfb      	bgt.n	8023d82 <_strtod_l+0x26e>
 8023d8a:	4661      	mov	r1, ip
 8023d8c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023d8e:	434d      	muls	r5, r1
 8023d90:	9510      	str	r5, [sp, #64]	@ 0x40
 8023d92:	e7f6      	b.n	8023d82 <_strtod_l+0x26e>
 8023d94:	2200      	movs	r2, #0
 8023d96:	290f      	cmp	r1, #15
 8023d98:	dce5      	bgt.n	8023d66 <_strtod_l+0x252>
 8023d9a:	230a      	movs	r3, #10
 8023d9c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023d9e:	435d      	muls	r5, r3
 8023da0:	1963      	adds	r3, r4, r5
 8023da2:	9310      	str	r3, [sp, #64]	@ 0x40
 8023da4:	e7df      	b.n	8023d66 <_strtod_l+0x252>
 8023da6:	2200      	movs	r2, #0
 8023da8:	920e      	str	r2, [sp, #56]	@ 0x38
 8023daa:	9206      	str	r2, [sp, #24]
 8023dac:	3201      	adds	r2, #1
 8023dae:	e7a8      	b.n	8023d02 <_strtod_l+0x1ee>
 8023db0:	2400      	movs	r4, #0
 8023db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023db4:	3302      	adds	r3, #2
 8023db6:	931d      	str	r3, [sp, #116]	@ 0x74
 8023db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023dba:	789b      	ldrb	r3, [r3, #2]
 8023dbc:	001a      	movs	r2, r3
 8023dbe:	3a30      	subs	r2, #48	@ 0x30
 8023dc0:	2a09      	cmp	r2, #9
 8023dc2:	d913      	bls.n	8023dec <_strtod_l+0x2d8>
 8023dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023dc6:	921d      	str	r2, [sp, #116]	@ 0x74
 8023dc8:	2200      	movs	r2, #0
 8023dca:	e032      	b.n	8023e32 <_strtod_l+0x31e>
 8023dcc:	0802e1b8 	.word	0x0802e1b8
 8023dd0:	7ff00000 	.word	0x7ff00000
 8023dd4:	ffefffff 	.word	0xffefffff
 8023dd8:	00000433 	.word	0x00000433
 8023ddc:	7fffffff 	.word	0x7fffffff
 8023de0:	0802dfd0 	.word	0x0802dfd0
 8023de4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023de6:	1c5a      	adds	r2, r3, #1
 8023de8:	921d      	str	r2, [sp, #116]	@ 0x74
 8023dea:	785b      	ldrb	r3, [r3, #1]
 8023dec:	2b30      	cmp	r3, #48	@ 0x30
 8023dee:	d0f9      	beq.n	8023de4 <_strtod_l+0x2d0>
 8023df0:	2200      	movs	r2, #0
 8023df2:	9207      	str	r2, [sp, #28]
 8023df4:	001a      	movs	r2, r3
 8023df6:	3a31      	subs	r2, #49	@ 0x31
 8023df8:	2a08      	cmp	r2, #8
 8023dfa:	d81b      	bhi.n	8023e34 <_strtod_l+0x320>
 8023dfc:	3b30      	subs	r3, #48	@ 0x30
 8023dfe:	001a      	movs	r2, r3
 8023e00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e02:	9307      	str	r3, [sp, #28]
 8023e04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e06:	1c59      	adds	r1, r3, #1
 8023e08:	911d      	str	r1, [sp, #116]	@ 0x74
 8023e0a:	785b      	ldrb	r3, [r3, #1]
 8023e0c:	001d      	movs	r5, r3
 8023e0e:	3d30      	subs	r5, #48	@ 0x30
 8023e10:	2d09      	cmp	r5, #9
 8023e12:	d93a      	bls.n	8023e8a <_strtod_l+0x376>
 8023e14:	9d07      	ldr	r5, [sp, #28]
 8023e16:	1b49      	subs	r1, r1, r5
 8023e18:	000d      	movs	r5, r1
 8023e1a:	49b3      	ldr	r1, [pc, #716]	@ (80240e8 <_strtod_l+0x5d4>)
 8023e1c:	9107      	str	r1, [sp, #28]
 8023e1e:	2d08      	cmp	r5, #8
 8023e20:	dc03      	bgt.n	8023e2a <_strtod_l+0x316>
 8023e22:	9207      	str	r2, [sp, #28]
 8023e24:	428a      	cmp	r2, r1
 8023e26:	dd00      	ble.n	8023e2a <_strtod_l+0x316>
 8023e28:	9107      	str	r1, [sp, #28]
 8023e2a:	2c00      	cmp	r4, #0
 8023e2c:	d002      	beq.n	8023e34 <_strtod_l+0x320>
 8023e2e:	9a07      	ldr	r2, [sp, #28]
 8023e30:	4252      	negs	r2, r2
 8023e32:	9207      	str	r2, [sp, #28]
 8023e34:	9a06      	ldr	r2, [sp, #24]
 8023e36:	2a00      	cmp	r2, #0
 8023e38:	d14b      	bne.n	8023ed2 <_strtod_l+0x3be>
 8023e3a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023e3c:	4310      	orrs	r0, r2
 8023e3e:	d000      	beq.n	8023e42 <_strtod_l+0x32e>
 8023e40:	e6a3      	b.n	8023b8a <_strtod_l+0x76>
 8023e42:	4662      	mov	r2, ip
 8023e44:	2a00      	cmp	r2, #0
 8023e46:	d000      	beq.n	8023e4a <_strtod_l+0x336>
 8023e48:	e6bb      	b.n	8023bc2 <_strtod_l+0xae>
 8023e4a:	2b69      	cmp	r3, #105	@ 0x69
 8023e4c:	d025      	beq.n	8023e9a <_strtod_l+0x386>
 8023e4e:	dc21      	bgt.n	8023e94 <_strtod_l+0x380>
 8023e50:	2b49      	cmp	r3, #73	@ 0x49
 8023e52:	d022      	beq.n	8023e9a <_strtod_l+0x386>
 8023e54:	2b4e      	cmp	r3, #78	@ 0x4e
 8023e56:	d000      	beq.n	8023e5a <_strtod_l+0x346>
 8023e58:	e6b3      	b.n	8023bc2 <_strtod_l+0xae>
 8023e5a:	49a4      	ldr	r1, [pc, #656]	@ (80240ec <_strtod_l+0x5d8>)
 8023e5c:	a81d      	add	r0, sp, #116	@ 0x74
 8023e5e:	f002 fe43 	bl	8026ae8 <__match>
 8023e62:	2800      	cmp	r0, #0
 8023e64:	d100      	bne.n	8023e68 <_strtod_l+0x354>
 8023e66:	e6ac      	b.n	8023bc2 <_strtod_l+0xae>
 8023e68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e6a:	781b      	ldrb	r3, [r3, #0]
 8023e6c:	2b28      	cmp	r3, #40	@ 0x28
 8023e6e:	d12a      	bne.n	8023ec6 <_strtod_l+0x3b2>
 8023e70:	499f      	ldr	r1, [pc, #636]	@ (80240f0 <_strtod_l+0x5dc>)
 8023e72:	aa20      	add	r2, sp, #128	@ 0x80
 8023e74:	a81d      	add	r0, sp, #116	@ 0x74
 8023e76:	f002 fe4b 	bl	8026b10 <__hexnan>
 8023e7a:	2805      	cmp	r0, #5
 8023e7c:	d123      	bne.n	8023ec6 <_strtod_l+0x3b2>
 8023e7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023e80:	4a9c      	ldr	r2, [pc, #624]	@ (80240f4 <_strtod_l+0x5e0>)
 8023e82:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023e84:	431a      	orrs	r2, r3
 8023e86:	0017      	movs	r7, r2
 8023e88:	e67f      	b.n	8023b8a <_strtod_l+0x76>
 8023e8a:	210a      	movs	r1, #10
 8023e8c:	434a      	muls	r2, r1
 8023e8e:	18d2      	adds	r2, r2, r3
 8023e90:	3a30      	subs	r2, #48	@ 0x30
 8023e92:	e7b7      	b.n	8023e04 <_strtod_l+0x2f0>
 8023e94:	2b6e      	cmp	r3, #110	@ 0x6e
 8023e96:	d0e0      	beq.n	8023e5a <_strtod_l+0x346>
 8023e98:	e693      	b.n	8023bc2 <_strtod_l+0xae>
 8023e9a:	4997      	ldr	r1, [pc, #604]	@ (80240f8 <_strtod_l+0x5e4>)
 8023e9c:	a81d      	add	r0, sp, #116	@ 0x74
 8023e9e:	f002 fe23 	bl	8026ae8 <__match>
 8023ea2:	2800      	cmp	r0, #0
 8023ea4:	d100      	bne.n	8023ea8 <_strtod_l+0x394>
 8023ea6:	e68c      	b.n	8023bc2 <_strtod_l+0xae>
 8023ea8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023eaa:	4994      	ldr	r1, [pc, #592]	@ (80240fc <_strtod_l+0x5e8>)
 8023eac:	3b01      	subs	r3, #1
 8023eae:	a81d      	add	r0, sp, #116	@ 0x74
 8023eb0:	931d      	str	r3, [sp, #116]	@ 0x74
 8023eb2:	f002 fe19 	bl	8026ae8 <__match>
 8023eb6:	2800      	cmp	r0, #0
 8023eb8:	d102      	bne.n	8023ec0 <_strtod_l+0x3ac>
 8023eba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023ebc:	3301      	adds	r3, #1
 8023ebe:	931d      	str	r3, [sp, #116]	@ 0x74
 8023ec0:	2600      	movs	r6, #0
 8023ec2:	4f8c      	ldr	r7, [pc, #560]	@ (80240f4 <_strtod_l+0x5e0>)
 8023ec4:	e661      	b.n	8023b8a <_strtod_l+0x76>
 8023ec6:	488e      	ldr	r0, [pc, #568]	@ (8024100 <_strtod_l+0x5ec>)
 8023ec8:	f001 fcaa 	bl	8025820 <nan>
 8023ecc:	0006      	movs	r6, r0
 8023ece:	000f      	movs	r7, r1
 8023ed0:	e65b      	b.n	8023b8a <_strtod_l+0x76>
 8023ed2:	9b07      	ldr	r3, [sp, #28]
 8023ed4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023ed6:	1a9b      	subs	r3, r3, r2
 8023ed8:	930c      	str	r3, [sp, #48]	@ 0x30
 8023eda:	9b08      	ldr	r3, [sp, #32]
 8023edc:	2b00      	cmp	r3, #0
 8023ede:	d101      	bne.n	8023ee4 <_strtod_l+0x3d0>
 8023ee0:	9b06      	ldr	r3, [sp, #24]
 8023ee2:	9308      	str	r3, [sp, #32]
 8023ee4:	9c06      	ldr	r4, [sp, #24]
 8023ee6:	2c10      	cmp	r4, #16
 8023ee8:	dd00      	ble.n	8023eec <_strtod_l+0x3d8>
 8023eea:	2410      	movs	r4, #16
 8023eec:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023eee:	f7df fcad 	bl	800384c <__aeabi_ui2d>
 8023ef2:	9b06      	ldr	r3, [sp, #24]
 8023ef4:	0006      	movs	r6, r0
 8023ef6:	000f      	movs	r7, r1
 8023ef8:	2b09      	cmp	r3, #9
 8023efa:	dc13      	bgt.n	8023f24 <_strtod_l+0x410>
 8023efc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023efe:	2b00      	cmp	r3, #0
 8023f00:	d100      	bne.n	8023f04 <_strtod_l+0x3f0>
 8023f02:	e642      	b.n	8023b8a <_strtod_l+0x76>
 8023f04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f06:	2b00      	cmp	r3, #0
 8023f08:	dc00      	bgt.n	8023f0c <_strtod_l+0x3f8>
 8023f0a:	e07e      	b.n	802400a <_strtod_l+0x4f6>
 8023f0c:	2b16      	cmp	r3, #22
 8023f0e:	dc63      	bgt.n	8023fd8 <_strtod_l+0x4c4>
 8023f10:	497c      	ldr	r1, [pc, #496]	@ (8024104 <_strtod_l+0x5f0>)
 8023f12:	00db      	lsls	r3, r3, #3
 8023f14:	18c9      	adds	r1, r1, r3
 8023f16:	0032      	movs	r2, r6
 8023f18:	6808      	ldr	r0, [r1, #0]
 8023f1a:	6849      	ldr	r1, [r1, #4]
 8023f1c:	003b      	movs	r3, r7
 8023f1e:	f7de fd19 	bl	8002954 <__aeabi_dmul>
 8023f22:	e7d3      	b.n	8023ecc <_strtod_l+0x3b8>
 8023f24:	0022      	movs	r2, r4
 8023f26:	4b77      	ldr	r3, [pc, #476]	@ (8024104 <_strtod_l+0x5f0>)
 8023f28:	3a09      	subs	r2, #9
 8023f2a:	00d2      	lsls	r2, r2, #3
 8023f2c:	189b      	adds	r3, r3, r2
 8023f2e:	681a      	ldr	r2, [r3, #0]
 8023f30:	685b      	ldr	r3, [r3, #4]
 8023f32:	f7de fd0f 	bl	8002954 <__aeabi_dmul>
 8023f36:	0006      	movs	r6, r0
 8023f38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023f3a:	000f      	movs	r7, r1
 8023f3c:	f7df fc86 	bl	800384c <__aeabi_ui2d>
 8023f40:	000b      	movs	r3, r1
 8023f42:	0002      	movs	r2, r0
 8023f44:	0039      	movs	r1, r7
 8023f46:	0030      	movs	r0, r6
 8023f48:	f7dd fd04 	bl	8001954 <__aeabi_dadd>
 8023f4c:	9b06      	ldr	r3, [sp, #24]
 8023f4e:	0006      	movs	r6, r0
 8023f50:	000f      	movs	r7, r1
 8023f52:	2b0f      	cmp	r3, #15
 8023f54:	ddd2      	ble.n	8023efc <_strtod_l+0x3e8>
 8023f56:	9b06      	ldr	r3, [sp, #24]
 8023f58:	1b1c      	subs	r4, r3, r4
 8023f5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f5c:	18e4      	adds	r4, r4, r3
 8023f5e:	2c00      	cmp	r4, #0
 8023f60:	dc00      	bgt.n	8023f64 <_strtod_l+0x450>
 8023f62:	e09b      	b.n	802409c <_strtod_l+0x588>
 8023f64:	220f      	movs	r2, #15
 8023f66:	0023      	movs	r3, r4
 8023f68:	4013      	ands	r3, r2
 8023f6a:	4214      	tst	r4, r2
 8023f6c:	d00a      	beq.n	8023f84 <_strtod_l+0x470>
 8023f6e:	4965      	ldr	r1, [pc, #404]	@ (8024104 <_strtod_l+0x5f0>)
 8023f70:	00db      	lsls	r3, r3, #3
 8023f72:	18c9      	adds	r1, r1, r3
 8023f74:	0032      	movs	r2, r6
 8023f76:	6808      	ldr	r0, [r1, #0]
 8023f78:	6849      	ldr	r1, [r1, #4]
 8023f7a:	003b      	movs	r3, r7
 8023f7c:	f7de fcea 	bl	8002954 <__aeabi_dmul>
 8023f80:	0006      	movs	r6, r0
 8023f82:	000f      	movs	r7, r1
 8023f84:	230f      	movs	r3, #15
 8023f86:	439c      	bics	r4, r3
 8023f88:	d073      	beq.n	8024072 <_strtod_l+0x55e>
 8023f8a:	3326      	adds	r3, #38	@ 0x26
 8023f8c:	33ff      	adds	r3, #255	@ 0xff
 8023f8e:	429c      	cmp	r4, r3
 8023f90:	dd4b      	ble.n	802402a <_strtod_l+0x516>
 8023f92:	2300      	movs	r3, #0
 8023f94:	9306      	str	r3, [sp, #24]
 8023f96:	9307      	str	r3, [sp, #28]
 8023f98:	930d      	str	r3, [sp, #52]	@ 0x34
 8023f9a:	9308      	str	r3, [sp, #32]
 8023f9c:	2322      	movs	r3, #34	@ 0x22
 8023f9e:	2600      	movs	r6, #0
 8023fa0:	9a05      	ldr	r2, [sp, #20]
 8023fa2:	4f54      	ldr	r7, [pc, #336]	@ (80240f4 <_strtod_l+0x5e0>)
 8023fa4:	6013      	str	r3, [r2, #0]
 8023fa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023fa8:	42b3      	cmp	r3, r6
 8023faa:	d100      	bne.n	8023fae <_strtod_l+0x49a>
 8023fac:	e5ed      	b.n	8023b8a <_strtod_l+0x76>
 8023fae:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023fb0:	9805      	ldr	r0, [sp, #20]
 8023fb2:	f002 ff67 	bl	8026e84 <_Bfree>
 8023fb6:	9908      	ldr	r1, [sp, #32]
 8023fb8:	9805      	ldr	r0, [sp, #20]
 8023fba:	f002 ff63 	bl	8026e84 <_Bfree>
 8023fbe:	9907      	ldr	r1, [sp, #28]
 8023fc0:	9805      	ldr	r0, [sp, #20]
 8023fc2:	f002 ff5f 	bl	8026e84 <_Bfree>
 8023fc6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023fc8:	9805      	ldr	r0, [sp, #20]
 8023fca:	f002 ff5b 	bl	8026e84 <_Bfree>
 8023fce:	9906      	ldr	r1, [sp, #24]
 8023fd0:	9805      	ldr	r0, [sp, #20]
 8023fd2:	f002 ff57 	bl	8026e84 <_Bfree>
 8023fd6:	e5d8      	b.n	8023b8a <_strtod_l+0x76>
 8023fd8:	2325      	movs	r3, #37	@ 0x25
 8023fda:	9a06      	ldr	r2, [sp, #24]
 8023fdc:	1a9b      	subs	r3, r3, r2
 8023fde:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023fe0:	4293      	cmp	r3, r2
 8023fe2:	dbb8      	blt.n	8023f56 <_strtod_l+0x442>
 8023fe4:	240f      	movs	r4, #15
 8023fe6:	9b06      	ldr	r3, [sp, #24]
 8023fe8:	4d46      	ldr	r5, [pc, #280]	@ (8024104 <_strtod_l+0x5f0>)
 8023fea:	1ae4      	subs	r4, r4, r3
 8023fec:	00e1      	lsls	r1, r4, #3
 8023fee:	1869      	adds	r1, r5, r1
 8023ff0:	0032      	movs	r2, r6
 8023ff2:	6808      	ldr	r0, [r1, #0]
 8023ff4:	6849      	ldr	r1, [r1, #4]
 8023ff6:	003b      	movs	r3, r7
 8023ff8:	f7de fcac 	bl	8002954 <__aeabi_dmul>
 8023ffc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ffe:	1b1c      	subs	r4, r3, r4
 8024000:	00e4      	lsls	r4, r4, #3
 8024002:	192d      	adds	r5, r5, r4
 8024004:	682a      	ldr	r2, [r5, #0]
 8024006:	686b      	ldr	r3, [r5, #4]
 8024008:	e789      	b.n	8023f1e <_strtod_l+0x40a>
 802400a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802400c:	3316      	adds	r3, #22
 802400e:	dba2      	blt.n	8023f56 <_strtod_l+0x442>
 8024010:	9907      	ldr	r1, [sp, #28]
 8024012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024014:	4b3b      	ldr	r3, [pc, #236]	@ (8024104 <_strtod_l+0x5f0>)
 8024016:	1a52      	subs	r2, r2, r1
 8024018:	00d2      	lsls	r2, r2, #3
 802401a:	189b      	adds	r3, r3, r2
 802401c:	0030      	movs	r0, r6
 802401e:	681a      	ldr	r2, [r3, #0]
 8024020:	685b      	ldr	r3, [r3, #4]
 8024022:	0039      	movs	r1, r7
 8024024:	f7de f85c 	bl	80020e0 <__aeabi_ddiv>
 8024028:	e750      	b.n	8023ecc <_strtod_l+0x3b8>
 802402a:	2300      	movs	r3, #0
 802402c:	0030      	movs	r0, r6
 802402e:	0039      	movs	r1, r7
 8024030:	4d35      	ldr	r5, [pc, #212]	@ (8024108 <_strtod_l+0x5f4>)
 8024032:	1124      	asrs	r4, r4, #4
 8024034:	9309      	str	r3, [sp, #36]	@ 0x24
 8024036:	2c01      	cmp	r4, #1
 8024038:	dc1e      	bgt.n	8024078 <_strtod_l+0x564>
 802403a:	2b00      	cmp	r3, #0
 802403c:	d001      	beq.n	8024042 <_strtod_l+0x52e>
 802403e:	0006      	movs	r6, r0
 8024040:	000f      	movs	r7, r1
 8024042:	4b32      	ldr	r3, [pc, #200]	@ (802410c <_strtod_l+0x5f8>)
 8024044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024046:	18ff      	adds	r7, r7, r3
 8024048:	4b2f      	ldr	r3, [pc, #188]	@ (8024108 <_strtod_l+0x5f4>)
 802404a:	00d5      	lsls	r5, r2, #3
 802404c:	195d      	adds	r5, r3, r5
 802404e:	0032      	movs	r2, r6
 8024050:	6828      	ldr	r0, [r5, #0]
 8024052:	6869      	ldr	r1, [r5, #4]
 8024054:	003b      	movs	r3, r7
 8024056:	f7de fc7d 	bl	8002954 <__aeabi_dmul>
 802405a:	4b26      	ldr	r3, [pc, #152]	@ (80240f4 <_strtod_l+0x5e0>)
 802405c:	4a2c      	ldr	r2, [pc, #176]	@ (8024110 <_strtod_l+0x5fc>)
 802405e:	0006      	movs	r6, r0
 8024060:	400b      	ands	r3, r1
 8024062:	4293      	cmp	r3, r2
 8024064:	d895      	bhi.n	8023f92 <_strtod_l+0x47e>
 8024066:	4a2b      	ldr	r2, [pc, #172]	@ (8024114 <_strtod_l+0x600>)
 8024068:	4293      	cmp	r3, r2
 802406a:	d913      	bls.n	8024094 <_strtod_l+0x580>
 802406c:	2601      	movs	r6, #1
 802406e:	4f2a      	ldr	r7, [pc, #168]	@ (8024118 <_strtod_l+0x604>)
 8024070:	4276      	negs	r6, r6
 8024072:	2300      	movs	r3, #0
 8024074:	9309      	str	r3, [sp, #36]	@ 0x24
 8024076:	e086      	b.n	8024186 <_strtod_l+0x672>
 8024078:	2201      	movs	r2, #1
 802407a:	4214      	tst	r4, r2
 802407c:	d004      	beq.n	8024088 <_strtod_l+0x574>
 802407e:	682a      	ldr	r2, [r5, #0]
 8024080:	686b      	ldr	r3, [r5, #4]
 8024082:	f7de fc67 	bl	8002954 <__aeabi_dmul>
 8024086:	2301      	movs	r3, #1
 8024088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802408a:	1064      	asrs	r4, r4, #1
 802408c:	3201      	adds	r2, #1
 802408e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024090:	3508      	adds	r5, #8
 8024092:	e7d0      	b.n	8024036 <_strtod_l+0x522>
 8024094:	23d4      	movs	r3, #212	@ 0xd4
 8024096:	049b      	lsls	r3, r3, #18
 8024098:	18cf      	adds	r7, r1, r3
 802409a:	e7ea      	b.n	8024072 <_strtod_l+0x55e>
 802409c:	2c00      	cmp	r4, #0
 802409e:	d0e8      	beq.n	8024072 <_strtod_l+0x55e>
 80240a0:	4264      	negs	r4, r4
 80240a2:	230f      	movs	r3, #15
 80240a4:	0022      	movs	r2, r4
 80240a6:	401a      	ands	r2, r3
 80240a8:	421c      	tst	r4, r3
 80240aa:	d00a      	beq.n	80240c2 <_strtod_l+0x5ae>
 80240ac:	4b15      	ldr	r3, [pc, #84]	@ (8024104 <_strtod_l+0x5f0>)
 80240ae:	00d2      	lsls	r2, r2, #3
 80240b0:	189b      	adds	r3, r3, r2
 80240b2:	0030      	movs	r0, r6
 80240b4:	681a      	ldr	r2, [r3, #0]
 80240b6:	685b      	ldr	r3, [r3, #4]
 80240b8:	0039      	movs	r1, r7
 80240ba:	f7de f811 	bl	80020e0 <__aeabi_ddiv>
 80240be:	0006      	movs	r6, r0
 80240c0:	000f      	movs	r7, r1
 80240c2:	1124      	asrs	r4, r4, #4
 80240c4:	d0d5      	beq.n	8024072 <_strtod_l+0x55e>
 80240c6:	2c1f      	cmp	r4, #31
 80240c8:	dd28      	ble.n	802411c <_strtod_l+0x608>
 80240ca:	2300      	movs	r3, #0
 80240cc:	9306      	str	r3, [sp, #24]
 80240ce:	9307      	str	r3, [sp, #28]
 80240d0:	930d      	str	r3, [sp, #52]	@ 0x34
 80240d2:	9308      	str	r3, [sp, #32]
 80240d4:	2322      	movs	r3, #34	@ 0x22
 80240d6:	9a05      	ldr	r2, [sp, #20]
 80240d8:	2600      	movs	r6, #0
 80240da:	6013      	str	r3, [r2, #0]
 80240dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80240de:	2700      	movs	r7, #0
 80240e0:	2b00      	cmp	r3, #0
 80240e2:	d000      	beq.n	80240e6 <_strtod_l+0x5d2>
 80240e4:	e763      	b.n	8023fae <_strtod_l+0x49a>
 80240e6:	e550      	b.n	8023b8a <_strtod_l+0x76>
 80240e8:	00004e1f 	.word	0x00004e1f
 80240ec:	0802dfdf 	.word	0x0802dfdf
 80240f0:	0802e1a4 	.word	0x0802e1a4
 80240f4:	7ff00000 	.word	0x7ff00000
 80240f8:	0802dfd7 	.word	0x0802dfd7
 80240fc:	0802e011 	.word	0x0802e011
 8024100:	0802e1a0 	.word	0x0802e1a0
 8024104:	0802e330 	.word	0x0802e330
 8024108:	0802e308 	.word	0x0802e308
 802410c:	fcb00000 	.word	0xfcb00000
 8024110:	7ca00000 	.word	0x7ca00000
 8024114:	7c900000 	.word	0x7c900000
 8024118:	7fefffff 	.word	0x7fefffff
 802411c:	2310      	movs	r3, #16
 802411e:	0022      	movs	r2, r4
 8024120:	401a      	ands	r2, r3
 8024122:	9209      	str	r2, [sp, #36]	@ 0x24
 8024124:	421c      	tst	r4, r3
 8024126:	d001      	beq.n	802412c <_strtod_l+0x618>
 8024128:	335a      	adds	r3, #90	@ 0x5a
 802412a:	9309      	str	r3, [sp, #36]	@ 0x24
 802412c:	0030      	movs	r0, r6
 802412e:	0039      	movs	r1, r7
 8024130:	2300      	movs	r3, #0
 8024132:	4dc0      	ldr	r5, [pc, #768]	@ (8024434 <_strtod_l+0x920>)
 8024134:	2201      	movs	r2, #1
 8024136:	4214      	tst	r4, r2
 8024138:	d004      	beq.n	8024144 <_strtod_l+0x630>
 802413a:	682a      	ldr	r2, [r5, #0]
 802413c:	686b      	ldr	r3, [r5, #4]
 802413e:	f7de fc09 	bl	8002954 <__aeabi_dmul>
 8024142:	2301      	movs	r3, #1
 8024144:	1064      	asrs	r4, r4, #1
 8024146:	3508      	adds	r5, #8
 8024148:	2c00      	cmp	r4, #0
 802414a:	d1f3      	bne.n	8024134 <_strtod_l+0x620>
 802414c:	2b00      	cmp	r3, #0
 802414e:	d001      	beq.n	8024154 <_strtod_l+0x640>
 8024150:	0006      	movs	r6, r0
 8024152:	000f      	movs	r7, r1
 8024154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024156:	2b00      	cmp	r3, #0
 8024158:	d00d      	beq.n	8024176 <_strtod_l+0x662>
 802415a:	236b      	movs	r3, #107	@ 0x6b
 802415c:	007a      	lsls	r2, r7, #1
 802415e:	0d52      	lsrs	r2, r2, #21
 8024160:	0039      	movs	r1, r7
 8024162:	1a9b      	subs	r3, r3, r2
 8024164:	2b00      	cmp	r3, #0
 8024166:	dd06      	ble.n	8024176 <_strtod_l+0x662>
 8024168:	2b1f      	cmp	r3, #31
 802416a:	dd5c      	ble.n	8024226 <_strtod_l+0x712>
 802416c:	2600      	movs	r6, #0
 802416e:	2b34      	cmp	r3, #52	@ 0x34
 8024170:	dd52      	ble.n	8024218 <_strtod_l+0x704>
 8024172:	27dc      	movs	r7, #220	@ 0xdc
 8024174:	04bf      	lsls	r7, r7, #18
 8024176:	2200      	movs	r2, #0
 8024178:	2300      	movs	r3, #0
 802417a:	0030      	movs	r0, r6
 802417c:	0039      	movs	r1, r7
 802417e:	f7dc f997 	bl	80004b0 <__aeabi_dcmpeq>
 8024182:	2800      	cmp	r0, #0
 8024184:	d1a1      	bne.n	80240ca <_strtod_l+0x5b6>
 8024186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024188:	9a08      	ldr	r2, [sp, #32]
 802418a:	9300      	str	r3, [sp, #0]
 802418c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802418e:	9b06      	ldr	r3, [sp, #24]
 8024190:	9805      	ldr	r0, [sp, #20]
 8024192:	f002 fedf 	bl	8026f54 <__s2b>
 8024196:	900d      	str	r0, [sp, #52]	@ 0x34
 8024198:	2800      	cmp	r0, #0
 802419a:	d100      	bne.n	802419e <_strtod_l+0x68a>
 802419c:	e6f9      	b.n	8023f92 <_strtod_l+0x47e>
 802419e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80241a0:	9907      	ldr	r1, [sp, #28]
 80241a2:	43db      	mvns	r3, r3
 80241a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80241a6:	17db      	asrs	r3, r3, #31
 80241a8:	1a52      	subs	r2, r2, r1
 80241aa:	9214      	str	r2, [sp, #80]	@ 0x50
 80241ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80241ae:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80241b0:	17d2      	asrs	r2, r2, #31
 80241b2:	4011      	ands	r1, r2
 80241b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80241b6:	9114      	str	r1, [sp, #80]	@ 0x50
 80241b8:	401a      	ands	r2, r3
 80241ba:	2300      	movs	r3, #0
 80241bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80241be:	9306      	str	r3, [sp, #24]
 80241c0:	9307      	str	r3, [sp, #28]
 80241c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80241c4:	9805      	ldr	r0, [sp, #20]
 80241c6:	6859      	ldr	r1, [r3, #4]
 80241c8:	f002 fe18 	bl	8026dfc <_Balloc>
 80241cc:	9008      	str	r0, [sp, #32]
 80241ce:	2800      	cmp	r0, #0
 80241d0:	d100      	bne.n	80241d4 <_strtod_l+0x6c0>
 80241d2:	e6e3      	b.n	8023f9c <_strtod_l+0x488>
 80241d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80241d6:	300c      	adds	r0, #12
 80241d8:	0019      	movs	r1, r3
 80241da:	691a      	ldr	r2, [r3, #16]
 80241dc:	310c      	adds	r1, #12
 80241de:	3202      	adds	r2, #2
 80241e0:	0092      	lsls	r2, r2, #2
 80241e2:	f001 fb13 	bl	802580c <memcpy>
 80241e6:	ab20      	add	r3, sp, #128	@ 0x80
 80241e8:	9301      	str	r3, [sp, #4]
 80241ea:	ab1f      	add	r3, sp, #124	@ 0x7c
 80241ec:	9300      	str	r3, [sp, #0]
 80241ee:	0032      	movs	r2, r6
 80241f0:	003b      	movs	r3, r7
 80241f2:	9805      	ldr	r0, [sp, #20]
 80241f4:	9610      	str	r6, [sp, #64]	@ 0x40
 80241f6:	9711      	str	r7, [sp, #68]	@ 0x44
 80241f8:	f003 f9f4 	bl	80275e4 <__d2b>
 80241fc:	901e      	str	r0, [sp, #120]	@ 0x78
 80241fe:	2800      	cmp	r0, #0
 8024200:	d100      	bne.n	8024204 <_strtod_l+0x6f0>
 8024202:	e6cb      	b.n	8023f9c <_strtod_l+0x488>
 8024204:	2101      	movs	r1, #1
 8024206:	9805      	ldr	r0, [sp, #20]
 8024208:	f002 ff40 	bl	802708c <__i2b>
 802420c:	9007      	str	r0, [sp, #28]
 802420e:	2800      	cmp	r0, #0
 8024210:	d10e      	bne.n	8024230 <_strtod_l+0x71c>
 8024212:	2300      	movs	r3, #0
 8024214:	9307      	str	r3, [sp, #28]
 8024216:	e6c1      	b.n	8023f9c <_strtod_l+0x488>
 8024218:	234b      	movs	r3, #75	@ 0x4b
 802421a:	1a9a      	subs	r2, r3, r2
 802421c:	3b4c      	subs	r3, #76	@ 0x4c
 802421e:	4093      	lsls	r3, r2
 8024220:	4019      	ands	r1, r3
 8024222:	000f      	movs	r7, r1
 8024224:	e7a7      	b.n	8024176 <_strtod_l+0x662>
 8024226:	2201      	movs	r2, #1
 8024228:	4252      	negs	r2, r2
 802422a:	409a      	lsls	r2, r3
 802422c:	4016      	ands	r6, r2
 802422e:	e7a2      	b.n	8024176 <_strtod_l+0x662>
 8024230:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024232:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024234:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024236:	1ad4      	subs	r4, r2, r3
 8024238:	2b00      	cmp	r3, #0
 802423a:	db01      	blt.n	8024240 <_strtod_l+0x72c>
 802423c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 802423e:	195d      	adds	r5, r3, r5
 8024240:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024242:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024244:	1a5b      	subs	r3, r3, r1
 8024246:	2136      	movs	r1, #54	@ 0x36
 8024248:	189b      	adds	r3, r3, r2
 802424a:	1a8a      	subs	r2, r1, r2
 802424c:	497a      	ldr	r1, [pc, #488]	@ (8024438 <_strtod_l+0x924>)
 802424e:	2001      	movs	r0, #1
 8024250:	468c      	mov	ip, r1
 8024252:	2100      	movs	r1, #0
 8024254:	3b01      	subs	r3, #1
 8024256:	9115      	str	r1, [sp, #84]	@ 0x54
 8024258:	9016      	str	r0, [sp, #88]	@ 0x58
 802425a:	4563      	cmp	r3, ip
 802425c:	da06      	bge.n	802426c <_strtod_l+0x758>
 802425e:	4661      	mov	r1, ip
 8024260:	1ac9      	subs	r1, r1, r3
 8024262:	1a52      	subs	r2, r2, r1
 8024264:	291f      	cmp	r1, #31
 8024266:	dc3f      	bgt.n	80242e8 <_strtod_l+0x7d4>
 8024268:	4088      	lsls	r0, r1
 802426a:	9016      	str	r0, [sp, #88]	@ 0x58
 802426c:	18ab      	adds	r3, r5, r2
 802426e:	930e      	str	r3, [sp, #56]	@ 0x38
 8024270:	18a4      	adds	r4, r4, r2
 8024272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024274:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024276:	191c      	adds	r4, r3, r4
 8024278:	002b      	movs	r3, r5
 802427a:	4295      	cmp	r5, r2
 802427c:	dd00      	ble.n	8024280 <_strtod_l+0x76c>
 802427e:	0013      	movs	r3, r2
 8024280:	42a3      	cmp	r3, r4
 8024282:	dd00      	ble.n	8024286 <_strtod_l+0x772>
 8024284:	0023      	movs	r3, r4
 8024286:	2b00      	cmp	r3, #0
 8024288:	dd04      	ble.n	8024294 <_strtod_l+0x780>
 802428a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802428c:	1ae4      	subs	r4, r4, r3
 802428e:	1ad2      	subs	r2, r2, r3
 8024290:	920e      	str	r2, [sp, #56]	@ 0x38
 8024292:	1aed      	subs	r5, r5, r3
 8024294:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024296:	2b00      	cmp	r3, #0
 8024298:	dd16      	ble.n	80242c8 <_strtod_l+0x7b4>
 802429a:	001a      	movs	r2, r3
 802429c:	9907      	ldr	r1, [sp, #28]
 802429e:	9805      	ldr	r0, [sp, #20]
 80242a0:	f002 ffb6 	bl	8027210 <__pow5mult>
 80242a4:	9007      	str	r0, [sp, #28]
 80242a6:	2800      	cmp	r0, #0
 80242a8:	d0b3      	beq.n	8024212 <_strtod_l+0x6fe>
 80242aa:	0001      	movs	r1, r0
 80242ac:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80242ae:	9805      	ldr	r0, [sp, #20]
 80242b0:	f002 ff04 	bl	80270bc <__multiply>
 80242b4:	9013      	str	r0, [sp, #76]	@ 0x4c
 80242b6:	2800      	cmp	r0, #0
 80242b8:	d100      	bne.n	80242bc <_strtod_l+0x7a8>
 80242ba:	e66f      	b.n	8023f9c <_strtod_l+0x488>
 80242bc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80242be:	9805      	ldr	r0, [sp, #20]
 80242c0:	f002 fde0 	bl	8026e84 <_Bfree>
 80242c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80242c6:	931e      	str	r3, [sp, #120]	@ 0x78
 80242c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80242ca:	2b00      	cmp	r3, #0
 80242cc:	dc12      	bgt.n	80242f4 <_strtod_l+0x7e0>
 80242ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242d0:	2b00      	cmp	r3, #0
 80242d2:	dd18      	ble.n	8024306 <_strtod_l+0x7f2>
 80242d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80242d6:	9908      	ldr	r1, [sp, #32]
 80242d8:	9805      	ldr	r0, [sp, #20]
 80242da:	f002 ff99 	bl	8027210 <__pow5mult>
 80242de:	9008      	str	r0, [sp, #32]
 80242e0:	2800      	cmp	r0, #0
 80242e2:	d110      	bne.n	8024306 <_strtod_l+0x7f2>
 80242e4:	2300      	movs	r3, #0
 80242e6:	e658      	b.n	8023f9a <_strtod_l+0x486>
 80242e8:	4954      	ldr	r1, [pc, #336]	@ (802443c <_strtod_l+0x928>)
 80242ea:	1acb      	subs	r3, r1, r3
 80242ec:	0001      	movs	r1, r0
 80242ee:	4099      	lsls	r1, r3
 80242f0:	9115      	str	r1, [sp, #84]	@ 0x54
 80242f2:	e7ba      	b.n	802426a <_strtod_l+0x756>
 80242f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80242f6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80242f8:	9805      	ldr	r0, [sp, #20]
 80242fa:	f002 ffe5 	bl	80272c8 <__lshift>
 80242fe:	901e      	str	r0, [sp, #120]	@ 0x78
 8024300:	2800      	cmp	r0, #0
 8024302:	d1e4      	bne.n	80242ce <_strtod_l+0x7ba>
 8024304:	e64a      	b.n	8023f9c <_strtod_l+0x488>
 8024306:	2c00      	cmp	r4, #0
 8024308:	dd07      	ble.n	802431a <_strtod_l+0x806>
 802430a:	0022      	movs	r2, r4
 802430c:	9908      	ldr	r1, [sp, #32]
 802430e:	9805      	ldr	r0, [sp, #20]
 8024310:	f002 ffda 	bl	80272c8 <__lshift>
 8024314:	9008      	str	r0, [sp, #32]
 8024316:	2800      	cmp	r0, #0
 8024318:	d0e4      	beq.n	80242e4 <_strtod_l+0x7d0>
 802431a:	2d00      	cmp	r5, #0
 802431c:	dd08      	ble.n	8024330 <_strtod_l+0x81c>
 802431e:	002a      	movs	r2, r5
 8024320:	9907      	ldr	r1, [sp, #28]
 8024322:	9805      	ldr	r0, [sp, #20]
 8024324:	f002 ffd0 	bl	80272c8 <__lshift>
 8024328:	9007      	str	r0, [sp, #28]
 802432a:	2800      	cmp	r0, #0
 802432c:	d100      	bne.n	8024330 <_strtod_l+0x81c>
 802432e:	e635      	b.n	8023f9c <_strtod_l+0x488>
 8024330:	9a08      	ldr	r2, [sp, #32]
 8024332:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024334:	9805      	ldr	r0, [sp, #20]
 8024336:	f003 f84f 	bl	80273d8 <__mdiff>
 802433a:	9006      	str	r0, [sp, #24]
 802433c:	2800      	cmp	r0, #0
 802433e:	d100      	bne.n	8024342 <_strtod_l+0x82e>
 8024340:	e62c      	b.n	8023f9c <_strtod_l+0x488>
 8024342:	68c3      	ldr	r3, [r0, #12]
 8024344:	9907      	ldr	r1, [sp, #28]
 8024346:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024348:	2300      	movs	r3, #0
 802434a:	60c3      	str	r3, [r0, #12]
 802434c:	f003 f828 	bl	80273a0 <__mcmp>
 8024350:	2800      	cmp	r0, #0
 8024352:	da3b      	bge.n	80243cc <_strtod_l+0x8b8>
 8024354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024356:	4333      	orrs	r3, r6
 8024358:	d167      	bne.n	802442a <_strtod_l+0x916>
 802435a:	033b      	lsls	r3, r7, #12
 802435c:	d165      	bne.n	802442a <_strtod_l+0x916>
 802435e:	22d6      	movs	r2, #214	@ 0xd6
 8024360:	4b37      	ldr	r3, [pc, #220]	@ (8024440 <_strtod_l+0x92c>)
 8024362:	04d2      	lsls	r2, r2, #19
 8024364:	403b      	ands	r3, r7
 8024366:	4293      	cmp	r3, r2
 8024368:	d95f      	bls.n	802442a <_strtod_l+0x916>
 802436a:	9b06      	ldr	r3, [sp, #24]
 802436c:	695b      	ldr	r3, [r3, #20]
 802436e:	2b00      	cmp	r3, #0
 8024370:	d103      	bne.n	802437a <_strtod_l+0x866>
 8024372:	9b06      	ldr	r3, [sp, #24]
 8024374:	691b      	ldr	r3, [r3, #16]
 8024376:	2b01      	cmp	r3, #1
 8024378:	dd57      	ble.n	802442a <_strtod_l+0x916>
 802437a:	9906      	ldr	r1, [sp, #24]
 802437c:	2201      	movs	r2, #1
 802437e:	9805      	ldr	r0, [sp, #20]
 8024380:	f002 ffa2 	bl	80272c8 <__lshift>
 8024384:	9907      	ldr	r1, [sp, #28]
 8024386:	9006      	str	r0, [sp, #24]
 8024388:	f003 f80a 	bl	80273a0 <__mcmp>
 802438c:	2800      	cmp	r0, #0
 802438e:	dd4c      	ble.n	802442a <_strtod_l+0x916>
 8024390:	4b2b      	ldr	r3, [pc, #172]	@ (8024440 <_strtod_l+0x92c>)
 8024392:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024394:	403b      	ands	r3, r7
 8024396:	2a00      	cmp	r2, #0
 8024398:	d074      	beq.n	8024484 <_strtod_l+0x970>
 802439a:	22d6      	movs	r2, #214	@ 0xd6
 802439c:	04d2      	lsls	r2, r2, #19
 802439e:	4293      	cmp	r3, r2
 80243a0:	d870      	bhi.n	8024484 <_strtod_l+0x970>
 80243a2:	22dc      	movs	r2, #220	@ 0xdc
 80243a4:	0492      	lsls	r2, r2, #18
 80243a6:	4293      	cmp	r3, r2
 80243a8:	d800      	bhi.n	80243ac <_strtod_l+0x898>
 80243aa:	e693      	b.n	80240d4 <_strtod_l+0x5c0>
 80243ac:	0030      	movs	r0, r6
 80243ae:	0039      	movs	r1, r7
 80243b0:	4b24      	ldr	r3, [pc, #144]	@ (8024444 <_strtod_l+0x930>)
 80243b2:	2200      	movs	r2, #0
 80243b4:	f7de face 	bl	8002954 <__aeabi_dmul>
 80243b8:	4b21      	ldr	r3, [pc, #132]	@ (8024440 <_strtod_l+0x92c>)
 80243ba:	0006      	movs	r6, r0
 80243bc:	000f      	movs	r7, r1
 80243be:	420b      	tst	r3, r1
 80243c0:	d000      	beq.n	80243c4 <_strtod_l+0x8b0>
 80243c2:	e5f4      	b.n	8023fae <_strtod_l+0x49a>
 80243c4:	2322      	movs	r3, #34	@ 0x22
 80243c6:	9a05      	ldr	r2, [sp, #20]
 80243c8:	6013      	str	r3, [r2, #0]
 80243ca:	e5f0      	b.n	8023fae <_strtod_l+0x49a>
 80243cc:	970e      	str	r7, [sp, #56]	@ 0x38
 80243ce:	2800      	cmp	r0, #0
 80243d0:	d175      	bne.n	80244be <_strtod_l+0x9aa>
 80243d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80243d4:	033b      	lsls	r3, r7, #12
 80243d6:	0b1b      	lsrs	r3, r3, #12
 80243d8:	2a00      	cmp	r2, #0
 80243da:	d039      	beq.n	8024450 <_strtod_l+0x93c>
 80243dc:	4a1a      	ldr	r2, [pc, #104]	@ (8024448 <_strtod_l+0x934>)
 80243de:	4293      	cmp	r3, r2
 80243e0:	d138      	bne.n	8024454 <_strtod_l+0x940>
 80243e2:	2101      	movs	r1, #1
 80243e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80243e6:	4249      	negs	r1, r1
 80243e8:	0032      	movs	r2, r6
 80243ea:	0008      	movs	r0, r1
 80243ec:	2b00      	cmp	r3, #0
 80243ee:	d00b      	beq.n	8024408 <_strtod_l+0x8f4>
 80243f0:	24d4      	movs	r4, #212	@ 0xd4
 80243f2:	4b13      	ldr	r3, [pc, #76]	@ (8024440 <_strtod_l+0x92c>)
 80243f4:	0008      	movs	r0, r1
 80243f6:	403b      	ands	r3, r7
 80243f8:	04e4      	lsls	r4, r4, #19
 80243fa:	42a3      	cmp	r3, r4
 80243fc:	d804      	bhi.n	8024408 <_strtod_l+0x8f4>
 80243fe:	306c      	adds	r0, #108	@ 0x6c
 8024400:	0d1b      	lsrs	r3, r3, #20
 8024402:	1ac3      	subs	r3, r0, r3
 8024404:	4099      	lsls	r1, r3
 8024406:	0008      	movs	r0, r1
 8024408:	4282      	cmp	r2, r0
 802440a:	d123      	bne.n	8024454 <_strtod_l+0x940>
 802440c:	4b0f      	ldr	r3, [pc, #60]	@ (802444c <_strtod_l+0x938>)
 802440e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024410:	4299      	cmp	r1, r3
 8024412:	d102      	bne.n	802441a <_strtod_l+0x906>
 8024414:	3201      	adds	r2, #1
 8024416:	d100      	bne.n	802441a <_strtod_l+0x906>
 8024418:	e5c0      	b.n	8023f9c <_strtod_l+0x488>
 802441a:	4b09      	ldr	r3, [pc, #36]	@ (8024440 <_strtod_l+0x92c>)
 802441c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802441e:	2600      	movs	r6, #0
 8024420:	401a      	ands	r2, r3
 8024422:	0013      	movs	r3, r2
 8024424:	2280      	movs	r2, #128	@ 0x80
 8024426:	0352      	lsls	r2, r2, #13
 8024428:	189f      	adds	r7, r3, r2
 802442a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802442c:	2b00      	cmp	r3, #0
 802442e:	d1bd      	bne.n	80243ac <_strtod_l+0x898>
 8024430:	e5bd      	b.n	8023fae <_strtod_l+0x49a>
 8024432:	46c0      	nop			@ (mov r8, r8)
 8024434:	0802e1d0 	.word	0x0802e1d0
 8024438:	fffffc02 	.word	0xfffffc02
 802443c:	fffffbe2 	.word	0xfffffbe2
 8024440:	7ff00000 	.word	0x7ff00000
 8024444:	39500000 	.word	0x39500000
 8024448:	000fffff 	.word	0x000fffff
 802444c:	7fefffff 	.word	0x7fefffff
 8024450:	4333      	orrs	r3, r6
 8024452:	d09d      	beq.n	8024390 <_strtod_l+0x87c>
 8024454:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024456:	2b00      	cmp	r3, #0
 8024458:	d01c      	beq.n	8024494 <_strtod_l+0x980>
 802445a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802445c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802445e:	4213      	tst	r3, r2
 8024460:	d0e3      	beq.n	802442a <_strtod_l+0x916>
 8024462:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024464:	0030      	movs	r0, r6
 8024466:	0039      	movs	r1, r7
 8024468:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802446a:	2b00      	cmp	r3, #0
 802446c:	d016      	beq.n	802449c <_strtod_l+0x988>
 802446e:	f7ff fb39 	bl	8023ae4 <sulp>
 8024472:	0002      	movs	r2, r0
 8024474:	000b      	movs	r3, r1
 8024476:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024478:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802447a:	f7dd fa6b 	bl	8001954 <__aeabi_dadd>
 802447e:	0006      	movs	r6, r0
 8024480:	000f      	movs	r7, r1
 8024482:	e7d2      	b.n	802442a <_strtod_l+0x916>
 8024484:	2601      	movs	r6, #1
 8024486:	4a92      	ldr	r2, [pc, #584]	@ (80246d0 <_strtod_l+0xbbc>)
 8024488:	4276      	negs	r6, r6
 802448a:	189b      	adds	r3, r3, r2
 802448c:	4a91      	ldr	r2, [pc, #580]	@ (80246d4 <_strtod_l+0xbc0>)
 802448e:	431a      	orrs	r2, r3
 8024490:	0017      	movs	r7, r2
 8024492:	e7ca      	b.n	802442a <_strtod_l+0x916>
 8024494:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024496:	4233      	tst	r3, r6
 8024498:	d0c7      	beq.n	802442a <_strtod_l+0x916>
 802449a:	e7e2      	b.n	8024462 <_strtod_l+0x94e>
 802449c:	f7ff fb22 	bl	8023ae4 <sulp>
 80244a0:	0002      	movs	r2, r0
 80244a2:	000b      	movs	r3, r1
 80244a4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80244a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80244a8:	f7de fd3a 	bl	8002f20 <__aeabi_dsub>
 80244ac:	2200      	movs	r2, #0
 80244ae:	2300      	movs	r3, #0
 80244b0:	0006      	movs	r6, r0
 80244b2:	000f      	movs	r7, r1
 80244b4:	f7db fffc 	bl	80004b0 <__aeabi_dcmpeq>
 80244b8:	2800      	cmp	r0, #0
 80244ba:	d0b6      	beq.n	802442a <_strtod_l+0x916>
 80244bc:	e60a      	b.n	80240d4 <_strtod_l+0x5c0>
 80244be:	9907      	ldr	r1, [sp, #28]
 80244c0:	9806      	ldr	r0, [sp, #24]
 80244c2:	f003 f8ef 	bl	80276a4 <__ratio>
 80244c6:	2380      	movs	r3, #128	@ 0x80
 80244c8:	2200      	movs	r2, #0
 80244ca:	05db      	lsls	r3, r3, #23
 80244cc:	0004      	movs	r4, r0
 80244ce:	000d      	movs	r5, r1
 80244d0:	f7db fffe 	bl	80004d0 <__aeabi_dcmple>
 80244d4:	2800      	cmp	r0, #0
 80244d6:	d06c      	beq.n	80245b2 <_strtod_l+0xa9e>
 80244d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80244da:	2b00      	cmp	r3, #0
 80244dc:	d177      	bne.n	80245ce <_strtod_l+0xaba>
 80244de:	2e00      	cmp	r6, #0
 80244e0:	d157      	bne.n	8024592 <_strtod_l+0xa7e>
 80244e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80244e4:	031b      	lsls	r3, r3, #12
 80244e6:	d15a      	bne.n	802459e <_strtod_l+0xa8a>
 80244e8:	2200      	movs	r2, #0
 80244ea:	0020      	movs	r0, r4
 80244ec:	0029      	movs	r1, r5
 80244ee:	4b7a      	ldr	r3, [pc, #488]	@ (80246d8 <_strtod_l+0xbc4>)
 80244f0:	f7db ffe4 	bl	80004bc <__aeabi_dcmplt>
 80244f4:	2800      	cmp	r0, #0
 80244f6:	d159      	bne.n	80245ac <_strtod_l+0xa98>
 80244f8:	0020      	movs	r0, r4
 80244fa:	0029      	movs	r1, r5
 80244fc:	2200      	movs	r2, #0
 80244fe:	4b77      	ldr	r3, [pc, #476]	@ (80246dc <_strtod_l+0xbc8>)
 8024500:	f7de fa28 	bl	8002954 <__aeabi_dmul>
 8024504:	0004      	movs	r4, r0
 8024506:	000d      	movs	r5, r1
 8024508:	2380      	movs	r3, #128	@ 0x80
 802450a:	061b      	lsls	r3, r3, #24
 802450c:	18eb      	adds	r3, r5, r3
 802450e:	940a      	str	r4, [sp, #40]	@ 0x28
 8024510:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024512:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024514:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024516:	9216      	str	r2, [sp, #88]	@ 0x58
 8024518:	9317      	str	r3, [sp, #92]	@ 0x5c
 802451a:	4a71      	ldr	r2, [pc, #452]	@ (80246e0 <_strtod_l+0xbcc>)
 802451c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802451e:	4013      	ands	r3, r2
 8024520:	9315      	str	r3, [sp, #84]	@ 0x54
 8024522:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024524:	4b6f      	ldr	r3, [pc, #444]	@ (80246e4 <_strtod_l+0xbd0>)
 8024526:	429a      	cmp	r2, r3
 8024528:	d000      	beq.n	802452c <_strtod_l+0xa18>
 802452a:	e087      	b.n	802463c <_strtod_l+0xb28>
 802452c:	4a6e      	ldr	r2, [pc, #440]	@ (80246e8 <_strtod_l+0xbd4>)
 802452e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024530:	4694      	mov	ip, r2
 8024532:	4463      	add	r3, ip
 8024534:	001f      	movs	r7, r3
 8024536:	0030      	movs	r0, r6
 8024538:	0019      	movs	r1, r3
 802453a:	f002 ffe7 	bl	802750c <__ulp>
 802453e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024540:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024542:	f7de fa07 	bl	8002954 <__aeabi_dmul>
 8024546:	0032      	movs	r2, r6
 8024548:	003b      	movs	r3, r7
 802454a:	f7dd fa03 	bl	8001954 <__aeabi_dadd>
 802454e:	4a64      	ldr	r2, [pc, #400]	@ (80246e0 <_strtod_l+0xbcc>)
 8024550:	4b66      	ldr	r3, [pc, #408]	@ (80246ec <_strtod_l+0xbd8>)
 8024552:	0006      	movs	r6, r0
 8024554:	400a      	ands	r2, r1
 8024556:	429a      	cmp	r2, r3
 8024558:	d940      	bls.n	80245dc <_strtod_l+0xac8>
 802455a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802455c:	4a64      	ldr	r2, [pc, #400]	@ (80246f0 <_strtod_l+0xbdc>)
 802455e:	4293      	cmp	r3, r2
 8024560:	d103      	bne.n	802456a <_strtod_l+0xa56>
 8024562:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024564:	3301      	adds	r3, #1
 8024566:	d100      	bne.n	802456a <_strtod_l+0xa56>
 8024568:	e518      	b.n	8023f9c <_strtod_l+0x488>
 802456a:	2601      	movs	r6, #1
 802456c:	4f60      	ldr	r7, [pc, #384]	@ (80246f0 <_strtod_l+0xbdc>)
 802456e:	4276      	negs	r6, r6
 8024570:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024572:	9805      	ldr	r0, [sp, #20]
 8024574:	f002 fc86 	bl	8026e84 <_Bfree>
 8024578:	9908      	ldr	r1, [sp, #32]
 802457a:	9805      	ldr	r0, [sp, #20]
 802457c:	f002 fc82 	bl	8026e84 <_Bfree>
 8024580:	9907      	ldr	r1, [sp, #28]
 8024582:	9805      	ldr	r0, [sp, #20]
 8024584:	f002 fc7e 	bl	8026e84 <_Bfree>
 8024588:	9906      	ldr	r1, [sp, #24]
 802458a:	9805      	ldr	r0, [sp, #20]
 802458c:	f002 fc7a 	bl	8026e84 <_Bfree>
 8024590:	e617      	b.n	80241c2 <_strtod_l+0x6ae>
 8024592:	2e01      	cmp	r6, #1
 8024594:	d103      	bne.n	802459e <_strtod_l+0xa8a>
 8024596:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024598:	2b00      	cmp	r3, #0
 802459a:	d100      	bne.n	802459e <_strtod_l+0xa8a>
 802459c:	e59a      	b.n	80240d4 <_strtod_l+0x5c0>
 802459e:	2300      	movs	r3, #0
 80245a0:	4c54      	ldr	r4, [pc, #336]	@ (80246f4 <_strtod_l+0xbe0>)
 80245a2:	4d4d      	ldr	r5, [pc, #308]	@ (80246d8 <_strtod_l+0xbc4>)
 80245a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80245a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80245a8:	2400      	movs	r4, #0
 80245aa:	e7b2      	b.n	8024512 <_strtod_l+0x9fe>
 80245ac:	2400      	movs	r4, #0
 80245ae:	4d4b      	ldr	r5, [pc, #300]	@ (80246dc <_strtod_l+0xbc8>)
 80245b0:	e7aa      	b.n	8024508 <_strtod_l+0x9f4>
 80245b2:	0020      	movs	r0, r4
 80245b4:	0029      	movs	r1, r5
 80245b6:	4b49      	ldr	r3, [pc, #292]	@ (80246dc <_strtod_l+0xbc8>)
 80245b8:	2200      	movs	r2, #0
 80245ba:	f7de f9cb 	bl	8002954 <__aeabi_dmul>
 80245be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80245c0:	0004      	movs	r4, r0
 80245c2:	000d      	movs	r5, r1
 80245c4:	2b00      	cmp	r3, #0
 80245c6:	d09f      	beq.n	8024508 <_strtod_l+0x9f4>
 80245c8:	940a      	str	r4, [sp, #40]	@ 0x28
 80245ca:	950b      	str	r5, [sp, #44]	@ 0x2c
 80245cc:	e7a1      	b.n	8024512 <_strtod_l+0x9fe>
 80245ce:	2300      	movs	r3, #0
 80245d0:	4c41      	ldr	r4, [pc, #260]	@ (80246d8 <_strtod_l+0xbc4>)
 80245d2:	0025      	movs	r5, r4
 80245d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80245d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80245d8:	001c      	movs	r4, r3
 80245da:	e79a      	b.n	8024512 <_strtod_l+0x9fe>
 80245dc:	23d4      	movs	r3, #212	@ 0xd4
 80245de:	049b      	lsls	r3, r3, #18
 80245e0:	18cf      	adds	r7, r1, r3
 80245e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80245e4:	9710      	str	r7, [sp, #64]	@ 0x40
 80245e6:	2b00      	cmp	r3, #0
 80245e8:	d1c2      	bne.n	8024570 <_strtod_l+0xa5c>
 80245ea:	4b3d      	ldr	r3, [pc, #244]	@ (80246e0 <_strtod_l+0xbcc>)
 80245ec:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80245ee:	403b      	ands	r3, r7
 80245f0:	429a      	cmp	r2, r3
 80245f2:	d1bd      	bne.n	8024570 <_strtod_l+0xa5c>
 80245f4:	0020      	movs	r0, r4
 80245f6:	0029      	movs	r1, r5
 80245f8:	f7dc f846 	bl	8000688 <__aeabi_d2lz>
 80245fc:	f7dc f87e 	bl	80006fc <__aeabi_l2d>
 8024600:	0002      	movs	r2, r0
 8024602:	000b      	movs	r3, r1
 8024604:	0020      	movs	r0, r4
 8024606:	0029      	movs	r1, r5
 8024608:	f7de fc8a 	bl	8002f20 <__aeabi_dsub>
 802460c:	033c      	lsls	r4, r7, #12
 802460e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024610:	0b24      	lsrs	r4, r4, #12
 8024612:	4334      	orrs	r4, r6
 8024614:	900e      	str	r0, [sp, #56]	@ 0x38
 8024616:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024618:	4a37      	ldr	r2, [pc, #220]	@ (80246f8 <_strtod_l+0xbe4>)
 802461a:	431c      	orrs	r4, r3
 802461c:	d052      	beq.n	80246c4 <_strtod_l+0xbb0>
 802461e:	4b37      	ldr	r3, [pc, #220]	@ (80246fc <_strtod_l+0xbe8>)
 8024620:	f7db ff4c 	bl	80004bc <__aeabi_dcmplt>
 8024624:	2800      	cmp	r0, #0
 8024626:	d000      	beq.n	802462a <_strtod_l+0xb16>
 8024628:	e4c1      	b.n	8023fae <_strtod_l+0x49a>
 802462a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802462c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802462e:	4a34      	ldr	r2, [pc, #208]	@ (8024700 <_strtod_l+0xbec>)
 8024630:	4b2a      	ldr	r3, [pc, #168]	@ (80246dc <_strtod_l+0xbc8>)
 8024632:	f7db ff57 	bl	80004e4 <__aeabi_dcmpgt>
 8024636:	2800      	cmp	r0, #0
 8024638:	d09a      	beq.n	8024570 <_strtod_l+0xa5c>
 802463a:	e4b8      	b.n	8023fae <_strtod_l+0x49a>
 802463c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802463e:	2b00      	cmp	r3, #0
 8024640:	d02a      	beq.n	8024698 <_strtod_l+0xb84>
 8024642:	23d4      	movs	r3, #212	@ 0xd4
 8024644:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024646:	04db      	lsls	r3, r3, #19
 8024648:	429a      	cmp	r2, r3
 802464a:	d825      	bhi.n	8024698 <_strtod_l+0xb84>
 802464c:	0020      	movs	r0, r4
 802464e:	0029      	movs	r1, r5
 8024650:	4a2c      	ldr	r2, [pc, #176]	@ (8024704 <_strtod_l+0xbf0>)
 8024652:	4b2d      	ldr	r3, [pc, #180]	@ (8024708 <_strtod_l+0xbf4>)
 8024654:	f7db ff3c 	bl	80004d0 <__aeabi_dcmple>
 8024658:	2800      	cmp	r0, #0
 802465a:	d016      	beq.n	802468a <_strtod_l+0xb76>
 802465c:	0020      	movs	r0, r4
 802465e:	0029      	movs	r1, r5
 8024660:	f7db fff4 	bl	800064c <__aeabi_d2uiz>
 8024664:	2800      	cmp	r0, #0
 8024666:	d100      	bne.n	802466a <_strtod_l+0xb56>
 8024668:	3001      	adds	r0, #1
 802466a:	f7df f8ef 	bl	800384c <__aeabi_ui2d>
 802466e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024670:	0004      	movs	r4, r0
 8024672:	000d      	movs	r5, r1
 8024674:	2b00      	cmp	r3, #0
 8024676:	d122      	bne.n	80246be <_strtod_l+0xbaa>
 8024678:	2380      	movs	r3, #128	@ 0x80
 802467a:	061b      	lsls	r3, r3, #24
 802467c:	18cb      	adds	r3, r1, r3
 802467e:	9018      	str	r0, [sp, #96]	@ 0x60
 8024680:	9319      	str	r3, [sp, #100]	@ 0x64
 8024682:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024684:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024686:	9216      	str	r2, [sp, #88]	@ 0x58
 8024688:	9317      	str	r3, [sp, #92]	@ 0x5c
 802468a:	22d6      	movs	r2, #214	@ 0xd6
 802468c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802468e:	04d2      	lsls	r2, r2, #19
 8024690:	189b      	adds	r3, r3, r2
 8024692:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024694:	1a9b      	subs	r3, r3, r2
 8024696:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024698:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802469a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802469c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802469e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80246a0:	f002 ff34 	bl	802750c <__ulp>
 80246a4:	0002      	movs	r2, r0
 80246a6:	000b      	movs	r3, r1
 80246a8:	0030      	movs	r0, r6
 80246aa:	0039      	movs	r1, r7
 80246ac:	f7de f952 	bl	8002954 <__aeabi_dmul>
 80246b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80246b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80246b4:	f7dd f94e 	bl	8001954 <__aeabi_dadd>
 80246b8:	0006      	movs	r6, r0
 80246ba:	000f      	movs	r7, r1
 80246bc:	e791      	b.n	80245e2 <_strtod_l+0xace>
 80246be:	9418      	str	r4, [sp, #96]	@ 0x60
 80246c0:	9519      	str	r5, [sp, #100]	@ 0x64
 80246c2:	e7de      	b.n	8024682 <_strtod_l+0xb6e>
 80246c4:	4b11      	ldr	r3, [pc, #68]	@ (802470c <_strtod_l+0xbf8>)
 80246c6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80246c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80246ca:	f7db fef7 	bl	80004bc <__aeabi_dcmplt>
 80246ce:	e7b2      	b.n	8024636 <_strtod_l+0xb22>
 80246d0:	fff00000 	.word	0xfff00000
 80246d4:	000fffff 	.word	0x000fffff
 80246d8:	3ff00000 	.word	0x3ff00000
 80246dc:	3fe00000 	.word	0x3fe00000
 80246e0:	7ff00000 	.word	0x7ff00000
 80246e4:	7fe00000 	.word	0x7fe00000
 80246e8:	fcb00000 	.word	0xfcb00000
 80246ec:	7c9fffff 	.word	0x7c9fffff
 80246f0:	7fefffff 	.word	0x7fefffff
 80246f4:	bff00000 	.word	0xbff00000
 80246f8:	94a03595 	.word	0x94a03595
 80246fc:	3fdfffff 	.word	0x3fdfffff
 8024700:	35afe535 	.word	0x35afe535
 8024704:	ffc00000 	.word	0xffc00000
 8024708:	41dfffff 	.word	0x41dfffff
 802470c:	3fcfffff 	.word	0x3fcfffff

08024710 <strtod>:
 8024710:	b510      	push	{r4, lr}
 8024712:	4c04      	ldr	r4, [pc, #16]	@ (8024724 <strtod+0x14>)
 8024714:	000a      	movs	r2, r1
 8024716:	0001      	movs	r1, r0
 8024718:	4b03      	ldr	r3, [pc, #12]	@ (8024728 <strtod+0x18>)
 802471a:	6820      	ldr	r0, [r4, #0]
 802471c:	f7ff f9fa 	bl	8023b14 <_strtod_l>
 8024720:	bd10      	pop	{r4, pc}
 8024722:	46c0      	nop			@ (mov r8, r8)
 8024724:	200003e0 	.word	0x200003e0
 8024728:	20000274 	.word	0x20000274

0802472c <_strtol_l.isra.0>:
 802472c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802472e:	b085      	sub	sp, #20
 8024730:	0017      	movs	r7, r2
 8024732:	001e      	movs	r6, r3
 8024734:	9003      	str	r0, [sp, #12]
 8024736:	9101      	str	r1, [sp, #4]
 8024738:	2b24      	cmp	r3, #36	@ 0x24
 802473a:	d823      	bhi.n	8024784 <_strtol_l.isra.0+0x58>
 802473c:	000c      	movs	r4, r1
 802473e:	2b01      	cmp	r3, #1
 8024740:	d020      	beq.n	8024784 <_strtol_l.isra.0+0x58>
 8024742:	4b3d      	ldr	r3, [pc, #244]	@ (8024838 <_strtol_l.isra.0+0x10c>)
 8024744:	2208      	movs	r2, #8
 8024746:	469c      	mov	ip, r3
 8024748:	0023      	movs	r3, r4
 802474a:	4661      	mov	r1, ip
 802474c:	781d      	ldrb	r5, [r3, #0]
 802474e:	3401      	adds	r4, #1
 8024750:	5d48      	ldrb	r0, [r1, r5]
 8024752:	0001      	movs	r1, r0
 8024754:	4011      	ands	r1, r2
 8024756:	4210      	tst	r0, r2
 8024758:	d1f6      	bne.n	8024748 <_strtol_l.isra.0+0x1c>
 802475a:	2d2d      	cmp	r5, #45	@ 0x2d
 802475c:	d119      	bne.n	8024792 <_strtol_l.isra.0+0x66>
 802475e:	7825      	ldrb	r5, [r4, #0]
 8024760:	1c9c      	adds	r4, r3, #2
 8024762:	2301      	movs	r3, #1
 8024764:	9300      	str	r3, [sp, #0]
 8024766:	2210      	movs	r2, #16
 8024768:	0033      	movs	r3, r6
 802476a:	4393      	bics	r3, r2
 802476c:	d11d      	bne.n	80247aa <_strtol_l.isra.0+0x7e>
 802476e:	2d30      	cmp	r5, #48	@ 0x30
 8024770:	d115      	bne.n	802479e <_strtol_l.isra.0+0x72>
 8024772:	2120      	movs	r1, #32
 8024774:	7823      	ldrb	r3, [r4, #0]
 8024776:	438b      	bics	r3, r1
 8024778:	2b58      	cmp	r3, #88	@ 0x58
 802477a:	d110      	bne.n	802479e <_strtol_l.isra.0+0x72>
 802477c:	7865      	ldrb	r5, [r4, #1]
 802477e:	3402      	adds	r4, #2
 8024780:	2610      	movs	r6, #16
 8024782:	e012      	b.n	80247aa <_strtol_l.isra.0+0x7e>
 8024784:	f001 f80a 	bl	802579c <__errno>
 8024788:	2316      	movs	r3, #22
 802478a:	6003      	str	r3, [r0, #0]
 802478c:	2000      	movs	r0, #0
 802478e:	b005      	add	sp, #20
 8024790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024792:	9100      	str	r1, [sp, #0]
 8024794:	2d2b      	cmp	r5, #43	@ 0x2b
 8024796:	d1e6      	bne.n	8024766 <_strtol_l.isra.0+0x3a>
 8024798:	7825      	ldrb	r5, [r4, #0]
 802479a:	1c9c      	adds	r4, r3, #2
 802479c:	e7e3      	b.n	8024766 <_strtol_l.isra.0+0x3a>
 802479e:	2e00      	cmp	r6, #0
 80247a0:	d1ee      	bne.n	8024780 <_strtol_l.isra.0+0x54>
 80247a2:	360a      	adds	r6, #10
 80247a4:	2d30      	cmp	r5, #48	@ 0x30
 80247a6:	d100      	bne.n	80247aa <_strtol_l.isra.0+0x7e>
 80247a8:	3e02      	subs	r6, #2
 80247aa:	4a24      	ldr	r2, [pc, #144]	@ (802483c <_strtol_l.isra.0+0x110>)
 80247ac:	9b00      	ldr	r3, [sp, #0]
 80247ae:	4694      	mov	ip, r2
 80247b0:	4463      	add	r3, ip
 80247b2:	0031      	movs	r1, r6
 80247b4:	0018      	movs	r0, r3
 80247b6:	9302      	str	r3, [sp, #8]
 80247b8:	f7db fd7a 	bl	80002b0 <__aeabi_uidivmod>
 80247bc:	2200      	movs	r2, #0
 80247be:	4684      	mov	ip, r0
 80247c0:	0010      	movs	r0, r2
 80247c2:	002b      	movs	r3, r5
 80247c4:	3b30      	subs	r3, #48	@ 0x30
 80247c6:	2b09      	cmp	r3, #9
 80247c8:	d811      	bhi.n	80247ee <_strtol_l.isra.0+0xc2>
 80247ca:	001d      	movs	r5, r3
 80247cc:	42ae      	cmp	r6, r5
 80247ce:	dd1d      	ble.n	802480c <_strtol_l.isra.0+0xe0>
 80247d0:	1c53      	adds	r3, r2, #1
 80247d2:	d009      	beq.n	80247e8 <_strtol_l.isra.0+0xbc>
 80247d4:	2201      	movs	r2, #1
 80247d6:	4252      	negs	r2, r2
 80247d8:	4584      	cmp	ip, r0
 80247da:	d305      	bcc.n	80247e8 <_strtol_l.isra.0+0xbc>
 80247dc:	d101      	bne.n	80247e2 <_strtol_l.isra.0+0xb6>
 80247de:	42a9      	cmp	r1, r5
 80247e0:	db11      	blt.n	8024806 <_strtol_l.isra.0+0xda>
 80247e2:	2201      	movs	r2, #1
 80247e4:	4370      	muls	r0, r6
 80247e6:	1828      	adds	r0, r5, r0
 80247e8:	7825      	ldrb	r5, [r4, #0]
 80247ea:	3401      	adds	r4, #1
 80247ec:	e7e9      	b.n	80247c2 <_strtol_l.isra.0+0x96>
 80247ee:	002b      	movs	r3, r5
 80247f0:	3b41      	subs	r3, #65	@ 0x41
 80247f2:	2b19      	cmp	r3, #25
 80247f4:	d801      	bhi.n	80247fa <_strtol_l.isra.0+0xce>
 80247f6:	3d37      	subs	r5, #55	@ 0x37
 80247f8:	e7e8      	b.n	80247cc <_strtol_l.isra.0+0xa0>
 80247fa:	002b      	movs	r3, r5
 80247fc:	3b61      	subs	r3, #97	@ 0x61
 80247fe:	2b19      	cmp	r3, #25
 8024800:	d804      	bhi.n	802480c <_strtol_l.isra.0+0xe0>
 8024802:	3d57      	subs	r5, #87	@ 0x57
 8024804:	e7e2      	b.n	80247cc <_strtol_l.isra.0+0xa0>
 8024806:	2201      	movs	r2, #1
 8024808:	4252      	negs	r2, r2
 802480a:	e7ed      	b.n	80247e8 <_strtol_l.isra.0+0xbc>
 802480c:	1c53      	adds	r3, r2, #1
 802480e:	d108      	bne.n	8024822 <_strtol_l.isra.0+0xf6>
 8024810:	2322      	movs	r3, #34	@ 0x22
 8024812:	9a03      	ldr	r2, [sp, #12]
 8024814:	9802      	ldr	r0, [sp, #8]
 8024816:	6013      	str	r3, [r2, #0]
 8024818:	2f00      	cmp	r7, #0
 802481a:	d0b8      	beq.n	802478e <_strtol_l.isra.0+0x62>
 802481c:	1e63      	subs	r3, r4, #1
 802481e:	9301      	str	r3, [sp, #4]
 8024820:	e007      	b.n	8024832 <_strtol_l.isra.0+0x106>
 8024822:	9b00      	ldr	r3, [sp, #0]
 8024824:	2b00      	cmp	r3, #0
 8024826:	d000      	beq.n	802482a <_strtol_l.isra.0+0xfe>
 8024828:	4240      	negs	r0, r0
 802482a:	2f00      	cmp	r7, #0
 802482c:	d0af      	beq.n	802478e <_strtol_l.isra.0+0x62>
 802482e:	2a00      	cmp	r2, #0
 8024830:	d1f4      	bne.n	802481c <_strtol_l.isra.0+0xf0>
 8024832:	9b01      	ldr	r3, [sp, #4]
 8024834:	603b      	str	r3, [r7, #0]
 8024836:	e7aa      	b.n	802478e <_strtol_l.isra.0+0x62>
 8024838:	0802e1f9 	.word	0x0802e1f9
 802483c:	7fffffff 	.word	0x7fffffff

08024840 <strtol>:
 8024840:	b510      	push	{r4, lr}
 8024842:	4c04      	ldr	r4, [pc, #16]	@ (8024854 <strtol+0x14>)
 8024844:	0013      	movs	r3, r2
 8024846:	000a      	movs	r2, r1
 8024848:	0001      	movs	r1, r0
 802484a:	6820      	ldr	r0, [r4, #0]
 802484c:	f7ff ff6e 	bl	802472c <_strtol_l.isra.0>
 8024850:	bd10      	pop	{r4, pc}
 8024852:	46c0      	nop			@ (mov r8, r8)
 8024854:	200003e0 	.word	0x200003e0

08024858 <__cvt>:
 8024858:	b5f0      	push	{r4, r5, r6, r7, lr}
 802485a:	001f      	movs	r7, r3
 802485c:	2300      	movs	r3, #0
 802485e:	0016      	movs	r6, r2
 8024860:	b08b      	sub	sp, #44	@ 0x2c
 8024862:	429f      	cmp	r7, r3
 8024864:	da04      	bge.n	8024870 <__cvt+0x18>
 8024866:	2180      	movs	r1, #128	@ 0x80
 8024868:	0609      	lsls	r1, r1, #24
 802486a:	187b      	adds	r3, r7, r1
 802486c:	001f      	movs	r7, r3
 802486e:	232d      	movs	r3, #45	@ 0x2d
 8024870:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024872:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8024874:	7013      	strb	r3, [r2, #0]
 8024876:	2320      	movs	r3, #32
 8024878:	2203      	movs	r2, #3
 802487a:	439d      	bics	r5, r3
 802487c:	2d46      	cmp	r5, #70	@ 0x46
 802487e:	d007      	beq.n	8024890 <__cvt+0x38>
 8024880:	002b      	movs	r3, r5
 8024882:	3b45      	subs	r3, #69	@ 0x45
 8024884:	4259      	negs	r1, r3
 8024886:	414b      	adcs	r3, r1
 8024888:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802488a:	3a01      	subs	r2, #1
 802488c:	18cb      	adds	r3, r1, r3
 802488e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024890:	ab09      	add	r3, sp, #36	@ 0x24
 8024892:	9304      	str	r3, [sp, #16]
 8024894:	ab08      	add	r3, sp, #32
 8024896:	9303      	str	r3, [sp, #12]
 8024898:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802489a:	9200      	str	r2, [sp, #0]
 802489c:	9302      	str	r3, [sp, #8]
 802489e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80248a0:	0032      	movs	r2, r6
 80248a2:	9301      	str	r3, [sp, #4]
 80248a4:	003b      	movs	r3, r7
 80248a6:	f001 f847 	bl	8025938 <_dtoa_r>
 80248aa:	0004      	movs	r4, r0
 80248ac:	2d47      	cmp	r5, #71	@ 0x47
 80248ae:	d11b      	bne.n	80248e8 <__cvt+0x90>
 80248b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80248b2:	07db      	lsls	r3, r3, #31
 80248b4:	d511      	bpl.n	80248da <__cvt+0x82>
 80248b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80248b8:	18c3      	adds	r3, r0, r3
 80248ba:	9307      	str	r3, [sp, #28]
 80248bc:	2200      	movs	r2, #0
 80248be:	2300      	movs	r3, #0
 80248c0:	0030      	movs	r0, r6
 80248c2:	0039      	movs	r1, r7
 80248c4:	f7db fdf4 	bl	80004b0 <__aeabi_dcmpeq>
 80248c8:	2800      	cmp	r0, #0
 80248ca:	d001      	beq.n	80248d0 <__cvt+0x78>
 80248cc:	9b07      	ldr	r3, [sp, #28]
 80248ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80248d0:	2230      	movs	r2, #48	@ 0x30
 80248d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248d4:	9907      	ldr	r1, [sp, #28]
 80248d6:	428b      	cmp	r3, r1
 80248d8:	d320      	bcc.n	802491c <__cvt+0xc4>
 80248da:	0020      	movs	r0, r4
 80248dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80248de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80248e0:	1b1b      	subs	r3, r3, r4
 80248e2:	6013      	str	r3, [r2, #0]
 80248e4:	b00b      	add	sp, #44	@ 0x2c
 80248e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80248e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80248ea:	18c3      	adds	r3, r0, r3
 80248ec:	9307      	str	r3, [sp, #28]
 80248ee:	2d46      	cmp	r5, #70	@ 0x46
 80248f0:	d1e4      	bne.n	80248bc <__cvt+0x64>
 80248f2:	7803      	ldrb	r3, [r0, #0]
 80248f4:	2b30      	cmp	r3, #48	@ 0x30
 80248f6:	d10c      	bne.n	8024912 <__cvt+0xba>
 80248f8:	2200      	movs	r2, #0
 80248fa:	2300      	movs	r3, #0
 80248fc:	0030      	movs	r0, r6
 80248fe:	0039      	movs	r1, r7
 8024900:	f7db fdd6 	bl	80004b0 <__aeabi_dcmpeq>
 8024904:	2800      	cmp	r0, #0
 8024906:	d104      	bne.n	8024912 <__cvt+0xba>
 8024908:	2301      	movs	r3, #1
 802490a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802490c:	1a9b      	subs	r3, r3, r2
 802490e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024910:	6013      	str	r3, [r2, #0]
 8024912:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024914:	9a07      	ldr	r2, [sp, #28]
 8024916:	681b      	ldr	r3, [r3, #0]
 8024918:	18d3      	adds	r3, r2, r3
 802491a:	e7ce      	b.n	80248ba <__cvt+0x62>
 802491c:	1c59      	adds	r1, r3, #1
 802491e:	9109      	str	r1, [sp, #36]	@ 0x24
 8024920:	701a      	strb	r2, [r3, #0]
 8024922:	e7d6      	b.n	80248d2 <__cvt+0x7a>

08024924 <__exponent>:
 8024924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024926:	232b      	movs	r3, #43	@ 0x2b
 8024928:	b085      	sub	sp, #20
 802492a:	0005      	movs	r5, r0
 802492c:	1e0c      	subs	r4, r1, #0
 802492e:	7002      	strb	r2, [r0, #0]
 8024930:	da01      	bge.n	8024936 <__exponent+0x12>
 8024932:	424c      	negs	r4, r1
 8024934:	3302      	adds	r3, #2
 8024936:	706b      	strb	r3, [r5, #1]
 8024938:	2c09      	cmp	r4, #9
 802493a:	dd2c      	ble.n	8024996 <__exponent+0x72>
 802493c:	ab02      	add	r3, sp, #8
 802493e:	1dde      	adds	r6, r3, #7
 8024940:	0020      	movs	r0, r4
 8024942:	210a      	movs	r1, #10
 8024944:	f7db fd9e 	bl	8000484 <__aeabi_idivmod>
 8024948:	0037      	movs	r7, r6
 802494a:	3130      	adds	r1, #48	@ 0x30
 802494c:	3e01      	subs	r6, #1
 802494e:	0020      	movs	r0, r4
 8024950:	7031      	strb	r1, [r6, #0]
 8024952:	210a      	movs	r1, #10
 8024954:	9401      	str	r4, [sp, #4]
 8024956:	f7db fcaf 	bl	80002b8 <__divsi3>
 802495a:	9b01      	ldr	r3, [sp, #4]
 802495c:	0004      	movs	r4, r0
 802495e:	2b63      	cmp	r3, #99	@ 0x63
 8024960:	dcee      	bgt.n	8024940 <__exponent+0x1c>
 8024962:	1eba      	subs	r2, r7, #2
 8024964:	1ca8      	adds	r0, r5, #2
 8024966:	0001      	movs	r1, r0
 8024968:	0013      	movs	r3, r2
 802496a:	3430      	adds	r4, #48	@ 0x30
 802496c:	7014      	strb	r4, [r2, #0]
 802496e:	ac02      	add	r4, sp, #8
 8024970:	3407      	adds	r4, #7
 8024972:	429c      	cmp	r4, r3
 8024974:	d80a      	bhi.n	802498c <__exponent+0x68>
 8024976:	2300      	movs	r3, #0
 8024978:	4294      	cmp	r4, r2
 802497a:	d303      	bcc.n	8024984 <__exponent+0x60>
 802497c:	3309      	adds	r3, #9
 802497e:	aa02      	add	r2, sp, #8
 8024980:	189b      	adds	r3, r3, r2
 8024982:	1bdb      	subs	r3, r3, r7
 8024984:	18c0      	adds	r0, r0, r3
 8024986:	1b40      	subs	r0, r0, r5
 8024988:	b005      	add	sp, #20
 802498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802498c:	781c      	ldrb	r4, [r3, #0]
 802498e:	3301      	adds	r3, #1
 8024990:	700c      	strb	r4, [r1, #0]
 8024992:	3101      	adds	r1, #1
 8024994:	e7eb      	b.n	802496e <__exponent+0x4a>
 8024996:	2330      	movs	r3, #48	@ 0x30
 8024998:	18e4      	adds	r4, r4, r3
 802499a:	70ab      	strb	r3, [r5, #2]
 802499c:	1d28      	adds	r0, r5, #4
 802499e:	70ec      	strb	r4, [r5, #3]
 80249a0:	e7f1      	b.n	8024986 <__exponent+0x62>
	...

080249a4 <_printf_float>:
 80249a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80249a6:	b097      	sub	sp, #92	@ 0x5c
 80249a8:	000d      	movs	r5, r1
 80249aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80249ac:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80249ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80249b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80249b2:	f000 fea1 	bl	80256f8 <_localeconv_r>
 80249b6:	6803      	ldr	r3, [r0, #0]
 80249b8:	0018      	movs	r0, r3
 80249ba:	930d      	str	r3, [sp, #52]	@ 0x34
 80249bc:	f7db fbd6 	bl	800016c <strlen>
 80249c0:	2300      	movs	r3, #0
 80249c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80249c4:	9314      	str	r3, [sp, #80]	@ 0x50
 80249c6:	7e2b      	ldrb	r3, [r5, #24]
 80249c8:	2207      	movs	r2, #7
 80249ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80249cc:	682b      	ldr	r3, [r5, #0]
 80249ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80249d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80249d2:	6823      	ldr	r3, [r4, #0]
 80249d4:	05c9      	lsls	r1, r1, #23
 80249d6:	d545      	bpl.n	8024a64 <_printf_float+0xc0>
 80249d8:	189b      	adds	r3, r3, r2
 80249da:	4393      	bics	r3, r2
 80249dc:	001a      	movs	r2, r3
 80249de:	3208      	adds	r2, #8
 80249e0:	6022      	str	r2, [r4, #0]
 80249e2:	2201      	movs	r2, #1
 80249e4:	681e      	ldr	r6, [r3, #0]
 80249e6:	685f      	ldr	r7, [r3, #4]
 80249e8:	007b      	lsls	r3, r7, #1
 80249ea:	085b      	lsrs	r3, r3, #1
 80249ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80249ee:	9610      	str	r6, [sp, #64]	@ 0x40
 80249f0:	64ae      	str	r6, [r5, #72]	@ 0x48
 80249f2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80249f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80249f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80249f8:	4ba7      	ldr	r3, [pc, #668]	@ (8024c98 <_printf_float+0x2f4>)
 80249fa:	4252      	negs	r2, r2
 80249fc:	f7de fe9a 	bl	8003734 <__aeabi_dcmpun>
 8024a00:	2800      	cmp	r0, #0
 8024a02:	d131      	bne.n	8024a68 <_printf_float+0xc4>
 8024a04:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024a06:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024a08:	2201      	movs	r2, #1
 8024a0a:	4ba3      	ldr	r3, [pc, #652]	@ (8024c98 <_printf_float+0x2f4>)
 8024a0c:	4252      	negs	r2, r2
 8024a0e:	f7db fd5f 	bl	80004d0 <__aeabi_dcmple>
 8024a12:	2800      	cmp	r0, #0
 8024a14:	d128      	bne.n	8024a68 <_printf_float+0xc4>
 8024a16:	2200      	movs	r2, #0
 8024a18:	2300      	movs	r3, #0
 8024a1a:	0030      	movs	r0, r6
 8024a1c:	0039      	movs	r1, r7
 8024a1e:	f7db fd4d 	bl	80004bc <__aeabi_dcmplt>
 8024a22:	2800      	cmp	r0, #0
 8024a24:	d003      	beq.n	8024a2e <_printf_float+0x8a>
 8024a26:	002b      	movs	r3, r5
 8024a28:	222d      	movs	r2, #45	@ 0x2d
 8024a2a:	3343      	adds	r3, #67	@ 0x43
 8024a2c:	701a      	strb	r2, [r3, #0]
 8024a2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024a30:	4f9a      	ldr	r7, [pc, #616]	@ (8024c9c <_printf_float+0x2f8>)
 8024a32:	2b47      	cmp	r3, #71	@ 0x47
 8024a34:	d800      	bhi.n	8024a38 <_printf_float+0x94>
 8024a36:	4f9a      	ldr	r7, [pc, #616]	@ (8024ca0 <_printf_float+0x2fc>)
 8024a38:	2303      	movs	r3, #3
 8024a3a:	2400      	movs	r4, #0
 8024a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024a3e:	612b      	str	r3, [r5, #16]
 8024a40:	3301      	adds	r3, #1
 8024a42:	439a      	bics	r2, r3
 8024a44:	602a      	str	r2, [r5, #0]
 8024a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024a48:	0029      	movs	r1, r5
 8024a4a:	9300      	str	r3, [sp, #0]
 8024a4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024a4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024a50:	aa15      	add	r2, sp, #84	@ 0x54
 8024a52:	f000 f9e5 	bl	8024e20 <_printf_common>
 8024a56:	3001      	adds	r0, #1
 8024a58:	d000      	beq.n	8024a5c <_printf_float+0xb8>
 8024a5a:	e09e      	b.n	8024b9a <_printf_float+0x1f6>
 8024a5c:	2001      	movs	r0, #1
 8024a5e:	4240      	negs	r0, r0
 8024a60:	b017      	add	sp, #92	@ 0x5c
 8024a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a64:	3307      	adds	r3, #7
 8024a66:	e7b8      	b.n	80249da <_printf_float+0x36>
 8024a68:	0032      	movs	r2, r6
 8024a6a:	003b      	movs	r3, r7
 8024a6c:	0030      	movs	r0, r6
 8024a6e:	0039      	movs	r1, r7
 8024a70:	f7de fe60 	bl	8003734 <__aeabi_dcmpun>
 8024a74:	2800      	cmp	r0, #0
 8024a76:	d00b      	beq.n	8024a90 <_printf_float+0xec>
 8024a78:	2f00      	cmp	r7, #0
 8024a7a:	da03      	bge.n	8024a84 <_printf_float+0xe0>
 8024a7c:	002b      	movs	r3, r5
 8024a7e:	222d      	movs	r2, #45	@ 0x2d
 8024a80:	3343      	adds	r3, #67	@ 0x43
 8024a82:	701a      	strb	r2, [r3, #0]
 8024a84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024a86:	4f87      	ldr	r7, [pc, #540]	@ (8024ca4 <_printf_float+0x300>)
 8024a88:	2b47      	cmp	r3, #71	@ 0x47
 8024a8a:	d8d5      	bhi.n	8024a38 <_printf_float+0x94>
 8024a8c:	4f86      	ldr	r7, [pc, #536]	@ (8024ca8 <_printf_float+0x304>)
 8024a8e:	e7d3      	b.n	8024a38 <_printf_float+0x94>
 8024a90:	2220      	movs	r2, #32
 8024a92:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024a94:	686b      	ldr	r3, [r5, #4]
 8024a96:	4394      	bics	r4, r2
 8024a98:	1c5a      	adds	r2, r3, #1
 8024a9a:	d146      	bne.n	8024b2a <_printf_float+0x186>
 8024a9c:	3307      	adds	r3, #7
 8024a9e:	606b      	str	r3, [r5, #4]
 8024aa0:	2380      	movs	r3, #128	@ 0x80
 8024aa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024aa4:	00db      	lsls	r3, r3, #3
 8024aa6:	4313      	orrs	r3, r2
 8024aa8:	2200      	movs	r2, #0
 8024aaa:	602b      	str	r3, [r5, #0]
 8024aac:	9206      	str	r2, [sp, #24]
 8024aae:	aa14      	add	r2, sp, #80	@ 0x50
 8024ab0:	9205      	str	r2, [sp, #20]
 8024ab2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024ab4:	a90a      	add	r1, sp, #40	@ 0x28
 8024ab6:	9204      	str	r2, [sp, #16]
 8024ab8:	aa13      	add	r2, sp, #76	@ 0x4c
 8024aba:	9203      	str	r2, [sp, #12]
 8024abc:	2223      	movs	r2, #35	@ 0x23
 8024abe:	1852      	adds	r2, r2, r1
 8024ac0:	9202      	str	r2, [sp, #8]
 8024ac2:	9301      	str	r3, [sp, #4]
 8024ac4:	686b      	ldr	r3, [r5, #4]
 8024ac6:	0032      	movs	r2, r6
 8024ac8:	9300      	str	r3, [sp, #0]
 8024aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024acc:	003b      	movs	r3, r7
 8024ace:	f7ff fec3 	bl	8024858 <__cvt>
 8024ad2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024ad4:	0007      	movs	r7, r0
 8024ad6:	2c47      	cmp	r4, #71	@ 0x47
 8024ad8:	d12d      	bne.n	8024b36 <_printf_float+0x192>
 8024ada:	1cd3      	adds	r3, r2, #3
 8024adc:	db02      	blt.n	8024ae4 <_printf_float+0x140>
 8024ade:	686b      	ldr	r3, [r5, #4]
 8024ae0:	429a      	cmp	r2, r3
 8024ae2:	dd47      	ble.n	8024b74 <_printf_float+0x1d0>
 8024ae4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ae6:	3b02      	subs	r3, #2
 8024ae8:	b2db      	uxtb	r3, r3
 8024aea:	930c      	str	r3, [sp, #48]	@ 0x30
 8024aec:	0028      	movs	r0, r5
 8024aee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024af0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024af2:	3901      	subs	r1, #1
 8024af4:	3050      	adds	r0, #80	@ 0x50
 8024af6:	9113      	str	r1, [sp, #76]	@ 0x4c
 8024af8:	f7ff ff14 	bl	8024924 <__exponent>
 8024afc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024afe:	0004      	movs	r4, r0
 8024b00:	1813      	adds	r3, r2, r0
 8024b02:	612b      	str	r3, [r5, #16]
 8024b04:	2a01      	cmp	r2, #1
 8024b06:	dc02      	bgt.n	8024b0e <_printf_float+0x16a>
 8024b08:	682a      	ldr	r2, [r5, #0]
 8024b0a:	07d2      	lsls	r2, r2, #31
 8024b0c:	d501      	bpl.n	8024b12 <_printf_float+0x16e>
 8024b0e:	3301      	adds	r3, #1
 8024b10:	612b      	str	r3, [r5, #16]
 8024b12:	2323      	movs	r3, #35	@ 0x23
 8024b14:	aa0a      	add	r2, sp, #40	@ 0x28
 8024b16:	189b      	adds	r3, r3, r2
 8024b18:	781b      	ldrb	r3, [r3, #0]
 8024b1a:	2b00      	cmp	r3, #0
 8024b1c:	d100      	bne.n	8024b20 <_printf_float+0x17c>
 8024b1e:	e792      	b.n	8024a46 <_printf_float+0xa2>
 8024b20:	002b      	movs	r3, r5
 8024b22:	222d      	movs	r2, #45	@ 0x2d
 8024b24:	3343      	adds	r3, #67	@ 0x43
 8024b26:	701a      	strb	r2, [r3, #0]
 8024b28:	e78d      	b.n	8024a46 <_printf_float+0xa2>
 8024b2a:	2c47      	cmp	r4, #71	@ 0x47
 8024b2c:	d1b8      	bne.n	8024aa0 <_printf_float+0xfc>
 8024b2e:	2b00      	cmp	r3, #0
 8024b30:	d1b6      	bne.n	8024aa0 <_printf_float+0xfc>
 8024b32:	3301      	adds	r3, #1
 8024b34:	e7b3      	b.n	8024a9e <_printf_float+0xfa>
 8024b36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024b38:	2b65      	cmp	r3, #101	@ 0x65
 8024b3a:	d9d7      	bls.n	8024aec <_printf_float+0x148>
 8024b3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024b3e:	2b66      	cmp	r3, #102	@ 0x66
 8024b40:	d11a      	bne.n	8024b78 <_printf_float+0x1d4>
 8024b42:	686b      	ldr	r3, [r5, #4]
 8024b44:	2a00      	cmp	r2, #0
 8024b46:	dd09      	ble.n	8024b5c <_printf_float+0x1b8>
 8024b48:	612a      	str	r2, [r5, #16]
 8024b4a:	2b00      	cmp	r3, #0
 8024b4c:	d102      	bne.n	8024b54 <_printf_float+0x1b0>
 8024b4e:	6829      	ldr	r1, [r5, #0]
 8024b50:	07c9      	lsls	r1, r1, #31
 8024b52:	d50b      	bpl.n	8024b6c <_printf_float+0x1c8>
 8024b54:	3301      	adds	r3, #1
 8024b56:	189b      	adds	r3, r3, r2
 8024b58:	612b      	str	r3, [r5, #16]
 8024b5a:	e007      	b.n	8024b6c <_printf_float+0x1c8>
 8024b5c:	2b00      	cmp	r3, #0
 8024b5e:	d103      	bne.n	8024b68 <_printf_float+0x1c4>
 8024b60:	2201      	movs	r2, #1
 8024b62:	6829      	ldr	r1, [r5, #0]
 8024b64:	4211      	tst	r1, r2
 8024b66:	d000      	beq.n	8024b6a <_printf_float+0x1c6>
 8024b68:	1c9a      	adds	r2, r3, #2
 8024b6a:	612a      	str	r2, [r5, #16]
 8024b6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024b6e:	2400      	movs	r4, #0
 8024b70:	65ab      	str	r3, [r5, #88]	@ 0x58
 8024b72:	e7ce      	b.n	8024b12 <_printf_float+0x16e>
 8024b74:	2367      	movs	r3, #103	@ 0x67
 8024b76:	930c      	str	r3, [sp, #48]	@ 0x30
 8024b78:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024b7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024b7c:	4299      	cmp	r1, r3
 8024b7e:	db06      	blt.n	8024b8e <_printf_float+0x1ea>
 8024b80:	682b      	ldr	r3, [r5, #0]
 8024b82:	6129      	str	r1, [r5, #16]
 8024b84:	07db      	lsls	r3, r3, #31
 8024b86:	d5f1      	bpl.n	8024b6c <_printf_float+0x1c8>
 8024b88:	3101      	adds	r1, #1
 8024b8a:	6129      	str	r1, [r5, #16]
 8024b8c:	e7ee      	b.n	8024b6c <_printf_float+0x1c8>
 8024b8e:	2201      	movs	r2, #1
 8024b90:	2900      	cmp	r1, #0
 8024b92:	dce0      	bgt.n	8024b56 <_printf_float+0x1b2>
 8024b94:	1892      	adds	r2, r2, r2
 8024b96:	1a52      	subs	r2, r2, r1
 8024b98:	e7dd      	b.n	8024b56 <_printf_float+0x1b2>
 8024b9a:	682a      	ldr	r2, [r5, #0]
 8024b9c:	0553      	lsls	r3, r2, #21
 8024b9e:	d408      	bmi.n	8024bb2 <_printf_float+0x20e>
 8024ba0:	692b      	ldr	r3, [r5, #16]
 8024ba2:	003a      	movs	r2, r7
 8024ba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024ba8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024baa:	47a0      	blx	r4
 8024bac:	3001      	adds	r0, #1
 8024bae:	d129      	bne.n	8024c04 <_printf_float+0x260>
 8024bb0:	e754      	b.n	8024a5c <_printf_float+0xb8>
 8024bb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024bb4:	2b65      	cmp	r3, #101	@ 0x65
 8024bb6:	d800      	bhi.n	8024bba <_printf_float+0x216>
 8024bb8:	e0db      	b.n	8024d72 <_printf_float+0x3ce>
 8024bba:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8024bbc:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8024bbe:	2200      	movs	r2, #0
 8024bc0:	2300      	movs	r3, #0
 8024bc2:	f7db fc75 	bl	80004b0 <__aeabi_dcmpeq>
 8024bc6:	2800      	cmp	r0, #0
 8024bc8:	d033      	beq.n	8024c32 <_printf_float+0x28e>
 8024bca:	2301      	movs	r3, #1
 8024bcc:	4a37      	ldr	r2, [pc, #220]	@ (8024cac <_printf_float+0x308>)
 8024bce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024bd0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024bd2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024bd4:	47a0      	blx	r4
 8024bd6:	3001      	adds	r0, #1
 8024bd8:	d100      	bne.n	8024bdc <_printf_float+0x238>
 8024bda:	e73f      	b.n	8024a5c <_printf_float+0xb8>
 8024bdc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024bde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024be0:	42b3      	cmp	r3, r6
 8024be2:	db02      	blt.n	8024bea <_printf_float+0x246>
 8024be4:	682b      	ldr	r3, [r5, #0]
 8024be6:	07db      	lsls	r3, r3, #31
 8024be8:	d50c      	bpl.n	8024c04 <_printf_float+0x260>
 8024bea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024bee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024bf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024bf4:	47a0      	blx	r4
 8024bf6:	2400      	movs	r4, #0
 8024bf8:	3001      	adds	r0, #1
 8024bfa:	d100      	bne.n	8024bfe <_printf_float+0x25a>
 8024bfc:	e72e      	b.n	8024a5c <_printf_float+0xb8>
 8024bfe:	1e73      	subs	r3, r6, #1
 8024c00:	42a3      	cmp	r3, r4
 8024c02:	dc0a      	bgt.n	8024c1a <_printf_float+0x276>
 8024c04:	682b      	ldr	r3, [r5, #0]
 8024c06:	079b      	lsls	r3, r3, #30
 8024c08:	d500      	bpl.n	8024c0c <_printf_float+0x268>
 8024c0a:	e106      	b.n	8024e1a <_printf_float+0x476>
 8024c0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024c0e:	68e8      	ldr	r0, [r5, #12]
 8024c10:	4298      	cmp	r0, r3
 8024c12:	db00      	blt.n	8024c16 <_printf_float+0x272>
 8024c14:	e724      	b.n	8024a60 <_printf_float+0xbc>
 8024c16:	0018      	movs	r0, r3
 8024c18:	e722      	b.n	8024a60 <_printf_float+0xbc>
 8024c1a:	002a      	movs	r2, r5
 8024c1c:	2301      	movs	r3, #1
 8024c1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024c20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024c22:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024c24:	321a      	adds	r2, #26
 8024c26:	47b8      	blx	r7
 8024c28:	3001      	adds	r0, #1
 8024c2a:	d100      	bne.n	8024c2e <_printf_float+0x28a>
 8024c2c:	e716      	b.n	8024a5c <_printf_float+0xb8>
 8024c2e:	3401      	adds	r4, #1
 8024c30:	e7e5      	b.n	8024bfe <_printf_float+0x25a>
 8024c32:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	dc3b      	bgt.n	8024cb0 <_printf_float+0x30c>
 8024c38:	2301      	movs	r3, #1
 8024c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8024cac <_printf_float+0x308>)
 8024c3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024c3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024c40:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024c42:	47a0      	blx	r4
 8024c44:	3001      	adds	r0, #1
 8024c46:	d100      	bne.n	8024c4a <_printf_float+0x2a6>
 8024c48:	e708      	b.n	8024a5c <_printf_float+0xb8>
 8024c4a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024c4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024c4e:	4333      	orrs	r3, r6
 8024c50:	d102      	bne.n	8024c58 <_printf_float+0x2b4>
 8024c52:	682b      	ldr	r3, [r5, #0]
 8024c54:	07db      	lsls	r3, r3, #31
 8024c56:	d5d5      	bpl.n	8024c04 <_printf_float+0x260>
 8024c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024c5a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024c5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024c60:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024c62:	47a0      	blx	r4
 8024c64:	2300      	movs	r3, #0
 8024c66:	3001      	adds	r0, #1
 8024c68:	d100      	bne.n	8024c6c <_printf_float+0x2c8>
 8024c6a:	e6f7      	b.n	8024a5c <_printf_float+0xb8>
 8024c6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8024c6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024c70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024c72:	425b      	negs	r3, r3
 8024c74:	4293      	cmp	r3, r2
 8024c76:	dc01      	bgt.n	8024c7c <_printf_float+0x2d8>
 8024c78:	0033      	movs	r3, r6
 8024c7a:	e792      	b.n	8024ba2 <_printf_float+0x1fe>
 8024c7c:	002a      	movs	r2, r5
 8024c7e:	2301      	movs	r3, #1
 8024c80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024c82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024c84:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024c86:	321a      	adds	r2, #26
 8024c88:	47a0      	blx	r4
 8024c8a:	3001      	adds	r0, #1
 8024c8c:	d100      	bne.n	8024c90 <_printf_float+0x2ec>
 8024c8e:	e6e5      	b.n	8024a5c <_printf_float+0xb8>
 8024c90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c92:	3301      	adds	r3, #1
 8024c94:	e7ea      	b.n	8024c6c <_printf_float+0x2c8>
 8024c96:	46c0      	nop			@ (mov r8, r8)
 8024c98:	7fefffff 	.word	0x7fefffff
 8024c9c:	0802dfd6 	.word	0x0802dfd6
 8024ca0:	0802dfd2 	.word	0x0802dfd2
 8024ca4:	0802dfde 	.word	0x0802dfde
 8024ca8:	0802dfda 	.word	0x0802dfda
 8024cac:	0802dfe2 	.word	0x0802dfe2
 8024cb0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024cb2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8024cb4:	930c      	str	r3, [sp, #48]	@ 0x30
 8024cb6:	429e      	cmp	r6, r3
 8024cb8:	dd00      	ble.n	8024cbc <_printf_float+0x318>
 8024cba:	001e      	movs	r6, r3
 8024cbc:	2e00      	cmp	r6, #0
 8024cbe:	dc31      	bgt.n	8024d24 <_printf_float+0x380>
 8024cc0:	43f3      	mvns	r3, r6
 8024cc2:	2400      	movs	r4, #0
 8024cc4:	17db      	asrs	r3, r3, #31
 8024cc6:	4033      	ands	r3, r6
 8024cc8:	930e      	str	r3, [sp, #56]	@ 0x38
 8024cca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8024ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024cce:	1af3      	subs	r3, r6, r3
 8024cd0:	42a3      	cmp	r3, r4
 8024cd2:	dc30      	bgt.n	8024d36 <_printf_float+0x392>
 8024cd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024cd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024cd8:	429a      	cmp	r2, r3
 8024cda:	dc38      	bgt.n	8024d4e <_printf_float+0x3aa>
 8024cdc:	682b      	ldr	r3, [r5, #0]
 8024cde:	07db      	lsls	r3, r3, #31
 8024ce0:	d435      	bmi.n	8024d4e <_printf_float+0x3aa>
 8024ce2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024ce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ce6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024ce8:	1b9b      	subs	r3, r3, r6
 8024cea:	1b14      	subs	r4, r2, r4
 8024cec:	429c      	cmp	r4, r3
 8024cee:	dd00      	ble.n	8024cf2 <_printf_float+0x34e>
 8024cf0:	001c      	movs	r4, r3
 8024cf2:	2c00      	cmp	r4, #0
 8024cf4:	dc34      	bgt.n	8024d60 <_printf_float+0x3bc>
 8024cf6:	43e3      	mvns	r3, r4
 8024cf8:	2600      	movs	r6, #0
 8024cfa:	17db      	asrs	r3, r3, #31
 8024cfc:	401c      	ands	r4, r3
 8024cfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d02:	1ad3      	subs	r3, r2, r3
 8024d04:	1b1b      	subs	r3, r3, r4
 8024d06:	42b3      	cmp	r3, r6
 8024d08:	dc00      	bgt.n	8024d0c <_printf_float+0x368>
 8024d0a:	e77b      	b.n	8024c04 <_printf_float+0x260>
 8024d0c:	002a      	movs	r2, r5
 8024d0e:	2301      	movs	r3, #1
 8024d10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d14:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024d16:	321a      	adds	r2, #26
 8024d18:	47b8      	blx	r7
 8024d1a:	3001      	adds	r0, #1
 8024d1c:	d100      	bne.n	8024d20 <_printf_float+0x37c>
 8024d1e:	e69d      	b.n	8024a5c <_printf_float+0xb8>
 8024d20:	3601      	adds	r6, #1
 8024d22:	e7ec      	b.n	8024cfe <_printf_float+0x35a>
 8024d24:	0033      	movs	r3, r6
 8024d26:	003a      	movs	r2, r7
 8024d28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d2e:	47a0      	blx	r4
 8024d30:	3001      	adds	r0, #1
 8024d32:	d1c5      	bne.n	8024cc0 <_printf_float+0x31c>
 8024d34:	e692      	b.n	8024a5c <_printf_float+0xb8>
 8024d36:	002a      	movs	r2, r5
 8024d38:	2301      	movs	r3, #1
 8024d3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d3e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024d40:	321a      	adds	r2, #26
 8024d42:	47b0      	blx	r6
 8024d44:	3001      	adds	r0, #1
 8024d46:	d100      	bne.n	8024d4a <_printf_float+0x3a6>
 8024d48:	e688      	b.n	8024a5c <_printf_float+0xb8>
 8024d4a:	3401      	adds	r4, #1
 8024d4c:	e7bd      	b.n	8024cca <_printf_float+0x326>
 8024d4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024d50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024d52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d58:	47a0      	blx	r4
 8024d5a:	3001      	adds	r0, #1
 8024d5c:	d1c1      	bne.n	8024ce2 <_printf_float+0x33e>
 8024d5e:	e67d      	b.n	8024a5c <_printf_float+0xb8>
 8024d60:	19ba      	adds	r2, r7, r6
 8024d62:	0023      	movs	r3, r4
 8024d64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d68:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024d6a:	47b0      	blx	r6
 8024d6c:	3001      	adds	r0, #1
 8024d6e:	d1c2      	bne.n	8024cf6 <_printf_float+0x352>
 8024d70:	e674      	b.n	8024a5c <_printf_float+0xb8>
 8024d72:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024d74:	930c      	str	r3, [sp, #48]	@ 0x30
 8024d76:	2b01      	cmp	r3, #1
 8024d78:	dc02      	bgt.n	8024d80 <_printf_float+0x3dc>
 8024d7a:	2301      	movs	r3, #1
 8024d7c:	421a      	tst	r2, r3
 8024d7e:	d039      	beq.n	8024df4 <_printf_float+0x450>
 8024d80:	2301      	movs	r3, #1
 8024d82:	003a      	movs	r2, r7
 8024d84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d88:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024d8a:	47b0      	blx	r6
 8024d8c:	3001      	adds	r0, #1
 8024d8e:	d100      	bne.n	8024d92 <_printf_float+0x3ee>
 8024d90:	e664      	b.n	8024a5c <_printf_float+0xb8>
 8024d92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024d94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024d96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d9a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024d9c:	47b0      	blx	r6
 8024d9e:	3001      	adds	r0, #1
 8024da0:	d100      	bne.n	8024da4 <_printf_float+0x400>
 8024da2:	e65b      	b.n	8024a5c <_printf_float+0xb8>
 8024da4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8024da6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8024da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024daa:	2200      	movs	r2, #0
 8024dac:	3b01      	subs	r3, #1
 8024dae:	930c      	str	r3, [sp, #48]	@ 0x30
 8024db0:	2300      	movs	r3, #0
 8024db2:	f7db fb7d 	bl	80004b0 <__aeabi_dcmpeq>
 8024db6:	2800      	cmp	r0, #0
 8024db8:	d11a      	bne.n	8024df0 <_printf_float+0x44c>
 8024dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024dbc:	1c7a      	adds	r2, r7, #1
 8024dbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024dc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024dc2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024dc4:	47b0      	blx	r6
 8024dc6:	3001      	adds	r0, #1
 8024dc8:	d10e      	bne.n	8024de8 <_printf_float+0x444>
 8024dca:	e647      	b.n	8024a5c <_printf_float+0xb8>
 8024dcc:	002a      	movs	r2, r5
 8024dce:	2301      	movs	r3, #1
 8024dd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024dd4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024dd6:	321a      	adds	r2, #26
 8024dd8:	47b8      	blx	r7
 8024dda:	3001      	adds	r0, #1
 8024ddc:	d100      	bne.n	8024de0 <_printf_float+0x43c>
 8024dde:	e63d      	b.n	8024a5c <_printf_float+0xb8>
 8024de0:	3601      	adds	r6, #1
 8024de2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024de4:	429e      	cmp	r6, r3
 8024de6:	dbf1      	blt.n	8024dcc <_printf_float+0x428>
 8024de8:	002a      	movs	r2, r5
 8024dea:	0023      	movs	r3, r4
 8024dec:	3250      	adds	r2, #80	@ 0x50
 8024dee:	e6d9      	b.n	8024ba4 <_printf_float+0x200>
 8024df0:	2600      	movs	r6, #0
 8024df2:	e7f6      	b.n	8024de2 <_printf_float+0x43e>
 8024df4:	003a      	movs	r2, r7
 8024df6:	e7e2      	b.n	8024dbe <_printf_float+0x41a>
 8024df8:	002a      	movs	r2, r5
 8024dfa:	2301      	movs	r3, #1
 8024dfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e00:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024e02:	3219      	adds	r2, #25
 8024e04:	47b0      	blx	r6
 8024e06:	3001      	adds	r0, #1
 8024e08:	d100      	bne.n	8024e0c <_printf_float+0x468>
 8024e0a:	e627      	b.n	8024a5c <_printf_float+0xb8>
 8024e0c:	3401      	adds	r4, #1
 8024e0e:	68eb      	ldr	r3, [r5, #12]
 8024e10:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024e12:	1a9b      	subs	r3, r3, r2
 8024e14:	42a3      	cmp	r3, r4
 8024e16:	dcef      	bgt.n	8024df8 <_printf_float+0x454>
 8024e18:	e6f8      	b.n	8024c0c <_printf_float+0x268>
 8024e1a:	2400      	movs	r4, #0
 8024e1c:	e7f7      	b.n	8024e0e <_printf_float+0x46a>
 8024e1e:	46c0      	nop			@ (mov r8, r8)

08024e20 <_printf_common>:
 8024e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024e22:	0016      	movs	r6, r2
 8024e24:	9301      	str	r3, [sp, #4]
 8024e26:	688a      	ldr	r2, [r1, #8]
 8024e28:	690b      	ldr	r3, [r1, #16]
 8024e2a:	000c      	movs	r4, r1
 8024e2c:	9000      	str	r0, [sp, #0]
 8024e2e:	4293      	cmp	r3, r2
 8024e30:	da00      	bge.n	8024e34 <_printf_common+0x14>
 8024e32:	0013      	movs	r3, r2
 8024e34:	0022      	movs	r2, r4
 8024e36:	6033      	str	r3, [r6, #0]
 8024e38:	3243      	adds	r2, #67	@ 0x43
 8024e3a:	7812      	ldrb	r2, [r2, #0]
 8024e3c:	2a00      	cmp	r2, #0
 8024e3e:	d001      	beq.n	8024e44 <_printf_common+0x24>
 8024e40:	3301      	adds	r3, #1
 8024e42:	6033      	str	r3, [r6, #0]
 8024e44:	6823      	ldr	r3, [r4, #0]
 8024e46:	069b      	lsls	r3, r3, #26
 8024e48:	d502      	bpl.n	8024e50 <_printf_common+0x30>
 8024e4a:	6833      	ldr	r3, [r6, #0]
 8024e4c:	3302      	adds	r3, #2
 8024e4e:	6033      	str	r3, [r6, #0]
 8024e50:	6822      	ldr	r2, [r4, #0]
 8024e52:	2306      	movs	r3, #6
 8024e54:	0015      	movs	r5, r2
 8024e56:	401d      	ands	r5, r3
 8024e58:	421a      	tst	r2, r3
 8024e5a:	d027      	beq.n	8024eac <_printf_common+0x8c>
 8024e5c:	0023      	movs	r3, r4
 8024e5e:	3343      	adds	r3, #67	@ 0x43
 8024e60:	781b      	ldrb	r3, [r3, #0]
 8024e62:	1e5a      	subs	r2, r3, #1
 8024e64:	4193      	sbcs	r3, r2
 8024e66:	6822      	ldr	r2, [r4, #0]
 8024e68:	0692      	lsls	r2, r2, #26
 8024e6a:	d430      	bmi.n	8024ece <_printf_common+0xae>
 8024e6c:	0022      	movs	r2, r4
 8024e6e:	9901      	ldr	r1, [sp, #4]
 8024e70:	9800      	ldr	r0, [sp, #0]
 8024e72:	9d08      	ldr	r5, [sp, #32]
 8024e74:	3243      	adds	r2, #67	@ 0x43
 8024e76:	47a8      	blx	r5
 8024e78:	3001      	adds	r0, #1
 8024e7a:	d025      	beq.n	8024ec8 <_printf_common+0xa8>
 8024e7c:	2206      	movs	r2, #6
 8024e7e:	6823      	ldr	r3, [r4, #0]
 8024e80:	2500      	movs	r5, #0
 8024e82:	4013      	ands	r3, r2
 8024e84:	2b04      	cmp	r3, #4
 8024e86:	d105      	bne.n	8024e94 <_printf_common+0x74>
 8024e88:	6833      	ldr	r3, [r6, #0]
 8024e8a:	68e5      	ldr	r5, [r4, #12]
 8024e8c:	1aed      	subs	r5, r5, r3
 8024e8e:	43eb      	mvns	r3, r5
 8024e90:	17db      	asrs	r3, r3, #31
 8024e92:	401d      	ands	r5, r3
 8024e94:	68a3      	ldr	r3, [r4, #8]
 8024e96:	6922      	ldr	r2, [r4, #16]
 8024e98:	4293      	cmp	r3, r2
 8024e9a:	dd01      	ble.n	8024ea0 <_printf_common+0x80>
 8024e9c:	1a9b      	subs	r3, r3, r2
 8024e9e:	18ed      	adds	r5, r5, r3
 8024ea0:	2600      	movs	r6, #0
 8024ea2:	42b5      	cmp	r5, r6
 8024ea4:	d120      	bne.n	8024ee8 <_printf_common+0xc8>
 8024ea6:	2000      	movs	r0, #0
 8024ea8:	e010      	b.n	8024ecc <_printf_common+0xac>
 8024eaa:	3501      	adds	r5, #1
 8024eac:	68e3      	ldr	r3, [r4, #12]
 8024eae:	6832      	ldr	r2, [r6, #0]
 8024eb0:	1a9b      	subs	r3, r3, r2
 8024eb2:	42ab      	cmp	r3, r5
 8024eb4:	ddd2      	ble.n	8024e5c <_printf_common+0x3c>
 8024eb6:	0022      	movs	r2, r4
 8024eb8:	2301      	movs	r3, #1
 8024eba:	9901      	ldr	r1, [sp, #4]
 8024ebc:	9800      	ldr	r0, [sp, #0]
 8024ebe:	9f08      	ldr	r7, [sp, #32]
 8024ec0:	3219      	adds	r2, #25
 8024ec2:	47b8      	blx	r7
 8024ec4:	3001      	adds	r0, #1
 8024ec6:	d1f0      	bne.n	8024eaa <_printf_common+0x8a>
 8024ec8:	2001      	movs	r0, #1
 8024eca:	4240      	negs	r0, r0
 8024ecc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024ece:	2030      	movs	r0, #48	@ 0x30
 8024ed0:	18e1      	adds	r1, r4, r3
 8024ed2:	3143      	adds	r1, #67	@ 0x43
 8024ed4:	7008      	strb	r0, [r1, #0]
 8024ed6:	0021      	movs	r1, r4
 8024ed8:	1c5a      	adds	r2, r3, #1
 8024eda:	3145      	adds	r1, #69	@ 0x45
 8024edc:	7809      	ldrb	r1, [r1, #0]
 8024ede:	18a2      	adds	r2, r4, r2
 8024ee0:	3243      	adds	r2, #67	@ 0x43
 8024ee2:	3302      	adds	r3, #2
 8024ee4:	7011      	strb	r1, [r2, #0]
 8024ee6:	e7c1      	b.n	8024e6c <_printf_common+0x4c>
 8024ee8:	0022      	movs	r2, r4
 8024eea:	2301      	movs	r3, #1
 8024eec:	9901      	ldr	r1, [sp, #4]
 8024eee:	9800      	ldr	r0, [sp, #0]
 8024ef0:	9f08      	ldr	r7, [sp, #32]
 8024ef2:	321a      	adds	r2, #26
 8024ef4:	47b8      	blx	r7
 8024ef6:	3001      	adds	r0, #1
 8024ef8:	d0e6      	beq.n	8024ec8 <_printf_common+0xa8>
 8024efa:	3601      	adds	r6, #1
 8024efc:	e7d1      	b.n	8024ea2 <_printf_common+0x82>
	...

08024f00 <_printf_i>:
 8024f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024f02:	b08b      	sub	sp, #44	@ 0x2c
 8024f04:	9206      	str	r2, [sp, #24]
 8024f06:	000a      	movs	r2, r1
 8024f08:	3243      	adds	r2, #67	@ 0x43
 8024f0a:	9307      	str	r3, [sp, #28]
 8024f0c:	9005      	str	r0, [sp, #20]
 8024f0e:	9203      	str	r2, [sp, #12]
 8024f10:	7e0a      	ldrb	r2, [r1, #24]
 8024f12:	000c      	movs	r4, r1
 8024f14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024f16:	2a78      	cmp	r2, #120	@ 0x78
 8024f18:	d809      	bhi.n	8024f2e <_printf_i+0x2e>
 8024f1a:	2a62      	cmp	r2, #98	@ 0x62
 8024f1c:	d80b      	bhi.n	8024f36 <_printf_i+0x36>
 8024f1e:	2a00      	cmp	r2, #0
 8024f20:	d100      	bne.n	8024f24 <_printf_i+0x24>
 8024f22:	e0ba      	b.n	802509a <_printf_i+0x19a>
 8024f24:	497a      	ldr	r1, [pc, #488]	@ (8025110 <_printf_i+0x210>)
 8024f26:	9104      	str	r1, [sp, #16]
 8024f28:	2a58      	cmp	r2, #88	@ 0x58
 8024f2a:	d100      	bne.n	8024f2e <_printf_i+0x2e>
 8024f2c:	e08e      	b.n	802504c <_printf_i+0x14c>
 8024f2e:	0025      	movs	r5, r4
 8024f30:	3542      	adds	r5, #66	@ 0x42
 8024f32:	702a      	strb	r2, [r5, #0]
 8024f34:	e022      	b.n	8024f7c <_printf_i+0x7c>
 8024f36:	0010      	movs	r0, r2
 8024f38:	3863      	subs	r0, #99	@ 0x63
 8024f3a:	2815      	cmp	r0, #21
 8024f3c:	d8f7      	bhi.n	8024f2e <_printf_i+0x2e>
 8024f3e:	f7db f927 	bl	8000190 <__gnu_thumb1_case_shi>
 8024f42:	0016      	.short	0x0016
 8024f44:	fff6001f 	.word	0xfff6001f
 8024f48:	fff6fff6 	.word	0xfff6fff6
 8024f4c:	001ffff6 	.word	0x001ffff6
 8024f50:	fff6fff6 	.word	0xfff6fff6
 8024f54:	fff6fff6 	.word	0xfff6fff6
 8024f58:	0036009f 	.word	0x0036009f
 8024f5c:	fff6007e 	.word	0xfff6007e
 8024f60:	00b0fff6 	.word	0x00b0fff6
 8024f64:	0036fff6 	.word	0x0036fff6
 8024f68:	fff6fff6 	.word	0xfff6fff6
 8024f6c:	0082      	.short	0x0082
 8024f6e:	0025      	movs	r5, r4
 8024f70:	681a      	ldr	r2, [r3, #0]
 8024f72:	3542      	adds	r5, #66	@ 0x42
 8024f74:	1d11      	adds	r1, r2, #4
 8024f76:	6019      	str	r1, [r3, #0]
 8024f78:	6813      	ldr	r3, [r2, #0]
 8024f7a:	702b      	strb	r3, [r5, #0]
 8024f7c:	2301      	movs	r3, #1
 8024f7e:	e09e      	b.n	80250be <_printf_i+0x1be>
 8024f80:	6818      	ldr	r0, [r3, #0]
 8024f82:	6809      	ldr	r1, [r1, #0]
 8024f84:	1d02      	adds	r2, r0, #4
 8024f86:	060d      	lsls	r5, r1, #24
 8024f88:	d50b      	bpl.n	8024fa2 <_printf_i+0xa2>
 8024f8a:	6806      	ldr	r6, [r0, #0]
 8024f8c:	601a      	str	r2, [r3, #0]
 8024f8e:	2e00      	cmp	r6, #0
 8024f90:	da03      	bge.n	8024f9a <_printf_i+0x9a>
 8024f92:	232d      	movs	r3, #45	@ 0x2d
 8024f94:	9a03      	ldr	r2, [sp, #12]
 8024f96:	4276      	negs	r6, r6
 8024f98:	7013      	strb	r3, [r2, #0]
 8024f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8025110 <_printf_i+0x210>)
 8024f9c:	270a      	movs	r7, #10
 8024f9e:	9304      	str	r3, [sp, #16]
 8024fa0:	e018      	b.n	8024fd4 <_printf_i+0xd4>
 8024fa2:	6806      	ldr	r6, [r0, #0]
 8024fa4:	601a      	str	r2, [r3, #0]
 8024fa6:	0649      	lsls	r1, r1, #25
 8024fa8:	d5f1      	bpl.n	8024f8e <_printf_i+0x8e>
 8024faa:	b236      	sxth	r6, r6
 8024fac:	e7ef      	b.n	8024f8e <_printf_i+0x8e>
 8024fae:	6808      	ldr	r0, [r1, #0]
 8024fb0:	6819      	ldr	r1, [r3, #0]
 8024fb2:	c940      	ldmia	r1!, {r6}
 8024fb4:	0605      	lsls	r5, r0, #24
 8024fb6:	d402      	bmi.n	8024fbe <_printf_i+0xbe>
 8024fb8:	0640      	lsls	r0, r0, #25
 8024fba:	d500      	bpl.n	8024fbe <_printf_i+0xbe>
 8024fbc:	b2b6      	uxth	r6, r6
 8024fbe:	6019      	str	r1, [r3, #0]
 8024fc0:	4b53      	ldr	r3, [pc, #332]	@ (8025110 <_printf_i+0x210>)
 8024fc2:	270a      	movs	r7, #10
 8024fc4:	9304      	str	r3, [sp, #16]
 8024fc6:	2a6f      	cmp	r2, #111	@ 0x6f
 8024fc8:	d100      	bne.n	8024fcc <_printf_i+0xcc>
 8024fca:	3f02      	subs	r7, #2
 8024fcc:	0023      	movs	r3, r4
 8024fce:	2200      	movs	r2, #0
 8024fd0:	3343      	adds	r3, #67	@ 0x43
 8024fd2:	701a      	strb	r2, [r3, #0]
 8024fd4:	6863      	ldr	r3, [r4, #4]
 8024fd6:	60a3      	str	r3, [r4, #8]
 8024fd8:	2b00      	cmp	r3, #0
 8024fda:	db06      	blt.n	8024fea <_printf_i+0xea>
 8024fdc:	2104      	movs	r1, #4
 8024fde:	6822      	ldr	r2, [r4, #0]
 8024fe0:	9d03      	ldr	r5, [sp, #12]
 8024fe2:	438a      	bics	r2, r1
 8024fe4:	6022      	str	r2, [r4, #0]
 8024fe6:	4333      	orrs	r3, r6
 8024fe8:	d00c      	beq.n	8025004 <_printf_i+0x104>
 8024fea:	9d03      	ldr	r5, [sp, #12]
 8024fec:	0030      	movs	r0, r6
 8024fee:	0039      	movs	r1, r7
 8024ff0:	f7db f95e 	bl	80002b0 <__aeabi_uidivmod>
 8024ff4:	9b04      	ldr	r3, [sp, #16]
 8024ff6:	3d01      	subs	r5, #1
 8024ff8:	5c5b      	ldrb	r3, [r3, r1]
 8024ffa:	702b      	strb	r3, [r5, #0]
 8024ffc:	0033      	movs	r3, r6
 8024ffe:	0006      	movs	r6, r0
 8025000:	429f      	cmp	r7, r3
 8025002:	d9f3      	bls.n	8024fec <_printf_i+0xec>
 8025004:	2f08      	cmp	r7, #8
 8025006:	d109      	bne.n	802501c <_printf_i+0x11c>
 8025008:	6823      	ldr	r3, [r4, #0]
 802500a:	07db      	lsls	r3, r3, #31
 802500c:	d506      	bpl.n	802501c <_printf_i+0x11c>
 802500e:	6862      	ldr	r2, [r4, #4]
 8025010:	6923      	ldr	r3, [r4, #16]
 8025012:	429a      	cmp	r2, r3
 8025014:	dc02      	bgt.n	802501c <_printf_i+0x11c>
 8025016:	2330      	movs	r3, #48	@ 0x30
 8025018:	3d01      	subs	r5, #1
 802501a:	702b      	strb	r3, [r5, #0]
 802501c:	9b03      	ldr	r3, [sp, #12]
 802501e:	1b5b      	subs	r3, r3, r5
 8025020:	6123      	str	r3, [r4, #16]
 8025022:	9b07      	ldr	r3, [sp, #28]
 8025024:	0021      	movs	r1, r4
 8025026:	9300      	str	r3, [sp, #0]
 8025028:	9805      	ldr	r0, [sp, #20]
 802502a:	9b06      	ldr	r3, [sp, #24]
 802502c:	aa09      	add	r2, sp, #36	@ 0x24
 802502e:	f7ff fef7 	bl	8024e20 <_printf_common>
 8025032:	3001      	adds	r0, #1
 8025034:	d148      	bne.n	80250c8 <_printf_i+0x1c8>
 8025036:	2001      	movs	r0, #1
 8025038:	4240      	negs	r0, r0
 802503a:	b00b      	add	sp, #44	@ 0x2c
 802503c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802503e:	2220      	movs	r2, #32
 8025040:	6809      	ldr	r1, [r1, #0]
 8025042:	430a      	orrs	r2, r1
 8025044:	6022      	str	r2, [r4, #0]
 8025046:	2278      	movs	r2, #120	@ 0x78
 8025048:	4932      	ldr	r1, [pc, #200]	@ (8025114 <_printf_i+0x214>)
 802504a:	9104      	str	r1, [sp, #16]
 802504c:	0021      	movs	r1, r4
 802504e:	3145      	adds	r1, #69	@ 0x45
 8025050:	700a      	strb	r2, [r1, #0]
 8025052:	6819      	ldr	r1, [r3, #0]
 8025054:	6822      	ldr	r2, [r4, #0]
 8025056:	c940      	ldmia	r1!, {r6}
 8025058:	0610      	lsls	r0, r2, #24
 802505a:	d402      	bmi.n	8025062 <_printf_i+0x162>
 802505c:	0650      	lsls	r0, r2, #25
 802505e:	d500      	bpl.n	8025062 <_printf_i+0x162>
 8025060:	b2b6      	uxth	r6, r6
 8025062:	6019      	str	r1, [r3, #0]
 8025064:	07d3      	lsls	r3, r2, #31
 8025066:	d502      	bpl.n	802506e <_printf_i+0x16e>
 8025068:	2320      	movs	r3, #32
 802506a:	4313      	orrs	r3, r2
 802506c:	6023      	str	r3, [r4, #0]
 802506e:	2e00      	cmp	r6, #0
 8025070:	d001      	beq.n	8025076 <_printf_i+0x176>
 8025072:	2710      	movs	r7, #16
 8025074:	e7aa      	b.n	8024fcc <_printf_i+0xcc>
 8025076:	2220      	movs	r2, #32
 8025078:	6823      	ldr	r3, [r4, #0]
 802507a:	4393      	bics	r3, r2
 802507c:	6023      	str	r3, [r4, #0]
 802507e:	e7f8      	b.n	8025072 <_printf_i+0x172>
 8025080:	681a      	ldr	r2, [r3, #0]
 8025082:	680d      	ldr	r5, [r1, #0]
 8025084:	1d10      	adds	r0, r2, #4
 8025086:	6949      	ldr	r1, [r1, #20]
 8025088:	6018      	str	r0, [r3, #0]
 802508a:	6813      	ldr	r3, [r2, #0]
 802508c:	062e      	lsls	r6, r5, #24
 802508e:	d501      	bpl.n	8025094 <_printf_i+0x194>
 8025090:	6019      	str	r1, [r3, #0]
 8025092:	e002      	b.n	802509a <_printf_i+0x19a>
 8025094:	066d      	lsls	r5, r5, #25
 8025096:	d5fb      	bpl.n	8025090 <_printf_i+0x190>
 8025098:	8019      	strh	r1, [r3, #0]
 802509a:	2300      	movs	r3, #0
 802509c:	9d03      	ldr	r5, [sp, #12]
 802509e:	6123      	str	r3, [r4, #16]
 80250a0:	e7bf      	b.n	8025022 <_printf_i+0x122>
 80250a2:	681a      	ldr	r2, [r3, #0]
 80250a4:	1d11      	adds	r1, r2, #4
 80250a6:	6019      	str	r1, [r3, #0]
 80250a8:	6815      	ldr	r5, [r2, #0]
 80250aa:	2100      	movs	r1, #0
 80250ac:	0028      	movs	r0, r5
 80250ae:	6862      	ldr	r2, [r4, #4]
 80250b0:	f000 fba1 	bl	80257f6 <memchr>
 80250b4:	2800      	cmp	r0, #0
 80250b6:	d001      	beq.n	80250bc <_printf_i+0x1bc>
 80250b8:	1b40      	subs	r0, r0, r5
 80250ba:	6060      	str	r0, [r4, #4]
 80250bc:	6863      	ldr	r3, [r4, #4]
 80250be:	6123      	str	r3, [r4, #16]
 80250c0:	2300      	movs	r3, #0
 80250c2:	9a03      	ldr	r2, [sp, #12]
 80250c4:	7013      	strb	r3, [r2, #0]
 80250c6:	e7ac      	b.n	8025022 <_printf_i+0x122>
 80250c8:	002a      	movs	r2, r5
 80250ca:	6923      	ldr	r3, [r4, #16]
 80250cc:	9906      	ldr	r1, [sp, #24]
 80250ce:	9805      	ldr	r0, [sp, #20]
 80250d0:	9d07      	ldr	r5, [sp, #28]
 80250d2:	47a8      	blx	r5
 80250d4:	3001      	adds	r0, #1
 80250d6:	d0ae      	beq.n	8025036 <_printf_i+0x136>
 80250d8:	6823      	ldr	r3, [r4, #0]
 80250da:	079b      	lsls	r3, r3, #30
 80250dc:	d415      	bmi.n	802510a <_printf_i+0x20a>
 80250de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80250e0:	68e0      	ldr	r0, [r4, #12]
 80250e2:	4298      	cmp	r0, r3
 80250e4:	daa9      	bge.n	802503a <_printf_i+0x13a>
 80250e6:	0018      	movs	r0, r3
 80250e8:	e7a7      	b.n	802503a <_printf_i+0x13a>
 80250ea:	0022      	movs	r2, r4
 80250ec:	2301      	movs	r3, #1
 80250ee:	9906      	ldr	r1, [sp, #24]
 80250f0:	9805      	ldr	r0, [sp, #20]
 80250f2:	9e07      	ldr	r6, [sp, #28]
 80250f4:	3219      	adds	r2, #25
 80250f6:	47b0      	blx	r6
 80250f8:	3001      	adds	r0, #1
 80250fa:	d09c      	beq.n	8025036 <_printf_i+0x136>
 80250fc:	3501      	adds	r5, #1
 80250fe:	68e3      	ldr	r3, [r4, #12]
 8025100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025102:	1a9b      	subs	r3, r3, r2
 8025104:	42ab      	cmp	r3, r5
 8025106:	dcf0      	bgt.n	80250ea <_printf_i+0x1ea>
 8025108:	e7e9      	b.n	80250de <_printf_i+0x1de>
 802510a:	2500      	movs	r5, #0
 802510c:	e7f7      	b.n	80250fe <_printf_i+0x1fe>
 802510e:	46c0      	nop			@ (mov r8, r8)
 8025110:	0802dfe4 	.word	0x0802dfe4
 8025114:	0802dff5 	.word	0x0802dff5

08025118 <std>:
 8025118:	2300      	movs	r3, #0
 802511a:	b510      	push	{r4, lr}
 802511c:	0004      	movs	r4, r0
 802511e:	6003      	str	r3, [r0, #0]
 8025120:	6043      	str	r3, [r0, #4]
 8025122:	6083      	str	r3, [r0, #8]
 8025124:	8181      	strh	r1, [r0, #12]
 8025126:	6643      	str	r3, [r0, #100]	@ 0x64
 8025128:	81c2      	strh	r2, [r0, #14]
 802512a:	6103      	str	r3, [r0, #16]
 802512c:	6143      	str	r3, [r0, #20]
 802512e:	6183      	str	r3, [r0, #24]
 8025130:	0019      	movs	r1, r3
 8025132:	2208      	movs	r2, #8
 8025134:	305c      	adds	r0, #92	@ 0x5c
 8025136:	f000 fa8d 	bl	8025654 <memset>
 802513a:	4b0b      	ldr	r3, [pc, #44]	@ (8025168 <std+0x50>)
 802513c:	6224      	str	r4, [r4, #32]
 802513e:	6263      	str	r3, [r4, #36]	@ 0x24
 8025140:	4b0a      	ldr	r3, [pc, #40]	@ (802516c <std+0x54>)
 8025142:	62a3      	str	r3, [r4, #40]	@ 0x28
 8025144:	4b0a      	ldr	r3, [pc, #40]	@ (8025170 <std+0x58>)
 8025146:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8025148:	4b0a      	ldr	r3, [pc, #40]	@ (8025174 <std+0x5c>)
 802514a:	6323      	str	r3, [r4, #48]	@ 0x30
 802514c:	4b0a      	ldr	r3, [pc, #40]	@ (8025178 <std+0x60>)
 802514e:	429c      	cmp	r4, r3
 8025150:	d005      	beq.n	802515e <std+0x46>
 8025152:	4b0a      	ldr	r3, [pc, #40]	@ (802517c <std+0x64>)
 8025154:	429c      	cmp	r4, r3
 8025156:	d002      	beq.n	802515e <std+0x46>
 8025158:	4b09      	ldr	r3, [pc, #36]	@ (8025180 <std+0x68>)
 802515a:	429c      	cmp	r4, r3
 802515c:	d103      	bne.n	8025166 <std+0x4e>
 802515e:	0020      	movs	r0, r4
 8025160:	3058      	adds	r0, #88	@ 0x58
 8025162:	f000 fb45 	bl	80257f0 <__retarget_lock_init_recursive>
 8025166:	bd10      	pop	{r4, pc}
 8025168:	080253c5 	.word	0x080253c5
 802516c:	080253ed 	.word	0x080253ed
 8025170:	08025425 	.word	0x08025425
 8025174:	08025451 	.word	0x08025451
 8025178:	200034dc 	.word	0x200034dc
 802517c:	20003544 	.word	0x20003544
 8025180:	200035ac 	.word	0x200035ac

08025184 <stdio_exit_handler>:
 8025184:	b510      	push	{r4, lr}
 8025186:	4a03      	ldr	r2, [pc, #12]	@ (8025194 <stdio_exit_handler+0x10>)
 8025188:	4903      	ldr	r1, [pc, #12]	@ (8025198 <stdio_exit_handler+0x14>)
 802518a:	4804      	ldr	r0, [pc, #16]	@ (802519c <stdio_exit_handler+0x18>)
 802518c:	f000 f86c 	bl	8025268 <_fwalk_sglue>
 8025190:	bd10      	pop	{r4, pc}
 8025192:	46c0      	nop			@ (mov r8, r8)
 8025194:	20000268 	.word	0x20000268
 8025198:	08027ded 	.word	0x08027ded
 802519c:	200003e4 	.word	0x200003e4

080251a0 <cleanup_stdio>:
 80251a0:	6841      	ldr	r1, [r0, #4]
 80251a2:	4b0b      	ldr	r3, [pc, #44]	@ (80251d0 <cleanup_stdio+0x30>)
 80251a4:	b510      	push	{r4, lr}
 80251a6:	0004      	movs	r4, r0
 80251a8:	4299      	cmp	r1, r3
 80251aa:	d001      	beq.n	80251b0 <cleanup_stdio+0x10>
 80251ac:	f002 fe1e 	bl	8027dec <_fflush_r>
 80251b0:	68a1      	ldr	r1, [r4, #8]
 80251b2:	4b08      	ldr	r3, [pc, #32]	@ (80251d4 <cleanup_stdio+0x34>)
 80251b4:	4299      	cmp	r1, r3
 80251b6:	d002      	beq.n	80251be <cleanup_stdio+0x1e>
 80251b8:	0020      	movs	r0, r4
 80251ba:	f002 fe17 	bl	8027dec <_fflush_r>
 80251be:	68e1      	ldr	r1, [r4, #12]
 80251c0:	4b05      	ldr	r3, [pc, #20]	@ (80251d8 <cleanup_stdio+0x38>)
 80251c2:	4299      	cmp	r1, r3
 80251c4:	d002      	beq.n	80251cc <cleanup_stdio+0x2c>
 80251c6:	0020      	movs	r0, r4
 80251c8:	f002 fe10 	bl	8027dec <_fflush_r>
 80251cc:	bd10      	pop	{r4, pc}
 80251ce:	46c0      	nop			@ (mov r8, r8)
 80251d0:	200034dc 	.word	0x200034dc
 80251d4:	20003544 	.word	0x20003544
 80251d8:	200035ac 	.word	0x200035ac

080251dc <global_stdio_init.part.0>:
 80251dc:	b510      	push	{r4, lr}
 80251de:	4b09      	ldr	r3, [pc, #36]	@ (8025204 <global_stdio_init.part.0+0x28>)
 80251e0:	4a09      	ldr	r2, [pc, #36]	@ (8025208 <global_stdio_init.part.0+0x2c>)
 80251e2:	2104      	movs	r1, #4
 80251e4:	601a      	str	r2, [r3, #0]
 80251e6:	4809      	ldr	r0, [pc, #36]	@ (802520c <global_stdio_init.part.0+0x30>)
 80251e8:	2200      	movs	r2, #0
 80251ea:	f7ff ff95 	bl	8025118 <std>
 80251ee:	2201      	movs	r2, #1
 80251f0:	2109      	movs	r1, #9
 80251f2:	4807      	ldr	r0, [pc, #28]	@ (8025210 <global_stdio_init.part.0+0x34>)
 80251f4:	f7ff ff90 	bl	8025118 <std>
 80251f8:	2202      	movs	r2, #2
 80251fa:	2112      	movs	r1, #18
 80251fc:	4805      	ldr	r0, [pc, #20]	@ (8025214 <global_stdio_init.part.0+0x38>)
 80251fe:	f7ff ff8b 	bl	8025118 <std>
 8025202:	bd10      	pop	{r4, pc}
 8025204:	20003614 	.word	0x20003614
 8025208:	08025185 	.word	0x08025185
 802520c:	200034dc 	.word	0x200034dc
 8025210:	20003544 	.word	0x20003544
 8025214:	200035ac 	.word	0x200035ac

08025218 <__sfp_lock_acquire>:
 8025218:	b510      	push	{r4, lr}
 802521a:	4802      	ldr	r0, [pc, #8]	@ (8025224 <__sfp_lock_acquire+0xc>)
 802521c:	f000 fae9 	bl	80257f2 <__retarget_lock_acquire_recursive>
 8025220:	bd10      	pop	{r4, pc}
 8025222:	46c0      	nop			@ (mov r8, r8)
 8025224:	2000361d 	.word	0x2000361d

08025228 <__sfp_lock_release>:
 8025228:	b510      	push	{r4, lr}
 802522a:	4802      	ldr	r0, [pc, #8]	@ (8025234 <__sfp_lock_release+0xc>)
 802522c:	f000 fae2 	bl	80257f4 <__retarget_lock_release_recursive>
 8025230:	bd10      	pop	{r4, pc}
 8025232:	46c0      	nop			@ (mov r8, r8)
 8025234:	2000361d 	.word	0x2000361d

08025238 <__sinit>:
 8025238:	b510      	push	{r4, lr}
 802523a:	0004      	movs	r4, r0
 802523c:	f7ff ffec 	bl	8025218 <__sfp_lock_acquire>
 8025240:	6a23      	ldr	r3, [r4, #32]
 8025242:	2b00      	cmp	r3, #0
 8025244:	d002      	beq.n	802524c <__sinit+0x14>
 8025246:	f7ff ffef 	bl	8025228 <__sfp_lock_release>
 802524a:	bd10      	pop	{r4, pc}
 802524c:	4b04      	ldr	r3, [pc, #16]	@ (8025260 <__sinit+0x28>)
 802524e:	6223      	str	r3, [r4, #32]
 8025250:	4b04      	ldr	r3, [pc, #16]	@ (8025264 <__sinit+0x2c>)
 8025252:	681b      	ldr	r3, [r3, #0]
 8025254:	2b00      	cmp	r3, #0
 8025256:	d1f6      	bne.n	8025246 <__sinit+0xe>
 8025258:	f7ff ffc0 	bl	80251dc <global_stdio_init.part.0>
 802525c:	e7f3      	b.n	8025246 <__sinit+0xe>
 802525e:	46c0      	nop			@ (mov r8, r8)
 8025260:	080251a1 	.word	0x080251a1
 8025264:	20003614 	.word	0x20003614

08025268 <_fwalk_sglue>:
 8025268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802526a:	0014      	movs	r4, r2
 802526c:	2600      	movs	r6, #0
 802526e:	9000      	str	r0, [sp, #0]
 8025270:	9101      	str	r1, [sp, #4]
 8025272:	68a5      	ldr	r5, [r4, #8]
 8025274:	6867      	ldr	r7, [r4, #4]
 8025276:	3f01      	subs	r7, #1
 8025278:	d504      	bpl.n	8025284 <_fwalk_sglue+0x1c>
 802527a:	6824      	ldr	r4, [r4, #0]
 802527c:	2c00      	cmp	r4, #0
 802527e:	d1f8      	bne.n	8025272 <_fwalk_sglue+0xa>
 8025280:	0030      	movs	r0, r6
 8025282:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025284:	89ab      	ldrh	r3, [r5, #12]
 8025286:	2b01      	cmp	r3, #1
 8025288:	d908      	bls.n	802529c <_fwalk_sglue+0x34>
 802528a:	220e      	movs	r2, #14
 802528c:	5eab      	ldrsh	r3, [r5, r2]
 802528e:	3301      	adds	r3, #1
 8025290:	d004      	beq.n	802529c <_fwalk_sglue+0x34>
 8025292:	0029      	movs	r1, r5
 8025294:	9800      	ldr	r0, [sp, #0]
 8025296:	9b01      	ldr	r3, [sp, #4]
 8025298:	4798      	blx	r3
 802529a:	4306      	orrs	r6, r0
 802529c:	3568      	adds	r5, #104	@ 0x68
 802529e:	e7ea      	b.n	8025276 <_fwalk_sglue+0xe>

080252a0 <iprintf>:
 80252a0:	b40f      	push	{r0, r1, r2, r3}
 80252a2:	b507      	push	{r0, r1, r2, lr}
 80252a4:	4905      	ldr	r1, [pc, #20]	@ (80252bc <iprintf+0x1c>)
 80252a6:	ab04      	add	r3, sp, #16
 80252a8:	6808      	ldr	r0, [r1, #0]
 80252aa:	cb04      	ldmia	r3!, {r2}
 80252ac:	6881      	ldr	r1, [r0, #8]
 80252ae:	9301      	str	r3, [sp, #4]
 80252b0:	f002 fbfa 	bl	8027aa8 <_vfiprintf_r>
 80252b4:	b003      	add	sp, #12
 80252b6:	bc08      	pop	{r3}
 80252b8:	b004      	add	sp, #16
 80252ba:	4718      	bx	r3
 80252bc:	200003e0 	.word	0x200003e0

080252c0 <_puts_r>:
 80252c0:	6a03      	ldr	r3, [r0, #32]
 80252c2:	b570      	push	{r4, r5, r6, lr}
 80252c4:	0005      	movs	r5, r0
 80252c6:	000e      	movs	r6, r1
 80252c8:	6884      	ldr	r4, [r0, #8]
 80252ca:	2b00      	cmp	r3, #0
 80252cc:	d101      	bne.n	80252d2 <_puts_r+0x12>
 80252ce:	f7ff ffb3 	bl	8025238 <__sinit>
 80252d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80252d4:	07db      	lsls	r3, r3, #31
 80252d6:	d405      	bmi.n	80252e4 <_puts_r+0x24>
 80252d8:	89a3      	ldrh	r3, [r4, #12]
 80252da:	059b      	lsls	r3, r3, #22
 80252dc:	d402      	bmi.n	80252e4 <_puts_r+0x24>
 80252de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80252e0:	f000 fa87 	bl	80257f2 <__retarget_lock_acquire_recursive>
 80252e4:	89a3      	ldrh	r3, [r4, #12]
 80252e6:	071b      	lsls	r3, r3, #28
 80252e8:	d502      	bpl.n	80252f0 <_puts_r+0x30>
 80252ea:	6923      	ldr	r3, [r4, #16]
 80252ec:	2b00      	cmp	r3, #0
 80252ee:	d11f      	bne.n	8025330 <_puts_r+0x70>
 80252f0:	0021      	movs	r1, r4
 80252f2:	0028      	movs	r0, r5
 80252f4:	f000 f950 	bl	8025598 <__swsetup_r>
 80252f8:	2800      	cmp	r0, #0
 80252fa:	d019      	beq.n	8025330 <_puts_r+0x70>
 80252fc:	2501      	movs	r5, #1
 80252fe:	426d      	negs	r5, r5
 8025300:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025302:	07db      	lsls	r3, r3, #31
 8025304:	d405      	bmi.n	8025312 <_puts_r+0x52>
 8025306:	89a3      	ldrh	r3, [r4, #12]
 8025308:	059b      	lsls	r3, r3, #22
 802530a:	d402      	bmi.n	8025312 <_puts_r+0x52>
 802530c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802530e:	f000 fa71 	bl	80257f4 <__retarget_lock_release_recursive>
 8025312:	0028      	movs	r0, r5
 8025314:	bd70      	pop	{r4, r5, r6, pc}
 8025316:	3601      	adds	r6, #1
 8025318:	60a3      	str	r3, [r4, #8]
 802531a:	2b00      	cmp	r3, #0
 802531c:	da04      	bge.n	8025328 <_puts_r+0x68>
 802531e:	69a2      	ldr	r2, [r4, #24]
 8025320:	429a      	cmp	r2, r3
 8025322:	dc16      	bgt.n	8025352 <_puts_r+0x92>
 8025324:	290a      	cmp	r1, #10
 8025326:	d014      	beq.n	8025352 <_puts_r+0x92>
 8025328:	6823      	ldr	r3, [r4, #0]
 802532a:	1c5a      	adds	r2, r3, #1
 802532c:	6022      	str	r2, [r4, #0]
 802532e:	7019      	strb	r1, [r3, #0]
 8025330:	68a3      	ldr	r3, [r4, #8]
 8025332:	7831      	ldrb	r1, [r6, #0]
 8025334:	3b01      	subs	r3, #1
 8025336:	2900      	cmp	r1, #0
 8025338:	d1ed      	bne.n	8025316 <_puts_r+0x56>
 802533a:	60a3      	str	r3, [r4, #8]
 802533c:	2b00      	cmp	r3, #0
 802533e:	da0f      	bge.n	8025360 <_puts_r+0xa0>
 8025340:	0022      	movs	r2, r4
 8025342:	0028      	movs	r0, r5
 8025344:	310a      	adds	r1, #10
 8025346:	f000 f8e5 	bl	8025514 <__swbuf_r>
 802534a:	3001      	adds	r0, #1
 802534c:	d0d6      	beq.n	80252fc <_puts_r+0x3c>
 802534e:	250a      	movs	r5, #10
 8025350:	e7d6      	b.n	8025300 <_puts_r+0x40>
 8025352:	0022      	movs	r2, r4
 8025354:	0028      	movs	r0, r5
 8025356:	f000 f8dd 	bl	8025514 <__swbuf_r>
 802535a:	3001      	adds	r0, #1
 802535c:	d1e8      	bne.n	8025330 <_puts_r+0x70>
 802535e:	e7cd      	b.n	80252fc <_puts_r+0x3c>
 8025360:	6823      	ldr	r3, [r4, #0]
 8025362:	1c5a      	adds	r2, r3, #1
 8025364:	6022      	str	r2, [r4, #0]
 8025366:	220a      	movs	r2, #10
 8025368:	701a      	strb	r2, [r3, #0]
 802536a:	e7f0      	b.n	802534e <_puts_r+0x8e>

0802536c <puts>:
 802536c:	b510      	push	{r4, lr}
 802536e:	4b03      	ldr	r3, [pc, #12]	@ (802537c <puts+0x10>)
 8025370:	0001      	movs	r1, r0
 8025372:	6818      	ldr	r0, [r3, #0]
 8025374:	f7ff ffa4 	bl	80252c0 <_puts_r>
 8025378:	bd10      	pop	{r4, pc}
 802537a:	46c0      	nop			@ (mov r8, r8)
 802537c:	200003e0 	.word	0x200003e0

08025380 <siprintf>:
 8025380:	b40e      	push	{r1, r2, r3}
 8025382:	b510      	push	{r4, lr}
 8025384:	2400      	movs	r4, #0
 8025386:	490c      	ldr	r1, [pc, #48]	@ (80253b8 <siprintf+0x38>)
 8025388:	b09d      	sub	sp, #116	@ 0x74
 802538a:	ab1f      	add	r3, sp, #124	@ 0x7c
 802538c:	9002      	str	r0, [sp, #8]
 802538e:	9006      	str	r0, [sp, #24]
 8025390:	9107      	str	r1, [sp, #28]
 8025392:	9104      	str	r1, [sp, #16]
 8025394:	4809      	ldr	r0, [pc, #36]	@ (80253bc <siprintf+0x3c>)
 8025396:	490a      	ldr	r1, [pc, #40]	@ (80253c0 <siprintf+0x40>)
 8025398:	cb04      	ldmia	r3!, {r2}
 802539a:	9105      	str	r1, [sp, #20]
 802539c:	6800      	ldr	r0, [r0, #0]
 802539e:	a902      	add	r1, sp, #8
 80253a0:	9301      	str	r3, [sp, #4]
 80253a2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80253a4:	f002 fa5a 	bl	802785c <_svfiprintf_r>
 80253a8:	9b02      	ldr	r3, [sp, #8]
 80253aa:	701c      	strb	r4, [r3, #0]
 80253ac:	b01d      	add	sp, #116	@ 0x74
 80253ae:	bc10      	pop	{r4}
 80253b0:	bc08      	pop	{r3}
 80253b2:	b003      	add	sp, #12
 80253b4:	4718      	bx	r3
 80253b6:	46c0      	nop			@ (mov r8, r8)
 80253b8:	7fffffff 	.word	0x7fffffff
 80253bc:	200003e0 	.word	0x200003e0
 80253c0:	ffff0208 	.word	0xffff0208

080253c4 <__sread>:
 80253c4:	b570      	push	{r4, r5, r6, lr}
 80253c6:	000c      	movs	r4, r1
 80253c8:	250e      	movs	r5, #14
 80253ca:	5f49      	ldrsh	r1, [r1, r5]
 80253cc:	f000 f9be 	bl	802574c <_read_r>
 80253d0:	2800      	cmp	r0, #0
 80253d2:	db03      	blt.n	80253dc <__sread+0x18>
 80253d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80253d6:	181b      	adds	r3, r3, r0
 80253d8:	6563      	str	r3, [r4, #84]	@ 0x54
 80253da:	bd70      	pop	{r4, r5, r6, pc}
 80253dc:	89a3      	ldrh	r3, [r4, #12]
 80253de:	4a02      	ldr	r2, [pc, #8]	@ (80253e8 <__sread+0x24>)
 80253e0:	4013      	ands	r3, r2
 80253e2:	81a3      	strh	r3, [r4, #12]
 80253e4:	e7f9      	b.n	80253da <__sread+0x16>
 80253e6:	46c0      	nop			@ (mov r8, r8)
 80253e8:	ffffefff 	.word	0xffffefff

080253ec <__swrite>:
 80253ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80253ee:	001f      	movs	r7, r3
 80253f0:	898b      	ldrh	r3, [r1, #12]
 80253f2:	0005      	movs	r5, r0
 80253f4:	000c      	movs	r4, r1
 80253f6:	0016      	movs	r6, r2
 80253f8:	05db      	lsls	r3, r3, #23
 80253fa:	d505      	bpl.n	8025408 <__swrite+0x1c>
 80253fc:	230e      	movs	r3, #14
 80253fe:	5ec9      	ldrsh	r1, [r1, r3]
 8025400:	2200      	movs	r2, #0
 8025402:	2302      	movs	r3, #2
 8025404:	f000 f98e 	bl	8025724 <_lseek_r>
 8025408:	89a3      	ldrh	r3, [r4, #12]
 802540a:	4a05      	ldr	r2, [pc, #20]	@ (8025420 <__swrite+0x34>)
 802540c:	0028      	movs	r0, r5
 802540e:	4013      	ands	r3, r2
 8025410:	81a3      	strh	r3, [r4, #12]
 8025412:	0032      	movs	r2, r6
 8025414:	230e      	movs	r3, #14
 8025416:	5ee1      	ldrsh	r1, [r4, r3]
 8025418:	003b      	movs	r3, r7
 802541a:	f000 f9ab 	bl	8025774 <_write_r>
 802541e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025420:	ffffefff 	.word	0xffffefff

08025424 <__sseek>:
 8025424:	b570      	push	{r4, r5, r6, lr}
 8025426:	000c      	movs	r4, r1
 8025428:	250e      	movs	r5, #14
 802542a:	5f49      	ldrsh	r1, [r1, r5]
 802542c:	f000 f97a 	bl	8025724 <_lseek_r>
 8025430:	89a3      	ldrh	r3, [r4, #12]
 8025432:	1c42      	adds	r2, r0, #1
 8025434:	d103      	bne.n	802543e <__sseek+0x1a>
 8025436:	4a05      	ldr	r2, [pc, #20]	@ (802544c <__sseek+0x28>)
 8025438:	4013      	ands	r3, r2
 802543a:	81a3      	strh	r3, [r4, #12]
 802543c:	bd70      	pop	{r4, r5, r6, pc}
 802543e:	2280      	movs	r2, #128	@ 0x80
 8025440:	0152      	lsls	r2, r2, #5
 8025442:	4313      	orrs	r3, r2
 8025444:	81a3      	strh	r3, [r4, #12]
 8025446:	6560      	str	r0, [r4, #84]	@ 0x54
 8025448:	e7f8      	b.n	802543c <__sseek+0x18>
 802544a:	46c0      	nop			@ (mov r8, r8)
 802544c:	ffffefff 	.word	0xffffefff

08025450 <__sclose>:
 8025450:	b510      	push	{r4, lr}
 8025452:	230e      	movs	r3, #14
 8025454:	5ec9      	ldrsh	r1, [r1, r3]
 8025456:	f000 f953 	bl	8025700 <_close_r>
 802545a:	bd10      	pop	{r4, pc}

0802545c <_vsniprintf_r>:
 802545c:	b530      	push	{r4, r5, lr}
 802545e:	0005      	movs	r5, r0
 8025460:	0014      	movs	r4, r2
 8025462:	0008      	movs	r0, r1
 8025464:	001a      	movs	r2, r3
 8025466:	b09b      	sub	sp, #108	@ 0x6c
 8025468:	2c00      	cmp	r4, #0
 802546a:	da05      	bge.n	8025478 <_vsniprintf_r+0x1c>
 802546c:	238b      	movs	r3, #139	@ 0x8b
 802546e:	2001      	movs	r0, #1
 8025470:	602b      	str	r3, [r5, #0]
 8025472:	4240      	negs	r0, r0
 8025474:	b01b      	add	sp, #108	@ 0x6c
 8025476:	bd30      	pop	{r4, r5, pc}
 8025478:	2382      	movs	r3, #130	@ 0x82
 802547a:	4669      	mov	r1, sp
 802547c:	009b      	lsls	r3, r3, #2
 802547e:	818b      	strh	r3, [r1, #12]
 8025480:	2100      	movs	r1, #0
 8025482:	9000      	str	r0, [sp, #0]
 8025484:	9119      	str	r1, [sp, #100]	@ 0x64
 8025486:	9004      	str	r0, [sp, #16]
 8025488:	428c      	cmp	r4, r1
 802548a:	d000      	beq.n	802548e <_vsniprintf_r+0x32>
 802548c:	1e61      	subs	r1, r4, #1
 802548e:	2301      	movs	r3, #1
 8025490:	9102      	str	r1, [sp, #8]
 8025492:	9105      	str	r1, [sp, #20]
 8025494:	4669      	mov	r1, sp
 8025496:	425b      	negs	r3, r3
 8025498:	81cb      	strh	r3, [r1, #14]
 802549a:	0028      	movs	r0, r5
 802549c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802549e:	f002 f9dd 	bl	802785c <_svfiprintf_r>
 80254a2:	1c43      	adds	r3, r0, #1
 80254a4:	da01      	bge.n	80254aa <_vsniprintf_r+0x4e>
 80254a6:	238b      	movs	r3, #139	@ 0x8b
 80254a8:	602b      	str	r3, [r5, #0]
 80254aa:	2c00      	cmp	r4, #0
 80254ac:	d0e2      	beq.n	8025474 <_vsniprintf_r+0x18>
 80254ae:	2200      	movs	r2, #0
 80254b0:	9b00      	ldr	r3, [sp, #0]
 80254b2:	701a      	strb	r2, [r3, #0]
 80254b4:	e7de      	b.n	8025474 <_vsniprintf_r+0x18>
	...

080254b8 <vsniprintf>:
 80254b8:	b513      	push	{r0, r1, r4, lr}
 80254ba:	4c04      	ldr	r4, [pc, #16]	@ (80254cc <vsniprintf+0x14>)
 80254bc:	9300      	str	r3, [sp, #0]
 80254be:	0013      	movs	r3, r2
 80254c0:	000a      	movs	r2, r1
 80254c2:	0001      	movs	r1, r0
 80254c4:	6820      	ldr	r0, [r4, #0]
 80254c6:	f7ff ffc9 	bl	802545c <_vsniprintf_r>
 80254ca:	bd16      	pop	{r1, r2, r4, pc}
 80254cc:	200003e0 	.word	0x200003e0

080254d0 <_vsiprintf_r>:
 80254d0:	b510      	push	{r4, lr}
 80254d2:	2400      	movs	r4, #0
 80254d4:	b09a      	sub	sp, #104	@ 0x68
 80254d6:	9100      	str	r1, [sp, #0]
 80254d8:	9104      	str	r1, [sp, #16]
 80254da:	4906      	ldr	r1, [pc, #24]	@ (80254f4 <_vsiprintf_r+0x24>)
 80254dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80254de:	9105      	str	r1, [sp, #20]
 80254e0:	9102      	str	r1, [sp, #8]
 80254e2:	4905      	ldr	r1, [pc, #20]	@ (80254f8 <_vsiprintf_r+0x28>)
 80254e4:	9103      	str	r1, [sp, #12]
 80254e6:	4669      	mov	r1, sp
 80254e8:	f002 f9b8 	bl	802785c <_svfiprintf_r>
 80254ec:	9b00      	ldr	r3, [sp, #0]
 80254ee:	701c      	strb	r4, [r3, #0]
 80254f0:	b01a      	add	sp, #104	@ 0x68
 80254f2:	bd10      	pop	{r4, pc}
 80254f4:	7fffffff 	.word	0x7fffffff
 80254f8:	ffff0208 	.word	0xffff0208

080254fc <vsiprintf>:
 80254fc:	b510      	push	{r4, lr}
 80254fe:	4c04      	ldr	r4, [pc, #16]	@ (8025510 <vsiprintf+0x14>)
 8025500:	0013      	movs	r3, r2
 8025502:	000a      	movs	r2, r1
 8025504:	0001      	movs	r1, r0
 8025506:	6820      	ldr	r0, [r4, #0]
 8025508:	f7ff ffe2 	bl	80254d0 <_vsiprintf_r>
 802550c:	bd10      	pop	{r4, pc}
 802550e:	46c0      	nop			@ (mov r8, r8)
 8025510:	200003e0 	.word	0x200003e0

08025514 <__swbuf_r>:
 8025514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025516:	0006      	movs	r6, r0
 8025518:	000d      	movs	r5, r1
 802551a:	0014      	movs	r4, r2
 802551c:	2800      	cmp	r0, #0
 802551e:	d004      	beq.n	802552a <__swbuf_r+0x16>
 8025520:	6a03      	ldr	r3, [r0, #32]
 8025522:	2b00      	cmp	r3, #0
 8025524:	d101      	bne.n	802552a <__swbuf_r+0x16>
 8025526:	f7ff fe87 	bl	8025238 <__sinit>
 802552a:	69a3      	ldr	r3, [r4, #24]
 802552c:	60a3      	str	r3, [r4, #8]
 802552e:	89a3      	ldrh	r3, [r4, #12]
 8025530:	071b      	lsls	r3, r3, #28
 8025532:	d502      	bpl.n	802553a <__swbuf_r+0x26>
 8025534:	6923      	ldr	r3, [r4, #16]
 8025536:	2b00      	cmp	r3, #0
 8025538:	d109      	bne.n	802554e <__swbuf_r+0x3a>
 802553a:	0021      	movs	r1, r4
 802553c:	0030      	movs	r0, r6
 802553e:	f000 f82b 	bl	8025598 <__swsetup_r>
 8025542:	2800      	cmp	r0, #0
 8025544:	d003      	beq.n	802554e <__swbuf_r+0x3a>
 8025546:	2501      	movs	r5, #1
 8025548:	426d      	negs	r5, r5
 802554a:	0028      	movs	r0, r5
 802554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802554e:	6923      	ldr	r3, [r4, #16]
 8025550:	6820      	ldr	r0, [r4, #0]
 8025552:	b2ef      	uxtb	r7, r5
 8025554:	1ac0      	subs	r0, r0, r3
 8025556:	6963      	ldr	r3, [r4, #20]
 8025558:	b2ed      	uxtb	r5, r5
 802555a:	4283      	cmp	r3, r0
 802555c:	dc05      	bgt.n	802556a <__swbuf_r+0x56>
 802555e:	0021      	movs	r1, r4
 8025560:	0030      	movs	r0, r6
 8025562:	f002 fc43 	bl	8027dec <_fflush_r>
 8025566:	2800      	cmp	r0, #0
 8025568:	d1ed      	bne.n	8025546 <__swbuf_r+0x32>
 802556a:	68a3      	ldr	r3, [r4, #8]
 802556c:	3001      	adds	r0, #1
 802556e:	3b01      	subs	r3, #1
 8025570:	60a3      	str	r3, [r4, #8]
 8025572:	6823      	ldr	r3, [r4, #0]
 8025574:	1c5a      	adds	r2, r3, #1
 8025576:	6022      	str	r2, [r4, #0]
 8025578:	701f      	strb	r7, [r3, #0]
 802557a:	6963      	ldr	r3, [r4, #20]
 802557c:	4283      	cmp	r3, r0
 802557e:	d004      	beq.n	802558a <__swbuf_r+0x76>
 8025580:	89a3      	ldrh	r3, [r4, #12]
 8025582:	07db      	lsls	r3, r3, #31
 8025584:	d5e1      	bpl.n	802554a <__swbuf_r+0x36>
 8025586:	2d0a      	cmp	r5, #10
 8025588:	d1df      	bne.n	802554a <__swbuf_r+0x36>
 802558a:	0021      	movs	r1, r4
 802558c:	0030      	movs	r0, r6
 802558e:	f002 fc2d 	bl	8027dec <_fflush_r>
 8025592:	2800      	cmp	r0, #0
 8025594:	d0d9      	beq.n	802554a <__swbuf_r+0x36>
 8025596:	e7d6      	b.n	8025546 <__swbuf_r+0x32>

08025598 <__swsetup_r>:
 8025598:	4b2d      	ldr	r3, [pc, #180]	@ (8025650 <__swsetup_r+0xb8>)
 802559a:	b570      	push	{r4, r5, r6, lr}
 802559c:	0005      	movs	r5, r0
 802559e:	6818      	ldr	r0, [r3, #0]
 80255a0:	000c      	movs	r4, r1
 80255a2:	2800      	cmp	r0, #0
 80255a4:	d004      	beq.n	80255b0 <__swsetup_r+0x18>
 80255a6:	6a03      	ldr	r3, [r0, #32]
 80255a8:	2b00      	cmp	r3, #0
 80255aa:	d101      	bne.n	80255b0 <__swsetup_r+0x18>
 80255ac:	f7ff fe44 	bl	8025238 <__sinit>
 80255b0:	220c      	movs	r2, #12
 80255b2:	5ea3      	ldrsh	r3, [r4, r2]
 80255b4:	071a      	lsls	r2, r3, #28
 80255b6:	d423      	bmi.n	8025600 <__swsetup_r+0x68>
 80255b8:	06da      	lsls	r2, r3, #27
 80255ba:	d407      	bmi.n	80255cc <__swsetup_r+0x34>
 80255bc:	2209      	movs	r2, #9
 80255be:	602a      	str	r2, [r5, #0]
 80255c0:	2240      	movs	r2, #64	@ 0x40
 80255c2:	2001      	movs	r0, #1
 80255c4:	4313      	orrs	r3, r2
 80255c6:	81a3      	strh	r3, [r4, #12]
 80255c8:	4240      	negs	r0, r0
 80255ca:	e03a      	b.n	8025642 <__swsetup_r+0xaa>
 80255cc:	075b      	lsls	r3, r3, #29
 80255ce:	d513      	bpl.n	80255f8 <__swsetup_r+0x60>
 80255d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80255d2:	2900      	cmp	r1, #0
 80255d4:	d008      	beq.n	80255e8 <__swsetup_r+0x50>
 80255d6:	0023      	movs	r3, r4
 80255d8:	3344      	adds	r3, #68	@ 0x44
 80255da:	4299      	cmp	r1, r3
 80255dc:	d002      	beq.n	80255e4 <__swsetup_r+0x4c>
 80255de:	0028      	movs	r0, r5
 80255e0:	f000 ff9a 	bl	8026518 <_free_r>
 80255e4:	2300      	movs	r3, #0
 80255e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80255e8:	2224      	movs	r2, #36	@ 0x24
 80255ea:	89a3      	ldrh	r3, [r4, #12]
 80255ec:	4393      	bics	r3, r2
 80255ee:	81a3      	strh	r3, [r4, #12]
 80255f0:	2300      	movs	r3, #0
 80255f2:	6063      	str	r3, [r4, #4]
 80255f4:	6923      	ldr	r3, [r4, #16]
 80255f6:	6023      	str	r3, [r4, #0]
 80255f8:	2308      	movs	r3, #8
 80255fa:	89a2      	ldrh	r2, [r4, #12]
 80255fc:	4313      	orrs	r3, r2
 80255fe:	81a3      	strh	r3, [r4, #12]
 8025600:	6923      	ldr	r3, [r4, #16]
 8025602:	2b00      	cmp	r3, #0
 8025604:	d10b      	bne.n	802561e <__swsetup_r+0x86>
 8025606:	21a0      	movs	r1, #160	@ 0xa0
 8025608:	2280      	movs	r2, #128	@ 0x80
 802560a:	89a3      	ldrh	r3, [r4, #12]
 802560c:	0089      	lsls	r1, r1, #2
 802560e:	0092      	lsls	r2, r2, #2
 8025610:	400b      	ands	r3, r1
 8025612:	4293      	cmp	r3, r2
 8025614:	d003      	beq.n	802561e <__swsetup_r+0x86>
 8025616:	0021      	movs	r1, r4
 8025618:	0028      	movs	r0, r5
 802561a:	f002 fc3d 	bl	8027e98 <__smakebuf_r>
 802561e:	220c      	movs	r2, #12
 8025620:	5ea3      	ldrsh	r3, [r4, r2]
 8025622:	2101      	movs	r1, #1
 8025624:	001a      	movs	r2, r3
 8025626:	400a      	ands	r2, r1
 8025628:	420b      	tst	r3, r1
 802562a:	d00b      	beq.n	8025644 <__swsetup_r+0xac>
 802562c:	2200      	movs	r2, #0
 802562e:	60a2      	str	r2, [r4, #8]
 8025630:	6962      	ldr	r2, [r4, #20]
 8025632:	4252      	negs	r2, r2
 8025634:	61a2      	str	r2, [r4, #24]
 8025636:	2000      	movs	r0, #0
 8025638:	6922      	ldr	r2, [r4, #16]
 802563a:	4282      	cmp	r2, r0
 802563c:	d101      	bne.n	8025642 <__swsetup_r+0xaa>
 802563e:	061a      	lsls	r2, r3, #24
 8025640:	d4be      	bmi.n	80255c0 <__swsetup_r+0x28>
 8025642:	bd70      	pop	{r4, r5, r6, pc}
 8025644:	0799      	lsls	r1, r3, #30
 8025646:	d400      	bmi.n	802564a <__swsetup_r+0xb2>
 8025648:	6962      	ldr	r2, [r4, #20]
 802564a:	60a2      	str	r2, [r4, #8]
 802564c:	e7f3      	b.n	8025636 <__swsetup_r+0x9e>
 802564e:	46c0      	nop			@ (mov r8, r8)
 8025650:	200003e0 	.word	0x200003e0

08025654 <memset>:
 8025654:	0003      	movs	r3, r0
 8025656:	1882      	adds	r2, r0, r2
 8025658:	4293      	cmp	r3, r2
 802565a:	d100      	bne.n	802565e <memset+0xa>
 802565c:	4770      	bx	lr
 802565e:	7019      	strb	r1, [r3, #0]
 8025660:	3301      	adds	r3, #1
 8025662:	e7f9      	b.n	8025658 <memset+0x4>

08025664 <strchr>:
 8025664:	b2c9      	uxtb	r1, r1
 8025666:	7803      	ldrb	r3, [r0, #0]
 8025668:	2b00      	cmp	r3, #0
 802566a:	d004      	beq.n	8025676 <strchr+0x12>
 802566c:	428b      	cmp	r3, r1
 802566e:	d100      	bne.n	8025672 <strchr+0xe>
 8025670:	4770      	bx	lr
 8025672:	3001      	adds	r0, #1
 8025674:	e7f7      	b.n	8025666 <strchr+0x2>
 8025676:	424b      	negs	r3, r1
 8025678:	4159      	adcs	r1, r3
 802567a:	4249      	negs	r1, r1
 802567c:	4008      	ands	r0, r1
 802567e:	e7f7      	b.n	8025670 <strchr+0xc>

08025680 <strncmp>:
 8025680:	b530      	push	{r4, r5, lr}
 8025682:	0005      	movs	r5, r0
 8025684:	1e10      	subs	r0, r2, #0
 8025686:	d00b      	beq.n	80256a0 <strncmp+0x20>
 8025688:	2400      	movs	r4, #0
 802568a:	3a01      	subs	r2, #1
 802568c:	5d2b      	ldrb	r3, [r5, r4]
 802568e:	5d08      	ldrb	r0, [r1, r4]
 8025690:	4283      	cmp	r3, r0
 8025692:	d104      	bne.n	802569e <strncmp+0x1e>
 8025694:	4294      	cmp	r4, r2
 8025696:	d002      	beq.n	802569e <strncmp+0x1e>
 8025698:	3401      	adds	r4, #1
 802569a:	2b00      	cmp	r3, #0
 802569c:	d1f6      	bne.n	802568c <strncmp+0xc>
 802569e:	1a18      	subs	r0, r3, r0
 80256a0:	bd30      	pop	{r4, r5, pc}

080256a2 <strncpy>:
 80256a2:	0003      	movs	r3, r0
 80256a4:	b530      	push	{r4, r5, lr}
 80256a6:	001d      	movs	r5, r3
 80256a8:	2a00      	cmp	r2, #0
 80256aa:	d006      	beq.n	80256ba <strncpy+0x18>
 80256ac:	780c      	ldrb	r4, [r1, #0]
 80256ae:	3a01      	subs	r2, #1
 80256b0:	3301      	adds	r3, #1
 80256b2:	702c      	strb	r4, [r5, #0]
 80256b4:	3101      	adds	r1, #1
 80256b6:	2c00      	cmp	r4, #0
 80256b8:	d1f5      	bne.n	80256a6 <strncpy+0x4>
 80256ba:	2100      	movs	r1, #0
 80256bc:	189a      	adds	r2, r3, r2
 80256be:	4293      	cmp	r3, r2
 80256c0:	d100      	bne.n	80256c4 <strncpy+0x22>
 80256c2:	bd30      	pop	{r4, r5, pc}
 80256c4:	7019      	strb	r1, [r3, #0]
 80256c6:	3301      	adds	r3, #1
 80256c8:	e7f9      	b.n	80256be <strncpy+0x1c>

080256ca <strstr>:
 80256ca:	780a      	ldrb	r2, [r1, #0]
 80256cc:	b530      	push	{r4, r5, lr}
 80256ce:	2a00      	cmp	r2, #0
 80256d0:	d10c      	bne.n	80256ec <strstr+0x22>
 80256d2:	bd30      	pop	{r4, r5, pc}
 80256d4:	429a      	cmp	r2, r3
 80256d6:	d108      	bne.n	80256ea <strstr+0x20>
 80256d8:	2301      	movs	r3, #1
 80256da:	5ccc      	ldrb	r4, [r1, r3]
 80256dc:	2c00      	cmp	r4, #0
 80256de:	d0f8      	beq.n	80256d2 <strstr+0x8>
 80256e0:	5cc5      	ldrb	r5, [r0, r3]
 80256e2:	42a5      	cmp	r5, r4
 80256e4:	d101      	bne.n	80256ea <strstr+0x20>
 80256e6:	3301      	adds	r3, #1
 80256e8:	e7f7      	b.n	80256da <strstr+0x10>
 80256ea:	3001      	adds	r0, #1
 80256ec:	7803      	ldrb	r3, [r0, #0]
 80256ee:	2b00      	cmp	r3, #0
 80256f0:	d1f0      	bne.n	80256d4 <strstr+0xa>
 80256f2:	0018      	movs	r0, r3
 80256f4:	e7ed      	b.n	80256d2 <strstr+0x8>
	...

080256f8 <_localeconv_r>:
 80256f8:	4800      	ldr	r0, [pc, #0]	@ (80256fc <_localeconv_r+0x4>)
 80256fa:	4770      	bx	lr
 80256fc:	20000364 	.word	0x20000364

08025700 <_close_r>:
 8025700:	2300      	movs	r3, #0
 8025702:	b570      	push	{r4, r5, r6, lr}
 8025704:	4d06      	ldr	r5, [pc, #24]	@ (8025720 <_close_r+0x20>)
 8025706:	0004      	movs	r4, r0
 8025708:	0008      	movs	r0, r1
 802570a:	602b      	str	r3, [r5, #0]
 802570c:	f7ed f86e 	bl	80127ec <_close>
 8025710:	1c43      	adds	r3, r0, #1
 8025712:	d103      	bne.n	802571c <_close_r+0x1c>
 8025714:	682b      	ldr	r3, [r5, #0]
 8025716:	2b00      	cmp	r3, #0
 8025718:	d000      	beq.n	802571c <_close_r+0x1c>
 802571a:	6023      	str	r3, [r4, #0]
 802571c:	bd70      	pop	{r4, r5, r6, pc}
 802571e:	46c0      	nop			@ (mov r8, r8)
 8025720:	20003618 	.word	0x20003618

08025724 <_lseek_r>:
 8025724:	b570      	push	{r4, r5, r6, lr}
 8025726:	0004      	movs	r4, r0
 8025728:	0008      	movs	r0, r1
 802572a:	0011      	movs	r1, r2
 802572c:	001a      	movs	r2, r3
 802572e:	2300      	movs	r3, #0
 8025730:	4d05      	ldr	r5, [pc, #20]	@ (8025748 <_lseek_r+0x24>)
 8025732:	602b      	str	r3, [r5, #0]
 8025734:	f7ed f87b 	bl	801282e <_lseek>
 8025738:	1c43      	adds	r3, r0, #1
 802573a:	d103      	bne.n	8025744 <_lseek_r+0x20>
 802573c:	682b      	ldr	r3, [r5, #0]
 802573e:	2b00      	cmp	r3, #0
 8025740:	d000      	beq.n	8025744 <_lseek_r+0x20>
 8025742:	6023      	str	r3, [r4, #0]
 8025744:	bd70      	pop	{r4, r5, r6, pc}
 8025746:	46c0      	nop			@ (mov r8, r8)
 8025748:	20003618 	.word	0x20003618

0802574c <_read_r>:
 802574c:	b570      	push	{r4, r5, r6, lr}
 802574e:	0004      	movs	r4, r0
 8025750:	0008      	movs	r0, r1
 8025752:	0011      	movs	r1, r2
 8025754:	001a      	movs	r2, r3
 8025756:	2300      	movs	r3, #0
 8025758:	4d05      	ldr	r5, [pc, #20]	@ (8025770 <_read_r+0x24>)
 802575a:	602b      	str	r3, [r5, #0]
 802575c:	f7ed f829 	bl	80127b2 <_read>
 8025760:	1c43      	adds	r3, r0, #1
 8025762:	d103      	bne.n	802576c <_read_r+0x20>
 8025764:	682b      	ldr	r3, [r5, #0]
 8025766:	2b00      	cmp	r3, #0
 8025768:	d000      	beq.n	802576c <_read_r+0x20>
 802576a:	6023      	str	r3, [r4, #0]
 802576c:	bd70      	pop	{r4, r5, r6, pc}
 802576e:	46c0      	nop			@ (mov r8, r8)
 8025770:	20003618 	.word	0x20003618

08025774 <_write_r>:
 8025774:	b570      	push	{r4, r5, r6, lr}
 8025776:	0004      	movs	r4, r0
 8025778:	0008      	movs	r0, r1
 802577a:	0011      	movs	r1, r2
 802577c:	001a      	movs	r2, r3
 802577e:	2300      	movs	r3, #0
 8025780:	4d05      	ldr	r5, [pc, #20]	@ (8025798 <_write_r+0x24>)
 8025782:	602b      	str	r3, [r5, #0]
 8025784:	f7ed fce6 	bl	8013154 <_write>
 8025788:	1c43      	adds	r3, r0, #1
 802578a:	d103      	bne.n	8025794 <_write_r+0x20>
 802578c:	682b      	ldr	r3, [r5, #0]
 802578e:	2b00      	cmp	r3, #0
 8025790:	d000      	beq.n	8025794 <_write_r+0x20>
 8025792:	6023      	str	r3, [r4, #0]
 8025794:	bd70      	pop	{r4, r5, r6, pc}
 8025796:	46c0      	nop			@ (mov r8, r8)
 8025798:	20003618 	.word	0x20003618

0802579c <__errno>:
 802579c:	4b01      	ldr	r3, [pc, #4]	@ (80257a4 <__errno+0x8>)
 802579e:	6818      	ldr	r0, [r3, #0]
 80257a0:	4770      	bx	lr
 80257a2:	46c0      	nop			@ (mov r8, r8)
 80257a4:	200003e0 	.word	0x200003e0

080257a8 <__libc_init_array>:
 80257a8:	b570      	push	{r4, r5, r6, lr}
 80257aa:	2600      	movs	r6, #0
 80257ac:	4c0c      	ldr	r4, [pc, #48]	@ (80257e0 <__libc_init_array+0x38>)
 80257ae:	4d0d      	ldr	r5, [pc, #52]	@ (80257e4 <__libc_init_array+0x3c>)
 80257b0:	1b64      	subs	r4, r4, r5
 80257b2:	10a4      	asrs	r4, r4, #2
 80257b4:	42a6      	cmp	r6, r4
 80257b6:	d109      	bne.n	80257cc <__libc_init_array+0x24>
 80257b8:	2600      	movs	r6, #0
 80257ba:	f003 ffcb 	bl	8029754 <_init>
 80257be:	4c0a      	ldr	r4, [pc, #40]	@ (80257e8 <__libc_init_array+0x40>)
 80257c0:	4d0a      	ldr	r5, [pc, #40]	@ (80257ec <__libc_init_array+0x44>)
 80257c2:	1b64      	subs	r4, r4, r5
 80257c4:	10a4      	asrs	r4, r4, #2
 80257c6:	42a6      	cmp	r6, r4
 80257c8:	d105      	bne.n	80257d6 <__libc_init_array+0x2e>
 80257ca:	bd70      	pop	{r4, r5, r6, pc}
 80257cc:	00b3      	lsls	r3, r6, #2
 80257ce:	58eb      	ldr	r3, [r5, r3]
 80257d0:	4798      	blx	r3
 80257d2:	3601      	adds	r6, #1
 80257d4:	e7ee      	b.n	80257b4 <__libc_init_array+0xc>
 80257d6:	00b3      	lsls	r3, r6, #2
 80257d8:	58eb      	ldr	r3, [r5, r3]
 80257da:	4798      	blx	r3
 80257dc:	3601      	adds	r6, #1
 80257de:	e7f2      	b.n	80257c6 <__libc_init_array+0x1e>
 80257e0:	0802e460 	.word	0x0802e460
 80257e4:	0802e460 	.word	0x0802e460
 80257e8:	0802e464 	.word	0x0802e464
 80257ec:	0802e460 	.word	0x0802e460

080257f0 <__retarget_lock_init_recursive>:
 80257f0:	4770      	bx	lr

080257f2 <__retarget_lock_acquire_recursive>:
 80257f2:	4770      	bx	lr

080257f4 <__retarget_lock_release_recursive>:
 80257f4:	4770      	bx	lr

080257f6 <memchr>:
 80257f6:	b2c9      	uxtb	r1, r1
 80257f8:	1882      	adds	r2, r0, r2
 80257fa:	4290      	cmp	r0, r2
 80257fc:	d101      	bne.n	8025802 <memchr+0xc>
 80257fe:	2000      	movs	r0, #0
 8025800:	4770      	bx	lr
 8025802:	7803      	ldrb	r3, [r0, #0]
 8025804:	428b      	cmp	r3, r1
 8025806:	d0fb      	beq.n	8025800 <memchr+0xa>
 8025808:	3001      	adds	r0, #1
 802580a:	e7f6      	b.n	80257fa <memchr+0x4>

0802580c <memcpy>:
 802580c:	2300      	movs	r3, #0
 802580e:	b510      	push	{r4, lr}
 8025810:	429a      	cmp	r2, r3
 8025812:	d100      	bne.n	8025816 <memcpy+0xa>
 8025814:	bd10      	pop	{r4, pc}
 8025816:	5ccc      	ldrb	r4, [r1, r3]
 8025818:	54c4      	strb	r4, [r0, r3]
 802581a:	3301      	adds	r3, #1
 802581c:	e7f8      	b.n	8025810 <memcpy+0x4>
	...

08025820 <nan>:
 8025820:	2000      	movs	r0, #0
 8025822:	4901      	ldr	r1, [pc, #4]	@ (8025828 <nan+0x8>)
 8025824:	4770      	bx	lr
 8025826:	46c0      	nop			@ (mov r8, r8)
 8025828:	7ff80000 	.word	0x7ff80000

0802582c <quorem>:
 802582c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802582e:	6903      	ldr	r3, [r0, #16]
 8025830:	690c      	ldr	r4, [r1, #16]
 8025832:	b089      	sub	sp, #36	@ 0x24
 8025834:	9003      	str	r0, [sp, #12]
 8025836:	9106      	str	r1, [sp, #24]
 8025838:	2000      	movs	r0, #0
 802583a:	42a3      	cmp	r3, r4
 802583c:	db63      	blt.n	8025906 <quorem+0xda>
 802583e:	000b      	movs	r3, r1
 8025840:	3c01      	subs	r4, #1
 8025842:	3314      	adds	r3, #20
 8025844:	00a5      	lsls	r5, r4, #2
 8025846:	9304      	str	r3, [sp, #16]
 8025848:	195b      	adds	r3, r3, r5
 802584a:	9305      	str	r3, [sp, #20]
 802584c:	9b03      	ldr	r3, [sp, #12]
 802584e:	3314      	adds	r3, #20
 8025850:	9301      	str	r3, [sp, #4]
 8025852:	195d      	adds	r5, r3, r5
 8025854:	9b05      	ldr	r3, [sp, #20]
 8025856:	682f      	ldr	r7, [r5, #0]
 8025858:	681e      	ldr	r6, [r3, #0]
 802585a:	0038      	movs	r0, r7
 802585c:	3601      	adds	r6, #1
 802585e:	0031      	movs	r1, r6
 8025860:	f7da fca0 	bl	80001a4 <__udivsi3>
 8025864:	9002      	str	r0, [sp, #8]
 8025866:	42b7      	cmp	r7, r6
 8025868:	d327      	bcc.n	80258ba <quorem+0x8e>
 802586a:	9b04      	ldr	r3, [sp, #16]
 802586c:	2700      	movs	r7, #0
 802586e:	469c      	mov	ip, r3
 8025870:	9e01      	ldr	r6, [sp, #4]
 8025872:	9707      	str	r7, [sp, #28]
 8025874:	4662      	mov	r2, ip
 8025876:	ca08      	ldmia	r2!, {r3}
 8025878:	6830      	ldr	r0, [r6, #0]
 802587a:	4694      	mov	ip, r2
 802587c:	9a02      	ldr	r2, [sp, #8]
 802587e:	b299      	uxth	r1, r3
 8025880:	4351      	muls	r1, r2
 8025882:	0c1b      	lsrs	r3, r3, #16
 8025884:	4353      	muls	r3, r2
 8025886:	19c9      	adds	r1, r1, r7
 8025888:	0c0a      	lsrs	r2, r1, #16
 802588a:	189b      	adds	r3, r3, r2
 802588c:	b289      	uxth	r1, r1
 802588e:	b282      	uxth	r2, r0
 8025890:	1a52      	subs	r2, r2, r1
 8025892:	9907      	ldr	r1, [sp, #28]
 8025894:	0c1f      	lsrs	r7, r3, #16
 8025896:	1852      	adds	r2, r2, r1
 8025898:	0c00      	lsrs	r0, r0, #16
 802589a:	b29b      	uxth	r3, r3
 802589c:	1411      	asrs	r1, r2, #16
 802589e:	1ac3      	subs	r3, r0, r3
 80258a0:	185b      	adds	r3, r3, r1
 80258a2:	1419      	asrs	r1, r3, #16
 80258a4:	b292      	uxth	r2, r2
 80258a6:	041b      	lsls	r3, r3, #16
 80258a8:	431a      	orrs	r2, r3
 80258aa:	9b05      	ldr	r3, [sp, #20]
 80258ac:	9107      	str	r1, [sp, #28]
 80258ae:	c604      	stmia	r6!, {r2}
 80258b0:	4563      	cmp	r3, ip
 80258b2:	d2df      	bcs.n	8025874 <quorem+0x48>
 80258b4:	682b      	ldr	r3, [r5, #0]
 80258b6:	2b00      	cmp	r3, #0
 80258b8:	d02b      	beq.n	8025912 <quorem+0xe6>
 80258ba:	9906      	ldr	r1, [sp, #24]
 80258bc:	9803      	ldr	r0, [sp, #12]
 80258be:	f001 fd6f 	bl	80273a0 <__mcmp>
 80258c2:	2800      	cmp	r0, #0
 80258c4:	db1e      	blt.n	8025904 <quorem+0xd8>
 80258c6:	2600      	movs	r6, #0
 80258c8:	9d01      	ldr	r5, [sp, #4]
 80258ca:	9904      	ldr	r1, [sp, #16]
 80258cc:	c901      	ldmia	r1!, {r0}
 80258ce:	682b      	ldr	r3, [r5, #0]
 80258d0:	b287      	uxth	r7, r0
 80258d2:	b29a      	uxth	r2, r3
 80258d4:	1bd2      	subs	r2, r2, r7
 80258d6:	1992      	adds	r2, r2, r6
 80258d8:	0c00      	lsrs	r0, r0, #16
 80258da:	0c1b      	lsrs	r3, r3, #16
 80258dc:	1a1b      	subs	r3, r3, r0
 80258de:	1410      	asrs	r0, r2, #16
 80258e0:	181b      	adds	r3, r3, r0
 80258e2:	141e      	asrs	r6, r3, #16
 80258e4:	b292      	uxth	r2, r2
 80258e6:	041b      	lsls	r3, r3, #16
 80258e8:	431a      	orrs	r2, r3
 80258ea:	9b05      	ldr	r3, [sp, #20]
 80258ec:	c504      	stmia	r5!, {r2}
 80258ee:	428b      	cmp	r3, r1
 80258f0:	d2ec      	bcs.n	80258cc <quorem+0xa0>
 80258f2:	9a01      	ldr	r2, [sp, #4]
 80258f4:	00a3      	lsls	r3, r4, #2
 80258f6:	18d3      	adds	r3, r2, r3
 80258f8:	681a      	ldr	r2, [r3, #0]
 80258fa:	2a00      	cmp	r2, #0
 80258fc:	d014      	beq.n	8025928 <quorem+0xfc>
 80258fe:	9b02      	ldr	r3, [sp, #8]
 8025900:	3301      	adds	r3, #1
 8025902:	9302      	str	r3, [sp, #8]
 8025904:	9802      	ldr	r0, [sp, #8]
 8025906:	b009      	add	sp, #36	@ 0x24
 8025908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802590a:	682b      	ldr	r3, [r5, #0]
 802590c:	2b00      	cmp	r3, #0
 802590e:	d104      	bne.n	802591a <quorem+0xee>
 8025910:	3c01      	subs	r4, #1
 8025912:	9b01      	ldr	r3, [sp, #4]
 8025914:	3d04      	subs	r5, #4
 8025916:	42ab      	cmp	r3, r5
 8025918:	d3f7      	bcc.n	802590a <quorem+0xde>
 802591a:	9b03      	ldr	r3, [sp, #12]
 802591c:	611c      	str	r4, [r3, #16]
 802591e:	e7cc      	b.n	80258ba <quorem+0x8e>
 8025920:	681a      	ldr	r2, [r3, #0]
 8025922:	2a00      	cmp	r2, #0
 8025924:	d104      	bne.n	8025930 <quorem+0x104>
 8025926:	3c01      	subs	r4, #1
 8025928:	9a01      	ldr	r2, [sp, #4]
 802592a:	3b04      	subs	r3, #4
 802592c:	429a      	cmp	r2, r3
 802592e:	d3f7      	bcc.n	8025920 <quorem+0xf4>
 8025930:	9b03      	ldr	r3, [sp, #12]
 8025932:	611c      	str	r4, [r3, #16]
 8025934:	e7e3      	b.n	80258fe <quorem+0xd2>
	...

08025938 <_dtoa_r>:
 8025938:	b5f0      	push	{r4, r5, r6, r7, lr}
 802593a:	0014      	movs	r4, r2
 802593c:	001d      	movs	r5, r3
 802593e:	69c6      	ldr	r6, [r0, #28]
 8025940:	b09d      	sub	sp, #116	@ 0x74
 8025942:	940a      	str	r4, [sp, #40]	@ 0x28
 8025944:	950b      	str	r5, [sp, #44]	@ 0x2c
 8025946:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8025948:	9003      	str	r0, [sp, #12]
 802594a:	2e00      	cmp	r6, #0
 802594c:	d10f      	bne.n	802596e <_dtoa_r+0x36>
 802594e:	2010      	movs	r0, #16
 8025950:	f001 f986 	bl	8026c60 <malloc>
 8025954:	9b03      	ldr	r3, [sp, #12]
 8025956:	1e02      	subs	r2, r0, #0
 8025958:	61d8      	str	r0, [r3, #28]
 802595a:	d104      	bne.n	8025966 <_dtoa_r+0x2e>
 802595c:	21ef      	movs	r1, #239	@ 0xef
 802595e:	4bc7      	ldr	r3, [pc, #796]	@ (8025c7c <_dtoa_r+0x344>)
 8025960:	48c7      	ldr	r0, [pc, #796]	@ (8025c80 <_dtoa_r+0x348>)
 8025962:	f002 fb23 	bl	8027fac <__assert_func>
 8025966:	6046      	str	r6, [r0, #4]
 8025968:	6086      	str	r6, [r0, #8]
 802596a:	6006      	str	r6, [r0, #0]
 802596c:	60c6      	str	r6, [r0, #12]
 802596e:	9b03      	ldr	r3, [sp, #12]
 8025970:	69db      	ldr	r3, [r3, #28]
 8025972:	6819      	ldr	r1, [r3, #0]
 8025974:	2900      	cmp	r1, #0
 8025976:	d00b      	beq.n	8025990 <_dtoa_r+0x58>
 8025978:	685a      	ldr	r2, [r3, #4]
 802597a:	2301      	movs	r3, #1
 802597c:	4093      	lsls	r3, r2
 802597e:	604a      	str	r2, [r1, #4]
 8025980:	608b      	str	r3, [r1, #8]
 8025982:	9803      	ldr	r0, [sp, #12]
 8025984:	f001 fa7e 	bl	8026e84 <_Bfree>
 8025988:	2200      	movs	r2, #0
 802598a:	9b03      	ldr	r3, [sp, #12]
 802598c:	69db      	ldr	r3, [r3, #28]
 802598e:	601a      	str	r2, [r3, #0]
 8025990:	2d00      	cmp	r5, #0
 8025992:	da1e      	bge.n	80259d2 <_dtoa_r+0x9a>
 8025994:	2301      	movs	r3, #1
 8025996:	603b      	str	r3, [r7, #0]
 8025998:	006b      	lsls	r3, r5, #1
 802599a:	085b      	lsrs	r3, r3, #1
 802599c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802599e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80259a0:	4bb8      	ldr	r3, [pc, #736]	@ (8025c84 <_dtoa_r+0x34c>)
 80259a2:	4ab8      	ldr	r2, [pc, #736]	@ (8025c84 <_dtoa_r+0x34c>)
 80259a4:	403b      	ands	r3, r7
 80259a6:	4293      	cmp	r3, r2
 80259a8:	d116      	bne.n	80259d8 <_dtoa_r+0xa0>
 80259aa:	4bb7      	ldr	r3, [pc, #732]	@ (8025c88 <_dtoa_r+0x350>)
 80259ac:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80259ae:	6013      	str	r3, [r2, #0]
 80259b0:	033b      	lsls	r3, r7, #12
 80259b2:	0b1b      	lsrs	r3, r3, #12
 80259b4:	4323      	orrs	r3, r4
 80259b6:	d101      	bne.n	80259bc <_dtoa_r+0x84>
 80259b8:	f000 fd80 	bl	80264bc <_dtoa_r+0xb84>
 80259bc:	4bb3      	ldr	r3, [pc, #716]	@ (8025c8c <_dtoa_r+0x354>)
 80259be:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80259c0:	9308      	str	r3, [sp, #32]
 80259c2:	2a00      	cmp	r2, #0
 80259c4:	d002      	beq.n	80259cc <_dtoa_r+0x94>
 80259c6:	4bb2      	ldr	r3, [pc, #712]	@ (8025c90 <_dtoa_r+0x358>)
 80259c8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80259ca:	6013      	str	r3, [r2, #0]
 80259cc:	9808      	ldr	r0, [sp, #32]
 80259ce:	b01d      	add	sp, #116	@ 0x74
 80259d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80259d2:	2300      	movs	r3, #0
 80259d4:	603b      	str	r3, [r7, #0]
 80259d6:	e7e2      	b.n	802599e <_dtoa_r+0x66>
 80259d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80259da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80259dc:	9212      	str	r2, [sp, #72]	@ 0x48
 80259de:	9313      	str	r3, [sp, #76]	@ 0x4c
 80259e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80259e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80259e4:	2200      	movs	r2, #0
 80259e6:	2300      	movs	r3, #0
 80259e8:	f7da fd62 	bl	80004b0 <__aeabi_dcmpeq>
 80259ec:	1e06      	subs	r6, r0, #0
 80259ee:	d00b      	beq.n	8025a08 <_dtoa_r+0xd0>
 80259f0:	2301      	movs	r3, #1
 80259f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80259f4:	6013      	str	r3, [r2, #0]
 80259f6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80259f8:	2b00      	cmp	r3, #0
 80259fa:	d002      	beq.n	8025a02 <_dtoa_r+0xca>
 80259fc:	4ba5      	ldr	r3, [pc, #660]	@ (8025c94 <_dtoa_r+0x35c>)
 80259fe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025a00:	6013      	str	r3, [r2, #0]
 8025a02:	4ba5      	ldr	r3, [pc, #660]	@ (8025c98 <_dtoa_r+0x360>)
 8025a04:	9308      	str	r3, [sp, #32]
 8025a06:	e7e1      	b.n	80259cc <_dtoa_r+0x94>
 8025a08:	ab1a      	add	r3, sp, #104	@ 0x68
 8025a0a:	9301      	str	r3, [sp, #4]
 8025a0c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8025a0e:	9300      	str	r3, [sp, #0]
 8025a10:	9803      	ldr	r0, [sp, #12]
 8025a12:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025a14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a16:	f001 fde5 	bl	80275e4 <__d2b>
 8025a1a:	007a      	lsls	r2, r7, #1
 8025a1c:	9005      	str	r0, [sp, #20]
 8025a1e:	0d52      	lsrs	r2, r2, #21
 8025a20:	d100      	bne.n	8025a24 <_dtoa_r+0xec>
 8025a22:	e07b      	b.n	8025b1c <_dtoa_r+0x1e4>
 8025a24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a26:	9618      	str	r6, [sp, #96]	@ 0x60
 8025a28:	0319      	lsls	r1, r3, #12
 8025a2a:	4b9c      	ldr	r3, [pc, #624]	@ (8025c9c <_dtoa_r+0x364>)
 8025a2c:	0b09      	lsrs	r1, r1, #12
 8025a2e:	430b      	orrs	r3, r1
 8025a30:	499b      	ldr	r1, [pc, #620]	@ (8025ca0 <_dtoa_r+0x368>)
 8025a32:	1857      	adds	r7, r2, r1
 8025a34:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025a36:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025a38:	0019      	movs	r1, r3
 8025a3a:	2200      	movs	r2, #0
 8025a3c:	4b99      	ldr	r3, [pc, #612]	@ (8025ca4 <_dtoa_r+0x36c>)
 8025a3e:	f7dd fa6f 	bl	8002f20 <__aeabi_dsub>
 8025a42:	4a99      	ldr	r2, [pc, #612]	@ (8025ca8 <_dtoa_r+0x370>)
 8025a44:	4b99      	ldr	r3, [pc, #612]	@ (8025cac <_dtoa_r+0x374>)
 8025a46:	f7dc ff85 	bl	8002954 <__aeabi_dmul>
 8025a4a:	4a99      	ldr	r2, [pc, #612]	@ (8025cb0 <_dtoa_r+0x378>)
 8025a4c:	4b99      	ldr	r3, [pc, #612]	@ (8025cb4 <_dtoa_r+0x37c>)
 8025a4e:	f7db ff81 	bl	8001954 <__aeabi_dadd>
 8025a52:	0004      	movs	r4, r0
 8025a54:	0038      	movs	r0, r7
 8025a56:	000d      	movs	r5, r1
 8025a58:	f7dd feca 	bl	80037f0 <__aeabi_i2d>
 8025a5c:	4a96      	ldr	r2, [pc, #600]	@ (8025cb8 <_dtoa_r+0x380>)
 8025a5e:	4b97      	ldr	r3, [pc, #604]	@ (8025cbc <_dtoa_r+0x384>)
 8025a60:	f7dc ff78 	bl	8002954 <__aeabi_dmul>
 8025a64:	0002      	movs	r2, r0
 8025a66:	000b      	movs	r3, r1
 8025a68:	0020      	movs	r0, r4
 8025a6a:	0029      	movs	r1, r5
 8025a6c:	f7db ff72 	bl	8001954 <__aeabi_dadd>
 8025a70:	0004      	movs	r4, r0
 8025a72:	000d      	movs	r5, r1
 8025a74:	f7dd fe80 	bl	8003778 <__aeabi_d2iz>
 8025a78:	2200      	movs	r2, #0
 8025a7a:	9004      	str	r0, [sp, #16]
 8025a7c:	2300      	movs	r3, #0
 8025a7e:	0020      	movs	r0, r4
 8025a80:	0029      	movs	r1, r5
 8025a82:	f7da fd1b 	bl	80004bc <__aeabi_dcmplt>
 8025a86:	2800      	cmp	r0, #0
 8025a88:	d00b      	beq.n	8025aa2 <_dtoa_r+0x16a>
 8025a8a:	9804      	ldr	r0, [sp, #16]
 8025a8c:	f7dd feb0 	bl	80037f0 <__aeabi_i2d>
 8025a90:	002b      	movs	r3, r5
 8025a92:	0022      	movs	r2, r4
 8025a94:	f7da fd0c 	bl	80004b0 <__aeabi_dcmpeq>
 8025a98:	4243      	negs	r3, r0
 8025a9a:	4158      	adcs	r0, r3
 8025a9c:	9b04      	ldr	r3, [sp, #16]
 8025a9e:	1a1b      	subs	r3, r3, r0
 8025aa0:	9304      	str	r3, [sp, #16]
 8025aa2:	2301      	movs	r3, #1
 8025aa4:	9315      	str	r3, [sp, #84]	@ 0x54
 8025aa6:	9b04      	ldr	r3, [sp, #16]
 8025aa8:	2b16      	cmp	r3, #22
 8025aaa:	d810      	bhi.n	8025ace <_dtoa_r+0x196>
 8025aac:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025aae:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025ab0:	9a04      	ldr	r2, [sp, #16]
 8025ab2:	4b83      	ldr	r3, [pc, #524]	@ (8025cc0 <_dtoa_r+0x388>)
 8025ab4:	00d2      	lsls	r2, r2, #3
 8025ab6:	189b      	adds	r3, r3, r2
 8025ab8:	681a      	ldr	r2, [r3, #0]
 8025aba:	685b      	ldr	r3, [r3, #4]
 8025abc:	f7da fcfe 	bl	80004bc <__aeabi_dcmplt>
 8025ac0:	2800      	cmp	r0, #0
 8025ac2:	d047      	beq.n	8025b54 <_dtoa_r+0x21c>
 8025ac4:	9b04      	ldr	r3, [sp, #16]
 8025ac6:	3b01      	subs	r3, #1
 8025ac8:	9304      	str	r3, [sp, #16]
 8025aca:	2300      	movs	r3, #0
 8025acc:	9315      	str	r3, [sp, #84]	@ 0x54
 8025ace:	2200      	movs	r2, #0
 8025ad0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025ad2:	9206      	str	r2, [sp, #24]
 8025ad4:	1bdb      	subs	r3, r3, r7
 8025ad6:	1e5a      	subs	r2, r3, #1
 8025ad8:	d53e      	bpl.n	8025b58 <_dtoa_r+0x220>
 8025ada:	2201      	movs	r2, #1
 8025adc:	1ad3      	subs	r3, r2, r3
 8025ade:	9306      	str	r3, [sp, #24]
 8025ae0:	2300      	movs	r3, #0
 8025ae2:	930d      	str	r3, [sp, #52]	@ 0x34
 8025ae4:	9b04      	ldr	r3, [sp, #16]
 8025ae6:	2b00      	cmp	r3, #0
 8025ae8:	db38      	blt.n	8025b5c <_dtoa_r+0x224>
 8025aea:	9a04      	ldr	r2, [sp, #16]
 8025aec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025aee:	4694      	mov	ip, r2
 8025af0:	4463      	add	r3, ip
 8025af2:	930d      	str	r3, [sp, #52]	@ 0x34
 8025af4:	2300      	movs	r3, #0
 8025af6:	9214      	str	r2, [sp, #80]	@ 0x50
 8025af8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025afa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025afc:	2401      	movs	r4, #1
 8025afe:	2b09      	cmp	r3, #9
 8025b00:	d862      	bhi.n	8025bc8 <_dtoa_r+0x290>
 8025b02:	2b05      	cmp	r3, #5
 8025b04:	dd02      	ble.n	8025b0c <_dtoa_r+0x1d4>
 8025b06:	2400      	movs	r4, #0
 8025b08:	3b04      	subs	r3, #4
 8025b0a:	9322      	str	r3, [sp, #136]	@ 0x88
 8025b0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025b0e:	1e98      	subs	r0, r3, #2
 8025b10:	2803      	cmp	r0, #3
 8025b12:	d863      	bhi.n	8025bdc <_dtoa_r+0x2a4>
 8025b14:	f7da fb32 	bl	800017c <__gnu_thumb1_case_uqi>
 8025b18:	2b385654 	.word	0x2b385654
 8025b1c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025b1e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8025b20:	18f6      	adds	r6, r6, r3
 8025b22:	4b68      	ldr	r3, [pc, #416]	@ (8025cc4 <_dtoa_r+0x38c>)
 8025b24:	18f2      	adds	r2, r6, r3
 8025b26:	2a20      	cmp	r2, #32
 8025b28:	dd0f      	ble.n	8025b4a <_dtoa_r+0x212>
 8025b2a:	2340      	movs	r3, #64	@ 0x40
 8025b2c:	1a9b      	subs	r3, r3, r2
 8025b2e:	409f      	lsls	r7, r3
 8025b30:	4b65      	ldr	r3, [pc, #404]	@ (8025cc8 <_dtoa_r+0x390>)
 8025b32:	0038      	movs	r0, r7
 8025b34:	18f3      	adds	r3, r6, r3
 8025b36:	40dc      	lsrs	r4, r3
 8025b38:	4320      	orrs	r0, r4
 8025b3a:	f7dd fe87 	bl	800384c <__aeabi_ui2d>
 8025b3e:	2201      	movs	r2, #1
 8025b40:	4b62      	ldr	r3, [pc, #392]	@ (8025ccc <_dtoa_r+0x394>)
 8025b42:	1e77      	subs	r7, r6, #1
 8025b44:	18cb      	adds	r3, r1, r3
 8025b46:	9218      	str	r2, [sp, #96]	@ 0x60
 8025b48:	e776      	b.n	8025a38 <_dtoa_r+0x100>
 8025b4a:	2320      	movs	r3, #32
 8025b4c:	0020      	movs	r0, r4
 8025b4e:	1a9b      	subs	r3, r3, r2
 8025b50:	4098      	lsls	r0, r3
 8025b52:	e7f2      	b.n	8025b3a <_dtoa_r+0x202>
 8025b54:	9015      	str	r0, [sp, #84]	@ 0x54
 8025b56:	e7ba      	b.n	8025ace <_dtoa_r+0x196>
 8025b58:	920d      	str	r2, [sp, #52]	@ 0x34
 8025b5a:	e7c3      	b.n	8025ae4 <_dtoa_r+0x1ac>
 8025b5c:	9b06      	ldr	r3, [sp, #24]
 8025b5e:	9a04      	ldr	r2, [sp, #16]
 8025b60:	1a9b      	subs	r3, r3, r2
 8025b62:	9306      	str	r3, [sp, #24]
 8025b64:	4253      	negs	r3, r2
 8025b66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025b68:	2300      	movs	r3, #0
 8025b6a:	9314      	str	r3, [sp, #80]	@ 0x50
 8025b6c:	e7c5      	b.n	8025afa <_dtoa_r+0x1c2>
 8025b6e:	2301      	movs	r3, #1
 8025b70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025b72:	9310      	str	r3, [sp, #64]	@ 0x40
 8025b74:	4694      	mov	ip, r2
 8025b76:	9b04      	ldr	r3, [sp, #16]
 8025b78:	4463      	add	r3, ip
 8025b7a:	930e      	str	r3, [sp, #56]	@ 0x38
 8025b7c:	3301      	adds	r3, #1
 8025b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b80:	2b00      	cmp	r3, #0
 8025b82:	dc08      	bgt.n	8025b96 <_dtoa_r+0x25e>
 8025b84:	2301      	movs	r3, #1
 8025b86:	e006      	b.n	8025b96 <_dtoa_r+0x25e>
 8025b88:	2301      	movs	r3, #1
 8025b8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8025b8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025b8e:	2b00      	cmp	r3, #0
 8025b90:	dd28      	ble.n	8025be4 <_dtoa_r+0x2ac>
 8025b92:	930e      	str	r3, [sp, #56]	@ 0x38
 8025b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b96:	9a03      	ldr	r2, [sp, #12]
 8025b98:	2100      	movs	r1, #0
 8025b9a:	69d0      	ldr	r0, [r2, #28]
 8025b9c:	2204      	movs	r2, #4
 8025b9e:	0015      	movs	r5, r2
 8025ba0:	3514      	adds	r5, #20
 8025ba2:	429d      	cmp	r5, r3
 8025ba4:	d923      	bls.n	8025bee <_dtoa_r+0x2b6>
 8025ba6:	6041      	str	r1, [r0, #4]
 8025ba8:	9803      	ldr	r0, [sp, #12]
 8025baa:	f001 f927 	bl	8026dfc <_Balloc>
 8025bae:	9008      	str	r0, [sp, #32]
 8025bb0:	2800      	cmp	r0, #0
 8025bb2:	d11f      	bne.n	8025bf4 <_dtoa_r+0x2bc>
 8025bb4:	21b0      	movs	r1, #176	@ 0xb0
 8025bb6:	4b46      	ldr	r3, [pc, #280]	@ (8025cd0 <_dtoa_r+0x398>)
 8025bb8:	4831      	ldr	r0, [pc, #196]	@ (8025c80 <_dtoa_r+0x348>)
 8025bba:	9a08      	ldr	r2, [sp, #32]
 8025bbc:	31ff      	adds	r1, #255	@ 0xff
 8025bbe:	e6d0      	b.n	8025962 <_dtoa_r+0x2a>
 8025bc0:	2300      	movs	r3, #0
 8025bc2:	e7e2      	b.n	8025b8a <_dtoa_r+0x252>
 8025bc4:	2300      	movs	r3, #0
 8025bc6:	e7d3      	b.n	8025b70 <_dtoa_r+0x238>
 8025bc8:	2300      	movs	r3, #0
 8025bca:	9410      	str	r4, [sp, #64]	@ 0x40
 8025bcc:	9322      	str	r3, [sp, #136]	@ 0x88
 8025bce:	3b01      	subs	r3, #1
 8025bd0:	2200      	movs	r2, #0
 8025bd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8025bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8025bd6:	3313      	adds	r3, #19
 8025bd8:	9223      	str	r2, [sp, #140]	@ 0x8c
 8025bda:	e7dc      	b.n	8025b96 <_dtoa_r+0x25e>
 8025bdc:	2301      	movs	r3, #1
 8025bde:	9310      	str	r3, [sp, #64]	@ 0x40
 8025be0:	3b02      	subs	r3, #2
 8025be2:	e7f5      	b.n	8025bd0 <_dtoa_r+0x298>
 8025be4:	2301      	movs	r3, #1
 8025be6:	001a      	movs	r2, r3
 8025be8:	930e      	str	r3, [sp, #56]	@ 0x38
 8025bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8025bec:	e7f4      	b.n	8025bd8 <_dtoa_r+0x2a0>
 8025bee:	3101      	adds	r1, #1
 8025bf0:	0052      	lsls	r2, r2, #1
 8025bf2:	e7d4      	b.n	8025b9e <_dtoa_r+0x266>
 8025bf4:	9b03      	ldr	r3, [sp, #12]
 8025bf6:	9a08      	ldr	r2, [sp, #32]
 8025bf8:	69db      	ldr	r3, [r3, #28]
 8025bfa:	601a      	str	r2, [r3, #0]
 8025bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025bfe:	2b0e      	cmp	r3, #14
 8025c00:	d900      	bls.n	8025c04 <_dtoa_r+0x2cc>
 8025c02:	e0d6      	b.n	8025db2 <_dtoa_r+0x47a>
 8025c04:	2c00      	cmp	r4, #0
 8025c06:	d100      	bne.n	8025c0a <_dtoa_r+0x2d2>
 8025c08:	e0d3      	b.n	8025db2 <_dtoa_r+0x47a>
 8025c0a:	9b04      	ldr	r3, [sp, #16]
 8025c0c:	2b00      	cmp	r3, #0
 8025c0e:	dd63      	ble.n	8025cd8 <_dtoa_r+0x3a0>
 8025c10:	210f      	movs	r1, #15
 8025c12:	9a04      	ldr	r2, [sp, #16]
 8025c14:	4b2a      	ldr	r3, [pc, #168]	@ (8025cc0 <_dtoa_r+0x388>)
 8025c16:	400a      	ands	r2, r1
 8025c18:	00d2      	lsls	r2, r2, #3
 8025c1a:	189b      	adds	r3, r3, r2
 8025c1c:	681e      	ldr	r6, [r3, #0]
 8025c1e:	685f      	ldr	r7, [r3, #4]
 8025c20:	9b04      	ldr	r3, [sp, #16]
 8025c22:	2402      	movs	r4, #2
 8025c24:	111d      	asrs	r5, r3, #4
 8025c26:	05db      	lsls	r3, r3, #23
 8025c28:	d50a      	bpl.n	8025c40 <_dtoa_r+0x308>
 8025c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8025cd4 <_dtoa_r+0x39c>)
 8025c2c:	400d      	ands	r5, r1
 8025c2e:	6a1a      	ldr	r2, [r3, #32]
 8025c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025c32:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025c34:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025c36:	f7dc fa53 	bl	80020e0 <__aeabi_ddiv>
 8025c3a:	900a      	str	r0, [sp, #40]	@ 0x28
 8025c3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025c3e:	3401      	adds	r4, #1
 8025c40:	4b24      	ldr	r3, [pc, #144]	@ (8025cd4 <_dtoa_r+0x39c>)
 8025c42:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c44:	2d00      	cmp	r5, #0
 8025c46:	d108      	bne.n	8025c5a <_dtoa_r+0x322>
 8025c48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025c4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025c4c:	0032      	movs	r2, r6
 8025c4e:	003b      	movs	r3, r7
 8025c50:	f7dc fa46 	bl	80020e0 <__aeabi_ddiv>
 8025c54:	900a      	str	r0, [sp, #40]	@ 0x28
 8025c56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025c58:	e059      	b.n	8025d0e <_dtoa_r+0x3d6>
 8025c5a:	2301      	movs	r3, #1
 8025c5c:	421d      	tst	r5, r3
 8025c5e:	d009      	beq.n	8025c74 <_dtoa_r+0x33c>
 8025c60:	18e4      	adds	r4, r4, r3
 8025c62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c64:	0030      	movs	r0, r6
 8025c66:	681a      	ldr	r2, [r3, #0]
 8025c68:	685b      	ldr	r3, [r3, #4]
 8025c6a:	0039      	movs	r1, r7
 8025c6c:	f7dc fe72 	bl	8002954 <__aeabi_dmul>
 8025c70:	0006      	movs	r6, r0
 8025c72:	000f      	movs	r7, r1
 8025c74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c76:	106d      	asrs	r5, r5, #1
 8025c78:	3308      	adds	r3, #8
 8025c7a:	e7e2      	b.n	8025c42 <_dtoa_r+0x30a>
 8025c7c:	0802e01b 	.word	0x0802e01b
 8025c80:	0802e032 	.word	0x0802e032
 8025c84:	7ff00000 	.word	0x7ff00000
 8025c88:	0000270f 	.word	0x0000270f
 8025c8c:	0802e017 	.word	0x0802e017
 8025c90:	0802e01a 	.word	0x0802e01a
 8025c94:	0802dfe3 	.word	0x0802dfe3
 8025c98:	0802dfe2 	.word	0x0802dfe2
 8025c9c:	3ff00000 	.word	0x3ff00000
 8025ca0:	fffffc01 	.word	0xfffffc01
 8025ca4:	3ff80000 	.word	0x3ff80000
 8025ca8:	636f4361 	.word	0x636f4361
 8025cac:	3fd287a7 	.word	0x3fd287a7
 8025cb0:	8b60c8b3 	.word	0x8b60c8b3
 8025cb4:	3fc68a28 	.word	0x3fc68a28
 8025cb8:	509f79fb 	.word	0x509f79fb
 8025cbc:	3fd34413 	.word	0x3fd34413
 8025cc0:	0802e330 	.word	0x0802e330
 8025cc4:	00000432 	.word	0x00000432
 8025cc8:	00000412 	.word	0x00000412
 8025ccc:	fe100000 	.word	0xfe100000
 8025cd0:	0802e08a 	.word	0x0802e08a
 8025cd4:	0802e308 	.word	0x0802e308
 8025cd8:	9b04      	ldr	r3, [sp, #16]
 8025cda:	2402      	movs	r4, #2
 8025cdc:	2b00      	cmp	r3, #0
 8025cde:	d016      	beq.n	8025d0e <_dtoa_r+0x3d6>
 8025ce0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025ce2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025ce4:	220f      	movs	r2, #15
 8025ce6:	425d      	negs	r5, r3
 8025ce8:	402a      	ands	r2, r5
 8025cea:	4bd5      	ldr	r3, [pc, #852]	@ (8026040 <_dtoa_r+0x708>)
 8025cec:	00d2      	lsls	r2, r2, #3
 8025cee:	189b      	adds	r3, r3, r2
 8025cf0:	681a      	ldr	r2, [r3, #0]
 8025cf2:	685b      	ldr	r3, [r3, #4]
 8025cf4:	f7dc fe2e 	bl	8002954 <__aeabi_dmul>
 8025cf8:	2701      	movs	r7, #1
 8025cfa:	2300      	movs	r3, #0
 8025cfc:	900a      	str	r0, [sp, #40]	@ 0x28
 8025cfe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025d00:	4ed0      	ldr	r6, [pc, #832]	@ (8026044 <_dtoa_r+0x70c>)
 8025d02:	112d      	asrs	r5, r5, #4
 8025d04:	2d00      	cmp	r5, #0
 8025d06:	d000      	beq.n	8025d0a <_dtoa_r+0x3d2>
 8025d08:	e095      	b.n	8025e36 <_dtoa_r+0x4fe>
 8025d0a:	2b00      	cmp	r3, #0
 8025d0c:	d1a2      	bne.n	8025c54 <_dtoa_r+0x31c>
 8025d0e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8025d10:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025d12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025d14:	2b00      	cmp	r3, #0
 8025d16:	d100      	bne.n	8025d1a <_dtoa_r+0x3e2>
 8025d18:	e098      	b.n	8025e4c <_dtoa_r+0x514>
 8025d1a:	2200      	movs	r2, #0
 8025d1c:	0030      	movs	r0, r6
 8025d1e:	0039      	movs	r1, r7
 8025d20:	4bc9      	ldr	r3, [pc, #804]	@ (8026048 <_dtoa_r+0x710>)
 8025d22:	f7da fbcb 	bl	80004bc <__aeabi_dcmplt>
 8025d26:	2800      	cmp	r0, #0
 8025d28:	d100      	bne.n	8025d2c <_dtoa_r+0x3f4>
 8025d2a:	e08f      	b.n	8025e4c <_dtoa_r+0x514>
 8025d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d2e:	2b00      	cmp	r3, #0
 8025d30:	d100      	bne.n	8025d34 <_dtoa_r+0x3fc>
 8025d32:	e08b      	b.n	8025e4c <_dtoa_r+0x514>
 8025d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025d36:	2b00      	cmp	r3, #0
 8025d38:	dd37      	ble.n	8025daa <_dtoa_r+0x472>
 8025d3a:	9b04      	ldr	r3, [sp, #16]
 8025d3c:	2200      	movs	r2, #0
 8025d3e:	3b01      	subs	r3, #1
 8025d40:	930c      	str	r3, [sp, #48]	@ 0x30
 8025d42:	0030      	movs	r0, r6
 8025d44:	4bc1      	ldr	r3, [pc, #772]	@ (802604c <_dtoa_r+0x714>)
 8025d46:	0039      	movs	r1, r7
 8025d48:	f7dc fe04 	bl	8002954 <__aeabi_dmul>
 8025d4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8025d4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025d52:	3401      	adds	r4, #1
 8025d54:	0020      	movs	r0, r4
 8025d56:	9311      	str	r3, [sp, #68]	@ 0x44
 8025d58:	f7dd fd4a 	bl	80037f0 <__aeabi_i2d>
 8025d5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025d60:	f7dc fdf8 	bl	8002954 <__aeabi_dmul>
 8025d64:	4bba      	ldr	r3, [pc, #744]	@ (8026050 <_dtoa_r+0x718>)
 8025d66:	2200      	movs	r2, #0
 8025d68:	f7db fdf4 	bl	8001954 <__aeabi_dadd>
 8025d6c:	4bb9      	ldr	r3, [pc, #740]	@ (8026054 <_dtoa_r+0x71c>)
 8025d6e:	0006      	movs	r6, r0
 8025d70:	18cf      	adds	r7, r1, r3
 8025d72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025d74:	2b00      	cmp	r3, #0
 8025d76:	d16d      	bne.n	8025e54 <_dtoa_r+0x51c>
 8025d78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025d7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025d7c:	2200      	movs	r2, #0
 8025d7e:	4bb6      	ldr	r3, [pc, #728]	@ (8026058 <_dtoa_r+0x720>)
 8025d80:	f7dd f8ce 	bl	8002f20 <__aeabi_dsub>
 8025d84:	0032      	movs	r2, r6
 8025d86:	003b      	movs	r3, r7
 8025d88:	0004      	movs	r4, r0
 8025d8a:	000d      	movs	r5, r1
 8025d8c:	f7da fbaa 	bl	80004e4 <__aeabi_dcmpgt>
 8025d90:	2800      	cmp	r0, #0
 8025d92:	d000      	beq.n	8025d96 <_dtoa_r+0x45e>
 8025d94:	e2b6      	b.n	8026304 <_dtoa_r+0x9cc>
 8025d96:	2180      	movs	r1, #128	@ 0x80
 8025d98:	0609      	lsls	r1, r1, #24
 8025d9a:	187b      	adds	r3, r7, r1
 8025d9c:	0032      	movs	r2, r6
 8025d9e:	0020      	movs	r0, r4
 8025da0:	0029      	movs	r1, r5
 8025da2:	f7da fb8b 	bl	80004bc <__aeabi_dcmplt>
 8025da6:	2800      	cmp	r0, #0
 8025da8:	d128      	bne.n	8025dfc <_dtoa_r+0x4c4>
 8025daa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025dac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8025db0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025db2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025db4:	2b00      	cmp	r3, #0
 8025db6:	da00      	bge.n	8025dba <_dtoa_r+0x482>
 8025db8:	e174      	b.n	80260a4 <_dtoa_r+0x76c>
 8025dba:	9a04      	ldr	r2, [sp, #16]
 8025dbc:	2a0e      	cmp	r2, #14
 8025dbe:	dd00      	ble.n	8025dc2 <_dtoa_r+0x48a>
 8025dc0:	e170      	b.n	80260a4 <_dtoa_r+0x76c>
 8025dc2:	4b9f      	ldr	r3, [pc, #636]	@ (8026040 <_dtoa_r+0x708>)
 8025dc4:	00d2      	lsls	r2, r2, #3
 8025dc6:	189b      	adds	r3, r3, r2
 8025dc8:	685c      	ldr	r4, [r3, #4]
 8025dca:	681b      	ldr	r3, [r3, #0]
 8025dcc:	9306      	str	r3, [sp, #24]
 8025dce:	9407      	str	r4, [sp, #28]
 8025dd0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025dd2:	2b00      	cmp	r3, #0
 8025dd4:	db00      	blt.n	8025dd8 <_dtoa_r+0x4a0>
 8025dd6:	e0e7      	b.n	8025fa8 <_dtoa_r+0x670>
 8025dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025dda:	2b00      	cmp	r3, #0
 8025ddc:	dd00      	ble.n	8025de0 <_dtoa_r+0x4a8>
 8025dde:	e0e3      	b.n	8025fa8 <_dtoa_r+0x670>
 8025de0:	d10c      	bne.n	8025dfc <_dtoa_r+0x4c4>
 8025de2:	9806      	ldr	r0, [sp, #24]
 8025de4:	9907      	ldr	r1, [sp, #28]
 8025de6:	2200      	movs	r2, #0
 8025de8:	4b9b      	ldr	r3, [pc, #620]	@ (8026058 <_dtoa_r+0x720>)
 8025dea:	f7dc fdb3 	bl	8002954 <__aeabi_dmul>
 8025dee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025df0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025df2:	f7da fb81 	bl	80004f8 <__aeabi_dcmpge>
 8025df6:	2800      	cmp	r0, #0
 8025df8:	d100      	bne.n	8025dfc <_dtoa_r+0x4c4>
 8025dfa:	e286      	b.n	802630a <_dtoa_r+0x9d2>
 8025dfc:	2600      	movs	r6, #0
 8025dfe:	0037      	movs	r7, r6
 8025e00:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025e02:	9c08      	ldr	r4, [sp, #32]
 8025e04:	43db      	mvns	r3, r3
 8025e06:	930c      	str	r3, [sp, #48]	@ 0x30
 8025e08:	9704      	str	r7, [sp, #16]
 8025e0a:	2700      	movs	r7, #0
 8025e0c:	0031      	movs	r1, r6
 8025e0e:	9803      	ldr	r0, [sp, #12]
 8025e10:	f001 f838 	bl	8026e84 <_Bfree>
 8025e14:	9b04      	ldr	r3, [sp, #16]
 8025e16:	2b00      	cmp	r3, #0
 8025e18:	d100      	bne.n	8025e1c <_dtoa_r+0x4e4>
 8025e1a:	e0bb      	b.n	8025f94 <_dtoa_r+0x65c>
 8025e1c:	2f00      	cmp	r7, #0
 8025e1e:	d005      	beq.n	8025e2c <_dtoa_r+0x4f4>
 8025e20:	429f      	cmp	r7, r3
 8025e22:	d003      	beq.n	8025e2c <_dtoa_r+0x4f4>
 8025e24:	0039      	movs	r1, r7
 8025e26:	9803      	ldr	r0, [sp, #12]
 8025e28:	f001 f82c 	bl	8026e84 <_Bfree>
 8025e2c:	9904      	ldr	r1, [sp, #16]
 8025e2e:	9803      	ldr	r0, [sp, #12]
 8025e30:	f001 f828 	bl	8026e84 <_Bfree>
 8025e34:	e0ae      	b.n	8025f94 <_dtoa_r+0x65c>
 8025e36:	423d      	tst	r5, r7
 8025e38:	d005      	beq.n	8025e46 <_dtoa_r+0x50e>
 8025e3a:	6832      	ldr	r2, [r6, #0]
 8025e3c:	6873      	ldr	r3, [r6, #4]
 8025e3e:	f7dc fd89 	bl	8002954 <__aeabi_dmul>
 8025e42:	003b      	movs	r3, r7
 8025e44:	3401      	adds	r4, #1
 8025e46:	106d      	asrs	r5, r5, #1
 8025e48:	3608      	adds	r6, #8
 8025e4a:	e75b      	b.n	8025d04 <_dtoa_r+0x3cc>
 8025e4c:	9b04      	ldr	r3, [sp, #16]
 8025e4e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e52:	e77f      	b.n	8025d54 <_dtoa_r+0x41c>
 8025e54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025e56:	4b7a      	ldr	r3, [pc, #488]	@ (8026040 <_dtoa_r+0x708>)
 8025e58:	3a01      	subs	r2, #1
 8025e5a:	00d2      	lsls	r2, r2, #3
 8025e5c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025e5e:	189b      	adds	r3, r3, r2
 8025e60:	681a      	ldr	r2, [r3, #0]
 8025e62:	685b      	ldr	r3, [r3, #4]
 8025e64:	2900      	cmp	r1, #0
 8025e66:	d04c      	beq.n	8025f02 <_dtoa_r+0x5ca>
 8025e68:	2000      	movs	r0, #0
 8025e6a:	497c      	ldr	r1, [pc, #496]	@ (802605c <_dtoa_r+0x724>)
 8025e6c:	f7dc f938 	bl	80020e0 <__aeabi_ddiv>
 8025e70:	0032      	movs	r2, r6
 8025e72:	003b      	movs	r3, r7
 8025e74:	f7dd f854 	bl	8002f20 <__aeabi_dsub>
 8025e78:	9a08      	ldr	r2, [sp, #32]
 8025e7a:	0006      	movs	r6, r0
 8025e7c:	4694      	mov	ip, r2
 8025e7e:	000f      	movs	r7, r1
 8025e80:	9b08      	ldr	r3, [sp, #32]
 8025e82:	9316      	str	r3, [sp, #88]	@ 0x58
 8025e84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025e86:	4463      	add	r3, ip
 8025e88:	9311      	str	r3, [sp, #68]	@ 0x44
 8025e8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025e8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025e8e:	f7dd fc73 	bl	8003778 <__aeabi_d2iz>
 8025e92:	0005      	movs	r5, r0
 8025e94:	f7dd fcac 	bl	80037f0 <__aeabi_i2d>
 8025e98:	0002      	movs	r2, r0
 8025e9a:	000b      	movs	r3, r1
 8025e9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025e9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025ea0:	f7dd f83e 	bl	8002f20 <__aeabi_dsub>
 8025ea4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025ea6:	3530      	adds	r5, #48	@ 0x30
 8025ea8:	1c5c      	adds	r4, r3, #1
 8025eaa:	701d      	strb	r5, [r3, #0]
 8025eac:	0032      	movs	r2, r6
 8025eae:	003b      	movs	r3, r7
 8025eb0:	900a      	str	r0, [sp, #40]	@ 0x28
 8025eb2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025eb4:	f7da fb02 	bl	80004bc <__aeabi_dcmplt>
 8025eb8:	2800      	cmp	r0, #0
 8025eba:	d16b      	bne.n	8025f94 <_dtoa_r+0x65c>
 8025ebc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025ec0:	2000      	movs	r0, #0
 8025ec2:	4961      	ldr	r1, [pc, #388]	@ (8026048 <_dtoa_r+0x710>)
 8025ec4:	f7dd f82c 	bl	8002f20 <__aeabi_dsub>
 8025ec8:	0032      	movs	r2, r6
 8025eca:	003b      	movs	r3, r7
 8025ecc:	f7da faf6 	bl	80004bc <__aeabi_dcmplt>
 8025ed0:	2800      	cmp	r0, #0
 8025ed2:	d000      	beq.n	8025ed6 <_dtoa_r+0x59e>
 8025ed4:	e0c6      	b.n	8026064 <_dtoa_r+0x72c>
 8025ed6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025ed8:	42a3      	cmp	r3, r4
 8025eda:	d100      	bne.n	8025ede <_dtoa_r+0x5a6>
 8025edc:	e765      	b.n	8025daa <_dtoa_r+0x472>
 8025ede:	2200      	movs	r2, #0
 8025ee0:	0030      	movs	r0, r6
 8025ee2:	0039      	movs	r1, r7
 8025ee4:	4b59      	ldr	r3, [pc, #356]	@ (802604c <_dtoa_r+0x714>)
 8025ee6:	f7dc fd35 	bl	8002954 <__aeabi_dmul>
 8025eea:	2200      	movs	r2, #0
 8025eec:	0006      	movs	r6, r0
 8025eee:	000f      	movs	r7, r1
 8025ef0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025ef2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025ef4:	4b55      	ldr	r3, [pc, #340]	@ (802604c <_dtoa_r+0x714>)
 8025ef6:	f7dc fd2d 	bl	8002954 <__aeabi_dmul>
 8025efa:	9416      	str	r4, [sp, #88]	@ 0x58
 8025efc:	900a      	str	r0, [sp, #40]	@ 0x28
 8025efe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025f00:	e7c3      	b.n	8025e8a <_dtoa_r+0x552>
 8025f02:	0030      	movs	r0, r6
 8025f04:	0039      	movs	r1, r7
 8025f06:	f7dc fd25 	bl	8002954 <__aeabi_dmul>
 8025f0a:	9d08      	ldr	r5, [sp, #32]
 8025f0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025f0e:	002b      	movs	r3, r5
 8025f10:	4694      	mov	ip, r2
 8025f12:	9016      	str	r0, [sp, #88]	@ 0x58
 8025f14:	9117      	str	r1, [sp, #92]	@ 0x5c
 8025f16:	4463      	add	r3, ip
 8025f18:	9319      	str	r3, [sp, #100]	@ 0x64
 8025f1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025f1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025f1e:	f7dd fc2b 	bl	8003778 <__aeabi_d2iz>
 8025f22:	0004      	movs	r4, r0
 8025f24:	f7dd fc64 	bl	80037f0 <__aeabi_i2d>
 8025f28:	000b      	movs	r3, r1
 8025f2a:	0002      	movs	r2, r0
 8025f2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025f2e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025f30:	f7dc fff6 	bl	8002f20 <__aeabi_dsub>
 8025f34:	3430      	adds	r4, #48	@ 0x30
 8025f36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025f38:	702c      	strb	r4, [r5, #0]
 8025f3a:	3501      	adds	r5, #1
 8025f3c:	0006      	movs	r6, r0
 8025f3e:	000f      	movs	r7, r1
 8025f40:	42ab      	cmp	r3, r5
 8025f42:	d12a      	bne.n	8025f9a <_dtoa_r+0x662>
 8025f44:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8025f46:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025f48:	9b08      	ldr	r3, [sp, #32]
 8025f4a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025f4c:	469c      	mov	ip, r3
 8025f4e:	2200      	movs	r2, #0
 8025f50:	4b42      	ldr	r3, [pc, #264]	@ (802605c <_dtoa_r+0x724>)
 8025f52:	4464      	add	r4, ip
 8025f54:	f7db fcfe 	bl	8001954 <__aeabi_dadd>
 8025f58:	0002      	movs	r2, r0
 8025f5a:	000b      	movs	r3, r1
 8025f5c:	0030      	movs	r0, r6
 8025f5e:	0039      	movs	r1, r7
 8025f60:	f7da fac0 	bl	80004e4 <__aeabi_dcmpgt>
 8025f64:	2800      	cmp	r0, #0
 8025f66:	d000      	beq.n	8025f6a <_dtoa_r+0x632>
 8025f68:	e07c      	b.n	8026064 <_dtoa_r+0x72c>
 8025f6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025f6c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025f6e:	2000      	movs	r0, #0
 8025f70:	493a      	ldr	r1, [pc, #232]	@ (802605c <_dtoa_r+0x724>)
 8025f72:	f7dc ffd5 	bl	8002f20 <__aeabi_dsub>
 8025f76:	0002      	movs	r2, r0
 8025f78:	000b      	movs	r3, r1
 8025f7a:	0030      	movs	r0, r6
 8025f7c:	0039      	movs	r1, r7
 8025f7e:	f7da fa9d 	bl	80004bc <__aeabi_dcmplt>
 8025f82:	2800      	cmp	r0, #0
 8025f84:	d100      	bne.n	8025f88 <_dtoa_r+0x650>
 8025f86:	e710      	b.n	8025daa <_dtoa_r+0x472>
 8025f88:	0023      	movs	r3, r4
 8025f8a:	3c01      	subs	r4, #1
 8025f8c:	7822      	ldrb	r2, [r4, #0]
 8025f8e:	2a30      	cmp	r2, #48	@ 0x30
 8025f90:	d0fa      	beq.n	8025f88 <_dtoa_r+0x650>
 8025f92:	001c      	movs	r4, r3
 8025f94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025f96:	9304      	str	r3, [sp, #16]
 8025f98:	e042      	b.n	8026020 <_dtoa_r+0x6e8>
 8025f9a:	2200      	movs	r2, #0
 8025f9c:	4b2b      	ldr	r3, [pc, #172]	@ (802604c <_dtoa_r+0x714>)
 8025f9e:	f7dc fcd9 	bl	8002954 <__aeabi_dmul>
 8025fa2:	900a      	str	r0, [sp, #40]	@ 0x28
 8025fa4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025fa6:	e7b8      	b.n	8025f1a <_dtoa_r+0x5e2>
 8025fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025faa:	9d08      	ldr	r5, [sp, #32]
 8025fac:	3b01      	subs	r3, #1
 8025fae:	195b      	adds	r3, r3, r5
 8025fb0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8025fb2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025fb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8025fb6:	9a06      	ldr	r2, [sp, #24]
 8025fb8:	9b07      	ldr	r3, [sp, #28]
 8025fba:	0030      	movs	r0, r6
 8025fbc:	0039      	movs	r1, r7
 8025fbe:	f7dc f88f 	bl	80020e0 <__aeabi_ddiv>
 8025fc2:	f7dd fbd9 	bl	8003778 <__aeabi_d2iz>
 8025fc6:	9009      	str	r0, [sp, #36]	@ 0x24
 8025fc8:	f7dd fc12 	bl	80037f0 <__aeabi_i2d>
 8025fcc:	9a06      	ldr	r2, [sp, #24]
 8025fce:	9b07      	ldr	r3, [sp, #28]
 8025fd0:	f7dc fcc0 	bl	8002954 <__aeabi_dmul>
 8025fd4:	0002      	movs	r2, r0
 8025fd6:	000b      	movs	r3, r1
 8025fd8:	0030      	movs	r0, r6
 8025fda:	0039      	movs	r1, r7
 8025fdc:	f7dc ffa0 	bl	8002f20 <__aeabi_dsub>
 8025fe0:	002b      	movs	r3, r5
 8025fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025fe4:	3501      	adds	r5, #1
 8025fe6:	3230      	adds	r2, #48	@ 0x30
 8025fe8:	701a      	strb	r2, [r3, #0]
 8025fea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025fec:	002c      	movs	r4, r5
 8025fee:	429a      	cmp	r2, r3
 8025ff0:	d14b      	bne.n	802608a <_dtoa_r+0x752>
 8025ff2:	0002      	movs	r2, r0
 8025ff4:	000b      	movs	r3, r1
 8025ff6:	f7db fcad 	bl	8001954 <__aeabi_dadd>
 8025ffa:	9a06      	ldr	r2, [sp, #24]
 8025ffc:	9b07      	ldr	r3, [sp, #28]
 8025ffe:	0006      	movs	r6, r0
 8026000:	000f      	movs	r7, r1
 8026002:	f7da fa6f 	bl	80004e4 <__aeabi_dcmpgt>
 8026006:	2800      	cmp	r0, #0
 8026008:	d12a      	bne.n	8026060 <_dtoa_r+0x728>
 802600a:	9a06      	ldr	r2, [sp, #24]
 802600c:	9b07      	ldr	r3, [sp, #28]
 802600e:	0030      	movs	r0, r6
 8026010:	0039      	movs	r1, r7
 8026012:	f7da fa4d 	bl	80004b0 <__aeabi_dcmpeq>
 8026016:	2800      	cmp	r0, #0
 8026018:	d002      	beq.n	8026020 <_dtoa_r+0x6e8>
 802601a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802601c:	07dd      	lsls	r5, r3, #31
 802601e:	d41f      	bmi.n	8026060 <_dtoa_r+0x728>
 8026020:	9905      	ldr	r1, [sp, #20]
 8026022:	9803      	ldr	r0, [sp, #12]
 8026024:	f000 ff2e 	bl	8026e84 <_Bfree>
 8026028:	2300      	movs	r3, #0
 802602a:	7023      	strb	r3, [r4, #0]
 802602c:	9b04      	ldr	r3, [sp, #16]
 802602e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026030:	3301      	adds	r3, #1
 8026032:	6013      	str	r3, [r2, #0]
 8026034:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026036:	2b00      	cmp	r3, #0
 8026038:	d100      	bne.n	802603c <_dtoa_r+0x704>
 802603a:	e4c7      	b.n	80259cc <_dtoa_r+0x94>
 802603c:	601c      	str	r4, [r3, #0]
 802603e:	e4c5      	b.n	80259cc <_dtoa_r+0x94>
 8026040:	0802e330 	.word	0x0802e330
 8026044:	0802e308 	.word	0x0802e308
 8026048:	3ff00000 	.word	0x3ff00000
 802604c:	40240000 	.word	0x40240000
 8026050:	401c0000 	.word	0x401c0000
 8026054:	fcc00000 	.word	0xfcc00000
 8026058:	40140000 	.word	0x40140000
 802605c:	3fe00000 	.word	0x3fe00000
 8026060:	9b04      	ldr	r3, [sp, #16]
 8026062:	930c      	str	r3, [sp, #48]	@ 0x30
 8026064:	0023      	movs	r3, r4
 8026066:	001c      	movs	r4, r3
 8026068:	3b01      	subs	r3, #1
 802606a:	781a      	ldrb	r2, [r3, #0]
 802606c:	2a39      	cmp	r2, #57	@ 0x39
 802606e:	d108      	bne.n	8026082 <_dtoa_r+0x74a>
 8026070:	9a08      	ldr	r2, [sp, #32]
 8026072:	429a      	cmp	r2, r3
 8026074:	d1f7      	bne.n	8026066 <_dtoa_r+0x72e>
 8026076:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026078:	9908      	ldr	r1, [sp, #32]
 802607a:	3201      	adds	r2, #1
 802607c:	920c      	str	r2, [sp, #48]	@ 0x30
 802607e:	2230      	movs	r2, #48	@ 0x30
 8026080:	700a      	strb	r2, [r1, #0]
 8026082:	781a      	ldrb	r2, [r3, #0]
 8026084:	3201      	adds	r2, #1
 8026086:	701a      	strb	r2, [r3, #0]
 8026088:	e784      	b.n	8025f94 <_dtoa_r+0x65c>
 802608a:	2200      	movs	r2, #0
 802608c:	4bc6      	ldr	r3, [pc, #792]	@ (80263a8 <_dtoa_r+0xa70>)
 802608e:	f7dc fc61 	bl	8002954 <__aeabi_dmul>
 8026092:	2200      	movs	r2, #0
 8026094:	2300      	movs	r3, #0
 8026096:	0006      	movs	r6, r0
 8026098:	000f      	movs	r7, r1
 802609a:	f7da fa09 	bl	80004b0 <__aeabi_dcmpeq>
 802609e:	2800      	cmp	r0, #0
 80260a0:	d089      	beq.n	8025fb6 <_dtoa_r+0x67e>
 80260a2:	e7bd      	b.n	8026020 <_dtoa_r+0x6e8>
 80260a4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80260a6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80260a8:	9c06      	ldr	r4, [sp, #24]
 80260aa:	2f00      	cmp	r7, #0
 80260ac:	d014      	beq.n	80260d8 <_dtoa_r+0x7a0>
 80260ae:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80260b0:	2a01      	cmp	r2, #1
 80260b2:	dd00      	ble.n	80260b6 <_dtoa_r+0x77e>
 80260b4:	e0e4      	b.n	8026280 <_dtoa_r+0x948>
 80260b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80260b8:	2a00      	cmp	r2, #0
 80260ba:	d100      	bne.n	80260be <_dtoa_r+0x786>
 80260bc:	e0da      	b.n	8026274 <_dtoa_r+0x93c>
 80260be:	4abb      	ldr	r2, [pc, #748]	@ (80263ac <_dtoa_r+0xa74>)
 80260c0:	189b      	adds	r3, r3, r2
 80260c2:	9a06      	ldr	r2, [sp, #24]
 80260c4:	2101      	movs	r1, #1
 80260c6:	18d2      	adds	r2, r2, r3
 80260c8:	9206      	str	r2, [sp, #24]
 80260ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80260cc:	9803      	ldr	r0, [sp, #12]
 80260ce:	18d3      	adds	r3, r2, r3
 80260d0:	930d      	str	r3, [sp, #52]	@ 0x34
 80260d2:	f000 ffdb 	bl	802708c <__i2b>
 80260d6:	0007      	movs	r7, r0
 80260d8:	2c00      	cmp	r4, #0
 80260da:	d00e      	beq.n	80260fa <_dtoa_r+0x7c2>
 80260dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80260de:	2b00      	cmp	r3, #0
 80260e0:	dd0b      	ble.n	80260fa <_dtoa_r+0x7c2>
 80260e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80260e4:	0023      	movs	r3, r4
 80260e6:	4294      	cmp	r4, r2
 80260e8:	dd00      	ble.n	80260ec <_dtoa_r+0x7b4>
 80260ea:	0013      	movs	r3, r2
 80260ec:	9a06      	ldr	r2, [sp, #24]
 80260ee:	1ae4      	subs	r4, r4, r3
 80260f0:	1ad2      	subs	r2, r2, r3
 80260f2:	9206      	str	r2, [sp, #24]
 80260f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80260f6:	1ad3      	subs	r3, r2, r3
 80260f8:	930d      	str	r3, [sp, #52]	@ 0x34
 80260fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80260fc:	2b00      	cmp	r3, #0
 80260fe:	d021      	beq.n	8026144 <_dtoa_r+0x80c>
 8026100:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026102:	2b00      	cmp	r3, #0
 8026104:	d100      	bne.n	8026108 <_dtoa_r+0x7d0>
 8026106:	e0d3      	b.n	80262b0 <_dtoa_r+0x978>
 8026108:	9e05      	ldr	r6, [sp, #20]
 802610a:	2d00      	cmp	r5, #0
 802610c:	d014      	beq.n	8026138 <_dtoa_r+0x800>
 802610e:	0039      	movs	r1, r7
 8026110:	002a      	movs	r2, r5
 8026112:	9803      	ldr	r0, [sp, #12]
 8026114:	f001 f87c 	bl	8027210 <__pow5mult>
 8026118:	9a05      	ldr	r2, [sp, #20]
 802611a:	0001      	movs	r1, r0
 802611c:	0007      	movs	r7, r0
 802611e:	9803      	ldr	r0, [sp, #12]
 8026120:	f000 ffcc 	bl	80270bc <__multiply>
 8026124:	0006      	movs	r6, r0
 8026126:	9905      	ldr	r1, [sp, #20]
 8026128:	9803      	ldr	r0, [sp, #12]
 802612a:	f000 feab 	bl	8026e84 <_Bfree>
 802612e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026130:	9605      	str	r6, [sp, #20]
 8026132:	1b5b      	subs	r3, r3, r5
 8026134:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026136:	d005      	beq.n	8026144 <_dtoa_r+0x80c>
 8026138:	0031      	movs	r1, r6
 802613a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802613c:	9803      	ldr	r0, [sp, #12]
 802613e:	f001 f867 	bl	8027210 <__pow5mult>
 8026142:	9005      	str	r0, [sp, #20]
 8026144:	2101      	movs	r1, #1
 8026146:	9803      	ldr	r0, [sp, #12]
 8026148:	f000 ffa0 	bl	802708c <__i2b>
 802614c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802614e:	0006      	movs	r6, r0
 8026150:	2b00      	cmp	r3, #0
 8026152:	d100      	bne.n	8026156 <_dtoa_r+0x81e>
 8026154:	e1bc      	b.n	80264d0 <_dtoa_r+0xb98>
 8026156:	001a      	movs	r2, r3
 8026158:	0001      	movs	r1, r0
 802615a:	9803      	ldr	r0, [sp, #12]
 802615c:	f001 f858 	bl	8027210 <__pow5mult>
 8026160:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026162:	0006      	movs	r6, r0
 8026164:	2500      	movs	r5, #0
 8026166:	2b01      	cmp	r3, #1
 8026168:	dc16      	bgt.n	8026198 <_dtoa_r+0x860>
 802616a:	2500      	movs	r5, #0
 802616c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802616e:	42ab      	cmp	r3, r5
 8026170:	d10e      	bne.n	8026190 <_dtoa_r+0x858>
 8026172:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026174:	031b      	lsls	r3, r3, #12
 8026176:	42ab      	cmp	r3, r5
 8026178:	d10a      	bne.n	8026190 <_dtoa_r+0x858>
 802617a:	4b8d      	ldr	r3, [pc, #564]	@ (80263b0 <_dtoa_r+0xa78>)
 802617c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802617e:	4213      	tst	r3, r2
 8026180:	d006      	beq.n	8026190 <_dtoa_r+0x858>
 8026182:	9b06      	ldr	r3, [sp, #24]
 8026184:	3501      	adds	r5, #1
 8026186:	3301      	adds	r3, #1
 8026188:	9306      	str	r3, [sp, #24]
 802618a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802618c:	3301      	adds	r3, #1
 802618e:	930d      	str	r3, [sp, #52]	@ 0x34
 8026190:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026192:	2001      	movs	r0, #1
 8026194:	2b00      	cmp	r3, #0
 8026196:	d008      	beq.n	80261aa <_dtoa_r+0x872>
 8026198:	6933      	ldr	r3, [r6, #16]
 802619a:	3303      	adds	r3, #3
 802619c:	009b      	lsls	r3, r3, #2
 802619e:	18f3      	adds	r3, r6, r3
 80261a0:	6858      	ldr	r0, [r3, #4]
 80261a2:	f000 ff23 	bl	8026fec <__hi0bits>
 80261a6:	2320      	movs	r3, #32
 80261a8:	1a18      	subs	r0, r3, r0
 80261aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80261ac:	1818      	adds	r0, r3, r0
 80261ae:	0002      	movs	r2, r0
 80261b0:	231f      	movs	r3, #31
 80261b2:	401a      	ands	r2, r3
 80261b4:	4218      	tst	r0, r3
 80261b6:	d100      	bne.n	80261ba <_dtoa_r+0x882>
 80261b8:	e081      	b.n	80262be <_dtoa_r+0x986>
 80261ba:	3301      	adds	r3, #1
 80261bc:	1a9b      	subs	r3, r3, r2
 80261be:	2b04      	cmp	r3, #4
 80261c0:	dd79      	ble.n	80262b6 <_dtoa_r+0x97e>
 80261c2:	231c      	movs	r3, #28
 80261c4:	1a9b      	subs	r3, r3, r2
 80261c6:	9a06      	ldr	r2, [sp, #24]
 80261c8:	18e4      	adds	r4, r4, r3
 80261ca:	18d2      	adds	r2, r2, r3
 80261cc:	9206      	str	r2, [sp, #24]
 80261ce:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80261d0:	18d3      	adds	r3, r2, r3
 80261d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80261d4:	9b06      	ldr	r3, [sp, #24]
 80261d6:	2b00      	cmp	r3, #0
 80261d8:	dd05      	ble.n	80261e6 <_dtoa_r+0x8ae>
 80261da:	001a      	movs	r2, r3
 80261dc:	9905      	ldr	r1, [sp, #20]
 80261de:	9803      	ldr	r0, [sp, #12]
 80261e0:	f001 f872 	bl	80272c8 <__lshift>
 80261e4:	9005      	str	r0, [sp, #20]
 80261e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	dd05      	ble.n	80261f8 <_dtoa_r+0x8c0>
 80261ec:	0031      	movs	r1, r6
 80261ee:	001a      	movs	r2, r3
 80261f0:	9803      	ldr	r0, [sp, #12]
 80261f2:	f001 f869 	bl	80272c8 <__lshift>
 80261f6:	0006      	movs	r6, r0
 80261f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80261fa:	2b00      	cmp	r3, #0
 80261fc:	d061      	beq.n	80262c2 <_dtoa_r+0x98a>
 80261fe:	0031      	movs	r1, r6
 8026200:	9805      	ldr	r0, [sp, #20]
 8026202:	f001 f8cd 	bl	80273a0 <__mcmp>
 8026206:	2800      	cmp	r0, #0
 8026208:	da5b      	bge.n	80262c2 <_dtoa_r+0x98a>
 802620a:	9b04      	ldr	r3, [sp, #16]
 802620c:	220a      	movs	r2, #10
 802620e:	3b01      	subs	r3, #1
 8026210:	930c      	str	r3, [sp, #48]	@ 0x30
 8026212:	9905      	ldr	r1, [sp, #20]
 8026214:	2300      	movs	r3, #0
 8026216:	9803      	ldr	r0, [sp, #12]
 8026218:	f000 fe58 	bl	8026ecc <__multadd>
 802621c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802621e:	9005      	str	r0, [sp, #20]
 8026220:	2b00      	cmp	r3, #0
 8026222:	d100      	bne.n	8026226 <_dtoa_r+0x8ee>
 8026224:	e15b      	b.n	80264de <_dtoa_r+0xba6>
 8026226:	2300      	movs	r3, #0
 8026228:	0039      	movs	r1, r7
 802622a:	220a      	movs	r2, #10
 802622c:	9803      	ldr	r0, [sp, #12]
 802622e:	f000 fe4d 	bl	8026ecc <__multadd>
 8026232:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026234:	0007      	movs	r7, r0
 8026236:	2b00      	cmp	r3, #0
 8026238:	dc4d      	bgt.n	80262d6 <_dtoa_r+0x99e>
 802623a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802623c:	2b02      	cmp	r3, #2
 802623e:	dd46      	ble.n	80262ce <_dtoa_r+0x996>
 8026240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026242:	2b00      	cmp	r3, #0
 8026244:	d000      	beq.n	8026248 <_dtoa_r+0x910>
 8026246:	e5db      	b.n	8025e00 <_dtoa_r+0x4c8>
 8026248:	0031      	movs	r1, r6
 802624a:	2205      	movs	r2, #5
 802624c:	9803      	ldr	r0, [sp, #12]
 802624e:	f000 fe3d 	bl	8026ecc <__multadd>
 8026252:	0006      	movs	r6, r0
 8026254:	0001      	movs	r1, r0
 8026256:	9805      	ldr	r0, [sp, #20]
 8026258:	f001 f8a2 	bl	80273a0 <__mcmp>
 802625c:	2800      	cmp	r0, #0
 802625e:	dc00      	bgt.n	8026262 <_dtoa_r+0x92a>
 8026260:	e5ce      	b.n	8025e00 <_dtoa_r+0x4c8>
 8026262:	9b08      	ldr	r3, [sp, #32]
 8026264:	9a08      	ldr	r2, [sp, #32]
 8026266:	1c5c      	adds	r4, r3, #1
 8026268:	2331      	movs	r3, #49	@ 0x31
 802626a:	7013      	strb	r3, [r2, #0]
 802626c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802626e:	3301      	adds	r3, #1
 8026270:	930c      	str	r3, [sp, #48]	@ 0x30
 8026272:	e5c9      	b.n	8025e08 <_dtoa_r+0x4d0>
 8026274:	2336      	movs	r3, #54	@ 0x36
 8026276:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8026278:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802627a:	1a9b      	subs	r3, r3, r2
 802627c:	9c06      	ldr	r4, [sp, #24]
 802627e:	e720      	b.n	80260c2 <_dtoa_r+0x78a>
 8026280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026282:	1e5d      	subs	r5, r3, #1
 8026284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026286:	42ab      	cmp	r3, r5
 8026288:	db08      	blt.n	802629c <_dtoa_r+0x964>
 802628a:	1b5d      	subs	r5, r3, r5
 802628c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802628e:	2b00      	cmp	r3, #0
 8026290:	daf4      	bge.n	802627c <_dtoa_r+0x944>
 8026292:	9b06      	ldr	r3, [sp, #24]
 8026294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026296:	1a9c      	subs	r4, r3, r2
 8026298:	2300      	movs	r3, #0
 802629a:	e712      	b.n	80260c2 <_dtoa_r+0x78a>
 802629c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802629e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80262a0:	1aeb      	subs	r3, r5, r3
 80262a2:	18d3      	adds	r3, r2, r3
 80262a4:	9314      	str	r3, [sp, #80]	@ 0x50
 80262a6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80262a8:	9c06      	ldr	r4, [sp, #24]
 80262aa:	2500      	movs	r5, #0
 80262ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262ae:	e708      	b.n	80260c2 <_dtoa_r+0x78a>
 80262b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80262b2:	9905      	ldr	r1, [sp, #20]
 80262b4:	e742      	b.n	802613c <_dtoa_r+0x804>
 80262b6:	2b04      	cmp	r3, #4
 80262b8:	d08c      	beq.n	80261d4 <_dtoa_r+0x89c>
 80262ba:	331c      	adds	r3, #28
 80262bc:	e783      	b.n	80261c6 <_dtoa_r+0x88e>
 80262be:	0013      	movs	r3, r2
 80262c0:	e7fb      	b.n	80262ba <_dtoa_r+0x982>
 80262c2:	9b04      	ldr	r3, [sp, #16]
 80262c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80262c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80262ca:	2b00      	cmp	r3, #0
 80262cc:	ddb5      	ble.n	802623a <_dtoa_r+0x902>
 80262ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80262d0:	2b00      	cmp	r3, #0
 80262d2:	d100      	bne.n	80262d6 <_dtoa_r+0x99e>
 80262d4:	e107      	b.n	80264e6 <_dtoa_r+0xbae>
 80262d6:	2c00      	cmp	r4, #0
 80262d8:	dd05      	ble.n	80262e6 <_dtoa_r+0x9ae>
 80262da:	0039      	movs	r1, r7
 80262dc:	0022      	movs	r2, r4
 80262de:	9803      	ldr	r0, [sp, #12]
 80262e0:	f000 fff2 	bl	80272c8 <__lshift>
 80262e4:	0007      	movs	r7, r0
 80262e6:	9704      	str	r7, [sp, #16]
 80262e8:	2d00      	cmp	r5, #0
 80262ea:	d020      	beq.n	802632e <_dtoa_r+0x9f6>
 80262ec:	6879      	ldr	r1, [r7, #4]
 80262ee:	9803      	ldr	r0, [sp, #12]
 80262f0:	f000 fd84 	bl	8026dfc <_Balloc>
 80262f4:	1e04      	subs	r4, r0, #0
 80262f6:	d10c      	bne.n	8026312 <_dtoa_r+0x9da>
 80262f8:	0022      	movs	r2, r4
 80262fa:	4b2e      	ldr	r3, [pc, #184]	@ (80263b4 <_dtoa_r+0xa7c>)
 80262fc:	482e      	ldr	r0, [pc, #184]	@ (80263b8 <_dtoa_r+0xa80>)
 80262fe:	492f      	ldr	r1, [pc, #188]	@ (80263bc <_dtoa_r+0xa84>)
 8026300:	f7ff fb2f 	bl	8025962 <_dtoa_r+0x2a>
 8026304:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8026306:	0037      	movs	r7, r6
 8026308:	e7ab      	b.n	8026262 <_dtoa_r+0x92a>
 802630a:	9b04      	ldr	r3, [sp, #16]
 802630c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802630e:	930c      	str	r3, [sp, #48]	@ 0x30
 8026310:	e7f9      	b.n	8026306 <_dtoa_r+0x9ce>
 8026312:	0039      	movs	r1, r7
 8026314:	693a      	ldr	r2, [r7, #16]
 8026316:	310c      	adds	r1, #12
 8026318:	3202      	adds	r2, #2
 802631a:	0092      	lsls	r2, r2, #2
 802631c:	300c      	adds	r0, #12
 802631e:	f7ff fa75 	bl	802580c <memcpy>
 8026322:	2201      	movs	r2, #1
 8026324:	0021      	movs	r1, r4
 8026326:	9803      	ldr	r0, [sp, #12]
 8026328:	f000 ffce 	bl	80272c8 <__lshift>
 802632c:	9004      	str	r0, [sp, #16]
 802632e:	9b08      	ldr	r3, [sp, #32]
 8026330:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026332:	9306      	str	r3, [sp, #24]
 8026334:	3b01      	subs	r3, #1
 8026336:	189b      	adds	r3, r3, r2
 8026338:	2201      	movs	r2, #1
 802633a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802633c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802633e:	4013      	ands	r3, r2
 8026340:	930e      	str	r3, [sp, #56]	@ 0x38
 8026342:	0031      	movs	r1, r6
 8026344:	9805      	ldr	r0, [sp, #20]
 8026346:	f7ff fa71 	bl	802582c <quorem>
 802634a:	0039      	movs	r1, r7
 802634c:	0005      	movs	r5, r0
 802634e:	900a      	str	r0, [sp, #40]	@ 0x28
 8026350:	9805      	ldr	r0, [sp, #20]
 8026352:	f001 f825 	bl	80273a0 <__mcmp>
 8026356:	9a04      	ldr	r2, [sp, #16]
 8026358:	900d      	str	r0, [sp, #52]	@ 0x34
 802635a:	0031      	movs	r1, r6
 802635c:	9803      	ldr	r0, [sp, #12]
 802635e:	f001 f83b 	bl	80273d8 <__mdiff>
 8026362:	2201      	movs	r2, #1
 8026364:	68c3      	ldr	r3, [r0, #12]
 8026366:	0004      	movs	r4, r0
 8026368:	3530      	adds	r5, #48	@ 0x30
 802636a:	9209      	str	r2, [sp, #36]	@ 0x24
 802636c:	2b00      	cmp	r3, #0
 802636e:	d104      	bne.n	802637a <_dtoa_r+0xa42>
 8026370:	0001      	movs	r1, r0
 8026372:	9805      	ldr	r0, [sp, #20]
 8026374:	f001 f814 	bl	80273a0 <__mcmp>
 8026378:	9009      	str	r0, [sp, #36]	@ 0x24
 802637a:	0021      	movs	r1, r4
 802637c:	9803      	ldr	r0, [sp, #12]
 802637e:	f000 fd81 	bl	8026e84 <_Bfree>
 8026382:	9b06      	ldr	r3, [sp, #24]
 8026384:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026386:	1c5c      	adds	r4, r3, #1
 8026388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802638a:	4313      	orrs	r3, r2
 802638c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802638e:	4313      	orrs	r3, r2
 8026390:	d116      	bne.n	80263c0 <_dtoa_r+0xa88>
 8026392:	2d39      	cmp	r5, #57	@ 0x39
 8026394:	d02f      	beq.n	80263f6 <_dtoa_r+0xabe>
 8026396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026398:	2b00      	cmp	r3, #0
 802639a:	dd01      	ble.n	80263a0 <_dtoa_r+0xa68>
 802639c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802639e:	3531      	adds	r5, #49	@ 0x31
 80263a0:	9b06      	ldr	r3, [sp, #24]
 80263a2:	701d      	strb	r5, [r3, #0]
 80263a4:	e532      	b.n	8025e0c <_dtoa_r+0x4d4>
 80263a6:	46c0      	nop			@ (mov r8, r8)
 80263a8:	40240000 	.word	0x40240000
 80263ac:	00000433 	.word	0x00000433
 80263b0:	7ff00000 	.word	0x7ff00000
 80263b4:	0802e08a 	.word	0x0802e08a
 80263b8:	0802e032 	.word	0x0802e032
 80263bc:	000002ef 	.word	0x000002ef
 80263c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80263c2:	2b00      	cmp	r3, #0
 80263c4:	db04      	blt.n	80263d0 <_dtoa_r+0xa98>
 80263c6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80263c8:	4313      	orrs	r3, r2
 80263ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80263cc:	4313      	orrs	r3, r2
 80263ce:	d11e      	bne.n	802640e <_dtoa_r+0xad6>
 80263d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80263d2:	2b00      	cmp	r3, #0
 80263d4:	dde4      	ble.n	80263a0 <_dtoa_r+0xa68>
 80263d6:	9905      	ldr	r1, [sp, #20]
 80263d8:	2201      	movs	r2, #1
 80263da:	9803      	ldr	r0, [sp, #12]
 80263dc:	f000 ff74 	bl	80272c8 <__lshift>
 80263e0:	0031      	movs	r1, r6
 80263e2:	9005      	str	r0, [sp, #20]
 80263e4:	f000 ffdc 	bl	80273a0 <__mcmp>
 80263e8:	2800      	cmp	r0, #0
 80263ea:	dc02      	bgt.n	80263f2 <_dtoa_r+0xaba>
 80263ec:	d1d8      	bne.n	80263a0 <_dtoa_r+0xa68>
 80263ee:	07eb      	lsls	r3, r5, #31
 80263f0:	d5d6      	bpl.n	80263a0 <_dtoa_r+0xa68>
 80263f2:	2d39      	cmp	r5, #57	@ 0x39
 80263f4:	d1d2      	bne.n	802639c <_dtoa_r+0xa64>
 80263f6:	2339      	movs	r3, #57	@ 0x39
 80263f8:	9a06      	ldr	r2, [sp, #24]
 80263fa:	7013      	strb	r3, [r2, #0]
 80263fc:	0023      	movs	r3, r4
 80263fe:	001c      	movs	r4, r3
 8026400:	3b01      	subs	r3, #1
 8026402:	781a      	ldrb	r2, [r3, #0]
 8026404:	2a39      	cmp	r2, #57	@ 0x39
 8026406:	d050      	beq.n	80264aa <_dtoa_r+0xb72>
 8026408:	3201      	adds	r2, #1
 802640a:	701a      	strb	r2, [r3, #0]
 802640c:	e4fe      	b.n	8025e0c <_dtoa_r+0x4d4>
 802640e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026410:	2b00      	cmp	r3, #0
 8026412:	dd03      	ble.n	802641c <_dtoa_r+0xae4>
 8026414:	2d39      	cmp	r5, #57	@ 0x39
 8026416:	d0ee      	beq.n	80263f6 <_dtoa_r+0xabe>
 8026418:	3501      	adds	r5, #1
 802641a:	e7c1      	b.n	80263a0 <_dtoa_r+0xa68>
 802641c:	9b06      	ldr	r3, [sp, #24]
 802641e:	9a06      	ldr	r2, [sp, #24]
 8026420:	701d      	strb	r5, [r3, #0]
 8026422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026424:	4293      	cmp	r3, r2
 8026426:	d02b      	beq.n	8026480 <_dtoa_r+0xb48>
 8026428:	2300      	movs	r3, #0
 802642a:	220a      	movs	r2, #10
 802642c:	9905      	ldr	r1, [sp, #20]
 802642e:	9803      	ldr	r0, [sp, #12]
 8026430:	f000 fd4c 	bl	8026ecc <__multadd>
 8026434:	9b04      	ldr	r3, [sp, #16]
 8026436:	9005      	str	r0, [sp, #20]
 8026438:	429f      	cmp	r7, r3
 802643a:	d109      	bne.n	8026450 <_dtoa_r+0xb18>
 802643c:	0039      	movs	r1, r7
 802643e:	2300      	movs	r3, #0
 8026440:	220a      	movs	r2, #10
 8026442:	9803      	ldr	r0, [sp, #12]
 8026444:	f000 fd42 	bl	8026ecc <__multadd>
 8026448:	0007      	movs	r7, r0
 802644a:	9004      	str	r0, [sp, #16]
 802644c:	9406      	str	r4, [sp, #24]
 802644e:	e778      	b.n	8026342 <_dtoa_r+0xa0a>
 8026450:	0039      	movs	r1, r7
 8026452:	2300      	movs	r3, #0
 8026454:	220a      	movs	r2, #10
 8026456:	9803      	ldr	r0, [sp, #12]
 8026458:	f000 fd38 	bl	8026ecc <__multadd>
 802645c:	2300      	movs	r3, #0
 802645e:	0007      	movs	r7, r0
 8026460:	220a      	movs	r2, #10
 8026462:	9904      	ldr	r1, [sp, #16]
 8026464:	9803      	ldr	r0, [sp, #12]
 8026466:	f000 fd31 	bl	8026ecc <__multadd>
 802646a:	9004      	str	r0, [sp, #16]
 802646c:	e7ee      	b.n	802644c <_dtoa_r+0xb14>
 802646e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026470:	2401      	movs	r4, #1
 8026472:	2b00      	cmp	r3, #0
 8026474:	dd00      	ble.n	8026478 <_dtoa_r+0xb40>
 8026476:	001c      	movs	r4, r3
 8026478:	9704      	str	r7, [sp, #16]
 802647a:	2700      	movs	r7, #0
 802647c:	9b08      	ldr	r3, [sp, #32]
 802647e:	191c      	adds	r4, r3, r4
 8026480:	9905      	ldr	r1, [sp, #20]
 8026482:	2201      	movs	r2, #1
 8026484:	9803      	ldr	r0, [sp, #12]
 8026486:	f000 ff1f 	bl	80272c8 <__lshift>
 802648a:	0031      	movs	r1, r6
 802648c:	9005      	str	r0, [sp, #20]
 802648e:	f000 ff87 	bl	80273a0 <__mcmp>
 8026492:	2800      	cmp	r0, #0
 8026494:	dcb2      	bgt.n	80263fc <_dtoa_r+0xac4>
 8026496:	d101      	bne.n	802649c <_dtoa_r+0xb64>
 8026498:	07ed      	lsls	r5, r5, #31
 802649a:	d4af      	bmi.n	80263fc <_dtoa_r+0xac4>
 802649c:	0023      	movs	r3, r4
 802649e:	001c      	movs	r4, r3
 80264a0:	3b01      	subs	r3, #1
 80264a2:	781a      	ldrb	r2, [r3, #0]
 80264a4:	2a30      	cmp	r2, #48	@ 0x30
 80264a6:	d0fa      	beq.n	802649e <_dtoa_r+0xb66>
 80264a8:	e4b0      	b.n	8025e0c <_dtoa_r+0x4d4>
 80264aa:	9a08      	ldr	r2, [sp, #32]
 80264ac:	429a      	cmp	r2, r3
 80264ae:	d1a6      	bne.n	80263fe <_dtoa_r+0xac6>
 80264b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80264b2:	3301      	adds	r3, #1
 80264b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80264b6:	2331      	movs	r3, #49	@ 0x31
 80264b8:	7013      	strb	r3, [r2, #0]
 80264ba:	e4a7      	b.n	8025e0c <_dtoa_r+0x4d4>
 80264bc:	4b14      	ldr	r3, [pc, #80]	@ (8026510 <_dtoa_r+0xbd8>)
 80264be:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80264c0:	9308      	str	r3, [sp, #32]
 80264c2:	4b14      	ldr	r3, [pc, #80]	@ (8026514 <_dtoa_r+0xbdc>)
 80264c4:	2a00      	cmp	r2, #0
 80264c6:	d001      	beq.n	80264cc <_dtoa_r+0xb94>
 80264c8:	f7ff fa7e 	bl	80259c8 <_dtoa_r+0x90>
 80264cc:	f7ff fa7e 	bl	80259cc <_dtoa_r+0x94>
 80264d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80264d2:	2b01      	cmp	r3, #1
 80264d4:	dc00      	bgt.n	80264d8 <_dtoa_r+0xba0>
 80264d6:	e648      	b.n	802616a <_dtoa_r+0x832>
 80264d8:	2001      	movs	r0, #1
 80264da:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80264dc:	e665      	b.n	80261aa <_dtoa_r+0x872>
 80264de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80264e0:	2b00      	cmp	r3, #0
 80264e2:	dc00      	bgt.n	80264e6 <_dtoa_r+0xbae>
 80264e4:	e6a9      	b.n	802623a <_dtoa_r+0x902>
 80264e6:	2400      	movs	r4, #0
 80264e8:	0031      	movs	r1, r6
 80264ea:	9805      	ldr	r0, [sp, #20]
 80264ec:	f7ff f99e 	bl	802582c <quorem>
 80264f0:	9b08      	ldr	r3, [sp, #32]
 80264f2:	3030      	adds	r0, #48	@ 0x30
 80264f4:	5518      	strb	r0, [r3, r4]
 80264f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80264f8:	3401      	adds	r4, #1
 80264fa:	0005      	movs	r5, r0
 80264fc:	42a3      	cmp	r3, r4
 80264fe:	ddb6      	ble.n	802646e <_dtoa_r+0xb36>
 8026500:	2300      	movs	r3, #0
 8026502:	220a      	movs	r2, #10
 8026504:	9905      	ldr	r1, [sp, #20]
 8026506:	9803      	ldr	r0, [sp, #12]
 8026508:	f000 fce0 	bl	8026ecc <__multadd>
 802650c:	9005      	str	r0, [sp, #20]
 802650e:	e7eb      	b.n	80264e8 <_dtoa_r+0xbb0>
 8026510:	0802e00e 	.word	0x0802e00e
 8026514:	0802e016 	.word	0x0802e016

08026518 <_free_r>:
 8026518:	b570      	push	{r4, r5, r6, lr}
 802651a:	0005      	movs	r5, r0
 802651c:	1e0c      	subs	r4, r1, #0
 802651e:	d010      	beq.n	8026542 <_free_r+0x2a>
 8026520:	3c04      	subs	r4, #4
 8026522:	6823      	ldr	r3, [r4, #0]
 8026524:	2b00      	cmp	r3, #0
 8026526:	da00      	bge.n	802652a <_free_r+0x12>
 8026528:	18e4      	adds	r4, r4, r3
 802652a:	0028      	movs	r0, r5
 802652c:	f000 fc56 	bl	8026ddc <__malloc_lock>
 8026530:	4a1d      	ldr	r2, [pc, #116]	@ (80265a8 <_free_r+0x90>)
 8026532:	6813      	ldr	r3, [r2, #0]
 8026534:	2b00      	cmp	r3, #0
 8026536:	d105      	bne.n	8026544 <_free_r+0x2c>
 8026538:	6063      	str	r3, [r4, #4]
 802653a:	6014      	str	r4, [r2, #0]
 802653c:	0028      	movs	r0, r5
 802653e:	f000 fc55 	bl	8026dec <__malloc_unlock>
 8026542:	bd70      	pop	{r4, r5, r6, pc}
 8026544:	42a3      	cmp	r3, r4
 8026546:	d908      	bls.n	802655a <_free_r+0x42>
 8026548:	6820      	ldr	r0, [r4, #0]
 802654a:	1821      	adds	r1, r4, r0
 802654c:	428b      	cmp	r3, r1
 802654e:	d1f3      	bne.n	8026538 <_free_r+0x20>
 8026550:	6819      	ldr	r1, [r3, #0]
 8026552:	685b      	ldr	r3, [r3, #4]
 8026554:	1809      	adds	r1, r1, r0
 8026556:	6021      	str	r1, [r4, #0]
 8026558:	e7ee      	b.n	8026538 <_free_r+0x20>
 802655a:	001a      	movs	r2, r3
 802655c:	685b      	ldr	r3, [r3, #4]
 802655e:	2b00      	cmp	r3, #0
 8026560:	d001      	beq.n	8026566 <_free_r+0x4e>
 8026562:	42a3      	cmp	r3, r4
 8026564:	d9f9      	bls.n	802655a <_free_r+0x42>
 8026566:	6811      	ldr	r1, [r2, #0]
 8026568:	1850      	adds	r0, r2, r1
 802656a:	42a0      	cmp	r0, r4
 802656c:	d10b      	bne.n	8026586 <_free_r+0x6e>
 802656e:	6820      	ldr	r0, [r4, #0]
 8026570:	1809      	adds	r1, r1, r0
 8026572:	1850      	adds	r0, r2, r1
 8026574:	6011      	str	r1, [r2, #0]
 8026576:	4283      	cmp	r3, r0
 8026578:	d1e0      	bne.n	802653c <_free_r+0x24>
 802657a:	6818      	ldr	r0, [r3, #0]
 802657c:	685b      	ldr	r3, [r3, #4]
 802657e:	1841      	adds	r1, r0, r1
 8026580:	6011      	str	r1, [r2, #0]
 8026582:	6053      	str	r3, [r2, #4]
 8026584:	e7da      	b.n	802653c <_free_r+0x24>
 8026586:	42a0      	cmp	r0, r4
 8026588:	d902      	bls.n	8026590 <_free_r+0x78>
 802658a:	230c      	movs	r3, #12
 802658c:	602b      	str	r3, [r5, #0]
 802658e:	e7d5      	b.n	802653c <_free_r+0x24>
 8026590:	6820      	ldr	r0, [r4, #0]
 8026592:	1821      	adds	r1, r4, r0
 8026594:	428b      	cmp	r3, r1
 8026596:	d103      	bne.n	80265a0 <_free_r+0x88>
 8026598:	6819      	ldr	r1, [r3, #0]
 802659a:	685b      	ldr	r3, [r3, #4]
 802659c:	1809      	adds	r1, r1, r0
 802659e:	6021      	str	r1, [r4, #0]
 80265a0:	6063      	str	r3, [r4, #4]
 80265a2:	6054      	str	r4, [r2, #4]
 80265a4:	e7ca      	b.n	802653c <_free_r+0x24>
 80265a6:	46c0      	nop			@ (mov r8, r8)
 80265a8:	20003624 	.word	0x20003624

080265ac <rshift>:
 80265ac:	0002      	movs	r2, r0
 80265ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80265b0:	6904      	ldr	r4, [r0, #16]
 80265b2:	b085      	sub	sp, #20
 80265b4:	3214      	adds	r2, #20
 80265b6:	114b      	asrs	r3, r1, #5
 80265b8:	0016      	movs	r6, r2
 80265ba:	9302      	str	r3, [sp, #8]
 80265bc:	429c      	cmp	r4, r3
 80265be:	dd31      	ble.n	8026624 <rshift+0x78>
 80265c0:	261f      	movs	r6, #31
 80265c2:	000f      	movs	r7, r1
 80265c4:	009b      	lsls	r3, r3, #2
 80265c6:	00a5      	lsls	r5, r4, #2
 80265c8:	18d3      	adds	r3, r2, r3
 80265ca:	4037      	ands	r7, r6
 80265cc:	1955      	adds	r5, r2, r5
 80265ce:	9300      	str	r3, [sp, #0]
 80265d0:	9701      	str	r7, [sp, #4]
 80265d2:	4231      	tst	r1, r6
 80265d4:	d10d      	bne.n	80265f2 <rshift+0x46>
 80265d6:	0016      	movs	r6, r2
 80265d8:	0019      	movs	r1, r3
 80265da:	428d      	cmp	r5, r1
 80265dc:	d836      	bhi.n	802664c <rshift+0xa0>
 80265de:	9b00      	ldr	r3, [sp, #0]
 80265e0:	2600      	movs	r6, #0
 80265e2:	3b03      	subs	r3, #3
 80265e4:	429d      	cmp	r5, r3
 80265e6:	d302      	bcc.n	80265ee <rshift+0x42>
 80265e8:	9b02      	ldr	r3, [sp, #8]
 80265ea:	1ae4      	subs	r4, r4, r3
 80265ec:	00a6      	lsls	r6, r4, #2
 80265ee:	1996      	adds	r6, r2, r6
 80265f0:	e018      	b.n	8026624 <rshift+0x78>
 80265f2:	2120      	movs	r1, #32
 80265f4:	9e01      	ldr	r6, [sp, #4]
 80265f6:	9f01      	ldr	r7, [sp, #4]
 80265f8:	1b89      	subs	r1, r1, r6
 80265fa:	9e00      	ldr	r6, [sp, #0]
 80265fc:	9103      	str	r1, [sp, #12]
 80265fe:	ce02      	ldmia	r6!, {r1}
 8026600:	4694      	mov	ip, r2
 8026602:	40f9      	lsrs	r1, r7
 8026604:	42b5      	cmp	r5, r6
 8026606:	d816      	bhi.n	8026636 <rshift+0x8a>
 8026608:	9b00      	ldr	r3, [sp, #0]
 802660a:	2600      	movs	r6, #0
 802660c:	3301      	adds	r3, #1
 802660e:	429d      	cmp	r5, r3
 8026610:	d303      	bcc.n	802661a <rshift+0x6e>
 8026612:	9b02      	ldr	r3, [sp, #8]
 8026614:	1ae4      	subs	r4, r4, r3
 8026616:	00a6      	lsls	r6, r4, #2
 8026618:	3e04      	subs	r6, #4
 802661a:	1996      	adds	r6, r2, r6
 802661c:	6031      	str	r1, [r6, #0]
 802661e:	2900      	cmp	r1, #0
 8026620:	d000      	beq.n	8026624 <rshift+0x78>
 8026622:	3604      	adds	r6, #4
 8026624:	1ab1      	subs	r1, r6, r2
 8026626:	1089      	asrs	r1, r1, #2
 8026628:	6101      	str	r1, [r0, #16]
 802662a:	4296      	cmp	r6, r2
 802662c:	d101      	bne.n	8026632 <rshift+0x86>
 802662e:	2300      	movs	r3, #0
 8026630:	6143      	str	r3, [r0, #20]
 8026632:	b005      	add	sp, #20
 8026634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026636:	6837      	ldr	r7, [r6, #0]
 8026638:	9b03      	ldr	r3, [sp, #12]
 802663a:	409f      	lsls	r7, r3
 802663c:	430f      	orrs	r7, r1
 802663e:	4661      	mov	r1, ip
 8026640:	c180      	stmia	r1!, {r7}
 8026642:	468c      	mov	ip, r1
 8026644:	9b01      	ldr	r3, [sp, #4]
 8026646:	ce02      	ldmia	r6!, {r1}
 8026648:	40d9      	lsrs	r1, r3
 802664a:	e7db      	b.n	8026604 <rshift+0x58>
 802664c:	c980      	ldmia	r1!, {r7}
 802664e:	c680      	stmia	r6!, {r7}
 8026650:	e7c3      	b.n	80265da <rshift+0x2e>

08026652 <__hexdig_fun>:
 8026652:	0002      	movs	r2, r0
 8026654:	3a30      	subs	r2, #48	@ 0x30
 8026656:	0003      	movs	r3, r0
 8026658:	2a09      	cmp	r2, #9
 802665a:	d802      	bhi.n	8026662 <__hexdig_fun+0x10>
 802665c:	3b20      	subs	r3, #32
 802665e:	b2d8      	uxtb	r0, r3
 8026660:	4770      	bx	lr
 8026662:	0002      	movs	r2, r0
 8026664:	3a61      	subs	r2, #97	@ 0x61
 8026666:	2a05      	cmp	r2, #5
 8026668:	d801      	bhi.n	802666e <__hexdig_fun+0x1c>
 802666a:	3b47      	subs	r3, #71	@ 0x47
 802666c:	e7f7      	b.n	802665e <__hexdig_fun+0xc>
 802666e:	001a      	movs	r2, r3
 8026670:	3a41      	subs	r2, #65	@ 0x41
 8026672:	2000      	movs	r0, #0
 8026674:	2a05      	cmp	r2, #5
 8026676:	d8f3      	bhi.n	8026660 <__hexdig_fun+0xe>
 8026678:	3b27      	subs	r3, #39	@ 0x27
 802667a:	e7f0      	b.n	802665e <__hexdig_fun+0xc>

0802667c <__gethex>:
 802667c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802667e:	b089      	sub	sp, #36	@ 0x24
 8026680:	9307      	str	r3, [sp, #28]
 8026682:	680b      	ldr	r3, [r1, #0]
 8026684:	9201      	str	r2, [sp, #4]
 8026686:	9003      	str	r0, [sp, #12]
 8026688:	9106      	str	r1, [sp, #24]
 802668a:	1c9a      	adds	r2, r3, #2
 802668c:	0011      	movs	r1, r2
 802668e:	3201      	adds	r2, #1
 8026690:	1e50      	subs	r0, r2, #1
 8026692:	7800      	ldrb	r0, [r0, #0]
 8026694:	2830      	cmp	r0, #48	@ 0x30
 8026696:	d0f9      	beq.n	802668c <__gethex+0x10>
 8026698:	1acb      	subs	r3, r1, r3
 802669a:	3b02      	subs	r3, #2
 802669c:	9305      	str	r3, [sp, #20]
 802669e:	9100      	str	r1, [sp, #0]
 80266a0:	f7ff ffd7 	bl	8026652 <__hexdig_fun>
 80266a4:	2300      	movs	r3, #0
 80266a6:	001d      	movs	r5, r3
 80266a8:	9302      	str	r3, [sp, #8]
 80266aa:	4298      	cmp	r0, r3
 80266ac:	d11e      	bne.n	80266ec <__gethex+0x70>
 80266ae:	2201      	movs	r2, #1
 80266b0:	49a6      	ldr	r1, [pc, #664]	@ (802694c <__gethex+0x2d0>)
 80266b2:	9800      	ldr	r0, [sp, #0]
 80266b4:	f7fe ffe4 	bl	8025680 <strncmp>
 80266b8:	0007      	movs	r7, r0
 80266ba:	42a8      	cmp	r0, r5
 80266bc:	d000      	beq.n	80266c0 <__gethex+0x44>
 80266be:	e06a      	b.n	8026796 <__gethex+0x11a>
 80266c0:	9b00      	ldr	r3, [sp, #0]
 80266c2:	7858      	ldrb	r0, [r3, #1]
 80266c4:	1c5c      	adds	r4, r3, #1
 80266c6:	f7ff ffc4 	bl	8026652 <__hexdig_fun>
 80266ca:	2301      	movs	r3, #1
 80266cc:	9302      	str	r3, [sp, #8]
 80266ce:	42a8      	cmp	r0, r5
 80266d0:	d02f      	beq.n	8026732 <__gethex+0xb6>
 80266d2:	9400      	str	r4, [sp, #0]
 80266d4:	9b00      	ldr	r3, [sp, #0]
 80266d6:	7818      	ldrb	r0, [r3, #0]
 80266d8:	2830      	cmp	r0, #48	@ 0x30
 80266da:	d009      	beq.n	80266f0 <__gethex+0x74>
 80266dc:	f7ff ffb9 	bl	8026652 <__hexdig_fun>
 80266e0:	4242      	negs	r2, r0
 80266e2:	4142      	adcs	r2, r0
 80266e4:	2301      	movs	r3, #1
 80266e6:	0025      	movs	r5, r4
 80266e8:	9202      	str	r2, [sp, #8]
 80266ea:	9305      	str	r3, [sp, #20]
 80266ec:	9c00      	ldr	r4, [sp, #0]
 80266ee:	e004      	b.n	80266fa <__gethex+0x7e>
 80266f0:	9b00      	ldr	r3, [sp, #0]
 80266f2:	3301      	adds	r3, #1
 80266f4:	9300      	str	r3, [sp, #0]
 80266f6:	e7ed      	b.n	80266d4 <__gethex+0x58>
 80266f8:	3401      	adds	r4, #1
 80266fa:	7820      	ldrb	r0, [r4, #0]
 80266fc:	f7ff ffa9 	bl	8026652 <__hexdig_fun>
 8026700:	1e07      	subs	r7, r0, #0
 8026702:	d1f9      	bne.n	80266f8 <__gethex+0x7c>
 8026704:	2201      	movs	r2, #1
 8026706:	0020      	movs	r0, r4
 8026708:	4990      	ldr	r1, [pc, #576]	@ (802694c <__gethex+0x2d0>)
 802670a:	f7fe ffb9 	bl	8025680 <strncmp>
 802670e:	2800      	cmp	r0, #0
 8026710:	d10d      	bne.n	802672e <__gethex+0xb2>
 8026712:	2d00      	cmp	r5, #0
 8026714:	d106      	bne.n	8026724 <__gethex+0xa8>
 8026716:	3401      	adds	r4, #1
 8026718:	0025      	movs	r5, r4
 802671a:	7820      	ldrb	r0, [r4, #0]
 802671c:	f7ff ff99 	bl	8026652 <__hexdig_fun>
 8026720:	2800      	cmp	r0, #0
 8026722:	d102      	bne.n	802672a <__gethex+0xae>
 8026724:	1b2d      	subs	r5, r5, r4
 8026726:	00af      	lsls	r7, r5, #2
 8026728:	e003      	b.n	8026732 <__gethex+0xb6>
 802672a:	3401      	adds	r4, #1
 802672c:	e7f5      	b.n	802671a <__gethex+0x9e>
 802672e:	2d00      	cmp	r5, #0
 8026730:	d1f8      	bne.n	8026724 <__gethex+0xa8>
 8026732:	2220      	movs	r2, #32
 8026734:	7823      	ldrb	r3, [r4, #0]
 8026736:	0026      	movs	r6, r4
 8026738:	4393      	bics	r3, r2
 802673a:	2b50      	cmp	r3, #80	@ 0x50
 802673c:	d11d      	bne.n	802677a <__gethex+0xfe>
 802673e:	7863      	ldrb	r3, [r4, #1]
 8026740:	2b2b      	cmp	r3, #43	@ 0x2b
 8026742:	d02d      	beq.n	80267a0 <__gethex+0x124>
 8026744:	2b2d      	cmp	r3, #45	@ 0x2d
 8026746:	d02f      	beq.n	80267a8 <__gethex+0x12c>
 8026748:	2300      	movs	r3, #0
 802674a:	1c66      	adds	r6, r4, #1
 802674c:	9304      	str	r3, [sp, #16]
 802674e:	7830      	ldrb	r0, [r6, #0]
 8026750:	f7ff ff7f 	bl	8026652 <__hexdig_fun>
 8026754:	1e43      	subs	r3, r0, #1
 8026756:	b2db      	uxtb	r3, r3
 8026758:	0005      	movs	r5, r0
 802675a:	2b18      	cmp	r3, #24
 802675c:	d82a      	bhi.n	80267b4 <__gethex+0x138>
 802675e:	7870      	ldrb	r0, [r6, #1]
 8026760:	f7ff ff77 	bl	8026652 <__hexdig_fun>
 8026764:	1e43      	subs	r3, r0, #1
 8026766:	b2db      	uxtb	r3, r3
 8026768:	3601      	adds	r6, #1
 802676a:	3d10      	subs	r5, #16
 802676c:	2b18      	cmp	r3, #24
 802676e:	d91d      	bls.n	80267ac <__gethex+0x130>
 8026770:	9b04      	ldr	r3, [sp, #16]
 8026772:	2b00      	cmp	r3, #0
 8026774:	d000      	beq.n	8026778 <__gethex+0xfc>
 8026776:	426d      	negs	r5, r5
 8026778:	197f      	adds	r7, r7, r5
 802677a:	9b06      	ldr	r3, [sp, #24]
 802677c:	601e      	str	r6, [r3, #0]
 802677e:	9b02      	ldr	r3, [sp, #8]
 8026780:	2b00      	cmp	r3, #0
 8026782:	d019      	beq.n	80267b8 <__gethex+0x13c>
 8026784:	9b05      	ldr	r3, [sp, #20]
 8026786:	2606      	movs	r6, #6
 8026788:	425a      	negs	r2, r3
 802678a:	4153      	adcs	r3, r2
 802678c:	425b      	negs	r3, r3
 802678e:	401e      	ands	r6, r3
 8026790:	0030      	movs	r0, r6
 8026792:	b009      	add	sp, #36	@ 0x24
 8026794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026796:	2301      	movs	r3, #1
 8026798:	2700      	movs	r7, #0
 802679a:	9c00      	ldr	r4, [sp, #0]
 802679c:	9302      	str	r3, [sp, #8]
 802679e:	e7c8      	b.n	8026732 <__gethex+0xb6>
 80267a0:	2300      	movs	r3, #0
 80267a2:	9304      	str	r3, [sp, #16]
 80267a4:	1ca6      	adds	r6, r4, #2
 80267a6:	e7d2      	b.n	802674e <__gethex+0xd2>
 80267a8:	2301      	movs	r3, #1
 80267aa:	e7fa      	b.n	80267a2 <__gethex+0x126>
 80267ac:	230a      	movs	r3, #10
 80267ae:	435d      	muls	r5, r3
 80267b0:	182d      	adds	r5, r5, r0
 80267b2:	e7d4      	b.n	802675e <__gethex+0xe2>
 80267b4:	0026      	movs	r6, r4
 80267b6:	e7e0      	b.n	802677a <__gethex+0xfe>
 80267b8:	9b00      	ldr	r3, [sp, #0]
 80267ba:	9902      	ldr	r1, [sp, #8]
 80267bc:	1ae3      	subs	r3, r4, r3
 80267be:	3b01      	subs	r3, #1
 80267c0:	2b07      	cmp	r3, #7
 80267c2:	dc0a      	bgt.n	80267da <__gethex+0x15e>
 80267c4:	9803      	ldr	r0, [sp, #12]
 80267c6:	f000 fb19 	bl	8026dfc <_Balloc>
 80267ca:	1e05      	subs	r5, r0, #0
 80267cc:	d108      	bne.n	80267e0 <__gethex+0x164>
 80267ce:	002a      	movs	r2, r5
 80267d0:	21e4      	movs	r1, #228	@ 0xe4
 80267d2:	4b5f      	ldr	r3, [pc, #380]	@ (8026950 <__gethex+0x2d4>)
 80267d4:	485f      	ldr	r0, [pc, #380]	@ (8026954 <__gethex+0x2d8>)
 80267d6:	f001 fbe9 	bl	8027fac <__assert_func>
 80267da:	3101      	adds	r1, #1
 80267dc:	105b      	asrs	r3, r3, #1
 80267de:	e7ef      	b.n	80267c0 <__gethex+0x144>
 80267e0:	0003      	movs	r3, r0
 80267e2:	3314      	adds	r3, #20
 80267e4:	9302      	str	r3, [sp, #8]
 80267e6:	9305      	str	r3, [sp, #20]
 80267e8:	2300      	movs	r3, #0
 80267ea:	001e      	movs	r6, r3
 80267ec:	9304      	str	r3, [sp, #16]
 80267ee:	9b00      	ldr	r3, [sp, #0]
 80267f0:	42a3      	cmp	r3, r4
 80267f2:	d338      	bcc.n	8026866 <__gethex+0x1ea>
 80267f4:	9c05      	ldr	r4, [sp, #20]
 80267f6:	9b02      	ldr	r3, [sp, #8]
 80267f8:	c440      	stmia	r4!, {r6}
 80267fa:	1ae4      	subs	r4, r4, r3
 80267fc:	10a4      	asrs	r4, r4, #2
 80267fe:	0030      	movs	r0, r6
 8026800:	612c      	str	r4, [r5, #16]
 8026802:	f000 fbf3 	bl	8026fec <__hi0bits>
 8026806:	9b01      	ldr	r3, [sp, #4]
 8026808:	0164      	lsls	r4, r4, #5
 802680a:	681b      	ldr	r3, [r3, #0]
 802680c:	1a26      	subs	r6, r4, r0
 802680e:	9300      	str	r3, [sp, #0]
 8026810:	429e      	cmp	r6, r3
 8026812:	dd52      	ble.n	80268ba <__gethex+0x23e>
 8026814:	1af6      	subs	r6, r6, r3
 8026816:	0031      	movs	r1, r6
 8026818:	0028      	movs	r0, r5
 802681a:	f000 ff8e 	bl	802773a <__any_on>
 802681e:	1e04      	subs	r4, r0, #0
 8026820:	d00f      	beq.n	8026842 <__gethex+0x1c6>
 8026822:	2401      	movs	r4, #1
 8026824:	211f      	movs	r1, #31
 8026826:	0020      	movs	r0, r4
 8026828:	1e73      	subs	r3, r6, #1
 802682a:	4019      	ands	r1, r3
 802682c:	4088      	lsls	r0, r1
 802682e:	0001      	movs	r1, r0
 8026830:	115a      	asrs	r2, r3, #5
 8026832:	9802      	ldr	r0, [sp, #8]
 8026834:	0092      	lsls	r2, r2, #2
 8026836:	5812      	ldr	r2, [r2, r0]
 8026838:	420a      	tst	r2, r1
 802683a:	d002      	beq.n	8026842 <__gethex+0x1c6>
 802683c:	42a3      	cmp	r3, r4
 802683e:	dc34      	bgt.n	80268aa <__gethex+0x22e>
 8026840:	2402      	movs	r4, #2
 8026842:	0031      	movs	r1, r6
 8026844:	0028      	movs	r0, r5
 8026846:	f7ff feb1 	bl	80265ac <rshift>
 802684a:	19bf      	adds	r7, r7, r6
 802684c:	9b01      	ldr	r3, [sp, #4]
 802684e:	689b      	ldr	r3, [r3, #8]
 8026850:	42bb      	cmp	r3, r7
 8026852:	da42      	bge.n	80268da <__gethex+0x25e>
 8026854:	0029      	movs	r1, r5
 8026856:	9803      	ldr	r0, [sp, #12]
 8026858:	f000 fb14 	bl	8026e84 <_Bfree>
 802685c:	2300      	movs	r3, #0
 802685e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026860:	26a3      	movs	r6, #163	@ 0xa3
 8026862:	6013      	str	r3, [r2, #0]
 8026864:	e794      	b.n	8026790 <__gethex+0x114>
 8026866:	3c01      	subs	r4, #1
 8026868:	7823      	ldrb	r3, [r4, #0]
 802686a:	2b2e      	cmp	r3, #46	@ 0x2e
 802686c:	d012      	beq.n	8026894 <__gethex+0x218>
 802686e:	9b04      	ldr	r3, [sp, #16]
 8026870:	2b20      	cmp	r3, #32
 8026872:	d104      	bne.n	802687e <__gethex+0x202>
 8026874:	9b05      	ldr	r3, [sp, #20]
 8026876:	c340      	stmia	r3!, {r6}
 8026878:	2600      	movs	r6, #0
 802687a:	9305      	str	r3, [sp, #20]
 802687c:	9604      	str	r6, [sp, #16]
 802687e:	7820      	ldrb	r0, [r4, #0]
 8026880:	f7ff fee7 	bl	8026652 <__hexdig_fun>
 8026884:	230f      	movs	r3, #15
 8026886:	4018      	ands	r0, r3
 8026888:	9b04      	ldr	r3, [sp, #16]
 802688a:	4098      	lsls	r0, r3
 802688c:	3304      	adds	r3, #4
 802688e:	4306      	orrs	r6, r0
 8026890:	9304      	str	r3, [sp, #16]
 8026892:	e7ac      	b.n	80267ee <__gethex+0x172>
 8026894:	9b00      	ldr	r3, [sp, #0]
 8026896:	42a3      	cmp	r3, r4
 8026898:	d8e9      	bhi.n	802686e <__gethex+0x1f2>
 802689a:	2201      	movs	r2, #1
 802689c:	0020      	movs	r0, r4
 802689e:	492b      	ldr	r1, [pc, #172]	@ (802694c <__gethex+0x2d0>)
 80268a0:	f7fe feee 	bl	8025680 <strncmp>
 80268a4:	2800      	cmp	r0, #0
 80268a6:	d1e2      	bne.n	802686e <__gethex+0x1f2>
 80268a8:	e7a1      	b.n	80267ee <__gethex+0x172>
 80268aa:	0028      	movs	r0, r5
 80268ac:	1eb1      	subs	r1, r6, #2
 80268ae:	f000 ff44 	bl	802773a <__any_on>
 80268b2:	2800      	cmp	r0, #0
 80268b4:	d0c4      	beq.n	8026840 <__gethex+0x1c4>
 80268b6:	2403      	movs	r4, #3
 80268b8:	e7c3      	b.n	8026842 <__gethex+0x1c6>
 80268ba:	9b00      	ldr	r3, [sp, #0]
 80268bc:	2400      	movs	r4, #0
 80268be:	429e      	cmp	r6, r3
 80268c0:	dac4      	bge.n	802684c <__gethex+0x1d0>
 80268c2:	1b9e      	subs	r6, r3, r6
 80268c4:	0029      	movs	r1, r5
 80268c6:	0032      	movs	r2, r6
 80268c8:	9803      	ldr	r0, [sp, #12]
 80268ca:	f000 fcfd 	bl	80272c8 <__lshift>
 80268ce:	0003      	movs	r3, r0
 80268d0:	3314      	adds	r3, #20
 80268d2:	0005      	movs	r5, r0
 80268d4:	1bbf      	subs	r7, r7, r6
 80268d6:	9302      	str	r3, [sp, #8]
 80268d8:	e7b8      	b.n	802684c <__gethex+0x1d0>
 80268da:	9b01      	ldr	r3, [sp, #4]
 80268dc:	685e      	ldr	r6, [r3, #4]
 80268de:	42be      	cmp	r6, r7
 80268e0:	dd6f      	ble.n	80269c2 <__gethex+0x346>
 80268e2:	9b00      	ldr	r3, [sp, #0]
 80268e4:	1bf6      	subs	r6, r6, r7
 80268e6:	42b3      	cmp	r3, r6
 80268e8:	dc36      	bgt.n	8026958 <__gethex+0x2dc>
 80268ea:	9b01      	ldr	r3, [sp, #4]
 80268ec:	68db      	ldr	r3, [r3, #12]
 80268ee:	2b02      	cmp	r3, #2
 80268f0:	d024      	beq.n	802693c <__gethex+0x2c0>
 80268f2:	2b03      	cmp	r3, #3
 80268f4:	d026      	beq.n	8026944 <__gethex+0x2c8>
 80268f6:	2b01      	cmp	r3, #1
 80268f8:	d117      	bne.n	802692a <__gethex+0x2ae>
 80268fa:	9b00      	ldr	r3, [sp, #0]
 80268fc:	42b3      	cmp	r3, r6
 80268fe:	d114      	bne.n	802692a <__gethex+0x2ae>
 8026900:	2b01      	cmp	r3, #1
 8026902:	d10b      	bne.n	802691c <__gethex+0x2a0>
 8026904:	9b01      	ldr	r3, [sp, #4]
 8026906:	9a07      	ldr	r2, [sp, #28]
 8026908:	685b      	ldr	r3, [r3, #4]
 802690a:	2662      	movs	r6, #98	@ 0x62
 802690c:	6013      	str	r3, [r2, #0]
 802690e:	2301      	movs	r3, #1
 8026910:	9a02      	ldr	r2, [sp, #8]
 8026912:	612b      	str	r3, [r5, #16]
 8026914:	6013      	str	r3, [r2, #0]
 8026916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026918:	601d      	str	r5, [r3, #0]
 802691a:	e739      	b.n	8026790 <__gethex+0x114>
 802691c:	9900      	ldr	r1, [sp, #0]
 802691e:	0028      	movs	r0, r5
 8026920:	3901      	subs	r1, #1
 8026922:	f000 ff0a 	bl	802773a <__any_on>
 8026926:	2800      	cmp	r0, #0
 8026928:	d1ec      	bne.n	8026904 <__gethex+0x288>
 802692a:	0029      	movs	r1, r5
 802692c:	9803      	ldr	r0, [sp, #12]
 802692e:	f000 faa9 	bl	8026e84 <_Bfree>
 8026932:	2300      	movs	r3, #0
 8026934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026936:	2650      	movs	r6, #80	@ 0x50
 8026938:	6013      	str	r3, [r2, #0]
 802693a:	e729      	b.n	8026790 <__gethex+0x114>
 802693c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802693e:	2b00      	cmp	r3, #0
 8026940:	d1f3      	bne.n	802692a <__gethex+0x2ae>
 8026942:	e7df      	b.n	8026904 <__gethex+0x288>
 8026944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026946:	2b00      	cmp	r3, #0
 8026948:	d1dc      	bne.n	8026904 <__gethex+0x288>
 802694a:	e7ee      	b.n	802692a <__gethex+0x2ae>
 802694c:	0802dfd0 	.word	0x0802dfd0
 8026950:	0802e08a 	.word	0x0802e08a
 8026954:	0802e09b 	.word	0x0802e09b
 8026958:	1e77      	subs	r7, r6, #1
 802695a:	2c00      	cmp	r4, #0
 802695c:	d12f      	bne.n	80269be <__gethex+0x342>
 802695e:	2f00      	cmp	r7, #0
 8026960:	d004      	beq.n	802696c <__gethex+0x2f0>
 8026962:	0039      	movs	r1, r7
 8026964:	0028      	movs	r0, r5
 8026966:	f000 fee8 	bl	802773a <__any_on>
 802696a:	0004      	movs	r4, r0
 802696c:	231f      	movs	r3, #31
 802696e:	117a      	asrs	r2, r7, #5
 8026970:	401f      	ands	r7, r3
 8026972:	3b1e      	subs	r3, #30
 8026974:	40bb      	lsls	r3, r7
 8026976:	9902      	ldr	r1, [sp, #8]
 8026978:	0092      	lsls	r2, r2, #2
 802697a:	5852      	ldr	r2, [r2, r1]
 802697c:	421a      	tst	r2, r3
 802697e:	d001      	beq.n	8026984 <__gethex+0x308>
 8026980:	2302      	movs	r3, #2
 8026982:	431c      	orrs	r4, r3
 8026984:	9b00      	ldr	r3, [sp, #0]
 8026986:	0031      	movs	r1, r6
 8026988:	1b9b      	subs	r3, r3, r6
 802698a:	2602      	movs	r6, #2
 802698c:	0028      	movs	r0, r5
 802698e:	9300      	str	r3, [sp, #0]
 8026990:	f7ff fe0c 	bl	80265ac <rshift>
 8026994:	9b01      	ldr	r3, [sp, #4]
 8026996:	685f      	ldr	r7, [r3, #4]
 8026998:	2c00      	cmp	r4, #0
 802699a:	d03f      	beq.n	8026a1c <__gethex+0x3a0>
 802699c:	9b01      	ldr	r3, [sp, #4]
 802699e:	68db      	ldr	r3, [r3, #12]
 80269a0:	2b02      	cmp	r3, #2
 80269a2:	d010      	beq.n	80269c6 <__gethex+0x34a>
 80269a4:	2b03      	cmp	r3, #3
 80269a6:	d012      	beq.n	80269ce <__gethex+0x352>
 80269a8:	2b01      	cmp	r3, #1
 80269aa:	d106      	bne.n	80269ba <__gethex+0x33e>
 80269ac:	07a2      	lsls	r2, r4, #30
 80269ae:	d504      	bpl.n	80269ba <__gethex+0x33e>
 80269b0:	9a02      	ldr	r2, [sp, #8]
 80269b2:	6812      	ldr	r2, [r2, #0]
 80269b4:	4314      	orrs	r4, r2
 80269b6:	421c      	tst	r4, r3
 80269b8:	d10c      	bne.n	80269d4 <__gethex+0x358>
 80269ba:	2310      	movs	r3, #16
 80269bc:	e02d      	b.n	8026a1a <__gethex+0x39e>
 80269be:	2401      	movs	r4, #1
 80269c0:	e7d4      	b.n	802696c <__gethex+0x2f0>
 80269c2:	2601      	movs	r6, #1
 80269c4:	e7e8      	b.n	8026998 <__gethex+0x31c>
 80269c6:	2301      	movs	r3, #1
 80269c8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80269ca:	1a9b      	subs	r3, r3, r2
 80269cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80269ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80269d0:	2b00      	cmp	r3, #0
 80269d2:	d0f2      	beq.n	80269ba <__gethex+0x33e>
 80269d4:	692b      	ldr	r3, [r5, #16]
 80269d6:	2000      	movs	r0, #0
 80269d8:	9302      	str	r3, [sp, #8]
 80269da:	009b      	lsls	r3, r3, #2
 80269dc:	9304      	str	r3, [sp, #16]
 80269de:	002b      	movs	r3, r5
 80269e0:	9a04      	ldr	r2, [sp, #16]
 80269e2:	3314      	adds	r3, #20
 80269e4:	1899      	adds	r1, r3, r2
 80269e6:	681a      	ldr	r2, [r3, #0]
 80269e8:	1c54      	adds	r4, r2, #1
 80269ea:	d01c      	beq.n	8026a26 <__gethex+0x3aa>
 80269ec:	3201      	adds	r2, #1
 80269ee:	601a      	str	r2, [r3, #0]
 80269f0:	002b      	movs	r3, r5
 80269f2:	3314      	adds	r3, #20
 80269f4:	2e02      	cmp	r6, #2
 80269f6:	d13f      	bne.n	8026a78 <__gethex+0x3fc>
 80269f8:	9a01      	ldr	r2, [sp, #4]
 80269fa:	9900      	ldr	r1, [sp, #0]
 80269fc:	6812      	ldr	r2, [r2, #0]
 80269fe:	3a01      	subs	r2, #1
 8026a00:	428a      	cmp	r2, r1
 8026a02:	d109      	bne.n	8026a18 <__gethex+0x39c>
 8026a04:	000a      	movs	r2, r1
 8026a06:	201f      	movs	r0, #31
 8026a08:	4010      	ands	r0, r2
 8026a0a:	2201      	movs	r2, #1
 8026a0c:	4082      	lsls	r2, r0
 8026a0e:	1149      	asrs	r1, r1, #5
 8026a10:	0089      	lsls	r1, r1, #2
 8026a12:	58cb      	ldr	r3, [r1, r3]
 8026a14:	4213      	tst	r3, r2
 8026a16:	d13d      	bne.n	8026a94 <__gethex+0x418>
 8026a18:	2320      	movs	r3, #32
 8026a1a:	431e      	orrs	r6, r3
 8026a1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026a1e:	601d      	str	r5, [r3, #0]
 8026a20:	9b07      	ldr	r3, [sp, #28]
 8026a22:	601f      	str	r7, [r3, #0]
 8026a24:	e6b4      	b.n	8026790 <__gethex+0x114>
 8026a26:	c301      	stmia	r3!, {r0}
 8026a28:	4299      	cmp	r1, r3
 8026a2a:	d8dc      	bhi.n	80269e6 <__gethex+0x36a>
 8026a2c:	68ab      	ldr	r3, [r5, #8]
 8026a2e:	9a02      	ldr	r2, [sp, #8]
 8026a30:	429a      	cmp	r2, r3
 8026a32:	db18      	blt.n	8026a66 <__gethex+0x3ea>
 8026a34:	6869      	ldr	r1, [r5, #4]
 8026a36:	9803      	ldr	r0, [sp, #12]
 8026a38:	3101      	adds	r1, #1
 8026a3a:	f000 f9df 	bl	8026dfc <_Balloc>
 8026a3e:	1e04      	subs	r4, r0, #0
 8026a40:	d104      	bne.n	8026a4c <__gethex+0x3d0>
 8026a42:	0022      	movs	r2, r4
 8026a44:	2184      	movs	r1, #132	@ 0x84
 8026a46:	4b1d      	ldr	r3, [pc, #116]	@ (8026abc <__gethex+0x440>)
 8026a48:	481d      	ldr	r0, [pc, #116]	@ (8026ac0 <__gethex+0x444>)
 8026a4a:	e6c4      	b.n	80267d6 <__gethex+0x15a>
 8026a4c:	0029      	movs	r1, r5
 8026a4e:	692a      	ldr	r2, [r5, #16]
 8026a50:	310c      	adds	r1, #12
 8026a52:	3202      	adds	r2, #2
 8026a54:	0092      	lsls	r2, r2, #2
 8026a56:	300c      	adds	r0, #12
 8026a58:	f7fe fed8 	bl	802580c <memcpy>
 8026a5c:	0029      	movs	r1, r5
 8026a5e:	9803      	ldr	r0, [sp, #12]
 8026a60:	f000 fa10 	bl	8026e84 <_Bfree>
 8026a64:	0025      	movs	r5, r4
 8026a66:	692b      	ldr	r3, [r5, #16]
 8026a68:	1c5a      	adds	r2, r3, #1
 8026a6a:	612a      	str	r2, [r5, #16]
 8026a6c:	2201      	movs	r2, #1
 8026a6e:	3304      	adds	r3, #4
 8026a70:	009b      	lsls	r3, r3, #2
 8026a72:	18eb      	adds	r3, r5, r3
 8026a74:	605a      	str	r2, [r3, #4]
 8026a76:	e7bb      	b.n	80269f0 <__gethex+0x374>
 8026a78:	692a      	ldr	r2, [r5, #16]
 8026a7a:	9902      	ldr	r1, [sp, #8]
 8026a7c:	428a      	cmp	r2, r1
 8026a7e:	dd0b      	ble.n	8026a98 <__gethex+0x41c>
 8026a80:	2101      	movs	r1, #1
 8026a82:	0028      	movs	r0, r5
 8026a84:	f7ff fd92 	bl	80265ac <rshift>
 8026a88:	9b01      	ldr	r3, [sp, #4]
 8026a8a:	3701      	adds	r7, #1
 8026a8c:	689b      	ldr	r3, [r3, #8]
 8026a8e:	42bb      	cmp	r3, r7
 8026a90:	da00      	bge.n	8026a94 <__gethex+0x418>
 8026a92:	e6df      	b.n	8026854 <__gethex+0x1d8>
 8026a94:	2601      	movs	r6, #1
 8026a96:	e7bf      	b.n	8026a18 <__gethex+0x39c>
 8026a98:	221f      	movs	r2, #31
 8026a9a:	9c00      	ldr	r4, [sp, #0]
 8026a9c:	9900      	ldr	r1, [sp, #0]
 8026a9e:	4014      	ands	r4, r2
 8026aa0:	4211      	tst	r1, r2
 8026aa2:	d0f7      	beq.n	8026a94 <__gethex+0x418>
 8026aa4:	9a04      	ldr	r2, [sp, #16]
 8026aa6:	189b      	adds	r3, r3, r2
 8026aa8:	3b04      	subs	r3, #4
 8026aaa:	6818      	ldr	r0, [r3, #0]
 8026aac:	f000 fa9e 	bl	8026fec <__hi0bits>
 8026ab0:	2320      	movs	r3, #32
 8026ab2:	1b1b      	subs	r3, r3, r4
 8026ab4:	4298      	cmp	r0, r3
 8026ab6:	dbe3      	blt.n	8026a80 <__gethex+0x404>
 8026ab8:	e7ec      	b.n	8026a94 <__gethex+0x418>
 8026aba:	46c0      	nop			@ (mov r8, r8)
 8026abc:	0802e08a 	.word	0x0802e08a
 8026ac0:	0802e09b 	.word	0x0802e09b

08026ac4 <L_shift>:
 8026ac4:	2308      	movs	r3, #8
 8026ac6:	b570      	push	{r4, r5, r6, lr}
 8026ac8:	2520      	movs	r5, #32
 8026aca:	1a9a      	subs	r2, r3, r2
 8026acc:	0092      	lsls	r2, r2, #2
 8026ace:	1aad      	subs	r5, r5, r2
 8026ad0:	6843      	ldr	r3, [r0, #4]
 8026ad2:	6804      	ldr	r4, [r0, #0]
 8026ad4:	001e      	movs	r6, r3
 8026ad6:	40ae      	lsls	r6, r5
 8026ad8:	40d3      	lsrs	r3, r2
 8026ada:	4334      	orrs	r4, r6
 8026adc:	6004      	str	r4, [r0, #0]
 8026ade:	6043      	str	r3, [r0, #4]
 8026ae0:	3004      	adds	r0, #4
 8026ae2:	4288      	cmp	r0, r1
 8026ae4:	d3f4      	bcc.n	8026ad0 <L_shift+0xc>
 8026ae6:	bd70      	pop	{r4, r5, r6, pc}

08026ae8 <__match>:
 8026ae8:	b530      	push	{r4, r5, lr}
 8026aea:	6803      	ldr	r3, [r0, #0]
 8026aec:	780c      	ldrb	r4, [r1, #0]
 8026aee:	3301      	adds	r3, #1
 8026af0:	2c00      	cmp	r4, #0
 8026af2:	d102      	bne.n	8026afa <__match+0x12>
 8026af4:	6003      	str	r3, [r0, #0]
 8026af6:	2001      	movs	r0, #1
 8026af8:	bd30      	pop	{r4, r5, pc}
 8026afa:	781a      	ldrb	r2, [r3, #0]
 8026afc:	0015      	movs	r5, r2
 8026afe:	3d41      	subs	r5, #65	@ 0x41
 8026b00:	2d19      	cmp	r5, #25
 8026b02:	d800      	bhi.n	8026b06 <__match+0x1e>
 8026b04:	3220      	adds	r2, #32
 8026b06:	3101      	adds	r1, #1
 8026b08:	42a2      	cmp	r2, r4
 8026b0a:	d0ef      	beq.n	8026aec <__match+0x4>
 8026b0c:	2000      	movs	r0, #0
 8026b0e:	e7f3      	b.n	8026af8 <__match+0x10>

08026b10 <__hexnan>:
 8026b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026b12:	680b      	ldr	r3, [r1, #0]
 8026b14:	b08b      	sub	sp, #44	@ 0x2c
 8026b16:	9201      	str	r2, [sp, #4]
 8026b18:	9901      	ldr	r1, [sp, #4]
 8026b1a:	115a      	asrs	r2, r3, #5
 8026b1c:	0092      	lsls	r2, r2, #2
 8026b1e:	188a      	adds	r2, r1, r2
 8026b20:	9202      	str	r2, [sp, #8]
 8026b22:	0019      	movs	r1, r3
 8026b24:	221f      	movs	r2, #31
 8026b26:	4011      	ands	r1, r2
 8026b28:	9008      	str	r0, [sp, #32]
 8026b2a:	9106      	str	r1, [sp, #24]
 8026b2c:	4213      	tst	r3, r2
 8026b2e:	d002      	beq.n	8026b36 <__hexnan+0x26>
 8026b30:	9b02      	ldr	r3, [sp, #8]
 8026b32:	3304      	adds	r3, #4
 8026b34:	9302      	str	r3, [sp, #8]
 8026b36:	9b02      	ldr	r3, [sp, #8]
 8026b38:	2500      	movs	r5, #0
 8026b3a:	1f1f      	subs	r7, r3, #4
 8026b3c:	003e      	movs	r6, r7
 8026b3e:	003c      	movs	r4, r7
 8026b40:	9b08      	ldr	r3, [sp, #32]
 8026b42:	603d      	str	r5, [r7, #0]
 8026b44:	681b      	ldr	r3, [r3, #0]
 8026b46:	9507      	str	r5, [sp, #28]
 8026b48:	9305      	str	r3, [sp, #20]
 8026b4a:	9503      	str	r5, [sp, #12]
 8026b4c:	9b05      	ldr	r3, [sp, #20]
 8026b4e:	3301      	adds	r3, #1
 8026b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8026b52:	9b05      	ldr	r3, [sp, #20]
 8026b54:	785b      	ldrb	r3, [r3, #1]
 8026b56:	9304      	str	r3, [sp, #16]
 8026b58:	2b00      	cmp	r3, #0
 8026b5a:	d028      	beq.n	8026bae <__hexnan+0x9e>
 8026b5c:	9804      	ldr	r0, [sp, #16]
 8026b5e:	f7ff fd78 	bl	8026652 <__hexdig_fun>
 8026b62:	2800      	cmp	r0, #0
 8026b64:	d155      	bne.n	8026c12 <__hexnan+0x102>
 8026b66:	9b04      	ldr	r3, [sp, #16]
 8026b68:	2b20      	cmp	r3, #32
 8026b6a:	d819      	bhi.n	8026ba0 <__hexnan+0x90>
 8026b6c:	9b03      	ldr	r3, [sp, #12]
 8026b6e:	9a07      	ldr	r2, [sp, #28]
 8026b70:	4293      	cmp	r3, r2
 8026b72:	dd12      	ble.n	8026b9a <__hexnan+0x8a>
 8026b74:	42b4      	cmp	r4, r6
 8026b76:	d206      	bcs.n	8026b86 <__hexnan+0x76>
 8026b78:	2d07      	cmp	r5, #7
 8026b7a:	dc04      	bgt.n	8026b86 <__hexnan+0x76>
 8026b7c:	002a      	movs	r2, r5
 8026b7e:	0031      	movs	r1, r6
 8026b80:	0020      	movs	r0, r4
 8026b82:	f7ff ff9f 	bl	8026ac4 <L_shift>
 8026b86:	9b01      	ldr	r3, [sp, #4]
 8026b88:	2508      	movs	r5, #8
 8026b8a:	429c      	cmp	r4, r3
 8026b8c:	d905      	bls.n	8026b9a <__hexnan+0x8a>
 8026b8e:	1f26      	subs	r6, r4, #4
 8026b90:	2500      	movs	r5, #0
 8026b92:	0034      	movs	r4, r6
 8026b94:	9b03      	ldr	r3, [sp, #12]
 8026b96:	6035      	str	r5, [r6, #0]
 8026b98:	9307      	str	r3, [sp, #28]
 8026b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026b9c:	9305      	str	r3, [sp, #20]
 8026b9e:	e7d5      	b.n	8026b4c <__hexnan+0x3c>
 8026ba0:	9b04      	ldr	r3, [sp, #16]
 8026ba2:	2b29      	cmp	r3, #41	@ 0x29
 8026ba4:	d15a      	bne.n	8026c5c <__hexnan+0x14c>
 8026ba6:	9b05      	ldr	r3, [sp, #20]
 8026ba8:	9a08      	ldr	r2, [sp, #32]
 8026baa:	3302      	adds	r3, #2
 8026bac:	6013      	str	r3, [r2, #0]
 8026bae:	9b03      	ldr	r3, [sp, #12]
 8026bb0:	2b00      	cmp	r3, #0
 8026bb2:	d053      	beq.n	8026c5c <__hexnan+0x14c>
 8026bb4:	42b4      	cmp	r4, r6
 8026bb6:	d206      	bcs.n	8026bc6 <__hexnan+0xb6>
 8026bb8:	2d07      	cmp	r5, #7
 8026bba:	dc04      	bgt.n	8026bc6 <__hexnan+0xb6>
 8026bbc:	002a      	movs	r2, r5
 8026bbe:	0031      	movs	r1, r6
 8026bc0:	0020      	movs	r0, r4
 8026bc2:	f7ff ff7f 	bl	8026ac4 <L_shift>
 8026bc6:	9b01      	ldr	r3, [sp, #4]
 8026bc8:	429c      	cmp	r4, r3
 8026bca:	d936      	bls.n	8026c3a <__hexnan+0x12a>
 8026bcc:	001a      	movs	r2, r3
 8026bce:	0023      	movs	r3, r4
 8026bd0:	cb02      	ldmia	r3!, {r1}
 8026bd2:	c202      	stmia	r2!, {r1}
 8026bd4:	429f      	cmp	r7, r3
 8026bd6:	d2fb      	bcs.n	8026bd0 <__hexnan+0xc0>
 8026bd8:	9b02      	ldr	r3, [sp, #8]
 8026bda:	1c62      	adds	r2, r4, #1
 8026bdc:	1ed9      	subs	r1, r3, #3
 8026bde:	2304      	movs	r3, #4
 8026be0:	4291      	cmp	r1, r2
 8026be2:	d305      	bcc.n	8026bf0 <__hexnan+0xe0>
 8026be4:	9b02      	ldr	r3, [sp, #8]
 8026be6:	3b04      	subs	r3, #4
 8026be8:	1b1b      	subs	r3, r3, r4
 8026bea:	089b      	lsrs	r3, r3, #2
 8026bec:	3301      	adds	r3, #1
 8026bee:	009b      	lsls	r3, r3, #2
 8026bf0:	9a01      	ldr	r2, [sp, #4]
 8026bf2:	18d3      	adds	r3, r2, r3
 8026bf4:	2200      	movs	r2, #0
 8026bf6:	c304      	stmia	r3!, {r2}
 8026bf8:	429f      	cmp	r7, r3
 8026bfa:	d2fc      	bcs.n	8026bf6 <__hexnan+0xe6>
 8026bfc:	683b      	ldr	r3, [r7, #0]
 8026bfe:	2b00      	cmp	r3, #0
 8026c00:	d104      	bne.n	8026c0c <__hexnan+0xfc>
 8026c02:	9b01      	ldr	r3, [sp, #4]
 8026c04:	429f      	cmp	r7, r3
 8026c06:	d127      	bne.n	8026c58 <__hexnan+0x148>
 8026c08:	2301      	movs	r3, #1
 8026c0a:	603b      	str	r3, [r7, #0]
 8026c0c:	2005      	movs	r0, #5
 8026c0e:	b00b      	add	sp, #44	@ 0x2c
 8026c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026c12:	9b03      	ldr	r3, [sp, #12]
 8026c14:	3501      	adds	r5, #1
 8026c16:	3301      	adds	r3, #1
 8026c18:	9303      	str	r3, [sp, #12]
 8026c1a:	2d08      	cmp	r5, #8
 8026c1c:	dd06      	ble.n	8026c2c <__hexnan+0x11c>
 8026c1e:	9b01      	ldr	r3, [sp, #4]
 8026c20:	429c      	cmp	r4, r3
 8026c22:	d9ba      	bls.n	8026b9a <__hexnan+0x8a>
 8026c24:	2300      	movs	r3, #0
 8026c26:	2501      	movs	r5, #1
 8026c28:	3c04      	subs	r4, #4
 8026c2a:	6023      	str	r3, [r4, #0]
 8026c2c:	220f      	movs	r2, #15
 8026c2e:	6823      	ldr	r3, [r4, #0]
 8026c30:	4010      	ands	r0, r2
 8026c32:	011b      	lsls	r3, r3, #4
 8026c34:	4303      	orrs	r3, r0
 8026c36:	6023      	str	r3, [r4, #0]
 8026c38:	e7af      	b.n	8026b9a <__hexnan+0x8a>
 8026c3a:	9b06      	ldr	r3, [sp, #24]
 8026c3c:	2b00      	cmp	r3, #0
 8026c3e:	d0dd      	beq.n	8026bfc <__hexnan+0xec>
 8026c40:	2320      	movs	r3, #32
 8026c42:	9a06      	ldr	r2, [sp, #24]
 8026c44:	9902      	ldr	r1, [sp, #8]
 8026c46:	1a9b      	subs	r3, r3, r2
 8026c48:	2201      	movs	r2, #1
 8026c4a:	4252      	negs	r2, r2
 8026c4c:	40da      	lsrs	r2, r3
 8026c4e:	3904      	subs	r1, #4
 8026c50:	680b      	ldr	r3, [r1, #0]
 8026c52:	4013      	ands	r3, r2
 8026c54:	600b      	str	r3, [r1, #0]
 8026c56:	e7d1      	b.n	8026bfc <__hexnan+0xec>
 8026c58:	3f04      	subs	r7, #4
 8026c5a:	e7cf      	b.n	8026bfc <__hexnan+0xec>
 8026c5c:	2004      	movs	r0, #4
 8026c5e:	e7d6      	b.n	8026c0e <__hexnan+0xfe>

08026c60 <malloc>:
 8026c60:	b510      	push	{r4, lr}
 8026c62:	4b03      	ldr	r3, [pc, #12]	@ (8026c70 <malloc+0x10>)
 8026c64:	0001      	movs	r1, r0
 8026c66:	6818      	ldr	r0, [r3, #0]
 8026c68:	f000 f826 	bl	8026cb8 <_malloc_r>
 8026c6c:	bd10      	pop	{r4, pc}
 8026c6e:	46c0      	nop			@ (mov r8, r8)
 8026c70:	200003e0 	.word	0x200003e0

08026c74 <sbrk_aligned>:
 8026c74:	b570      	push	{r4, r5, r6, lr}
 8026c76:	4e0f      	ldr	r6, [pc, #60]	@ (8026cb4 <sbrk_aligned+0x40>)
 8026c78:	000d      	movs	r5, r1
 8026c7a:	6831      	ldr	r1, [r6, #0]
 8026c7c:	0004      	movs	r4, r0
 8026c7e:	2900      	cmp	r1, #0
 8026c80:	d102      	bne.n	8026c88 <sbrk_aligned+0x14>
 8026c82:	f001 f981 	bl	8027f88 <_sbrk_r>
 8026c86:	6030      	str	r0, [r6, #0]
 8026c88:	0029      	movs	r1, r5
 8026c8a:	0020      	movs	r0, r4
 8026c8c:	f001 f97c 	bl	8027f88 <_sbrk_r>
 8026c90:	1c43      	adds	r3, r0, #1
 8026c92:	d103      	bne.n	8026c9c <sbrk_aligned+0x28>
 8026c94:	2501      	movs	r5, #1
 8026c96:	426d      	negs	r5, r5
 8026c98:	0028      	movs	r0, r5
 8026c9a:	bd70      	pop	{r4, r5, r6, pc}
 8026c9c:	2303      	movs	r3, #3
 8026c9e:	1cc5      	adds	r5, r0, #3
 8026ca0:	439d      	bics	r5, r3
 8026ca2:	42a8      	cmp	r0, r5
 8026ca4:	d0f8      	beq.n	8026c98 <sbrk_aligned+0x24>
 8026ca6:	1a29      	subs	r1, r5, r0
 8026ca8:	0020      	movs	r0, r4
 8026caa:	f001 f96d 	bl	8027f88 <_sbrk_r>
 8026cae:	3001      	adds	r0, #1
 8026cb0:	d1f2      	bne.n	8026c98 <sbrk_aligned+0x24>
 8026cb2:	e7ef      	b.n	8026c94 <sbrk_aligned+0x20>
 8026cb4:	20003620 	.word	0x20003620

08026cb8 <_malloc_r>:
 8026cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026cba:	2203      	movs	r2, #3
 8026cbc:	1ccb      	adds	r3, r1, #3
 8026cbe:	4393      	bics	r3, r2
 8026cc0:	3308      	adds	r3, #8
 8026cc2:	0005      	movs	r5, r0
 8026cc4:	001f      	movs	r7, r3
 8026cc6:	2b0c      	cmp	r3, #12
 8026cc8:	d234      	bcs.n	8026d34 <_malloc_r+0x7c>
 8026cca:	270c      	movs	r7, #12
 8026ccc:	42b9      	cmp	r1, r7
 8026cce:	d833      	bhi.n	8026d38 <_malloc_r+0x80>
 8026cd0:	0028      	movs	r0, r5
 8026cd2:	f000 f883 	bl	8026ddc <__malloc_lock>
 8026cd6:	4e37      	ldr	r6, [pc, #220]	@ (8026db4 <_malloc_r+0xfc>)
 8026cd8:	6833      	ldr	r3, [r6, #0]
 8026cda:	001c      	movs	r4, r3
 8026cdc:	2c00      	cmp	r4, #0
 8026cde:	d12f      	bne.n	8026d40 <_malloc_r+0x88>
 8026ce0:	0039      	movs	r1, r7
 8026ce2:	0028      	movs	r0, r5
 8026ce4:	f7ff ffc6 	bl	8026c74 <sbrk_aligned>
 8026ce8:	0004      	movs	r4, r0
 8026cea:	1c43      	adds	r3, r0, #1
 8026cec:	d15f      	bne.n	8026dae <_malloc_r+0xf6>
 8026cee:	6834      	ldr	r4, [r6, #0]
 8026cf0:	9400      	str	r4, [sp, #0]
 8026cf2:	9b00      	ldr	r3, [sp, #0]
 8026cf4:	2b00      	cmp	r3, #0
 8026cf6:	d14a      	bne.n	8026d8e <_malloc_r+0xd6>
 8026cf8:	2c00      	cmp	r4, #0
 8026cfa:	d052      	beq.n	8026da2 <_malloc_r+0xea>
 8026cfc:	6823      	ldr	r3, [r4, #0]
 8026cfe:	0028      	movs	r0, r5
 8026d00:	18e3      	adds	r3, r4, r3
 8026d02:	9900      	ldr	r1, [sp, #0]
 8026d04:	9301      	str	r3, [sp, #4]
 8026d06:	f001 f93f 	bl	8027f88 <_sbrk_r>
 8026d0a:	9b01      	ldr	r3, [sp, #4]
 8026d0c:	4283      	cmp	r3, r0
 8026d0e:	d148      	bne.n	8026da2 <_malloc_r+0xea>
 8026d10:	6823      	ldr	r3, [r4, #0]
 8026d12:	0028      	movs	r0, r5
 8026d14:	1aff      	subs	r7, r7, r3
 8026d16:	0039      	movs	r1, r7
 8026d18:	f7ff ffac 	bl	8026c74 <sbrk_aligned>
 8026d1c:	3001      	adds	r0, #1
 8026d1e:	d040      	beq.n	8026da2 <_malloc_r+0xea>
 8026d20:	6823      	ldr	r3, [r4, #0]
 8026d22:	19db      	adds	r3, r3, r7
 8026d24:	6023      	str	r3, [r4, #0]
 8026d26:	6833      	ldr	r3, [r6, #0]
 8026d28:	685a      	ldr	r2, [r3, #4]
 8026d2a:	2a00      	cmp	r2, #0
 8026d2c:	d133      	bne.n	8026d96 <_malloc_r+0xde>
 8026d2e:	9b00      	ldr	r3, [sp, #0]
 8026d30:	6033      	str	r3, [r6, #0]
 8026d32:	e019      	b.n	8026d68 <_malloc_r+0xb0>
 8026d34:	2b00      	cmp	r3, #0
 8026d36:	dac9      	bge.n	8026ccc <_malloc_r+0x14>
 8026d38:	230c      	movs	r3, #12
 8026d3a:	602b      	str	r3, [r5, #0]
 8026d3c:	2000      	movs	r0, #0
 8026d3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026d40:	6821      	ldr	r1, [r4, #0]
 8026d42:	1bc9      	subs	r1, r1, r7
 8026d44:	d420      	bmi.n	8026d88 <_malloc_r+0xd0>
 8026d46:	290b      	cmp	r1, #11
 8026d48:	d90a      	bls.n	8026d60 <_malloc_r+0xa8>
 8026d4a:	19e2      	adds	r2, r4, r7
 8026d4c:	6027      	str	r7, [r4, #0]
 8026d4e:	42a3      	cmp	r3, r4
 8026d50:	d104      	bne.n	8026d5c <_malloc_r+0xa4>
 8026d52:	6032      	str	r2, [r6, #0]
 8026d54:	6863      	ldr	r3, [r4, #4]
 8026d56:	6011      	str	r1, [r2, #0]
 8026d58:	6053      	str	r3, [r2, #4]
 8026d5a:	e005      	b.n	8026d68 <_malloc_r+0xb0>
 8026d5c:	605a      	str	r2, [r3, #4]
 8026d5e:	e7f9      	b.n	8026d54 <_malloc_r+0x9c>
 8026d60:	6862      	ldr	r2, [r4, #4]
 8026d62:	42a3      	cmp	r3, r4
 8026d64:	d10e      	bne.n	8026d84 <_malloc_r+0xcc>
 8026d66:	6032      	str	r2, [r6, #0]
 8026d68:	0028      	movs	r0, r5
 8026d6a:	f000 f83f 	bl	8026dec <__malloc_unlock>
 8026d6e:	0020      	movs	r0, r4
 8026d70:	2207      	movs	r2, #7
 8026d72:	300b      	adds	r0, #11
 8026d74:	1d23      	adds	r3, r4, #4
 8026d76:	4390      	bics	r0, r2
 8026d78:	1ac2      	subs	r2, r0, r3
 8026d7a:	4298      	cmp	r0, r3
 8026d7c:	d0df      	beq.n	8026d3e <_malloc_r+0x86>
 8026d7e:	1a1b      	subs	r3, r3, r0
 8026d80:	50a3      	str	r3, [r4, r2]
 8026d82:	e7dc      	b.n	8026d3e <_malloc_r+0x86>
 8026d84:	605a      	str	r2, [r3, #4]
 8026d86:	e7ef      	b.n	8026d68 <_malloc_r+0xb0>
 8026d88:	0023      	movs	r3, r4
 8026d8a:	6864      	ldr	r4, [r4, #4]
 8026d8c:	e7a6      	b.n	8026cdc <_malloc_r+0x24>
 8026d8e:	9c00      	ldr	r4, [sp, #0]
 8026d90:	6863      	ldr	r3, [r4, #4]
 8026d92:	9300      	str	r3, [sp, #0]
 8026d94:	e7ad      	b.n	8026cf2 <_malloc_r+0x3a>
 8026d96:	001a      	movs	r2, r3
 8026d98:	685b      	ldr	r3, [r3, #4]
 8026d9a:	42a3      	cmp	r3, r4
 8026d9c:	d1fb      	bne.n	8026d96 <_malloc_r+0xde>
 8026d9e:	2300      	movs	r3, #0
 8026da0:	e7da      	b.n	8026d58 <_malloc_r+0xa0>
 8026da2:	230c      	movs	r3, #12
 8026da4:	0028      	movs	r0, r5
 8026da6:	602b      	str	r3, [r5, #0]
 8026da8:	f000 f820 	bl	8026dec <__malloc_unlock>
 8026dac:	e7c6      	b.n	8026d3c <_malloc_r+0x84>
 8026dae:	6007      	str	r7, [r0, #0]
 8026db0:	e7da      	b.n	8026d68 <_malloc_r+0xb0>
 8026db2:	46c0      	nop			@ (mov r8, r8)
 8026db4:	20003624 	.word	0x20003624

08026db8 <__ascii_mbtowc>:
 8026db8:	b082      	sub	sp, #8
 8026dba:	2900      	cmp	r1, #0
 8026dbc:	d100      	bne.n	8026dc0 <__ascii_mbtowc+0x8>
 8026dbe:	a901      	add	r1, sp, #4
 8026dc0:	1e10      	subs	r0, r2, #0
 8026dc2:	d006      	beq.n	8026dd2 <__ascii_mbtowc+0x1a>
 8026dc4:	2b00      	cmp	r3, #0
 8026dc6:	d006      	beq.n	8026dd6 <__ascii_mbtowc+0x1e>
 8026dc8:	7813      	ldrb	r3, [r2, #0]
 8026dca:	600b      	str	r3, [r1, #0]
 8026dcc:	7810      	ldrb	r0, [r2, #0]
 8026dce:	1e43      	subs	r3, r0, #1
 8026dd0:	4198      	sbcs	r0, r3
 8026dd2:	b002      	add	sp, #8
 8026dd4:	4770      	bx	lr
 8026dd6:	2002      	movs	r0, #2
 8026dd8:	4240      	negs	r0, r0
 8026dda:	e7fa      	b.n	8026dd2 <__ascii_mbtowc+0x1a>

08026ddc <__malloc_lock>:
 8026ddc:	b510      	push	{r4, lr}
 8026dde:	4802      	ldr	r0, [pc, #8]	@ (8026de8 <__malloc_lock+0xc>)
 8026de0:	f7fe fd07 	bl	80257f2 <__retarget_lock_acquire_recursive>
 8026de4:	bd10      	pop	{r4, pc}
 8026de6:	46c0      	nop			@ (mov r8, r8)
 8026de8:	2000361c 	.word	0x2000361c

08026dec <__malloc_unlock>:
 8026dec:	b510      	push	{r4, lr}
 8026dee:	4802      	ldr	r0, [pc, #8]	@ (8026df8 <__malloc_unlock+0xc>)
 8026df0:	f7fe fd00 	bl	80257f4 <__retarget_lock_release_recursive>
 8026df4:	bd10      	pop	{r4, pc}
 8026df6:	46c0      	nop			@ (mov r8, r8)
 8026df8:	2000361c 	.word	0x2000361c

08026dfc <_Balloc>:
 8026dfc:	b570      	push	{r4, r5, r6, lr}
 8026dfe:	69c5      	ldr	r5, [r0, #28]
 8026e00:	0006      	movs	r6, r0
 8026e02:	000c      	movs	r4, r1
 8026e04:	2d00      	cmp	r5, #0
 8026e06:	d10e      	bne.n	8026e26 <_Balloc+0x2a>
 8026e08:	2010      	movs	r0, #16
 8026e0a:	f7ff ff29 	bl	8026c60 <malloc>
 8026e0e:	1e02      	subs	r2, r0, #0
 8026e10:	61f0      	str	r0, [r6, #28]
 8026e12:	d104      	bne.n	8026e1e <_Balloc+0x22>
 8026e14:	216b      	movs	r1, #107	@ 0x6b
 8026e16:	4b19      	ldr	r3, [pc, #100]	@ (8026e7c <_Balloc+0x80>)
 8026e18:	4819      	ldr	r0, [pc, #100]	@ (8026e80 <_Balloc+0x84>)
 8026e1a:	f001 f8c7 	bl	8027fac <__assert_func>
 8026e1e:	6045      	str	r5, [r0, #4]
 8026e20:	6085      	str	r5, [r0, #8]
 8026e22:	6005      	str	r5, [r0, #0]
 8026e24:	60c5      	str	r5, [r0, #12]
 8026e26:	69f5      	ldr	r5, [r6, #28]
 8026e28:	68eb      	ldr	r3, [r5, #12]
 8026e2a:	2b00      	cmp	r3, #0
 8026e2c:	d013      	beq.n	8026e56 <_Balloc+0x5a>
 8026e2e:	69f3      	ldr	r3, [r6, #28]
 8026e30:	00a2      	lsls	r2, r4, #2
 8026e32:	68db      	ldr	r3, [r3, #12]
 8026e34:	189b      	adds	r3, r3, r2
 8026e36:	6818      	ldr	r0, [r3, #0]
 8026e38:	2800      	cmp	r0, #0
 8026e3a:	d118      	bne.n	8026e6e <_Balloc+0x72>
 8026e3c:	2101      	movs	r1, #1
 8026e3e:	000d      	movs	r5, r1
 8026e40:	40a5      	lsls	r5, r4
 8026e42:	1d6a      	adds	r2, r5, #5
 8026e44:	0030      	movs	r0, r6
 8026e46:	0092      	lsls	r2, r2, #2
 8026e48:	f001 f8ce 	bl	8027fe8 <_calloc_r>
 8026e4c:	2800      	cmp	r0, #0
 8026e4e:	d00c      	beq.n	8026e6a <_Balloc+0x6e>
 8026e50:	6044      	str	r4, [r0, #4]
 8026e52:	6085      	str	r5, [r0, #8]
 8026e54:	e00d      	b.n	8026e72 <_Balloc+0x76>
 8026e56:	2221      	movs	r2, #33	@ 0x21
 8026e58:	2104      	movs	r1, #4
 8026e5a:	0030      	movs	r0, r6
 8026e5c:	f001 f8c4 	bl	8027fe8 <_calloc_r>
 8026e60:	69f3      	ldr	r3, [r6, #28]
 8026e62:	60e8      	str	r0, [r5, #12]
 8026e64:	68db      	ldr	r3, [r3, #12]
 8026e66:	2b00      	cmp	r3, #0
 8026e68:	d1e1      	bne.n	8026e2e <_Balloc+0x32>
 8026e6a:	2000      	movs	r0, #0
 8026e6c:	bd70      	pop	{r4, r5, r6, pc}
 8026e6e:	6802      	ldr	r2, [r0, #0]
 8026e70:	601a      	str	r2, [r3, #0]
 8026e72:	2300      	movs	r3, #0
 8026e74:	6103      	str	r3, [r0, #16]
 8026e76:	60c3      	str	r3, [r0, #12]
 8026e78:	e7f8      	b.n	8026e6c <_Balloc+0x70>
 8026e7a:	46c0      	nop			@ (mov r8, r8)
 8026e7c:	0802e01b 	.word	0x0802e01b
 8026e80:	0802e0fb 	.word	0x0802e0fb

08026e84 <_Bfree>:
 8026e84:	b570      	push	{r4, r5, r6, lr}
 8026e86:	69c6      	ldr	r6, [r0, #28]
 8026e88:	0005      	movs	r5, r0
 8026e8a:	000c      	movs	r4, r1
 8026e8c:	2e00      	cmp	r6, #0
 8026e8e:	d10e      	bne.n	8026eae <_Bfree+0x2a>
 8026e90:	2010      	movs	r0, #16
 8026e92:	f7ff fee5 	bl	8026c60 <malloc>
 8026e96:	1e02      	subs	r2, r0, #0
 8026e98:	61e8      	str	r0, [r5, #28]
 8026e9a:	d104      	bne.n	8026ea6 <_Bfree+0x22>
 8026e9c:	218f      	movs	r1, #143	@ 0x8f
 8026e9e:	4b09      	ldr	r3, [pc, #36]	@ (8026ec4 <_Bfree+0x40>)
 8026ea0:	4809      	ldr	r0, [pc, #36]	@ (8026ec8 <_Bfree+0x44>)
 8026ea2:	f001 f883 	bl	8027fac <__assert_func>
 8026ea6:	6046      	str	r6, [r0, #4]
 8026ea8:	6086      	str	r6, [r0, #8]
 8026eaa:	6006      	str	r6, [r0, #0]
 8026eac:	60c6      	str	r6, [r0, #12]
 8026eae:	2c00      	cmp	r4, #0
 8026eb0:	d007      	beq.n	8026ec2 <_Bfree+0x3e>
 8026eb2:	69eb      	ldr	r3, [r5, #28]
 8026eb4:	6862      	ldr	r2, [r4, #4]
 8026eb6:	68db      	ldr	r3, [r3, #12]
 8026eb8:	0092      	lsls	r2, r2, #2
 8026eba:	189b      	adds	r3, r3, r2
 8026ebc:	681a      	ldr	r2, [r3, #0]
 8026ebe:	6022      	str	r2, [r4, #0]
 8026ec0:	601c      	str	r4, [r3, #0]
 8026ec2:	bd70      	pop	{r4, r5, r6, pc}
 8026ec4:	0802e01b 	.word	0x0802e01b
 8026ec8:	0802e0fb 	.word	0x0802e0fb

08026ecc <__multadd>:
 8026ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026ece:	000f      	movs	r7, r1
 8026ed0:	9001      	str	r0, [sp, #4]
 8026ed2:	000c      	movs	r4, r1
 8026ed4:	001e      	movs	r6, r3
 8026ed6:	2000      	movs	r0, #0
 8026ed8:	690d      	ldr	r5, [r1, #16]
 8026eda:	3714      	adds	r7, #20
 8026edc:	683b      	ldr	r3, [r7, #0]
 8026ede:	3001      	adds	r0, #1
 8026ee0:	b299      	uxth	r1, r3
 8026ee2:	4351      	muls	r1, r2
 8026ee4:	0c1b      	lsrs	r3, r3, #16
 8026ee6:	4353      	muls	r3, r2
 8026ee8:	1989      	adds	r1, r1, r6
 8026eea:	0c0e      	lsrs	r6, r1, #16
 8026eec:	199b      	adds	r3, r3, r6
 8026eee:	0c1e      	lsrs	r6, r3, #16
 8026ef0:	b289      	uxth	r1, r1
 8026ef2:	041b      	lsls	r3, r3, #16
 8026ef4:	185b      	adds	r3, r3, r1
 8026ef6:	c708      	stmia	r7!, {r3}
 8026ef8:	4285      	cmp	r5, r0
 8026efa:	dcef      	bgt.n	8026edc <__multadd+0x10>
 8026efc:	2e00      	cmp	r6, #0
 8026efe:	d022      	beq.n	8026f46 <__multadd+0x7a>
 8026f00:	68a3      	ldr	r3, [r4, #8]
 8026f02:	42ab      	cmp	r3, r5
 8026f04:	dc19      	bgt.n	8026f3a <__multadd+0x6e>
 8026f06:	6861      	ldr	r1, [r4, #4]
 8026f08:	9801      	ldr	r0, [sp, #4]
 8026f0a:	3101      	adds	r1, #1
 8026f0c:	f7ff ff76 	bl	8026dfc <_Balloc>
 8026f10:	1e07      	subs	r7, r0, #0
 8026f12:	d105      	bne.n	8026f20 <__multadd+0x54>
 8026f14:	003a      	movs	r2, r7
 8026f16:	21ba      	movs	r1, #186	@ 0xba
 8026f18:	4b0c      	ldr	r3, [pc, #48]	@ (8026f4c <__multadd+0x80>)
 8026f1a:	480d      	ldr	r0, [pc, #52]	@ (8026f50 <__multadd+0x84>)
 8026f1c:	f001 f846 	bl	8027fac <__assert_func>
 8026f20:	0021      	movs	r1, r4
 8026f22:	6922      	ldr	r2, [r4, #16]
 8026f24:	310c      	adds	r1, #12
 8026f26:	3202      	adds	r2, #2
 8026f28:	0092      	lsls	r2, r2, #2
 8026f2a:	300c      	adds	r0, #12
 8026f2c:	f7fe fc6e 	bl	802580c <memcpy>
 8026f30:	0021      	movs	r1, r4
 8026f32:	9801      	ldr	r0, [sp, #4]
 8026f34:	f7ff ffa6 	bl	8026e84 <_Bfree>
 8026f38:	003c      	movs	r4, r7
 8026f3a:	1d2b      	adds	r3, r5, #4
 8026f3c:	009b      	lsls	r3, r3, #2
 8026f3e:	18e3      	adds	r3, r4, r3
 8026f40:	3501      	adds	r5, #1
 8026f42:	605e      	str	r6, [r3, #4]
 8026f44:	6125      	str	r5, [r4, #16]
 8026f46:	0020      	movs	r0, r4
 8026f48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026f4a:	46c0      	nop			@ (mov r8, r8)
 8026f4c:	0802e08a 	.word	0x0802e08a
 8026f50:	0802e0fb 	.word	0x0802e0fb

08026f54 <__s2b>:
 8026f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026f56:	0007      	movs	r7, r0
 8026f58:	0018      	movs	r0, r3
 8026f5a:	000c      	movs	r4, r1
 8026f5c:	3008      	adds	r0, #8
 8026f5e:	2109      	movs	r1, #9
 8026f60:	9301      	str	r3, [sp, #4]
 8026f62:	0015      	movs	r5, r2
 8026f64:	f7d9 f9a8 	bl	80002b8 <__divsi3>
 8026f68:	2301      	movs	r3, #1
 8026f6a:	2100      	movs	r1, #0
 8026f6c:	4283      	cmp	r3, r0
 8026f6e:	db0a      	blt.n	8026f86 <__s2b+0x32>
 8026f70:	0038      	movs	r0, r7
 8026f72:	f7ff ff43 	bl	8026dfc <_Balloc>
 8026f76:	1e01      	subs	r1, r0, #0
 8026f78:	d108      	bne.n	8026f8c <__s2b+0x38>
 8026f7a:	000a      	movs	r2, r1
 8026f7c:	4b19      	ldr	r3, [pc, #100]	@ (8026fe4 <__s2b+0x90>)
 8026f7e:	481a      	ldr	r0, [pc, #104]	@ (8026fe8 <__s2b+0x94>)
 8026f80:	31d3      	adds	r1, #211	@ 0xd3
 8026f82:	f001 f813 	bl	8027fac <__assert_func>
 8026f86:	005b      	lsls	r3, r3, #1
 8026f88:	3101      	adds	r1, #1
 8026f8a:	e7ef      	b.n	8026f6c <__s2b+0x18>
 8026f8c:	9b08      	ldr	r3, [sp, #32]
 8026f8e:	6143      	str	r3, [r0, #20]
 8026f90:	2301      	movs	r3, #1
 8026f92:	6103      	str	r3, [r0, #16]
 8026f94:	2d09      	cmp	r5, #9
 8026f96:	dd18      	ble.n	8026fca <__s2b+0x76>
 8026f98:	0023      	movs	r3, r4
 8026f9a:	3309      	adds	r3, #9
 8026f9c:	001e      	movs	r6, r3
 8026f9e:	9300      	str	r3, [sp, #0]
 8026fa0:	1964      	adds	r4, r4, r5
 8026fa2:	7833      	ldrb	r3, [r6, #0]
 8026fa4:	220a      	movs	r2, #10
 8026fa6:	0038      	movs	r0, r7
 8026fa8:	3b30      	subs	r3, #48	@ 0x30
 8026faa:	f7ff ff8f 	bl	8026ecc <__multadd>
 8026fae:	3601      	adds	r6, #1
 8026fb0:	0001      	movs	r1, r0
 8026fb2:	42a6      	cmp	r6, r4
 8026fb4:	d1f5      	bne.n	8026fa2 <__s2b+0x4e>
 8026fb6:	002c      	movs	r4, r5
 8026fb8:	9b00      	ldr	r3, [sp, #0]
 8026fba:	3c08      	subs	r4, #8
 8026fbc:	191c      	adds	r4, r3, r4
 8026fbe:	002e      	movs	r6, r5
 8026fc0:	9b01      	ldr	r3, [sp, #4]
 8026fc2:	429e      	cmp	r6, r3
 8026fc4:	db04      	blt.n	8026fd0 <__s2b+0x7c>
 8026fc6:	0008      	movs	r0, r1
 8026fc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026fca:	2509      	movs	r5, #9
 8026fcc:	340a      	adds	r4, #10
 8026fce:	e7f6      	b.n	8026fbe <__s2b+0x6a>
 8026fd0:	1b63      	subs	r3, r4, r5
 8026fd2:	5d9b      	ldrb	r3, [r3, r6]
 8026fd4:	220a      	movs	r2, #10
 8026fd6:	0038      	movs	r0, r7
 8026fd8:	3b30      	subs	r3, #48	@ 0x30
 8026fda:	f7ff ff77 	bl	8026ecc <__multadd>
 8026fde:	3601      	adds	r6, #1
 8026fe0:	0001      	movs	r1, r0
 8026fe2:	e7ed      	b.n	8026fc0 <__s2b+0x6c>
 8026fe4:	0802e08a 	.word	0x0802e08a
 8026fe8:	0802e0fb 	.word	0x0802e0fb

08026fec <__hi0bits>:
 8026fec:	2280      	movs	r2, #128	@ 0x80
 8026fee:	0003      	movs	r3, r0
 8026ff0:	0252      	lsls	r2, r2, #9
 8026ff2:	2000      	movs	r0, #0
 8026ff4:	4293      	cmp	r3, r2
 8026ff6:	d201      	bcs.n	8026ffc <__hi0bits+0x10>
 8026ff8:	041b      	lsls	r3, r3, #16
 8026ffa:	3010      	adds	r0, #16
 8026ffc:	2280      	movs	r2, #128	@ 0x80
 8026ffe:	0452      	lsls	r2, r2, #17
 8027000:	4293      	cmp	r3, r2
 8027002:	d201      	bcs.n	8027008 <__hi0bits+0x1c>
 8027004:	3008      	adds	r0, #8
 8027006:	021b      	lsls	r3, r3, #8
 8027008:	2280      	movs	r2, #128	@ 0x80
 802700a:	0552      	lsls	r2, r2, #21
 802700c:	4293      	cmp	r3, r2
 802700e:	d201      	bcs.n	8027014 <__hi0bits+0x28>
 8027010:	3004      	adds	r0, #4
 8027012:	011b      	lsls	r3, r3, #4
 8027014:	2280      	movs	r2, #128	@ 0x80
 8027016:	05d2      	lsls	r2, r2, #23
 8027018:	4293      	cmp	r3, r2
 802701a:	d201      	bcs.n	8027020 <__hi0bits+0x34>
 802701c:	3002      	adds	r0, #2
 802701e:	009b      	lsls	r3, r3, #2
 8027020:	2b00      	cmp	r3, #0
 8027022:	db03      	blt.n	802702c <__hi0bits+0x40>
 8027024:	3001      	adds	r0, #1
 8027026:	4213      	tst	r3, r2
 8027028:	d100      	bne.n	802702c <__hi0bits+0x40>
 802702a:	2020      	movs	r0, #32
 802702c:	4770      	bx	lr

0802702e <__lo0bits>:
 802702e:	6803      	ldr	r3, [r0, #0]
 8027030:	0001      	movs	r1, r0
 8027032:	2207      	movs	r2, #7
 8027034:	0018      	movs	r0, r3
 8027036:	4010      	ands	r0, r2
 8027038:	4213      	tst	r3, r2
 802703a:	d00d      	beq.n	8027058 <__lo0bits+0x2a>
 802703c:	3a06      	subs	r2, #6
 802703e:	2000      	movs	r0, #0
 8027040:	4213      	tst	r3, r2
 8027042:	d105      	bne.n	8027050 <__lo0bits+0x22>
 8027044:	3002      	adds	r0, #2
 8027046:	4203      	tst	r3, r0
 8027048:	d003      	beq.n	8027052 <__lo0bits+0x24>
 802704a:	40d3      	lsrs	r3, r2
 802704c:	0010      	movs	r0, r2
 802704e:	600b      	str	r3, [r1, #0]
 8027050:	4770      	bx	lr
 8027052:	089b      	lsrs	r3, r3, #2
 8027054:	600b      	str	r3, [r1, #0]
 8027056:	e7fb      	b.n	8027050 <__lo0bits+0x22>
 8027058:	b29a      	uxth	r2, r3
 802705a:	2a00      	cmp	r2, #0
 802705c:	d101      	bne.n	8027062 <__lo0bits+0x34>
 802705e:	2010      	movs	r0, #16
 8027060:	0c1b      	lsrs	r3, r3, #16
 8027062:	b2da      	uxtb	r2, r3
 8027064:	2a00      	cmp	r2, #0
 8027066:	d101      	bne.n	802706c <__lo0bits+0x3e>
 8027068:	3008      	adds	r0, #8
 802706a:	0a1b      	lsrs	r3, r3, #8
 802706c:	071a      	lsls	r2, r3, #28
 802706e:	d101      	bne.n	8027074 <__lo0bits+0x46>
 8027070:	3004      	adds	r0, #4
 8027072:	091b      	lsrs	r3, r3, #4
 8027074:	079a      	lsls	r2, r3, #30
 8027076:	d101      	bne.n	802707c <__lo0bits+0x4e>
 8027078:	3002      	adds	r0, #2
 802707a:	089b      	lsrs	r3, r3, #2
 802707c:	07da      	lsls	r2, r3, #31
 802707e:	d4e9      	bmi.n	8027054 <__lo0bits+0x26>
 8027080:	3001      	adds	r0, #1
 8027082:	085b      	lsrs	r3, r3, #1
 8027084:	d1e6      	bne.n	8027054 <__lo0bits+0x26>
 8027086:	2020      	movs	r0, #32
 8027088:	e7e2      	b.n	8027050 <__lo0bits+0x22>
	...

0802708c <__i2b>:
 802708c:	b510      	push	{r4, lr}
 802708e:	000c      	movs	r4, r1
 8027090:	2101      	movs	r1, #1
 8027092:	f7ff feb3 	bl	8026dfc <_Balloc>
 8027096:	2800      	cmp	r0, #0
 8027098:	d107      	bne.n	80270aa <__i2b+0x1e>
 802709a:	2146      	movs	r1, #70	@ 0x46
 802709c:	4c05      	ldr	r4, [pc, #20]	@ (80270b4 <__i2b+0x28>)
 802709e:	0002      	movs	r2, r0
 80270a0:	4b05      	ldr	r3, [pc, #20]	@ (80270b8 <__i2b+0x2c>)
 80270a2:	0020      	movs	r0, r4
 80270a4:	31ff      	adds	r1, #255	@ 0xff
 80270a6:	f000 ff81 	bl	8027fac <__assert_func>
 80270aa:	2301      	movs	r3, #1
 80270ac:	6144      	str	r4, [r0, #20]
 80270ae:	6103      	str	r3, [r0, #16]
 80270b0:	bd10      	pop	{r4, pc}
 80270b2:	46c0      	nop			@ (mov r8, r8)
 80270b4:	0802e0fb 	.word	0x0802e0fb
 80270b8:	0802e08a 	.word	0x0802e08a

080270bc <__multiply>:
 80270bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80270be:	0014      	movs	r4, r2
 80270c0:	690a      	ldr	r2, [r1, #16]
 80270c2:	6923      	ldr	r3, [r4, #16]
 80270c4:	000d      	movs	r5, r1
 80270c6:	b089      	sub	sp, #36	@ 0x24
 80270c8:	429a      	cmp	r2, r3
 80270ca:	db02      	blt.n	80270d2 <__multiply+0x16>
 80270cc:	0023      	movs	r3, r4
 80270ce:	000c      	movs	r4, r1
 80270d0:	001d      	movs	r5, r3
 80270d2:	6927      	ldr	r7, [r4, #16]
 80270d4:	692e      	ldr	r6, [r5, #16]
 80270d6:	6861      	ldr	r1, [r4, #4]
 80270d8:	19bb      	adds	r3, r7, r6
 80270da:	9300      	str	r3, [sp, #0]
 80270dc:	68a3      	ldr	r3, [r4, #8]
 80270de:	19ba      	adds	r2, r7, r6
 80270e0:	4293      	cmp	r3, r2
 80270e2:	da00      	bge.n	80270e6 <__multiply+0x2a>
 80270e4:	3101      	adds	r1, #1
 80270e6:	f7ff fe89 	bl	8026dfc <_Balloc>
 80270ea:	4684      	mov	ip, r0
 80270ec:	2800      	cmp	r0, #0
 80270ee:	d106      	bne.n	80270fe <__multiply+0x42>
 80270f0:	21b1      	movs	r1, #177	@ 0xb1
 80270f2:	4662      	mov	r2, ip
 80270f4:	4b44      	ldr	r3, [pc, #272]	@ (8027208 <__multiply+0x14c>)
 80270f6:	4845      	ldr	r0, [pc, #276]	@ (802720c <__multiply+0x150>)
 80270f8:	0049      	lsls	r1, r1, #1
 80270fa:	f000 ff57 	bl	8027fac <__assert_func>
 80270fe:	0002      	movs	r2, r0
 8027100:	19bb      	adds	r3, r7, r6
 8027102:	3214      	adds	r2, #20
 8027104:	009b      	lsls	r3, r3, #2
 8027106:	18d3      	adds	r3, r2, r3
 8027108:	9301      	str	r3, [sp, #4]
 802710a:	2100      	movs	r1, #0
 802710c:	0013      	movs	r3, r2
 802710e:	9801      	ldr	r0, [sp, #4]
 8027110:	4283      	cmp	r3, r0
 8027112:	d328      	bcc.n	8027166 <__multiply+0xaa>
 8027114:	0023      	movs	r3, r4
 8027116:	00bf      	lsls	r7, r7, #2
 8027118:	3314      	adds	r3, #20
 802711a:	9304      	str	r3, [sp, #16]
 802711c:	3514      	adds	r5, #20
 802711e:	19db      	adds	r3, r3, r7
 8027120:	00b6      	lsls	r6, r6, #2
 8027122:	9302      	str	r3, [sp, #8]
 8027124:	19ab      	adds	r3, r5, r6
 8027126:	9307      	str	r3, [sp, #28]
 8027128:	2304      	movs	r3, #4
 802712a:	9305      	str	r3, [sp, #20]
 802712c:	0023      	movs	r3, r4
 802712e:	9902      	ldr	r1, [sp, #8]
 8027130:	3315      	adds	r3, #21
 8027132:	4299      	cmp	r1, r3
 8027134:	d305      	bcc.n	8027142 <__multiply+0x86>
 8027136:	1b0c      	subs	r4, r1, r4
 8027138:	3c15      	subs	r4, #21
 802713a:	08a4      	lsrs	r4, r4, #2
 802713c:	3401      	adds	r4, #1
 802713e:	00a3      	lsls	r3, r4, #2
 8027140:	9305      	str	r3, [sp, #20]
 8027142:	9b07      	ldr	r3, [sp, #28]
 8027144:	429d      	cmp	r5, r3
 8027146:	d310      	bcc.n	802716a <__multiply+0xae>
 8027148:	9b00      	ldr	r3, [sp, #0]
 802714a:	2b00      	cmp	r3, #0
 802714c:	dd05      	ble.n	802715a <__multiply+0x9e>
 802714e:	9b01      	ldr	r3, [sp, #4]
 8027150:	3b04      	subs	r3, #4
 8027152:	9301      	str	r3, [sp, #4]
 8027154:	681b      	ldr	r3, [r3, #0]
 8027156:	2b00      	cmp	r3, #0
 8027158:	d052      	beq.n	8027200 <__multiply+0x144>
 802715a:	4663      	mov	r3, ip
 802715c:	4660      	mov	r0, ip
 802715e:	9a00      	ldr	r2, [sp, #0]
 8027160:	611a      	str	r2, [r3, #16]
 8027162:	b009      	add	sp, #36	@ 0x24
 8027164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027166:	c302      	stmia	r3!, {r1}
 8027168:	e7d1      	b.n	802710e <__multiply+0x52>
 802716a:	682c      	ldr	r4, [r5, #0]
 802716c:	b2a4      	uxth	r4, r4
 802716e:	2c00      	cmp	r4, #0
 8027170:	d01f      	beq.n	80271b2 <__multiply+0xf6>
 8027172:	2300      	movs	r3, #0
 8027174:	0017      	movs	r7, r2
 8027176:	9e04      	ldr	r6, [sp, #16]
 8027178:	9303      	str	r3, [sp, #12]
 802717a:	ce08      	ldmia	r6!, {r3}
 802717c:	6839      	ldr	r1, [r7, #0]
 802717e:	9306      	str	r3, [sp, #24]
 8027180:	466b      	mov	r3, sp
 8027182:	8b1b      	ldrh	r3, [r3, #24]
 8027184:	b288      	uxth	r0, r1
 8027186:	4363      	muls	r3, r4
 8027188:	181b      	adds	r3, r3, r0
 802718a:	9803      	ldr	r0, [sp, #12]
 802718c:	0c09      	lsrs	r1, r1, #16
 802718e:	181b      	adds	r3, r3, r0
 8027190:	9806      	ldr	r0, [sp, #24]
 8027192:	0c00      	lsrs	r0, r0, #16
 8027194:	4360      	muls	r0, r4
 8027196:	1840      	adds	r0, r0, r1
 8027198:	0c19      	lsrs	r1, r3, #16
 802719a:	1841      	adds	r1, r0, r1
 802719c:	0c08      	lsrs	r0, r1, #16
 802719e:	b29b      	uxth	r3, r3
 80271a0:	0409      	lsls	r1, r1, #16
 80271a2:	4319      	orrs	r1, r3
 80271a4:	9b02      	ldr	r3, [sp, #8]
 80271a6:	9003      	str	r0, [sp, #12]
 80271a8:	c702      	stmia	r7!, {r1}
 80271aa:	42b3      	cmp	r3, r6
 80271ac:	d8e5      	bhi.n	802717a <__multiply+0xbe>
 80271ae:	9b05      	ldr	r3, [sp, #20]
 80271b0:	50d0      	str	r0, [r2, r3]
 80271b2:	682c      	ldr	r4, [r5, #0]
 80271b4:	0c24      	lsrs	r4, r4, #16
 80271b6:	d020      	beq.n	80271fa <__multiply+0x13e>
 80271b8:	2100      	movs	r1, #0
 80271ba:	0010      	movs	r0, r2
 80271bc:	6813      	ldr	r3, [r2, #0]
 80271be:	9e04      	ldr	r6, [sp, #16]
 80271c0:	9103      	str	r1, [sp, #12]
 80271c2:	6831      	ldr	r1, [r6, #0]
 80271c4:	6807      	ldr	r7, [r0, #0]
 80271c6:	b289      	uxth	r1, r1
 80271c8:	4361      	muls	r1, r4
 80271ca:	0c3f      	lsrs	r7, r7, #16
 80271cc:	19c9      	adds	r1, r1, r7
 80271ce:	9f03      	ldr	r7, [sp, #12]
 80271d0:	b29b      	uxth	r3, r3
 80271d2:	19c9      	adds	r1, r1, r7
 80271d4:	040f      	lsls	r7, r1, #16
 80271d6:	431f      	orrs	r7, r3
 80271d8:	6007      	str	r7, [r0, #0]
 80271da:	ce80      	ldmia	r6!, {r7}
 80271dc:	6843      	ldr	r3, [r0, #4]
 80271de:	0c3f      	lsrs	r7, r7, #16
 80271e0:	4367      	muls	r7, r4
 80271e2:	b29b      	uxth	r3, r3
 80271e4:	0c09      	lsrs	r1, r1, #16
 80271e6:	18fb      	adds	r3, r7, r3
 80271e8:	185b      	adds	r3, r3, r1
 80271ea:	0c19      	lsrs	r1, r3, #16
 80271ec:	9103      	str	r1, [sp, #12]
 80271ee:	9902      	ldr	r1, [sp, #8]
 80271f0:	3004      	adds	r0, #4
 80271f2:	42b1      	cmp	r1, r6
 80271f4:	d8e5      	bhi.n	80271c2 <__multiply+0x106>
 80271f6:	9905      	ldr	r1, [sp, #20]
 80271f8:	5053      	str	r3, [r2, r1]
 80271fa:	3504      	adds	r5, #4
 80271fc:	3204      	adds	r2, #4
 80271fe:	e7a0      	b.n	8027142 <__multiply+0x86>
 8027200:	9b00      	ldr	r3, [sp, #0]
 8027202:	3b01      	subs	r3, #1
 8027204:	9300      	str	r3, [sp, #0]
 8027206:	e79f      	b.n	8027148 <__multiply+0x8c>
 8027208:	0802e08a 	.word	0x0802e08a
 802720c:	0802e0fb 	.word	0x0802e0fb

08027210 <__pow5mult>:
 8027210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027212:	2303      	movs	r3, #3
 8027214:	0015      	movs	r5, r2
 8027216:	0007      	movs	r7, r0
 8027218:	000e      	movs	r6, r1
 802721a:	401a      	ands	r2, r3
 802721c:	421d      	tst	r5, r3
 802721e:	d008      	beq.n	8027232 <__pow5mult+0x22>
 8027220:	4925      	ldr	r1, [pc, #148]	@ (80272b8 <__pow5mult+0xa8>)
 8027222:	3a01      	subs	r2, #1
 8027224:	0092      	lsls	r2, r2, #2
 8027226:	5852      	ldr	r2, [r2, r1]
 8027228:	2300      	movs	r3, #0
 802722a:	0031      	movs	r1, r6
 802722c:	f7ff fe4e 	bl	8026ecc <__multadd>
 8027230:	0006      	movs	r6, r0
 8027232:	10ad      	asrs	r5, r5, #2
 8027234:	d03d      	beq.n	80272b2 <__pow5mult+0xa2>
 8027236:	69fc      	ldr	r4, [r7, #28]
 8027238:	2c00      	cmp	r4, #0
 802723a:	d10f      	bne.n	802725c <__pow5mult+0x4c>
 802723c:	2010      	movs	r0, #16
 802723e:	f7ff fd0f 	bl	8026c60 <malloc>
 8027242:	1e02      	subs	r2, r0, #0
 8027244:	61f8      	str	r0, [r7, #28]
 8027246:	d105      	bne.n	8027254 <__pow5mult+0x44>
 8027248:	21b4      	movs	r1, #180	@ 0xb4
 802724a:	4b1c      	ldr	r3, [pc, #112]	@ (80272bc <__pow5mult+0xac>)
 802724c:	481c      	ldr	r0, [pc, #112]	@ (80272c0 <__pow5mult+0xb0>)
 802724e:	31ff      	adds	r1, #255	@ 0xff
 8027250:	f000 feac 	bl	8027fac <__assert_func>
 8027254:	6044      	str	r4, [r0, #4]
 8027256:	6084      	str	r4, [r0, #8]
 8027258:	6004      	str	r4, [r0, #0]
 802725a:	60c4      	str	r4, [r0, #12]
 802725c:	69fb      	ldr	r3, [r7, #28]
 802725e:	689c      	ldr	r4, [r3, #8]
 8027260:	9301      	str	r3, [sp, #4]
 8027262:	2c00      	cmp	r4, #0
 8027264:	d108      	bne.n	8027278 <__pow5mult+0x68>
 8027266:	0038      	movs	r0, r7
 8027268:	4916      	ldr	r1, [pc, #88]	@ (80272c4 <__pow5mult+0xb4>)
 802726a:	f7ff ff0f 	bl	802708c <__i2b>
 802726e:	9b01      	ldr	r3, [sp, #4]
 8027270:	0004      	movs	r4, r0
 8027272:	6098      	str	r0, [r3, #8]
 8027274:	2300      	movs	r3, #0
 8027276:	6003      	str	r3, [r0, #0]
 8027278:	2301      	movs	r3, #1
 802727a:	421d      	tst	r5, r3
 802727c:	d00a      	beq.n	8027294 <__pow5mult+0x84>
 802727e:	0031      	movs	r1, r6
 8027280:	0022      	movs	r2, r4
 8027282:	0038      	movs	r0, r7
 8027284:	f7ff ff1a 	bl	80270bc <__multiply>
 8027288:	0031      	movs	r1, r6
 802728a:	9001      	str	r0, [sp, #4]
 802728c:	0038      	movs	r0, r7
 802728e:	f7ff fdf9 	bl	8026e84 <_Bfree>
 8027292:	9e01      	ldr	r6, [sp, #4]
 8027294:	106d      	asrs	r5, r5, #1
 8027296:	d00c      	beq.n	80272b2 <__pow5mult+0xa2>
 8027298:	6820      	ldr	r0, [r4, #0]
 802729a:	2800      	cmp	r0, #0
 802729c:	d107      	bne.n	80272ae <__pow5mult+0x9e>
 802729e:	0022      	movs	r2, r4
 80272a0:	0021      	movs	r1, r4
 80272a2:	0038      	movs	r0, r7
 80272a4:	f7ff ff0a 	bl	80270bc <__multiply>
 80272a8:	2300      	movs	r3, #0
 80272aa:	6020      	str	r0, [r4, #0]
 80272ac:	6003      	str	r3, [r0, #0]
 80272ae:	0004      	movs	r4, r0
 80272b0:	e7e2      	b.n	8027278 <__pow5mult+0x68>
 80272b2:	0030      	movs	r0, r6
 80272b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80272b6:	46c0      	nop			@ (mov r8, r8)
 80272b8:	0802e2fc 	.word	0x0802e2fc
 80272bc:	0802e01b 	.word	0x0802e01b
 80272c0:	0802e0fb 	.word	0x0802e0fb
 80272c4:	00000271 	.word	0x00000271

080272c8 <__lshift>:
 80272c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80272ca:	000c      	movs	r4, r1
 80272cc:	0016      	movs	r6, r2
 80272ce:	6923      	ldr	r3, [r4, #16]
 80272d0:	1157      	asrs	r7, r2, #5
 80272d2:	b085      	sub	sp, #20
 80272d4:	18fb      	adds	r3, r7, r3
 80272d6:	9301      	str	r3, [sp, #4]
 80272d8:	3301      	adds	r3, #1
 80272da:	9300      	str	r3, [sp, #0]
 80272dc:	6849      	ldr	r1, [r1, #4]
 80272de:	68a3      	ldr	r3, [r4, #8]
 80272e0:	9002      	str	r0, [sp, #8]
 80272e2:	9a00      	ldr	r2, [sp, #0]
 80272e4:	4293      	cmp	r3, r2
 80272e6:	db10      	blt.n	802730a <__lshift+0x42>
 80272e8:	9802      	ldr	r0, [sp, #8]
 80272ea:	f7ff fd87 	bl	8026dfc <_Balloc>
 80272ee:	2300      	movs	r3, #0
 80272f0:	0001      	movs	r1, r0
 80272f2:	0005      	movs	r5, r0
 80272f4:	001a      	movs	r2, r3
 80272f6:	3114      	adds	r1, #20
 80272f8:	4298      	cmp	r0, r3
 80272fa:	d10c      	bne.n	8027316 <__lshift+0x4e>
 80272fc:	21ef      	movs	r1, #239	@ 0xef
 80272fe:	002a      	movs	r2, r5
 8027300:	4b25      	ldr	r3, [pc, #148]	@ (8027398 <__lshift+0xd0>)
 8027302:	4826      	ldr	r0, [pc, #152]	@ (802739c <__lshift+0xd4>)
 8027304:	0049      	lsls	r1, r1, #1
 8027306:	f000 fe51 	bl	8027fac <__assert_func>
 802730a:	3101      	adds	r1, #1
 802730c:	005b      	lsls	r3, r3, #1
 802730e:	e7e8      	b.n	80272e2 <__lshift+0x1a>
 8027310:	0098      	lsls	r0, r3, #2
 8027312:	500a      	str	r2, [r1, r0]
 8027314:	3301      	adds	r3, #1
 8027316:	42bb      	cmp	r3, r7
 8027318:	dbfa      	blt.n	8027310 <__lshift+0x48>
 802731a:	43fb      	mvns	r3, r7
 802731c:	17db      	asrs	r3, r3, #31
 802731e:	401f      	ands	r7, r3
 8027320:	00bf      	lsls	r7, r7, #2
 8027322:	0023      	movs	r3, r4
 8027324:	201f      	movs	r0, #31
 8027326:	19c9      	adds	r1, r1, r7
 8027328:	0037      	movs	r7, r6
 802732a:	6922      	ldr	r2, [r4, #16]
 802732c:	3314      	adds	r3, #20
 802732e:	0092      	lsls	r2, r2, #2
 8027330:	189a      	adds	r2, r3, r2
 8027332:	4007      	ands	r7, r0
 8027334:	4206      	tst	r6, r0
 8027336:	d029      	beq.n	802738c <__lshift+0xc4>
 8027338:	3001      	adds	r0, #1
 802733a:	1bc0      	subs	r0, r0, r7
 802733c:	9003      	str	r0, [sp, #12]
 802733e:	468c      	mov	ip, r1
 8027340:	2000      	movs	r0, #0
 8027342:	681e      	ldr	r6, [r3, #0]
 8027344:	40be      	lsls	r6, r7
 8027346:	4306      	orrs	r6, r0
 8027348:	4660      	mov	r0, ip
 802734a:	c040      	stmia	r0!, {r6}
 802734c:	4684      	mov	ip, r0
 802734e:	9e03      	ldr	r6, [sp, #12]
 8027350:	cb01      	ldmia	r3!, {r0}
 8027352:	40f0      	lsrs	r0, r6
 8027354:	429a      	cmp	r2, r3
 8027356:	d8f4      	bhi.n	8027342 <__lshift+0x7a>
 8027358:	0026      	movs	r6, r4
 802735a:	3615      	adds	r6, #21
 802735c:	2304      	movs	r3, #4
 802735e:	42b2      	cmp	r2, r6
 8027360:	d304      	bcc.n	802736c <__lshift+0xa4>
 8027362:	1b13      	subs	r3, r2, r4
 8027364:	3b15      	subs	r3, #21
 8027366:	089b      	lsrs	r3, r3, #2
 8027368:	3301      	adds	r3, #1
 802736a:	009b      	lsls	r3, r3, #2
 802736c:	50c8      	str	r0, [r1, r3]
 802736e:	2800      	cmp	r0, #0
 8027370:	d002      	beq.n	8027378 <__lshift+0xb0>
 8027372:	9b01      	ldr	r3, [sp, #4]
 8027374:	3302      	adds	r3, #2
 8027376:	9300      	str	r3, [sp, #0]
 8027378:	9b00      	ldr	r3, [sp, #0]
 802737a:	9802      	ldr	r0, [sp, #8]
 802737c:	3b01      	subs	r3, #1
 802737e:	0021      	movs	r1, r4
 8027380:	612b      	str	r3, [r5, #16]
 8027382:	f7ff fd7f 	bl	8026e84 <_Bfree>
 8027386:	0028      	movs	r0, r5
 8027388:	b005      	add	sp, #20
 802738a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802738c:	cb01      	ldmia	r3!, {r0}
 802738e:	c101      	stmia	r1!, {r0}
 8027390:	429a      	cmp	r2, r3
 8027392:	d8fb      	bhi.n	802738c <__lshift+0xc4>
 8027394:	e7f0      	b.n	8027378 <__lshift+0xb0>
 8027396:	46c0      	nop			@ (mov r8, r8)
 8027398:	0802e08a 	.word	0x0802e08a
 802739c:	0802e0fb 	.word	0x0802e0fb

080273a0 <__mcmp>:
 80273a0:	b530      	push	{r4, r5, lr}
 80273a2:	690b      	ldr	r3, [r1, #16]
 80273a4:	6904      	ldr	r4, [r0, #16]
 80273a6:	0002      	movs	r2, r0
 80273a8:	1ae0      	subs	r0, r4, r3
 80273aa:	429c      	cmp	r4, r3
 80273ac:	d10f      	bne.n	80273ce <__mcmp+0x2e>
 80273ae:	3214      	adds	r2, #20
 80273b0:	009b      	lsls	r3, r3, #2
 80273b2:	3114      	adds	r1, #20
 80273b4:	0014      	movs	r4, r2
 80273b6:	18c9      	adds	r1, r1, r3
 80273b8:	18d2      	adds	r2, r2, r3
 80273ba:	3a04      	subs	r2, #4
 80273bc:	3904      	subs	r1, #4
 80273be:	6815      	ldr	r5, [r2, #0]
 80273c0:	680b      	ldr	r3, [r1, #0]
 80273c2:	429d      	cmp	r5, r3
 80273c4:	d004      	beq.n	80273d0 <__mcmp+0x30>
 80273c6:	2001      	movs	r0, #1
 80273c8:	429d      	cmp	r5, r3
 80273ca:	d200      	bcs.n	80273ce <__mcmp+0x2e>
 80273cc:	3802      	subs	r0, #2
 80273ce:	bd30      	pop	{r4, r5, pc}
 80273d0:	4294      	cmp	r4, r2
 80273d2:	d3f2      	bcc.n	80273ba <__mcmp+0x1a>
 80273d4:	e7fb      	b.n	80273ce <__mcmp+0x2e>
	...

080273d8 <__mdiff>:
 80273d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80273da:	000c      	movs	r4, r1
 80273dc:	b087      	sub	sp, #28
 80273de:	9000      	str	r0, [sp, #0]
 80273e0:	0011      	movs	r1, r2
 80273e2:	0020      	movs	r0, r4
 80273e4:	0017      	movs	r7, r2
 80273e6:	f7ff ffdb 	bl	80273a0 <__mcmp>
 80273ea:	1e05      	subs	r5, r0, #0
 80273ec:	d110      	bne.n	8027410 <__mdiff+0x38>
 80273ee:	0001      	movs	r1, r0
 80273f0:	9800      	ldr	r0, [sp, #0]
 80273f2:	f7ff fd03 	bl	8026dfc <_Balloc>
 80273f6:	1e02      	subs	r2, r0, #0
 80273f8:	d104      	bne.n	8027404 <__mdiff+0x2c>
 80273fa:	4b40      	ldr	r3, [pc, #256]	@ (80274fc <__mdiff+0x124>)
 80273fc:	4840      	ldr	r0, [pc, #256]	@ (8027500 <__mdiff+0x128>)
 80273fe:	4941      	ldr	r1, [pc, #260]	@ (8027504 <__mdiff+0x12c>)
 8027400:	f000 fdd4 	bl	8027fac <__assert_func>
 8027404:	2301      	movs	r3, #1
 8027406:	6145      	str	r5, [r0, #20]
 8027408:	6103      	str	r3, [r0, #16]
 802740a:	0010      	movs	r0, r2
 802740c:	b007      	add	sp, #28
 802740e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027410:	2600      	movs	r6, #0
 8027412:	42b0      	cmp	r0, r6
 8027414:	da03      	bge.n	802741e <__mdiff+0x46>
 8027416:	0023      	movs	r3, r4
 8027418:	003c      	movs	r4, r7
 802741a:	001f      	movs	r7, r3
 802741c:	3601      	adds	r6, #1
 802741e:	6861      	ldr	r1, [r4, #4]
 8027420:	9800      	ldr	r0, [sp, #0]
 8027422:	f7ff fceb 	bl	8026dfc <_Balloc>
 8027426:	1e02      	subs	r2, r0, #0
 8027428:	d103      	bne.n	8027432 <__mdiff+0x5a>
 802742a:	4b34      	ldr	r3, [pc, #208]	@ (80274fc <__mdiff+0x124>)
 802742c:	4834      	ldr	r0, [pc, #208]	@ (8027500 <__mdiff+0x128>)
 802742e:	4936      	ldr	r1, [pc, #216]	@ (8027508 <__mdiff+0x130>)
 8027430:	e7e6      	b.n	8027400 <__mdiff+0x28>
 8027432:	6923      	ldr	r3, [r4, #16]
 8027434:	3414      	adds	r4, #20
 8027436:	9300      	str	r3, [sp, #0]
 8027438:	009b      	lsls	r3, r3, #2
 802743a:	18e3      	adds	r3, r4, r3
 802743c:	0021      	movs	r1, r4
 802743e:	9401      	str	r4, [sp, #4]
 8027440:	003c      	movs	r4, r7
 8027442:	9302      	str	r3, [sp, #8]
 8027444:	693b      	ldr	r3, [r7, #16]
 8027446:	3414      	adds	r4, #20
 8027448:	009b      	lsls	r3, r3, #2
 802744a:	18e3      	adds	r3, r4, r3
 802744c:	9303      	str	r3, [sp, #12]
 802744e:	0003      	movs	r3, r0
 8027450:	60c6      	str	r6, [r0, #12]
 8027452:	468c      	mov	ip, r1
 8027454:	2000      	movs	r0, #0
 8027456:	3314      	adds	r3, #20
 8027458:	9304      	str	r3, [sp, #16]
 802745a:	9305      	str	r3, [sp, #20]
 802745c:	4663      	mov	r3, ip
 802745e:	cb20      	ldmia	r3!, {r5}
 8027460:	b2a9      	uxth	r1, r5
 8027462:	000e      	movs	r6, r1
 8027464:	469c      	mov	ip, r3
 8027466:	cc08      	ldmia	r4!, {r3}
 8027468:	0c2d      	lsrs	r5, r5, #16
 802746a:	b299      	uxth	r1, r3
 802746c:	1a71      	subs	r1, r6, r1
 802746e:	1809      	adds	r1, r1, r0
 8027470:	0c1b      	lsrs	r3, r3, #16
 8027472:	1408      	asrs	r0, r1, #16
 8027474:	1aeb      	subs	r3, r5, r3
 8027476:	181b      	adds	r3, r3, r0
 8027478:	1418      	asrs	r0, r3, #16
 802747a:	b289      	uxth	r1, r1
 802747c:	041b      	lsls	r3, r3, #16
 802747e:	4319      	orrs	r1, r3
 8027480:	9b05      	ldr	r3, [sp, #20]
 8027482:	c302      	stmia	r3!, {r1}
 8027484:	9305      	str	r3, [sp, #20]
 8027486:	9b03      	ldr	r3, [sp, #12]
 8027488:	42a3      	cmp	r3, r4
 802748a:	d8e7      	bhi.n	802745c <__mdiff+0x84>
 802748c:	0039      	movs	r1, r7
 802748e:	9c03      	ldr	r4, [sp, #12]
 8027490:	3115      	adds	r1, #21
 8027492:	2304      	movs	r3, #4
 8027494:	428c      	cmp	r4, r1
 8027496:	d304      	bcc.n	80274a2 <__mdiff+0xca>
 8027498:	1be3      	subs	r3, r4, r7
 802749a:	3b15      	subs	r3, #21
 802749c:	089b      	lsrs	r3, r3, #2
 802749e:	3301      	adds	r3, #1
 80274a0:	009b      	lsls	r3, r3, #2
 80274a2:	9901      	ldr	r1, [sp, #4]
 80274a4:	18cd      	adds	r5, r1, r3
 80274a6:	9904      	ldr	r1, [sp, #16]
 80274a8:	002e      	movs	r6, r5
 80274aa:	18cb      	adds	r3, r1, r3
 80274ac:	001f      	movs	r7, r3
 80274ae:	9902      	ldr	r1, [sp, #8]
 80274b0:	428e      	cmp	r6, r1
 80274b2:	d311      	bcc.n	80274d8 <__mdiff+0x100>
 80274b4:	9c02      	ldr	r4, [sp, #8]
 80274b6:	1ee9      	subs	r1, r5, #3
 80274b8:	2000      	movs	r0, #0
 80274ba:	428c      	cmp	r4, r1
 80274bc:	d304      	bcc.n	80274c8 <__mdiff+0xf0>
 80274be:	0021      	movs	r1, r4
 80274c0:	3103      	adds	r1, #3
 80274c2:	1b49      	subs	r1, r1, r5
 80274c4:	0889      	lsrs	r1, r1, #2
 80274c6:	0088      	lsls	r0, r1, #2
 80274c8:	181b      	adds	r3, r3, r0
 80274ca:	3b04      	subs	r3, #4
 80274cc:	6819      	ldr	r1, [r3, #0]
 80274ce:	2900      	cmp	r1, #0
 80274d0:	d010      	beq.n	80274f4 <__mdiff+0x11c>
 80274d2:	9b00      	ldr	r3, [sp, #0]
 80274d4:	6113      	str	r3, [r2, #16]
 80274d6:	e798      	b.n	802740a <__mdiff+0x32>
 80274d8:	4684      	mov	ip, r0
 80274da:	ce02      	ldmia	r6!, {r1}
 80274dc:	b288      	uxth	r0, r1
 80274de:	4460      	add	r0, ip
 80274e0:	1400      	asrs	r0, r0, #16
 80274e2:	0c0c      	lsrs	r4, r1, #16
 80274e4:	1904      	adds	r4, r0, r4
 80274e6:	4461      	add	r1, ip
 80274e8:	1420      	asrs	r0, r4, #16
 80274ea:	b289      	uxth	r1, r1
 80274ec:	0424      	lsls	r4, r4, #16
 80274ee:	4321      	orrs	r1, r4
 80274f0:	c702      	stmia	r7!, {r1}
 80274f2:	e7dc      	b.n	80274ae <__mdiff+0xd6>
 80274f4:	9900      	ldr	r1, [sp, #0]
 80274f6:	3901      	subs	r1, #1
 80274f8:	9100      	str	r1, [sp, #0]
 80274fa:	e7e6      	b.n	80274ca <__mdiff+0xf2>
 80274fc:	0802e08a 	.word	0x0802e08a
 8027500:	0802e0fb 	.word	0x0802e0fb
 8027504:	00000237 	.word	0x00000237
 8027508:	00000245 	.word	0x00000245

0802750c <__ulp>:
 802750c:	b510      	push	{r4, lr}
 802750e:	2400      	movs	r4, #0
 8027510:	4b0c      	ldr	r3, [pc, #48]	@ (8027544 <__ulp+0x38>)
 8027512:	4a0d      	ldr	r2, [pc, #52]	@ (8027548 <__ulp+0x3c>)
 8027514:	400b      	ands	r3, r1
 8027516:	189b      	adds	r3, r3, r2
 8027518:	42a3      	cmp	r3, r4
 802751a:	dc06      	bgt.n	802752a <__ulp+0x1e>
 802751c:	425b      	negs	r3, r3
 802751e:	151a      	asrs	r2, r3, #20
 8027520:	2a13      	cmp	r2, #19
 8027522:	dc05      	bgt.n	8027530 <__ulp+0x24>
 8027524:	2380      	movs	r3, #128	@ 0x80
 8027526:	031b      	lsls	r3, r3, #12
 8027528:	4113      	asrs	r3, r2
 802752a:	0019      	movs	r1, r3
 802752c:	0020      	movs	r0, r4
 802752e:	bd10      	pop	{r4, pc}
 8027530:	3a14      	subs	r2, #20
 8027532:	2401      	movs	r4, #1
 8027534:	2a1e      	cmp	r2, #30
 8027536:	dc02      	bgt.n	802753e <__ulp+0x32>
 8027538:	2480      	movs	r4, #128	@ 0x80
 802753a:	0624      	lsls	r4, r4, #24
 802753c:	40d4      	lsrs	r4, r2
 802753e:	2300      	movs	r3, #0
 8027540:	e7f3      	b.n	802752a <__ulp+0x1e>
 8027542:	46c0      	nop			@ (mov r8, r8)
 8027544:	7ff00000 	.word	0x7ff00000
 8027548:	fcc00000 	.word	0xfcc00000

0802754c <__b2d>:
 802754c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802754e:	0006      	movs	r6, r0
 8027550:	6903      	ldr	r3, [r0, #16]
 8027552:	3614      	adds	r6, #20
 8027554:	009b      	lsls	r3, r3, #2
 8027556:	18f3      	adds	r3, r6, r3
 8027558:	1f1d      	subs	r5, r3, #4
 802755a:	682c      	ldr	r4, [r5, #0]
 802755c:	000f      	movs	r7, r1
 802755e:	0020      	movs	r0, r4
 8027560:	9301      	str	r3, [sp, #4]
 8027562:	f7ff fd43 	bl	8026fec <__hi0bits>
 8027566:	2220      	movs	r2, #32
 8027568:	1a12      	subs	r2, r2, r0
 802756a:	603a      	str	r2, [r7, #0]
 802756c:	0003      	movs	r3, r0
 802756e:	4a1c      	ldr	r2, [pc, #112]	@ (80275e0 <__b2d+0x94>)
 8027570:	280a      	cmp	r0, #10
 8027572:	dc15      	bgt.n	80275a0 <__b2d+0x54>
 8027574:	210b      	movs	r1, #11
 8027576:	0027      	movs	r7, r4
 8027578:	1a09      	subs	r1, r1, r0
 802757a:	40cf      	lsrs	r7, r1
 802757c:	433a      	orrs	r2, r7
 802757e:	468c      	mov	ip, r1
 8027580:	0011      	movs	r1, r2
 8027582:	2200      	movs	r2, #0
 8027584:	42ae      	cmp	r6, r5
 8027586:	d202      	bcs.n	802758e <__b2d+0x42>
 8027588:	9a01      	ldr	r2, [sp, #4]
 802758a:	3a08      	subs	r2, #8
 802758c:	6812      	ldr	r2, [r2, #0]
 802758e:	3315      	adds	r3, #21
 8027590:	409c      	lsls	r4, r3
 8027592:	4663      	mov	r3, ip
 8027594:	0027      	movs	r7, r4
 8027596:	40da      	lsrs	r2, r3
 8027598:	4317      	orrs	r7, r2
 802759a:	0038      	movs	r0, r7
 802759c:	b003      	add	sp, #12
 802759e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80275a0:	2700      	movs	r7, #0
 80275a2:	42ae      	cmp	r6, r5
 80275a4:	d202      	bcs.n	80275ac <__b2d+0x60>
 80275a6:	9d01      	ldr	r5, [sp, #4]
 80275a8:	3d08      	subs	r5, #8
 80275aa:	682f      	ldr	r7, [r5, #0]
 80275ac:	210b      	movs	r1, #11
 80275ae:	4249      	negs	r1, r1
 80275b0:	468c      	mov	ip, r1
 80275b2:	449c      	add	ip, r3
 80275b4:	2b0b      	cmp	r3, #11
 80275b6:	d010      	beq.n	80275da <__b2d+0x8e>
 80275b8:	4661      	mov	r1, ip
 80275ba:	2320      	movs	r3, #32
 80275bc:	408c      	lsls	r4, r1
 80275be:	1a5b      	subs	r3, r3, r1
 80275c0:	0039      	movs	r1, r7
 80275c2:	40d9      	lsrs	r1, r3
 80275c4:	430c      	orrs	r4, r1
 80275c6:	4322      	orrs	r2, r4
 80275c8:	0011      	movs	r1, r2
 80275ca:	2200      	movs	r2, #0
 80275cc:	42b5      	cmp	r5, r6
 80275ce:	d901      	bls.n	80275d4 <__b2d+0x88>
 80275d0:	3d04      	subs	r5, #4
 80275d2:	682a      	ldr	r2, [r5, #0]
 80275d4:	4664      	mov	r4, ip
 80275d6:	40a7      	lsls	r7, r4
 80275d8:	e7dd      	b.n	8027596 <__b2d+0x4a>
 80275da:	4322      	orrs	r2, r4
 80275dc:	0011      	movs	r1, r2
 80275de:	e7dc      	b.n	802759a <__b2d+0x4e>
 80275e0:	3ff00000 	.word	0x3ff00000

080275e4 <__d2b>:
 80275e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80275e6:	2101      	movs	r1, #1
 80275e8:	0016      	movs	r6, r2
 80275ea:	001f      	movs	r7, r3
 80275ec:	f7ff fc06 	bl	8026dfc <_Balloc>
 80275f0:	1e04      	subs	r4, r0, #0
 80275f2:	d105      	bne.n	8027600 <__d2b+0x1c>
 80275f4:	0022      	movs	r2, r4
 80275f6:	4b25      	ldr	r3, [pc, #148]	@ (802768c <__d2b+0xa8>)
 80275f8:	4825      	ldr	r0, [pc, #148]	@ (8027690 <__d2b+0xac>)
 80275fa:	4926      	ldr	r1, [pc, #152]	@ (8027694 <__d2b+0xb0>)
 80275fc:	f000 fcd6 	bl	8027fac <__assert_func>
 8027600:	033b      	lsls	r3, r7, #12
 8027602:	007d      	lsls	r5, r7, #1
 8027604:	0b1b      	lsrs	r3, r3, #12
 8027606:	0d6d      	lsrs	r5, r5, #21
 8027608:	d002      	beq.n	8027610 <__d2b+0x2c>
 802760a:	2280      	movs	r2, #128	@ 0x80
 802760c:	0352      	lsls	r2, r2, #13
 802760e:	4313      	orrs	r3, r2
 8027610:	9301      	str	r3, [sp, #4]
 8027612:	2e00      	cmp	r6, #0
 8027614:	d025      	beq.n	8027662 <__d2b+0x7e>
 8027616:	4668      	mov	r0, sp
 8027618:	9600      	str	r6, [sp, #0]
 802761a:	f7ff fd08 	bl	802702e <__lo0bits>
 802761e:	9b01      	ldr	r3, [sp, #4]
 8027620:	9900      	ldr	r1, [sp, #0]
 8027622:	2800      	cmp	r0, #0
 8027624:	d01b      	beq.n	802765e <__d2b+0x7a>
 8027626:	2220      	movs	r2, #32
 8027628:	001e      	movs	r6, r3
 802762a:	1a12      	subs	r2, r2, r0
 802762c:	4096      	lsls	r6, r2
 802762e:	0032      	movs	r2, r6
 8027630:	40c3      	lsrs	r3, r0
 8027632:	430a      	orrs	r2, r1
 8027634:	6162      	str	r2, [r4, #20]
 8027636:	9301      	str	r3, [sp, #4]
 8027638:	9e01      	ldr	r6, [sp, #4]
 802763a:	61a6      	str	r6, [r4, #24]
 802763c:	1e73      	subs	r3, r6, #1
 802763e:	419e      	sbcs	r6, r3
 8027640:	3601      	adds	r6, #1
 8027642:	6126      	str	r6, [r4, #16]
 8027644:	2d00      	cmp	r5, #0
 8027646:	d014      	beq.n	8027672 <__d2b+0x8e>
 8027648:	2635      	movs	r6, #53	@ 0x35
 802764a:	4b13      	ldr	r3, [pc, #76]	@ (8027698 <__d2b+0xb4>)
 802764c:	18ed      	adds	r5, r5, r3
 802764e:	9b08      	ldr	r3, [sp, #32]
 8027650:	182d      	adds	r5, r5, r0
 8027652:	601d      	str	r5, [r3, #0]
 8027654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027656:	1a36      	subs	r6, r6, r0
 8027658:	601e      	str	r6, [r3, #0]
 802765a:	0020      	movs	r0, r4
 802765c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802765e:	6161      	str	r1, [r4, #20]
 8027660:	e7ea      	b.n	8027638 <__d2b+0x54>
 8027662:	a801      	add	r0, sp, #4
 8027664:	f7ff fce3 	bl	802702e <__lo0bits>
 8027668:	9b01      	ldr	r3, [sp, #4]
 802766a:	2601      	movs	r6, #1
 802766c:	6163      	str	r3, [r4, #20]
 802766e:	3020      	adds	r0, #32
 8027670:	e7e7      	b.n	8027642 <__d2b+0x5e>
 8027672:	4b0a      	ldr	r3, [pc, #40]	@ (802769c <__d2b+0xb8>)
 8027674:	18c0      	adds	r0, r0, r3
 8027676:	9b08      	ldr	r3, [sp, #32]
 8027678:	6018      	str	r0, [r3, #0]
 802767a:	4b09      	ldr	r3, [pc, #36]	@ (80276a0 <__d2b+0xbc>)
 802767c:	18f3      	adds	r3, r6, r3
 802767e:	009b      	lsls	r3, r3, #2
 8027680:	18e3      	adds	r3, r4, r3
 8027682:	6958      	ldr	r0, [r3, #20]
 8027684:	f7ff fcb2 	bl	8026fec <__hi0bits>
 8027688:	0176      	lsls	r6, r6, #5
 802768a:	e7e3      	b.n	8027654 <__d2b+0x70>
 802768c:	0802e08a 	.word	0x0802e08a
 8027690:	0802e0fb 	.word	0x0802e0fb
 8027694:	0000030f 	.word	0x0000030f
 8027698:	fffffbcd 	.word	0xfffffbcd
 802769c:	fffffbce 	.word	0xfffffbce
 80276a0:	3fffffff 	.word	0x3fffffff

080276a4 <__ratio>:
 80276a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80276a6:	b087      	sub	sp, #28
 80276a8:	000f      	movs	r7, r1
 80276aa:	a904      	add	r1, sp, #16
 80276ac:	0006      	movs	r6, r0
 80276ae:	f7ff ff4d 	bl	802754c <__b2d>
 80276b2:	9000      	str	r0, [sp, #0]
 80276b4:	9101      	str	r1, [sp, #4]
 80276b6:	9b00      	ldr	r3, [sp, #0]
 80276b8:	9c01      	ldr	r4, [sp, #4]
 80276ba:	0038      	movs	r0, r7
 80276bc:	a905      	add	r1, sp, #20
 80276be:	9302      	str	r3, [sp, #8]
 80276c0:	9403      	str	r4, [sp, #12]
 80276c2:	f7ff ff43 	bl	802754c <__b2d>
 80276c6:	000d      	movs	r5, r1
 80276c8:	0002      	movs	r2, r0
 80276ca:	000b      	movs	r3, r1
 80276cc:	6930      	ldr	r0, [r6, #16]
 80276ce:	6939      	ldr	r1, [r7, #16]
 80276d0:	9e04      	ldr	r6, [sp, #16]
 80276d2:	1a40      	subs	r0, r0, r1
 80276d4:	9905      	ldr	r1, [sp, #20]
 80276d6:	0140      	lsls	r0, r0, #5
 80276d8:	1a71      	subs	r1, r6, r1
 80276da:	1841      	adds	r1, r0, r1
 80276dc:	0508      	lsls	r0, r1, #20
 80276de:	2900      	cmp	r1, #0
 80276e0:	dd08      	ble.n	80276f4 <__ratio+0x50>
 80276e2:	9901      	ldr	r1, [sp, #4]
 80276e4:	1841      	adds	r1, r0, r1
 80276e6:	9103      	str	r1, [sp, #12]
 80276e8:	9802      	ldr	r0, [sp, #8]
 80276ea:	9903      	ldr	r1, [sp, #12]
 80276ec:	f7da fcf8 	bl	80020e0 <__aeabi_ddiv>
 80276f0:	b007      	add	sp, #28
 80276f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80276f4:	1a2b      	subs	r3, r5, r0
 80276f6:	e7f7      	b.n	80276e8 <__ratio+0x44>

080276f8 <__copybits>:
 80276f8:	b570      	push	{r4, r5, r6, lr}
 80276fa:	0014      	movs	r4, r2
 80276fc:	0005      	movs	r5, r0
 80276fe:	3901      	subs	r1, #1
 8027700:	6913      	ldr	r3, [r2, #16]
 8027702:	1149      	asrs	r1, r1, #5
 8027704:	3101      	adds	r1, #1
 8027706:	0089      	lsls	r1, r1, #2
 8027708:	3414      	adds	r4, #20
 802770a:	009b      	lsls	r3, r3, #2
 802770c:	1841      	adds	r1, r0, r1
 802770e:	18e3      	adds	r3, r4, r3
 8027710:	42a3      	cmp	r3, r4
 8027712:	d80d      	bhi.n	8027730 <__copybits+0x38>
 8027714:	0014      	movs	r4, r2
 8027716:	3411      	adds	r4, #17
 8027718:	2500      	movs	r5, #0
 802771a:	42a3      	cmp	r3, r4
 802771c:	d303      	bcc.n	8027726 <__copybits+0x2e>
 802771e:	1a9b      	subs	r3, r3, r2
 8027720:	3b11      	subs	r3, #17
 8027722:	089b      	lsrs	r3, r3, #2
 8027724:	009d      	lsls	r5, r3, #2
 8027726:	2300      	movs	r3, #0
 8027728:	1940      	adds	r0, r0, r5
 802772a:	4281      	cmp	r1, r0
 802772c:	d803      	bhi.n	8027736 <__copybits+0x3e>
 802772e:	bd70      	pop	{r4, r5, r6, pc}
 8027730:	cc40      	ldmia	r4!, {r6}
 8027732:	c540      	stmia	r5!, {r6}
 8027734:	e7ec      	b.n	8027710 <__copybits+0x18>
 8027736:	c008      	stmia	r0!, {r3}
 8027738:	e7f7      	b.n	802772a <__copybits+0x32>

0802773a <__any_on>:
 802773a:	0002      	movs	r2, r0
 802773c:	6900      	ldr	r0, [r0, #16]
 802773e:	b510      	push	{r4, lr}
 8027740:	3214      	adds	r2, #20
 8027742:	114b      	asrs	r3, r1, #5
 8027744:	4298      	cmp	r0, r3
 8027746:	db13      	blt.n	8027770 <__any_on+0x36>
 8027748:	dd0c      	ble.n	8027764 <__any_on+0x2a>
 802774a:	241f      	movs	r4, #31
 802774c:	0008      	movs	r0, r1
 802774e:	4020      	ands	r0, r4
 8027750:	4221      	tst	r1, r4
 8027752:	d007      	beq.n	8027764 <__any_on+0x2a>
 8027754:	0099      	lsls	r1, r3, #2
 8027756:	588c      	ldr	r4, [r1, r2]
 8027758:	0021      	movs	r1, r4
 802775a:	40c1      	lsrs	r1, r0
 802775c:	4081      	lsls	r1, r0
 802775e:	2001      	movs	r0, #1
 8027760:	428c      	cmp	r4, r1
 8027762:	d104      	bne.n	802776e <__any_on+0x34>
 8027764:	009b      	lsls	r3, r3, #2
 8027766:	18d3      	adds	r3, r2, r3
 8027768:	4293      	cmp	r3, r2
 802776a:	d803      	bhi.n	8027774 <__any_on+0x3a>
 802776c:	2000      	movs	r0, #0
 802776e:	bd10      	pop	{r4, pc}
 8027770:	0003      	movs	r3, r0
 8027772:	e7f7      	b.n	8027764 <__any_on+0x2a>
 8027774:	3b04      	subs	r3, #4
 8027776:	6819      	ldr	r1, [r3, #0]
 8027778:	2900      	cmp	r1, #0
 802777a:	d0f5      	beq.n	8027768 <__any_on+0x2e>
 802777c:	2001      	movs	r0, #1
 802777e:	e7f6      	b.n	802776e <__any_on+0x34>

08027780 <__ascii_wctomb>:
 8027780:	0003      	movs	r3, r0
 8027782:	1e08      	subs	r0, r1, #0
 8027784:	d005      	beq.n	8027792 <__ascii_wctomb+0x12>
 8027786:	2aff      	cmp	r2, #255	@ 0xff
 8027788:	d904      	bls.n	8027794 <__ascii_wctomb+0x14>
 802778a:	228a      	movs	r2, #138	@ 0x8a
 802778c:	2001      	movs	r0, #1
 802778e:	601a      	str	r2, [r3, #0]
 8027790:	4240      	negs	r0, r0
 8027792:	4770      	bx	lr
 8027794:	2001      	movs	r0, #1
 8027796:	700a      	strb	r2, [r1, #0]
 8027798:	e7fb      	b.n	8027792 <__ascii_wctomb+0x12>
	...

0802779c <__ssputs_r>:
 802779c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802779e:	688e      	ldr	r6, [r1, #8]
 80277a0:	b085      	sub	sp, #20
 80277a2:	001f      	movs	r7, r3
 80277a4:	000c      	movs	r4, r1
 80277a6:	680b      	ldr	r3, [r1, #0]
 80277a8:	9002      	str	r0, [sp, #8]
 80277aa:	9203      	str	r2, [sp, #12]
 80277ac:	42be      	cmp	r6, r7
 80277ae:	d830      	bhi.n	8027812 <__ssputs_r+0x76>
 80277b0:	210c      	movs	r1, #12
 80277b2:	5e62      	ldrsh	r2, [r4, r1]
 80277b4:	2190      	movs	r1, #144	@ 0x90
 80277b6:	00c9      	lsls	r1, r1, #3
 80277b8:	420a      	tst	r2, r1
 80277ba:	d028      	beq.n	802780e <__ssputs_r+0x72>
 80277bc:	2003      	movs	r0, #3
 80277be:	6921      	ldr	r1, [r4, #16]
 80277c0:	1a5b      	subs	r3, r3, r1
 80277c2:	9301      	str	r3, [sp, #4]
 80277c4:	6963      	ldr	r3, [r4, #20]
 80277c6:	4343      	muls	r3, r0
 80277c8:	9801      	ldr	r0, [sp, #4]
 80277ca:	0fdd      	lsrs	r5, r3, #31
 80277cc:	18ed      	adds	r5, r5, r3
 80277ce:	1c7b      	adds	r3, r7, #1
 80277d0:	181b      	adds	r3, r3, r0
 80277d2:	106d      	asrs	r5, r5, #1
 80277d4:	42ab      	cmp	r3, r5
 80277d6:	d900      	bls.n	80277da <__ssputs_r+0x3e>
 80277d8:	001d      	movs	r5, r3
 80277da:	0552      	lsls	r2, r2, #21
 80277dc:	d528      	bpl.n	8027830 <__ssputs_r+0x94>
 80277de:	0029      	movs	r1, r5
 80277e0:	9802      	ldr	r0, [sp, #8]
 80277e2:	f7ff fa69 	bl	8026cb8 <_malloc_r>
 80277e6:	1e06      	subs	r6, r0, #0
 80277e8:	d02c      	beq.n	8027844 <__ssputs_r+0xa8>
 80277ea:	9a01      	ldr	r2, [sp, #4]
 80277ec:	6921      	ldr	r1, [r4, #16]
 80277ee:	f7fe f80d 	bl	802580c <memcpy>
 80277f2:	89a2      	ldrh	r2, [r4, #12]
 80277f4:	4b18      	ldr	r3, [pc, #96]	@ (8027858 <__ssputs_r+0xbc>)
 80277f6:	401a      	ands	r2, r3
 80277f8:	2380      	movs	r3, #128	@ 0x80
 80277fa:	4313      	orrs	r3, r2
 80277fc:	81a3      	strh	r3, [r4, #12]
 80277fe:	9b01      	ldr	r3, [sp, #4]
 8027800:	6126      	str	r6, [r4, #16]
 8027802:	18f6      	adds	r6, r6, r3
 8027804:	6026      	str	r6, [r4, #0]
 8027806:	003e      	movs	r6, r7
 8027808:	6165      	str	r5, [r4, #20]
 802780a:	1aed      	subs	r5, r5, r3
 802780c:	60a5      	str	r5, [r4, #8]
 802780e:	42be      	cmp	r6, r7
 8027810:	d900      	bls.n	8027814 <__ssputs_r+0x78>
 8027812:	003e      	movs	r6, r7
 8027814:	0032      	movs	r2, r6
 8027816:	9903      	ldr	r1, [sp, #12]
 8027818:	6820      	ldr	r0, [r4, #0]
 802781a:	f000 fb7e 	bl	8027f1a <memmove>
 802781e:	2000      	movs	r0, #0
 8027820:	68a3      	ldr	r3, [r4, #8]
 8027822:	1b9b      	subs	r3, r3, r6
 8027824:	60a3      	str	r3, [r4, #8]
 8027826:	6823      	ldr	r3, [r4, #0]
 8027828:	199b      	adds	r3, r3, r6
 802782a:	6023      	str	r3, [r4, #0]
 802782c:	b005      	add	sp, #20
 802782e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027830:	002a      	movs	r2, r5
 8027832:	9802      	ldr	r0, [sp, #8]
 8027834:	f000 fc05 	bl	8028042 <_realloc_r>
 8027838:	1e06      	subs	r6, r0, #0
 802783a:	d1e0      	bne.n	80277fe <__ssputs_r+0x62>
 802783c:	6921      	ldr	r1, [r4, #16]
 802783e:	9802      	ldr	r0, [sp, #8]
 8027840:	f7fe fe6a 	bl	8026518 <_free_r>
 8027844:	230c      	movs	r3, #12
 8027846:	2001      	movs	r0, #1
 8027848:	9a02      	ldr	r2, [sp, #8]
 802784a:	4240      	negs	r0, r0
 802784c:	6013      	str	r3, [r2, #0]
 802784e:	89a2      	ldrh	r2, [r4, #12]
 8027850:	3334      	adds	r3, #52	@ 0x34
 8027852:	4313      	orrs	r3, r2
 8027854:	81a3      	strh	r3, [r4, #12]
 8027856:	e7e9      	b.n	802782c <__ssputs_r+0x90>
 8027858:	fffffb7f 	.word	0xfffffb7f

0802785c <_svfiprintf_r>:
 802785c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802785e:	b0a1      	sub	sp, #132	@ 0x84
 8027860:	9003      	str	r0, [sp, #12]
 8027862:	001d      	movs	r5, r3
 8027864:	898b      	ldrh	r3, [r1, #12]
 8027866:	000f      	movs	r7, r1
 8027868:	0016      	movs	r6, r2
 802786a:	061b      	lsls	r3, r3, #24
 802786c:	d511      	bpl.n	8027892 <_svfiprintf_r+0x36>
 802786e:	690b      	ldr	r3, [r1, #16]
 8027870:	2b00      	cmp	r3, #0
 8027872:	d10e      	bne.n	8027892 <_svfiprintf_r+0x36>
 8027874:	2140      	movs	r1, #64	@ 0x40
 8027876:	f7ff fa1f 	bl	8026cb8 <_malloc_r>
 802787a:	6038      	str	r0, [r7, #0]
 802787c:	6138      	str	r0, [r7, #16]
 802787e:	2800      	cmp	r0, #0
 8027880:	d105      	bne.n	802788e <_svfiprintf_r+0x32>
 8027882:	230c      	movs	r3, #12
 8027884:	9a03      	ldr	r2, [sp, #12]
 8027886:	6013      	str	r3, [r2, #0]
 8027888:	2001      	movs	r0, #1
 802788a:	4240      	negs	r0, r0
 802788c:	e0cf      	b.n	8027a2e <_svfiprintf_r+0x1d2>
 802788e:	2340      	movs	r3, #64	@ 0x40
 8027890:	617b      	str	r3, [r7, #20]
 8027892:	2300      	movs	r3, #0
 8027894:	ac08      	add	r4, sp, #32
 8027896:	6163      	str	r3, [r4, #20]
 8027898:	3320      	adds	r3, #32
 802789a:	7663      	strb	r3, [r4, #25]
 802789c:	3310      	adds	r3, #16
 802789e:	76a3      	strb	r3, [r4, #26]
 80278a0:	9507      	str	r5, [sp, #28]
 80278a2:	0035      	movs	r5, r6
 80278a4:	782b      	ldrb	r3, [r5, #0]
 80278a6:	2b00      	cmp	r3, #0
 80278a8:	d001      	beq.n	80278ae <_svfiprintf_r+0x52>
 80278aa:	2b25      	cmp	r3, #37	@ 0x25
 80278ac:	d148      	bne.n	8027940 <_svfiprintf_r+0xe4>
 80278ae:	1bab      	subs	r3, r5, r6
 80278b0:	9305      	str	r3, [sp, #20]
 80278b2:	42b5      	cmp	r5, r6
 80278b4:	d00b      	beq.n	80278ce <_svfiprintf_r+0x72>
 80278b6:	0032      	movs	r2, r6
 80278b8:	0039      	movs	r1, r7
 80278ba:	9803      	ldr	r0, [sp, #12]
 80278bc:	f7ff ff6e 	bl	802779c <__ssputs_r>
 80278c0:	3001      	adds	r0, #1
 80278c2:	d100      	bne.n	80278c6 <_svfiprintf_r+0x6a>
 80278c4:	e0ae      	b.n	8027a24 <_svfiprintf_r+0x1c8>
 80278c6:	6963      	ldr	r3, [r4, #20]
 80278c8:	9a05      	ldr	r2, [sp, #20]
 80278ca:	189b      	adds	r3, r3, r2
 80278cc:	6163      	str	r3, [r4, #20]
 80278ce:	782b      	ldrb	r3, [r5, #0]
 80278d0:	2b00      	cmp	r3, #0
 80278d2:	d100      	bne.n	80278d6 <_svfiprintf_r+0x7a>
 80278d4:	e0a6      	b.n	8027a24 <_svfiprintf_r+0x1c8>
 80278d6:	2201      	movs	r2, #1
 80278d8:	2300      	movs	r3, #0
 80278da:	4252      	negs	r2, r2
 80278dc:	6062      	str	r2, [r4, #4]
 80278de:	a904      	add	r1, sp, #16
 80278e0:	3254      	adds	r2, #84	@ 0x54
 80278e2:	1852      	adds	r2, r2, r1
 80278e4:	1c6e      	adds	r6, r5, #1
 80278e6:	6023      	str	r3, [r4, #0]
 80278e8:	60e3      	str	r3, [r4, #12]
 80278ea:	60a3      	str	r3, [r4, #8]
 80278ec:	7013      	strb	r3, [r2, #0]
 80278ee:	65a3      	str	r3, [r4, #88]	@ 0x58
 80278f0:	4b54      	ldr	r3, [pc, #336]	@ (8027a44 <_svfiprintf_r+0x1e8>)
 80278f2:	2205      	movs	r2, #5
 80278f4:	0018      	movs	r0, r3
 80278f6:	7831      	ldrb	r1, [r6, #0]
 80278f8:	9305      	str	r3, [sp, #20]
 80278fa:	f7fd ff7c 	bl	80257f6 <memchr>
 80278fe:	1c75      	adds	r5, r6, #1
 8027900:	2800      	cmp	r0, #0
 8027902:	d11f      	bne.n	8027944 <_svfiprintf_r+0xe8>
 8027904:	6822      	ldr	r2, [r4, #0]
 8027906:	06d3      	lsls	r3, r2, #27
 8027908:	d504      	bpl.n	8027914 <_svfiprintf_r+0xb8>
 802790a:	2353      	movs	r3, #83	@ 0x53
 802790c:	a904      	add	r1, sp, #16
 802790e:	185b      	adds	r3, r3, r1
 8027910:	2120      	movs	r1, #32
 8027912:	7019      	strb	r1, [r3, #0]
 8027914:	0713      	lsls	r3, r2, #28
 8027916:	d504      	bpl.n	8027922 <_svfiprintf_r+0xc6>
 8027918:	2353      	movs	r3, #83	@ 0x53
 802791a:	a904      	add	r1, sp, #16
 802791c:	185b      	adds	r3, r3, r1
 802791e:	212b      	movs	r1, #43	@ 0x2b
 8027920:	7019      	strb	r1, [r3, #0]
 8027922:	7833      	ldrb	r3, [r6, #0]
 8027924:	2b2a      	cmp	r3, #42	@ 0x2a
 8027926:	d016      	beq.n	8027956 <_svfiprintf_r+0xfa>
 8027928:	0035      	movs	r5, r6
 802792a:	2100      	movs	r1, #0
 802792c:	200a      	movs	r0, #10
 802792e:	68e3      	ldr	r3, [r4, #12]
 8027930:	782a      	ldrb	r2, [r5, #0]
 8027932:	1c6e      	adds	r6, r5, #1
 8027934:	3a30      	subs	r2, #48	@ 0x30
 8027936:	2a09      	cmp	r2, #9
 8027938:	d950      	bls.n	80279dc <_svfiprintf_r+0x180>
 802793a:	2900      	cmp	r1, #0
 802793c:	d111      	bne.n	8027962 <_svfiprintf_r+0x106>
 802793e:	e017      	b.n	8027970 <_svfiprintf_r+0x114>
 8027940:	3501      	adds	r5, #1
 8027942:	e7af      	b.n	80278a4 <_svfiprintf_r+0x48>
 8027944:	9b05      	ldr	r3, [sp, #20]
 8027946:	6822      	ldr	r2, [r4, #0]
 8027948:	1ac0      	subs	r0, r0, r3
 802794a:	2301      	movs	r3, #1
 802794c:	4083      	lsls	r3, r0
 802794e:	4313      	orrs	r3, r2
 8027950:	002e      	movs	r6, r5
 8027952:	6023      	str	r3, [r4, #0]
 8027954:	e7cc      	b.n	80278f0 <_svfiprintf_r+0x94>
 8027956:	9b07      	ldr	r3, [sp, #28]
 8027958:	1d19      	adds	r1, r3, #4
 802795a:	681b      	ldr	r3, [r3, #0]
 802795c:	9107      	str	r1, [sp, #28]
 802795e:	2b00      	cmp	r3, #0
 8027960:	db01      	blt.n	8027966 <_svfiprintf_r+0x10a>
 8027962:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027964:	e004      	b.n	8027970 <_svfiprintf_r+0x114>
 8027966:	425b      	negs	r3, r3
 8027968:	60e3      	str	r3, [r4, #12]
 802796a:	2302      	movs	r3, #2
 802796c:	4313      	orrs	r3, r2
 802796e:	6023      	str	r3, [r4, #0]
 8027970:	782b      	ldrb	r3, [r5, #0]
 8027972:	2b2e      	cmp	r3, #46	@ 0x2e
 8027974:	d10c      	bne.n	8027990 <_svfiprintf_r+0x134>
 8027976:	786b      	ldrb	r3, [r5, #1]
 8027978:	2b2a      	cmp	r3, #42	@ 0x2a
 802797a:	d134      	bne.n	80279e6 <_svfiprintf_r+0x18a>
 802797c:	9b07      	ldr	r3, [sp, #28]
 802797e:	3502      	adds	r5, #2
 8027980:	1d1a      	adds	r2, r3, #4
 8027982:	681b      	ldr	r3, [r3, #0]
 8027984:	9207      	str	r2, [sp, #28]
 8027986:	2b00      	cmp	r3, #0
 8027988:	da01      	bge.n	802798e <_svfiprintf_r+0x132>
 802798a:	2301      	movs	r3, #1
 802798c:	425b      	negs	r3, r3
 802798e:	9309      	str	r3, [sp, #36]	@ 0x24
 8027990:	4e2d      	ldr	r6, [pc, #180]	@ (8027a48 <_svfiprintf_r+0x1ec>)
 8027992:	2203      	movs	r2, #3
 8027994:	0030      	movs	r0, r6
 8027996:	7829      	ldrb	r1, [r5, #0]
 8027998:	f7fd ff2d 	bl	80257f6 <memchr>
 802799c:	2800      	cmp	r0, #0
 802799e:	d006      	beq.n	80279ae <_svfiprintf_r+0x152>
 80279a0:	2340      	movs	r3, #64	@ 0x40
 80279a2:	1b80      	subs	r0, r0, r6
 80279a4:	4083      	lsls	r3, r0
 80279a6:	6822      	ldr	r2, [r4, #0]
 80279a8:	3501      	adds	r5, #1
 80279aa:	4313      	orrs	r3, r2
 80279ac:	6023      	str	r3, [r4, #0]
 80279ae:	7829      	ldrb	r1, [r5, #0]
 80279b0:	2206      	movs	r2, #6
 80279b2:	4826      	ldr	r0, [pc, #152]	@ (8027a4c <_svfiprintf_r+0x1f0>)
 80279b4:	1c6e      	adds	r6, r5, #1
 80279b6:	7621      	strb	r1, [r4, #24]
 80279b8:	f7fd ff1d 	bl	80257f6 <memchr>
 80279bc:	2800      	cmp	r0, #0
 80279be:	d038      	beq.n	8027a32 <_svfiprintf_r+0x1d6>
 80279c0:	4b23      	ldr	r3, [pc, #140]	@ (8027a50 <_svfiprintf_r+0x1f4>)
 80279c2:	2b00      	cmp	r3, #0
 80279c4:	d122      	bne.n	8027a0c <_svfiprintf_r+0x1b0>
 80279c6:	2207      	movs	r2, #7
 80279c8:	9b07      	ldr	r3, [sp, #28]
 80279ca:	3307      	adds	r3, #7
 80279cc:	4393      	bics	r3, r2
 80279ce:	3308      	adds	r3, #8
 80279d0:	9307      	str	r3, [sp, #28]
 80279d2:	6963      	ldr	r3, [r4, #20]
 80279d4:	9a04      	ldr	r2, [sp, #16]
 80279d6:	189b      	adds	r3, r3, r2
 80279d8:	6163      	str	r3, [r4, #20]
 80279da:	e762      	b.n	80278a2 <_svfiprintf_r+0x46>
 80279dc:	4343      	muls	r3, r0
 80279de:	0035      	movs	r5, r6
 80279e0:	2101      	movs	r1, #1
 80279e2:	189b      	adds	r3, r3, r2
 80279e4:	e7a4      	b.n	8027930 <_svfiprintf_r+0xd4>
 80279e6:	2300      	movs	r3, #0
 80279e8:	200a      	movs	r0, #10
 80279ea:	0019      	movs	r1, r3
 80279ec:	3501      	adds	r5, #1
 80279ee:	6063      	str	r3, [r4, #4]
 80279f0:	782a      	ldrb	r2, [r5, #0]
 80279f2:	1c6e      	adds	r6, r5, #1
 80279f4:	3a30      	subs	r2, #48	@ 0x30
 80279f6:	2a09      	cmp	r2, #9
 80279f8:	d903      	bls.n	8027a02 <_svfiprintf_r+0x1a6>
 80279fa:	2b00      	cmp	r3, #0
 80279fc:	d0c8      	beq.n	8027990 <_svfiprintf_r+0x134>
 80279fe:	9109      	str	r1, [sp, #36]	@ 0x24
 8027a00:	e7c6      	b.n	8027990 <_svfiprintf_r+0x134>
 8027a02:	4341      	muls	r1, r0
 8027a04:	0035      	movs	r5, r6
 8027a06:	2301      	movs	r3, #1
 8027a08:	1889      	adds	r1, r1, r2
 8027a0a:	e7f1      	b.n	80279f0 <_svfiprintf_r+0x194>
 8027a0c:	aa07      	add	r2, sp, #28
 8027a0e:	9200      	str	r2, [sp, #0]
 8027a10:	0021      	movs	r1, r4
 8027a12:	003a      	movs	r2, r7
 8027a14:	4b0f      	ldr	r3, [pc, #60]	@ (8027a54 <_svfiprintf_r+0x1f8>)
 8027a16:	9803      	ldr	r0, [sp, #12]
 8027a18:	f7fc ffc4 	bl	80249a4 <_printf_float>
 8027a1c:	9004      	str	r0, [sp, #16]
 8027a1e:	9b04      	ldr	r3, [sp, #16]
 8027a20:	3301      	adds	r3, #1
 8027a22:	d1d6      	bne.n	80279d2 <_svfiprintf_r+0x176>
 8027a24:	89bb      	ldrh	r3, [r7, #12]
 8027a26:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027a28:	065b      	lsls	r3, r3, #25
 8027a2a:	d500      	bpl.n	8027a2e <_svfiprintf_r+0x1d2>
 8027a2c:	e72c      	b.n	8027888 <_svfiprintf_r+0x2c>
 8027a2e:	b021      	add	sp, #132	@ 0x84
 8027a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027a32:	aa07      	add	r2, sp, #28
 8027a34:	9200      	str	r2, [sp, #0]
 8027a36:	0021      	movs	r1, r4
 8027a38:	003a      	movs	r2, r7
 8027a3a:	4b06      	ldr	r3, [pc, #24]	@ (8027a54 <_svfiprintf_r+0x1f8>)
 8027a3c:	9803      	ldr	r0, [sp, #12]
 8027a3e:	f7fd fa5f 	bl	8024f00 <_printf_i>
 8027a42:	e7eb      	b.n	8027a1c <_svfiprintf_r+0x1c0>
 8027a44:	0802e154 	.word	0x0802e154
 8027a48:	0802e15a 	.word	0x0802e15a
 8027a4c:	0802e15e 	.word	0x0802e15e
 8027a50:	080249a5 	.word	0x080249a5
 8027a54:	0802779d 	.word	0x0802779d

08027a58 <__sfputc_r>:
 8027a58:	6893      	ldr	r3, [r2, #8]
 8027a5a:	b510      	push	{r4, lr}
 8027a5c:	3b01      	subs	r3, #1
 8027a5e:	6093      	str	r3, [r2, #8]
 8027a60:	2b00      	cmp	r3, #0
 8027a62:	da04      	bge.n	8027a6e <__sfputc_r+0x16>
 8027a64:	6994      	ldr	r4, [r2, #24]
 8027a66:	42a3      	cmp	r3, r4
 8027a68:	db07      	blt.n	8027a7a <__sfputc_r+0x22>
 8027a6a:	290a      	cmp	r1, #10
 8027a6c:	d005      	beq.n	8027a7a <__sfputc_r+0x22>
 8027a6e:	6813      	ldr	r3, [r2, #0]
 8027a70:	1c58      	adds	r0, r3, #1
 8027a72:	6010      	str	r0, [r2, #0]
 8027a74:	7019      	strb	r1, [r3, #0]
 8027a76:	0008      	movs	r0, r1
 8027a78:	bd10      	pop	{r4, pc}
 8027a7a:	f7fd fd4b 	bl	8025514 <__swbuf_r>
 8027a7e:	0001      	movs	r1, r0
 8027a80:	e7f9      	b.n	8027a76 <__sfputc_r+0x1e>

08027a82 <__sfputs_r>:
 8027a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027a84:	0006      	movs	r6, r0
 8027a86:	000f      	movs	r7, r1
 8027a88:	0014      	movs	r4, r2
 8027a8a:	18d5      	adds	r5, r2, r3
 8027a8c:	42ac      	cmp	r4, r5
 8027a8e:	d101      	bne.n	8027a94 <__sfputs_r+0x12>
 8027a90:	2000      	movs	r0, #0
 8027a92:	e007      	b.n	8027aa4 <__sfputs_r+0x22>
 8027a94:	7821      	ldrb	r1, [r4, #0]
 8027a96:	003a      	movs	r2, r7
 8027a98:	0030      	movs	r0, r6
 8027a9a:	f7ff ffdd 	bl	8027a58 <__sfputc_r>
 8027a9e:	3401      	adds	r4, #1
 8027aa0:	1c43      	adds	r3, r0, #1
 8027aa2:	d1f3      	bne.n	8027a8c <__sfputs_r+0xa>
 8027aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027aa8 <_vfiprintf_r>:
 8027aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027aaa:	b0a1      	sub	sp, #132	@ 0x84
 8027aac:	000f      	movs	r7, r1
 8027aae:	0015      	movs	r5, r2
 8027ab0:	001e      	movs	r6, r3
 8027ab2:	9003      	str	r0, [sp, #12]
 8027ab4:	2800      	cmp	r0, #0
 8027ab6:	d004      	beq.n	8027ac2 <_vfiprintf_r+0x1a>
 8027ab8:	6a03      	ldr	r3, [r0, #32]
 8027aba:	2b00      	cmp	r3, #0
 8027abc:	d101      	bne.n	8027ac2 <_vfiprintf_r+0x1a>
 8027abe:	f7fd fbbb 	bl	8025238 <__sinit>
 8027ac2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027ac4:	07db      	lsls	r3, r3, #31
 8027ac6:	d405      	bmi.n	8027ad4 <_vfiprintf_r+0x2c>
 8027ac8:	89bb      	ldrh	r3, [r7, #12]
 8027aca:	059b      	lsls	r3, r3, #22
 8027acc:	d402      	bmi.n	8027ad4 <_vfiprintf_r+0x2c>
 8027ace:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027ad0:	f7fd fe8f 	bl	80257f2 <__retarget_lock_acquire_recursive>
 8027ad4:	89bb      	ldrh	r3, [r7, #12]
 8027ad6:	071b      	lsls	r3, r3, #28
 8027ad8:	d502      	bpl.n	8027ae0 <_vfiprintf_r+0x38>
 8027ada:	693b      	ldr	r3, [r7, #16]
 8027adc:	2b00      	cmp	r3, #0
 8027ade:	d113      	bne.n	8027b08 <_vfiprintf_r+0x60>
 8027ae0:	0039      	movs	r1, r7
 8027ae2:	9803      	ldr	r0, [sp, #12]
 8027ae4:	f7fd fd58 	bl	8025598 <__swsetup_r>
 8027ae8:	2800      	cmp	r0, #0
 8027aea:	d00d      	beq.n	8027b08 <_vfiprintf_r+0x60>
 8027aec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027aee:	07db      	lsls	r3, r3, #31
 8027af0:	d503      	bpl.n	8027afa <_vfiprintf_r+0x52>
 8027af2:	2001      	movs	r0, #1
 8027af4:	4240      	negs	r0, r0
 8027af6:	b021      	add	sp, #132	@ 0x84
 8027af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027afa:	89bb      	ldrh	r3, [r7, #12]
 8027afc:	059b      	lsls	r3, r3, #22
 8027afe:	d4f8      	bmi.n	8027af2 <_vfiprintf_r+0x4a>
 8027b00:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027b02:	f7fd fe77 	bl	80257f4 <__retarget_lock_release_recursive>
 8027b06:	e7f4      	b.n	8027af2 <_vfiprintf_r+0x4a>
 8027b08:	2300      	movs	r3, #0
 8027b0a:	ac08      	add	r4, sp, #32
 8027b0c:	6163      	str	r3, [r4, #20]
 8027b0e:	3320      	adds	r3, #32
 8027b10:	7663      	strb	r3, [r4, #25]
 8027b12:	3310      	adds	r3, #16
 8027b14:	76a3      	strb	r3, [r4, #26]
 8027b16:	9607      	str	r6, [sp, #28]
 8027b18:	002e      	movs	r6, r5
 8027b1a:	7833      	ldrb	r3, [r6, #0]
 8027b1c:	2b00      	cmp	r3, #0
 8027b1e:	d001      	beq.n	8027b24 <_vfiprintf_r+0x7c>
 8027b20:	2b25      	cmp	r3, #37	@ 0x25
 8027b22:	d148      	bne.n	8027bb6 <_vfiprintf_r+0x10e>
 8027b24:	1b73      	subs	r3, r6, r5
 8027b26:	9305      	str	r3, [sp, #20]
 8027b28:	42ae      	cmp	r6, r5
 8027b2a:	d00b      	beq.n	8027b44 <_vfiprintf_r+0x9c>
 8027b2c:	002a      	movs	r2, r5
 8027b2e:	0039      	movs	r1, r7
 8027b30:	9803      	ldr	r0, [sp, #12]
 8027b32:	f7ff ffa6 	bl	8027a82 <__sfputs_r>
 8027b36:	3001      	adds	r0, #1
 8027b38:	d100      	bne.n	8027b3c <_vfiprintf_r+0x94>
 8027b3a:	e0ae      	b.n	8027c9a <_vfiprintf_r+0x1f2>
 8027b3c:	6963      	ldr	r3, [r4, #20]
 8027b3e:	9a05      	ldr	r2, [sp, #20]
 8027b40:	189b      	adds	r3, r3, r2
 8027b42:	6163      	str	r3, [r4, #20]
 8027b44:	7833      	ldrb	r3, [r6, #0]
 8027b46:	2b00      	cmp	r3, #0
 8027b48:	d100      	bne.n	8027b4c <_vfiprintf_r+0xa4>
 8027b4a:	e0a6      	b.n	8027c9a <_vfiprintf_r+0x1f2>
 8027b4c:	2201      	movs	r2, #1
 8027b4e:	2300      	movs	r3, #0
 8027b50:	4252      	negs	r2, r2
 8027b52:	6062      	str	r2, [r4, #4]
 8027b54:	a904      	add	r1, sp, #16
 8027b56:	3254      	adds	r2, #84	@ 0x54
 8027b58:	1852      	adds	r2, r2, r1
 8027b5a:	1c75      	adds	r5, r6, #1
 8027b5c:	6023      	str	r3, [r4, #0]
 8027b5e:	60e3      	str	r3, [r4, #12]
 8027b60:	60a3      	str	r3, [r4, #8]
 8027b62:	7013      	strb	r3, [r2, #0]
 8027b64:	65a3      	str	r3, [r4, #88]	@ 0x58
 8027b66:	4b59      	ldr	r3, [pc, #356]	@ (8027ccc <_vfiprintf_r+0x224>)
 8027b68:	2205      	movs	r2, #5
 8027b6a:	0018      	movs	r0, r3
 8027b6c:	7829      	ldrb	r1, [r5, #0]
 8027b6e:	9305      	str	r3, [sp, #20]
 8027b70:	f7fd fe41 	bl	80257f6 <memchr>
 8027b74:	1c6e      	adds	r6, r5, #1
 8027b76:	2800      	cmp	r0, #0
 8027b78:	d11f      	bne.n	8027bba <_vfiprintf_r+0x112>
 8027b7a:	6822      	ldr	r2, [r4, #0]
 8027b7c:	06d3      	lsls	r3, r2, #27
 8027b7e:	d504      	bpl.n	8027b8a <_vfiprintf_r+0xe2>
 8027b80:	2353      	movs	r3, #83	@ 0x53
 8027b82:	a904      	add	r1, sp, #16
 8027b84:	185b      	adds	r3, r3, r1
 8027b86:	2120      	movs	r1, #32
 8027b88:	7019      	strb	r1, [r3, #0]
 8027b8a:	0713      	lsls	r3, r2, #28
 8027b8c:	d504      	bpl.n	8027b98 <_vfiprintf_r+0xf0>
 8027b8e:	2353      	movs	r3, #83	@ 0x53
 8027b90:	a904      	add	r1, sp, #16
 8027b92:	185b      	adds	r3, r3, r1
 8027b94:	212b      	movs	r1, #43	@ 0x2b
 8027b96:	7019      	strb	r1, [r3, #0]
 8027b98:	782b      	ldrb	r3, [r5, #0]
 8027b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8027b9c:	d016      	beq.n	8027bcc <_vfiprintf_r+0x124>
 8027b9e:	002e      	movs	r6, r5
 8027ba0:	2100      	movs	r1, #0
 8027ba2:	200a      	movs	r0, #10
 8027ba4:	68e3      	ldr	r3, [r4, #12]
 8027ba6:	7832      	ldrb	r2, [r6, #0]
 8027ba8:	1c75      	adds	r5, r6, #1
 8027baa:	3a30      	subs	r2, #48	@ 0x30
 8027bac:	2a09      	cmp	r2, #9
 8027bae:	d950      	bls.n	8027c52 <_vfiprintf_r+0x1aa>
 8027bb0:	2900      	cmp	r1, #0
 8027bb2:	d111      	bne.n	8027bd8 <_vfiprintf_r+0x130>
 8027bb4:	e017      	b.n	8027be6 <_vfiprintf_r+0x13e>
 8027bb6:	3601      	adds	r6, #1
 8027bb8:	e7af      	b.n	8027b1a <_vfiprintf_r+0x72>
 8027bba:	9b05      	ldr	r3, [sp, #20]
 8027bbc:	6822      	ldr	r2, [r4, #0]
 8027bbe:	1ac0      	subs	r0, r0, r3
 8027bc0:	2301      	movs	r3, #1
 8027bc2:	4083      	lsls	r3, r0
 8027bc4:	4313      	orrs	r3, r2
 8027bc6:	0035      	movs	r5, r6
 8027bc8:	6023      	str	r3, [r4, #0]
 8027bca:	e7cc      	b.n	8027b66 <_vfiprintf_r+0xbe>
 8027bcc:	9b07      	ldr	r3, [sp, #28]
 8027bce:	1d19      	adds	r1, r3, #4
 8027bd0:	681b      	ldr	r3, [r3, #0]
 8027bd2:	9107      	str	r1, [sp, #28]
 8027bd4:	2b00      	cmp	r3, #0
 8027bd6:	db01      	blt.n	8027bdc <_vfiprintf_r+0x134>
 8027bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027bda:	e004      	b.n	8027be6 <_vfiprintf_r+0x13e>
 8027bdc:	425b      	negs	r3, r3
 8027bde:	60e3      	str	r3, [r4, #12]
 8027be0:	2302      	movs	r3, #2
 8027be2:	4313      	orrs	r3, r2
 8027be4:	6023      	str	r3, [r4, #0]
 8027be6:	7833      	ldrb	r3, [r6, #0]
 8027be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8027bea:	d10c      	bne.n	8027c06 <_vfiprintf_r+0x15e>
 8027bec:	7873      	ldrb	r3, [r6, #1]
 8027bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8027bf0:	d134      	bne.n	8027c5c <_vfiprintf_r+0x1b4>
 8027bf2:	9b07      	ldr	r3, [sp, #28]
 8027bf4:	3602      	adds	r6, #2
 8027bf6:	1d1a      	adds	r2, r3, #4
 8027bf8:	681b      	ldr	r3, [r3, #0]
 8027bfa:	9207      	str	r2, [sp, #28]
 8027bfc:	2b00      	cmp	r3, #0
 8027bfe:	da01      	bge.n	8027c04 <_vfiprintf_r+0x15c>
 8027c00:	2301      	movs	r3, #1
 8027c02:	425b      	negs	r3, r3
 8027c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8027c06:	4d32      	ldr	r5, [pc, #200]	@ (8027cd0 <_vfiprintf_r+0x228>)
 8027c08:	2203      	movs	r2, #3
 8027c0a:	0028      	movs	r0, r5
 8027c0c:	7831      	ldrb	r1, [r6, #0]
 8027c0e:	f7fd fdf2 	bl	80257f6 <memchr>
 8027c12:	2800      	cmp	r0, #0
 8027c14:	d006      	beq.n	8027c24 <_vfiprintf_r+0x17c>
 8027c16:	2340      	movs	r3, #64	@ 0x40
 8027c18:	1b40      	subs	r0, r0, r5
 8027c1a:	4083      	lsls	r3, r0
 8027c1c:	6822      	ldr	r2, [r4, #0]
 8027c1e:	3601      	adds	r6, #1
 8027c20:	4313      	orrs	r3, r2
 8027c22:	6023      	str	r3, [r4, #0]
 8027c24:	7831      	ldrb	r1, [r6, #0]
 8027c26:	2206      	movs	r2, #6
 8027c28:	482a      	ldr	r0, [pc, #168]	@ (8027cd4 <_vfiprintf_r+0x22c>)
 8027c2a:	1c75      	adds	r5, r6, #1
 8027c2c:	7621      	strb	r1, [r4, #24]
 8027c2e:	f7fd fde2 	bl	80257f6 <memchr>
 8027c32:	2800      	cmp	r0, #0
 8027c34:	d040      	beq.n	8027cb8 <_vfiprintf_r+0x210>
 8027c36:	4b28      	ldr	r3, [pc, #160]	@ (8027cd8 <_vfiprintf_r+0x230>)
 8027c38:	2b00      	cmp	r3, #0
 8027c3a:	d122      	bne.n	8027c82 <_vfiprintf_r+0x1da>
 8027c3c:	2207      	movs	r2, #7
 8027c3e:	9b07      	ldr	r3, [sp, #28]
 8027c40:	3307      	adds	r3, #7
 8027c42:	4393      	bics	r3, r2
 8027c44:	3308      	adds	r3, #8
 8027c46:	9307      	str	r3, [sp, #28]
 8027c48:	6963      	ldr	r3, [r4, #20]
 8027c4a:	9a04      	ldr	r2, [sp, #16]
 8027c4c:	189b      	adds	r3, r3, r2
 8027c4e:	6163      	str	r3, [r4, #20]
 8027c50:	e762      	b.n	8027b18 <_vfiprintf_r+0x70>
 8027c52:	4343      	muls	r3, r0
 8027c54:	002e      	movs	r6, r5
 8027c56:	2101      	movs	r1, #1
 8027c58:	189b      	adds	r3, r3, r2
 8027c5a:	e7a4      	b.n	8027ba6 <_vfiprintf_r+0xfe>
 8027c5c:	2300      	movs	r3, #0
 8027c5e:	200a      	movs	r0, #10
 8027c60:	0019      	movs	r1, r3
 8027c62:	3601      	adds	r6, #1
 8027c64:	6063      	str	r3, [r4, #4]
 8027c66:	7832      	ldrb	r2, [r6, #0]
 8027c68:	1c75      	adds	r5, r6, #1
 8027c6a:	3a30      	subs	r2, #48	@ 0x30
 8027c6c:	2a09      	cmp	r2, #9
 8027c6e:	d903      	bls.n	8027c78 <_vfiprintf_r+0x1d0>
 8027c70:	2b00      	cmp	r3, #0
 8027c72:	d0c8      	beq.n	8027c06 <_vfiprintf_r+0x15e>
 8027c74:	9109      	str	r1, [sp, #36]	@ 0x24
 8027c76:	e7c6      	b.n	8027c06 <_vfiprintf_r+0x15e>
 8027c78:	4341      	muls	r1, r0
 8027c7a:	002e      	movs	r6, r5
 8027c7c:	2301      	movs	r3, #1
 8027c7e:	1889      	adds	r1, r1, r2
 8027c80:	e7f1      	b.n	8027c66 <_vfiprintf_r+0x1be>
 8027c82:	aa07      	add	r2, sp, #28
 8027c84:	9200      	str	r2, [sp, #0]
 8027c86:	0021      	movs	r1, r4
 8027c88:	003a      	movs	r2, r7
 8027c8a:	4b14      	ldr	r3, [pc, #80]	@ (8027cdc <_vfiprintf_r+0x234>)
 8027c8c:	9803      	ldr	r0, [sp, #12]
 8027c8e:	f7fc fe89 	bl	80249a4 <_printf_float>
 8027c92:	9004      	str	r0, [sp, #16]
 8027c94:	9b04      	ldr	r3, [sp, #16]
 8027c96:	3301      	adds	r3, #1
 8027c98:	d1d6      	bne.n	8027c48 <_vfiprintf_r+0x1a0>
 8027c9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027c9c:	07db      	lsls	r3, r3, #31
 8027c9e:	d405      	bmi.n	8027cac <_vfiprintf_r+0x204>
 8027ca0:	89bb      	ldrh	r3, [r7, #12]
 8027ca2:	059b      	lsls	r3, r3, #22
 8027ca4:	d402      	bmi.n	8027cac <_vfiprintf_r+0x204>
 8027ca6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027ca8:	f7fd fda4 	bl	80257f4 <__retarget_lock_release_recursive>
 8027cac:	89bb      	ldrh	r3, [r7, #12]
 8027cae:	065b      	lsls	r3, r3, #25
 8027cb0:	d500      	bpl.n	8027cb4 <_vfiprintf_r+0x20c>
 8027cb2:	e71e      	b.n	8027af2 <_vfiprintf_r+0x4a>
 8027cb4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027cb6:	e71e      	b.n	8027af6 <_vfiprintf_r+0x4e>
 8027cb8:	aa07      	add	r2, sp, #28
 8027cba:	9200      	str	r2, [sp, #0]
 8027cbc:	0021      	movs	r1, r4
 8027cbe:	003a      	movs	r2, r7
 8027cc0:	4b06      	ldr	r3, [pc, #24]	@ (8027cdc <_vfiprintf_r+0x234>)
 8027cc2:	9803      	ldr	r0, [sp, #12]
 8027cc4:	f7fd f91c 	bl	8024f00 <_printf_i>
 8027cc8:	e7e3      	b.n	8027c92 <_vfiprintf_r+0x1ea>
 8027cca:	46c0      	nop			@ (mov r8, r8)
 8027ccc:	0802e154 	.word	0x0802e154
 8027cd0:	0802e15a 	.word	0x0802e15a
 8027cd4:	0802e15e 	.word	0x0802e15e
 8027cd8:	080249a5 	.word	0x080249a5
 8027cdc:	08027a83 	.word	0x08027a83

08027ce0 <__sflush_r>:
 8027ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027ce2:	220c      	movs	r2, #12
 8027ce4:	5e8b      	ldrsh	r3, [r1, r2]
 8027ce6:	0005      	movs	r5, r0
 8027ce8:	000c      	movs	r4, r1
 8027cea:	071a      	lsls	r2, r3, #28
 8027cec:	d456      	bmi.n	8027d9c <__sflush_r+0xbc>
 8027cee:	684a      	ldr	r2, [r1, #4]
 8027cf0:	2a00      	cmp	r2, #0
 8027cf2:	dc02      	bgt.n	8027cfa <__sflush_r+0x1a>
 8027cf4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8027cf6:	2a00      	cmp	r2, #0
 8027cf8:	dd4e      	ble.n	8027d98 <__sflush_r+0xb8>
 8027cfa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027cfc:	2f00      	cmp	r7, #0
 8027cfe:	d04b      	beq.n	8027d98 <__sflush_r+0xb8>
 8027d00:	2200      	movs	r2, #0
 8027d02:	2080      	movs	r0, #128	@ 0x80
 8027d04:	682e      	ldr	r6, [r5, #0]
 8027d06:	602a      	str	r2, [r5, #0]
 8027d08:	001a      	movs	r2, r3
 8027d0a:	0140      	lsls	r0, r0, #5
 8027d0c:	6a21      	ldr	r1, [r4, #32]
 8027d0e:	4002      	ands	r2, r0
 8027d10:	4203      	tst	r3, r0
 8027d12:	d033      	beq.n	8027d7c <__sflush_r+0x9c>
 8027d14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8027d16:	89a3      	ldrh	r3, [r4, #12]
 8027d18:	075b      	lsls	r3, r3, #29
 8027d1a:	d506      	bpl.n	8027d2a <__sflush_r+0x4a>
 8027d1c:	6863      	ldr	r3, [r4, #4]
 8027d1e:	1ad2      	subs	r2, r2, r3
 8027d20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027d22:	2b00      	cmp	r3, #0
 8027d24:	d001      	beq.n	8027d2a <__sflush_r+0x4a>
 8027d26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027d28:	1ad2      	subs	r2, r2, r3
 8027d2a:	2300      	movs	r3, #0
 8027d2c:	0028      	movs	r0, r5
 8027d2e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027d30:	6a21      	ldr	r1, [r4, #32]
 8027d32:	47b8      	blx	r7
 8027d34:	89a2      	ldrh	r2, [r4, #12]
 8027d36:	1c43      	adds	r3, r0, #1
 8027d38:	d106      	bne.n	8027d48 <__sflush_r+0x68>
 8027d3a:	6829      	ldr	r1, [r5, #0]
 8027d3c:	291d      	cmp	r1, #29
 8027d3e:	d846      	bhi.n	8027dce <__sflush_r+0xee>
 8027d40:	4b29      	ldr	r3, [pc, #164]	@ (8027de8 <__sflush_r+0x108>)
 8027d42:	40cb      	lsrs	r3, r1
 8027d44:	07db      	lsls	r3, r3, #31
 8027d46:	d542      	bpl.n	8027dce <__sflush_r+0xee>
 8027d48:	2300      	movs	r3, #0
 8027d4a:	6063      	str	r3, [r4, #4]
 8027d4c:	6923      	ldr	r3, [r4, #16]
 8027d4e:	6023      	str	r3, [r4, #0]
 8027d50:	04d2      	lsls	r2, r2, #19
 8027d52:	d505      	bpl.n	8027d60 <__sflush_r+0x80>
 8027d54:	1c43      	adds	r3, r0, #1
 8027d56:	d102      	bne.n	8027d5e <__sflush_r+0x7e>
 8027d58:	682b      	ldr	r3, [r5, #0]
 8027d5a:	2b00      	cmp	r3, #0
 8027d5c:	d100      	bne.n	8027d60 <__sflush_r+0x80>
 8027d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8027d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027d62:	602e      	str	r6, [r5, #0]
 8027d64:	2900      	cmp	r1, #0
 8027d66:	d017      	beq.n	8027d98 <__sflush_r+0xb8>
 8027d68:	0023      	movs	r3, r4
 8027d6a:	3344      	adds	r3, #68	@ 0x44
 8027d6c:	4299      	cmp	r1, r3
 8027d6e:	d002      	beq.n	8027d76 <__sflush_r+0x96>
 8027d70:	0028      	movs	r0, r5
 8027d72:	f7fe fbd1 	bl	8026518 <_free_r>
 8027d76:	2300      	movs	r3, #0
 8027d78:	6363      	str	r3, [r4, #52]	@ 0x34
 8027d7a:	e00d      	b.n	8027d98 <__sflush_r+0xb8>
 8027d7c:	2301      	movs	r3, #1
 8027d7e:	0028      	movs	r0, r5
 8027d80:	47b8      	blx	r7
 8027d82:	0002      	movs	r2, r0
 8027d84:	1c43      	adds	r3, r0, #1
 8027d86:	d1c6      	bne.n	8027d16 <__sflush_r+0x36>
 8027d88:	682b      	ldr	r3, [r5, #0]
 8027d8a:	2b00      	cmp	r3, #0
 8027d8c:	d0c3      	beq.n	8027d16 <__sflush_r+0x36>
 8027d8e:	2b1d      	cmp	r3, #29
 8027d90:	d001      	beq.n	8027d96 <__sflush_r+0xb6>
 8027d92:	2b16      	cmp	r3, #22
 8027d94:	d11a      	bne.n	8027dcc <__sflush_r+0xec>
 8027d96:	602e      	str	r6, [r5, #0]
 8027d98:	2000      	movs	r0, #0
 8027d9a:	e01e      	b.n	8027dda <__sflush_r+0xfa>
 8027d9c:	690e      	ldr	r6, [r1, #16]
 8027d9e:	2e00      	cmp	r6, #0
 8027da0:	d0fa      	beq.n	8027d98 <__sflush_r+0xb8>
 8027da2:	680f      	ldr	r7, [r1, #0]
 8027da4:	600e      	str	r6, [r1, #0]
 8027da6:	1bba      	subs	r2, r7, r6
 8027da8:	9201      	str	r2, [sp, #4]
 8027daa:	2200      	movs	r2, #0
 8027dac:	079b      	lsls	r3, r3, #30
 8027dae:	d100      	bne.n	8027db2 <__sflush_r+0xd2>
 8027db0:	694a      	ldr	r2, [r1, #20]
 8027db2:	60a2      	str	r2, [r4, #8]
 8027db4:	9b01      	ldr	r3, [sp, #4]
 8027db6:	2b00      	cmp	r3, #0
 8027db8:	ddee      	ble.n	8027d98 <__sflush_r+0xb8>
 8027dba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8027dbc:	0032      	movs	r2, r6
 8027dbe:	001f      	movs	r7, r3
 8027dc0:	0028      	movs	r0, r5
 8027dc2:	9b01      	ldr	r3, [sp, #4]
 8027dc4:	6a21      	ldr	r1, [r4, #32]
 8027dc6:	47b8      	blx	r7
 8027dc8:	2800      	cmp	r0, #0
 8027dca:	dc07      	bgt.n	8027ddc <__sflush_r+0xfc>
 8027dcc:	89a2      	ldrh	r2, [r4, #12]
 8027dce:	2340      	movs	r3, #64	@ 0x40
 8027dd0:	2001      	movs	r0, #1
 8027dd2:	4313      	orrs	r3, r2
 8027dd4:	b21b      	sxth	r3, r3
 8027dd6:	81a3      	strh	r3, [r4, #12]
 8027dd8:	4240      	negs	r0, r0
 8027dda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027ddc:	9b01      	ldr	r3, [sp, #4]
 8027dde:	1836      	adds	r6, r6, r0
 8027de0:	1a1b      	subs	r3, r3, r0
 8027de2:	9301      	str	r3, [sp, #4]
 8027de4:	e7e6      	b.n	8027db4 <__sflush_r+0xd4>
 8027de6:	46c0      	nop			@ (mov r8, r8)
 8027de8:	20400001 	.word	0x20400001

08027dec <_fflush_r>:
 8027dec:	690b      	ldr	r3, [r1, #16]
 8027dee:	b570      	push	{r4, r5, r6, lr}
 8027df0:	0005      	movs	r5, r0
 8027df2:	000c      	movs	r4, r1
 8027df4:	2b00      	cmp	r3, #0
 8027df6:	d102      	bne.n	8027dfe <_fflush_r+0x12>
 8027df8:	2500      	movs	r5, #0
 8027dfa:	0028      	movs	r0, r5
 8027dfc:	bd70      	pop	{r4, r5, r6, pc}
 8027dfe:	2800      	cmp	r0, #0
 8027e00:	d004      	beq.n	8027e0c <_fflush_r+0x20>
 8027e02:	6a03      	ldr	r3, [r0, #32]
 8027e04:	2b00      	cmp	r3, #0
 8027e06:	d101      	bne.n	8027e0c <_fflush_r+0x20>
 8027e08:	f7fd fa16 	bl	8025238 <__sinit>
 8027e0c:	220c      	movs	r2, #12
 8027e0e:	5ea3      	ldrsh	r3, [r4, r2]
 8027e10:	2b00      	cmp	r3, #0
 8027e12:	d0f1      	beq.n	8027df8 <_fflush_r+0xc>
 8027e14:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8027e16:	07d2      	lsls	r2, r2, #31
 8027e18:	d404      	bmi.n	8027e24 <_fflush_r+0x38>
 8027e1a:	059b      	lsls	r3, r3, #22
 8027e1c:	d402      	bmi.n	8027e24 <_fflush_r+0x38>
 8027e1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027e20:	f7fd fce7 	bl	80257f2 <__retarget_lock_acquire_recursive>
 8027e24:	0028      	movs	r0, r5
 8027e26:	0021      	movs	r1, r4
 8027e28:	f7ff ff5a 	bl	8027ce0 <__sflush_r>
 8027e2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027e2e:	0005      	movs	r5, r0
 8027e30:	07db      	lsls	r3, r3, #31
 8027e32:	d4e2      	bmi.n	8027dfa <_fflush_r+0xe>
 8027e34:	89a3      	ldrh	r3, [r4, #12]
 8027e36:	059b      	lsls	r3, r3, #22
 8027e38:	d4df      	bmi.n	8027dfa <_fflush_r+0xe>
 8027e3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027e3c:	f7fd fcda 	bl	80257f4 <__retarget_lock_release_recursive>
 8027e40:	e7db      	b.n	8027dfa <_fflush_r+0xe>
	...

08027e44 <__swhatbuf_r>:
 8027e44:	b570      	push	{r4, r5, r6, lr}
 8027e46:	000e      	movs	r6, r1
 8027e48:	001d      	movs	r5, r3
 8027e4a:	230e      	movs	r3, #14
 8027e4c:	5ec9      	ldrsh	r1, [r1, r3]
 8027e4e:	0014      	movs	r4, r2
 8027e50:	b096      	sub	sp, #88	@ 0x58
 8027e52:	2900      	cmp	r1, #0
 8027e54:	da0c      	bge.n	8027e70 <__swhatbuf_r+0x2c>
 8027e56:	89b2      	ldrh	r2, [r6, #12]
 8027e58:	2380      	movs	r3, #128	@ 0x80
 8027e5a:	0011      	movs	r1, r2
 8027e5c:	4019      	ands	r1, r3
 8027e5e:	421a      	tst	r2, r3
 8027e60:	d114      	bne.n	8027e8c <__swhatbuf_r+0x48>
 8027e62:	2380      	movs	r3, #128	@ 0x80
 8027e64:	00db      	lsls	r3, r3, #3
 8027e66:	2000      	movs	r0, #0
 8027e68:	6029      	str	r1, [r5, #0]
 8027e6a:	6023      	str	r3, [r4, #0]
 8027e6c:	b016      	add	sp, #88	@ 0x58
 8027e6e:	bd70      	pop	{r4, r5, r6, pc}
 8027e70:	466a      	mov	r2, sp
 8027e72:	f000 f865 	bl	8027f40 <_fstat_r>
 8027e76:	2800      	cmp	r0, #0
 8027e78:	dbed      	blt.n	8027e56 <__swhatbuf_r+0x12>
 8027e7a:	23f0      	movs	r3, #240	@ 0xf0
 8027e7c:	9901      	ldr	r1, [sp, #4]
 8027e7e:	021b      	lsls	r3, r3, #8
 8027e80:	4019      	ands	r1, r3
 8027e82:	4b04      	ldr	r3, [pc, #16]	@ (8027e94 <__swhatbuf_r+0x50>)
 8027e84:	18c9      	adds	r1, r1, r3
 8027e86:	424b      	negs	r3, r1
 8027e88:	4159      	adcs	r1, r3
 8027e8a:	e7ea      	b.n	8027e62 <__swhatbuf_r+0x1e>
 8027e8c:	2100      	movs	r1, #0
 8027e8e:	2340      	movs	r3, #64	@ 0x40
 8027e90:	e7e9      	b.n	8027e66 <__swhatbuf_r+0x22>
 8027e92:	46c0      	nop			@ (mov r8, r8)
 8027e94:	ffffe000 	.word	0xffffe000

08027e98 <__smakebuf_r>:
 8027e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027e9a:	2602      	movs	r6, #2
 8027e9c:	898b      	ldrh	r3, [r1, #12]
 8027e9e:	0005      	movs	r5, r0
 8027ea0:	000c      	movs	r4, r1
 8027ea2:	b085      	sub	sp, #20
 8027ea4:	4233      	tst	r3, r6
 8027ea6:	d007      	beq.n	8027eb8 <__smakebuf_r+0x20>
 8027ea8:	0023      	movs	r3, r4
 8027eaa:	3347      	adds	r3, #71	@ 0x47
 8027eac:	6023      	str	r3, [r4, #0]
 8027eae:	6123      	str	r3, [r4, #16]
 8027eb0:	2301      	movs	r3, #1
 8027eb2:	6163      	str	r3, [r4, #20]
 8027eb4:	b005      	add	sp, #20
 8027eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027eb8:	ab03      	add	r3, sp, #12
 8027eba:	aa02      	add	r2, sp, #8
 8027ebc:	f7ff ffc2 	bl	8027e44 <__swhatbuf_r>
 8027ec0:	9f02      	ldr	r7, [sp, #8]
 8027ec2:	9001      	str	r0, [sp, #4]
 8027ec4:	0039      	movs	r1, r7
 8027ec6:	0028      	movs	r0, r5
 8027ec8:	f7fe fef6 	bl	8026cb8 <_malloc_r>
 8027ecc:	2800      	cmp	r0, #0
 8027ece:	d108      	bne.n	8027ee2 <__smakebuf_r+0x4a>
 8027ed0:	220c      	movs	r2, #12
 8027ed2:	5ea3      	ldrsh	r3, [r4, r2]
 8027ed4:	059a      	lsls	r2, r3, #22
 8027ed6:	d4ed      	bmi.n	8027eb4 <__smakebuf_r+0x1c>
 8027ed8:	2203      	movs	r2, #3
 8027eda:	4393      	bics	r3, r2
 8027edc:	431e      	orrs	r6, r3
 8027ede:	81a6      	strh	r6, [r4, #12]
 8027ee0:	e7e2      	b.n	8027ea8 <__smakebuf_r+0x10>
 8027ee2:	2380      	movs	r3, #128	@ 0x80
 8027ee4:	89a2      	ldrh	r2, [r4, #12]
 8027ee6:	6020      	str	r0, [r4, #0]
 8027ee8:	4313      	orrs	r3, r2
 8027eea:	81a3      	strh	r3, [r4, #12]
 8027eec:	9b03      	ldr	r3, [sp, #12]
 8027eee:	6120      	str	r0, [r4, #16]
 8027ef0:	6167      	str	r7, [r4, #20]
 8027ef2:	2b00      	cmp	r3, #0
 8027ef4:	d00c      	beq.n	8027f10 <__smakebuf_r+0x78>
 8027ef6:	0028      	movs	r0, r5
 8027ef8:	230e      	movs	r3, #14
 8027efa:	5ee1      	ldrsh	r1, [r4, r3]
 8027efc:	f000 f832 	bl	8027f64 <_isatty_r>
 8027f00:	2800      	cmp	r0, #0
 8027f02:	d005      	beq.n	8027f10 <__smakebuf_r+0x78>
 8027f04:	2303      	movs	r3, #3
 8027f06:	89a2      	ldrh	r2, [r4, #12]
 8027f08:	439a      	bics	r2, r3
 8027f0a:	3b02      	subs	r3, #2
 8027f0c:	4313      	orrs	r3, r2
 8027f0e:	81a3      	strh	r3, [r4, #12]
 8027f10:	89a3      	ldrh	r3, [r4, #12]
 8027f12:	9a01      	ldr	r2, [sp, #4]
 8027f14:	4313      	orrs	r3, r2
 8027f16:	81a3      	strh	r3, [r4, #12]
 8027f18:	e7cc      	b.n	8027eb4 <__smakebuf_r+0x1c>

08027f1a <memmove>:
 8027f1a:	b510      	push	{r4, lr}
 8027f1c:	4288      	cmp	r0, r1
 8027f1e:	d902      	bls.n	8027f26 <memmove+0xc>
 8027f20:	188b      	adds	r3, r1, r2
 8027f22:	4298      	cmp	r0, r3
 8027f24:	d308      	bcc.n	8027f38 <memmove+0x1e>
 8027f26:	2300      	movs	r3, #0
 8027f28:	429a      	cmp	r2, r3
 8027f2a:	d007      	beq.n	8027f3c <memmove+0x22>
 8027f2c:	5ccc      	ldrb	r4, [r1, r3]
 8027f2e:	54c4      	strb	r4, [r0, r3]
 8027f30:	3301      	adds	r3, #1
 8027f32:	e7f9      	b.n	8027f28 <memmove+0xe>
 8027f34:	5c8b      	ldrb	r3, [r1, r2]
 8027f36:	5483      	strb	r3, [r0, r2]
 8027f38:	3a01      	subs	r2, #1
 8027f3a:	d2fb      	bcs.n	8027f34 <memmove+0x1a>
 8027f3c:	bd10      	pop	{r4, pc}
	...

08027f40 <_fstat_r>:
 8027f40:	2300      	movs	r3, #0
 8027f42:	b570      	push	{r4, r5, r6, lr}
 8027f44:	4d06      	ldr	r5, [pc, #24]	@ (8027f60 <_fstat_r+0x20>)
 8027f46:	0004      	movs	r4, r0
 8027f48:	0008      	movs	r0, r1
 8027f4a:	0011      	movs	r1, r2
 8027f4c:	602b      	str	r3, [r5, #0]
 8027f4e:	f7ea fc57 	bl	8012800 <_fstat>
 8027f52:	1c43      	adds	r3, r0, #1
 8027f54:	d103      	bne.n	8027f5e <_fstat_r+0x1e>
 8027f56:	682b      	ldr	r3, [r5, #0]
 8027f58:	2b00      	cmp	r3, #0
 8027f5a:	d000      	beq.n	8027f5e <_fstat_r+0x1e>
 8027f5c:	6023      	str	r3, [r4, #0]
 8027f5e:	bd70      	pop	{r4, r5, r6, pc}
 8027f60:	20003618 	.word	0x20003618

08027f64 <_isatty_r>:
 8027f64:	2300      	movs	r3, #0
 8027f66:	b570      	push	{r4, r5, r6, lr}
 8027f68:	4d06      	ldr	r5, [pc, #24]	@ (8027f84 <_isatty_r+0x20>)
 8027f6a:	0004      	movs	r4, r0
 8027f6c:	0008      	movs	r0, r1
 8027f6e:	602b      	str	r3, [r5, #0]
 8027f70:	f7ea fc54 	bl	801281c <_isatty>
 8027f74:	1c43      	adds	r3, r0, #1
 8027f76:	d103      	bne.n	8027f80 <_isatty_r+0x1c>
 8027f78:	682b      	ldr	r3, [r5, #0]
 8027f7a:	2b00      	cmp	r3, #0
 8027f7c:	d000      	beq.n	8027f80 <_isatty_r+0x1c>
 8027f7e:	6023      	str	r3, [r4, #0]
 8027f80:	bd70      	pop	{r4, r5, r6, pc}
 8027f82:	46c0      	nop			@ (mov r8, r8)
 8027f84:	20003618 	.word	0x20003618

08027f88 <_sbrk_r>:
 8027f88:	2300      	movs	r3, #0
 8027f8a:	b570      	push	{r4, r5, r6, lr}
 8027f8c:	4d06      	ldr	r5, [pc, #24]	@ (8027fa8 <_sbrk_r+0x20>)
 8027f8e:	0004      	movs	r4, r0
 8027f90:	0008      	movs	r0, r1
 8027f92:	602b      	str	r3, [r5, #0]
 8027f94:	f7ea fc56 	bl	8012844 <_sbrk>
 8027f98:	1c43      	adds	r3, r0, #1
 8027f9a:	d103      	bne.n	8027fa4 <_sbrk_r+0x1c>
 8027f9c:	682b      	ldr	r3, [r5, #0]
 8027f9e:	2b00      	cmp	r3, #0
 8027fa0:	d000      	beq.n	8027fa4 <_sbrk_r+0x1c>
 8027fa2:	6023      	str	r3, [r4, #0]
 8027fa4:	bd70      	pop	{r4, r5, r6, pc}
 8027fa6:	46c0      	nop			@ (mov r8, r8)
 8027fa8:	20003618 	.word	0x20003618

08027fac <__assert_func>:
 8027fac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8027fae:	0014      	movs	r4, r2
 8027fb0:	001a      	movs	r2, r3
 8027fb2:	4b09      	ldr	r3, [pc, #36]	@ (8027fd8 <__assert_func+0x2c>)
 8027fb4:	0005      	movs	r5, r0
 8027fb6:	681b      	ldr	r3, [r3, #0]
 8027fb8:	000e      	movs	r6, r1
 8027fba:	68d8      	ldr	r0, [r3, #12]
 8027fbc:	4b07      	ldr	r3, [pc, #28]	@ (8027fdc <__assert_func+0x30>)
 8027fbe:	2c00      	cmp	r4, #0
 8027fc0:	d101      	bne.n	8027fc6 <__assert_func+0x1a>
 8027fc2:	4b07      	ldr	r3, [pc, #28]	@ (8027fe0 <__assert_func+0x34>)
 8027fc4:	001c      	movs	r4, r3
 8027fc6:	4907      	ldr	r1, [pc, #28]	@ (8027fe4 <__assert_func+0x38>)
 8027fc8:	9301      	str	r3, [sp, #4]
 8027fca:	9402      	str	r4, [sp, #8]
 8027fcc:	002b      	movs	r3, r5
 8027fce:	9600      	str	r6, [sp, #0]
 8027fd0:	f000 f868 	bl	80280a4 <fiprintf>
 8027fd4:	f000 f876 	bl	80280c4 <abort>
 8027fd8:	200003e0 	.word	0x200003e0
 8027fdc:	0802e165 	.word	0x0802e165
 8027fe0:	0802e1a0 	.word	0x0802e1a0
 8027fe4:	0802e172 	.word	0x0802e172

08027fe8 <_calloc_r>:
 8027fe8:	b570      	push	{r4, r5, r6, lr}
 8027fea:	0c0b      	lsrs	r3, r1, #16
 8027fec:	0c15      	lsrs	r5, r2, #16
 8027fee:	2b00      	cmp	r3, #0
 8027ff0:	d11e      	bne.n	8028030 <_calloc_r+0x48>
 8027ff2:	2d00      	cmp	r5, #0
 8027ff4:	d10c      	bne.n	8028010 <_calloc_r+0x28>
 8027ff6:	b289      	uxth	r1, r1
 8027ff8:	b294      	uxth	r4, r2
 8027ffa:	434c      	muls	r4, r1
 8027ffc:	0021      	movs	r1, r4
 8027ffe:	f7fe fe5b 	bl	8026cb8 <_malloc_r>
 8028002:	1e05      	subs	r5, r0, #0
 8028004:	d01b      	beq.n	802803e <_calloc_r+0x56>
 8028006:	0022      	movs	r2, r4
 8028008:	2100      	movs	r1, #0
 802800a:	f7fd fb23 	bl	8025654 <memset>
 802800e:	e016      	b.n	802803e <_calloc_r+0x56>
 8028010:	1c2b      	adds	r3, r5, #0
 8028012:	1c0c      	adds	r4, r1, #0
 8028014:	b289      	uxth	r1, r1
 8028016:	b292      	uxth	r2, r2
 8028018:	434a      	muls	r2, r1
 802801a:	b29b      	uxth	r3, r3
 802801c:	b2a1      	uxth	r1, r4
 802801e:	4359      	muls	r1, r3
 8028020:	0c14      	lsrs	r4, r2, #16
 8028022:	190c      	adds	r4, r1, r4
 8028024:	0c23      	lsrs	r3, r4, #16
 8028026:	d107      	bne.n	8028038 <_calloc_r+0x50>
 8028028:	0424      	lsls	r4, r4, #16
 802802a:	b292      	uxth	r2, r2
 802802c:	4314      	orrs	r4, r2
 802802e:	e7e5      	b.n	8027ffc <_calloc_r+0x14>
 8028030:	2d00      	cmp	r5, #0
 8028032:	d101      	bne.n	8028038 <_calloc_r+0x50>
 8028034:	1c14      	adds	r4, r2, #0
 8028036:	e7ed      	b.n	8028014 <_calloc_r+0x2c>
 8028038:	230c      	movs	r3, #12
 802803a:	2500      	movs	r5, #0
 802803c:	6003      	str	r3, [r0, #0]
 802803e:	0028      	movs	r0, r5
 8028040:	bd70      	pop	{r4, r5, r6, pc}

08028042 <_realloc_r>:
 8028042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028044:	0006      	movs	r6, r0
 8028046:	000c      	movs	r4, r1
 8028048:	0015      	movs	r5, r2
 802804a:	2900      	cmp	r1, #0
 802804c:	d105      	bne.n	802805a <_realloc_r+0x18>
 802804e:	0011      	movs	r1, r2
 8028050:	f7fe fe32 	bl	8026cb8 <_malloc_r>
 8028054:	0004      	movs	r4, r0
 8028056:	0020      	movs	r0, r4
 8028058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802805a:	2a00      	cmp	r2, #0
 802805c:	d103      	bne.n	8028066 <_realloc_r+0x24>
 802805e:	f7fe fa5b 	bl	8026518 <_free_r>
 8028062:	002c      	movs	r4, r5
 8028064:	e7f7      	b.n	8028056 <_realloc_r+0x14>
 8028066:	f000 f834 	bl	80280d2 <_malloc_usable_size_r>
 802806a:	0007      	movs	r7, r0
 802806c:	4285      	cmp	r5, r0
 802806e:	d802      	bhi.n	8028076 <_realloc_r+0x34>
 8028070:	0843      	lsrs	r3, r0, #1
 8028072:	42ab      	cmp	r3, r5
 8028074:	d3ef      	bcc.n	8028056 <_realloc_r+0x14>
 8028076:	0029      	movs	r1, r5
 8028078:	0030      	movs	r0, r6
 802807a:	f7fe fe1d 	bl	8026cb8 <_malloc_r>
 802807e:	9001      	str	r0, [sp, #4]
 8028080:	2800      	cmp	r0, #0
 8028082:	d101      	bne.n	8028088 <_realloc_r+0x46>
 8028084:	9c01      	ldr	r4, [sp, #4]
 8028086:	e7e6      	b.n	8028056 <_realloc_r+0x14>
 8028088:	002a      	movs	r2, r5
 802808a:	42bd      	cmp	r5, r7
 802808c:	d900      	bls.n	8028090 <_realloc_r+0x4e>
 802808e:	003a      	movs	r2, r7
 8028090:	0021      	movs	r1, r4
 8028092:	9801      	ldr	r0, [sp, #4]
 8028094:	f7fd fbba 	bl	802580c <memcpy>
 8028098:	0021      	movs	r1, r4
 802809a:	0030      	movs	r0, r6
 802809c:	f7fe fa3c 	bl	8026518 <_free_r>
 80280a0:	e7f0      	b.n	8028084 <_realloc_r+0x42>
	...

080280a4 <fiprintf>:
 80280a4:	b40e      	push	{r1, r2, r3}
 80280a6:	b517      	push	{r0, r1, r2, r4, lr}
 80280a8:	4c05      	ldr	r4, [pc, #20]	@ (80280c0 <fiprintf+0x1c>)
 80280aa:	ab05      	add	r3, sp, #20
 80280ac:	cb04      	ldmia	r3!, {r2}
 80280ae:	0001      	movs	r1, r0
 80280b0:	6820      	ldr	r0, [r4, #0]
 80280b2:	9301      	str	r3, [sp, #4]
 80280b4:	f7ff fcf8 	bl	8027aa8 <_vfiprintf_r>
 80280b8:	bc1e      	pop	{r1, r2, r3, r4}
 80280ba:	bc08      	pop	{r3}
 80280bc:	b003      	add	sp, #12
 80280be:	4718      	bx	r3
 80280c0:	200003e0 	.word	0x200003e0

080280c4 <abort>:
 80280c4:	2006      	movs	r0, #6
 80280c6:	b510      	push	{r4, lr}
 80280c8:	f000 f834 	bl	8028134 <raise>
 80280cc:	2001      	movs	r0, #1
 80280ce:	f7ea fb63 	bl	8012798 <_exit>

080280d2 <_malloc_usable_size_r>:
 80280d2:	1f0b      	subs	r3, r1, #4
 80280d4:	681b      	ldr	r3, [r3, #0]
 80280d6:	1f18      	subs	r0, r3, #4
 80280d8:	2b00      	cmp	r3, #0
 80280da:	da01      	bge.n	80280e0 <_malloc_usable_size_r+0xe>
 80280dc:	580b      	ldr	r3, [r1, r0]
 80280de:	18c0      	adds	r0, r0, r3
 80280e0:	4770      	bx	lr

080280e2 <_raise_r>:
 80280e2:	b570      	push	{r4, r5, r6, lr}
 80280e4:	0004      	movs	r4, r0
 80280e6:	000d      	movs	r5, r1
 80280e8:	291f      	cmp	r1, #31
 80280ea:	d904      	bls.n	80280f6 <_raise_r+0x14>
 80280ec:	2316      	movs	r3, #22
 80280ee:	6003      	str	r3, [r0, #0]
 80280f0:	2001      	movs	r0, #1
 80280f2:	4240      	negs	r0, r0
 80280f4:	bd70      	pop	{r4, r5, r6, pc}
 80280f6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80280f8:	2b00      	cmp	r3, #0
 80280fa:	d004      	beq.n	8028106 <_raise_r+0x24>
 80280fc:	008a      	lsls	r2, r1, #2
 80280fe:	189b      	adds	r3, r3, r2
 8028100:	681a      	ldr	r2, [r3, #0]
 8028102:	2a00      	cmp	r2, #0
 8028104:	d108      	bne.n	8028118 <_raise_r+0x36>
 8028106:	0020      	movs	r0, r4
 8028108:	f000 f830 	bl	802816c <_getpid_r>
 802810c:	002a      	movs	r2, r5
 802810e:	0001      	movs	r1, r0
 8028110:	0020      	movs	r0, r4
 8028112:	f000 f819 	bl	8028148 <_kill_r>
 8028116:	e7ed      	b.n	80280f4 <_raise_r+0x12>
 8028118:	2a01      	cmp	r2, #1
 802811a:	d009      	beq.n	8028130 <_raise_r+0x4e>
 802811c:	1c51      	adds	r1, r2, #1
 802811e:	d103      	bne.n	8028128 <_raise_r+0x46>
 8028120:	2316      	movs	r3, #22
 8028122:	6003      	str	r3, [r0, #0]
 8028124:	2001      	movs	r0, #1
 8028126:	e7e5      	b.n	80280f4 <_raise_r+0x12>
 8028128:	2100      	movs	r1, #0
 802812a:	0028      	movs	r0, r5
 802812c:	6019      	str	r1, [r3, #0]
 802812e:	4790      	blx	r2
 8028130:	2000      	movs	r0, #0
 8028132:	e7df      	b.n	80280f4 <_raise_r+0x12>

08028134 <raise>:
 8028134:	b510      	push	{r4, lr}
 8028136:	4b03      	ldr	r3, [pc, #12]	@ (8028144 <raise+0x10>)
 8028138:	0001      	movs	r1, r0
 802813a:	6818      	ldr	r0, [r3, #0]
 802813c:	f7ff ffd1 	bl	80280e2 <_raise_r>
 8028140:	bd10      	pop	{r4, pc}
 8028142:	46c0      	nop			@ (mov r8, r8)
 8028144:	200003e0 	.word	0x200003e0

08028148 <_kill_r>:
 8028148:	2300      	movs	r3, #0
 802814a:	b570      	push	{r4, r5, r6, lr}
 802814c:	4d06      	ldr	r5, [pc, #24]	@ (8028168 <_kill_r+0x20>)
 802814e:	0004      	movs	r4, r0
 8028150:	0008      	movs	r0, r1
 8028152:	0011      	movs	r1, r2
 8028154:	602b      	str	r3, [r5, #0]
 8028156:	f7ea fb0f 	bl	8012778 <_kill>
 802815a:	1c43      	adds	r3, r0, #1
 802815c:	d103      	bne.n	8028166 <_kill_r+0x1e>
 802815e:	682b      	ldr	r3, [r5, #0]
 8028160:	2b00      	cmp	r3, #0
 8028162:	d000      	beq.n	8028166 <_kill_r+0x1e>
 8028164:	6023      	str	r3, [r4, #0]
 8028166:	bd70      	pop	{r4, r5, r6, pc}
 8028168:	20003618 	.word	0x20003618

0802816c <_getpid_r>:
 802816c:	b510      	push	{r4, lr}
 802816e:	f7ea fafd 	bl	801276c <_getpid>
 8028172:	bd10      	pop	{r4, pc}

08028174 <log>:
 8028174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028176:	0004      	movs	r4, r0
 8028178:	000d      	movs	r5, r1
 802817a:	f000 f98d 	bl	8028498 <__ieee754_log>
 802817e:	0022      	movs	r2, r4
 8028180:	0006      	movs	r6, r0
 8028182:	000f      	movs	r7, r1
 8028184:	002b      	movs	r3, r5
 8028186:	0020      	movs	r0, r4
 8028188:	0029      	movs	r1, r5
 802818a:	f7db fad3 	bl	8003734 <__aeabi_dcmpun>
 802818e:	2800      	cmp	r0, #0
 8028190:	d115      	bne.n	80281be <log+0x4a>
 8028192:	2200      	movs	r2, #0
 8028194:	2300      	movs	r3, #0
 8028196:	0020      	movs	r0, r4
 8028198:	0029      	movs	r1, r5
 802819a:	f7d8 f9a3 	bl	80004e4 <__aeabi_dcmpgt>
 802819e:	2800      	cmp	r0, #0
 80281a0:	d10d      	bne.n	80281be <log+0x4a>
 80281a2:	2200      	movs	r2, #0
 80281a4:	2300      	movs	r3, #0
 80281a6:	0020      	movs	r0, r4
 80281a8:	0029      	movs	r1, r5
 80281aa:	f7d8 f981 	bl	80004b0 <__aeabi_dcmpeq>
 80281ae:	2800      	cmp	r0, #0
 80281b0:	d008      	beq.n	80281c4 <log+0x50>
 80281b2:	f7fd faf3 	bl	802579c <__errno>
 80281b6:	2322      	movs	r3, #34	@ 0x22
 80281b8:	2600      	movs	r6, #0
 80281ba:	4f07      	ldr	r7, [pc, #28]	@ (80281d8 <log+0x64>)
 80281bc:	6003      	str	r3, [r0, #0]
 80281be:	0030      	movs	r0, r6
 80281c0:	0039      	movs	r1, r7
 80281c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80281c4:	f7fd faea 	bl	802579c <__errno>
 80281c8:	2321      	movs	r3, #33	@ 0x21
 80281ca:	6003      	str	r3, [r0, #0]
 80281cc:	4803      	ldr	r0, [pc, #12]	@ (80281dc <log+0x68>)
 80281ce:	f7fd fb27 	bl	8025820 <nan>
 80281d2:	0006      	movs	r6, r0
 80281d4:	000f      	movs	r7, r1
 80281d6:	e7f2      	b.n	80281be <log+0x4a>
 80281d8:	fff00000 	.word	0xfff00000
 80281dc:	0802e1a0 	.word	0x0802e1a0

080281e0 <pow>:
 80281e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80281e2:	0014      	movs	r4, r2
 80281e4:	001d      	movs	r5, r3
 80281e6:	9000      	str	r0, [sp, #0]
 80281e8:	9101      	str	r1, [sp, #4]
 80281ea:	f000 fb07 	bl	80287fc <__ieee754_pow>
 80281ee:	0022      	movs	r2, r4
 80281f0:	0006      	movs	r6, r0
 80281f2:	000f      	movs	r7, r1
 80281f4:	002b      	movs	r3, r5
 80281f6:	0020      	movs	r0, r4
 80281f8:	0029      	movs	r1, r5
 80281fa:	f7db fa9b 	bl	8003734 <__aeabi_dcmpun>
 80281fe:	2800      	cmp	r0, #0
 8028200:	d13f      	bne.n	8028282 <pow+0xa2>
 8028202:	9800      	ldr	r0, [sp, #0]
 8028204:	9901      	ldr	r1, [sp, #4]
 8028206:	2200      	movs	r2, #0
 8028208:	2300      	movs	r3, #0
 802820a:	f7d8 f951 	bl	80004b0 <__aeabi_dcmpeq>
 802820e:	2800      	cmp	r0, #0
 8028210:	d019      	beq.n	8028246 <pow+0x66>
 8028212:	2200      	movs	r2, #0
 8028214:	2300      	movs	r3, #0
 8028216:	0020      	movs	r0, r4
 8028218:	0029      	movs	r1, r5
 802821a:	f7d8 f949 	bl	80004b0 <__aeabi_dcmpeq>
 802821e:	2800      	cmp	r0, #0
 8028220:	d146      	bne.n	80282b0 <pow+0xd0>
 8028222:	0020      	movs	r0, r4
 8028224:	0029      	movs	r1, r5
 8028226:	f000 f88d 	bl	8028344 <finite>
 802822a:	2800      	cmp	r0, #0
 802822c:	d029      	beq.n	8028282 <pow+0xa2>
 802822e:	2200      	movs	r2, #0
 8028230:	2300      	movs	r3, #0
 8028232:	0020      	movs	r0, r4
 8028234:	0029      	movs	r1, r5
 8028236:	f7d8 f941 	bl	80004bc <__aeabi_dcmplt>
 802823a:	2800      	cmp	r0, #0
 802823c:	d021      	beq.n	8028282 <pow+0xa2>
 802823e:	f7fd faad 	bl	802579c <__errno>
 8028242:	2322      	movs	r3, #34	@ 0x22
 8028244:	e01c      	b.n	8028280 <pow+0xa0>
 8028246:	0030      	movs	r0, r6
 8028248:	0039      	movs	r1, r7
 802824a:	f000 f87b 	bl	8028344 <finite>
 802824e:	2800      	cmp	r0, #0
 8028250:	d11b      	bne.n	802828a <pow+0xaa>
 8028252:	9800      	ldr	r0, [sp, #0]
 8028254:	9901      	ldr	r1, [sp, #4]
 8028256:	f000 f875 	bl	8028344 <finite>
 802825a:	2800      	cmp	r0, #0
 802825c:	d015      	beq.n	802828a <pow+0xaa>
 802825e:	0020      	movs	r0, r4
 8028260:	0029      	movs	r1, r5
 8028262:	f000 f86f 	bl	8028344 <finite>
 8028266:	2800      	cmp	r0, #0
 8028268:	d00f      	beq.n	802828a <pow+0xaa>
 802826a:	0032      	movs	r2, r6
 802826c:	003b      	movs	r3, r7
 802826e:	0030      	movs	r0, r6
 8028270:	0039      	movs	r1, r7
 8028272:	f7db fa5f 	bl	8003734 <__aeabi_dcmpun>
 8028276:	2800      	cmp	r0, #0
 8028278:	d0e1      	beq.n	802823e <pow+0x5e>
 802827a:	f7fd fa8f 	bl	802579c <__errno>
 802827e:	2321      	movs	r3, #33	@ 0x21
 8028280:	6003      	str	r3, [r0, #0]
 8028282:	0030      	movs	r0, r6
 8028284:	0039      	movs	r1, r7
 8028286:	b003      	add	sp, #12
 8028288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802828a:	2200      	movs	r2, #0
 802828c:	2300      	movs	r3, #0
 802828e:	0030      	movs	r0, r6
 8028290:	0039      	movs	r1, r7
 8028292:	f7d8 f90d 	bl	80004b0 <__aeabi_dcmpeq>
 8028296:	2800      	cmp	r0, #0
 8028298:	d0f3      	beq.n	8028282 <pow+0xa2>
 802829a:	9800      	ldr	r0, [sp, #0]
 802829c:	9901      	ldr	r1, [sp, #4]
 802829e:	f000 f851 	bl	8028344 <finite>
 80282a2:	2800      	cmp	r0, #0
 80282a4:	d0ed      	beq.n	8028282 <pow+0xa2>
 80282a6:	0020      	movs	r0, r4
 80282a8:	0029      	movs	r1, r5
 80282aa:	f000 f84b 	bl	8028344 <finite>
 80282ae:	e7c4      	b.n	802823a <pow+0x5a>
 80282b0:	2600      	movs	r6, #0
 80282b2:	4f01      	ldr	r7, [pc, #4]	@ (80282b8 <pow+0xd8>)
 80282b4:	e7e5      	b.n	8028282 <pow+0xa2>
 80282b6:	46c0      	nop			@ (mov r8, r8)
 80282b8:	3ff00000 	.word	0x3ff00000

080282bc <expf>:
 80282bc:	b570      	push	{r4, r5, r6, lr}
 80282be:	1c04      	adds	r4, r0, #0
 80282c0:	f000 ffb8 	bl	8029234 <__ieee754_expf>
 80282c4:	1c05      	adds	r5, r0, #0
 80282c6:	1c20      	adds	r0, r4, #0
 80282c8:	f000 f844 	bl	8028354 <finitef>
 80282cc:	2800      	cmp	r0, #0
 80282ce:	d00b      	beq.n	80282e8 <expf+0x2c>
 80282d0:	490c      	ldr	r1, [pc, #48]	@ (8028304 <expf+0x48>)
 80282d2:	1c20      	adds	r0, r4, #0
 80282d4:	f7d8 f940 	bl	8000558 <__aeabi_fcmpgt>
 80282d8:	2800      	cmp	r0, #0
 80282da:	d007      	beq.n	80282ec <expf+0x30>
 80282dc:	f7fd fa5e 	bl	802579c <__errno>
 80282e0:	25ff      	movs	r5, #255	@ 0xff
 80282e2:	2322      	movs	r3, #34	@ 0x22
 80282e4:	05ed      	lsls	r5, r5, #23
 80282e6:	6003      	str	r3, [r0, #0]
 80282e8:	1c28      	adds	r0, r5, #0
 80282ea:	bd70      	pop	{r4, r5, r6, pc}
 80282ec:	4906      	ldr	r1, [pc, #24]	@ (8028308 <expf+0x4c>)
 80282ee:	1c20      	adds	r0, r4, #0
 80282f0:	f7d8 f91e 	bl	8000530 <__aeabi_fcmplt>
 80282f4:	2800      	cmp	r0, #0
 80282f6:	d0f7      	beq.n	80282e8 <expf+0x2c>
 80282f8:	f7fd fa50 	bl	802579c <__errno>
 80282fc:	2322      	movs	r3, #34	@ 0x22
 80282fe:	2500      	movs	r5, #0
 8028300:	6003      	str	r3, [r0, #0]
 8028302:	e7f1      	b.n	80282e8 <expf+0x2c>
 8028304:	42b17217 	.word	0x42b17217
 8028308:	c2cff1b5 	.word	0xc2cff1b5

0802830c <sqrtf>:
 802830c:	b570      	push	{r4, r5, r6, lr}
 802830e:	1c05      	adds	r5, r0, #0
 8028310:	f000 f82a 	bl	8028368 <__ieee754_sqrtf>
 8028314:	1c29      	adds	r1, r5, #0
 8028316:	1c04      	adds	r4, r0, #0
 8028318:	1c28      	adds	r0, r5, #0
 802831a:	f7d9 fa4f 	bl	80017bc <__aeabi_fcmpun>
 802831e:	2800      	cmp	r0, #0
 8028320:	d10e      	bne.n	8028340 <sqrtf+0x34>
 8028322:	2100      	movs	r1, #0
 8028324:	1c28      	adds	r0, r5, #0
 8028326:	f7d8 f903 	bl	8000530 <__aeabi_fcmplt>
 802832a:	2800      	cmp	r0, #0
 802832c:	d008      	beq.n	8028340 <sqrtf+0x34>
 802832e:	f7fd fa35 	bl	802579c <__errno>
 8028332:	2321      	movs	r3, #33	@ 0x21
 8028334:	2100      	movs	r1, #0
 8028336:	6003      	str	r3, [r0, #0]
 8028338:	1c08      	adds	r0, r1, #0
 802833a:	f7d8 fcb3 	bl	8000ca4 <__aeabi_fdiv>
 802833e:	1c04      	adds	r4, r0, #0
 8028340:	1c20      	adds	r0, r4, #0
 8028342:	bd70      	pop	{r4, r5, r6, pc}

08028344 <finite>:
 8028344:	4b02      	ldr	r3, [pc, #8]	@ (8028350 <finite+0xc>)
 8028346:	0048      	lsls	r0, r1, #1
 8028348:	0840      	lsrs	r0, r0, #1
 802834a:	18c0      	adds	r0, r0, r3
 802834c:	0fc0      	lsrs	r0, r0, #31
 802834e:	4770      	bx	lr
 8028350:	80100000 	.word	0x80100000

08028354 <finitef>:
 8028354:	22ff      	movs	r2, #255	@ 0xff
 8028356:	0043      	lsls	r3, r0, #1
 8028358:	085b      	lsrs	r3, r3, #1
 802835a:	2001      	movs	r0, #1
 802835c:	05d2      	lsls	r2, r2, #23
 802835e:	4293      	cmp	r3, r2
 8028360:	db00      	blt.n	8028364 <finitef+0x10>
 8028362:	2000      	movs	r0, #0
 8028364:	4770      	bx	lr
	...

08028368 <__ieee754_sqrtf>:
 8028368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802836a:	21ff      	movs	r1, #255	@ 0xff
 802836c:	0042      	lsls	r2, r0, #1
 802836e:	0003      	movs	r3, r0
 8028370:	1c04      	adds	r4, r0, #0
 8028372:	0852      	lsrs	r2, r2, #1
 8028374:	05c9      	lsls	r1, r1, #23
 8028376:	428a      	cmp	r2, r1
 8028378:	d309      	bcc.n	802838e <__ieee754_sqrtf+0x26>
 802837a:	1c01      	adds	r1, r0, #0
 802837c:	f7d8 fe60 	bl	8001040 <__aeabi_fmul>
 8028380:	1c01      	adds	r1, r0, #0
 8028382:	1c20      	adds	r0, r4, #0
 8028384:	f7d8 fa9c 	bl	80008c0 <__aeabi_fadd>
 8028388:	1c04      	adds	r4, r0, #0
 802838a:	1c20      	adds	r0, r4, #0
 802838c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802838e:	2a00      	cmp	r2, #0
 8028390:	d0fb      	beq.n	802838a <__ieee754_sqrtf+0x22>
 8028392:	2800      	cmp	r0, #0
 8028394:	da06      	bge.n	80283a4 <__ieee754_sqrtf+0x3c>
 8028396:	1c01      	adds	r1, r0, #0
 8028398:	f7d8 ffac 	bl	80012f4 <__aeabi_fsub>
 802839c:	1c01      	adds	r1, r0, #0
 802839e:	f7d8 fc81 	bl	8000ca4 <__aeabi_fdiv>
 80283a2:	e7f1      	b.n	8028388 <__ieee754_sqrtf+0x20>
 80283a4:	0002      	movs	r2, r0
 80283a6:	400a      	ands	r2, r1
 80283a8:	4208      	tst	r0, r1
 80283aa:	d040      	beq.n	802842e <__ieee754_sqrtf+0xc6>
 80283ac:	15c1      	asrs	r1, r0, #23
 80283ae:	2280      	movs	r2, #128	@ 0x80
 80283b0:	000f      	movs	r7, r1
 80283b2:	025b      	lsls	r3, r3, #9
 80283b4:	0a5b      	lsrs	r3, r3, #9
 80283b6:	0412      	lsls	r2, r2, #16
 80283b8:	3f7f      	subs	r7, #127	@ 0x7f
 80283ba:	4313      	orrs	r3, r2
 80283bc:	07c9      	lsls	r1, r1, #31
 80283be:	d400      	bmi.n	80283c2 <__ieee754_sqrtf+0x5a>
 80283c0:	005b      	lsls	r3, r3, #1
 80283c2:	2400      	movs	r4, #0
 80283c4:	2180      	movs	r1, #128	@ 0x80
 80283c6:	2019      	movs	r0, #25
 80283c8:	0026      	movs	r6, r4
 80283ca:	107f      	asrs	r7, r7, #1
 80283cc:	005b      	lsls	r3, r3, #1
 80283ce:	0449      	lsls	r1, r1, #17
 80283d0:	1875      	adds	r5, r6, r1
 80283d2:	001a      	movs	r2, r3
 80283d4:	429d      	cmp	r5, r3
 80283d6:	dc02      	bgt.n	80283de <__ieee754_sqrtf+0x76>
 80283d8:	186e      	adds	r6, r5, r1
 80283da:	1b5a      	subs	r2, r3, r5
 80283dc:	1864      	adds	r4, r4, r1
 80283de:	3801      	subs	r0, #1
 80283e0:	0053      	lsls	r3, r2, #1
 80283e2:	0849      	lsrs	r1, r1, #1
 80283e4:	2800      	cmp	r0, #0
 80283e6:	d1f3      	bne.n	80283d0 <__ieee754_sqrtf+0x68>
 80283e8:	2a00      	cmp	r2, #0
 80283ea:	d019      	beq.n	8028420 <__ieee754_sqrtf+0xb8>
 80283ec:	4d16      	ldr	r5, [pc, #88]	@ (8028448 <__ieee754_sqrtf+0xe0>)
 80283ee:	4e17      	ldr	r6, [pc, #92]	@ (802844c <__ieee754_sqrtf+0xe4>)
 80283f0:	6828      	ldr	r0, [r5, #0]
 80283f2:	6831      	ldr	r1, [r6, #0]
 80283f4:	682b      	ldr	r3, [r5, #0]
 80283f6:	9301      	str	r3, [sp, #4]
 80283f8:	f7d8 ff7c 	bl	80012f4 <__aeabi_fsub>
 80283fc:	1c01      	adds	r1, r0, #0
 80283fe:	9801      	ldr	r0, [sp, #4]
 8028400:	f7d8 f8a0 	bl	8000544 <__aeabi_fcmple>
 8028404:	2800      	cmp	r0, #0
 8028406:	d00b      	beq.n	8028420 <__ieee754_sqrtf+0xb8>
 8028408:	6828      	ldr	r0, [r5, #0]
 802840a:	6831      	ldr	r1, [r6, #0]
 802840c:	f7d8 fa58 	bl	80008c0 <__aeabi_fadd>
 8028410:	682d      	ldr	r5, [r5, #0]
 8028412:	1c01      	adds	r1, r0, #0
 8028414:	1c28      	adds	r0, r5, #0
 8028416:	f7d8 f88b 	bl	8000530 <__aeabi_fcmplt>
 802841a:	2800      	cmp	r0, #0
 802841c:	d010      	beq.n	8028440 <__ieee754_sqrtf+0xd8>
 802841e:	3402      	adds	r4, #2
 8028420:	23fc      	movs	r3, #252	@ 0xfc
 8028422:	1064      	asrs	r4, r4, #1
 8028424:	059b      	lsls	r3, r3, #22
 8028426:	18e3      	adds	r3, r4, r3
 8028428:	05fc      	lsls	r4, r7, #23
 802842a:	18e4      	adds	r4, r4, r3
 802842c:	e7ad      	b.n	802838a <__ieee754_sqrtf+0x22>
 802842e:	2080      	movs	r0, #128	@ 0x80
 8028430:	0400      	lsls	r0, r0, #16
 8028432:	005b      	lsls	r3, r3, #1
 8028434:	0011      	movs	r1, r2
 8028436:	3201      	adds	r2, #1
 8028438:	4203      	tst	r3, r0
 802843a:	d0fa      	beq.n	8028432 <__ieee754_sqrtf+0xca>
 802843c:	4249      	negs	r1, r1
 802843e:	e7b6      	b.n	80283ae <__ieee754_sqrtf+0x46>
 8028440:	2301      	movs	r3, #1
 8028442:	3401      	adds	r4, #1
 8028444:	439c      	bics	r4, r3
 8028446:	e7eb      	b.n	8028420 <__ieee754_sqrtf+0xb8>
 8028448:	0802e3fc 	.word	0x0802e3fc
 802844c:	0802e3f8 	.word	0x0802e3f8

08028450 <roundf>:
 8028450:	0dc3      	lsrs	r3, r0, #23
 8028452:	b2db      	uxtb	r3, r3
 8028454:	3b7f      	subs	r3, #127	@ 0x7f
 8028456:	0002      	movs	r2, r0
 8028458:	b510      	push	{r4, lr}
 802845a:	2b16      	cmp	r3, #22
 802845c:	dc13      	bgt.n	8028486 <roundf+0x36>
 802845e:	2b00      	cmp	r3, #0
 8028460:	da07      	bge.n	8028472 <roundf+0x22>
 8028462:	0fc2      	lsrs	r2, r0, #31
 8028464:	07d0      	lsls	r0, r2, #31
 8028466:	3301      	adds	r3, #1
 8028468:	d102      	bne.n	8028470 <roundf+0x20>
 802846a:	23fe      	movs	r3, #254	@ 0xfe
 802846c:	059b      	lsls	r3, r3, #22
 802846e:	4318      	orrs	r0, r3
 8028470:	bd10      	pop	{r4, pc}
 8028472:	4908      	ldr	r1, [pc, #32]	@ (8028494 <roundf+0x44>)
 8028474:	4119      	asrs	r1, r3
 8028476:	4208      	tst	r0, r1
 8028478:	d0fa      	beq.n	8028470 <roundf+0x20>
 802847a:	2080      	movs	r0, #128	@ 0x80
 802847c:	03c0      	lsls	r0, r0, #15
 802847e:	4118      	asrs	r0, r3
 8028480:	1880      	adds	r0, r0, r2
 8028482:	4388      	bics	r0, r1
 8028484:	e7f4      	b.n	8028470 <roundf+0x20>
 8028486:	2b80      	cmp	r3, #128	@ 0x80
 8028488:	d1f2      	bne.n	8028470 <roundf+0x20>
 802848a:	1c01      	adds	r1, r0, #0
 802848c:	f7d8 fa18 	bl	80008c0 <__aeabi_fadd>
 8028490:	e7ee      	b.n	8028470 <roundf+0x20>
 8028492:	46c0      	nop			@ (mov r8, r8)
 8028494:	007fffff 	.word	0x007fffff

08028498 <__ieee754_log>:
 8028498:	2380      	movs	r3, #128	@ 0x80
 802849a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802849c:	035b      	lsls	r3, r3, #13
 802849e:	000e      	movs	r6, r1
 80284a0:	b08d      	sub	sp, #52	@ 0x34
 80284a2:	4299      	cmp	r1, r3
 80284a4:	da23      	bge.n	80284ee <__ieee754_log+0x56>
 80284a6:	004b      	lsls	r3, r1, #1
 80284a8:	085b      	lsrs	r3, r3, #1
 80284aa:	4303      	orrs	r3, r0
 80284ac:	d107      	bne.n	80284be <__ieee754_log+0x26>
 80284ae:	2200      	movs	r2, #0
 80284b0:	2300      	movs	r3, #0
 80284b2:	2000      	movs	r0, #0
 80284b4:	49b4      	ldr	r1, [pc, #720]	@ (8028788 <__ieee754_log+0x2f0>)
 80284b6:	f7d9 fe13 	bl	80020e0 <__aeabi_ddiv>
 80284ba:	b00d      	add	sp, #52	@ 0x34
 80284bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80284be:	2900      	cmp	r1, #0
 80284c0:	da06      	bge.n	80284d0 <__ieee754_log+0x38>
 80284c2:	0002      	movs	r2, r0
 80284c4:	000b      	movs	r3, r1
 80284c6:	f7da fd2b 	bl	8002f20 <__aeabi_dsub>
 80284ca:	2200      	movs	r2, #0
 80284cc:	2300      	movs	r3, #0
 80284ce:	e7f2      	b.n	80284b6 <__ieee754_log+0x1e>
 80284d0:	4bae      	ldr	r3, [pc, #696]	@ (802878c <__ieee754_log+0x2f4>)
 80284d2:	2200      	movs	r2, #0
 80284d4:	f7da fa3e 	bl	8002954 <__aeabi_dmul>
 80284d8:	2336      	movs	r3, #54	@ 0x36
 80284da:	000e      	movs	r6, r1
 80284dc:	425b      	negs	r3, r3
 80284de:	4aac      	ldr	r2, [pc, #688]	@ (8028790 <__ieee754_log+0x2f8>)
 80284e0:	4296      	cmp	r6, r2
 80284e2:	dd06      	ble.n	80284f2 <__ieee754_log+0x5a>
 80284e4:	0002      	movs	r2, r0
 80284e6:	000b      	movs	r3, r1
 80284e8:	f7d9 fa34 	bl	8001954 <__aeabi_dadd>
 80284ec:	e7e5      	b.n	80284ba <__ieee754_log+0x22>
 80284ee:	2300      	movs	r3, #0
 80284f0:	e7f5      	b.n	80284de <__ieee754_log+0x46>
 80284f2:	4ca8      	ldr	r4, [pc, #672]	@ (8028794 <__ieee754_log+0x2fc>)
 80284f4:	1532      	asrs	r2, r6, #20
 80284f6:	1912      	adds	r2, r2, r4
 80284f8:	0336      	lsls	r6, r6, #12
 80284fa:	4ca7      	ldr	r4, [pc, #668]	@ (8028798 <__ieee754_log+0x300>)
 80284fc:	18d2      	adds	r2, r2, r3
 80284fe:	0b33      	lsrs	r3, r6, #12
 8028500:	9302      	str	r3, [sp, #8]
 8028502:	191b      	adds	r3, r3, r4
 8028504:	2480      	movs	r4, #128	@ 0x80
 8028506:	0364      	lsls	r4, r4, #13
 8028508:	4023      	ands	r3, r4
 802850a:	4ca4      	ldr	r4, [pc, #656]	@ (802879c <__ieee754_log+0x304>)
 802850c:	9d02      	ldr	r5, [sp, #8]
 802850e:	405c      	eors	r4, r3
 8028510:	151b      	asrs	r3, r3, #20
 8028512:	189b      	adds	r3, r3, r2
 8028514:	4325      	orrs	r5, r4
 8028516:	2200      	movs	r2, #0
 8028518:	9300      	str	r3, [sp, #0]
 802851a:	0029      	movs	r1, r5
 802851c:	4b9f      	ldr	r3, [pc, #636]	@ (802879c <__ieee754_log+0x304>)
 802851e:	f7da fcff 	bl	8002f20 <__aeabi_dsub>
 8028522:	9b02      	ldr	r3, [sp, #8]
 8028524:	0006      	movs	r6, r0
 8028526:	3302      	adds	r3, #2
 8028528:	031b      	lsls	r3, r3, #12
 802852a:	000f      	movs	r7, r1
 802852c:	2200      	movs	r2, #0
 802852e:	0b1b      	lsrs	r3, r3, #12
 8028530:	2b02      	cmp	r3, #2
 8028532:	dc64      	bgt.n	80285fe <__ieee754_log+0x166>
 8028534:	2300      	movs	r3, #0
 8028536:	f7d7 ffbb 	bl	80004b0 <__aeabi_dcmpeq>
 802853a:	2800      	cmp	r0, #0
 802853c:	d019      	beq.n	8028572 <__ieee754_log+0xda>
 802853e:	9b00      	ldr	r3, [sp, #0]
 8028540:	2b00      	cmp	r3, #0
 8028542:	d100      	bne.n	8028546 <__ieee754_log+0xae>
 8028544:	e11c      	b.n	8028780 <__ieee754_log+0x2e8>
 8028546:	0018      	movs	r0, r3
 8028548:	f7db f952 	bl	80037f0 <__aeabi_i2d>
 802854c:	4a94      	ldr	r2, [pc, #592]	@ (80287a0 <__ieee754_log+0x308>)
 802854e:	4b95      	ldr	r3, [pc, #596]	@ (80287a4 <__ieee754_log+0x30c>)
 8028550:	0004      	movs	r4, r0
 8028552:	000d      	movs	r5, r1
 8028554:	f7da f9fe 	bl	8002954 <__aeabi_dmul>
 8028558:	4a93      	ldr	r2, [pc, #588]	@ (80287a8 <__ieee754_log+0x310>)
 802855a:	0006      	movs	r6, r0
 802855c:	000f      	movs	r7, r1
 802855e:	4b93      	ldr	r3, [pc, #588]	@ (80287ac <__ieee754_log+0x314>)
 8028560:	0020      	movs	r0, r4
 8028562:	0029      	movs	r1, r5
 8028564:	f7da f9f6 	bl	8002954 <__aeabi_dmul>
 8028568:	0002      	movs	r2, r0
 802856a:	000b      	movs	r3, r1
 802856c:	0030      	movs	r0, r6
 802856e:	0039      	movs	r1, r7
 8028570:	e7ba      	b.n	80284e8 <__ieee754_log+0x50>
 8028572:	4a8f      	ldr	r2, [pc, #572]	@ (80287b0 <__ieee754_log+0x318>)
 8028574:	4b8f      	ldr	r3, [pc, #572]	@ (80287b4 <__ieee754_log+0x31c>)
 8028576:	0030      	movs	r0, r6
 8028578:	0039      	movs	r1, r7
 802857a:	f7da f9eb 	bl	8002954 <__aeabi_dmul>
 802857e:	0002      	movs	r2, r0
 8028580:	000b      	movs	r3, r1
 8028582:	2000      	movs	r0, #0
 8028584:	498c      	ldr	r1, [pc, #560]	@ (80287b8 <__ieee754_log+0x320>)
 8028586:	f7da fccb 	bl	8002f20 <__aeabi_dsub>
 802858a:	0032      	movs	r2, r6
 802858c:	0004      	movs	r4, r0
 802858e:	000d      	movs	r5, r1
 8028590:	003b      	movs	r3, r7
 8028592:	0030      	movs	r0, r6
 8028594:	0039      	movs	r1, r7
 8028596:	f7da f9dd 	bl	8002954 <__aeabi_dmul>
 802859a:	000b      	movs	r3, r1
 802859c:	0002      	movs	r2, r0
 802859e:	0029      	movs	r1, r5
 80285a0:	0020      	movs	r0, r4
 80285a2:	f7da f9d7 	bl	8002954 <__aeabi_dmul>
 80285a6:	9b00      	ldr	r3, [sp, #0]
 80285a8:	9002      	str	r0, [sp, #8]
 80285aa:	9103      	str	r1, [sp, #12]
 80285ac:	2b00      	cmp	r3, #0
 80285ae:	d106      	bne.n	80285be <__ieee754_log+0x126>
 80285b0:	0002      	movs	r2, r0
 80285b2:	000b      	movs	r3, r1
 80285b4:	0030      	movs	r0, r6
 80285b6:	0039      	movs	r1, r7
 80285b8:	f7da fcb2 	bl	8002f20 <__aeabi_dsub>
 80285bc:	e77d      	b.n	80284ba <__ieee754_log+0x22>
 80285be:	9800      	ldr	r0, [sp, #0]
 80285c0:	f7db f916 	bl	80037f0 <__aeabi_i2d>
 80285c4:	4a76      	ldr	r2, [pc, #472]	@ (80287a0 <__ieee754_log+0x308>)
 80285c6:	4b77      	ldr	r3, [pc, #476]	@ (80287a4 <__ieee754_log+0x30c>)
 80285c8:	0004      	movs	r4, r0
 80285ca:	000d      	movs	r5, r1
 80285cc:	f7da f9c2 	bl	8002954 <__aeabi_dmul>
 80285d0:	4a75      	ldr	r2, [pc, #468]	@ (80287a8 <__ieee754_log+0x310>)
 80285d2:	9000      	str	r0, [sp, #0]
 80285d4:	9101      	str	r1, [sp, #4]
 80285d6:	4b75      	ldr	r3, [pc, #468]	@ (80287ac <__ieee754_log+0x314>)
 80285d8:	0020      	movs	r0, r4
 80285da:	0029      	movs	r1, r5
 80285dc:	f7da f9ba 	bl	8002954 <__aeabi_dmul>
 80285e0:	0002      	movs	r2, r0
 80285e2:	000b      	movs	r3, r1
 80285e4:	9802      	ldr	r0, [sp, #8]
 80285e6:	9903      	ldr	r1, [sp, #12]
 80285e8:	f7da fc9a 	bl	8002f20 <__aeabi_dsub>
 80285ec:	0032      	movs	r2, r6
 80285ee:	003b      	movs	r3, r7
 80285f0:	f7da fc96 	bl	8002f20 <__aeabi_dsub>
 80285f4:	0002      	movs	r2, r0
 80285f6:	000b      	movs	r3, r1
 80285f8:	9800      	ldr	r0, [sp, #0]
 80285fa:	9901      	ldr	r1, [sp, #4]
 80285fc:	e7dc      	b.n	80285b8 <__ieee754_log+0x120>
 80285fe:	2380      	movs	r3, #128	@ 0x80
 8028600:	05db      	lsls	r3, r3, #23
 8028602:	f7d9 f9a7 	bl	8001954 <__aeabi_dadd>
 8028606:	0002      	movs	r2, r0
 8028608:	000b      	movs	r3, r1
 802860a:	0030      	movs	r0, r6
 802860c:	0039      	movs	r1, r7
 802860e:	f7d9 fd67 	bl	80020e0 <__aeabi_ddiv>
 8028612:	9004      	str	r0, [sp, #16]
 8028614:	9105      	str	r1, [sp, #20]
 8028616:	9800      	ldr	r0, [sp, #0]
 8028618:	f7db f8ea 	bl	80037f0 <__aeabi_i2d>
 802861c:	9a04      	ldr	r2, [sp, #16]
 802861e:	9b05      	ldr	r3, [sp, #20]
 8028620:	9006      	str	r0, [sp, #24]
 8028622:	9107      	str	r1, [sp, #28]
 8028624:	0010      	movs	r0, r2
 8028626:	0019      	movs	r1, r3
 8028628:	f7da f994 	bl	8002954 <__aeabi_dmul>
 802862c:	4a63      	ldr	r2, [pc, #396]	@ (80287bc <__ieee754_log+0x324>)
 802862e:	9b02      	ldr	r3, [sp, #8]
 8028630:	4694      	mov	ip, r2
 8028632:	4463      	add	r3, ip
 8028634:	0002      	movs	r2, r0
 8028636:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028638:	000b      	movs	r3, r1
 802863a:	9008      	str	r0, [sp, #32]
 802863c:	9109      	str	r1, [sp, #36]	@ 0x24
 802863e:	f7da f989 	bl	8002954 <__aeabi_dmul>
 8028642:	0004      	movs	r4, r0
 8028644:	000d      	movs	r5, r1
 8028646:	4a5e      	ldr	r2, [pc, #376]	@ (80287c0 <__ieee754_log+0x328>)
 8028648:	4b5e      	ldr	r3, [pc, #376]	@ (80287c4 <__ieee754_log+0x32c>)
 802864a:	f7da f983 	bl	8002954 <__aeabi_dmul>
 802864e:	4a5e      	ldr	r2, [pc, #376]	@ (80287c8 <__ieee754_log+0x330>)
 8028650:	4b5e      	ldr	r3, [pc, #376]	@ (80287cc <__ieee754_log+0x334>)
 8028652:	f7d9 f97f 	bl	8001954 <__aeabi_dadd>
 8028656:	0022      	movs	r2, r4
 8028658:	002b      	movs	r3, r5
 802865a:	f7da f97b 	bl	8002954 <__aeabi_dmul>
 802865e:	4a5c      	ldr	r2, [pc, #368]	@ (80287d0 <__ieee754_log+0x338>)
 8028660:	4b5c      	ldr	r3, [pc, #368]	@ (80287d4 <__ieee754_log+0x33c>)
 8028662:	f7d9 f977 	bl	8001954 <__aeabi_dadd>
 8028666:	0022      	movs	r2, r4
 8028668:	002b      	movs	r3, r5
 802866a:	f7da f973 	bl	8002954 <__aeabi_dmul>
 802866e:	4a5a      	ldr	r2, [pc, #360]	@ (80287d8 <__ieee754_log+0x340>)
 8028670:	4b5a      	ldr	r3, [pc, #360]	@ (80287dc <__ieee754_log+0x344>)
 8028672:	f7d9 f96f 	bl	8001954 <__aeabi_dadd>
 8028676:	9a08      	ldr	r2, [sp, #32]
 8028678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802867a:	f7da f96b 	bl	8002954 <__aeabi_dmul>
 802867e:	4a58      	ldr	r2, [pc, #352]	@ (80287e0 <__ieee754_log+0x348>)
 8028680:	9008      	str	r0, [sp, #32]
 8028682:	9109      	str	r1, [sp, #36]	@ 0x24
 8028684:	4b57      	ldr	r3, [pc, #348]	@ (80287e4 <__ieee754_log+0x34c>)
 8028686:	0020      	movs	r0, r4
 8028688:	0029      	movs	r1, r5
 802868a:	f7da f963 	bl	8002954 <__aeabi_dmul>
 802868e:	4a56      	ldr	r2, [pc, #344]	@ (80287e8 <__ieee754_log+0x350>)
 8028690:	4b56      	ldr	r3, [pc, #344]	@ (80287ec <__ieee754_log+0x354>)
 8028692:	f7d9 f95f 	bl	8001954 <__aeabi_dadd>
 8028696:	0022      	movs	r2, r4
 8028698:	002b      	movs	r3, r5
 802869a:	f7da f95b 	bl	8002954 <__aeabi_dmul>
 802869e:	4a54      	ldr	r2, [pc, #336]	@ (80287f0 <__ieee754_log+0x358>)
 80286a0:	4b54      	ldr	r3, [pc, #336]	@ (80287f4 <__ieee754_log+0x35c>)
 80286a2:	f7d9 f957 	bl	8001954 <__aeabi_dadd>
 80286a6:	0022      	movs	r2, r4
 80286a8:	002b      	movs	r3, r5
 80286aa:	f7da f953 	bl	8002954 <__aeabi_dmul>
 80286ae:	0002      	movs	r2, r0
 80286b0:	000b      	movs	r3, r1
 80286b2:	9808      	ldr	r0, [sp, #32]
 80286b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80286b6:	f7d9 f94d 	bl	8001954 <__aeabi_dadd>
 80286ba:	9a02      	ldr	r2, [sp, #8]
 80286bc:	4b4e      	ldr	r3, [pc, #312]	@ (80287f8 <__ieee754_log+0x360>)
 80286be:	0004      	movs	r4, r0
 80286c0:	1a9b      	subs	r3, r3, r2
 80286c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80286c4:	000d      	movs	r5, r1
 80286c6:	4313      	orrs	r3, r2
 80286c8:	2b00      	cmp	r3, #0
 80286ca:	dd34      	ble.n	8028736 <__ieee754_log+0x29e>
 80286cc:	2200      	movs	r2, #0
 80286ce:	4b3a      	ldr	r3, [pc, #232]	@ (80287b8 <__ieee754_log+0x320>)
 80286d0:	0030      	movs	r0, r6
 80286d2:	0039      	movs	r1, r7
 80286d4:	f7da f93e 	bl	8002954 <__aeabi_dmul>
 80286d8:	0032      	movs	r2, r6
 80286da:	003b      	movs	r3, r7
 80286dc:	f7da f93a 	bl	8002954 <__aeabi_dmul>
 80286e0:	0002      	movs	r2, r0
 80286e2:	000b      	movs	r3, r1
 80286e4:	9002      	str	r0, [sp, #8]
 80286e6:	9103      	str	r1, [sp, #12]
 80286e8:	0020      	movs	r0, r4
 80286ea:	0029      	movs	r1, r5
 80286ec:	f7d9 f932 	bl	8001954 <__aeabi_dadd>
 80286f0:	9a04      	ldr	r2, [sp, #16]
 80286f2:	9b05      	ldr	r3, [sp, #20]
 80286f4:	f7da f92e 	bl	8002954 <__aeabi_dmul>
 80286f8:	9b00      	ldr	r3, [sp, #0]
 80286fa:	0004      	movs	r4, r0
 80286fc:	000d      	movs	r5, r1
 80286fe:	2b00      	cmp	r3, #0
 8028700:	d106      	bne.n	8028710 <__ieee754_log+0x278>
 8028702:	0002      	movs	r2, r0
 8028704:	000b      	movs	r3, r1
 8028706:	9802      	ldr	r0, [sp, #8]
 8028708:	9903      	ldr	r1, [sp, #12]
 802870a:	f7da fc09 	bl	8002f20 <__aeabi_dsub>
 802870e:	e74f      	b.n	80285b0 <__ieee754_log+0x118>
 8028710:	4a23      	ldr	r2, [pc, #140]	@ (80287a0 <__ieee754_log+0x308>)
 8028712:	4b24      	ldr	r3, [pc, #144]	@ (80287a4 <__ieee754_log+0x30c>)
 8028714:	9806      	ldr	r0, [sp, #24]
 8028716:	9907      	ldr	r1, [sp, #28]
 8028718:	f7da f91c 	bl	8002954 <__aeabi_dmul>
 802871c:	4a22      	ldr	r2, [pc, #136]	@ (80287a8 <__ieee754_log+0x310>)
 802871e:	9000      	str	r0, [sp, #0]
 8028720:	9101      	str	r1, [sp, #4]
 8028722:	9806      	ldr	r0, [sp, #24]
 8028724:	9907      	ldr	r1, [sp, #28]
 8028726:	4b21      	ldr	r3, [pc, #132]	@ (80287ac <__ieee754_log+0x314>)
 8028728:	f7da f914 	bl	8002954 <__aeabi_dmul>
 802872c:	0022      	movs	r2, r4
 802872e:	002b      	movs	r3, r5
 8028730:	f7d9 f910 	bl	8001954 <__aeabi_dadd>
 8028734:	e754      	b.n	80285e0 <__ieee754_log+0x148>
 8028736:	0002      	movs	r2, r0
 8028738:	000b      	movs	r3, r1
 802873a:	0030      	movs	r0, r6
 802873c:	0039      	movs	r1, r7
 802873e:	f7da fbef 	bl	8002f20 <__aeabi_dsub>
 8028742:	9a04      	ldr	r2, [sp, #16]
 8028744:	9b05      	ldr	r3, [sp, #20]
 8028746:	f7da f905 	bl	8002954 <__aeabi_dmul>
 802874a:	9b00      	ldr	r3, [sp, #0]
 802874c:	0004      	movs	r4, r0
 802874e:	000d      	movs	r5, r1
 8028750:	2b00      	cmp	r3, #0
 8028752:	d102      	bne.n	802875a <__ieee754_log+0x2c2>
 8028754:	0002      	movs	r2, r0
 8028756:	000b      	movs	r3, r1
 8028758:	e72c      	b.n	80285b4 <__ieee754_log+0x11c>
 802875a:	4a11      	ldr	r2, [pc, #68]	@ (80287a0 <__ieee754_log+0x308>)
 802875c:	4b11      	ldr	r3, [pc, #68]	@ (80287a4 <__ieee754_log+0x30c>)
 802875e:	9806      	ldr	r0, [sp, #24]
 8028760:	9907      	ldr	r1, [sp, #28]
 8028762:	f7da f8f7 	bl	8002954 <__aeabi_dmul>
 8028766:	4a10      	ldr	r2, [pc, #64]	@ (80287a8 <__ieee754_log+0x310>)
 8028768:	9000      	str	r0, [sp, #0]
 802876a:	9101      	str	r1, [sp, #4]
 802876c:	9806      	ldr	r0, [sp, #24]
 802876e:	9907      	ldr	r1, [sp, #28]
 8028770:	4b0e      	ldr	r3, [pc, #56]	@ (80287ac <__ieee754_log+0x314>)
 8028772:	f7da f8ef 	bl	8002954 <__aeabi_dmul>
 8028776:	0002      	movs	r2, r0
 8028778:	000b      	movs	r3, r1
 802877a:	0020      	movs	r0, r4
 802877c:	0029      	movs	r1, r5
 802877e:	e733      	b.n	80285e8 <__ieee754_log+0x150>
 8028780:	2000      	movs	r0, #0
 8028782:	2100      	movs	r1, #0
 8028784:	e699      	b.n	80284ba <__ieee754_log+0x22>
 8028786:	46c0      	nop			@ (mov r8, r8)
 8028788:	c3500000 	.word	0xc3500000
 802878c:	43500000 	.word	0x43500000
 8028790:	7fefffff 	.word	0x7fefffff
 8028794:	fffffc01 	.word	0xfffffc01
 8028798:	00095f64 	.word	0x00095f64
 802879c:	3ff00000 	.word	0x3ff00000
 80287a0:	fee00000 	.word	0xfee00000
 80287a4:	3fe62e42 	.word	0x3fe62e42
 80287a8:	35793c76 	.word	0x35793c76
 80287ac:	3dea39ef 	.word	0x3dea39ef
 80287b0:	55555555 	.word	0x55555555
 80287b4:	3fd55555 	.word	0x3fd55555
 80287b8:	3fe00000 	.word	0x3fe00000
 80287bc:	fff9eb86 	.word	0xfff9eb86
 80287c0:	df3e5244 	.word	0xdf3e5244
 80287c4:	3fc2f112 	.word	0x3fc2f112
 80287c8:	96cb03de 	.word	0x96cb03de
 80287cc:	3fc74664 	.word	0x3fc74664
 80287d0:	94229359 	.word	0x94229359
 80287d4:	3fd24924 	.word	0x3fd24924
 80287d8:	55555593 	.word	0x55555593
 80287dc:	3fe55555 	.word	0x3fe55555
 80287e0:	d078c69f 	.word	0xd078c69f
 80287e4:	3fc39a09 	.word	0x3fc39a09
 80287e8:	1d8e78af 	.word	0x1d8e78af
 80287ec:	3fcc71c5 	.word	0x3fcc71c5
 80287f0:	9997fa04 	.word	0x9997fa04
 80287f4:	3fd99999 	.word	0x3fd99999
 80287f8:	0006b851 	.word	0x0006b851

080287fc <__ieee754_pow>:
 80287fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80287fe:	b095      	sub	sp, #84	@ 0x54
 8028800:	9204      	str	r2, [sp, #16]
 8028802:	9305      	str	r3, [sp, #20]
 8028804:	9b04      	ldr	r3, [sp, #16]
 8028806:	9f05      	ldr	r7, [sp, #20]
 8028808:	001a      	movs	r2, r3
 802880a:	007d      	lsls	r5, r7, #1
 802880c:	086d      	lsrs	r5, r5, #1
 802880e:	9002      	str	r0, [sp, #8]
 8028810:	9103      	str	r1, [sp, #12]
 8028812:	432a      	orrs	r2, r5
 8028814:	d11a      	bne.n	802884c <__ieee754_pow+0x50>
 8028816:	2180      	movs	r1, #128	@ 0x80
 8028818:	9a02      	ldr	r2, [sp, #8]
 802881a:	9803      	ldr	r0, [sp, #12]
 802881c:	0309      	lsls	r1, r1, #12
 802881e:	4048      	eors	r0, r1
 8028820:	0003      	movs	r3, r0
 8028822:	1892      	adds	r2, r2, r2
 8028824:	415b      	adcs	r3, r3
 8028826:	4996      	ldr	r1, [pc, #600]	@ (8028a80 <__ieee754_pow+0x284>)
 8028828:	428b      	cmp	r3, r1
 802882a:	d806      	bhi.n	802883a <__ieee754_pow+0x3e>
 802882c:	d001      	beq.n	8028832 <__ieee754_pow+0x36>
 802882e:	f000 fcce 	bl	80291ce <__ieee754_pow+0x9d2>
 8028832:	2a00      	cmp	r2, #0
 8028834:	d101      	bne.n	802883a <__ieee754_pow+0x3e>
 8028836:	f000 fcca 	bl	80291ce <__ieee754_pow+0x9d2>
 802883a:	9a04      	ldr	r2, [sp, #16]
 802883c:	9b05      	ldr	r3, [sp, #20]
 802883e:	9802      	ldr	r0, [sp, #8]
 8028840:	9903      	ldr	r1, [sp, #12]
 8028842:	f7d9 f887 	bl	8001954 <__aeabi_dadd>
 8028846:	9000      	str	r0, [sp, #0]
 8028848:	9101      	str	r1, [sp, #4]
 802884a:	e08e      	b.n	802896a <__ieee754_pow+0x16e>
 802884c:	9a03      	ldr	r2, [sp, #12]
 802884e:	9206      	str	r2, [sp, #24]
 8028850:	9a02      	ldr	r2, [sp, #8]
 8028852:	920a      	str	r2, [sp, #40]	@ 0x28
 8028854:	9a03      	ldr	r2, [sp, #12]
 8028856:	0054      	lsls	r4, r2, #1
 8028858:	4a8a      	ldr	r2, [pc, #552]	@ (8028a84 <__ieee754_pow+0x288>)
 802885a:	0864      	lsrs	r4, r4, #1
 802885c:	4294      	cmp	r4, r2
 802885e:	d80e      	bhi.n	802887e <__ieee754_pow+0x82>
 8028860:	d105      	bne.n	802886e <__ieee754_pow+0x72>
 8028862:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028864:	2a00      	cmp	r2, #0
 8028866:	d1e8      	bne.n	802883a <__ieee754_pow+0x3e>
 8028868:	42a5      	cmp	r5, r4
 802886a:	d8e6      	bhi.n	802883a <__ieee754_pow+0x3e>
 802886c:	e002      	b.n	8028874 <__ieee754_pow+0x78>
 802886e:	4a85      	ldr	r2, [pc, #532]	@ (8028a84 <__ieee754_pow+0x288>)
 8028870:	4295      	cmp	r5, r2
 8028872:	d804      	bhi.n	802887e <__ieee754_pow+0x82>
 8028874:	4a83      	ldr	r2, [pc, #524]	@ (8028a84 <__ieee754_pow+0x288>)
 8028876:	4295      	cmp	r5, r2
 8028878:	d10c      	bne.n	8028894 <__ieee754_pow+0x98>
 802887a:	2b00      	cmp	r3, #0
 802887c:	d00a      	beq.n	8028894 <__ieee754_pow+0x98>
 802887e:	4a82      	ldr	r2, [pc, #520]	@ (8028a88 <__ieee754_pow+0x28c>)
 8028880:	9b03      	ldr	r3, [sp, #12]
 8028882:	189b      	adds	r3, r3, r2
 8028884:	9a02      	ldr	r2, [sp, #8]
 8028886:	4313      	orrs	r3, r2
 8028888:	d1d7      	bne.n	802883a <__ieee754_pow+0x3e>
 802888a:	2180      	movs	r1, #128	@ 0x80
 802888c:	9a04      	ldr	r2, [sp, #16]
 802888e:	9805      	ldr	r0, [sp, #20]
 8028890:	0309      	lsls	r1, r1, #12
 8028892:	e7c4      	b.n	802881e <__ieee754_pow+0x22>
 8028894:	2600      	movs	r6, #0
 8028896:	9a06      	ldr	r2, [sp, #24]
 8028898:	9408      	str	r4, [sp, #32]
 802889a:	42b2      	cmp	r2, r6
 802889c:	da42      	bge.n	8028924 <__ieee754_pow+0x128>
 802889e:	4a7b      	ldr	r2, [pc, #492]	@ (8028a8c <__ieee754_pow+0x290>)
 80288a0:	4295      	cmp	r5, r2
 80288a2:	d83e      	bhi.n	8028922 <__ieee754_pow+0x126>
 80288a4:	4a7a      	ldr	r2, [pc, #488]	@ (8028a90 <__ieee754_pow+0x294>)
 80288a6:	4295      	cmp	r5, r2
 80288a8:	d910      	bls.n	80288cc <__ieee754_pow+0xd0>
 80288aa:	497a      	ldr	r1, [pc, #488]	@ (8028a94 <__ieee754_pow+0x298>)
 80288ac:	152a      	asrs	r2, r5, #20
 80288ae:	1852      	adds	r2, r2, r1
 80288b0:	2a14      	cmp	r2, #20
 80288b2:	dd18      	ble.n	80288e6 <__ieee754_pow+0xea>
 80288b4:	2134      	movs	r1, #52	@ 0x34
 80288b6:	1a89      	subs	r1, r1, r2
 80288b8:	9a04      	ldr	r2, [sp, #16]
 80288ba:	40ca      	lsrs	r2, r1
 80288bc:	0010      	movs	r0, r2
 80288be:	4088      	lsls	r0, r1
 80288c0:	4298      	cmp	r0, r3
 80288c2:	d103      	bne.n	80288cc <__ieee754_pow+0xd0>
 80288c4:	2101      	movs	r1, #1
 80288c6:	3602      	adds	r6, #2
 80288c8:	400a      	ands	r2, r1
 80288ca:	1ab6      	subs	r6, r6, r2
 80288cc:	2b00      	cmp	r3, #0
 80288ce:	d15b      	bne.n	8028988 <__ieee754_pow+0x18c>
 80288d0:	2380      	movs	r3, #128	@ 0x80
 80288d2:	05db      	lsls	r3, r3, #23
 80288d4:	429f      	cmp	r7, r3
 80288d6:	d14c      	bne.n	8028972 <__ieee754_pow+0x176>
 80288d8:	9a02      	ldr	r2, [sp, #8]
 80288da:	9b03      	ldr	r3, [sp, #12]
 80288dc:	0010      	movs	r0, r2
 80288de:	0019      	movs	r1, r3
 80288e0:	f7da f838 	bl	8002954 <__aeabi_dmul>
 80288e4:	e7af      	b.n	8028846 <__ieee754_pow+0x4a>
 80288e6:	2b00      	cmp	r3, #0
 80288e8:	d14e      	bne.n	8028988 <__ieee754_pow+0x18c>
 80288ea:	3314      	adds	r3, #20
 80288ec:	1a9a      	subs	r2, r3, r2
 80288ee:	002b      	movs	r3, r5
 80288f0:	4113      	asrs	r3, r2
 80288f2:	0019      	movs	r1, r3
 80288f4:	4091      	lsls	r1, r2
 80288f6:	42a9      	cmp	r1, r5
 80288f8:	d103      	bne.n	8028902 <__ieee754_pow+0x106>
 80288fa:	2201      	movs	r2, #1
 80288fc:	2602      	movs	r6, #2
 80288fe:	4013      	ands	r3, r2
 8028900:	1af6      	subs	r6, r6, r3
 8028902:	4b65      	ldr	r3, [pc, #404]	@ (8028a98 <__ieee754_pow+0x29c>)
 8028904:	429d      	cmp	r5, r3
 8028906:	d1e3      	bne.n	80288d0 <__ieee754_pow+0xd4>
 8028908:	9b02      	ldr	r3, [sp, #8]
 802890a:	9c03      	ldr	r4, [sp, #12]
 802890c:	9300      	str	r3, [sp, #0]
 802890e:	9401      	str	r4, [sp, #4]
 8028910:	2f00      	cmp	r7, #0
 8028912:	da2a      	bge.n	802896a <__ieee754_pow+0x16e>
 8028914:	001a      	movs	r2, r3
 8028916:	2000      	movs	r0, #0
 8028918:	0023      	movs	r3, r4
 802891a:	495f      	ldr	r1, [pc, #380]	@ (8028a98 <__ieee754_pow+0x29c>)
 802891c:	f7d9 fbe0 	bl	80020e0 <__aeabi_ddiv>
 8028920:	e791      	b.n	8028846 <__ieee754_pow+0x4a>
 8028922:	2602      	movs	r6, #2
 8028924:	2b00      	cmp	r3, #0
 8028926:	d12f      	bne.n	8028988 <__ieee754_pow+0x18c>
 8028928:	4b56      	ldr	r3, [pc, #344]	@ (8028a84 <__ieee754_pow+0x288>)
 802892a:	429d      	cmp	r5, r3
 802892c:	d1e9      	bne.n	8028902 <__ieee754_pow+0x106>
 802892e:	4b56      	ldr	r3, [pc, #344]	@ (8028a88 <__ieee754_pow+0x28c>)
 8028930:	9a02      	ldr	r2, [sp, #8]
 8028932:	18e3      	adds	r3, r4, r3
 8028934:	4313      	orrs	r3, r2
 8028936:	d101      	bne.n	802893c <__ieee754_pow+0x140>
 8028938:	f000 fc49 	bl	80291ce <__ieee754_pow+0x9d2>
 802893c:	4b54      	ldr	r3, [pc, #336]	@ (8028a90 <__ieee754_pow+0x294>)
 802893e:	429c      	cmp	r4, r3
 8028940:	d909      	bls.n	8028956 <__ieee754_pow+0x15a>
 8028942:	9b04      	ldr	r3, [sp, #16]
 8028944:	9c05      	ldr	r4, [sp, #20]
 8028946:	9300      	str	r3, [sp, #0]
 8028948:	9401      	str	r4, [sp, #4]
 802894a:	2f00      	cmp	r7, #0
 802894c:	da0d      	bge.n	802896a <__ieee754_pow+0x16e>
 802894e:	2300      	movs	r3, #0
 8028950:	2400      	movs	r4, #0
 8028952:	f000 fc3e 	bl	80291d2 <__ieee754_pow+0x9d6>
 8028956:	2f00      	cmp	r7, #0
 8028958:	daf9      	bge.n	802894e <__ieee754_pow+0x152>
 802895a:	2280      	movs	r2, #128	@ 0x80
 802895c:	0612      	lsls	r2, r2, #24
 802895e:	4694      	mov	ip, r2
 8028960:	9b04      	ldr	r3, [sp, #16]
 8028962:	9300      	str	r3, [sp, #0]
 8028964:	9b05      	ldr	r3, [sp, #20]
 8028966:	4463      	add	r3, ip
 8028968:	9301      	str	r3, [sp, #4]
 802896a:	9800      	ldr	r0, [sp, #0]
 802896c:	9901      	ldr	r1, [sp, #4]
 802896e:	b015      	add	sp, #84	@ 0x54
 8028970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028972:	4b4a      	ldr	r3, [pc, #296]	@ (8028a9c <__ieee754_pow+0x2a0>)
 8028974:	429f      	cmp	r7, r3
 8028976:	d107      	bne.n	8028988 <__ieee754_pow+0x18c>
 8028978:	9b06      	ldr	r3, [sp, #24]
 802897a:	2b00      	cmp	r3, #0
 802897c:	db04      	blt.n	8028988 <__ieee754_pow+0x18c>
 802897e:	9802      	ldr	r0, [sp, #8]
 8028980:	9903      	ldr	r1, [sp, #12]
 8028982:	f000 fe03 	bl	802958c <__ieee754_sqrt>
 8028986:	e75e      	b.n	8028846 <__ieee754_pow+0x4a>
 8028988:	9802      	ldr	r0, [sp, #8]
 802898a:	9903      	ldr	r1, [sp, #12]
 802898c:	f000 fc4e 	bl	802922c <fabs>
 8028990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028992:	9000      	str	r0, [sp, #0]
 8028994:	9101      	str	r1, [sp, #4]
 8028996:	2b00      	cmp	r3, #0
 8028998:	d12c      	bne.n	80289f4 <__ieee754_pow+0x1f8>
 802899a:	9b03      	ldr	r3, [sp, #12]
 802899c:	4a3e      	ldr	r2, [pc, #248]	@ (8028a98 <__ieee754_pow+0x29c>)
 802899e:	009b      	lsls	r3, r3, #2
 80289a0:	089b      	lsrs	r3, r3, #2
 80289a2:	4293      	cmp	r3, r2
 80289a4:	d001      	beq.n	80289aa <__ieee754_pow+0x1ae>
 80289a6:	2c00      	cmp	r4, #0
 80289a8:	d124      	bne.n	80289f4 <__ieee754_pow+0x1f8>
 80289aa:	2f00      	cmp	r7, #0
 80289ac:	da07      	bge.n	80289be <__ieee754_pow+0x1c2>
 80289ae:	9a00      	ldr	r2, [sp, #0]
 80289b0:	9b01      	ldr	r3, [sp, #4]
 80289b2:	2000      	movs	r0, #0
 80289b4:	4938      	ldr	r1, [pc, #224]	@ (8028a98 <__ieee754_pow+0x29c>)
 80289b6:	f7d9 fb93 	bl	80020e0 <__aeabi_ddiv>
 80289ba:	9000      	str	r0, [sp, #0]
 80289bc:	9101      	str	r1, [sp, #4]
 80289be:	9b06      	ldr	r3, [sp, #24]
 80289c0:	2b00      	cmp	r3, #0
 80289c2:	dad2      	bge.n	802896a <__ieee754_pow+0x16e>
 80289c4:	4b30      	ldr	r3, [pc, #192]	@ (8028a88 <__ieee754_pow+0x28c>)
 80289c6:	18e4      	adds	r4, r4, r3
 80289c8:	4334      	orrs	r4, r6
 80289ca:	d108      	bne.n	80289de <__ieee754_pow+0x1e2>
 80289cc:	9a00      	ldr	r2, [sp, #0]
 80289ce:	9b01      	ldr	r3, [sp, #4]
 80289d0:	0010      	movs	r0, r2
 80289d2:	0019      	movs	r1, r3
 80289d4:	f7da faa4 	bl	8002f20 <__aeabi_dsub>
 80289d8:	0002      	movs	r2, r0
 80289da:	000b      	movs	r3, r1
 80289dc:	e79e      	b.n	802891c <__ieee754_pow+0x120>
 80289de:	2e01      	cmp	r6, #1
 80289e0:	d1c3      	bne.n	802896a <__ieee754_pow+0x16e>
 80289e2:	9800      	ldr	r0, [sp, #0]
 80289e4:	2180      	movs	r1, #128	@ 0x80
 80289e6:	0002      	movs	r2, r0
 80289e8:	9801      	ldr	r0, [sp, #4]
 80289ea:	0609      	lsls	r1, r1, #24
 80289ec:	1843      	adds	r3, r0, r1
 80289ee:	9200      	str	r2, [sp, #0]
 80289f0:	9301      	str	r3, [sp, #4]
 80289f2:	e7ba      	b.n	802896a <__ieee754_pow+0x16e>
 80289f4:	9b03      	ldr	r3, [sp, #12]
 80289f6:	0fdb      	lsrs	r3, r3, #31
 80289f8:	3b01      	subs	r3, #1
 80289fa:	001a      	movs	r2, r3
 80289fc:	4332      	orrs	r2, r6
 80289fe:	d102      	bne.n	8028a06 <__ieee754_pow+0x20a>
 8028a00:	9a02      	ldr	r2, [sp, #8]
 8028a02:	9b03      	ldr	r3, [sp, #12]
 8028a04:	e7e4      	b.n	80289d0 <__ieee754_pow+0x1d4>
 8028a06:	3e01      	subs	r6, #1
 8028a08:	2200      	movs	r2, #0
 8028a0a:	431e      	orrs	r6, r3
 8028a0c:	d013      	beq.n	8028a36 <__ieee754_pow+0x23a>
 8028a0e:	4b22      	ldr	r3, [pc, #136]	@ (8028a98 <__ieee754_pow+0x29c>)
 8028a10:	9206      	str	r2, [sp, #24]
 8028a12:	9307      	str	r3, [sp, #28]
 8028a14:	2384      	movs	r3, #132	@ 0x84
 8028a16:	05db      	lsls	r3, r3, #23
 8028a18:	429d      	cmp	r5, r3
 8028a1a:	d800      	bhi.n	8028a1e <__ieee754_pow+0x222>
 8028a1c:	e0fa      	b.n	8028c14 <__ieee754_pow+0x418>
 8028a1e:	4b20      	ldr	r3, [pc, #128]	@ (8028aa0 <__ieee754_pow+0x2a4>)
 8028a20:	429d      	cmp	r5, r3
 8028a22:	d910      	bls.n	8028a46 <__ieee754_pow+0x24a>
 8028a24:	4b1a      	ldr	r3, [pc, #104]	@ (8028a90 <__ieee754_pow+0x294>)
 8028a26:	429c      	cmp	r4, r3
 8028a28:	d807      	bhi.n	8028a3a <__ieee754_pow+0x23e>
 8028a2a:	2f00      	cmp	r7, #0
 8028a2c:	da07      	bge.n	8028a3e <__ieee754_pow+0x242>
 8028a2e:	2000      	movs	r0, #0
 8028a30:	f000 fd82 	bl	8029538 <__math_oflow>
 8028a34:	e707      	b.n	8028846 <__ieee754_pow+0x4a>
 8028a36:	4b1b      	ldr	r3, [pc, #108]	@ (8028aa4 <__ieee754_pow+0x2a8>)
 8028a38:	e7ea      	b.n	8028a10 <__ieee754_pow+0x214>
 8028a3a:	2f00      	cmp	r7, #0
 8028a3c:	dcf7      	bgt.n	8028a2e <__ieee754_pow+0x232>
 8028a3e:	2000      	movs	r0, #0
 8028a40:	f000 fd73 	bl	802952a <__math_uflow>
 8028a44:	e6ff      	b.n	8028846 <__ieee754_pow+0x4a>
 8028a46:	4b18      	ldr	r3, [pc, #96]	@ (8028aa8 <__ieee754_pow+0x2ac>)
 8028a48:	429c      	cmp	r4, r3
 8028a4a:	d80a      	bhi.n	8028a62 <__ieee754_pow+0x266>
 8028a4c:	9806      	ldr	r0, [sp, #24]
 8028a4e:	9907      	ldr	r1, [sp, #28]
 8028a50:	2300      	movs	r3, #0
 8028a52:	2200      	movs	r2, #0
 8028a54:	f7d7 fd32 	bl	80004bc <__aeabi_dcmplt>
 8028a58:	1e43      	subs	r3, r0, #1
 8028a5a:	4198      	sbcs	r0, r3
 8028a5c:	2f00      	cmp	r7, #0
 8028a5e:	daef      	bge.n	8028a40 <__ieee754_pow+0x244>
 8028a60:	e7e6      	b.n	8028a30 <__ieee754_pow+0x234>
 8028a62:	4b0d      	ldr	r3, [pc, #52]	@ (8028a98 <__ieee754_pow+0x29c>)
 8028a64:	2200      	movs	r2, #0
 8028a66:	429c      	cmp	r4, r3
 8028a68:	d920      	bls.n	8028aac <__ieee754_pow+0x2b0>
 8028a6a:	9806      	ldr	r0, [sp, #24]
 8028a6c:	9907      	ldr	r1, [sp, #28]
 8028a6e:	2300      	movs	r3, #0
 8028a70:	f7d7 fd24 	bl	80004bc <__aeabi_dcmplt>
 8028a74:	1e43      	subs	r3, r0, #1
 8028a76:	4198      	sbcs	r0, r3
 8028a78:	2f00      	cmp	r7, #0
 8028a7a:	dcd9      	bgt.n	8028a30 <__ieee754_pow+0x234>
 8028a7c:	e7e0      	b.n	8028a40 <__ieee754_pow+0x244>
 8028a7e:	46c0      	nop			@ (mov r8, r8)
 8028a80:	fff00000 	.word	0xfff00000
 8028a84:	7ff00000 	.word	0x7ff00000
 8028a88:	c0100000 	.word	0xc0100000
 8028a8c:	433fffff 	.word	0x433fffff
 8028a90:	3fefffff 	.word	0x3fefffff
 8028a94:	fffffc01 	.word	0xfffffc01
 8028a98:	3ff00000 	.word	0x3ff00000
 8028a9c:	3fe00000 	.word	0x3fe00000
 8028aa0:	43f00000 	.word	0x43f00000
 8028aa4:	bff00000 	.word	0xbff00000
 8028aa8:	3feffffe 	.word	0x3feffffe
 8028aac:	9800      	ldr	r0, [sp, #0]
 8028aae:	9901      	ldr	r1, [sp, #4]
 8028ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8028be8 <__ieee754_pow+0x3ec>)
 8028ab2:	f7da fa35 	bl	8002f20 <__aeabi_dsub>
 8028ab6:	22c0      	movs	r2, #192	@ 0xc0
 8028ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8028bec <__ieee754_pow+0x3f0>)
 8028aba:	05d2      	lsls	r2, r2, #23
 8028abc:	0006      	movs	r6, r0
 8028abe:	000f      	movs	r7, r1
 8028ac0:	f7d9 ff48 	bl	8002954 <__aeabi_dmul>
 8028ac4:	4a4a      	ldr	r2, [pc, #296]	@ (8028bf0 <__ieee754_pow+0x3f4>)
 8028ac6:	9002      	str	r0, [sp, #8]
 8028ac8:	9103      	str	r1, [sp, #12]
 8028aca:	4b4a      	ldr	r3, [pc, #296]	@ (8028bf4 <__ieee754_pow+0x3f8>)
 8028acc:	0030      	movs	r0, r6
 8028ace:	0039      	movs	r1, r7
 8028ad0:	f7d9 ff40 	bl	8002954 <__aeabi_dmul>
 8028ad4:	2200      	movs	r2, #0
 8028ad6:	9000      	str	r0, [sp, #0]
 8028ad8:	9101      	str	r1, [sp, #4]
 8028ada:	4b47      	ldr	r3, [pc, #284]	@ (8028bf8 <__ieee754_pow+0x3fc>)
 8028adc:	0030      	movs	r0, r6
 8028ade:	0039      	movs	r1, r7
 8028ae0:	f7d9 ff38 	bl	8002954 <__aeabi_dmul>
 8028ae4:	0002      	movs	r2, r0
 8028ae6:	000b      	movs	r3, r1
 8028ae8:	4844      	ldr	r0, [pc, #272]	@ (8028bfc <__ieee754_pow+0x400>)
 8028aea:	4945      	ldr	r1, [pc, #276]	@ (8028c00 <__ieee754_pow+0x404>)
 8028aec:	f7da fa18 	bl	8002f20 <__aeabi_dsub>
 8028af0:	0032      	movs	r2, r6
 8028af2:	003b      	movs	r3, r7
 8028af4:	f7d9 ff2e 	bl	8002954 <__aeabi_dmul>
 8028af8:	0002      	movs	r2, r0
 8028afa:	000b      	movs	r3, r1
 8028afc:	2000      	movs	r0, #0
 8028afe:	4941      	ldr	r1, [pc, #260]	@ (8028c04 <__ieee754_pow+0x408>)
 8028b00:	f7da fa0e 	bl	8002f20 <__aeabi_dsub>
 8028b04:	0032      	movs	r2, r6
 8028b06:	0004      	movs	r4, r0
 8028b08:	000d      	movs	r5, r1
 8028b0a:	003b      	movs	r3, r7
 8028b0c:	0030      	movs	r0, r6
 8028b0e:	0039      	movs	r1, r7
 8028b10:	f7d9 ff20 	bl	8002954 <__aeabi_dmul>
 8028b14:	0002      	movs	r2, r0
 8028b16:	000b      	movs	r3, r1
 8028b18:	0020      	movs	r0, r4
 8028b1a:	0029      	movs	r1, r5
 8028b1c:	f7d9 ff1a 	bl	8002954 <__aeabi_dmul>
 8028b20:	4a39      	ldr	r2, [pc, #228]	@ (8028c08 <__ieee754_pow+0x40c>)
 8028b22:	4b32      	ldr	r3, [pc, #200]	@ (8028bec <__ieee754_pow+0x3f0>)
 8028b24:	f7d9 ff16 	bl	8002954 <__aeabi_dmul>
 8028b28:	0002      	movs	r2, r0
 8028b2a:	000b      	movs	r3, r1
 8028b2c:	9800      	ldr	r0, [sp, #0]
 8028b2e:	9901      	ldr	r1, [sp, #4]
 8028b30:	f7da f9f6 	bl	8002f20 <__aeabi_dsub>
 8028b34:	0002      	movs	r2, r0
 8028b36:	000b      	movs	r3, r1
 8028b38:	0004      	movs	r4, r0
 8028b3a:	000d      	movs	r5, r1
 8028b3c:	9802      	ldr	r0, [sp, #8]
 8028b3e:	9903      	ldr	r1, [sp, #12]
 8028b40:	f7d8 ff08 	bl	8001954 <__aeabi_dadd>
 8028b44:	9a02      	ldr	r2, [sp, #8]
 8028b46:	9b03      	ldr	r3, [sp, #12]
 8028b48:	2000      	movs	r0, #0
 8028b4a:	9000      	str	r0, [sp, #0]
 8028b4c:	9101      	str	r1, [sp, #4]
 8028b4e:	f7da f9e7 	bl	8002f20 <__aeabi_dsub>
 8028b52:	0002      	movs	r2, r0
 8028b54:	000b      	movs	r3, r1
 8028b56:	0020      	movs	r0, r4
 8028b58:	0029      	movs	r1, r5
 8028b5a:	f7da f9e1 	bl	8002f20 <__aeabi_dsub>
 8028b5e:	9c04      	ldr	r4, [sp, #16]
 8028b60:	9d05      	ldr	r5, [sp, #20]
 8028b62:	2400      	movs	r4, #0
 8028b64:	0006      	movs	r6, r0
 8028b66:	000f      	movs	r7, r1
 8028b68:	9804      	ldr	r0, [sp, #16]
 8028b6a:	9905      	ldr	r1, [sp, #20]
 8028b6c:	0022      	movs	r2, r4
 8028b6e:	002b      	movs	r3, r5
 8028b70:	9402      	str	r4, [sp, #8]
 8028b72:	9503      	str	r5, [sp, #12]
 8028b74:	f7da f9d4 	bl	8002f20 <__aeabi_dsub>
 8028b78:	9a00      	ldr	r2, [sp, #0]
 8028b7a:	9b01      	ldr	r3, [sp, #4]
 8028b7c:	f7d9 feea 	bl	8002954 <__aeabi_dmul>
 8028b80:	9a04      	ldr	r2, [sp, #16]
 8028b82:	9b05      	ldr	r3, [sp, #20]
 8028b84:	9008      	str	r0, [sp, #32]
 8028b86:	9109      	str	r1, [sp, #36]	@ 0x24
 8028b88:	0030      	movs	r0, r6
 8028b8a:	0039      	movs	r1, r7
 8028b8c:	f7d9 fee2 	bl	8002954 <__aeabi_dmul>
 8028b90:	0002      	movs	r2, r0
 8028b92:	000b      	movs	r3, r1
 8028b94:	9808      	ldr	r0, [sp, #32]
 8028b96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028b98:	f7d8 fedc 	bl	8001954 <__aeabi_dadd>
 8028b9c:	0022      	movs	r2, r4
 8028b9e:	002b      	movs	r3, r5
 8028ba0:	9004      	str	r0, [sp, #16]
 8028ba2:	9105      	str	r1, [sp, #20]
 8028ba4:	9800      	ldr	r0, [sp, #0]
 8028ba6:	9901      	ldr	r1, [sp, #4]
 8028ba8:	f7d9 fed4 	bl	8002954 <__aeabi_dmul>
 8028bac:	000b      	movs	r3, r1
 8028bae:	0002      	movs	r2, r0
 8028bb0:	9000      	str	r0, [sp, #0]
 8028bb2:	9101      	str	r1, [sp, #4]
 8028bb4:	9804      	ldr	r0, [sp, #16]
 8028bb6:	9905      	ldr	r1, [sp, #20]
 8028bb8:	f7d8 fecc 	bl	8001954 <__aeabi_dadd>
 8028bbc:	4b13      	ldr	r3, [pc, #76]	@ (8028c0c <__ieee754_pow+0x410>)
 8028bbe:	0006      	movs	r6, r0
 8028bc0:	000f      	movs	r7, r1
 8028bc2:	9108      	str	r1, [sp, #32]
 8028bc4:	4299      	cmp	r1, r3
 8028bc6:	dc00      	bgt.n	8028bca <__ieee754_pow+0x3ce>
 8028bc8:	e1c0      	b.n	8028f4c <__ieee754_pow+0x750>
 8028bca:	4b11      	ldr	r3, [pc, #68]	@ (8028c10 <__ieee754_pow+0x414>)
 8028bcc:	18cb      	adds	r3, r1, r3
 8028bce:	4303      	orrs	r3, r0
 8028bd0:	42a3      	cmp	r3, r4
 8028bd2:	d100      	bne.n	8028bd6 <__ieee754_pow+0x3da>
 8028bd4:	e1a1      	b.n	8028f1a <__ieee754_pow+0x71e>
 8028bd6:	9806      	ldr	r0, [sp, #24]
 8028bd8:	9907      	ldr	r1, [sp, #28]
 8028bda:	2300      	movs	r3, #0
 8028bdc:	2200      	movs	r2, #0
 8028bde:	f7d7 fc6d 	bl	80004bc <__aeabi_dcmplt>
 8028be2:	1e43      	subs	r3, r0, #1
 8028be4:	4198      	sbcs	r0, r3
 8028be6:	e723      	b.n	8028a30 <__ieee754_pow+0x234>
 8028be8:	3ff00000 	.word	0x3ff00000
 8028bec:	3ff71547 	.word	0x3ff71547
 8028bf0:	f85ddf44 	.word	0xf85ddf44
 8028bf4:	3e54ae0b 	.word	0x3e54ae0b
 8028bf8:	3fd00000 	.word	0x3fd00000
 8028bfc:	55555555 	.word	0x55555555
 8028c00:	3fd55555 	.word	0x3fd55555
 8028c04:	3fe00000 	.word	0x3fe00000
 8028c08:	652b82fe 	.word	0x652b82fe
 8028c0c:	408fffff 	.word	0x408fffff
 8028c10:	bf700000 	.word	0xbf700000
 8028c14:	4bdc      	ldr	r3, [pc, #880]	@ (8028f88 <__ieee754_pow+0x78c>)
 8028c16:	9903      	ldr	r1, [sp, #12]
 8028c18:	2200      	movs	r2, #0
 8028c1a:	420b      	tst	r3, r1
 8028c1c:	d10b      	bne.n	8028c36 <__ieee754_pow+0x43a>
 8028c1e:	9800      	ldr	r0, [sp, #0]
 8028c20:	9901      	ldr	r1, [sp, #4]
 8028c22:	2200      	movs	r2, #0
 8028c24:	4bd9      	ldr	r3, [pc, #868]	@ (8028f8c <__ieee754_pow+0x790>)
 8028c26:	f7d9 fe95 	bl	8002954 <__aeabi_dmul>
 8028c2a:	2235      	movs	r2, #53	@ 0x35
 8028c2c:	9000      	str	r0, [sp, #0]
 8028c2e:	9101      	str	r1, [sp, #4]
 8028c30:	9b01      	ldr	r3, [sp, #4]
 8028c32:	4252      	negs	r2, r2
 8028c34:	9308      	str	r3, [sp, #32]
 8028c36:	9b08      	ldr	r3, [sp, #32]
 8028c38:	49d5      	ldr	r1, [pc, #852]	@ (8028f90 <__ieee754_pow+0x794>)
 8028c3a:	151b      	asrs	r3, r3, #20
 8028c3c:	185b      	adds	r3, r3, r1
 8028c3e:	189b      	adds	r3, r3, r2
 8028c40:	930e      	str	r3, [sp, #56]	@ 0x38
 8028c42:	9b08      	ldr	r3, [sp, #32]
 8028c44:	4dd3      	ldr	r5, [pc, #844]	@ (8028f94 <__ieee754_pow+0x798>)
 8028c46:	031b      	lsls	r3, r3, #12
 8028c48:	4ad3      	ldr	r2, [pc, #844]	@ (8028f98 <__ieee754_pow+0x79c>)
 8028c4a:	0b1b      	lsrs	r3, r3, #12
 8028c4c:	2600      	movs	r6, #0
 8028c4e:	431d      	orrs	r5, r3
 8028c50:	4293      	cmp	r3, r2
 8028c52:	dd09      	ble.n	8028c68 <__ieee754_pow+0x46c>
 8028c54:	4ad1      	ldr	r2, [pc, #836]	@ (8028f9c <__ieee754_pow+0x7a0>)
 8028c56:	3601      	adds	r6, #1
 8028c58:	4293      	cmp	r3, r2
 8028c5a:	dd05      	ble.n	8028c68 <__ieee754_pow+0x46c>
 8028c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028c5e:	199b      	adds	r3, r3, r6
 8028c60:	2600      	movs	r6, #0
 8028c62:	930e      	str	r3, [sp, #56]	@ 0x38
 8028c64:	4bce      	ldr	r3, [pc, #824]	@ (8028fa0 <__ieee754_pow+0x7a4>)
 8028c66:	18ed      	adds	r5, r5, r3
 8028c68:	9800      	ldr	r0, [sp, #0]
 8028c6a:	9901      	ldr	r1, [sp, #4]
 8028c6c:	0029      	movs	r1, r5
 8028c6e:	4bcd      	ldr	r3, [pc, #820]	@ (8028fa4 <__ieee754_pow+0x7a8>)
 8028c70:	00f2      	lsls	r2, r6, #3
 8028c72:	189b      	adds	r3, r3, r2
 8028c74:	685c      	ldr	r4, [r3, #4]
 8028c76:	681b      	ldr	r3, [r3, #0]
 8028c78:	920f      	str	r2, [sp, #60]	@ 0x3c
 8028c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8028c7c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8028c7e:	001a      	movs	r2, r3
 8028c80:	0023      	movs	r3, r4
 8028c82:	900c      	str	r0, [sp, #48]	@ 0x30
 8028c84:	910d      	str	r1, [sp, #52]	@ 0x34
 8028c86:	f7da f94b 	bl	8002f20 <__aeabi_dsub>
 8028c8a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028c8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028c8e:	9010      	str	r0, [sp, #64]	@ 0x40
 8028c90:	9111      	str	r1, [sp, #68]	@ 0x44
 8028c92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028c94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028c96:	f7d8 fe5d 	bl	8001954 <__aeabi_dadd>
 8028c9a:	0002      	movs	r2, r0
 8028c9c:	000b      	movs	r3, r1
 8028c9e:	2000      	movs	r0, #0
 8028ca0:	49bc      	ldr	r1, [pc, #752]	@ (8028f94 <__ieee754_pow+0x798>)
 8028ca2:	f7d9 fa1d 	bl	80020e0 <__aeabi_ddiv>
 8028ca6:	0002      	movs	r2, r0
 8028ca8:	000b      	movs	r3, r1
 8028caa:	9012      	str	r0, [sp, #72]	@ 0x48
 8028cac:	9113      	str	r1, [sp, #76]	@ 0x4c
 8028cae:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028cb0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028cb2:	f7d9 fe4f 	bl	8002954 <__aeabi_dmul>
 8028cb6:	9008      	str	r0, [sp, #32]
 8028cb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8028cba:	9b08      	ldr	r3, [sp, #32]
 8028cbc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8028cbe:	2180      	movs	r1, #128	@ 0x80
 8028cc0:	9302      	str	r3, [sp, #8]
 8028cc2:	9403      	str	r4, [sp, #12]
 8028cc4:	2080      	movs	r0, #128	@ 0x80
 8028cc6:	2300      	movs	r3, #0
 8028cc8:	2200      	movs	r2, #0
 8028cca:	106d      	asrs	r5, r5, #1
 8028ccc:	0589      	lsls	r1, r1, #22
 8028cce:	9302      	str	r3, [sp, #8]
 8028cd0:	4329      	orrs	r1, r5
 8028cd2:	0300      	lsls	r0, r0, #12
 8028cd4:	9b02      	ldr	r3, [sp, #8]
 8028cd6:	9c03      	ldr	r4, [sp, #12]
 8028cd8:	1809      	adds	r1, r1, r0
 8028cda:	9300      	str	r3, [sp, #0]
 8028cdc:	9401      	str	r4, [sp, #4]
 8028cde:	04b6      	lsls	r6, r6, #18
 8028ce0:	198b      	adds	r3, r1, r6
 8028ce2:	9800      	ldr	r0, [sp, #0]
 8028ce4:	9901      	ldr	r1, [sp, #4]
 8028ce6:	0014      	movs	r4, r2
 8028ce8:	001d      	movs	r5, r3
 8028cea:	f7d9 fe33 	bl	8002954 <__aeabi_dmul>
 8028cee:	0002      	movs	r2, r0
 8028cf0:	000b      	movs	r3, r1
 8028cf2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028cf4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028cf6:	f7da f913 	bl	8002f20 <__aeabi_dsub>
 8028cfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028cfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028cfe:	0006      	movs	r6, r0
 8028d00:	000f      	movs	r7, r1
 8028d02:	0020      	movs	r0, r4
 8028d04:	0029      	movs	r1, r5
 8028d06:	f7da f90b 	bl	8002f20 <__aeabi_dsub>
 8028d0a:	0002      	movs	r2, r0
 8028d0c:	000b      	movs	r3, r1
 8028d0e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028d10:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028d12:	f7da f905 	bl	8002f20 <__aeabi_dsub>
 8028d16:	9a00      	ldr	r2, [sp, #0]
 8028d18:	9b01      	ldr	r3, [sp, #4]
 8028d1a:	f7d9 fe1b 	bl	8002954 <__aeabi_dmul>
 8028d1e:	0002      	movs	r2, r0
 8028d20:	000b      	movs	r3, r1
 8028d22:	0030      	movs	r0, r6
 8028d24:	0039      	movs	r1, r7
 8028d26:	f7da f8fb 	bl	8002f20 <__aeabi_dsub>
 8028d2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8028d2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028d2e:	f7d9 fe11 	bl	8002954 <__aeabi_dmul>
 8028d32:	9a08      	ldr	r2, [sp, #32]
 8028d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028d36:	900a      	str	r0, [sp, #40]	@ 0x28
 8028d38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028d3a:	0010      	movs	r0, r2
 8028d3c:	0019      	movs	r1, r3
 8028d3e:	f7d9 fe09 	bl	8002954 <__aeabi_dmul>
 8028d42:	0006      	movs	r6, r0
 8028d44:	000f      	movs	r7, r1
 8028d46:	4a98      	ldr	r2, [pc, #608]	@ (8028fa8 <__ieee754_pow+0x7ac>)
 8028d48:	4b98      	ldr	r3, [pc, #608]	@ (8028fac <__ieee754_pow+0x7b0>)
 8028d4a:	f7d9 fe03 	bl	8002954 <__aeabi_dmul>
 8028d4e:	4a98      	ldr	r2, [pc, #608]	@ (8028fb0 <__ieee754_pow+0x7b4>)
 8028d50:	4b98      	ldr	r3, [pc, #608]	@ (8028fb4 <__ieee754_pow+0x7b8>)
 8028d52:	f7d8 fdff 	bl	8001954 <__aeabi_dadd>
 8028d56:	0032      	movs	r2, r6
 8028d58:	003b      	movs	r3, r7
 8028d5a:	f7d9 fdfb 	bl	8002954 <__aeabi_dmul>
 8028d5e:	4a96      	ldr	r2, [pc, #600]	@ (8028fb8 <__ieee754_pow+0x7bc>)
 8028d60:	4b96      	ldr	r3, [pc, #600]	@ (8028fbc <__ieee754_pow+0x7c0>)
 8028d62:	f7d8 fdf7 	bl	8001954 <__aeabi_dadd>
 8028d66:	0032      	movs	r2, r6
 8028d68:	003b      	movs	r3, r7
 8028d6a:	f7d9 fdf3 	bl	8002954 <__aeabi_dmul>
 8028d6e:	4a94      	ldr	r2, [pc, #592]	@ (8028fc0 <__ieee754_pow+0x7c4>)
 8028d70:	4b94      	ldr	r3, [pc, #592]	@ (8028fc4 <__ieee754_pow+0x7c8>)
 8028d72:	f7d8 fdef 	bl	8001954 <__aeabi_dadd>
 8028d76:	0032      	movs	r2, r6
 8028d78:	003b      	movs	r3, r7
 8028d7a:	f7d9 fdeb 	bl	8002954 <__aeabi_dmul>
 8028d7e:	4a92      	ldr	r2, [pc, #584]	@ (8028fc8 <__ieee754_pow+0x7cc>)
 8028d80:	4b92      	ldr	r3, [pc, #584]	@ (8028fcc <__ieee754_pow+0x7d0>)
 8028d82:	f7d8 fde7 	bl	8001954 <__aeabi_dadd>
 8028d86:	0032      	movs	r2, r6
 8028d88:	003b      	movs	r3, r7
 8028d8a:	f7d9 fde3 	bl	8002954 <__aeabi_dmul>
 8028d8e:	4a90      	ldr	r2, [pc, #576]	@ (8028fd0 <__ieee754_pow+0x7d4>)
 8028d90:	4b90      	ldr	r3, [pc, #576]	@ (8028fd4 <__ieee754_pow+0x7d8>)
 8028d92:	f7d8 fddf 	bl	8001954 <__aeabi_dadd>
 8028d96:	0032      	movs	r2, r6
 8028d98:	0004      	movs	r4, r0
 8028d9a:	000d      	movs	r5, r1
 8028d9c:	003b      	movs	r3, r7
 8028d9e:	0030      	movs	r0, r6
 8028da0:	0039      	movs	r1, r7
 8028da2:	f7d9 fdd7 	bl	8002954 <__aeabi_dmul>
 8028da6:	0002      	movs	r2, r0
 8028da8:	000b      	movs	r3, r1
 8028daa:	0020      	movs	r0, r4
 8028dac:	0029      	movs	r1, r5
 8028dae:	f7d9 fdd1 	bl	8002954 <__aeabi_dmul>
 8028db2:	9a00      	ldr	r2, [sp, #0]
 8028db4:	9b01      	ldr	r3, [sp, #4]
 8028db6:	0004      	movs	r4, r0
 8028db8:	000d      	movs	r5, r1
 8028dba:	9808      	ldr	r0, [sp, #32]
 8028dbc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028dbe:	f7d8 fdc9 	bl	8001954 <__aeabi_dadd>
 8028dc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028dc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028dc6:	f7d9 fdc5 	bl	8002954 <__aeabi_dmul>
 8028dca:	0022      	movs	r2, r4
 8028dcc:	002b      	movs	r3, r5
 8028dce:	f7d8 fdc1 	bl	8001954 <__aeabi_dadd>
 8028dd2:	9a00      	ldr	r2, [sp, #0]
 8028dd4:	9b01      	ldr	r3, [sp, #4]
 8028dd6:	900c      	str	r0, [sp, #48]	@ 0x30
 8028dd8:	910d      	str	r1, [sp, #52]	@ 0x34
 8028dda:	0010      	movs	r0, r2
 8028ddc:	0019      	movs	r1, r3
 8028dde:	f7d9 fdb9 	bl	8002954 <__aeabi_dmul>
 8028de2:	2200      	movs	r2, #0
 8028de4:	4b7c      	ldr	r3, [pc, #496]	@ (8028fd8 <__ieee754_pow+0x7dc>)
 8028de6:	0004      	movs	r4, r0
 8028de8:	000d      	movs	r5, r1
 8028dea:	f7d8 fdb3 	bl	8001954 <__aeabi_dadd>
 8028dee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028df0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028df2:	f7d8 fdaf 	bl	8001954 <__aeabi_dadd>
 8028df6:	2000      	movs	r0, #0
 8028df8:	000f      	movs	r7, r1
 8028dfa:	0006      	movs	r6, r0
 8028dfc:	0002      	movs	r2, r0
 8028dfe:	000b      	movs	r3, r1
 8028e00:	9800      	ldr	r0, [sp, #0]
 8028e02:	9901      	ldr	r1, [sp, #4]
 8028e04:	f7d9 fda6 	bl	8002954 <__aeabi_dmul>
 8028e08:	2200      	movs	r2, #0
 8028e0a:	9000      	str	r0, [sp, #0]
 8028e0c:	9101      	str	r1, [sp, #4]
 8028e0e:	4b72      	ldr	r3, [pc, #456]	@ (8028fd8 <__ieee754_pow+0x7dc>)
 8028e10:	0030      	movs	r0, r6
 8028e12:	0039      	movs	r1, r7
 8028e14:	f7da f884 	bl	8002f20 <__aeabi_dsub>
 8028e18:	0022      	movs	r2, r4
 8028e1a:	002b      	movs	r3, r5
 8028e1c:	f7da f880 	bl	8002f20 <__aeabi_dsub>
 8028e20:	0002      	movs	r2, r0
 8028e22:	000b      	movs	r3, r1
 8028e24:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028e26:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028e28:	f7da f87a 	bl	8002f20 <__aeabi_dsub>
 8028e2c:	9a08      	ldr	r2, [sp, #32]
 8028e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028e30:	f7d9 fd90 	bl	8002954 <__aeabi_dmul>
 8028e34:	0032      	movs	r2, r6
 8028e36:	0004      	movs	r4, r0
 8028e38:	000d      	movs	r5, r1
 8028e3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028e3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028e3e:	003b      	movs	r3, r7
 8028e40:	f7d9 fd88 	bl	8002954 <__aeabi_dmul>
 8028e44:	0002      	movs	r2, r0
 8028e46:	000b      	movs	r3, r1
 8028e48:	0020      	movs	r0, r4
 8028e4a:	0029      	movs	r1, r5
 8028e4c:	f7d8 fd82 	bl	8001954 <__aeabi_dadd>
 8028e50:	0004      	movs	r4, r0
 8028e52:	000d      	movs	r5, r1
 8028e54:	0002      	movs	r2, r0
 8028e56:	000b      	movs	r3, r1
 8028e58:	9800      	ldr	r0, [sp, #0]
 8028e5a:	9901      	ldr	r1, [sp, #4]
 8028e5c:	f7d8 fd7a 	bl	8001954 <__aeabi_dadd>
 8028e60:	22e0      	movs	r2, #224	@ 0xe0
 8028e62:	2000      	movs	r0, #0
 8028e64:	4b5d      	ldr	r3, [pc, #372]	@ (8028fdc <__ieee754_pow+0x7e0>)
 8028e66:	0612      	lsls	r2, r2, #24
 8028e68:	0006      	movs	r6, r0
 8028e6a:	000f      	movs	r7, r1
 8028e6c:	f7d9 fd72 	bl	8002954 <__aeabi_dmul>
 8028e70:	9008      	str	r0, [sp, #32]
 8028e72:	9109      	str	r1, [sp, #36]	@ 0x24
 8028e74:	9a00      	ldr	r2, [sp, #0]
 8028e76:	9b01      	ldr	r3, [sp, #4]
 8028e78:	0030      	movs	r0, r6
 8028e7a:	0039      	movs	r1, r7
 8028e7c:	f7da f850 	bl	8002f20 <__aeabi_dsub>
 8028e80:	0002      	movs	r2, r0
 8028e82:	000b      	movs	r3, r1
 8028e84:	0020      	movs	r0, r4
 8028e86:	0029      	movs	r1, r5
 8028e88:	f7da f84a 	bl	8002f20 <__aeabi_dsub>
 8028e8c:	4a54      	ldr	r2, [pc, #336]	@ (8028fe0 <__ieee754_pow+0x7e4>)
 8028e8e:	4b53      	ldr	r3, [pc, #332]	@ (8028fdc <__ieee754_pow+0x7e0>)
 8028e90:	f7d9 fd60 	bl	8002954 <__aeabi_dmul>
 8028e94:	4a53      	ldr	r2, [pc, #332]	@ (8028fe4 <__ieee754_pow+0x7e8>)
 8028e96:	0004      	movs	r4, r0
 8028e98:	000d      	movs	r5, r1
 8028e9a:	0030      	movs	r0, r6
 8028e9c:	0039      	movs	r1, r7
 8028e9e:	4b52      	ldr	r3, [pc, #328]	@ (8028fe8 <__ieee754_pow+0x7ec>)
 8028ea0:	f7d9 fd58 	bl	8002954 <__aeabi_dmul>
 8028ea4:	0002      	movs	r2, r0
 8028ea6:	000b      	movs	r3, r1
 8028ea8:	0020      	movs	r0, r4
 8028eaa:	0029      	movs	r1, r5
 8028eac:	f7d8 fd52 	bl	8001954 <__aeabi_dadd>
 8028eb0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8028fec <__ieee754_pow+0x7f0>)
 8028eb4:	189b      	adds	r3, r3, r2
 8028eb6:	681a      	ldr	r2, [r3, #0]
 8028eb8:	685b      	ldr	r3, [r3, #4]
 8028eba:	f7d8 fd4b 	bl	8001954 <__aeabi_dadd>
 8028ebe:	900a      	str	r0, [sp, #40]	@ 0x28
 8028ec0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028ec2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8028ec4:	f7da fc94 	bl	80037f0 <__aeabi_i2d>
 8028ec8:	0004      	movs	r4, r0
 8028eca:	000d      	movs	r5, r1
 8028ecc:	9808      	ldr	r0, [sp, #32]
 8028ece:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028ed0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028ed2:	4b47      	ldr	r3, [pc, #284]	@ (8028ff0 <__ieee754_pow+0x7f4>)
 8028ed4:	189b      	adds	r3, r3, r2
 8028ed6:	681e      	ldr	r6, [r3, #0]
 8028ed8:	685f      	ldr	r7, [r3, #4]
 8028eda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028edc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028ede:	f7d8 fd39 	bl	8001954 <__aeabi_dadd>
 8028ee2:	0032      	movs	r2, r6
 8028ee4:	003b      	movs	r3, r7
 8028ee6:	f7d8 fd35 	bl	8001954 <__aeabi_dadd>
 8028eea:	0022      	movs	r2, r4
 8028eec:	002b      	movs	r3, r5
 8028eee:	f7d8 fd31 	bl	8001954 <__aeabi_dadd>
 8028ef2:	2000      	movs	r0, #0
 8028ef4:	0022      	movs	r2, r4
 8028ef6:	002b      	movs	r3, r5
 8028ef8:	9000      	str	r0, [sp, #0]
 8028efa:	9101      	str	r1, [sp, #4]
 8028efc:	f7da f810 	bl	8002f20 <__aeabi_dsub>
 8028f00:	0032      	movs	r2, r6
 8028f02:	003b      	movs	r3, r7
 8028f04:	f7da f80c 	bl	8002f20 <__aeabi_dsub>
 8028f08:	9a08      	ldr	r2, [sp, #32]
 8028f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028f0c:	f7da f808 	bl	8002f20 <__aeabi_dsub>
 8028f10:	0002      	movs	r2, r0
 8028f12:	000b      	movs	r3, r1
 8028f14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028f16:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028f18:	e61f      	b.n	8028b5a <__ieee754_pow+0x35e>
 8028f1a:	4a36      	ldr	r2, [pc, #216]	@ (8028ff4 <__ieee754_pow+0x7f8>)
 8028f1c:	4b36      	ldr	r3, [pc, #216]	@ (8028ff8 <__ieee754_pow+0x7fc>)
 8028f1e:	9804      	ldr	r0, [sp, #16]
 8028f20:	9905      	ldr	r1, [sp, #20]
 8028f22:	f7d8 fd17 	bl	8001954 <__aeabi_dadd>
 8028f26:	9a00      	ldr	r2, [sp, #0]
 8028f28:	9b01      	ldr	r3, [sp, #4]
 8028f2a:	0004      	movs	r4, r0
 8028f2c:	000d      	movs	r5, r1
 8028f2e:	0030      	movs	r0, r6
 8028f30:	0039      	movs	r1, r7
 8028f32:	f7d9 fff5 	bl	8002f20 <__aeabi_dsub>
 8028f36:	0002      	movs	r2, r0
 8028f38:	000b      	movs	r3, r1
 8028f3a:	0020      	movs	r0, r4
 8028f3c:	0029      	movs	r1, r5
 8028f3e:	f7d7 fad1 	bl	80004e4 <__aeabi_dcmpgt>
 8028f42:	2800      	cmp	r0, #0
 8028f44:	d000      	beq.n	8028f48 <__ieee754_pow+0x74c>
 8028f46:	e646      	b.n	8028bd6 <__ieee754_pow+0x3da>
 8028f48:	4b2c      	ldr	r3, [pc, #176]	@ (8028ffc <__ieee754_pow+0x800>)
 8028f4a:	e063      	b.n	8029014 <__ieee754_pow+0x818>
 8028f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8029000 <__ieee754_pow+0x804>)
 8028f4e:	004b      	lsls	r3, r1, #1
 8028f50:	085b      	lsrs	r3, r3, #1
 8028f52:	4293      	cmp	r3, r2
 8028f54:	d95a      	bls.n	802900c <__ieee754_pow+0x810>
 8028f56:	4b2b      	ldr	r3, [pc, #172]	@ (8029004 <__ieee754_pow+0x808>)
 8028f58:	18cb      	adds	r3, r1, r3
 8028f5a:	4303      	orrs	r3, r0
 8028f5c:	d008      	beq.n	8028f70 <__ieee754_pow+0x774>
 8028f5e:	9806      	ldr	r0, [sp, #24]
 8028f60:	9907      	ldr	r1, [sp, #28]
 8028f62:	2300      	movs	r3, #0
 8028f64:	2200      	movs	r2, #0
 8028f66:	f7d7 faa9 	bl	80004bc <__aeabi_dcmplt>
 8028f6a:	1e43      	subs	r3, r0, #1
 8028f6c:	4198      	sbcs	r0, r3
 8028f6e:	e567      	b.n	8028a40 <__ieee754_pow+0x244>
 8028f70:	9a00      	ldr	r2, [sp, #0]
 8028f72:	9b01      	ldr	r3, [sp, #4]
 8028f74:	f7d9 ffd4 	bl	8002f20 <__aeabi_dsub>
 8028f78:	9a04      	ldr	r2, [sp, #16]
 8028f7a:	9b05      	ldr	r3, [sp, #20]
 8028f7c:	f7d7 fabc 	bl	80004f8 <__aeabi_dcmpge>
 8028f80:	2800      	cmp	r0, #0
 8028f82:	d1ec      	bne.n	8028f5e <__ieee754_pow+0x762>
 8028f84:	4b20      	ldr	r3, [pc, #128]	@ (8029008 <__ieee754_pow+0x80c>)
 8028f86:	e045      	b.n	8029014 <__ieee754_pow+0x818>
 8028f88:	7ff00000 	.word	0x7ff00000
 8028f8c:	43400000 	.word	0x43400000
 8028f90:	fffffc01 	.word	0xfffffc01
 8028f94:	3ff00000 	.word	0x3ff00000
 8028f98:	0003988e 	.word	0x0003988e
 8028f9c:	000bb679 	.word	0x000bb679
 8028fa0:	fff00000 	.word	0xfff00000
 8028fa4:	0802e420 	.word	0x0802e420
 8028fa8:	4a454eef 	.word	0x4a454eef
 8028fac:	3fca7e28 	.word	0x3fca7e28
 8028fb0:	93c9db65 	.word	0x93c9db65
 8028fb4:	3fcd864a 	.word	0x3fcd864a
 8028fb8:	a91d4101 	.word	0xa91d4101
 8028fbc:	3fd17460 	.word	0x3fd17460
 8028fc0:	518f264d 	.word	0x518f264d
 8028fc4:	3fd55555 	.word	0x3fd55555
 8028fc8:	db6fabff 	.word	0xdb6fabff
 8028fcc:	3fdb6db6 	.word	0x3fdb6db6
 8028fd0:	33333303 	.word	0x33333303
 8028fd4:	3fe33333 	.word	0x3fe33333
 8028fd8:	40080000 	.word	0x40080000
 8028fdc:	3feec709 	.word	0x3feec709
 8028fe0:	dc3a03fd 	.word	0xdc3a03fd
 8028fe4:	145b01f5 	.word	0x145b01f5
 8028fe8:	be3e2fe0 	.word	0xbe3e2fe0
 8028fec:	0802e400 	.word	0x0802e400
 8028ff0:	0802e410 	.word	0x0802e410
 8028ff4:	652b82fe 	.word	0x652b82fe
 8028ff8:	3c971547 	.word	0x3c971547
 8028ffc:	40900000 	.word	0x40900000
 8029000:	4090cbff 	.word	0x4090cbff
 8029004:	3f6f3400 	.word	0x3f6f3400
 8029008:	4090cc00 	.word	0x4090cc00
 802900c:	4a73      	ldr	r2, [pc, #460]	@ (80291dc <__ieee754_pow+0x9e0>)
 802900e:	9402      	str	r4, [sp, #8]
 8029010:	4293      	cmp	r3, r2
 8029012:	d925      	bls.n	8029060 <__ieee754_pow+0x864>
 8029014:	4a72      	ldr	r2, [pc, #456]	@ (80291e0 <__ieee754_pow+0x9e4>)
 8029016:	151b      	asrs	r3, r3, #20
 8029018:	189b      	adds	r3, r3, r2
 802901a:	2280      	movs	r2, #128	@ 0x80
 802901c:	0352      	lsls	r2, r2, #13
 802901e:	0011      	movs	r1, r2
 8029020:	4119      	asrs	r1, r3
 8029022:	19cb      	adds	r3, r1, r7
 8029024:	005c      	lsls	r4, r3, #1
 8029026:	496f      	ldr	r1, [pc, #444]	@ (80291e4 <__ieee754_pow+0x9e8>)
 8029028:	4d6f      	ldr	r5, [pc, #444]	@ (80291e8 <__ieee754_pow+0x9ec>)
 802902a:	0d64      	lsrs	r4, r4, #21
 802902c:	1864      	adds	r4, r4, r1
 802902e:	4125      	asrs	r5, r4
 8029030:	401d      	ands	r5, r3
 8029032:	031b      	lsls	r3, r3, #12
 8029034:	0b1b      	lsrs	r3, r3, #12
 8029036:	4313      	orrs	r3, r2
 8029038:	2214      	movs	r2, #20
 802903a:	1b12      	subs	r2, r2, r4
 802903c:	4113      	asrs	r3, r2
 802903e:	9302      	str	r3, [sp, #8]
 8029040:	9b08      	ldr	r3, [sp, #32]
 8029042:	2000      	movs	r0, #0
 8029044:	0029      	movs	r1, r5
 8029046:	2b00      	cmp	r3, #0
 8029048:	da02      	bge.n	8029050 <__ieee754_pow+0x854>
 802904a:	9b02      	ldr	r3, [sp, #8]
 802904c:	425b      	negs	r3, r3
 802904e:	9302      	str	r3, [sp, #8]
 8029050:	0002      	movs	r2, r0
 8029052:	000b      	movs	r3, r1
 8029054:	9800      	ldr	r0, [sp, #0]
 8029056:	9901      	ldr	r1, [sp, #4]
 8029058:	f7d9 ff62 	bl	8002f20 <__aeabi_dsub>
 802905c:	9000      	str	r0, [sp, #0]
 802905e:	9101      	str	r1, [sp, #4]
 8029060:	9a04      	ldr	r2, [sp, #16]
 8029062:	9b05      	ldr	r3, [sp, #20]
 8029064:	9800      	ldr	r0, [sp, #0]
 8029066:	9901      	ldr	r1, [sp, #4]
 8029068:	f7d8 fc74 	bl	8001954 <__aeabi_dadd>
 802906c:	2000      	movs	r0, #0
 802906e:	2200      	movs	r2, #0
 8029070:	4b5e      	ldr	r3, [pc, #376]	@ (80291ec <__ieee754_pow+0x9f0>)
 8029072:	0006      	movs	r6, r0
 8029074:	000f      	movs	r7, r1
 8029076:	f7d9 fc6d 	bl	8002954 <__aeabi_dmul>
 802907a:	9a00      	ldr	r2, [sp, #0]
 802907c:	9b01      	ldr	r3, [sp, #4]
 802907e:	9008      	str	r0, [sp, #32]
 8029080:	9109      	str	r1, [sp, #36]	@ 0x24
 8029082:	0030      	movs	r0, r6
 8029084:	0039      	movs	r1, r7
 8029086:	f7d9 ff4b 	bl	8002f20 <__aeabi_dsub>
 802908a:	0002      	movs	r2, r0
 802908c:	000b      	movs	r3, r1
 802908e:	9804      	ldr	r0, [sp, #16]
 8029090:	9905      	ldr	r1, [sp, #20]
 8029092:	f7d9 ff45 	bl	8002f20 <__aeabi_dsub>
 8029096:	4a56      	ldr	r2, [pc, #344]	@ (80291f0 <__ieee754_pow+0x9f4>)
 8029098:	4b56      	ldr	r3, [pc, #344]	@ (80291f4 <__ieee754_pow+0x9f8>)
 802909a:	f7d9 fc5b 	bl	8002954 <__aeabi_dmul>
 802909e:	4a56      	ldr	r2, [pc, #344]	@ (80291f8 <__ieee754_pow+0x9fc>)
 80290a0:	0004      	movs	r4, r0
 80290a2:	000d      	movs	r5, r1
 80290a4:	0030      	movs	r0, r6
 80290a6:	0039      	movs	r1, r7
 80290a8:	4b54      	ldr	r3, [pc, #336]	@ (80291fc <__ieee754_pow+0xa00>)
 80290aa:	f7d9 fc53 	bl	8002954 <__aeabi_dmul>
 80290ae:	0002      	movs	r2, r0
 80290b0:	000b      	movs	r3, r1
 80290b2:	0020      	movs	r0, r4
 80290b4:	0029      	movs	r1, r5
 80290b6:	f7d8 fc4d 	bl	8001954 <__aeabi_dadd>
 80290ba:	0004      	movs	r4, r0
 80290bc:	000d      	movs	r5, r1
 80290be:	0002      	movs	r2, r0
 80290c0:	000b      	movs	r3, r1
 80290c2:	9808      	ldr	r0, [sp, #32]
 80290c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80290c6:	f7d8 fc45 	bl	8001954 <__aeabi_dadd>
 80290ca:	9a08      	ldr	r2, [sp, #32]
 80290cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80290ce:	0006      	movs	r6, r0
 80290d0:	000f      	movs	r7, r1
 80290d2:	f7d9 ff25 	bl	8002f20 <__aeabi_dsub>
 80290d6:	0002      	movs	r2, r0
 80290d8:	000b      	movs	r3, r1
 80290da:	0020      	movs	r0, r4
 80290dc:	0029      	movs	r1, r5
 80290de:	f7d9 ff1f 	bl	8002f20 <__aeabi_dsub>
 80290e2:	0032      	movs	r2, r6
 80290e4:	9000      	str	r0, [sp, #0]
 80290e6:	9101      	str	r1, [sp, #4]
 80290e8:	003b      	movs	r3, r7
 80290ea:	0030      	movs	r0, r6
 80290ec:	0039      	movs	r1, r7
 80290ee:	f7d9 fc31 	bl	8002954 <__aeabi_dmul>
 80290f2:	0004      	movs	r4, r0
 80290f4:	000d      	movs	r5, r1
 80290f6:	4a42      	ldr	r2, [pc, #264]	@ (8029200 <__ieee754_pow+0xa04>)
 80290f8:	4b42      	ldr	r3, [pc, #264]	@ (8029204 <__ieee754_pow+0xa08>)
 80290fa:	f7d9 fc2b 	bl	8002954 <__aeabi_dmul>
 80290fe:	4a42      	ldr	r2, [pc, #264]	@ (8029208 <__ieee754_pow+0xa0c>)
 8029100:	4b42      	ldr	r3, [pc, #264]	@ (802920c <__ieee754_pow+0xa10>)
 8029102:	f7d9 ff0d 	bl	8002f20 <__aeabi_dsub>
 8029106:	0022      	movs	r2, r4
 8029108:	002b      	movs	r3, r5
 802910a:	f7d9 fc23 	bl	8002954 <__aeabi_dmul>
 802910e:	4a40      	ldr	r2, [pc, #256]	@ (8029210 <__ieee754_pow+0xa14>)
 8029110:	4b40      	ldr	r3, [pc, #256]	@ (8029214 <__ieee754_pow+0xa18>)
 8029112:	f7d8 fc1f 	bl	8001954 <__aeabi_dadd>
 8029116:	0022      	movs	r2, r4
 8029118:	002b      	movs	r3, r5
 802911a:	f7d9 fc1b 	bl	8002954 <__aeabi_dmul>
 802911e:	4a3e      	ldr	r2, [pc, #248]	@ (8029218 <__ieee754_pow+0xa1c>)
 8029120:	4b3e      	ldr	r3, [pc, #248]	@ (802921c <__ieee754_pow+0xa20>)
 8029122:	f7d9 fefd 	bl	8002f20 <__aeabi_dsub>
 8029126:	0022      	movs	r2, r4
 8029128:	002b      	movs	r3, r5
 802912a:	f7d9 fc13 	bl	8002954 <__aeabi_dmul>
 802912e:	4a3c      	ldr	r2, [pc, #240]	@ (8029220 <__ieee754_pow+0xa24>)
 8029130:	4b3c      	ldr	r3, [pc, #240]	@ (8029224 <__ieee754_pow+0xa28>)
 8029132:	f7d8 fc0f 	bl	8001954 <__aeabi_dadd>
 8029136:	0022      	movs	r2, r4
 8029138:	002b      	movs	r3, r5
 802913a:	f7d9 fc0b 	bl	8002954 <__aeabi_dmul>
 802913e:	0002      	movs	r2, r0
 8029140:	000b      	movs	r3, r1
 8029142:	0030      	movs	r0, r6
 8029144:	0039      	movs	r1, r7
 8029146:	f7d9 feeb 	bl	8002f20 <__aeabi_dsub>
 802914a:	0004      	movs	r4, r0
 802914c:	000d      	movs	r5, r1
 802914e:	0002      	movs	r2, r0
 8029150:	000b      	movs	r3, r1
 8029152:	0030      	movs	r0, r6
 8029154:	0039      	movs	r1, r7
 8029156:	f7d9 fbfd 	bl	8002954 <__aeabi_dmul>
 802915a:	2380      	movs	r3, #128	@ 0x80
 802915c:	9004      	str	r0, [sp, #16]
 802915e:	9105      	str	r1, [sp, #20]
 8029160:	2200      	movs	r2, #0
 8029162:	0020      	movs	r0, r4
 8029164:	0029      	movs	r1, r5
 8029166:	05db      	lsls	r3, r3, #23
 8029168:	f7d9 feda 	bl	8002f20 <__aeabi_dsub>
 802916c:	0002      	movs	r2, r0
 802916e:	000b      	movs	r3, r1
 8029170:	9804      	ldr	r0, [sp, #16]
 8029172:	9905      	ldr	r1, [sp, #20]
 8029174:	f7d8 ffb4 	bl	80020e0 <__aeabi_ddiv>
 8029178:	9a00      	ldr	r2, [sp, #0]
 802917a:	9b01      	ldr	r3, [sp, #4]
 802917c:	0004      	movs	r4, r0
 802917e:	000d      	movs	r5, r1
 8029180:	0030      	movs	r0, r6
 8029182:	0039      	movs	r1, r7
 8029184:	f7d9 fbe6 	bl	8002954 <__aeabi_dmul>
 8029188:	9a00      	ldr	r2, [sp, #0]
 802918a:	9b01      	ldr	r3, [sp, #4]
 802918c:	f7d8 fbe2 	bl	8001954 <__aeabi_dadd>
 8029190:	0002      	movs	r2, r0
 8029192:	000b      	movs	r3, r1
 8029194:	0020      	movs	r0, r4
 8029196:	0029      	movs	r1, r5
 8029198:	f7d9 fec2 	bl	8002f20 <__aeabi_dsub>
 802919c:	0032      	movs	r2, r6
 802919e:	003b      	movs	r3, r7
 80291a0:	f7d9 febe 	bl	8002f20 <__aeabi_dsub>
 80291a4:	0002      	movs	r2, r0
 80291a6:	000b      	movs	r3, r1
 80291a8:	2000      	movs	r0, #0
 80291aa:	491f      	ldr	r1, [pc, #124]	@ (8029228 <__ieee754_pow+0xa2c>)
 80291ac:	f7d9 feb8 	bl	8002f20 <__aeabi_dsub>
 80291b0:	9b02      	ldr	r3, [sp, #8]
 80291b2:	051b      	lsls	r3, r3, #20
 80291b4:	185b      	adds	r3, r3, r1
 80291b6:	151a      	asrs	r2, r3, #20
 80291b8:	2a00      	cmp	r2, #0
 80291ba:	dc06      	bgt.n	80291ca <__ieee754_pow+0x9ce>
 80291bc:	9a02      	ldr	r2, [sp, #8]
 80291be:	f000 f929 	bl	8029414 <scalbn>
 80291c2:	9a06      	ldr	r2, [sp, #24]
 80291c4:	9b07      	ldr	r3, [sp, #28]
 80291c6:	f7ff fb8b 	bl	80288e0 <__ieee754_pow+0xe4>
 80291ca:	0019      	movs	r1, r3
 80291cc:	e7f9      	b.n	80291c2 <__ieee754_pow+0x9c6>
 80291ce:	2300      	movs	r3, #0
 80291d0:	4c15      	ldr	r4, [pc, #84]	@ (8029228 <__ieee754_pow+0xa2c>)
 80291d2:	9300      	str	r3, [sp, #0]
 80291d4:	9401      	str	r4, [sp, #4]
 80291d6:	f7ff fbc8 	bl	802896a <__ieee754_pow+0x16e>
 80291da:	46c0      	nop			@ (mov r8, r8)
 80291dc:	3fe00000 	.word	0x3fe00000
 80291e0:	fffffc02 	.word	0xfffffc02
 80291e4:	fffffc01 	.word	0xfffffc01
 80291e8:	fff00000 	.word	0xfff00000
 80291ec:	3fe62e43 	.word	0x3fe62e43
 80291f0:	fefa39ef 	.word	0xfefa39ef
 80291f4:	3fe62e42 	.word	0x3fe62e42
 80291f8:	0ca86c39 	.word	0x0ca86c39
 80291fc:	be205c61 	.word	0xbe205c61
 8029200:	72bea4d0 	.word	0x72bea4d0
 8029204:	3e663769 	.word	0x3e663769
 8029208:	c5d26bf1 	.word	0xc5d26bf1
 802920c:	3ebbbd41 	.word	0x3ebbbd41
 8029210:	af25de2c 	.word	0xaf25de2c
 8029214:	3f11566a 	.word	0x3f11566a
 8029218:	16bebd93 	.word	0x16bebd93
 802921c:	3f66c16c 	.word	0x3f66c16c
 8029220:	5555553e 	.word	0x5555553e
 8029224:	3fc55555 	.word	0x3fc55555
 8029228:	3ff00000 	.word	0x3ff00000

0802922c <fabs>:
 802922c:	0049      	lsls	r1, r1, #1
 802922e:	084b      	lsrs	r3, r1, #1
 8029230:	0019      	movs	r1, r3
 8029232:	4770      	bx	lr

08029234 <__ieee754_expf>:
 8029234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029236:	21ff      	movs	r1, #255	@ 0xff
 8029238:	0043      	lsls	r3, r0, #1
 802923a:	1c04      	adds	r4, r0, #0
 802923c:	085b      	lsrs	r3, r3, #1
 802923e:	05c9      	lsls	r1, r1, #23
 8029240:	428b      	cmp	r3, r1
 8029242:	d904      	bls.n	802924e <__ieee754_expf+0x1a>
 8029244:	1c01      	adds	r1, r0, #0
 8029246:	1c20      	adds	r0, r4, #0
 8029248:	f7d7 fb3a 	bl	80008c0 <__aeabi_fadd>
 802924c:	e00d      	b.n	802926a <__ieee754_expf+0x36>
 802924e:	0fc6      	lsrs	r6, r0, #31
 8029250:	428b      	cmp	r3, r1
 8029252:	d104      	bne.n	802925e <__ieee754_expf+0x2a>
 8029254:	2e00      	cmp	r6, #0
 8029256:	d000      	beq.n	802925a <__ieee754_expf+0x26>
 8029258:	e0ba      	b.n	80293d0 <__ieee754_expf+0x19c>
 802925a:	1c20      	adds	r0, r4, #0
 802925c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802925e:	495d      	ldr	r1, [pc, #372]	@ (80293d4 <__ieee754_expf+0x1a0>)
 8029260:	4288      	cmp	r0, r1
 8029262:	dd04      	ble.n	802926e <__ieee754_expf+0x3a>
 8029264:	2000      	movs	r0, #0
 8029266:	f000 f98a 	bl	802957e <__math_oflowf>
 802926a:	1c04      	adds	r4, r0, #0
 802926c:	e7f5      	b.n	802925a <__ieee754_expf+0x26>
 802926e:	2800      	cmp	r0, #0
 8029270:	da06      	bge.n	8029280 <__ieee754_expf+0x4c>
 8029272:	4a59      	ldr	r2, [pc, #356]	@ (80293d8 <__ieee754_expf+0x1a4>)
 8029274:	4293      	cmp	r3, r2
 8029276:	d903      	bls.n	8029280 <__ieee754_expf+0x4c>
 8029278:	2000      	movs	r0, #0
 802927a:	f000 f97a 	bl	8029572 <__math_uflowf>
 802927e:	e7f4      	b.n	802926a <__ieee754_expf+0x36>
 8029280:	4a56      	ldr	r2, [pc, #344]	@ (80293dc <__ieee754_expf+0x1a8>)
 8029282:	4293      	cmp	r3, r2
 8029284:	d96e      	bls.n	8029364 <__ieee754_expf+0x130>
 8029286:	4a56      	ldr	r2, [pc, #344]	@ (80293e0 <__ieee754_expf+0x1ac>)
 8029288:	00b5      	lsls	r5, r6, #2
 802928a:	4293      	cmp	r3, r2
 802928c:	d84e      	bhi.n	802932c <__ieee754_expf+0xf8>
 802928e:	4b55      	ldr	r3, [pc, #340]	@ (80293e4 <__ieee754_expf+0x1b0>)
 8029290:	1c20      	adds	r0, r4, #0
 8029292:	5959      	ldr	r1, [r3, r5]
 8029294:	f7d8 f82e 	bl	80012f4 <__aeabi_fsub>
 8029298:	4b53      	ldr	r3, [pc, #332]	@ (80293e8 <__ieee754_expf+0x1b4>)
 802929a:	1c07      	adds	r7, r0, #0
 802929c:	595b      	ldr	r3, [r3, r5]
 802929e:	2501      	movs	r5, #1
 80292a0:	4075      	eors	r5, r6
 80292a2:	9300      	str	r3, [sp, #0]
 80292a4:	1bad      	subs	r5, r5, r6
 80292a6:	9900      	ldr	r1, [sp, #0]
 80292a8:	1c38      	adds	r0, r7, #0
 80292aa:	f7d8 f823 	bl	80012f4 <__aeabi_fsub>
 80292ae:	1c04      	adds	r4, r0, #0
 80292b0:	1c21      	adds	r1, r4, #0
 80292b2:	1c20      	adds	r0, r4, #0
 80292b4:	f7d7 fec4 	bl	8001040 <__aeabi_fmul>
 80292b8:	494c      	ldr	r1, [pc, #304]	@ (80293ec <__ieee754_expf+0x1b8>)
 80292ba:	1c06      	adds	r6, r0, #0
 80292bc:	f7d7 fec0 	bl	8001040 <__aeabi_fmul>
 80292c0:	494b      	ldr	r1, [pc, #300]	@ (80293f0 <__ieee754_expf+0x1bc>)
 80292c2:	f7d8 f817 	bl	80012f4 <__aeabi_fsub>
 80292c6:	1c31      	adds	r1, r6, #0
 80292c8:	f7d7 feba 	bl	8001040 <__aeabi_fmul>
 80292cc:	4949      	ldr	r1, [pc, #292]	@ (80293f4 <__ieee754_expf+0x1c0>)
 80292ce:	f7d7 faf7 	bl	80008c0 <__aeabi_fadd>
 80292d2:	1c31      	adds	r1, r6, #0
 80292d4:	f7d7 feb4 	bl	8001040 <__aeabi_fmul>
 80292d8:	4947      	ldr	r1, [pc, #284]	@ (80293f8 <__ieee754_expf+0x1c4>)
 80292da:	f7d8 f80b 	bl	80012f4 <__aeabi_fsub>
 80292de:	1c31      	adds	r1, r6, #0
 80292e0:	f7d7 feae 	bl	8001040 <__aeabi_fmul>
 80292e4:	4945      	ldr	r1, [pc, #276]	@ (80293fc <__ieee754_expf+0x1c8>)
 80292e6:	f7d7 faeb 	bl	80008c0 <__aeabi_fadd>
 80292ea:	1c31      	adds	r1, r6, #0
 80292ec:	f7d7 fea8 	bl	8001040 <__aeabi_fmul>
 80292f0:	1c01      	adds	r1, r0, #0
 80292f2:	1c20      	adds	r0, r4, #0
 80292f4:	f7d7 fffe 	bl	80012f4 <__aeabi_fsub>
 80292f8:	1c01      	adds	r1, r0, #0
 80292fa:	1c06      	adds	r6, r0, #0
 80292fc:	1c20      	adds	r0, r4, #0
 80292fe:	f7d7 fe9f 	bl	8001040 <__aeabi_fmul>
 8029302:	9001      	str	r0, [sp, #4]
 8029304:	2d00      	cmp	r5, #0
 8029306:	d140      	bne.n	802938a <__ieee754_expf+0x156>
 8029308:	2180      	movs	r1, #128	@ 0x80
 802930a:	1c30      	adds	r0, r6, #0
 802930c:	05c9      	lsls	r1, r1, #23
 802930e:	f7d7 fff1 	bl	80012f4 <__aeabi_fsub>
 8029312:	1c01      	adds	r1, r0, #0
 8029314:	9801      	ldr	r0, [sp, #4]
 8029316:	f7d7 fcc5 	bl	8000ca4 <__aeabi_fdiv>
 802931a:	1c21      	adds	r1, r4, #0
 802931c:	f7d7 ffea 	bl	80012f4 <__aeabi_fsub>
 8029320:	1c01      	adds	r1, r0, #0
 8029322:	20fe      	movs	r0, #254	@ 0xfe
 8029324:	0580      	lsls	r0, r0, #22
 8029326:	f7d7 ffe5 	bl	80012f4 <__aeabi_fsub>
 802932a:	e79e      	b.n	802926a <__ieee754_expf+0x36>
 802932c:	4934      	ldr	r1, [pc, #208]	@ (8029400 <__ieee754_expf+0x1cc>)
 802932e:	1c20      	adds	r0, r4, #0
 8029330:	f7d7 fe86 	bl	8001040 <__aeabi_fmul>
 8029334:	4b33      	ldr	r3, [pc, #204]	@ (8029404 <__ieee754_expf+0x1d0>)
 8029336:	5959      	ldr	r1, [r3, r5]
 8029338:	f7d7 fac2 	bl	80008c0 <__aeabi_fadd>
 802933c:	f7d8 fa54 	bl	80017e8 <__aeabi_f2iz>
 8029340:	0005      	movs	r5, r0
 8029342:	f7d8 fa71 	bl	8001828 <__aeabi_i2f>
 8029346:	4930      	ldr	r1, [pc, #192]	@ (8029408 <__ieee754_expf+0x1d4>)
 8029348:	1c06      	adds	r6, r0, #0
 802934a:	f7d7 fe79 	bl	8001040 <__aeabi_fmul>
 802934e:	1c01      	adds	r1, r0, #0
 8029350:	1c20      	adds	r0, r4, #0
 8029352:	f7d7 ffcf 	bl	80012f4 <__aeabi_fsub>
 8029356:	492d      	ldr	r1, [pc, #180]	@ (802940c <__ieee754_expf+0x1d8>)
 8029358:	1c07      	adds	r7, r0, #0
 802935a:	1c30      	adds	r0, r6, #0
 802935c:	f7d7 fe70 	bl	8001040 <__aeabi_fmul>
 8029360:	9000      	str	r0, [sp, #0]
 8029362:	e7a0      	b.n	80292a6 <__ieee754_expf+0x72>
 8029364:	22d0      	movs	r2, #208	@ 0xd0
 8029366:	0592      	lsls	r2, r2, #22
 8029368:	4293      	cmp	r3, r2
 802936a:	d20c      	bcs.n	8029386 <__ieee754_expf+0x152>
 802936c:	4928      	ldr	r1, [pc, #160]	@ (8029410 <__ieee754_expf+0x1dc>)
 802936e:	1c20      	adds	r0, r4, #0
 8029370:	f7d7 faa6 	bl	80008c0 <__aeabi_fadd>
 8029374:	21fe      	movs	r1, #254	@ 0xfe
 8029376:	0589      	lsls	r1, r1, #22
 8029378:	f7d7 f8ee 	bl	8000558 <__aeabi_fcmpgt>
 802937c:	1e05      	subs	r5, r0, #0
 802937e:	d097      	beq.n	80292b0 <__ieee754_expf+0x7c>
 8029380:	21fe      	movs	r1, #254	@ 0xfe
 8029382:	0589      	lsls	r1, r1, #22
 8029384:	e75f      	b.n	8029246 <__ieee754_expf+0x12>
 8029386:	2500      	movs	r5, #0
 8029388:	e792      	b.n	80292b0 <__ieee754_expf+0x7c>
 802938a:	2080      	movs	r0, #128	@ 0x80
 802938c:	1c31      	adds	r1, r6, #0
 802938e:	05c0      	lsls	r0, r0, #23
 8029390:	f7d7 ffb0 	bl	80012f4 <__aeabi_fsub>
 8029394:	1c01      	adds	r1, r0, #0
 8029396:	9801      	ldr	r0, [sp, #4]
 8029398:	f7d7 fc84 	bl	8000ca4 <__aeabi_fdiv>
 802939c:	1c01      	adds	r1, r0, #0
 802939e:	9800      	ldr	r0, [sp, #0]
 80293a0:	f7d7 ffa8 	bl	80012f4 <__aeabi_fsub>
 80293a4:	1c39      	adds	r1, r7, #0
 80293a6:	f7d7 ffa5 	bl	80012f4 <__aeabi_fsub>
 80293aa:	1c01      	adds	r1, r0, #0
 80293ac:	20fe      	movs	r0, #254	@ 0xfe
 80293ae:	0580      	lsls	r0, r0, #22
 80293b0:	f7d7 ffa0 	bl	80012f4 <__aeabi_fsub>
 80293b4:	002b      	movs	r3, r5
 80293b6:	337d      	adds	r3, #125	@ 0x7d
 80293b8:	db02      	blt.n	80293c0 <__ieee754_expf+0x18c>
 80293ba:	05ec      	lsls	r4, r5, #23
 80293bc:	1824      	adds	r4, r4, r0
 80293be:	e74c      	b.n	802925a <__ieee754_expf+0x26>
 80293c0:	21d8      	movs	r1, #216	@ 0xd8
 80293c2:	3564      	adds	r5, #100	@ 0x64
 80293c4:	05ed      	lsls	r5, r5, #23
 80293c6:	1828      	adds	r0, r5, r0
 80293c8:	0509      	lsls	r1, r1, #20
 80293ca:	f7d7 fe39 	bl	8001040 <__aeabi_fmul>
 80293ce:	e74c      	b.n	802926a <__ieee754_expf+0x36>
 80293d0:	2400      	movs	r4, #0
 80293d2:	e742      	b.n	802925a <__ieee754_expf+0x26>
 80293d4:	42b17217 	.word	0x42b17217
 80293d8:	42cff1b5 	.word	0x42cff1b5
 80293dc:	3eb17218 	.word	0x3eb17218
 80293e0:	3f851591 	.word	0x3f851591
 80293e4:	0802e438 	.word	0x0802e438
 80293e8:	0802e430 	.word	0x0802e430
 80293ec:	3331bb4c 	.word	0x3331bb4c
 80293f0:	35ddea0e 	.word	0x35ddea0e
 80293f4:	388ab355 	.word	0x388ab355
 80293f8:	3b360b61 	.word	0x3b360b61
 80293fc:	3e2aaaab 	.word	0x3e2aaaab
 8029400:	3fb8aa3b 	.word	0x3fb8aa3b
 8029404:	0802e440 	.word	0x0802e440
 8029408:	3f317180 	.word	0x3f317180
 802940c:	3717f7d1 	.word	0x3717f7d1
 8029410:	7149f2ca 	.word	0x7149f2ca

08029414 <scalbn>:
 8029414:	004b      	lsls	r3, r1, #1
 8029416:	b570      	push	{r4, r5, r6, lr}
 8029418:	0d5b      	lsrs	r3, r3, #21
 802941a:	0014      	movs	r4, r2
 802941c:	000d      	movs	r5, r1
 802941e:	2b00      	cmp	r3, #0
 8029420:	d10f      	bne.n	8029442 <scalbn+0x2e>
 8029422:	004b      	lsls	r3, r1, #1
 8029424:	085b      	lsrs	r3, r3, #1
 8029426:	4303      	orrs	r3, r0
 8029428:	d012      	beq.n	8029450 <scalbn+0x3c>
 802942a:	4b23      	ldr	r3, [pc, #140]	@ (80294b8 <scalbn+0xa4>)
 802942c:	2200      	movs	r2, #0
 802942e:	f7d9 fa91 	bl	8002954 <__aeabi_dmul>
 8029432:	4b22      	ldr	r3, [pc, #136]	@ (80294bc <scalbn+0xa8>)
 8029434:	429c      	cmp	r4, r3
 8029436:	da0c      	bge.n	8029452 <scalbn+0x3e>
 8029438:	4a21      	ldr	r2, [pc, #132]	@ (80294c0 <scalbn+0xac>)
 802943a:	4b22      	ldr	r3, [pc, #136]	@ (80294c4 <scalbn+0xb0>)
 802943c:	f7d9 fa8a 	bl	8002954 <__aeabi_dmul>
 8029440:	e006      	b.n	8029450 <scalbn+0x3c>
 8029442:	4a21      	ldr	r2, [pc, #132]	@ (80294c8 <scalbn+0xb4>)
 8029444:	4293      	cmp	r3, r2
 8029446:	d108      	bne.n	802945a <scalbn+0x46>
 8029448:	0002      	movs	r2, r0
 802944a:	000b      	movs	r3, r1
 802944c:	f7d8 fa82 	bl	8001954 <__aeabi_dadd>
 8029450:	bd70      	pop	{r4, r5, r6, pc}
 8029452:	000d      	movs	r5, r1
 8029454:	004b      	lsls	r3, r1, #1
 8029456:	0d5b      	lsrs	r3, r3, #21
 8029458:	3b36      	subs	r3, #54	@ 0x36
 802945a:	4a1c      	ldr	r2, [pc, #112]	@ (80294cc <scalbn+0xb8>)
 802945c:	4294      	cmp	r4, r2
 802945e:	dd0a      	ble.n	8029476 <scalbn+0x62>
 8029460:	4c1b      	ldr	r4, [pc, #108]	@ (80294d0 <scalbn+0xbc>)
 8029462:	4d1c      	ldr	r5, [pc, #112]	@ (80294d4 <scalbn+0xc0>)
 8029464:	2900      	cmp	r1, #0
 8029466:	da01      	bge.n	802946c <scalbn+0x58>
 8029468:	4c19      	ldr	r4, [pc, #100]	@ (80294d0 <scalbn+0xbc>)
 802946a:	4d1b      	ldr	r5, [pc, #108]	@ (80294d8 <scalbn+0xc4>)
 802946c:	4a18      	ldr	r2, [pc, #96]	@ (80294d0 <scalbn+0xbc>)
 802946e:	4b19      	ldr	r3, [pc, #100]	@ (80294d4 <scalbn+0xc0>)
 8029470:	0020      	movs	r0, r4
 8029472:	0029      	movs	r1, r5
 8029474:	e7e2      	b.n	802943c <scalbn+0x28>
 8029476:	18e2      	adds	r2, r4, r3
 8029478:	4b18      	ldr	r3, [pc, #96]	@ (80294dc <scalbn+0xc8>)
 802947a:	429a      	cmp	r2, r3
 802947c:	dcf0      	bgt.n	8029460 <scalbn+0x4c>
 802947e:	2a00      	cmp	r2, #0
 8029480:	dd05      	ble.n	802948e <scalbn+0x7a>
 8029482:	4b17      	ldr	r3, [pc, #92]	@ (80294e0 <scalbn+0xcc>)
 8029484:	0512      	lsls	r2, r2, #20
 8029486:	402b      	ands	r3, r5
 8029488:	4313      	orrs	r3, r2
 802948a:	0019      	movs	r1, r3
 802948c:	e7e0      	b.n	8029450 <scalbn+0x3c>
 802948e:	0013      	movs	r3, r2
 8029490:	3335      	adds	r3, #53	@ 0x35
 8029492:	da08      	bge.n	80294a6 <scalbn+0x92>
 8029494:	4c0a      	ldr	r4, [pc, #40]	@ (80294c0 <scalbn+0xac>)
 8029496:	4d0b      	ldr	r5, [pc, #44]	@ (80294c4 <scalbn+0xb0>)
 8029498:	2900      	cmp	r1, #0
 802949a:	da01      	bge.n	80294a0 <scalbn+0x8c>
 802949c:	4c08      	ldr	r4, [pc, #32]	@ (80294c0 <scalbn+0xac>)
 802949e:	4d11      	ldr	r5, [pc, #68]	@ (80294e4 <scalbn+0xd0>)
 80294a0:	4a07      	ldr	r2, [pc, #28]	@ (80294c0 <scalbn+0xac>)
 80294a2:	4b08      	ldr	r3, [pc, #32]	@ (80294c4 <scalbn+0xb0>)
 80294a4:	e7e4      	b.n	8029470 <scalbn+0x5c>
 80294a6:	4b0e      	ldr	r3, [pc, #56]	@ (80294e0 <scalbn+0xcc>)
 80294a8:	3236      	adds	r2, #54	@ 0x36
 80294aa:	401d      	ands	r5, r3
 80294ac:	0512      	lsls	r2, r2, #20
 80294ae:	432a      	orrs	r2, r5
 80294b0:	0011      	movs	r1, r2
 80294b2:	4b0d      	ldr	r3, [pc, #52]	@ (80294e8 <scalbn+0xd4>)
 80294b4:	2200      	movs	r2, #0
 80294b6:	e7c1      	b.n	802943c <scalbn+0x28>
 80294b8:	43500000 	.word	0x43500000
 80294bc:	ffff3cb0 	.word	0xffff3cb0
 80294c0:	c2f8f359 	.word	0xc2f8f359
 80294c4:	01a56e1f 	.word	0x01a56e1f
 80294c8:	000007ff 	.word	0x000007ff
 80294cc:	0000c350 	.word	0x0000c350
 80294d0:	8800759c 	.word	0x8800759c
 80294d4:	7e37e43c 	.word	0x7e37e43c
 80294d8:	fe37e43c 	.word	0xfe37e43c
 80294dc:	000007fe 	.word	0x000007fe
 80294e0:	800fffff 	.word	0x800fffff
 80294e4:	81a56e1f 	.word	0x81a56e1f
 80294e8:	3c900000 	.word	0x3c900000

080294ec <with_errno>:
 80294ec:	b570      	push	{r4, r5, r6, lr}
 80294ee:	000d      	movs	r5, r1
 80294f0:	0016      	movs	r6, r2
 80294f2:	0004      	movs	r4, r0
 80294f4:	f7fc f952 	bl	802579c <__errno>
 80294f8:	0029      	movs	r1, r5
 80294fa:	6006      	str	r6, [r0, #0]
 80294fc:	0020      	movs	r0, r4
 80294fe:	bd70      	pop	{r4, r5, r6, pc}

08029500 <xflow>:
 8029500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029502:	0014      	movs	r4, r2
 8029504:	001d      	movs	r5, r3
 8029506:	2800      	cmp	r0, #0
 8029508:	d002      	beq.n	8029510 <xflow+0x10>
 802950a:	2180      	movs	r1, #128	@ 0x80
 802950c:	0609      	lsls	r1, r1, #24
 802950e:	185b      	adds	r3, r3, r1
 8029510:	9200      	str	r2, [sp, #0]
 8029512:	9301      	str	r3, [sp, #4]
 8029514:	9a00      	ldr	r2, [sp, #0]
 8029516:	9b01      	ldr	r3, [sp, #4]
 8029518:	0020      	movs	r0, r4
 802951a:	0029      	movs	r1, r5
 802951c:	f7d9 fa1a 	bl	8002954 <__aeabi_dmul>
 8029520:	2222      	movs	r2, #34	@ 0x22
 8029522:	f7ff ffe3 	bl	80294ec <with_errno>
 8029526:	b003      	add	sp, #12
 8029528:	bd30      	pop	{r4, r5, pc}

0802952a <__math_uflow>:
 802952a:	2380      	movs	r3, #128	@ 0x80
 802952c:	b510      	push	{r4, lr}
 802952e:	2200      	movs	r2, #0
 8029530:	055b      	lsls	r3, r3, #21
 8029532:	f7ff ffe5 	bl	8029500 <xflow>
 8029536:	bd10      	pop	{r4, pc}

08029538 <__math_oflow>:
 8029538:	23e0      	movs	r3, #224	@ 0xe0
 802953a:	b510      	push	{r4, lr}
 802953c:	2200      	movs	r2, #0
 802953e:	05db      	lsls	r3, r3, #23
 8029540:	f7ff ffde 	bl	8029500 <xflow>
 8029544:	bd10      	pop	{r4, pc}

08029546 <with_errnof>:
 8029546:	b570      	push	{r4, r5, r6, lr}
 8029548:	000d      	movs	r5, r1
 802954a:	1c04      	adds	r4, r0, #0
 802954c:	f7fc f926 	bl	802579c <__errno>
 8029550:	6005      	str	r5, [r0, #0]
 8029552:	1c20      	adds	r0, r4, #0
 8029554:	bd70      	pop	{r4, r5, r6, pc}

08029556 <xflowf>:
 8029556:	b510      	push	{r4, lr}
 8029558:	1c0b      	adds	r3, r1, #0
 802955a:	2800      	cmp	r0, #0
 802955c:	d002      	beq.n	8029564 <xflowf+0xe>
 802955e:	2380      	movs	r3, #128	@ 0x80
 8029560:	061b      	lsls	r3, r3, #24
 8029562:	18cb      	adds	r3, r1, r3
 8029564:	1c18      	adds	r0, r3, #0
 8029566:	f7d7 fd6b 	bl	8001040 <__aeabi_fmul>
 802956a:	2122      	movs	r1, #34	@ 0x22
 802956c:	f7ff ffeb 	bl	8029546 <with_errnof>
 8029570:	bd10      	pop	{r4, pc}

08029572 <__math_uflowf>:
 8029572:	2180      	movs	r1, #128	@ 0x80
 8029574:	b510      	push	{r4, lr}
 8029576:	0549      	lsls	r1, r1, #21
 8029578:	f7ff ffed 	bl	8029556 <xflowf>
 802957c:	bd10      	pop	{r4, pc}

0802957e <__math_oflowf>:
 802957e:	21e0      	movs	r1, #224	@ 0xe0
 8029580:	b510      	push	{r4, lr}
 8029582:	05c9      	lsls	r1, r1, #23
 8029584:	f7ff ffe7 	bl	8029556 <xflowf>
 8029588:	bd10      	pop	{r4, pc}
	...

0802958c <__ieee754_sqrt>:
 802958c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802958e:	000a      	movs	r2, r1
 8029590:	000d      	movs	r5, r1
 8029592:	496b      	ldr	r1, [pc, #428]	@ (8029740 <__ieee754_sqrt+0x1b4>)
 8029594:	0004      	movs	r4, r0
 8029596:	0003      	movs	r3, r0
 8029598:	0008      	movs	r0, r1
 802959a:	b087      	sub	sp, #28
 802959c:	4028      	ands	r0, r5
 802959e:	4288      	cmp	r0, r1
 80295a0:	d111      	bne.n	80295c6 <__ieee754_sqrt+0x3a>
 80295a2:	0022      	movs	r2, r4
 80295a4:	002b      	movs	r3, r5
 80295a6:	0020      	movs	r0, r4
 80295a8:	0029      	movs	r1, r5
 80295aa:	f7d9 f9d3 	bl	8002954 <__aeabi_dmul>
 80295ae:	0002      	movs	r2, r0
 80295b0:	000b      	movs	r3, r1
 80295b2:	0020      	movs	r0, r4
 80295b4:	0029      	movs	r1, r5
 80295b6:	f7d8 f9cd 	bl	8001954 <__aeabi_dadd>
 80295ba:	0004      	movs	r4, r0
 80295bc:	000d      	movs	r5, r1
 80295be:	0020      	movs	r0, r4
 80295c0:	0029      	movs	r1, r5
 80295c2:	b007      	add	sp, #28
 80295c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80295c6:	2d00      	cmp	r5, #0
 80295c8:	dc11      	bgt.n	80295ee <__ieee754_sqrt+0x62>
 80295ca:	0069      	lsls	r1, r5, #1
 80295cc:	0849      	lsrs	r1, r1, #1
 80295ce:	4321      	orrs	r1, r4
 80295d0:	d0f5      	beq.n	80295be <__ieee754_sqrt+0x32>
 80295d2:	2000      	movs	r0, #0
 80295d4:	4285      	cmp	r5, r0
 80295d6:	d010      	beq.n	80295fa <__ieee754_sqrt+0x6e>
 80295d8:	0022      	movs	r2, r4
 80295da:	002b      	movs	r3, r5
 80295dc:	0020      	movs	r0, r4
 80295de:	0029      	movs	r1, r5
 80295e0:	f7d9 fc9e 	bl	8002f20 <__aeabi_dsub>
 80295e4:	0002      	movs	r2, r0
 80295e6:	000b      	movs	r3, r1
 80295e8:	f7d8 fd7a 	bl	80020e0 <__aeabi_ddiv>
 80295ec:	e7e5      	b.n	80295ba <__ieee754_sqrt+0x2e>
 80295ee:	1528      	asrs	r0, r5, #20
 80295f0:	d115      	bne.n	802961e <__ieee754_sqrt+0x92>
 80295f2:	2480      	movs	r4, #128	@ 0x80
 80295f4:	2100      	movs	r1, #0
 80295f6:	0364      	lsls	r4, r4, #13
 80295f8:	e007      	b.n	802960a <__ieee754_sqrt+0x7e>
 80295fa:	0ada      	lsrs	r2, r3, #11
 80295fc:	3815      	subs	r0, #21
 80295fe:	055b      	lsls	r3, r3, #21
 8029600:	2a00      	cmp	r2, #0
 8029602:	d0fa      	beq.n	80295fa <__ieee754_sqrt+0x6e>
 8029604:	e7f5      	b.n	80295f2 <__ieee754_sqrt+0x66>
 8029606:	0052      	lsls	r2, r2, #1
 8029608:	3101      	adds	r1, #1
 802960a:	4222      	tst	r2, r4
 802960c:	d0fb      	beq.n	8029606 <__ieee754_sqrt+0x7a>
 802960e:	1e4c      	subs	r4, r1, #1
 8029610:	1b00      	subs	r0, r0, r4
 8029612:	2420      	movs	r4, #32
 8029614:	001d      	movs	r5, r3
 8029616:	1a64      	subs	r4, r4, r1
 8029618:	40e5      	lsrs	r5, r4
 802961a:	408b      	lsls	r3, r1
 802961c:	432a      	orrs	r2, r5
 802961e:	4949      	ldr	r1, [pc, #292]	@ (8029744 <__ieee754_sqrt+0x1b8>)
 8029620:	0312      	lsls	r2, r2, #12
 8029622:	1844      	adds	r4, r0, r1
 8029624:	2180      	movs	r1, #128	@ 0x80
 8029626:	0b12      	lsrs	r2, r2, #12
 8029628:	0349      	lsls	r1, r1, #13
 802962a:	4311      	orrs	r1, r2
 802962c:	07c0      	lsls	r0, r0, #31
 802962e:	d403      	bmi.n	8029638 <__ieee754_sqrt+0xac>
 8029630:	0fda      	lsrs	r2, r3, #31
 8029632:	0049      	lsls	r1, r1, #1
 8029634:	1851      	adds	r1, r2, r1
 8029636:	005b      	lsls	r3, r3, #1
 8029638:	2500      	movs	r5, #0
 802963a:	1062      	asrs	r2, r4, #1
 802963c:	0049      	lsls	r1, r1, #1
 802963e:	2480      	movs	r4, #128	@ 0x80
 8029640:	9205      	str	r2, [sp, #20]
 8029642:	0fda      	lsrs	r2, r3, #31
 8029644:	1852      	adds	r2, r2, r1
 8029646:	2016      	movs	r0, #22
 8029648:	0029      	movs	r1, r5
 802964a:	005b      	lsls	r3, r3, #1
 802964c:	03a4      	lsls	r4, r4, #14
 802964e:	190e      	adds	r6, r1, r4
 8029650:	4296      	cmp	r6, r2
 8029652:	dc02      	bgt.n	802965a <__ieee754_sqrt+0xce>
 8029654:	1931      	adds	r1, r6, r4
 8029656:	1b92      	subs	r2, r2, r6
 8029658:	192d      	adds	r5, r5, r4
 802965a:	0fde      	lsrs	r6, r3, #31
 802965c:	0052      	lsls	r2, r2, #1
 802965e:	3801      	subs	r0, #1
 8029660:	1992      	adds	r2, r2, r6
 8029662:	005b      	lsls	r3, r3, #1
 8029664:	0864      	lsrs	r4, r4, #1
 8029666:	2800      	cmp	r0, #0
 8029668:	d1f1      	bne.n	802964e <__ieee754_sqrt+0xc2>
 802966a:	2620      	movs	r6, #32
 802966c:	2780      	movs	r7, #128	@ 0x80
 802966e:	0004      	movs	r4, r0
 8029670:	9604      	str	r6, [sp, #16]
 8029672:	063f      	lsls	r7, r7, #24
 8029674:	183e      	adds	r6, r7, r0
 8029676:	46b4      	mov	ip, r6
 8029678:	428a      	cmp	r2, r1
 802967a:	dc02      	bgt.n	8029682 <__ieee754_sqrt+0xf6>
 802967c:	d114      	bne.n	80296a8 <__ieee754_sqrt+0x11c>
 802967e:	429e      	cmp	r6, r3
 8029680:	d812      	bhi.n	80296a8 <__ieee754_sqrt+0x11c>
 8029682:	4660      	mov	r0, ip
 8029684:	4666      	mov	r6, ip
 8029686:	19c0      	adds	r0, r0, r7
 8029688:	9100      	str	r1, [sp, #0]
 802968a:	2e00      	cmp	r6, #0
 802968c:	da03      	bge.n	8029696 <__ieee754_sqrt+0x10a>
 802968e:	43c6      	mvns	r6, r0
 8029690:	0ff6      	lsrs	r6, r6, #31
 8029692:	198e      	adds	r6, r1, r6
 8029694:	9600      	str	r6, [sp, #0]
 8029696:	1a52      	subs	r2, r2, r1
 8029698:	4563      	cmp	r3, ip
 802969a:	4189      	sbcs	r1, r1
 802969c:	4249      	negs	r1, r1
 802969e:	1a52      	subs	r2, r2, r1
 80296a0:	4661      	mov	r1, ip
 80296a2:	1a5b      	subs	r3, r3, r1
 80296a4:	9900      	ldr	r1, [sp, #0]
 80296a6:	19e4      	adds	r4, r4, r7
 80296a8:	0fde      	lsrs	r6, r3, #31
 80296aa:	0052      	lsls	r2, r2, #1
 80296ac:	1992      	adds	r2, r2, r6
 80296ae:	9e04      	ldr	r6, [sp, #16]
 80296b0:	005b      	lsls	r3, r3, #1
 80296b2:	3e01      	subs	r6, #1
 80296b4:	087f      	lsrs	r7, r7, #1
 80296b6:	9604      	str	r6, [sp, #16]
 80296b8:	2e00      	cmp	r6, #0
 80296ba:	d1db      	bne.n	8029674 <__ieee754_sqrt+0xe8>
 80296bc:	431a      	orrs	r2, r3
 80296be:	d01f      	beq.n	8029700 <__ieee754_sqrt+0x174>
 80296c0:	4e21      	ldr	r6, [pc, #132]	@ (8029748 <__ieee754_sqrt+0x1bc>)
 80296c2:	4f22      	ldr	r7, [pc, #136]	@ (802974c <__ieee754_sqrt+0x1c0>)
 80296c4:	6830      	ldr	r0, [r6, #0]
 80296c6:	6871      	ldr	r1, [r6, #4]
 80296c8:	683a      	ldr	r2, [r7, #0]
 80296ca:	687b      	ldr	r3, [r7, #4]
 80296cc:	9200      	str	r2, [sp, #0]
 80296ce:	9301      	str	r3, [sp, #4]
 80296d0:	6832      	ldr	r2, [r6, #0]
 80296d2:	6873      	ldr	r3, [r6, #4]
 80296d4:	9202      	str	r2, [sp, #8]
 80296d6:	9303      	str	r3, [sp, #12]
 80296d8:	9a00      	ldr	r2, [sp, #0]
 80296da:	9b01      	ldr	r3, [sp, #4]
 80296dc:	f7d9 fc20 	bl	8002f20 <__aeabi_dsub>
 80296e0:	0002      	movs	r2, r0
 80296e2:	000b      	movs	r3, r1
 80296e4:	9802      	ldr	r0, [sp, #8]
 80296e6:	9903      	ldr	r1, [sp, #12]
 80296e8:	f7d6 fef2 	bl	80004d0 <__aeabi_dcmple>
 80296ec:	2800      	cmp	r0, #0
 80296ee:	d007      	beq.n	8029700 <__ieee754_sqrt+0x174>
 80296f0:	6830      	ldr	r0, [r6, #0]
 80296f2:	6871      	ldr	r1, [r6, #4]
 80296f4:	683a      	ldr	r2, [r7, #0]
 80296f6:	687b      	ldr	r3, [r7, #4]
 80296f8:	1c67      	adds	r7, r4, #1
 80296fa:	d10c      	bne.n	8029716 <__ieee754_sqrt+0x18a>
 80296fc:	9c04      	ldr	r4, [sp, #16]
 80296fe:	3501      	adds	r5, #1
 8029700:	4a13      	ldr	r2, [pc, #76]	@ (8029750 <__ieee754_sqrt+0x1c4>)
 8029702:	106b      	asrs	r3, r5, #1
 8029704:	189b      	adds	r3, r3, r2
 8029706:	9a05      	ldr	r2, [sp, #20]
 8029708:	07ed      	lsls	r5, r5, #31
 802970a:	0864      	lsrs	r4, r4, #1
 802970c:	0512      	lsls	r2, r2, #20
 802970e:	4325      	orrs	r5, r4
 8029710:	0028      	movs	r0, r5
 8029712:	18d1      	adds	r1, r2, r3
 8029714:	e751      	b.n	80295ba <__ieee754_sqrt+0x2e>
 8029716:	f7d8 f91d 	bl	8001954 <__aeabi_dadd>
 802971a:	6877      	ldr	r7, [r6, #4]
 802971c:	6836      	ldr	r6, [r6, #0]
 802971e:	0002      	movs	r2, r0
 8029720:	000b      	movs	r3, r1
 8029722:	0030      	movs	r0, r6
 8029724:	0039      	movs	r1, r7
 8029726:	f7d6 fec9 	bl	80004bc <__aeabi_dcmplt>
 802972a:	2800      	cmp	r0, #0
 802972c:	d004      	beq.n	8029738 <__ieee754_sqrt+0x1ac>
 802972e:	3402      	adds	r4, #2
 8029730:	4263      	negs	r3, r4
 8029732:	4163      	adcs	r3, r4
 8029734:	18ed      	adds	r5, r5, r3
 8029736:	e7e3      	b.n	8029700 <__ieee754_sqrt+0x174>
 8029738:	2301      	movs	r3, #1
 802973a:	3401      	adds	r4, #1
 802973c:	439c      	bics	r4, r3
 802973e:	e7df      	b.n	8029700 <__ieee754_sqrt+0x174>
 8029740:	7ff00000 	.word	0x7ff00000
 8029744:	fffffc01 	.word	0xfffffc01
 8029748:	0802e450 	.word	0x0802e450
 802974c:	0802e448 	.word	0x0802e448
 8029750:	3fe00000 	.word	0x3fe00000

08029754 <_init>:
 8029754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029756:	46c0      	nop			@ (mov r8, r8)
 8029758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802975a:	bc08      	pop	{r3}
 802975c:	469e      	mov	lr, r3
 802975e:	4770      	bx	lr

08029760 <_fini>:
 8029760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029762:	46c0      	nop			@ (mov r8, r8)
 8029764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029766:	bc08      	pop	{r3}
 8029768:	469e      	mov	lr, r3
 802976a:	4770      	bx	lr
